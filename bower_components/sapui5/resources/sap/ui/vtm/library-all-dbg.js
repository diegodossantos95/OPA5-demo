// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.vtm.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.vtm.ArrayUtilities') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.ArrayUtilities'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/ArrayUtilities",
    ['jquery.sap.global'],
    function(jQuery) {

        "use strict";

        /**
         * A set of utility functions for working with arrays.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @namespace
         * @name  sap.ui.vtm.ArrayUtilities
         * @public
         * @author SAP SE
         * @version 1.50.3
         */
        var ArrayUtilities = {};

        /**
         * Returns whether a group of arrays have a non empty set intersection.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.haveIntersection
         * @param {Array} arrayOfArrays An array of arrays to check for the existence of a set intersection.
         * @param {function?} equalityFunction A function that returns a Boolean value to compare values within arrays. When not specified, strict equality (<code>===</code>) is used to compare values.
         * @return {boolean} Whether the arrays have a non empty set intersection.
         */
        ArrayUtilities.haveIntersection = function(arrayOfArrays, equalityFunction) {
            switch (arrayOfArrays.length) {
            case 0:
            case 1:
                throw "At least two arrays expected when finding intersection";
            default:
                var arrays = arrayOfArrays.slice();
                arrays.sort(function(a, b) { return a.length - b.length; });
                var smallestArray = arrays[0];
                var item;
                var itemsAreEqual = function(element) {
                    return equalityFunction(element, item);
                };
                for (var j = 0; j < smallestArray.length; j++) {
                    item = smallestArray[j];
                    var itemInAllArrays = true;
                    for (var k = 1; k < arrays.length; k++) {
                        var itemFound =  equalityFunction ? arrays[k].some(itemsAreEqual) : arrays[k].indexOf(item) !== -1;
                        if (!itemFound) {
                            itemInAllArrays = false;
                            break;
                        }
                    }
                    if (itemInAllArrays) {
                        return true;
                    }
                }
                return false;
            }
        };

        /**
         * Returns the set intersection of a group of arrays.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.intersect
         * @param {Array} arrayOfArrays An array of arrays to to find the set intersection of.
         * @param {function?} equalityFunction A function that returns a Boolean value to compare values within arrays. When not specified, strict equality (<code>===</code>) is used to compare values.
         * @return {Array} The set intersection of the arrays.
         */
        ArrayUtilities.intersect = function(arrayOfArrays, equalityFunction) {
            switch (arrayOfArrays.length) {
            case 0:
            case 1:
                throw "At least two arrays expected when finding intersection";
            default:
                var arrays = arrayOfArrays.slice();
                arrays.sort(function(a, b) { return a.length - b.length; });
                var intersection = [];
                var smallestArray = arrays[0];
                var item;
                var itemsAreEqual = function(element) {
                    return equalityFunction(element, item);
                };
                for (var j = 0; j < smallestArray.length; j++) {
                    item = smallestArray[j];
                    var itemInAllArrays = true;
                    for (var k = 1; k < arrays.length; k++) {
                        var itemFound =  equalityFunction ? arrays[k].some(itemsAreEqual) : arrays[k].indexOf(item) !== -1;
                        if (!itemFound) {
                            itemInAllArrays = false;
                            break;
                        }
                    }
                    if (itemInAllArrays) {
                        if (intersection.indexOf(item) === -1) {
                            intersection.push(item);
                        }
                    }
                }
                return intersection;
            }
        };

        /**
         * Returns the set union (as an array) of a group of arrays.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.union
         * @param {Array} arrayOfArrays An array of arrays to find the set union of.
         * @param {function?} equalityFunction A function that returns a Boolean value to compare values within arrays. When not specified, strict equality (<code>===</code>) is used to compare values.
         * @return {Array} The set union of the arrays.
         */
        ArrayUtilities.union = function(arrayOfArrays, equalityFunction) {
            var union = [];
            var item;
            var itemsAreEqual = function(element) {
                return equalityFunction(element, item);
            };
            for (var j = 0; j < arrayOfArrays.length; j++) {
                var array = arrayOfArrays[j];
                for (var i = 0; i < array.length; i++) {
                    item = array[i];
                    var itemFound = equalityFunction ? union.some(itemsAreEqual) : union.indexOf(item) !== -1;
                    if (!itemFound) {
                        union.push(item);
                    }
                }
            }
            return union;
        };

        /**
         * Converts an array to an ES6 Set.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.toSet
         * @param {Array} array The array to convert to a Set.
         * @return {Set} The Set containing the same set of unique items as the array.
         */
        ArrayUtilities.toSet = function(array) {
            var set = new Set();
            array.forEach(function(item) {
                set.add(item);
            });
            return set;
        };

        /**
         * Converts an ES6 Set to an array.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.fromSet
         * @param {Set} set The Set to convert to an array.
         * @return {Array} The array containing the same set of unique items as the Set.
         */
        ArrayUtilities.fromSet = function(set) {
            var array = [];
            set.forEach(function(item) {
                array.push(item);
            });
            return array;
        };

        /**
         * Converts from an array-like object (an object that supports indexing and has a length) to an array.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.fromArrayLike
         * @param {object} arrayLike The array-like object to convert to an array.
         * @return {Array} The array containing the same values as the array-like object.
         */
        ArrayUtilities.fromArrayLike = function(arrayLike) {
            var array = [];
            for (var i = 0; i < arrayLike.length; i++) {
                array.push(arrayLike[i]);
            }
            return array;
        };

        /**
         * Wraps an item in an array if it is not already an array.
         *
         * <ul>
         * <li>If the parameter is an array, the parameter is returned.</li>
         * <li>If the parameter is <code>undefined</code> an empty array is returned.</li>
         * <li>Otherwise a single element array containing the parameter value is returned.</li>
         * </ul>
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.wrap
         * @param {any} item The item to wrap as an array if it is not already an array.
         * @return {Array} The parameter if it is an array, otherwise returns a single element array containing the parameter value
         */
        ArrayUtilities.wrap = function(item) {
            if (item === undefined) {
                return [];
            } else if (Array.isArray(item)) {
                return item;
            }
            return [item];
        };

        /**
         * The inverse of {@link sap.ui.vtm.ArrayUtilities.wrap}.
         *
         * <ul>
         * <li>If the parameter is not an array, the parameter is returned.</li>
         * <li>If the parameter is an array of length 0, <code>undefined</code> is returned.</li>
         * <li>If the parameter is an array of length 1, the first element of the array is returned.</li>
         * <li>Otherwise if the parameter is an array of length > 1, the parameter is returned (as an array).</li>
         * </ul>
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.unwrap
         * @param {any} item The item to unwrap.
         * @return {any|Array|undefined} The unwrapped value.
         */
        ArrayUtilities.unwrap = function(item) {
            if (Array.isArray(item)) {
                if (item.length == 0) {
                    return undefined;
                } else if (item.length == 1) {
                    return item[0];
                } else {
                    return item;
                }
            } else {
                return item;
            }
        };

        /**
         * Returns <code>true</code> if a group of arrays are equal.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.areEqual
         * @param {Array} arrayOfArrays The array of arrays to compare.
         * @param {function?} equalityFunc A function that takes two parameters and returns a boolean value indicating whether the parameter values are equal.
         * @returns {boolean} <code>true</code> if the all the arrays are equal.
         */
        ArrayUtilities.areEqual = function(arrayOfArrays, equalityFunc) {
            if (!equalityFunc) {
                equalityFunc = function(item1, item2) { return item1 === item2; };
            }
            var firstArray = arrayOfArrays[0];
            var remainingArrays = arrayOfArrays.slice(1);
            var length = firstArray.length;
            var allSameLength = remainingArrays.every(function(array) {
                return length === array.length;
            });
            if (!allSameLength) {
                return false;
            }
            return remainingArrays.every(function(array){
                return array.every(function(item, index) {
                    return equalityFunc(item, firstArray[index]);
                });
            }); 
        };

        /**
         * Creates a copy of an array in which the items are copied by reference rather than being cloned.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.shallowClone
         * @param {Array} array The array to clone.
         * @returns {Array} The cloned array
         */
        ArrayUtilities.shallowClone = function (array) {
            return array.slice(0);
        };

        /**
         * Creates a copy of an array in which the items are cloned.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.deepClone
         * @param {Array} array The array to clone.
         * @param {function} itemCloneFunc A function used to clone an item of the array.
         * The function has an argument that takes an item of the type stored in the array and returns an item of the same type.
         * @returns {Array} The cloned array
         */
        ArrayUtilities.deepClone = function (array, itemCloneFunc) {
            if (!itemCloneFunc) {
                return undefined;
            }

            return array.map(
                function (item) { return itemCloneFunc(item); });
        };

        /**
         * Returns the first item in an array that matches the supplied predicate or returns undefined if no match is found.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.find
         * @param {Array} array The array to search.
         * @param {function} predicate A function that takes a value of the type stored in the array and returns a boolean value (true if the item is a match.
         * @returns {any|undefined} The matching item or undefined if no match was found.
         */
        ArrayUtilities.find = function (array, predicate) {
            for (var i = 0; i < array.length; i++) {
                var item = array[i];
                if (predicate(item)) {
                    return item;
                }
            }
            return undefined;
        };

        /**
         * Returns the index of the first item in an array that matches the supplied predicate or returns -1 if no match is found.
         * @public
         * @function
         * @name sap.ui.vtm.ArrayUtilities.findIndex
         * @param {Array} array The array to search.
         * @param {function} predicate A function that takes a value of the type stored in the array and returns a boolean value (true if the item is a match.
         * @returns {number} The index of the matching item or -1 if no match was found.
         */
        ArrayUtilities.findIndex = function (array, predicate) {
            for (var i = 0; i < array.length; i++) {
                if (predicate(array[i])) {
                    return i;
                }
            }
            return -1;
        };

        /**
         * Flattens an array of arrays down to an array.
         * @public
         * @static
         * @function
         * @name sap.ui.vtm.ArrayUtilities.flatten
         * @param {Array} arrayOfArrays An array of arrays.
         * @returns {Array} A flattened array.
         */
        ArrayUtilities.flatten = function (arrayOfArrays) {
            return [].concat.apply([], arrayOfArrays);
        };

        return ArrayUtilities;
    },
    true);

}; // end of sap/ui/vtm/ArrayUtilities.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.ChildCollectionType') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.ChildCollectionType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vtm/ChildCollectionType",[],
    function () {
        "use strict";

        /**
         * Enumeration specifying which tree item child collections an operation should apply to.
         *
         * @enum {string}
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This type is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
         */
        sap.ui.vtm.ChildCollectionType = {

            /**
             * The operation should not apply to either the <code>includedChildren</code> or <code>excludedChildren</code> collection of the tree item.
             * @public
             */
            None: "None",

            /**
             * The operation should apply to the <code>includedChildren</code> collection of the tree item only.
             * @public
             */
            Included: "Included",

            /**
             * The operation should apply to the <code>excludedChildren</code> collection of the tree item only.
             * @public
             */
            Excluded: "Excluded",

            /**
             * The operation should apply to the <code>includedChildren</code> and the <code>excludedChildren</code> collection of the tree item.
             * @public
             */
            IncludedAndExcluded: "IncludedAndExcluded"
        };

        return sap.ui.vtm.ChildCollectionType;
    });
}; // end of sap/ui/vtm/ChildCollectionType.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Column') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.Column'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Column",
    ["jquery.sap.global", "sap/ui/core/Element", "sap/ui/commons/Label"],
    function (jQuery, SapUiCoreElement, SapUiCommonsLabel) {

        "use strict";

        /**
         * Constructor for a new Column.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.Column
         * @public
         * @class
         * Represents a data column for a {@link sap.ui.vtm.Tree}.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId An optional ID for the {@link sap.ui.vtm.Column}.
         * @param {object?} mSettings An optional object with initial settings for the new {@link sap.ui.vtm.Column} instance.
         * @extends sap.ui.core.Element
         */
        var Column = SapUiCoreElement.extend("sap.ui.vtm.Column", /** @lends sap.ui.vtm.Column.prototype */ {

            metadata: {
                properties:{
                    /**
                     * The type of column.
                     */
                    type: { type: "sap.ui.vtm.ColumnType" },

                    /**
                     * The descriptor is a JSON string identifying the column.
                     *
                     * When the type property has a value of {@link sap.ui.vtm.ColumnType.Metadata} the descriptor property has the following form:
                     * <code>'{"category":"SAP","field":"MATERIAL"}'</code><br>
                     * Such descriptors can be constructed using {@link sap.ui.vtm.DescriptorUtilities.createMetadataDescriptor}.
                     *
                     * When the type property has a value of {@link sap.ui.vtm.ColumnType.Identifier} the descriptor property has the following form:
                     * <code>'{"source":"SAP","type":"VE_COMPONENT"}'</code><br>
                     * Such descriptors can be constructed using {@link sap.ui.vtm.DescriptorUtilities.createIdentifierDescriptor}.
                     *
                     * When the type property has a value of {@link sap.ui.vtm.ColumnType.AppData} the descriptor property has the following form:
                     * <code>'bomId'</code>
                     */
                    descriptor: { type: "string" },

                    /**
                     * A localized string to show in the column header tooltip.
                     * If unspecified, the label value will be used as the column header tooltip.
                     */
                    tooltip: { type: "string", defaultValue : null },

                    /**
                     * The horizontal alignment for the tree column.
                     */
                    hAlign: {type: "sap.ui.core.HorizontalAlign", defaultValue: "Left"},

                    /**
                     * The width of the tree column.
                     */
                    width: {type: "sap.ui.core.CSSSize", defaultValue: "200px"},

                    /**
                     * If set to true, the column can be resized.
                     */
                    resizable: {type: "boolean", defaultValue: true},

                    /**
                     * A textual name for the column.
                     * This is also used in the {@link sap.ui.vtm.ColumnSelectionDialog}, so it should be included whether or not the <code>labelControl</code> property is used.
                     */
                    label: {type: "string" },

                    /**
                     * A {@link sap.ui.core.Control} that is used in the column header.
                     * When specified, this is used in preference to the <code>label</code> property as the column header content.
                     * However the <code>label</code> property should also be specified since it is used in the used in the {@link sap.ui.vtm.ColumnSelectionDialog}.
                     */
                    labelControl : {type : "object"},

                    /**
                     * If defined, this is a function that specifies the formatting of cell content text for this column.<br/>
                     * The function must return a string containing the text to display in the cell (or null) for a given tree item.<br/>
                     * The first parameter to the function (which may not always be defined) is the tree item for the tree table row.
                     */
                    valueFormatter: {type: "any"},

                    /**
                     * If defined, this is a function that specifies the formatting of cell content tooltips for this column (overriding the default behaviour).<br/>
                     * Not used if a custom template is specified.<br/>
                     * The function must return a string containing the text to display in the tooltip (or null) for a given tree item.<br/>
                     * The first parameter to the function (which may not always be defined) is the tree item for the tree table row.
                     */
                    tooltipFormatter: {type: "any"},
                    
                    /**
                     * If defined, overrides the cell template for the column.<br/>
                     * If this is defined, the <code>valueFormatter</code> and <code>tooltipFormatter</code> properties are ignored.
                     */
                    template: {type: "sap.ui.core.Control"}
                }
            },

            constructor: function(sId, mSettings) {
                if (jQuery.type(sId) == "object") {
                    mSettings = sId;
                    sId = mSettings.id;
                }
                SapUiCoreElement.apply(this, [sId, {}]);

                if (mSettings){
                   if (mSettings.type) {
                       this.setType(mSettings.type);
                   }
                   if (mSettings.descriptor) {
                       this.setDescriptor(mSettings.descriptor);
                   }
                   if (mSettings.label) {
                       this.setLabel(mSettings.label);
                   }
                   if (mSettings.labelControl) {
                       this.setLabelControl(mSettings.labelControl);
                   }
                   if (mSettings.tooltip) {
                       this.setTooltip(mSettings.tooltip);
                   }
                   if (mSettings.hAlign) {
                       this.setHAlign(mSettings.hAlign);
                   }
                   if (mSettings.width) {
                       this.setWidth(mSettings.width);
                   }
                   if (mSettings.resizable === true || mSettings.resizable === false) {
                       this.setResizable(mSettings.resizable);
                   }
                   if (mSettings.valueFormatter) {
                       this.setValueFormatter(mSettings.valueFormatter);
                   }
                   if (mSettings.tooltipFormatter) {
                       this.setTooltipFormatter(mSettings.tooltipFormatter);
                   }
                   if (mSettings.template) {
                       this.setTemplate(mSettings.template);
                   }
                }
            }
        });

        return Column;
    });
}; // end of sap/ui/vtm/Column.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.ColumnTemplates') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.ColumnTemplates'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/ColumnTemplates",[
        'jquery.sap.global'
    ],
    function(
        jQuery) {
        "use strict";

        /**
         * A set of utility functions for creating the built-in tree column templates.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @private
         * @namespace
         * @name sap.ui.vtm.ColumnTemplates
         * @author SAP SE
         * @version 1.50.3
         */
        var ColumnTemplates = {};

        /**
         * Creates a textual column with a set of formatters for cell values and tooltip values.
         * @private
         * @function
         * @param {string} labelPath The binding path to use for the cell text.
         * @param {function} labelFormatter The formatter to use for the cell text.
         * @param {string} tooltipPath The binding path to use for the tooltip text (if unspecified, <code>labelPath</code> is used).
         * @param {function} tooltipFormatter The formatter to use for the tooltip text (if unspecified, <code>labelFormatter</code> is used).
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createBasicColumnTemplate = function(labelPath, labelFormatter, tooltipPath, tooltipFormatter) {
            if (!tooltipPath) { tooltipPath = labelPath; }
            if (!tooltipFormatter) { tooltipFormatter = labelFormatter; }
            var template = new sap.m.Text({wrapping: false});
            template.bindProperty("text", {path: labelPath, formatter: labelFormatter});
            template.bindProperty("tooltip", {path: tooltipPath, formatter: tooltipFormatter});
            return template;
        };

        /**
         * Creates a column template for the {@link sap.ui.vtm.InternalColumnDescriptors.Tree} internal column.
         * @private
         * @function
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createTreeColumnTemplate = function () {
            var icon = new sap.ui.core.Icon({
                decorative: false,
                src: "{iconUrl}",
                color: "{iconColor}",
                tooltip: "{iconTooltip}"
            });
            icon.addStyleClass("sapUiVtmTree_TreeColumn_Icon");
            icon.bindProperty("visible", {
                path: "iconUrl",
                formatter: function(iconUrl) { return iconUrl ? true : false; }
            });
            var nameTextView = new sap.ui.vtm.Text({
                wrapping: false,
                text: "{name}",
                tooltip: "{name}",
                textColor: "{textColor}"
            });
            nameTextView.addStyleClass("sapUiVtmTree_TreeColumn_NameText");
            var nameColumnTemplate = new sap.m.HBox({
                items: [icon, nameTextView],
                alignContent: sap.m.FlexAlignContent.Center,
                alignItems: sap.m.FlexAlignItems.Center
            });
            return nameColumnTemplate;
        };

        /**
         * Creates a column template for the {@link sap.ui.vtm.InternalColumnDescriptors.MessageStatus} internal column.
         * @private
         * @function
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createMessageStatusColumnTemplate = function () {
            var messageStatusIcon = new sap.ui.core.Icon({
                decorative: false,
                useIconTooltip: false,
                src: "{messageStatusIconUrl}",
                color: "{messageStatusIconColor}",
                tooltip: "{messageStatusIconTooltip}"
            });
            return messageStatusIcon;
        };

        /**
         * Creates a column template for the {@link sap.ui.vtm.InternalColumnDescriptors.Visibility} internal column.
         * @private
         * @function
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createVisibilityColumnTemplate = function () {
            var rb = sap.ui.vtm.getResourceBundle();
            var clickToShowString = rb.getText("COLUMNCELLTOOLTIP_VISIBILITY_CLICK_TO_SHOW");
            var clickToHideString = rb.getText("COLUMNCELLTOOLTIP_VISIBILITY_CLICK_TO_HIDE");

            var checkEye = new sap.ui.vk.CheckEye();
            checkEye.bindProperty("tooltip", {
                path: "",
                formatter: function(treeItem) {
                    if (!treeItem || treeItem.visibility == null) { return null; }
                    return treeItem.visibility ? clickToHideString : clickToShowString;
                }
            });
            checkEye.bindProperty("checked", {
                path: "visibility",
                mode: sap.ui.model.BindingMode.OneWay
            });
            checkEye.bindProperty("visible", {
                path: "",
                formatter: function(treeItem) {
                    if (!treeItem) { return false; }
                    return treeItem.visibility === true || treeItem.visibility === false;
                }
            });
            return checkEye;
        };

        /**
         * Creates a column template for the {@link sap.ui.vtm.InternalColumnDescriptors.TreeItemId} internal column.
         * @private
         * @function
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createTreeItemIdColumnTemplate = function () {
            return ColumnTemplates.createBasicColumnTemplate("id");
        };

        ColumnTemplates._formatValue = function(value) {
            if (value == undefined || value === null) {
                return null;
            }
            switch (typeof value) {
            case "string":
                return value;
            case "number":
                return value.toLocaleString();
            case "boolean":
                if (!ColumnTemplates._true || !ColumnTemplates._false) {
                    var rb = sap.ui.vtm.getResourceBundle();
                    ColumnTemplates._trueString = rb.getText("BOOLEAN_TRUE");
                    ColumnTemplates._falseString = rb.getText("BOOLEAN_FALSE");
                }
                return value ? ColumnTemplates._trueString : ColumnTemplates._falseString;
            default:
                return JSON.stringify(value);
            }
        };

        /**
         * Creates a default formatter for a metadata column
         * @private
         * @param {string} descriptorString The descriptor that identifies the metadata column.
         * @param {string} valueSeparator The string used to separate metadata values when there are multiple metadata of the given type.
         * @returns {function} The default formatter for the metadata column.
         */
        ColumnTemplates.metadataFormatterFactory = function (descriptorString, valueSeparator) {
            return function (treeItem) {
                if (!treeItem || !treeItem.metadata) { return null; }
                var values = sap.ui.vtm.ArrayUtilities.wrap(treeItem.metadata[descriptorString]);
                var formattedValues = values.map(ColumnTemplates._formatValue);
                return formattedValues.join(valueSeparator);
            };
        };

        /**
         * Creates a column template for an metadata column.
         * @private
         * @function
         * @param {sap.ui.vtm.Column} column The column definition
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createMetadataColumnTemplate = function (column) {
            var labelFormatter = column.getValueFormatter() || ColumnTemplates.metadataFormatterFactory(column.getDescriptor(), ", ");
            var tooltipFormatter = column.getTooltipFormatter() || ColumnTemplates.metadataFormatterFactory(column.getDescriptor(), "\n");
            return ColumnTemplates.createBasicColumnTemplate("", labelFormatter, "", tooltipFormatter);
        };

        /**
         * Creates a default formatter for an identifier column
         * @private
         * @param {string} descriptorString The descriptor that identifies the identifier column.
         * @param {string} valueSeparator The string used to separate identifier values when there are multiple identifiers of the given type.
         * @returns {function} The default formatter for the identifier column.
         */
        ColumnTemplates.identifierFormatterFactory = function (descriptorString, valueSeparator) {
            return function (treeItem) {
                if (!treeItem || !treeItem.identifiers) { return null; }
                var value = treeItem.identifiers[descriptorString];
                return (value instanceof Array) ? value.join(valueSeparator) : value;
            };
        };

        /**
         * Creates a column template for an identifier column.
         * @private
         * @function
         * @param {sap.ui.vtm.Column} column The column definition
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createIdentifierColumnTemplate = function (column) {
            var labelFormatter = column.getValueFormatter() || ColumnTemplates.identifierFormatterFactory(column.getDescriptor(), ", ");
            var tooltipFormatter = column.getTooltipFormatter() || ColumnTemplates.identifierFormatterFactory(column.getDescriptor(), "\n");
            return ColumnTemplates.createBasicColumnTemplate("", labelFormatter, "", tooltipFormatter);
        };

        /**
         * Creates a default formatter for an application data column
         * @private
         * @param {string} descriptorString The descriptor that identifies the application data column.
         * @param {string} valueSeparator The string used to separate values when there are multiple values of the given type.
         * @returns {function} The default formatter for the application data column.
         */
        ColumnTemplates.appDataFormatterFactory = function (descriptorString, valueSeparator) {
            return function (treeItem) {
                if (!treeItem || !treeItem.appData) { return null; }
                var values = sap.ui.vtm.ArrayUtilities.wrap(treeItem.appData[descriptorString]);
                var formattedValues = values.map(ColumnTemplates._formatValue);
                return formattedValues.join(valueSeparator);
            };
        };

        /**
         * Creates a column template for an application data column.
         * @private
         * @function
         * @param {sap.ui.vtm.Column} column The column definition
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createAppDataColumnTemplate = function (column) {
            var labelFormatter = column.getValueFormatter() || ColumnTemplates.appDataFormatterFactory(column.getDescriptor(), ", ");
            var tooltipFormatter = column.getTooltipFormatter() || ColumnTemplates.appDataFormatterFactory(column.getDescriptor(), "\n");
            return ColumnTemplates.createBasicColumnTemplate("", labelFormatter, "", tooltipFormatter);
        };

        /**
         * Creates a formatter function for a matrix column.
         * @private
         * @function
         * @param {string} componentFormatString The format string to construct a string for a component.
         *                 {0} is the component name, {1} is the component value.
         * @param {string} componentSeparator The string to use to separate components of a matrix value.
         * @return {function} Returns a formatter for a matrix column.
         */
        ColumnTemplates.matrixFormatterFactory = function (componentFormatString, componentSeparator) {
            return function (matrix) {
                if (!matrix) { return null; }
                var componentNames = sap.ui.vtm.MatrixUtilities.getMatrixComponentNames();
                var parts = matrix.map(function(component, i) {
                    var componentString = component.toLocaleString();
                    return jQuery.sap.formatMessage(componentFormatString, [componentNames[i], componentString]);
                });
                return parts.join(componentSeparator);
            };
        };

        /**
         * Creates a column template for the "absoluteMatrix" internal column.
         * @private
         * @function
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createAbsoluteMatrixColumnTemplate = function () {
            return ColumnTemplates.createBasicColumnTemplate(
                "absoluteMatrix",
                ColumnTemplates.matrixFormatterFactory("{1}", " "),
                "absoluteMatrix",
                ColumnTemplates.matrixFormatterFactory("{0}:\t{1}", "\n"));
        };

        /**
         * Creates a column template for the "relativeMatrix" internal column.
         * @private
         * @function
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createRelativeMatrixColumnTemplate = function () {
            return ColumnTemplates.createBasicColumnTemplate(
                "relativeMatrix",
                ColumnTemplates.matrixFormatterFactory("{1}", " "),
                "relativeMatrix",
                ColumnTemplates.matrixFormatterFactory("{0}:\t{1}", "\n"));
        };

        /**
         * Creates a column template for the {@link sap.ui.vtm.InternalColumnDescriptors.SceneNodeIds} internal column.
         * @private
         * @function
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createSceneNodeIdsColumnTemplate = function() {
            var formatter = function(treeItem) {
                if (!treeItem) { return null; }
                return sap.ui.vtm.TreeItemUtilities.getSceneNodeIds(treeItem).join(", ");
            };
            return ColumnTemplates.createBasicColumnTemplate("", formatter);
        };

        /**
         * Creates a column template for the {@link sap.ui.vtm.InternalColumnDescriptors.Opacity} internal column.
         * @private
         * @function
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createOpacityColumnTemplate = function() {
            var formatter = function(treeItem) {
                if (!treeItem || treeItem.opacity === undefined || treeItem.opacity === null) { return null; }
                return "" + treeItem.opacity * 100 + "%";
            };
            return ColumnTemplates.createBasicColumnTemplate("", formatter);
        };

        /**
         * Creates a column template for the {@link sap.ui.vtm.InternalColumnDescriptors.HighlightColor} internal column.
         * @private
         * @function
         * @return {sup.ui.core.Control} The column template.
         */
        ColumnTemplates.createHighlightColorColumnTemplate = function() {
            var formatter = function(treeItem) {
                if (!treeItem || treeItem.highlightColor === undefined || treeItem.sceneHighlightColor === null) { return null; }
                return treeItem.highlightColor;
            };
            return ColumnTemplates.createBasicColumnTemplate("", formatter);
        };

        return ColumnTemplates;
    },
    true);

}; // end of sap/ui/vtm/ColumnTemplates.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.ColumnType') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.ColumnType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vtm/ColumnType",[],
    function () {
        "use strict";

        /**
         * Enumeration specifying types of {@link sap.ui.vtm.Column}.
         *
         * @enum {string}
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This type is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
         */
        sap.ui.vtm.ColumnType = {

            /**
             * The Metadata column type.
             * This type of column represents metadata retrieved from viewables (or metadata values supplied by the application which will be present in exported viewables).
             * @public
             */
            Metadata : "Metadata",

            /**
             * The Identifier column type.
             * This type of column represents identifiers retrieved from viewables (or metadata values supplied by the application which will be present in exported viewables).
             * @public
             */
            Identifier : "Identifier",

            /**
             * The AppData (application data) column type.
             * This type of column represents application data that is neither metadata nor identifier data.
             * @public
             */
            AppData : "AppData",

            /**
             * The Internal column type.
             * Columns of this type:
             * <ul>
             * <li>Should not be used for application data (all columns of this type are defined by VTM).</li>
             * <li>Is not normally expected to be used by end users (columns of this type are typically expected to be used for development/debugging).</li>
             * </ul>
             * @public
             */
            Internal : "Internal"
        };

        return sap.ui.vtm.ColumnType;
    });
}; // end of sap/ui/vtm/ColumnType.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.DescriptorUtilities') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.DescriptorUtilities'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/DescriptorUtilities",
    ['jquery.sap.global'],
    function(jQuery) {

        "use strict";

        /**
         * A set of utility functions for working with metadata and identifier descriptors.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @namespace
         * @name  sap.ui.vtm.DescriptorUtilities
         * @public
         * @author SAP SE
         * @version 1.50.3
         */
        var DescriptorUtilities = {};

        /**
         * Creates a descriptor for a metadata field.
         * @public
         * @function
         * @name sap.ui.vtm.DescriptorUtilities.createMetadataDescriptor
         * @param {string} category The category name.
         * @param {string} field The field name.
         * @returns {string} The descriptor representing the metadata field.
         */
        DescriptorUtilities.createMetadataDescriptor = function(category, field) {
            return JSON.stringify({
                category: category,
                field: field
            });
        };

        /**
         * Creates a descriptor for an identifier.
         * @public
         * @function
         * @name sap.ui.vtm.DescriptorUtilities.createIdentifierDescriptor
         * @param {string} source The identifier source.
         * @param {string} type The identifier type.
         * @returns {string} The descriptor representing the identifier.
         */
        DescriptorUtilities.createIdentifierDescriptor = function(source, type) {
            return JSON.stringify({
                source: source,
                type: type
            });
        };

        return DescriptorUtilities;
    },
    true);
}; // end of sap/ui/vtm/DescriptorUtilities.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.DisplayGroup') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.DisplayGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/DisplayGroup",
    ["jquery.sap.global", "sap/ui/core/Element"],
    function (jQuery, SapUiCoreElement) {

        "use strict";

        /**
         * Constructor for a new DisplayGroup.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.DisplayGroup
         * @public
         * @class
         * This class is used to represent display states for a set of scene nodes.
         * The same display state need not be used for all of the scene nodes in the set.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string] sId An optional ID for the {@link sap.ui.vtm.DisplayGroup}.
         * @param {object} [mSettings] An optional object with initial settings for the new {@link sap.ui.vtm.DisplayGroup} instance.
         * @extends sap.ui.core.Element
         */
        var DisplayGroup = SapUiCoreElement.extend("sap.ui.vtm.DisplayGroup", /** @lends sap.ui.vtm.DisplayGroup.prototype */ {
            metadata: {
                properties: {

                    /**
                     * A plain object map that uses scene node id as the key and a display state object as the value.
                     * The display state is a plain JavaScript object that can contain the following properties:
                     * <ul>
                     * <li>visibility - If defined, this boolean value specifies the scene node visibility</li>
                     * <li>opacity - If defined, this numeric value between 0 and 100 inclusive defines the scene node opacity.<br/>
                     * </li>
                     * <li>highlightColor - If defined, this string value defines the scene node highlight color.</li>
                     * If an empty string (<code>""</code>) is used, the highlight color is cleared, otherwise the value is expected to be a {@link sap.ui.core.CSSColor}.</li>
                     * <li>recursive - If <code>true</code> this display state will be applied to the scene node and its descendants.</li>
                     * </ul>
                     * For example:
                     * <code><pre>
                     * {
                     *   visibility: true,
                     *   opacity: 100,
                     *   highlightColor: "red",
                     *   recursive: false
                     * }</pre></code>
                     * Display state objects can be reused multiple times in the map to reduce memory usage.
                     */
                    displayStatesBySceneNodeId: {
                        type: "object",
                        defaultValue: {}
                    }
                }
            }
        });

        return DisplayGroup;
    },
    true);
}; // end of sap/ui/vtm/DisplayGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Extension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.Extension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Extension",
    ["jquery.sap.global", "sap/ui/core/Element"],
    function (jQuery, SapUiCoreElement) {

        "use strict";

        /**
         * This class is an abstract class that is not intended to be instantiated directly.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.Extension
         * @public
         * @class
         * A base class for extensions.
         * 
         * Extensions provide an extensibility mechanism through which behaviors can be added, allowing for a default set of behaviors that can be
         * overridden by application developers. Extensions react to events raised by VTM elements/controls or other extensions.
         * 
         * Derived classes should provide their own {@link #initialize} implementation.
         * Extensions are expected to be as independent from one another as possible.
         * 
         * Extensions implement interfaces to indicate the functional role(s) that they fulfill.
         * Extensions can be found by interface calling {@link sap.ui.vtm.Vtm#getExtensionByInterface getExtensionByInterface}.
         * Specific extensions can be found using  {@link sap.ui.vtm.Vtm#getExtensionByName getExtensionByName}.
         * Typically extensions are retrieved using these methods in order to get or set their <code>enabled</code> property.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.m.Extension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.m.Extension} instance.
         * @extends sap.ui.core.Element
         */
        var Extension = SapUiCoreElement.extend("sap.ui.vtm.Extension", /** @lends sap.ui.vtm.Extension.prototype */ {

            metadata: {
                properties: {
                    /**
                     * Controls whether the extension is enabled.
                     */
                    enabled: {
                        type: "boolean",
                        defaultValue: true,
                        bindable: true
                    }
                },
                events: {
                    /**
                     * Fired when the enabled property is changed.
                     */
                    enabledChanged: {
                    },

                    /**
                     * Fired when initialization has completed.
                     */
                    initialized: {
                    }
                }
            },

            constructor: function (sId, mSettings) {
                SapUiCoreElement.apply(this, arguments);
                var fnSetParent = this.setParent;
                this.setParent = function(oParent, sAggregationName, bSuppressInvalidate) {
                    var returnValue = fnSetParent.apply(this, arguments);
                    this.fireEvent("parentSet", { parent: oParent});
                    return returnValue;
                }.bind(this);
            },

            init: function () {
                this.getVtmPromise().then(function(vtm) {
                    this._vtm = vtm;
                    this.initialize(vtm);
                    this.fireInitialized();
                }.bind(this));
            },

            /**
             * Contains initialization code for the extension. Derived classes must redefine this method.
             * @public
             * @function
             * @param {sap.ui.vtm.Vtm} vtm The {@link sap.ui.vtm.Vtm} instance that this extension belongs to.
             */
            initialize: function(vtm) {
                throw "initialize() needs to be redefined";
            },

            setEnabled: function(bEnabled) {
                this.setProperty("enabled", bEnabled);
                this.fireEnabledChanged();
            },

            /**
             * Calls a function once for each panel that is attached (currently or in the future) to the {@link sap.ui.vtm.Vtm} instance that owns this extension.
             *
             * This function should only be used after the Promise returned by {@link #getVtmPromise} has resolved.
             * @public
             * @function
             * @param {function} panelHandler A function that takes one {@link sap.ui.vtm.Panel} argument.
             */
            applyPanelHandler: function(panelHandler) {
                var panels = this._vtm.getPanels();
                panels.forEach(panelHandler);

                this._vtm.attachPanelAdded(function (panelAddedEvent) {
                    panelHandler(panelAddedEvent.getParameter("panel"));
                });
            },

            /**
             * Gets a {@link Promise} that resolves when the extension is added to the <code>extensions</code> aggregation of an {@link sap.ui.vtm.Vtm} instance.
             *
             * The relevant {@link sap.ui.vtm.Vtm} instance is passed to the resolve handler.
             * @public
             * @function
             * @returns {Promise} A {@link Promise} that is resolved when the extension is added to the <code>extensions</code> aggregation of an {@link sap.ui.vtm.Vtm} instance.
             */
            getVtmPromise: function () {
                return new Promise(function(resolve, reject) {
                    this.attachEventOnce("parentSet", function(oEvent) {
                        var parent = oEvent.getParameter("parent");
                        if (parent.getMetadata().getName() === "sap.ui.vtm.Vtm") {
                            sap.ui.vtm.measure(this, "getVtmPromise resolve", function() {
                                resolve(parent);
                            });
                        } else {
                            sap.ui.vtm.measure(this, "getVtmPromise reject", function() {
                                reject(parent);
                            });
                        }
                    }.bind(this));
                }.bind(this));
            },

            /**
             * Gets a {@link Promise} that resolves after the {@link #initialize initialize} method has been called for the extension.
             * 
             * The {@link #initialize initialize} method is called after the {@link Promise} returned by {@link #getVtmPromise getVtmPromise} resolves.
             * @public
             * @function
             * @returns {Promise} A {@link Promise} that is resolved after the {@link #initialize initialize} method has been called for the extension.
             */
            getInitializedPromise: function() {
                return new Promise(function(resolve, reject) {
                    this.attachInitialized(function(oEvent) {
                        sap.ui.vtm.measure(this, "getInitializedPromise resolve", function() {
                            resolve();
                        });
                    }.bind(this));
                }.bind(this));
            }
        });

        return Extension;
    });
}; // end of sap/ui/vtm/Extension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.HashUtilities') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.HashUtilities'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/HashUtilities",
    ['jquery.sap.global'],
    function(jQuery) {

        "use strict";

        /**
         * A set of utility functions for working with hash values.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @public
         * @namespace
         * @name sap.ui.vtm.HashUtilities
         * @author SAP SE
         * @version 1.50.3
         */
        var HashUtilities = {};

        /**
         * Creates a hash code for a string.
         *
         * The resulting hash value can be any integer value.
         * Use {@link sap.ui.vtm.HashUtilities.normalizeHash} on the result to create a hash code that is useful as a key in a {@link sap.ui.vtm.Lookup}.
         * @public
         * @function
         * @name sap.ui.vtm.HashUtilities.hashString
         * @param {string} stringToHash The string to hash.
         * @returns {int} The hash code value for the string.
         */
        HashUtilities.hashString = function (stringToHash) {
            var hashCode = 0xC716A2B2;
            for (var i = 0; i < stringToHash.length; i++) {
                hashCode = ((hashCode + stringToHash.charCodeAt(i)) * 7) | 0;
            }
            return hashCode;
        };

        /**
         * Creates a hash code for a {@link sap.ui.vtm.Matrix} value.
         *
         * The resulting hash value can be any integer value.
         * Use {@link sap.ui.vtm.HashUtilities.normalizeHash} on the result to create a hash code that is useful as a key in a {@link sap.ui.vtm.Lookup}.
         * @public
         * @function
         * @name sap.ui.vtm.HashUtilities.hashMatrix
         * @param {sap.ui.vtm.Matrix} vtmMatrix The matrix to hash.
         * @returns {int} The hash code for the specified transformation matrix.
         */
        HashUtilities.hashMatrix = function (vtmMatrix) {
            var hashCode = 0x16C7;
            for (var i = 0; i < vtmMatrix.length; i++) {
                var componentVal = Math.round(Math.round(vtmMatrix[i] * 10.0) / 10.0);
                hashCode = ((componentVal + hashCode) * 7) | 0;
            }
            return hashCode;
        };

        /**
         * Normalizes a hash code to a range between 0 and an upper bound.
         * Useful for creating a hash code that can be used as a key in a {@link sap.ui.vtm.Lookup} (to limit the number of buckets in the lookup).
         * @public
         * @function
         * @name sap.ui.vtm.HashUtilities.normalizeHash
         * @param {int} hashValue A hash code to normalize.
         * @param {int?} upperLimit An upper bound for the hash code value. Defaults to 50000.
         * @returns {int} The normalized hash code.
         */
        HashUtilities.normalizeHash = function(hashValue, upperLimit) {
            if (!upperLimit) {
                upperLimit = 50000;
            }
            return Math.abs(hashValue) % upperLimit;
        };

        /**
         * Creates a single hash code from a set of hash code values and normalizes it using {@link sap.ui.vtm.HashUtilities.normalizeHash}.
         * @public
         * @function
         * @name sap.ui.vtm.HashUtilities.combineHashes
         * @param {int[]} hashValues A set of hash code values to combine.
         * @param {int?} upperLimit An upper bound for the hash code. Defaults to 50000.
         * @returns {int} The combined hash code.
         */
        HashUtilities.combineHashes = function (hashValues, upperLimit) {
            var hashValue = 0xF23916C7;
            for (var i = 0; i < hashValues.length; i++) {
                hashValue = ((hashValues[i] + hashValue) * 3) | 0;
            }
            return HashUtilities.normalizeHash(hashValue, upperLimit);
        };

        return HashUtilities;
    },
    true);

}; // end of sap/ui/vtm/HashUtilities.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.InternalColumnDescriptor') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.InternalColumnDescriptor'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vtm/InternalColumnDescriptor",[],
    function () {
        "use strict";

        /**
         * Enumeration specifying descriptors for {@link sap.ui.vtm.Column} objects of type {@link sap.ui.vtm.ColumnType.Internal}.
         *
         * @enum {string}
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This type is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
         */
        sap.ui.vtm.InternalColumnDescriptor = {

            /**
             * The column that contains the tree item name and the tree type icon.
             * This must always be the first column.
             * @public
             */
            Tree: "Tree",

            /**
             * The column that is used to provide an indication of the messages that apply to the tree item and its descendants.
             * @public
             */
            MessageStatus: "MessageStatus",

            /**
             * The column that is used to indicate and control visibility of the scene nodes associated with the tree item.
             * @public
             */
            Visibility: "Visibility",

            /**
             * A column containing the <code>id</code> field of the tree item.
             * @public
             */
            TreeItemId: "TreeItemId",

            /**
             * A column showing the <code>absoluteMatrix</code> field of the tree item.
             * @public
             */
            AbsoluteMatrix: "AbsoluteMatrix",

            /**
             * A column showing the <code>relativeMatrix</code> field of the tree item.
             * @public
             */
            RelativeMatrix: "RelativeMatrix",

            /**
             * A column showing the <code>sceneNodeIds</code> field of the tree item.
             * @public
             */
            SceneNodeIds: "SceneNodeIds",

            /**
             * A column showing the <code>opacity</code> field of the tree item.
             * @public
             */
            Opacity: "Opacity",

            /**
             * A column showing the <code>highlightColor</code> field of the tree item.
             * @public
             */
            HighlightColor: "HighlightColor"
        };

        return sap.ui.vtm.InternalColumnDescriptor;
    });
}; // end of sap/ui/vtm/InternalColumnDescriptor.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.InternalColumns') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.InternalColumns'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/InternalColumns",[
        'jquery.sap.global',
        "./ColumnType",
        "./InternalColumnDescriptor"
    ],
    function(
        jQuery,
        SapUiVtmColumnType,
        SapUiVtmInternalColumnDescriptor) {
        "use strict";

        var getDefaultSettings = function() {
            return {
                type: SapUiVtmColumnType.Internal
            };
        };

        /**
         * A set of utility functions for creating internal tree columns.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @public
         * @namespace
         * @name sap.ui.vtm.InternalColumns
         * @author SAP SE
         * @version 1.50.3
         */
        var InternalColumns = {};

        /**
         * Creates a {@link sap.ui.vtm.InternalColumnDescriptor.Tree} internal column.
         * @public
         * @function
         * @name sap.ui.vtm.InternalColumns.createTreeColumn
         * @returns {sap.ui.vtm.Column} The {@link sap.ui.vtm.InternalColumnDescriptor.Tree} internal column.
         */
        InternalColumns.createTreeColumn = function() {
            var rb = sap.ui.vtm.getResourceBundle();
            var settings = jQuery.extend(getDefaultSettings(), {
                descriptor: SapUiVtmInternalColumnDescriptor.Tree,
                label: rb.getText("COLUMNNAME_TREE"),
                tooltip: rb.getText("COLUMNNAME_TREE"),
                width: "250px"
            });
            return new sap.ui.vtm.Column(settings);
        };

        /**
         * Creates a {@link sap.ui.vtm.InternalColumnDescriptor.Visibility} internal column.
         * @public
         * @function
         * @name sap.ui.vtm.InternalColumns.createVisibilityColumn
         * @returns {sap.ui.vtm.Column} The {@link sap.ui.vtm.InternalColumnDescriptor.Visibility} internal column.
         */
        InternalColumns.createVisibilityColumn = function() {
            var rb = sap.ui.vtm.getResourceBundle();
            var hideAllString = rb.getText("COLUMNTOOLTIP_VISIBILITY_CLICK_TO_HIDE_ALL");
            var showAllString = rb.getText("COLUMNTOOLTIP_VISIBILITY_CLICK_TO_SHOW_ALL");

            var checkEye = new sap.ui.vk.CheckEye({
                checked: true,
                tooltip: hideAllString
            });
            checkEye.attachChange(function(event) {
                var control = event.getSource();
                control.setTooltip(control.getChecked() ? hideAllString : showAllString);
            });
            
            var settings = jQuery.extend(getDefaultSettings(), {
                descriptor: SapUiVtmInternalColumnDescriptor.Visibility,
                labelControl: checkEye,
                hAlign: sap.ui.core.HorizontalAlign.Center,
                width: "2.5em",
                resizable: false
            });
            return new sap.ui.vtm.Column(settings);
        };

        /**
         * Creates a {@link sap.ui.vtm.InternalColumnDescriptor.MessageStatus} internal column.
         * @public
         * @function
         * @name sap.ui.vtm.InternalColumns.createMessageStatusColumn
         * @returns {sap.ui.vtm.Column} The {@link sap.ui.vtm.InternalColumnDescriptor.MessageStatus} internal column.
         */
        InternalColumns.createMessageStatusColumn = function () {
            var rb = sap.ui.vtm.getResourceBundle();
            var settings = jQuery.extend(getDefaultSettings(), {
                descriptor: SapUiVtmInternalColumnDescriptor.MessageStatus,
                labelControl: new sap.ui.core.Icon({
                    src: "sap-icon://message-warning",
                    tooltip: rb.getText("COLUMNTOOLTIP_MESSAGESTATUS"),
                    decorative: false
                }),
                hAlign: sap.ui.core.HorizontalAlign.Center,
                width: "2.5em",
                resizable: false
            });
            settings.labelControl.addStyleClass("sapUiVtmTree_StatusColumn_HeaderIcon");
            return new sap.ui.vtm.Column(settings);
        };

        /**
         * Creates a {@link sap.ui.vtm.InternalColumnDescriptor.TreeItemId} column.
         * @public
         * @function
         * @name sap.ui.vtm.InternalColumns.createTreeItemIdColumn
         * @returns {sap.ui.vtm.Column} The {@link sap.ui.vtm.InternalColumnDescriptor.TreeItemId} column.
         */
        InternalColumns.createTreeItemIdColumn = function() {
            var rb = sap.ui.vtm.getResourceBundle();
            var settings = jQuery.extend(getDefaultSettings(), {
                descriptor: SapUiVtmInternalColumnDescriptor.TreeItemId,
                label: rb.getText("COLUMNNAME_TREEITEMID"),
                tooltip: rb.getText("COLUMNNAME_TREEITEMID")
            });
            return new sap.ui.vtm.Column(settings);
        };

        /**
         * Creates a {@link sap.ui.vtm.InternalColumnDescriptor.AbsoluteMatrix} column.
         * @public
         * @function
         * @name sap.ui.vtm.InternalColumns.createAbsoluteMatrixColumn
         * @returns {sap.ui.vtm.Column} The {@link sap.ui.vtm.InternalColumnDescriptor.AbsoluteMatrix} column.
         */
        InternalColumns.createAbsoluteMatrixColumn = function() {
            var rb = sap.ui.vtm.getResourceBundle();
            var settings = jQuery.extend(getDefaultSettings(), {
                descriptor: SapUiVtmInternalColumnDescriptor.AbsoluteMatrix,
                label: rb.getText("COLUMNNAME_ABSOLUTEMATRIX"),
                tooltip: rb.getText("COLUMNNAME_ABSOLUTEMATRIX")
            });
            return new sap.ui.vtm.Column(settings);
        };

        /**
         * Creates a {@link sap.ui.vtm.InternalColumnDescriptor.RelativeMatrix} column.
         * @public
         * @function
         * @name sap.ui.vtm.InternalColumns.createRelativeMatrixColumn
         * @returns {sap.ui.vtm.Column} The  {@link sap.ui.vtm.InternalColumnDescriptor.RelativeMatrix} column.
         */
        InternalColumns.createRelativeMatrixColumn = function() {
            var rb = sap.ui.vtm.getResourceBundle();
            var settings = jQuery.extend(getDefaultSettings(), {
                descriptor: SapUiVtmInternalColumnDescriptor.RelativeMatrix,
                label: rb.getText("COLUMNNAME_RELATIVEMATRIX"),
                tooltip: rb.getText("COLUMNNAME_RELATIVEMATRIX")
            });
            return new sap.ui.vtm.Column(settings);
        };

        /**
         * Creates a {@link sap.ui.vtm.InternalColumnDescriptor.SceneNodeIds} column.
         * @public
         * @function
         * @name sap.ui.vtm.InternalColumns.createSceneNodeIdsColumn
         * @returns {sap.ui.vtm.Column} The {@link sap.ui.vtm.InternalColumnDescriptor.SceneNodeIds} column.
         */
        InternalColumns.createSceneNodeIdsColumn = function() {
            var rb = sap.ui.vtm.getResourceBundle();
            var settings = jQuery.extend(getDefaultSettings(), {
                descriptor: SapUiVtmInternalColumnDescriptor.SceneNodeIds,
                label: rb.getText("COLUMNNAME_SCENENODEIDS"),
                tooltip: rb.getText("COLUMNNAME_SCENENODEIDS")
            });
            return new sap.ui.vtm.Column(settings);
        };

        /**
         * Creates an {@link sap.ui.vtm.InternalColumnDescriptor.Opacity} column.
         * @public
         * @function
         * @name sap.ui.vtm.InternalColumns.createOpacityColumn
         * @returns {sap.ui.vtm.Column} The {@link sap.ui.vtm.InternalColumnDescriptor.Opacity} column.
         */
        InternalColumns.createOpacityColumn = function() {
            var rb = sap.ui.vtm.getResourceBundle();
            var settings = jQuery.extend(getDefaultSettings(), {
                descriptor: SapUiVtmInternalColumnDescriptor.Opacity,
                label: rb.getText("COLUMNNAME_OPACITY"),
                tooltip: rb.getText("COLUMNNAME_OPACITY")
            });
            return new sap.ui.vtm.Column(settings);
        };

        /**
         * Creates a {@link sap.ui.vtm.InternalColumnDescriptor.HighlightColor} column.
         * @private
         * @function
         * @name sap.ui.vtm.InternalColumns.createHighlightColorColumn
         * @returns {sap.ui.vtm.Column} The {@link sap.ui.vtm.InternalColumnDescriptor.HighlightColor} column.
         */
        InternalColumns.createHighlightColorColumn = function() {
            var rb = sap.ui.vtm.getResourceBundle();
            var settings = jQuery.extend(getDefaultSettings(), {
                descriptor: SapUiVtmInternalColumnDescriptor.HighlightColor,
                label: rb.getText("COLUMNNAME_HIGHLIGHTCOLOR"),
                tooltip: rb.getText("COLUMNNAME_HIGHLIGHTCOLOR")
            });
            return new sap.ui.vtm.Column(settings);
        };

        return InternalColumns;
    },
    true);

}; // end of sap/ui/vtm/InternalColumns.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Lookup') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.Lookup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Lookup",
    ["jquery.sap.global", "sap/ui/core/Element", "./ArrayUtilities"],
    function (jQuery, SapUiCoreElement, SapUiVtmArrayUtilities) {

        "use strict";

        /**
         * Constructor for a new Lookup.
         * @param {function} equalsFunc A function to compare two values for equality (takes two values as parameters and returns true if they are equal).
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.Lookup
         * @public
         * @class
         * A map that can contain multiple values per key value.
         * This is a utility class that can be used as a data structure for:
         * <ul>
         * <li>Maintaining a lookup containing scene nodes keyed by a particular value in order to determine the scene nodes that should be associated with a particular tree item</li>
         * <li>Maintaining lookups (one for each tree) of tree items keyed by a particular value in order to determine the tree items in one tree that are associated with tree items in another tree</li>
         * </ul>
         * A typical usage would be to use a {@link sap.ui.vtm.Lookup} that is keyed using a hash code constructed from some or all of the information needed to match a particular tree item or scene node.
         * In this scenario the {@link sap.ui.vtm.Lookup} is used to return a set of possible matches which are then filtered to find the actual matches.
         * The usage of the {@link sap.ui.vtm.Lookup} with a suitable key can drastically reduces the number of items that need to be compared when performing a search.
         * This is important when there are large numbers of searches that need to be performed within a large set of items.
         * @author SAP SE
         * @version 1.50.3
         * @extends sap.ui.core.Element
         */
        var Lookup = SapUiCoreElement.extend("sap.ui.vtm.Lookup", /** @lends sap.ui.vtm.Lookup.prototype */ {

            init: function() {
                this.clear();
            },

            /**
             * Adds a value to the set of values stored against a given key.
             * @public
             * @function
             * @param {any} key The key.
             * @param {any} value The value.
             * @returns {sap.ui.vtm.Lookup} <code>this</code> for method chaining.
             */
            addValue: function (key, value) {
                var valuesByKey = this._valuesByKey;
                var values = valuesByKey.get(key);
                if (values) {
                    values.push(value);
                } else {
                    valuesByKey.set(key, [value]);
                }
                return this;
            },

            /**
             * Removes a particular value.
             * @public
             * @function
             * @param {any} key The key.
             * @param {any} value The value.
             * @param {function?} equalsFunc A function to compare two values for equality (takes two values as parameters and returns true if they are equal).
             * @returns {sap.ui.vtm.Lookup} <code>this</code> for method chaining.
             */
            removeValue: function (key, value, equalsFunc) {
                if (!equalsFunc) {
                    equalsFunc = function (value1, value2) { return value1 === value2; };
                }

                var values = this._valuesByKey.get(key);
                if (values) {
                    var index = sap.ui.vtm.ArrayUtilities.findIndex(values, function (val) {
                        return equalsFunc(value, val);
                    });
                    if (index >= 0) {
                        values.splice(index, 1);
                        if (values.length == 0) {
                            this._valuesByKey.delete(key);
                        }
                    }
                }
                return this;
            },

            /**
             * Clears the Lookup.
             * @public
             * @function
             * @returns {sap.ui.vtm.Lookup} <code>this</code> for method chaining.
             */
            clear: function () {
                this._valuesByKey = new Map();
                return this;
            },

            /**
             * Returns whether there are any values stored against the given key.
             * @public
             * @function
             * @param {any} key The key.
             * @returns {boolean} <code>true</code> if there are any values stored against the given key.
             */
            hasValue: function (key) {
                return this._valuesByKey.has(key);
            },

            /**
             * Gets the values stored against a given key.
             * @public
             * @function
             * @param {any} key The key to use to index the Lookup.
             * @returns {any[]} The values (if any) associated with the given key.
             */
            getValues: function (key) {
                var values = this._valuesByKey.get(key);
                if (values) {
                    values = values.slice();
                }
                return values || [];
            },

            /**
             * Loops over the key/value array pairs calling the callback function for each pair.
             * @public
             * @function
             * @param {function} callback The callback function to call for each key/value array pair.
             * The first argument to the callback function is the value array and the second parameter is the key.
             * @returns {sap.ui.vtm.Lookup} <code>this</code> for method chaining.
             */
            forEach: function(callback) {
                this._valuesByKey.forEach(callback);
                return this;
            }
        });

        return Lookup;
    });
}; // end of sap/ui/vtm/Lookup.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.MatrixComponent') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.MatrixComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vtm/MatrixComponent",[],
    function () {
        "use strict";

        /**
         * Enumeration specifying index values for the components of {@link sap.ui.vtm.Matrix} values.
         *
         * @enum {int}
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This type is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
         */
        sap.ui.vtm.MatrixComponent = {

            /**
             * The <code>LOCX<code> (X axis translation) component.
             * @public
             */
            LOCX: 0,

            /**
             * The <code>LOCY<code> (Y axis translation) component.
             * @public
             */
            LOCY: 1,

            /**
             * The <code>LOCZ<code> (Z axis translation) component.
             * @public
             */
            LOCZ: 2,

            /**
             * The <code>AXIS1X<code> component.
             * @public
             */
            AXIS1X: 3,

            /**
             * The <code>AXIS1Y<code> component.
             * @public
             */
            AXIS1Y: 4,

            /**
             * The <code>AXIS1Z<code> component.
             * @public
             */
            AXIS1Z: 5,

            /**
             * The <code>AXIS2X<code> component.
             * @public
             */
            AXIS2X: 6,

            /**
             * The <code>AXIS2Y<code> component.
             * @public
             */
            AXIS2Y: 7,

            /**
             * The <code>AXIS2Z<code> component.
             * @public
             */
            AXIS2Z: 8,

            /**
             * The <code>AXIS3X<code> component.
             * @public
             */
            AXIS3X: 9,

            /**
             * The <code>AXIS3Y<code> component.
             * @public
             */
            AXIS3Y: 10,

            /**
             * The <code>AXIS3Z<code> component.
             * @public
             */
            AXIS3Z: 11,

            /**
             * The <code>SCALE<code> component (there is only one scale component for all axes).
             * @public
             */
            SCALE: 12
        };

        return sap.ui.vtm.MatrixComponents;
    });
}; // end of sap/ui/vtm/MatrixComponent.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.MatrixUtilities') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.MatrixUtilities'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/MatrixUtilities",
    ['jquery.sap.global'],
    function(jQuery) {

        "use strict";

        var LOCX = 0,
            LOCY = 1,
            LOCZ = 2,
            AXIS1X = 3,
            AXIS1Y = 4,
            AXIS1Z = 5,
            AXIS2X = 6,
            AXIS2Y = 7,
            AXIS2Z = 8,
            AXIS3X = 9,
            AXIS3Y = 10,
            AXIS3Z = 11,
            SCALE = 12,
            VSM_AXIS1X = 0,
            VSM_AXIS1Y = 1,
            VSM_AXIS1Z = 2,
            VSM_AXIS2X = 3,
            VSM_AXIS2Y = 4,
            VSM_AXIS2Z = 5,
            VSM_AXIS3X = 6,
            VSM_AXIS3Y = 7,
            VSM_AXIS3Z = 8,
            VSM_LOCX = 9,
            VSM_LOCY = 10,
            VSM_LOCZ = 11,
            VSM_SCALE = 12;

        /**
         * A set of utility functions for working with transformation matrices in a ISO 10303-42 format (in the form of a 1 dimensional array of 13 numbers)
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @public
         * @namespace
         * @name sap.ui.vtm.MatrixUtilities
         * @author SAP SE
         * @version 1.50.3
         */
        var MatrixUtilities = {};

        /**
         * Returns true if the parameter represents a valid transformation matrix.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.isValid
         * @param {sap.ui.vtm.Matrix} vtmMatrix The transformation matrix to check.
         * @param {boolean} checkInvertibility Checks whether the matrix is invertible.<br/>
         * Matrices must be invertible to be used as transformation matrices.<br/>
         * This check is optional due to the additional cost of performing it.
         * @returns {boolean} true if the parameter represents a valid transformation matrix.
         */
        MatrixUtilities.isValid = function (vtmMatrix, checkInvertibility) {
            if (!vtmMatrix || !Array.isArray(vtmMatrix) || vtmMatrix.length !== 13) {
                return false;
            }
            if (checkInvertibility) {
                return MatrixUtilities.isInvertible(vtmMatrix);
            }
            return true;
        };

        /**
         * Returns an identity transformation matrix.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.createIdentity
         * @returns {sap.ui.vtm.Matrix} A new identity transformation matrix.
         */
        MatrixUtilities.createIdentity = function () {
            return [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1];
        };

        /**
         * Returns true when the two matrix parameters are equal.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.areEqual
         * @param {sap.ui.vtm.Matrix} vtmMatrixA One matrix to compare.
         * @param {sap.ui.vtm.Matrix} vtmMatrixB The other matrix to compare.
         * @returns {boolean} <code>true</code> if the two matrix parameters are equal.
         */
        MatrixUtilities.areEqual = function (vtmMatrixA, vtmMatrixB) {
            for (var i = 0; i < vtmMatrixA.length; i++) {
                if (Math.abs(vtmMatrixA[i] - vtmMatrixB[i]) > 0.01) {
                    return false;
                }
            }
            return true;
        };

        /**
         * Returns whether a matrix is invertible.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.isInvertible
         * @param {sap.ui.vtm.Matrix} vtmMatrix The matrix to check.
         * @returns {boolean} Whether the matrix is invertible.
         */
        MatrixUtilities.isInvertible = function (vtmMatrix) {
            var pos = 0.0,
                neg = 0.0,
                mAXIS1X = vtmMatrix[AXIS1X],
                mAXIS1Y = vtmMatrix[AXIS1Y],
                mAXIS1Z = vtmMatrix[AXIS1Z],
                mAXIS2X = vtmMatrix[AXIS2X],
                mAXIS2Y = vtmMatrix[AXIS2Y],
                mAXIS2Z = vtmMatrix[AXIS2Z],
                mAXIS3X = vtmMatrix[AXIS3X],
                mAXIS3Y = vtmMatrix[AXIS3Y],
                mAXIS3Z = vtmMatrix[AXIS3Z],
                t = mAXIS1X * mAXIS2Y * mAXIS3Z;

            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            t = mAXIS2X * mAXIS3Y * mAXIS1Z;
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            t = mAXIS3X * mAXIS1Y * mAXIS2Z;
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            t = -mAXIS3X * mAXIS2Y * mAXIS1Z;
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            t = -mAXIS2X * mAXIS1Y * mAXIS3Z;
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            t = -mAXIS1X * mAXIS3Y * mAXIS2Z;
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            var det = pos + neg;
            if (det == 0 || Math.abs(det) < ((pos - neg) * 1.0e-12)) {
                return false;
            }
            return true;
        };

        /**
         * Returns the inverse of the passed matrix without modifying the passed matrix.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.invert
         * @param {sap.ui.vtm.Matrix} vtmMatrix The matrix to invert.
         * @returns {sap.ui.vtm.Matrix} The inverse of the specified matrix.
         */
        MatrixUtilities.invert = function (vtmMatrix) {
            var pos = 0.0,
                neg = 0.0,
                mLOCX = vtmMatrix[LOCX],
                mLOCY = vtmMatrix[LOCY],
                mLOCZ = vtmMatrix[LOCZ],
                mAXIS1X = vtmMatrix[AXIS1X],
                mAXIS1Y = vtmMatrix[AXIS1Y],
                mAXIS1Z = vtmMatrix[AXIS1Z],
                mAXIS2X = vtmMatrix[AXIS2X],
                mAXIS2Y = vtmMatrix[AXIS2Y],
                mAXIS2Z = vtmMatrix[AXIS2Z],
                mAXIS3X = vtmMatrix[AXIS3X],
                mAXIS3Y = vtmMatrix[AXIS3Y],
                mAXIS3Z = vtmMatrix[AXIS3Z],
                t = mAXIS1X * mAXIS2Y * mAXIS3Z,
                ret = MatrixUtilities.createIdentity();

            // Calculate the determinant of the matrix and determine if the
            // the matrix is singular as limited by the double precision
            // floating-point data representation.
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            t = mAXIS2X * mAXIS3Y * mAXIS1Z;
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            t = mAXIS3X * mAXIS1Y * mAXIS2Z;
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            t = -mAXIS3X * mAXIS2Y * mAXIS1Z;
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            t = -mAXIS2X * mAXIS1Y * mAXIS3Z;
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            t = -mAXIS1X * mAXIS3Y * mAXIS2Z;
            if (t >= 0.0) {
                pos += t;
            } else {
                neg += t;
            }
            var det = pos + neg;
            // Is the matrix singular?
            if (det == 0 || Math.abs(det) < ((pos - neg) * 1.0e-12)) {
                return ret;
            }
            // Calculate inverse(A) = adj(A) / det(A)
            var det1 = 1.0 / det;
            ret[AXIS1X] = ((mAXIS2Y * mAXIS3Z - mAXIS3Y * mAXIS2Z) * det1);
            ret[AXIS1Y] = (-(mAXIS1Y * mAXIS3Z - mAXIS3Y * mAXIS1Z) * det1);
            ret[AXIS1Z] = ((mAXIS1Y * mAXIS2Z - mAXIS2Y * mAXIS1Z) * det1);
            ret[AXIS2X] = (-(mAXIS2X * mAXIS3Z - mAXIS3X * mAXIS2Z) * det1);
            ret[AXIS2Y] = ((mAXIS1X * mAXIS3Z - mAXIS3X * mAXIS1Z) * det1);
            ret[AXIS2Z] = (-(mAXIS1X * mAXIS2Z - mAXIS2X * mAXIS1Z) * det1);
            ret[AXIS3X] = ((mAXIS2X * mAXIS3Y - mAXIS3X * mAXIS2Y) * det1);
            ret[AXIS3Y] = (-(mAXIS1X * mAXIS3Y - mAXIS3X * mAXIS1Y) * det1);
            ret[AXIS3Z] = ((mAXIS1X * mAXIS2Y - mAXIS2X * mAXIS1Y) * det1);
            /* Calculate -C * inverse(A) */
            ret[LOCX] = -(
                mLOCX * ret[AXIS1X] +
                mLOCY * ret[AXIS2X] +
                mLOCZ * ret[AXIS3X]);
            ret[LOCY] = -(
                mLOCX * ret[AXIS1Y] +
                mLOCY * ret[AXIS2Y] +
                mLOCZ * ret[AXIS3Y]);
            ret[LOCZ] = -(
                mLOCX * ret[AXIS1Z] +
                mLOCY * ret[AXIS2Z] +
                mLOCZ * ret[AXIS3Z]);
            return ret;
        };

        /**
         * Converts a {@link sap.ui.vtm.Matrix} to a 4x4 transformation matrix.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.to4x4Matrix
         * @param {sap.ui.vtm.Matrix} vtmMatrix The {@link sap.ui.vtm.Matrix} value to convert.
         * @returns {number[]} A 4x4 transformation matrix (represented as an array of arrays of numbers).
         */
        MatrixUtilities.to4x4Matrix = function (vtmMatrix) {
            var mat4x4 = [];
            mat4x4[0] = [
                vtmMatrix[AXIS1X],
                vtmMatrix[AXIS1Y],
                vtmMatrix[AXIS1Z],
                0
            ];
            mat4x4[1] = [
                vtmMatrix[AXIS2X],
                vtmMatrix[AXIS2Y],
                vtmMatrix[AXIS2Z],
                0
            ];
            mat4x4[2] = [
                vtmMatrix[AXIS3X],
                vtmMatrix[AXIS3Y],
                vtmMatrix[AXIS3Z],
                0
            ];
            mat4x4[3] = [
                vtmMatrix[LOCX],
                vtmMatrix[LOCY],
                vtmMatrix[LOCZ],
                vtmMatrix[SCALE]
            ];
            return mat4x4;
        };

        /**
         * Converts a 4x4 transformation matrix to a {@link sap.ui.vtm.Matrix}.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.from4x4Matrix
         * @param {number[]} mat4x4 The 4x4 matrix (represented as an array of arrays of numbers) to convert.
         * @returns {sap.ui.vtm.Matrix} The {@link sap.ui.vtm.Matrix} value.
         */
        MatrixUtilities.from4x4Matrix = function (mat4x4) {
            var vtmMatrix = [];
            vtmMatrix[AXIS1X] = mat4x4[0][0];
            vtmMatrix[AXIS1Y] = mat4x4[0][1];
            vtmMatrix[AXIS1Z] = mat4x4[0][2];
            vtmMatrix[AXIS2X] = mat4x4[1][0];
            vtmMatrix[AXIS2Y] = mat4x4[1][1];
            vtmMatrix[AXIS2Z] = mat4x4[1][2];
            vtmMatrix[AXIS3X] = mat4x4[2][0];
            vtmMatrix[AXIS3Y] = mat4x4[2][1];
            vtmMatrix[AXIS3Z] = mat4x4[2][2];
            vtmMatrix[LOCX] = mat4x4[3][0];
            vtmMatrix[LOCY] = mat4x4[3][1];
            vtmMatrix[LOCZ] = mat4x4[3][2];
            vtmMatrix[SCALE] = mat4x4[3][3];
            return vtmMatrix;
        };

        /**
         * Converts a {@link sap.ui.vk.TransformationMatrix} (as used by the sap.ui.vk library) to a {@link sap.ui.vtm.Matrix} value.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.fromVkMatrix
         * @param {sap.ui.vk.TransformationMatrix} vkMatrix The VIT transformation matrix.
         * @returns {sap.ui.vtm.Matrix} The {@link sap.ui.vtm.Matrix} value.
         */
        MatrixUtilities.fromVkMatrix = function (vkMatrix) {
            var vtmMatrix = [];
            vtmMatrix[AXIS1X] = vkMatrix[0];
            vtmMatrix[AXIS1Y] = vkMatrix[1];
            vtmMatrix[AXIS1Z] = vkMatrix[2];
            vtmMatrix[AXIS2X] = vkMatrix[3];
            vtmMatrix[AXIS2Y] = vkMatrix[4];
            vtmMatrix[AXIS2Z] = vkMatrix[5];
            vtmMatrix[AXIS3X] = vkMatrix[6];
            vtmMatrix[AXIS3Y] = vkMatrix[7];
            vtmMatrix[AXIS3Z] = vkMatrix[8];
            vtmMatrix[LOCX]   = vkMatrix[9];
            vtmMatrix[LOCY]   = vkMatrix[10];
            vtmMatrix[LOCZ]   = vkMatrix[11];
            vtmMatrix[SCALE]  = 1;
            return vtmMatrix;
        };

        /**
         * Converts a {@link sap.ui.vtm.Matrix} value to a {@link sap.ui.vk.TransformationMatrix} as used by the sap.ui.vk library.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.toVkMatrix
         * @param {sap.ui.vtm.Matrix} vtmMatrix The {@link sap.ui.vtm.Matrix} value
         * @returns {sap.ui.vk.TransformationMatrix} The {@link sap.ui.vk.TransformationMatrix} value.
         */
        MatrixUtilities.toVkMatrix = function (vtmMatrix) {
            var vkMatrix = [];
            vkMatrix[0] = vtmMatrix[AXIS1X];
            vkMatrix[1] = vtmMatrix[AXIS1Y];
            vkMatrix[2] = vtmMatrix[AXIS1Z];
            vkMatrix[3] = vtmMatrix[AXIS2X];
            vkMatrix[4] = vtmMatrix[AXIS2Y];
            vkMatrix[5] = vtmMatrix[AXIS2Z];
            vkMatrix[6] = vtmMatrix[AXIS3X];
            vkMatrix[7] = vtmMatrix[AXIS3Y];
            vkMatrix[8] = vtmMatrix[AXIS3Z];
            vkMatrix[9] = vtmMatrix[LOCX];
            vkMatrix[10] = vtmMatrix[LOCY];
            vkMatrix[11] = vtmMatrix[LOCZ];
            return vkMatrix;
        };

        /**
         * Converts a VSM transformation matrix string to a {@link sap.ui.vtm.Matrix} value.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.fromVsmMatrixString
         * @param {string} vsmMatrixString The VSM transformation matrix string.
         * @returns {sap.ui.vtm.Matrix} The {@link sap.ui.vtm.Matrix} value.
         */
        MatrixUtilities.fromVsmMatrixString = function (vsmMatrixString) {
            var vsmMatrix = vsmMatrixString
                .split(" ")
                .map(function (component) { return parseFloat(component); });

            var vtmMatrix = [];
            vtmMatrix[AXIS1X] = vsmMatrix[VSM_AXIS1X];
            vtmMatrix[AXIS1Y] = vsmMatrix[VSM_AXIS1Y];
            vtmMatrix[AXIS1Z] = vsmMatrix[VSM_AXIS1Z];
            vtmMatrix[AXIS2X] = vsmMatrix[VSM_AXIS2X];
            vtmMatrix[AXIS2Y] = vsmMatrix[VSM_AXIS2Y];
            vtmMatrix[AXIS2Z] = vsmMatrix[VSM_AXIS2Z];
            vtmMatrix[AXIS3X] = vsmMatrix[VSM_AXIS3X];
            vtmMatrix[AXIS3Y] = vsmMatrix[VSM_AXIS3Y];
            vtmMatrix[AXIS3Z] = vsmMatrix[VSM_AXIS3Z];
            vtmMatrix[LOCX] = vsmMatrix[VSM_LOCX];
            vtmMatrix[LOCY] = vsmMatrix[VSM_LOCY];
            vtmMatrix[LOCZ] = vsmMatrix[VSM_LOCZ];
            vtmMatrix[SCALE] = vsmMatrix[VSM_SCALE];
            return vtmMatrix;
        };

        /**
         * Converts a {@link sap.ui.vtm.Matrix} value to a VSM transformation matrix string.
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.toVsmMatrixString
         * @param {sap.ui.vtm.Matrix} vtmMatrix The {@link sap.ui.vtm.Matrix} value.
         * @returns {string} The VSM transformation matrix string.
         */
        MatrixUtilities.toVsmMatrixString = function (vtmMatrix) {
            var vsmMatrix = [];
            vsmMatrix[VSM_AXIS1X] = vtmMatrix[AXIS1X];
            vsmMatrix[VSM_AXIS1Y] = vtmMatrix[AXIS1Y];
            vsmMatrix[VSM_AXIS1Z] = vtmMatrix[AXIS1Z];
            vsmMatrix[VSM_AXIS2X] = vtmMatrix[AXIS2X];
            vsmMatrix[VSM_AXIS2Y] = vtmMatrix[AXIS2Y];
            vsmMatrix[VSM_AXIS2Z] = vtmMatrix[AXIS2Z];
            vsmMatrix[VSM_AXIS3X] = vtmMatrix[AXIS3X];
            vsmMatrix[VSM_AXIS3Y] = vtmMatrix[AXIS3Y];
            vsmMatrix[VSM_AXIS3Z] = vtmMatrix[AXIS3Z];
            vsmMatrix[VSM_LOCX] = vtmMatrix[LOCX];
            vsmMatrix[VSM_LOCY] = vtmMatrix[LOCY];
            vsmMatrix[VSM_LOCZ] = vtmMatrix[LOCZ];
            vsmMatrix[VSM_SCALE] = vtmMatrix[SCALE];
            return vsmMatrix.join(" ");
        };

        /**
         * Returns the result of multiplying two matrices (without modifying the passed matrices).
         * @public
         * @function
         * @name sap.ui.vtm.MatrixUtilities.multiply
         * @param {sap.ui.vtm.Matrix} vtmMatrixA One multiplicand.
         * @param {sap.ui.vtm.Matrix} vtmMatrixB The other multiplicand.
         * @returns {sap.ui.vtm.Matrix} The matrix representing the multiplication result.
         */
        MatrixUtilities.multiply = function (vtmMatrixA, vtmMatrixB) {
            var ret = [],
                aLOCX = vtmMatrixA[LOCX],
                aLOCY = vtmMatrixA[LOCY],
                aLOCZ = vtmMatrixA[LOCZ],
                aAXIS1X = vtmMatrixA[AXIS1X],
                aAXIS1Y = vtmMatrixA[AXIS1Y],
                aAXIS1Z = vtmMatrixA[AXIS1Z],
                aAXIS2X = vtmMatrixA[AXIS2X],
                aAXIS2Y = vtmMatrixA[AXIS2Y],
                aAXIS2Z = vtmMatrixA[AXIS2Z],
                aAXIS3X = vtmMatrixA[AXIS3X],
                aAXIS3Y = vtmMatrixA[AXIS3Y],
                aAXIS3Z = vtmMatrixA[AXIS3Z],
                aSCALE = vtmMatrixA[SCALE],
                bLOCX = vtmMatrixB[LOCX],
                bLOCY = vtmMatrixB[LOCY],
                bLOCZ = vtmMatrixB[LOCZ],
                bAXIS1X = vtmMatrixB[AXIS1X],
                bAXIS1Y = vtmMatrixB[AXIS1Y],
                bAXIS1Z = vtmMatrixB[AXIS1Z],
                bAXIS2X = vtmMatrixB[AXIS2X],
                bAXIS2Y = vtmMatrixB[AXIS2Y],
                bAXIS2Z = vtmMatrixB[AXIS2Z],
                bAXIS3X = vtmMatrixB[AXIS3X],
                bAXIS3Y = vtmMatrixB[AXIS3Y],
                bAXIS3Z = vtmMatrixB[AXIS3Z],
                bSCALE = vtmMatrixB[SCALE];

            ret[AXIS1X] =
                aAXIS1X * bAXIS1X +
                aAXIS1Y * bAXIS2X +
                aAXIS1Z * bAXIS3X;
            ret[AXIS1Y] =
                aAXIS1X * bAXIS1Y +
                aAXIS1Y * bAXIS2Y +
                aAXIS1Z * bAXIS3Y;
            ret[AXIS1Z] =
                aAXIS1X * bAXIS1Z +
                aAXIS1Y * bAXIS2Z +
                aAXIS1Z * bAXIS3Z;
            ret[AXIS2X] =
                aAXIS2X * bAXIS1X +
                aAXIS2Y * bAXIS2X +
                aAXIS2Z * bAXIS3X;
            ret[AXIS2Y] =
                aAXIS2X * bAXIS1Y +
                aAXIS2Y * bAXIS2Y +
                aAXIS2Z * bAXIS3Y;
            ret[AXIS2Z] =
                aAXIS2X * bAXIS1Z +
                aAXIS2Y * bAXIS2Z +
                aAXIS2Z * bAXIS3Z;
            ret[AXIS3X] =
                aAXIS3X * bAXIS1X +
                aAXIS3Y * bAXIS2X +
                aAXIS3Z * bAXIS3X;
            ret[AXIS3Y] =
                aAXIS3X * bAXIS1Y +
                aAXIS3Y * bAXIS2Y +
                aAXIS3Z * bAXIS3Y;
            ret[AXIS3Z] =
                aAXIS3X * bAXIS1Z +
                aAXIS3Y * bAXIS2Z +
                aAXIS3Z * bAXIS3Z;
            ret[LOCX] =
                aLOCX * bAXIS1X +
                aLOCY * bAXIS2X +
                aLOCZ * bAXIS3X +
                aSCALE * bLOCX;
            ret[LOCY] =
                aLOCX * bAXIS1Y +
                aLOCY * bAXIS2Y +
                aLOCZ * bAXIS3Y +
                aSCALE * bLOCY;
            ret[LOCZ] =
                aLOCX * bAXIS1Z +
                aLOCY * bAXIS2Z +
                aLOCZ * bAXIS3Z +
                aSCALE * bLOCZ;
            ret[SCALE] =
                aSCALE * bSCALE;
            return ret;
        };
        
        /**
         * Gets an array of localized names for the transformation matrix components.
         * Intended for use in matrix string formatters.
         * @private
         * @function
         * @return {string[]} The localized names for the transformation matrix components.
         */
        MatrixUtilities.getMatrixComponentNames = function() {
            if (!MatrixUtilities._matrixComponentNames) {
                var rb = sap.ui.vtm.getResourceBundle();
                MatrixUtilities._matrixComponentNames = [
                    rb.getText("TMATRIXCOMPONENT_LOCX"),
                    rb.getText("TMATRIXCOMPONENT_LOCY"),
                    rb.getText("TMATRIXCOMPONENT_LOCZ"),
                    rb.getText("TMATRIXCOMPONENT_AXIS1X"),
                    rb.getText("TMATRIXCOMPONENT_AXIS1Y"),
                    rb.getText("TMATRIXCOMPONENT_AXIS1Z"),
                    rb.getText("TMATRIXCOMPONENT_AXIS2X"),
                    rb.getText("TMATRIXCOMPONENT_AXIS2Y"),
                    rb.getText("TMATRIXCOMPONENT_AXIS2Z"),
                    rb.getText("TMATRIXCOMPONENT_AXIS3X"),
                    rb.getText("TMATRIXCOMPONENT_AXIS3Y"),
                    rb.getText("TMATRIXCOMPONENT_AXIS3Z"),
                    rb.getText("TMATRIXCOMPONENT_SCALE")
                ];
            }
            return MatrixUtilities._matrixComponentNames;
        };

        return MatrixUtilities;
    },
    true);

}; // end of sap/ui/vtm/MatrixUtilities.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.PredefinedView') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.PredefinedView'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vtm/PredefinedView",[],
    function () {
        "use strict";

        /**
         * Enumeration specifying predefined views.
         *
         * @enum {string}
         * @public
         * @name sap.ui.vtm.PredefinedView
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This type is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
         */
        var PredefinedView = {

            /**
             * The view from the top.
             * @public
             * @name sap.ui.vtm.PredefinedView.Top
             */
            Top: "Top",

            /**
             * The view from the bottom.
             * @public
             * @name sap.ui.vtm.PredefinedView.Bottom
             */
            Bottom: "Bottom",

            /**
             * The view from the front.
             * @public
             * @name sap.ui.vtm.PredefinedView.Front
             */
            Front: "Front",

            /**
             * The view from the back.
             * @public
             * @name sap.ui.vtm.PredefinedView.Back
             */
            Back: "Back",

            /**
             * The view from the left.
             * @public
             * @name sap.ui.vtm.PredefinedView.Left
             */
            Left: "Left",

            /**
             * The view from the right.
             * @public
             * @name sap.ui.vtm.PredefinedView.Right
             */
            Right: "Right"
        };

        return PredefinedView;
    }, true);
}; // end of sap/ui/vtm/PredefinedView.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Progress') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.Progress'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.ProgressIndicator'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Progress",
    ["jquery.sap.global", "sap/ui/core/Control", "sap/m/Text", "sap/m/ProgressIndicator"],
    function (jQuery, SapUiCoreControl, SapMText, SapMProgressIndicator) {

        "use strict";

        /**
         * Constructor for a new Progress.
         * @private
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @class
         * A progress control to show download and load progress.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.Progress} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.Progress} instance.
         * @name sap.ui.vtm.Progress
         * @extends sap.ui.core.Control
         */
        var Progress = SapUiCoreControl.extend("sap.ui.vtm.Progress",  /** @lends sap.ui.vtm.Progress.prototype */ {
            metadata: {
                aggregations: {
                    progressText: {
                        type: "sap.m.Title",
                        multiple: false
                    },
                    progressBar: {
                        type: "sap.m.ProgressIndicator",
                        multiple: false
                    }
                }
            },

            init: function () {
                var progressBar = new sap.m.ProgressIndicator({
                    width: "100%"
                });
                progressBar.addStyleClass("sapUiVtmProgress_progressBar");
                this.setProgressBar(progressBar);

                var progressText = new sap.m.Title({
                    width: "100%",
                    titleStyle: sap.ui.core.TitleLevel.H3,
                    textAlign: sap.ui.core.TextAlign.Center
                });
                progressText.addStyleClass("sapUiVtmProgress_progressText");
                this.setProgressText(progressText);

                this.addStyleClass("sapUiVtmProgress");
            },

            renderer: function (oRM, oControl) {
                oRM.write("<div");
                oRM.writeControlData(oControl);
                oRM.addStyle("height", "inherit");
                oRM.writeStyles();
                oRM.writeClasses();
                oRM.write(">");
                oRM.renderControl(oControl.getProgressText());
                oRM.renderControl(oControl.getProgressBar());
                oRM.write("</div>");
            }
        });

        return Progress;
    });

}; // end of sap/ui/vtm/Progress.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.SceneNode') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.SceneNode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.NodeProxy'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/SceneNode",
    ["jquery.sap.global", "sap/ui/core/Element", "sap/ui/vk/NodeProxy", "./ArrayUtilities", "./MatrixUtilities"],
    function (jQuery, SapUiCoreElement, SapUiVkNodeProxy, SapUiVtmArrayUtilities, SapUiVtmMatrixUtilities) {

        "use strict";

        /**
         * This class is not intended to be directly instantiated by application code.
         * The scene traversal methods ({@link sap.ui.vtm.Scene#traverseTree traverseTree}, {@link sap.ui.vtm.Scene#traverseBranch traverseBranch}, {@link sap.ui.vtm.Scene#traverseNodes traverseNodes}) should be used to access scene nodes
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.SceneNode
         * @public
         * @class
         * This class provides access to the data for a scene node.
         * Objects of this type are transient. Long lived references to such objects should not be kept.
         * A single {@link sap.ui.vtm.SceneNode} object can be reused to refer to a different scene node by changing the value of the <code>sceneNodeId</code> property.
         * Scene traversal methods typically reuse a single {@link sap.ui.vtm.SceneNode} object to avoid construction and destruction.
         * Applications are expected to use their own data structures to store data extracted from scene nodes that needs to be accessed efficiently.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string] sId An optional ID for the {@link sap.ui.vtm.SceneNode}.
         * @param {object} [mSettings] An optional object with initial settings for the new {@link sap.ui.vtm.SceneNode} instance.
         * @extends sap.ui.core.Element
         */
        var SceneNode = SapUiCoreElement.extend("sap.ui.vtm.SceneNode", /** @lends sap.ui.vtm.SceneNode.prototype */ {
            metadata: {
                properties: {
                    /**
                     * The scene node id.
                     *
                     * This is a transient identifier that exists in the context of the current scene. It should not be persisted.
                     */
                    sceneNodeId: {
                        type: "string"
                    },

                    /**
                     * The {@link sap.ui.vtm.Scene} for the scene node.
                     */
                    scene: {
                        type: "object"
                    }
                }
            },

            /**
             * Frees the underlying node proxy.
             * @private
             * @function
             */
            _destroy: function() {
                if (this._vkNodeProxy) {
                    this.getScene()._getNodeHierarchy().destroyNodeProxy(this.getSceneNodeId());
                    this._vkNodeProxy = null;
                }
            },

            exit: function() {
                this._destroy();
            },

            /**
             * Throws an exception if the node proxy has been deleted.
             * @private
             * @function
             */
            _checkValidity: function() {
                if (!this._vkNodeProxy) {
                    throw "Node has been destroyed";
                }
            },

            setSceneNodeId: function(sSceneNodeId) {
                this._destroy();
                this.setProperty("sceneNodeId", sSceneNodeId);
                var oScene = this.getScene();
                if (oScene) {
                    this._vkNodeProxy = oScene._getNodeHierarchy().createNodeProxy(sSceneNodeId);
                }
                return this;
            },

            setScene: function(oScene) {
                this._destroy();
                this.setProperty("scene", oScene);
                var sSceneNodeId = this.getSceneNodeId();
                if (sSceneNodeId) {
                    this._vkNodeProxy = oScene._getNodeHierarchy().createNodeProxy(sSceneNodeId);
                }
                return this;
            },

            /**
             * Gets the name of the scene node.
             * @function
             * @public
             * @returns {string} The scene node name.
             */
            getName: function () {
                this._checkValidity();
                return this._vkNodeProxy.getName();
            },

            /**
             * Gets whether this scene node is closed.
             * When a scene node is closed, the closed scene node and its descendants are treated as a single scene node (at least in terms of selection).
             * @function
             * @public
             * @returns {boolean} Whether this scene node is closed.
             */
            getClosed: function () {
                this._checkValidity();
                return this._vkNodeProxy.getClosed();
            },

            /**
             * Gets the relative transformation matrix that applies to the scene node in ISO 10303-42 format.
             * @function
             * @public
             * @returns {sap.ui.vtm.Matrix} The relative transformation matrix that applies to the scene node in ISO 10303-42 format.
             */
            getRelativeMatrix: function () {
                this._checkValidity();
                var vkMatrix = this._vkNodeProxy.getLocalMatrix();
                return vkMatrix ? sap.ui.vtm.MatrixUtilities.fromVkMatrix(vkMatrix) : null;
            },

            /**
             * Sets the relative transformation matrix that applies to the scene node in ISO 10303-42 format.
             * @function
             * @public
             * @param {sap.ui.vtm.Matrix} matrix The relative transformation matrix that applies to the scene node in ISO 10303-42 format.
             * @returns {sap.ui.vtm.SceneNode} <code>this</code> for method chaining.
             */
            setRelativeMatrix: function (matrix) {
                this._checkValidity();
                var vkMatrix = sap.ui.vtm.MatrixUtilities.toVkMatrix(matrix);
                this._vkNodeProxy.setLocalMatrix(vkMatrix);
                return this;
            },

            /**
             * Gets the absolute transformation matrix that applies to the scene node in ISO 10303-42 format.
             * @function
             * @public
             * @returns {sap.ui.vtm.Matrix} The absolute transformation matrix that applies to the scene node in ISO 10303-42 format.
             */
            getAbsoluteMatrix: function () {
                this._checkValidity();
                var vkMatrix = this._vkNodeProxy.getWorldMatrix();
                return vkMatrix ? sap.ui.vtm.MatrixUtilities.fromVkMatrix(vkMatrix) : null;
            },

            /**
             * Sets the absolute transformation matrix that applies to the scene node in ISO 10303-42 format.
             * @function
             * @public
             * @param {sap.ui.vtm.Matrix} matrix The absolute transformation matrix that applies to the scene node in ISO 10303-42 format.
             * @returns {sap.ui.vtm.SceneNode} <code>this</code> for method chaining.
             */
            setAbsoluteMatrix: function (matrix) {
                this._checkValidity();
                var vkMatrix = sap.ui.vtm.MatrixUtilities.toVkMatrix(matrix);
                this._vkNodeProxy.setWorldMatrix(vkMatrix);
                return this;
            },
           
            /**
             * Converts metadata in the representation used by {@link sap.ui.vk.NodeProxy} to the VTM representation.
             * @function
             * @private
             * @param {any} vkMetadata The metadata in the representation used by {@link sap.ui.vk.NodeProxy}.
             * @return {Map} The VTM metadata map.
             */
            _fromVkMetadata: function (vkMetadata) {
                var result = {};
                var categoryNames = Object.getOwnPropertyNames(vkMetadata);
                categoryNames.forEach(function(categoryName) {
                    var metadataCategory = vkMetadata[categoryName];
                    var fieldNames = Object.getOwnPropertyNames(metadataCategory);

                    fieldNames.forEach(function(fieldName) {
                        var metadataValue = metadataCategory[fieldName];
                        var descriptor = {category: categoryName, field: fieldName};
                        result[JSON.stringify(descriptor)] = metadataValue;
                    });
                });
                return result;
            },

            /**
             * Gets a plain JavaScript object map of metadata values.
             * <p>Keys are in the form: <code>'{"category":"SAP","field":"MATERIAL"}'</code>.</p>
             * <p>Values are in the form of strings or arrays of strings.</p>
             * @function
             * @public
             * @returns {object} The plain JavaScript object map of metadata values.
             */
            getNodeMetadata: function () {
                this._checkValidity();
                var vkMetadata = this._vkNodeProxy.getNodeMetadata();
                return vkMetadata ? this._fromVkMetadata(vkMetadata) : {};
            },

            /**
             * Converts from VE IDs in the representation used by {@link sap.ui.vk.NodeProxy} to VTM style identifier values.
             * @private
             * @function
             * @param {object[]} vkIdentifiers A set of identifiers in the format used by {@link sap.ui.vk.NodeProxy}.
             * @return {string|string[]} A VTM identifier or array of VTM identifiers.
             */
            _fromVkVeIds: function (vkIdentifiers) {
                var result = {};
                vkIdentifiers.forEach(function(identifier) {
                    var key = JSON.stringify({
                        source: identifier.source,
                        type: identifier.type
                    });
                    var value = JSON.stringify(identifier.fields);
                    var existingValue = result[key];
                    if (existingValue){
                        var valueArray = sap.ui.vtm.ArrayUtilities.wrap(existingValue);
                        valueArray.push(value);
                        result[key] = valueArray;
                    } else {
                        result[key] = value;
                    }
                });
                return result;
            },

            /**
             * Gets a plain JavaScript object map of identifier values.
             * <p>Keys are in the form: <code>['{"source":"SAP","type":"VE_COMPONENT"}'</code>.</p>
             * <p>Values are strings or arrays of strings in the form: <code>'[{"name":"ID", "value":"_moto_x_asm"},{"name":"version", "value": "00"},{"name": "timestamp", "value":"2016-05-18 03:44:53.93"}]'</code>.</p>
             * @function
             * @public
             * @returns {object} The plain JavaScript object map of identifier values.
             */
            getIdentifiers: function () {
                this._checkValidity();
                var vkIdentifiers = this._vkNodeProxy.getVeIds();
                return vkIdentifiers ? this._fromVkVeIds(vkIdentifiers) : {};
            }
        });

        return SceneNode;
    },
    true);
}; // end of sap/ui/vtm/SceneNode.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.SelectionMode') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.SelectionMode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vtm/SelectionMode",[],
    function () {
        "use strict";

        /**
         * Enumeration specifying row selection modes for a {@link sap.ui.vtm.Tree}.
         *
         * @enum {string}
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This type is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
         */
        sap.ui.vtm.SelectionMode = {

            /**
             * Single selection mode.
             * @public
             */
            Single: "Single",

            /**
             * A multiple selection mode that toggles the selection state of a row when it is clicked.
             * @public
             */
            MultiToggle: "MultiToggle"
        };

        return sap.ui.vtm.SelectionMode;
    });
}; // end of sap/ui/vtm/SelectionMode.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.TextColor') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.TextColor'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vtm/TextColor",[],
    function () {
        "use strict";

        /**
         * Enumeration specifying text colors.
         *
         * @enum {string}
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This type is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
         */
        sap.ui.vtm.TextColor = {

            /**
             * The default text color.
             * @public
             */
            Default: "Default",

            /**
             * Gray.
             * @public
             */
            Gray: "Gray",

            /**
             * Grey. A synonym for Gray.
             * @public
             */
            Grey: "Grey"
        };

        return sap.ui.vtm.TextColor;
    });
}; // end of sap/ui/vtm/TextColor.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.TreeCollections') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.TreeCollections'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/TreeCollections",[
        "jquery.sap.global",
        "sap/ui/core/Element",
        "./ArrayUtilities"
    ],
    function (
        jQuery,
        SapUiCoreElement,
        SapUiVtmArrayUtilities) {

        "use strict";

        /**
         * Constructor for a new TreeCollections object.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @private
         * @class
         * Manages various collections for a {@link sap.ui.vtm.Tree} control instance.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.TreeCollections}.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.Tree}.
         * @name sap.ui.vtm.TreeCollections
         * @extends sap.ui.core.Element
         */
        var TreeCollections = SapUiCoreElement.extend("sap.ui.vtm.TreeCollections", /** @lends sap.ui.vtm.TreeCollections.prototype */ {

            /**
             * Returns a tree item id given a value that may be a tree item or a tree item id.
             * @function
             * @public
             * @param {object|string} treeItemOrId  A value that may be a tree item or a tree item id.
             * @return {object} The tree item.
             */
            getTreeItem: function(treeItemOrId) {
                if (!treeItemOrId) {
                    return null;
                }
                if (typeof treeItemOrId === "string") {
                    var treeItem = this._treeItemsById.get(treeItemOrId);
                    if (!treeItem) {
                        throw treeItemOrId + " was not found in tree with tree id " + this.getId();
                    }
                    return treeItem;
                }
                return treeItemOrId;
            },
            
            /**
             * Returns a tree item id given a value that may be a tree item or a tree item id.
             * @function
             * @public
             * @param {object|string} treeItemOrId  A value that may be a tree item or a tree item id.
             * @return {string} The tree item id.
             */
            getTreeItemId: function(treeItemOrId) {
                if (!treeItemOrId) {
                    return null;
                }
                return typeof treeItemOrId === "string" ?  treeItemOrId : treeItemOrId.id;
            },

            /**
             * Updates collections used to find tree items by various criteria.<br/>
             * This method should be called whenever the tree has been populated, when the tree structure has changed or when any of the following fields have been modified for a tree item in the tree:
             * <ul>
             * <li>id</li>
             * <li>sceneNodeIds <b>*</b></li>
             * <li>includedChildren</li>
             * <li>excludedChildren</li>
             * </ul>
             * <br/>
             * Correct usage of this method is required by the following methods:
             * <ul>
             * <li>{@link #getItem}</li>
             * <li>{@link #getParentItem}</li>
             * <li>{@link #getDescendantItems}</li>
             * <li>{@link #getAncestorItems}</li>
             * <li>{@link #getItemsBySceneNodeId} <b>*</b></li>
             * <li>{@link #setExpanded}</li>
             * <li>{@link #getExpanded}</li>
             * <li>{@link #expandAncestors}</li>
             * <li>{@link #scrollIntoView}</li>
             * <li>{@link #setSelectedItems}</li>
             * <li>{@link #isIncludedItem}</li>
             * <li>{@link #isExcludedItem}</li>
             * <li>{@link #traverseBranch}</li>
             * </ul>
             * <br/>
             * <b>*</b> When the only changes to the tree since the last call to {@link #updateCollections} are changes to the <code>sceneNodeIds<code> 
             * properties of the tree items, {@link #updateTreeItemsBySceneNodeId} can be used instead of {@link #updateCollections}.
             * @function
             * @public
             * @param {object[]} rootItems The root items of the tree.
             * @param {boolean?} checkForHierarchyChanges When true a <code>hierarchyChanged</code> event will be raised if the hierarchy has changed since the last time this method was called.
             * This method is called when the tree is empty as part of the {@link sap.ui.vtm.Tree} constructor, so the first time it is called from application code a <code>hierarchyChanged</code> event will be raised if the tree has been populated.
             * The default value for the parameter is <code>true</code>.
             * @fires hierarchyChanged
             * @returns {boolean} Returns whether a hierarchy change was detected.
             */
            updateCollections: function (rootItems, checkForHierarchyChanges) {
                checkForHierarchyChanges = checkForHierarchyChanges !== false;
                var oldParentIdsById = this._parentIdsById;
                var oldIncludedTreeItems = this._includedTreeItems;
                var oldExcludedTreeItems = this._excludedTreeItems;
                this._treeItemsById = new Map();
                this._parentIdsById = new Map();
                this._treeItemsBySceneNodeId = new sap.ui.vtm.Lookup();
                this._includedTreeItems = [];
                this._excludedTreeItems = [];
                var parentIdsById = this._parentIdsById;
                var hierarchyChanged = false;

                var updateCollectionsForItem = function (item, parent, excluded) {
                    var id = item.id;
                    if (!id) {
                        throw "id is not set for tree item with name " + item.name;
                    }
                    if (this._treeItemsById.has(id)) {
                        throw id + " is not unique in the tree";
                    }
                    var index;
                    if (excluded) {
                        this._excludedTreeItems.push(item);
                        if (checkForHierarchyChanges && oldExcludedTreeItems && !hierarchyChanged) {
                            index = this._excludedTreeItems.length - 1;
                            if (index >= oldExcludedTreeItems.length  || oldExcludedTreeItems[index] != item) {
                                hierarchyChanged = true;
                            }
                        }
                    } else {
                        this._includedTreeItems.push(item);
                        if (checkForHierarchyChanges && oldIncludedTreeItems && !hierarchyChanged) {
                            index = this._includedTreeItems.length - 1;
                            if (index >= oldIncludedTreeItems.length  || oldIncludedTreeItems[index] != item) {
                                hierarchyChanged = true;
                            }
                        }
                    }
                    this._treeItemsById.set(id, item);
                    if (parent) {
                        if (!parent.id) {
                            throw "id is not set for tree item with name " + parent.name;
                        }
                        parentIdsById.set(id, parent.id);
                        if (checkForHierarchyChanges && oldParentIdsById && !hierarchyChanged) {
                            if (oldParentIdsById.get(id) !== parent.id) {
                                hierarchyChanged = true;
                            }
                        }
                    } else if (checkForHierarchyChanges && oldParentIdsById && !hierarchyChanged) {
                        if (oldParentIdsById.get(id)) {
                            hierarchyChanged = true;
                        }
                    }
                    if (item.includedChildren) {
                        item.includedChildren.forEach(function(child) {
                            updateCollectionsForItem(child, item, excluded);
                        });
                    }
                    if (item.excludedChildren) {
                        item.excludedChildren.forEach(function(child) {
                            updateCollectionsForItem(child, item, true);
                        });
                    }
                    if (item.sceneNodeIds) {
                        sap.ui.vtm.TreeItemUtilities.getSceneNodeIds(item).forEach(function(sceneNodeId) {
                            this._treeItemsBySceneNodeId.addValue(sceneNodeId, item);
                        }.bind(this));
                    }
                }.bind(this);

                rootItems.forEach(function(rootItem) {
                    updateCollectionsForItem(rootItem, null);
                });

                if (checkForHierarchyChanges && !hierarchyChanged) {
                    if (oldIncludedTreeItems && oldIncludedTreeItems.length !== this._includedTreeItems.length) {
                        hierarchyChanged = true;
                    }
                    if (oldExcludedTreeItems && oldExcludedTreeItems.length !== this._excludedTreeItems.length) {
                        hierarchyChanged = true;
                    }
                }

                return checkForHierarchyChanges && hierarchyChanged;
            },

            /**
             * Update just the collection used by {@link #getItemsBySceneNodeId}.
             * 
             * This is useful when the only changes to the tree since the last call to {@link #updateCollections} are changes to the <code>sceneNodeIds<code> properties of the tree items.
             * @public
             * @function
             * @param {string[]} rootItems The root items of the {@link sap.ui.vtm.Tree}.
             */
            updateTreeItemsBySceneNodeId: function(rootItems) {
                this._treeItemsBySceneNodeId = new sap.ui.vtm.Lookup();
                sap.ui.vtm.TreeItemUtilities.traverseTree(rootItems, function(treeItem) {
                    sap.ui.vtm.TreeItemUtilities.getSceneNodeIds(treeItem).forEach(function(sceneNodeId) {
                        this._treeItemsBySceneNodeId.addValue(sceneNodeId, treeItem);
                    }.bind(this));
                    return sap.ui.vtm.ChildCollectionType.IncludedAndExcluded;
                }.bind(this));
            },

            /**
             * Finds a tree item by id or returns undefined if it is not found.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {string} treeItemId The tree item id to look for.
             * @returns {object|undefined} The tree item matching the specified id or undefined if no match was found.
             */
            getItem: function (treeItemId) {
                return this._treeItemsById.get(treeItemId);
            },

            /**
             * Returns whether a tree item object is an included tree item in the tree model of this {@link sap.ui.vtm.Tree}.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|string} treeItem The tree item or tree item id to check.
             * @return {boolean} Whether a tree item object is an included tree item in this tree.
             */
            isIncludedItem: function(treeItem) {
                treeItem = this.getTreeItem(treeItem);
                return this._includedTreeItems.indexOf(treeItem) !== -1;
            },
            
            /**
             * Returns whether a tree item object is an excluded tree item in the tree model of this {@link sap.ui.vtm.Tree}.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|string} treeItem The tree item or tree item id to check.
             * @return {boolean} Whether a tree item object is an included tree item in this tree.
             */
            isExcludedItem: function(treeItem) {
                treeItem = this.getTreeItem(treeItem);
                return this._excludedTreeItems.indexOf(treeItem) !== -1;
            },

            /**
             * Finds the set of tree items that are associated with a particular scene node id.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * When the only changes to the tree since the last call to {@link #updateCollections} are changes to the  <code>sceneNodeIds<code> properties of the tree items, it is possible to use {@link #updateTreeItemsBySceneNodeId} instead of {@link #updateCollections}.
             * @public
             * @function
             * @param {string|string[]} sceneNodeIds The scene node ID or IDs to find.
             * @param {sap.ui.vtm.TreeItemType?} treeItemType Indicates the types of tree item to match.
             * Defaults to {@link sap.ui.vtm.TreeItemType.Included}.
             * @returns {object[]} The set of tree items that have a <code>sceneNodeIds</code> property that contains the specified scene node id.
             */
            getItemsBySceneNodeId: function (sceneNodeIds, treeItemType) {
                sceneNodeIds = sap.ui.vtm.ArrayUtilities.wrap(sceneNodeIds);
                if (!sceneNodeIds.length) {
                    return [];
                }
                treeItemType = treeItemType || sap.ui.vtm.TreeItemType.Included;
                
                var treeItemMatchesType = function(treeItem, treeItemType) {
                    switch (treeItemType) {
                    case sap.ui.vtm.TreeItemType.IncludedOrExcluded:
                        return true;
                    case sap.ui.vtm.TreeItemType.Included:
                        return this.isIncludedItem(treeItem);
                    case sap.ui.vtm.TreeItemType.Excluded:
                        return this.isExcludedItem(treeItem);
                    default:
                        throw "Unexpected sap.ui.vtm.TreeItemType value " + treeItemType;
                    }
                }.bind(this);
                
                var treeItemsToReturn = [];
                sceneNodeIds.forEach(function(sceneNodeId) {
                    var treeItems = this._treeItemsBySceneNodeId.getValues(sceneNodeId);
                    treeItems.forEach(function(treeItem) {
                        if (treeItemsToReturn.indexOf(treeItem) === -1 && treeItemMatchesType(treeItem, treeItemType)) {
                            treeItemsToReturn.push(treeItem);
                        }
                    });
                }.bind(this));
                return treeItemsToReturn;
            },

            /**
             * Finds a parent tree item by child id or returns undefined if it is not found.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|string} treeItem The child tree item or tree item id.
             * @returns {object|undefined} The parent tree item or undefined if no match was found.
             */
            getParentItem: function (treeItem) {
                var treeItemId = this.getTreeItemId(treeItem);
                var parentId = this._parentIdsById.get(treeItemId);
                if (!parentId) {
                    return undefined;
                }
                return this._treeItemsById.get(parentId);
            },

            /**
             * Gets the descendants of a tree item.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|string} treeItem The tree item or id of the tree item to get the descendants of.
             * @param {sap.ui.vtm.TreeItemType?} treeItemType Indicates the types of tree item to match.
             * Defaults to {@link sap.ui.vtm.TreeItemType.Included}.
             * @returns {object[]|undefined} The descendants of the tree item or undefined if the tree item is not found.
             */
            getDescendantItems: function (treeItem, treeItemType) {
                treeItem = this.getTreeItem(treeItem);
                treeItemType = treeItemType || sap.ui.vtm.TreeItemType.Included;
                var descendantItems = [];
                switch (treeItemType) {
                case sap.ui.vtm.TreeItemType.IncludedOrExcluded:
                    sap.ui.vtm.TreeItemUtilities.traverseBranch(treeItem, function (ti) {
                        if (ti !== treeItem) {
                            descendantItems.push(ti);
                        }
                        return sap.ui.vtm.ChildCollectionType.IncludedAndExcluded;
                    });
                    break;
                case sap.ui.vtm.TreeItemType.Included:
                    sap.ui.vtm.TreeItemUtilities.traverseBranch(treeItem, function (ti) {
                        if (ti === treeItem) {
                            return this.isIncludedItem(ti)
                                ? sap.ui.vtm.ChildCollectionType.Included
                                : sap.ui.vtm.ChildCollectionType.None;
                        } else {
                            descendantItems.push(ti);
                            return sap.ui.vtm.ChildCollectionType.Included;
                        }
                    }.bind(this));
                    break;
                case sap.ui.vtm.TreeItemType.Excluded:
                    sap.ui.vtm.TreeItemUtilities.traverseBranch(treeItem, function (ti) {
                        if (ti === treeItem) {
                            return sap.ui.vtm.ChildCollectionType.IncludedAndExcluded;
                        } else {
                            if (this.isExcludedItem(ti)) {
                                descendantItems.push(ti);
                            }
                            return sap.ui.vtm.ChildCollectionType.IncludedAndExcluded;
                        }
                    }.bind(this));
                    break;
                default:
                    throw "Unexpected sap.ui.vtm.TreeItemType value " + treeItemType;
                }
                return descendantItems;
            },

            /**
             * Finds all ancestors of a tree item.
             *
             * An empty array will be returned for root items.<br/>
             * Otherwise an array of ancestor tree items will be returned.<br/>
             * The array will be ordered such that:
             * <ul>
             * <li>The root item will be first element in the array.</li>
             * <li>The parent item will be last element in the array.</li>
             * </ul>
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|string} treeItem The tree item or id of the tree item to get the ancestors of.
             * @returns {object[]} The ancestors of the tree item.
             */
            getAncestorItems: function (treeItem) {
                treeItem = this.getTreeItem(treeItem);
                var ancestors = [];
                var ancestor = this.getParentItem(treeItem.id);
                while (ancestor) {
                    ancestors.push(ancestor);
                    ancestor = this.getParentItem(ancestor.id);
                }
                return ancestors.reverse();
            },

            /**
             * Finds all tree items in the tree of a given type.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {sap.ui.vtm.TreeItemType?} treeItemType Indicates the types of tree item to match.
             * Defaults to {@link sap.ui.vtm.TreeItemType.Included}.
             * @returns {object[]} All the tree items in the tree.
             */
            getAllItems: function (treeItemType) {
                treeItemType = treeItemType || sap.ui.vtm.TreeItemType.Included;
                switch (treeItemType) {
                case sap.ui.vtm.TreeItemType.IncludedOrExcluded:
                    return this._includedTreeItems.concat(this._excludedTreeItems);
                case sap.ui.vtm.TreeItemType.Included:
                    return this._includedTreeItems.slice();
                case sap.ui.vtm.TreeItemType.Excluded:
                    return this._excludedTreeItems.slice();
                default:
                    throw "Unexpected sap.ui.vtm.TreeItemType value " + treeItemType;
                }
            }
        });

        return TreeCollections;
    });
}; // end of sap/ui/vtm/TreeCollections.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.TreeItemType') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.TreeItemType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vtm/TreeItemType",[],
    function () {
        "use strict";

        /**
         * Enumeration specifying the type(s) of tree item to match during tree traversal.
         *
         * @enum {string}
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This type is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
         */
        sap.ui.vtm.TreeItemType = {

            /**
             * A tree item that can be shown in the tree.
             * A tree item is an included tree item when it is a root tree item or is included in the <code>includedChildren</code> collection of its parent.
             * @public
             */
            Included: "Included",

            /**
             * A tree item that is in the object hierarchy of the tree model, but cannot be shown in the tree.
             * A tree item is an excluded tree item when any ancestor of the tree item is included in the <code>excludedChildren</code> collection of its parent.
             * @public
             */
            Excluded: "Excluded",

            /**
             * Matches either included or excluded tree items.
             * @public
             */
            IncludedOrExcluded: "IncludedOrExcluded"
        };

        return sap.ui.vtm.TreeItemType;
    });
}; // end of sap/ui/vtm/TreeItemType.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.TreeItemUtilities') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.TreeItemUtilities'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Message'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/TreeItemUtilities",
    ['jquery.sap.global', "sap/ui/core/Message", "./ArrayUtilities"],
    function(jQuery, SapUiCoreMessage, SapUiVtmArrayUtilities) {

        "use strict";

        /**
         * A set of utility functions for working with tree items for {@link sap.ui.vtm.Tree} controls.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @namespace
         * @name sap.ui.vtm.TreeItemUtilities
         * @public
         * @author SAP SE
         * @version 1.50.3
         */
        var TreeItemUtilities = {};

        /**
         * Applies a mapping function to each tree item in a branch of a tree to create a new tree branch.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.mapBranch
         * @param {object} treeItem The tree item representing the branch to map.
         * @param {function} mapFunc A function that takes a tree item and returns a new tree item.
         * @returns {object} The mapped tree branch.
         */
        TreeItemUtilities.mapBranch = function(treeItem, mapFunc) {
            var mappedTreeItem = mapFunc(treeItem);
            if (treeItem.includedChildren) {
                mappedTreeItem.includedChildren = treeItem.includedChildren.map(function (child) {
                    return TreeItemUtilities.mapBranch(child, mapFunc);
                });
            }
            if (treeItem.excludedChildren) {
                mappedTreeItem.excludedChildren = treeItem.excludedChildren.map(function (child) {
                    return TreeItemUtilities.mapBranch(child, mapFunc);
                });
            }
            return mappedTreeItem;
        };

        /**
         * Applies a mapping function to each tree item in a tree to create a new tree.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.mapTree
         * @param {object[]} rootTreeItems The root tree items of the tree to map.
         * @param {function} mapFunc A function that takes a tree item and returns a new tree item.
         * @returns {object[]} The root tree items of the mapped tree.
         */
        TreeItemUtilities.mapTree = function(rootTreeItems, mapFunc) {
            var mappedRootItems = [];
            rootTreeItems.forEach(function(rootTreeItem) {
                mappedRootItems.push(TreeItemUtilities.mapBranch(rootTreeItem, mapFunc));
            });
            return mappedRootItems;
        };

        var valueCloneFunc = function (item) {
            return Array.isArray(item)
                ? sap.ui.vtm.ArrayUtilities.shallowClone(item)
                : item;
        };

        var mapObjectClone = function(mapObject){
            if (mapObject === null || mapObject === undefined) {
                return mapObject;
            }
            var cloned = {};
            var keys = Object.keys(mapObject);
            keys.forEach(function(key) {
                 cloned[key] = valueCloneFunc(mapObject[key]);
            });
            return cloned;
        };

        /**
         * Returns a cloned copy of the metadata on the passed tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.cloneMetadata
         * @param {object} treeItem The tree item.
         * @returns {object} A cloned copy of the metadata on the passed tree item.
         */
        TreeItemUtilities.cloneMetadata = function(treeItem){
            return mapObjectClone(treeItem.metadata);
        };

        /**
         * Returns a cloned copy of the identifiers on the passed tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.cloneIdentifiers
         * @param {object} treeItem The tree item.
         * @returns {object} A cloned copy of the metadata on the passed tree item.
         */
        TreeItemUtilities.cloneIdentifiers = function(treeItem){
            return mapObjectClone(treeItem.identifiers);
        };

        /**
         * Returns a cloned copy of the appData on the passed tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.cloneAppData
         * @param {object} treeItem The tree item.
         * @returns {object} A cloned copy of the appData on the passed tree item.
         */
        TreeItemUtilities.cloneAppData = function(treeItem){
            return mapObjectClone(treeItem.appData);
        };

        /**
         * Returns whether the tree item has a <code>visibility</code> value.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.hasVisibility
         * @param {object} treeItem The tree item.
         * @returns {boolean} Whether the tree item has a <code>visibility</code> value.
         */
        TreeItemUtilities.hasVisibility = function(treeItem) {
            return treeItem.visibility === true || treeItem.visibility === false;
        };

        /**
         * Gets the application data field descriptors for a given tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getAppDataDescriptors
         * @param {object} treeItem The tree item to get application data field descriptors from.
         * @returns {string[]} The application data field descriptors for the given tree item.
         */
        TreeItemUtilities.getAppDataDescriptors = function (treeItem) {
            if (!treeItem.appData) {
                return [];
            }
            return Object.keys(treeItem.appData);
        };

        /**
         * Gets the application data values associated with a particular descriptor for a tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getAppDataValues
         * @param {object} treeItem The tree item to get application data values from.
         * @param {string} descriptor The descriptor describing the application data value(s) to retrieve.
         * @returns {string[]|number[]|boolean[]|object[]} The application data values.
         */
        TreeItemUtilities.getAppDataValues = function (treeItem, descriptor) {
            if (!treeItem.appData) {
                return [];
            }
            return SapUiVtmArrayUtilities.wrap(treeItem.appData[descriptor]);
        };

        /**
         * Set the application data values associated with a particular descriptor for a tree item (replacing any existing values).
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.setAppDataValues
         * @param {object} treeItem The tree item to update.
         * @param {string} descriptor The descriptor describing the application data value(s) to update.
         * @param {undefined|string|string[]|number|number[]|boolean|boolean[]|object|object[]} values The application data value or values to apply. A value of undefined clears all values for the descriptor.
         */
        TreeItemUtilities.setAppDataValues = function (treeItem, descriptor, values) {
            var value = SapUiVtmArrayUtilities.unwrap(values);
            if (value === undefined) {
                if (treeItem.appData) {
                    delete treeItem.appData[descriptor];
                }
            } else {
                if (!treeItem.appData) {
                    treeItem.appData = {};
                }
                treeItem.appData[descriptor] = values;
            }
        };

        /**
         * Gets the metadata field descriptors for a given tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getMetadataDescriptors
         * @param {object} treeItem The tree item to get metadata field descriptors from.
         * @returns {string[]} The metadata field descriptors for the given tree item.
         */
        TreeItemUtilities.getMetadataDescriptors = function (treeItem) {
            if (!treeItem.metadata) {
                return [];
            }
            return Object.keys(treeItem.metadata);
        };

        /**
         * Gets the metadata values associated with a particular descriptor for a tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getMetadataValues
         * @param {object} treeItem The tree item to metadata values from.
         * @param {string} descriptor The descriptor describing the metadata value(s) to retrieve.
         * @returns {string[]|number[]|boolean[]|object[]} The metadata values.
         */
        TreeItemUtilities.getMetadataValues = function (treeItem, descriptor) {
            if (!treeItem.metadata) {
                return [];
            }
            return SapUiVtmArrayUtilities.wrap(treeItem.metadata[descriptor]);
        };

        /**
         * Set the metadata values associated with a particular descriptor for a tree item (replacing any existing values).
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.setMetadataValues
         * @param {object} treeItem The tree item to update.
         * @param {string} descriptor The descriptor describing the metadata value(s) to update.
         * @param {undefined|string|string[]|number|number[]|boolean|boolean[]|object|object[]} values The metadata value or values to apply. A value of undefined clears all values for the descriptor.
         */
        TreeItemUtilities.setMetadataValues = function (treeItem, descriptor, values) {
            var value = SapUiVtmArrayUtilities.unwrap(values);
            if (value === undefined) {
                if (treeItem.metadata) {
                    delete treeItem.metadata[descriptor];
                }
            } else {
                if (!treeItem.metadata) {
                    treeItem.metadata = {};
                }
                treeItem.metadata[descriptor] = values;
            }
        };

        /**
         * Gets the identifier descriptors for a given tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getIdentifierDescriptors
         * @param {object} treeItem The tree item to get identifier descriptors from.
         * @returns {string[]} The identifier descriptors for the given tree item.
         */
        TreeItemUtilities.getIdentifierDescriptors = function (treeItem) {
            if (!treeItem || !treeItem.identifiers) {
                return [];
            }
            return Object.keys(treeItem.identifiers);
        };

        /**
         * Gets the identifier values associated with a particular descriptor for a tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getIdentifierValues
         * @param {object} treeItem The tree item to retrieve values from.
         * @param {string} descriptor The descriptor describing the identifier value(s) to retrieve.
         * @returns {string[]} The identifier values.
         */
        TreeItemUtilities.getIdentifierValues = function (treeItem, descriptor) {
            if (!treeItem.identifiers) {
                return [];
            }
            return SapUiVtmArrayUtilities.wrap(treeItem.identifiers[descriptor]);
        };

        /**
         * Set the identifier values associated with a particular descriptor for a tree item (replacing any existing values).
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.setIdentifierValues
         * @param {object} treeItem The tree item to update.
         * @param {string} descriptor The descriptor describing the identifier value(s) to update.
         * @param {string|string[]|undefined} values The identifier value or values to apply. A value of undefined clears all values for the descriptor.
         */
        TreeItemUtilities.setIdentifierValues = function (treeItem, descriptor, values) {
            var value = SapUiVtmArrayUtilities.unwrap(values);
            if (value === undefined) {
                if (treeItem.identifiers) {
                    delete treeItem.identifiers[descriptor];
                }
            } else {
                if (!treeItem.identifiers) {
                    treeItem.identifiers = {};
                }
                treeItem.identifiers[descriptor] = values;
            }
        };

        /**
         * Gets the IDs of the scene nodes associated with a tree item as an array of strings.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getSceneNodeIds
         * @param {object} treeItem The tree item.
         * @returns {string[]} The scene node IDs for the tree item.
         */
        TreeItemUtilities.getSceneNodeIds = function(treeItem) {
            if (!treeItem.sceneNodeIds) {
                return [];
            }
            return SapUiVtmArrayUtilities.wrap(treeItem.sceneNodeIds);
        };

        /**
         * Sets the IDs of the scene nodes to associate with a tree item in a memory efficient manner.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.setSceneNodeIds
         * @param {object} treeItem The tree item.
         * @param {string|string[]|undefined} sceneNodeIds The scene node IDs for the tree item. A value of undefined clears all values for the descriptor.
         */
        TreeItemUtilities.setSceneNodeIds = function(treeItem, sceneNodeIds) {
            sceneNodeIds = SapUiVtmArrayUtilities.unwrap(sceneNodeIds);
            if (sceneNodeIds === undefined) {
                if (treeItem.sceneNodeIds) {
                    delete treeItem.sceneNodeIds;
                }
            } else {
                treeItem.sceneNodeIds = sceneNodeIds;
            }
         };

        /**
         * Gets the included children of a tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getIncludedChildren
         * @param {object} treeItem The tree item.
         * @returns {object[]} The included children of the tree item.
         */
        TreeItemUtilities.getIncludedChildren = function(treeItem) {
            if (!treeItem.includedChildren) {
                return [];
            }
            return treeItem.includedChildren;
        };

        /**
         * Gets the excluded children of a tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getExcludedChildren
         * @param {object} treeItem The tree item.
         * @returns {object[]} The excluded children of the tree item.
         */
        TreeItemUtilities.getExcludedChildren = function(treeItem) {
            if (!treeItem.excludedChildren) {
                return [];
            }
            return treeItem.excludedChildren;
        };

        /**
         * Gets the children of a tree item from the <code>includedChildren</code> and/or <code>excludedChildren</code> collections.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getChildren
         * @param {object} treeItem The tree item.
         * @param {sap.ui.vtm.ChildCollectionType?} childCollectionType Specifies which child item collections to get children from.
         * <ul>
         * <li>{@link sap.ui.vtm.ChildCollectionType.None} - An empty array is returned.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.Included} - Gets the items in the <code>includedChildren</code> collection of the tree item.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.Excluded} - Gets the items in the <code>excludedChildren</code> collection of the tree item.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.IncludedAndExcluded} - Gets the items in the <code>includedChildren</code> and <code>excludedChildren</code> collections of the tree item.</li>
         * </ul>
         * The default value is {@link sap.ui.vtm.ChildCollectionType.Included}.
         * @returns {object[]} The children of the tree item of the given type.
         */
        TreeItemUtilities.getChildren = function(treeItem, childCollectionType) {
            switch (childCollectionType) {
            case sap.ui.vtm.ChildCollectionType.None:
                return [];
            case null:
            case undefined:
            case sap.ui.vtm.ChildCollectionType.Included:
                return TreeItemUtilities.getIncludedChildren(treeItem);
            case sap.ui.vtm.ChildCollectionType.Excluded:
                return TreeItemUtilities.getExcludedChildren(treeItem);
            case sap.ui.vtm.ChildCollectionType.IncludedAndExcluded:
                return TreeItemUtilities.getIncludedChildren(treeItem).concat(TreeItemUtilities.getExcludedChildren(treeItem));
            default:
                throw "Unknown sap.ui.vtm.ChildCollectionType value: " + childCollectionType;
            }
        };

        /**
         * Sets the <code>includedChildren</code> collection of a tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.setIncludedChildren
         * @param {object} treeItem The tree item.
         * @param {object[]} includedChildren The items to set in  the <code>includedChildren</code> collection of the tree item.
         */
        TreeItemUtilities.setIncludedChildren = function(treeItem, includedChildren) {
            includedChildren = sap.ui.vtm.ArrayUtilities.wrap(includedChildren);
            if (includedChildren.length == 0) {
                delete treeItem.includedChildren;
            } else {
                treeItem.includedChildren = includedChildren;
            }
        };

        /**
         * Sets the <code>excludedChildren</code> collection of a tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.setExcludedChildren
         * @param {object} treeItem The tree item.
         * @param {object[]} excludedChildren The items to set in  the <code>includedChildren</code> collection of the tree item.
         */
        TreeItemUtilities.setExcludedChildren = function(treeItem, excludedChildren) {
            excludedChildren = sap.ui.vtm.ArrayUtilities.wrap(excludedChildren);
            if (excludedChildren.length == 0) {
                delete treeItem.excludedChildren;
            } else {
                treeItem.excludedChildren = excludedChildren;
            }
        };

        /**
         * Sets either the <code>includedChildren</code> or <code>excludedChildren</code> collection of a tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.setChildren
         * @param {object} treeItem The tree item.
         * @param {object[]} children The items to set in the <code>includedChildren</code> or <code>excludedChildren</code> collection of the tree item.
         * @param {sap.ui.vtm.ChildCollectionType?} childCollectionType Controls which child collection to set on the tree item.
         * <ul>
         * <li>{@link sap.ui.vtm.ChildCollectionType.None} - No action is performed.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.Included} - The <code>includedChildren</code> collection of the tree item will be set.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.Excluded} - The <code>excludedChildren</code> collection of the tree item will be set.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.IncludedAndExcluded} - Results in an exception being thrown because tree item IDs must be unique in the tree at any given point in time, so a tree item cannot be added to both collections.</li>
         * </ul>
         * The default value is {@link sap.ui.vtm.ChildCollectionType.Included}.
         */
        TreeItemUtilities.setChildren = function(treeItem, children, childCollectionType) {
            switch (childCollectionType) {
            case sap.ui.vtm.ChildCollectionType.None:
                break;
            case null:
            case undefined:
            case sap.ui.vtm.ChildCollectionType.Included:
                TreeItemUtilities.setIncludedChildren(treeItem, children);
                break;
            case sap.ui.vtm.ChildCollectionType.Excluded:
                TreeItemUtilities.setExcludedChildren(treeItem, children);
                break;
            case sap.ui.vtm.ChildCollectionType.IncludedAndExcluded:
                throw "sap.ui.vtm.ChildCollectionType.IncludedAndExcluded cannot be used in sap.ui.vtm.TreeItemUtilities.setChildren";
            default:
                throw "Unknown sap.ui.vtm.ChildCollectionType value: " + childCollectionType;
            }
        };

        /**
         * Gets whether a tree item has included children.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.hasIncludedChildren
         * @param {object} treeItem The tree item.
         * @returns {object[]} The included children of the tree item.
         */
        TreeItemUtilities.hasIncludedChildren = function(treeItem) {
            return treeItem.includedChildren && treeItem.includedChildren.length;
        };

        /**
         * Gets whether a tree item has excluded children.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.hasExcludedChildren
         * @param {object} treeItem The tree item.
         * @returns {object[]} The excluded children of the tree item.
         */
        TreeItemUtilities.hasExcludedChildren = function(treeItem) {
            return treeItem.excludedChildren && treeItem.excludedChildren.length;
        };

        /**
         * Gets whether a tree item has items in the <code>includedChildren</code> and/or <code>excludedChildren</code> collections.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.hasChildren
         * @param {object} treeItem The tree item.
         * @param {sap.ui.vtm.ChildCollectionType?} childCollectionType The child item collections to check.
         * <ul>
         * <li>{@link sap.ui.vtm.ChildCollectionType.None} - Returns <code>false</code>.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.Included} - Gets whether there are items in the <code>includedChildren</code> collection of the tree item.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.Excluded} - Gets whether there are items in the <code>excludedChildren</code> collection of the tree item.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.IncludedAndExcluded} - Gets whether there are items in either the <code>includedChildren</code> collection or the <code>excludedChildren</code> collection of the tree item.</li>
         * </ul>
         * The default value is {@link sap.ui.vtm.ChildCollectionType.Included}.
         * @returns {boolean} Whether the tree item has children of the given type.
         */
        TreeItemUtilities.hasChildren = function(treeItem, childCollectionType) {
            switch (childCollectionType) {
            case sap.ui.vtm.ChildCollectionType.None:
                return false;
            case null:
            case undefined:
            case sap.ui.vtm.ChildCollectionType.Included:
                return TreeItemUtilities.hasIncludedChildren(treeItem);
            case sap.ui.vtm.ChildCollectionType.Excluded:
                return TreeItemUtilities.hasExcludedChildren(treeItem);
            case sap.ui.vtm.ChildCollectionType.IncludedAndExcluded:
                return TreeItemUtilities.hasIncludedChildren(treeItem) || TreeItemUtilities.hasExcludedChildren(treeItem);
            default:
                throw "Unknown sap.ui.vtm.ChildCollectionType value: " + childCollectionType;
            }
        };

        /**
         * Calculates the absolute matrix that should be applied to a tree item given its relative matrix and the absolute matrix of its parent.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.calculateAbsoluteMatrix
         * @param {sap.ui.vtm.Matrix} relativeMatrix The relative matrix of the tree item.
         * @param {sap.ui.vtm.Matrix} parentAbsoluteMatrix The absolute matrix of the parent tree item.
         * @returns {sap.ui.vtm.Matrix} The calculated absolute matrix.
         */
        TreeItemUtilities.calculateAbsoluteMatrix = function (relativeMatrix, parentAbsoluteMatrix) {
            if (!relativeMatrix) {
                return parentAbsoluteMatrix || sap.ui.vtm.MatrixUtilities.createIdentity();
            }
            return parentAbsoluteMatrix
                ? sap.ui.vtm.MatrixUtilities.multiply(relativeMatrix, parentAbsoluteMatrix)
                : relativeMatrix;
        };

        /**
         * Calculates the relative matrix that should be applied to a tree item given its absolute matrix and the absolute matrix of its parent.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.calculateRelativeMatrix
         * @param {sap.ui.vtm.Matrix} absoluteMatrix The absolute matrix of the tree item.
         * @param {sap.ui.vtm.Matrix} parentAbsoluteMatrix The absolute matrix of the parent tree item.
         * @returns {sap.ui.vtm.Matrix} The calculated relative matrix.
         */
        TreeItemUtilities.calculateRelativeMatrix = function (absoluteMatrix, parentAbsoluteMatrix) {
            if (!absoluteMatrix) {
                throw "An absolute matrix value is needed to calculate a relative matrix value";
            }
            return parentAbsoluteMatrix
                ? sap.ui.vtm.MatrixUtilities.multiply(absoluteMatrix, sap.ui.vtm.MatrixUtilities.invert(parentAbsoluteMatrix))
                : absoluteMatrix;
        };

        /**
         * Adds a child tree item to the end of the the <code>includedChildren</code> collection of its parent tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.addIncludedChild
         * @param {object} item The parent tree item.
         * @param {object} childItem The child tree item.
         */
        TreeItemUtilities.addIncludedChild = function (item, childItem) {
            if (item.includedChildren) {
                item.includedChildren.push(childItem);
            } else {
                item.includedChildren = [childItem];
            }
        };

        /**
         * Adds a child tree item to the end of the the <code>excludedChildren</code> collection of its parent tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.addExcludedChild
         * @param {object} item The parent tree item.
         * @param {object} childItem The child tree item.
         */
        TreeItemUtilities.addExcludedChild = function (item, childItem) {
            if (item.excludedChildren) {
                item.excludedChildren.push(childItem);
            } else {
                item.excludedChildren = [childItem];
            }
        };

        /**
         * Adds a child tree item to the end of the the <code>includedChildren</code> or <code>excludedChildren</code> collection of its parent tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.addChild
         * @param {object} item The parent tree item.
         * @param {object} childItem The child tree item.
         * @param {sap.ui.vtm.ChildCollectionType?} childCollectionType Controls which child collection to add the child tree item to.
         * <ul>
         * <li>{@link sap.ui.vtm.ChildCollectionType.None} - No action is performed.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.Included} - The child tree item will be added to the <code>includedChildren</code> collection of the tree item.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.Excluded} - The child tree item will be added to the <code>excludedChildren</code> collection of the tree item.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.IncludedAndExcluded} - Results in an exception being thrown because tree item IDs must be unique in the tree at any given point in time, so a tree item cannot be added to both collections.</li>
         * </ul>
         * The default value is {@link sap.ui.vtm.ChildCollectionType.Included}.
         */
        TreeItemUtilities.addChild = function (item, childItem, childCollectionType) {
            switch (childCollectionType) {
            case sap.ui.vtm.ChildCollectionType.None:
                break;
            case null:
            case undefined:
            case sap.ui.vtm.ChildCollectionType.Included:
                TreeItemUtilities.addIncludedChild(item, childItem);
                break;
            case sap.ui.vtm.ChildCollectionType.Excluded:
                TreeItemUtilities.addExcludedChild(item, childItem);
                break;
            case sap.ui.vtm.ChildCollectionType.IncludedAndExcluded:
                throw "sap.ui.vtm.ChildCollectionType.IncludedAndExcluded cannot be used in sap.ui.vtm.TreeItemUtilities.addChild";
            default:
                throw "Unknown sap.ui.vtm.ChildCollectionType value: " + childCollectionType;
            }
        };

        /**
         * Removes a child tree item from the <code>includedChildren</code> collection of its parent tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.removeIncludedChild
         * @param {object} item The parent tree item.
         * @param {string|object} childItem The child tree item to remove (or its id).
         * @returns {object|undefined} Returns the deleted item or undefined if no item was removed.
         */
        TreeItemUtilities.removeIncludedChild = function (item, childItem) {
            var childItemId = (typeof childItem === 'string')
                ? childItem
                : childItem.id;

            if (item.includedChildren) {
                var index = sap.ui.vtm.ArrayUtilities.findIndex(item.includedChildren, function (child) {
                    return child.id === childItemId;
                });
                if (index !== undefined) {
                    var deletedItem = item.includedChildren[index];
                    item.includedChildren.splice(index, 1);
                    if (item.includedChildren.length == 0) {
                        delete item.includedChildren;
                    }
                    return deletedItem;
                }
            }
            return undefined;
        };

        /**
         * Removes a child tree item from the <code>excludedChildren</code> collection of its parent tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.removeExcludedChild
         * @param {object} item The parent tree item.
         * @param {string|object} childItem The child tree item to remove (or its id).
         * @returns {object|undefined} Returns the deleted item or undefined if no item was removed.
         */
        TreeItemUtilities.removeExcludedChild = function (item, childItem) {
            var childItemId = (typeof childItem === 'string')
                ? childItem
                : childItem.id;

            if (item.excludedChildren) {
                var index = sap.ui.vtm.ArrayUtilities.findIndex(item.excludedChildren, function (child) {
                    return child.id === childItemId;
                });
                if (index !== undefined) {
                    var deletedItem = item.excludedChildren[index];
                    item.excludedChildren.splice(index, 1);
                    if (item.excludedChildren.length == 0) {
                        delete item.excludedChildren;
                    }
                    return deletedItem;
                }
            }
            return undefined;
        };

        /**
         * Removes a child tree item from the <code>includedChildren</code> and/or <code>excludedChildren</code> collection of its parent tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.removeChild
         * @param {object} item The parent tree item.
         * @param {string|object} childItem The child tree item to remove (or its id).
         * @param {sap.ui.vtm.ChildCollectionType?} childCollectionType Controls which child collection to remove the child tree item from.
         * <ul>
         * <li>{@link sap.ui.vtm.ChildCollectionType.None} - No action is performed.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.Included} - The child tree item will be removed from the <code>includedChildren</code> collection of the tree item.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.Excluded} - The child tree item will be removed from the <code>excludedChildren</code> collection of the tree item.</li>
         * <li>{@link sap.ui.vtm.ChildCollectionType.IncludedAndExcluded} - The child tree item will be removed from the <code>includedChildren</code> and <code>excludedChildren</code> collections of the tree item.<br/>
         * Note that duplicate tree item ids are not allowed in the tree, so a given tree item should exist in at most one of these collections at a given point in time.</li>
         * </ul>
         * The default value is {@link sap.ui.vtm.ChildCollectionType.Included}.
         * @returns {object|undefined} Returns the deleted item or undefined if no item was removed.
         */
        TreeItemUtilities.removeChild = function (item, childItem, childCollectionType) {
            switch (childCollectionType) {
            case sap.ui.vtm.ChildCollectionType.None:
                break;
            case null:
            case undefined:
            case sap.ui.vtm.ChildCollectionType.Included:
                return TreeItemUtilities.removeIncludedChild(item, childItem);
            case sap.ui.vtm.ChildCollectionType.Excluded:
                return TreeItemUtilities.removeExcludedChild(item, childItem);
            case sap.ui.vtm.ChildCollectionType.IncludedAndExcluded:
                return TreeItemUtilities.removeIncludedChild(item, childItem) || TreeItemUtilities.removeExcludedChild(item, childItem);
            default:
                throw "Unknown sap.ui.vtm.ChildCollectionType value: " + childCollectionType;
            }
        };

        /**
         * Moves all items from the <code>excludedChildren</code> collection of a tree item (or set of tree items) to the <code>includedChildren</code> collection.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.includeAllChildren
         * @param {object[]|object} treeItems The tree item or items.
         * @param {boolean?} recursive When <code>true</code> the items in the <code>excludedChildren</code> collections of descendants are moved to the <code>includedChildren</code> collection of the descendant tree item.
         * Defaults to <code>false</code>.
         */
        TreeItemUtilities.includeAllChildren = function (treeItems, recursive) {
            treeItems = sap.ui.vtm.ArrayUtilities.wrap(treeItems);
            treeItems.forEach(function(item) {
                var allChildren = TreeItemUtilities.getChildren(item, sap.ui.vtm.ChildCollectionType.IncludedAndExcluded);
                TreeItemUtilities.setIncludedChildren(item, allChildren);
                TreeItemUtilities.setExcludedChildren(item, []);
                if (recursive) {
                    allChildren.forEach(function(childItem) {
                        TreeItemUtilities.includeAllChildren(childItem, true);
                    });
                }
            });
        };

        /**
         * Moves all items from the <code>includedChildren</code> collection of a tree item (or set of tree items) to the <code>excludedChildren</code> collection.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.excludeAllChildren
         * @param {object[]|object} treeItems The tree item or items.
         * @param {boolean?} recursive When <code>true</code> the items in the <code>includedChildren</code> collections of descendants are moved to the <code>excludedChildren</code> collection of the descendant tree item.
         * Defaults to <code>false</code>.
         */
        TreeItemUtilities.excludeAllChildren = function (treeItems, recursive) {
            treeItems = sap.ui.vtm.ArrayUtilities.wrap(treeItems);
            treeItems.forEach(function(item) {
                var allChildren = TreeItemUtilities.getChildren(item, sap.ui.vtm.ChildCollectionType.IncludedAndExcluded);
                TreeItemUtilities.setChildren(item, []);
                TreeItemUtilities.setExcludedChildren(item, allChildren);
                if (recursive) {
                    allChildren.forEach(function(childItem) {
                        TreeItemUtilities.excludeAllChildren(childItem, true);
                    });
                }
            });
        };

        /**
         * Removes a root item from the tree.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.removeRoot
         * @param {object[]} rootItems The existing set of root items.
         * @param {string|object} rootItemToRemove The root tree item to remove (or its id).
         * @returns {object|undefined} Returns the deleted item or undefined if no item was removed.
         */
        TreeItemUtilities.removeRoot = function (rootItems, rootItemToRemove) {
            var rootItemId = (typeof rootItemToRemove === 'string')
                ? rootItemToRemove
                : rootItemToRemove.id;

            var index = sap.ui.vtm.ArrayUtilities.findIndex(rootItems, function (rootItem) {
                return rootItem.id === rootItemId;
            });
            if (index !== undefined) {
                var deletedItem = rootItems[index];
                rootItems.splice(index, 1);
                return deletedItem;
            }
            return undefined;
        };

        /**
         * Adds a root item to the tree.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.addRoot
         * @param {object[]} rootItems The existing set of root items.
         * @param {object} rootItemToAdd The root tree item to remove.
         */
        TreeItemUtilities.addRoot = function (rootItems, rootItemToAdd) {
            rootItems.push(rootItemToAdd);
        };

        /**
         * Validates a tree item and returns a set of error messages.
         * @public
         * @function
         * @param {object} treeItem The tree item.
         * @name sap.ui.vtm.TreeItemUtilities.validateTreeItem
         * @returns {string[]} The set of validation errors for the tree item.
         */
        TreeItemUtilities.validateTreeItem = function (treeItem) {
            var isNullOrUndefined = function (object) {
                return object === null || object === undefined;
            };
            var errors = [];
            if (treeItem) {
                if (isNullOrUndefined(treeItem.id)) {
                    errors.push("id is not specified");
                }
                if (!isNullOrUndefined(treeItem.absoluteMatrix)) {
                    if (!sap.ui.vtm.MatrixUtilities.isValid(treeItem.absoluteMatrix, true)) {
                        errors.push("absoluteMatrix is not valid");
                    }
                }
                if (!isNullOrUndefined(treeItem.relativeMatrix)) {
                    if (!sap.ui.vtm.MatrixUtilities.isValid(treeItem.relativeMatrix, true)) {
                        errors.push("relativeMatrix is not valid");
                    }
                }
            }
            return errors;
        };

        /**
         * Validates a tree and returns a set of error messages.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.validateTree
         * @param {object[]} rootItems The root tree items.
         * @returns {string[]} The set of validation errors for the tree item.
         */
        TreeItemUtilities.validateTree = function(rootItems) {
            var errors = [];
            var processTreeItem = function (treeItem, path) {
                var treeItemErrors = TreeItemUtilities.validateTreeItem(treeItem);
                if (treeItemErrors && treeItemErrors.length !== 0) {
                    var errorString = path + ": " + treeItemErrors.join(", ");
                    errors.push(errorString);
                }
                var i;
                var includedChildren = treeItem.includedChildren;
                if (includedChildren) {
                    for (i = 0; i < includedChildren.length; i++) {
                        processTreeItem(includedChildren[i], path + "/includedChildren/" + i);
                    }
                }
                var excludedChildren = treeItem.excludedChildren;
                if (excludedChildren) {
                    for (i = 0; i < excludedChildren.length; i++) {
                        processTreeItem(excludedChildren[i], path + "/excludedChildren/" + i);
                    }
                }
            };
            for (var j = 0; j < rootItems.length; j++) {
                processTreeItem(rootItems[j], "" + j);
            }
            return errors;
        };

        /**
         * Recursively traverses a tree branch calling a function on each item (including the tree item that is the root of the branch).
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.traverseBranch
         * @param {object} treeItem The root of the branch to apply the function to.
         * @param {function} callback The function to apply to tree items in the branch.<br/>
         *                            The first parameter to the callback function is the current tree item object (at the current point of the traversal.<br/>
         *                            The second parameter to the callback function is the set of ancestors of the current tree item.<br/>
         *                            The second parameter to the callback function will not be populated unless the <code>ancestors</code> parameter of  {@link sap.ui.vtm.TreeItemUtilities.traverseBranch traverseBranch} is provided.<br/>
         *                            The function may return a {@link sap.ui.vtm.ChildCollectionType} value to specify which immediate children of the tree item to traverse.<br/>
         *                            If no such value is returned a default of {@link sap.ui.vtm.ChildCollectionType.Included} is used.
         * @param {object[]} [ancestors] The ancestors of the tree item. If provided this will be used to calculate the set of ancestors of each tree item during traversal (to be passed into the callback function).
         */
        TreeItemUtilities.traverseBranch = function (treeItem, callback, ancestors) {
            if (!treeItem) {
                return;
            }
            var childCollectionType = callback(treeItem, ancestors) || sap.ui.vtm.ChildCollectionType.Included;
            if (ancestors && childCollectionType !== sap.ui.vtm.ChildCollectionType.None) {
                ancestors.push(treeItem);
            }
            if (childCollectionType === sap.ui.vtm.ChildCollectionType.IncludedAndExcluded ||
                childCollectionType === sap.ui.vtm.ChildCollectionType.Included) {
                var includedChildren = treeItem.includedChildren;
                if (includedChildren) {
                    includedChildren.forEach(function(includedChild) {
                        TreeItemUtilities.traverseBranch(includedChild, callback, ancestors);
                    });
                }
            }
            if (childCollectionType === sap.ui.vtm.ChildCollectionType.IncludedAndExcluded ||
                childCollectionType === sap.ui.vtm.ChildCollectionType.Excluded) {
                var excludedChildren = treeItem.excludedChildren;
                if (excludedChildren) {
                    excludedChildren.forEach(function(excludedChild) {
                        TreeItemUtilities.traverseBranch(excludedChild, callback, ancestors);
                    });
                }
            }
            if (ancestors && childCollectionType !== sap.ui.vtm.ChildCollectionType.None) {
                ancestors.pop();
            }
        };

        /**
         * Recursively traverses a tree calling a function on each item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.traverseTree
         * @param {object[]} rootItems The root items of the tree.
         * @param {function} callback The function to apply to tree items in the tree.<br/>
         *                            The first parameter to the callback function is the current tree item object (at the current point of the traversal.<br/>
         *                            The second parameter to the callback function is the set of ancestors of the current tree item.<br/>
         *                            The function may return a {@link sap.ui.vtm.ChildCollectionType} value to specify which immediate children to traverse.
         *                            If no such value is returned a default of {@link sap.ui.vtm.ChildCollectionType.Included} is used.
         */
        TreeItemUtilities.traverseTree = function (rootItems, callback) {
            if (rootItems) {
                rootItems.forEach(function(rootItem) {
                    TreeItemUtilities.traverseBranch(rootItem, callback, []);
                });
            }
        };

        /**
         * Gets the messages stored on a tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.getMessages
         * @param {object} treeItem The tree item.
         * @returns {sap.ui.core.Message[]} The tree item messages.
         */
        TreeItemUtilities.getMessages = function(treeItem) {
            if (!treeItem.messages || !treeItem.messages.length) {
                return [];
            }
            var parsedMessages = JSON.parse(treeItem.messages);
            var convertedMessages = parsedMessages.map(function(messageSettings) {
                return new sap.ui.core.Message(messageSettings);
            });
            return convertedMessages;
        };

        /**
         * Sets the messages stored on a tree item.
         * @public
         * @function
         * @name sap.ui.vtm.TreeItemUtilities.setMessages
         * @param {object} treeItem The tree item.
         * @param {sap.ui.core.Message[]} messages The set of messages to apply to the tree item.
         */
        TreeItemUtilities.setMessages = function(treeItem, messages) {
            if (!messages || !messages.length) {
                delete treeItem.messages;
                return;
            }
            var convertedMessages = messages.map(function(message) {
                var convertedMessage = {};
                var level = message.getLevel();
                if (level) {
                    convertedMessage.level = level;
                }
                var text = message.getText();
                if (text) {
                    convertedMessage.text = text;
                }
                var icon = message.getIcon();
                if (icon) {
                    convertedMessage.icon = icon;
                }
                var timestamp = message.getTimestamp();
                if (timestamp) {
                    convertedMessage.timestamp = timestamp;
                }
                var readOnly = message.getReadOnly();
                if (readOnly) {
                    convertedMessage.readOnly = readOnly;
                }
                return convertedMessage;
            });
            treeItem.messages = JSON.stringify(convertedMessages);
        };

        return TreeItemUtilities;
    },
    true);

}; // end of sap/ui/vtm/TreeItemUtilities.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Viewable') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.Viewable'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.ContentResource'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Viewable",
    ["jquery.sap.global", "sap/ui/core/Element", "sap/ui/vk/ContentResource"],
    function (jQuery, SapUiCoreElement, SapUiVkContentResource) {

        "use strict";

        /**
         * Constructor for a new Viewable.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.Viewable
         * @public
         * @class
         * A viewable containing 3D content that can be loaded into a {@link sap.ui.vtm.Scene}.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string] sId An optional ID for the {@link sap.ui.vtm.Viewable}.
         * @param {object} [mSettings] An optional object with initial settings for the new {@link sap.ui.vtm.Viewable} instance
         * @extends sap.ui.core.Element
         */
        var Viewable = SapUiCoreElement.extend("sap.ui.vtm.Viewable", /** @lends sap.ui.vtm.Viewable.prototype */ {

            metadata: {
                properties: {
                    /**
                     * The source URL (string) or File for this Viewable.
                     */
                    source: {
                        type: "any"
                    },

                    /**
                     * The name for this Viewable.
                     */
                    name: {
                        type: "string"
                    },

                    /**
                     * The root scene node IDs for this viewable.
                     */
                    rootNodeIds: {
                        type: "string[]"
                    },

                    /**
                     * The relative transformation matrix to apply to the scene node created to wrap the contents of the loaded viewable.
                     */
                    relativeMatrix: {
                        type: "sap.ui.vtm.Matrix"
                    }
                }
            },

            init: function () {
                this._vkContentResource = new sap.ui.vk.ContentResource({
                    sourceId: this.getId(),
                    sourceType: "vds"
                });
                this.setRelativeMatrix(sap.ui.vtm.MatrixUtilities.createIdentity());
            },

            /**
             * Gets the unique ID that identifies this Viewable.
             * This is an alias for {@link #getId}
             * @function
             * @public
             * @return {string} The unique ID that identifies this Viewable.
             */
            getSourceId: function () {
                return this.getId();
            },

            /**
             * Sets the source URL or File for this Viewable.
             * @function
             * @public
             * @param {string|File} source The source URL of File for this Viewable.
             * @return {sap.ui.vtm.Viewable} <code>this</code> for method chaining.
             */
            setSource: function (source) {
                this.setProperty("source", source);
                this._vkContentResource.setSource(source);
                return this;
            },

            /**
             * Sets the name for this Viewable.
             * @function
             * @public
             * @param {string} name The name for this Viewable.
             * @return {sap.ui.vtm.Viewable} <code>this</code> for method chaining.
             */
            setName: function (name) {
                this.setProperty("name", name);
                this._vkContentResource.setName(name);
                return this;
            },

            setRelativeMatrix: function(matrix) {
                this.setProperty("relativeMatrix", matrix);
                this._vkContentResource.setLocalMatrix(sap.ui.vtm.MatrixUtilities.toVkMatrix(matrix));
            },

            _getContentResource: function () {
                return this._vkContentResource;
            },

            /**
             * Returns a string representation of the source.
             * If the source is a {@link File} this returns the file name (which is not guaranteed to uniquely identify the file).
             * @function
             * @public
             * @return {string} A string representation of the source.
             */
            getSourceString: function() {
                var source = this.getSource();
                return typeof source === "string" ? source : source.name;
            }
        });

        return Viewable;
    });

}; // end of sap/ui/vtm/Viewable.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.ViewableLoadInfo') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.ViewableLoadInfo'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/ViewableLoadInfo",
    ["jquery.sap.global", "sap/ui/core/Element"],
    function (jQuery, SapUiCoreElement) {

        "use strict";

        /**
         * This class is not intended to be instantiated directly by application code.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.ViewableLoadInfo
         * @public
         * @class
         * Contains information about the result of an attempt to download/load a viewable.
         * 
         * The {@link sap.ui.vtm.Scene.downloadCompleted} and {@link sap.ui.vtm.Scene.loadCompleted} events have a <code>results</code> parameter that is passed an array of {@link sap.ui.vtm.ViewableLoadInfo} objects.
         * {@link sap.ui.vtm.Scene#getViewableLoadInfos} also returns a array of {@link sap.ui.vtm.ViewableLoadInfo} objects for all viewables that have been passed into calls to {@link sap.ui.vtm.Scene#loadViewablesAsync}.
         * @author SAP SE
         * @version 1.50.3
         * @extends sap.ui.core.Element
         */
        var ViewableLoadInfo = SapUiCoreElement.extend("sap.ui.vtm.ViewableLoadInfo", /** @lends sap.ui.vtm.ViewableLoadInfo.prototype */ {

            metadata: {
                properties: {

                    /**
                     * The {@link sap.ui.vtm.Viewable} this {@link sap.ui.vtm.ViewableLoadInfo} relates to.
                     */
                    viewable: {
                        type: "object"
                    },

                    /**
                     * The download/load status of the {@link sap.ui.vtm.Viewable} this {@link sap.ui.vtm.ViewableLoadInfo} relates to.
                     */
                    status: {
                        type: "sap.ui.vtm.ViewableLoadStatus"
                    },

                    /**
                     * The error code describing why the Viewable failed to load.
                     *
                     * Use when {@link #getSucceeded} returns false.
                     */
                    errorCode: {
                        type: "string"
                    },

                    /**
                     * The error text describing why the Viewable failed to load.
                     * This is an untranslated technical message.
                     * Use when {@link #getSucceeded} returns false.
                     */
                    errorText: {
                        type: "string"
                    }
                }
            }
        });

        return ViewableLoadInfo;
    });

}; // end of sap/ui/vtm/ViewableLoadInfo.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.ViewableLoadStatus') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.ViewableLoadStatus'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vtm/ViewableLoadStatus",[],
    function () {
        "use strict";

        /**
         * Enumeration specifying the download/load status of a {@link sap.ui.vtm.Viewable}.
         *
         * @enum {string}
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This type is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
         */
        sap.ui.vtm.ViewableLoadStatus = {

            /**
             * The {@link sap.ui.vtm.Viewable} is being downloaded.
             * @public
             */
            Downloading: "Downloading",

            /**
             * The {@link sap.ui.vtm.Viewable} was downloaded successfully.
             * @public
             */
            Downloaded: "Downloaded",

            /**
             * The attempt to download the {@link sap.ui.vtm.Viewable} failed.
             * @public
             */
            DownloadFailed: "DownloadFailed",

            /**
             * The {@link sap.ui.vtm.Viewable} is being loaded.
             * @public
             */
            Loading: "Loading",

            /**
             * The {@link sap.ui.vtm.Viewable} was loaded successfully.
             * @public
             */
            Loaded: "Loaded",

            /**
             * The attempt to load the {@link sap.ui.vtm.Viewable} failed.
             * @public
             */
            LoadFailed: "LoadFailed"
        };

        return sap.ui.vtm.TextColor;
    });
}; // end of sap/ui/vtm/ViewableLoadStatus.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.ViewportHandler') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
jQuery.sap.declare('sap.ui.vtm.ViewportHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.ViewportHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/ViewportHandler",
    ["jquery.sap.global", "sap/ui/vk/ViewportHandler"],
    function (jQuery, SapUiVkViewportHandler) {
        "use strict";

        /**
         * Constructor for a new ViewportHandler.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.ViewportHandler
         * @private
         * @class
         * A {@link sap.ui.vk.ViewportHandler} that fires {@link sap.ui.vtm.Viewport.hover}, {@link sap.ui.vtm.Viewport.beginGesture} and {@link sap.ui.vtm.Viewport.endGesture} events for a {@link sap.ui.vtm.Viewport}.
         * @author SAP SE
         * @version 1.50.3
         * @extends sap.ui.core.Control
         */
        var ViewportHandler = sap.ui.vk.ViewportHandler.extend("sap.ui.vtm.ViewportHandler", /** @lends sap.ui.vtm.ViewportHandler.prototype */ {

            constructor: function(viewport) {
                sap.ui.vk.ViewportHandler.prototype.constructor.call(this, viewport._getVkViewport());
                this._vtmViewport = viewport;
            },

            hover: function(event) {
                if (event.n == 1 && this._inside(event) && this._rect) {
                    var x = event.x - this._rect.x,
                        y = event.y - this._rect.y;

                    var nodeId = this._viewport.hitTest(x, y);
                    this._vtmViewport._raiseHover(x, y, nodeId);
                }
            },

            beginGesture: function(event) {
                this._vtmViewport._raiseBeginGesture();
                SapUiVkViewportHandler.prototype.beginGesture.call(this, event);
            },

            endGesture: function(event) {
                this._vtmViewport._raiseEndGesture();
                SapUiVkViewportHandler.prototype.endGesture.call(this, event);
            }
        });

        return ViewportHandler;
    });
}; // end of sap/ui/vtm/ViewportHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.DisplayStateCalculationExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

 jQuery.sap.declare('sap.ui.vtm.extensions.DisplayStateCalculationExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/DisplayStateCalculationExtension",
     ["jquery.sap.global", "sap/ui/core/Control", "../Extension"],
     function (jQuery, SapUiCoreControl, SapUiVtmExtension) {

        "use strict";

        /**
         * Constructor for a new DisplayStateCalculationExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.DisplayStateCalculationExtension
         * @public
         * @class
         * Adds a behavior that calculates display state (visibility, opacity, highlight color) for the scene nodes in a viewport using
         * information in the tree items, context display groups and override display groups.
         * 
         * Excluded tree items are ignored when calculating display state since visible scene nodes that are not visible due to a context or override display group should relate to one or more selectable tree items in the tree.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.extensions.DisplayStateCalculationExtension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.extensions.DisplayStateCalculationExtension} instance.
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.IDisplayStateCalculationExtension
         */
         var DisplayStateCalculationExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.DisplayStateCalculationExtension", /** @lends sap.ui.vtm.extensions.DisplayStateCalculationExtension.prototype */ {
             metadata: {
                 interfaces: [
                     "sap.ui.vtm.interfaces.IDisplayStateCalculationExtension"
                 ]
             },

             constructor: function(sId, mSettings) {
                 SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
             },

             initialize: function () {
                this._handlingEvent = false;
                this._defaultVisibility = false;
                this._defaultOpacity = null;
                this._defaultHighlightColor = null;

                this.applyPanelHandler(function(panel) {
                    var viewport = panel.getViewport();
                    viewport.attachRefreshRequested(function(event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        this._updateDisplayStates(panel);
                    }.bind(this));
                }.bind(this));
            },

            _updateDisplayStates: function(panel) {
                var sceneNodeIdsByOpacity = new sap.ui.vtm.Lookup(),
                    sceneNodeIdsByHighlightColor = new sap.ui.vtm.Lookup(),
                    hiddenSceneNodeIds = [],
                    visibleSceneNodeIds = [];
                this._calculateDisplayStates(panel, hiddenSceneNodeIds, visibleSceneNodeIds, sceneNodeIdsByOpacity, sceneNodeIdsByHighlightColor);
                this._applyDisplayStates(panel, hiddenSceneNodeIds, visibleSceneNodeIds, sceneNodeIdsByOpacity, sceneNodeIdsByHighlightColor);
             },

             _applyContextUpdates: function(panel, displayStates) {
                 var viewport = panel.getViewport();
                 var scene = viewport.getScene();
                 var contextDisplayGroups = viewport.getContextDisplayGroups();
                 contextDisplayGroups.reverse().forEach(function(contextDisplayGroup) {
                     var displayStatesBySceneNodeId = contextDisplayGroup.getDisplayStatesBySceneNodeId();
                     if (displayStatesBySceneNodeId) {
                         var sceneNodeIds = Object.getOwnPropertyNames(displayStatesBySceneNodeId);

                         sceneNodeIds.forEach(function(sceneNodeId) {
                             var contextGroupDisplayState = displayStatesBySceneNodeId[sceneNodeId];
                             var visibility = contextGroupDisplayState.visibility;
                             var opacity = contextGroupDisplayState.opacity;
                             var highlightColor = contextGroupDisplayState.highlightColor;
                             var recursive = contextGroupDisplayState.recursive;

                             var sceneNodeIdsToUpdate = [sceneNodeId];
                             if (recursive === true) {
                                 Array.prototype.push.apply(sceneNodeIdsToUpdate, scene.getDescendantIds(sceneNodeId));
                             }

                             sceneNodeIdsToUpdate.forEach(function(sceneNodeIdToUpdate) {
                                 var displayState = displayStates.get(sceneNodeIdToUpdate);
                                 if (visibility !== null && visibility !== undefined) {
                                     displayState.visibility = visibility;
                                 }
                                 if (opacity !== null && opacity !== undefined) {
                                     displayState.opacity = opacity;
                                 }
                                 if (highlightColor !== null && highlightColor !== undefined) {
                                     displayState.highlightColor = highlightColor === "" ? this._defaultHighlightColor : highlightColor;
                                 }
                             });
                         });
                     }
                 });
             },
             
             _applyTreeItemUpdates: function(panel, displayStates) {
                 var tree = panel.getTree();
                 var treeItems = tree.getAllItems();

                 treeItems.forEach(function(treeItem) {
                     var visibility = treeItem.visibility === true;
                     if (visibility) {
                         var sceneNodeIds = sap.ui.vtm.TreeItemUtilities.getSceneNodeIds(treeItem);
                         var opacity = treeItem.opacity;
                         var highlightColor = treeItem.highlightColor;

                         sceneNodeIds.forEach(function(sceneNodeId) {
                             var displayState = displayStates.get(sceneNodeId);
                             displayState.visibility = visibility;
                             displayState.opacity = opacity || this._defaultOpacity;
                             displayState.highlightColor = highlightColor || this._defaultHighlightColor;
                         }.bind(this));
                     }
                 }.bind(this));
             },
             
             _applyOverrideUpdates: function(panel, displayStates) {
                 var viewport = panel.getViewport();
                 var scene = viewport.getScene();
                 var overrideDisplayGroups = viewport.getOverrideDisplayGroups();
                 overrideDisplayGroups.reverse().forEach(function(overrideDisplayGroup) {
                     var displayStatesBySceneNodeId = overrideDisplayGroup.getDisplayStatesBySceneNodeId();
                     if (displayStatesBySceneNodeId) {
                         var sceneNodeIds = Object.getOwnPropertyNames(displayStatesBySceneNodeId);

                         sceneNodeIds.forEach(function(sceneNodeId) {
                             var overrideGroupDisplayState = displayStatesBySceneNodeId[sceneNodeId];
                             var visibility = overrideGroupDisplayState.visibility;
                             var opacity = overrideGroupDisplayState.opacity;
                             var highlightColor = overrideGroupDisplayState.highlightColor;
                             var recursive = overrideGroupDisplayState.recursive;

                             var sceneNodeIdsToUpdate = [sceneNodeId];
                             if (recursive === true) {
                                 Array.prototype.push.apply(sceneNodeIdsToUpdate, scene.getDescendantIds(sceneNodeId));
                             }

                             sceneNodeIdsToUpdate.forEach(function(sceneNodeIdToUpdate) {
                                 var displayState = displayStates.get(sceneNodeIdToUpdate);
                                 if (visibility !== null && visibility !== undefined) {
                                     displayState.visibility = visibility;
                                 }
                                 if (opacity !== null && opacity !== undefined) {
                                     displayState.opacity = opacity;
                                 }
                                 if (highlightColor !== null && highlightColor !== undefined) {
                                     displayState.highlightColor = highlightColor === "" ? this._defaultHighlightColor : highlightColor;
                                 }
                             });
                         });
                     }
                 });
             },

             
             _calculateDisplayStates: function(panel, hiddenSceneNodeIds, visibleSceneNodeIds, sceneNodeIdsByOpacity, sceneNodeIdsByHighlightColor) {
                 sap.ui.vtm.measure(this, "_calculateDisplayStates", function() {
                     var allSceneNodeIds;
                     var displayStates = new Map();
                     
                     sap.ui.vtm.measure(this, "_calculateDisplayStates - Get all ids", function() {
                         allSceneNodeIds = this._vtm.getScene().getCachedIds();
                     }.bind(this));

                     sap.ui.vtm.measure(this, "creating display states", function() {
                         allSceneNodeIds.forEach(function(sceneNodeId) {
                             displayStates.set(sceneNodeId, {
                                 visibility: this._defaultVisibility,
                                 opacity: this._defaultOpacity,
                                 highlightColor: this._defaultHighlightColor
                             });
                         }.bind(this));
                     }.bind(this));

                     sap.ui.vtm.measure(this, "_applyContextUpdates (" + panel.getId() + ")", function() {
                         this._applyContextUpdates(panel, displayStates);
                     }.bind(this));

                     sap.ui.vtm.measure(this, "_applyTreeItemUpdates (" + panel.getId() + ")", function() {
                         this._applyTreeItemUpdates(panel, displayStates);
                     }.bind(this));

                     sap.ui.vtm.measure(this, "_applyOverrideUpdates (" + panel.getId() + ")", function() {
                         this._applyOverrideUpdates(panel, displayStates);
                     }.bind(this));

                     sap.ui.vtm.measure(this, "_calculateDisplayStates - Populating lookups", function() {
                         displayStates.forEach(function(displayState, sceneNodeId) {
                             if (displayState.visibility) {
                                 visibleSceneNodeIds.push(sceneNodeId);
                                 sceneNodeIdsByOpacity.addValue(displayState.opacity, sceneNodeId);
                                 sceneNodeIdsByHighlightColor.addValue(displayState.highlightColor, sceneNodeId);
                             } else {
                                 hiddenSceneNodeIds.push(sceneNodeId);
                             }
                         });
                     });
                 }.bind(this));
             },

             _applyDisplayStates: function(panel, hiddenSceneNodeIds, visibleSceneNodeIds, sceneNodeIdsByOpacity, sceneNodeIdsByHighlightColor) {
                 sap.ui.vtm.measure(this, "_applyDisplayStates", function() {
                     var viewport = panel.getViewport();
                     viewport.setVisibility(hiddenSceneNodeIds, false, false);

                     if (visibleSceneNodeIds.length) {
                         viewport.setVisibility(visibleSceneNodeIds, true, false);

                         sceneNodeIdsByOpacity.forEach(function(sceneNodeIds, opacity) {
                             viewport.setOpacity(sceneNodeIds, opacity, false);
                         });

                         sceneNodeIdsByHighlightColor.forEach(function(sceneNodeIds, highlightColor) {
                             viewport.setHighlightColor(sceneNodeIds, highlightColor, false);
                         });
                     }
                 });
             }
         });

         return DisplayStateCalculationExtension;
     });
}; // end of sap/ui/vtm/extensions/DisplayStateCalculationExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.InitialViewExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

 jQuery.sap.declare('sap.ui.vtm.extensions.InitialViewExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/InitialViewExtension",
     ["jquery.sap.global", "../Extension"],
     function (jQuery, SapUiVtmExtension) {

        "use strict";

        /**
         * Constructor for a new InitialViewExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.InitialViewExtension
         * @public
         * @class
         * Adds a behavior that zooms to all (or a specific view) after the first viewable has loaded successfully.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.extensions.InitialViewExtension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.extensions.InitialViewExtension} instance.
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.IInitialViewExtension
         */
         var InitialViewExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.InitialViewExtension", /** @lends sap.ui.vtm.extensions.InitialViewExtension.prototype */ {
             metadata: {
                 interfaces: [
                     "sap.ui.vtm.interfaces.IInitialViewExtension"
                 ],
                 properties: {
                     /**
                      * Specifies a predefined view to use.
                      * If a specific view is not specified this extension will zoom to fit all geometry without changing the camera angle.
                      */
                     predefinedView: {
                         type: "sap.ui.vtm.PredefinedView"
                     }
                 }
             },

             constructor: function(sId, mSettings) {
                 SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
             },

            initialize: function(vtm) {
                var initialLoadOccurred = false;

                vtm.getScene().attachLoadCompleted(function(event) {
                    var panels = vtm.getPanels();
                    var loadSucceeded = event.getParameter("succeeded");

                    if (!this.getEnabled() || !loadSucceeded || initialLoadOccurred || !panels.length) {
                        return;
                    }

                    initialLoadOccurred = true;

                    var viewLinkingExtension = vtm.getExtensionByInterface("sap.ui.vtm.interfaces.IViewLinkingExtension");
                    var viewLinkingEnabled = viewLinkingExtension && viewLinkingExtension.getEnabled();
                    var predefinedView = this.getPredefinedView();
                    
                    var setView = function(panel) {
                        var viewport = panel.getViewport();
                        if (predefinedView) {
                            viewport.setPredefinedView(predefinedView);
                        } else {
                            viewport.zoomToAll(0);
                        }
                    };

                    if (viewLinkingEnabled) {
                        var panel = vtm.getActivePanel() || panels[0];
                        setView(panel);
                    } else {
                        panels.forEach(setView);
                    }
                }.bind(this));
            }
         });

         return InitialViewExtension;
     });
}; // end of sap/ui/vtm/extensions/InitialViewExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.LoadProgressExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

 jQuery.sap.declare('sap.ui.vtm.extensions.LoadProgressExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/LoadProgressExtension",
     ["jquery.sap.global", "../Extension"],
     function (jQuery, SapUiVtmExtension) {

        "use strict";

        /**
         * Constructor for a new LoadProgressExtension.
         * @name sap.ui.vtm.extensions.LoadProgressExtension
         * @public
         * @class
         * Adds a behavior that shows a progress dialog when downloading/loading of viewables is occurring.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.extensions.LoadProgressExtension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.extensions.LoadProgressExtension} instance.
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.ILoadProgressExtension
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         */
         var LoadProgressExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.LoadProgressExtension", /** @lends sap.ui.vtm.extensions.LoadProgressExtension.prototype */ {
             metadata: {
                 interfaces: [
                     "sap.ui.vtm.interfaces.IDownloadProgressExtension",
                     "sap.ui.vtm.interfaces.ILoadProgressExtension"
                 ]
             },

             constructor: function(sId, mSettings) {
                 SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
             },

            initialize: function(vtm) {
                this._scene = vtm.getScene();
                this._rb = sap.ui.vtm.getResourceBundle();
                this._oDialog = new sap.ui.vtm.ProgressDialog({
                    progressBarVisible: false
                });
                this._downloadInfoByViewable = new Map();
                this._loadInfoByViewable = new Map();

                this._boundDownloadStartedHandler = this._downloadStartedHandler.bind(this);
                this._boundDownloadProgressHandler = this._downloadProgressHandler.bind(this);
                this._boundDownloadCompletedHandler = this._downloadCompletedHandler.bind(this);
                this._boundLoadStartedHandler = this._loadStartedHandler.bind(this);
                this._boundLoadProgressHandler = this._loadProgressHandler.bind(this);
                this._boundLoadCompletedHandler = this._loadCompletedHandler.bind(this);

                this._scene.attachDownloadStarted(this._boundDownloadStartedHandler);
            },

            _setDownloadPercentComplete: function(percentComplete) {
                if (this._oDialog.getPercentComplete() !== percentComplete) {
                    this._oDialog.setPercentComplete(percentComplete);
                    this._oDialog.setProgressText(this._rb.getText("PROGRESS_DOWNLOADING_0", [percentComplete]));
                    sap.ui.getCore().applyChanges();
                }
            },

            _downloadProgressHandler: function(event) {
                if (!this.getEnabled()) {
                    return;
                }

                var viewable = event.getParameter("viewable");
                var downloadedBytes = event.getParameter("downloadedBytes");
                var totalBytes = event.getParameter("totalBytes");

                this._downloadInfoByViewable.set(viewable, {
                    downloadedBytes: downloadedBytes,
                    totalBytes: totalBytes
                });

                var bytesDownloaded = 0, bytesToDownload = 0;
                this._downloadInfoByViewable.forEach(function(value) {
                    bytesDownloaded += value.downloadedBytes;
                    bytesToDownload += value.totalBytes;
                });

                var percentComplete = bytesToDownload == 0
                    ? 0.0
                    : Math.floor(bytesDownloaded / bytesToDownload * 100);

                this._setDownloadPercentComplete(percentComplete);
            },

            _downloadStartedHandler: function(event) {
                if (!this.getEnabled()) {
                    return;
                }
                this._openDialog();
            },

            _setLoadPercentComplete: function(percentComplete) {
                if (this._oDialog.getPercentComplete() !== percentComplete) {
                    this._oDialog.setPercentComplete(percentComplete);
                    this._oDialog.setProgressText(this._rb.getText("PROGRESS_LOADING_0", [percentComplete]));
                    sap.ui.getCore().applyChanges();
                }
            },

            _loadProgressHandler: function(event) {
                if (!this.getEnabled()) {
                    return;
                }

                var viewable = event.getParameter("viewable");
                var percentComplete = event.getParameter("percentage");

                this._loadInfoByViewable.set(viewable, {
                    percentComplete: percentComplete
                });

                var percentageSum = 0;
                var loadingViewablesCount = 0;
                this._loadInfoByViewable.forEach(function(value) {
                    percentageSum += value.percentComplete;
                    loadingViewablesCount++;
                });

                var overallPercentComplete = loadingViewablesCount == 0
                    ? 0
                    : Math.floor(percentageSum / loadingViewablesCount);

                this._setLoadPercentComplete(overallPercentComplete);
            },

            _downloadCompletedHandler: function(event) {
                this._downloadInfoByViewable.clear();
                var viewableLoadInfos = event.getParameter("viewableLoadInfos");
                var allFailed = viewableLoadInfos.every(function(viewableLoadInfo) {
                    return viewableLoadInfo.getStatus() === sap.ui.vtm.ViewableLoadStatus.DownloadFailed;
                });
                if (allFailed) {
                    this._closeDialog();
                }
            },

            _loadStartedHandler: function(event) {
                this._oDialog.setProgressText(this._rb.getText("PROGRESS_LOADING"));
                sap.ui.getCore().applyChanges();
            },

            _loadCompletedHandler: function(event) {
                this._loadInfoByViewable.clear();
                this._closeDialog();
            },

            _openDialog: function() {
                if (!this._oDialog.isOpen()) {
                    this._scene.attachDownloadProgress(this._boundDownloadProgressHandler);
                    this._scene.attachDownloadCompleted(this._boundDownloadCompletedHandler);
                    this._scene.attachLoadStarted(this._boundLoadStartedHandler);
                    this._scene.attachLoadProgress(this._boundLoadProgressHandler);
                    this._scene.attachLoadCompleted(this._boundLoadCompletedHandler);
                    this._oDialog.open();
                    this._setDownloadPercentComplete(0);
                }
            },

            _closeDialog: function() {
                this._scene.detachDownloadProgress(this._boundDownloadProgressHandler);
                this._scene.detachDownloadCompleted(this._boundDownloadCompletedHandler);
                this._scene.detachLoadStarted(this._boundLoadStartedHandler);
                this._scene.detachLoadProgress(this._boundLoadProgressHandler);
                this._scene.detachLoadCompleted(this._boundLoadCompletedHandler);
                this._oDialog.close();
            }
         });

         return LoadProgressExtension;
     });
}; // end of sap/ui/vtm/extensions/LoadProgressExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.MessageStatusCalculationExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.extensions.MessageStatusCalculationExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/MessageStatusCalculationExtension",
    ["jquery.sap.global", "sap/ui/core/Control", "../Extension"],
    function (jQuery, SapUiCoreControl, SapUiVtmExtension) {

        "use strict";

        /**
         * Enumeration specifying the highest severity message relating to a tree item or its descendants.
         *
         * @enum {string}
         * @private
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This type is experimental and might be modified or removed in future versions.
         */
        var MessageStatus = {
            /**
             * The tree item has one or more error messages.
             */
            Error: "Error",
            /**
             * One or more descendants of the tree item have one or more error messages.
             */
            ErrorOnDescendant: "ErrorOnDescendant",
            /**
             * The tree item has one or more warning messages.
             */
            Warning: "Warning",
            /**
             * One or more descendants of the tree item have one or more warning messages.
             */
            WarningOnDescendant: "WarningOnDescendant",
            /**
             * The tree item has an information message
             */
            Information: "Information",
            /**
             * The tree item does not have any messages and none of its descendants have an error or warning message.
             */
            None: "None"
        };

        /**
         * Constructor for a new MessageStatusCalculationExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.MessageStatusCalculationExtension
         * @public
         * @class
         * Adds a behavior that calculates the properties of the message status icons.
         * The behavior:
         * <ul>
         * <li>Allows for error, warning and information messages.</li>
         * <li>Uses red icons for error related indications.</li>
         * <li>Uses yellow icons for warning related indications.</li>
         * <li>Uses grey informational icons for informational indications.</li>
         * <li>Uses solid icons to indicate errors or warnings that apply directly to a tree item.</li>
         * <li>Uses hollow icons to indicate that an error or warning applies to a descendant of a tree item.</li>
         * <li>The highest priority status that applies to a tree item or a descendant tree item is indicated on each tree item.</li>
         * <li>When the highest priority status that applies to a tree item is the same as the highest priority status that applies to any descendant tree, the highest priority message that applies directly to the tree item is indicated.</li>
         * <li>Error messages on descendants are given higher priority than warning or information messages that apply to the tree item itself</li>
         * <li>Warning messages on descendants are given a higher priority than information messages that apply to the tree item</li>
         * <li>Information messages are not cascaded up the tree</li>
         * </ul>
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.m.MessageStatusCalculationExtension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.m.MessageStatusCalculationExtension} instance.
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.IMessageStatusCalculationExtension
         */
        var MessageStatusCalculationExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.MessageStatusCalculationExtension", /** @lends sap.ui.vtm.extensions.MessageStatusCalculationExtension.prototype */ {
            metadata: {
                interfaces: [
                    "sap.ui.vtm.interfaces.IMessageStatusCalculationExtension"
                ]
            },

            constructor: function(sId, mSettings) {
                SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
            },

            initialize: function () {
                this._rb = sap.ui.vtm.getResourceBundle();
                this.applyPanelHandler(function(panel) {
                    var tree = panel.getTree();

                    tree.attachBeforeModelUpdated(function (event) {
                        this._handleBeforeModelUpdated(panel);
                    }.bind(this));

                    this._handleBeforeModelUpdated(panel);
                }.bind(this));
            },

            _getMessageStatusPriority: function(messageStatus) {
                switch (messageStatus) {
                case MessageStatus.Error:
                    return 1;
                case MessageStatus.ErrorOnDescendant:
                    return 2;
                case MessageStatus.Warning:
                    return 3;
                case MessageStatus.WarningOnDescendant:
                    return 4;
                case MessageStatus.Information:
                    return 5;
                case MessageStatus.None:
                    return 6;
                default:
                    throw "Unknown message status: '" + messageStatus + "'";
                }
            },

            _makeCascadedMessageStatus: function(messageStatus) {
                switch (messageStatus) {
                case MessageStatus.Error:
                case MessageStatus.ErrorOnDescendant:
                    return MessageStatus.ErrorOnDescendant;
                case MessageStatus.Warning:
                case MessageStatus.WarningOnDescendant:
                    return MessageStatus.WarningOnDescendant;
                case MessageStatus.Information:
                case MessageStatus.None:
                    return MessageStatus.None;
                default:
                    throw "Unknown message status: '" + messageStatus + "'";
                }
            },

            _messageStatusCompareFunction: function(messageTypeA, messageTypeB) {
                return this._getMessageStatusPriority(messageTypeA) - this._getMessageStatusPriority(messageTypeB);
            },

            _calculateHighestPriorityMessageStatus: function(treeItem) {
                var messagesString = treeItem.messages;
                if (messagesString) {
                    var messages = sap.ui.vtm.TreeItemUtilities.getMessages(treeItem);
                    messages.sort(sap.ui.core.Message.compareByType).reverse();
                    return messages[0].getLevel();
                } else {
                    return sap.ui.core.MessageType.None;
                }
            },

            _calculateHighestPriorityChildMessageStatus: function(treeItem) {
                var children = sap.ui.vtm.TreeItemUtilities.getIncludedChildren(treeItem);
                if (children.length) {
                    var childrenWithMessageStatuses = children.filter(function(childItem) {
                        return childItem.messageStatus;
                    });

                    if (childrenWithMessageStatuses.length) {
                        childrenWithMessageStatuses.sort(function(childItemA, childItemB) {
                            return this._getMessageStatusPriority(childItemA.messageStatus) - this._getMessageStatusPriority(childItemB.messageStatus);
                        }.bind(this));
                        return childrenWithMessageStatuses[0].messageStatus;
                    }
                }
                return sap.ui.core.MessageType.None;
            },

            _calculateMessageStatus: function(treeItem) {
                var highestPriorityMessageStatus = this._calculateHighestPriorityMessageStatus(treeItem);
                var highestPriorityChildMessageStatus = this._calculateHighestPriorityChildMessageStatus(treeItem);

                if (this._messageStatusCompareFunction(highestPriorityMessageStatus, highestPriorityChildMessageStatus) > 0) {
                    if (highestPriorityChildMessageStatus === sap.ui.core.MessageType.None) {
                        if (treeItem.messageStatus) {
                            delete treeItem.messageStatus;
                        }
                    } else {
                        treeItem.messageStatus = this._makeCascadedMessageStatus(highestPriorityChildMessageStatus);
                    }
                } else if (highestPriorityMessageStatus === sap.ui.core.MessageType.None) {
                    if (treeItem.messageStatus) {
                        delete treeItem.messageStatus;
                    }
                } else {
                    treeItem.messageStatus = highestPriorityMessageStatus;
                }

                if (highestPriorityChildMessageStatus === sap.ui.core.MessageType.None) {
                    if (treeItem.childMessageStatus) {
                        delete treeItem.childMessageStatus;
                    } else {
                        treeItem.childMessageStatus = highestPriorityChildMessageStatus;
                    }
                }
            },

            _getIconSource: function(messageStatus) {
                switch (messageStatus) {
                case MessageStatus.Error:
                    return "sap-icon://error";
                case MessageStatus.ErrorOnDescendant:
                    return "sap-icon://message-error";
                case MessageStatus.Warning:
                    return "sap-icon://alert";
                case MessageStatus.WarningOnDescendant:
                    return "sap-icon://message-warning";
                case MessageStatus.Information:
                    return "sap-icon://message-information";
                case MessageStatus.None:
                    return null;
                default:
                    throw "Unknown message type: '" + messageStatus + "'";
                }
            },

            _getStatusTooltip: function(messageStatus) {
                switch (messageStatus) {
                case MessageStatus.Error:
                    return this._rb.getText("MESSAGESTATUS_ERROR");
                case MessageStatus.ErrorOnDescendant:
                    return this._rb.getText("MESSAGESTATUS_ERRORONDESCENDANT");
                case MessageStatus.Warning:
                    return this._rb.getText("MESSAGESTATUS_WARNING");
                case MessageStatus.WarningOnDescendant:
                    return this._rb.getText("MESSAGESTATUS_WARNINGONDESCENDANT");
                case MessageStatus.Information:
                    return this._rb.getText("MESSAGESTATUS_INFORMATION");
                case MessageStatus.None:
                    return null;
                default:
                    throw "Unknown message type: '" + messageStatus + "'";
                }
            },
            
            _getMessagesToShowTootip: function(treeItem) {
                if (treeItem.messages) {
                    return this._rb.getText("MESSAGESTATUS_CLICKTOSHOWMESSAGES");
                } else {
                    return this._rb.getText("MESSAGESTATUS_NOMESSAGESONTHISITEM");
                }
            },

            _getIconColor: function(messageStatus) {
                switch (messageStatus) {
                case MessageStatus.Error:
                case MessageStatus.ErrorOnDescendant:
                    return sap.ui.core.IconColor.Negative;
                case MessageStatus.Warning:
                case MessageStatus.WarningOnDescendant:
                    return sap.ui.core.IconColor.Critical;
                case MessageStatus.Information:
                    return sap.ui.core.IconColor.Neutral;
                case MessageStatus.None:
                    return null;
                default:
                    throw "Unknown message type: '" + messageStatus + "'";
                }
            },

            _calculateMessageStatusForTree: function(tree) {
                var callback = this._calculateMessageStatus.bind(this);

                var traverseChildrenFirst = function(treeItem, callbackFunction) {
                    var children = sap.ui.vtm.TreeItemUtilities.getChildren(treeItem);
                    children.forEach(function(child) {
                        traverseChildrenFirst(child, callbackFunction);
                    });

                    if (callbackFunction) {
                        callbackFunction(treeItem);
                    }
                };

                tree.getRootItems().forEach(function(rootItem) {
                    traverseChildrenFirst(rootItem, callback);
                });

                var refreshBindings = false;
                sap.ui.vtm.TreeItemUtilities.traverseTree(tree.getRootItems(), function(treeItem) {
                    if (treeItem.messageStatus) {
                        var messageStatusIconUrl = this._getIconSource(treeItem.messageStatus);
                        if (treeItem.messageStatusIconUrl !== messageStatusIconUrl) {
                            treeItem.messageStatusIconUrl = messageStatusIconUrl;
                            refreshBindings = true;
                        }
                        var messageStatusIconColor = this._getIconColor(treeItem.messageStatus);
                        if (treeItem.messageStatusIconColor !== messageStatusIconColor) {
                            treeItem.messageStatusIconColor = messageStatusIconColor;
                            refreshBindings = true;
                        }
                        var messagesToShowTooltip = this._getMessagesToShowTootip(treeItem);
                        var statusTooltip = this._getStatusTooltip(treeItem.messageStatus);
                        var messageStatusIconTooltip = statusTooltip ? statusTooltip + "\n" + messagesToShowTooltip : messagesToShowTooltip;
                        if (treeItem.messageStatusIconTooltip != messageStatusIconTooltip) {
                            treeItem.messageStatusIconTooltip = messageStatusIconTooltip;
                            refreshBindings = true;
                        }
                    } else if (treeItem.messageStatusIconUrl || treeItem.messageStatusIconColor || treeItem.messageStatusIconTooltip) {
                        delete treeItem.messageStatusIconUrl;
                        delete treeItem.messageStatusIconColor;
                        delete treeItem.messageStatusIconTooltip;
                        refreshBindings = true;
                    }
                    delete treeItem.messageStatus;
                    delete treeItem.childMessageStatus;
                }.bind(this));

                if (refreshBindings) {
                    tree._updateBindings();
                }
            },

            _handleBeforeModelUpdated: function(panel) {
                if (!this.getEnabled()) {
                    return;
                }
                var tree = panel.getTree();
                this._calculateMessageStatusForTree(tree);
            }
        });

        return MessageStatusCalculationExtension;
    });
}; // end of sap/ui/vtm/extensions/MessageStatusCalculationExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.MessageStatusIconClickExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.extensions.MessageStatusIconClickExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/MessageStatusIconClickExtension",
    ["jquery.sap.global", "sap/ui/core/Control", "../Extension"],
    function (jQuery, SapUiCoreControl, SapUiVtmExtension) {

        "use strict";

        /**
         * Constructor for a new MessageStatusIconClickExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.MessageStatusIconClickExtension
         * @public
         * @class
         * Adds a behavior that shows a {@link sap.ui.vtm.MessagesPopover} when a message status icon is clicked.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.m.MessageStatusIconClickExtension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.m.MessageStatusIconClickExtension} instance.
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.IMessageStatusIconClickExtension
         */
        var MessageStatusIconClickExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.MessageStatusIconClickExtension", /** @lends sap.ui.vtm.extensions.MessageStatusIconClickExtension.prototype */ {
            metadata: {
                interfaces: [
                    "sap.ui.vtm.interfaces.IMessageStatusIconClickExtension"
                ]
            },

            constructor: function(sId, mSettings) {
                SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
            },

            initialize: function () {
                this.applyPanelHandler(function(panel) {
                    var tree = panel.getTree();
                    var messagesPopover;

                    tree.attachMessageStatusIconClicked(function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        if (messagesPopover && messagesPopover.isOpen()) {
                            messagesPopover.close();
                        }
                        var item = event.getParameter("item");
                        var source = event.getParameter("control");
                        var messages = sap.ui.vtm.TreeItemUtilities.getMessages(item);
                        if (messages.length) {
                            messages.sort(sap.ui.core.Message.compareByType).reverse();
                            messagesPopover = new sap.ui.vtm.MessagesPopover({messages: messages, maxHeight: "300px"});
                            messagesPopover.openBy(source);
                        }
                    }.bind(this));
                }.bind(this));
            }
        });

        return MessageStatusIconClickExtension;
    });
}; // end of sap/ui/vtm/extensions/MessageStatusIconClickExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/SceneNodeHoverHighlightExtension",
    ["jquery.sap.global", "sap/ui/core/Control", "../Extension"],
    function (jQuery, SapUiCoreControl, SapUiVtmExtension) {
        "use strict";


        /**
         * Constructor for a new SceneNodeHoverTooltipExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension
         * @public
         * @class
         * Adds a behaviour which highlights a scene node when the mouse hovers over it.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new instance.
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.ISceneNodeHoverHighlightExtension
         */
        var SceneNodeHoverHighlightExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension", /** @lends sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension.prototype */ {
           metadata: {
                interfaces: [
                    "sap.ui.vtm.interfaces.ISceneNodeHoverHighlightExtension"
                ],
                properties: {
                    /**
                     * The highlight color to use for the scene node being hovered over.
                     */
                    highlightColor: {type: "sap.ui.core.CSSColor", defaultValue: "rgba(0, 0, 255, 0.7)"}
                }
            },

            constructor: function (sId, mSettings) {
                SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
            },

            initialize: function () {
                this._panelPanelInitialized = new Map();

                this.applyPanelHandler(function (panel) {
                    var viewport = panel.getViewport();
                    var scene = this._vtm.getScene();

                    scene.attachLoadCompleted(function(event) {
                        if (!event.getParameter("succeeded")) {
                            return;
                        }
                        if (this._panelPanelInitialized.get(panel)) {
                            return;
                        }
                        this._panelPanelInitialized.set(panel, true);

                        var hoverHighlightOverrideDisplayGroup = new sap.ui.vtm.DisplayGroup();
                        var displayStatesBySceneNodeId = hoverHighlightOverrideDisplayGroup.getDisplayStatesBySceneNodeId();
                        var currentHoverNodeId = sap.ve.dvl.DVLID_INVALID;

                        viewport.addOverrideDisplayGroup(hoverHighlightOverrideDisplayGroup);

                        var removeExistingHighlight = function() {
                            if (currentHoverNodeId) {
                                if (displayStatesBySceneNodeId[currentHoverNodeId]) {
                                    delete displayStatesBySceneNodeId[currentHoverNodeId];
                                }
                            }
                        };

                        var applyHighlight = function(nodeId, highlightColor) {
                            if (nodeId !== sap.ve.dvl.DVLID_INVALID) {
                                displayStatesBySceneNodeId[nodeId] = {
                                    highlightColor: highlightColor
                                };
                            }
                        };

                        this.attachEnabledChanged(function(event) {
                            if (this.getEnabled() && currentHoverNodeId) {
                                applyHighlight(currentHoverNodeId, this.getHighlightColor());
                            } else {
                                removeExistingHighlight();
                            }
                            viewport.refresh();
                        }.bind(this));

                        viewport.addEventDelegate({
                            onmouseout: function() {
                                removeExistingHighlight();
                                currentHoverNodeId = sap.ve.dvl.DVLID_INVALID;
                                viewport.refresh();
                            }
                        }, viewport);

                        viewport.attachHover(function(event) {
                            var nodeId = event.getParameter("nodeId");
                            if (!this.getEnabled()) {
                                currentHoverNodeId = nodeId;
                                return;
                            }
                            if (nodeId !== currentHoverNodeId) {
                                removeExistingHighlight();
                                currentHoverNodeId = nodeId;
                                applyHighlight(nodeId, this.getHighlightColor());
                                viewport.refresh();
                            }
                        }.bind(this));

                        viewport.attachBeginGesture(function(event) {
                            removeExistingHighlight();
                            currentHoverNodeId = sap.ve.dvl.DVLID_INVALID;
                            viewport.refresh();
                        });

                    }.bind(this));

                }.bind(this));
            }
        });

        return SceneNodeHoverHighlightExtension;
    });
}; // end of sap/ui/vtm/extensions/SceneNodeHoverHighlightExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/SceneNodeHoverTooltipExtension",
    ["jquery.sap.global", "sap/ui/core/Control", "../Extension", "../ViewportHandler"],
    function (jQuery, SapUiCoreControl, SapUiVtmExtension, SapUiVtmHoverHandler) {

        "use strict";

        /**
         * Constructor for a new SceneNodeHoverTooltipExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension
         * @public
         * @class
         * Adds a behaviour in which a tooltip (which can be specified by application code using a callback function) is displayed when the mouse is hovering over a scene node.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new instance.
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.ISceneNodeHoverTooltipExtension
         */
        var SceneNodeHoverTooltipExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension", /** @lends sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension.prototype */ {
            metadata: {
                interfaces: [
                    "sap.ui.vtm.interfaces.ISceneNodeHoverTooltipExtension"
                ],
                properties: {
                    /**
                    * A callback function that gets a tooltip for a given {@link sap.ui.vtm.SceneNode}.
                    * If unspecified, the scene node name is used for the tooltip text.
                    *
                    * The first parameter is the {@link sap.ui.vtm.SceneNode} under cursor.<br>
                    * The function should return an object containing a tooltip text for the specified scene node.
                    * <pre>
                    *   {
                    *     text: [string]
                    *   }
                    * </pre>
                    * If function returns null no tooltip will be displayed.
                    */
                    tooltipCallback: {type: "any", group: "Behavior", defaultValue: null}
                }
            },

            constructor: function(sId, mSettings) {
                SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
            },

            createTooltip: function(id, text) {
                var tooltip = document.createElement("div");
                tooltip.className = "sapUiVtmSceneNode-Tooltip";
                tooltip.innerText = text;
                return tooltip;
            },

            initialize: function () {
                this._panelPanelInitialized = new Map();

                this.applyPanelHandler(function (panel) {
                    var viewport = panel.getViewport();
                    var scene = this._vtm.getScene();

                    scene.attachLoadCompleted(function(event) {
                        if (!event.getParameter("succeeded")) {
                            return;
                        }
                        if (this._panelPanelInitialized.get(panel)) {
                            return;
                        }
                        this._panelPanelInitialized.set(panel, true);

                        var currentHoverNodeId = sap.ve.dvl.DVLID_INVALID;
                        var vkViewport = viewport._getVkViewport();
                        var x, y;
                        var tooltipDiv;

                        var defaultTooltipFunction = function(sceneNode) {
                            return { text: sceneNode.getName() };
                        };
                        var hoverSceneNode = new sap.ui.vtm.SceneNode({
                            scene: scene
                        });

                        var hideTooltip = function() {
                            if (tooltipDiv) {
                                vkViewport.getDomRef().removeChild(tooltipDiv);
                                tooltipDiv = undefined;
                            }
                        };

                        var showTooltip = function(nodeId, x, y) {
                            if (nodeId !== sap.ve.dvl.DVLID_INVALID) {
                                hoverSceneNode.setSceneNodeId(nodeId);
                                var callback = this.getTooltipCallback() || defaultTooltipFunction;
                                var tooltip = callback(hoverSceneNode);
                                if (tooltip) {
                                    tooltipDiv = this.createTooltip(nodeId, tooltip.text);
                                    tooltipDiv.style.left = "calc(" + Math.floor(x) + "px + 1em)";
                                    tooltipDiv.style.top = "calc(" + Math.floor(y) + "px + 1.5em)";
                                    vkViewport.getDomRef().appendChild(tooltipDiv);
                                }
                            }
                        }.bind(this);

                        this.attachEnabledChanged(function(event) {
                            if (this.getEnabled() && currentHoverNodeId) {
                                showTooltip(currentHoverNodeId, x, y);
                            } else {
                                hideTooltip();
                            }
                            vkViewport.renderFrame();
                        }.bind(this));

                        viewport.addEventDelegate({
                            onmouseout: function() {
                                hideTooltip();
                                currentHoverNodeId = sap.ve.dvl.DVLID_INVALID;
                                x = y = null;
                                viewport.refresh();
                            }
                        }, viewport);

                        viewport.attachHover(function(event) {
                            var nodeId = event.getParameter("nodeId");
                            x = event.getParameter("x");
                            y = event.getParameter("y");

                            if (!this.getEnabled()) {
                                currentHoverNodeId = nodeId;
                                return;
                            }
                            if (nodeId !== currentHoverNodeId) {
                                hideTooltip();
                                currentHoverNodeId = nodeId;
                                showTooltip(nodeId, x, y);
                            }
                            vkViewport.renderFrame();
                        }.bind(this));

                        viewport.attachBeginGesture(function(event) {
                            hideTooltip();
                            currentHoverNodeId = sap.ve.dvl.DVLID_INVALID;
                            x = y = null;
                            viewport.refresh();
                        });

                    }.bind(this));

                }.bind(this));
            }
        });

        return SceneNodeHoverTooltipExtension;
    });
}; // end of sap/ui/vtm/extensions/SceneNodeHoverTooltipExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.SelectionKeepingExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.extensions.SelectionKeepingExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/SelectionKeepingExtension",
    ["jquery.sap.global", "sap/ui/core/Control", "../Extension"],
    function (jQuery, SapUiCoreControl, SapUiVtmExtension) {

        "use strict";

        /**
         * Constructor for a new SelectionKeepingExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.SelectionKeepingExtension
         * @public
         * @class
         * Workaround for {@link sap.ui.table.TreeTable} behaviour in which selections are lost after collapse/expand.
         * The {@link sap.ui.table.TreeTable} only allows items in the currently expanded tree to be selected.<br/>
         * This extension is expected to be removed in the future when {@link sap.ui.vtm.Tree} is rewritten to manage selection state independently from the underlying {@link sap.ui.table.TreeTable}.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.extensions.SelectionKeepingExtension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.extensions.SelectionKeepingExtension} instance.
         * @extends sap.ui.vtm.Extension
         */
        var SelectionKeepingExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.SelectionKeepingExtension", /** @lends sap.ui.vtm.extensions.SelectionKeepingExtension.prototype */ {
            initialize: function () {
                this._selectionSetsByPanel = new Map();

                this.applyPanelHandler(function(panel) {
                    var tree = panel.getTree();

                    tree.attachSelectionChanged(function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        var itemsAdded = event.getParameter("addedItems");
                        var itemsRemoved = event.getParameter("removedItems");
                        this._updateSelectionSet(panel, itemsAdded, itemsRemoved);
                    }.bind(this));

                    tree.attachExpandedChanged(function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        if (event.getParameter("expanded") !== true) {
                            return;
                        }
                        this._synchroniseSelection(panel);
                    }.bind(this));
                }.bind(this));
            },

            constructor: function(sId, mSettings) {
                SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
            },

            _synchroniseSelection: function(panel) {
                var tree = panel.getTree();
                var selectionSet = this._selectionSetsByPanel.get(panel);
                if (selectionSet) {
                    var items = [];
                    selectionSet.forEach(function(item) {
                        if (tree.getItem(item.id)) {
                            items.push(item);
                        }
                    });
                    tree.setSelectedItems(items, false);
                }
            },

            _updateSelectionSet: function(panel, selected, unselected) {
                var selectionSet = this._selectionSetsByPanel.get(panel);
                if (!selectionSet) {
                    selectionSet = new Set();
                    this._selectionSetsByPanel.set(panel, selectionSet);
                }

                if (unselected) {
                    unselected.forEach(function(item) {
                        selectionSet.delete(item);
                    });
                }
                if (selected) {
                    selected.forEach(function(item) {
                        selectionSet.add(item);
                    });
                }
            }
        });

        return SelectionKeepingExtension;
    });
}; // end of sap/ui/vtm/extensions/SelectionKeepingExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.SelectionLinkingExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.extensions.SelectionLinkingExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/SelectionLinkingExtension",
    ["jquery.sap.global", "sap/ui/core/Control", "../Extension"],
    function (jQuery, SapUiCoreControl, SapUiVtmExtension) {

        "use strict";

        /**
         * Constructor for a new SelectionLinkingExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.SelectionLinkingExtension
         * @public
         * @class
         * Adds a behavior that links items the visibility of tree items in a {@link sap.ui.vtm.Tree} with the visibility of their associated scene nodes in the {@link sap.ui.vtm.Viewport} in the same {@link sap.ui.vtm.Panel}.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.extensions.SelectionLinkingExtension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.extensions.SelectionLinkingExtension} instance.
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.ISelectionLinkingExtension
         */
        var SelectionLinkingExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.SelectionLinkingExtension", /** @lends sap.ui.vtm.extensions.SelectionLinkingExtension.prototype */ {
            metadata: {
                interfaces: [
                    "sap.ui.vtm.interfaces.ISelectionLinkingExtension"
                ],
                properties: {
                    /**
                     * The value is a callback function that finds tree items in a particular tree that match a given tree item.
                     *
                     * The first parameter is the tree item to match against.<br>
                     * The second parameter is the {@link sap.ui.vtm.Tree} containing the specified tree item being matched against.<br>
                     * The third parameter is the {@link sap.ui.vtm.Tree} to search for matches in.<br>
                     * The function returns an array of tree items that match the specified tree item.
                     */
                    findMatchingTreeItems: {type: "any", group: "Behavior", defaultValue: null}
                }
            },

            constructor: function(sId, mSettings) {
                SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
            },

            initialize: function () {
                this._handlingEvent = new Map();

                this.applyPanelHandler(function(panel) {
                    var tree = panel.getTree();

                    tree.attachSelectionChanged(function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        if (this._handlingEvent.get(panel)) {
                            return;
                        }
                        this._onSelectionChanged(tree.getPanel());
                    }.bind(this));

                    tree.attachEvent("vtmInternalSetTreeSelectionComplete", function (event) {
                        this._handlingEvent.set(panel, false);
                    }.bind(this));

                    tree.attachModelUpdated(function(event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        var primaryPanel = this._getPrimaryPanel();
                        if (primaryPanel) {
                            this._onSelectionChanged(primaryPanel);
                        }
                    }.bind(this));
                }.bind(this));
                
                this.attachEnabledChanged(function() {
                    if (this.getEnabled()) {
                        var primaryPanel = this._getPrimaryPanel();
                        if (primaryPanel) {
                            this._onSelectionChanged(primaryPanel);
                        }
                    }
                });
            },

            _getPrimaryPanel: function() {
                var panels = this._vtm.getPanels();
                if (!panels || !panels.length) {
                    return null;
                }
                return this._vtm.getActivePanel() || panels[0];
            },

            _onSelectionChanged: function(sourcePanel) {
                var sourceTree = sourcePanel.getTree();
                var selectedSourceTreeItems = sourceTree.getSelectedItems();
                var panels = this._vtm.getPanels();
                var findMatchingTreeItems = this.getFindMatchingTreeItems();
                if (!findMatchingTreeItems) {
                    return;
                }

                panels.forEach(function(targetPanel) {
                    var targetTree = targetPanel.getTree();
                    var targetTreeItems = [];

                    if (targetPanel !== sourcePanel) {
                        selectedSourceTreeItems.forEach(function(selectedSourceTreeItem) {
                            var matchingTreeItems = findMatchingTreeItems(selectedSourceTreeItem, sourceTree, targetTree);
                            Array.prototype.push.apply(targetTreeItems, matchingTreeItems);
                        });

                        this._handlingEvent.set(targetPanel, true);
                        targetTree.setSelectedItems(targetTreeItems);
                    }
                }.bind(this));

                return;
            }
        });

        return SelectionLinkingExtension;
    });
}; // end of sap/ui/vtm/extensions/SelectionLinkingExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.SyncSelectionOnTreeChangeExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.extensions.SyncSelectionOnTreeChangeExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/SyncSelectionOnTreeChangeExtension",
    ["jquery.sap.global", "sap/ui/core/Control", "../Extension"],
    function (jQuery, SapUiCoreControl, SapUiVtmExtension) {

        "use strict";

        /**
         * Constructor for a new SyncSelectionOnTreeChangeExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.SyncSelectionOnTreeChangeExtension
         * @public
         * @class
         * Workaround for {@link sap.ui.table.TreeTable} behaviour in which the selection can change when the model is updated, but no selection changed event is fired.<br/>
         * This extension is expected to be removed in the future when {@link sap.ui.vtm.Tree} is rewritten to manage selection state independently from the underlying {@link sap.ui.table.TreeTable}.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.extensions.SyncSelectionOnTreeChangeExtension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.extensions.SyncSelectionOnTreeChangeExtension} instance.
         * @extends sap.ui.vtm.Extension
         */
        var SyncSelectionOnTreeChangeExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.SyncSelectionOnTreeChangeExtension", /** @lends sap.ui.vtm.extensions.SyncSelectionOnTreeChangeExtension.prototype */ {
            initialize: function () {
                this._selectedItemsByPanel = new Map();

                this.applyPanelHandler(function(panel) {
                    var tree = panel.getTree();

                    tree.attachSelectionChanged(function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        var selectedItems = tree.getSelectedItems();
                        this._selectedItemsByPanel.set(panel, selectedItems);
                    }.bind(this));

                    tree.attachModelUpdated(function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        if (!this._selectedItemsByPanel.has(panel)) {
                            return;
                        }
                        var selectedItems = tree.getSelectedItems();
                        var savedSelectedItems = this._selectedItemsByPanel.get(panel);
                        this._fireSelectionChangedIfSelectedItemsChanged(tree, selectedItems, savedSelectedItems);
                    }.bind(this));
                }.bind(this));
            },

            constructor: function(sId, mSettings) {
                SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
            },

            _fireSelectionChangedIfSelectedItemsChanged: function(tree, newSelectedItems, oldSelectedItems) {
                var newSelectedItemsSet = sap.ui.vtm.ArrayUtilities.toSet(newSelectedItems);
                var oldSelectedItemsSet = sap.ui.vtm.ArrayUtilities.toSet(oldSelectedItems);

                var addedItems = [];
                var removedItems = [];

                newSelectedItems.forEach(function(item) {
                    if (!oldSelectedItemsSet.has(item)) {
                        addedItems.push(item);
                    }
                });
                oldSelectedItems.forEach(function(item) {
                    if (!newSelectedItemsSet.has(item)) {
                        removedItems.push(item);
                    }
                });

                if (addedItems.length || removedItems.length) {
                    tree.fireSelectionChanged({
                        addedItems: addedItems,
                        removedItems: removedItems,
                        userInteraction: false
                    });
                }
            }
        });

        return SyncSelectionOnTreeChangeExtension;
    });
}; // end of sap/ui/vtm/extensions/SyncSelectionOnTreeChangeExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.ViewLinkingExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.extensions.ViewLinkingExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/ViewLinkingExtension",
    ["jquery.sap.global", "sap/ui/core/Control", "../Extension"],
    function (jQuery, SapUiCoreControl, SapUiVtmExtension) {

        "use strict";

        /**
         * Constructor for the ViewLinkingExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.ViewLinkingExtension
         * @public
         * @class
         * Adds a behavior that links the camera views for all the {@link sap.ui.vtm.Viewport} instances associated with a {@link sap.ui.vtm.Vtm} instance.
         * @author SAP SE
         * @version 1.50.3
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.IViewLinkingExtension
         */
        var ViewLinkingExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.ViewLinkingExtension", /** @lends sap.ui.vtm.extensions.ViewLinkingExtension.prototype */ {
            metadata: {
                interfaces: [
                    "sap.ui.vtm.interfaces.IViewLinkingExtension"
                ]
            },

            constructor: function(sId, mSettings) {
                SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
            },

            initialize: function () {
                this._skipCount = new Map();

                this.applyPanelHandler(function (panel) {
                    var viewport = panel.getViewport();

                    viewport.attachEvent("frameRenderingFinished", function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        var primaryPanel = this._getPrimaryPanel();
                        if (event.getSource() != primaryPanel.getViewport()) {
                            return;
                        }
                        this._updateViews(panel);
                    }.bind(this));

                }.bind(this));

                this.attachEnabledChanged(function(event) {
                    if (this.getEnabled()) {
                        var primaryPanel = this._getPrimaryPanel();
                        if (primaryPanel) {
                            this._updateViews(primaryPanel);
                        }
                    }
                }.bind(this));
            },
            
            _getPrimaryPanel: function() {
                var panels = this._vtm.getPanels();
                if (!panels || !panels.length) {
                    return null;
                }
                return this._vtm.getActivePanel() || panels[0];
            },

            _updateViews: function(sourcePanel) {
                var sourceViewport = sourcePanel.getViewport();
                if (!sourceViewport.getInitialized()) {
                    return;
                }
                var cameraInfo = sourceViewport.getCameraInfo();
                var panels = this._vtm.getPanels();
                panels.forEach(function(targetPanel) {
                    if (targetPanel !== sourcePanel) {
                        var targetViewport = targetPanel.getViewport();
                        if (targetViewport.getInitialized()) {
                            targetViewport.setCameraInfo(cameraInfo);
                        }
                    }
                });
            }
        });

        return ViewLinkingExtension;
    });
}; // end of sap/ui/vtm/extensions/ViewLinkingExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.ViewportSelectionLinkingExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.extensions.ViewportSelectionLinkingExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/ViewportSelectionLinkingExtension",
    ["jquery.sap.global", "sap/ui/core/Control", "../Extension"],
    function (jQuery, SapUiCoreControl, SapUiVtmExtension) {

        "use strict";

        /**
         * Constructor for a new ViewportSelectionLinkingExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.ViewportSelectionLinkingExtension
         * @public
         * @class
         * Adds a behavior that links the selection state of tree items in a {@link sap.ui.vtm.Tree} with their corresponding scene nodes in the {@link sap.ui.vtm.Viewport} in the same {@link sap.ui.vtm.Panel}.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.extensions.ViewportSelectionLinkingExtension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.extensions.ViewportSelectionLinkingExtension} instance.
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.IViewportSelectionLinkingExtension
         */
        var ViewportSelectionLinkingExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.ViewportSelectionLinkingExtension", /** @lends sap.ui.vtm.extensions.ViewportSelectionLinkingExtension.prototype */ {
            metadata: {
                interfaces: [
                    "sap.ui.vtm.interfaces.IViewportSelectionLinkingExtension"
                ]
            },

            constructor: function(sId, mSettings) {
                SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
            },

            initialize: function () {
                this.applyPanelHandler(function (panel) {
                    var tree = panel.getTree();
                    var viewport = panel.getViewport();
                    var handlingEvent = false;

                    tree.attachSelectionChanged(function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        if (handlingEvent) {
                            return;
                        }

                        handlingEvent = true;

                        var itemsAdded = event.getParameter("addedItems");
                        var itemsRemoved = event.getParameter("removedItems");

                        var sceneNodeIdsToDeselect = [];
                        itemsRemoved.forEach(function(item) {
                            if (item.sceneNodeIds) {
                                Array.prototype.push.apply(sceneNodeIdsToDeselect, sap.ui.vtm.TreeItemUtilities.getSceneNodeIds(item));
                            }
                        });
                        viewport.setSelected(sceneNodeIdsToDeselect, false, false);

                        var sceneNodeIdsToSelect = [];
                        itemsAdded.forEach(function(item) {
                            if (item.sceneNodeIds) {
                                Array.prototype.push.apply(sceneNodeIdsToSelect, sap.ui.vtm.TreeItemUtilities.getSceneNodeIds(item));
                            }
                        });
                        viewport.setSelected(sceneNodeIdsToSelect, true, false);

                        handlingEvent = false;

                    }.bind(this));

                    tree.attachEvent("vtmInternalSetTreeSelectionComplete", function(event) {
                        handlingEvent = false;
                    });

                    viewport.attachSelectionChanged(function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }

                        var selectedSceneNodeIds = event.getParameter("selectedIds");
                        var userInteraction = event.getParameter("userInteraction");
                        if (userInteraction) {
                            var selectedTreeItems = tree.getItemsBySceneNodeId(selectedSceneNodeIds);
                            tree.setSelectedItems(selectedTreeItems);
                        }
                    }.bind(this));

                }.bind(this));
            }
        });

        return ViewportSelectionLinkingExtension;
    });
}; // end of sap/ui/vtm/extensions/ViewportSelectionLinkingExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.extensions.VisibilityIconClickExtension') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

 jQuery.sap.declare('sap.ui.vtm.extensions.VisibilityIconClickExtension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/extensions/VisibilityIconClickExtension",
     ["jquery.sap.global", "sap/ui/core/Control", "../Extension"],
     function (jQuery, SapUiCoreControl, SapUiVtmExtension) {

        "use strict";

        /**
         * Constructor for a new VisibilityIconClickExtension.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.extensions.VisibilityIconClickExtension
         * @public
         * @class
         * Adds a behavior that updates visibility in the {@link sap.ui.vtm.Tree} when a visibility checkbox (eye) is clicked.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.extensions.VisibilityIconClickExtension} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.extensions.VisibilityIconClickExtension} instance.
         * @extends sap.ui.vtm.Extension
         * @implements sap.ui.vtm.interfaces.IVisibilityIconClickExtension
         */
         var VisibilityIconClickExtension = SapUiVtmExtension.extend("sap.ui.vtm.extensions.VisibilityIconClickExtension", /** @lends sap.ui.vtm.extensions.VisibilityIconClickExtension.prototype */ {
             metadata: {
                 interfaces: [
                     "sap.ui.vtm.interfaces.IVisibilityIconClickExtension",
                     "sap.ui.vtm.interfaces.IVisibilityHeaderIconClickExtension"
                 ]
             },

             constructor: function(sId, mSettings) {
                 SapUiVtmExtension.apply(this, arguments); // Force non-lazy construction
             },

             initialize: function () {
                 this.applyPanelHandler(function (panel) {
                    var tree = panel.getTree();
                    var viewport = panel.getViewport();

                    tree.attachVisibilityIconClicked(function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        var item = event.getParameter("item");
                        var visibility = event.getParameter("visibility");
                        this._onTreeItemVisibilityClicked(tree, viewport, item, visibility);

                    }.bind(this));

                    tree.attachVisibilityHeaderIconClicked(function (event) {
                        if (!this.getEnabled()) {
                            return;
                        }
                        var visibility = event.getParameter("visibility");
                        tree.setVisibility(tree.getRootItems(), visibility, true);
                    }.bind(this));

                }.bind(this));
            },
            
            _onTreeItemVisibilityClicked: function(tree, viewport, item, visibility) {
                var selectedItems = tree.getSelectedItems();
                var clickedOnSelected = (selectedItems && selectedItems.indexOf(item) >= 0);
                if (!clickedOnSelected) {
                    selectedItems = [item];
                }
                tree.setVisibility(selectedItems, visibility, true);
            }
         });

         return VisibilityIconClickExtension;
     });
}; // end of sap/ui/vtm/extensions/VisibilityIconClickExtension.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

/**
 * Initialization Code and shared classes of library sap.ui.vtm.
 */
jQuery.sap.declare('sap.ui.vtm.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/library",[
        "jquery.sap.global",
        'sap/ui/base/DataType',
        "./ArrayUtilities",
        "./MatrixComponent",
        "./MatrixUtilities",
        "./TreeItemUtilities",
        "./HashUtilities",
        "./DescriptorUtilities",
        "./InternalColumns",
        "./ColumnType",
        "./PredefinedView",
        "./TextColor",
        "./SelectionMode",
        "./InternalColumnDescriptor",
        "./ChildCollectionType",
        "./TreeItemType",
        "./ColumnTemplates",
        "./ViewableLoadStatus"
    ],
    function(
        jQuery,
        SapUiBaseDataType,
        SapUiVtmArrayUtilities,
        SapUiVtmMatrixComponent,
        SapUiVtmMatrixUtilities,
        SapUiVtmTreeItemUtilities,
        SapUiVtmHashUtilities,
        SapUiVtmDescriptorUtilities,
        SapUiVtmInternalColumns,
        SapUiVtmColumnType,
        SapUiVtmPredefinedView,
        SapUiVtmTextColor,
        SapUiVtmSelectionMode,
        SapUiVtmInternalColumnDescriptor,
        SapUiVtmChildCollectionType,
        SapUiVtmTreeItemType,
        SapUiVtmColumnTemplates,
        SapUiVtmViewableLoadStatus) {

        "use strict";

        /**
         * SAPUI5 library with controls to visualize, map and restructure hierarchical business data that maps to 3D objects.
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @namespace
         * @name sap.ui.vtm
         * @author SAP SE
         * @version 1.50.3
         * @public
         */

        /**
         * Namespace for extensions that are provided with the sap.ui.vtm library.
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @namespace
         * @name sap.ui.vtm.extensions
         * @author SAP SE
         * @version 1.50.3
         * @public
         */

        /**
         * Namespace for interfaces that are provided with the sap.ui.vtm library.
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @namespace
         * @name sap.ui.vtm.interfaces
         * @author SAP SE
         * @version 1.50.3
         * @public
         */

        sap.ui.getCore().initLibrary({
            name: "sap.ui.vtm",
            dependencies: [
                "sap.ui.core", "sap.ui.table", "sap.m", "sap.ui.vk"
            ],
            interfaces: [
                "sap.ui.vtm.interfaces.IDisplayStateCalculationExtension",
                "sap.ui.vtm.interfaces.IInitialViewExtension",
                "sap.ui.vtm.interfaces.IDownloadProgressExtension",
                "sap.ui.vtm.interfaces.ILoadProgressExtension",
                "sap.ui.vtm.interfaces.IMessageStatusCalculationExtension",
                "sap.ui.vtm.interfaces.IMessageStatusIconClickExtension",
                "sap.ui.vtm.interfaces.IMessageStatusHeaderIconClickExtension",
                "sap.ui.vtm.interfaces.ISelectionLinkingExtension",
                "sap.ui.vtm.interfaces.ISceneNodeHoverHighlightExtension",
                "sap.ui.vtm.interfaces.ISceneNodeHoverTooltipExtension",
                "sap.ui.vtm.interfaces.IViewLinkingExtension",
                "sap.ui.vtm.interfaces.IViewportSelectionLinkingExtension",
                "sap.ui.vtm.interfaces.IVisibilityIconClickExtension",
                "sap.ui.vtm.interfaces.IVisibilityHeaderIconClickExtension"
            ],
            types: [
                "sap.ui.vtm.Matrix"
            ],
            controls: [
                "sap.ui.vtm.Panel",
                "sap.ui.vtm.Tree",
                "sap.ui.vtm.Text",
                "sap.ui.vtm.Viewport",
                "sap.ui.vtm.MessagesPopover",
                "sap.ui.vtm.Progress",
                "sap.ui.vtm.ProgressDialog",
                "sap.ui.vtm.SelectColumnsDialog"
            ],
            elements: [
                "sap.ui.vtm.Vtm",
                "sap.ui.vtm.Column",
                "sap.ui.vtm.Lookup",
                "sap.ui.vtm.ViewableLoadInfo",
                "sap.ui.vtm.Viewable",
                "sap.ui.vtm.Scene",
                "sap.ui.vtm.SceneNode",
                "sap.ui.vtm.Extension",
                "sap.ui.vtm.DisplayGroup",
                "sap.ui.vtm.TreeCollections",

                // Extensions
                "sap.ui.vtm.extensions.SyncSelectionOnTreeChangeExtension",
                "sap.ui.vtm.extensions.MessageStatusCalculationExtension",
                "sap.ui.vtm.extensions.MessageStatusIconClickExtension",
                "sap.ui.vtm.extensions.ViewportSelectionLinkingExtension",
                "sap.ui.vtm.extensions.SelectionLinkingExtension",
                "sap.ui.vtm.extensions.VisibilityIconClickExtension",
                "sap.ui.vtm.extensions.DisplayStateCalculationExtension",
                "sap.ui.vtm.extensions.SelectionKeepingExtension",
                "sap.ui.vtm.extensions.ViewLinkingExtension",
                "sap.ui.vtm.extensions.InitialViewExtension",
                "sap.ui.vtm.extensions.LoadProgressExtension",
                "sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension",
                "sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension"
            ],
            noLibraryCSS: false,
            version: "1.50.3"
        });

        /**
         * Creates an instance of {@link sap.ui.vtm.Vtm} with a default set of extensions.
         *
         * The {@link sap.ui.vtm.Vtm} constructor can be used to create an instance of {@link sap.ui.vtm.Vtm} with a specific set of extensions.
         * @public
         * @function
         * @name sap.ui.vtm.createVtm
         * @param {string?} sId The id to pass to the {@link sap.ui.vtm.Vtm} constructor.
         * @param {object?} mSettings The settings to pass to the {@link sap.ui.vtm.Vtm} constructor. Any extensions specified in the settings will be replaced with a default set.
         * @returns {sap.ui.vtm.Vtm} The created instance of {@link sap.ui.vtm.Vtm}.
         */
        sap.ui.vtm.createVtm = function(sId, mSettings) {
            return new sap.ui.vtm.Vtm(sId, jQuery.extend(mSettings, {
                addDefaultExtensions: true
            }));
        };

        var resourceBundle;
        
        /**
         * Gets the resource bundle for the sap.ui.vtm library.
         * @private
         * @function
         * @name sap.ui.vtm.getResourceBundle
         * @returns {jQuery.sap.util.ResourceBundle} The resource bundle for the sap.ui.vtm library.
         */
        sap.ui.vtm.getResourceBundle = function() {
            if (!resourceBundle) {
                resourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.vtm.i18n");
            }
            return resourceBundle;
        };

        /**
         * Used to construct a measurement id.
         * @private
         * @function
         * @name sap.ui.vtm.createMeasureId
         * @param {sap.ui.base.ManagedObject|string} object A ManagedObject or a string to use when constructing a measure id string.
         * @param {string} measureName An additional string component to use when constructing a measure id string.
         * @returns {string} The measure id string that was constructed for this measurement.
         */
        sap.ui.vtm.createMeasureId = function(object, measureName) {
            return (typeof object === "string")
                ? object + "#" + measureName
                : object.getMetadata().getName() + "#" + measureName + " " + object.getId();
        };

        /**
         * Used to measure the duration of some operation.
         * @private
         * @function
         * @name sap.ui.vtm.measure
         * @param {sap.ui.base.ManagedObject|string} object A ManagedObject or a string to use when constructing a measure id string.
         * @param {string} measureName An additional string component to use when constructing a measure id string.
         * @param {function} task A function to measure.
         * @returns {string} The measure id string that was constructed for this measurement.
         */
        sap.ui.vtm.measure = function(object, measureName, task) {
            var measureId = sap.ui.vtm.createMeasureId(object, measureName);
            jQuery.sap.measure.start(measureId, "", ["sap.ui.vtm"]);
            try {
                task();
            } finally {
                jQuery.sap.measure.end(measureId);
            }
            return measureId;
        };
        
        /**
         * @classdesc A float[] type representing a transformation matrix in a ISO 10303-42 format (in a 1 dimensional array of 13 numbers).
         *
         * The {@link sap.ui.vtm.MatrixComponent} enumeration enumerates the array indices of the matrix components for this type 
         * @final
         * @namespace
         * @public
         * @experimental Since 1.0.0 This class is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This simple type also will be described in the UI5 (legacy) designtime metamodel
         */
        
        sap.ui.vtm.Matrix = SapUiBaseDataType.createType("sap.ui.vtm.Matrix", {
                isValid: function(value) {
                    return sap.ui.vtm.Matrix.getBaseType().isValid(value) && value.length === 13;
                }
            },
            SapUiBaseDataType.getType("float[]")
        );

        /**
         * Interface for extensions which manage the display state (visibility, opacity, highlight color) of the scene nodes in the VTM viewports.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.IDisplayStateCalculationExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which manage the initial view in the VTM viewports after loading an initial set of viewables.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.IInitialViewExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which indicate progress while viewables are being downloaded.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.IDownloadProgressExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which indicate progress while viewables are being loaded.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.ILoadProgressExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which calculate the icon to show for each tree item in the {@link sap.ui.vtm.InternalColumnDescriptor.MessageStatus} column.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.IMessageStatusCalculationExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which provide a behaviour when an icon in the {@link sap.ui.vtm.InternalColumnDescriptor.MessageStatus} column is clicked.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.IMessageStatusIconClickExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which provide a behaviour when the icon in the column header for the {@link sap.ui.vtm.InternalColumnDescriptor.MessageStatus} column is clicked.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.IMessageStatusHeaderIconClickExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which link the selections in trees across panels.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.ISelectionLinkingExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which highlight the scene node that is being hovered over in a viewport.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.ISceneNodeHoverHighlightExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which show a tooltip for the scene node that is being hovered over in a viewport.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.ISceneNodeHoverTooltipExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which link the views (camera positions) across VTM viewports.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.IViewLinkingExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which link the selection state between the tree and the viewport in each VTM panel.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.IViewportSelectionLinkingExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which provide a behaviour when an icon in the {@link sap.ui.vtm.InternalColumnDescriptor.Visibility} column is clicked.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.IVisibilityIconClickExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */

        /**
         * Interface for extensions which provide a behaviour when the icon in the column header for the {@link sap.ui.vtm.InternalColumnDescriptor.Visibility} column is clicked.
         * @since 1.50
         * @name sap.ui.vtm.interfaces.IVisibilityHeaderIconClickExtension
         * @interface
         * @public
         * @author SAP SE
         * @version 1.50.3
         * @experimental Since 1.50.0 This library is experimental and might be modified or removed in future versions.
         * @ui5-metamodel This interface also will be described in the UI5 (legacy) designtime metamodel
         */
        
        return sap.ui.vtm;
    });

}; // end of sap/ui/vtm/library.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.MessagesPopover') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.MessagesPopover'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
jQuery.sap.require('sap.m.PopoverRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/MessagesPopover",
    ["jquery.sap.global", "./library", "sap/m/Popover", "sap/m/PopoverRenderer", "sap/m/List"],
    function (jQuery, SapUiVtmLibrary, SapMPopover,SapMPopoverRenderer, SapMList) {

        "use strict";

        /**
         * Constructor for a new MessagesPopover.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @public
         * @class
         * A control that can be used to show messages applied to a tree item.
         * @author SAP SE
         * @version 1.50.3
         * @name sap.ui.vtm.MessagesPopover
         * @extends sap.m.Popover
         */
        var MessagesPopover = sap.m.Popover.extend("sap.ui.vtm.MessagesPopover", /** @lends sap.ui.vtm.MessagesPopover.prototype */ {
            metadata: {
                properties: {
                    /**
                     * The set of {@link sap.ui.core.Message} objects to display.
                     *
                     * Only the following properties of each message will be used:
                     * <ul>
                     * <li><code>level</code></li>
                     * <li><code>text</code></li>
                     * <li><code>icon</code></li>
                     * </ul>
                     */
                    messages: {type: "object[]"},

                    /**
                     * Maximum height of status window.
                     */
                    maxHeight: {type: "sap.ui.core.CSSSize", defaultValue: null}
                }
            },

            init: function () {
                SapMPopover.prototype.init.apply(this);
                this._rb = sap.ui.vtm.getResourceBundle();
                this.setShowHeader(false);
                this.attachAfterOpen(this._onAfterOpen, this);
            },

            renderer: function(oRM, oControl) {
                SapMPopoverRenderer.render.call(this, oRM, oControl);
            },

            onAfterRendering: function() {
                var domRef = this.getDomRef();
                var maxH = parseInt(this.getMaxHeight(), 10);
                if (maxH > 0 && domRef.clientHeight > maxH) {
                    this.setContentHeight(this.getMaxHeight());
                }
            },

            setMessages: function(aMessages) {
                var modelMessages = [];
                aMessages.forEach(function(message) {
                    var modelMessage = {
                        text: message.getText()
                    };
                    var type = message.getLevel();
                    var iconUrl = message.getIcon();
                    switch (type) {
                    case sap.ui.core.MessageType.Error:
                        modelMessage.iconUrl = iconUrl || "sap-icon://error";
                        modelMessage.iconColor = sap.ui.core.IconColor.Negative;
                        modelMessage.iconTooltip = this._rb.getText("MESSAGESTATUS_ERROR");
                        break;
                    case sap.ui.core.MessageType.Warning:
                        modelMessage.iconUrl = iconUrl || "sap-icon://alert";
                        modelMessage.iconColor = sap.ui.core.IconColor.Critical;
                        modelMessage.iconTooltip = this._rb.getText("MESSAGESTATUS_WARNING");
                        break;
                    case sap.ui.core.MessageType.Success:
                        modelMessage.iconUrl = iconUrl || "sap-icon://sys-enter-2";
                        modelMessage.iconColor = sap.ui.core.IconColor.Positive;
                        modelMessage.iconTooltip = this._rb.getText("MESSAGESTATUS_SUCCESS");
                       break;
                    case sap.ui.core.MessageType.Information:
                        modelMessage.iconUrl = iconUrl || "sap-icon://message-information";
                        modelMessage.iconColor = sap.ui.core.IconColor.Neutral;
                        modelMessage.iconUrl = iconUrl || "sap-icon://message-information";
                        modelMessage.iconTooltip = this._rb.getText("MESSAGESTATUS_INFORMATION");
                        break;
                    default:
                        message.color = sap.ui.core.IconColor.Default;
                    }
                    modelMessages.push(modelMessage);
                }.bind(this));

                var model = new sap.ui.model.json.JSONModel();
                var data = {messages: modelMessages};
                model.setData(data);

                var list = new sap.m.List();
                list.setModel(model, "model");
                list.bindItems("model>/messages", new sap.m.CustomListItem({
                        content: [
                            new sap.ui.layout.HorizontalLayout({
                                content: [
                                    new sap.ui.core.Icon({
                                        src: "{model>iconUrl}",
                                        color: "{model>iconColor}",
                                        tooltip: "{model>iconTooltip}"
                                    }).addStyleClass("sapUiVtmTreeStatusItem"),
                                    new sap.m.Text({
                                        text: "{model>text}",
                                        tooltip: "{model>text}",
                                        wrapping: true
                                    }).addStyleClass("sapUiVtmTreeStatusItem")
                                ]
                            })
                        ]
                    })
                );

                this.addContent(list);
                return this;
            },

            _onModelContextChanged: function() {
                this.close();
            },

            _onAfterOpen: function(oEvent) {
                var oControl = oEvent.getParameter("openBy");
                if (oControl) {
                    oControl.attachModelContextChange(this._onModelContextChanged, this);
                    this.attachAfterClose(this._onAfterClose, this);
                }

                this.detachAfterOpen(this._onAfterOpen, this);
            },

            _onAfterClose: function(oEvent) {
                var oControl = oEvent.getParameter("openBy");
                if (oControl) {
                    oControl.detachModelContextChange(this._onModelContextChanged, this);
                    this.detachAfterClose(this._onAfterClose, this);
                }

                setTimeout(function() {
                    this.destroy();
                }.bind(this), 0);
            }
        });

        return MessagesPopover;
    });

}; // end of sap/ui/vtm/MessagesPopover.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.ProgressDialog') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.ProgressDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/ProgressDialog",
    ["jquery.sap.global", "./library", "sap/ui/core/Control", "sap/m/Dialog", "./Progress"],
    function (jQuery, SapUiVtmLibrary, SapUiCoreControl, SapMTDialog, SapUiVtmProgress) {

        "use strict";

        /**
         * Constructor for a new ProgressDialog.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @public
         * @class
         * A progress control to show viewable download and load progress.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {sap.ui.vtm.Scene} scene The scene that is being used to load viewables.
         * @name sap.ui.vtm.ProgressDialog
         * @extends sap.ui.core.Control
         */
        var ProgressDialog = SapUiCoreControl.extend("sap.ui.vtm.ProgressDialog",  /** @lends sap.ui.vtm.ProgressDialog.prototype */ {
            metadata: {
                properties: {
                    /**
                     * The text to display in the progress dialog.
                     */
                    progressText: {
                        type: "string"
                    },
                    /**
                     * The percentage (0-100) to show in the progress bar (if visible).
                     */
                    percentComplete: {
                        type: "int",
                        defaultValue: 0
                    },
                    /**
                     * Whether the progress bar is visible.
                     */
                    progressBarVisible: {
                        type: "boolean",
                        defaultValue: "true"
                    }
                }
            },

            init: function () {
                this._oProgress = new sap.ui.vtm.Progress();
                this._oDialog = new sap.m.Dialog(this.getId() + '-Dialog', {
                    showHeader: false,
                    content: [this._oProgress],
                    verticalScrolling: false,
                    horizontalScrolling: false
                });
            },

            renderer: function (oRM, oControl) {},

            /**
             * Opens the dialog.
             * @public
             * @method
             * @returns {sap.ui.vtm.ProgressDialog} <code>this</code> for method chaining.
             */
            open: function() {
                return this._oDialog.open();
            },

            /**
             * Returns whether the dialog is open.
             * @public
             * @method
             * @returns {boolean} <code>true</code> when the dialog is open.
             */
            isOpen: function() {
                return this._oDialog.isOpen();
            },

            /**
             * Closes the dialog.
             * @public
             * @method
             * @returns {sap.ui.vtm.ProgressDialog} <code>this</code> for method chaining.
             */
            close: function() {
                return this._oDialog.close();
            },

            setPercentComplete: function(iPercentComplete) {
                this.setProperty("percentComplete", iPercentComplete);
                this._oProgress.getProgressBar().setPercentValue(iPercentComplete);
                sap.ui.getCore().applyChanges();
            },

            setProgressText: function(sProgressText) {
                this.setProperty("progressText", sProgressText);
                this._oProgress.getProgressText().setText(sProgressText);
                sap.ui.getCore().applyChanges();
            },

            setProgressBarVisible: function(bProgressBarVisible) {
                this.setProperty("progressBarVisible", bProgressBarVisible);
                this._oProgress.getProgressBar().setVisible(bProgressBarVisible);
            }
        });

        return ProgressDialog;
    });

}; // end of sap/ui/vtm/ProgressDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Scene') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
jQuery.sap.declare('sap.ui.vtm.Scene'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.dvl.GraphicsCore'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.Scene'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.NodeHierarchy'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Scene",
    ["jquery.sap.global", "sap/ui/core/Element", "sap/ui/vk/dvl/GraphicsCore", "sap/ui/vk/Scene", "sap/ui/vk/NodeHierarchy", "./ViewableLoadInfo", "./SceneNode", "./ArrayUtilities"],
    function (jQuery, SapUiCoreElement, SapUiVkGraphicsCore, SapUiVkScene, SapUiVkNodeHierarchy, SapUiVtmViewableLoadInfo, SapUiVtmSceneNode, SapUiVtmArrayUtilities) {

        "use strict";

        /**
         * This class is not intended to be directly instantiated by application code.
         * A {@link sap.ui.vtm.Scene} object is created when a {@link sap.ui.vtm.Vtm} object is created.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @public
         * @class
         * Allows access to scene nodes in the scene.
         * A single {@link sap.ui.vtm.Scene} is shared by the {@link sap.ui.vtm.Viewport} objects in all the {@link sap.ui.vtm.Panel} objects associated with a {@link sap.ui.vtm.Vtm} instance.
         * Visibility, selection, highlighting and opacity can be controlled for each scene node separately in each {@link sap.ui.vtm.Viewport}.
         * @author SAP SE
         * @version 1.50.3
         * @name sap.ui.vtm.Scene
         * @extends sap.ui.core.Element
         */
        var Scene = SapUiCoreElement.extend("sap.ui.vtm.Scene", /** @lends sap.ui.vtm.Scene.prototype */ {

            metadata: {
                events: {
                    /**
                     * Raised to indicate download progress of a viewable while viewables are being downloaded
                     */
                    downloadProgress: {
                        parameters: {
                            /**
                             * The viewable that is being downloaded.
                             */
                            viewable: { type: "sap.ui.vtm.Viewable" },

                            /**
                             * The number of bytes that have been downloaded.
                             */
                            downloadedBytes: { type: "int" },

                            /**
                             * The total number of bytes that need to be downloaded.
                             */
                            totalBytes: { type: "int" }
                        }
                    },

                    /**
                     * Raised when starting a download of a set of viewables.
                     */
                    downloadStarted: {
                        parameters: {
                            /**
                             * A set of {@link sap.ui.vtm.ViewableLoadInfo} objects that describe the status
                             * of each {@link sap.ui.vtm.Viewable} passed to the {@link #loadViewablesAsync} call.
                             */
                            viewableLoadInfos: { type: "sap.ui.vtm.ViewableLoadInfo[]" }
                        }
                    },

                    /**
                     * Raised when viewables have been downloaded (successfully or unsuccessfully) as a result of a call to {@link #loadViewablesAsync}.
                     * 
                     * If no viewables have been successfully downloaded, none of the viewables will be loaded, so no subsequent
                     * {@link sap.ui.vtm.Scene.loadStarted}, {@link sap.ui.vtm.Scene.loadProgress} or {@link sap.ui.vtm.Scene.loadCompleted} will occur
                     *  as a result of the call to {@link #loadViewablesAsync} that resulted in the {@link sap.ui.vtm.Scene.downloadCompleted} event being raised.
                     */
                    downloadCompleted: {
                        parameters: {
                            /**
                             * A set of {@link sap.ui.vtm.ViewableLoadInfo} objects that describe the status
                             * of each {@link sap.ui.vtm.Viewable} passed to the {@link #loadViewablesAsync} call.
                             */
                            viewableLoadInfos: { type: "sap.ui.vtm.ViewableLoadInfo[]" },

                            /**
                             * The set of viewables that were downloaded successfully in the call to {@link #loadViewablesAsync} that resulted in this event being raised.
                             */
                            downloadedViewables: { type: "sap.ui.vtm.Viewable[]" }
                        }
                    },

                    /**
                     * Raised when starting to load a set of viewables.
                     */
                    loadStarted: {
                        parameters: {
                            /**
                             * A set of {@link sap.ui.vtm.ViewableLoadInfo} objects that describe the status
                             * of each {@link sap.ui.vtm.Viewable} passed to the {@link #loadViewablesAsync} call.
                             */
                            viewableLoadInfos: { type: "sap.ui.vtm.ViewableLoadInfo[]" }
                        }
                    },
                    
                    /**
                     * Raised to provide progress information for a viewable that is being loaded.
                     */
                    loadProgress: {
                        /**
                         * The viewable that is being loaded.
                         */
                        viewable: { type: "sap.ui.vtm.Viewable" },
                        
                        /**
                         * The estimated load percentage for the viewable that is being loaded.
                         */
                        percentage: { type: "float"}
                    },

                    /**
                     * Raised when all viewables specified in a call to {@link #loadViewablesAsync} have either loaded or failed to load.
                     */
                    loadCompleted: {
                        parameters: {
                            /**
                             * Indicates whether the scene was built/updated successfully.
                             * It is possible that this can be <code>false</code> when all the content resources apparently loaded successfully.
                             */
                            succeeeded: { type: "boolean" },

                            /**
                             * A set of {@link sap.ui.vtm.ViewableLoadInfo} objects that describe the status
                             * of each {@link sap.ui.vtm.Viewable} passed to the {@link #loadViewablesAsync} call.
                             */
                            viewableLoadInfos: { type: "sap.ui.vtm.ViewableLoadInfo[]" },

                            /**
                             * The set of viewables that were loaded successfully in the call to {@link #loadViewablesAsync} that resulted in this event being raised.
                             */
                            loadedViewables: { type: "sap.ui.vtm.Viewable[]" }
                        }
                    },

                    /**
                     * Raised when the scene hierarchy has been modified.
                     */
                    hierarchyChanged: {}
                }
            },

            init: function () {
                var vkGraphicsCore = new SapUiVkGraphicsCore({}, {
                    antialias: true,
                    alpha: true,
                    premultipliedAlpha: false
                });
                this._viewablesBySource = new Map();
                this._viewableLoadInfosByViewable = new Map();
                this._vkGraphicsCore = vkGraphicsCore;
                this._rootContentResource = new sap.ui.vk.ContentResource({
                    localMatrix: sap.ui.vtm.MatrixUtilities.toVkMatrix(sap.ui.vtm.MatrixUtilities.createIdentity())
                });

                vkGraphicsCore.attachEvent("sceneLoadingProgress", function(event) {
                    var source = event.getParameter("sourceName"),
                        percentage = event.getParameter("percentage") * 100,
                        viewable = this._viewablesBySource.get(source);

                    this.fireLoadProgress({
                        viewable: viewable,
                        percentage: percentage
                    });
                }.bind(this));
            },

            destroy: function() {
                if (this._vkGraphicsCore !== null) {
                    this._vkGraphicsCore.destroy();
                    this._vkGraphicsCore = null;
                }
                SapUiCoreElement.prototype.destroy.apply(this);
            },

            _raiseHierarchyChanged: function() {
                sap.ui.vtm.measure(this, "fireHierarchyChanged", function() {
                    this.fireHierarchyChanged();
                }.bind(this));
            },
            
            _getViewableLoadInfos: function(viewables) {
                var viewableLoadInfos = [];
                viewables.forEach(function(viewable) {
                    var viewableLoadInfo = this._viewableLoadInfosByViewable.get(viewable);
                    viewableLoadInfos.push(viewableLoadInfo);
                }.bind(this));
                return viewableLoadInfos;
            },

            _raiseDownloadStarted: function(viewables) {
                sap.ui.vtm.measure(this, "fireDownloadStarted", function() {
                    var viewableLoadInfos = this._getViewableLoadInfos(viewables);
                    this.fireDownloadStarted({
                        viewableLoadInfos: viewableLoadInfos
                    });
                }.bind(this));
            },

            _raiseDownloadCompleted: function(viewables) {
                sap.ui.vtm.measure(this, "fireDownloadCompleted", function() {
                    var viewableLoadInfos = this._getViewableLoadInfos(viewables);
                    var downloadedViewables = viewableLoadInfos.filter(function(viewableLoadInfo) {
                        return viewableLoadInfo.getStatus() === sap.ui.vtm.ViewableLoadStatus.Downloaded;
                    }).map(function(viewableLoadInfo) {
                        return viewableLoadInfo.getViewable();
                    });
                    this.fireDownloadCompleted({
                        viewableLoadInfos: viewableLoadInfos,
                        downloadedViewables: downloadedViewables
                    });
                }.bind(this));
            },

            _raiseLoadStarted: function(viewables) {
                sap.ui.vtm.measure(this, "fireLoadStarted", function() {
                    var viewableLoadInfos = this._getViewableLoadInfos(viewables);
                    this.fireLoadStarted({
                        viewableLoadInfos: viewableLoadInfos
                    });
                }.bind(this));
            },

            _raiseLoadCompleted: function(succeeded, viewables) {
                sap.ui.vtm.measure(this, "fireLoadCompleted", function() {
                    var viewableLoadInfos = this._getViewableLoadInfos(viewables);
                    var loadedViewables = viewableLoadInfos.filter(function(viewableLoadInfo) {
                        return viewableLoadInfo.getStatus() === sap.ui.vtm.ViewableLoadStatus.Loaded;
                    }).map(function(viewableLoadInfo) {
                        return viewableLoadInfo.getViewable();
                    });
                    this.fireLoadCompleted({
                        succeeded: succeeded,
                        viewableLoadInfos: viewableLoadInfos,
                        loadedViewables: loadedViewables
                    });
                }.bind(this));
            },

            /**
             * Gets the IDs of the the root scene nodes.
             * @public
             * @function
             * @returns {string[]} The root scene node IDs.
             */
            getRootIds: function () {
                if (this._vkNodeHierarchy) {
                    var rootIds = this._vkNodeHierarchy.getChildren();
                    this.addCachedIds(rootIds);
                    return rootIds;
                }
                return [];
            },

            /**
             * Gets the scene node with the specified id.
             * @private
             * @function
             * @param {string} sceneNodeId The scene node id to search for.
             * @returns {sap.ui.vtm.SceneNode} Returns scene node with the specified id.
             */
            _getSceneNode: function (sceneNodeId) {
                if (!this._vkNodeHierarchy) {
                    throw "Scene hierarchy is empty";
                }
                var sceneNode = new sap.ui.vtm.SceneNode({
                    sceneNodeId: sceneNodeId,
                    scene: this
                });
                return sceneNode;
            },

            _getNodeHierarchy: function() {
                return this._vkNodeHierarchy;
            },

            _traverseBranch: function (sceneNodeId, callback, sceneNode, ancestorIds) {
                sceneNode.setSceneNodeId(sceneNodeId);
                if (callback(sceneNode, ancestorIds) === false) {
                    return;
                }
                ancestorIds.push(sceneNodeId);
                if (!sceneNode.getClosed()) {
                    var childIds = this.getChildIds(sceneNodeId);
                    childIds.forEach(function(childId) {
                        this._traverseBranch(childId, callback, sceneNode, ancestorIds);
                    }.bind(this));
                }
                ancestorIds.pop();
            },

            /**
             * Recursively traverses a scene tree branch calling a function on each scene node.
             *
             * Does not traverse the descendants of closed nodes.
             * @function
             * @public
             * @param {string} sceneNodeId The ID of the scene node that represents the root of the branch to traverse.
             * @param {function} callback The function to apply to the traversed scene nodes.<br/>
             *                            The first parameter to the callback function is of type {@link sap.ui.vtm.SceneNode}.<br/>
             *                            The second parameter to the callback function is an array of IDs of ancestors of the scene node being processed.<br/>
             *                            When the function returns <code>false</code>, the descendants of the scene node passed as the parameter are not traversed.
             * @returns {sap.ui.vtm.Scene} <code>this</code for method chaining.
             */
            traverseBranch: function (sceneNodeId, callback) {
                if (!sceneNodeId) {
                    throw "sceneNodeId not defined";
                }
                if (!callback) {
                    throw "callback not defined";
                }
                sap.ui.vtm.measure(this, "traverseBranch (" + sceneNodeId + ")", function() {
                    var sceneNode = this._getSceneNode(sceneNodeId);
                    var ancestorIds = this.getAncestorIds(sceneNodeId);
                    this._traverseBranch(sceneNodeId, callback, sceneNode, ancestorIds);
                    sceneNode._destroy();
                }.bind(this));
                return this;
            },

            /**
             * Recursively traverses the scene tree calling a function on each scene node.
             * @function
             * @public
             * @param {function} callback The function to apply to the traversed scene nodes.
             *                            The first parameter to the callback function is of type {@link sap.ui.vtm.SceneNode}.<br/>
             *                            The second parameter to the callback function is an array of IDs of ancestors of the scene node being processed.<br/>
             *                            When the function returns <code>false</code>, the descendants of the scene node passed as the parameter are not traversed.
             * @returns {sap.ui.vtm.Scene} <code>this</code for method chaining.
             */
            traverseTree: function (callback) {
                if (!callback) {
                    throw "callback not defined";
                }
                if (!this._vkNodeHierarchy) {
                    return this;
                }
                sap.ui.vtm.measure(this, "traverseTree", function() {
                    var rootIds = this.getRootIds();
                    var sceneNode = this._getSceneNode(null);
                    rootIds.forEach(function(sceneNodeId) {
                        this._traverseBranch(sceneNodeId, callback, sceneNode, []);
                    }.bind(this));
                    sceneNode._destroy();
                }.bind(this));
                return this;
            },

            /**
             * Traverses a set of scene nodes specified by scene node ID, calling a function on each scene node.
             * @function
             * @public
             * @param {string|string[]} sceneNodeIds The IDs of the scene nodes to traverse.
             * @param {function} callback The function to apply to the traversed scene nodes.<br/>
             *                            The function takes two parameters.<br/>
             *                            The first parameter to the function is of type {@link sap.ui.vtm.SceneNode}.
             *                            The second parameter to the function is the zero based index of the current scene node in the traversal.
             *                            Traversal stops if the function returns <code>false</code>.
             * @returns {sap.ui.vtm.Scene} <code>this</code for method chaining.
             */
            traverseNodes: function (sceneNodeIds, callback) {
                if (!sceneNodeIds) {
                    throw "sceneNodeIds not defined";
                }
                if (!callback) {
                    throw "callback not defined";
                }
                if (!Array.isArray(sceneNodeIds)) {
                    sceneNodeIds = [sceneNodeIds];
                }
                sap.ui.vtm.measure(this, "traverseNodes (" + sceneNodeIds.join(",") + ")", function() {
                    var sceneNode = this._getSceneNode(null);
                    for (var i = 0; i < sceneNodeIds.length; i++) {
                        sceneNode.setSceneNodeId(sceneNodeIds[i]);
                        if (callback(sceneNode, i) === false) {
                            break;
                        }
                    }
                    sceneNode._destroy();
                }.bind(this));
                return this;
            },

            _handleLoadContentResourcesAsyncCompleted: function(failedItems, viewables) {
                viewables.forEach(function(viewable) {
                    var source = viewable.getSource();
                    var failedItem = sap.ui.vtm.ArrayUtilities.find(failedItems, function (failedItem) {
                        return failedItem.source === source;
                    });
                    var viewableLoadInfo = this._viewableLoadInfosByViewable.get(viewable);
                    if (failedItem) {
                        viewableLoadInfo.setStatus(sap.ui.vtm.ViewableLoadStatus.DownloadFailed);
                        viewableLoadInfo.setErrorCode(failedItem.status);
                        viewableLoadInfo.setErrorText(failedItem.statusText);
                    } else {
                        viewableLoadInfo.setStatus(sap.ui.vtm.ViewableLoadStatus.Downloaded);
                    }
                }.bind(this));

                this._raiseDownloadCompleted(viewables);

                if (this.getDownloadedViewables().length != 0) {
                    this._raiseLoadStarted(viewables);

                    setTimeout(function() {
                        var updateLoadedViewableRootNodeIds = function() {
                            viewables.forEach(function(viewable) {
                                var viewableLoadInfo = this._viewableLoadInfosByViewable.get(viewable);
                                var status = viewableLoadInfo.getStatus();
                                if (status === sap.ui.vtm.ViewableLoadStatus.Loaded && !viewable.getRootNodeIds()) {
                                    var nodeProxy = viewable._getContentResource().getNodeProxy();
                                    if (nodeProxy) {
                                        var nodeId = nodeProxy.getNodeId();
                                        this.addCachedIds(nodeId);
                                        var rootNodeIds = this.getChildIds(nodeId);
                                        viewable.setRootNodeIds(rootNodeIds);
                                    }
                                }
                            }.bind(this));
                        }.bind(this);

                        var handleLoadedSource = function(source) {
                            var viewable = sap.ui.vtm.ArrayUtilities.find(viewables, function(viewable) {
                                return viewable.getSource() === source;
                            });
                            if (viewable) {
                                var viewableLoadInfo = this._viewableLoadInfosByViewable.get(viewable);
                                viewableLoadInfo.setStatus(sap.ui.vtm.ViewableLoadStatus.Loaded);
                            }
                        }.bind(this);

                        var handleFailedSource = function(source) {
                            var viewable = sap.ui.vtm.ArrayUtilities.find(viewables, function(viewable) {
                                return viewable.getSource() === source;
                            });
                            if (viewable) {
                                var viewableLoadInfo = this._viewableLoadInfosByViewable.get(viewable);
                                viewableLoadInfo.setStatus(sap.ui.vtm.ViewableLoadStatus.LoadFailed);
                            }
                        }.bind(this);

                        var sceneLoadedHandler = function(event) {
                            var source = event.getParameter("source");
                            var sceneId = event.getParameter("sceneId");
                            if (sceneId) {
                                handleLoadedSource(source);
                            } else {
                                handleFailedSource(source);
                            }
                        };

                        this._vkGraphicsCore.attachSceneLoadingFinished(sceneLoadedHandler);

                        var downloadedViewables = viewables.filter(function(viewable) {
                            var viewableLoadInfo = this._viewableLoadInfosByViewable.get(viewable);
                            switch (viewableLoadInfo.getStatus()) {
                            case sap.ui.vtm.ViewableLoadStatus.Downloading:
                            case sap.ui.vtm.ViewableLoadStatus.DownloadFailed:
                                return false;
                            default:
                                return true;
                            }
                        }.bind(this));

                        downloadedViewables.forEach(function(downloadedViewable) {
                            var contentResource = downloadedViewable._getContentResource();
                            if (this._rootContentResource.getContentResources().indexOf(contentResource) < 0) {
                                this._rootContentResource.addContentResource(contentResource);
                            }
                        }.bind(this));

                        if (!this._sceneCreated) {
                            var buildingSceneTreeMeasureId = sap.ui.vtm.createMeasureId(this, "Building scene tree");
                            jQuery.sap.measure.start(buildingSceneTreeMeasureId, "", ["sap.ui.vtm"]);

                            this._vkGraphicsCore.buildSceneTreeAsync([this._rootContentResource]).then(function(data) {
                                jQuery.sap.measure.end(buildingSceneTreeMeasureId);
                                this._vkGraphicsCore.detachSceneLoadingFinished(sceneLoadedHandler);
                                // this._vkGraphicsCore.detachEvent("sceneFailed", sceneFailedHandler);
                                this._vkScene = data.scene;
                                this._vkNodeHierarchy = this._vkScene.getDefaultNodeHierarchy();
                                var rootIds = this.getRootIds();
                                this.addCachedIds(rootIds);
                                updateLoadedViewableRootNodeIds();
                                this._sceneCreated = true;
                                this.fireEvent("sceneCreated");
                                this._raiseHierarchyChanged();
                                this._raiseLoadCompleted(true, viewables);
                            }.bind(this))
                            .catch(function(result) {
                                jQuery.sap.measure.end(buildingSceneTreeMeasureId);
                                this._vkGraphicsCore.detachSceneLoadingFinished(sceneLoadedHandler);
                                // this._vkGraphicsCore.detachEvent("sceneFailed", sceneFailedHandler);
                                this._raiseLoadCompleted(false, viewables);
                            }.bind(this)); 
                            
                        } else {
                            var updatingSceneTreeMeasureId = sap.ui.vtm.createMeasureId(this, "Updating scene tree");
                            jQuery.sap.measure.start(updatingSceneTreeMeasureId, "", ["sap.ui.vtm"]);

                            this._vkGraphicsCore.updateSceneTreeAsync(this._vkScene, [this._rootContentResource])
                            .then(function(data) {
                                jQuery.sap.measure.end(updatingSceneTreeMeasureId);
                                this._vkGraphicsCore.detachSceneLoadingFinished(sceneLoadedHandler);
                                // this._vkGraphicsCore.detachEvent("sceneFailed", sceneFailedHandler);
                                updateLoadedViewableRootNodeIds();
                                this._raiseHierarchyChanged();
                                this._raiseLoadCompleted(true, viewables);
                            }.bind(this))
                            .catch(function(result) {
                                jQuery.sap.measure.end(updatingSceneTreeMeasureId);
                                this._vkGraphicsCore.detachSceneLoadingFinished(sceneLoadedHandler);
                                // this._vkGraphicsCore.detachEvent("sceneFailed", sceneFailedHandler);
                                if (result.contentResourcesWithEncryptedVds3) {
                                    result.contentResourcesWithEncryptedVds3.forEach(function(contentResource) {
                                        var source = contentResource.getSource();
                                        handleFailedSource(source);
                                    });
                                }
                                if (result.contentResourcesWithMissingPasswords) {
                                    result.contentResourcesWithMissingPasswords.forEach(function(contentResource) {
                                        var source = contentResource.getSource();
                                        handleFailedSource(source);
                                    });
                                }
                                this._raiseLoadCompleted(false, viewables);
                            }.bind(this));
                        }
                    }.bind(this), 50);
                 }
            },

            _handleLoadContentResourcesAsyncProgress: function (progressEvent, viewables) {
                var source = progressEvent.getParameter("source");
                var downloadedBytes = progressEvent.getParameter("loaded");
                var totalBytes = progressEvent.getParameter("total");
                var viewable = sap.ui.vtm.ArrayUtilities.find(viewables, function (viewable) {
                    return source ===  viewable.getSourceString();
                });
                sap.ui.vtm.measure(this, "fireDownloadProgress", function() {
                    this.fireDownloadProgress({
                        viewable: viewable,
                        downloadedBytes: downloadedBytes,
                        totalBytes: totalBytes
                    });
                }.bind(this));
            },

            /**
             * Load a set of viewables asynchronously.
             * Progress is indicated by the <code>progress</code> event and completion is indicated by the <code>loadComplete</code> event.
             * @function
             * @public
             * @param {sap.ui.vtm.Viewable|sap.ui.vtm.Viewable[]} viewables The set of viewables to load.
             * @fires loadCompleted
             * @fires downloadProgress
             * @returns {sap.ui.vtm.Scene} <code>this</code> for method chaining.
             */
            loadViewablesAsync: function (viewables) {
                if (!viewables) {
                    throw "viewables not specified";
                }
                viewables = sap.ui.vtm.ArrayUtilities.wrap(viewables);
                if (!viewables.length) {
                    throw "viewables is empty";
                }

                viewables.forEach(function(viewable) {
                    var sourceString = viewable.getSourceString();
                    if (!this._viewablesBySource.has(sourceString)) {
                        this._viewablesBySource.set(sourceString, viewable);
                    }
                    var viewableLoadInfo = new sap.ui.vtm.ViewableLoadInfo({
                        viewable: viewable,
                        status: sap.ui.vtm.ViewableLoadStatus.Downloading
                    });
                    this._viewableLoadInfosByViewable.set(viewable, viewableLoadInfo);
                }.bind(this));

                this._raiseDownloadStarted(viewables);

                setTimeout(function() {
                    var sourceNames = viewables.map(function(viewable) {
                        return viewable.getSourceString();
                    });
                    var contentResources = viewables.map(function (viewable) {
                        return viewable._getContentResource();
                    });
                    var downloadingMeasureId = sap.ui.vtm.createMeasureId(this, "Downloading " + sourceNames.join(", "));
                    jQuery.sap.measure.start(downloadingMeasureId, "", ["sap.ui.vtm"]);
                    this._vkGraphicsCore.loadContentResourcesAsync(
                        contentResources,
                        function(failedItems) {
                            jQuery.sap.measure.end(downloadingMeasureId);
                            failedItems = failedItems = failedItems || [];
                            this._handleLoadContentResourcesAsyncCompleted(failedItems, viewables);
                        }.bind(this),
                        function(progressEvent) {
                            this._handleLoadContentResourcesAsyncProgress(progressEvent, viewables);
                        }.bind(this));
                }.bind(this), 50);

                return this;
            },

            /**
             * Gets the set of downloaded viewables.
             * @public
             * @function
             * @returns {sap.ui.vtm.Viewable[]} The set of downloaded viewables.
             */
            getDownloadedViewables: function () {
                var downloadedViewables = [];
                this._viewableLoadInfosByViewable.forEach(function(viewableLoadInfo, viewable) {
                    switch (viewableLoadInfo.getStatus()) {
                    case sap.ui.vtm.ViewableLoadStatus.Downloading:
                    case sap.ui.vtm.ViewableLoadStatus.DownloadFailed:
                        break;
                    default:
                        downloadedViewables.push(viewable);
                        break;
                    }
                });
                return downloadedViewables;
            },

            /**
             * Gets the set of loaded viewables.
             * @public
             * @function
             * @returns {sap.ui.vtm.Viewable[]} The set of loaded viewables.
             */
            getLoadedViewables: function () {
                var loadedViewables = [];
                this._viewableLoadInfosByViewable.forEach(function(viewableLoadInfo, viewable) {
                    if (viewableLoadInfo.getStatus() === sap.ui.vtm.ViewableLoadStatus.Loaded) {
                        loadedViewables.push(viewable);
                    }
                });
                return loadedViewables;
            },

            /**
             * Gets the set of {@link sap.ui.vtm.ViewableLoadInfo} objects that describe the status of each {@link sap.ui.vtm.Viewable} that has been passed to a
             * {@link #loadViewablesAsyc} call made on this {@link sap.ui.vtm.Scene} instance.
             * @public
             * @function
             * @returns {sap.ui.vtm.ViewableLoadInfo[]} The set of {@link sap.ui.vtm.ViewableLoadInfo} objects that describe the status of each {@link sap.ui.vtm.Viewable} that has been passed to a
             * {@link #loadViewablesAsyc} call made on this {@link sap.ui.vtm.Scene} instance.
             */
            getViewableLoadInfos: function() {
                var viewableLoadInfos;
                this._viewableLoadInfosByViewable.forEach(function(viewableLoadInfo, viewable) {
                    viewableLoadInfos.push(viewableLoadInfo);
                });
                return viewableLoadInfos;
            },

            /**
             * Gets the scene node IDs of the ancestors of the specified scene node.
             * The root scene node is the first item in the array and the parent is the last.
             * @function
             * @public
             * @param {string} sceneNodeId The scene node to find the ancestors of.
             * @returns {string[]} The scene node IDs of the ancestors of the scene node.
             */
            getAncestorIds: function (sceneNodeId) {
                if (this._vkNodeHierarchy) {
                    var ancestorIds = this._vkNodeHierarchy.getAncestors(sceneNodeId);
                    this.addCachedIds(ancestorIds);
                    return ancestorIds;
                }
                return [];
            },

            /**
             * Gets the scene node ID of the parent node of the specified scene node or null if the specified scene node is a root scene node.
             * @function
             * @public
             * @param {string} sceneNodeId The scene node to find the parent of.
             * @returns {string|null} The scene node ID of the parent scene node of the specified scene node or null if the specified scene node is a root scene node.
             */
            getParentId: function(sceneNodeId) {
                var ancestors = this.getAncestorIds(sceneNodeId);
                if (ancestors && ancestors.length) {
                    return ancestors[ancestors.length - 1];
                }
                return null;
            },

            /**
             * Gets the scene node IDs of the children of the specified scene node.
             * @function
             * @public
             * @param {string} sceneNodeId The scene node to find the children of.
             * @returns {string[]} The scene node IDs of the children of the specified scene node.
             */
            getChildIds: function(sceneNodeId) {
                if (this._vkNodeHierarchy) {
                    var childIds = this._vkNodeHierarchy.getChildren(sceneNodeId, true);
                    this.addCachedIds(childIds);
                    return childIds;
                }
                return [];
            },

            /**
             * Gets the scene node IDs of the descendants of the specified scene node.
             * @function
             * @public
             * @param {string} sceneNodeId The scene node to find the descendants of.
             * @returns {string[]} The scene node IDs of the descendants of the specified scene node.
             */
            getDescendantIds: function(sceneNodeId) {
                var descendantIds = [];
                sap.ui.vtm.measure(this, "getDescendantIds (" + sceneNodeId + ")", function() {
                    var enumerateDescendantIds = function(sceneNodeId) {
                        var childIds = this.getChildIds(sceneNodeId);
                        childIds.forEach(function(childId) {
                            descendantIds.push(childId);
                            enumerateDescendantIds(childId);
                        });
                    }.bind(this);
                    enumerateDescendantIds(sceneNodeId);
                }.bind(this));
                this.addCachedIds(descendantIds);
                return descendantIds;
            },

            /**
             * Gets the scene node IDs of all the scene nodes in the scene.
             * @function
             * @public
             * @returns {string[]} The scene node IDs of all the scene nodes in the scene.
             */
            getAllIds: function() {
                var rootIds = this.getRootIds();
                var allIds = [];
                rootIds.forEach(function(rootId) {
                    allIds.push(rootId);
                    var descendantIds = this.getDescendantIds(rootId);
                    allIds = allIds.concat(descendantIds);
                }.bind(this));
                this.setCachedIds(allIds);
                return allIds;
            },

            /**
             * Gets set of all scene node IDs in the scene that have been discovered via scene traversal performed by the application.
             * 
             * Accurate population of this value requires application support (whereas {@link #getAllIds} always returns the exact set of all scene nodes in the scene).
             * 
             * Scene node IDs are added to this set as they are discovered through methods the application calls:
             * <ul>
             * <li>{@link #getAllIds}</li>
             * <li>{@link #getRootIds}</li>
             * <li>{@link #getParentIds}</li>
             * <li>{@link #getAncestorIds}</li>
             * <li>{@link #getChildIds}</li>
             * <li>{@link #getDescendantIds}</li>
             * </ul>
             * 
             * The methods above are also used by the following methods:
             * <ul>
             * <li>{@link #traverseTree}</li>
             * <li>{@link #traverseBranch}</li>
             * </ul>
             * 
             * All of the scene nodes that have been traversed by these traversal methods will be included in the cached set.
             * If during a call to {@link #traverseTree} or {@link #traverseBranch} the application stops traversal of a particular branch of the scene tree
             * by returning <code>false</code> in the callback for a particular scene node, the application can call {@link #getDescendantIds} for that scene node
             * to ensure that all the scene node IDs for the descendants of that scene node are included in the set of cached IDs.
             * 
             * Scene nodes are also added/removed from the to the cached set as required when the following methods are called:
             * <li>{@link #createNode}</li>
             * <li>{@link #cloneNode}</li>
             * <li>{@link #deleteNode}</li>
             * </ul>
             * 
             * If this method is called before any scene traversal has occurred, it populates the set of cached scene node IDs using {@link #getAllIds}.
             * @function
             * @public
             * @returns {string[]} The set of all scene node IDs in the scene that have been discovered via scene traversal performed by the application.
             */
            getCachedIds: function() {
                if (!this._cachedIds || !this._cachedIds.length) {
                    this._cachedIds = this.getAllIds();
                }
                return this._cachedIds;
            },

            /**
             * Sets or clears the cached copy of all the scene node IDs in the scene used by {@link #getCachedIds}.
             * @function
             * @private
             * @param {string[]|null} sceneNodeIds If non-null specifies the set of all scene node IDs in the scene, otherwise clears the cached value.
             * @returns {sap.ui.vtm.Scene} <code>this</code> for method chaining.
             */
            setCachedIds: function(sceneNodeIds) {
                this._cachedIds = sceneNodeIds;
                return this;
            },

            /**
             * Adds a set of scene node IDs to the set of IDs returned by {@link #getCachedIds}.
             * @function
             * @private
             * @param {string[]|string} sceneNodeIds Specifies the scene node ID or set of scene node IDs in the scene to add to the set of IDs returned by {@link #getCachedIds}.
             * @returns {sap.ui.vtm.Scene} <code>this</code> for method chaining.
             */
            addCachedIds: function(sceneNodeIds) {
                if (!this._cachedIds) {
                    this._cachedIds = [];
                }
                sceneNodeIds = sap.ui.vtm.ArrayUtilities.wrap(sceneNodeIds);
                sceneNodeIds.forEach(function(sceneNodeId) {
                    if (this._cachedIds.indexOf(sceneNodeId) === -1) {
                        this._cachedIds.push(sceneNodeId);
                    }
                }.bind(this));
                return this;
            },

            /**
             * Adds a set of scene node IDs to the set of IDs returned by {@link #getCachedIds}.
             * @function
             * @private
             * @param {string[]|string} sceneNodeIds Specifies the scene node ID or set of scene node IDs to add to the set of IDs returned by {@link #getCachedIds}.
             * @returns {sap.ui.vtm.Scene} <code>this</code> for method chaining.
             */
            removeCachedIds: function(sceneNodeIds) {
                if (this._cachedIds) {
                    sceneNodeIds = sap.ui.vtm.ArrayUtilities.wrap(sceneNodeIds);
                    this._cachedIds = this._cachedIds.filter(function(cachedId) {
                        return sceneNodeIds.indexOf(cachedId) === -1;
                    });
                }
                return this;
            },

            /**
             * Creates a scene node.
             * @function
             * @public
             * @param {string} parentNodeId       The ID of the node that will be the parent of the created node.
             *                                    If <code>null</code> the newly created node is a top level node.
             * @param {string} insertBeforeNodeId The created node is added before this specified node.
             *                                    If <code>null</code> the newly created node is added at the end of the parent's list of nodes.
             * @param {string} name               The name of the new node.
             * @returns {string} The scene node ID of the created node.
             */
            createNode: function(parentNodeId, insertBeforeNodeId, name) {
                var createdSceneNodeId = this._vkNodeHierarchy.createNode(parentNodeId, name, insertBeforeNodeId);
                this.addCachedIds(createdSceneNodeId);
                this._raiseHierarchyChanged();
                return createdSceneNodeId;
            },

            /**
             * Clones a scene node.
             * @function
             * @public
             * @param {string} nodeIdToClone      The ID of the node to clone.
             * @param {string} parentNodeId       The ID of the node that will be the parent of the created node.
             *                                    If <code>null</code> the newly created node is a top level node.
             * @param {string} insertBeforeNodeId The created node is added before this specified node.
             *                                    If <code>null</code> the newly created node is added at the end of the parent's list of nodes.
             * @param {string} name               The name of the new node.
             * @param {boolean?} recursive         If <code>true</code>, the descendants of the scene node will also be cloned. Defaults to <code>true</code>.
             * @returns {string} The scene node ID of the created node.
             */
            cloneNode: function(nodeIdToClone, parentNodeId, insertBeforeNodeId, name, recursive) {
                var createdSceneNodeId = this._vkNodeHierarchy.createNodeCopy(nodeIdToClone, parentNodeId, name, insertBeforeNodeId);
                recursive = recursive === undefined || recursive === null ? true : recursive;
                this.addCachedIds(createdSceneNodeId);
                if (!recursive) {
                    var childIds = this.getChildIds(createdSceneNodeId);
                    childIds.forEach(function(childId) {
                        this.deleteNode(childId);
                    }.bind(this));
                } else {
                    this.addCachedIds(this.getDescendantIds(createdSceneNodeId));
                }
                this._raiseHierarchyChanged();
                return createdSceneNodeId;
            },

            /**
             * Deletes a node from the scene.
             * @function
             * @public
             * @param {string} nodeId The ID of the node to delete.
             * @returns {sap.ui.vtm.Scene} <code>this</code> for method chaining.
             */
            deleteNode: function(nodeId) {
                this.removeCachedIds(nodeId);
                this.removeCachedIds(this.getDescendantIds(nodeId));
                this._vkNodeHierarchy.removeNode(nodeId);
                this._raiseHierarchyChanged();
                return this;
            },

            /**
             * Gets the {@link sap.ui.vtm.Vtm} instance that owns this scene.
             * @public
             * @function
             * @returns {sap.ui.vtm.Vtm} The {@link sap.ui.vtm.Vtm} instance that owns this scene.
             */
            getVtm: function() {
                return this.getParent();
            }
        });

        return Scene;
    });
}; // end of sap/ui/vtm/Scene.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.SelectColumnsDialog') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.SelectColumnsDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.TableSelectDialog'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/SelectColumnsDialog",[
        "jquery.sap.global",
        "./library",
        "./ColumnType",
        "sap/ui/core/Control",
        "sap/m/TableSelectDialog",
        "./Progress",
        "./InternalColumns"
    ],
    function(
        jQuery,
        SapUiVtmLibrary,
        SapUiVtmColumnType,
        SapUiCoreControl,
        SapMTableSelectDialog,
        SapUiVtmProgress,
        SapUiVtmInternalColumns) {

        "use strict";

        /**
         * Constructor for a new SelectColumnsDialog.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @public
         * @class
         * A dialog used to select the columns to display in a {@link sap.ui.vtm.Tree}.
         * @author SAP SE
         * @version 1.50.3
         * @name sap.ui.vtm.SelectColumnsDialog
         * @extends sap.ui.core.Control
         */
        var SelectColumnsDialog = SapUiCoreControl.extend("sap.ui.vtm.SelectColumnsDialog",  /** @lends sap.ui.vtm.SelectColumnsDialog.prototype */ {
            metadata: {
                properties: {
                    /**
                     * The {@link sap.ui.vtm.Tree} that column selection is being performed for.
                     */
                    tree: {
                        type: "object"
                    },

                    /**
                     * The set of columns that should be shown in the dialog that may be selected for display.
                     */
                    selectableColumns: {
                        type: "sap.ui.vtm.Column[]"
                    }
                }
            },

            init: function () {
                this._oDialog = this._createDialog();
            },

            renderer: function (oRM, oControl) {},

            _createDialog: function() {
                var rb = sap.ui.vtm.getResourceBundle();

                var selectColumnsDialog = new sap.m.TableSelectDialog(this.getId() + '-Dialog', {
                    multiSelect: true,
                    columns: [
                        new sap.m.Column({ visible: false }),
                        new sap.m.Column({ visible: false }),
                        new sap.m.Column({ header: new sap.m.Label({ text: rb.getText("COLUMNNAME_NAME") }) })
                    ],
                    noDataText: rb.getText("SELECTCOLUMNSDIALOG_NOCOLUMNSAVAILABLE")
                });

                var itemTemplate = new sap.m.ColumnListItem({
                    type: "Active",
                    unread: false,
                    cells: [
                        new sap.m.Label({ text: "{mProperties/type}" }),
                        new sap.m.Label({ text: "{mProperties/descriptor}" }),
                        new sap.m.Label({ text: "{mProperties/label}" })
                    ]
                });

                selectColumnsDialog.bindItems({
                    path: "/items",
                    template: itemTemplate
                });

                return selectColumnsDialog;
            },

            /**
             * Opens the dialog.
             * The dialog applies the updated set of columns to the tree if confirmed.
             * @public
             * @method
             * @returns {sap.ui.vtm.SelectColumnsDialog} <code>this</code> for method chaining.
             */
            open: function() {
                var tree = this.getTree();
                if (!tree) {
                    throw "The tree property has not been set";
                }

                var selectableColumns = this.getSelectableColumns();
                if (!selectableColumns) {
                    throw "The selectableColumns property has not been set";
                }
                selectableColumns = selectableColumns.slice();

                var selectColumnsDialog = this._oDialog;
                var rb = sap.ui.vtm.getResourceBundle();

                var debugMode = jQuery.sap.debug();
                if (debugMode) {
                    var existingInternalColumnIds = selectableColumns
                        .filter(function(column) { return column.type === sap.ui.vtm.ColumnType.Internal; })
                        .map(function(column) { return column.id; });

                    var internalDataColumns = [
                        sap.ui.vtm.InternalColumns.createTreeItemIdColumn(),
                        sap.ui.vtm.InternalColumns.createAbsoluteMatrixColumn(),
                        sap.ui.vtm.InternalColumns.createRelativeMatrixColumn(),
                        sap.ui.vtm.InternalColumns.createSceneNodeIdsColumn(),
                        sap.ui.vtm.InternalColumns.createOpacityColumn(),
                        sap.ui.vtm.InternalColumns.createHighlightColorColumn()
                    ];

                    internalDataColumns.forEach(function(column) {
                        if (existingInternalColumnIds.indexOf(column.id) == -1) {
                            selectableColumns.push(column);
                        }
                    });
                }

                var columnNameSortFunc = function(columnA, columnB) {
                    return columnA.getLabel().localeCompare(columnB.getLabel());
                };
                selectableColumns.sort(columnNameSortFunc);

                var createDescriptor = function(columnType, columnDescriptor) {
                    return JSON.stringify({
                        type: columnType,
                        descriptor: columnDescriptor
                    });
                };

                var selectableColumnsByDescriptor = new Map();
                selectableColumns.forEach(function(column){
                    var descriptor = createDescriptor(column.getType(), column.getDescriptor());
                    selectableColumnsByDescriptor.set(descriptor, column);
                });

                var handleSearch = function (event) {
                    var searchString = event.getParameter("value");
                    var itemsBinding = event.getParameter("itemsBinding");
                    if (searchString !== undefined && searchString.length > 0) {
                        var filters = [
                            new sap.ui.model.Filter("mProperties/label", sap.ui.model.FilterOperator.Contains, searchString)
                        ];
                        itemsBinding.filter(new sap.ui.model.Filter(filters, false), "Application");
                    } else {
                        itemsBinding.filter([]);
                    }
                };

                var handleModelContextChange = function (event) {
                    var existingDescriptors = tree.getDataColumns().map(function(column) {
                        return createDescriptor(column.getType(), column.getDescriptor());
                    });
                    var items = selectColumnsDialog.getItems();
                    items.forEach(function(item) {
                        var cells = item.getCells();
                        var descriptorString = createDescriptor(cells[0].getText(), cells[1].getText());
                        var selected = existingDescriptors.indexOf(descriptorString) != -1;
                        item.setSelected(selected);
                    });
                };

                var handleConfirm, handleCancel;

                var attachEvents = function(tree) {
                    selectColumnsDialog.attachConfirm(tree, handleConfirm);
                    selectColumnsDialog.attachCancel(tree, handleCancel);
                    selectColumnsDialog.attachSearch(tree, handleSearch);
                    selectColumnsDialog.attachModelContextChange(tree, handleModelContextChange);
                };

                var detachEvents = function () {
                    selectColumnsDialog.detachConfirm(handleConfirm);
                    selectColumnsDialog.detachCancel(handleCancel);
                    selectColumnsDialog.detachSearch(handleSearch);
                    selectColumnsDialog.detachModelContextChange(handleModelContextChange);
                };

                handleConfirm = function (event) {
                    detachEvents();

                    var selectedItems = event.getParameter("selectedItems");
                    var existingDescriptors = tree.getDataColumns().map(function(column) {
                        return createDescriptor(column.getType(), column.getDescriptor());
                    });
                    var selectedDescriptors = selectedItems.map(function(selectedItem) {
                        var cells = selectedItem.getCells();
                        return createDescriptor(cells[0].getText(), cells[1].getText());
                    });
                    var addedDescriptors = selectedDescriptors.filter(function(selectedDescriptor) {
                        return existingDescriptors.indexOf(selectedDescriptor) === -1;
                    });
                    var remainingDescriptors = existingDescriptors.filter(function(existingDescriptor) {
                        return selectedDescriptors.indexOf(existingDescriptor) !== -1;
                    });
                    var remainingColumns = remainingDescriptors.map(function(descriptor) {
                        return selectableColumnsByDescriptor.get(descriptor);
                    });
                    var addedColumns = addedDescriptors.map(function(descriptor) {
                        return selectableColumnsByDescriptor.get(descriptor);
                    });
                    addedColumns.sort(columnNameSortFunc);
                    var columns = remainingColumns.concat(addedColumns);
                    tree.setDataColumns(columns);
                 };

                 handleCancel  = function (event) {
                     detachEvents();
                 };

                 var treeTitle = tree.getPanel().getTitle();
                 var title = rb.getText("SELECTCOLUMNSDIALOG_SELECT_0_COLUMNS", [treeTitle]);

                 selectColumnsDialog.setTitle(title);

                 attachEvents(tree);

                 var columnModel = new sap.ui.model.json.JSONModel();
                 columnModel.setData({ items: selectableColumns });

                 selectColumnsDialog.setModel(columnModel);
                 selectColumnsDialog.open();
                 return this;
            }
        });

        return SelectColumnsDialog;
    });

}; // end of sap/ui/vtm/SelectColumnsDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Text') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.Text'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.TextRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Text",
    ["jquery.sap.global", "sap/m/Text", "sap/m/TextRenderer", "./TextColor"],
    function (jQuery, SapMText, SapMTextRenderer, SapUiVtmTextColor) {

        "use strict";

        /**
         * Constructor for a new Text.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.Text
         * @private
         * @class
         * Adds an <code>textColor</code> property to {@link sap.m.Text}
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.m.Text} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.m.Text} instance.
         * @extends sap.m.Text
         */
        sap.ui.vtm.Text = SapMText.extend("sap.ui.vtm.Text", /** @lends sap.ui.vtm.Text.prototype */ {
            metadata: {
                properties: {
                    textColor: {
                        type: "sap.ui.vtm.TextColor",
                        defaultValue: SapUiVtmTextColor.Default,
                        bindable: true
                    }
                }
            },

            renderer: function (oRM, oControl) {
                var textColor = oControl.getTextColor();
                switch (textColor) {
                case SapUiVtmTextColor.Default:
                    break;
                case SapUiVtmTextColor.Grey:
                case SapUiVtmTextColor.Gray:
                    oRM.addClass("sapUiVtmText_TextColor_Gray");
                    break;
                default:
                    throw "Unexpected text color: '" + textColor + "'.";
                }
                SapMTextRenderer.render(oRM, oControl);
            }
        });

        return sap.ui.vtm.Text;
    });
}; // end of sap/ui/vtm/Text.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Tree') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.Tree'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.TextView'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.CheckEye'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Tree",[
        "jquery.sap.global",
        "sap/ui/core/Control",
        "sap/ui/table/TreeTable",
        "./SelectionMode",
        "./InternalColumnDescriptor",
        "./ArrayUtilities",
        "./MatrixUtilities",
        "./TreeItemUtilities",
        "./Column",
        "./Lookup",
        "./library",
        "./Text",
        "./ColumnType",
        "./InternalColumns",
        "sap/ui/model/json/JSONModel",
        "sap/ui/commons/TextView",
        "sap/ui/core/IconPool",
        "sap/ui/core/Icon",
        "sap/ui/layout/HorizontalLayout",
        "sap/ui/vk/CheckEye"
    ],
    function (
        jQuery,
        SapUiCoreControl,
        SapUiTableTreeTable,
        SapUiVtmSelectionMode,
        SapUiVtmInternalColumnDescriptor,
        SapUiVtmArrayUtilities,
        SapUiVtmMatrixUtilities,
        SapUiVtmTreeItemUtilities,
        SapUiVtmColumn,
        SapUiVtmLookup,
        SapUiVtmLibrary,
        SapUiVtmText,
        SapUiVtmColumnType,
        SapUiVtmInternalColumns,
        SapUiModelJsonJSONModel,
        SapUiCommonsTextView,
        SapUiCoreIconPool,
        SapUiCoreIcon,
        SapUiLayoutHorizontalLayout,
        SapUiVkCheckEye
        ) {

        "use strict";

        /**
         * This class is not intended to be instantiated directly by application code.
         * A {@link sap.ui.vtm.Tree} object is created when a {@link sap.ui.vtm.Panel} object is instantiated.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @public
         * @class
         * A control that contains a tree and associated data columns and provides helper methods for tree manipulation.
         * <br/>
         * Call {@link #setRootItems} to provide a tree model.<br/>
         * Call {@link #updateCollections} after making changes to the tree hierarchy.<br/>
         * Call {@link #updateModel} after making changes to the tree model (either changes to the the tree hierarchy or changes to properties of tree items).<br/>
         *
         * Items in the tree are plain JavaScript objects that have the following set of properties:
         * <ul>
         * <li><code>id</code> - The unique id for the tree item. This is the only required field in the tree item object.</li>
         * <li><code>name</code> - The tree item name.</li>
         * <li><code>iconUrl</code> - The URL string for the icon to show in the "tree" column.</li>
         * <li><code>iconColor</code> - The color for the icon to show in the "tree" column.</li>
         * <li><code>iconTooltip</code> - A tooltip for the icon to show in the "tree" column.</li>
         * <li><code>absoluteMatrix</code> - An array of 13 numbers in ISO 10303-42 format representing an absolute transformation matrix.</li>
         * <li><code>relativeMatrix</code> - An array of 13 numbers in ISO 10303-42 format representing a relative transformation matrix.</li>
         * <li><code>includedChildren</code> - An array of tree items containing the children of this tree item that can be displayed in the tree.</li>
         * <li><code>excludedChildren</code> - An array of tree items containing the children of this tree item that are not displayed in the tree.</li>
         * <li><code>metadata</code> -  A plain JavaScript object map containing metadata values for the tree item.<br/>
         * Keys are JSON strings that can be parsed using JSON.parse() to get an object with category and field string properties.<br/>
         * Values can be of the following types: <code>string, <code>string[]</code>, <code>number</code>, <code>number[]</code>, <code>boolean</code>, <code>boolean[]</code>, <code>object</code>, <code>object[]</code>.</li>
         * <li><code>identifiers</code> -  A plain JavaScript object map containing VE9 identifier values for the tree item.<br/>
         * Keys are JSON strings that can be parsed using JSON.parse() to get an object with source and type string properties.<br/>
         * Values can be of the following types: string, string[].<br/>
         * Each value string is a JSON string that can be parsed using JSON.parse to get an array of name/value pairs.<br/>
         * The value in each name/value pair is optional.</li>
         * <li><code>appData</code> - A plain JavaScript object map containing application data values for the tree item.<br/>
         * Keys are application defined strings.<br/>
         * Values can be of the following types: <code>string, <code>string[]</code>, <code>number</code>, <code>number[]</code>, <code>boolean</code>, <code>boolean[]</code>, <code>object</code>, <code>object[]</code>.</li>
         * <li><code>textColor</code> - A {@link sap.ui.vtm.TextColor} value that specifies the color of the text for the tree item in the Name data column (defaults to {@link sap.ui.vtm.TextColor.Default}).</li>
         * <li><code>sceneNodeIds</code> - A string or array of strings containing the IDs of scene nodes to associate with this tree item.</li>
         * <li><code>visibility</code> - Used to determine visibility of associated scene nodes and control a visibility icon shown in the {@link sap.ui.vtm.InternalColumnDescriptor.Visibility} column.<br/>
         * When <code>true</code> associated scene nodes should be visible in the viewport (when their visibility is not overridden).<br/>
         * When <code>false</code> associated scene nodes should not be visible in the viewport  (when their visibility is not overridden).<br/>
         * When <code>null</code> or <code>undefined</code> no visibility icon is shown for the tree item and associated scene nodes should not be visible in the viewport (when their visibility is not overridden).</li>
         * <li><code>opacity</code> - A numeric value between 0 and 1 (inclusive) that specifies the opacity to apply to associated scene nodes (when their opacity is not overridden).</li>
         * <li><code>highlightColor</code> - A sap.ui.core.CSSColor that specifies a highlight color to apply to associated scene nodes (when their highlight color is not overridden). The alpha component specifies the blend ratio between the highlight color and the scene node color.</li>
         * <li><code>messages</code> A string that can be parsed using JSON.parse() to produce an array of objects that can be used to construct {@link sap.ui.core.Message} objects.<br/>
         * Refer to the documentation for the <code>mSettings</code> parameter of the {@link sap.ui.core.Message} constructor for valid values.</li>
         * <li><code>messageStatusIconUrl</code> The URL of the icon to display in the message status column. If an extension implementing {@link sap.ui.vtm.interfaces.IMessageStatusCalculationExtension} is being used, only that extension should set values for this field.</li>
         * <li><code>messageStatusIconColor</code> The {@link sap.ui.core.CSSColor} color of the icon to display in the message status column.  If an extension implementing {@link sap.ui.vtm.interfaces.IMessageStatusCalculationExtension} is being used, only that extension should set values for this field.</li>
         * <li><code>messageStatusIconTooltip</code> The tooltip for the icon in the message status column.  If an extension implementing {@link sap.ui.vtm.interfaces.IMessageStatusCalculationExtension} is being used, only that extension should set values for this field.</li>
         * </ul>
         * 
         * The <code>sceneNodeIds</code>, <code>visibility</code>, <code>opacity</code> and <code>highlightColor</code> properties are used by the extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} to determine the display state of scene nodes shown in the {@link sap.ui.vtm.Viewport} associated with the {@link sap.ui.vtm.Tree}.
         *  
         * Example:
         * <pre><code>{
         *      id: jQuery.sap.uid(),
         *      name: "Tree item name",
         *      iconUrl: "sap-icon://tree",
         *      iconTooltip: "Group"
         *      absoluteMatrix: [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
         *      relativeMatrix: [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
         *      includedChildren: [],
         *      metadata:{
         *         '{"category":"SAP","field":"MATERIAL"}': ["mat1", "mat2"]]
         *      },
         *      identifiers: {
         *          '{"source":"SAP","type":"VE_COMPONENT"}': '[{"name":"ID", "value":"_moto_x_asm"},{"name":"version", "value": "00"},{"name": "timestamp", "value":"2016-05-18 03:44:53.93"}]',
         *          '{"source":"SAP","type":"MATERIAL"}': ['[{"name":"ID", "value":"mat1"}]', '[{"name":"ID", "value":"mat2"}]']
         *      },
         *      appData:{
         *          "bomId: "bom1",
         *          "bomItemId: "bomItem1",
         *      },
         *      textColor: sap.ui.vtm.TextColor.Gray,
         *      sceneNodeIds: ["iffffffff01021520", "iffffffff01021528"],
         *      visibility: true,
         *      opacity: 0.3,
         *      highlightColor: "rgba(0,255,0,0.8)"
         *      messages: '[{"level":"Error","text":"some error"},{"level":"Error","text":"Another error"},{"level":"Warning","A warning"}]',
         *      messageStatusIconUrl: "sap-icon://error",
         *      messageStatusIconColor: "red",
         *      messageStatusIconTooltip: "Error"
         *  }</code></pre>
         *  
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId id for the new {@link sap.ui.vtm.Tree}.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.Tree}.
         * @name sap.ui.vtm.Tree
         * @extends sap.ui.core.Control
         */
        var Tree = SapUiCoreControl.extend("sap.ui.vtm.Tree", /** @lends sap.ui.vtm.Tree.prototype */ {
            metadata: {
                properties: {
                    /**
                     * The tree selection mode.
                     */
                    selectionMode: {type: "sap.ui.vtm.SelectionMode", defaultValue : "Single" }
                },
                aggregations: {
                    _treeTable: {
                        type: "sap.ui.table.TreeTable",
                        multiple: false,
                        visibility: "hidden"
                    },
                    /**
                     * A set of controls such as toolbars to show above the tree.
                     */
                    headerControls: {
                        type: "sap.ui.core.Control",
                        multiple: true
                    }
                },
                events: {
                    /**
                     * Raised when a tree item drag is initiated.
                     * To prevent a drag from being initiated call preventDefault() on the event.
                     */
                    dragStart: {
                        parameters: {
                            /**
                             * The tree item that was dragged.
                             */
                            dragItem: { type: "object" },
                            /**
                             * The tree of the tree item that was dragged.
                             */
                            dragTree: { type: "sap.ui.vtm.Tree" }
                        },
                        allowPreventDefault: true
                    },
                    /**
                     * Raised when a tree item is dragged over a tree item or an unpopulated row in a tree.
                     * To allow a drop to occur call preventDefault() on the event.
                     */
                    dragOver: {
                        parameters: {
                            /**
                             * The tree item that was dragged.
                             */
                            dragItem: { type: "object" },
                            /**
                             * The tree of the tree item that was dragged.
                             */
                            dragTree: { type: "sap.ui.vtm.Tree" },
                            /**
                             * The tree item being dragged over or null if the tree item is being dragged over an unpopulated row.
                             */
                            dragOverItem: { type: "object" },
                            /**
                             * The tree being dragged over.
                             */
                            dragOverTree: { type: "sap.ui.vtm.Tree" }
                        },
                        allowPreventDefault: true
                    },
                    /**
                     * Raised when a tree item is dropped on a tree item or an unpopulated row in a tree.
                     * A drop cannot occur unless preventDefault() is called on the sap.ui.base.Event object in the preceding dragOver event.
                     */
                    drop: {
                        parameters: {
                            /**
                             * The tree item that was dragged.
                             */
                            dragItem: { type: "object" },
                            /**
                             * The tree of the tree item that was dragged.
                             */
                            dragTree: { type: "sap.ui.vtm.Tree" },
                            /**
                             * The tree item that the drop occurred on or null if the item was not dropped on a tree item.
                             */
                            dropItem: { type: "object" },
                            /**
                             * The tree that the drop occurred on.
                             */
                            dropTree: { type: "sap.ui.vtm.Tree" }
                        }
                    },
                    /**
                     * Raised when the set of selected tree items for a tree changes.
                     */
                    selectionChanged: {
                        parameters: {
                            /**
                             * The tree items that were added to the selection set for the tree.
                             */
                            addedItems: { type: "object[]" },
                            /**
                             * The tree items that were removed from the selection set for the tree.
                             */
                            removedItems: { type: "object[]" },
                            /**
                             * Indicates that the event was fired due to an explicit user interaction
                             */
                            userInteraction: {type: "boolean" }
                        }
                    },
                    /**
                     * Raised when the icon in the visibility column header is clicked.
                     */
                    visibilityHeaderIconClicked: {
                        parameters: {
                            /**
                             * The new visibility state of the tree item.
                             */
                            visibility: {type:  "boolean" },
                            /**
                             * The visibility header icon control that was clicked.
                             */
                            control: {type: "sap.ui.core.Control"}
                        }
                    },
                    /**
                     * Raised when an icon in the visibility column is clicked.
                     */
                    visibilityIconClicked: {
                        parameters: {
                            /**
                             * The tree item whose visibility icon was clicked.
                             */
                            item: {type: "object"},
                            /**
                             * The new visibility state of the tree item.
                             */
                            visibility: {type:  "boolean" },
                            /**
                             * The visibility icon control that was clicked.
                             */
                            control: {type: "sap.ui.core.Control"}
                        }
                    },
                    /**
                     * Raised when a tree item entry is expanded or collapsed.
                     */
                    expandedChanged: {
                        parameters: {
                            /**
                             * The tree item associated with the row that was expanded or collapsed.
                             */
                            item: {type: "object"},
                            /**
                             * If <code>true</code>, the row was expanded, otherwise it was collapsed.
                             */
                            expanded: {type: "boolean"},
                            /**
                             * Indicates that the event was fired due to the user clicking an expander.
                             */
                            userInteraction: {type: "boolean"}
                        }
                    },
                    /**
                     * Raised before the model is updated.
                     */
                    beforeModelUpdated: {},
                    /**
                     * Raised after the model has been updated.
                     */
                    modelUpdated: {},
                    /**
                     * Raised when a tree item message status icon is clicked.
                     */
                    messageStatusIconClicked: {
                        parameters: {
                            /**
                             * The associated tree item.
                             */
                            items: {type: "object"},
                            
                            /**
                             * The message status icon control that was clicked.
                             */
                            control: {type: "sap.ui.core.Control"}
                        }
                    },
                    /**
                     * Raised when a tree item message status icon is clicked.
                     */
                    messageStatusHeaderIconClicked: {
                        /**
                         * The message status header icon control that was clicked.
                         */
                        control: {type: "sap.ui.core.Control"}
                    },
                    /**
                     * Raised when the tree hierarchy (the set of parent child relationships) changes.
                     */
                    hierarchyChanged: {}
                }
            },

            constructor: function (sId, mSettings) {
                SapUiCoreControl.apply(this, arguments);
                this._rb = sap.ui.vtm.getResourceBundle();
                this._treeCollections = new sap.ui.vtm.TreeCollections();

                var treeTable = new sap.ui.table.TreeTable({
                    enableColumnReordering: true,
                    selectionMode: sap.ui.table.SelectionMode.Single,
                    showNoData: false,
                    visibleRowCountMode: sap.ui.table.VisibleRowCountMode.Auto,
                    minAutoRowCount: 4,
                    selectionBehavior: sap.ui.table.SelectionBehavior.RowOnly
                });

                this.setAggregation("_treeTable", treeTable);
                treeTable.allowTextSelection(false);

                var treeColumn = sap.ui.vtm.InternalColumns.createTreeColumn();
                var visibilityColumn = sap.ui.vtm.InternalColumns.createVisibilityColumn();
                var messageStatusColumn = sap.ui.vtm.InternalColumns.createMessageStatusColumn();

                var visibilityHeaderIcon = visibilityColumn.getLabelControl();
                visibilityHeaderIcon.attachChange(function(event) {
                    var visibility = event.getSource().getChecked();
                    this.fireVisibilityHeaderIconClicked({
                        visibility: visibility,
                        control: visibilityHeaderIcon
                    });
                }.bind(this));

                var messageStatusHeaderIcon = messageStatusColumn.getLabelControl();
                messageStatusHeaderIcon.attachPress(function(event) {
                    this.fireMessageStatusHeaderIconClicked({
                        control: messageStatusHeaderIcon
                    });
                }.bind(this));
                
                messageStatusHeaderIcon.addEventDelegate({
                    onfocusin: function(event) {
                        messageStatusHeaderIcon.getDomRef().blur();
                    }
                }, messageStatusHeaderIcon);

                this._fixedColumns = [
                    treeColumn,
                    visibilityColumn,
                    messageStatusColumn
                ];
                this._setColumns(this._fixedColumns);
                this.setRootItems([]);
                this.updateCollections(false);
                this._updateModel();

                treeTable.attachToggleOpenState(this._handleToggleOpenState.bind(this));

                var tapControl = function(control, event) {
                    if (control.getVisible && !control.getVisible() ||
                        control.getEnabled && !control.getEnabled()) {
                        return false;
                    }
                    if (control.ontap) {
                        control.ontap(event);
                    } else if (control.userToggle) {
                        control.userToggle(event);
                    } else if (control.onclick) {
                        control.onclick(event);
                    }
                    return true;
                };

                var handleSpacePress = function(oEvent) {
                    var focusedInfo = sap.ui.table.TableUtils.getFocusedItemInfo(treeTable);
                    var selectionCheckboxColumnShown = this.getSelectionMode() === sap.ui.vtm.SelectionMode.MultiToggle;
                    var columnIndex = selectionCheckboxColumnShown ? focusedInfo.cellInRow - 1 : focusedInfo.cellInRow;
                    var columns = treeTable.getColumns();
                    var column = columns[columnIndex];
                    if (!column) {
                        return;
                    }
                    var columnDefinition = column.data("definition");
                    var columnType = columnDefinition.getType();
                    var columnDescriptor = columnDefinition.getDescriptor();
                    var isHeaderRow = focusedInfo.row === 0;

                    if (isHeaderRow)  {
                        if (columnType === sap.ui.vtm.ColumnType.Internal && columnDescriptor === sap.ui.vtm.InternalColumnDescriptor.Visibility) {
                            var checkEye = column.getLabel();
                            tapControl(checkEye, oEvent);
                        }
                    } else if (columnType === sap.ui.vtm.ColumnType.Internal) {
                        var control = treeTable.getRows()[focusedInfo.row - 1].getCells()[columnIndex];
                        switch (columnDescriptor) {
                        case sap.ui.vtm.InternalColumnDescriptor.Tree:
                            // Prevent tree expansion behavior when space is pressed when a cell in the tree column has focus
                            sap.ui.table.TableUtils.toggleRowSelection(treeTable, oEvent.target);
                            oEvent.preventDefault();
                            oEvent.stopImmediatePropagation();
                            break;
                        case sap.ui.vtm.InternalColumnDescriptor.Visibility:
                        case sap.ui.vtm.InternalColumnDescriptor.MessageStatus:
                            tapControl(control, oEvent);
                            // Prevent row selection
                            oEvent.preventDefault();
                            oEvent.stopImmediatePropagation();
                            break;
                        default:
                            break;
                        }
                    }
                }.bind(this);

                treeTable.attachBrowserEvent("keyup", function(oEvent) {
                    if (oEvent.which === jQuery.sap.KeyCodes.SPACE) {
                        handleSpacePress(oEvent);
                    }
                });

                treeTable.attachRowSelectionChange(function (event) {
                    var _userInteraction = event.getParameter("userInteraction");
                    var changedRowIndices = event.getParameter("rowIndices");
                    var selectedRowIndices = treeTable.getSelectedIndices();
                    var addedItemIndices = [];
                    var removedItemIndices = [];
                    changedRowIndices.forEach(function(changedRowIndex) {
                        if (selectedRowIndices.indexOf(changedRowIndex) != -1) {
                            addedItemIndices.push(changedRowIndex);
                        } else {
                            removedItemIndices.push(changedRowIndex);
                        }
                    });

                    var selectionChangedParameters = {
                        addedItems: this._getTreeItemsFromRowIndices(addedItemIndices),
                        removedItems: this._getTreeItemsFromRowIndices(removedItemIndices),
                        userInteraction: _userInteraction
                    };

                    sap.ui.vtm.measure(this, "fireSelectionChanged", function() {
                        this.fireSelectionChanged(selectionChangedParameters);
                    }.bind(this));

                    if (_userInteraction) {
                        this.fireEvent("vtmInternalSetTreeSelectionComplete");
                    }
                }.bind(this));
            },

            renderer: function (oRM, oControl) {
                oRM.write("<div");
                oRM.writeControlData(oControl);
                oRM.addClass("sapUiVtmTree");
                oRM.writeStyles();
                oRM.writeClasses();
                oRM.write(">");

                var headerControls = oControl.getHeaderControls();
                headerControls.forEach(function(headerControl) {
                    if (headerControl) {
                        oRM.renderControl(headerControl);
                    }
                });
                var treeTable = oControl._getTreeTable();
                oRM.renderControl(treeTable);
                oRM.write("</div>");
            },

            _raiseExpandedChanged: function(eventParameters) {
                sap.ui.vtm.measure(this, "fireExpandedChanged", function() {
                    this.fireExpandedChanged(eventParameters);
                }.bind(this));
            },

            _handleToggleOpenState: function(oEvent) {
                var context = oEvent.getParameter("rowContext");
                var expanded = oEvent.getParameter("expanded");
                var contextPath = context.getPath();
                var treeItem = this._getItemByContextPath(contextPath);

                this._raiseExpandedChanged({
                    item: treeItem,
                    expanded: expanded,
                    userInteraction: true
                });
            },

            _getAncestor: function(ancestorType) {
                var ancestor = this.getParent();
                while (ancestor && ancestor.getMetadata().getName() !== ancestorType) {
                    ancestor = ancestor.getParent();
                }
                return ancestor;
            },

            /**
             * Gets the panel this tree belongs to.
             * @function
             * @public
             * @return {sap.ui.vtm.Panel} The panel this tree belongs to.
             */
            getPanel: function() {
                if (!this._panel) {
                    this._panel = this._getAncestor("sap.ui.vtm.Panel");
                }
                return this._panel;
            },

            /**
             * Expands or collapses the row associated with a tree item.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object} oTreeItem The tree item.
             * @param {boolean} bExpanded If <code>true</code> the row will be expanded otherwise it will be collapsed.
             * @return {sap.ui.vtm.Tree} A reference to <code>this</code> for method chaining.
             */
            setExpanded: function(oTreeItem, bExpanded) {
                var treeTable = this._getTreeTable();

                var expandOrCollapse = function() {
                    var rowIndex = this._getRowIndexForTreeItem(treeTable, oTreeItem);
                    if (rowIndex !== -1) {
                        var expandedChanged;
                        if (bExpanded) {
                            if (!treeTable.isExpanded(rowIndex)) {
                                expandedChanged = true;
                                treeTable.expand(rowIndex);
                            }
                        } else if (treeTable.isExpanded(rowIndex)) {
                            expandedChanged = true;
                            treeTable.collapse(rowIndex);
                        }
                        if (expandedChanged) {
                            this._raiseExpandedChanged({
                                item: oTreeItem,
                                expanded: bExpanded,
                                userInteraction: false
                            });
                        }
                    }
                }.bind(this);

                if (bExpanded) {
                    this._expandToTreeItem(oTreeItem, false, expandOrCollapse);
                } else {
                    expandOrCollapse();
                }

                return this;
            },

            /**
             * Gets whether the row associated with a tree item is expanded.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object} oTreeItem The tree item.
             * @returns {boolean} Whether the row associated with the specified tree item is expanded.
             */
            getExpanded: function(oTreeItem) {
                var treeTable = this._getTreeTable();
                var rowIndex = this._getRowIndexForTreeItem(treeTable, oTreeItem);
                if (rowIndex !== -1) {
                    return treeTable.isExpanded(rowIndex);
                }
                return false;
            },

            /**
             * Gets the fixed columns for the tree.
             * @public
             * @function
             * @returns {sap.ui.vtm.Column[]} The fixed columns.
             */
            getFixedColumns: function() {
                var columns = [];
                var treeTable = this._getTreeTable();
                var treeTableColumns = treeTable.getColumns();

                for (var i = 0; i < this._fixedColumns.length; i++) {
                    var treeTableColumn = treeTableColumns[i];
                    var column = treeTableColumn.data("definition");
                    column.setWidth(treeTableColumn.getWidth());
                    column.setHAlign(treeTableColumn.getHAlign());
                    columns.push(column);
                }
                return columns;
            },

            /**
             * Sets the fixed columns for the tree.
             * @public
             * @function
             * @param {sap.ui.vtm.Column[]} fixedColumns The fixed columns.
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            setFixedColumns: function (fixedColumns) {
                if (!fixedColumns) { throw "fixedColumns not specified"; }
                this._fixedColumns = fixedColumns;
                var dataColumns = this.getDataColumns();
                var allColumns = this._fixedColumns.concat(dataColumns);
                this._setColumns(allColumns);
                return this;
            },

            /**
             * Gets the set of data columns for the tree.
             * @public
             * @function
             * @returns {sap.ui.vtm.Column[]} The data columns for the tree.
             */
            getDataColumns: function () {
                var columns = [];
                var treeTable = this._getTreeTable();
                var treeTableColumns = treeTable.getColumns();

                for (var i = this._fixedColumns.length; i < treeTableColumns.length; i++) {
                    var treeTableColumn = treeTableColumns[i];
                    var column = treeTableColumn.data("definition");
                    column.setWidth(treeTableColumn.getWidth());
                    column.setHAlign(treeTableColumn.getHAlign());
                    columns.push(column);
                }
                return columns;
            },

            /**
             * Sets the data columns for the tree.
             * @public
             * @function
             * @param {sap.ui.vtm.Column[]} dataColumns The data columns for the tree.
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            setDataColumns: function (dataColumns) {
                if (!dataColumns) { throw "dataColumns not specified"; }
                var allColumns = this._fixedColumns.concat(dataColumns);
                this._setColumns(allColumns);
                return this;
            },

            /**
             * Sets the tree table columns.
             * @private
             * @function
             * @param {sap.ui.vtm.Column[]} allColumns An array containing definitions for both the fixed and non fixed columns.
             */
            _setColumns: function (allColumns) {
                var treeTable = this._getTreeTable();
                treeTable.removeAllColumns();
                allColumns.forEach(function(column) {
                    var tableColumn = this._createColumn(column);
                    treeTable.addColumn(tableColumn);
                }.bind(this));
                treeTable.setFixedColumnCount(this._fixedColumns.length);
            },

            /**
             * Finds tree items corresponding to a set of row indices.
             * @private
             * @function
             * @param {int[]} rowIndices An array of row indices.
             * @returns {object[]} Returns an array of tree items that were found for the specified row indices.
             */
            _getTreeItemsFromRowIndices: function (rowIndices) {
                return rowIndices
                    .map(function (rowIndex) { return this._getItemByRowIndex(rowIndex); }.bind(this))
                    .filter(function (ti) { return !!ti; });
            },

            _getTreeTable: function () {
                return this.getAggregation("_treeTable");
            },

            /**
             * Gets the root tree items.
             * @public
             * @function
             * @returns {object[]} The root tree items.
             */
            getRootItems: function () {
                return this._rootItems;
            },

            /**
             * Sets the root tree items.
             * @public
             * @function
             * @param {object[]} rootItems The root tree items.
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            setRootItems: function (rootItems) {
                this._rootItems = rootItems;
                return this;
            },

            /**
             * Returns whether the tree is empty.
             * @public
             * @function
             * @returns {boolean} Whether the tree is empty.
             */
            isEmpty: function() {
                return this._rootItems.length === 0;
            },

            /**
             * Gets the selected tree items.
             * @public
             * @function
             * @returns {object[]} The selected tree items.
             */
            getSelectedItems: function () {
                var selectedItemIndices = this._getTreeTable().getSelectedIndices();
                return this._getTreeItemsFromRowIndices(selectedItemIndices);
            },

            /**
             * Expands the ancestors of a tree item, optionally scrolls it into view and calls a callback after the expansion.
             * @private
             * @function
             * @param {object} treeItem The tree item.
             * @param {boolean} scrollIntoView Whether to scroll the tree item into view after expanding its ancestors.
             * @param {function} callback A callback to call on completion of the tree expansion.
             */
            _expandToTreeItem: function(treeItem, scrollIntoView, callback) {
                var treeTable = this._getTreeTable();

                // getScrollPosition - When we know the index of the row where we want to scroll,
                // we do some calculations so we position that row in the middle
                // of the table. For example if we want to scroll index 30 into view
                // and the table can fit 12 rows into the view, we will display the rows
                // starting from 24 until 36 so row number 30 is in the middle.
                var getScrollPosition = function(currentRow, rowIndex, rowCapacity) {
                    var position;
                    if ((rowIndex < currentRow) || (rowIndex >= (currentRow + rowCapacity))) {
                        // if the relevant row index is not in the view,
                        // we perform the necessary calculations.
                        position = rowIndex - (rowCapacity / 2);
                    } else {
                        // if the relevant row is already visible,
                        // we don't change anything and we return the current index.
                        position = currentRow;
                    }
                    // We round the index so it's an integer
                    // and we also make sure it's greater than 0 at all times.
                    position = position > 0 ? Math.floor(position) : 0;
                    return position;
                };

                var ancestors = this.getAncestorItems(treeItem.id, false);

                // expandHandler it's called after the tree table expands a row.
                // This is a way of expanding tree items recursively. We start with the
                // "oldest" ancestors and we continue down the tree to the relevant tree item.
                var expandHandler = function(ancestorsProcessorCallback, ancestors, event) {
                    if (event.getParameter("reason") === "expand") {
                        ancestorsProcessorCallback(ancestors);
                    }
                };

                // function.bind creates a new function and we have to keep it to unsubscribe from event later
                var boundExpandHandler = null;

                var startSearchIndex = 0;

                // processAncestors removes the first ancestor from the collection,
                // it gets the row index from the tree table, it expands that row
                // and at the end, it scrolls the relevant row into view.
                var processAncestors = function(ancestors) {
                    var finalActions = function() {
                        treeTable.getBinding("rows").detachChange(boundExpandHandler);

                        var rowIndex = this._getRowIndexForTreeItem(treeTable, treeItem, startSearchIndex);
                        if (rowIndex === -1) {
                            throw "Tree item with id '" + treeItem.id + "' not found in treeTable";
                        }
                        if (scrollIntoView) {
                            var rowCapacity = treeTable.getVisibleRowCount(),
                                currentRow = treeTable.getFirstVisibleRow(),
                                rowToScrollTo = getScrollPosition(currentRow, rowIndex, rowCapacity);

                            if (rowToScrollTo !== currentRow) {
                                treeTable.setFirstVisibleRow(rowToScrollTo);
                            }
                        }
                        if (callback) {
                            callback();
                        }
                    }.bind(this);

                    setTimeout(function() {
                        if (ancestors.length) {
                            while (ancestors.length) {
                                // Loop through the ancestors until we find one that needs to be expanded
                                var ancestor = ancestors.shift();
                                var rowIndex = this._getRowIndexForTreeItem(treeTable, ancestor, startSearchIndex);
                                if (rowIndex === -1) {
                                    throw "Tree item with id '" + ancestor.id + "' not found in treeTable";
                                }
                                startSearchIndex = rowIndex + 1;

                                if (!treeTable.isExpanded(rowIndex)) {
                                    treeTable.expand(rowIndex);

                                    this._raiseExpandedChanged({
                                        item: ancestor,
                                        expanded: true,
                                        userInteraction: false
                                    });
                                    return;

                                } else if (!ancestors.length) {
                                    finalActions();
                                }
                            }
                        } else {
                            finalActions();
                        }
                    }.bind(this), 0);
                }.bind(this);

                // We listen for the change event so we now when the tree.expand() method has finished
                boundExpandHandler = expandHandler.bind(this, processAncestors, ancestors);
                treeTable.getBinding("rows").attachChange(boundExpandHandler);

                // start processing the ancestors:
                // get ancestor => find its index => expand that index => repeat
                processAncestors(ancestors);
            },

            /**
             * Gets a tree table row index for a tree item.
             * @function
             * @private
             * @param {sap.ui.table.TreeTable} treeTable The tree table.
             * @param {object} treeItem The tree item to lookup.
             * @param {int} startIndex The row to start searching from.
             * @returns {int} The row index of the tree item or -1 if there is no row for the tree item in the tree table currently.
             */
            _getRowIndexForTreeItem: function(treeTable, treeItem, startIndex) {
                var rowIndex = -1;
                sap.ui.vtm.measure(this, "_getRowIndexForTreeItem", function() {
                    if (!startIndex) {
                        startIndex = 0;
                    }

                    var indexDataModel = function(dataModel, pathInModel) {
                        pathInModel.forEach(function(position) {
                            dataModel = dataModel[position];
                        });
                        return dataModel;
                    };

                    var treeItems = this.getAllItems();
                    for (var currentIndex = startIndex; currentIndex < treeItems.length; currentIndex++) {
                        var context = treeTable.getContextByIndex(currentIndex);
                        if (context) {
                            var pathInModel = context.getPath().split("/");
                            pathInModel.shift();

                            var dataModel = context.getModel().getData();
                            var currentItem = indexDataModel(dataModel, pathInModel);
                            if (currentItem === treeItem) {
                                rowIndex = currentIndex;
                                break;
                            }
                        }
                    }
                }.bind(this));
                return rowIndex;
            },

            /**
             * Expands all ancestors of specified tree item.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object} treeItem Tree item.
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            expandAncestors: function (treeItem) {
                sap.ui.vtm.measure(this, "expandAncestors", function() {
                    this._expandToTreeItem(treeItem, false, null);
                }.bind(this));
                return this;
            },

            /**
             * Expands all tree items in the tree.
             * @public
             * @function
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            expandAll: function() {
                sap.ui.vtm.measure(this, "expandAll", function() {
                    this._getTreeTable().expandToLevel(1000 * 1000 * 1000);
                }.bind(this));
                return this;
            },


            /**
             * Expands all tree items in the tree.
             * @public
             * @function
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            collapseAll: function() {
                sap.ui.vtm.measure(this, "collapseAll", function() {
                    this._getTreeTable().collapseAll();
                }.bind(this));
                return this;
            },

            /**
             * Expands tree items in the tree from the root down to the given level.
             * @public
             * @function
             * @param {int} iLevel The tree level to expand to.
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            expandToLevel: function(iLevel) {
                sap.ui.vtm.measure(this, "expandToLevel", function() {
                    this._getTreeTable().expandToLevel(iLevel);
                }.bind(this));
                return this;
            },

            /**
             * Brings specified tree item to view, expanding the tree if necessary.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object} treeItem The tree item to scroll into view.
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            scrollIntoView: function (treeItem) {
                sap.ui.vtm.measure(this, "scrollIntoView", function() {
                    this._expandToTreeItem(treeItem, true, null);
                }.bind(this));
                return this;
            },

            /**
             * Sets the selected tree items.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|object[]} items Tree item(s) to select in the tree.
             * @param {boolean?} scrollToView When set brings selected item into view. Default value is to true.
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            setSelectedItems: function (items, scrollToView) {
                items = sap.ui.vtm.ArrayUtilities.wrap(items);
                if (scrollToView !== true && scrollToView !== false) {
                    scrollToView = true;
                }
                if (this.getSelectionMode() == sap.ui.vtm.SelectionMode.Single && items.length > 1) {
                    items = items.slice(0, 1);
                }
                if (!items.length) {
                    this._getTreeTable().clearSelection();
                    this.fireEvent("vtmInternalSetTreeSelectionComplete");
                    return this;
                }

                var setTreeSelection = function(selectedItems) {
                    var treeTable = this._getTreeTable();
                    for (var i = 0; ; i++) {
                        var treeItem = this._getItemByRowIndex(i);
                        if (!treeItem) {
                            break;
                        }
                        var inSelectedItems = selectedItems.indexOf(treeItem) !== -1;
                        if (inSelectedItems != treeTable.isIndexSelected(i)) {
                            if (inSelectedItems) {
                                treeTable.addSelectionInterval(i, i);
                            } else {
                                treeTable.removeSelectionInterval(i, i);
                            }
                        }
                    }
                    this.fireEvent("vtmInternalSetTreeSelectionComplete");
                }.bind(this);

                var selectTreeItems = function(){
                    setTreeSelection(items);
                };

                for (var idx = 0; idx < items.length; idx++) {
                    var item = items[idx],
                        isLast = idx === items.length - 1,
                        callback = isLast ? selectTreeItems : null;

                    this._expandToTreeItem(item, scrollToView, callback);
                }
                return this;
            },

            /**
             * Validates the tree.
             * If errors are found they are written to the console log and an exception is thrown.
             * @public
             * @function
             * @returns {sap.ui.vtm.Tree} <code>this</code> for method chaining.
             */
            validateTree: function() {
                sap.ui.vtm.measure(this, "validateTree", function() {
                    var errors = sap.ui.vtm.TreeItemUtilities.validateTree(this.getRootItems());
                    if (errors.length !== 0) {
                        errors.forEach(function(error) {
                            var message = "Tree error in " + this.getId() + ": " + error;
                            jQuery.sap.log.error(message, null, "sap.ui.vtm.Tree");
                        });
                        throw "There were errors in the " + this.getId() + " tree. See the console trace for details";
                    }
                }.bind(this));
                return this;
            },

            /**
             * Updates the model.
             * 
             * The application should call this whenever changes are made to the tree model.
             * @public
             * @function
             * @param {boolean?} forceRecreate If <code>true</code>, the tree control model and bindings are recreated.
             * If <code>false</code> and the model and bindings already exist, this call only results in the bindings being refreshed.
             * Rebuilding the model and bindings is much more expensive than refreshing the bindings, so only use a value of <code>true</code> for this parameter
             * when a value of <code>false</code> does not result in the the tree being updated correctly.
             * @fires beforeModelUpdated
             * @fires modelUpdated
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            updateModel: function (forceRecreate) {
                sap.ui.vtm.measure(this, "updateModel", function() {
                    sap.ui.vtm.measure(this, "fireBeforeModelUpdated", function() {
                        this.fireBeforeModelUpdated();
                    }.bind(this));

                    this._updateModel(forceRecreate);

                    sap.ui.vtm.measure(this, "fireModelUpdated", function() {
                        this.fireModelUpdated();
                    }.bind(this));
                }.bind(this));

                return this;
            },

            _updateModel: function (forceRecreate) {
                var treeTable = this._getTreeTable();
                var jsonModel = treeTable.getModel();
                if (!jsonModel || forceRecreate) {
                    jsonModel = new sap.ui.model.json.JSONModel();
                    jsonModel.setSizeLimit(1000000);
                    treeTable.bindRows({
                        path: "/rootItems",
                        key: "id",
                        parameters: {
                            arrayNames: ["includedChildren"],
                            numberOfExpandedLevels: 1
                        }
                    });
                    jsonModel.setData({ rootItems: this.getRootItems() });
                    treeTable.setModel(jsonModel);
                } else {
                    jsonModel.setData({ rootItems: this.getRootItems() });
                    this._updateBindings(true);
                }
            },

            _updateBindings: function() {
                this._getTreeTable().getModel().updateBindings(true);
            },

            /**
             * Updates collections used to find tree items by various criteria.<br/>
             * This method should be called whenever the tree has been populated, when the tree structure has changed or when any of the following fields have been modified for a tree item in the tree:
             * <ul>
             * <li>id</li>
             * <li>sceneNodeIds <b>*</b></li>
             * <li>includedChildren</li>
             * <li>excludedChildren</li>
             * </ul>
             * <br/>
             * Correct usage of this method is required by the following methods:
             * <ul>
             * <li>{@link #getItem}</li>
             * <li>{@link #getParentItem}</li>
             * <li>{@link #getDescendantItems}</li>
             * <li>{@link #getAncestorItems}</li>
             * <li>{@link #getItemsBySceneNodeId} <b>*</b></li>
             * <li>{@link #setExpanded}</li>
             * <li>{@link #getExpanded}</li>
             * <li>{@link #expandAncestors}</li>
             * <li>{@link #scrollIntoView}</li>
             * <li>{@link #setSelectedItems}</li>
             * <li>{@link #isIncludedItem}</li>
             * <li>{@link #isExcludedItem}</li>
             * <li>{@link #traverseBranch}</li>
             * </ul>
             * <br/>
             * <b>*</b> When the only changes to the tree since the last call to {@link #updateCollections} are changes to the <code>sceneNodeIds<code> 
             * properties of the tree items, {@link #updateTreeItemsBySceneNodeId} can be used instead of {@link #updateCollections}.
             * @function
             * @public
             * @param {boolean?} checkForHierarchyChanges When true a <code>hierarchyChanged</code> event will be raised if the hierarchy has changed since the last time this method was called.
             * This method is called when the tree is empty as part of the {@link sap.ui.vtm.Tree} constructor, so the first time it is called from application code a <code>hierarchyChanged</code> event will be raised if the tree has been populated.
             * The default value for the parameter is <code>true</code>.
             * @fires hierarchyChanged
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            updateCollections: function (checkForHierarchyChanges) {
                sap.ui.vtm.measure(this, "updateCollections", function() {
                    if (this._treeCollections.updateCollections(this.getRootItems(), checkForHierarchyChanges)) {
                        sap.ui.vtm.measure(this, "fireHierarchyChanged", function() {
                            this.fireHierarchyChanged();
                        }.bind(this));
                    }
                }.bind(this));
                return this;
            },

            /**
             * Update the collection used by {@link #getItemsBySceneNodeId}.
             * 
             * This is useful when the only changes to the tree since the last call to {@link #updateCollections} are changes to the <code>sceneNodeIds<code> properties of the tree items.
             * @public
             * @function
             * @returns {sap.ui.vtm.Tree} Returns <code>this</code> for method chaining.
             */
            updateTreeItemsBySceneNodeId: function() {
                sap.ui.vtm.measure(this, "updateTreeItemsBySceneNodeId", function() {
                    this._treeCollections.updateTreeItemsBySceneNodeId(this.getRootItems());
                }.bind(this));
                return this;
            },

            /**
             * Finds a tree item by model context path or returns undefined if it is not found.
             * @private
             * @function
             * @param {string} contextPath The context path to look for.
             * @returns {object|undefined} The tree item matching the specified context path or undefined if no match was found.
             */
            _getItemByContextPath: function (contextPath) {
                return this._getTreeTable().getModel().getProperty(contextPath) || undefined;
            },

            /**
             * Finds a tree item by id or returns undefined if it is not found.</br>
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {string} treeItemId The tree item id to look for.
             * @returns {object|undefined} The tree item matching the specified id or undefined if no match was found.
             */
            getItem: function (treeItemId) {
                return this._treeCollections.getItem(treeItemId);
            },
            
            /**
             * Returns whether a tree item object is an included tree item in the tree model of this {@link sap.ui.vtm.Tree}.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|string} treeItem The tree item or tree item id to check.
             * @return {boolean} Whether a tree item object is an included tree item in this tree.
             */
            isIncludedItem: function(treeItem) {
                return this._treeCollections.isIncludedItem(treeItem);
            },
            
            /**
             * Returns whether a tree item object is an excluded tree item in the tree model of this {@link sap.ui.vtm.Tree}.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|string} treeItem The tree item or tree item id to check.
             * @return {boolean} Whether a tree item object is an included tree item in this tree.
             */
            isExcludedItem: function(treeItem) {
                return this._treeCollections.isExcludedItem(treeItem);
            },

            /**
             * Finds the set of tree items that are associated with a particular scene node id.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {string|string[]} sceneNodeIds The scene node ID or IDs to find.
             * @param {sap.ui.vtm.TreeItemType?} treeItemType Indicates the types of tree item to match.
             * Defaults to {@link sap.ui.vtm.TreeItemType.Included}.
             * @returns {object[]} The set of tree items that have a  <code>sceneNodeIds</code> property that contains the specified scene node id.
             */
            getItemsBySceneNodeId: function (sceneNodeIds, treeItemType) {
                return this._treeCollections.getItemsBySceneNodeId(sceneNodeIds, treeItemType);
            },

            /**
             * Finds a parent tree item or returns undefined if it is not found.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|string} treeItem The child tree item or child tree item id.
             * @returns {object|undefined} The parent tree item or undefined if no match was found.
             */
            getParentItem: function (treeItem) {
                return this._treeCollections.getParentItem(treeItem);
            },

            /**
             * Gets the descendants of a tree item.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|string} treeItem The tree item or id of the tree item to get the descendants of.
             * @param {sap.ui.vtm.TreeItemType?} treeItemType Indicates the types of tree item to match.
             * Defaults to {@link sap.ui.vtm.TreeItemType.Included}.
             * @returns {object[]|undefined} The descendants of the tree item or undefined if the tree item is not found.
             */
            getDescendantItems: function (treeItem, treeItemType) {
                return this._treeCollections.getDescendantItems(treeItem, treeItemType);
            },

            /**
             * Finds all ancestors of a tree item.
             *
             * An empty array will be returned for root items.<br/>
             * Otherwise an array of ancestor tree items will be returned.<br/>
             * The array will be ordered such that:
             * <ul>
             * <li>The root item will be first element in the array.</li>
             * <li>The parent item will be last element in the array.</li>
             * </ul>
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {object|string} treeItem The tree item or id of the tree item to get the ancestors of.
             * @returns {object[]} The ancestors of the tree item.
             */
            getAncestorItems: function (treeItem) {
                return this._treeCollections.getAncestorItems(treeItem);
            },

            /**
             * Finds all tree items in the tree of a given type.
             *
             * This method relies on {@link #updateCollections} being called after the tree is populated/changed.
             * @public
             * @function
             * @param {sap.ui.vtm.TreeItemType?} treeItemType Indicates the types of tree item to match.
             * Defaults to {@link sap.ui.vtm.TreeItemType.Included}.
             * @returns {object[]} All the tree items in the tree.
             */
            getAllItems: function (treeItemType) {
                return this._treeCollections.getAllItems(treeItemType);
            },

            _modifyDisplayState: function (treeItems, updateFunction, recursive, visualOnly, refresh) {
                treeItems = sap.ui.vtm.ArrayUtilities.wrap(treeItems);
                recursive = recursive == null ? true : recursive;
                refresh = refresh == null ? true : refresh;
                visualOnly = visualOnly == null ? true : visualOnly;

                var updateIfRequired = function (ti) {
                    if (!visualOnly || sap.ui.vtm.TreeItemUtilities.hasVisibility(ti)) {
                        updateFunction(ti);
                    }
                    return sap.ui.vtm.ChildCollectionType.IncludedAndExcluded;
                };

                treeItems.forEach(function(item) {
                    if (recursive) {
                        sap.ui.vtm.TreeItemUtilities.traverseBranch(item, updateIfRequired);
                    } else {
                        updateIfRequired(item);
                    }
                });

                if (refresh) {
                    this.updateModel();
                    this.getPanel().getViewport().refresh();
                }
            },

            _getTreeItemData: function(treeItems, retrievalFunction) {
                if (Array.isArray(treeItems)) {
                    return treeItems.map(retrievalFunction);
                } else {
                    return retrievalFunction(treeItems);
                }
            },

            /**
             * Sets the <code>visibility</code> property of some tree items.
             * @public
             * @function
             * @param {object|object[]} treeItems The tree item or the array of tree items.
             * @param {boolean} visibility The new visibility state of the tree items.
             * @param {boolean?} recursive If <code>true</code> changes are applied recursively to included and excluded descendant tree items. Default value is <code>true</code>.
             * @param {boolean?} visualOnly If <code>true</code> changes are only made to tree items that have a defined <code>visibility</code> property value. Default value is <code>true</code>.
             * @param {boolean?} refresh If <code>true<code>, {@link #updateModel} is called to refresh the tree (so the check eye icons are updated)
             * and {@link sap.ui.vtm.Viewport#refresh} is called on the corresponding {@link sap.ui.vtm.Viewport} to recalculate the display state. Default value is <code>true</code>.
             * @return {sap.ui.vtm.Tree} <code>this</code> to allow method chaining.
             */
            setVisibility: function (treeItems, visibility, recursive, visualOnly, refresh) {
                var updateVisibility = function (ti) {
                    if (visibility == undefined) {
                        delete ti.visibility;
                    } else {
                        ti.visibility = visibility;
                    }
                };
                this._modifyDisplayState(treeItems, updateVisibility, recursive, visualOnly, refresh);
                return this;
            },

            /**
             * Gets the <code>visibility</code> property of a tree item or array of tree items.
             *
             * If a single tree item is passed to the method then a single value is returned.<br/>
             * If an array of tree items is passed to the method then an array is returned.
             * @public
             * @function
             * @param {object|object[]} treeItems The tree item or the array of tree items.
             * @return {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the tree item is visible, <code>false</code> otherwise.
             */
            getVisibility: function (treeItems) {
                return this._getTreeItemData(treeItems, function(treeItem) {
                    return treeItem.visibility;
                });
            },

            /**
             * Sets the <code>opacity</code> property of some tree items.
             * @public
             * @function
             * @param {object|object[]} treeItems The tree item or the array of tree items.
             * @param {float} opacity The new opacity value of the tree items (between 0.0 and 1.0 inclusive).
             * @param {boolean?} recursive If <code>true</code> changes are applied recursively to included and excluded descendant tree items. Default value is <code>true</code>.
             * @param {boolean} visualOnly If <code>true</code> changes are only made to tree items that have a defined <code>visibility</code> property value. Default value is <code>true</code>.
             * @param {boolean} refresh If <code>true<code>, {@link #updateModel} is called to refresh the tree (so the check eye icons are updated)
             * and {@link sap.ui.vtm.Viewport#refresh} is called on the corresponding {@link sap.ui.vtm.Viewport} to recalculate the display state. Default value is <code>true</code>.
             * @return {sap.ui.vtm.Tree} <code>this</code> to allow method chaining.
             */
            setOpacity: function (treeItems, opacity, recursive, visualOnly, refresh) {
                var updateOpacity = function (ti) {
                    if (opacity == undefined) {
                        delete ti.opacity;
                    } else {
                        ti.opacity = opacity;
                    }
                };
                this._modifyDisplayState(treeItems, updateOpacity, recursive, visualOnly, refresh);
                return this;
            },

            /**
             * Gets the <code>opacity</code> property of a tree item or array of tree items.
             *
             * If a single tree item is passed to the method then a single value is returned.<br/>
             * If an array of tree items is passed to the method then an array is returned.
             * @public
             * @function
             * @param {object|object[]} treeItems The tree item or the array of tree items.
             * @return {float|float[]} A single value or an array of values representing the opacity values of the tree item(s) passed in.
             */
             getOpacity: function (treeItems) {
                 return this._getTreeItemData(treeItems, function(treeItem) {
                     return treeItem.opacity;
                 });
             },

             /**
              * Sets the <code>highlightColor</code> property of some tree items.
              * @public
              * @function
              * @param {object|object[]} treeItems The tree item or the array of tree items.
              * @param {sap.ui.core.CSSColor} highlightColor The new highlight color value of the tree items.
              * @param {boolean?} recursive If <code>true</code> changes are applied recursively to included and excluded descendant tree items. Default value is <code>true</code>.
              * @param {boolean} visualOnly If <code>true</code> changes are only made to tree items that have a defined <code>visibility</code> property value. Default value is <code>true</code>.
              * @param {boolean} refresh If <code>true<code>, {@link #updateModel} is called to refresh the tree (so the check eye icons are updated)
              * and {@link sap.ui.vtm.Viewport#refresh} is called on the corresponding {@link sap.ui.vtm.Viewport} to recalculate the display state. Default value is <code>true</code>.
              * @return {sap.ui.vtm.Tree} <code>this</code> to allow method chaining.
              */
             setHighlightColor: function (treeItems, highlightColor, recursive, visualOnly, refresh) {
                 var updateHighlightColor = function (ti) {
                     if (highlightColor == null) {
                         delete ti.highlightColor;
                     } else {
                         ti.highlightColor = highlightColor;
                     }
                 };
                 this._modifyDisplayState(treeItems, updateHighlightColor, recursive, visualOnly, refresh);
                 return this;
             },

             /**
              * Gets the <code>highlightColor</code> property of a tree item or array of tree items.
              *
              * If a single tree item is passed to the method then a single value is returned.<br/>
              * If an array of tree items is passed to the method then an array is returned.
              * @public
              * @function
              * @param {object|object[]} treeItems The tree item or the array of tree items.
              * @return {string|string[]} A single value or an array of values representing the highlight color values of the tree item(s) passed in.
              */
              getHighlightColor: function (treeItems) {
                  return this._getTreeItemData(treeItems, function(treeItem) {
                      return treeItem.highlightColor;
                  });
              },

            /**
             * Finds a tree item by index or returns undefined if it is not found.
             * @private
             * @function
             * @param {int} index The row index of the tree item to look for.
             * @returns {object|undefined} The tree item matching the specified row index or undefined if no match was found.
             */
            _getItemByRowIndex: function (index) {
                var treeTable = this._getTreeTable();
                var context = treeTable.getContextByIndex(index);
                var path = context ? context.sPath : "";
                return this._getItemByContextPath(path);
            },

            onAfterRendering: function () {
                var treeTable = this._getTreeTable();
                if (treeTable.setFixedColumnCount() != this._fixedColumns.length) {
                    treeTable.setFixedColumnCount(this._fixedColumns.length);
                }
                this._addDragHandlers();
                this._addMutationObserver();
            },

            setSelectionMode: function(value) {
                if (value === this.getSelectionMode()) {
                    return this;
                }
                var treeTable = this._getTreeTable();
                treeTable.clearSelection();

                var treeTableSelectionMode;
                var selectionBehavior;

                switch (value) {
                case sap.ui.vtm.SelectionMode.Single:
                    treeTableSelectionMode = sap.ui.table.SelectionMode.Single;
                    selectionBehavior = sap.ui.table.SelectionBehavior.RowOnly;
                    break;
                case sap.ui.vtm.SelectionMode.MultiToggle:
                    treeTableSelectionMode = sap.ui.table.SelectionMode.MultiToggle;
                    selectionBehavior = sap.ui.table.SelectionBehavior.Row;
                    break;
                default:
                    throw "Unknown selection mode: '" + value + "'";
                }

                treeTable.setSelectionBehavior(selectionBehavior);
                treeTable.setSelectionMode(treeTableSelectionMode);
                this.setProperty("selectionMode", value);

                return this;
            },

            /**
             * This is used to ensure that the drag handlers and drag and drop related attributes are restored after
             * the HTML generated for the TreeTable is modified.
             * @private
             * @function
             */
            _addMutationObserver: function () {
                var ignoreChanges = false;

                var observer = new MutationObserver(function (mutations) {
                    if (ignoreChanges) {
                        return;
                    }
                    ignoreChanges = true;
                    var addedDragHandlers = false;
                    mutations.forEach(function (mutation) {
                        if (addedDragHandlers) {
                            return;
                        }
                        if (mutation.type === "childList") {
                            this._addDragHandlers();
                            addedDragHandlers = true;
                        }
                    }.bind(this));
                    ignoreChanges = false;
                }.bind(this));

                var observerConfig = {
                    subtree: true,
                    childList: true
                };

                jQuery("#" + this.getId()).each(function (index, rowElement) {
                    observer.observe(rowElement, observerConfig);
                });
            },

            /**
             * This gets a row index for a an HTML tr element belonging to the TreeTable.
             * @private
             * @function
             * @param {HTMLElement} trElement The HTML tr element.
             * @returns {int} The sap.ui.table.TreeTable row index for the HTML tr element.
             */
            _getRowIndexForTableRow: function (trElement) {
                var rowIndexAttr = jQuery(trElement).attr("data-sap-ui-rowindex");
                var iRowIndex = this._getTreeTable().getFirstVisibleRow() + parseInt(rowIndexAttr, 10);
                return iRowIndex;
            },

            /**
             * Adds drag and drop handlers and "draggable" and "droppable" attributes to the relevant HTML elements.
             * @private
             * @function
             */
            _addDragHandlers: function () {
                var id = this.getId();
                var selectorString = "#" + id + " tr.sapUiTableTr";
                 if (jQuery(selectorString).attr("draggable")) {
                    return;
                }
                var vtm = this.getPanel().getVtm();

                var dragStartEventHandler = function (ev) {

                    // we do not use the dataTransfer mechanism, but this is required for drag and drop to work in Firefox.
                    // at the same type IE10 requires type string set to "text"
                    ev.dataTransfer.setData("text", "");

                    var target = ev.currentTarget;
                    var rowIndex = this._getRowIndexForTableRow(target);
                    var treeItem = this._getItemByRowIndex(rowIndex);
                    if (!treeItem) {
                        ev.preventDefault();
                        return;
                    }

                    var selectedItems = this.getSelectedItems();
                    if (selectedItems && selectedItems.length && selectedItems.indexOf(treeItem) < 0) {
                        ev.preventDefault();
                        return;
                    }

                    vtm._dragStartParameters = {
                        dragItem: treeItem,
                        dragTree: this
                    };

                    var allowDefaultAction;

                    sap.ui.vtm.measure(this, "fireDragStart", function() {
                        allowDefaultAction = this.fireDragStart(vtm._dragStartParameters);
                    }.bind(this));

                    if (!allowDefaultAction) {
                        ev.preventDefault();
                    }
                }.bind(this);

                var dragOverEventHandler = function (ev) {
                    var dragStartParameters = vtm._dragStartParameters;
                    if (!dragStartParameters) {
                        return;
                    }
                    var target = ev.currentTarget;
                    var rowIndex = this._getRowIndexForTableRow(target);
                    var dragOverParameters = {
                        dragItem: dragStartParameters.dragItem,
                        dragTree: dragStartParameters.dragTree,
                        dragOverItem: this._getItemByRowIndex(rowIndex),
                        dragOverTree: this
                    };

                    var allowDefaultAction;

                    sap.ui.vtm.measure(this, "fireDragOver", function() {
                        allowDefaultAction = this.fireDragOver(dragOverParameters);
                    }.bind(this));

                    if (!allowDefaultAction) {
                        ev.preventDefault();
                    }
                }.bind(this);

                var dropEventHandler = function (ev) {
                    var dragStartParameters = vtm._dragStartParameters;
                    if (!dragStartParameters) {
                        return;
                    }
                    var target = ev.currentTarget;
                    var rowIndex = this._getRowIndexForTableRow(target);
                    var dropParameters = {
                        dragItem: dragStartParameters.dragItem,
                        dragTree: dragStartParameters.dragTree,
                        dropItem: this._getItemByRowIndex(rowIndex),
                        dropTree: this
                    };
                    vtm._dragStartParameters = null;

                    sap.ui.vtm.measure(this, "fireDrop", function() {
                        this.fireDrop(dropParameters);
                    }.bind(this));
                }.bind(this);

                var addEventHandlers = function (element) {
                    element.addEventListener("dragstart", dragStartEventHandler, false);
                    element.addEventListener("dragover", dragOverEventHandler, false);
                    element.addEventListener("drop", dropEventHandler, false);
                };

                jQuery(selectorString).each(function () {
                    var element = jQuery(this);
                    element.attr("draggable", "true");
                    element.attr("droppable", "true");
                    addEventHandlers(this);
                });
            },

            /**
             * Creates a {@link sap.ui.table.Column} from a column definition and template.
             * @private
             * @function
             * @param {sap.ui.vtm.Column} column The column definition.
             * @return {sap.ui.table.Column} The created {@link sap.ui.table.Column}.
             */
            _createColumn: function (column) {
                var template = column.getTemplate() || this._createColumnTemplate(column);
                var label = column.getLabel();
                var labelControl = column.getLabelControl();
                var settings = {
                    label: labelControl ? labelControl : label,
                    tooltip: column.getTooltip() || label,
                    hAlign: column.getHAlign() || sap.ui.core.HorizontalAlign.Left,
                    width: column.getWidth() || "auto",
                    resizable: column.getResizable(),
                    template: template
                };
                var tableColumn = new sap.ui.table.Column(settings);
                tableColumn.setTemplate(template);
                tableColumn.data("definition", column);
                return tableColumn;
            },

            /**
             * Recursively traverses a tree branch calling a function on each item (including the tree item that is the root of the branch).
             * @public
             * @function
             * @param {object} treeItem The root of the branch to apply the function to.
             * @param {function} callback The function to apply to tree items in the branch.<br/>
             *                            The first parameter to the callback function is the current tree item object (at the current point of the traversal.<br/>
             *                            The second parameter to the callback function is the set of ancestors of the current tree item in the traversal.<br/>
             *                            The function may return a {@link sap.ui.vtm.ChildCollectionType} value to specify which immediate children of the tree item to traverse.<br/>
             *                            If no such value is returned a default of {@link sap.ui.vtm.ChildCollectionType.Included} is used.
             * @return {sap.ui.vtm.Tree} <code>this</code> to allow method chaining.
             */
            traverseBranch: function (treeItem, callback) {
                var ancestors = this.getAncestorItems(treeItem);
                sap.ui.vtm.TreeItemUtilities.traverseBranch(treeItem, callback, ancestors);
                return this;
            },

            /**
             * Recursively traverses the tree calling a function on each item.
             * @public
             * @function
             * @param {function} callback The function to apply to tree items in the tree.<br/>
             *                            The first parameter to the callback function is the current tree item object (at the current point of the traversal.<br/>
             *                            The second parameter to the callback function is the set of ancestors of the current tree item.<br/>
             *                            The function may return a {@link sap.ui.vtm.ChildCollectionType} value to specify which immediate children to traverse.
             *                            If no such value is returned a default of {@link sap.ui.vtm.ChildCollectionType.Included} is used.
             * @return {sap.ui.vtm.Tree} <code>this</code> to allow method chaining.
             */
            traverseTree: function (callback) {
                this.getRootItems().forEach(function(rootItem) {
                    this.traverseBranch(rootItem, callback, []);
                }.bind(this));
                return this;
            },

            /**
             * Removes a root item from the tree.
             * @public
             * @function
             * @param {string|object} rootItemToRemove The root tree item to remove (or its id).
             * @returns {object|undefined} Returns the deleted item or undefined if no item was removed.
             * @return {sap.ui.vtm.Tree} <code>this</code> to allow method chaining.
             */
            removeRoot: function (rootItemToRemove) {
                return sap.ui.vtm.TreeItemUtilities.removeRoot(this._rootItems, rootItemToRemove);
            },

            /**
             * Adds a root item to the tree.
             * @public
             * @function
             * @param {object} rootItemToAdd The root tree item to remove.
             * @return {sap.ui.vtm.Tree} <code>this</code> to allow method chaining.
             */
            addRoot: function (rootItemToAdd) {
                sap.ui.vtm.TreeItemUtilities.addRoot(this._rootItems, rootItemToAdd);
                return this;
            },

            /**
             * Creates a column template from a column definition.
             * @private
             * @function
             * @param {sap.ui.vtm.Column} column The column definition
             * @return {sup.ui.core.Control} The column template.
             */
            _createColumnTemplate: function (column) {
                var ColumnTemplates = sap.ui.vtm.ColumnTemplates;
                var type = column.getType();
                if (!type) { throw "Column type not specified"; }
                switch (type) {
                    case sap.ui.vtm.ColumnType.Internal: {
                        var columnDescriptor = column.getDescriptor();
                        switch (columnDescriptor) {
                            case sap.ui.vtm.InternalColumnDescriptor.TreeItemId:
                                return ColumnTemplates.createTreeItemIdColumnTemplate();
                            case sap.ui.vtm.InternalColumnDescriptor.Tree:
                                return ColumnTemplates.createTreeColumnTemplate();
                            case sap.ui.vtm.InternalColumnDescriptor.MessageStatus:
                                var messageStatusColumnTemplate = ColumnTemplates.createMessageStatusColumnTemplate();
                                messageStatusColumnTemplate.attachPress(function(oEvent) {
                                    var control = oEvent.getSource();
                                    var oContext = control.getBindingContext();
                                    var sPath = oContext.getPath();
                                    var item = this._getItemByContextPath(sPath);
                                    this.fireMessageStatusIconClicked({
                                        item: item,
                                        control: control
                                    });
                                }.bind(this));
                                messageStatusColumnTemplate.addEventDelegate({
                                    onfocusin: function(event) {
                                        var core = sap.ui.getCore();
                                        var focusedControlId = core.getCurrentFocusedControlId();
                                        var focusedControl = core.byId(focusedControlId);
                                        if (focusedControl) {
                                            var domRef = focusedControl.getDomRef();
                                            if (domRef) {
                                                domRef.blur();
                                            }
                                        }
                                    }
                                }, messageStatusColumnTemplate);
                                return messageStatusColumnTemplate;
                            case sap.ui.vtm.InternalColumnDescriptor.AbsoluteMatrix:
                                return ColumnTemplates.createAbsoluteMatrixColumnTemplate();
                            case sap.ui.vtm.InternalColumnDescriptor.RelativeMatrix:
                                return ColumnTemplates.createRelativeMatrixColumnTemplate();
                            case sap.ui.vtm.InternalColumnDescriptor.SceneNodeIds:
                                return ColumnTemplates.createSceneNodeIdsColumnTemplate();
                            case sap.ui.vtm.InternalColumnDescriptor.Visibility:
                                var sceneNodeVisibilityColumnTemplate = ColumnTemplates.createVisibilityColumnTemplate();
                                var handleChange = function(control, visibility) {
                                    var sPath = control.getBindingContext().getPath();
                                    var item = this._getItemByContextPath(sPath);
                                    if (item) {
                                         sap.ui.vtm.measure(this, "fireVisibilityIconClicked", function() {
                                            this.fireVisibilityIconClicked({
                                                item: item,
                                                visibility: visibility,
                                                control: control
                                            });
                                        }.bind(this));
                                    }
                                }.bind(this);
                                sceneNodeVisibilityColumnTemplate.attachChange(function(event) {
                                    var control = event.getSource();
                                    handleChange(control, control.getChecked());
                                });
                                sceneNodeVisibilityColumnTemplate.attachBrowserEvent("click", function(event) {
                                    if (event && event.target) {
                                        var ui5Controls = jQuery(document.getElementById(event.target.id)).control();
                                        var control = sap.ui.vtm.ArrayUtilities.unwrap(ui5Controls);
                                        if (control) {
                                            handleChange(control, !control.getChecked());
                                            // Prevent table row selection
                                            event.stopPropagation(); 
                                            event.preventDefault();
                                        }
                                    }
                                });
                                return sceneNodeVisibilityColumnTemplate;
                            case sap.ui.vtm.InternalColumnDescriptor.Opacity:
                                return ColumnTemplates.createOpacityColumnTemplate();
                            case sap.ui.vtm.InternalColumnDescriptor.HighlightColor:
                                return ColumnTemplates.createHighlightColorColumnTemplate();
                            default:
                                throw "Unknown internal column type: " + columnDescriptor;
                        }
                        break;
                    }
                case sap.ui.vtm.ColumnType.Metadata:
                    return ColumnTemplates.createMetadataColumnTemplate(column);
                case sap.ui.vtm.ColumnType.Identifier:
                    return ColumnTemplates.createIdentifierColumnTemplate(column);
                case sap.ui.vtm.ColumnType.AppData:
                    return ColumnTemplates.createAppDataColumnTemplate(column);
                default:
                    throw "Invalid column type: " + type;
                }
            }
        });

        return Tree;
    });
}; // end of sap/ui/vtm/Tree.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Viewport') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.Viewport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.dvl.Viewport'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.FlexibleControl'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.FlexibleControlLayoutData'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Viewport",
    ["jquery.sap.global", "sap/ui/core/Control", "sap/ui/vk/dvl/Viewport", "sap/m/OverflowToolbar", "./ViewportHandler", "sap/ui/vk/FlexibleControl", "sap/ui/vk/FlexibleControlLayoutData"],
    function (jQuery, SapUiCoreControl, SapUiVkDvlViewport, SapMOverflowToolbar, SapUiVtmViewportHandler, SapUiVkFlexibleControl, SapUiVkFlexibleControlLayoutData) {

        "use strict";

        /**
         * This class is not intended to be instantiated directly by application code.
         * A {@link sap.ui.vtm.Viewport} object is created when a {@link sap.ui.vtm.Panel} object is instantiated.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.Viewport
         * @public
         * @class
         * A control that contains a 3D viewport.
         * @author SAP SE
         * @version 1.50.3
         * @extends sap.ui.core.Control
         */
        var Viewport = SapUiCoreControl.extend("sap.ui.vtm.Viewport", /** @lends sap.ui.vtm.Viewport.prototype */ {
            metadata: {
                properties:{
                    /**
                     * The background gradient top color.
                     */
                    backgroundGradientTopColor: {type: "sap.ui.core.CSSColor", defaultValue: "black"},

                    /**
                     * The background gradient bottom color
                     */
                    backgroundGradientBottomColor: {type: "sap.ui.core.CSSColor", defaultValue: "white"},

                    /**
                     * Allows the calculated display state of scene nodes in the viewport o be overridden.
                     *
                     * A set of {@link sap.ui.vtm.DisplayGroup} objects that each specify the display state for a set of scene nodes.
                     * Precedence is inherent in the array ordering.
                     * Any display state specified in this way takes precedence over display states specified for geometry associated with tree items
                     * or specified using {@link #contextGroups}.
                     * Call {@link #refresh} to recalculate the display state in the viewport after modifying override display groups.
                     */
                    overrideDisplayGroups: {type: "object[]", defaultValue: []},

                    /**
                     * Allows the calculated display state for scene nodes whose display state is not determined by
                     * tree item associations or override display groups to be specified.
                     *
                     * A set of {@link sap.ui.vtm.DisplayGroup} objects objects that describe display states to apply to scene nodes.
                     * Precedence is inherent in the array ordering.
                     * Call {@link #refresh} to recalculate the display state in the viewport after modifying override display groups.
                     */
                    contextDisplayGroups: {type: "object[]", defaultValue: []}
                },
                aggregations: {
                    _container: {
                        type: "sap.m.VBox",
                        multiple: false,
                        visibility: "hidden"
                    }
                },
                associations : {
                    /**
                     * A set of controls such as toolbars to appear above the 3D viewport.
                     */
                    headerControls: {
                        type: "sap.ui.core.Control",
                        multiple: true
                    }
                },
                events: {
                    /**
                     * Raised when the selection is changed due to a click in the viewport (either on a node or in empty space).
                     */
                    selectionChanged: {
                        parameters: {
                            /**
                             * IDs of newly selected nodes.
                             */
                            selectedIds: { type: "string[]" },
                            /**
                             * IDs of newly unselected nodes.
                             */
                            unselectedIds: { type: "string[]" },
                            /**
                             * <code>true</code> if this event is raised as a result of a user clicking in the viewport.
                             */
                            userInteraction: { type: "boolean"}
                        }
                    },

                    /**
                     * Raised when a node in the viewport is clicked.
                     */
                    nodeClicked: {
                        /**
                         * The clicked scene node.
                         */
                        sceneNode: {type: "sap.ui.vtm.SceneNode"}
                    },

                    /**
                     * Raised when the visibility of scene nodes changed in the viewport.
                     */
                    visibilityChanged: {
                        parameters: {
                            /**
                             * The IDs of newly shown nodes.
                             */
                            visibleIds: {type: "string[]"},
                            /**
                             * The IDs of newly hidden nodes.
                             */
                            hiddenIds: {type: "string[]" },
                            /**
                             * <code>true</code> if this event is raised as a result of a user clicking in the viewport.
                             */
                            userInteraction: { type: "boolean"}
                        }
                    },

                    /**
                     * Raised when viewport's camera view changed.
                     */
                    viewChanged: {
                        parameters: {
                            /**
                             * Information about the current camera view. Can be passed to {@link sap.ui.vk.dvl.Viewport#setCameraInfo setCameraInfo}.
                             */
                            cameraInfo: {type: "object"}
                        }
                    },

                    /**
                     * Raised when {@link sap.ui.vk.dvl.Viewport#refresh refresh} is called.
                     * This event can be used by code that is managing the viewport display state.
                     */
                    refreshRequested: {},

                    /**
                     * Raised on mouse move over viewport.
                     */
                    hover: {
                        parameters: {
                            /**
                             * Mouse X-coordinate within viewport
                             */
                            x: {type: "float"},
                            /**
                             * Mouse Y-coordinate within viewport
                             */
                            y: {type: "float"},
                            /**
                             * The ID of the node that is under the viewport coordinates (x, y).
                             */
                            nodeId: {type: "string"}
                        }
                    },

                    /**
                     * Raised when a gesture begins.
                     */
                    beginGesture: {},

                    /**
                     * Raised when a gesture ends.
                     */
                    endGesture: {}
                }
            },

            _getVkViewport: function () {
                return this.vkViewport;
            },

            _getContainer: function () {
                return this.getAggregation("_container");
            },

            init: function() {
                this._programmaticSelectionChangeInProgress = false;
                this._programmaticVisibilityChangeInProgress = false;
            },

            _initialize: function() {
                var vtm = this.getPanel().getVtm();
                if (vtm) {
                    var scene = vtm.getScene();
                    this._setScene(scene);

                    var vkViewport = this._getVkViewport();
                    var loco = vkViewport._loco;
                    if (vkViewport._viewportHandler) {
                        loco.removeHandler(vkViewport._viewportHandler);
                    }
                    if (vkViewport._smart2DHandler) {
                        loco.removeHandler(vkViewport._smart2DHandler);
                    }
                    var viewportHandler = new SapUiVtmViewportHandler(this);
                    loco.addHandler(viewportHandler);

                    scene.attachEvent("sceneCreated", function() {
                        this._onSceneCreated();
                    }.bind(this));
                }
            },

            renderer: function (oRM, oControl) {
                oRM.write("<div");
                oRM.writeControlData(oControl);
                oRM.addStyle("height", "inherit");
                oRM.addStyle("overflow", "hidden");
                oRM.writeStyles();
                oRM.writeClasses();
                oRM.write(">");

                var container = oControl._getContainer();
                oRM.renderControl(container);

                oRM.write("</div>");
            },

            onBeforeRendering: function() {
                if (!this._initialized) {
                    this._initialized = true;
                    this._initialize();
                }
            },

            /**
             * Returns whether the {@link sap.ui.vtm.Viewport} has been initialized.
             * @public
             * @function
             * @returns {boolean} Whether the {@link sap.ui.vtm.Viewport} has been initialized.
             */
            getInitialized: function() {
                return this._initialized;
            },

            /**
             * Fires a <code>refreshRequested</code> event.
             * @public
             * @function
             * @returns {sap.ui.vtm.Viewport} <code>this</code> for method chaining.
             * @fires refresh
             */
            refresh: function() {
                sap.ui.vtm.measure(this, "fireRefreshRequested", function() {
                    this.fireRefreshRequested();
                }.bind(this));
                return this;
            },

            _raiseHover: function(x, y, nodeId) {
                this.fireHover({x: x, y: y, nodeId: nodeId});
            },

            _raiseBeginGesture: function() {
                this.fireBeginGesture();
            },

            _raiseEndGesture: function() {
                this.fireEndGesture();
            },

            setBackgroundGradientTopColor: function(sColor) {
                this.setProperty("backgroundGradientTopColor", sColor);
                this._getVkViewport().setBackgroundColorTop(sColor);
                return this;
            },

            setBackgroundGradientBottomColor: function(sColor) {
                this.setProperty("backgroundGradientBottomColor", sColor);
                this._getVkViewport().setBackgroundColorBottom(sColor);
                return this;
            },

            _getAncestor: function(ancestorType) {
                var ancestor = this.getParent();
                while (ancestor && ancestor.getMetadata().getName() !== ancestorType) {
                    ancestor = ancestor.getParent();
                }
                return ancestor;
            },

            /**
             * Gets the panel this viewport belongs to.
             * @function
             * @public
             * @return {sap.ui.vtm.Panel} The panel this viewport belongs to.
             */
            getPanel: function() {
                if (!this._panel) {
                    this._panel = this._getAncestor("sap.ui.vtm.Panel");
                }
                return this._panel;
            },

            /**
             * Gets the {@link sap.ui.vtm.Scene} used by this {@link sap.ui.vtm.Viewport}.
             * @public
             * @function
             * @returns {sap.ui.vtm.Scene} The sap.ui.vtm.Scene used by this Viewport.
             */
            getScene: function () {
                return this._scene;
            },

            _onSceneCreated: function (event) {
                var scene = this.getScene();
                var vkScene = scene._vkScene;

                if (!this._vkScene && vkScene) {

                    var vkViewport = this._getVkViewport();
                    this._vkScene = vkScene;
                    vkViewport.setScene(vkScene);

                    this._vkDefaultNodeHierarchy = vkScene.getDefaultNodeHierarchy();
                    if (this._vkDefaultNodeHierarchy && this._vkGraphicsCore) {

                        this._vkViewStateManager = this._vkGraphicsCore.createViewStateManager(this._vkDefaultNodeHierarchy, true, true);
                        if (this._vkViewStateManager) {
                            vkViewport.setViewStateManager(this._vkViewStateManager);

                            this._vkViewStateManager.attachSelectionChanged(function(event) {
                                var selectedIds = event.getParameter("selected");
                                var unselectedIds = event.getParameter("unselected");

                                sap.ui.vtm.measure(this, "fireSelectionChanged", function() {
                                    this.fireSelectionChanged({
                                        selectedIds: selectedIds,
                                        unselectedIds: unselectedIds,
                                        userInteraction: !this._programmaticSelectionChangeInProgress
                                    });
                                }.bind(this));
                            }.bind(this));

                            this._vkViewStateManager.attachVisibilityChanged(function(event) {
                                var visibleIds = event.getParameter("visible");
                                var hiddenIds = event.getParameter("hidden");

                                sap.ui.vtm.measure(this, "fireVisibilityChanged", function() {
                                    this.fireVisibilityChanged({
                                        visibleIds: visibleIds,
                                        hiddenIds: hiddenIds,
                                        userInteraction: !this._programmaticVisibilityChangeInProgress
                                    });
                                }.bind(this));
                            }.bind(this));

                            var onViewChanged = function() {
                                sap.ui.vtm.measure(this, "fireViewChanged", function() {
                                    this.fireViewChanged({
                                        cameraInfo: this.getCameraInfo()
                                    });
                                }.bind(this));
                            }.bind(this);

                            vkViewport.attachZoom(onViewChanged);
                            vkViewport.attachPan(onViewChanged);
                            vkViewport.attachRotate(onViewChanged);

                            vkViewport.attachNodeClicked(function(event) {
                                var nodeId = event.getParameters().nodeId;
                                sap.ui.vtm.measure(this, "fireNodeClicked", function() {
                                    var sceneNode = scene._getSceneNode(nodeId);
                                    try {
                                        this.fireNodeClicked({sceneNode: sceneNode});
                                    } finally {
                                        sceneNode.destroy();
                                    }
                                }.bind(this));
                            }.bind(this));

                            vkViewport.attachFrameRenderingFinished(function(event) {
                                this.fireEvent("frameRenderingFinished", event);
                            }.bind(this));
                        }
                    }
                }
            },

            getHeaderControls: function() {
                var ids = this.getAssociation("headerControls");
                var controls = [];
                if (ids) {
                    ids.forEach(function(id) {
                        var control = sap.ui.getCore().byId(id);
                        if (control) {
                            controls.push(control);
                        }
                    });
                }
                return controls;
            },

            /**
             * Sets the {@link sap.ui.vtm.Scene} used by this {@link sap.ui.vtm.Viewport}.
             * @private
             * @function
             * @param {sap.ui.vtm.Scene} oScene The sap.ui.vtm.Scene to be used by this Viewport.
             * @returns {sap.ui.vtm.Viewport} Returns <code>this</code> for method chaining.
             */
            _setScene: function(oScene) {
                if (!oScene || this._scene) {
                    return this;
                }

                var vkViewport = new sap.ui.vk.dvl.Viewport(this.getId() + "_sapUiVkViewport", {
                    height: "100%"
                });
                this.vkViewport = vkViewport;

                this._scene = oScene;
                if (oScene) {
                    this._vkGraphicsCore = this._scene._vkGraphicsCore;
                    if (this._vkGraphicsCore) {
                        vkViewport.setGraphicsCore(this._vkGraphicsCore);
                        vkViewport.setBackgroundColorTop(this.getBackgroundGradientTopColor());
                        vkViewport.setBackgroundColorBottom(this.getBackgroundGradientBottomColor());
                    }
                }

                var headerControls = this.getHeaderControls();
                headerControls.forEach(function(headerControl) {
                    if (headerControl) {
                        headerControl.setLayoutData(new sap.m.FlexItemData({growFactor: 0, shrinkFactor: 0}));
                    }
                });
                vkViewport.setLayoutData(new sap.m.FlexItemData({growFactor: 1, shrinkFactor: 1, minHeight: "10px"}));

                var container = new sap.m.VBox({
                    fitContainer: true,
                    // due to the bugs in IE related with flexible box layout different render type has to be used
                    renderType: sap.ui.Device.browser.msie ? sap.m.FlexRendertype.Div : sap.m.FlexRendertype.Bare,
                    items: [headerControls, vkViewport]
                });
                this.setAggregation("_container", container);

                return this;
            },

            /**
             * Zooms to the set of geometry that is selected in the current viewport.
             * If no geometry is selected, no action is taken.
             * @public
             * @function
             * @param {number?} durationInSeconds The duration of the zoom animation in seconds.
             * @returns {sap.ui.vtm.Viewport} Returns <code>this</code> for method chaining.
             */
            zoomToSelected: function(durationInSeconds) {
                sap.ui.vtm.measure(this, "zoomToSelected", function() {
                    if (durationInSeconds === null || durationInSeconds === undefined) {
                        durationInSeconds = 0.2;
                    }
                    this._getVkViewport().zoomTo(sap.ui.vk.ZoomTo.Selected, null, durationInSeconds, 0);
                }.bind(this));
                return this;
            },

            /**
             * Zooms to the set of geometry that is visible in the current viewport.
             * If no geometry is visible, this zooms to all geometry in the current viewport.
             * @public
             * @function
             * @param {number?} durationInSeconds The duration of the zoom animation in seconds.
             * @returns {sap.ui.vtm.Viewport} Returns <code>this</code> for method chaining.
             */
            zoomToVisible: function(durationInSeconds) {
                sap.ui.vtm.measure(this, "zoomToVisible", function() {
                    if (durationInSeconds === null || durationInSeconds === undefined) {
                        durationInSeconds = 0.2;
                    }
                    this._getVkViewport().zoomTo(sap.ui.vk.ZoomTo.Visible, null, durationInSeconds, 0);
                }.bind(this));
                return this;
            },

            /**
             * Calls {@link sap.ui.vtm.Viewport#zoomToSelected zoomToSelected} if any geometry is selected in this viewport, otherwise calls {@link sap.ui.vtm.Viewport#zoomToAll zoomToAll}.
             * @public
             * @function
             * @param {number?} durationInSeconds The duration of the zoom animation in seconds.
             * @returns {sap.ui.vtm.Viewport} Returns <code>this</code> for method chaining.
             */
            zoomToFit: function(durationInSeconds) {
                var anyItemsSelected = false;
                if (this._vkViewStateManager) {
                    this._vkViewStateManager.enumerateSelection(function() { anyItemsSelected = true; });
                }
                if (anyItemsSelected) {
                    this.zoomToSelected(durationInSeconds);
                } else {
                    this.zoomToVisible(durationInSeconds);
                }
                return this;
            },

            /**
             * Zooms to a view in the current viewport that can fit all geometry in the scene (visible or not).
             * @public
             * @function
             * @param {number?} durationInSeconds The duration of the zoom animation in seconds.
             * @returns {sap.ui.vtm.Viewport} Returns <code>this</code> for method chaining.
             */
            zoomToAll: function(durationInSeconds) {
                sap.ui.vtm.measure(this, "zoomToAll", function() {
                    if (durationInSeconds === null || durationInSeconds === undefined) {
                        durationInSeconds = 0.2;
                    }
                    this._getVkViewport().zoomTo(sap.ui.vk.ZoomTo.All, null, durationInSeconds, 0);
                }.bind(this));
                return this;
            },

            /**
             * Gets the visibility state for a set of scene nodes in this viewport.
             * @public
             * @function
             * @param {string|string[]} sceneNodeIds A scene node ID or an array of scene node IDs.
             * @returns {boolean|boolean[]} The visibility states for the relevant scene nodes.
             */
            getVisibility: function (sceneNodeIds) {
                var visibilityValues;
                sap.ui.vtm.measure(this, "getVisibility", function() {
                    if (this._vkViewStateManager) {
                        visibilityValues = this._vkViewStateManager.getVisibilityState(sceneNodeIds);
                    }
                }.bind(this));
                return visibilityValues;
            },

            /**
             * Sets the visibility state for a set of scene nodes in this viewport.
             * 
             * This method should not be called by application code when an extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} is being used.
             * In that case the extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} should perform all management of scene node visibility in the viewports.
             * @public
             * @function
             * @param {string|string[]} sceneNodeIds A scene node ID or an array of scene node IDs.
             * @param {boolean} visibility The visibility state to apply to the relevant scene nodes.
             * @param {boolean} recursive If true the specified visibility state will be applied to the descendants of the specified scene nodes.
             * @returns {sap.ui.vtm.Viewport} <code>this</code> for method chaining.
             */
            setVisibility: function (sceneNodeIds, visibility, recursive) {
                if (jQuery.sap.debug()) {
                    var params = {
                        viewport: this.getId(),
                        visibility: visibility,
                        recursive: recursive,
                        sceneNodeIds: sceneNodeIds
                    };
                    jQuery.sap.log.warning("setVisibility " + JSON.stringify(params));
                }
                sap.ui.vtm.measure(this, "setVisibility", function() {
                    if (Array.isArray(sceneNodeIds) && !sceneNodeIds.length) {
                        return this;
                    }
                    if (this._vkViewStateManager) {
                        try {
                            this._programmaticVisibilityChangeInProgress = true;
                            this._vkViewStateManager.setVisibilityState(sceneNodeIds, visibility, recursive);
                        } finally {
                            this._programmaticVisibilityChangeInProgress = false;
                        }
                    }
                }.bind(this));
                return this;
            },

            /**
             * Gets the opacity for a set of scene nodes in this viewport.
             * Opacity is specified as a floating point value in the interval [0,1].
             * @public
             * @function
             * @param {string|string[]} sceneNodeIds A scene node ID or an array of scene node IDs.
             * @returns {number|number[]} The opacity states for the relevant scene nodes.
             */
            getOpacity: function (sceneNodeIds) {
                var opacityValues;
                sap.ui.vtm.measure(this, "getOpacity", function() {
                    if (this._vkViewStateManager) {
                        opacityValues = this._vkViewStateManager.getOpacity(sceneNodeIds);
                        this._scene.traverseNodes(sceneNodeIds, function(sceneNode, i) {
                            if (Array.isArray(sceneNodeIds)) {
                                if (opacityValues[i] == null) {
                                    opacityValues[i] = sceneNode._vkNodeProxy.getOpacity();
                                }
                            } else if (opacityValues == null) {
                                opacityValues = sceneNode._vkNodeProxy.getOpacity();
                            }
                        });
                    }
                }.bind(this));
                return opacityValues;
            },

            /**
             * Sets the opacity for a set of scene nodes in this viewport.
             * Opacity is specified as a floating point value in the interval [0,1].
             * 
             * This method should not be called by application code when an extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} is being used.
             * In that case the extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} should perform all management of scene node visibility in the viewports.
             * @public
             * @function
             * @param {string|string[]} sceneNodeIds A scene node ID or an array of scene node IDs.
             * @param {number} opacity The opacity state to apply to the relevant scene nodes.
             * @param {boolean} recursive If true the specified opacity state will be applied to the descendants of the specified scene nodes.
             * @returns {sap.ui.vtm.Viewport} <code>this</code> for method chaining.
             */
            setOpacity: function (sceneNodeIds, opacity, recursive) {
                if (jQuery.sap.debug()) {
                    var params = {
                        viewport: this.getId(),
                        opacity: opacity,
                        recursive: recursive,
                        sceneNodeIds: sceneNodeIds
                    };
                    jQuery.sap.log.warning("setOpacity " + JSON.stringify(params));
                }
                sap.ui.vtm.measure(this, "setOpacity", function() {
                    if (Array.isArray(sceneNodeIds) && !sceneNodeIds.length) {
                        return this;
                    }
                    if (this._vkViewStateManager) {
                        this._vkViewStateManager.setOpacity(sceneNodeIds, opacity, recursive);
                    }
                }.bind(this));
                return this;
            },

            /**
             * Gets the highlight colors for a set of scene nodes in this viewport.
             * @public
             * @function
             * @param {string|string[]} sceneNodeIds A scene node ID or an array of scene node IDs.
             * @returns {sap.ui.core.CSSColor|sap.ui.core.CSSColor[]} The highlight colors for the relevant scene nodes. The
             */
            getHighlightColor: function (sceneNodeIds) {
                var highlightColorValues;
                sap.ui.vtm.measure(this, "getHighlightColor", function() {
                    if (this._vkViewStateManager) {
                        highlightColorValues = this._vkViewStateManager.getTintColor(sceneNodeIds);
                        this._scene.traverseNodes(sceneNodeIds, function(sceneNode, i) {
                            if (Array.isArray(sceneNodeIds)) {
                                if (highlightColorValues[i] == null) {
                                    highlightColorValues[i] = sceneNode._vkNodeProxy.getTintColor();
                                }
                            } else if (highlightColorValues == null) {
                                highlightColorValues = sceneNode._vkNodeProxy.getTintColor();
                            }
                        });
                    }
                }.bind(this));
                return highlightColorValues;
            },

            /**
             * Sets the highlight color for a set of scene nodes in this viewport.
             * 
             * This method should not be called by application code when an extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} is being used.
             * In that case the extension implementing {@link sap.ui.vtm.interfaces.IDisplayStateCalculationExtension} should perform all management of scene node visibility in the viewports.
             * @public
             * @function
             * @param {string|string[]} sceneNodeIds A scene node ID or an array of scene node IDs.
             * @param {sap.ui.core.CSSColor|null} color The highlight color to apply to the relevant scene nodes. If null, the highlight color is removed.<br/>
             * The alpha component of the color controls the blending ratio between the highlight color and the geometry color.
             * @param {boolean} recursive If true the specified highlight color will be applied to the descendants of the specified scene nodes.
             * @returns {sap.ui.vtm.Viewport} <code>this</code> for method chaining.
             */
            setHighlightColor: function (sceneNodeIds, color, recursive) {
                 if (jQuery.sap.debug()) {
                    var params = {
                        viewport: this.getId(),
                        color: color,
                        recursive: recursive,
                        sceneNodeIds: sceneNodeIds
                    };
                    jQuery.sap.log.warning("setHighlightColor " + JSON.stringify(params));
                }
                sap.ui.vtm.measure(this, "setHighlightColor", function() {
                    if (Array.isArray(sceneNodeIds) && !sceneNodeIds.length) {
                        return this;
                    }
                    if (this._vkViewStateManager) {
                        this._vkViewStateManager.setTintColor(sceneNodeIds, color, recursive);
                    }
                }.bind(this));
                return this;
            },

            /**
             * Gets the selection state for a set of scene nodes in this viewport.
             * @public
             * @function
             * @param {string|string[]} sceneNodeIds A scene node ID or an array of scene node IDs.
             * @returns {boolean|boolean[]} The selection states for the relevant scene nodes.
             */
            getSelected: function (sceneNodeIds) {
                var selectedValues;
                sap.ui.vtm.measure(this, "getSelected", function() {
                    if (this._vkViewStateManager) {
                        selectedValues = this._vkViewStateManager.getSelectionState(sceneNodeIds);
                    }
                }.bind(this));
                return selectedValues;
             },

            /**
             * Sets the selection state for a set of scene nodes in this viewport.
             * 
             * This method should not be called by application code when an extension implementing {@link sap.ui.vtm.interfaces.IViewportSelectionLinkingExtension} is being used.
             * In that case the extension implementing {@link sap.ui.vtm.interfaces.IViewportSelectionLinkingExtension} should perform all management of scene node selection in the viewports.
             * @public
             * @function
             * @param {string|string[]} sceneNodeIds A scene node ID or an array of scene node IDs.
             * @param {boolean} selected The new selection state of the nodes.
             * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
             * @returns {sap.ui.vtm.Viewport} <code>this</code> for method chaining.
             */
            setSelected: function (sceneNodeIds, selected, recursive) {
                if (jQuery.sap.debug()) {
                    var params = {
                        viewport: this.getId(),
                        selected: selected,
                        recursive: recursive,
                        sceneNodeIds: sceneNodeIds
                    };
                    jQuery.sap.log.warning("setSelected " + JSON.stringify(params));
                }
                sap.ui.vtm.measure(this, "setSelected", function() {
                    if (Array.isArray(sceneNodeIds) && !sceneNodeIds.length) {
                        return this;
                    }
                    if (this._vkViewStateManager) {
                        try {
                            this._programmaticSelectionChangeInProgress = true;
                            this._vkViewStateManager.setSelectionState(sceneNodeIds, selected, recursive);
                        } finally {
                            this._programmaticSelectionChangeInProgress = false;
                        }
                    }
                }.bind(this));
                return this;
            },

            /**
             * Gets the IDs of the scene nodes that are selected in this viewport.
             * @public
             * @function
             * @return {string[]} The IDs of the scene nodes that are selected in this viewport.
             */
            getSelectedIds: function() {
                var ids = [];
                sap.ui.vtm.measure(this, "getSelectedIds", function() {
                    if (this._vkViewStateManager) {
                        this._vkViewStateManager.enumerateSelection(function (itemId) { ids.push(itemId); });
                    }
                }.bind(this));
                return ids;
            },

            /**
             * Sets the view in the current viewport to one of the predefined views.
             * @public
             * @function
             * @param {sap.ui.vtm.PredefinedView} view The predefined view to apply.
             * @returns {sap.ui.vtm.Viewport} <code>this</code> for method chaining.
             */
            setPredefinedView: function(view) {
                var zoomTo;
                switch (view) {
                case sap.ui.vtm.PredefinedView.Top:
                    zoomTo = sap.ui.vk.ZoomTo.ViewTop;
                    break;
                case sap.ui.vtm.PredefinedView.Bottom:
                    zoomTo = sap.ui.vk.ZoomTo.ViewBottom;
                    break;
                case sap.ui.vtm.PredefinedView.Front:
                    zoomTo = sap.ui.vk.ZoomTo.ViewFront;
                    break;
                case sap.ui.vtm.PredefinedView.Back:
                    zoomTo = sap.ui.vk.ZoomTo.ViewBack;
                    break;
                case sap.ui.vtm.PredefinedView.Left:
                    zoomTo = sap.ui.vk.ZoomTo.ViewLeft;
                    break;
                case sap.ui.vtm.PredefinedView.Right:
                    zoomTo = sap.ui.vk.ZoomTo.ViewRight;
                    break;
                default:
                    throw "Unexpected view value: '" + view + "'.";
                }
                this._getVkViewport().zoomTo(zoomTo, null, 0.2, 0);
                return this;
            },

            /**
             * Retrieves an object containing the current camera information for this viewport.
             *
             * This value can then be passed to {@link sap.ui.vtm.Viewport#setCameraInfo setCameraInfo} to restore the camera position at a later point in time.
             * @public
             * @function
        	 * @returns {object} An object containing the current camera information for this viewport.
             */
            getCameraInfo: function() {
                var viewInfo = this._getVkViewport().getViewInfo({
                    camera: {
                        useTransitionCamera: true
                    },
                    animation: false
                });
                return viewInfo.camera;
            },

            /**
             * Updates the camera for this viewport.
             * @public
             * @function
        	 * @param {object} cameraInfo An object containing camera information returned by {@link sap.ui.vtm.Viewport#getCameraInfo getCameraInfo}.
        	 * @param {float?} flyToDuration A duration in seconds for the transition to the new camera position. Defaults to 0.
        	 * @returns {sap.ui.vtm.Viewport} A reference to <code>this</code> to allow method chaining.
             */
            setCameraInfo: function(cameraInfo, flyToDuration) {
                var viewInfo = {
                    camera: cameraInfo,
                    flyToDuration: flyToDuration || 0
                };
                this._getVkViewport().setViewInfo(viewInfo);
                return this;
            },

            /**
             * Adds an override display group to the <code>overrideDisplayGroups</code> property.
             * @public
             * @function
             * @param {sap.ui.vtm.DisplayGroup} overrideDisplayGroup The override display group to add to the <code>overrideDisplayGroups</code> property.
             * @returns {sap.ui.vtm.Viewport} <code>this</code> for method chaining.
             */
            addOverrideDisplayGroup: function(overrideDisplayGroup) {
                var overrideDisplayGroups = this.getOverrideDisplayGroups();
                overrideDisplayGroups.push(overrideDisplayGroup);
                this.setOverrideDisplayGroups(overrideDisplayGroups);
                return this;
            },

            /**
             * Adds an override display group to the <code>overrideDisplayGroups</code> property.
             * @public
             * @function
             * @param {sap.ui.vtm.DisplayGroup} contextDisplayGroup The context display group to add to the <code>contextDisplayGroups</code> property.
             * @returns {sap.ui.vtm.Viewport} <code>this</code> for method chaining.
             */
            addContextDisplayGroup: function(contextDisplayGroup) {
                var contextDisplayGroups = this.getContextDisplayGroups();
                contextDisplayGroups.push(contextDisplayGroup);
                this.setContextDisplayGroups(contextDisplayGroups);
                return this;
            }
        });

        return Viewport;
    });
}; // end of sap/ui/vtm/Viewport.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Panel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.Panel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Panel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Splitter'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Panel",
    ["jquery.sap.global", "sap/ui/core/Control", "sap/ui/commons/Panel", "sap/ui/core/Title", "sap/m/VBox", "sap/ui/layout/Splitter", "./Tree", "./Viewport"],
    function (jQuery, SapUiCoreControl, SapUiCommonsPanel, SapUiCoreTitle, SapMVBox, SapUiLayoutSplitter, SapUiVtmTree, SapUiVtmViewport) {

        "use strict";

        /**
         * Constructor for a new Panel.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @public
         * @class
         * A control that represents a VTM panel.
         * Contains:
         * <ul>
         * <li>A header area containing a title and optionally a set of application controls</li>
         * <li>A sap.ui.vtm.Tree and a sap.ui.vtm.Viewport separated by a splitter</li>
         * </ul>
         * @author SAP SE
         * @version 1.50.3
         * @name sap.ui.vtm.Panel
         * @extends sap.ui.core.Control
         * @param {string?} sId id for the new {@link sap.ui.vtm.Panel} instance.
         * @param {object?} mSettings Object with initial property values, aggregated objects etc. for the new {@link sap.ui.vtm.Panel} instance.<br/>
         * The <code>vtmId</code> association needs to be set in order for the panel to be associated with a {@link sap.ui.vtm.Vtm} instance.<br/>
         * {@link sap.ui.vtm.Vtm#createPanel createPanel} creates a {@link sap.ui.vtm.Panel} instance and populates the <code>vtmId</code> association.
         */
        var Panel = SapUiCoreControl.extend("sap.ui.vtm.Panel", /** @lends sap.ui.vtm.Panel.prototype */ {

            metadata: {
                properties: {
                    /**
                     * The text to show in the title bar for this panel.
                     */
                    title: {
                        type: "string"
                    },

                    /**
                     * Controls whether the viewport will be shown for this panel.
                     */
                    showViewport: {
                        type: "boolean",
                        defaultValue: true
                    },

                    /**
                     * The width of the tree.
                     */
                    treeWidth: {
                        type: "sap.ui.core.CSSSize",
                        defaultValue: "50%"
                    },
                    
                    /**
                     * The height of the panel.
                     */
                    height: {
                        type: "sap.ui.core.CSSSize",
                        defaultValue: "inherit"
                    }
                },
                aggregations: {
                    _panel: {
                        type: "sap.m.VBox",
                        multiple: false,
                        visibility: "hidden"
                    },

                    /**
                     * The set of controls to render in the title bar area.
                     */
                    titleControls: {
                        type: "sap.ui.core.Control",
                        multiple: "true"
                    },

                    /**
                     * The set of controls to render in the tree header area.
                     */
                    treeHeaderControls: {
                        type: "sap.ui.core.Control",
                        multiple: "true"
                    },

                    /**
                     * The set of controls to render in the viewport header area.
                     */
                    viewportHeaderControls: {
                         type: "sap.ui.core.Control",
                        multiple: "true"
                    }
                },
                associations : {
                    /**
                     * The {@link sap.ui.vtm.Vtm} instance this panel is associated with.
                     */
                    vtmId : {
                        type : "sap.ui.vtm.Vtm",
                        multiple : false
                    }
                },
                events: {
                    /**
                     * Raised when the panel is initialized.
                     */
                    initialized: {},

                    /**
                     * Raised when the web browser <code>contextmenu</code> event is raised.
                     * To prevent the default browser context menu from being shown call preventDefault() on the event.
                     */
                    contextMenu: {
                        parameters: {
                            /**
                             * The X coordinate of the mouse pointer in local (DOM content) coordinates.
                             */
                            clientX: { type: "int" },

                            /**
                             * The Y coordinate of the mouse pointer in local (DOM content) coordinates.
                             */
                            clientY: { type: "int" },

                            /**
                             * The X coordinate of the mouse pointer in page coordinates.
                             */
                            pageX: { type: "int"},

                            /**
                             * The X coordinate of the mouse pointer in page coordinates.
                             */
                            pageY: { type: "int" },

                            /**
                             * The X coordinate of the mouse pointer in screen coordinates.
                             */
                            screenX: { type: "int"},

                            /**
                             * The X coordinate of the mouse pointer in screen coordinates.
                             */
                            screenY: { type: "int" },

                            /**
                             * The jQuery event object.
                             */
                            eventData: { type: "object" }
                        },
                        allowPreventDefault: true
                    }
                }
            },

            init: function() {
                var sId = this.getId();
                var tree = this._tree = new sap.ui.vtm.Tree(sId + "_tree");
                var viewport = this._viewport = new sap.ui.vtm.Viewport(sId + "_viewport");
                var title = this._title = new sap.m.Title({
                    textAlign: sap.ui.core.TextAlign.Begin
                });

                var panelHeader = this._panelHeader = new sap.m.Bar({
                    contentLeft: [title]
                });

                this._treeLayout = new sap.ui.layout.SplitterLayoutData({
                    minSize: 10
                });
                var treeSplitPane = new sap.ui.layout.SplitPane({
                    content: tree,
                    demandPane: false,
                    requiredParentWidth: 50,
                    layoutData: this._treeLayout
                });

                this._viewportLayout = new sap.ui.layout.SplitterLayoutData({
                    minSize: 10
                });
                var viewportSplitPane = new sap.ui.layout.SplitPane({
                    content: viewport,
                    demandPane: false,
                    requiredParentWidth: 50,
                    layoutData: this._viewportLayout
                });

                var rootPaneContainer = new sap.ui.layout.PaneContainer({
                    panes: [treeSplitPane, viewportSplitPane]
                });

                var splitter = this._splitter = new sap.ui.layout.ResponsiveSplitter({
                    rootPaneContainer: rootPaneContainer,
                    defaultPane: treeSplitPane
                });

                var page = this._page = new sap.m.Page({
                    content: [splitter],
                    customHeader: panelHeader,
                    layoutData: new sap.m.FlexItemData({minHeight: "100%", maxHeight: "100%"})
                });

                var contextMenuEventHandler = function (ev) {
                    var allowDefaultAction;

                    sap.ui.vtm.measure(this, "fireContextMenu", function() {
                        allowDefaultAction = this.fireContextMenu({
                            clientX: ev.clientX,
                            clientY: ev.clientY,
                            pageX: ev.pageX,
                            pageY: ev.pageY,
                            screenX: ev.screenX,
                            screenY: ev.screenY,
                            eventData: ev
                        });
                    }.bind(this));

                    if (!allowDefaultAction) {
                        ev.preventDefault();
                    }
                }.bind(this);

                page.addEventDelegate({
                    oncontextmenu: contextMenuEventHandler
                }, page);

                var panel = new sap.m.VBox({
                    fitContainer: true,
                    renderType: sap.m.FlexRendertype.Bare,
                    items: [page]
                });

                this.setAggregation("_panel", panel);
                this.data("notUsed", "just a bug workaround"); // Workaround for bug in RenderManager.prototype.writeElementData

                this._oldPanes = [];
                this._setIsActive(false);
            },

            onAfterRendering: function() {
                if (!this._initialized) {
                    this._initialize();
                }
            },

            _initialize: function() {
                var vtm = this.getVtm();
                if (vtm) {
                    vtm._addPanel(this);
                    this._initialized = true;

                    sap.ui.vtm.measure(this, "fireInitialized", function() {
                        this.fireInitialized();
                    }.bind(this));
                }
            },

            destroy: function() {
                SapUiCoreControl.prototype.destroy.apply(this);
                this._destroyed = true;

                var allPanelsDestroyed = this.getVtm().getPanels().every(function(panel) {
                    return panel._destroyed === true;
                });
                if (allPanelsDestroyed) {
                    this.getVtm().getScene().destroy();
                }
            },

            onmousedown: function(oEvent) {
                this.getVtm()._setActivePanel(this, false);
            },

            onfocusin:  function(oEvent) {
                this.getVtm()._setActivePanel(this, false);
            },

            onfocusout: function(oEvent){
                var vtm = this.getVtm();
                if (vtm.getActivePanel() === this) {
                    vtm._setActivePanel(null, false);
                }
            },

            addTreeHeaderControl: function(oTreeHeaderControl) {
                return this.getTree().addHeaderControl(oTreeHeaderControl);
            },

            addViewportHeaderControl: function(oViewportHeaderControl) {
                return this.getViewport().addHeaderControl(oViewportHeaderControl);
            },

            destroyTreeHeaderControls: function() {
                return this;
            },

            destroyViewportHeaderControls: function() {
                return this;
            },

            getTreeHeaderControls: function() {
                return this.getTree().getHeaderControls();
            },

            getViewportHeaderControls: function() {
                return this.getViewport().getHeaderControls();
            },

            indexOfTreeHeaderControl: function(oTreeHeaderControl) {
                return this.getTree().indexOfHeaderControl(oTreeHeaderControl);
            },

            indexOfViewportHeaderControl: function(oViewportHeaderControl) {
                return this.getViewport().indexOfHeaderControl(oViewportHeaderControl);
            },

            insertTreeHeaderControl: function(oTreeHeaderControl, iIndex) {
                return this.getTree().insertHeaderControl(oTreeHeaderControl, iIndex);
            },

            insertViewportHeaderControl: function(oViewportHeaderControl, iIndex) {
                return this.getViewport().insertHeaderControl(oViewportHeaderControl, iIndex);
            },

            removeAllTreeHeaderControls: function() {
                return this.getTree().removeAllControls();
            },

            removeAllViewportHeaderControls: function() {
                return this.getViewport().removeAllControls();
            },

            removeTreeHeaderControl: function(vTreeHeaderControl) {
                return this.getTree().removeControl(vTreeHeaderControl);
            },

            removeViewportHeaderControl: function(vViewportHeaderControl) {
                return this.getViewport().removeControl(vViewportHeaderControl);
            },

            _getDelegatedAggregation: function(sAggregationName) {
                switch (sAggregationName) {
                case "treeHeaderControls":
                    return {
                        control: this.getTree(),
                        aggregationName: sAggregationName
                    };
                case "viewportHeaderControls":
                    return {
                        control: this.getViewport(),
                        aggregationName: sAggregationName
                    };
                case "titleControls":
                    return {
                        control: this._panelHeader,
                        name: "contentRight"
                    };
                default:
                    return null;
                }
            },

            addAggregation: function(sAggregationName, oObject, bSuppressInvalidate) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return delegatedAggregation.control.addAggregation(delegatedAggregation.name, oObject, bSuppressInvalidate);
                } else {
                    return SapUiCoreControl.prototype.addAggregation.apply(this, [sAggregationName, oObject, bSuppressInvalidate]);
                }
            },

            bindAggregation: function(sAggregationName, oBindingInfo) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return delegatedAggregation.control.bindAggregation(delegatedAggregation.name);
                } else {
                    return SapUiCoreControl.prototype.bindAggregation.apply(this, [sAggregationName]);
                }
            },

            destroyAggregation: function(sAggregationName, bSuppressInvalidate) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return this;
                } else {
                    return SapUiCoreControl.prototype.destroyAggregation.apply(this, [sAggregationName, bSuppressInvalidate]);
                }
            },

            // Don't redefine findAggregatedObjects

            getAggregation: function(sAggregationName, oDefaultForCreation) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return delegatedAggregation.control.getAggregation(delegatedAggregation.name, oDefaultForCreation);
                } else {
                    return SapUiCoreControl.prototype.getAggregation.apply(this, [sAggregationName, oDefaultForCreation]);
                }
            },

            indexOfAggregation: function(sAggregationName, oObject) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return delegatedAggregation.control.indexOfAggregation(delegatedAggregation.name, oObject);
                } else {
                    return SapUiCoreControl.prototype.indexOfAggregation.apply(this, [sAggregationName, oObject]);
                }
            },

            insertAggregation: function(sAggregationName, oObject, iIndex, bSuppressInvalidate) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return delegatedAggregation.control.insertAggregation(delegatedAggregation.name, oObject, iIndex, bSuppressInvalidate);
                } else {
                    return SapUiCoreControl.prototype.insertAggregation.apply(this, [sAggregationName, oObject, iIndex, bSuppressInvalidate]);
                }
            },

            removeAggregation: function(sAggregationName, vObject, bSuppressInvalidate) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return delegatedAggregation.control.removeAggregation(delegatedAggregation.name, sAggregationName, vObject, bSuppressInvalidate);
                } else {
                    return SapUiCoreControl.prototype.removeAggregation.apply(this, [sAggregationName, vObject, bSuppressInvalidate]);
                }
            },

            removeAllAggregation: function(sAggregationName, bSuppressInvalidate) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return delegatedAggregation.control.removeAllAggregation(delegatedAggregation.name, sAggregationName, bSuppressInvalidate);
                } else {
                    return SapUiCoreControl.prototype.removeAllAggregation.apply(this, [sAggregationName, bSuppressInvalidate]);
                }
            },

            setAggregation: function(sAggregationName, oObject, bSuppressInvalidate) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return delegatedAggregation.control.setAggregation(delegatedAggregation.name, oObject, bSuppressInvalidate);
                } else {
                    return SapUiCoreControl.prototype.setAggregation.apply(this, [sAggregationName, oObject, bSuppressInvalidate]);
                }
            },

            unbindAggregation: function(sAggregationName, bSuppressReset) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return delegatedAggregation.control.unbindAggregation(delegatedAggregation.name, bSuppressReset);
                } else {
                    return SapUiCoreControl.prototype.unbindAggregation.apply(this, [sAggregationName, bSuppressReset]);
                }
            },

            validateAggregation: function(sAggregationName, oObject, bMultiple) {
                var delegatedAggregation = this._getDelegatedAggregation(sAggregationName);
                if (delegatedAggregation) {
                    return delegatedAggregation.control.validateAggregation(delegatedAggregation.name, oObject, bMultiple);
                } else {
                    return SapUiCoreControl.prototype.validateAggregation.apply(this, [sAggregationName, oObject, bMultiple]);
                }
            },

            _getPanel: function () {
                return this.getAggregation("_panel");
            },

            _getTreeLayoutData: function() {
                return this._treeLayout;
            },

            _getViewportLayoutData: function() {
                return this._viewportLayout;
            },

            renderer: function (oRM, oControl) {
                oRM.write("<div");
                oRM.writeControlData(oControl);
                oRM.addStyle("height", oControl.getHeight());
                oRM.writeStyles();
                oRM.writeClasses();
                oRM.write(">");
                var panel = oControl._getPanel();
                oRM.renderControl(panel);
                oRM.write("</div>");
            },

            /**
             * Sets the panel title.
             * @public
             * @function
             * @param {string} title The panel title text
             * @returns {sap.ui.vtm.Panel} Returns <code>this</code> for method chaining.
             */
            setTitle: function (title) {
                this._title.setText(title);
                this.setProperty("title", title);
                return this;
            },

            /**
             * Gets the tree owned by this panel.
             * @public
             * @function
             * @returns {sap.ui.vtm.Tree} The tree owned by this panel.
             */
            getTree: function () {
                return this._tree;
            },

            /**
             * Gets the viewport owned by this panel.
             * @public
             * @function
             * @returns {sap.ui.vtm.Viewport} The viewport owned by this panel.
             */
            getViewport: function () {
                return this._viewport;
            },

            setShowViewport: function(bShowViewport) {
                if (bShowViewport === this.getShowViewport()) {
                    return this;
                }
                var _currentWidth = this.getTreeWidth();
                this.setProperty("showViewport", bShowViewport);
                var defaultPane = this._splitter.getDefaultPane();
                var rootPane = this._splitter.getRootPaneContainer();
                var panes = rootPane.getPanes();
                if (!bShowViewport) {
                    this._oldTreeWidth = _currentWidth;
                    panes.forEach(function(pane) {
                        if (pane.getId() !== defaultPane) {
                            rootPane.removePane(pane);
                            this._oldPanes.push(pane);
                        }
                    }.bind(this));
                    this.setTreeWidth("auto");
                } else {
                    this._oldPanes.forEach(function(pane) {
                        rootPane.addPane(pane);
                    });
                    this._oldPanes = [];
                    this.setTreeWidth(this._oldTreeWidth);
                    this._oldTreeWidth = null;
                }
                return this;
            },

            /**
             * Gets the {@link sap.ui.vtm.Vtm} instance that owns this panel.
             * @public
             * @function
             * @returns {sap.ui.vtm.Vtm} The {@link sap.ui.vtm.Vtm} instance that owns this panel.
             */
            getVtm: function () {
                if (!this._vtm) {
                    this._vtm = sap.ui.getCore().byId(this.getVtmId());
                }
                return this._vtm;
            },

            /**
             * Sets whether this is the active {@link sap.ui.vtm.Panel}.
             * @function
             * @private
             * @param {boolean} bIsActive <true> if this {@link sap.ve.vtm.Panel} is the active {@link sap.ve.vtm.Panel}.
             * @returns {sap.ui.vtm.Panel} Reference to <code>this</code> for method chaining.
             */
            _setIsActive : function (bIsActive) {
                var currentlyActive = this._isActive;
                if (currentlyActive !== bIsActive) {
                    this._isActive = bIsActive;
                    var panel = this._getPanel();
                    if (bIsActive) {
                        panel.addStyleClass("sapUiVtmPanel_ActiveBorder");
                        panel.removeStyleClass("sapUiVtmPanel_InactiveBorder");
                    } else {
                        panel.addStyleClass("sapUiVtmPanel_InactiveBorder");
                        panel.removeStyleClass("sapUiVtmPanel_ActiveBorder");
                    }
                }
                return this;
            },

            /**
             * Gets whether this is the active {@link sap.ui.vtm.Panel}.
             * @function
             * @public
             * @returns {boolean} <code>true</code> if this is the active panel.
             */
            getIsActive: function() {
                return this._isActive;
            },

            getTreeWidth: function() {
                if (!this.getShowViewport()) {
                    return "100%";
                }
                var treeLayoutData = this._getTreeLayoutData();
                var size = treeLayoutData.getSize();
                if (size === "auto") {
                    return "50%"; // default value
                }
                return size;
            },

            setTreeWidth: function(sTreeWidth) {
                if (!sTreeWidth) {
                    return this;
                }

                if (sTreeWidth === "auto") {
                    sTreeWidth = this.getShowViewport() ? "50%" : "100%";
                }

                var percent = sTreeWidth.indexOf("%") > -1;
                var treeLayoutData = this._getTreeLayoutData();
                var viewportLayoutData = this._getViewportLayoutData();

                if (sTreeWidth.indexOf("px") > -1 || percent) {
                    var iSize = parseInt(sTreeWidth, 10);
                    if (iSize < 0) {
                        jQuery.sap.log.error("Negative treeWidth values are not permitted", null, "sap.ui.vtm.Panel");
                        return this;
                    }
                    if (percent && iSize > 100) {
                        sTreeWidth = "100%";
                    }
                } else {
                    var message = "Illegal treeWidth value: " + sTreeWidth;
                    jQuery.sap.log.error(message, null, "sap.ui.vtm.Panel");
                    return this;
                }

                treeLayoutData.setSize(sTreeWidth);
                viewportLayoutData.setSize("auto");
                return this;
            }
        });

        return Panel;
    });

}; // end of sap/ui/vtm/Panel.js
if ( !jQuery.sap.isDeclared('sap.ui.vtm.Vtm') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vtm.Vtm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
sap.ui.define("sap/ui/vtm/Vtm",
    ["jquery.sap.global", "sap/ui/core/Element", "./Panel", "./Scene", "./ArrayUtilities", "./Viewable", "sap/m/Toolbar"],
    function (jQuery, SapUiCoreElement, SapUiVtmPanel, SapUiVtmScene, SapUiVtmArrayUtilities, SapUiVtmViewable, SapMToolbar) {

        "use strict";

        /**
         * Constructor for a new Vtm.
         * This constructor can be used to construct an instance of {@link sap.ui.vtm.Vtm} with a specific set of extensions.
         * Alternatively {@link sap.ui.vtm.createVtm} can be used to create a {@link sap.ui.vtm.Vtm} instance with a default set of extensions.
         * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
         * @name sap.ui.vtm.Vtm
         * @public
         * @class
         * The main entry point for constructing VTM controls.
         * @author SAP SE
         * @version 1.50.3
         * @constructor
         * @param {string?} sId The id to use for the {@link sap.ui.vtm.Vtm} instance.
         * @param {object?} mSettings A set of settings for the {@link sap.ui.vtm.Vtm} instance (normally used to populate the <code>extensions</code> aggregation).
         * @extends sap.ui.core.Element
         */
        var Vtm = SapUiCoreElement.extend("sap.ui.vtm.Vtm", /** @lends sap.ui.vtm.Vtm.prototype */ {

            metadata: {
                properties: {
                    /**
                     * When true populates the <code>extensions</code> aggregation with the default set of extensions in the default configuration.
                     */
                    addDefaultExtensions: {type: "boolean"}
                },
                events: {
                    /**
                     * Raised when a panel has been added.
                     */
                    panelAdded: {
                        parameters: {
                            panel: { type: "sap.ui.vtm.Panel" }
                        }
                    },

                    /**
                     * Raised when the active panel has changed.
                     */
                    activePanelChanged: {},

                    /**
                     * Raised when this {@link sap.ui.vtm.Vtm} instance and its extensions have been initialized.
                     * 
                     * Applications should add event handlers after the {@link sap.ui.vtm.Vtm} instance has initialized so that
                     * the extensions can attach event handlers before the application attempts to attach event handlers to the same events.
                     */
                    initialized: {}
                },
                aggregations: {
                    /**
                     * The set of VTM extensions. Extensions are used to provide extensibility.
                     * Default behaviors are implemented as extensions that can be replaced.
                     */
                    extensions: {
                        type: "sap.ui.vtm.Extension",
                        multiple: true
                    }
                },
                defaultAggregation: "extensions"
            },

            constructor: function (sId, mSettings) {
                SapUiCoreElement.apply(this, arguments);
                this._panels = [];
                this._scene = new sap.ui.vtm.Scene(this.getId() + "_scene");
                this.addDependent(this._scene);
                this._dragStartParameters = {};

                var extensionInitializedPromises = this.getExtensions().map(function(extension) {
                    return extension.getInitializedPromise();
                });
                Promise.all(extensionInitializedPromises).then(function() {
                    sap.ui.vtm.measure(this, "fireInitialized", function() {
                        this.fireInitialized();
                    }.bind(this));
                }.bind(this));
            },

            setAddDefaultExtensions: function(bAddDefaultExtensions) {
                if (bAddDefaultExtensions) {
                    [
                        new sap.ui.vtm.extensions.SyncSelectionOnTreeChangeExtension(),
                        new sap.ui.vtm.extensions.LoadProgressExtension(),
                        new sap.ui.vtm.extensions.MessageStatusCalculationExtension(),
                        new sap.ui.vtm.extensions.MessageStatusIconClickExtension(),
                        new sap.ui.vtm.extensions.ViewportSelectionLinkingExtension(),
                        new sap.ui.vtm.extensions.VisibilityIconClickExtension(),
                        new sap.ui.vtm.extensions.DisplayStateCalculationExtension(),
                        new sap.ui.vtm.extensions.SelectionLinkingExtension({ enabled: false }),
                        new sap.ui.vtm.extensions.SelectionKeepingExtension(),
                        new sap.ui.vtm.extensions.ViewLinkingExtension({ enabled: false }),
                        new sap.ui.vtm.extensions.InitialViewExtension(),
                        new sap.ui.vtm.extensions.SceneNodeHoverHighlightExtension(),
                        new sap.ui.vtm.extensions.SceneNodeHoverTooltipExtension()
                    ].forEach(function(extension) {
                        this.addExtension(extension);
                    }.bind(this));
                }
            },

            /**
             * Gets the set of created panels.
             * Do not modify the returned array.
             * @public
             * @function
             * @returns {sap.ui.vtm.Panel[]} The created panels.
             */
            getPanels: function () {
                return this._panels;
            },

            /**
             * Gets a panel given its id. Returns undefined if no match is found.
             * @public
             * @function
             * @param {string} panelId The id of the panel to find.
             * @returns {sap.ui.vtm.Panel|undefined} The matching panel or undefined if no match is found.
             */
            getPanel: function (panelId) {
                return sap.ui.vtm.ArrayUtilities.find(this._panels, function (panel) {
                    return panel.getId() === panelId;
                });
            },

            /**
             * Gets the scene.
             * @public
             * @function
             * @returns {sap.ui.vtm.Scene} The scene.
             */
            getScene: function () {
                return this._scene;
            },

            /**
             * Creates a VTM panel associated with this {@link sap.ui.vtm.Vtm} instance.
             * @public
             * @function
             * @param {string?} sId The ID to pass to the panel constructor.
             * @param {object?} mSettings The settings to pass to the panel constructor.
             * @returns {sap.ui.vtm.Panel} The created panel.
             */
            createPanel: function (sId, mSettings) {
                mSettings = jQuery.extend(mSettings, {
                    vtmId: this
                });
                return new sap.ui.vtm.Panel(sId, mSettings);
             },

            /**
             * Sets the active panel
             * @function
             * @private
             * @param {sap.ui.vtm.Panel} oActivePanel The active panel.
             * @param {boolean} bSetFocus If <code>true</code> the focus will be set to the active panel.
             * @fires activePanelChanged
             */
            _setActivePanel: function(oActivePanel, bSetFocus) {
                if (this._activePanel === oActivePanel) {
                    return;
                }
                this._activePanel = oActivePanel;
                var panels = this.getPanels();
                panels.forEach(function(panel) {
                    var isActive = panel === oActivePanel;
                    panel._setIsActive(isActive);
                    if (bSetFocus) {
                        oActivePanel.focus();
                    }
                });

                sap.ui.vtm.measure(this, "fireActivePanelChanged", function() {
                    this.fireActivePanelChanged();
                }.bind(this));
            },

            /**
             * Gets the active panel.
             * @function
             * @public
             * @returns {sap.ui.vtm.Panel|null} The active panel, or null if there is no active panel.
             */
            getActivePanel: function() {
               return this._activePanel || null;
            },

            /**
             * Sets the active panel.
             * @function
             * @public
             * @param {sap.ui.vtm.Panel} oActivePanel The active panel.
             * @returns {sap.ui.vtm.Vtm} A reference to <code>this</code> for method chaining.
             * @fires activePanelChanged
             */
            setActivePanel: function(oActivePanel) {
                this._setActivePanel(oActivePanel, true);
                return this;
            },

            /**
             * Adds a panel to the panels collection.
             * @private
             * @function
             * @param {sap.ui.vtm.Panel} panel The panel to add.
             * @returns {sap.ui.vtm.Vtm} <code>this</code> for method chaining.
             * @fires panelAdded
             */
            _addPanel: function(panel) {
                var panels = this.getPanels();
                panels.push(panel);

                sap.ui.vtm.measure(this, "firePanelAdded", function() {
                    this.firePanelAdded({panel: panel});
                }.bind(this));

                return this;
            },

            /**
             * Gets the extensions with a specified class name.
             * @public
             * @function
             * @param {string} sExtensionName The fully qualified class name of the extension.
             * @returns {sap.ui.vtm.Extension[]} The matching extensions.
             */
            getExtensionsByName: function(sExtensionName) {
                return this.getExtensions().filter(function(extension) {
                    return extension.getMetadata().getName() === sExtensionName;
                });
            },

            /**
             * Gets an extension with a specified class name.
             *
             * Returns <code>undefined</code> if there is not exactly one matching extension.
             * @public
             * @function
             * @param {string} sExtensionName The fully qualified class name of the extension.
             * @returns {sap.ui.vtm.Extension|undefined} The matching extension or <code>undefined</code> if there is not exactly one matching extension.
             */
            getExtensionByName: function(sExtensionName) {
                var extensions = this.getExtensionsByName(sExtensionName);
                return extensions.length === 1 ? extensions[0] : undefined;
            },

            /**
             * Gets the extensions implementing a specified interface.
             * @public
             * @function
             * @param {string} sInterfaceName The fully qualified name of the interface.
             * @returns {sap.ui.vtm.Extension[]} The matching extensions.
             */
            getExtensionsByInterface: function(sInterfaceName) {
                return this.getExtensions().filter(function(extension) {
                    return extension.getMetadata().isInstanceOf(sInterfaceName);
                });
            },

            /**
             * Gets the extension implementing a specified interface.
             *
             * Returns <code>undefined</code> if there is not exactly one matching extension.
             * @public
             * @function
             * @param {string} sInterfaceName The fully qualified name of the interface.
             * @returns {sap.ui.vtm.Extension|undefined} The matching extension or <code>undefined</code> if there is not exactly one matching extension.
             */
            getExtensionByInterface: function(sInterfaceName) {
                var extensions = this.getExtensionsByInterface(sInterfaceName);
                return extensions.length === 1 ? extensions[0] : undefined;
            }
        });

        return Vtm;
    });

}; // end of sap/ui/vtm/Vtm.js
