{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "core\\src\\XLSXBuilder.js",
    "core\\src\\binding\\Column.js",
    "core\\src\\binding\\ColumnConfiguration.js",
    "core\\src\\binding\\type\\BooleanType.js",
    "core\\src\\binding\\type\\CalendarDate.js",
    "core\\src\\binding\\type\\Currency.js",
    "core\\src\\binding\\type\\Numeric.js",
    "core\\src\\binding\\type\\Text.js",
    "core\\src\\binding\\type\\Type.js",
    "core\\src\\data\\Cell.js",
    "core\\src\\data\\Row.js",
    "core\\src\\data\\SharedString.js",
    "core\\src\\data\\SharedStrings.js",
    "core\\src\\data\\Sheet.js",
    "core\\src\\objects\\App.js",
    "core\\src\\objects\\ContentTypes.js",
    "core\\src\\objects\\Core.js",
    "core\\src\\objects\\Relationships.js",
    "core\\src\\objects\\Workbook.js",
    "core\\src\\style\\Alignment.js",
    "core\\src\\style\\Border.js",
    "core\\src\\style\\Fill.js",
    "core\\src\\style\\Font.js",
    "core\\src\\style\\NumberFormat.js",
    "core\\src\\style\\Style.js",
    "core\\src\\style\\Styles.js",
    "core\\src\\xml\\XMLAttribute.js",
    "core\\src\\xml\\XMLElement.js",
    "core\\src\\xml\\XMLNode.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var App\t\t\t\t\t= require('./objects/App'),\n\tColumn\t\t\t\t= require('./binding/Column'),\n\tColumnConfiguration\t= require('./binding/ColumnConfiguration'),\n\tContentTypes\t\t= require('./objects/ContentTypes'),\n\tCore\t\t\t\t= require('./objects/Core'),\n\tRelationships\t\t= require('./objects/Relationships'),\n\tSharedStrings\t\t= require('./data/SharedStrings'),\n\tSheet\t\t\t\t= require('./data/Sheet'),\n\tStyles\t\t\t\t= require('./style/Styles'),\n\tWorkbook\t\t\t= require('./objects/Workbook');\n\n/**\n * The XLSXBuilder class represents an Office Open XML Spreadsheet\n * (Microsoft Excel) that can be used to insert structured and\n * formatted data and pack a zipped *.xlsx document.\n *\n * XLSXBuilder requires JSZip 2.x or 3.x to be present.\n *\n * @param {(Object[]|string[])} aBinding - Binding configuration that is used for {@link Column} definition\n * @param {Object} [oContext] - Context object containing metadata for this particular XLSX\n * @param {string} [oContext.application] - Application that created this XLSX\n * @param {string} [oContext.version] - Application version that was used to create this XLSX\n * @param {string} [oContext.title] - Title of the XLSX document\n * @param {string} [oContext.modifiedBy] - User context for the exported document\n * @constructor\n */\nfunction XLSXBuilder(aBinding, oContext) {\n\tif (!(aBinding instanceof Array) || !aBinding.length) {\n\t\tthrow new Error('No binding provided');\n\t}\n\n\tthis.styles = new this.objects.Styles();\n\tthis.sheet = new this.objects.Sheet(new this.binding.ColumnConfiguration(aBinding, this.styles));\n\n\tthis.app = new this.objects.App(oContext);\n\tthis.core = new this.objects.Core(oContext);\n}\n\nXLSXBuilder.prototype = {\n\n\tbinding: {\n\t\tColumnConfiguration: ColumnConfiguration,\n\t\tColumn: Column\n\t},\n\n\tobjects: {\n\t\tApp: App,\n\t\tContentTypes: ContentTypes,\n\t\tCore: Core,\n\t\tRelationships: Relationships,\n\t\tSharedStrings: SharedStrings,\n\t\tSheet: Sheet,\n\t\tStyles: Styles,\n\t\tWorkbook: Workbook\n\t},\n\n\t/**\n\t * Triggers the packaging process for the Office Open XML\n\t * SpreadSheet. You need to call the method insert() first,\n\t * otherwise the generated Document will contain no data.\n\t *\n\t * The method returns a promise to allow the library to work\n\t * asynchronously.\n\t *\n\t * @function build\n\t * @returns {object} - Packed zip file as Blob or Nodebuffer, depending on the runtime environment\n\t */\n\tbuild: function() {\n\t\tvar files, zip, i, j, fileConfig, FileType, xmlObject, relation, zipConfig, promise;\n\n\t\tfiles = [\n\t\t\t{\n\t\t\t\tname: '[Content_Types].xml',\n\t\t\t\tpath: '',\n\t\t\t\ttype: this.objects.ContentTypes\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: '.rels',\n\t\t\t\tpath: '_rels/',\n\t\t\t\ttype: this.objects.Relationships,\n\t\t\t\trelationships: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'xl/workbook.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'docProps/app.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'docProps/core.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'workbook.xml',\n\t\t\t\tpath: 'xl/',\n\t\t\t\ttype: this.objects.Workbook\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'workbook.xml.rels',\n\t\t\t\tpath: 'xl/_rels/',\n\t\t\t\ttype: this.objects.Relationships,\n\t\t\t\trelationships: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'worksheets/sheet1.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'sharedStrings.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: 'styles.xml',\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tzip = new JSZip();\n\n\t\tfor (i = 0; i < files.length; i++) {\n\t\t\tfileConfig = files[i];\n\t\t\tFileType = fileConfig.type;\n\t\t\txmlObject = new FileType(fileConfig);\n\n\t\t\tif (xmlObject instanceof this.objects.Relationships) {\n\t\t\t\tfor (j = 0; j < fileConfig.relationships.length; j++) {\n\t\t\t\t\trelation = fileConfig.relationships[j];\n\t\t\t\t\txmlObject.addRelationship(relation.target, relation.type);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tzip.file(fileConfig.path + fileConfig.name, xmlObject.serialize());\n\t\t}\n\n\t\t// Add document metadata\n\t\tzip.file('docProps/app.xml', this.app.serialize());\n\t\tzip.file('docProps/core.xml', this.core.serialize());\n\n\t\t// Add central styles\n\t\tzip.file('xl/styles.xml', this.styles.serialize());\n\n\t\t// Add current sheet\n\t\tzip.file('xl/worksheets/sheet1.xml', this.sheet.serialize());\n\n\t\t// Add Shared Strings Singleton\n\t\tzip.file('xl/sharedStrings.xml', this.objects.SharedStrings.getInstance().serialize());\n\n\t\tzipConfig = {\n\t\t\tcompression: 'DEFLATE',\n\t\t\ttype: JSZip.support.nodebuffer ? 'nodebuffer' : 'arraybuffer'\n\t\t};\n\n\t\tif (zip.generateAsync) {\n\t\t\tpromise = zip.generateAsync(zipConfig);\n\t\t} else { // Zip.generate from JSZip 2.x\n\t\t\tpromise = new Promise(function(resolve, reject) {\n\t\t\t\tvar zipped = zip.generate(zipConfig);\n\n\t\t\t\tresolve(zipped);\n\t\t\t});\n\t\t}\n\n\t\treturn promise;\n\t},\n\n\t/**\n\t * Insert the specified set of data to the Open Document Spreadsheet.\n\t * All data will be bound according to the {@link ColumnConfiguration}.\n\t *\n\t * @function append\n\t * @param {(Object[]|Object)} aData - Array of data that gets appended to the Spreadsheet\n\t */\n\tappend: function(aData) {\n\t\tvar array;\n\n\t\t/* We need to check if param is null or undefined because [null].length results in 1 */\n\t\tif (typeof aData === 'undefined' || aData === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tarray = aData instanceof Array ? aData : [aData];\n\n\t\twhile (array.length) {\n\t\t\tthis.sheet.insert(array.shift());\n\t\t}\n\t}\n};\n\nmodule.exports = XLSXBuilder;",
    "var Cell\t\t\t= require('../data/Cell'),\n\tCalendarDate \t= require('../binding/type/CalendarDate'),\n\tNumeric \t\t= require('../binding/type/Numeric'),\n\tCurrency \t\t= require('../binding/type/Currency'),\n\tBooleanType \t= require('../binding/type/BooleanType'),\n\tText\t\t \t= require('../binding/type/Text');\n\n/**\n * The Column class represents the field type of columns. It handles\n * styling, data types and data binding.\n *\n * @param {(Object|string)} oData - Data object representing the Column configuration\n * @param {string} oData.property - References the data object property that is bound as value for this column\n * @param {string} [oData.align] - Optional alignment. Default: Column.Align.Left\n * @param {string} [oData.label] - Optional column label that will be shown in the header row\n * @param {string} [oData.type] - Optional data type for this column. Default: Column.Type.Text\n * @param {string} [oData.width] - Optional width of the\n * @param {Styles} oStyles - Styles collection that is needed to register each Style a Column uses\n * @class\n * @module binding/Column\n */\nfunction Column(oData, oStyles) {\n\tvar oColumnData;\n\n\t/* Fallback assignment if only a key is provided */\n\toColumnData = typeof oData === 'string' ? {property: oData} : oData;\n\tif (!oColumnData || !oColumnData.property) { throw new Error('The property for the column is not defined'); }\n\n\tthis.align = oColumnData.align ? oColumnData.align : Column.Align.Left;\n\tthis.property = oColumnData.property;\n\tthis.label = oColumnData.label ? oColumnData.label : oColumnData.property;\n\tthis.width = oColumnData.width;\n\tthis.styles = oStyles;\n\tthis.type = this._initType(oColumnData);\n}\n\nColumn.Align = {\n\tLeft: 'left',\n\tCenter: 'center',\n\tRight: 'right'\n};\n\n/**\n * Initializes the data type for this Column. Type specific\n * formatting information will be evaluated and applied.\n *\n * @param {Object} oData - Configuration object for this Column that also contains type and formatting information\n * @param {string} oData.type - Specifies the data type\n * @param {boolean} [oData.delimiter] - Specifies if a thousands delimiter is shown\n * @param {number} [oData.scale] - Specifies the the decimal scale\n * @param {string} [oData.calendar] - Specifies the calendar if type is date, datetime or time\n * @param {string} [oData.format] - Specifies a custom format if type is date, datetime or time\n * @param {string} [oData.unit] - Specifies the UoM if type is number.\n * @param {string} [oData.unitProperty] - Name of the property that contains the UoM if type is number or currency.\n * @param {boolean} [oData.displayUnit] - Specifies if the UoM will be shown or not if type is number or currency.\n * @param {string} [oData.trueValue] - Specifies the displayed value if the boolean type has the value true.\n * @param {string} [oData.falseValue] - Specifies the displayed value if the boolean type has the value false.\n *\n * @returns {Type} - Returns the specific Type object that contains all the formatting\n * @private\n */\nColumn.prototype._initType = function(oData) {\n\tvar type, sType;\n\n\tsType = oData.type;\n\n\tif (sType === 'date' || sType === 'datetime' || sType === 'time') {\n\t\ttype = new CalendarDate({\n\t\t\tcalendar: oData.calendar,\n\t\t\tformat: oData.format,\n\t\t\ttype: sType\n\t\t});\n\t} else if (sType === 'number' || sType === 'percent' || sType === 'exponent') {\n\t\ttype = new Numeric({\n\t\t\tdelimiter: oData.delimiter,\n\t\t\tscale: oData.scale,\n\t\t\ttype: oData.type,\n\t\t\tunit: oData.unit,\n\t\t\tunitProperty: oData.unitProperty\n\t\t});\n\t} else if (sType === 'currency') {\n\t\ttype = new Currency({\n\t\t\ttype: sType,\n\t\t\tunitProperty: oData.unitProperty,\n\t\t\tdisplayUnit: oData.displayUnit,\n\t\t\tscale: oData.scale\n\t\t});\n\t} else if (sType === 'boolean') {\n\t\ttype = new BooleanType({\n\t\t\ttrueValue: oData.trueValue,\n\t\t\tfalseValue: oData.falseValue\n\t\t});\n\t} else {\n\t\ttype = new Text();\n\t}\n\n\ttype.registerAt(this.styles);\n\n\treturn type;\n};\n\n/**\n * Returns the Cell object that is referenced by this particular\n * Column. Every Column references only one single Cell that gets\n * reused for each and every Row.\n *\n * When binding the actual data to a row, the Cell content, its\n * references and its styling get updated and a serialized version\n * of the row is stored within the sheet.\n *\n * @returns {Cell} - The Cell that belongs to this particular Column\n */\nColumn.prototype.getCell = function() {\n\tif (!this.cell) {\n\t\tthis.cell = new Cell(this.type);\n\t}\n\n\treturn this.cell;\n};\n\n/**\n * This method binds the actual business object property to the columns cell.\n *\n * @param {object} oData - Business object that gets bound to the Cell of this Column.\n */\nColumn.prototype.bind = function(oData) {\n\n\t/*\n\t * Due to the fact that Cell#setValue updates the Style depending\n\t * on the actual Cell value (i.E. Unit of Measurement for\n\t * Currencies), we need to provide the original business object\n\t * so that the Cell knows the whole business object instead of\n\t * just the value of its particular property.\n\t */\n\tthis.cell.setValue(oData[this.property], oData);\n};\n\nmodule.exports = Column;",
    "var Column\t= require('./Column'),\n\tText\t= require('./type/Text'),\n\tRow\t\t= require('../data/Row'),\n\tCell\t= require('../data/Cell');\n\n/**\n * ColumnConfiguration represents the configuration of all columns within\n * one Sheet. The ColumnConfiguration handles the mapping of object\n * properties to certain columns,, labeling, type definition and also\n * display information like width and alignment.\n *\n * @param {Array} aColumnConfig -  An array of Column definitions. {@see Column} for further details\n * @param {Styles} oStyles - Style collection that is used to register Cell or row specific styles\n * @module binding/ColumnBinding\n * @constructor\n */\nfunction ColumnConfiguration(aColumnConfig, oStyles) {\n\tvar column, i;\n\n\tthis.columns = [];\n\tthis.row = null;\n\tthis.styles = oStyles;\n\n\tfor (i = 0; i < aColumnConfig.length; i++) {\n\t\tcolumn = aColumnConfig[i] instanceof Column ? aColumnConfig[i] : new Column(aColumnConfig[i], this.styles);\n\t\tthis.columns.push(column);\n\t}\n}\n\n/**\n * Initializes the objects that are necessary for the binding. This\n * components are:\n * - a template Row\n * - a Cell for each Column\n * - a Style for each data type referenced by each Column\n *\n * @private\n */\nColumnConfiguration.prototype._initBinding = function() {\n\tvar i;\n\n\tthis.row = new Row();\n\n\tfor (i = 0; i < this.columns.length; i++) {\n\t\tthis.row.addCell(this.columns[i].getCell());\n\t}\n};\n\n\n/**\n * Creates an new Row and binds the provided data to the Row Cells according to the current ColumnConfiguration.\n *\n * @param {Object} oData - The data object that has to be bound to the row\n * @returns {Row} - Returns the created Row that contains the provided data\n */\nColumnConfiguration.prototype.bind = function(oData) {\n\tvar i;\n\n\tif (this.row === null) {\n\t\tthis._initBinding();\n\t}\n\n\tfor (i = 0; i < this.columns.length; i++) {\n\t\tthis.columns[i].bind(oData);\n\t}\n\n\treturn this.row;\n};\n\n\n/**\n * Creates the header Row according to the current ColumnConfiguration and returns it.\n *\n * @returns {Row} - Header row according to the ColumnConfiguration\n */\nColumnConfiguration.prototype.getHeader = function() {\n\tvar cell, row, type;\n\n\trow = new Row();\n\ttype = new Text({\n\t\tfont: {\n\t\t\tname: 'Arial',\n\t\t\tsize: 11,\n\t\t\tbold: true\n\t\t},\n\t\tfill: {\n\t\t\tcolor: 'F7F7F7'\n\t\t}\n\t});\n\n\t/* Register header style */\n\ttype.registerAt(this.styles);\n\n\trow.setStyle(type.getStyleId());\n\trow.addAttribute({\n\t\tname: 'customFormat',\n\t\tvalue: '1'\n\t});\n\n\tthis.columns.forEach(function(column, index, array) {\n\n\t\t/* Create new Cell and assign value */\n\t\tcell = new Cell(type);\n\t\tcell.setValue(column.label);\n\n\t\trow.addCell(cell);\n\t});\n\n\treturn row;\n};\n\n\n/**\n * Returns the size of the ColumnConfiguration - respectively the\n * count of the configured columns.\n *\n * @returns {number} Count of configured columns\n */\nColumnConfiguration.prototype.size = function() {\n\treturn this.columns.length;\n};\n\nmodule.exports = ColumnConfiguration;",
    "var Type = require('./Type');\n\n/**\n * The BooleanType class represents a boolean data type. BooleanType\n * data can work in two different ways. The first way is the Office\n * Open XML Spreadsheet built-in type that always shows TRUE/FALSE in\n * the users locale. This value can easily be used within formulas.\n *\n * @param {Object} [oConfig] - Configuration object for this numeric representation\n * @param {string} [oConfig.trueValue] - Contains the value that gets displayed if the Boolean is true\n * @param {string} [oConfig.falseValue] - Contains the value that gets displayed if the Boolean is false\n * @constructor\n */\nfunction BooleanType(oConfig) {\n\tType.call(this);\n\n\tthis.trueValue = oConfig ? oConfig.trueValue : null;\n\tthis.falseValue = oConfig ? oConfig.falseValue : null;\n}\n\nBooleanType.prototype = Object.create(Type.prototype);\nBooleanType.prototype.constructor = BooleanType;\n\nBooleanType.DEFAULT = {\n\tnumberFormat: 0\n};\n\n/**\n * This method indicates if the properties trueValue and falseValue\n * are configured correctly and the BooleanType supports a custom\n * format.\n *\n * @returns {boolean} - Whether to use a custom formatted BooleanType or the built-in type.\n */\nBooleanType.prototype.isCustomFormatted = function() {\n\treturn !!this.trueValue\n\t\t&& typeof this.trueValue === 'string'\n\t\t&& !!this.falseValue\n\t\t&& typeof this.falseValue === 'string';\n};\n\n/**\n * Creates the format according to the provided configuration. If the\n * format matches any builtin format, it will return a reference to\n * its ID instead of the format.\n *\n * Both cases can serve the Style class that consumes this information.\n *\n * @returns {Object} - Configuration object for NumberFormat initialization\n * @private\n */\nBooleanType.prototype._createConfiguration = function() {\n\tvar result = BooleanType.DEFAULT;\n\n\tif (this.isCustomFormatted()) {\n\t\tresult = {\n\t\t\tnumberFormat: {\n\t\t\t\tformat: '\"' + this.trueValue + '\";;\"' + this.falseValue + '\"'\n\t\t\t}\n\t\t};\n\t}\n\n\treturn result;\n};\n\nmodule.exports = BooleanType;",
    "var Type = require('./Type');\n\n/**\n * The CalendarDate class represents a date/datetime/time data type.\n * It handles the formatting and accepts several options like\n * calendar, a custom format string and a subtype.\n *\n * @param {Object} [oConfig] - A configuration object that is used to specify the formatting\n * @param {string} [oConfig.type] - The specific type for this CalendarDate (i.E. date, datetime, time)\n * @param {string} [oConfig.format] - A custom format string that will be used as template\n * @param {string} [oConfig.calendar] - Specifies the calendar that will be used (default: gregorian)\n * @constructor\n */\nfunction CalendarDate(oConfig) {\n\tType.call(this);\n\n\tthis.type = oConfig ? oConfig.type : null;\n\tthis.format = oConfig ? oConfig.format : null;\n\tthis.calendar = oConfig ? oConfig.calendar : null;\n}\n\nCalendarDate.prototype = Object.create(Type.prototype);\nCalendarDate.prototype.constructor = CalendarDate;\n\nCalendarDate.DEFAULT = {\n\tnumberFormat: 14\n};\n\nCalendarDate.builtin = {\n\t14: 'mm-dd-yy',\n\t15: 'd-mmm-yy',\n\t16: 'd-mmm',\n\t17: 'mmm-yy',\n\t18: 'h:mm AM/PM',\n\t19: 'h:mm:ss AM/PM',\n\t20: 'h:mm',\n\t21: 'h:mm:ss',\n\t22: 'm/d/yy h:mm',\n\t45: 'mm:ss',\n\t46: '[h]:mm:ss',\n\t47: 'mmss.0'\n};\n\n/**\n * Creates the Style configuration object for this CalendarDate\n * according to its configuration.\n *\n * @returns {Object} - Style descriptor object\n * @private\n */\nCalendarDate.prototype._createConfiguration = function() {\n\tvar key, result, template;\n\n\tif (!this.type && !this.format && !this.calendar) {\n\t\treturn CalendarDate.DEFAULT;\n\t}\n\n\t/* Evaluate type */\n\tswitch (this.type) {\n\t\tcase 'datetime':\n\t\t\ttemplate = CalendarDate.builtin[22];\n\t\t\tbreak;\n\t\tcase 'time':\n\t\t\ttemplate = CalendarDate.builtin[21];\n\t\t\tbreak;\n\t\tdefault: // Assume 'date' as default\n\t\t\ttemplate = CalendarDate.builtin[14];\n\t}\n\n\tif (typeof this.format === 'string') {\n\t\ttemplate = this.format.match(/^[dhmsy\\s-,.:/]+(AM\\/PM)?$/) ? this.format : template;\n\t}\n\n\t/* Evaluate calendar */\n\tswitch (this.calendar) {\n\t\tcase 'islamic':\n\t\t\ttemplate = 'b2d mmmm yyyy';\n\t\t\tbreak;\n\t\tcase 'japanese':\n\t\t\ttemplate = '[$-ja-JP]ge.m.d';\n\t\t\tbreak;\n\t\tdefault: // Gregorian calendar is the default case\n\t}\n\n\tresult = {\n\t\tnumberFormat: {\n\t\t\tformat: template\n\t\t}\n\t};\n\n\t/* Find possible builtin match */\n\tfor (key in CalendarDate.builtin) {\n\t\tif (CalendarDate.builtin[key] === template) {\n\t\t\tresult.numberFormat = parseInt(key, 10);\n\t\t}\n\t}\n\n\treturn result;\n};\n\nmodule.exports = CalendarDate;",
    "var Numeric = require('./Numeric');\n\n/**\n * The Currency class represents a currency data type. It handles the\n * formatting and accepts several options like second property for\n * the unit of measurement or if the unit of measurement should be\n * displayed.\n *\n * It styles currencies with its particular amount of decimals.\n *\n * @param {Object} oConfig - A configuration object that is used to specify the formatting\n * @param {string} oConfig.unitProperty - A custom format string that will be used as template\n * @param {boolean} [oConfig.displayUnit] - Indicating whether the unit of measurement will be shown (default: true)\n * @param {number} [oConfig.scale] - A fixed scale that will be applied to all cells within this column,\n * regardless of its particular unit of measurement\n * @constructor\n */\nfunction Currency(oConfig) {\n\tNumeric.call(this, oConfig);\n\n\tthis.displayUnit = typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\n}\n\nCurrency.prototype = Object.create(Numeric.prototype);\nCurrency.prototype.constructor = Currency;\n\n/**\n * Defines the display default scale that is used for alignment. This\n * has no effect on the technical scale of currency values. It is\n * only used for alignment purposes so that different currencies with\n * different scale are still aligned correctly.\n *\n * @type {number}\n */\nCurrency.DEFAULT_SCALE = 3;\n\nCurrency.DIGITS = {\n\t'ADP': 0,\n\t'AFN': 0,\n\t'ALL': 0,\n\t'AMD': 0,\n\t'BHD': 3,\n\t'BIF': 0,\n\t'BYR': 0,\n\t'CAD': 2,\n\t'CHF': 2,\n\t'CLF': 4,\n\t'CLP': 0,\n\t'COP': 0,\n\t'CRC': 0,\n\t'CZK': 0,\n\t'DEFAULT': 2,\n\t'DJF': 0,\n\t'ESP': 0,\n\t'GNF': 0,\n\t'GYD': 0,\n\t'HUF': 0,\n\t'IDR': 0,\n\t'IQD': 0,\n\t'IRR': 0,\n\t'ISK': 0,\n\t'ITL': 0,\n\t'JOD': 3,\n\t'JPY': 0,\n\t'KMF': 0,\n\t'KPW': 0,\n\t'KRW': 0,\n\t'KWD': 3,\n\t'LAK': 0,\n\t'LBP': 0,\n\t'LUF': 0,\n\t'LYD': 3,\n\t'MGA': 0,\n\t'MGF': 0,\n\t'MMK': 0,\n\t'MNT': 0,\n\t'MRO': 0,\n\t'MUR': 0,\n\t'OMR': 3,\n\t'PKR': 0,\n\t'PYG': 0,\n\t'RSD': 0,\n\t'RWF': 0,\n\t'SLL': 0,\n\t'SOS': 0,\n\t'STD': 0,\n\t'SYP': 0,\n\t'TMM': 0,\n\t'TND': 3,\n\t'TRL': 0,\n\t'TWD': 0,\n\t'TZS': 0,\n\t'UGX': 0,\n\t'UYI': 0,\n\t'UZS': 0,\n\t'VND': 0,\n\t'VUV': 0,\n\t'XAF': 0,\n\t'XOF': 0,\n\t'XPF': 0,\n\t'YER': 0,\n\t'ZMK': 0,\n\t'ZWD': 0\n};\n\n/**\n * Creates the Style configuration needed for registering the Type\n * specific styling in the Styles class.\n *\n * @param {Object} oData - Business object that gets bound to the styling template\n * @returns {Object} - Styling configuration object\n * @private\n */\nCurrency.prototype._createConfiguration = function(oData) {\n\tvar i, j, scale, template, unit;\n\n\ttemplate = '* #,##0';\n\n\t// Apply fixed scale, only if no unitProperty is provided\n\tif (!this.unitProperty && typeof this.scale === 'number') {\n\t\tscale = this.scale;\n\t} else {\n\t\tscale = Currency.DIGITS[oData[this.unitProperty]];\n\t}\n\n\t/* If the currency uses the default scale */\n\tif (typeof scale !== 'number') {\n\t\tscale = Currency.DIGITS.DEFAULT;\n\t}\n\n\t/* Apply separator or placeholder */\n\ttemplate += (scale > 0) ? '.' : '_.';\n\n\tfor (i = 0; i < scale; i++) {\n\t\ttemplate += '0';\n\t}\n\n\tfor (j = Currency.DEFAULT_SCALE - scale; j > 0; j--) {\n\t\ttemplate += '_0';\n\t}\n\n\t/* Add unit of measurement if required */\n\tif (this.displayUnit) {\n\t\tunit = oData[this.unitProperty];\n\n\t\t// Applies unit of measurement or a placeholder if unit is empty\n\t\ttemplate = template + (unit ? ' \"' + unit + '\"' : ' _E_U_R');\n\t}\n\n\treturn { numberFormat: { format: template } };\n};\n\nmodule.exports = Currency;",
    "var Type = require('./Type');\n\n/**\n * The Numeric class represents a numeric data type. Numeric data can\n * handle several options like thousands delimiter, decimal (scale)\n * and different types like 'percent' and 'exponential'.\n *\n * @param {Object} [oConfig] - Configuration object for this numeric representation\n * @param {boolean} [oConfig.delimiter] - Indicates if a thousands delimiter should be used\n * @param {number} [oConfig.scale] - Defines the amount of decimals\n * @param {string} [oConfig.type] - Applies a specific type like 'exponential' or 'percent'\n * @param {string} [oConfig.unit] - Specifies a particular unit of measurement\n * @param {string} [oConfig.unitProperty] - Specifies a property that contains the unit of measurement\n * @constructor\n */\nfunction Numeric(oConfig) {\n\tType.call(this);\n\n\tthis.unit = oConfig ? oConfig.unit : null;\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\n\tthis.scale = oConfig ? oConfig.scale : null;\n\n\tthis.styleIds = {};\n}\n\nNumeric.prototype = Object.create(Type.prototype);\nNumeric.prototype.constructor = Numeric;\n\nNumeric.DEFAULT = {\n\tnumberFormat: 0\n};\n\nNumeric.builtin = {\n\t1: '0',\n\t2: '0.00',\n\t3: '#,##0',\n\t4: '#,##0.00',\n\t9: '0%',\n\t10: '0.00%',\n\t11: '0.00E+00',\n\t12: '# ?/?',\n\t13: '# ??/??',\n\t37: '#,##0;(#,##0)',\n\t38: '#,##0;[Red](#,##0)',\n\t39: '#,##0.00;(#,##0.00)',\n\t40: '#,##0.00;[Red](#,##0.00)',\n\t48: '##0.0E+0'\n};\n\n/**\n * Creates the format according to the provided configuration. If the\n * format matches any builtin format, it will return a reference to\n * its ID instead of the format.\n *\n * Both cases can serve the Style class that consumes this information.\n *\n * @param {Object} oData - Business object that contains additional data that is used for the formatting\n * @returns {Object} - Configuration object for NumberFormat initialization\n * @private\n */\nNumeric.prototype._createConfiguration = function(oData) {\n\tvar i, key, result,\n\t\ttemplate = Numeric.builtin[1],\n\t\tunit = '';\n\n\tif (!this.delimiter && typeof this.scale !== 'number') {\n\t\treturn Numeric.DEFAULT;\n\t}\n\n\tif (this.delimiter) {\n\t\ttemplate = '#,##' + template;\n\t}\n\n\t/* Add decimal*/\n\tif (typeof this.scale === 'number' && this.scale > 0) {\n\t\ttemplate += '.';\n\n\t\tfor (i = 0; i < this.scale; i++) {\n\t\t\ttemplate += '0';\n\t\t}\n\t}\n\n\t/* Obtain unit of measurement if available */\n\tif (typeof this.unitProperty === 'string' && oData) {\n\t\tunit = ' \"' + oData[this.unitProperty] + '\"';\n\t} else if (typeof this.unit === 'string') {\n\t\tunit = ' \"' + this.unit + '\"';\n\t}\n\n\t/* Apply Unit */\n\ttemplate += unit;\n\n\tresult = {\n\t\tnumberFormat: {\n\t\t\tformat: template\n\t\t}\n\t};\n\n\t/* Find possible builtin match */\n\tfor (key in Numeric.builtin) {\n\t\tif (Numeric.builtin[key] === template) {\n\t\t\tresult.numberFormat = parseInt(key, 10);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Returns the assigned ID of the Type specific Style that is\n * registered in the Styles class.\n *\n * @param {Object} oData - Business Object that contains the property for the UoM\n * @returns {number} - ID of the registered Style\n */\nNumeric.prototype.getStyleId = function(oData) {\n\tvar styleId, unit;\n\n\t/* Handle simple numeric without unitProperty */\n\tif (!this.unitProperty) {\n\t\treturn Object.getPrototypeOf(Numeric.prototype).getStyleId.call(this);\n\t}\n\n\tif (!oData) {\n\t\treturn 0;\n\t}\n\n\tunit = oData[this.unitProperty];\n\tstyleId = this.styleIds[unit];\n\n\tif (typeof styleId === 'undefined') {\n\t\tthis.styleIds[unit] = this.styles.addStyle(this._createConfiguration(oData));\n\t}\n\n\treturn this.styleIds[unit];\n};\n\nmodule.exports = Numeric;",
    "var Type = require('./Type');\n\n/**\n * The Text class represents textual information without any\n * particular formatting. It provides font and sizing details that\n * can be used by the Styles class.\n *\n * @param {Object} [oConfig] - TODO\n * @constructor\n */\nfunction Text(oConfig) {\n\tType.call(this);\n\n\tthis.font = oConfig ? oConfig.font : null;\n\tthis.fill = oConfig ? oConfig.fill : null;\n}\n\nText.prototype = Object.create(Type.prototype);\nText.prototype.constructor = Text;\n\nText.DEFAULT = {\n\tfont: {\n\t\tsize: 11,\n\t\tname: 'Arial'\n\t}\n};\n\nText.prototype._createConfiguration = function() {\n\treturn (this.font || this.fill) ? { font: this.font, fill: this.fill } : Text.DEFAULT;\n};\n\nmodule.exports = Text;",
    "/**\n * The Type class defines a supported data type, like strings,\n * numeric values, decimals, dates, currencies and so on. It is NOT\n * part of the XML representation of the generated Excel document.\n *\n * This class is marked as abstract therefore only its sub-classes\n * should be used.\n *\n * @constructor\n * @abstract\n */\nfunction Type() {\n\tthis.styleId = null;\n}\n\n/**\n * Creates the type specific configuration that is used to register\n * its corresponding style in the Styles class.\n *\n * @abstract\n * @private\n */\nType.prototype._createConfiguration = function() {\n\tthrow new Error('Abstract method must be implemented by its subclass!');\n};\n\n/**\n * Returns the assigned ID of the Type specific Style that is\n * registered in the Styles class.\n *\n * @returns {number} - ID of the registered Style\n */\nType.prototype.getStyleId = function() {\n\tif (this.styleId === null) {\n\t\tthis.styleId = this.styles.addStyle(this._createConfiguration());\n\t}\n\n\treturn this.styleId;\n};\n\n/**\n * Registers the Style configuration of this Type in the given Styles\n * class.\n *\n * @param {Styles} oStyles - Styles instance where the Type specific styling will be registered\n */\nType.prototype.registerAt = function(oStyles) {\n\tthis.styles = oStyles;\n};\n\nmodule.exports = Type;",
    "var XMLNode\t\t \t= require('../xml/XMLNode'),\n\tCalendarDate \t= require('../binding/type/CalendarDate'),\n\tNumeric \t\t= require('../binding/type/Numeric'),\n\tBooleanType \t= require('../binding/type/BooleanType'),\n\tCurrency \t\t= require('../binding/type/Currency'),\n\tSharedStrings   = require('../data/SharedStrings');\n\n/**\n * The Cell class represents a single cell within the spreadsheet\n * that has to be assigned to a particular row. A Cell stores\n * information supporting several types of data.\n *\n * @param {Type} oType - The data type of the cell\n * @class\n */\nfunction Cell(oType) {\n\tXMLNode.call(this, Cell.metadata);\n\n\tthis._applyType(oType);\n}\n\nCell.prototype = Object.create(XMLNode.prototype);\nCell.prototype.constructor = Cell;\n\nCell.DataType = {\n\tBoolean: 'b',\n\tDate: 'd',\n\tInlineString: 'inlineStr', // We do not support inline strings\n\tNumber: 'n',\n\tSharedString: 's',\n\tFormularString: 'str'\n};\n\n/**\n * Converts a JavaScript Date object to an Office Open XML date\n * representation. Office Open XML date epoch starts at 00.01.1900\n * which is 31.12.1899 and is represented as a number of days since\n * beginning of the epoch.\n *\n * The Javascript Date epoch starts at 01.01.1970 and is represented\n * as a number of milliseconds before or after the beginning of the\n * epoch.\n *\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\n * 25567. According to the wrong offset in Excel (31.12.1899 instead\n * of 01.01.1900) and the known leap year bug in Excel, we need to\n * add two additional days.\n *\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\n *\n *\n * @param {Object} oDate - JavaScript Date object\n * @returns {number} - Amount of days since 01.01.1900\n * @private\n */\nCell._JsDateToExcel = function(oDate) {\n\treturn (oDate.getTime() / (86400 * 1000)) + (25567 + 2);\n};\n\n\nCell.metadata = {\n\ttag: 'c',\n\tattributes: [\n\t\t{\n\t\t\tid: 'reference',\n\t\t\tname: 'r',\n\t\t\tvalue: ''\n\t\t},\n\t\t{\n\t\t\tid: 'style',\n\t\t\tname: 's',\n\t\t\tvalue: '0' // Default style id\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'text',\n\t\t\ttag: 'v'\n\t\t}\n\t]\n};\n\n/**\n * Applies the given type to the current Cell and maps to the\n * corresponding Office Open XML type definition.\n *\n * @param {Type} oType - Value of type {@link Type}\n * @private\n */\nCell.prototype._applyType = function(oType) {\n\tObject.defineProperty(this, 'type', { value: Cell.DataType.SharedString, writable: true });\n\n\tswitch (oType.constructor) {\n\t\tcase CalendarDate:\n\t\t\tthis.type = Cell.DataType.Date;\n\t\t\tbreak;\n\t\tcase Numeric:\n\t\t\tthis.type = Cell.DataType.Number;\n\t\t\tbreak;\n\t\tcase BooleanType:\n\t\t\tthis.type = Cell.DataType.Boolean;\n\n\t\t\tif (!oType.isCustomFormatted()) {\n\t\t\t\tthis.addAttribute({\n\t\t\t\t\tname: 't',\n\t\t\t\t\tvalue: Cell.DataType.Boolean\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase Currency:\n\t\t\tthis.type = Cell.DataType.Number;\n\t\t\tbreak;\n\t\tdefault: // Text is the default case\n\t\t\tthis.addAttribute({\n\t\t\t\tname: 't',\n\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\n\t\t\t});\n\t\t\tthis.type = Cell.DataType.SharedString;\n\t}\n\n\tthis.bindingType = oType;\n};\n\n/**\n * Applies the specified Style to the cell.\n *\n * @param {number|string} nStyle - Instance of Excel.objects.Style\n */\nCell.prototype.setStyle = function(nStyle) {\n\tthis.style.value = nStyle;\n};\n\n/**\n * Applies the specified cell location as reference. The reference\n * must match the regular expression of Open Document SpreadsheetML\n * sheet format. Starting with at least one uppercase letter for the\n * column followed by a number without leading zeros for the row.\n * [A-Z]+[1-9]+[0-9]*\n *\n * @param {string} sReference - Reference of the cells' location\n */\nCell.prototype.setReference = function(sReference) {\n\tif (typeof sReference != 'string'\n\t\t|| !sReference.match(/^[A-Z]+[1-9]+[0-9]*$/g)) {\n\t\tthrow new Error('The given Cell reference \"' + sReference + '\" does not match the reference pattern.');\n\t}\n\n\tthis.reference.value = sReference;\n};\n\n/**\n * Assigns the value to the current Cell. The method requires either\n * an shared String proxy object or an inline String. This method can\n * only be called once per Cell!\n *\n * @param {(string|number)} oData - SharedString proxy object, String or number\n * @param {Object} oContext - BusinessObject that gets bound to this Cell\n */\nCell.prototype.setValue = function(oData, oContext) {\n\tvar shared, date, value;\n\n\tif (!this._isValuePresent(oData)) {\n\n\t\t/*\n\t\t * We need to clear the value due to the fact\n\t\t * that we are re-using the Cell for each row\n\t\t */\n\t\tthis.text.value = '';\n\n\t\treturn;\n\t}\n\n\tswitch (this.type) {\n\t\tcase Cell.DataType.Number:\n\t\t\tthis.text.value = oData;\n\t\t\tbreak;\n\n\t\tcase Cell.DataType.Boolean:\n\t\t\tvalue = oData;\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tvalue = value.toLowerCase() !== 'false' && value !== '0';\n\t\t\t}\n\t\t\tthis.text.value = value ? '1' : '0';\n\t\t\tbreak;\n\n\t\tcase Cell.DataType.Date:\n\t\t\tif (oData instanceof Date) {\n\t\t\t\tdate = oData;\n\t\t\t} else if (typeof oData === 'number') {\n\t\t\t\tdate = new Date(oData);\n\t\t\t} else {\n\t\t\t\tdate = new Date(parseInt(oData, 10));\n\t\t\t}\n\n\t\t\tthis.text.value = Cell._JsDateToExcel(date);\n\t\t\t// TODO implement a fallback if the date is before 01.01.1900\n\t\t\t// Check if date is before new Date(-2208988800000) which is UTC 01.01.1900 00:00:00\n\t\t\tbreak;\n\n\t\tdefault: // SharedString is the default case\n\t\t\tshared = SharedStrings.getInstance();\n\t\t\tthis.text.value = shared.insert(oData);\n\t}\n\n\t/*\n\t * Forces a style update once the value changed. This allows cell\n\t * specific styles for currency types. Due to the fact that the\n\t * Style ID gets cached within the Type, there is no performance\n\t * impact even on large data sets.\n\t */\n\tthis.setStyle(this.bindingType.getStyleId(oContext));\n};\n\n/**\n * Checks whether there is a value provided or not. Allowed values\n * are Stringsas well as numeric and boolean values. Empty Strings\n * will be evaluated as no value, but the numeric value 0 is a value.\n *\n * @param {(string|number|boolean)} snbData - The value that gets checked\n * @returns {boolean} - true if a value is present, false if not\n * @private\n */\nCell.prototype._isValuePresent = function(snbData) {\n\treturn ((typeof snbData === 'string' && !!snbData)\n\t\t|| typeof snbData === 'number'\n\t\t|| typeof snbData === 'boolean');\n};\n\nmodule.exports = Cell;",
    "/**\n * Created by Sebastian Bender on 16.03.2017.\n */\nvar XMLNode = require('../xml/XMLNode');\nvar Cell\t= require('./Cell');\n\n/**\n * The Row is representing a single row according to the Office Open\n * XML standard. A Row provides information about its index (line\n * number) and can contain several Cell objects.\n *\n * @class\n */\nfunction Row() {\n\tXMLNode.call(this, Row.metadata);\n}\n\nRow.prototype = Object.create(XMLNode.prototype);\nRow.prototype.constructor = Row;\n\nRow.metadata = {\n\ttag: 'row',\n\tattributes: [\n\t\t{\n\t\t\tid: 'reference',\n\t\t\tname: 'r',\n\t\t\tvalue: ''\n\t\t},\n\t\t{\n\t\t\tid: 'spans',\n\t\t\tname: 'spans',\n\t\t\tvalue: '1:1'\n\t\t}\n\t]\n};\n\n/**\n * Calculates the Office Open XML Spreadsheet column reference for a\n * numeric value. Referring to the standard, the column is described\n * as a alphabetical value consisting of at least one uppercase character.\n * This function maps these alphabetical representation to numerical\n * zero-based indices.\n *\n * i.E. the column index 27 (which is the 28th column) results in 'AB'\n *\n * @param {number} nIndex - Numerical index for the requested column\n * @returns {string} - The alphabetical column reference for the given index.\n */\nRow.getColumnReferenceByIndex = function(nIndex) {\n\treturn nIndex < 26 ?\n\t\tString.fromCharCode(65 + nIndex) :\n\t\tRow.getColumnReferenceByIndex(Math.floor(nIndex / 26) - 1) + String.fromCharCode(65 + (nIndex % 26));\n};\n\n\n/**\n * Update the 'spans' attribute on this particular {@link Row} for\n * optimization purposes. This property optimizes the loading and\n * rendering in Microsoft Excel.\n *\n * @private\n */\nRow.prototype._updateSpans = function() {\n\tthis.spans.value = '1:' + this.childs.length;\n};\n\n/**\n * Adds the specified {@link Cell} to the current {@link Row}. If the\n * current row already has a reference or style, it will propagate\n * this information to the newly added Cell.\n *\n * @param {object} oCell - Instance of Excel.objects.Cell\n */\nRow.prototype.addCell = function(oCell) {\n\tvar count;\n\n\tif (!oCell || !(oCell instanceof Cell)) {\n\t\treturn;\n\t}\n\n\tcount = this.childs.push(oCell);\n\tthis._updateSpans();\n\n\t/* Applies the cell reference if row reference is already present */\n\tif (this.reference.value) {\n\t\toCell.setReference(Row.getColumnReferenceByIndex(count - 1) + this.reference.value);\n\t}\n\n\tif (this.style) {\n\t\toCell.setStyle(this.style.value);\n\t}\n};\n\n\n/**\n * Updates the reference of the current {@link Row}. The Row reference\n * represents the line number within the Sheet. It will\n * automatically update all assigned Cell references.\n *\n * @param {string} sReference - Row number within the sheet\n */\nRow.prototype.setReference = function(sReference) {\n\tvar i, reference;\n\n\treference = typeof sReference == 'number' ? String(sReference) : sReference;\n\tif (!reference || !reference.match(/^[1-9]+[0-9]*$/g)) {\n\t\treturn;\n\t}\n\n\t/* Only update if necessary */\n\tif (this.reference.value != reference) {\n\t\tthis.reference.value = reference;\n\t\tfor (i = 0; i < this.childs.length; i++) {\n\t\t\tthis.childs[i].setReference(Row.getColumnReferenceByIndex(i) + reference);\n\t\t}\n\t}\n};\n\n/**\n * Applies the given {@link Style} to the current {@link Row}.\n *\n * @param {(number|string)} nStyle - A number or string representing the Style id\n */\nRow.prototype.setStyle = function(nStyle) {\n\tvar i, style;\n\n\tif (!this.style) {\n\t\tstyle = this.addAttribute({name: 's'});\n\t\tObject.defineProperty(this, 'style', {value: style});\n\t}\n\n\tthis.style.value = nStyle;\n\tfor (i = 0; i < this.childs.length; i++) {\n\t\tthis.childs[i].setStyle(nStyle);\n\t}\n};\n\nmodule.exports = Row;",
    "var XMLNode = require('../xml/XMLNode');\n\n/**\n * The SharedString class represents each shared String within the\n * SharedStrings file.\n *\n * @param {string} sValue - The String that gets represented by this SharedString object\n * @class\n */\nfunction SharedString(sValue) {\n\tXMLNode.call(this, SharedString.metadata);\n\n\tthis.setValue(sValue);\n}\n\nSharedString.prototype = Object.create(XMLNode.prototype);\nSharedString.prototype.constructor = SharedString;\n\n\nSharedString.metadata = {\n\ttag: 'si',\n\tproperties: [\n\t\t{\n\t\t\tid: 'text',\n\t\t\ttag: 't'\n\t\t}\n\t]\n};\n\n/**\n * Assigns the given value to the current SharedString instance.\n *\n * @function\n * @param {string} sValue - The string value that should be added\n */\nSharedString.prototype.setValue = function(sValue) {\n\n\tif (sValue && typeof sValue == 'string') {\n\t\tthis.text.value = sValue;\n\t} else {\n\n\t\t/**\n\t\t * There are other implementations for creating a string\n\t\t * representation out of a number that might be more\n\t\t * convenient like new String(number).toString() or\n\t\t * number.toString() but '' + number is the best performing.\n\t\t */\n\t\tthis.text.value = '' + sValue;\n\t}\n};\n\nmodule.exports = SharedString;",
    "var XMLNode\t\t = require('../xml/XMLNode'),\n\tSharedString\t= require('./SharedString');\n\n/**\n * The SharedStrings class represents the list of shared String\n * objects that is used in the Office Open XMl Spreadsheet. The\n * SharedStrings object reduces redundancy within the data by\n * providing a reference to unique Strings instead of repeating\n * them.\n *\n * Due to the fact that the Strings are shared within the whole\n * workbook, each instance of the document export only has one\n * single instance of SharedString and therefore it uses the\n * Singleton pattern to ensure this.\n *\n * @class\n */\nfunction SharedStrings() {\n\tif (SharedStrings.instance instanceof SharedStrings) {\n\t\treturn SharedStrings.instance;\n\t}\n\n\tXMLNode.call(this, SharedStrings.metadata);\n\n\tObject.defineProperty(this, 'map', {value: new Map(), writable: false});\n\tObject.defineProperty(this, '_shared', {value: new SharedString(''), writable: false});\n\n\tSharedStrings.instance = this;\n}\n\nSharedStrings.prototype = Object.create(XMLNode.prototype);\nSharedStrings.prototype.constructor = SharedStrings;\n\n/**\n * Retrieves the Singleton instance of SharedStrings. If no instance is present, it will create one.\n *\n * @function\n * @returns {object} - Singleton instance\n */\nSharedStrings.getInstance = function() {\n\tif (!SharedStrings.instance) {\n\t\tSharedStrings.instance = new SharedStrings();\n\t}\n\n\treturn SharedStrings.instance;\n};\n\nSharedStrings.metadata = {\n\ttag: 'sst',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t}\n\n\t\t/*\n\t\t,{\n\t\t\tname: 'count', // Optional as long as uniqueCount is not set\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tname : 'uniqueCount', // Optional as long as count is not set\n\t\t\tvalue: '0'\n\t\t}\n\t\t*/\n\t]\n};\n\n/**\n * Adds the specified string value to the set of SharedStrings. The\n * method creates a SharedString proxy object that contains\n * information about the string itself as well as its index. The\n * index is zero-based and can be used for referencing within Cell\n * objects.\n *\n * @function insert\n * @param {string} sValue - The string that has to be inserted\n * @return {object} - The SharedString instance that represents the provided string value\n */\nSharedStrings.prototype.insert = function(sValue) {\n\tvar index;\n\n\tif (this.map.has(sValue)) {\n\t\treturn this.map.get(sValue);\n\t}\n\n\tthis._shared.setValue(sValue);\n\tindex = this.map.size;\n\tthis.map.set(sValue, index);\n\n\t/* The SharedString needs to be added to the child nodes as well for serialization purposes */\n\tthis.childs.push(this._shared.serialize());\n\n\treturn index;\n};\n\nmodule.exports = SharedStrings;",
    "var XMLNode\t\t = require('../xml/XMLNode'),\n\tRow\t\t\t = require('./Row');\n\n/**\n * This class represents a Sheet within an Office Open XML Spreadsheet.\n * @param {Object} oColumnConfiguration - ColumnConfiguration object that provides information about the columns\n * @constructor\n */\nfunction Sheet(oColumnConfiguration) {\n\tXMLNode.call(this, Sheet.metadata);\n\n\tObject.defineProperty(this, '_columns', {value: oColumnConfiguration, writable: false});\n\n\tthis._createCols();\n\tthis._createHeader();\n}\n\nSheet.prototype = Object.create(XMLNode.prototype);\nSheet.prototype.constructor = Sheet;\n\nSheet.metadata = {\n\ttag: 'worksheet',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'r',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'dimension',\n\t\t\ttag: 'dimension',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'reference',\n\t\t\t\t\tname: 'ref',\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'sheetViews',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'sheetView',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'workbookViewId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'tabSelected',\n\t\t\t\t\t\t\tvalue: '1' // Refers to W3C XML Schema boolean (true)\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tproperties: [\n\n\t\t\t\t\t\t/* Freezes the header row */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttag: 'pane',\n\t\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'ySplit',\n\t\t\t\t\t\t\t\t\tvalue: '1'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'topLeftCell',\n\t\t\t\t\t\t\t\t\tvalue: 'A2'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'activePane',\n\t\t\t\t\t\t\t\t\tvalue: 'bottomLeft'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'state',\n\t\t\t\t\t\t\t\t\tvalue: 'frozen'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'sheetFormatPr',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'defaultRowHeight',\n\t\t\t\t\tvalue: '15'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'columns',\n\t\t\ttag: 'cols'\n\t\t},\n\t\t{\n\t\t\tid: 'data',\n\t\t\ttag: 'sheetData'\n\t\t},\n\t\t{\n\t\t\tid: 'filter',\n\t\t\ttag: 'autoFilter',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'reference',\n\t\t\t\t\tname: 'ref',\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'pageMargins',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'left',\n\t\t\t\t\tvalue: '0.75'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'right',\n\t\t\t\t\tvalue: '0.75'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'top',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'bottom',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'header',\n\t\t\t\t\tvalue: '0.5'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'footer',\n\t\t\t\t\tvalue: '0.5'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nSheet.MAX_ROWS = 1048576;\n\n/**\n * Creates the column specific information within the worksheet.\n * Column specific information is i.E. the width or the use of the\n * bestFit functionality.\n *\n * @private\n */\nSheet.prototype._createCols = function() {\n\tvar col, i, minWidth, width,\n\t\tautoFitButtonOffset = 2.4;\n\n\tfor (i = 0; i < this._columns.size(); i++) {\n\t\tcol = this._columns.columns[i];\n\t\tminWidth = this._calculateColumnWidth(col.label.length) + autoFitButtonOffset;\n\t\twidth = Math.max(this._calculateColumnWidth(col.width), minWidth);\n\n\t\tthis.columns.addChild({\n\t\t\ttag: 'col',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'min',\n\t\t\t\t\tvalue: (i + 1)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'max',\n\t\t\t\t\tvalue: (i + 1)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'bestFit',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'width',\n\t\t\t\t\tvalue: Math.max(width, minWidth)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'customWidth',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n};\n\n/**\n * This method calculates the optimal column width for the given\n * amount of characters. It removes the dependency on font size or\n * pixel width.\n *\n * @param {number} nCharacters - Amount of characters that should fit into the column\n * @return {number} Excel internal width value corresponding to the used font size\n * @private\n */\nSheet.prototype._calculateColumnWidth = function(nCharacters) {\n\tvar defaultFontSize = 11, // Needs to be adjusted once we support different font sizes\n\t\tdefaultPaddingAndBorder = 5,\n\t\tscaleFactor = 7.33;\n\n\tif (typeof nCharacters !== 'number') {\n\t\treturn 0;\n\t}\n\n\treturn (((nCharacters * 2 / 3) * defaultFontSize) + defaultPaddingAndBorder) / scaleFactor;\n};\n\n/**\n * Requests the header Row from the ColumnConfiguration and adds it to the\n * sheet.\n *\n * @private\n */\nSheet.prototype._createHeader = function() {\n\n\tthis._appendRow(this._columns.getHeader());\n};\n\n/**\n * Adds the specified Row to the sheetData element of this Sheet and\n * automatically propagates its row index to the row and its cells.\n *\n * @param {Object} oRow - The Row object that should be appended to the current Sheet\n * @private\n */\nSheet.prototype._appendRow = function(oRow) {\n\tvar i, dimension;\n\n\toRow.setReference('' + (this.data.childs.length + 1));\n\n\tthis.data.childs.push(oRow.serialize());\n\n\t/* Update sheet dimension */\n\tfor (i = 0; i < this.childs.length; i++) {\n\t\tif (this.childs[i].tag == 'dimension') {\n\t\t\tdimension = 'A1:' + Row.getColumnReferenceByIndex(this._columns.size() - 1) + this.data.childs.length;\n\n\t\t\tthis.dimension.reference.value = dimension;\n\t\t\tthis.filter.reference.value = dimension;\n\t\t}\n\t}\n};\n\n/**\n * Requests a row from the ColumnConfiguration containing the given data\n * and adds it to the sheetData element of this Sheet.\n *\n * The maximum row limit is 1,048,576 but we do not enforce this\n * limit because the user rather runs out of memory than reaching\n * this limit.\n *\n * @function insert\n * @param {Object} oData - Data object to be inserted\n */\nSheet.prototype.insert = function(oData) {\n\tif (this.data.childs.length == Sheet.MAX_ROWS) {\n\t\tthrow new Error('Row limit reached.');\n\t}\n\n\t/* Create row and apply binding */\n\tthis._appendRow(this._columns.bind(oData));\n};\n\nmodule.exports = Sheet;",
    "var XMLNode = require('../xml/XMLNode');\n\n/**\n * This class represents the app.xml within the generated Excel. The\n * App contains information about the application that created the\n * Office Open XML Spreadsheet.\n *\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\n * @param {string} [oContext.application] - Application that created this Excel\n * @param {string} [oContext.version] - Application version that was used to create this Excel\n * @constructor\n */\nfunction App(oContext) {\n\tXMLNode.call(this, App.metadata);\n\n\tif (oContext) {\n\n\t\tif (oContext.application) {\n\t\t\tthis.application.value = oContext.application;\n\t\t}\n\n\t\tif (oContext.version) {\n\t\t\tthis.version.value = oContext.version;\n\t\t}\n\t}\n}\n\nApp.prototype = Object.create(XMLNode.prototype);\nApp.prototype.constructor = App;\n\nApp.metadata = {\n\ttag: 'Properties',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'vt',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'application',\n\t\t\ttag: 'Application',\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\n\t\t},\n\t\t{\n\t\t\ttag: 'DocSecurity',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\ttag: 'Company',\n\t\t\tvalue: 'SAP SE'\n\t\t},\n\t\t{\n\t\t\ttag: 'SharedDoc',\n\t\t\tvalue: 'false'\n\t\t},\n\t\t{\n\t\t\tid: 'version',\n\t\t\ttag: 'AppVersion',\n\t\t\tvalue: '1.52' // Default value, can be overridden\n\t\t}\n\t]\n};\n\nmodule.exports = App;",
    "var XMLNode = require('../xml/XMLNode');\n\n/**\n * This class represents the [Content_Types].xml within the generated Excel.\n *\n * @constructor\n */\nfunction ContentTypes() {\n\tXMLNode.call(this, ContentTypes.metadata);\n}\n\nContentTypes.prototype = Object.create(XMLNode.prototype);\nContentTypes.prototype.constructor = ContentTypes;\n\n\nContentTypes.metadata = {\n\ttag: 'Types',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/content-types'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\ttag: 'Default',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Extension',\n\t\t\t\t\tvalue: 'xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Default',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Extension',\n\t\t\t\t\tvalue: 'rels'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.relationships+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/workbook.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/worksheets/sheet1.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/styles.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/xl/sharedStrings.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/docProps/core.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.core-properties+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'Override',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'PartName',\n\t\t\t\t\tvalue: '/docProps/app.xml'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ContentType',\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nmodule.exports = ContentTypes;",
    "var XMLNode = require('../xml/XMLNode');\n\n/**\n * This class represents the core.xml within the generated Excel. The\n * Core contains basic information about the content and the owner of\n * the file.\n *\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\n * @param {string} [oContext.title] - Title of the Excel document\n * @param {string} [oContext.modifiedBy] - User context for the exported document\n * @constructor\n */\nfunction Core(oContext) {\n\tXMLNode.call(this, Core.metadata);\n\n\tif (oContext) {\n\n\t\tif (oContext.title) {\n\t\t\tthis.title.value = oContext.title;\n\t\t}\n\n\t\tif (oContext.modifiedBy) {\n\t\t\tthis.modifiedBy.value = oContext.modifiedBy;\n\t\t}\n\t}\n}\n\nCore.prototype = Object.create(XMLNode.prototype);\nCore.prototype.constructor = Core;\n\nCore.metadata = {\n\ttag: 'cp:coreProperties',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'cp',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'dc',\n\t\t\tvalue: 'http://purl.org/dc/elements/1.1/'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'dcterms',\n\t\t\tvalue: 'http://purl.org/dc/terms/'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'dcmitype',\n\t\t\tvalue: 'http://purl.org/dc/dcmitype/'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'xsi',\n\t\t\tvalue: 'http://www.w3.org/2001/XMLSchema-instance'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'title',\n\t\t\ttag: 'dc:title',\n\t\t\tvalue: 'Table Export' // Default value, can be overridden\n\t\t},\n\t\t{\n\t\t\ttag: 'dc:creator',\n\t\t\tvalue: 'SAP UI5 Document Export'\n\t\t},\n\t\t{\n\t\t\ttag: 'dcterms:created',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tprefix: 'xsi',\n\t\t\t\t\tname: 'type',\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\n\t\t\t\t}\n\t\t\t],\n\t\t\tvalue: new Date().toISOString()\n\t\t},\n\t\t{\n\t\t\ttag: 'cp:keywords',\n\t\t\tvalue: 'SAP UI5 EXPORT'\n\t\t},\n\t\t{\n\t\t\tid: 'modifiedBy',\n\t\t\ttag: 'cp:lastModifiedBy',\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\n\t\t}\n\t]\n};\n\nmodule.exports = Core;",
    "var XMLNode = require('../xml/XMLNode');\n\n/**\n *\n * @constructor\n */\nfunction Relationships() {\n\tXMLNode.call(this, Relationships.metadata);\n}\n\nRelationships.prototype = Object.create(XMLNode.prototype);\nRelationships.prototype.constructor = Relationships;\n\nRelationships.metadata = {\n\ttag: 'Relationships',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/relationships'\n\t\t}\n\t],\n\tproperties: []\n};\n\n/**\n * Creates a new Relationship entry for the current collection.\n * The Relationship references are defined by the ISO/IEC 29500-1:2016 standard.\n *\n * @param {string} sTarget - Target file within the generated Excel\n * @param {string} sType - XMLNS reference of the targets file type\n */\nRelationships.prototype.addRelationship = function(sTarget, sType) {\n\tvar id = 'rId' + (this.childs.length + 1);\n\n\tthis.childs.push(new XMLNode({\n\t\ttag: 'Relationship',\n\t\tattributes: [\n\t\t\t{\n\t\t\t\tname: 'Id',\n\t\t\t\tvalue: id\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Type',\n\t\t\t\tvalue: sType\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Target',\n\t\t\t\tvalue: sTarget\n\t\t\t}\n\t\t]\n\t}));\n};\n\nmodule.exports = Relationships;",
    "var XMLNode = require('../xml/XMLNode');\n\n/**\n * This class represents the workbook.xml file within the generated\n * Office Open XML Spreadsheet. The workbook is the central element\n * of the Office Open XML Spreadsheet that references all the content.\n *\n * @constructor\n */\nfunction Workbook() {\n\tXMLNode.call(this, Workbook.metadata);\n\n\t// Adds a default sheet so there is at least on sheet present\n\tthis.addSheet('SAP Document Export');\n}\n\nWorkbook.prototype = Object.create(XMLNode.prototype);\nWorkbook.prototype.constructor = Workbook;\n\nWorkbook.metadata = {\n\ttag: 'workbook',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t},\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tsuffix: 'r',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\ttag: 'bookViews',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'workbookView',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'xWindow',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'yWindow',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'windowWidth',\n\t\t\t\t\t\t\tvalue: '22260'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'windowHeight',\n\t\t\t\t\t\t\tvalue: '12645'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'sheets',\n\t\t\ttag: 'sheets'\n\t\t}\n\t]\n};\n\nWorkbook.prototype.addSheet = function(sName) {\n\tvar count = this.sheets.childs.length + 1;\n\tvar sheet = new XMLNode({\n\t\ttag: 'sheet',\n\t\tattributes: [\n\t\t\t{\n\t\t\t\tname: 'name',\n\t\t\t\tvalue: sName\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'sheetId',\n\t\t\t\tvalue: '' + count\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'id',\n\t\t\t\tprefix: 'r',\n\t\t\t\tvalue: 'rId' + count\n\t\t\t}\n\t\t]\n\t});\n\n\tthis.sheets.addChild(sheet);\n};\n\nmodule.exports = Workbook;",
    "var Alignment = {\n\thorizontal: {\n\t\tLeft: 'left',\n\t\tCenter: 'center',\n\t\tRight: 'right',\n\t\tcontains: function(sAlign) {\n\n\t\t\treturn _contains(sAlign, Alignment.horizontal);\n\t\t}\n\t},\n\tvertical: {\n\t\tTop: 'top',\n\t\tMiddle: 'middle',\n\t\tBottom: 'bottom',\n\t\tcontains: function(sAlign) {\n\n\t\t\treturn _contains(sAlign, Alignment.vertical);\n\t\t}\n\t}\n};\n\n/**\n * Checks whether the requested alignment is contained or not. An\n * alignment that is contained can be assigned within styles. Other\n * alignments that are not contained are not supported and thus not\n * assignable. It differentiates between horizontal and vertical\n * alignments, depending on the aggregation that was provided.\n *\n * @param {string} sAlign - The alignment that should be checked\n * @param {Array} oAggregation - The aggregation the alignment might be in\n * @returns {boolean} - Returns true if the alignment is supported\n * @private\n */\nfunction _contains(sAlign, oAggregation) {\n\tvar key, contained = false;\n\n\tfor (key in oAggregation) {\n\t\tcontained = contained ? contained : oAggregation[key] === sAlign && typeof oAggregation[key] !== 'function';\n\t}\n\n\treturn contained;\n}\n\nmodule.exports = Alignment;",
    "var XMLNode = require('../xml/XMLNode');\n\n/**\n * This class represents border configuration for Office Open XML Spreadsheets.\n * @constructor\n */\nfunction Border() {\n\tXMLNode.call(this, Border.metadata);\n}\n\nBorder.prototype = Object.create(XMLNode.prototype);\nBorder.prototype.constructor = Border;\n\nBorder.metadata = {\n\ttag: 'border',\n\tproperties: [\n\t\t{\n\t\t\ttag: 'left'\n\t\t},\n\t\t{\n\t\t\ttag: 'right'\n\t\t},\n\t\t{\n\t\t\ttag: 'top'\n\t\t},\n\t\t{\n\t\t\ttag: 'bottom'\n\t\t},\n\t\t{\n\t\t\ttag: 'diagonal'\n\t\t}\n\t]\n};\n\n/**\n * Checks if the current Border is equal to the given parameter.\n *\n * @param {Border} oBorder - Border that get's compared to the current one\n * @return {boolean} - Returns true if both Borders have the same configuration\n */\nBorder.prototype.equals = function(oBorder) {\n\n\t/**\n\t * Once it is a Border object we always return true because we\n\t * don't provide more than one border type\n\t */\n\treturn oBorder instanceof Border;\n};\n\nmodule.exports = Border;",
    "var XMLNode = require('../xml/XMLNode');\n\n/**\n * This Class represents a background fill of cells within the Office\n * Open Spreadsheet document. The Fill accepts a configuration object\n * which might have either an \"color\" or an \"type\" property.\n *\n * @param {Object} oData - Configuration object for this Fill\n * @param {string} [oData.color] - HEX string defining the colored fill\n * @param {string} [oData.type] - Color independent fill type\n * @constructor\n */\nfunction Fill(oData) {\n\tXMLNode.call(this, Fill.metadata);\n\n\tif (oData) {\n\t\tif (oData.color) {\n\t\t\tthis.setFill(oData.color);\n\t\t} else if (oData.type) {\n\t\t\tthis.setType(oData.type);\n\t\t}\n\t}\n}\n\nFill.prototype = Object.create(XMLNode.prototype);\nFill.prototype.constructor = Fill;\n\nFill.DEFAULT_TYPE = 'none';\n\nFill.metadata = {\n\ttag: 'fill',\n\tproperties: [\n\t\t{\n\t\t\tid: 'fill',\n\t\t\ttag: 'patternFill',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'type',\n\t\t\t\t\tname: 'patternType',\n\t\t\t\t\tvalue: Fill.DEFAULT_TYPE\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\n/**\n * Checks if the current Fill is equal to the one that was provided.\n *\n * @param {Fill} oFill - The Fill that gets compared to the current Fill\n * @returns {boolean} - Returns true if the compared objects are of the same type and contain the same color fill\n */\nFill.prototype.equals = function(oFill) {\n\tif (!(oFill instanceof Fill)) {\n\t\treturn false;\n\t}\n\n\treturn this.getType() === oFill.getType()\n\t\t&& this.getFill() === oFill.getFill();\n};\n\n/**\n * Returns the color of the current Fill.\n *\n * @returns {string|null} - String containing the color HEX color of the Fill or null of no color is assigned\n */\nFill.prototype.getFill = function() {\n\n\t/* The opacity needs to be removed before returning the HEX color */\n\treturn this.fill.childs.length ? this.fill.color.rgb.value.substring(2) : null;\n};\n\nFill.prototype.setFill = function(sColor) {\n\tthis.reset();\n\n\tif (sColor && typeof sColor === 'string' && /^[A-Fa-f0-9]{6}$/.test(sColor)) {\n\t\tthis.fill.type.value = 'solid';\n\n\t\t/**\n\t\t * Apply the provided color as forground color of the\n\t\t * background. We add 'FF' in front of the HEX-color\n\t\t * for opacity.\n\t\t */\n\t\tthis.fill.addChild({\n\t\t\tid: 'color',\n\t\t\ttag: 'fgColor',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'rgb',\n\t\t\t\t\tname: 'rgb',\n\t\t\t\t\tvalue: 'FF' + sColor\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\n\t\t/**\n\t\t * Add default background layer which will be used once the\n\t\t * foreground color uses transparency\n\t\t */\n\t\tthis.fill.addChild({\n\t\t\ttag: 'bgColor',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'indexed',\n\t\t\t\t\tvalue: '64'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n};\n\n/**\n * Returns the current Fill type.\n *\n * @returns {string} - Current Fill type\n */\nFill.prototype.getType = function() {\n\treturn this.fill.type.value;\n};\n\n/**\n * Assigns the given type as Fill type. The Fill will be reset to\n * default before the type is applied.\n *\n * @param {string} sType - Type that needs to be assigned\n */\nFill.prototype.setType = function(sType) {\n\tthis.reset();\n\n\tthis.fill.type.value = sType;\n};\n\n/**\n * Resets the current fill to avoid side effects that might occur\n * when the fill is modified.\n */\nFill.prototype.reset = function() {\n\tthis.fill.type.value = 'none';\n\tthis.fill.childs.length = 0;\n};\n\nmodule.exports = Fill;",
    "var XMLNode = require('../xml/XMLNode');\n\n/**\n * The Font class represents a Font configuration within an Office\n * Open XML Spreadsheet.\n *\n * @param {Object} oData - Configuration object for this Font\n * @param {boolean} [oData.bold] - Boolean value indicating if the Font should be bold\n * @param {string} [oData.name] - The name of the font that gets used by this Font object i.E. Arial, Verdana, etc.\n * @param {number|String} [oData.size] - The font size that is been used\n * @param {number} [oData.family] - The font family reference {@see getFamily}\n * @constructor\n */\nfunction Font(oData) {\n\tXMLNode.call(this, Font.metadata);\n\n\tif (oData && oData instanceof Object) {\n\t\tthis.setName(oData.name)\n\t\t\t.setSize(oData.size)\n\t\t\t.setFamily(oData.family)\n\t\t\t.setBold(!!oData.bold);\n\t}\n}\n\nFont.prototype = Object.create(XMLNode.prototype);\nFont.prototype.constructor = Font;\n\nFont.DEFAULT_SIZE = 11;\nFont.DEFAULT_NAME = 'Arial';\n\nFont.metadata = {\n\ttag: 'font',\n\tproperties: [\n\t\t{\n\t\t\tid: 'size',\n\t\t\ttag: 'sz',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'val',\n\t\t\t\t\tvalue: Font.DEFAULT_SIZE\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'color',\n\t\t\ttag: 'color',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'theme',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'name',\n\t\t\ttag: 'name',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'val',\n\t\t\t\t\tvalue: Font.DEFAULT_NAME\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'family',\n\t\t\ttag: 'family',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'valueAttribute',\n\t\t\t\t\tname: 'val',\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\n/**\n * Checks if the current Font is equal to the given parameter.\n *\n * @param {Font} oFont - The Font to compare with\n * @return {boolean} - Returns true if both Font objects contain the same configuration.\n */\nFont.prototype.equals = function(oFont) {\n\tif (!(oFont instanceof Font)) {\n\t\treturn false;\n\t}\n\n\treturn this.getName() == oFont.getName()\n\t\t&& this.getSize() == oFont.getSize()\n\t\t&& this.isBold() == oFont.isBold()\n\t\t&& this.getColor() == oFont.getColor()\n\t\t&& this.getFamily() == oFont.getFamily();\n};\n\n/**\n * Returns whether the Font will be displayed bold or not.\n *\n * @returns {boolean} - Returns true if the Font is bold\n */\nFont.prototype.isBold = function() {\n\treturn !!this.bold;\n};\n\n/**\n * Returns the size of this Font.\n *\n * @returns {number} - The size of the Font\n */\nFont.prototype.getSize = function() {\n\treturn this.size.valueAttribute.value;\n};\n\n/**\n * Returns the name of this Font. I.E. Arial, Calibri, etc.\n *\n * @returns {string} - The name of the Font\n */\nFont.prototype.getName = function() {\n\treturn this.name.valueAttribute.value;\n};\n\n/**\n * Returns the color reference of this Font.\n *\n * @returns {string} - The color as HEX string\n */\nFont.prototype.getColor = function() {\n\treturn this.color.valueAttribute.value;\n};\n\n/**\n * Returns the Font family reference of this Font. The reference is\n * defined within the Office Open XML specification.\n * 1 : Roman (Times New Roman, SAP-icons)\n * 2 : Swiss (Arial, Calibri, Segoe UI, Tahoma, Verdana)\n * 3 : Modern\n * 4 : Script\n * 5 : Decorative\n * 6-14 : Reserved for future use\n *\n * @returns {number} - The Font family ID\n */\nFont.prototype.getFamily = function() {\n\treturn this.family.valueAttribute.value;\n};\n\n/**\n * This method can be used to set the Font to bold or not.\n *\n * @param {boolean} bBold - A boolean value that indicates if the Font should be bold or not\n * @return {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setBold = function(bBold) {\n\tvar boldProperty = 'bold';\n\n\t/* Early return if bold status is already correct */\n\tif (bBold === !!this[boldProperty]) {\n\t\treturn this;\n\t}\n\n\tif (bBold) {\n\t\tthis.addChild({\n\t\t\tid: boldProperty,\n\t\t\ttag: 'b'\n\t\t});\n\t} else {\n\t\tthis.remove(boldProperty);\n\t}\n\n\treturn this;\n};\n\n/**\n * This method is used to set the Font family reference for the used font.\n *\n * @see {@link getFamily}\n * @param {number} nFamily - Number that references the Font family\n * @returns {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setFamily = function(nFamily) {\n\n\tif (nFamily > 0 && nFamily < 15) {\n\t\tthis.family.valueAttribute.value = nFamily;\n\t}\n\n\treturn this;\n};\n\n/**\n * Assigns the given font name to this object.\n *\n * @param {string} sName - Name of the font i.E. Arial, Calibri, etc.\n * @return {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setName = function(sName) {\n\tif (sName && typeof sName === 'string') {\n\t\tthis.name.valueAttribute.value = sName;\n\t}\n\n\t/*\n\t * If the font name is Calibri we need to add another child node:\n\t *\n\t *\t{\n\t *\t\ttag: 'scheme',\n\t *\t\tattributes: [\n\t *\t\t\t{\n\t *\t\t\t\tname: 'val',\n\t *\t\t\t\tvalue: 'minor'\n\t *\t\t\t}\n\t *\t\t]\n\t *\t}\n\t */\n\n\treturn this;\n};\n\n/**\n * Assigns the given font size to this object.\n *\n * @param {number} nSize - Textual representation of the font size\n * @return {Font} - Returns the current Font object for chaining\n */\nFont.prototype.setSize = function(nSize) {\n\n\t/* Check preconditions */\n\tif (typeof nSize !== 'number' || isNaN(nSize) || nSize < 1 || nSize > 96) {\n\t\tthrow new Error('The size ' + nSize + ' is not supported.');\n\t}\n\n\tthis.size.valueAttribute.value = nSize;\n\n\treturn this;\n};\n\nmodule.exports = Font;",
    "var XMLNode = require('../xml/XMLNode');\n\n/**\n * The NumberFormat class is used to store custom formatting for\n * numeric values. In addition to a variety of built-in formats that\n * cannot be used as identifier for a particular format, the user can\n * create up to 250 different number formats.\n *\n * (https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3)\n *\n * @param {Object} oData - Configuration object that is used for initialization\n * @param {string} oData.format - Custom format that will be applied\n * @constructor\n */\nfunction NumberFormat(oData) {\n\tXMLNode.call(this, NumberFormat.metadata);\n\n\tthis.format.value = oData && oData.format ? oData.format : NumberFormat.DEFAULT;\n}\n\nNumberFormat.prototype = Object.create(XMLNode.prototype);\nNumberFormat.prototype.constructor = NumberFormat;\n\nNumberFormat.metadata = {\n\ttag: 'numFmt',\n\tattributes: [\n\t\t{\n\t\t\tid: 'formatId',\n\t\t\tname: 'numFmtId'\n\t\t},\n\t\t{\n\t\t\tid: 'format',\n\t\t\tname: 'formatCode'\n\t\t}\n\t]\n};\n\nNumberFormat.BUILTIN_IDS = [ 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15,\n\t16, 17, 18, 19, 20, 21, 22, 37, 38, 39, 40, 45, 46, 47, 48, 49 ];\nNumberFormat.ID_OFFSET = 165;\nNumberFormat.DEFAULT = '#,##0.00';\n\n/**\n * This method returns the ID of this NumberFormat. If there was no\n * ID assigned yet, it will return undefined.\n *\n * @returns {number} - The ID of this NumberFormat\n */\nNumberFormat.prototype.getId = function() {\n\treturn this.formatId.value;\n};\n\n\n/**\n * Returns the format of this NumberFormat as a string.\n *\n * @returns {string} - The format template that gets applied\n */\nNumberFormat.prototype.getFormat = function() {\n\treturn this.format.value;\n};\n\n\n/**\n * Assigns the provided ID to the current NumberFormat.\n *\n * @param {number|string} sId - The ID of this NumberFormat that can be referenced\n */\nNumberFormat.prototype.setId = function(sId) {\n\tvar iId = typeof sId === 'number' ? sId : parseInt(sId, 10);\n\n\t/* Checks if NaN, below zero or builtin ID */\n\tif (isNaN(iId) || iId < 0 || NumberFormat._isBuiltin(iId)) {\n\t\treturn;\n\t}\n\n\tthis.formatId.value = sId;\n};\n\n\n/**\n * Sets a specific format.\n *\n * @param {string} sFormat - The format that gets applied by this NumberFormat\n */\nNumberFormat.prototype.setFormat = function(sFormat) {\n\tthis.format.value = sFormat;\n};\n\n\n/**\n * Checks if a given ID is a builtin ID or not. Builtin IDs cannot be used for custom NumberFormats.\n *\n * @param {number} iId - ID that needs to be checked if it is a builtin ID\n *\n * @returns {boolean} - Returns true if the provided ID is a builtin ID that cannot be used\n * @private\n */\nNumberFormat._isBuiltin = function(iId) {\n\treturn NumberFormat.BUILTIN_IDS.indexOf(iId) > -1;\n};\n\n\n/**\n * Compares another NumberFormat to the current one. This method will\n * match NumberFormat objects by its format regardless of their ID.\n *\n * @param {NumberFormat} oNumberFormat - The NumberFormat to compare with\n * @returns {boolean} - Returns true if the format template is equal to the one from the compared object\n */\nNumberFormat.prototype.equals = function(oNumberFormat) {\n\tif (!(oNumberFormat instanceof NumberFormat)) {\n\t\treturn false;\n\t}\n\n\treturn this.getFormat() === oNumberFormat.getFormat();\n};\n\nmodule.exports = NumberFormat;",
    "var XMLNode = require('../xml/XMLNode');\nvar Alignment = require('./Alignment');\n\n/**\n * Represents a particular Style within the Office Open XML Spreadsheet.\n * Instances of this type will be created by the Styles Class after\n * registering a new Style.\n *\n * @constructor\n */\nfunction Style() {\n\tXMLNode.call(this, Style.metadata);\n}\n\nStyle.prototype = Object.create(XMLNode.prototype);\nStyle.prototype.constructor = Style;\n\nStyle.metadata = {\n\ttag: 'xf',\n\tattributes: [\n\t\t{\n\t\t\tid: 'numberFormat',\n\t\t\tname: 'numFmtId',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tid: 'font',\n\t\t\tname: 'fontId',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tid: 'fill',\n\t\t\tname: 'fillId',\n\t\t\tvalue: '0'\n\t\t},\n\t\t{\n\t\t\tid: 'border',\n\t\t\tname: 'borderId',\n\t\t\tvalue: '0'\n\t\t}\n\t]\n};\n\nStyle.DEFAULT = {\n\tfont: {\n\t\tname: 'Arial',\n\t\tsize: 11,\n\t\tfamily: '2',\n\t\tcolor: '1',\n\t\tbold: false\n\t},\n\tfill: {\n\t\ttype: 'none'\n\t}\n};\n\nStyle.prototype.getAlignment = function() {\n\tvar alignProperty = 'alignment';\n\n\treturn alignProperty in this ? this[alignProperty][alignProperty].value : null;\n};\n\nStyle.prototype.getFontId = function() {\n\treturn this.font.value;\n};\n\nStyle.prototype.getFillId = function() {\n\treturn this.fill.value;\n};\n\nStyle.prototype.getBorderId = function() {\n\treturn this.border.value;\n};\n\nStyle.prototype.getNumberFormatId = function() {\n\treturn this.numberFormat.value;\n};\n\n/**\n * Applies the alignment to the Style. The alignment must match the\n * predefined options of <code>Alignment</code> as far as it is not\n * null. Other values will be ignored.\n *\n * The value <code>null</code> will delete the current alignment.\n *\n * @param {string|null} sAlign - Alignment that gets applied or null\n */\nStyle.prototype.setAlignment = function(sAlign) {\n\tvar alignProperty = 'alignment';\n\n\tthis._apply(sAlign, 'Alignment');\n\n\tif (sAlign === null) {\n\t\tthis.remove(alignProperty);\n\t}\n\n\tif (!Alignment.horizontal.contains(sAlign)) {\n\t\treturn;\n\t}\n\n\tif (!(alignProperty in this)) {\n\t\tthis.addChild({\n\t\t\tid: alignProperty,\n\t\t\ttag: 'alignment', // This tag is fix, so we can't use the alignProperty variable in this case\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: alignProperty,\n\t\t\t\t\tname: 'horizontal'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\t/* The property variable is used on the child node as well */\n\tthis[alignProperty][alignProperty].value = sAlign;\n};\n\nStyle.prototype.setFontId = function(nFontId) {\n\tthis._apply(nFontId, 'Font');\n\n\tthis.font.value = nFontId;\n};\n\nStyle.prototype.setFillId = function(nFillId) {\n\tthis._apply(nFillId, 'Fill');\n\n\tthis.fill.value = nFillId;\n};\n\nStyle.prototype.setBorderId = function(sBorderId) {\n\tthis.border.value = sBorderId;\n};\n\nStyle.prototype.setNumberFormatId = function(nNumFmtId) {\n\tthis._apply(nNumFmtId, 'NumberFormat');\n\n\tthis.numberFormat.value = nNumFmtId;\n};\n\nStyle.prototype._apply = function(nId, sType) {\n\tvar applyProperty = 'apply' + sType;\n\n\tthis.remove(applyProperty);\n\n\tif (nId) {\n\t\tthis.addAttribute({\n\t\t\tid: applyProperty,\n\t\t\tname: applyProperty,\n\t\t\tvalue: '1'\n\t\t});\n\t}\n};\n\n\nStyle.prototype.equals = function(oStyle) {\n\tif (!(oStyle instanceof Style)) {\n\t\treturn false;\n\t}\n\n\treturn this.getFontId() === oStyle.getFontId()\n\t\t&& this.getFillId() === oStyle.getFillId()\n\t\t&& this.getBorderId() === oStyle.getBorderId()\n\t\t&& this.getNumberFormatId() === oStyle.getNumberFormatId();\n};\n\nmodule.exports = Style;",
    "var XMLNode\t\t\t= require('../xml/XMLNode'),\n\tStyle\t\t\t= require('./Style'),\n\tFont\t\t\t= require('./Font'),\n\tFill\t\t\t= require('./Fill'),\n\tBorder\t\t\t= require('./Border'),\n\tNumberFormat\t= require('./NumberFormat');\n\n/**\n *\n * @class\n * @module style/Styles\n */\nfunction Styles() {\n\tXMLNode.call(this, Styles.metadata);\n\n\t/* Microsoft Excel fix - specific fill that needs to be present */\n\tthis.addFill({ type: 'none' }); // Add a default fill at index 0\n\tthis.addFill({ type: 'gray125' }); // Needs to have index 1\n\tthis.addStyle(Style.DEFAULT); // Apply base style to feed the hard-coded cellStyles and cellStyleXfs\n}\n\nStyles.prototype = Object.create(XMLNode.prototype);\nStyles.prototype.constructor = Styles;\n\nStyles.metadata = {\n\ttag: 'styleSheet',\n\troot: true,\n\tattributes: [\n\t\t{\n\t\t\tname: 'xmlns',\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n\t\t}\n\t],\n\tproperties: [\n\t\t{\n\t\t\tid: 'numberFormats',\n\t\t\ttag: 'numFmts',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'fonts',\n\t\t\ttag: 'fonts',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'fills',\n\t\t\ttag: 'fills',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'borders',\n\t\t\ttag: 'borders',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'cellStyleXfs',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'xf',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'numFmtId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'fontId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'fillId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'borderId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 'cellXfs',\n\t\t\ttag: 'cellXfs',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tid: 'count',\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'cellStyles',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '1'\n\t\t\t\t}\n\t\t\t],\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'cellStyle',\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\tvalue: 'Normal'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'xfId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'builtinId',\n\t\t\t\t\t\t\tvalue: '0'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'dxfs',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttag: 'tableStyles',\n\t\t\tattributes: [\n\t\t\t\t{\n\t\t\t\t\tname: 'count',\n\t\t\t\t\tvalue: '0'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'defaultTableStyle',\n\t\t\t\t\tvalue: 'TableStyleMedium2'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'defaultPivotStyle',\n\t\t\t\t\tvalue: 'PivotStyleLight16'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\n\n/**\n * Adds the specified Style to the Styles class according to the\n * Style configuration. The method will return a Style object that\n * references Font, Fill, Border and an optional NumberFormat. If\n * some of the referenced Font, Fill, Border or NumberFormat objects\n * are not present yet, it will create them automatically, otherwise\n * it will re-use existing ones.\n *\n * The method ensures that particular Style combinations exist only\n * once and there are no duplicates.\n *\n * @param {Object} oData - Configuration object that defines the Style information\n * @param {Object} [oData.font] - Configuration object that defines the Font information\n * @param {string} [oData.font.name] - Name of the used Font i.E. 'Arial'\n * @param {string} [oData.font.size] - Preferred Font size i.E. '12'\n * @param {boolean} [oData.font.bold] - Defines the Font weight\n * @param {Object} [oData.fill] - Configuration object that defines the Fill information\n * @param {string} [oData.fill.color] - HEX string defining the color of the cell fill\n * @param {string} [oData.fill.type] - Defines the type of the fill i.E. 'none' or 'solid'\n * @param {Object} [oData.border] - Configuration object that defines the Border information\n * @param {Object|number} [oData.numberFormat] - Configuration object that defines the NumberFormat information\n * @param {string} [oData.numberFormat.format] - Formatting template that will be used\n * @param {string} [oData.align] - Defines the text alignment within the cell\n * @returns {number} - The ID of the unique Style object that needs to be referenced\n */\nStyles.prototype.addStyle = function(oData) {\n\tvar style, fontId, fillId, borderId, numberFormatId;\n\n\t/* Add Font, Fill, Border and NumberFormat if needed */\n\tfontId = this.addFont(oData.font);\n\tfillId = this.addFill(oData.fill);\n\tborderId = this.addBorder(oData.border);\n\n\t/* Fallback to avoid custom NumberFormats that won't be used if oData.numberFormat is undefined */\n\tif (typeof oData.numberFormat === 'undefined') {\n\t\toData.numberFormat = 0;\n\t}\n\n\tnumberFormatId =\n\t\tNumberFormat._isBuiltin(oData.numberFormat) ? oData.numberFormat : this.addNumberFormat(oData.numberFormat);\n\n\t/* Create temporary Style */\n\tstyle = new Style();\n\n\tstyle.setFontId(fontId);\n\tstyle.setFillId(fillId);\n\tstyle.getBorderId(borderId);\n\tstyle.setNumberFormatId(numberFormatId);\n\n\t/* Add Style if not already present */\n\treturn this._addToAggregation(style, this.cellXfs);\n};\n\n\n/**\n * Adds the specific item to the provided aggregation. This Method\n * should only be called by the library itself due to possible\n * failures. It automatically updates the count within the XML\n * representation of this aggregation.\n *\n * This method should only be used for Font, Fill, Border or\n * NumberFormat objects.\n *\n * @param {Font|Fill|Border|NumberFormat|Style} oItem - The item that needs to be appended to the aggregation\n * @param {Array} aAggregation - An array that represents the aggregation\n * @returns {number} - The zero-based index of the element after it was inserted\n * @private\n */\nStyles.prototype._addToAggregation = function(oItem, aAggregation) {\n\tvar count, i;\n\n\ti = -1;\n\n\taAggregation.childs.forEach(function(item, index, array) {\n\t\tif (item.equals(oItem)) {\n\t\t\ti = index;\n\t\t}\n\t});\n\n\tif (i === -1) {\n\t\taAggregation.addChild(oItem);\n\t\tcount = aAggregation.childs.length;\n\n\t\taAggregation.count.value = count;\n\t\ti = count - 1;\n\t}\n\n\treturn i;\n};\n\n\n/**\n * This method adds a RGB color to the Styles collection that is\n * referenced by several Styles.\n *\n * If this particular color is already present, it will not add it a\n * second time.\n *\n * @param {string} sHexColor - HEX string representing a RGB color\n */\nStyles.prototype.addColor = function(sHexColor) {\n\tif (!this.colors) {\n\t\tthis.addChild({\n\t\t\tid: 'colors',\n\t\t\ttag: 'colors',\n\t\t\tproperties: [\n\t\t\t\t{\n\t\t\t\t\tid: 'mru',\n\t\t\t\t\ttag: 'mruColors'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\t// TODO Check if color is already present\n\n\tthis.colors.mru.addChild({\n\t\ttag: 'color',\n\t\tattributes: [\n\t\t\t{\n\t\t\t\tname: 'rgb',\n\t\t\t\tvalue: 'FF' + sHexColor\n\t\t\t}\n\t\t]\n\t});\n};\n\n\n/**\n * This method adds a Font to the Styles collection that can be\n * referenced by several Styles. The Font is instantiated according\n * to the provided configuration object.\n *\n * If this particular Font is already present, it will not add it a\n * second time. This ensures that each referenced Font is unique\n * according to the criteria of Font#equals.\n *\n * The method returns the index which deals as an identifier for this\n * Font.\n *\n * @param {Object} oData - Configuration object for this Font\n * @returns {number} - The index of this Font used for reference by Style objects\n */\nStyles.prototype.addFont = function(oData) {\n\tvar oFont = new Font(oData);\n\n\treturn this._addToAggregation(oFont, this.fonts);\n};\n\n\n/**\n * This method adds a Fill to the Styles collection that can be\n * referenced by several Styles. The Fill is instantiated according\n * to the provided configuration object.\n *\n * If this particular Fill is already present, it will not add it a\n * second time. This ensures that each referenced Fill is unique\n * according to the criteria of Fill#equals.\n *\n * The method returns the index which deals as an identifier for this\n * Fill.\n *\n * @param {Object} oData - Configuration object for this Fill\n * @returns {number} - The index of this Fill used for reference by Style objects\n */\nStyles.prototype.addFill = function(oData) {\n\tvar index, oFill;\n\n\toFill = new Fill(oData);\n\n\tindex = this._addToAggregation(oFill, this.fills);\n\n\tif (oFill.getFill() !== null) {\n\t\tthis.addColor(oFill.getFill());\n\t}\n\n\treturn index;\n};\n\n\n/**\n * This method adds a Border to the Styles collection that can be\n * referenced by several Styles. The Border is instantiated according\n * to the provided configuration object.\n *\n * If this particular Border is already present, it will not add it a\n * second time. This ensures that each referenced Border is unique\n * according to the criteria of Border#equals.\n *\n * The method returns the index which deals as an identifier for this\n * Border.\n *\n * @param {Object} oData - Configuration object for this Border\n * @returns {number} - The index of this Border used for reference by Style objects\n */\nStyles.prototype.addBorder = function(oData) {\n\tvar oBorder = new Border(oData);\n\n\treturn this._addToAggregation(oBorder, this.borders);\n};\n\n\n/**\n * This method adds a NumberFormat to the Styles collection that can\n * be referenced by several Styles. The NumberFormat is instantiated\n * according to the provided configuration object.\n *\n * If this particular NumberFormat is already present, it will not\n * add it a second time. This ensures that each referenced\n * NumberFormat is unique according to the criteria of\n * NumberFormat#equals.\n *\n * The method returns the index which deals as an identifier for this\n * NumberFormat.\n *\n * @param {Object} oData - Configuration object for this NumberFormat\n * @returns {number} - The index of this NumberFormat used for reference by Style objects\n */\nStyles.prototype.addNumberFormat = function(oData) {\n\tvar numberFormat;\n\n\tnumberFormat = new NumberFormat(oData);\n\tthis._addToAggregation(numberFormat, this.numberFormats);\n\n\tnumberFormat.setId(NumberFormat.ID_OFFSET + this.numberFormats.count.value);\n\n\treturn numberFormat.getId();\n};\n\nmodule.exports = Styles;",
    "var XMLElement = require('./XMLElement');\n\n/**\n * The class XMLAttribute is a wrapper for representing XML-like attributes attributes.\n * It is mainly used for defining namespaces and namespace-related attributes.\n *\n * @param {object} oConfig - Object representation of the XMLNode containing at least the tag of the element.\n * @param {string} oConfig.name - String representation of the XML tag.\n * @param {string} [oConfig.prefix] - Prefix of the {@link XMLAttribute} that will be used for XML namespace purposes.\n * @param {string} [oConfig.suffix] - Suffix of the {@link XMLAttribute} that will be used for XML namespace purposes.\n * @param {string} [oConfig.value] - Textual value of the {@link XMLAttribute}.\n * @class\n * @module xml/XMLAttribute\n */\nfunction XMLAttribute(oConfig) {\n\tXMLElement.call(this, oConfig);\n\n\tthis.name = oConfig.name ? oConfig.name : '';\n\tthis.prefix = oConfig.prefix ? oConfig.prefix : '';\n\tthis.suffix = oConfig.suffix ? oConfig.suffix : '';\n}\n\nXMLAttribute.prototype = Object.create(XMLElement.prototype);\nXMLAttribute.prototype.constructor = XMLAttribute;\n\n/**\n * Performes a String serialization of the XMLAttribute. The representation is formatted as follows:\n * <prefix>:<name>:<suffix>=\"<value>\"\n *\n * i.E. ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'\n * for { name: 'xmlns', suffix: 'xsi', value: 'http://www.w3.org/2001/XMLSchema-instance' }\n *\n * Note that the serialized String always comes with a leading whitespace to allow easy concatenation.\n *\n * @function serialize\n * @returns {string} - String representation of the XMLAttribute\n */\nXMLAttribute.prototype.serialize = function(){\n\treturn ' ' + (this.prefix ? this.prefix + ':' : '') + this.name\n\t\t+ (this.suffix ? ':' + this.suffix : '') + '=\"' + this.xmlEncode(this.value) + '\"';\n};\n\nmodule.exports = XMLAttribute;",
    "/**\n * The XMLElement is an abstract base class that can store a\n * particular value and escape XML specific characters.\n *\n * @param {Object} oConfig - Configuration object that contains the value of this XML Element\n * @constructor\n * @abstract\n */\nfunction XMLElement(oConfig) {\n\tthis.value = oConfig && oConfig.value ? oConfig.value : '';\n}\n\n/**\n * Escapes the given String value to fulfill the requirements of\n * XML encoded characters. If the String does not contain any\n * character that needs to be encoded, the original String will\n * be returned.\n *\n * This significantly increases the performance because the\n * initial regular expression match is much faster than the\n * String replace function. We assume that only a few Strings\n * need to be encoded.\n *\n * The following characters need to be encoded:\n * < (lower than)\n * > (greater than)\n * \" (quotes)\n * ' (apostrophe)\n * & (ampersand)\n *\n * @param {string} sValue - The value that needs to be XML encoded\n * @returns {string} - XML encoded String\n */\nXMLElement.prototype.xmlEncode = function(sValue) {\n\treturn typeof sValue === 'string' && sValue.match(/[><\"'&]+/) !== null ? this._replace(sValue) : sValue;\n};\n\n/**\n * @see _xmlEncode\n * @param {string} sValue - The string that contains characters that needs to be replaced\n * @returns {string} - XML encoded String\n * @private\n */\nXMLElement.prototype._replace = function(sValue) {\n\n\t/**\n\t * Perform ampersand replacement first to avoid encoding the\n\t * control ampersand of other encoded characters.\n\t *\n\t * i.E. >& should be encoded as &gt;&amp; instead of &amp;gt;&amp;\n\t */\n\treturn sValue\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/'/g, '&apos;');\n};\n\nmodule.exports = XMLElement;",
    "var XMLElement = require('./XMLElement');\nvar XMLAttribute = require('./XMLAttribute');\n\n/**\n * JSON representation of XML nodes. Each node has a tag an can have multiple {@link XMLAttribute} entries assigned.\n * It can also have multiple child {@link XMLNode} elements assigned. The node can contain a value.\n *\n * @param {object|string} oConfig - Object representation of the XMLNode containing at least the tag of the element.\n * @param {string} oConfig.tag - String representation of the XML tag.\n * @param {object[]} [oConfig.attributes] - Aggregation for adding {@link XMLAttributes} to the current node.\n * @param {object[]} [oConfig.properties] - Aggregation for adding {@link XMLNode} objects as child objects to this node\n * @param {string} [oConfig.value] - String value inside the XML tag.\n * @class\n * @module xml/XMLNode\n */\nfunction XMLNode(oConfig) {\n\tvar i, j, config;\n\n\tXMLElement.call(this, oConfig);\n\n\t/* Shorthand functionality to simply assign the XMLNode tag name instead of a configuration object */\n\tconfig = typeof oConfig === 'string' ? {tag: oConfig} : oConfig;\n\n\tObject.defineProperty(this, 'root', {value: !!config.root, writable: false});\n\tthis.tag = typeof config.tag == 'string' ? config.tag : '';\n\tthis.attributes = [];\n\tthis.childs = [];\n\n\t/* Initialize the XML node by filling the aggregations if present */\n\tif (config.attributes) {\n\t\tfor (i = 0; i < config.attributes.length; i++) {\n\t\t\tthis.addAttribute(config.attributes[i]);\n\t\t}\n\t}\n\n\tif (config.properties) {\n\t\tfor (j = 0; j < config.properties.length; j++) {\n\t\t\tthis.addChild(config.properties[j]);\n\t\t}\n\t}\n}\n\nXMLNode.prototype = Object.create(XMLElement.prototype);\nXMLNode.prototype.constructor = XMLNode;\n\nXMLNode.processingInformation = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n\n\n/**\n * Adds the provided XMLAttribute object to the XMLNode.\n * If no XMLAttribute is provided it will create one instead.\n * The method returns the XMLAttribute for chaining.\n *\n * @function addAttribute\n * @param {Object} oConfig - XMLAttribute or configuration object that represents a XMLAttribute\n * @returns {Object} - An instance of XMLAttribute that was added to this node\n */\nXMLNode.prototype.addAttribute = function(oConfig) {\n\tvar attribute = oConfig instanceof XMLAttribute ? oConfig : new XMLAttribute(oConfig);\n\n\tthis.attributes.push(attribute);\n\n\tif (oConfig.id) {\n\t\tObject.defineProperty(this, oConfig.id, {value: attribute, writable: false, configurable: true});\n\t}\n\n\treturn attribute;\n};\n\n\n/**\n * Adds the provided XMLNode object as child to the current XMLNode.\n * If no XMLNode is provided it will create one instead.\n * The method returns the XMLNode for chaining.\n *\n * @function addChild\n * @param {Object} oConfig - XMLNode or configuration object that represents a XMLNode\n * @returns {object} - An instance of XMLNode that was added to this node\n */\nXMLNode.prototype.addChild = function(oConfig) {\n\n\t/* Additional Attributes of the child node will be added in the Constructor */\n\tvar node = oConfig instanceof XMLNode ? oConfig : new XMLNode(oConfig);\n\n\tthis.childs.push(node);\n\n\tif (oConfig.id) {\n\t\tObject.defineProperty(this, oConfig.id, {value: node, writable: false, configurable: true});\n\t}\n\n\treturn node;\n};\n\n\n/**\n * Removes the property from this object and also deletes the\n * referenced item within the child nodes or attributes\n * aggregation.\n *\n * The method returns the previously referenced object or null if\n * the property name is not present on this particular XMLNode or\n * if no item is referenced.\n *\n * Builtin properties of XMLNode cannot be removed with this\n * function. These are \"root\", \"tag\", \"attributes\", \"childs\",\n * \"value\".\n *\n * @param {string} sProperty - Name of the property that should be removed\n * @returns {XMLNode|XMLAttribute|null} - The referenced object that gets removed as well\n */\nXMLNode.prototype.remove = function(sProperty) {\n\tvar index, referencedElement, aAggregation;\n\n\t/* Only proceed if property is present */\n\tif (!(sProperty in this)) {\n\t\treturn null;\n\t}\n\n\treferencedElement = this[sProperty];\n\n\t/* Check if referenced element is a XMLAttribute */\n\tif (referencedElement instanceof XMLAttribute) {\n\t\taAggregation = this.attributes;\n\t} else if (referencedElement instanceof XMLNode && !(sProperty in new XMLNode(''))) {\n\t\taAggregation = this.childs;\n\t} else {\n\n\t\t/* Early return if referenced element is neither an XMLAttribute nor XMLNode */\n\t\treturn null;\n\t}\n\n\tindex = aAggregation.indexOf(referencedElement);\n\taAggregation.splice(index, 1); // It is ensured that index > -1 otherwise #addChild or #addAttribute fail\n\tdelete this[sProperty];\n\n\treturn referencedElement;\n};\n\n/**\n * Allows recursive serialization of the object and its descendants. If the XMLNode is marked as root node,\n * it will automatically add the XML processing information in front of the serialized representation.\n *\n * @function serialize\n * @returns {string} - String representation of the XMLNode.\n */\nXMLNode.prototype.serialize = function() {\n\tvar sSerialized, i, j;\n\n\tsSerialized = (this.root ? XMLNode.processingInformation : '') + '<' + this.tag;\n\n\t/* Insert attributes including namespace information */\n\tfor (i = 0; i < this.attributes.length; i++) {\n\t\tsSerialized += this.attributes[i].serialize();\n\t}\n\n\t/* Insert child nodes and value */\n\tif (this.childs.length || this.value || typeof this.value === 'number') {\n\t\tsSerialized += '>';\n\n\t\tfor (j = 0; j < this.childs.length; j++) {\n\t\t\tsSerialized += typeof this.childs[j] === 'string' ? this.childs[j] : this.childs[j].serialize();\n\t\t}\n\t\tsSerialized += this.xmlEncode(this.value);\n\n\t\tsSerialized += '</' + this.tag + '>';\n\t} else {\n\n\t\t/* Shorthand tag support */\n\t\tsSerialized += '/>';\n\t}\n\n\treturn sSerialized;\n};\n\nmodule.exports = XMLNode;"
  ]
}