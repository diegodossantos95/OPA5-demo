// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.mdc.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.mdc.FilterFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.FilterFieldRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/FilterFieldRenderer",['jquery.sap.global', 'sap/ui/core/Renderer', 'sap/ui/core/IconPool'],
	function(jQuery, Renderer, IconPool) {
		"use strict";

		//initialize the Icon Pool
		IconPool.insertFontFaceStyle();

		var FilterFieldRenderer = Renderer.extend("sap.ui.mdc.FilterFieldRenderer");

		FilterFieldRenderer.render = function(oRm, oControl) {
			var control = {
				content: oControl.getContent(),
				editable: oControl.getEditable()
			};

			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUiMdcFilterField");
			oRm.writeClasses();
			oRm.addStyle("display", "inline-block");
			oRm.addStyle("width", oControl.getWidth());
			oRm.writeStyles();
			oRm.write(">");

			if (control.content) {
				oRm.renderControl(control.content);
			}
			oRm.write("</div>");
		};

		return FilterFieldRenderer;

	}, /* bExport= */ true);
}; // end of sap/ui/mdc/FilterFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.FilterOperatorConfig') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.FilterOperatorConfig'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/FilterOperatorConfig",["sap/ui/base/Object", "sap/ui/model/FilterOperator", "sap/ui/model/Filter"],

	function(BaseObject, ModelOperator, Filter) {
		"use strict";


		/**
		 *
		 * @class Configuration of model-specific filter operators depending on data types.
		 * @extends sap.ui.base.Object
		 *
		 * @author SAP SE
		 * @version 1.50.6
		 * @since 1.48.0
		 * @alias sap.ui.mdc.FilterOperatorConfig
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var FilterOperatorConfig = BaseObject.extend("sap.ui.mdc.FilterOperatorConfig", /** @lends sap.ui.mdc.FilterOperatorConfig.prototype */ {

			/**
			 * Not to be called by applications, just by models
			 * @protected
			 */
			constructor: function() {
				BaseObject.apply(this);

				// use clone of default config map for this instance
				this.mOperators = jQuery.extend(true, {}, FilterOperatorConfig._mOperators);
				this.mTypes = jQuery.extend(true, {}, FilterOperatorConfig._mTypes);
				this.mOpsForType = jQuery.extend(true, {}, FilterOperatorConfig._mOpsForType);
			}
		});




		// base config of types and operators

		sap.ui.model.type.String.extend("sap.ui.model.type.Key", {});

		// default types, operators, and mappings - could be static settings for ALL FilterOperatorConfigs or defined by an extended FilterOperatorConfig for a certain model type

		FilterOperatorConfig._mTypes = {
			// basic
			"base": undefined, // TODO: needed?
			"string": "base",
			"numeric": "base",
			"date": "base",
			"time": "base",
			"boolean": "base",
			"int": "numeric",
			"float": "numeric",

			// simple
			"sap.ui.model.type.Boolean": "boolean",
			"sap.ui.model.type.Date": "date",
			"sap.ui.model.type.FileSize": "string",
			"sap.ui.model.type.Float": "float",
			"sap.ui.model.type.Integer": "int",
			"sap.ui.model.type.String": "string",
			"sap.ui.model.type.Time": "time",
			// odata
			"sap.ui.model.odata.type.Boolean": "boolean",
			"sap.ui.model.odata.type.Byte": "int",
			"sap.ui.model.odata.type.Date": "date",
			"sap.ui.model.odata.type.DateTime": "datetime",
			"sap.ui.model.odata.type.DateTimeOffset": "datetime",
			"sap.ui.model.odata.type.Decimal": "float",
			"sap.ui.model.odata.type.Double": "float",
			"sap.ui.model.odata.type.Float": "float",
			"sap.ui.model.odata.type.Guid": "string",
			"sap.ui.model.odata.type.Int": "int",
			"sap.ui.model.odata.type.Int16": "int",
			"sap.ui.model.odata.type.Int32": "int",
			"sap.ui.model.odata.type.Int64": "int",
			"sap.ui.model.odata.type.Raw": "string",
			"sap.ui.model.odata.type.SByte": "int",
			"sap.ui.model.odata.type.Single": "int",
			"sap.ui.model.odata.type.String": "string",
			"sap.ui.model.odata.type.Time": "time",
			"sap.ui.model.odata.type.TimeOfDay": "time",

			//edm
			"Edm.Boolean": "sap.ui.model.odata.type.Boolean",
			"Edm.Byte": "sap.ui.model.odata.type.Byte",
			"Edm.Date": "sap.ui.model.odata.type.Date", // V4 Date
			"Edm.DateTime": "sap.ui.model.odata.type.DateTime", // only for V2  constraints: {displayFormat: 'Date' }
			"Edm.DateTimeOffset": "sap.ui.model.odata.type.DateTimeOffset", //constraints: { V4: true, precision: n }
			"Edm.Decimal": "sap.ui.model.odata.type.Decimal", //constraints: { precision, scale, minimum, maximum, minimumExclusive, maximumExclusive}
			"Edm.Double": "sap.ui.model.odata.type.Double",
			"Edm.Float": "sap.ui.model.odata.type.Single",
			"Edm.Guid": "sap.ui.model.odata.type.Guid",
			"Edm.Int16": "sap.ui.model.odata.type.Int16",
			"Edm.Int32": "sap.ui.model.odata.type.Int32",
			"Edm.Int64": "sap.ui.model.odata.type.Int64",
			//Edm.Raw not supported
			"Edm.SByte": "sap.ui.model.odata.type.SByte",
			"Edm.Single": "sap.ui.model.odata.type.Single",
			"Edm.String": "sap.ui.model.odata.type.String", //constraints: {maxLength, isDigitSequence}
			"Edm.Time": "sap.ui.model.odata.type.Time", // only V2
			"Edm.TimeOfDay": "sap.ui.model.odata.type.TimeOfDay" // V4 constraints: {precision}			
		};
		Object.freeze(FilterOperatorConfig._mTypes);

		FilterOperatorConfig._mOpsForType = { // defines operators for types
			"base": {
				operators: ["Contains", "EQ", "BT", "StartsWith", "EndsWith", "LE", "LT", "GE", "GT", "NE"], // all operators are supported
				defaultOperator: "EQ"
			},
			"string": {
				operators: ["EEQ", "Contains", "EQ", "BT", "StartsWith", "EndsWith", "LE", "LT", "GE", "GT", "NE"], // all operators are supported
				defaultOperator: "StartsWith"
			},
			"date": {
				operators: ["EQ", "BT", "LE", "LT", "GE", "GT", "NE"]
			},
			"numeric": {
				operators: ["EQ", "BT", "LE", "LT", "GE", "GT", "NE"]
			},
			"time": {
				operators: ["EQ", "BT", "LE", "LT", "GE", "GT"]
			},
			"boolean": {
				operators: ["EQ", "NE"]
			}
		};
		Object.freeze(FilterOperatorConfig._mOpsForType);

		FilterOperatorConfig._mOperators = {};




		// translation utils

		var oMessageBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc");
		sap.ui.getCore().attachLocalizationChanged(function() {
			oMessageBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc");
		});

		function getText(sKey, sType) {
			var key = sKey + (sType ? "." + sType : ""),
				sText;

			if (oMessageBundle.hasText(key)) {
				sText = oMessageBundle.getText(key);
			} else
			if (sType) {
				sText = oMessageBundle.getText(sKey);
			} else {
				sText = key;
			}
			return sText;
		}




		// Managing different FilterOperatorConfigs


		FilterOperatorConfig._mInstances = {}; // FilterOperatorConfig instances for all model instances needing one will be registered here  TODO: remove on destroy

		FilterOperatorConfig._mClasses = { // Model classes can register their own instances here
			undefined: FilterOperatorConfig // the default if a model type has no specific config registered (and none of its base classes): this base FilterOperatorConfig
		};


		/**
		 * Returns the FilterOperatorConfig for a specific model instance (and creates it lazily if required).
		 *
		 * @param oModel the model for which the filter operator configuration is requested
		 *
		 * @public
		 * @since 1.48
		 */
		FilterOperatorConfig.getFor = function(oModel) {
			var sKey = oModel && oModel.getId();
			var oFOC = FilterOperatorConfig._mInstances[sKey];

			if (!oFOC) {
				var oModelMeta = oModel && oModel.getMetadata();
				var oClass = FilterOperatorConfig._mClasses[oModelMeta && oModelMeta.getName()];
				while (!oClass) {
					oModelMeta = oModelMeta.getParent();
					oClass = FilterOperatorConfig._mClasses[oModelMeta && oModelMeta.getName()]; // try parent class - or use undefined, which returns the base config
				}

				oFOC = new oClass(); // instantiate the config and assign to the model in the map
				FilterOperatorConfig._mInstances[sKey] = oFOC;
			}

			return oFOC;
		};


		/**
		 * Registers a certain type of FilterOperatorConfig for the given model type.
		 * When someone requests the FilterOperatorConfig for a model of the given type, an instance of the config will be created and assigned to the model instance.
		 *
		 * This method may only be called by the model whose type is given as first parameter <code>sModelClassName</code>.
		 *
		 * @param {string} sModelClassName the name of the model class for which the given config should be used
		 * @param {object} oFOC the FilterOperatorConfig class (not an instance) to be used for the given model type
		 *
		 * @protected
		 */
		FilterOperatorConfig.registerFor = function(sModelClassName, oFOC) { // TODO: class or class name? Class name allows lazy require, but leads to async APIs all over the place
			FilterOperatorConfig._mClasses[sModelClassName] = oFOC;
		};



		// Using the configuration


		/**
		 * Gets the config defined for exactly this type, does not go up the type hierarchy.
		 *
		 * @param {string} sType
		 * @param {string} sConfigName
		 * @return {object} the config defined for exactly the given type
		 *
		 * @private
		 */
		FilterOperatorConfig.prototype._getConfig = function(sType, sConfigName) { // no vType support here, because called often
			var oConfig = this.mOpsForType[sType];
			if (oConfig) {
				return oConfig[sConfigName];
			}
		};


		/**
		 * Returns the required configuration, looks up the type hierarchy if required. Result might still be undefined.
		 * @param {string|sap.ui.model.SimpleType} vType
		 * @param {string} sConfigName
		 * @return {object} the config applicable for the given type (defined for this type or a base type)
		 *
		 * @private
		 */
		FilterOperatorConfig.prototype._findConfig = function(vType, sConfigName) {
			if (typeof vType === "object") {
				vType = vType.getMetadata().getName();
			}

			var oConfig;
			while (vType && !(oConfig = this._getConfig(vType, sConfigName))) { // search until we have a type with known operators
				vType = this.getParentType(vType); // go to parent type
			}
			// either vType is undefined because no type in the hierarchy had the config, or oConfig does now have the desired information

			return oConfig; // TODO: return base config if undefined? However, this only makes a difference when a type is not derived from base. Would this be intentional or an error?
		};


		/**
		 * Returns all available operators for the given type; see FilterOperatorConfig.getOperators()
		 *
		 * @param {string|sap.ui.model.SimpleType} vType
		 * @return {string[]} an array with the names of the supported filter operators
		 *
		 * @public
		 */
		FilterOperatorConfig.prototype.getOperatorsForType = function(vType) {
			return this._findConfig(vType, "operators");
		};


		/**
		 * Returns the default operator for the given type
		 *
		 * @param {string|sap.ui.model.SimpleType} vType a type or its name
		 * @return {string} the name of the default filter operator for the given type
		 *
		 * @public
		 */
		FilterOperatorConfig.prototype.getDefaultOperator = function(vType) {
			return this._findConfig(vType, "defaultOperator");
		};


		/**
		 * Returns the possible operators for the given type and (if given) value.
		 *
		 * @param {string|sap.ui.model.SimpleType} vType
		 * @param {string} [sValue] the value entered so far
		 * @return {object[]} the operator objects suitable to the given input string, considering the given type
		 *
		 * @public
		 */
		FilterOperatorConfig.prototype.getMatchingOperators = function(vType, sValue) {
			var aOperators = this.getOperatorsForType(vType);

			return this._getMatchingOperators(aOperators, sValue);
		};


		/**
		 * Returns those of the given operators which match the given value
		 *
		 * @param {string[]} aOperators the names of the operators which should be checked for matching; must be valid for the current type: this function only checks the operator against values
		 * @param {string} sValue the value to check the operators with
		 * @return {object[]} the operator objects suitable to the given input string
		 *
		 * @private
		 */
		FilterOperatorConfig.prototype._getMatchingOperators = function(aOperators, sValue) {
			// TODO: sType will be needed for checking the value content:   "=5" matches the EQ operator, but should only match when type is e.g. number, not for e.g. boolean
			var aResult = [],
				oOperator;

			aOperators.some(function(sOperatorName) {
				oOperator = this.getOperator(sOperatorName);
				if (oOperator && oOperator.test(sValue)) {
					aResult.push(oOperator);
				}
			}.bind(this));

			return aResult;
		};


		// TODO: doc
		FilterOperatorConfig.prototype.addType = function(sType, sBaseType) {
			if (this.mTypes[sType]) {
				// FIXME
				throw new Error("Type already exists: " + sType);
			} else {
				this.mTypes[sType] = sBaseType;
			}
		};

		FilterOperatorConfig.prototype.getParentType = function(sType) {
			return this.mTypes[sType];
		};


		/**
		 * Adds one or more operator(s) (given by name or array of names) to the given type
		 *
		 * @public
		 */
		FilterOperatorConfig.prototype.addOperatorsToType = function(vType, vOperators) {
			var sType = vType;
			if (typeof sType === "object") {
				sType = sType.getMetadata().getName();
			}
			var aOperators = this.getOperatorsForType(vType);

			if (!aOperators) {
				aOperators = [];
			}

			if (!(typeof vOperators === "string")) { // vOperators is array
				aOperators = aOperators.concat(vOperators);
			} else {
				aOperators.push(vOperators); // vOperators is a plain string
			}

			this.mOpsForType[sType] = this.mOpsForType[sType] || {};
			this.mOpsForType[sType].operators = aOperators;
		};


		/**
		 * Adds a operator to the list of operators
		 * Initially the bDefaultConfiguration is true and the operators are added globally
		 *
		 * @param {object} oOperator the operator configuration object
		 * @param {string} oOperator.name the operator's name
		 * @param {string} oOperator.filterOperator the operator's default filter operator that is created as defined in sap.ui.model.FilterOperator
		 * @param {string} oOperator.tokenParse the string representation of the regular expression that is used to parse the operator by a control
		 *                 within the string, placeholder can refer to the translated tokenText can be used. #tokenText# will refer to the
		 *                 given oOperator.tokenText property if given.
		 * @param {string} oOperator.tokenFormat the string representation of the regular expression that is used to parse the operator by a control
		 *                 within the string, placeholder can refer to the translated tokenText can be used. #tokenText# will refer to the
		 *                 given oOperator.tokenText property if given.
		 * @param {string[]} oOperator.valueTypes array of type name to be used. The length of the array defines the number of values that
		 *                 need to be entered with the operator.
		//  * @param {string} [oOperator.shortText] string representation of the operator as a short text.
		//  *                If the shortText is not given it will be looked up in the resource bundle of the sap.ui.mdc library by the key
		//  *                operators.{oOperator.name}.shortText
		 * @param {string} [oOperator.longText] string representation of the operator as a long text.
		 *                If the longText is not given it will be looked up in the resource bundle of the sap.ui.mdc library by the key
		 *                operators.{oOperator.name}.longText
		 * @param {string} [oOperator.tokenText] string representation of the operator as a short text.
		 *                If the token Text is not given it will be looked up in the resource bundle of the sap.ui.mdc library by the key
		 *                operators.{oOperator.name}.tokenText
		 */
		FilterOperatorConfig.prototype.addOperator = function(oOperator) {
			FilterOperatorConfig._addOperatorTo(oOperator, this.mOperators);
		};

		/**
		 * @static
		 */
		FilterOperatorConfig._addOperatorTo = function(oOperator, mOperators) {
			var mCurrent = mOperators;
			if (!oOperator.name) {
				jQuery.sap.log.warning("Operator configuration expects a name property");
			}
			if (!oOperator.filterOperator && !oOperator.getModelFilter) {
				jQuery.sap.log.error("Operator configuration for " + oOperator.name + " needs a default filter operator from sap.ui.model.FilterOperator or the function getModelFilter");
				return;
			}
			if (!bDefaultConfiguration) {
				if (mCurrent[oOperator.name] && !mCurrent[oOperator.name].custom) {
					jQuery.sap.log.warning("Duplicate Type Configuration: " + oOperator.name + ". A default type cannot be extended or overwritten.");
					return;
				}
				oOperator.custom = true;
			} else {
				jQuery.sap.log.debug("Operator Configuration for " + oOperator.name + " defined as default configuration");
			}
			oOperator = extendOperator(oOperator);
			if (bDefaultConfiguration) {
				//freeze the default operators for changes
				// not possible because we need to add context later?!?  TODO          Object.freeze(oOperator);
			}
			mOperators[oOperator.name] = oOperator;
		};


		//private function for configuration
		//enhance the operators from the configuration, create regexps and load texts
		function extendOperator(oObj) {
			var i;
			var sTextKey = oObj.textKey || "operators." + oObj.name;
			// oObj.shortText = oObj.shortText || getText(sTextKey + ".shortText") || "";
			oObj.longText = oObj.longText || getText(sTextKey + ".longText") || "";
			oObj.tokenText = oObj.tokenText || getText(sTextKey + ".tokenText") || "";

			// create token parsing RegExp
			if (oObj.tokenParse) {
				if (oObj.tokenText) {
					oObj.tokenParse = oObj.tokenParse.replace(/#tokenText#/g, oObj.tokenText);
					var iCount = oObj.valueTypes.length;
					for (i = 0; i < iCount; i++) {
						var sReplace = oObj.paramTypes ? oObj.paramTypes[i] : oObj.valueTypes[i];
						oObj.tokenParse = oObj.tokenParse.replace(new RegExp("\\$" + i, "g"), sReplace);
					}
					oObj.tokenParseRegExp = new RegExp(oObj.tokenParse, "i");
				}
			} else if (oObj.tokenText) {
				oObj.tokenParseRegExp = new RegExp(oObj.tokenText, "i"); // operator without value
			}

			// create token formatter
			if (oObj.tokenFormat) {
				if (oObj.tokenText) {
					oObj.tokenFormat = oObj.tokenFormat.replace(/\#tokenText\#/g, oObj.tokenText);
				}
			} else if (oObj.tokenText) {
				oObj.tokenFormat = oObj.tokenText; // static operator with no value (e.g. "THIS YEAR")
			}
			oObj.format = oObj.format || formatOperator.bind(oObj);
			oObj.parse = oObj.parse || parseOperator.bind(oObj);
			oObj.test = oObj.test || testOperator.bind(oObj);
			oObj.getCondition = oObj.getCondition || getOperatorCondition.bind(oObj);
			oObj.getModelFilter = oObj.getModelFilter || getModelFilterObject.bind(oObj);
			oObj._setOwner = setOwnerForOperator.bind(oObj);
			oObj.getTypeText = getText.bind(oObj);
			oObj._createLocalType = _createLocalType.bind(oObj);
			oObj.isEmpty = oObj.isEmpty || _isEmpty.bind(oObj);

			//more enhancements to be done...
			return oObj;
		}

		function setOwnerForOperator(oFilterOperatorConfig) { // creates the connection from operator to its FilterOperatorConfig instance (lazily done in getOperator)
			this.oFilterOperatorConfig = oFilterOperatorConfig;
			return this;
		}

		function getModelFilterObject(oCondition) {
			var oOperator = this.oFilterOperatorConfig.getOperator(oCondition.operator);
			return new Filter({ path: oCondition.fieldPath, operator: oOperator.filterOperator, value1: oCondition.values[0], value2: oCondition.values[1] }); // TODO: hardcoded for 2 values
		}

		function _isEmpty(oCondition, oType) {
			var isEmpty = false;
			for (var i = 0; i < this.valueTypes.length; i++) {
				var v = oCondition.values[i];
				if (!v) {
					isEmpty = true;
					break;
				}
			}
			return isEmpty;
		}

		function formatOperator(aValues, oCondition, oType) {
			var sTokenText = this.tokenFormat,
				iCount = this.valueTypes.length;
			for (var i = 0; i < iCount; i++) {
				var v = aValues[i] !== undefined && aValues[i] !== null ? aValues[i] : "";
				if (this.valueTypes[i] !== "self") {
					oType = this._createLocalType(this.valueTypes[i]);
				}
				var sReplace = oType ? oType.formatValue(v, "string") : v;
				sTokenText = sTokenText.replace(new RegExp("\\$" + i, "g"), sReplace);
			}
			return sTokenText;
		}

		function parseOperator(sText, oType) {
			var aMatch = sText.match(this.tokenParseRegExp);
			var aResult; // might remain undefined - if no match
			if (aMatch) {
				aResult = [];
				for (var i = 0; i < this.valueTypes.length; i++) {
					if (this.valueTypes[i] !== "self") {
						oType = this._createLocalType(this.valueTypes[i]);
					}
					try {
						var v = oType ? oType.parseValue(aMatch[i + 1], "string") : aMatch[i + 1];
						if (oType) {
							oType.validateValue(v);
							if (oType.oConstraints && oType.oConstraints.toUpperCase === true) {
								v = v.toUpperCase ? v.toUpperCase() : v;
							}
						}
						aResult.push(v);
					} catch (err) {
						// Error
						jQuery.sap.log.warning(err.message);
						throw new sap.ui.base.Exception(err.message);
					}
				}
			}
			return aResult; // currently returns empty array for operators without values, undefined for no match
		}

		function _createLocalType(sType) {
			if (!this._oType) {
				jQuery.sap.require(sType);
				var oTypeClass = jQuery.sap.getObject(sType);
				this._oType = new oTypeClass();
			}
			return this._oType;
		}

		function testOperator(sText, oType) {
			var bMatch = this.tokenParseRegExp.test(sText);
			if (bMatch && oType) {
				// try {
				var aValues = this.parse(sText, oType);
				bMatch = aValues.length == this.valueTypes.length;
				// } catch (err) {
				// bMatch = false;
				// }
			}
			return bMatch;
		}

		function getOperatorCondition(sText, oType) {
			if (this.test(sText, oType)) {
				var aValues = this.parse(sText, oType);
				return { operator: this.name, values: aValues };
			}
			return null;
		}

		/**
		 * Returns the operator object for the given operator name
		 * @param {string} sOperator the name of the operator
		 * @returns {object} the operator object, or undefined if the operator with the requested name does not exist
		 */
		FilterOperatorConfig.prototype.getOperator = function(sOperator) {
			var oOperator = this.mOperators[sOperator];
			return oOperator ? oOperator._setOwner(this) : undefined; // TODO: could also be done when cloning the initial map!
		};






		/**
		 * Adding default operators
		 *
		 */
		bDefaultConfiguration = true;

		FilterOperatorConfig._addOperatorTo({
			name: "EEQ",
			showInSuggest: false,
			filterOperator: ModelOperator.EQ,
			tokenParse: "^==(.*)$",
			tokenFormat: "$1 ($0)",
			valueTypes: ["self"],
			longText: "EEQ",
			displayFormats: {
				DescriptionValue: "$1 ($0)",
				ValueDescription: "$0 ($1)",
				Description: "$1",
				Value: "$0"
			},
			format: function(aValues, oContext, oType) {
				var sTokenText = this.tokenFormat,
					iCount = this.valueTypes.length + 1, // we get the code and description as input for EEQ
					sReplace;

				var displayFormat = oType.oFormatOptions && oType.oFormatOptions.displayFormat ? oType.oFormatOptions.displayFormat : "DescriptionValue";
				sTokenText = this.displayFormats[displayFormat];

				// if (oContext.description) {
				// 	//TODO workaround to handle the old .description values. 
				// 	// Can be removed when the fe is using the aValues for the description
				// 	aValues[1] = oContext.description;
				// 	delete oContext.description;
				// }

				if (!aValues[1]) {
					sTokenText = this.displayFormats["Value"];
					iCount = 1;
				}

				for (var i = 0; i < iCount; i++) {
					sReplace = aValues[i] || "";
					sTokenText = sTokenText.replace(new RegExp("\\$" + i, "g"), sReplace);
				}

				return sTokenText;
			}
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "EQ",
			filterOperator: ModelOperator.EQ,
			tokenParse: "^=([^=].*)$",
			tokenFormat: "=$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "BT",
			filterOperator: ModelOperator.BT,
			tokenParse: "^(.+)\\.\\.\\.(.+)$", // TODO: does this work?? At least also matches crap like ".....". I guess validation of value types needs to get rid of those.
			tokenFormat: "$0...$1",
			valueTypes: ["self", "self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "LT",
			filterOperator: ModelOperator.LT,
			tokenParse: "^<(.*)$",
			tokenFormat: "<$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "GT",
			filterOperator: ModelOperator.GT,
			tokenParse: "^>(.*)$",
			tokenFormat: ">$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "LE",
			filterOperator: ModelOperator.LE,
			tokenParse: "^<=(.*)$",
			tokenFormat: "<=$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "GE",
			filterOperator: ModelOperator.GE,
			tokenParse: "^>=(.*)$",
			tokenFormat: ">=$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "StartsWith",
			filterOperator: ModelOperator.StartsWith,
			tokenParse: "^([^\*].*)\\*$",
			tokenFormat: "$0*",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "EndsWith",
			filterOperator: ModelOperator.EndsWith,
			tokenParse: "^\\*(.*[^\*])$",
			tokenFormat: "*$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "Contains",
			filterOperator: ModelOperator.Contains,
			tokenParse: "^\\*(.*)\\*$",
			tokenFormat: "*$0*",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		/* TODO
		 *
		FilterOperatorConfig._addOperatorTo({
			name: "ANY",
			filterOperator: ModelOperator.ANY,
			tokenParse: "^#tokenText#(.*)\\*$",
			tokenFormat: "#tokenText#$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);

		FilterOperatorConfig._addOperatorTo({
			name: "ALL",
			filterOperator: ModelOperator.ALL,
			tokenParse: "^#tokenText#(.*)$",
			tokenFormat: "#tokenText#$0",
			valueTypes: ["self"]
		}, FilterOperatorConfig._mOperators);
		*/

		FilterOperatorConfig._addOperatorTo({
			name: "NE",
			filterOperator: ModelOperator.NE,
			tokenParse: "^!=(.+)$",
			tokenFormat: "!=$0",
			valueTypes: ["self"],
			exclude: true
		}, FilterOperatorConfig._mOperators);


		/**
		 * Initially the bDefaultConfiguration is true and the types are added globally
		 * Types can extend from a base type and will overwrite the default settings
		 */

		var bDefaultConfiguration = false;

		Object.freeze(FilterOperatorConfig._mOperators); // this is the general operator config, which all instances clone first before doing any custom modification


		return FilterOperatorConfig;
	},
	/* bExport= */
	true);
}; // end of sap/ui/mdc/FilterOperatorConfig.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.FilterToken') ) {
jQuery.sap.declare('sap.ui.mdc.FilterToken'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.m.Tokenizer'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/FilterToken",['jquery.sap.global', 'sap/ui/base/ManagedObject', 'sap/m/Token', 'sap/m/Tokenizer'],
	function(jQuery, ManagedObject, Token, Tokenizer) {
	"use strict";

	/**
	 * Constructor for a new FilterToken.
	 * A FilterToken is used in a FilterField to visualize a condition.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 *
	 * @extends sap.m.Token
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 *
	 * @constructor
	 * @alias sap.ui.mdc.FilterToken
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.48.0
	 *
	 * @private
	 */
	var FilterToken = Token.extend("sap.ui.mdc.FilterToken", /** @lends sap.ui.mdc.FilterToken.prototype */ {
		metadata : {
			library : "sap.ui.mdc",
			properties : {

				/**
				 * Indicates that the token text can be edited by the user.
				 */
				changeable: {
					type: "boolean",
					defaultValue: false
				}
			},
			events : {
				/**
				 * This event is fired if a token changed.
				 */
				tokenChanged: {
					parameters: {
						text: {
							type: "string"
						}
					}
				}
			}
		}
	});
	//initialize some state
	FilterToken.prototype.init = function() {
		Token.prototype.init.apply(this);
		this.bAllowTextSelection = true;
		this._bEditing = false; //becomes true if the user starts editing the token text
	};

	FilterToken.prototype.setParent = function(oParent) {
		if (oParent instanceof Tokenizer) {
			oParent.bAllowTextSelection = true;
		}
		ManagedObject.prototype.setParent.apply(this, arguments);
	};

	/**
	 * Sets the text of the filter token to the given value
	 * @param {string} sValue the new text of the token
	 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
	 * @public
	 */
	FilterToken.prototype.setText = function(sValue) {
		Token.prototype.setText.call(this, sValue, true);
		this.getDomRef() && (this.getDomRef().firstChild.innerText = this.getText());
		return this;
	};

	// activates the input field within the filter token.
	FilterToken.prototype._activateInput = function() {
		if (!this._bEditing) {
			var oInput = this.getDomRef().firstChild;
			oInput.tabIndex = "0";
			oInput.focus();
			oInput.setAttribute("contenteditable", "true");
			this._bEditing = true;
			this.$().addClass("sapMTokenEditing");
		}
	};

	// deactivates the input field within the filter token.
	FilterToken.prototype._deactivateInput = function() {
		this.getDomRef().firstChild.tabIndex = "-1";
		this.focus();
		var oInput = this.getDomRef().firstChild;
		var sText = oInput.innerText;
		if (sText !== this.getText()) {
			var sOldText = this.getText();
			this.setText(this.getDomRef().firstChild.innerText);
			this.fireTokenChanged({
				text: this.getText(),
				oldText: sOldText
			});
		}
		this._bEditing = false;
		oInput.removeAttribute("contenteditable");
		this.$().removeClass("sapMTokenEditing");
	};

	/**
	 * Function is called when token is pressed to select/deselect token.
	 *
	 * @param {jQuery.Event} oEvent
	 *
	 * @private
	 */
	FilterToken.prototype._onTokenPress = function(oEvent) {
		var bSelected = this.getSelected(),
			bCtrlKey = oEvent.ctrlKey || oEvent.metaKey,
			bShiftKey = oEvent.shiftKey;
		Token.prototype._onTokenPress.apply(this, arguments);
		if (bSelected && this.getChangeable() && !bCtrlKey && !bShiftKey) {
			this._activateInput();
		}
	};

	/**
	 * Event handler called when control is loosing the focus, removes selection from token
	 *
	 * @param {jQuery.Event} oEvent
	 * @private
	 */
	FilterToken.prototype.onsapfocusleave = function(oEvent) {
		if (this._bEditing) {
			this._deactivateInput();
		} else {
			this._callBaseEventHandler(oEvent, "onsapfocusleave");
		}
	};

	/**
	 * Event handler called when user presses the return/enter key
	 *
	 * @param {jQuery.Event} oEvent
	 * @private
	 */
	FilterToken.prototype.onsapenter = function(oEvent) {
		if (this._bEditing) {
			this._deactivateInput();
		} else {
			this._callBaseEventHandler(oEvent, "onsapfocusleave");
		}
	};

	/**
	 * Event handler called when the entered a text in the input
	 *
	 * @param {jQuery.Event} oEvent
	 * @private
	 */
	FilterToken.prototype.oninput = function(oEvent) {
		if (this._bEditing || oEvent.target === this.getDomRef().firstChild) {
			oEvent.stopImmediatePropagation();
		} else {
			this._callBaseEventHandler(oEvent, "oninput");
		}
	};

	/**
	 * Event handler called when key down happend on the
	 *
	 * @param {jQuery.Event} oEvent
	 * @private
	 */
	FilterToken.prototype.onkeydown = function(oEvent) {
		if (this._bEditing || oEvent.target === this.getDomRef().firstChild) {
			oEvent.stopImmediatePropagation();
			if (oEvent.keyCode === jQuery.sap.KeyCodes.F2) {
				this._deactivateInput();
			}
		} else {
			if (this.getChangeable() && oEvent.keyCode === jQuery.sap.KeyCodes.F2) {
				this._activateInput();
			}
			this._callBaseEventHandler(oEvent, "onkeydown");
		}
	};

	FilterToken.prototype.onsapspace = function(oEvent) {
		if (this._bEditing || oEvent.target === this.getDomRef().firstChild) {
			oEvent.stopImmediatePropagation();
		} else {
			this._callBaseEventHandler(oEvent, "onsapspace");
		}
	};

	FilterToken.prototype.onsapescape = function(oEvent) {
		if (this._bEditing || oEvent.target === this.getDomRef().firstChild) {
			this._deactivateInput();
			oEvent.stopImmediatePropagation();
		} else {
			this._callBaseEventHandler(oEvent, "onsapescape");
		}
	};

	FilterToken.prototype.onkeyup = function(oEvent) {
		if (this._bEditing || oEvent.target === this.getDomRef().firstChild) {
			oEvent.stopImmediatePropagation();
		} else {
			this._callBaseEventHandler(oEvent, "onkeyup");
		}
	};

	FilterToken.prototype._callBaseEventHandler = function(oEvent, sName) {
		var oParent = this.getMetadata().getParent();
		if (oParent) {
			oParent = oParent.getClass();
			if (oParent.prototype[sName]) {
				oParent.prototype[sName].apply(this, [oEvent]);
			}
		}
	};

	return FilterToken;
}, true);
}; // end of sap/ui/mdc/FilterToken.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.FilterTokenRenderer') ) {
/*!

* SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved

*/
jQuery.sap.declare('sap.ui.mdc.FilterTokenRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/FilterTokenRenderer",['jquery.sap.global', 'sap/ui/core/Renderer'],
	function(jQuery, Renderer) {
	"use strict";


	/**
	 * Token renderer.
	 * @namespace
	 */
	var FilterTokenRenderer =  Renderer.extend("sap.ui.mdc.FilterTokenRenderer");

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	FilterTokenRenderer.render = function(oRm, oControl){
		// write the HTML into the render manager
		oRm.write("<div tabindex=\"-1\"");
		oRm.writeControlData(oControl);
		oRm.addClass("sapMToken");
		oRm.addClass("sapMFilterToken");

		oRm.writeAttribute("role", "listitem");
		oRm.writeAttribute("aria-readonly", !oControl.getEditable());
		oRm.writeAttribute("aria-selected", oControl.getSelected());

		if (oControl.getSelected()) {
			oRm.addClass("sapMTokenSelected");
		}

		if (!oControl.getEditable()) {
			oRm.addClass("sapMTokenReadOnly");
		}

		oRm.writeClasses();

		// add tooltip if available
		var sTooltip = oControl.getTooltip_AsString();
		if (sTooltip) {
			oRm.writeAttributeEscaped("title", sTooltip);
		}

		var oAccAttributes = {}; // additional accessibility attributes

		//ARIA attributes
		oAccAttributes.describedby = {
			value: oControl._sAriaTokenLabelId,
			append: true
		};

		if (oControl.getEditable()) {
			oAccAttributes.describedby = {
					value: oControl._sAriaTokenDeletableId,
					append: true
			};
		}

		oRm.writeAccessibilityState(oControl, oAccAttributes);

		oRm.write(">");

		this._renderInnerControl(oRm, oControl);

		if (oControl.getEditable()) {
			oRm.renderControl(oControl._deleteIcon);
		}

		oRm.write("</div>");
	};

	FilterTokenRenderer._renderInnerControl = function(oRm, oControl){
		var sTextDir = oControl.getTextDirection();

		oRm.write("<div");
		oRm.addClass("sapMTokenText");
		oRm.addClass("sapMFilterTokenText");

		oRm.writeStyles();
		oRm.writeClasses();
		// set text direction
		if (sTextDir !== sap.ui.core.TextDirection.Inherit) {
			oRm.writeAttribute("dir", sTextDir.toLowerCase());
		}
		oRm.writeAttribute("tabIndex", "-1");
		oRm.write(">");
		oRm.writeEscaped(oControl.getText());
		oRm.write("</div>");
	};


	return FilterTokenRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/mdc/FilterTokenRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.FixedValueListProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.FixedValueListProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/FixedValueListProvider",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {
		"use strict";

		/**
		 *
		 * @class simple item list Provider for FilterField.
		 * @extends sap.ui.base.Object
		 *
		 * @author SAP SE
		 * @version 1.50.6
		 * @since 1.48.0
		 * @alias sap.ui.mdc.FixedValueListProvider
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var FixedValueListProvider = BaseObject.extend("sap.ui.mdc.FixedValueListProvider", /** @lends sap.ui.mdc.FixedValueListProvider.prototype */ {

			constructor: function(mParameters) {
				BaseObject.apply(this);

				this._bShowAll = true;
				this._bShowHint = false;

				if (mParameters) {
					this._fInit = mParameters.init;
					this._fSuggest = mParameters.suggest;
					this._fSelect = mParameters.select;
					this._bShowAll = mParameters.enableShowAll !== undefined ? mParameters.enableShowAll : true;
					this._bShowHint = mParameters.showHint !== undefined ? mParameters.showHint : false;
					this._maxWidth = mParameters.maxWidth;
					this._bEnableFilterSuggest = mParameters.enableFilterSuggest;
					this._keyPath = mParameters.keyPath;
					this._descriptionPath = mParameters.descriptionPath;
					if (mParameters.control) {
						this.associateFilterField(mParameters.control);
					}
				}

			}
		});

		FixedValueListProvider.prototype.destroy = function() {
			this._oFilterField = null;
			this._oInput = null;
			this._oTable = null;
		};

		FixedValueListProvider.prototype.getTable = function() {
			return this._oTable;
		};

		FixedValueListProvider.prototype.setKeyPath = function(sKeyPath) {
			this._keyPath = sKeyPath;
		};

		FixedValueListProvider.prototype.setDescriptionPath = function(sDescriptionPath) {
			this._descriptionPath = sDescriptionPath;
		};

		FixedValueListProvider.prototype.setTable = function(oTable) {
			this._oTable = oTable;

			var oMultiInput = this._oFilterField.getAggregation("_input");

			// remove old suggestion list
			oMultiInput.removeAllSuggestionColumns();
			oMultiInput.removeAllSuggestionRows();

			if (oTable) {
				var oBindingInfo = oTable.getBindingInfo("items");

				var aColumns = oTable.getColumns();
				for (var i = 0; i < aColumns.length; i++) {
					var oColumn = aColumns[i].clone();
					oMultiInput.addSuggestionColumn(oColumn);
				}
				oMultiInput.setMaxSuggestionWidth(this._maxWidth ? this._maxWidth : (aColumns.length * 8 + 2) + "em");

				oMultiInput.setModel(oTable.getModel());

				oMultiInput.bindAggregation("suggestionRows", {
					path: oBindingInfo.path,
					template: oBindingInfo.template,
					parameters: oBindingInfo.parameters
				});
			} else {
				oMultiInput.bindAggregation("suggestionRows", null);
			}
		};

		FixedValueListProvider.prototype.associateFilterField = function(oFilterField) {
			this._oFilterField = oFilterField;
			this._oInput = oFilterField.getAggregation("_input");
			if (!(this._oInput instanceof sap.m.MultiInput)) {
				jQuery.sap.log.error("mdc:FixedValueListProvider", "associateFilterField for " + this._oInput.getId() + " not possible!");
				return;
			}

			this._oInput.setShowSuggestion(true);
			this._oInput.setEnableSuggestionsHighlighting(false);
			this._oInput.setFilterSuggests(this._bEnableFilterSuggest);
			this._oInput.setShowTableSuggestionValueHelp(false);
			if (this._bShowHint) {
				this._oInput.setPlaceholder("press space to get help");
			}

			// if (oFilterField.getMaxConditions() == 1) {
			//TODO workaround to change the valueHelpIcon
			this._oInput._getValueHelpIcon = function() {
				var _oValueHelpIcon = sap.m.MultiInput.prototype._getValueHelpIcon.apply(this, arguments);

				if (_oValueHelpIcon) {
					_oValueHelpIcon.setSrc(sap.ui.core.IconPool.getIconURI("slim-arrow-down"));
				}
				return _oValueHelpIcon;
			};

			//TODO workaround to open the suggest - simulates the open trigger 
			this._oInput.attachValueHelpRequest(function(oEvent) {
				var oInner = oEvent.oSource;
				oInner._$input.val(" ");
				oInner._triggerSuggest(" ");
			});
			// }

			this._oInput.attachSuggest(function(oEvent) {
				if (this._fInit && !this.getTable()) {
					this._fInit(this);
				}
				if (this._fSuggest) {
					this._fSuggest(this, oEvent);
				}
			}.bind(this));

			this._oInput.setFilterFunction(function(sValue, oItem) {
				var bShowAll = (sValue.lastIndexOf(" ") == sValue.length - 1) && this._bShowAll;
				sValue = sValue.trim();
				if (bShowAll) {
					return true;
				}
				return sap.m.Input._DEFAULTFILTER_TABULAR(sValue, oItem);
			}.bind(this));

			this._oInput.addValidator(function(oData) {
				var sText = oData.text,
					oRow = oData.suggestionObject,
					oSource = this._oInput,
					oBinding = this._oFilterField.getBinding("conditions"),
					oType = this._oFilterField._getDataType(),
					type = oType.getMetadata().getName(),
					oOperator, oCondition,
					sFieldPath = this._oFilterField.getFieldPath(),
					oDataModelRow, sKey, sDescription, sValue;

				if (oRow) {
					if (this._fSelect) {
						if (this._fSelect(this, oData)) {
							return null;
						}
					}

					// handle the selected item as EEQ with key
					var bc = oRow.getBindingContext();
					oDataModelRow = bc.getObject();

					sKey = this._keyPath && oDataModelRow[this._keyPath] ? oDataModelRow[this._keyPath] : null;
					sDescription = this._descriptionPath && oDataModelRow[this._descriptionPath] ? oDataModelRow[this._descriptionPath] : null;
					sValue = "==" + sKey;

					oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
					if (oOperator && oOperator.test(sValue, oType)) {
						oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sKey, sDescription));
						oSource.setValue("");
						this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
					}
				} else {
					jQuery.sap.log.info("mdc:FixedValueListProvider", "validator check if one suggestionRow exist for " + sText);

					if (oSource._getIsSuggestionPopupOpen && oSource._getIsSuggestionPopupOpen()) {
						var aSuggestionItems = oSource.getSuggestionRows();
						var n = 0,
							i = -1;
						aSuggestionItems.some(function(oItem, index) {
							if (oItem.getVisible()) {
								n++;
								i = index;
							}
							return n >= 2;
						});
						if (n === 1) {
							oDataModelRow = aSuggestionItems[i].getBindingContext().getObject();

							if (this._fSelect) {
								oData.suggestionObject = aSuggestionItems[i];
								if (this._fSelect(this, oData)) {
									return null;
								}
							}

							sKey = this._keyPath && oDataModelRow[this._keyPath] ? oDataModelRow[this._keyPath] : null;
							sDescription = this._descriptionPath && oDataModelRow[this._descriptionPath] ? oDataModelRow[this._descriptionPath] : null;
							sValue = "==" + sKey;

							oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
							if (oOperator && oOperator.test(sValue, oType)) {
								oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sKey, sDescription));
								oSource.setValue("");
								this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
								return null;
							}
						}
					}

					// first try to check if the input match to an operator
					var aOperators = this._oFilterField.getFilterOperatorConfig().getMatchingOperators(type, sText);

					// use default operator if nothing found
					if (aOperators.length !== 0) {
						oOperator = aOperators[0];
						oCondition = oOperator.getCondition(sText, oType);
						if (oCondition) {
							oCondition.fieldPath = sFieldPath;
							oBinding.getModel().addCondition(oCondition);
							oSource.setValue("");
							this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
							return null;
						}
					}

					// handle the input as a full key value and EEQ
					oSource.setValue("");
					jQuery.sap.delayedCall(100, this, function() {
						var sValue = "==" + sText;

						var oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
						if (oOperator && oOperator.test(sValue, oType)) {
							oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sText, sText));
							this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
						}
					});
				}

				return null;
			}.bind(this));

		};

		return FixedValueListProvider;
	},
	/* bExport= */
	true);
}; // end of sap/ui/mdc/FixedValueListProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.ODataSuggestProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.ODataSuggestProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/ODataSuggestProvider",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {
		"use strict";

		/**
		 *
		 * @class OData Model based Suggest Provider for FilterField.
		 * @extends sap.ui.base.Object
		 *
		 * @author SAP SE
		 * @version 1.50.6
		 * @since 1.48.0
		 * @alias sap.ui.mdc.ODataSuggestProvider
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var ODataSuggestProvider = BaseObject.extend("sap.ui.mdc.ODataSuggestProvider", /** @lends sap.ui.mdc.ODataSuggestProvider.prototype */ {

			constructor: function(mParameters) {
				BaseObject.apply(this);

				this._bShowAll = true;
				this._bShowHint = false;

				if (mParameters) {
					this._fInit = mParameters.init;
					this._fSuggest = mParameters.suggest;
					this._fSelect = mParameters.select;
					this._bShowAll = mParameters.enableShowAll !== undefined ? mParameters.enableShowAll : true;
					this._bShowHint = mParameters.showHint !== undefined ? mParameters.showHint : false;
					this._maxWidth = mParameters.maxWidth;
					this._bEnableFilterSuggest = mParameters.enableFilterSuggest;
					this._keyPath = mParameters.keyPath;
					this._descriptionPath = mParameters.descriptionPath;
					if (mParameters.control) {
						this.associateFilterField(mParameters.control);
					}
				}

			}
		});

		ODataSuggestProvider.prototype.destroy = function() {
			this._oFilterField = null;
			this._oInput = null;
			this._oTable = null;
		};

		ODataSuggestProvider.prototype.getTable = function() {
			return this._oTable;
		};

		ODataSuggestProvider.prototype.setKeyPath = function(sKeyPath) {
			this._keyPath = sKeyPath;
		};

		ODataSuggestProvider.prototype.setDescriptionPath = function(sDescriptionPath) {
			this._descriptionPath = sDescriptionPath;
		};

		ODataSuggestProvider.prototype.setTable = function(oTable) {
			this._oTable = oTable;

			var oMultiInput = this._oFilterField.getAggregation("_input");

			// remove old suggestion list
			oMultiInput.removeAllSuggestionColumns();
			oMultiInput.removeAllSuggestionRows();

			if (oTable) {
				var oBindingInfo = oTable.getBindingInfo("items");

				var aColumns = oTable.getColumns();
				for (var i = 0; i < aColumns.length; i++) {
					var oColumn = aColumns[i].clone();
					oMultiInput.addSuggestionColumn(oColumn);
				}
				oMultiInput.setMaxSuggestionWidth(this._maxWidth ? this._maxWidth : (aColumns.length * 8 + 2) + "em");

				oMultiInput.setModel(oTable.getModel());

				oMultiInput.bindAggregation("suggestionRows", {
					path: oBindingInfo.path,
					template: oBindingInfo.template,
					parameters: oBindingInfo.parameters
				});
			} else {
				oMultiInput.bindAggregation("suggestionRows", null);
			}
		};

		ODataSuggestProvider.prototype.associateFilterField = function(oFilterField) {
			this._oFilterField = oFilterField;
			this._oInput = oFilterField.getAggregation("_input");
			if (!(this._oInput instanceof sap.m.MultiInput)) {
				jQuery.sap.log.error("mdc:ODataSuggestProvider", "associateFilterField for " + this._oInput.getId() + " not possible!");
				return;
			}

			this._oInput.setShowSuggestion(true);
			this._oInput.setEnableSuggestionsHighlighting(false);
			this._oInput.setFilterSuggests(this._bEnableFilterSuggest);
			this._oInput.setShowTableSuggestionValueHelp(false);
			if (this._bShowHint) {
				this._oInput.setPlaceholder("press space to get help");
			}

			this._oInput.attachSuggest(function(oEvent) {
				if (this._fInit && !this.getTable()) {
					this._fInit(this);
				}
				if (this._fSuggest) {
					this._fSuggest(this, oEvent);
				}
			}.bind(this));

			this._oInput.setFilterFunction(function(sValue, oItem) {
				var bShowAll = (sValue.lastIndexOf(" ") == sValue.length - 1) && this._bShowAll;
				sValue = sValue.trim();
				if (bShowAll) {
					return true;
				}
				return sap.m.Input._DEFAULTFILTER_TABULAR(sValue, oItem);
			}.bind(this));

			this._oInput.addValidator(function(oData) {
				var sText = oData.text,
					oRow = oData.suggestionObject,
					oSource = this._oInput,
					oBinding = this._oFilterField.getBinding("conditions"),
					oType = this._oFilterField._getDataType(),
					type = oType.getMetadata().getName(),
					oOperator, oCondition,
					sFieldPath = this._oFilterField.getFieldPath();
				var oDataModelRow;
				var sKey, sDescription, sValue;

				if (oRow) {
					if (this._fSelect) {
						if (this._fSelect(this, oData)) {
							return null;
						}
					}

					// handle the selected item as EEQ with key
					var bc = oRow.getBindingContext();
					oDataModelRow = bc.getObject();

					sKey = this._keyPath && oDataModelRow[this._keyPath] ? oDataModelRow[this._keyPath] : null;
					sDescription = this._descriptionPath && oDataModelRow[this._descriptionPath] ? oDataModelRow[this._descriptionPath] : null;
					sValue = "==" + sKey;

					jQuery.sap.log.info("mdc:ODataSuggestProvider", "validator suggestionObject handled sValue " + sValue);

					oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
					if (oOperator && oOperator.test(sValue, oType)) {
						oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sKey, sDescription));
						oSource.setValue("");
						this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
					}
				} else {
					jQuery.sap.log.info("mdc:ODataSuggestProvider", "validator check if one suggestionRow exist for " + sText);

					if (oSource._getIsSuggestionPopupOpen && oSource._getIsSuggestionPopupOpen()) {
						var aSuggestionItems = oSource.getSuggestionRows();
						var n = 0,
							i = -1;
						aSuggestionItems.some(function(oItem, index) {
							if (oItem.getVisible()) {
								n++;
								i = index;
							}
							return n >= 2;
						});
						if (n === 1) {
							oDataModelRow = aSuggestionItems[i].getBindingContext().getObject();

							if (this._fSelect) {
								oData.suggestionObject = aSuggestionItems[i];
								if (this._fSelect(this, oData)) {
									return null;
								}
							}

							sKey = this._keyPath && oDataModelRow[this._keyPath] ? oDataModelRow[this._keyPath] : null;
							sDescription = this._descriptionPath && oDataModelRow[this._descriptionPath] ? oDataModelRow[this._descriptionPath] : null;
							sValue = "==" + sKey;

							oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
							if (oOperator && oOperator.test(sValue, oType)) {
								oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sKey, sDescription));
								oSource.setValue("");
								this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
								return null;
							}
						}
					}

					jQuery.sap.log.info("mdc:ODataSuggestProvider", "validator text handled " + sText);

					// first try to check if the input match to an operator
					var aOperators = this._oFilterField.getFilterOperatorConfig().getMatchingOperators(type, sText);

					// use default operator if nothing found
					if (aOperators.length !== 0) {
						oOperator = aOperators[0];
						oCondition = oOperator.getCondition(sText, oType);
						if (oCondition) {
							oCondition.fieldPath = sFieldPath;
							oBinding.getModel().addCondition(oCondition);
							oSource.setValue("");

							this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
							return null;
						}
					}

					// handle the input as a full key value and EEQ
					oSource.setValue("");
					jQuery.sap.delayedCall(100, this, function() {
						var sValue = "==" + sText;

						jQuery.sap.log.info("mdc:ODataSuggestProvider", "validator EEQ text handling " + sValue);

						var oOperator = this._oFilterField.getFilterOperatorConfig().getOperator("EEQ");
						if (oOperator && oOperator.test(sValue, oType)) {
							oCondition = oBinding.getModel().addCondition(oBinding.getModel().createItemCondition(sFieldPath, sText, sText));
							this._oFilterField.fireChange({ value: oCondition, type: "added", valid: true });
						}
					});
				}

				return null;
			}.bind(this));

		};

		return ODataSuggestProvider;
	},
	/* bExport= */
	true);
}; // end of sap/ui/mdc/ODataSuggestProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.OperatorSuggestProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.OperatorSuggestProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/OperatorSuggestProvider",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {
		"use strict";

		/**
		 *
		 * @class Operator Suggest Provider for FilterField. Makes all type specific operators available via suggest.
		 * @extends sap.ui.base.Object
		 *
		 * @author SAP SE
		 * @version 1.50.6
		 * @since 1.48.0
		 * @alias sap.ui.mdc.OperatorSuggestProvider
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var OperatorSuggestProvider = BaseObject.extend("sap.ui.mdc.OperatorSuggestProvider", /** @lends sap.ui.mdc.OperatorSuggestProvider.prototype */ {

			constructor: function(mParameters) {
				BaseObject.apply(this);

				this._bShowAll = true;
				this._bShowHint = false;

				if (mParameters) {
					this._bShowAll = mParameters.enableShowAll !== undefined ? mParameters.enableShowAll : true;
					this._bShowHint = mParameters.showHint !== undefined ? mParameters.showHint : false;
					if (mParameters.control) {
						this.associateFilterField(mParameters.control);
					}
				}

			}
		});

		OperatorSuggestProvider.prototype.destroy = function() {
			this._oFilterField = null;
			this._oInput = null;
		};

		OperatorSuggestProvider.prototype.associateFilterField = function(oFilterField) {
			this._oFilterField = oFilterField;
			this._oInput = oFilterField.getAggregation("_input");
			if (!(this._oInput instanceof sap.m.MultiInput)) {
				jQuery.sap.log.error("mdc:OperatorSuggestProvider", "associateFilterField for " + this._oInput.getId() + " not possible!");
				return;
			}
			this._oInput.setShowSuggestion(true);
			this._oInput.setFilterSuggests(true);
			this._oInput.setEnableSuggestionsHighlighting(false);
			this._oInput.setMaxLength(0);
			this._oInput.setMaxSuggestionWidth("auto");
			if (this._bShowHint) {
				this._oInput.setPlaceholder("press space to get help");
			}
			this._aOperators = [];

			this._oInput.bindAggregation("suggestionItems", {
				path: "suggest>/",
				template: new sap.ui.core.ListItem({
					key: "{suggest>key}",
					text: "{suggest>text}",
					additionalText: "{suggest>additionalText}"
				}),
				templateShareable: false
			});

			this._oInput.attachSuggest(function(oEvent) {

				if (this._aOperators.length === 0) {
					// var sTerm = oEvent.getParameter("suggestValue");
					var oOperatorConfig = this._oFilterField.getFilterOperatorConfig();
					var aOperators = oOperatorConfig.getOperatorsForType(this._oFilterField._getDataType().getMetadata().getName());

					aOperators.forEach(function(element) {
						var oOperator = oOperatorConfig.getOperator(element);
						if (oOperator.showInSuggest !== undefined && oOperator.showInSuggest == false) {
							return;
						}
						var sTxtKey = oOperator.textKey || "operators." + oOperator.name + ".longText";
						var sText = oOperator.getTypeText(sTxtKey, this._oFilterField._getDataType().getName().toLowerCase());
						if (sText === sTxtKey) {
							sText = oOperator.longText;
						}
						this._aOperators.push({
							key: element,
							additionalText: sText
						});
					}, this);

					var oSuggestModel = new sap.ui.model.json.JSONModel();
					oSuggestModel.setData(this._aOperators);
					this._oInput.setModel(oSuggestModel, "suggest");
				}
			}.bind(this));

			this._oInput.addValidator(function(oData) {
				//TODO This empty validator is required!!!
				// if we remove it the multiInpupt will automatically create a token when you enter a simple value without operator.
			});

			this._oInput.setFilterFunction(function(sValue, oItem) {
				var sKey = oItem.getKey();
				var oType = this._oFilterField._getDataType();
				var type = oType.getMetadata().getName();
				var bShowAll = true;
				var sExample;

				sValue = sValue.trim();

				var oOperatorConfig = this._oFilterField.getFilterOperatorConfig();

				var aOperators = oOperatorConfig.getMatchingOperators(type, sValue);
				if (aOperators.length !== 0) {
					bShowAll = false;
				}

				var oOperator = oOperatorConfig.getOperator(sKey);
				if (oOperator) {

					if (bShowAll && this._bShowAll) {
						var v1 = sValue,
							v2 = "";
						if (v1 === "") {
							//TODO workaround for default value in suggest 
							//TODO getName() from the odata.type returns the fullname and not only "Date"
							if (oType.getName() === "Date") {
								v1 = new Date();
							} else if (oType.getName() === "Integer") {
								v1 = 123;
							} else if (oType.getName() === "Float") {
								v1 = 123.45;
							} else if (oType.getName() === "Boolean") {
								v1 = true;
							} else {
								v1 = "abc";
							}
						}
						if (v2 === "") {
							//TODO workaround for default value in suggest 
							//TODO getName() from the odata.type returns the fullname and not only "Date"
							if (oType.getName() === "Date") {
								v2 = new Date();
								if (typeof v1 === "string") {
									v2.setFullYear(v2.getFullYear() + 1);
									v2 = oType.formatValue(v2, "string");
								} else {
									v2.setFullYear(v1.getFullYear() + 1);
								}
							} else if (oType.getName() === "Integer") {
								v2 = v1 + 1000;
							} else if (oType.getName() === "Float") {
								v2 = v1 + 1000;
							} else if (oType.getName() === "Boolean") {
								v2 = false;
							} else {
								v2 = "xyz";
							}
						}

						try {
							sExample = oOperator.format([v1, v2], null, typeof v1 === "string" ? null : oType);
						} catch (error) {
							sExample = oOperator.format([]);
						}
						oItem.setText(sExample);
						return true;
					}

					if (oOperator.test(sValue, oType)) {
						var aValues = oOperator.parse(sValue, oType);
						sExample = oOperator.format(aValues, null, oType);
						oItem.setText(sExample);
						return true;
					}
					return false;
				} else {
					return false;
				}
			}.bind(this));

		};

		return OperatorSuggestProvider;
	},
	/* bExport= */
	true);
}; // end of sap/ui/mdc/OperatorSuggestProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.ControlSelector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.experimental.ControlSelector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/ControlSelector",['jquery.sap.global', 'sap/ui/core/Control'
], function(jQuery, Control) {
	"use strict";

	/**
	 * Provides a declarative factory for a control list that selects one of the given controls based on a selected index.
	 * This index can be bound and can have a formatter/expression to decide which index of the content aggregation should be shown and cloned if used as a template.
	 *
	 * In case the ControlSelector is used a a template the cloned instances keep a reference to the original template.
	 * Changing the original ControlSelectors index will update all clones created from it.
	 *
	 * By setting the reuseControls property the ControlSelector will reuse old clones that are no longer used instead of creating new clones for
	 * the same index. This is an experimental feature and should not yet be used
	 *
	 * A ControlSelector can act as a proxy to another control selector if the association "use" is set.
	 * Then the ControlSelector uses the associated control selector to return instances and clones.
	 * It is not possible to have at the same time individual content control and associate another ControlSelector.
	 * It is not possible to nest a ControlSelector another control selector directly.
	 *
	 * @since 1.46.0
	 * @private
	 * */
	var ControlSelector = Control.extend("sap.ui.mdc.experimental.ControlSelector", /* @lends sap.ui.mdc.experimental.ControlSelector.prototype */ {
		constructor : function() {
			Control.apply(this, arguments);
		},
		metadata: {
			properties : {
				/**
				 * The index of the selected content instance used for the ControlSelector.
				 */
				selectedIndex : {
					type: "int",
					defaultValue: -1
				},
				/**
				 * The index used as the default index if index refers to a not existing index
				 */
				defaultIndex : {
					type: "int",
					defaultValue: 0
				},
				/**
				 * Sets whether the ControlSelector should render its own root dem element.
				 * If set to false the dom reference of the inner control is used to render and rerender the ControlSelector
				 */
				renderRoot : {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Sets whether the ControlSelector should reuse old clones of an index instead of creating new instances.
				 * This property is only taken into account if the ControlSelector is used as a template of a list binding.
				 * @experimental
				 */
				reuseControls : {
					type: "boolean",
					defaultValue: false
				}
			},
			aggregations : {
				/**
				 * List of content controls of the control selector.
				 */
				content : {
					type : "sap.ui.core.Control",
					multiple : true
				},
				/**
				 * Currently selected content control based on the index
				 * @private
				 */
				_current : {
					type : "sap.ui.core.Control",
					multiple : false,
					hidden: true
				}
			},
			associations: {
				/**
				 * Reference to another ControlSelector instance that is defined elsewhere.
				 * If
				 */
				use: {
					type: "sap.ui.mdc.ControlSelector",
					multiple: false
				}
			},
			defaultAggregation: "content"
		},
		renderer: function(oRm, oControl) {
			//simple renderer to render the content. this is always a clone therefore only one content is contained.
			var oContent = oControl.getCurrentContent(),
				bRenderRoot = oControl.getRenderRoot();
			if (!bRenderRoot && oContent && oContent.getVisible()) {
				var oDomRef = oControl.getDomRef();
				if (jQuery.sap.log.isLoggable(jQuery.sap.log.Level.DEBUG) && oDomRef) {
					oRm.write("<!-- sap.ui.mdc.experimental.ControlSelector with id='" + oControl.getId() + "' and renderRoot=false, used old id='" + oDomRef.id + "' for rerendering -->");
					if (oDomRef.previousSibling && oDomRef.previousSibling.nodeType === 8) {
						oDomRef.previousSibling.parentNode.removeChild(oDomRef.previousSibling);
					}
				}
				if (oDomRef) {
					oDomRef.parentNode.removeChild(oDomRef);
				}
				oRm.renderControl(oContent);
				oControl._sOldId = oContent.getId();
			} else {
				oRm.write("<div ");
				if (!bRenderRoot) {
					oRm.write(" style=\"display:none\"");
				}
				oRm.writeControlData(oControl);
				oRm.write(">");
				if (bRenderRoot) {
					oRm.renderControl(oContent);
				}
				oRm.write("</div>");
			}
		}
	});

	var byId = sap.ui.getCore().byId;
	var iCloneIndex = -1;

	ControlSelector.prototype.init = function() {
		//the main instance is used to create clones. keep a reference to the clones created from the main instance
		this._mClones = null;
		this._sOldId = null;
		this._oFree = {};
	};

	/**
	 * Sets the current control
	 * @param {sap.ui.core.Control} oCurrent the current control
	 * @private
	 */
	ControlSelector.prototype._setCurrent = function(oCurrent) {
		this.setAggregation("_current", oCurrent);
	};

	/**
	 * Returns the dom reference of the ControlSelector.
	 * If renderRoot is set to false the dom ref of the currently selected control inner control is
	 * used.
	 * @returns {DOMElement} the dom element
	 * @private
	 */
	ControlSelector.prototype.getDomRef = function() {
		var oDomRef = jQuery.sap.domById(this.getId());
		if (oDomRef || this.getRenderRoot()) {
			return oDomRef;
		} else if (this._sOldId) {
			return jQuery.sap.domById(this._sOldId);
		}
		return null;
	};

	/**
	 * Sets the template reference to a clone and applies the current control from the template if there is no current content
	 * @param oTemplate
	 * @param iIndex
	 * @private
	 */
	ControlSelector.prototype._setTemplate = function(oTemplate, iIndex) {
		this.oTemplate = oTemplate;
		if (!this.getAggregation("_current")) {
			var oCurrent = this.oTemplate._getCurrent(iIndex);
			if (oCurrent) {
				this._setCurrent(oCurrent.clone(this.getId() + "-content"));
				this.setProperty("selectedIndex", iIndex, true);
			} else {
				this.oTemplate._unregisterClone(this);
				this.destroyContent();
			}
		}
	};

	/**
	 * Validates the aggregation.
	 * If ControlSelectors are nested within ControlSelectors this method throws an error.
	 *
	 * @param sName
	 * @param oObject
	 * @returns
	 */
	ControlSelector.prototype.validateAggregation = function(sName, oObject) {
		var oResult = Control.prototype.validateAggregation.apply(this, arguments);
		if (sName === "content" && oObject instanceof ControlSelector) {
			throw new Error("sap.ui.mdc.experimental.ControlSelector cannot be used as content of another sap.ui.mdc.experimental.ControlSelector");
		}
		return oResult;
	};

	/**
	 * Returns the index of the pool instance
	 * @experimental
	 * @param iValue
	 * @returns {Number}
	 * @private
	 */
	ControlSelector.prototype._getPoolIndex = function(iValue) {
		if (!this.oTemplate) {
			return 0;
		}
		var aContent = this.oTemplate.getContent();
		if (!aContent || iValue < 0 || iValue >= aContent.length - 1) {
			iValue = 0;
		}
		return iValue;
	};

	/**
	 * Retunrs the current instance
	 * @param iValue
	 * @returns
	 * @private
	 */
	ControlSelector.prototype._getCurrentInstance = function(iIndex) {
		var iPoolIndex = this._getPoolIndex(iIndex),
			oCurrentInstance = null;
		if (this.oTemplate.getReuseControls() && this.oTemplate._oFree[iPoolIndex] && this.oTemplate._oFree[iPoolIndex].length) {
			oCurrentInstance = this.oTemplate._oFree[iPoolIndex].pop();
		} else {
			var oCurrent = this.oTemplate._getCurrent(iIndex);
			if (oCurrent) {
				oCurrentInstance = oCurrent.clone(this.getId() + "-" + iCloneIndex + "-content");
			}
			iCloneIndex++;
		}
		return oCurrentInstance;
	};

	/**
	 * Sets the index that should be used for the current instance, if the instance is not a clone update all clones with the new index
	 * @param iIndex
	 * @returns {ControlSelector}
	 * @pivate
	 */
	ControlSelector.prototype.setSelectedIndex = function(iIndex) {
		var iOldIndex = this.getSelectedIndex();
		this.setProperty("selectedIndex", iIndex, true);
		if (iOldIndex != iIndex) {
			if (this.oTemplate) {
				var oContent = this.getAggregation("_current");
				if (oContent) {
					if (this.oTemplate.getReuseControls()) {
						var iPoolIndex = this._getPoolIndex(iOldIndex);
						if (!this.oTemplate._oFree[iPoolIndex]) {
							this.oTemplate._oFree[iPoolIndex] = [];
						}
						this.oTemplate._oFree[iPoolIndex].push(oContent);
					} else {
						oContent.destroy("KeepDom");
					}
				}
				var oCurrent = this._getCurrentInstance(iIndex);
				if (oCurrent) {
					this._setCurrent(oCurrent);
				}
			} else {
				if (this._mClones) {
					for (var n in this._mClones) {
						byId(n).setSelectedIndex(iIndex);
					}
				} else {
					this.invalidate();
				}
			}
		}
		return this;
	};

	/**
	 * Registers a clone.
	 * @param oInstance
	 * @private
	 */
	ControlSelector.prototype._registerClone = function(oInstance) {
		if (!this._mClones) {
			this._mClones = {};
			this._attachModifyAggregation("content", this._updateClones, this);
		}
		this._mClones[oInstance.getId()] = null;
	};

	/**
	 * Unregisters a clone
	 * @param oInstance
	 * @private
	 */
	ControlSelector.prototype._unregisterClone = function(oInstance) {
		if (this._mClones) {
			if (typeof oInstance === "string") {
				delete this._mClones[oInstance];
			} else if (oInstance instanceof Control) {
				delete this._mClones[oInstance.getId()];
			}
			if (Object.keys(this._mClones).length === 0) {
				this._detachModifyAggregation("content", this._updateClones, this);
				this._mClones = null;
			}
		}
	};

	/**
	 * Updates the clones if the content aggregation has changed
	 * The index used by the clones is not automatically shifted. Therefore it is recommended to setIndex after removal.
	 * If a newly added content becomes a valid template for the clones, it is applied immediately.
	 * Example: A column of a table currently contains only a ControlSelector with a sap.m.Text as content but the index is set to 1.
	 * As there is only a text in the content the text is rendered initially. To switch the column to edit a new content is added sap.m.Input.
	 * Now the index 1 becomes valid and all clones are updated.
	 * If the removeContent(1) is called the column switches to text again as the index 1 becomes invalid again.
	 * @private
	 *
	 */
	ControlSelector.prototype._updateClones = function() {
		if (this._mClones) {
			for (var n in this._mClones) {
				var oClone = byId(n);
				if (oClone) {
					oClone.destroyContent();
					oClone._setTemplate(this, oClone.getSelectedIndex());
				} else {
					this._unregisterClone(n);
				}
			}
		}
	};

	/**
	 * Creates a clone of the current instance. The cloned instance will keep a reference to the this instance
	 * to be able to switch the template based on the index. The cloned instance will only keep the currently selected content
	 * as the "only" content. The content itself is not cloned as cloneChildren is false.
	 * The clone is also registed at this instance to enabled the possibility to centrally change the index for all cloned instances
	 * @param sId
	 * @returns
	 * @private
	 */
	ControlSelector.prototype.clone = function(sId) {
		var oClone;
		if (!this.oTemplate) {
			//do not clone the children
			oClone = Control.prototype.clone.apply(this, [arguments[0], arguments[1], {
				cloneChildren: false,
				cloneBindings: true
			}]);
			//apply myself as template owner
			oClone._setTemplate(this, this.getSelectedIndex());
			this._registerClone(oClone);
			//register the clone
			return oClone;
		} else {
			oClone = Control.prototype.clone.apply(this, arguments);
			oClone._setTemplate(this.oTemplate, this.getSelectedIndex());
			this.oTemplate._registerClone(oClone);
			return oClone;
		}
	};

	/**
	 * Returns the current control of the ControlSelector
	 * @returns
	 * @private
	 */
	ControlSelector.prototype.getCurrentContent = function() {
		if (this.oTemplate) {
			return this.getAggregation("_current");
		} else {
			return this._getCurrent(this.getSelectedIndex());
		}
	};

	/**
	 * Returns the content of the ControlSelector.
	 * If the it has an associated ControlSelector only the currently selected instance is returned.
	 * @returns
	 * @private
	 */
	ControlSelector.prototype.getContent = function() {
		if (this.oTemplate) {
			return this.getAggregation("_current");
		}
		return this.getAggregation("content");
	};

	/**
	 * Returns the currently selected content based on given index. The index is changed via the property index, which can be databound.
	 * If no content with the given index is available the defaultIndex or 0 is used. If there is no content at all the null is returned.
	 * @param iIndex
	 * @returns
	 * @private
	 */
	ControlSelector.prototype._getCurrent = function(iIndex) {
		var aContent = this.getAggregation("content");
		if (aContent && (iIndex < 0  || iIndex >= aContent.length)) {
			jQuery.sap.log.debug("Changing index of ControlSelector to defaultIndex: current is " + iIndex);
			var iDefaultIndex = this.getDefaultIndex();
			if (iDefaultIndex < 0  || iDefaultIndex >= aContent.length) {
				jQuery.sap.log.debug("Changing index of ControlSelector to 0: current is " + iIndex);
				iIndex = 0;
			} else {
				iIndex = iDefaultIndex;
			}
		}
		if (aContent && aContent[iIndex]) {
			return aContent[iIndex];
		}
		return null;
	};


	/**
	 * Sets the use association.
	 * @param sId
	 * @private
	 */
	ControlSelector.prototype.setUse = function(sId) {
		var aContent = this.getAggregation("content");
		if (aContent && aContent.length > 0) {
			jQuery.sap.log.warning("Content is ignored for " + this.getId() + " because association 'use' is set to reference another ControlSelector instance.");
			this.destroyAggregation("content");
		}
		var oUse = byId(sId);
		if (!oUse) {
			jQuery.sap.log.warning("ControlSelector with id " + sId + " is not available.");
			return;
		}
		if (!(oUse instanceof ControlSelector)) {
			jQuery.sap.log.warning("Control with id " + sId + " is not a ControlSelector.");
			return;
		}
		this.setAssociation("use", sId);
		this.oTemplate = oUse;
		this._setTemplate(this.oTemplate, this.getSelectedIndex());
		this.oTemplate._registerClone(this);
	};

	/**
	 * Destroys the ControlSelector and all clones that were created based on it.
	 * @private
	 */
	ControlSelector.prototype.destroy = function() {
		if (this._mClones) {
			for (var n in this._mClones) {
				var oClone = byId(n);
				if (oClone) {
					oClone.destroy();
				}
			}
		} else if (this.oTemplate) {
			this.oTemplate._unregisterClone(this);
		}
		Control.prototype.destroy.apply(this, arguments);
	};

	return ControlSelector;

}, /* bExport= */true);


}; // end of sap/ui/mdc/experimental/ControlSelector.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.DataObjectMetadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.experimental.DataObjectMetadata
jQuery.sap.declare('sap.ui.mdc.experimental.DataObjectMetadata'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Metadata'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/DataObjectMetadata",['jquery.sap.global', 'sap/ui/base/DataType', 'sap/ui/base/Metadata'],
	function(jQuery, DataType, Metadata) {
	"use strict";

	/**
	 * Creates a new metadata object that describes a subclass of DataObject.
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.46.0
	 * @alias sap.ui.experimental.DataObjectMetadata
	 * @experimental
	 * @private
	 */
	var DataObjectMetadata = function(sClassName, oClassInfo) {

		// call super constructor
		Metadata.apply(this, arguments);

	};

	// chain the prototypes
	DataObjectMetadata.prototype = Object.create(Metadata.prototype);

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function capitalize(sName) {
		return sName.charAt(0).toUpperCase() + sName.slice(1);
	}

//	var rPlural = /(children|ies|ves|oes|ses|ches|shes|xes|s)$/i;
//	var mSingular = {'children' : -3, 'ies' : 'y', 'ves' : 'f', 'oes' : -2, 'ses' : -2, 'ches' : -2, 'shes' : -2, 'xes' : -2, 's' : -1 };

//	function guessSingularName(sName) {
//		return sName.replace(rPlural, function($,sPlural) {
//			var vRepl = mSingular[sPlural.toLowerCase()];
//			return typeof vRepl === "string" ? vRepl : sPlural.slice(0,vRepl);
//		});
//	}

	function deprecation(fn, name) {
		return function() {
			jQuery.sap.log.warning("Usage of deprecated feature: " + name);
			return fn.apply(this, arguments);
		};
	}

//	function remainder(obj, info) {
//		var result = null;
//
//		for (var n in info) {
//			if ( hasOwnProperty.call(info, n) && typeof obj[n] === 'undefined' ) {
//				result = result || {};
//				result[n] = info[n];
//			}
//		}
//
//		return result;
//	}
	var Kind = {
		SPECIAL_SETTING : -1, PROPERTY : 0, EVENT : 5
	};

	// ---- SpecialSetting --------------------------------------------------------------------

	/**
	 * SpecialSetting info object
	 * @private
	 * @since 1.27.1
	 */
	function SpecialSetting(oClass, name, info) {
		info = typeof info !== 'object' ? { type: info } : info;
		this.name = name;
		this.type = info.type || 'any';
		this.visibility = info.visibility || 'public';
		this._oParent = oClass;
		this._sUID = "special:" + name;
		this._iKind = Kind.SPECIAL_SETTING;
	}

	// ---- Property --------------------------------------------------------------------------

	/**
	 * Property info object
	 * @private
	 * @since 1.27.1
	 */
	function Property(oClass, name, info) {
		info = typeof info !== 'object' ? { type: info } : info;
		this.name = name;
		this.type = info.type || 'string';
		this.group = info.group || 'Misc';
		this.defaultValue = info.defaultValue !== null ? info.defaultValue : null;
		this.sGetter = "get" + this.name.substring(0,1).toUpperCase() + this.name.substring(1);
		this.mandatory = !!info.mandatory;
		this.visibility = 'private';
		this._oParent = oClass;
		this._sUID = name;
		this._iKind = Kind.PROPERTY;
		this._oType = null;
	}

	/**
	 * @private
	 */
	Property.prototype.generate = function(add) {
		var that = this;
		add(
			that.name,
			function() {
				return this.getProperty(that);
			},
			function (value) {
				return this.setProperty(that, value);
			}
		);
	};

	Property.prototype.getType = function() {
		return this._oType || (this._oType = DataType.getType(this.type));
	};


	// ---- Event -----------------------------------------------------------------------------

	/**
	 * Event info object
	 * @private
	 * @since 1.27.1
	 */
	function Event(oClass, name, info) {
		this.name = name;
		this.allowPreventDefault = info.allowPreventDefault || false;
		this.deprecated = info.deprecated || false;
		this.visibility = 'public';
		this.allowPreventDefault = !!info.allowPreventDefault;
		this.enableEventBubbling = !!info.enableEventBubbling;
		this._oParent = oClass;
		this._sUID = 'event:' + name;
		this._iKind = Kind.EVENT;
		var N = capitalize(name);
		this._sMutator = 'attach' + N;
		this._sDetachMutator = 'detach' + N;
		this._sTrigger = 'fire' + N;
	}

	/**
	 * @private
	 */
	Event.prototype.generate = function(add) {
		var that = this,
			n = that.name,
			allowPreventDefault = that.allowPreventDefault,
			enableEventBubbling = that.enableEventBubbling;

		add(that._sMutator, function(d,f,o) { this.attachEvent(n,d,f,o); return this; }, that);
		add(that._sDetachMutator, function(f,o) { this.detachEvent(n,f,o); return this; });
		add(that._sTrigger, function(p) { return this.fireEvent(n,p, allowPreventDefault, enableEventBubbling); });
	};

	Event.prototype.attach = function(instance,data,fn,listener) {
		return instance[this._sMutator](data,fn,listener);
	};

	Event.prototype.detach = function(instance,fn,listener) {
		return instance[this._sDetachMutator](fn,listener);
	};

	Event.prototype.fire = function(instance,params, allowPreventDefault, enableEventBubbling) {
		return instance[this._sTrigger](params, allowPreventDefault, enableEventBubbling);
	};

	// ----------------------------------------------------------------------------------------

	DataObjectMetadata.prototype.metaFactorySpecialSetting = SpecialSetting;
	DataObjectMetadata.prototype.metaFactoryProperty = Property;
	DataObjectMetadata.prototype.metaFactoryEvent = Event;

	/**
	 * @private
	 */
	DataObjectMetadata.prototype.applySettings = function(oClassInfo) {

		var that = this,
			oStaticInfo = oClassInfo.metadata;

		Metadata.prototype.applySettings.call(this, oClassInfo);

		function normalize(mInfoMap, FNClass) {
			var mResult = {},
				sName;

			if ( mInfoMap ) {
				for (sName in mInfoMap) {
					if ( hasOwnProperty.call(mInfoMap, sName) ) {
						mResult[sName] = new FNClass(that, sName, mInfoMap[sName]);
					}
				}
			}

			return mResult;
		}

		var rLibName = /([a-z][^.]*(?:\.[a-z][^.]*)*)\./;

		function defaultLibName(sName) {
			var m = rLibName.exec(sName);
			return (m && m[1]) || "";
		}

		// init basic metadata from static infos and fallback to defaults
		this._sLibraryName = oStaticInfo.library || defaultLibName(this.getName());
		this._mSpecialSettings = normalize(oStaticInfo.specialSettings, this.metaFactorySpecialSetting);
		this._mProperties = normalize(oStaticInfo.properties, this.metaFactoryProperty);
		this._mEvents = normalize(oStaticInfo.events, this.metaFactoryEvent);

		if ( oClassInfo.metadata.__version > 1.0 ) {
			this.generateAccessors();
		}

	};

	/**
	 * @private
	 */
	DataObjectMetadata.prototype.afterApplySettings = function() {

		Metadata.prototype.afterApplySettings.call(this);

		// if there is a parent class, produce the flattened "all" views for the element specific metadata
		// PERFOPT: this could be done lazily
		var oParent = this.getParent();
		if ( oParent && oParent instanceof DataObjectMetadata ) {
			this._mAllEvents = jQuery.extend({}, oParent._mAllEvents, this._mEvents);
			this._mAllProperties = jQuery.extend({}, oParent._mAllProperties, this._mProperties);
			this._mAllSpecialSettings = jQuery.extend({}, oParent._mAllSpecialSettings, this._mSpecialSettings);
		} else {
			this._mAllEvents = this._mEvents;
			this._mAllProperties = this._mProperties;
			this._mAllSpecialSettings = this._mSpecialSettings;
		}
	};

	DataObjectMetadata.Kind = Kind;

	/**
	 * Returns the name of the library that contains the described UIElement.
	 * @return {string} the name of the library
	 * @public
	 */
	DataObjectMetadata.prototype.getLibraryName = function() {
		return this._sLibraryName;
	};

	// ---- properties ------------------------------------------------------------------------

	/**
	 * Declares an additional property for the described class.
	 *
	 * Any property declaration via this method must happen before the described class
	 * is subclassed, or the added property will not be visible in the subclass.
	 *
	 * Typically used to enrich UIElement classes in an aspect oriented manner.
	 * @param {string} sName name of the property to add
	 * @param {object} oInfo metadata for the property
	 * @public
	 * @see sap.ui.core.EnabledPropagator
	 */
	DataObjectMetadata.prototype.addProperty = function(sName, oInfo) {
		var oProp = this._mProperties[sName] = new Property(this, sName, oInfo);
		if (!this._mAllProperties[sName]) {// ensure extended AllProperties meta-data is also enriched
			this._mAllProperties[sName] = oProp;
		}
		// TODO notify listeners (subclasses) about change
	};

	/**
	 * Checks the existence of the given property by its name
	 * @param {string} sName name of the property
	 * @return {boolean} true, if the property exists
	 * @public
	 */
	DataObjectMetadata.prototype.hasProperty = function(sName) {
		return !!this._mAllProperties[sName];
	};

	/**
	 * Returns an info object for the named public property of the described class,
	 * no matter whether the property was defined by the class itself or by one of its
	 * ancestor classes.
	 *
	 * If neither the described class nor its ancestor classes define a property with the
	 * given name, <code>undefined</code> is returned.
	 *
	 * @param {string} sName name of the property
	 * @returns {Object} An info object describing the property or <code>undefined</code>
	 * @public
	 * @since 1.27.0
	 * @experimental Type, structure and behavior of the returned info object is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getProperty = function(sName) {
		var oProp = this._mAllProperties[sName];
		// typeof is used as a fast (but weak) substitute for hasOwnProperty
		return typeof oProp === 'object' ? oProp : undefined;
	};

	/**
	 * Returns a map of info objects for the public properties of the described class.
	 * Properties declared by ancestor classes are not included.
	 *
	 * The returned map keys the property info objects by their name.
	 *
	 * @return {map} Map of property info objects keyed by the property names
	 * @public
	 * @experimental Type, structure and behavior of the returned info objects is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getProperties = function() {
		return this._mProperties;
	};

	/**
	 * Returns a map of info objects for all public properties of the described class,
	 * including public properties from the ancestor classes.
	 *
	 * The returned map keys the property info objects by their name.
	 *
	 * @return {map} Map of property info objects keyed by the property names
	 * @public
	 * @experimental Type, structure and behavior of the returned info objects is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getAllProperties = function() {
		return this._mAllProperties;
	};

	/**
	 * Returns an info object for a public setting with the given name that either is
	 * a managed property or a managed aggregation of cardinality 0..1 and with at least
	 * one simple alternative type. The setting can be defined by the class itself or
	 * by one of its ancestor classes.
	 *
	 * If neither the described class nor its ancestor classes define a suitable setting
	 * with the given name, <code>undefined</code> is returned.
	 *
	 * @param {string} sName name of the property like setting
	 * @returns {Object} An info object describing the property or aggregation or <code>undefined</code>
	 * @public
	 * @since 1.27.0
	 * @experimental Type, structure and behavior of the returned info object is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getPropertyLikeSetting = function(sName) {
		// typeof is used as a fast (but weak) substitute for hasOwnProperty
		var oProp = this._mAllProperties[sName];
		if ( typeof oProp === 'object' ) {
			return oProp;
		}
		oProp = this._mAllAggregations[sName];
		// typeof is used as a fast (but weak) substitute for hasOwnProperty
		return ( typeof oProp === 'object' && oProp.altTypes && oProp.altTypes.length > 0 ) ? oProp : undefined;
	};

	// ---- events ----------------------------------------------------------------------------

	/**
	 * Checks the existence of the given event by its name
	 *
	 * @param {string} sName name of the event
	 * @return {boolean} true, if the event exists
	 * @public
	 */
	DataObjectMetadata.prototype.hasEvent = function(sName) {
		return !!this._mAllEvents[sName];
	};

	/**
	 * Returns an info object for the named public event of the described class,
	 * no matter whether the event was defined by the class itself or by one of its
	 * ancestor classes.
	 *
	 * If neither the described class nor its ancestor classes define an event with the
	 * given name, <code>undefined</code> is returned.
	 *
	 * @param {string} sName name of the event
	 * @returns {Object} An info object describing the event or <code>undefined</code>
	 * @public
	 * @since 1.27.0
	 * @experimental Type, structure and behavior of the returned info object is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getEvent = function(sName) {
		var oEvent = this._mAllEvents[sName];
		// typeof is used as a fast (but weak) substitute for hasOwnProperty
		return typeof oEvent === 'object' ? oEvent : undefined;
	};

	/**
	 * Returns a map of info objects for the public events of the described class.
	 * Events declared by ancestor classes are not included.
	 *
	 * The returned map keys the event info objects by their name.
	 *
	 * @return {map} Map of event info objects keyed by event names
	 * @public
	 * @experimental Type, structure and behavior of the returned info objects is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getEvents = function() {
		return this._mEvents;
	};

	/**
	 * Returns a map of info objects for all public events of the described class,
	 * including public events form the ancestor classes.
	 *
	 * The returned map keys the event info objects by their name.
	 *
	 * @return {map} Map of event info objects keyed by event names
	 * @public
	 * @experimental Type, structure and behavior of the returned info objects is not documented
	 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
	 *   in the constructor documentation of this class.
	 */
	DataObjectMetadata.prototype.getAllEvents = function() {
		return this._mAllEvents;
	};

	// ---- special settings ------------------------------------------------------------------


	/**
	 * Adds a new special setting.
	 * Special settings are settings that are accepted in the mSettings
	 * object at construction time or in an {@link sap.ui.experimental.DataObject.applySettings}
	 * call but that are neither properties, aggregations, associations nor events.
	 *
	 * @param {string} sName name of the setting
	 * @param {object} oInfo metadata for the setting
	 * @private
	 * @experimental since 1.35.0
	 */
	DataObjectMetadata.prototype.addSpecialSetting = function (sName, oInfo) {
		var oSS = new SpecialSetting(this, sName, oInfo);
		this._mSpecialSettings[sName] = oSS;
		if (!this._mAllSpecialSettings[sName]) {
			this._mAllSpecialSettings[sName] = oSS;
		}
	};

	/**
	 * Checks the existence of the given special setting.
	 * Special settings are settings that are accepted in the mSettings
	 * object at construction time or in an {@link sap.ui.experimental.DataObject.applySettings}
	 * call but that are neither properties, aggregations, associations nor events.
	 *
	 * @param {string} sName name of the settings
	 * @return {boolean} true, if the special setting exists
	 * @private
	 * @experimental Since 1.27.0
	 */
	DataObjectMetadata.prototype.hasSpecialSetting = function (sName) {
		return !!this._mAllSpecialSettings[sName];
	};

	// ----------------------------------------------------------------------------------------

	/**
	 * Returns a map of default values for all properties declared by the
	 * described class and its ancestors, keyed by the property name.
	 *
	 * @return {map} Map of default values keyed by property names
	 * @public
	 */
	DataObjectMetadata.prototype.getPropertyDefaults = function() {

		var mDefaults = this._mDefaults,
			oType;
		if ( mDefaults ) {
			return mDefaults;
		}

		if ( this.getParent() instanceof DataObjectMetadata ) {
			mDefaults = jQuery.sap.newObject(this.getParent().getPropertyDefaults());
		} else {
			mDefaults = {};
		}

		for (var s in this._mProperties) {
			if ( this._mProperties[s].defaultValue !== null ) {
				mDefaults[s] = this._mProperties[s].defaultValue;
			} else {
				oType = DataType.getType(this._mProperties[s].type);
				if (oType instanceof DataType) {
					mDefaults[s] = oType.getDefaultValue();
				}
			}
		}
		this._mDefaults = mDefaults;
		return mDefaults;
	};

	DataObjectMetadata.prototype.createPropertyBag = function() {
		if ( !this._fnPropertyBagFactory ) {
			this._fnPropertyBagFactory = jQuery.sap.factory(this.getPropertyDefaults());
		}
		return new (this._fnPropertyBagFactory)();
	};

	/**
	 * Returns a map with all settings of the described class..
	 * Mainly used for the {@link sap.ui.experimental.DataObject#applySettings} method.
	 *
	 * @see sap.ui.experimental.DataObject#applySettings
	 * @private
	 */
	DataObjectMetadata.prototype.getJSONKeys = function() {

		if ( this._mJSONKeys ) {
			return this._mJSONKeys;
		}

		var mAllSettings = {},
			mJSONKeys = {};

		function addKeys(m) {
			var sName, oInfo, oPrevInfo;
			for (sName in m) {
				oInfo = m[sName];
				oPrevInfo = mAllSettings[sName];
				if ( !oPrevInfo || oInfo._iKind < oPrevInfo._iKind ) {
					mAllSettings[sName] = mJSONKeys[sName] = oInfo;
				}
				mJSONKeys[oInfo._sUID] = oInfo;
			}
		}

		addKeys(this._mAllSpecialSettings);
		addKeys(this.getAllProperties());
		addKeys(this.getAllEvents());

		this._mJSONKeys = mJSONKeys;
		this._mAllSettings = mAllSettings;
		return this._mJSONKeys;
	};

	/**
	 * @private
	 */
	DataObjectMetadata.prototype.getAllSettings = function() {
		if ( !this._mAllSettings ) {
			this.getJSONKeys();
		}
		return this._mAllSettings;
	};


	DataObjectMetadata.prototype.generateAccessors = function() {

		var proto = this.getClass().prototype,
			prefix = this.getName() + ".",
			methods = this._aPublicMethods,
			n;

		function add(name, getter, setter) {
			if (!proto.hasOwnProperty(name) ) {
				Object.defineProperty(proto, name, {
					get : getter,
					set : setter
				});
			}
		}
		function addEvent(name, fn, info) {
			if ( !proto[name] ) {
				proto[name] = (info && info.deprecated) ? deprecation(fn, prefix + info.name) : fn;
			}
			methods.push(name);
		}

		for (n in this._mProperties) {
			this._mProperties[n].generate(add);
		}
		for (n in this._mEvents) {
			this._mEvents[n].generate(addEvent);
		}
	};

	return DataObjectMetadata;

}, /* bExport= */ true);

}; // end of sap/ui/mdc/experimental/DataObjectMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.FieldHelpBase') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.FieldHelpBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/FieldHelpBase",[
	'sap/ui/core/Element', 'sap/m/Popover'
], function(Element, Popover) {
	"use strict";

	/**
	 * Constructor for a new FieldHelpBase.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Base type for <code>fieldFelp</code> aggregation in <code>Field</code> controls.
	 * @extends sap.ui.core.Element
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.50.0
	 * @alias sap.ui.mdc.experimental.FieldHelpBase
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FieldHelpBase = Element.extend("sap.ui.mdc.experimental.FieldHelpBase", /** @lends sap.ui.mdc.experimental.FieldHelpBase.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * The key of the selected item
				 *
				 * <b>Note:</b> This has only effects for FildHelps supporting keys.
				 */
				selectedKey: {
					type: "string",
					defaultValue: ""
				},
				/**
				 * The value for what the help should filter
				 *
				 * <b>Note:</b> This has only effects for FildHelps supporting filtering.
				 */
				filterValue: {
					type: "string",
					defaultValue: ""
				}
			},
			aggregations: {
				/**
				 * internal popover
				 */
				_popover: {
					type: "sap.m.Popover",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {
				/**
				 * This event is fired when a value is selected in the valueHelp
				 */
				select: {
					parameters: {

						/**
						 * The selected <code>value</code>.
						 */
						value: { type: "any" },

						/**
						 * The selected <code>additionalValue</code>.
						 */
						additionalValue: { type: "any" },

						/**
						 * The selected <code>key</code>.
						 */
						key: { type: "string" }
					}
				},
				/**
				 * This event is fired when a value is navigated in the valueHelp
				 */
				navigate: {
					parameters: {

						/**
						 * The navigated <code>value</code>.
						 */
						value: { type: "any" },

						/**
						 * The navigated <code>additionalValue</code>.
						 */
						additionalValue: { type: "any" },

						/**
						 * The navigated <code>key</code>.
						 */
						key: { type: "string" }
					}
				},
				/**
				 * This event is fired when the data of the FieldHelp has changed
				 *
				 * This is needed to determine the text of a key
				 */
				dataUpdate: {
				}
			}
		}
	});

	// define empty to add it to inherited FieldHelps, maybe later it might be filled and other fFielfHelps must not changed.
	FieldHelpBase.prototype.init = function() {

//		this._createPopover();

	};

	// define empty to add it to inherited FieldHelps, maybe later it might be filled and other fFielfHelps must not changed.
	FieldHelpBase.prototype.exit = function() {

	};

	FieldHelpBase.prototype.setSelectedKey = function(sKey) {

		this.setProperty("selectedKey", sKey, true); // do not invalidate while FieldHelp

	};

	FieldHelpBase.prototype.setFilterValue = function(sFilterValue) {

		this.setProperty("filterValue", sFilterValue, true); // do not invalidate while FieldHelp

	};

	/**
	 * Opens the FieldHelp on the parent <code>Field</code> control
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.open = function() {

		var oPopover = this._getPopover();
		var oField = this.getParent();

		if (oField && !oPopover.isOpen()) {
			var iWidth = oField.$().outerWidth();
			oPopover.setContentMinWidth(iWidth + "px");
			oPopover.openBy(oField);
		}

	};

	/**
	 * closes the FieldHelp
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.close = function() {

		var oPopover = this.getAggregation("_popover");

		if (oPopover) {
			oPopover.close();
		}

	};

	/**
	 * toggles the open state of the FieldHelp on the parent <code>Field</code> control
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.toggleOpen = function() {

		var oPopover = this._getPopover();

		if (oPopover.isOpen()) {
			this.close();
		} else {
			this.open();
		}

	};

	/**
	 * creates the internal Popover
	 *
	 * To be used by an inherited FieldHelp, not from outside.
	 *
	 * @return {sap.m.Popover} Popover
	 * @protected
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype._createPopover = function() {

		var oPopover = new sap.m.Popover(this.getId() + "-pop", {
			placement: sap.m.PlacementType.Bottom,
			showHeader: false,
			showArrow: false,
			afterOpen: this._handleAfterOpen.bind(this)
		});

		this.setAggregation("_popover", oPopover, true);

		return oPopover;

	};

	/**
	 * returns the internal Popover. If the Popover not exist it will be created
	 *
	 * To be used by an inherited FieldHelp, not from outside.
	 *
	 * @return {sap.m.Popover} Popover
	 * @protected
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype._getPopover = function() {

		var oPopover = this.getAggregation("_popover");

		if (!oPopover) {
			oPopover = this._createPopover();
		}

		return oPopover;

	};

	/**
	 * Executed after the Popup has opened
	 *
	 * To be used by an inherited FieldHelp, not from outside.
	 *
	 * @protected
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype._handleAfterOpen = function() {
	};

	/**
	 * Determines if the field help should be opened if something is typed into the field
	 *
	 * @return {boolean} if true the field help should open by typing
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.openByTyping = function() {

		return false;

	};

//	/**
//	 * Determines if the focus should stay on the field if the help is open
//	 *
//	 * @return {boolean} if true the focus stays on the field
//	 * @public
//	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
//	 */
//	FieldHelpBase.prototype.getFocusOnField = function() {
//
//		return false;
//
//	};

	/**
	 * triggers navigation in the fieldHelp
	 *
	 * @param {int} iStep number of steps for navigation (e.g. 1 means next item, -1 means previous item)
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.navigate = function(iStep) {
		// to be implements by the concrete FieldHelp
	};

	/**
	 * Determines the text for an given key
	 *
	 * @param {string} sKey key
	 * @return {string} text for key
	 *
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype.getTextforKey = function(sKey) {
		// to be implements by the concrete FieldHelp
		return "";
	};

	/**
	 * Sets the content of the FieldHelp
	 *
	 * To be used by an inherited FieldHelp, not from outside.
	 *
	 * @param {string} oContent content control to be placed at the Popover
	 * @return {sap.ui.mdc.experimental.FieldHelpBase} Reference to <code>this</code> to allow method chaining
	 * @protected
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	FieldHelpBase.prototype._setContent = function(oContent) {

		var oPopover = this._getPopover();
		oPopover.removeAllContent();
		oPopover.addContent(oContent);
		return this;

	};

	return FieldHelpBase;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/FieldHelpBase.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.FieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.FieldRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/FieldRenderer",['jquery.sap.global', 'sap/ui/core/Renderer', 'sap/ui/core/IconPool', 'sap/ui/core/ValueState'],
	function(jQuery, Renderer, IconPool, ValueState) {
	"use strict";

	//initialize the Icon Pool
	IconPool.insertFontFaceStyle();

	var FieldRenderer = Renderer.extend("sap.ui.mdc.experimental.FieldRenderer");

	FieldRenderer.render = function(oRm, oField) {
		var control = {
				content: oField._getContent(),
				editMode: oField.getEditMode(),
				width: oField.getWidth(),
				valueState: oField.getValueState()
		};

		oRm.write("<div");
		oRm.writeControlData(oField);
		oRm.addClass("sapUiMdcField");

		if (control.width) {
			if (control.width === "content") {
				oRm.addStyle("width", "auto");
			} else {
				oRm.addStyle("width", control.width);
			}
		}
		oRm.writeStyles();
		oRm.writeClasses();
		oRm.write(">");

		if (control.content) {
			oRm.renderControl(control.content);
		}

		oRm.write("</div>");

	};


	return FieldRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/mdc/experimental/FieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.ListFieldHelp') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.ListFieldHelp'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.base.ManagedObjectModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.DisplayListItem'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/ListFieldHelp",[
	'sap/ui/mdc/experimental/FieldHelpBase', 'sap/ui/model/base/ManagedObjectModel', 'sap/m/List', 'sap/m/DisplayListItem'
], function(FieldHelpBase, ManagedObjectModel, List, DisplayListItem) {
	"use strict";

	/**
	 * Constructor for a new ListFieldHelp.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A field help used in the <code>FieldFelp</code> aggregation in <code>Field</code> controls that shows a list of items
	 * @extends sap.ui.core.Element
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.50.0
	 * @alias sap.ui.mdc.experimental.ListFieldHelp
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ListFieldHelp = FieldHelpBase.extend("sap.ui.mdc.experimental.ListFieldHelp", /** @lends sap.ui.mdc.experimental.ListFieldHelp.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				},
			aggregations: {
				/**
				 * items of the Field help
				 */
				items: {
					type: "sap.ui.core.ListItem",
					multiple: true,
					singularName : "item"
				}
			},
			defaultAggregation: "items",
			events: {

			}
		}
	});

//	ListFieldHelp._myItem = DisplayListItem.extend("ListFieldHelpItem", {
//		metadata: {
//			properties: {
//				key : {type : "string", group : "Data", defaultValue : ""}
//			}
//		},
//		renderer: "sap.m.DisplayListItemRenderer"
//	});

	ListFieldHelp.prototype.init = function() {

		FieldHelpBase.prototype.init.apply(this, arguments);

		this._oManagedObjectModel = new ManagedObjectModel(this);

	};

	ListFieldHelp.prototype.exit = function() {

		FieldHelpBase.prototype.exit.apply(this, arguments);

		this._oManagedObjectModel.destroy();
		delete this._oManagedObjectModel;

	};

	ListFieldHelp.prototype._createPopover = function() {

		var oPopover = FieldHelpBase.prototype._createPopover.apply(this, arguments);

		var oParent = this.getParent();
		if (oParent) {
			oPopover.setInitialFocus(oParent);
		}

//		var oItemTemplate = new ListFieldHelp._myItem({
		var oItemTemplate = new DisplayListItem({
			label: "{$field>text}",
			value: "{$field>additionalText}"//,
//			key: "{$field>key}"
		});

		var oFilter = new sap.ui.model.Filter("text", _suggestFilter.bind(this));

		this._oList = new List(this.getId() + "-List", {
			width: "100%",
			showNoData: false,
			mode: sap.m.ListMode.SingleSelectMaster,
			rememberSelections: false,
			items: {path: "$field>items", template: oItemTemplate, filters: oFilter},
//			itemPress: _handleItemPress.bind(this),
			selectionChange: _hanldeSelectionChange.bind(this)
		});

		this._oList.setModel(this._oManagedObjectModel, "$field");
		this._oList.bindElement({ path: "/", model: "$field" });

		this._setContent(this._oList);

		return oPopover;

	};

	ListFieldHelp.prototype.setParent = function(oParent, sAggregationName, bSuppressInvalidate) {

		FieldHelpBase.prototype.setParent.apply(this, arguments);

		// focus should stay on Field
		var oPopover = this.getAggregation("_popover");
		if (oPopover) {
			oPopover.setInitialFocus(oParent);
		}

		return this;

	};

	ListFieldHelp.prototype.setSelectedKey = function(sKey) {

		FieldHelpBase.prototype.setSelectedKey.apply(this, arguments);

		if (this._oList) {
			var aItems = this._oList.getItems();
			for (var i = 0; i < aItems.length; i++) {
				var oItem = aItems[i];
				var oOriginalItem = _getOriginalItem.call(this, oItem);
				if (oOriginalItem.getKey() == sKey) {
					oItem.setSelected(true);
				} else {
					oItem.setSelected(false);
				}
			}
		}

		return this;

	};

	ListFieldHelp.prototype.setFilterValue = function(sFilterValue) {

		FieldHelpBase.prototype.setFilterValue.apply(this, arguments);

		if (this._oList) {
			var oBinding = this._oList.getBinding("items");
			oBinding.update();
			this._oList.updateItems();
			this.setSelectedKey(this.getSelectedKey()); // to update selection
		}

		return this;

	};

	ListFieldHelp.prototype.addItem = function(oItem) {

		this.addAggregation("items", oItem);

		if (!this._bUpdateItems) {
			this.fireDataUpdate();
		}

		return this;

	};

	ListFieldHelp.prototype.insertItem = function(oItem, iIndex) {

		this.insertAggregation("items", oItem, iIndex);

		if (!this._bUpdateItems) {
			this.fireDataUpdate();
		}

		return this;

	};

	ListFieldHelp.prototype.removeItem = function(vItem) {

		var oResult = this.removeAggregation("items", vItem);

		if (!this._bUpdateItems) {
			this.fireDataUpdate();
		}

		return oResult;

	};

	ListFieldHelp.prototype.removeAllItems = function() {

		var aResult = this.removeAllAggregation("items");

		if (!this._bUpdateItems) {
			this.fireDataUpdate();
		}

		return aResult;

	};

	ListFieldHelp.prototype.destroyItems = function() {

		this.destroyAggregation("items");

		if (!this._bUpdateItems) {
			this.fireDataUpdate();
		}

		return this;

	};

	ListFieldHelp.prototype.updateItem = function() {

		this._bUpdateItems = true;
		this.updateAggregation("items");
		this._bUpdateItems = false;

		this.fireDataUpdate();

	};

//	ListFieldHelp.prototype._handleAfterOpen = function() {
//
//		var oField = this.getParent();
//
//		if (oField) {
//			oField.focus();
//		}
//
//	};

	ListFieldHelp.prototype.openByTyping = function() {

		return true;

	};

//	ListFieldHelp.prototype.getFocusOnField = function() {
//
//		return true;
//
//	};

	ListFieldHelp.prototype.navigate = function(iStep) {

		var oPopover = this._getPopover();
		var oSelectedItem = this._oList.getSelectedItem();
		var aItems = this._oList.getItems();
		var iItems = aItems.length;
		var iSelectedIndex = 0;

		if (oSelectedItem) {
			iSelectedIndex = this._oList.indexOfItem(oSelectedItem);
			iSelectedIndex = iSelectedIndex + iStep;
			if (iSelectedIndex < 0) {
				iSelectedIndex = 0;
			} else if (iSelectedIndex >= iItems - 1) {
				iSelectedIndex = iItems - 1;
			}
		} else if (iStep >= 0){
			iSelectedIndex = iStep - 1;
		} else {
			iSelectedIndex = iItems + iStep;
		}

		var oItem = aItems[iSelectedIndex];
		if (oItem) {
			var oOriginalItem = _getOriginalItem.call(this, oItem);
			oItem.setSelected(true);
			this.setProperty("selectedKey", oOriginalItem.getKey(), true); // do not invalidate while FieldHelp

			if (!oPopover.isOpen()) {
				this.open();
			}

			this.fireNavigate({value: oItem.getLabel(), additionalValue: oItem.getValue(), key: oOriginalItem.getKey()});
		}

	};

	FieldHelpBase.prototype.getTextforKey = function(sKey) {

		var aItems = this.getItems();

		for (var i = 0; i < aItems.length; i++) {
			var oItem = aItems[i];
			if (oItem.getKey() == sKey) {
				return oItem.getText();
			}
		}

		return "";

	};

//	function _handleItemPress(oEvent) {
//		var oItem = oEvent.getParameter("listItem");
//
//	}

	function _hanldeSelectionChange(oEvent) {
		var oItem = oEvent.getParameter("listItem");
		var bSelected = oEvent.getParameter("selected");

		if (bSelected) {
			var oOriginalItem = _getOriginalItem.call(this, oItem);
			this.setProperty("selectedKey", oOriginalItem.getKey(), true); // do not invalidate while FieldHelp
			this.close();
			this.fireSelect({value: oItem.getLabel(), additionalValue: oItem.getValue(), key: oOriginalItem.getKey()});
		}
	}

	// returns ListFieldHelp item for inner list item
	function _getOriginalItem(oItem) {

		var sPath = oItem.getBindingContextPath();
		return this._oManagedObjectModel.getProperty(sPath);

	}

	function _suggestFilter(sText) {

		var sFilterValue = this.getFilterValue();

		if (!sFilterValue || jQuery.sap.startsWithIgnoreCase(sText, sFilterValue)) {
			return true;
		} else {
			return false;
		}

	}

	return ListFieldHelp;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/ListFieldHelp.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nInternalModel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nInternalModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.personalization.Util'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nInternalModel",[
	'jquery.sap.global', 'sap/ui/base/ManagedObject', 'sap/ui/model/json/JSONModel', 'sap/ui/comp/personalization/Util'
], function(jQuery, ManagedObject, JSONModel, PersonalizationUtil) {
	"use strict";

	/**
	 * The JSON model is used for several reasons:
	 *  1. the column representation in the panel (internal view) is different then the column representation
	 *  in aggregation 'items' of P13nXXXPanel which is external view of columns.
	 *  For example:
	 *    External view: [oX, xB, oA, xC] Columns B and C are selected. Columns X and A are not selected.
	 *    Internal view: [xB, xC, oA, oX] On the top all selected columns are displayed. On the bottom all unselected columns sorted in alphabetical order are displayed.
	 *  2. When we define a table sorter (sorter:{path:'selected', descending:true}) then the presentation will
	 *  be automatically changed when end user select a column (it will jump to the selected columns). This behaviour is not desired.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The P13nInternalModel is used to...
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nInternalModel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nInternalModel = JSONModel.extend("sap.ui.mdc.experimental.P13nInternalModel", /** @lends sap.ui.mdc.experimental.P13nInternalModel.prototype */
	{
		constructor: function(sId, mSettings) {
			JSONModel.apply(this, arguments);
			this._initialize();
		}
	});

	/**
	 *
	 * @private
	 */
	P13nInternalModel.prototype._initialize = function() {
		var aMItems = this.getProperty("/tableItems").map(function(oP13nItem) {
			if (typeof oP13nItem === "string") {
				oP13nItem = sap.ui.getCore().byId(oP13nItem);
			}
			return {
				columnKey: oP13nItem.getColumnKey(),
				selected: oP13nItem.getSelected(),
				position: oP13nItem.getPosition(),
				// needed for initial sorting
				text: oP13nItem.getText()
			};
		});
		this._sortBySelectedAndPosition(aMItems);
		this.setData({
			items: aMItems
		});
		this.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);
		this.setSizeLimit(1000);
	};

	/**
	 *
	 * @public
	 */
	P13nInternalModel.prototype.getModelItemByColumnKey = function(sColumnKey) {
		return this.getProperty("/items").find(function(oMItem) {
			return oMItem.columnKey === sColumnKey;
		});
	};

	/**
	 *
	 * @public
	 */
	P13nInternalModel.prototype.getIndexOfModelItem = function(oMItem) {
		return this.getProperty("/items").indexOf(oMItem);
	};

	/**
	 * Moves a model item depending on the real position in the table.
	 * @public
	 */
	P13nInternalModel.prototype.selectModelItem = function(oMItemFrom, bIsSelected) {
		// Update the internal model item
		oMItemFrom.selected = bIsSelected;

		var aMItems = this.getProperty("/items");
		// Get selected items ordered from previous item of the current one to the top item (i.g. aMItemsSelected[0]
		// the item above of current item)
		var aMItemsSelected = this._getSelectedModelItemsBetween(oMItemFrom, aMItems[0]);
		// Check if the position of current item in the table is lower then the previous item. If so the item
		// should be moved.
		if (aMItemsSelected.length && aMItemsSelected[0].position > oMItemFrom.position) {
			this.moveModelItemPosition(oMItemFrom, aMItemsSelected[0]);
		} else {
			// Get selected items ordered from next item of the current one to the bottom item (i.g. aMItemsSelected[0]
			// the item below of current item)
			aMItemsSelected = this._getSelectedModelItemsBetween(oMItemFrom, aMItems[aMItems.length - 1]);
			// Check if the position of current item in the table is higher then the next item. If so the item
			// should be moved.
			if (aMItemsSelected.length && aMItemsSelected[0].position < oMItemFrom.position) {
				this.moveModelItemPosition(oMItemFrom, aMItemsSelected[0]);
			}
		}
	};

	/**
	 * Moves model item.
	 *
	 * @param {object} oMItemFrom Model item which will be removed
	 * @param {object} oMItemTo Model item at which index the removed model item will be inserted
	 * @public
	 */
	P13nInternalModel.prototype.moveModelItem = function(oMItemFrom, oMItemTo) {
		if (!oMItemFrom || !oMItemTo) {
			return;
		}
		var aMItems = this.getProperty("/items");
		var iIndexFrom = aMItems.indexOf(oMItemFrom);
		var iIndexTo = aMItems.indexOf(oMItemTo);
		if (iIndexFrom < 0 || iIndexTo < 0 || iIndexFrom > aMItems.length - 1 || iIndexTo > aMItems.length - 1) {
			return;
		}

		// Move item
		var oMItemRemoved = aMItems.splice(iIndexFrom, 1)[0];
		aMItems.splice(iIndexTo, 0, oMItemRemoved);
		this.setProperty("/items", aMItems);
	};

	/**
	 * Moves a JSON model item.
	 * @param {object} oMItemFrom
	 * @param {object} oMItemTO
	 * @public
	 */
	P13nInternalModel.prototype.moveModelItemPosition = function(oMItemFrom, oMItemTo) {
		var aSelectedMItems = this._getSelectedModelItemsBetween(oMItemFrom, oMItemTo);
		if (!aSelectedMItems.length) {
			return;
		}
		var aMItems = this.getProperty("/items");

		var iIndexFrom = aMItems.indexOf(oMItemFrom);
		var iIndexTo = aMItems.indexOf(oMItemTo);
		// Convert to last selected item
		if (iIndexFrom < iIndexTo) {
			// From up to down
			oMItemTo = aSelectedMItems[aSelectedMItems.length - 1];
		} else {
			// From down to up
			oMItemTo = aSelectedMItems[aSelectedMItems.length - 1];
		}

		// Calculate new 'position'
		var aMItemsSorted = jQuery.extend(true, [], aMItems);
		aMItemsSorted.sort(function(a, b) {
			if (a.position < b.position) {
				return -1;
			} else if (a.position > b.position) {
				return 1;
			} else {
				return 0;
			}
		});
		// 1. We can remove the item because the array is sorted by 'position'
		var oMItemCopyRemoved = aMItemsSorted.splice(oMItemFrom.position, 1)[0];
		// 2. Assign new 'position'
		aMItemsSorted.forEach(function(oMItem, iIndex) {
			oMItem.position = iIndex;
		});
		// 3. Insert the removed item
		aMItemsSorted.splice(oMItemTo.position, 0, oMItemCopyRemoved);
		// 4. Assign new 'position'
		aMItemsSorted.forEach(function(oMItem, iIndex) {
			oMItem.position = iIndex;
		});
		// Take over the position
		aMItems.forEach(function(oMItem, iIndex) {
			var oMItemCopy = PersonalizationUtil.getArrayElementByKey("columnKey", oMItem.columnKey, aMItemsSorted);
			this.setProperty("/items/" + iIndex + "/position", oMItemCopy.position);
		}, this);
	};

	/**
	 * @param {object} oMItemFrom Excluded item. The index of item can be higher or lower then the index of <code>oMItemTo</code>
	 * @param {object} oMItemTo Included item. The index of item can be higher or lower then the index of <code>oMItemFrom</code>
	 * @returns {array}
	 * @private
	 */
	P13nInternalModel.prototype._getSelectedModelItemsBetween = function(oMItemFrom, oMItemTo) {
		var aMItems = this.getProperty("/items");
		var iIndexFrom = aMItems.indexOf(oMItemFrom);
		var iIndexTo = aMItems.indexOf(oMItemTo);
		if (iIndexFrom === iIndexTo) {
			// As the 'iIndexFrom' should be excluded of calculation, there is nothing in between
			return [];
		}
		var aMItemsCopy = [];
		if (iIndexFrom < iIndexTo) {
			// From top down
			// Convert oMItemFrom to 'included' item
			// Increase oMItemTo with 1 for slice
			aMItemsCopy = aMItems.slice(iIndexFrom + 1, iIndexTo + 1);
			return aMItemsCopy.filter(function(oMItem) {
				return !!oMItem.selected;
			});
		}
		// From bottom up
		aMItemsCopy = aMItems.slice(iIndexTo, iIndexFrom).reverse();
		return aMItemsCopy.filter(function(oMItem) {
			return !!oMItem.selected;
		});
	};

	/**
	 * @private
	 */
	P13nInternalModel.prototype._sortBySelectedAndPosition = function(aMItems) {
		aMItems.sort(function(a, b) {
			if (a.selected === true && (b.selected === false || b.selected === undefined)) {
				return -1;
			} else if ((a.selected === false || a.selected === undefined) && b.selected === true) {
				return 1;
			} else if (a.selected === true && b.selected === true) {
				if (a.position < b.position) {
					return -1;
				} else if (a.position > b.position) {
					return 1;
				} else {
					return 0;
				}
			} else if ((a.selected === false || a.selected === undefined) && (b.selected === false || b.selected === undefined)) {
				if (a.text < b.text) {
					return -1;
				} else if (a.text > b.text) {
					return 1;
				} else {
					return 0;
				}
			}
		});
	};

	return P13nInternalModel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nInternalModel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nItem",[
	'sap/ui/core/Element'
], function(Element) {
	"use strict";

	/**
	 * Constructor for a new P13nItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Base type for <code>items</code> aggregation in <code>P13nXXXPanel</code> controls.
	 * @extends sap.ui.core.Element
	 * @version 1.50.6
	 * @constructor
	 * @abstract
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nItem = Element.extend("sap.ui.mdc.experimental.P13nItem", /** @lends sap.ui.mdc.experimental.P13nItem.prototype */
	{
		metadata: {
			"abstract": true,
			library: "sap.ui.mdc",
			properties: {
				/**
				 * The unique key of the item.
				 */
				columnKey: {
					type: "string",
					defaultValue: undefined
				},
				/**
				 * The text to be displayed for the item.
				 */
				text: {
					type: "string",
					defaultValue: undefined
				},
				/**
				 * The tooltip to be displayed for the item.
				 */
				tooltip: {
					type: "string",
					defaultValue: undefined
				}
			}
		}
	});

	return P13nItem;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nItem.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nPanelFormatter') ) {
jQuery.sap.declare('sap.ui.mdc.experimental.P13nPanelFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/P13nPanelFormatter",[], function() {
	"use strict";
	var P13nPanelFormatter = {

		showCount: function(iCountOfSelectedItems, iCountOfItems) {
			return sap.ui.getCore().getLibraryResourceBundle("sap.m").getText('COLUMNSPANEL_SELECT_ALL_WITH_COUNTER', [
				iCountOfSelectedItems, iCountOfItems
			]);
		},

		determineCount: function(aItems) {
			this._updateCounts();
			return P13nPanelFormatter.showCount(this.getCountOfSelectedItems(), this.getCountOfItems());
		},

		isTrue: function(oValue) {
			return !!oValue;
		},

		showDimMeasureType: function(oMItem) {
			if (oMItem.aggregationRole === "dimension") {
				return sap.ui.getCore().getLibraryResourceBundle("sap.m").getText('COLUMNSPANEL_TYPE_DIMENSION');
			}
			if (oMItem.aggregationRole === "measure") {
				return sap.ui.getCore().getLibraryResourceBundle("sap.m").getText('COLUMNSPANEL_TYPE_MEASURE');
			}
			return;
		},

		createChartRoleTypes: function(sId, oBindingContext) {
			var oAvailableRoleType = oBindingContext.getObject();
			return new sap.ui.core.Item({
				key: oAvailableRoleType.key,
				text: oAvailableRoleType.text
			});
		}
	};

	return P13nPanelFormatter;
}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nPanelFormatter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSelectionItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSelectionItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/P13nSelectionItem",[
	'sap/ui/mdc/experimental/P13nItem'
], function(P13nItem) {
	"use strict";

	/**
	 * Constructor for a new P13nSelectionItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Type for <code>items</code> aggregation in <code>P13nSelectionPanel</code> control.
	 * @extends sap.ui.mdc.experimental.P13nItem
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nSelectionItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSelectionItem = P13nItem.extend("sap.ui.mdc.experimental.P13nSelectionItem", /** @lends sap.ui.mdc.experimental.P13nSelectionItem.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Defines visibility of the item.
				 */
				selected: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Defines position of the item.
				 */
				position: {
					type: "int"
				},
				/**
				 * Defines href of a link.
				 */
				href: {
					type: "string",
					defaultValue: undefined
				},
				/**
				 * Defines target of a link.
				 */
				target: {
					type: "string",
					defaultValue: undefined
				},
				/**
				 * Defines press handler of a link.
				 */
				press: {
					type: "object",
					defaultValue: null
				}
			}
		}
	});

	return P13nSelectionItem;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSelectionItem.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSortItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSortItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/P13nSortItem",[
	'sap/ui/mdc/experimental/P13nItem'
], function(P13nItem) {
	"use strict";

	/**
	 * Constructor for a new P13nSortItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Type for <code>items</code> aggregation in <code>P13nColumnPanel</code> control.
	 * @extends sap.ui.mdc.experimental.P13nItem
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.46.0
	 * @alias sap.ui.mdc.experimental.P13nSortItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSortItem = P13nItem.extend("sap.ui.mdc.experimental.P13nSortItem", /** @lends sap.ui.mdc.experimental.P13nSortItem.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Defines visibility of the item.
				 */
				selected: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Defines position of the item.
				 */
				position: {
					type: "int"
				},
				/**
				 * Defines sort order of the item.
				 */
				sortOrder: {
					type: "string"
				}
			}
		}
	});

	return P13nSortItem;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSortItem.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.ControlProvider') ) {
jQuery.sap.declare('sap.ui.mdc.experimental.provider.ControlProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.BindingParser'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/ControlProvider",[
	"sap/ui/base/ManagedObject", "sap/ui/base/BindingParser"
], function(ManagedObject, BindingParser) {
	"use strict";

	var ControlProvider = {
		mProvidedProperties: {

		},
		mProvidedFunctions: {

		}
	};

	/**
	 * Sets the provided property information from the metadata interpretation
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sProperty The name of the control property
	 * @param {any} vValue The value of the property that is provided
	 * @public
	 */
	ControlProvider.provideAttribute = function(oNode, sAttribute, vValue) {
		if (vValue != null) {
			oNode.setAttribute(sAttribute, vValue);
		}
	};

	/**
	 * Sets the provided property information from the metadata interpretation
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sProperty The name of the control property
	 * @param {any} vValue The value of the property that is provided
	 * @public
	 */
	ControlProvider.provideProperty = function(oControl, sProperty, vValue) {
		if (vValue != null) {
			var oBinding, oProperty = oControl.getMetadata().getProperty(sProperty);

			if (!oProperty) {
				return;
			}

			if (ControlProvider.isPropertyAllowedToBeProvided(oControl, sProperty, vValue)) {
				oControl._oProviderData.mProvidedProperties[sProperty] = vValue;

				oBinding = ControlProvider.getAsBinding(vValue);
				if (oBinding) {
					oControl.bindProperty(sProperty, oBinding);
				} else {
					oProperty.set(oControl, vValue);

				}
			}
		}
	};

	/**
	 * Sets the provided aggegration information from the metadata interpretation
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sAggregation The name of the control aggregation
	 * @param {any} vValue The value of the property that is provided
	 * @param {Control} oTemplate The template
	 * @param {boolean} Whether the aggregation is sharable
	 * @public
	 */
	ControlProvider.provideAggregation = function(oControl, sAggregation, vValue, oTemplate, bShareable) {
		if (vValue != null) {
			var oBinding, oAggregationInfo = oControl.getMetadata().getAggregation(sAggregation);

			if (!oAggregationInfo) {
				return;
			}

			if (ControlProvider.isPropertyAllowedToBeProvided(oControl, sAggregation, vValue)) {
				oControl._oProviderData.mProvidedProperties[sAggregation] = vValue;
				oBinding = ControlProvider.getAsBinding(vValue);
				oBinding.template = oTemplate;
				oBinding.templateShareable = bShareable;

				oControl.bindAggregation(sAggregation, oBinding);
			}
		}
	};

	/**
	 * Sets the function that we be runned to prepare the copies from this control as a template
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sFuncName The name of the function that takes the control a input
	 * @param {function} The function that should be runned to prepare clones
	 * @public
	 */
	ControlProvider.providePrepareCloneFunction = function(oControl, sFuncName, fnFunction) {
		oControl._oProviderData.mProvidedFunctions[sFuncName] = fnFunction;
		fnFunction(oControl);
	};

	/**
	 * Run all the functions that are meant to be runned after cloning a control
	 *
	 * @param {element} oControl The managed object
	 * @private
	 */
	ControlProvider.prepareClone = function(oClone) {
		var aFunctions = oClone._oProviderData.mProvidedFunctions;

		for ( var i in aFunctions) {
			aFunctions[i](oClone);
		}
	};

	/**
	 * Checks if a certain property has already been provided
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sProperty The name of the control property
	 * @param {any} vValue The value of the property that is provided
	 * @public
	 */
	ControlProvider.isPropertyAlreadyProvided = function(oControl, sProperty, vValue) {
		if (oControl._oProviderData.mProvidedProperties[sProperty] && oControl._oProviderData.mProvidedProperties[sProperty] === vValue) {
			return true;
		}

		return false;
	};

	/**
	 * Checks if a property can be provided
	 *
	 * @param {element} oControl The managed object
	 * @param {string} sProperty The name of the control property
	 * @param {any} vValue The value of the property that is provided
	 * @public
	 */
	ControlProvider.isPropertyAllowedToBeProvided = function(oControl, sProperty, vValue) {
		if (oControl.isPropertyInitial(sProperty)) {
			return true;
		}

		if (ControlProvider.isPropertyAlreadyProvided(oControl, sProperty, vValue) && oControl._oProviderData.mProvidedProperties[sProperty] !== vValue) {
			return true;
		}

		return false;
	};

	/**
	 * Checks if control a certain control can be provided from information of another control
	 *
	 * @param {element} oControl The control that will be provided from the provider control
	 * @param {element} oProviderControl The control that is used as template to provide the provided control
	 */
	ControlProvider.canControlBeProvided = function(oControl, oProviderControl) {
		// still not provided
		if (!oControl) {
			return false;
		}

		if (!oControl._oProviderData) {
			oControl._oProviderData = {
				mProvidedProperties: {},// init provided properties
				mProvidedFunctions: {},// init provided properties
				providedFrom: oProviderControl
			// flag the provider control
			};
			return true;
		} else if (oControl._oProviderData.providedFrom && oControl._oProviderData.providedFrom === oProviderControl) {
			return true;
		}

		return false;
	};

	/**
	 * Sets the provided property information from the metadata interpretation
	 *
	 * @param {any} vBinding The binding as string
	 * @public
	 */
	ControlProvider.getAsBinding = function(vBinding) {
		if (typeof vBinding == 'string') {
			return ManagedObject.bindingParser(vBinding);
		} else if (typeof vBinding == 'object') {
			return vBinding;
		}
		return undefined;
	};

	/**
	 * GEt the binding as a string
	 */
	ControlProvider.getAsString = function(vBinding) {
		if (typeof vBinding == 'string') {
			return vBinding;
		} else if (typeof vBinding == 'object') {
			var sResult = JSON.stringify(vBinding);

			sResult = sResult.replace(new RegExp("\"path\"", "g"),"path");
			sResult = sResult.replace(new RegExp("\"parts\"", "g"),"parts");
			sResult = sResult.replace(new RegExp("\"parameters\"", "g"),"parameters");
			sResult = sResult.replace(new RegExp("\"expand\"", "g"),"expand");
			sResult = sResult.replace(new RegExp("\"", "g"),"'");

			return sResult;
		}
		return undefined;
	};

	ControlProvider.mergeBindings = function(aBindings, fnFormatter) {
		var sBinding = "{ parts: [" + aBindings.join(",") + "] }";
		var oBindingInfo = ControlProvider.getAsBinding(sBinding);

		oBindingInfo.formatter = [
			fnFormatter
		];

		return oBindingInfo;
	};

	return ControlProvider;
});

}; // end of sap/ui/mdc/experimental/provider/ControlProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.model.ModelAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Abstract Model adapter
 *
 * @experimental
 * @abstract
 */
jQuery.sap.declare('sap.ui.mdc.experimental.provider.model.ModelAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/model/ModelAdapter",[
	"jquery.sap.global", "sap/ui/base/Object"
], function(jQuery, BaseObject) {
	"use strict";

	var ModelAdapter = BaseObject.extend("sap.ui.mdc.experimental.provider.model.ModelAdapter", {
		/**
		 * The reference to the current meta model.
		 *
		 * @protected
		 */
		oMetaModel: undefined,
		/**
		 * The models name
		 *
		 * @protected
		 */
		sModelName: undefined,
		/**
		 * The cached properties
		 *
		 * @private
		 */
		_mPropertyBag: {},
		constructor: function(oModel, sModelName, sMetaContext,bCanonical) {
			this.oModel = oModel;
			this.oMetaModel = oModel.getMetaModel();
			this.sModelName = sModelName;

			bCanonical = bCanonical || false;

			if (sMetaContext) {
				this.switchMetaContext(sMetaContext,bCanonical);
			}

			this.putProperty("key", this.key);
			this.putProperty("visible", this.visible);
			this.putProperty("hidden", this.hidden);
			this.putProperty("enabled", this.enabled);
			this.putProperty("disabled", this.disabled);
			this.putProperty("required", this.required);
			this.putProperty("semantics", this.semantics);
			this.putProperty("ui5Type", this.ui5Type);
			this.putProperty("formatOptions",this.formatOptions);
			this.putProperty("tooltip", this.tooltip);
			this.putProperty("label", this.label);
			this.putProperty("filterable", this.filterable);
			this.putProperty("requiredInFilter", this.requiredInFilter);
			this.putProperty("sortable", this.sortable);
		},

		ready: function() {
			if (this.oMetaModel.loaded) {
				return this.oMetaModel.loaded();
			}
		},

		/**
		 * Switches the metaContext
		 *
		 * @param {string} sMetaContext the meta context
		 * @final
		 */
		switchMetaContext: function(sMetaContext, bCanonical) {
			var sCanonicalMetaContext;

			if (bCanonical) {
				sCanonicalMetaContext = sMetaContext;
			} else {
				this.oMetaContext = this.oMetaModel.getMetaContext(sMetaContext);
				sCanonicalMetaContext = this.oMetaContext.getPath();
			}

			if (sCanonicalMetaContext && sCanonicalMetaContext != this.sMetaContext) {
				this.sMetaContext = sCanonicalMetaContext;

				if (!this._mPropertyBag[this.sMetaContext]) {
					this._mPropertyBag[this.sMetaContext] = {};
				}
			}

			// hook that needs to be implemented
			this.afterMetaContextSwitch(this.sMetaContext, sMetaContext);
		},
		/**
		 * Adaptions after a meta context switch
		 *
		 * @protected
		 */
		afterMetaContextSwitch: function(sMetaContext) {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method afterMetaContextSwitch must be redefined");
		},

		/**
		 * The name of the model
		 *
		 * @returns
		 */
		getModelName: function() {
			return this.sModelName;
		},
		/**
		 * Puts a deferred property to the corresponding adapter
		 */
		putProperty: function(sProperty, fnGetter, oArgs, caller) {
			if (!caller) {
				caller = this;
			}

			Object.defineProperty(this, sProperty, {
				configurable: true,
				get: function() {
					if (!this._mPropertyBag[this.sMetaContext].hasOwnProperty(sProperty)) {
						this._mPropertyBag[this.sMetaContext][sProperty] = fnGetter.apply(caller, oArgs);
					}

					return this._mPropertyBag[this.sMetaContext][sProperty];
				}
			});
		},
		/**
		 * The prefix for the control Id of the driven control
		 *
		 * @return {string} The id prefix
		 * @public
		 */
		key: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method key must be redefined");
		},
		/**
		 * The visible meta data information for the property.
		 *
		 * @return {object} The visible information for the property, this may also be a binding
		 * @public
		 */
		visible: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method visible must be redefined");
		},
		/**
		 * The hidden meta data information for the property.
		 *
		 * @return {object} The hidden information for the property, this may also be a binding
		 * @public
		 */
		hidden: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isHidden must be redefined");
		},
		/**
		 * The editable meta data information for the property.
		 *
		 * @return {object} The editable information for the property, this may also be a binding
		 * @public
		 */
		enabled: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isEnabled must be redefined");
		},
		/**
		 * The readonly meta data information for the property.
		 *
		 * @return {object} The readonly information for the property, this may also be a binding
		 * @public
		 */
		disabled: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isDisabled must be redefined");
		},
		/**
		 * The required meta data information for the property.
		 *
		 * @return {object} The required information for the property, this may also be a binding
		 * @public
		 */
		required: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isRequired must be redefined");
		},
		/**
		 * Defines the semantics of the property
		 *
		 * @see ModelAdapter.Semantics
		 * @return {Semantics} The fields semantic
		 * @public
		 */
		semantics: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method semantics must be redefined");
		},
		/**
		 * Indicates if property is flagged as URL.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as URL
		 *
		 * @public
		 */
		url: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isURL must be redefined");
		},
		/**
		 * Indicates if property is flagged as password.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as password
		 *
		 * @public
		 */
		password: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isPassword must be redefined");
		},
		/**
		 * Indicates if property is flagged as phone number.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as phone number
		 *
		 * @public
		 */
		phoneNumber: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isPhoneNumber must be redefined");
		},
		/**
		 * Indicates if property is flagged as E-Mail.
		 *
		 * @return {boolean} <code>true</true> if property is flagged as E-Mail
		 *
		 * @public
		 */
		eMail: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method isEmail must be redefined");
		},
		/**
		 * The label information for the property.
		 *
		 * @return {string} The label information for the property
		 * @public
		 */
		label: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method getLabel must be redefined");
		},
		/**
		 * The tooltip information for the property.
		 *
		 * @return {string} The tooltip information for the property
		 * @public
		 */
		tooltip: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method getTooltip must be redefined");
		},
		/**
		 * The UI5 type information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		ui5Type: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method getUI5Type must be redefined");
		},
		/**
		 * The formatOptions information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		formatOptions: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method formatOptions must be redefined");
		},
		/**
		 * The filterable information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		filterable: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method filterable must be redefined");
		},
		/**
		 * The requiredInFilter information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		requiredInFilter: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method requiredInFilter must be redefined");
		},
		/**
		 * The sortable information for the property.
		 *
		 * @return {string} The UI5 type information for the property
		 * @public
		 */
		sortable: function() {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapter:  method sortable must be redefined");
		},

		/**
		 * The binding as a path within the model name
		 */
		asPath: function(sSimplePath, bWithoutSyntax) {
			var sPath = this.sModelName ? this.sModelName + ">" + sSimplePath : sSimplePath;

			if (!bWithoutSyntax) {
				sPath = "{path: '" + sPath + "'}";
			}

			return sPath;
		}

	});

	ModelAdapter.Semantics = {
		eMail: 1,
		password: 2,
		url: 3,
		phoneNumber: 4,
		currency: 5,
		measure: 6
	};

	return ModelAdapter;

});

}; // end of sap/ui/mdc/experimental/provider/model/ModelAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.model.ODataAdapter') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.provider.model.ODataAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/provider/model/ODataAdapter",[
	"./ModelAdapter"
], function(ModelAdapter) {
	"use strict";

	/*
	 * Strips the OData key predicate from a resource path segment. @param {string} sSegment @returns {string}
	 */
	function stripKeyPredicate(sSegment) {
		var iPos = sSegment.indexOf("(");
		return iPos >= 0 ? sSegment.slice(0, iPos) : sSegment;
	}

	var ODataAdapter = ModelAdapter.extend("sap.ui.mdc.experimental.provider.model.ODataAdapter", {
		_schemaCache: {

		},
		aExpand: [],
		constructor: function(oModel, sModelName, sMetaContext, bCanonical) {
			ModelAdapter.prototype.constructor.apply(this, arguments);

			this.putProperty("fields", this.fields);
			this.putProperty("expand", this.expand);
			this.putProperty("navigationProperties", this.navigationProperties);
			this.putProperty("filterRestrictions", this.filterRestrictions);
		}
	});

	ODataAdapter.prototype.afterMetaContextSwitch = function(sCanonicalPath, sPath) {
		if (!this._schemaCache[sCanonicalPath]) {
			this._schemaCache[sCanonicalPath] = this.oMetaModel.getProperty(sCanonicalPath);
			this.schema = this._schemaCache[sCanonicalPath];
			this._precalucateFieldControl();
		} else {
			this.schema = this._schemaCache[sCanonicalPath];
		}

		this.oEntitySet = this.calculateEntitySet(sPath);
	};

	ODataAdapter.prototype.calculateEntitySet = function(sPath) {
		var oAssocationEnd, sNavigationPropertyName, oEntityType, sQualifiedName, oEntitySet, aParts = sPath.split("/");
		if (aParts[0] !== "") {
			return null;
		}
		aParts.shift();

		// from entity set to entity type
		oEntitySet = this.oMetaModel.getODataEntitySet(stripKeyPredicate(aParts[0]));
		if (!oEntitySet) {
			return null;
		}
		aParts.shift();

		// follow (navigation) properties
		while (aParts.length) {
			sQualifiedName = oEntitySet.entityType;
			oEntityType = this.oMetaModel.getODataEntityType(sQualifiedName);
			sNavigationPropertyName = stripKeyPredicate(aParts[0]);
			oAssocationEnd = this.oMetaModel.getODataAssociationEnd(oEntityType, sNavigationPropertyName);

			if (oAssocationEnd) {
				// navigation property
				oEntitySet = this.oMetaModel.getODataEntitySet(oAssocationEnd.entitySet);
			} else {
				return null;
			}
		}

		return oEntitySet;

	};

	ODataAdapter.prototype.resolveNavi = function(sNaviPath) {
		var aPath = sNaviPath.split("/"), sNavigationProperty = aPath[0];

		var oAssocationEnd = this.oMetaModel.getODataAssociationSetEnd(this.schema, sNavigationProperty);

		var oNaviEntitySet = this.oMetaModel.getODataEntitySet(oAssocationEnd.entitySet);

		var sNaviDeep = "/" + oNaviEntitySet.name + "/" + aPath[1];

		var oMetadataContext = this.oMetaModel.getMetaContext(sNaviDeep);
		var sMetaContext = oMetadataContext.getPath();

		if (this.aExpand.indexOf(sNavigationProperty) == -1) {
			this.aExpand.push(sNavigationProperty);
		}

		var oNavi = new ODataAdapter(this.oModel, this.ModelName, sMetaContext, true);

		oNavi.oEntitySet = oNaviEntitySet;

		return oNavi;
	};

	ODataAdapter.prototype.ui5Type = function() {

		if (this.oMetaModel.getUI5Type) {
			return this.oMetaModel.getUI5Type(this.sMetaContext);
		}

		switch (this.schema.type) {
			case "Edm.Boolean":
				return "sap.ui.model.odata.type.Boolean";
			case "Edm.Byte":
				return "sap.ui.model.odata.type.Byte";
			case "Edm.Date":
				return "sap.ui.model.odata.type.Date";
			case "Edm.DateTimeOffset":
				return "sap.ui.model.odata.type.DateTimeOffset";
			case "Edm.Decimal":
				return "sap.ui.model.odata.type.Decimal";
			case "Edm.Double":
				return "sap.ui.model.odata.type.Double";
			case "Edm.Guid":
				return "sap.ui.model.odata.type.Guid";
			case "Edm.Int16":
				return "sap.ui.model.odata.type.Int16";
			case "Edm.Int32":
				return "sap.ui.model.odata.type.Int32";
			case "Edm.Int64":
				return "sap.ui.model.odata.type.Int64";
			case "Edm.SByte":
				return "sap.ui.model.odata.type.SByte";
			case "Edm.Single":
				return "sap.ui.model.odata.type.Single";
			case "Edm.String":
				return "sap.ui.model.odata.type.String";
			case "Edm.TimeOfDay":
				return "sap.ui.model.odata.type.TimeOfDay";
			default:
				return "sap.ui.model.odata.type.String";
		}
	};

	ODataAdapter.prototype.formatOptions = function() {
		var sFormatOptions = "";

		// TODO: How to translate

		switch (this.ui5Type) {
			case "sap.ui.model.odata.type.Boolean":
				break;
			case "sap.ui.model.odata.type.Byte":

				break;
			case "sap.ui.model.odata.type.Date":
				break;
			case "sap.ui.model.odata.type.DateTimeOffset":
				break;
			case "sap.ui.model.odata.type.Decimal":
				break;
			case "sap.ui.model.odata.type.Double":
				break;
			case "sap.ui.model.odata.type.Guid":
				break;
			case "sap.ui.model.odata.type.Int16":
				break;
			case "sap.ui.model.odata.type.Int32":
				break;
			case "sap.ui.model.odata.type.Int64":
				break;
			case "sap.ui.model.odata.type.SByte":
				break;
			case "sap.ui.model.odata.type.Single":
				break;
			case "sap.ui.model.odata.type.String":
				break;
			case "sap.ui.model.odata.type.TimeOfDay":
				break;
			default:
				break;
		}

		return sFormatOptions;
	};

	ODataAdapter.prototype.semantics = function() {
		if (this.getAnnotation("com.sap.vocabularies.Common.v1.Masked") != null) {
			return ModelAdapter.Semantics.password;
		}

		if (this.getAnnotation("com.sap.vocabularies.Communication.v1.IsEmailAddress") != null) {
			return ModelAdapter.Semantics.eMail;
		}

		if (this.getAnnotation("com.sap.vocabularies.Communication.v1.IsPhoneNumber") != null) {
			return ModelAdapter.Semantics.phoneNumber;
		}

		if (this.getAnnotation("com.sap.vocabularies.Communication.v1.IsUrl") != null) {
			return ModelAdapter.Semantics.url;
		}

		if (this.getAnnotation("Org.OData.Measures.V1.Unit") != null) {
			return ModelAdapter.Semantics.currency;
		}

		if (this.getAnnotation("Org.OData.Measures.V1.ISOCurrency") != null) {
			return ModelAdapter.Semantics.measure;
		}
	};

	ODataAdapter.prototype.key = function() {
		return this.schema.name;
	};

	ODataAdapter.prototype.visible = function() {
		var oHiddenAnno = this._isAnnotationBoolean("com.sap.vocabularies.UI.v1.Hidden");
		var bVisible = oHiddenAnno ? !oHiddenAnno : true;

		if (bVisible && this.schema._fieldControl) {
			bVisible = this.schema._fieldControl.visible;
		}

		return bVisible;
	};

	ODataAdapter.prototype.hidden = function() {
		var oHiddenAnno = this._isAnnotationBoolean("com.sap.vocabularies.UI.v1.Hidden");
		var bHidden = oHiddenAnno ? oHiddenAnno : false;

		if (!bHidden && this.schema._fieldControl) {
			bHidden = this.schema._fieldControl.hidden;
		}

		return bHidden;
	};

	ODataAdapter.prototype.enabled = function() {
		var oUpdatableAnno = this.getAnnotation("Org.OData.Core.V1.Immutable/Bool") || this.getAnnotation("Org.OData.Core.V1.Computed/Bool");
		var bEnabled = oUpdatableAnno ? oUpdatableAnno == "false" : true;

		if (bEnabled && this.schema._fieldControl) {
			bEnabled = this.schema._fieldControl.editable;
		}

		return bEnabled;
	};

	ODataAdapter.prototype.disabled = function() {
		var oUpdatableAnno = this.getAnnotation("Org.OData.Core.V1.Immutable/Bool") || this.getAnnotation("Org.OData.Core.V1.Computed/Bool");
		var bDisabled = oUpdatableAnno ? oUpdatableAnno == "true" : false;

		if (!bDisabled && this.schema._fieldControl) {
			bDisabled = this.schema._fieldControl.readonly;
		}

		return bDisabled;
	};

	ODataAdapter.prototype.required = function() {
		var oRequiredAnno = this.getAnnotation("nullable");

		var bRequired = oRequiredAnno ? oRequiredAnno == "false" : false;

		if (this.schema._fieldControl) {
			bRequired = this.schema._fieldControl.required;
		} else {
			bRequired = bRequired && this.enabled;
		}

		return bRequired;
	};

	ODataAdapter.prototype.tooltip = function() {
		return this.getAnnotation("com.sap.vocabularies.Common.v1.QuickInfo/String");
	};

	ODataAdapter.prototype.label = function() {
		return this.getAnnotation("com.sap.vocabularies.Common.v1.Label/String");
	};

	ODataAdapter.prototype.filterable = function() {
		return (this.filterRestrictions.NonFilterableProperties.indexOf(this.schema.name) === -1);

	};

	ODataAdapter.prototype.requiredInFilter = function() {
		return (this.filterRestrictions.RequiredProperties.indexOf(this.schema.name) !== -1);
	};

	ODataAdapter.prototype.sortable = function() {
		return true;
	};

	ODataAdapter.prototype.navigationProperties = function() {
		var i, oNavi, aNavis = this.getAnnotation("navigationProperty"), aNaviMap = [];

		for (i = 0; i < aNavis.length; i++) {
			oNavi = aNavis[i];

			aNaviMap[oNavi.name] = oNavi;
		}

		return aNaviMap;
	};

	ODataAdapter.prototype.expand = function() {
		return this.aExpand;
	};

	ODataAdapter.prototype.fields = function() {
		var i, oField, aFields = this.getAnnotation("property"), aFieldMap = [];

		for (i = 0; i < aFields.length; i++) {
			oField = aFields[i];

			aFieldMap[oField.name] = new ODataAdapter(this.oModel, this.ModelName, this.sMetaContext + "/property/" + i, true);
			aFieldMap[oField.name].oEntitySet = this.oEntitySet;
		}

		return aFieldMap;
	};

	ODataAdapter.prototype.filterRestrictions = function() {
		var i, oAnnotation, oFilterRestrictions = {
			NonFilterableProperties: [],
			RequiredProperties: []
		};
		if (this.oEntitySet) {
			oAnnotation = this.getAnnotation("Org.OData.Capabilities.V1.FilterRestrictions", this.oEntitySet);

			if (oAnnotation) {
				if (oAnnotation.NonFilterableProperties) {
					for (i = 0; i < oAnnotation.NonFilterableProperties.length; i++) {
						oFilterRestrictions.NonFilterableProperties.push(oAnnotation.NonFilterableProperties[i].PropertyPath);
					}
				}

				if (oAnnotation.RequiredProperties) {
					for (i = 0; i < oAnnotation.RequiredProperties.length; i++) {
						oFilterRestrictions.RequiredProperties.push(oAnnotation.RequiredProperties[i].PropertyPath);
					}
				}
			}
		}

		return oFilterRestrictions;
	};

	ODataAdapter.prototype.getAnnotation = function(sAnnotation, oAnnotation) {
		oAnnotation = oAnnotation || this.schema;
		var aParts = sAnnotation.split("/");
		var iIndex = 0;

		while (oAnnotation && aParts[iIndex]) {
			oAnnotation = oAnnotation[aParts[iIndex]];
			iIndex++;
		}

		return oAnnotation;
	};

	ODataAdapter.prototype._isAnnotationBoolean = function(sAnnotation) {
		var oAnnotation = this.getAnnotation(sAnnotation);
		var isType = false;
		if (oAnnotation != null) {
			isType = oAnnotation.Bool ? (oAnnotation.Bool == "true") : true;
		}
		return isType;
	};

	ODataAdapter.prototype._precalucateFieldControl = function() {
		var oFieldControl = this.getAnnotation("com.sap.vocabularies.Common.v1.FieldControl");

		if (oFieldControl) {
			var fieldControl = {};
			this._schemaCache[this.sMetaContext]._fieldControl = fieldControl;

			if (oFieldControl.EnumMember) {

				switch (oFieldControl.EnumMember) {
					case "com.sap.vocabularies.Common.v1.FieldControlType/Hidden":
						fieldControl.visible = false;
						fieldControl.hidden = true;
						fieldControl.editable = false;
						fieldControl.readonly = true;
						fieldControl.required = false;
						break;
					case "com.sap.vocabularies.Common.v1.FieldControlType/Mandatory":
						fieldControl.visible = true;
						fieldControl.hidden = false;
						fieldControl.editable = true;
						fieldControl.readonly = false;
						fieldControl.required = true;
						break;
					case "com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly":
						fieldControl.visible = true;
						fieldControl.hidden = false;
						fieldControl.editable = false;
						fieldControl.readonly = true;
						fieldControl.required = false;
						break;
					default:
						fieldControl.visible = true;
						fieldControl.hidden = false;
						fieldControl.editable = true;
						fieldControl.readonly = true;
						fieldControl.required = false;
						break;
				}
			} else {
				var sPath = oFieldControl.Path;
				if (this.getModelName()) {
					sPath = this.getModelName() + ">" + sPath;
				}

				fieldControl.visible = "{= ${" + sPath + "} !== 0}";
				fieldControl.hidden = "{= ${" + sPath + "} === 0}";
				fieldControl.editable = "{= ${" + sPath + "} !== 1}";
				fieldControl.readonly = "{= ${" + sPath + "} === 1}";
				fieldControl.required = "{= ${" + sPath + "} === 7}";
			}
		}
	};

	ODataAdapter.prototype._enrichFromEntitySet = function(oField, oEntitySet) {
		// take sortable, filterable, required in filter
		var i, oFilterRestrictions = this._getAnnotation("Org.OData.Capabilities.V1.FilterRestrictions", oEntitySet);

		oField.filterable = true;
		oField.requiredInFilter = false;

		if (oFilterRestrictions) {
			for (i = 0; i < oFilterRestrictions.NonFilterableProperties; i++) {
				if (oField.name === oFilterRestrictions.NonFilterableProperties.PropertyPath) {
					oField.filterable = false;
				}
			}
		}

	};

	ODataAdapter.prototype.metadataContextOfField = function(oField) {
		var index = Object.keys(this.fields).indexOf(oField.name);

		if (index > -1) {
			return this.sMetaContext + "/property/" + index;
		} else {
			return "";
		}
	};

	return ODataAdapter;
});

}; // end of sap/ui/mdc/experimental/provider/model/ODataAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.registry.Utils') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.provider.registry.Utils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/registry/Utils",[
	"sap/ui/core/Control", "sap/m/library", "sap/ui/mdc/experimental/provider/model/ModelAdapter"
], function(Control, mLibrary, ModelAdapter) {
	"use strict";

	var InputType = mLibrary.InputType;

	return {
		convertToInputType: function(oAdapter) {
			switch (oAdapter.semantics) {
				case ModelAdapter.Semantics.password:
					return InputType.Password;
				case ModelAdapter.Semantics.eMail:
					return InputType.Email;
				case ModelAdapter.Semantics.phoneNumber:
					return InputType.Tel;
				case ModelAdapter.Semantics.url:
					return InputType.Url;
				default:
					var ui5Type = oAdapter.ui5Type;

					switch (ui5Type) {
						case "sap.ui.model.odata.type.Int16":
						case "sap.ui.model.odata.type.Int32":
						case "sap.ui.model.odata.type.Int64":
						case "sap.ui.model.odata.type.Decimal":
						case "sap.ui.model.odata.type.Double":
							return InputType.Number;
						case "sap.ui.model.odata.type.TimeOfDay":
							return InputType.Time;
						case "sap.ui.model.odata.type.DateTime":
						case "sap.ui.model.odata.type.DateTimeBase":
							return InputType.DateTime;
						case "sap.ui.model.odata.type.DateTimeOffset":
						case "sap.ui.model.odata.type.Date":
							return InputType.Date;
						default:
							return InputType.Text;
					}
			}
		},

		getNameSpaceInfo: function(sClassName) {
			var oNameSpaceInfo = {};

			oNameSpaceInfo.className = sClassName;
			var aModule = sClassName.split(".");
			oNameSpaceInfo.localName = aModule.pop();
			oNameSpaceInfo.nameSpace = aModule.join(".");

			return oNameSpaceInfo;
		},

		className: function(xmlNode) {
			// localName for standard browsers, baseName for IE, nodeName in the absence of namespaces
			var localName = xmlNode.localName || xmlNode.baseName || xmlNode.nodeName;

			if (!localName) {
				return undefined;
			}

			return xmlNode.namespaceURI + "." + localName;
		}
	};

});

}; // end of sap/ui/mdc/experimental/provider/registry/Utils.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.model.DateRange') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.model.DateRange'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.CompositeType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FormatException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/model/DateRange",[
	"jquery.sap.global",
	"sap/ui/model/CompositeType",
	"sap/ui/model/FormatException",
	"sap/ui/model/ParseException"
], function(jQuery, CompositeType, FormatException, ParseException) {
	"use strict";

	var DateRange = CompositeType.extend("sap.ui.mdc.model.DateRange", {
				constructor : function (oFormatOptions, oConstraints) {
					CompositeType.call(this, oFormatOptions, oConstraints);
				}
			}
		);

	DateRange.prototype.formatValue = function (aValues, sTargetType) {
		if (!aValues || (!aValues[0] && !aValues[1])) {
			return null;
		}
		switch (sTargetType) {
		case "any":
			return aValues;
		case "string":
			return aValues.join(" - ");
		default:
			throw new FormatException("Don't know how to format " + this.getName() + " to "
				+ sTargetType);
		}
	};

	DateRange.prototype.parseValue = function (sValue, sSourceType) {
		if (sValue === null || sValue === "") {
			return null;
		}
		switch (sSourceType) {
		case "string":
			return sValue.split(" - ");
		default:
			throw new ParseException("Don't know how to parse " + this.getName() + " from "
				+ sSourceType);
		}
	};

	DateRange.prototype.validateValue = function (aValues) {
		//TODO what could be usefully checked here? the parts are validated by their type, I hope...
	};

	return DateRange;
});
}; // end of sap/ui/mdc/model/DateRange.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.model.GenericType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare('sap.ui.mdc.model.GenericType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.SimpleType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FormatException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.base.ManagedObjectModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONPropertyBinding'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/model/GenericType",['sap/ui/model/SimpleType', 'sap/ui/model/FormatException', 'sap/ui/model/ParseException', 'sap/ui/model/base/ManagedObjectModel', 'sap/ui/model/json/JSONPropertyBinding'],
	function(SimpleType, FormatException, ParseException, ManagedObjectModel, JSONPropertyBinding) {
		"use strict";

		//TODO: Where to move this?
		//This is only needed for the generic type, therefore mix it in for the moment.
		sap.ui.model.base.ManagedObjectModelPropertyBinding.prototype.setType = function(oType, sInternalType) {
			if (oType && typeof oType._setBinding === "function") {
				oType = oType._clone();
				oType._setBinding(this);
			}
			JSONPropertyBinding.prototype.setType.apply(this, [oType, sInternalType]);
		};

		//resolver for formatter, parser, validator functions
		function _resolve(oType, vHandler) {
			if (typeof vHandler === "function") {
				return {
					object: window,
					fnFunc: vHandler
				};
			} else if (typeof vHandler === "string") {
				if (jQuery.sap.startsWith(vHandler, ".")) {
					if (oType.oBinding) {
						var oObject = oType.oBinding.getModel().getRootObject();
						return {
							object: oObject,
							fnFunc: oObject[vHandler.slice(1)]
						};
					}
				} else {
					return {
						object: window,
						fnFunc: jQuery.sap.getObject(vHandler)
					};
				}
			}
			return null;
		}

		/**
		 * Constructor for a generic type.
		 *
		 * @class
		 * Provides a generic type which allows to customize the format and parse functions.
		 *
		 * Within a managed object model properties of a control can bind to properties of another control. Here the generic type helps to format
		 * and parse the property values from and to control properties.
		 *
		 * @extends sap.ui.model.SimpleType
		 *
		 * @author SAP SE
		 * @version 1.50.6
		 *
		 * @constructor
		 *
		 * @private
		 *
		 * @param {object} [oFormatOptions] formatting options containing a string or function reference for parser, formatter, validator
		 *        {string|function} [oFormatOptions.formatter] formatting function called if a value is read from a bound property.
		 *            A string value will be interpreted as a function name. If the string starts with a dot, the
		 *            function is looked up at the root object of the managed object model, otherwise on the window object.
		 *        {string|function} [oFormatOptions.parser] parser function called if a value is written to a bound property. Can be a string,
		 *            A string value will be interpreted as a function name. If the string starts with a dot, the
		 *            function is looked up at the root object of the managed object model, otherwise on the window object.
		 *        {string|function} [oFormatOptions.validator] validator function called before a value is written to a bound property.
		 *            A string value will be interpreted as a function name. If the string starts with a dot, the
		 *            function is looked up at the root object of the managed object model, otherwise on the window object.
		 *
		 * @param {object} [oConstraints] value constraints.
		 * @alias sap.ui.mdc.model.GenericType
		 */
		var GenericType = SimpleType.extend("sap.ui.mdc.model.GenericType", /** @lends sap.ui.mdc.model.GenericType.prototype */ {

			constructor : function (oFormatOptions, oConstraints) {
				SimpleType.apply(this, arguments);
				this.sName = "Generic";
				this.oBinding = null;
			}

		});

		/**
		 * Formats the value to a given primitive target type
		 * @param {vValue} the value to format
		 * @param {string} the target type such as "string", "int", "boolean", "float" that is used for formatting
		 * @returns {any} the formatted or raw value if no formatter was set with the format options
		 */
		GenericType.prototype.formatValue = function(vValue, sTargetType) {
			var oHandler = _resolve(this, this.oFormatOptions.formatter);
			if (oHandler) {
				return oHandler.fnFunc.call(oHandler.object, vValue, sTargetType, this.getPrimitiveType(sTargetType), this.oBinding);
			}
			return vValue;
		};

		/**
		 * Parses the value from a given primitive source type
		 * @param {vValue} the value to parse
		 * @param {string} the source type such as "string", "int", "boolean", "float" that is used for formatting
		 * @returns {any} the parsed or raw value if no parser was set with the format options
		 */
		GenericType.prototype.parseValue = function(vValue, sSourceType) {
			var oHandler = _resolve(this, this.oFormatOptions.parser);
			if (oHandler) {
				return oHandler.fnFunc.call(oHandler.object, vValue, sSourceType, this.getPrimitiveType(sSourceType), this.oBinding);
			}
			return vValue;
		};

		/**
		 * Validates the value
		 * @param {vValue} the value to validate
		 * @returns {any} the validated value or undefined
		 */
		GenericType.prototype.validateValue = function(vValue) {
			var oHandler = _resolve(this, this.oFormatOptions.validator);
			if (oHandler) {
				return oHandler.fnFunc.call(oHandler.object, vValue);
			}
			return undefined;
		};

		/**
		 * @private
		 */
		GenericType.prototype._setBinding = function(oBinding) {
			this.oBinding = oBinding;
		};

		/**
		 * @private
		 */
		GenericType.prototype._clone = function() {
			return new GenericType(this.oFormatOptions, this.oConstaints);
		};

		return GenericType;
	});

}; // end of sap/ui/mdc/model/GenericType.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.ConditionModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.ConditionModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/ConditionModel",[
		'jquery.sap.global', 'sap/ui/model/json/JSONModel', 'sap/ui/model/Filter', 'sap/ui/mdc/FilterOperatorConfig'
	],
	function(jQuery, JSONModel, Filter, FilterOperatorConfig) {
		"use strict";

		/**
		 *
		 * @class JSON based Model for sap.ui.mdc.FilterField controls. The model stores the entered values as condition objects and applies the conditions to the ListBinding of e.g. a table.
		 * @extends sap.ui.model.json.JSONModel
		 *
		 * @author SAP SE
		 * @version 1.50.6
		 * @since 1.48.0
		 * @alias sap.ui.mdc.ConditionModel
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var ConditionModel = JSONModel.extend("sap.ui.mdc.ConditionModel", {
			constructor: function() {
				JSONModel.apply(this, arguments);
				this.setSizeLimit(1000);

				this._oMessageBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc");
				sap.ui.getCore().attachLocalizationChanged(function() {
					this._oMessageBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc");
				}.bind(this));

				if (!this.getProperty("/conditions")) { // might already be initialized in the constructor
					this.setProperty("/conditions", []);
				}
				if (!this.getProperty("/fieldPath")) {
					this.setProperty("/fieldPath", {});
				}
			}
		});

		ConditionModel._mModels = {};

		ConditionModel.prototype.destroy = function() {
			JSONModel.prototype.destroy.apply(this, arguments);

			delete this._mFieldPath;
			delete this._oMessageBundle;
		};

		ConditionModel.prototype.clone = function(sFieldPath) {
			var oCM = new ConditionModel();
			var aConditions = this.getConditions(sFieldPath);
			var aClonedConditions = [];
			aConditions.forEach(function(e, i) {
				aClonedConditions.push(jQuery.extend(true, {}, e));
			});
			oCM.setConditions(aClonedConditions);
			return oCM;
		};

		ConditionModel.prototype.merge = function(sFieldPath, oCM, sSourceFieldPath) {
			this.removeAllConditions(sFieldPath);
			var aCleanedConditions = sap.ui.mdc.ConditionModel.removeEmptyConditions(oCM.getConditions(sSourceFieldPath));
			this.setConditions(aCleanedConditions);
			this.checkUpdate(true, true);
		};

		ConditionModel.mapConditions = function(aConditions, sTargetFieldPath) {
			if (sTargetFieldPath) {
				for (var i = 0; i < aConditions.length; i++) {
					aConditions[i].fieldPath = sTargetFieldPath;
				}
			}

			return aConditions;
		};

		ConditionModel.cloneConditions = function(aConditions) {
			return jQuery.extend(true, [], aConditions);
		};

		ConditionModel.removeEmptyConditions = function(aConditions) {
			for (var i = aConditions.length - 1; i > -1; i--) {
				if (aConditions[i].isEmpty) {
					aConditions.splice(parseInt(i, 10), 1);
				}
			}
			return aConditions;
		};


		/**
		 * @param oListBinding
		 * @param [sName]
		 */
		ConditionModel.getFor = function(oListBinding, sName) { // TODO: support sName for multiple models
			var sKey = oListBinding.getModel().getId() + "--" + oListBinding.getPath() + "#" + (sName === undefined ? "" : sName);
			var oCM = ConditionModel._mModels[sKey]; // TODO

			if (!oCM) {
				oCM = new ConditionModel();
				oCM._oListBinding = oListBinding;
				ConditionModel._mModels[sKey] = oCM;
			} else if (oCM._oListBinding !== oListBinding) {
				// update the oListBinding reverence
				oCM._oListBinding = oListBinding;
			}

			return oCM;
		};

		/**
		 * @param oConditionModel
		 * @param [sName]
		 */
		ConditionModel.destroyCM = function(oConditionModel, sName) {
			var oListBinding = oConditionModel._oListBinding;
			var sKey = oListBinding.getModel().getId() + "--" + oListBinding.getPath() + "#" + (sName === undefined ? "" : sName);
			delete ConditionModel._mModels[sKey];
			oConditionModel.destroy();
		};

		ConditionModel._getAll = function(oListBinding) {
			var aOverallModels = [];
			var sKey = oListBinding.getModel().getId() + "--" + oListBinding.getPath();
			for (var model in ConditionModel._mModels) {
				if (model.indexOf(sKey) === 0) {
					var oCM = ConditionModel._mModels[model];
					aOverallModels.push(oCM);
				}
			}

			return aOverallModels;
		};

		ConditionModel._getAllKeys = function(oListBinding) {
			var aOverallModelKeys = [];
			var sKey = oListBinding.getModel().getId() + "--" + oListBinding.getPath();
			for (var model in ConditionModel._mModels) {
				if (model.indexOf(sKey) === 0) {
					aOverallModelKeys.push(model);
				}
			}

			return aOverallModelKeys;
		};

		ConditionModel.prototype.getConditions = function(sFieldPath) {
			//TODO: only works for simple flat condition model content
			var aResult = [];
			var aConditions = this.getProperty("/conditions");
			aConditions.forEach(function(oCondition) {
				if (!sFieldPath || oCondition.fieldPath === sFieldPath) {
					aResult.push(oCondition);
				}
			});
			return aResult;
		};

		ConditionModel.prototype.indexOf = function(oCondition) {
			var index = -1;
			var aConditions = this.getProperty("/conditions");
			var sCondition = JSON.stringify(oCondition);
			var sFieldPath = oCondition.fieldPath;
			aConditions.forEach(function(oCondition, i) {
				if (oCondition.fieldPath === sFieldPath) {
					if (JSON.stringify(oCondition) === sCondition) {
						index = i;
					}
				}
			});
			return index;
		};

		ConditionModel.prototype.exist = function(oCondition, sFieldPath) {
			return this.indexOf(oCondition, sFieldPath) >= 0;
		};

		ConditionModel.prototype.setConditions = function(aConditions) {
			for (var i = 0; i < aConditions.length; i++) {
				this.insertCondition(-1, aConditions[i], true);
			}
		};

		ConditionModel.prototype.addCondition = function(oCondition, bForceAdd) {
			return this.insertCondition(-1, oCondition, bForceAdd);
		};

		ConditionModel.prototype.insertCondition = function(index, oCondition, bForceAdd) {
			var sFieldPath = oCondition.fieldPath,
				aConditions;

			this._checkIsEmpty(oCondition);

			if (!bForceAdd) {
				var i = this.indexOf(oCondition);
				if (i >= 0) {
					return this.getConditions()[i];
				}
			}

			// add condition to model
			aConditions = this.getProperty("/conditions");
			if (index == -1) {
				aConditions.push(oCondition);
			} else {
				aConditions.splice(index, 0, oCondition);
			}

			this.checkUpdate(true, true);
			this._checkMaxConditions(sFieldPath);

			return oCondition;
		};

		/**
		 * creates a condition instance for the Item condition
		 *
		 * @param {string} sFieldPath the fieldPath name of the condition
		 * @param {string} sKey the operator for the condition
		 * @param {string} sDescription 
		 * @return {object} the new condition object with the given fieldPath, the operator EEQ and the sKey and sDescription as aValues. 
		 */
		ConditionModel.prototype.createItemCondition = function(sFieldPath, sKey, sDescription) {
			return this.createCondition(sFieldPath, "EEQ", [sKey, sDescription]);
		};

		/**
		 * creates a condition instance for the condition model
		 *
		 * @param {string} sFieldPath the fieldPath name of the condition
		 * @param {string} sOperator the operator for the condition
		 * @param {any[]} aValues the array of values for the condition
		 * @return {object} the new condition object with the given fieldPath, operator and values. 
		 */
		ConditionModel.prototype.createCondition = function(sFieldPath, sOperator, aValues) {
			var newCondition = { fieldPath: sFieldPath, operator: sOperator, values: aValues };
			this._checkIsEmpty(newCondition);
			return newCondition;
		};

		ConditionModel.prototype.removeCondition = function(sFieldPath, iIndex) {
			//TODO: only works for simple flat condition model content
			var aConditions = this.getProperty("/conditions");
			if (aConditions.some(function(oProp, index, aConditions) {
					if (oProp.fieldPath === sFieldPath) {
						if (iIndex === 0) {
							aConditions.splice(index, 1);
							return true;
						}
						iIndex--;
						return false;
					}
					return false;
				})) {
				this.checkUpdate(true, true);
				this._checkMaxConditions(sFieldPath);
			}
		};

		ConditionModel.prototype.removeAllConditions = function(sFieldPath) {
			var aIndices = [];
			var aConditions = this.getProperty("/conditions");
			aConditions.forEach(function(oProp, i) {
				if (!sFieldPath || oProp.fieldPath === sFieldPath) {
					aIndices.push(i);
				}
			});

			aIndices.sort();
			for (var i = aIndices.length - 1; i > -1; i--) {
				aConditions.splice(aIndices[i], 1);
			}

			this.checkUpdate(true, true);
		};

		/**
		 * Deletes conditions from the condition model based on the context
		 * @param {sap.ui.model.Context|sap.ui.model.Context[]} oContext a single context or array of contexts to delete.
		 * @private
		 */
		ConditionModel.prototype.deleteConditions = function(oContext, oBinding) {
			var sFieldPath;
			if (!oContext || !oBinding) {
				return;
			}
			//normalize oContext
			if (!jQuery.isArray(oContext)) {
				oContext = [oContext];
			}

			//access the data node for the list binding in the model as reference
			var aData = oBinding.oModel.getProperty(oBinding.getPath(), oBinding.getContext()) || [];

			if (jQuery.isArray(oContext) && aData.length > 0) {
				//collect the indices from the context of each context
				var aIndices = [],
					fn, i, n;
				if (Array.isArray(aData)) {
					for (i = 0; i < oContext.length; i++) {
						aIndices.push(aData.indexOf(oContext[i].getProperty()));
					}
					//in case of array, sort and delete reverse
					aIndices.sort();
					fn = function(iIndex) {
						sFieldPath = aData[iIndex].fieldPath;
						aData.splice(iIndex, 1); //splice for array
					};
				} else if (typeof oData === "object") {
					for (n in aData) {
						var sIndex = oContext[i].getPath();
						sIndex = sIndex.substring(oContext[i].getPath().lastIndexOf("/") + 1);
						aIndices.push(n);
					}
					fn = function(sIndex) {
						delete aData[sIndex]; //delete for map
					};
				}
				//delete reverse
				for (i = aIndices.length - 1; i > -1; i--) {
					fn(aIndices[i]);
				}
			}
			oBinding.getModel().checkUpdate(true, true);

			this._checkMaxConditions(sFieldPath);
		};

		ConditionModel.prototype._checkIsEmpty = function(aConditions) {
			var oFilterOpConfig = this.getFilterOperatorConfig();

			aConditions = aConditions || this.getConditions();
			if (!Array.isArray(aConditions)) {
				aConditions = [aConditions];
			}

			aConditions.forEach(function(oCondition) {
				var oOperator = oFilterOpConfig.getOperator(oCondition.operator);
				oCondition.isEmpty = oOperator.isEmpty(oCondition);
			});
		};

		/**
		 * This function makes a required check for the given sFieldPath (or all).
		 * It only works when the Filterfields are attached to the ConditionModel. 
		 * The function is checking that for a required FilterField at least one condition exists.
		 * 
		 * @param {string} sFieldPath
		 * @return {boolean} true, if for a sFieldPath the FilterField with required=true no condition exists.
		 *
		 * @private
		 */
		ConditionModel.prototype._checkRequiredConditions = function(bShowMessage, sFieldPath) {
			var aFields = sFieldPath ? [sFieldPath] : Object.keys(this._mFieldPath || {});
			var bError = false;
			var sMsg = this._oMessageBundle.getText("conditionmodel.REQUIRED_CONDITION_MISSING");
			aFields.forEach(function(sFieldPath) {
				if (this._mFieldPath && this._mFieldPath[sFieldPath]) {
					var oFilterField = this._mFieldPath[sFieldPath];
					if (oFilterField.getRequired() && this.getConditions(sFieldPath).length <= 0) {
						if (bShowMessage) {
							this.addFieldPathMessage(sFieldPath, sMsg);
						}
						bError = true;
					} else {
						this.removeFieldPathMessage(sFieldPath, sMsg);
					}
				}
			}, this);

			return !bError;
		};

		/**
		 * This function makes a maxConditions check for the given sFieldPath (or all).
		 * It only works when the Filterfields are attached to the ConditionModel. 
		 * The function is checking that for a FilterField the number of conditions is <=maxCondition.
		 * 
		 * @param {string} sFieldPath
		 * @return {boolean} true, if for a sFieldPath the number of conditions > the FilterField.getMaxConditions.
		 *
		 * @private
		 */
		ConditionModel.prototype._checkMaxConditions = function(sFieldPath) {
			var aFields = sFieldPath ? [sFieldPath] : Object.keys(this._mFieldPath || {});
			var bError = false;
			aFields.forEach(function(sFieldPath) {
				if (this._mFieldPath && this._mFieldPath[sFieldPath]) {
					var oFilterField = this._mFieldPath[sFieldPath];
					var sMsg = this._oMessageBundle.getText("conditionmodel.TOO_MANY_CONDITIONS");

					if (oFilterField.getMaxConditions() >= 0 && this.getConditions(sFieldPath).length > oFilterField.getMaxConditions()) {
						this.addFieldPathMessage(sFieldPath, sMsg);
						bError = true;
					} else {
						this.removeFieldPathMessage(sFieldPath, sMsg);
					}
				}
			}, this);
			return !bError;
		};

		ConditionModel.prototype.addFilterField = function(oFilterField) {
			var sFieldPath = oFilterField.getFieldPath();
			if (!this._mFieldPath) {
				this._mFieldPath = {};
			}
			this._mFieldPath[sFieldPath] = oFilterField;

			var oFieldPath = this.getProperty("/fieldPath");
			if (!oFieldPath[sFieldPath]) {
				oFieldPath[sFieldPath] = {
					valueState: "None",
					valueStateText: "",
					messages: []
				};
			}
		};

		ConditionModel.prototype.removeFilterField = function(oFilterField) {
			var sFieldPath = oFilterField.getFieldPath();
			if (this._mFieldPath && this._mFieldPath[sFieldPath]) {
				delete this._mFieldPath[sFieldPath];
			}

			var oFieldPath = this.getProperty("/fieldPath");
			if (oFieldPath[sFieldPath]) {
				delete oFieldPath[sFieldPath];
			}
		};

		ConditionModel.prototype._getFieldPathProperty = function(sFieldPath) {
			return this.getProperty("/fieldPath/")[sFieldPath];
		};

		ConditionModel.prototype.addFieldPathMessage = function(sFieldPath, sMsg) {
			var oFieldPath = this._getFieldPathProperty(sFieldPath);

			if (!oFieldPath.messages.some(function(sItem, i) {
					if (sItem === sMsg) {
						return true;
					}
					return false;
				})) {
				oFieldPath.messages.push(sMsg);
			}

			this._updateValueState(sFieldPath);
		};

		ConditionModel.prototype.setUIMessage = function(sFieldPath, sMsg) {
			var oFieldPath = this._getFieldPathProperty(sFieldPath);

			oFieldPath.uiMessage = sMsg;

			this._updateValueState(sFieldPath);
		};


		ConditionModel.prototype.removeFieldPathMessage = function(sFieldPath, sMsg) {
			var iIndex;
			var oFieldPath = this._getFieldPathProperty(sFieldPath);
			if (oFieldPath.messages.some(function(sItem, i) {
					if (sItem === sMsg) {
						iIndex = i;
						return true;
					}
					return false;
				})) {
				oFieldPath.messages.splice(iIndex, 1);
			}

			this._updateValueState(sFieldPath);
		};

		ConditionModel.prototype.removeUIMessage = function(sFieldPath) {
			var oFieldPath = this._getFieldPathProperty(sFieldPath);

			delete oFieldPath.uiMessage;

			this._updateValueState(sFieldPath);
		};


		ConditionModel.prototype._updateValueState = function(sFieldPath) {
			var bUpdate = false,
				oFieldPath = this._getFieldPathProperty(sFieldPath),
				sValueState = "None",
				sValueStateText = "";

			if (oFieldPath.uiMessage) {
				sValueState = "Error";
				sValueStateText = oFieldPath.uiMessage;
			} else if (oFieldPath.messages.length > 0) {
				sValueState = "Error";
				sValueStateText = oFieldPath.messages[oFieldPath.messages.length - 1];
			}

			if (oFieldPath.valueState !== sValueState) {
				oFieldPath.valueState = sValueState;
				bUpdate = true;
			}

			if (oFieldPath.valueStateText !== sValueStateText) {
				oFieldPath.valueStateText = sValueStateText;
				bUpdate = true;
			}

			if (bUpdate) {
				this.checkUpdate(true, true);
			}
		};

		ConditionModel.prototype.isValid = function(bValidate, sFieldPath) {
			var aFields = sFieldPath ? [sFieldPath] : Object.keys(this._mFieldPath || {});
			var bValid = this._checkRequiredConditions(bValidate);
			aFields.forEach(function(sFieldPath) {
				var oFieldPath = this._getFieldPathProperty(sFieldPath);
				bValid = bValid && oFieldPath.valueState == "None";
			}, this);

			return bValid;
		};

		ConditionModel.prototype.applyFilters = function(bValidate) {
			if (this.isValid(bValidate)) {
				var oFilter = this.getAllFilters();
				if (oFilter) {
					this._oListBinding.filter(oFilter);
				} else { // no filters
					this._oListBinding.filter();
				}
				return true;
			}
			return false;
		};

		ConditionModel.prototype.getAllFilters = function() {
			var aOverallModels = ConditionModel._getAll(this._oListBinding);
			var aOverallFilters = [];
			aOverallModels.forEach(function(oCM) {
				var oFilter = oCM.getFilters();
				if (oFilter) {
					aOverallFilters.push(oFilter);
				}
			});

			var oFilter = null;
			if (aOverallFilters.length === 1) {
				oFilter = aOverallFilters[0]; // could omit this and have an ORed array with only one filter, but it's nice this way.
			} else if (aOverallFilters.length > 1) {
				oFilter = new Filter({ filters: aOverallFilters, and: true });
			}

			return oFilter;
		};


		/**
		 *
		 * @public
		 */
		ConditionModel.prototype.getFilterOperatorConfig = function() {
			var oModel = this._oListBinding && this._oListBinding.getModel();
			return FilterOperatorConfig.getFor(oModel);
		};


		ConditionModel.prototype.getFilters = function(sFieldPath) {
			var i, aLocalFilters, aOverallFilters = [],
				aConditions,
				oToAnyFilterParam, aSections, sNavPath, sPropertyPath;

			var oFilterOpConfig = this.getFilterOperatorConfig();

			var oFilterItemNameMap = {};
			if (sFieldPath === undefined) {
				aConditions = this.getConditions();
			} else
			if (typeof sFieldPath === "string") {
				aConditions = this.getConditions(sFieldPath);
			} else {
				aConditions = sFieldPath || [];
			}
			for (i = 0; i < aConditions.length; i++) {
				oFilterItemNameMap[aConditions[i].fieldPath] = true;
			}

			// OR-combine filters for each property
			for (var attrName in oFilterItemNameMap) {
				aLocalFilters = [];
				oToAnyFilterParam = null;

				for (i = 0; i < aConditions.length; i++) {
					if (aConditions[i].fieldPath === attrName) {
						var oOperator = oFilterOpConfig.getOperator(aConditions[i].operator);
						var oFilter = oOperator.getModelFilter(aConditions[i]);

						if (oFilter.sPath.indexOf('*/') > -1) {
							aSections = oFilter.sPath.split('*/');
							if (aSections.length === 2) {
								sNavPath = aSections[0];
								sPropertyPath = aSections[1];
								oFilter.sPath = 'L1/' + sPropertyPath;

								if (!oToAnyFilterParam) {
									oToAnyFilterParam = {
										path: sNavPath,
										operator: 'Any',
										variable: 'L1'
									};
								}
								aLocalFilters.push(oFilter);
							} else {
								throw new Error("Not Implemented");
							}
						} else {
							aLocalFilters.push(oFilter);
						}
					}
				}

				if (oToAnyFilterParam) {
					if (aLocalFilters.length === 1) {
						oToAnyFilterParam.condition = aLocalFilters[0];
					} else if (aLocalFilters.length > 1) {
						oToAnyFilterParam.condition = new Filter({ filters: aLocalFilters, and: false });
					}
					aLocalFilters = [new Filter(oToAnyFilterParam)];
				}

				if (aLocalFilters.length === 1) {
					aOverallFilters.push(aLocalFilters[0]); // could omit this and have an OR-ed array with only one filter, but it's nice this way.
				} else if (aLocalFilters.length > 1) {
					aOverallFilters.push(new Filter({ filters: aLocalFilters, and: false }));
				}
			}

			// AND-combine filters for different properties and apply filters
			if (aOverallFilters.length === 1) {
				return aOverallFilters[0]; // could omit this and have an ORed array with only one filter, but it's nice this way.
			} else if (aOverallFilters.length > 1) {
				return new Filter({ filters: aOverallFilters, and: true });
			} else { // no filters
				return null;
			}
		};

		ConditionModel.prototype.serialize = function() {
			var aConditions = jQuery.extend(true, [], this.getData().conditions);
			aConditions.forEach(function(oCondition) {
				delete oCondition.isEmpty;
			}, this);
			return '{"conditions":' + JSON.stringify(aConditions) + "}";
		};

		ConditionModel.prototype.serializeMeta = function() {
			var aFields = Object.keys(this._mFieldPath || {});
			var r = "";
			aFields.forEach(function(sFieldPath) {
				if (this.getData().fieldPath[sFieldPath].valueState !== "None") {
					r += JSON.stringify(this.getData().fieldPath[sFieldPath]);
				}
			}, this);

			return '{"fieldPath":' + r + "}";
		};

		ConditionModel.prototype.parse = function(sObjects) {
			var dateTimeReviver = function(key, value) {
				var a;
				if (!isNaN(parseInt(key, 10)) && (typeof value === 'string')) {
					a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}).(\d{3})Z$/.exec(value);
					if (a) {
						return new Date(value);
					}
				}
				return value;
			};

			var mResult = this.getData();
			mResult.conditions = JSON.parse(sObjects, dateTimeReviver).conditions;
			this.setData(mResult);
		};

		ConditionModel.serialize = function(oListBinding) {
			var aOverallModelKeys = ConditionModel._getAllKeys(oListBinding);
			var sResult = "";

			aOverallModelKeys.forEach(function(oCMKey) {
				var oCM = ConditionModel._mModels[oCMKey];
				if (oCM.getData().conditions && oCM.getData().conditions.length > 0) {
					sResult += ">>>" + oCMKey + "<<<";
					sResult += oCM.serialize();
				}
			});

			return sResult;
		};

		ConditionModel.serializeMeta = function(oListBinding) {
			var aOverallModelKeys = ConditionModel._getAllKeys(oListBinding);
			var sResult = "";

			aOverallModelKeys.forEach(function(oCMKey) {
				var oCM = ConditionModel._mModels[oCMKey];
				sResult += oCM.serializeMeta();
			});

			return sResult;
		};

		ConditionModel.parse = function(sObjects) {
			var aConditions = sObjects.split(">>>");
			aConditions.forEach(function(sCondition) {
				var aParts = sCondition.split("<<<");
				if (aParts.length > 1) {
					if (ConditionModel._mModels[aParts[0]]) {
						ConditionModel._mModels[aParts[0]].parse(aParts[1]);
					} else {
						var oCM = new ConditionModel(); //TODO oListBinding missing
						oCM.parse(aParts[1]);
						ConditionModel._mModels[aParts[0]] = oCM;
					}
				}
			});
		};

		return ConditionModel;
	}, /* bExport= */ true);
}; // end of sap/ui/mdc/ConditionModel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.CustomFieldHelp') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.CustomFieldHelp'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/CustomFieldHelp",[
	'sap/ui/mdc/experimental/FieldHelpBase'
], function(FieldHelpBase) {
	"use strict";

	/**
	 * Constructor for a new CustomFieldHelp.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A field help used in the <code>FieldFelp</code> aggregation in <code>Field</code> controls that allows to add custom content.
	 * @extends sap.ui.core.Element
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.50.0
	 * @alias sap.ui.mdc.experimental.CustomFieldHelp
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var CustomFieldHelp = FieldHelpBase.extend("sap.ui.mdc.experimental.CustomFieldHelp", /** @lends sap.ui.mdc.experimental.CustomFieldHelp.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				},
			aggregations: {
				/**
				 * content of the Field help
				 */
				content: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			defaultAggregation: "content",
			events: {
				/**
				 * This event is fired before the field help opens
				 */
				beforeOpen: {
					parameters: {

						/**
						 * The <code>value</code> of the field.
						 */
						value: { type: "any" }
					}
				}
			}
		}
	});

	CustomFieldHelp.prototype._createPopover = function() {

		var oPopover = FieldHelpBase.prototype._createPopover.apply(this, arguments);

		// use FieldHelps content in Popover -> overwrite hook
		oPopover._getAllContent = function(){
			var oFieldHelp = this.getParent();
			if (oFieldHelp) {
				var aContent = [];
				aContent.push(oFieldHelp.getContent());
				return aContent;
			} else {
				return this.getContent();
			}
		};

		return oPopover;

	};

	/**
	 * Close the fieldHelp and fires the <code>select</code> event of the field help
	 *
	 * @param {string} sValue selected value
	 * @param {string} sAdditionalValue selected additional value
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	CustomFieldHelp.prototype.fireSelectEvent = function(sValue, sAdditionalValue) {

		this.close();
		this.fireSelect({value: sValue, additionalValue: sAdditionalValue});

	};

	CustomFieldHelp.prototype.open = function() {

		var oField = this.getParent();
		var sValue;

		if (oField) {
			sValue = oField.getValue();
		}

		this.fireBeforeOpen({value: sValue});
		FieldHelpBase.prototype.open.apply(this, arguments);

	};

	return CustomFieldHelp;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/CustomFieldHelp.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.DataObject') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides class sap.ui.base.EventProvider
jQuery.sap.declare('sap.ui.mdc.experimental.DataObject'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/DataObject",['jquery.sap.global', 'sap/ui/base/EventProvider', 'sap/ui/mdc/experimental/DataObjectMetadata'],
	function(jQuery, EventProvider, DataObjectMetadata) {
	"use strict";

	/**
	 * Base Class for Data Objects that represent defined data in the view model of a Provider.
	 * The Data Object defines properties only and creates access to those via Object set and get functions in the corresponding
	 * class DataObjectMetadata.
	 *
	 * Instances of DataObjects are mainly used within Providers and act as the Metadata description of the providers model.
	 * As they appear to the Provider as normal json objects, model functionality can stay mainly untouched.
	 *
	 * Data Objects are capable to define various layers. Predefined layer "base" is used for the initial default values.
	 * For every property multiple values can be stored. To use layers the layer needs to be added using the addLayer method.
	 * Using setProperty method a property can be set either for the currently active layer or a specified layer by its name.
	 *
	 * With the hideLayer and showLayer methods one can activate and deactivate the layers which will lead to different values to be returned.
	 * This feature can be used if the property values of a DataObject where added by different sources like ODataMetadata, settings of an application,
	 * settings of a key user and even special user settings.
	 *
	 * @see DataObjectMetadata.
	 *
	 */
	var DataObject = EventProvider.extend("sap.ui.mdc.experimental.DataObject", /* @lends sap.ui.base.EventProvider */ {

		constructor : function(mSettings, oProvider) {
			EventProvider.call(this);
			this._aLayers = [];
			this._aLayerImpl = [];
			this._aLayerContext = [];
			this._aInactiveLayers = [];
			this._sActiveLayer = "";
			this._mLayeredProperties = {};
			this._mProperties = null;
			this._mDefaultProperties = {};
			this.addLayer("base");
			this.applySettings(mSettings);
		},
		metadata : {
			properties : {
				/**
				 * The name of the data object. Normally a technical unique name.
				 */
				name : {
					type: "string",
					mandatory: true,
					unique: true,
					defaultValue : ""
				},
				/**
				 * The parent object of this DataObject, normally a Provider
				 */
				parent: {
					type: "any",
					defaultValue : {}
				},
				/**
				 * Special extension property allows access to the Adapter of the provider.
				 * There is no further type checking done in this case.
				 */
				extensions: {
					type: "any",
					defaultValue : {}
				}
			},
			events: {
				change:{}
			}
		}

	}, DataObjectMetadata);

	/**
	 * Returns the Adapter for this Data Object. The adapter is used to to ask for a value of a property. Normally the adapter needs to implement
	 * a method with the name of the property.
	 *
	 * @returns
	 */
	DataObject.prototype.getAdapter = function() {
		return this._oImpl;
	};

	/**
	 * Hides a layer with the given name if it exists. The "base" layer cannot the hidden.
	 * @param sName
	 */
	DataObject.prototype.hideLayer = function(sName) {
		var i = this._aLayers.indexOf(sName);
		if (i > 0) {
			this._aInactiveLayers.push(i);
		} else if (i == 0) {
			jQuery.sap.log.debug("Layer 'base' cannot be hidden");
		}
	};

	/**
	 * Shows a layer with given name if it exists. The "base" layer is always show.
	 * @param sName
	 */
	DataObject.prototype.showLayer = function(sName) {
		var i = this._aLayers.indexOf(sName);
		if (i > 0) {
			this._aInactiveLayers.splice(this._aInactiveLayers.indexOf(i));
		} else if (i == 0) {
			jQuery.sap.log.debug("Layer 'base' is always shown");
		}
	};

	/**
	 * Sets or adds a layer and makes it the active layer.
	 * All further property setters will write their changes into that layer.
	 *
	 * @param sName
	 * @param oImpl
	 * @param oContext
	 */
	DataObject.prototype.setLayer = function(sName, oImpl, oContext) {
		if (!this._mLayeredProperties[sName]) {
			this.addLayer(sName, oImpl, oContext);
		}
		this._sActiveLayer = sName;
	};

	/**
	 * Adds a layer and makes it the default layer
	 * @param sName
	 * @param oImpl
	 * @param oContext
	 */
	DataObject.prototype.addLayer = function(sName, oImpl, oContext) {
		if (this._aLayers.indexOf(sName) > -1 ) {
			jQuery.sap.log.debug("Layer with " + sName + " already exists");
			return;
		}
		this._aLayers.push(sName);
		this._aLayerImpl.push(oImpl);
		this._aLayerContext.push(oContext);

		this._mLayeredProperties[sName] = {};

		this._sActiveLayer = sName;
		this._mProperties = this._mLayeredProperties[this._sActiveLayer];
	};

	/**
	 * Checks whether a value is valid for a given property
	 * TODO: Currently this is always true.
	 * @param oProperty
	 * @param vValue
	 * @returns {Boolean}
	 */
	DataObject.prototype.isValid = function(oProperty, vValue) {
		return true;
	};

	/**
	 * Sets a property to the active or the active layer if it is not given.
	 * If oProperty is of type string it is assumed that the layer is a special "api" layer.
	 * Normally DataOject are not called directly via a setProperty instead each property has a
	 * Object property setter defined that is used normally.
	 * @param oProperty
	 * @param vValue
	 * @param sLayer
	 */
	DataObject.prototype.setProperty = function(oProperty, vValue, sLayer) {
		if (typeof oProperty === "string") {
			this.addLayer("api");
			oProperty = this.getMetadata().getProperty(oProperty);
		}
		if (this.isValid(oProperty, vValue)) {
			if (sLayer) {
				var i = this._aLayers.indexOf(sLayer);
				if (i === -1) {
					return;
				}
				this._mLayeredProperties[this._aLayers[i]][oProperty.name] = vValue;
			} else {
				this._mProperties[oProperty.name] = vValue;
			}
		}
	};
	/**
	 * Returns a property for a specific layer. If restrict layer is set to true lower layers will not be taken into account.
	 *
	 * @param oProperty
	 * @param sLayer
	 * @param bRestrictLayer
	 * @returns
	 */
	DataObject.prototype.getLayeredProperty = function(oProperty, sLayer, bRestrictLayer) {
		var vValue, i;
		if (typeof oProperty === "string") {
			oProperty = this.getMetadata().getProperty(oProperty);
		}
		if (!sLayer) {
			sLayer = this._sActiveLayer;
		}
		i = this._aLayers.indexOf(sLayer) || this._aLayers.length - 1;
		while (vValue === undefined && i > -1) {
			if (this._aInactiveLayers.indexOf(i) > -1) {
				i--;
				continue;
			}
			vValue = this._mLayeredProperties[this._aLayers[i]][oProperty.name];
			this._iActiveContextLayer = i;
			if (vValue === undefined) {
				var oImpl = this._aLayerImpl[i];
				if (oImpl && oImpl[oProperty.name]) {
					vValue = oImpl[oProperty.name].apply(this, [vValue]);
				}
			}
			if (vValue === undefined && i == 0) {
				if (typeof oProperty.defaultValue === "function") {
					vValue =  oProperty.defaultValue.apply(this);
				} else {
					this._mLayeredProperties[this._aLayers[i]][oProperty.name] = vValue = JSON.parse(JSON.stringify(oProperty.defaultValue));
				}
			}
			i--;
			if (bRestrictLayer) {
				break;
			}
		}
		return vValue;
	};
	/**
	 * Returns the value of a property
	 * @param oProperty
	 * @returns
	 */
	DataObject.prototype.getProperty = function(oProperty) {
		return this.getLayeredProperty(oProperty);
	};

	/**
	 * Returns the context of the currently active layer.
	 * @returns
	 */
	DataObject.prototype.getContext = function() {
		return this._aLayerContext[this._iActiveContextLayer];
	};

	/**
	 * Returns all properties of the DataObject.
	 * @returns {___anonymous7556_7557}
	 */
	DataObject.prototype.getProperties = function() {
		var mProperties = this._mProperties;
		var mResult = {};
		for (var n in mProperties) {
			mResult[n] = mProperties[n];
			if (typeof mProperties[n] === "object" && mProperties[n].hasOwnProperty("length")) {
				mResult[n] = [];
				for (var i = 0; i < mProperties[n].length; i++) {
					if (mProperties[n][i] instanceof DataObject) {
						mResult[n][i] = mProperties[n][i].getProperties();
					}
				}
			}
		}
		return mResult;
	};
	/**
	 * Applies the properties defined in mSettings to the DataObject.
	 * @param mSettings
	 * @returns {DataObject}
	 */
	DataObject.prototype.applySettings = function(mSettings) {
		// PERFOPT: don't retrieve (expensive) JSONKeys if no settings are given
		if ( !mSettings || jQuery.isEmptyObject(mSettings) ) {
			return this;
		}

		var oMetadata = this.getMetadata(),
			mValidKeys = oMetadata.getJSONKeys(), // UID names required, they're part of the documented contract of applySettings
			sKey, oValue, oKeyInfo;

		// process all settings
		// process settings
		for (sKey in mSettings) {
			oValue = mSettings[sKey];
			// get info object for the key
			if ( (oKeyInfo = mValidKeys[sKey]) !== undefined ) {
				switch (oKeyInfo._iKind) {
				case 0: // PROPERTY
					this[oKeyInfo.name] = oValue;
					break;
				case 5: // EVENT
					if ( typeof oValue == "function" ) {
						this[oKeyInfo._sMutator](oValue);
					} else {
						this[oKeyInfo._sMutator](oValue[0], oValue[1], oValue[2]);
					}
					break;
				case -1: // SPECIAL_SETTING
					// No assert
				default:
					break;
				}
			} else {
				// there must be no unknown settings
				jQuery.sap.assert(false, "DataObject.apply: encountered unknown setting '" + sKey + "' for class '" + oMetadata.getName() + "' (value:'" + oValue + "')");
			}
		}

		return this;
	};

	/**
	 * Returns a JSON representation that can be used to store the data of this DataObject in the current stage.
	 * A layer name can be given to create the json based on the given layer, ignoring upper layers.
	 * @param sLayer
	 * @returns {___anonymous9164_9165}
	 */
	DataObject.prototype.toJSON = function(sLayer) {
		var sCurrentLayer = this._sActiveLayer,
			mProperties = this.getMetadata().getAllProperties(),
			oResult = {};
		if (sLayer) {
			this._sActiveLayer = sLayer;
		}
		for (var n in mProperties) {
			if (n === "parent") {
				continue;
			}
			oResult[n] = this[n];
		}
		this._sActiveLayer = sCurrentLayer;
		return oResult;
	};

	return DataObject;
});

}; // end of sap/ui/mdc/experimental/DataObject.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nColumnItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nColumnItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/P13nColumnItem",[
	'sap/ui/mdc/experimental/P13nItem'
], function(P13nItem) {
	"use strict";

	/**
	 * Constructor for a new P13nColumnItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Type for <code>items</code> aggregation in <code>P13nColumnPanel</code> control.
	 * @extends sap.ui.mdc.experimental.P13nItem
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.46.0
	 * @alias sap.ui.mdc.experimental.P13nColumnItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nColumnItem = P13nItem.extend("sap.ui.mdc.experimental.P13nColumnItem", /** @lends sap.ui.mdc.experimental.P13nColumnItem.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Defines visibility of the item.
				 */
				selected: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Defines position of the item.
				 */
				position: {
					type: "int"
				}
			}
		}
	});

	return P13nColumnItem;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nColumnItem.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nFilterItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nFilterItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/P13nFilterItem",[
	'sap/ui/mdc/experimental/P13nItem'
], function(P13nItem) {
	"use strict";

	/**
	 * Constructor for a new P13nFilterItem.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Type for <code>items</code> aggregation in <code>P13nColumnPanel</code> control.
	 * @extends sap.ui.mdc.experimental.P13nItem
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.46.0
	 * @alias sap.ui.mdc.experimental.P13nFilterItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nFilterItem = P13nItem.extend("sap.ui.mdc.experimental.P13nFilterItem", /** @lends sap.ui.mdc.experimental.P13nFilterItem.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Defines visibility of the item.
				 */
				selected: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Defines the position of the columns.
				 */
				position: {
					type: "int"
				},
				/**
				 * Defines if the item is mandatory
				 */
				required: {
					type: "boolean"
				},
				/**
				 * Defines the control.
				 */
				control: {
					type: "sap.ui.core.Control"
				}
			}
		}
	});

	return P13nFilterItem;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nFilterItem.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.XMLComposite'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ChangeReason'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nPanel",[
	'jquery.sap.global', 'sap/m/library', 'sap/ui/core/XMLComposite', './P13nPanelFormatter', 'sap/ui/model/ChangeReason'
], function(jQuery, MLibrary, XMLComposite, P13nPanelFormatter, ChangeReason) {
	"use strict";

	/**
	 * Constructor for a new P13nPanel.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nPanel control is used to define selection settings like the visibility or the order of items.
	 * @extends sap.ui.code.XMLComposite
	 * @author SAP SE
	 * @version 1.50.6
	 * @constructor
	 * @abstract
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nPanel = XMLComposite.extend("sap.ui.mdc.experimental.P13nPanel", /** @lends sap.ui.mdc.experimental.P13nPanel.prototype */
	{
		formatter: P13nPanelFormatter,

		metadata: {
			"abstract": true,
			library: "sap.ui.mdc",
			defaultAggregation: "items",
			properties: {
				internalModelToBeUpdated: "boolean",
				defaultValue: true,
				visibility: "hidden"
			},
			aggregations: {
				/**
				 * Defines personalization items.
				 */
				items: {
					type: "sap.ui.mdc.experimental.P13nItem",
					multiple: true,
					singularName: "item"
				}
			}
		}
	});

	// ----------------------- Overwrite Method -----------------

	P13nPanel.prototype.init = function() {
		// Create a resource bundle for language specific texts
		this.setModel(new sap.ui.model.resource.ResourceModel({
			bundleUrl: sap.ui.getCore().getLibraryResourceBundle("sap.m").oUrlInfo.url
		// bundleName: 'sap.m'
		}), "i18n");

		// this._getManagedObjectModel().bindList("/items", null, [], []).attachChange(this._updateCounts, this);
	};

	P13nPanel.prototype.addItem = function(oItem) {
		this.setInternalModelToBeUpdated(true);
		this.addAggregation("items", oItem);
		return this;
	};

	P13nPanel.prototype.insertItem = function(oItem, iIndex) {
		this.setInternalModelToBeUpdated(true);
		this.insertAggregation("items", oItem, iIndex);
		return this;
	};

	P13nPanel.prototype.updateItems = function(sReason) {
		this.updateAggregation("items");
		if (sReason === ChangeReason.Change) {
			this.setInternalModelToBeUpdated(true);
		}
	};

	P13nPanel.prototype.removeItem = function(oItem) {
		this.setInternalModelToBeUpdated(true);
		return this.removeAggregation("items", oItem);
	};

	P13nPanel.prototype.removeAllItems = function() {
		this.setInternalModelToBeUpdated(true);
		return this.removeAllAggregation("items");
	};

	P13nPanel.prototype.destroyItems = function() {
		this.setInternalModelToBeUpdated(true);
		this.destroyAggregation("items");
		return this;
	};

	// ----------------------- Private Methods -----------------------------------------
	/**
	 * @private
	 */
	P13nPanel.prototype.onSearchFieldLiveChange = function(oEvent) {
		this._filterTableItems();
	};

	/**
	 * @private
	 */
	P13nPanel.prototype._filterTableItems = function() {
		var aFilters = [];
		var sSearchText = this._getSearchText();
		if (sSearchText) {
			aFilters.push(new sap.ui.model.Filter([
				new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("tooltip", sap.ui.model.FilterOperator.Contains, sSearchText)
			], false));
		}
		this._getTable().getBinding("items").filter(aFilters);
	};

	P13nPanel.prototype._getTable = function() {
		return sap.ui.getCore().byId(this.getId() + "--IDTable") || null;
	};

	P13nPanel.prototype._getSearchField = function() {
		return sap.ui.getCore().byId(this.getId() + "--IDSearchField") || null;
	};

	P13nPanel.prototype._getSearchText = function() {
		var oSearchField = this._getSearchField();
		return oSearchField ? oSearchField.getValue() : "";
	};

	P13nPanel.prototype._isFilteredBySearchText = function() {
		return !!this._getSearchText().length;
	};

	return P13nPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSelectionPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSelectionPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nSelectionPanel",[
	'jquery.sap.global', './P13nPanel'
], function(jQuery, P13nPanel) {
	"use strict";

	/**
	 * Constructor for a new P13nSelectionPanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nSelectionPanel control is used to define selection settings like the visibility or the order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nSelectionPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSelectionPanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nSelectionPanel", /** @lends sap.ui.mdc.experimental.P13nSelectionPanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc"
		}
	});

	return P13nSelectionPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSelectionPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nSortPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nSortPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nSortPanel",[
	'jquery.sap.global', 'sap/m/library', './P13nPanel', './P13nInternalModel'
], function(jQuery, MLibrary, P13nPanel, P13nInternalModel) {
	"use strict";

	/**
	 * Constructor for a new P13nSortPanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nSortPanel control is used to define sort order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nSortPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nSortPanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nSortPanel", /** @lends sap.ui.mdc.experimental.P13nSortPanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Due to the re-binding during execution of _filterTableItems() the sap.m.Table re-create all items.
				 * So we have to store the 'columnKey' in order to mark the item after re-binding.
				 */
				columnKeyOfMarkedItem: {
					type: "string",
					defaultValue: undefined,
					visibility: "hidden"

				},
				/**
				 * Internal model.
				 */
				internalModel: {
					type: "sap.ui.mdc.experimental.P13nInternalModel",
					visibility: "hidden"
				}
			}
		}
	});

	// ----------------------- Overwrite Methods -----------------

	P13nSortPanel.prototype.init = function() {
		P13nPanel.prototype.init.apply(this, arguments);

		this._proxyOnModelContextChange = jQuery.proxy(this._onModelContextChange, this);
		this.attachModelContextChange(this._proxyOnModelContextChange);
	};

	P13nSortPanel.prototype.refreshInitialState = function() {
		this.setInternalModelToBeUpdated(true);
		this.invalidate();
	};

	P13nSortPanel.prototype._onModelContextChange = function() {
		if (!this.getModel()) {
			return;
		}
		this._updateInternalModel();
	};

	P13nSortPanel.prototype.onBeforeRendering = function() {
		this._updateInternalModel();
	};

	P13nSortPanel.prototype.exit = function () {
		this.detachModelContextChange(this._proxyOnModelContextChange);
	};

	// ----------------------- Private Methods -----------------------------------------
	/**
	 * @private
	 */
	P13nSortPanel.prototype._selectTableItem = function(oTableItem) {
		// 1. Change the 'position' on model items
		this.getInternalModel().selectModelItem(this.getInternalModel().getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItem)), oTableItem.getSelected());
		this._syncPosition();

		// //TODO: wenn es nur ein unselected item ist und man drückt auf "select All" das eine item wird selektiert und markiert (falsch!)
		// First set marked item
		this._toggleMarkedTableItem(oTableItem);
		// Then update move button according to marked item
		this._updateControlLogic();
		// this._updateCounts();
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._moveTableItem = function(oTableItemFrom, oTableItemTo) {
		var oMItemFrom = this.getInternalModel().getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItemFrom));
		var oMItemTo = this.getInternalModel().getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItemTo));

		// 1. Change the 'position' on model items
		this.getInternalModel().moveModelItemPosition(oMItemFrom, oMItemTo);
		this._syncPosition();
		// 2. Move the items inside of the model
		this.getInternalModel().moveModelItem(oMItemFrom, oMItemTo);
		// 3. Remove style of current table item (otherwise the style remains on the item after move)
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// 4. Sort table items according to the model items
		this._sortTableItemsAccordingToInternalModel();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype.onPressButtonMoveToTop = function() {
		this._moveTableItem(this._getMarkedTableItem(), this._getVisibleTableItems()[0]);
	};
	/**
	 * @private
	 */
	P13nSortPanel.prototype.onPressButtonMoveUp = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) - 1]);
	};
	/**
	 * @private
	 */
	P13nSortPanel.prototype.onPressButtonMoveDown = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) + 1]);
	};
	/**
	 * @private
	 */
	P13nSortPanel.prototype.onPressButtonMoveToBottom = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.length - 1]);
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype.onItemPressed = function(oEvent) {
		// First set marked item
		this._toggleMarkedTableItem(oEvent.getParameter('listItem'));
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype.onSelectionChange = function(oEvent) {
		oEvent.getParameter("listItems").forEach(function(oTableItem) {
			this._selectTableItem(oTableItem);
		}, this);
	};

	/**
	 * Switches 'Show Selected' button to 'Show All' and back.
	 *
	 * @private
	 */
	P13nSortPanel.prototype.onSwitchButtonShowSelected = function() {
		this.setShowOnlySelectedItems(!this.getShowOnlySelectedItems());

		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype.onSearchFieldLiveChange = function() {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._filterTableItems = function() {
		var aFilters = [];
		if (this._isFilteredByShowSelected() === true) {
			aFilters.push(new sap.ui.model.Filter("selected", "EQ", true));
		}
		var sSearchText = this._getSearchText();
		if (sSearchText) {
			aFilters.push(new sap.ui.model.Filter([
				new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("tooltip", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("aggregationRole", sap.ui.model.FilterOperator.Contains, sSearchText)
			], false));
		}
		this._getTable().getBinding("items").filter(aFilters);
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._sortTableItemsAccordingToInternalModel = function() {
		var fComparator = function(oItemA, oItemB) {
			var oMItemA = this.getInternalModel().getModelItemByColumnKey(oItemA.getColumnKey());
			var oMItemB = this.getInternalModel().getModelItemByColumnKey(oItemB.getColumnKey());
			var iIndexA = this.getInternalModel().getIndexOfModelItem(oMItemA);
			var iIndexB = this.getInternalModel().getIndexOfModelItem(oMItemB);
			if (iIndexA < iIndexB) {
				return -1;
			} else if (iIndexA > iIndexB) {
				return 1;
			}
			return 0;
		};
		this._getTable().getBinding("items").sort(new sap.ui.model.Sorter({
			path: '',
			descending: false,
			group: false,
			comparator: fComparator.bind(this)
		}));
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._getVisibleTableItems = function() {
		return this._getTable().getItems().filter(function(oTableItem) {
			return !!oTableItem.getVisible();
		});
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._getMarkedTableItem = function() {
		return this._getTableItemByColumnKey(this.getColumnKeyOfMarkedItem());
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._toggleMarkedTableItem = function(oTableItem) {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// When filter is set, the table items are reduced so marked table item can disappear.
		var sColumnKey = this._getColumnKeyByTableItem(oTableItem);
		if (sColumnKey) {
			this.setColumnKeyOfMarkedItem(sColumnKey);
			this._addStyleToTableItem(oTableItem);
		}
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nSortPanel.prototype._getStyledAsMarkedTableItem = function() {
		var aDomElements = this._getTable().$().find(".sapMP13nColumnsPanelItemSelected");
		return aDomElements.length ? jQuery(aDomElements[0]).control()[0] : undefined;
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nSortPanel.prototype._getTableItemByColumnKey = function(sColumnKey) {
		var aContext = this._getTable().getBinding("items").getContexts();
		return this._getTable().getItems().find(function(oTableItem, iIndex) {
			return aContext[iIndex].getObject().getColumnKey() === sColumnKey;
		});
	};

	/**
	 *
	 * @param {sap.m.ListItemBase} oTableItem
	 * @returns {string || null}
	 * @private
	 */
	P13nSortPanel.prototype._getColumnKeyByTableItem = function(oTableItem) {
		var iIndex = this._getTable().indexOfItem(oTableItem);
		if (iIndex < 0) {
			return null;
		}
		return this._getTable().getBinding("items").getContexts()[iIndex].getObject().getColumnKey();
	};

	P13nSortPanel.prototype._syncPosition = function() {
		this.getItems().forEach(function(oItem) {
			var oMItem = this.getInternalModel().getModelItemByColumnKey(oItem.getColumnKey());
			oItem.setPosition(oMItem.position);
		}, this);
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._addStyleToTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.addStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._removeStyleFromTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.removeStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._isFilteredByShowSelected = function() {
		return false;
		// return !!this.getShowOnlySelectedItems();
	};

	/**
	 * @private
	 */
	P13nSortPanel.prototype._updateControlLogic = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._getManagedObjectModel().setProperty("/@custom/isMoveUpButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > 0);
		this._getManagedObjectModel().setProperty("/@custom/isMoveDownButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > -1 && aVisibleTableItems.indexOf(this._getMarkedTableItem()) < aVisibleTableItems.length - 1);
	};

	// /**
	//  * Updates count of selected items.
	//  *
	//  * @private
	//  */
	// P13nSortPanel.prototype._updateCounts = function() {
	// 	var iCountOfSelectedItems = 0;
	// 	this.getItems().forEach(function(oItem) {
	// 		if (oItem.getSelected()) {
	// 			iCountOfSelectedItems++;
	// 		}
	// 	});
	// 	this._getManagedObjectModel().setProperty("/@custom/countOfSelectedItems", iCountOfSelectedItems);
	// 	this._getManagedObjectModel().setProperty("/@custom/countOfItems", this.getItems().length);
	// };

	/**
	 * @private
	 */
	P13nSortPanel.prototype._updateInternalModel = function() {
		if (!this.getInternalModelToBeUpdated()) {
			return;
		}
		this.setInternalModelToBeUpdated(false);

		// Remove the marking style before table items are updated
		this._removeStyleFromTableItem(this._getMarkedTableItem());

		this.setInternalModel(new P13nInternalModel({
			tableItems: this.getItems()
		}));
		this._sortTableItemsAccordingToInternalModel();
		this._filterTableItems();

		// Set marked item initially to the first table item if not defined yet via property 'columnKeyOfMarkedItem'
		if (!this.getColumnKeyOfMarkedItem()) {
			// First set marked item
			this.setColumnKeyOfMarkedItem(this._getColumnKeyByTableItem(this._getVisibleTableItems()[0]));
		}
		this._toggleMarkedTableItem(this._getMarkedTableItem());

		// Then update move button according to marked item
		this._updateControlLogic();
		// this._updateCounts();
	};

	return P13nSortPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nSortPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.model.ModelAdapterFactory') ) {
jQuery.sap.declare('sap.ui.mdc.experimental.provider.model.ModelAdapterFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.MetaModel'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/model/ModelAdapterFactory",[
	"sap/ui/model/MetaModel", "sap/ui/mdc/experimental/provider/model/ODataAdapter"
], function(MetaModel, ODataAdapter) {
	"use strict";

	/**
	 * @public
	 */
	var Factory = {
		adapterCache: {},
		promiseCache: {},
		adapterClassCache: {
			"sap/ui/mdc/experimental/provider/model/ODataAdapter": ODataAdapter
		}
	};

	/**
	 * Return a promise
	 */
	Factory.requestAdapter = function(oModel, sModelName, sAdapterClass) {
		var oKeyInfo = Factory._getKeyInfo(sModelName, sAdapterClass);

		if (!oModel.getMetaModel()) {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapterFactory: Only models with meta model are allowed");
		}

		if (!Factory.promiseCache[oKeyInfo.key]) {
			Factory.promiseCache[oKeyInfo.key] = new Promise(function(resolve, reject) {
				var oAdapter = Factory.getAdapter(oModel, sModelName, sAdapterClass);
				if (oAdapter) {
					resolve(oAdapter);
				} else {
					sap.ui.require([
						sAdapterClass
					], function(Adapter) {
						var oAdapter = new Adapter(oModel, sModelName);
						if (oAdapter) {
							Factory.adapterCache[oKeyInfo.key] = oAdapter;
							resolve(oAdapter);
						} else {
							reject("Invalid class");
						}
					});
				}
			});
		}

		return Factory.promiseCache[oKeyInfo.key];
	};

	Factory.getAdapter = function(oModel, sModelName, sAdapterClass) {
		var oKeyInfo = Factory._getKeyInfo(sModelName, sAdapterClass);

		var oCachedAdapter = Factory.adapterClassCache[oKeyInfo.adapter];

		if (!oModel.getMetaModel()) {
			throw new Error("sap.ui.mdc.experimental.provider.model.ModelAdapterFactory: Only models with meta model are allowed");
		}

		if (Factory.adapterCache[oKeyInfo.key]) {
			return Factory.adapterCache[oKeyInfo.key];
		} else if (oCachedAdapter) {
			Factory.adapterCache[oKeyInfo.key] = new oCachedAdapter(oModel, sModelName);
			return Factory.adapterCache[oKeyInfo.key];
		}

		return null;
	};

	Factory._getKeyInfo = function(sModelName, sAdapterClass) {
		if (!sAdapterClass) {
			sAdapterClass = "sap/ui/mdc/experimental/provider/model/ODataAdapter";
		}

		var oKeyInfo = {
		     adapter: sAdapterClass,
		     modelName: sModelName,
		     key: sModelName + ">" + sAdapterClass
		};

		return oKeyInfo;
	};

	Factory.cacheAdapterClass = function(sAdapterClass, Adapter) {
		Factory.adapterClassCache[sAdapterClass] = Adapter;
	};

	return Factory;
});

}; // end of sap/ui/mdc/experimental/provider/model/ModelAdapterFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.registry.ControlRegistry') ) {
jQuery.sap.declare('sap.ui.mdc.experimental.provider.registry.ControlRegistry'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/experimental/provider/registry/ControlRegistry",[
	"./Utils", "/sap/ui/mdc/experimental/provider/ControlProvider","sap/ui/mdc/experimental/provider/model/ModelAdapterFactory"
], function(Utils, ControlProvider,AdapterFactory) {
	"use strict";

	/**
	 * @public
	 */
	var ControlRegistry = {
		ControlProvider: ControlProvider,
		Utils: Utils,
		AdapterFactory: AdapterFactory
	};

	ControlRegistry.getTemplateNodes = function() {
		return Object.keys(ControlRegistry._mTemplatingFunctions);
	};

	ControlRegistry.getProviderFunction = function(oControl) {
		var sName = "";
		if (typeof oControl === 'string') {
			sName = oControl;
		} else {
			sName = oControl.getMetadata().getName();
		}
		var fnProvider = ControlRegistry._mProviderFunctions[sName];

		if (fnProvider != null) {
			return fnProvider;
		} else {
			return ControlRegistry._mProviderFunctions["sap.ui.mdc.Base"];
		}
	};

	ControlRegistry.getTemplatingFunction = function(oNode) {
		var sName = "";
		if (typeof oNode === 'string') {
			sName = oNode;
		} else {
			sName = Utils.className(oNode);
		}

		var fnVisitor = ControlRegistry._mTemplatingFunctions[sName];

		if (fnVisitor != null) {
			return fnVisitor;
		} else {
			return ControlRegistry._mTemplatingFunctions["sap.ui.mdc.Base"];
		}
	};

	/**
	 * Registres a control for MDC providing
	 *
	 * @param {string} sClassName the controls class name, e.g. sap.m.Button
	 * @param {function} fnProviderFunction the function to run if control is already created
	 * @
	 *
	 */
	ControlRegistry.registerControl = function(sControlClassName, fnProviderFunction, fnTemplatingFunction,sAdapterModule) {
		ControlRegistry._mProviderFunctions[sControlClassName] = fnProviderFunction;
		ControlRegistry._mTemplatingFunctions[sControlClassName] = fnTemplatingFunction;

		if (sAdapterModule) {
			var sClassName = sAdapterModule.replace(new RegExp("/", "g"), ".");
			jQuery.sap.require(sClassName);
			AdapterFactory.cacheAdapterClass(sAdapterModule, jQuery.sap.getObject(sClassName));
		}
	};

	ControlRegistry._mTemplatingFunctions = {
		"sap.ui.mdc.Base": function(oNode, oContextCallback, oAdapter) {
			var sId = oNode.getAttribute("id");
			oNode.removeAttribute("id");
			oNode.setAttribute("id", oAdapter.key + "---" + sId);

			var sLabelFor = oNode.getAttribute("labelFor");

			if (sLabelFor) {
				oNode.setAttribute("labelFor", oAdapter.key + "---" + sLabelFor);
			}
		},
		"sap.m.Label": function(oNode, oContextCallback, oAdapter) {
			ControlRegistry._mTemplatingFunctions["sap.ui.mdc.Base"](oNode, oContextCallback, oAdapter);

			ControlProvider.provideAttribute(oNode, "text", oAdapter.label);
		},
		"sap.ui.mdc.FilterField": function(oNode, oContextCallback, oAdapter) {
			ControlRegistry._mTemplatingFunctions["sap.ui.mdc.Base"](oNode, oContextCallback, oAdapter);

			ControlProvider.provideAttribute(oNode, "required", oAdapter.required);
			ControlProvider.provideAttribute(oNode, "type", oAdapter.type);
			ControlProvider.provideAttribute(oNode, "fieldPath", oAdapter.path);
		}
	};

	ControlRegistry._mProviderFunctions = {
		"sap.ui.mdc.Base": function(oControl, oAdapter) {

			ControlProvider.provideProperty(oControl, "visible", oAdapter.visible);
			ControlProvider.provideProperty(oControl, "tooltip", oAdapter.tooltip);
		},
		"sap.m.InputBase": function(oControl, oAdapter) {
			ControlRegistry._mProviderFunctions["sap.ui.mdc.Base"](oControl, oAdapter);

			ControlProvider.provideProperty(oControl, "editable", oAdapter.enabled);
			ControlProvider.provideProperty(oControl, "required", oAdapter.required);

			var aLabels = oControl.getLabels();

			for (var i = 0; i < aLabels.length; i++) {
				if (ControlProvider.canControlBeProvided(aLabels[i], oControl)) {
					ControlRegistry.getProviderFunction(aLabels[i])(aLabels[i], oAdapter);
				}
			}
		},
		"sap.m.Input": function(oControl, oAdapter) {
			ControlRegistry._mProviderFunctions["sap.m.InputBase"](oControl, oAdapter);

			var type = Utils.convertToInputType(oAdapter);

			ControlProvider.provideProperty(oControl, "type", type);

		},
		"sap.m.Label": function(oControl, oAdapter) {
			ControlRegistry._mProviderFunctions["sap.ui.mdc.Base"](oControl, oAdapter);

			ControlProvider.provideProperty(oControl, "text", oAdapter.label);
		},
		"sap.ui.layout.form.FormElement": function(oControl, oAdapter) {

			var oLabel = oControl.getLabel();
			if (oLabel && ControlProvider.canControlBeProvided(oLabel, oControl)) {
				ControlRegistry.getProviderFunction(oLabel)(oLabel, oAdapter);
			}
			var aFields = oControl.getFields();
			for (var i = 0; i < aFields.length; i++) {
				if (ControlProvider.canControlBeProvided(aFields[i], oControl)) {
					ControlRegistry.getProviderFunction(aFields[i])(aFields[i], oAdapter);
				}
			}

		},
		"sap.ui.mdc.FilterField": function(oControl, oAdapter) {
			ControlProvider.provideProperty(oControl, "required", oAdapter.required);
			ControlProvider.provideProperty(oControl, "type", oAdapter.type);
			ControlProvider.provideProperty(oControl, "fieldPath", oAdapter.path);
			ControlProvider.provideAggregation(oControl, "conditions", oAdapter.conditions);
			ControlProvider.providePrepareCloneFunction(oControl, "suggestion", oAdapter.suggestion.bind(oAdapter));
		}
	};

	ControlRegistry.resolveMetadataContextsDeep = function(oNode, oContextCallback, oAdapter, oMdCtxAttr) {
		var aChildren = oNode.children, i = 0;
		for (i = 0; i < aChildren.length; i++) {
			var sClassName = Utils.className(aChildren[i]);

			if (sClassName && !aChildren[i].getAttribute("metadataContexts") && ControlRegistry._mTemplatingFunctions[sClassName]) {
				aChildren[i].setAttribute("metadataContexts", oMdCtxAttr);
			} else {
				ControlRegistry.resolveMetadataContextsDeep(aChildren[i], oContextCallback, oAdapter, oMdCtxAttr);
			}
		}
	};

	ControlRegistry.determineWithModel = function(oNode) {
		var oParent = oNode;

		while (oParent && !oParent.hasAttribute("var")) {
			oParent = oParent.parentElement;
		}

		if (oParent) {
			return oParent.getAttribute("var");
		}
		return null;
	};

	return ControlRegistry;
});

}; // end of sap/ui/mdc/experimental/provider/registry/ControlRegistry.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nColumnPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nColumnPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nColumnPanel",[
	'jquery.sap.global', 'sap/m/library', './P13nPanel', './P13nInternalModel'
], function(jQuery, MLibrary, P13nPanel, P13nInternalModel) {
	"use strict";

	/**
	 * Constructor for a new P13nColumnPanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nColumnPanel control is used to define selection settings like the visibility or the order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nColumnPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nColumnPanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nColumnPanel", /** @lends sap.ui.mdc.experimental.P13nColumnPanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Due to the re-binding during execution of _filterTableItems() the sap.m.Table re-create all items.
				 * So we have to store the 'columnKey' in order to mark the item after re-binding.
				 */
				columnKeyOfMarkedItem: {
					type: "string",
					defaultValue: undefined,
					visibility: "hidden"
				},
				/**
				 * Store the state of the button "Show selected".
				 */
				showOnlySelectedItems: {
					type: "boolean",
					defaultValue: false,
					visibility: "hidden"
				},
				/**
				 * Internal model.
				 */
				internalModel: {
					type: "sap.ui.mdc.experimental.P13nInternalModel",
					visibility: "hidden"
				}
			}
		}
	});

	// ----------------------- Overwrite Methods -----------------

	P13nColumnPanel.prototype.init = function() {
		P13nPanel.prototype.init.apply(this, arguments);

		this._proxyOnModelContextChange = jQuery.proxy(this._onModelContextChange, this);
		this.attachModelContextChange(this._proxyOnModelContextChange);
	};

	P13nColumnPanel.prototype.refreshInitialState = function() {
		this.setInternalModelToBeUpdated(true);
		this.invalidate();
	};

	P13nColumnPanel.prototype._onModelContextChange = function() {
		if (!this.getModel()) {
			return;
		}
		this._updateInternalModel();
	};

	P13nColumnPanel.prototype.onBeforeRendering = function() {
		this._updateInternalModel();
	};

	P13nColumnPanel.prototype.exit = function () {
		this.detachModelContextChange(this._proxyOnModelContextChange);
	};

	// ----------------------- Private Methods -----------------------------------------
	/**
	 * @private
	 */
	P13nColumnPanel.prototype._selectTableItem = function(oTableItem) {
		// 1. Change the 'position' on model items
		this.getInternalModel().selectModelItem(this.getInternalModel().getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItem)), oTableItem.getSelected());
		this._syncPosition();

		// //TODO: wenn es nur ein unselected item ist und man drückt auf "select All" das eine item wird selektiert und markiert (falsch!)
		// First set marked item
		this._toggleMarkedTableItem(oTableItem);
		// Then update move button according to marked item
		this._updateControlLogic();

		this._updateCounts();
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._moveTableItem = function(oTableItemFrom, oTableItemTo) {
		var oMItemFrom = this.getInternalModel().getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItemFrom));
		var oMItemTo = this.getInternalModel().getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItemTo));

		// 1. Change the 'position' on model items
		this.getInternalModel().moveModelItemPosition(oMItemFrom, oMItemTo);
		this._syncPosition();
		// 2. Move the items inside of the model
		this.getInternalModel().moveModelItem(oMItemFrom, oMItemTo);
		// 3. Remove style of current table item (otherwise the style remains on the item after move)
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// 4. Sort table items according to the model items
		this._sortTableItemsAccordingToInternalModel();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onPressButtonMoveToTop = function() {
		this._moveTableItem(this._getMarkedTableItem(), this._getVisibleTableItems()[0]);
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onPressButtonMoveUp = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) - 1]);
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onPressButtonMoveDown = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) + 1]);
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onPressButtonMoveToBottom = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.length - 1]);
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onItemPressed = function(oEvent) {
		// First set marked item
		this._toggleMarkedTableItem(oEvent.getParameter('listItem'));
		// Then update move button according to marked item
		this._updateControlLogic();
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onSelectionChange = function(oEvent) {
		oEvent.getParameter("listItems").forEach(function(oTableItem) {
			this._selectTableItem(oTableItem);
		}, this);
	};
	/**
	 * Switches 'Show Selected' button to 'Show All' and back.
	 *
	 * @private
	 */
	P13nColumnPanel.prototype.onSwitchButtonShowSelected = function() {
		this.setShowOnlySelectedItems(!this.getShowOnlySelectedItems());

		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};
	/**
	 * @private
	 */
	P13nColumnPanel.prototype.onSearchFieldLiveChange = function() {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._filterTableItems = function() {
		var aFilters = [];
		if (this._isFilteredByShowSelected() === true) {
			aFilters.push(new sap.ui.model.Filter("selected", "EQ", true));
		}
		var sSearchText = this._getSearchText();
		if (sSearchText) {
			aFilters.push(new sap.ui.model.Filter([
				new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("tooltip", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("aggregationRole", sap.ui.model.FilterOperator.Contains, sSearchText)
			], false));
		}
		this._getTable().getBinding("items").filter(aFilters);
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._sortTableItemsAccordingToInternalModel = function() {
		var fComparator = function(oItemA, oItemB) {
			var oMItemA = this.getInternalModel().getModelItemByColumnKey(oItemA.getColumnKey());
			var oMItemB = this.getInternalModel().getModelItemByColumnKey(oItemB.getColumnKey());
			var iIndexA = this.getInternalModel().getIndexOfModelItem(oMItemA);
			var iIndexB = this.getInternalModel().getIndexOfModelItem(oMItemB);
			if (iIndexA < iIndexB) {
				return -1;
			} else if (iIndexA > iIndexB) {
				return 1;
			}
			return 0;
		};
		this._getTable().getBinding("items").sort(new sap.ui.model.Sorter({
			path: '',
			descending: false,
			group: false,
			comparator: fComparator.bind(this)
		}));
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._getVisibleTableItems = function() {
		return this._getTable().getItems().filter(function(oTableItem) {
			return !!oTableItem.getVisible();
		});
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._getMarkedTableItem = function() {
		return this._getTableItemByColumnKey(this.getColumnKeyOfMarkedItem());
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._toggleMarkedTableItem = function(oTableItem) {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// When filter is set, the table items are reduced so marked table item can disappear.
		var sColumnKey = this._getColumnKeyByTableItem(oTableItem);
		if (sColumnKey) {
			this.setColumnKeyOfMarkedItem(sColumnKey);
			this._addStyleToTableItem(oTableItem);
		}
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nColumnPanel.prototype._getStyledAsMarkedTableItem = function() {
		var aDomElements = this._getTable().$().find(".sapMP13nColumnsPanelItemSelected");
		return aDomElements.length ? jQuery(aDomElements[0]).control()[0] : undefined;
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nColumnPanel.prototype._getTableItemByColumnKey = function(sColumnKey) {
		var aContext = this._getTable().getBinding("items").getContexts();
		return this._getTable().getItems().find(function(oTableItem, iIndex) {
			return aContext[iIndex].getObject().getColumnKey() === sColumnKey;
		});
	};

	/**
	 *
	 * @param {sap.m.ListItemBase} oTableItem
	 * @returns {string || null}
	 * @private
	 */
	P13nColumnPanel.prototype._getColumnKeyByTableItem = function(oTableItem) {
		var iIndex = this._getTable().indexOfItem(oTableItem);
		if (iIndex < 0) {
			return null;
		}
		return this._getTable().getBinding("items").getContexts()[iIndex].getObject().getColumnKey();
	};

	P13nColumnPanel.prototype._syncPosition = function() {
		this.getItems().forEach(function(oItem) {
			var oMItem = this.getInternalModel().getModelItemByColumnKey(oItem.getColumnKey());
			oItem.setPosition(oMItem.position);
		}, this);
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._addStyleToTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.addStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._removeStyleFromTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.removeStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._isFilteredByShowSelected = function() {
		return !!this.getShowOnlySelectedItems();
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._updateControlLogic = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._getManagedObjectModel().setProperty("/@custom/isMoveUpButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > 0);
		this._getManagedObjectModel().setProperty("/@custom/isMoveDownButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > -1 && aVisibleTableItems.indexOf(this._getMarkedTableItem()) < aVisibleTableItems.length - 1);
	};

	/**
	 * Updates count of selected items.
	 *
	 * @private
	 */
	P13nColumnPanel.prototype._updateCounts = function() {
		var iCountOfSelectedItems = 0;
		this.getItems().forEach(function(oItem) {
			if (oItem.getSelected()) {
				iCountOfSelectedItems++;
			}
		});
		this._getManagedObjectModel().setProperty("/@custom/countOfSelectedItems", iCountOfSelectedItems);
		this._getManagedObjectModel().setProperty("/@custom/countOfItems", this.getItems().length);
	};

	/**
	 * @private
	 */
	P13nColumnPanel.prototype._updateInternalModel = function() {
		if (!this.getInternalModelToBeUpdated()) {
			return;
		}
		this.setInternalModelToBeUpdated(false);

		// Remove the marking style before table items are updated
		this._removeStyleFromTableItem(this._getMarkedTableItem());

		this.setInternalModel(new P13nInternalModel({
			tableItems: this.getItems()
		}));
		this._sortTableItemsAccordingToInternalModel();
		this._filterTableItems();

		// Set marked item initially to the first table item if not defined yet via property 'columnKeyOfMarkedItem'
		if (!this.getColumnKeyOfMarkedItem()) {
			// First set marked item
			this.setColumnKeyOfMarkedItem(this._getColumnKeyByTableItem(this._getVisibleTableItems()[0]));
		}
		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();

		this._updateCounts();
	};

	return P13nColumnPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nColumnPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.P13nFilterPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.mdc.experimental.P13nFilterPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/P13nFilterPanel",[
	'jquery.sap.global', 'sap/m/library', './P13nPanel', './P13nInternalModel'
], function(jQuery, MLibrary, P13nPanel, P13nInternalModel) {
	"use strict";

	/**
	 * Constructor for a new P13nFilterPanel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The P13nFilterPanel control is used to define selection settings like the visibility or the order of items.
	 * @extends sap.ui.mdc.experimental.P13nPanel
	 * @author SAP SE
	 * @version 1.50.6
	 * @constructor
	 * @private
	 * @since 1.48.0
	 * @alias sap.ui.mdc.experimental.P13nFilterPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var P13nFilterPanel = P13nPanel.extend("sap.ui.mdc.experimental.P13nFilterPanel", /** @lends sap.ui.mdc.experimental.P13nFilterPanel.prototype */
	{
		metadata: {
			library: "sap.ui.mdc",
			properties: {
				/**
				 * Due to the re-binding during execution of _filterTableItems() the sap.m.Table re-create all items.
				 * So we have to store the 'columnKey' in order to mark the item after re-binding.
				 */
				columnKeyOfMarkedItem: {
					type: "string",
					defaultValue: undefined,
					visibility: "hidden"

				},
				/**
				 * Store the state of the button "Show selected".
				 */
				showOnlySelectedItems: {
					type: "boolean",
					defaultValue: false,
					visibility: "hidden"
				},

				internalModel: {
					type: "sap.ui.mdc.experimental.P13nInternalModel",
					visibility: "hidden"
				}
			}
		}
	});

	// ----------------------- Overwrite Methods -----------------

	P13nFilterPanel.prototype.init = function() {
		P13nPanel.prototype.init.apply(this, arguments);

		this._proxyOnModelContextChange = jQuery.proxy(this._onModelContextChange, this);
		this.attachModelContextChange(this._proxyOnModelContextChange);
	};

	P13nFilterPanel.prototype.refreshInitialState = function() {
		this.setInternalModelToBeUpdated(true);
		this.invalidate();
	};

	P13nFilterPanel.prototype._onModelContextChange = function() {
		if (!this.getModel()) {
			return;
		}

		this._updateInternalModel();
	};

	P13nFilterPanel.prototype.onBeforeRendering = function() {
		this._updateInternalModel();
	};

	P13nFilterPanel.prototype.exit = function () {
		this.detachModelContextChange(this._proxyOnModelContextChange);
	};

	// ----------------------- Private Methods -----------------------------------------
	/**
	 * @private
	 */
	P13nFilterPanel.prototype._selectTableItem = function(oTableItem) {
		// 1. Change the 'position' on model items
		this.getInternalModel().selectModelItem(this.getInternalModel().getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItem)), oTableItem.getSelected());
		this._syncPosition();

		// //TODO: wenn es nur ein unselected item ist und man drückt auf "select All" das eine item wird selektiert und markiert (falsch!)
		// First set marked item
		this._toggleMarkedTableItem(oTableItem);
		// Then update move button according to marked item
		this._updateControlLogic();
		this._updateCounts();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._moveTableItem = function(oTableItemFrom, oTableItemTo) {
		var oMItemFrom = this.getInternalModel().getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItemFrom));
		var oMItemTo = this.getInternalModel().getModelItemByColumnKey(this._getColumnKeyByTableItem(oTableItemTo));

		// 1. Change the 'position' on model items
		this.getInternalModel().moveModelItemPosition(oMItemFrom, oMItemTo);
		this._syncPosition();
		// 2. Move the items inside of the model
		this.getInternalModel().moveModelItem(oMItemFrom, oMItemTo);
		// 3. Remove style of current table item (otherwise the style remains on the item after move)
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// 4. Sort table items according to the model items
		this._sortTableItemsAccordingToInternalModel();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onPressButtonMoveToTop = function() {
		this._moveTableItem(this._getMarkedTableItem(), this._getVisibleTableItems()[0]);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onPressButtonMoveUp = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) - 1]);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onPressButtonMoveDown = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.indexOf(this._getMarkedTableItem()) + 1]);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onPressButtonMoveToBottom = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._moveTableItem(this._getMarkedTableItem(), aVisibleTableItems[aVisibleTableItems.length - 1]);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onItemPressed = function(oEvent) {
		// First set marked item
		this._toggleMarkedTableItem(oEvent.getParameter('listItem'));
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onSelectionChange = function(oEvent) {
		oEvent.getParameter("listItems").forEach(function(oTableItem) {
			this._selectTableItem(oTableItem);
		}, this);
	};

	/**
	 * Switches 'Show Selected' button to 'Show All' and back.
	 *
	 * @private
	 */
	P13nFilterPanel.prototype.onSwitchButtonShowSelected = function() {
		this.setShowOnlySelectedItems(!this.getShowOnlySelectedItems());

		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype.onSearchFieldLiveChange = function() {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		this._filterTableItems();

		// First set marked item
		this._toggleMarkedTableItem(this._getMarkedTableItem());
		// Then update move button according to marked item
		this._updateControlLogic();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._filterTableItems = function() {
		var aFilters = [];
		if (this._isFilteredByShowSelected() === true) {
			aFilters.push(new sap.ui.model.Filter("selected", "EQ", true));
		}
		var sSearchText = this._getSearchText();
		if (sSearchText) {
			aFilters.push(new sap.ui.model.Filter([
				new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("tooltip", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.Contains, sSearchText), new sap.ui.model.Filter("aggregationRole", sap.ui.model.FilterOperator.Contains, sSearchText)
			], false));
		}
		this._getTable().getBinding("items").filter(aFilters);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._sortTableItemsAccordingToInternalModel = function() {
		var fComparator = function(oItemA, oItemB) {
			var oMItemA = this.getInternalModel().getModelItemByColumnKey(oItemA.getColumnKey());
			var oMItemB = this.getInternalModel().getModelItemByColumnKey(oItemB.getColumnKey());
			var iIndexA = this.getInternalModel().getIndexOfModelItem(oMItemA);
			var iIndexB = this.getInternalModel().getIndexOfModelItem(oMItemB);
			if (iIndexA < iIndexB) {
				return -1;
			} else if (iIndexA > iIndexB) {
				return 1;
			}
			return 0;
		};
		this._getTable().getBinding("items").sort(new sap.ui.model.Sorter({
			path: '',
			descending: false,
			group: false,
			comparator: fComparator.bind(this)
		}));
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._getVisibleTableItems = function() {
		return this._getTable().getItems().filter(function(oTableItem) {
			return !!oTableItem.getVisible();
		});
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._getMarkedTableItem = function() {
		return this._getTableItemByColumnKey(this.getColumnKeyOfMarkedItem());
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._toggleMarkedTableItem = function(oTableItem) {
		this._removeStyleFromTableItem(this._getMarkedTableItem());
		// When filter is set, the table items are reduced so marked table item can disappear.
		var sColumnKey = this._getColumnKeyByTableItem(oTableItem);
		if (sColumnKey) {
			this.setColumnKeyOfMarkedItem(sColumnKey);
			this._addStyleToTableItem(oTableItem);
		}
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nFilterPanel.prototype._getStyledAsMarkedTableItem = function() {
		var aDomElements = this._getTable().$().find(".sapMP13nColumnsPanelItemSelected");
		return aDomElements.length ? jQuery(aDomElements[0]).control()[0] : undefined;
	};

	/**
	 * @returns {sap.m.ListItemBase || undefined}
	 * @private
	 */
	P13nFilterPanel.prototype._getTableItemByColumnKey = function(sColumnKey) {
		var aContext = this._getTable().getBinding("items").getContexts();
		return this._getTable().getItems().find(function(oTableItem, iIndex) {
			return aContext[iIndex].getObject().getColumnKey() === sColumnKey;
		});
	};

	/**
	 *
	 * @param {sap.m.ListItemBase} oTableItem
	 * @returns {string || null}
	 * @private
	 */
	P13nFilterPanel.prototype._getColumnKeyByTableItem = function(oTableItem) {
		var iIndex = this._getTable().indexOfItem(oTableItem);
		if (iIndex < 0) {
			return null;
		}
		return this._getTable().getBinding("items").getContexts()[iIndex].getObject().getColumnKey();
	};

	P13nFilterPanel.prototype._syncPosition = function() {
		this.getItems().forEach(function(oItem) {
			var oMItem = this.getInternalModel().getModelItemByColumnKey(oItem.getColumnKey());
			oItem.setPosition(oMItem.position);
		}, this);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._addStyleToTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.addStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._removeStyleFromTableItem = function(oTableItem) {
		if (oTableItem) {
			oTableItem.removeStyleClass("sapMP13nColumnsPanelItemSelected");
		}
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._isFilteredByShowSelected = function() {
		return !!this.getShowOnlySelectedItems();
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._updateControlLogic = function() {
		var aVisibleTableItems = this._getVisibleTableItems();
		this._getManagedObjectModel().setProperty("/@custom/isMoveUpButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > 0);
		this._getManagedObjectModel().setProperty("/@custom/isMoveDownButtonEnabled", aVisibleTableItems.indexOf(this._getMarkedTableItem()) > -1 && aVisibleTableItems.indexOf(this._getMarkedTableItem()) < aVisibleTableItems.length - 1);
	};

	/**
	 * Updates count of selected items.
	 *
	 * @private
	 */
	P13nFilterPanel.prototype._updateCounts = function() {
		var iCountOfSelectedItems = 0;
		this.getItems().forEach(function(oItem) {
			if (oItem.getSelected()) {
				iCountOfSelectedItems++;
			}
		});
		this._getManagedObjectModel().setProperty("/@custom/countOfSelectedItems", iCountOfSelectedItems);
		this._getManagedObjectModel().setProperty("/@custom/countOfItems", this.getItems().length);
	};

	/**
	 * @private
	 */
	P13nFilterPanel.prototype._updateInternalModel = function() {
		if (!this.getInternalModelToBeUpdated()) {
			return;
		}
		this.setInternalModelToBeUpdated(false);

		// Remove the marking style before table items are updated
		this._removeStyleFromTableItem(this._getMarkedTableItem());

		this.setInternalModel(new P13nInternalModel({
			tableItems: this.getItems()
		}));
		this._sortTableItemsAccordingToInternalModel();
		this._filterTableItems();

		// Set marked item initially to the first table item if not defined yet via property 'columnKeyOfMarkedItem'
		if (!this.getColumnKeyOfMarkedItem()) {
			// First set marked item
			this.setColumnKeyOfMarkedItem(this._getColumnKeyByTableItem(this._getVisibleTableItems()[0]));
		}
		this._toggleMarkedTableItem(this._getMarkedTableItem());

		// Then update move button according to marked item
		this._updateControlLogic();
		this._updateCounts();
	};

	return P13nFilterPanel;

}, /* bExport= */true);

}; // end of sap/ui/mdc/experimental/P13nFilterPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.provider.ProviderHook') ) {
jQuery.sap.declare('sap.ui.mdc.experimental.provider.ProviderHook'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.XMLTemplateProcessor'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.util.XMLPreprocessor'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/provider/ProviderHook",[
	"sap/ui/base/ManagedObject", "sap/ui/mdc/experimental/provider/registry/ControlRegistry", "sap/ui/core/XMLTemplateProcessor", "sap/ui/core/util/XMLPreprocessor"
], function(ManagedObject, ControlRegistry, XMLTemplateProcessor, XMLPreprocessor) {
	"use strict";

	/**
	 * @private
	 */
	var ProviderHook = {};

	/**
	 * Hook that defines Managed Object Hook Methods
	 */
	ProviderHook.apply = function() {
		XMLTemplateProcessor._preprocessMetadataContexts = function(sClassName, oNode, oContext) {
			var oMdCtxAttr = oNode.getAttribute("metadataContexts");

			if (oMdCtxAttr) {
				var oMetadataContext = ManagedObject.bindingParser(oMdCtxAttr, oContext);

				ProviderHook._resolveMetadataContextPath(oMetadataContext);

				return oMetadataContext;
			}

			return undefined;
		};

		ProviderHook._resolveMetadataContextPath = function(oMetadataContext) {
			if (!oMetadataContext && oMetadataContext.path) {
				return;
			}

			var bRelative = oMetadataContext.path[0] !== '/';
			if (!bRelative && oMetadataContext.context) {
				// absolute path should ignore context
				delete oMetadataContext.context;
				jQuery.sap.log.debug("Metadata context has an absolute path, ignoring the given context '" + oMetadataContext.context + "'");
			}
			if (bRelative && oMetadataContext.context) {
				oMetadataContext.path = oMetadataContext.context + "/" + oMetadataContext.path;
				delete oMetadataContext.context;
				bRelative = false;
			}

			if (oMetadataContext.model == '') {
				oMetadataContext.model = undefined;
			}

			return bRelative;
		};

		/**
		 * Process the metadataContexts special setting in order to let the control be driven by metadata
		 *
		 * @param {object} oMetadatas Contexts The metadataContexts special setting
		 * @param {object} oSettings The ManagedObject settings
		 * @private
		 */
		ManagedObject.prototype._processMetadataContexts = function(oMetadataContexts, oSettings) {

			var aKeys = Object.keys(oMetadataContexts);
			for (var i = 0; i < aKeys.length; i++) {
				var oMetadataContext = oMetadataContexts[aKeys[i]];

				if (!ProviderHook._sanityChecks(oMetadataContext)) {
					return;
				}

				this._oProviderData = {};

				this._oProviderData.metadata = oMetadataContext;
				this._oProviderData.mProvidedProperties = {};// The back from property providing
				this._oProviderData.mProvidedFunctions = {};// The back from property providing

				this._oProviderData.relative = oMetadataContext.path[0] !== '/';
				if (this._oProviderData) {
					this.attachModelContextChange(ProviderHook._handleModelContextChange, ProviderHook);
				}
			}

		};

		/**
		 * Clones the provider information to the control, this is used in order to drive the metadata information for this control
		 *
		 * @public {Control} oClone The cloned control
		 * @private
		 */
		ManagedObject.prototype._cloneMetadataContexts = function(oClone) {
			if (this._oProviderData) {
				oClone._oProviderData = this._oProviderData;
				ControlRegistry.ControlProvider.prepareClone(oClone);
			}
		};
	};

	ProviderHook.registerVisitors = function(aAdapterClasses) {

		for (var i = 0; i < aAdapterClasses.length; i++) {
			var sClassName = aAdapterClasses[i].replace(new RegExp("/", "g"), ".");
			jQuery.sap.require(sClassName);
			ControlRegistry.AdapterFactory.cacheAdapterClass(aAdapterClasses[i], jQuery.sap.getObject(sClassName));
		}

		ProviderHook.registerTemplating();
	};

	ProviderHook.registerTemplating = function() {
		var i, aNodes = ControlRegistry.getTemplateNodes();

		var fnPreprocess = function(oNode, oCallback) {
			var oMdCtxAttr = oNode.getAttribute("metadataContexts");

			if (oMdCtxAttr) {
				var oMetadataContext = ManagedObject.bindingParser(oMdCtxAttr, null);
				var bRelative = ProviderHook._resolveMetadataContextPath(oMetadataContext);
				if (!bRelative && oMetadataContext.preprocessModel) {
					ProviderHook.resolveContexts(oNode, oCallback, oMetadataContext);
				}
			} else {
               oCallback.visitAttributes(oNode);
			}
		};

		for (i = 0; i < aNodes.length; i++) {
			var oNodeInfo = ControlRegistry.Utils.getNameSpaceInfo(aNodes[i]);

			XMLPreprocessor.plugIn(fnPreprocess, oNodeInfo.nameSpace, oNodeInfo.localName);
		}
	};

	ProviderHook.resolveContexts = function(oNode, oCallback, oMetadataContext) {
		var oContextCallback, oModel = oCallback.getSettings().models[oMetadataContext.preprocessModel];

		if (!oModel) {
			var oViewInfo = oCallback.getViewInfo();
			var oComponent = sap.ui.getCore().getComponent(oViewInfo.componentId);
			oModel = oComponent ? oComponent.oModels[oMetadataContext.preprocessModel] : null;
			var mVariables = {};
			mVariables[oMetadataContext.model] = oModel ? oModel.getContext("/") : null;
			// Add Model context
			oContextCallback = oCallback["with"](mVariables, false);
			// check if the is metadataContext for model
		} else {
			oContextCallback = oCallback;
		}

		if (oModel) {
			var sPath = oMetadataContext.path;
			var oAdapter = ControlRegistry.AdapterFactory.getAdapter(oModel, oMetadataContext.model, oMetadataContext.adapter);
			oAdapter.switchMetaContext(sPath);// switch the meta context
			var fnTemplatingFunction = ControlRegistry.getTemplatingFunction(oNode);

			fnTemplatingFunction(oNode, oContextCallback, oAdapter);
			var sMetadataContext = oNode.getAttribute("metadataContexts");
			oContextCallback.visitAttributes(oNode);

			if (sMetadataContext) {
				oNode.setAttribute("metadataContexts", sMetadataContext);
			}
		}
	};

	/**
	 * Handler for model context change in order to provide the property
	 *
	 * @param {object} oEvent The event
	 * @private
	 */
	ProviderHook._handleModelContextChange = function(oEvent) {
		var oControl = oEvent.getSource();

		ProviderHook._driveWithMetadata(oControl._oProviderData, oControl);
	};

	/**
	 * Actual metadata provisioning
	 *
	 * @param {object} oProvider The provider data.
	 * @private
	 */
	ProviderHook._driveWithMetadata = function(oProvider, oControl) {
		if (!oProvider.model) {
			oProvider.model = oControl.getModel(oProvider.metadata.model);
		}

		if (!oProvider.model) {
			// waiting for a context is only needed if no context was given and path is relative
			jQuery.sap.log.debug("Metadata context cannot be resolved yet");
			return;
		}

		if (oProvider.relative) {
			var sCtx = oControl.getBindingContext(oProvider.metadata.model);
			if (!sCtx) {
				// waiting for a context is only needed if no context was given and path is relative
				jQuery.sap.log.debug("Metadata context cannot be resolved yet");
				return;
			} else {
				oProvider.metadata.path = sCtx + "/" + oProvider.metadata.path;
				delete oProvider.relative;
			}
		}

		// already loaded dive now
		var fnProviderFunction = ControlRegistry.getProviderFunction(oControl);

		if (fnProviderFunction) {
			ControlRegistry.AdapterFactory.requestAdapter(oProvider.model, oProvider.metadata.model, oProvider.metadata.adapter).then(function(oAdapter) {
				oAdapter.ready().then(function() {
					oAdapter.switchMetaContext(oProvider.metadata.path);// switch the meta context
					fnProviderFunction(oControl, oAdapter);
				});
			});
		}
	};

	/**
	 * @param {object} oMetadataContext The value for the special setting for metadata context
	 * @private
	 */
	ProviderHook._sanityChecks = function(oMetadataContext) {

		if (!oMetadataContext) {
			jQuery.sap.log.warning("No metadata context available");
			return false;
		}

		// when is this ever a string? If there are good reasons to support string here, the contract with XMLTemplateProcessor can be
		// different.
		// XMLTemplateProcessor can then pass only a string and we do the parsing ourselves always.
		if (typeof oMetadataContext == "string") {
			oMetadataContext = ManagedObject.bindingParser(oMetadataContext);
		}
		if (!oMetadataContext.hasOwnProperty("path") || typeof oMetadataContext.path !== "string") {
			jQuery.sap.log.warning("Metadata context is missing a path or path is not a string");
			return false;
		}

		if (!oMetadataContext.hasOwnProperty("relative")) {
			oMetadataContext.relative = !oMetadataContext.hasOwnProperty("context");
		} else if (typeof oMetadataContext.relative !== "boolean") {
			jQuery.sap.log.warning("Metadata relative information must be a boolean");
			return false;
		}

		if (oMetadataContext.hasOwnProperty("context") && typeof oMetadataContext.context !== "string") {
			jQuery.sap.log.warning("Metadata context needs no context or a context path of type string");
			return false;
		}

		if (!oMetadataContext.hasOwnProperty("model")) {
			oMetadataContext.model = undefined;
			jQuery.sap.log.debug("Metadata context is missing a model, assuming undefined model");
		}

		return true;
	};

	return ProviderHook;
});

}; // end of sap/ui/mdc/experimental/provider/ProviderHook.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.ui.mdc.
 */
jQuery.sap.declare('sap.ui.mdc.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/mdc/library",['sap/ui/mdc/model/GenericType','sap/ui/mdc/experimental/provider/ProviderHook'], function(GenericType,ProviderHook) {
	"use strict";

	/**
	 * UI5 library: sap.ui.mdc containing controls that can be easily connected to rest service based models providing metadata.
	 *
	 * @namespace
	 * @name sap.ui.mdc
	 * @author SAP SE
	 * @version 1.50.6
	 * @public
	 */

	sap.ui.getCore().initLibrary({
		version: "1.50.6",
		name : "sap.ui.mdc",
		dependencies : ["sap.ui.core","sap.m"],
		types: ["sap.ui.mdc.FieldDisplay", "sap.ui.mdc.EditMode"],
		interfaces: [],
		controls: ["sap.ui.mdc.experimental.Field", "sap.ui.mdc.FilterField", "sap.ui.mdc.FilterToken"],
		elements: ["sap.ui.mdc.experimental.FieldHelpBase", "sap.ui.mdc.experimental.CustomFieldHelp"],
		noLibraryCSS: false
	});

	/**
	 * Defines how the fields display text should be formatted.
	 *
	 * @enum {string}
	 * @private
	 * @since 1.48.0
	 */
	sap.ui.mdc.FieldDisplay = {
		/**
		 * Only the value is displayed
		 * @public
		 */
		Value: "Value",
		/**
		 * Only the description is displayed
		 *
		 * if a <code>FieldHelp</code> is assigned to the <code>Field</code> the value is used as key for the <code>FieldHelp</code> items.
		 * @public
		 */
		Description: "Description",
		/**
		 * The value and the description is displayed in the field. The description is displayed after the value with brackets.
		 * @public
		 */
		ValueDescription: "ValueDescription",
		/**
		 * The description and the value is displayed in the field. The value is displayed after the description with brackets.
		 * @public
		 */
		DescriptionValue: "DescriptionValue"
	};

	/**
	 * Defines in what mode Filds are rendered
	 *
	 * @enum {string}
	 * @private
	 * @since 1.48.1
	 */
	sap.ui.mdc.EditMode = {
		/**
		 * Field is rendered in display mode
		 * @public
		 */
		Display: "Display",
		/**
		 * Field is rendered editable
		 * @public
		 */
		Editable: "Editable",
		/**
		 * Field is rendered readonly
		 * @public
		 */
		ReadOnly: "ReadOnly",
		/**
		 * Field is rendered disabled
		 * @public
		 */
		Disabled: "Disabled"
	};

	ProviderHook.apply();

	return sap.ui.mdc;

});

}; // end of sap/ui/mdc/library.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.FilterField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.FilterField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.base.ManagedObjectModel'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/FilterField",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/model/json/JSONModel', './FilterFieldRenderer', 'sap/m/MultiInput', 'sap/ui/mdc/FilterToken', 'sap/ui/model/Filter', 'sap/ui/model/Sorter', "sap/ui/model/base/ManagedObjectModel", "sap/ui/mdc/model/DateRange", 'sap/ui/mdc/library'],
	function(jQuery, Control, JSONModel, FilterFieldRenderer, MultiInput, FilterToken, Filter, Sorter, ManagedObjectModel, DateRange, library) {
		"use strict";

		var EditMode = library.EditMode;

		/**
		 * Constructor for a new FilterField.
		 * A FilterField can be used to create conditions for a ListBinding.
		 * The FilterField publishes its properties and aggregations to the content as a model <code>$filterField</code> to which the internal content can bind.
		 * This model is local to the content aggregation and cannot be used outside the field's context.
		 *
		 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 *
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.50.6
		 *
		 * @constructor
		 * @alias sap.ui.mdc.FilterField
		 * @author SAP SE
		 * @version 1.50.6
		 * @since 1.48.0
		 *
		 * @private
		 * @experimental
		 * @sap-restricted
		 */
		var FilterField = Control.extend("sap.ui.mdc.FilterField", /* @lends sap.ui.mdc.FilterField.prototype */ {
			constructor: function(sId, mSettings) {
				this._oManagedObjectModel = null;
				this._oActiveDelegate = null;
				Control.apply(this, arguments);
			},
			metadata: {
				properties: {

					//TODO
					showValueHelp: {
						type: "boolean",
						group: "Data",
						defaultValue: true
					},

					/**
					 * The data type that should be used for the filter field as defined in the corresponding data model.
					 * A data type should be a simple types class name like "sap.ui.model.type.String". If the data type is not
					 * defined the filter field will not be able to determine the right visualization and might only allow limited functionality.
					 */
					dataType: {
						type: "any",
						group: "Data",
						defaultValue: "sap.ui.model.type.String"
					},

					dataTypeConstraints: {
						type: "object",
						group: "Data",
						defaultValue: null
					},

					dataTypeFormatOptions: {
						type: "object",
						group: "Data",
						defaultValue: null
					},

					/**
					 * Defines the path of the filter field that is used to create and show conditions.
					 * The path normally represents a simple property in the corresponding model that should be used
					 * for filtering. In some cases it could also be required to filter for nested model structures.
					 * In such cases use a path to the property separated by slashes.
					 */
					fieldPath: {
						type: "string",
						group: "Data",
						defaultValue: null
					},

					/**
					 * Defines the width of the filter field.
					 *
					 */
					width: {
						type: "sap.ui.core.CSSSize",
						group: "Dimension",
						defaultValue: "15rem"
					},

					/**
					 * Defines whether the filter field is editable.
					 * @deprecated Since 1.50, use editMode instead.
					 */
					editable: {
						type: "boolean",
						group: "Data",
						defaultValue: true
					},

					/**
					 * Whether the field is editable. Only Editable, ReadOnly and Disabled is supported.
					 */
					editMode: {
						type: "sap.ui.mdc.EditMode",
						group: "Data",
						defaultValue: EditMode.Editable
					},

					/**
					 * Sets the maximum amount of conditions that are allowed for this field.
					 *
					 * The default value of -1 indicates that an unlimited amount of conditions can defined.
					 */
					maxConditions: {
						type: "int",
						group: "Behavior",
						defaultValue: -1
					},

					/**
					 * Defines a short hint intended to aid the user with data entry when the control has no value.
					 */
					placeholder: {
						type: "string",
						group: "Behavior",
						defaultValue: ""
					},

					/**
					 * Indicates that at least one valid condition needs to be contained in the filter field.
					 * TODO: Raise an error for the field if required entry is not fulfilled. To be clarified, when this error should be raised.
					 */
					required: {
						type: "boolean",
						group: "Misc",
						defaultValue: false
					},

					/**
					 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
					 */
					valueState: {
						type: "sap.ui.core.ValueState",
						group: "Appearance",
						defaultValue: sap.ui.core.ValueState.None
					},

					/**
					 * Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
					 */
					valueStateText: {
						type: "string",
						group: "Misc",
						defaultValue: null
					}
				},
				events: {
					/**
					 * This event is fired when the value help is requested.
					 */
					valueHelpRequest: {},
					/**
					 * This event is fired when the value property of the field is changed
					 *
					 * <b>Note</b> This event is only triggered if the used content control has a change event
					 */
					change: {
						parameters: {

							/**
							 * The new added condition object which has been added/removed into/from the ConditionModel.
							 */
							value: { type: "object" },

							/**
							 * The <code>type</code> of the change.
							 */
							type: { type: "string" }, //TODO should be an enum when we know how 

							/**
							 * Flag indicates if the entered <code>value</code> is valid.
							 */
							valid: { type: "boolean" }
						}
					},
					/**
					 * This event is fired when the value of the field is changed - e.g. at each keypress
					 *
					 * <b>Note</b> This event is only triggered if the used content control has a liveChange event
					 */
					liveChange: {
						parameters: {
							/**
							 * The new value of the input.
							 */
							value: { type: "string" },

							/**
							 * Indicate that ESC key triggered the event.
							 */
							escPressed: { type: "boolean" }
						}
					}
				},
				aggregations: {
					_input: {
						type: "sap.ui.core.Control",
						multiple: false,
						hidden: true
					},
					/**
					 * The condition data that is bound to the filter field.
					 *
					 * This aggregation does not support an inner template.
					 * Instead the bound data needs to use the data structure defined by sap.ui.mdc.Condition.
					 */
					conditions: {
						type: "sap.ui.mdc.Condition",
						multiple: true,
						_doesNotRequireFactory: true
					},
					/**
					 * An optional content to visualize the field fields conditions.
					 *
					 * If content is set the filter field suppresses its default rendering and will only render the content.
					 * The content control can make use of the <code>$filterField</code< model to bind to the conditions and to the properties of
					 * the filter field.
					 */
					content: {
						type: "sap.ui.core.Control",
						multiple: false
					}
				},
				publicMethods: [],
				defaultAggregation: "content"
			}
		});

		/**
		 * Returns the FilterOpConfig for the ListBinding, which is filtered by this FilterBar. Only available once model etc. are available.
		 */
		FilterField.prototype.getFilterOperatorConfig = function() {
			if (!this._oFilterOpConfig && this.getBinding("conditions")) {
				var oConditionModel = this.getBinding("conditions").getModel();
				this._oFilterOpConfig = oConditionModel.getFilterOperatorConfig();
			}
			return this._oFilterOpConfig;
		};

		/*
		 * Updates the conditions
		 */
		FilterField.prototype.updateConditions = function() {
			var oBinding = this.getBinding("conditions");
			if (oBinding && this._oManagedObjectModel) {
				//update the model async
				this._oManagedObjectModel.checkUpdate(true, true);

				oBinding.getModel().addFilterField(this);
			}
			return this;
		};

		FilterField.prototype.setWidth = function(sWidth) {
			var sOldWidth = this.getWidth();

			this.setProperty("width", sWidth, true);
			if (sOldWidth != this.getWidth()) {
				var oInner = this.getAggregation("_input");
				if (oInner) {
					//update the inner control properties
					oInner.setWidth(sWidth);
				}
			}

			return this;
		};

		FilterField.prototype.setEditable = function(bEditable) {
			var bOldEditable = this.getEditable();

			this.setProperty("editable", bEditable, true);
			if (bOldEditable != this.getEditable()) {
				var oInner = this.getAggregation("_input");
				if (oInner) {
					//update the inner control properties
					oInner.setEditable(bEditable);
				}
			}

			return this;
		};

		FilterField.prototype.setPlaceholder = function(sPlaceholder) {
			var sOldPlaceholder = this.getPlaceholder();

			this.setProperty("placeholder", sPlaceholder, true);
			if (sOldPlaceholder != this.getPlaceholder()) {
				var oInner = this.getAggregation("_input");
				if (oInner) {
					//update the inner control properties
					oInner.setPlaceholder(sPlaceholder);
				}
			}

			return this;
		};

		FilterField.prototype.setMaxConditions = function(iMaxConditions) {
			// var iOldMaxConditions = this.getMaxConditions();

			this.setProperty("maxConditions", iMaxConditions, true);
			// if (iOldMaxConditions != this.getMaxConditions()) {
			// 	var oInner = this.getAggregation("_input");
			// 	if (oInner) {
			// 		//update the inner control properties
			// 		oInner.setMaxTokens(iMaxConditions > 0 ? iMaxConditions : 0);
			// 	}
			// }

			return this;
		};

		FilterField.prototype.setRequired = function(bRequired) {
			var bOldRequired = this.getRequired();

			this.setProperty("required", bRequired, true);
			if (bOldRequired != this.getRequired()) {
				var oInner = this.getAggregation("_input");
				if (oInner) {
					//update the inner control properties
					oInner.setRequired(bRequired);
				}
			}

			return this;
		};

		/*
		 * Overwrite if bind aggregation for special handling of condition aggregation
		 * Filter is created and added, also sorter for position.
		 * Custom sorter and filter are still used
		 *
		 * @see sap.ui.base.ManagedObject#bindAggregation
		 *
		 * @param {string} sName the name of the aggregation
		 * @param {object} sName the name of the aggregation
		 *
		 * @returns {sap.ui.mdc.FilterField} Returns <code>this</code> to allow method chaining
		 *
		 * @private
		 */
		FilterField.prototype.bindAggregation = function(sName, oBindingInfo) {
			if (sName === "conditions") {
				var sFieldPath = this.getFieldPath();
				if (sFieldPath && !oBindingInfo.filters) {
					oBindingInfo.filters = new sap.ui.model.Filter({ path: "fieldPath", test: this._matchFieldPath.bind(this) });
				}
				if (!oBindingInfo.sorter) {
					oBindingInfo.sorter = new sap.ui.model.Sorter("position", false);
				}
			}
			return Control.prototype.bindAggregation.apply(this, [sName, oBindingInfo]);
		};

		FilterField.prototype._matchFieldPath = function(vValue) {
			var sFieldPath = this.getFieldPath().toUpperCase();
			return sFieldPath === vValue;
		};

		/*
		 * Sets the field name. The bound list of conditions is filtered by the field name. If no field name is given
		 * the filter fields displays all conditions of the bound condition list.
		 * @param {string} sValue the value for the fields name.
		 * @returns {sap.ui.mdc.FilterField} Returns <code>this</code> to allow method chaining
		 *@pubic
		 */
		FilterField.prototype.setFieldPath = function(sValue) {
			var sOld = this.getFieldPath();
			this.setProperty("fieldPath", sValue);
			if (sOld !== this.getFieldPath() && this.mBindingInfos["conditions"]) {
				var oFilter = new Filter({
					path: "fieldPath",
					test: this._matchFieldPath.bind(this)
				});

				var oBinding = this.getBinding("conditions");
				if (oBinding) {
					oBinding.filter(oFilter);
				} else {
					this.mBindingInfos["conditions"].filters = oFilter;
				}
			}

			// if (sOld !== this.getFieldPath()) {
			// 	this.bindProperty("valueState", { path: "sap.fe.cm>/fieldPath/" + sValue + "/valueState", mode: "OneWay"});
			// 	this.bindProperty("valueStateText", { path: "sap.fe.cm>/fieldPath/" + sValue + "/valueStateText", mode: "OneWay"});
			// }
			return this;
		};


		/**
		 * Handles the change of a token text from within the MultiInput.
		 * @param {jQuery.Event} oEvent The event object.
		 * @private
		 */
		FilterField.prototype._handleTokenContentChange = function(oEvent) {
			//TODO tokens are not editable currently and the old code does notwork....

			// var oToken = oEvent.getSource(),
			// 	oBinding = this.getBinding("conditions"),
			// 	sValue = oEvent.getParameter("text").trim(),
			// 	oType = this._getDataType(),
			// 	type = oType.getMetadata().getName();


			// // find the suitable operators
			// var aOperators = this.getFilterOperatorConfig().getMatchingOperators(type, sValue),
			// 	oOperator;

			// // use default operator if nothing found
			// if (aOperators.length === 0) {
			// 	// default operation
			// 	var sDefaultOperator = this.getFilterOperatorConfig().getDefaultOperator(type);
			// 	var oDefaultOperator = this.getFilterOperatorConfig().getOperator(sDefaultOperator);
			// 	sValue = oDefaultOperator.format([sValue]);
			// 	if (oDefaultOperator && oDefaultOperator.test(sValue, oType)) { // ????
			// 		oOperator = oDefaultOperator;
			// 	}
			// } else {
			// 	oOperator = aOperators[0]; // TODO: multiple matches?
			// }

			// // if operator has been found, modify the condition belonging to this token
			// if (oOperator) {
			// 	var oCondition = oOperator.getCondition(sValue, oType);
			// 	oCondition.fieldPath = this.getFieldPath();

			// 	//oBinding.getModel().setProperty(oTokenBindingPath, oCondition, oBinding.getContext());

			// 	// TODO: can't get the condition object in the real model somehow, hence update its data in the binding  FIXME
			// 	var oModelCondition = oToken.getBinding("text").getValue();
			// 	oModelCondition.operator = oCondition.operator;
			// 	oModelCondition.values = oCondition.values;

			// 	// update the model async
			// 	oBinding.getModel().checkUpdate(true, true);

			// } else {
			// 	// if no operator matches, reset token to previous value
			// 	oToken.setText(oEvent.getParameter("oldText")); // TODO: set?
			// }
		};

		/**
		 * Handle the token change or token update event from an inner MultiInput.
		 * It removes the corresponding items from the model or adds a token if the entered text is valid.
		 * @param {jQuery.Event} oEvent The event object.
		 * @private
		 */
		FilterField.prototype._handleTokenChange = function(oEvent) {
			var sEvent = oEvent.getId(),
				sValue,
				oBinding,
				oCondition,
				aOperators, oNewOperator, oOperator;

			// jQuery.sap.log.info("mdc:FilterField", "_handleTokenChange for " + sEvent);

			if (sEvent === "tokenUpdate") {
				if (oEvent.getParameter("type") === "added") {
					sEvent = "change";
					sValue = oEvent.getParameter("addedTokens")[0].getText().trim(); //TODO only one added token wil be handled
				}
				if (oEvent.getParameter("type") === "removed") {
					var aRemovedTokens = oEvent.getParameter("removedTokens"),
						aContexts = [];
					aRemovedTokens.forEach(function(o) {
						aContexts.push(o.getBindingContext("$filterField"));
					});
					oBinding = this.getBinding("conditions");
					oBinding.getModel().deleteConditions(aContexts, oBinding);
				}
			}


			if (sEvent === "change") {
				jQuery.sap.log.info("mdc:FilterField", "_handleTokenChange for " + sEvent);

				var oSource = oEvent.getSource(),
					oType = this._getDataType(),
					type = oType.getMetadata().getName();

				// incase of an open suggest with one visible item we cancel the change handle and wait for the validate call of the input
				if (oSource._getIsSuggestionPopupOpen && oSource._getIsSuggestionPopupOpen()) {
					var aSuggestionItems = oSource.getSuggestionRows();
					var i = 0;
					aSuggestionItems.forEach(function(oItem) {
						if (oItem.getVisible()) {
							i++;
						}
					});
					if (i === 1) {
						return;
					}
				}


				oBinding = this.getBinding("conditions");

				if (oSource instanceof sap.m.Select) {
					sValue = oEvent.getParameter("selectedItem").getText();
				} else {
					sValue = sValue || oEvent.getParameter("value");
					sValue = sValue.trim();
				}

				jQuery.sap.log.info("mdc:FilterField", "_handleTokenChange sValue " + sValue);

				if (!sValue) {
					if (oSource instanceof sap.m.MultiInput) {
						// oSource.setValue("");
					} else if (this.getMaxConditions() >= 0 && oBinding.getModel().getConditions(this.getFieldPath()).length > 0) {
						oBinding.getModel().removeCondition(this.getFieldPath(), 0);
					}

					oBinding.getModel().removeUIMessage(this.getFieldPath());
					return;
				}

				if (oSource instanceof sap.m.DateRangeSelection) {
					oOperator = this.getFilterOperatorConfig().getOperator("BT");
					sValue = sValue.replace(" - ", "...");
					oCondition = oOperator.getCondition(sValue, oType);
					if (oCondition) {
						oCondition.fieldPath = this.getFieldPath();
						oBinding.getModel().addCondition(oCondition);
						this.fireChange({ value: oCondition, type: "added", valid: true });

						if (this.getMaxConditions() >= 0 && oBinding.getModel().getConditions(this.getFieldPath()).length > 1) {
							oBinding.getModel().removeCondition(this.getFieldPath(), 0);
						}
						return;
					}
				}

				// find the suitable operators
				aOperators = this.getFilterOperatorConfig().getMatchingOperators(type, sValue);

				// use default operator if nothing found
				if (aOperators.length === 0) {
					// default operation
					var sDefaultOperator = this.getFilterOperatorConfig().getDefaultOperator(type);
					oNewOperator = this.getFilterOperatorConfig().getOperator(sDefaultOperator);
					sValue = oNewOperator.format([sValue]);
				} else {
					oNewOperator = aOperators[0]; // TODO: multiple matches?
				}

				try {
					if (oNewOperator && oNewOperator.test(sValue, oType)) {
						oOperator = oNewOperator;
						oBinding.getModel().removeUIMessage(this.getFieldPath());
					}
				} catch (err) {
					oBinding.getModel().setUIMessage(this.getFieldPath(), err.message);
				}


				if (oOperator) {
					oCondition = oOperator.getCondition(sValue, oType);
					if (oCondition) {
						oCondition.fieldPath = this.getFieldPath();
						oBinding.getModel().addCondition(oCondition);
						this.fireChange({ value: oCondition, type: "added", valid: true });

						if (oSource instanceof sap.m.MultiInput) {
							oSource.setValue("");
						}
						if (oSource instanceof sap.m.Select || oSource instanceof sap.m.DatePicker || oSource instanceof sap.m.TimePicker) {
							if (this.getMaxConditions() >= 0 && oBinding.getModel().getConditions(this.getFieldPath()).length > 1) {
								oBinding.getModel().removeCondition(this.getFieldPath(), 0);
							}
						}
					}
				}
			}
		};

		//TODO: does not return the aggregation what might be strange for the API (getter should return what is set)
		/*
		 * Returns the currently bound conditions
		 * The method is used by the managed object model to retrieve the data for the inner control.
		 * It needs to pass on the data as an array as we do not have other instances.
		 * TODO: It might be nice to get the list of data from the binding as well.
		 */
		FilterField.prototype.getConditions = function() {
			if (this.getBinding("conditions")) {
				var aContexts = this.getBinding("conditions").getContexts(),
					aData = [];
				for (var i = 0; i < aContexts.length; i++) {
					aData.push(aContexts[i].getProperty());
				}
				return aData;
			}
			return [];
		};

		var formatOperator = function(oContext) { // oContext is a condition
			var sResult = "";
			if (oContext) {
				var oOperator = this.getFilterOperatorConfig().getOperator(oContext.operator);
				var aValues = oContext.values;
				sResult = oOperator.format(aValues, oContext, this._getDataType());
			}
			return sResult;
		};

		/**
		 * Creates the default MultiInput for the FilterField
		 * @returns {sap.ui.core.Control} input control
		 * @private
		 */
		FilterField.prototype._getDefaultInput = function() {
			var oControl;

			if (!this.getAggregation("_input")) {

				if (this.getProperty("dataType").indexOf("Boolean") > -1 && this.getMaxConditions() === 1) {
					//TODO checking the Type via getType does not work because the _createType at this point of time fails.

					// if (this._getDataType().getMetadata().getName() === "sap.ui.model.type.Boolean") {
					// var oCombo = new sap.m.ComboBox(this.getId() + "-inner", {
					oControl = new sap.m.Select(this.getId() + "-inner", {
						//editable: this.getEditable(),
						width: this.getWidth(),
						//placeholder: this.getPlaceholder(),
						//required: this.getRequired(),
						selectedKey: "{$filterField>conditions/0/values/0}",
						valueState: { path: "$filterField>/valueState", mode: "OneWay" },
						valueStateText: { path: "$filterField>/valueStateText", mode: "OneWay" },
						items: [new sap.ui.core.Item({
							key: "",
							text: ""
						}), new sap.ui.core.Item({
							key: false,
							text: this._getDataType().formatValue(false, "string")
						}), new sap.ui.core.Item({
							key: true,
							text: this._getDataType().formatValue(true, "string")
						})]
					});

				} else if (this.getProperty("dataType").indexOf(".Time") > -1 && this.getMaxConditions() === 1) {
					oControl = new sap.m.TimePicker(this.getId() + "-inner", {
						editable: { path: "$filterField>editMode", formatter: _getEditable },
						enabled: { path: "$filterField>editMode", formatter: _getEnabled },
						width: "{$filterField>width}",
						required: "{$filterField>required}",
						// dateValue : { path: "$filterField>conditions/0/values/0", mode: "OneWay" }
						value: { path: "$filterField>conditions/0/values/0", type: this._getDataType(), mode: "OneWay" },
						valueState: { path: "$filterField>/valueState", mode: "OneWay" },
						valueStateText: { path: "$filterField>/valueStateText", mode: "OneWay" }
					});

				} else if (this.getProperty("dataType").indexOf("Date") > -1 && this.getMaxConditions() === 1) {
					oControl = new sap.m.DatePicker(this.getId() + "-inner", {
						editable: { path: "$filterField>editMode", formatter: _getEditable },
						enabled: { path: "$filterField>editMode", formatter: _getEnabled },
						width: "{$filterField>width}",
						required: "{$filterField>required}",
						value: { path: "$filterField>conditions/0/values/0", type: this._getDataType(), mode: "OneWay" },
						valueState: { path: "$filterField>/valueState", mode: "OneWay" },
						valueStateText: { path: "$filterField>/valueStateText", mode: "OneWay" }
					});

				} else if (this.getProperty("dataType").indexOf("Date") > -1 && this.getMaxConditions() === 2) {
					oControl = new sap.m.DateRangeSelection(this.getId() + "-inner", {
						// change: this._handleTokenChange.bind(this),
						editable: { path: "$filterField>editMode", formatter: _getEditable },
						enabled: { path: "$filterField>editMode", formatter: _getEnabled },
						width: "{$filterField>width}",
						required: "{$filterField>required}",
						value: {
							parts: [{
									path: "$filterField>conditions/0/values/0",
									type: this._getDataType()
								},
								{
									path: "$filterField>conditions/0/values/1",
									type: this._getDataType()
								}
							],
							mode: "OneWay",
							type: "sap.ui.mdc.model.DateRange"
						},
						valueState: { path: "$filterField>/valueState", mode: "OneWay" },
						valueStateText: { path: "$filterField>/valueStateText", mode: "OneWay" }
					});


				} else {

					//TODO: clean this up and move to a default fragment similar to FieldHelp
					//With that the default content fragment can be configured.
					var oTokenBindingInfo = {};
					oTokenBindingInfo.path = "conditions";
					oTokenBindingInfo.model = "$filterField";
					oTokenBindingInfo.template = new FilterToken({
						// changeable: this.getEditable(),
						tokenChanged: this._handleTokenContentChange.bind(this),
						text: {
							path: '$filterField>',
							formatter: formatOperator.bind(this)
						},
						tooltip: {
							path: '$filterField>',
							formatter: formatOperator.bind(this)
						}
					});
					oTokenBindingInfo.templateShareable = false;


					//settings for the multi input
					oControl = new MultiInput(this.getId() + "-inner", {
						tokens: oTokenBindingInfo,
						editable: { path: "$filterField>editMode", formatter: _getEditable },
						enabled: { path: "$filterField>editMode", formatter: _getEnabled },
						width: "{$filterField>width}", //this.getWidth(),
						required: "{$filterField>required}", //this.getRequired(),
						placeholder: "{$filterField>placeholder}", //this.getPlaceholder(),
						enableMultiLineMode: true,
						showSuggestion: false,
						valueState: { path: "$filterField>/valueState", mode: "OneWay" },
						valueStateText: { path: "$filterField>/valueStateText", mode: "OneWay" },
						showValueHelp: "{$filterField>showValueHelp}" //this.getShowValueHelp()
					});

					oControl.attachTokenUpdate(this._handleTokenChange, this);
					oControl.attachTokenChange(this._handleTokenChange, this);
					oControl.attachValueHelpRequest(this.fireValueHelpRequest, this);
					oControl.attachLiveChange(this._handleContentLiveChange, this);

					//update tokens is not necessary
					//TODO: check why there is a destroy of all tokens necessary in updateTokens in default implementation
					oControl.updateTokens = null;
				}

				oControl.attachChange(this._handleTokenChange, this);
				this.setAggregation("_input", oControl);
				this._input = oControl;
				this._activateManagedObjectModel();
			}

			return this.getAggregation("_input");
		};

		function _getEditable(sEditMode) {

			if (sEditMode && sEditMode == EditMode.Editable) {
				return true;
			} else {
				return false;
			}

		}

		function _getEnabled(sEditMode) {

			if (sEditMode && sEditMode != EditMode.Disabled) {
				return true;
			} else {
				return false;
			}

		}

		FilterField.prototype._handleContentLiveChange = function(oEvent) {

			var vValue;
			var bEscPressed = false;

			if ("value" in oEvent.getParameters()) {
				vValue = oEvent.getParameter("value");
			}

			if ("escPressed" in oEvent.getParameters()) {
				bEscPressed = oEvent.getParameter("escPressed");
			}

			// if ("previousValue" in oEvent.getParameters()) {
			// 	vPreviousValue = oEvent.getParameter("previousValue");
			// } else {
			// 	vPreviousValue = this.getValue();
			// }

			this.fireLiveChange({ value: vValue, escPressed: bEscPressed });
		};

		//TODO: returns an Input is no content is set - makes API behave strange
		/*
		 * Returns the current content of the filter field
		 * @returns {sap.ui.core.Control} the currently used content control.
		 */
		FilterField.prototype.getContent = function() {
			if (!this.getAggregation("content")) {
				return this._getDefaultInput();
			}
			return this.getAggregation("content");
		};

		/**
		 * During cloning the internal event handlers of the _input aggregations point to the wrong control
		 */
		FilterField.prototype.clone = function() {

			if (this._input) {
				// detach all events as they will be handled incorrect in cloning
				this._input.detachChange(this._handleTokenChange, this);
				this._input.detachTokenUpdate(this._handleTokenChange, this);
				this._input.detachTokenChange(this._handleTokenChange, this);
				this._input.detachValueHelpRequest(this.fireValueHelpRequest, this);

				var oTemplateToken = this._input.getBindingInfo("tokens").template;
				if (oTemplateToken) {
					oTemplateToken.detachTokenChanged(this._handleTokenContentChange, this);
				}

				var oClone = Control.prototype.clone.apply(this, arguments);

				// attach the events again
				if (oTemplateToken) {
					oTemplateToken.attachTokenChanged(this._handleTokenContentChange, this);
				}

				this._input.attachChange(this._handleTokenChange, this);
				this._input.attachTokenUpdate(this._handleTokenChange, this);
				this._input.attachTokenChange(this._handleTokenChange, this);
				this._input.attachValueHelpRequest(this.fireValueHelpRequest, this);

				var oCloneInput = oClone.getAggregation("_input");

				oCloneInput.attachChange(oClone._handleTokenChange, oClone);
				oCloneInput.attachTokenUpdate(oClone._handleTokenChange, oClone);
				oCloneInput.attachTokenChange(oClone._handleTokenChange, oClone);
				oCloneInput.attachValueHelpRequest(oClone.fireValueHelpRequest, oClone);

				var oCloneTemplateToken = oCloneInput.getBindingInfo("tokens").template;
				if (oCloneTemplateToken) {
					oCloneTemplateToken.attachTokenChanged(oClone._handleTokenContentChange, oClone);
				}
			}

			//else case tbd

			return oClone;
		};

		/*
		 * Sets the content for the filter field, activates the control tree model.
		 * The inner control can bind the properties and aggregations to the "$filterField" model that is available on the content.
		 * TODO: Use the driver for the most common settings ??
		 *
		 * @param {sap.ui.core.Control} oControl the control that should be used as content.
		  @returns {sap.ui.mdc.FilterField} Returns <code>this</code> to allow method chaining
		 */
		FilterField.prototype.setContent = function(oControl) {
			this._deactivateManagedObjectModel();
			this.setAggregation("content", oControl);
			this._activateManagedObjectModel();
			return this;
		};

		FilterField.prototype.destroyContent = function() {
			this._deactivateManagedObjectModel();
			this.destroyAggregation("content");
			this._activateManagedObjectModel();
			return this;
		};

		/**
		 * An inner control can bind its properties to the content of the condition structure, array with sub objects.
		 * Changes on the inner properties will result in property changes within the control tree model but are missing
		 * a corresponding aggregation. Here the propertyChange event of the JSONPropertyBinding can be used to
		 * trigger an update on the condition data structure.
		 * @param {jQuery.Event} oEvent The event object.
		 */
		FilterField.prototype._updateConditionModel = function(oEvent) {
			var oBinding = this.getBinding("conditions");
			if (oBinding && oEvent.getParameter("resolvedPath").indexOf("/conditions") === 0) {
				//do an async update of the condition model to avoid recursion
				oBinding.getModel().checkUpdate(true, true);
			}
		};

		// *** ManagedObjectModel handling for content ***
		FilterField.prototype._activateManagedObjectModel = function() {
			var oContent = this.getContent();
			if (oContent) {
				if (!this._oManagedObjectModel) {
					this._oManagedObjectModel = new ManagedObjectModel(this);
					this._oManagedObjectModel.setSizeLimit(1000);
					this._oManagedObjectModel.attachEvent("propertyChange", this._updateConditionModel.bind(this));
				}
				oContent.setModel(this._oManagedObjectModel, "$filterField");
				oContent.bindElement({ path: "/", model: "$filterField" });

			}
		};

		FilterField.prototype._deactivateManagedObjectModel = function() {
			var oContent = this.getContent();
			if (oContent) {
				oContent.unbindElement("$filterField");
				this._oManagedObjectModel.destroy();
				this._oManagedObjectModel = null;
			}
		};

		FilterField.prototype.setParent = function() {
			Control.prototype.setParent.apply(this, arguments);
			if (!this.getParent()) {
				this._deactivateManagedObjectModel();
			} else {
				this._activateManagedObjectModel();
			}
		};

		FilterField.prototype.setDataType = function(vValue) {
			delete this._oDataType;
			this.setProperty("dataType", vValue, true);
		};

		FilterField.mapEdmTypes = {
			"Edm.Boolean": "sap.ui.model.odata.type.Boolean",
			"Edm.Byte": "sap.ui.model.odata.type.Byte",
			"Edm.Date": "sap.ui.model.odata.type.Date", // V4 Date
			"Edm.DateTime": "sap.ui.model.odata.type.DateTime", // only for V2  constraints: {displayFormat: 'Date' }
			"Edm.DateTimeOffset": "sap.ui.model.odata.type.DateTimeOffset", //constraints: { V4: true, precision: n }
			"Edm.Decimal": "sap.ui.model.odata.type.Decimal", //constraints: { precision, scale, minimum, maximum, minimumExclusive, maximumExclusive}
			"Edm.Double": "sap.ui.model.odata.type.Double",
			"Edm.Float": "sap.ui.model.odata.type.Single",
			"Edm.Guid": "sap.ui.model.odata.type.Guid",
			"Edm.Int16": "sap.ui.model.odata.type.Int16",
			"Edm.Int32": "sap.ui.model.odata.type.Int32",
			"Edm.Int64": "sap.ui.model.odata.type.Int64",
			//Edm.Raw not supported
			"Edm.SByte": "sap.ui.model.odata.type.SByte",
			"Edm.Single": "sap.ui.model.odata.type.Single",
			"Edm.String": "sap.ui.model.odata.type.String", //constraints: {maxLength, isDigitSequence}
			"Edm.Time": "sap.ui.model.odata.type.Time", // only V2
			"Edm.TimeOfDay": "sap.ui.model.odata.type.TimeOfDay" // V4 constraints: {precision}
		};

		FilterField.prototype._createDataType = function(sType) {
			var OTypeClass = jQuery.sap.getObject(sType);
			if (!OTypeClass) {
				var oFilterOperatorConfig = this.getFilterOperatorConfig(),
					sNewType;
				if (oFilterOperatorConfig) {
					sNewType = oFilterOperatorConfig.getParentType(sType);
				} else {
					sNewType = FilterField.mapEdmTypes[sType];
				}
				if (!sNewType) {
					jQuery.sap.log.error("FilterField", "dataType for " + sType + " can not be created!");
					return null;
				}
				return this._createDataType(sNewType);
			}
			// if (this.getFieldPath() === "LegalTransaction") {
			// this.setDataTypeConstraints({isDigitSequence: true, maxLength:10 });
			// this.setRequired(true);
			// }
			return new OTypeClass(this.getDataTypeFormatOptions(), this.getDataTypeConstraints());
		};

		FilterField.prototype._getDataType = function(sType) {
			if (!this._oDataType) {
				this._oDataType = this.getProperty("dataType");
				if (typeof this._oDataType === "string") {
					this._oDataType = this._createDataType(this._oDataType);
				}
			}
			return this._oDataType;
		};

		return FilterField;

	}, /* bExport= */ true);
}; // end of sap/ui/mdc/FilterField.js
if ( !jQuery.sap.isDeclared('sap.ui.mdc.experimental.Field') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.mdc.experimental.Field'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.base.ManagedObjectModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.BindingMode'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
sap.ui.define("sap/ui/mdc/experimental/Field",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/model/base/ManagedObjectModel',
	'sap/ui/model/BindingMode', 'sap/m/Input', 'sap/m/Text', 'sap/ui/mdc/library'
], function(jQuery, Control, ManagedObjectModel, BindingMode, Input, Text, library) {
	"use strict";

	var DatePicker;
	var DateTimePicker;
	var TimePicker;
	var EditMode = library.EditMode;
	var FieldDisplay = library.FieldDisplay;

	/**
	 * Constructor for a new Field.
	 * A Field can be used to bind its value to data of certain data type. Based on the data type settings, a default
	 * visualization is done by the Field.
	 * The field publishes its properties to the content as a model <code>$field</code> to which the internal content can bind.
	 * This model is local to the content and cannot be used outside the fields context.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 *
	 * @extends sap.ui.core.Control
	 * @implements sap.ui.core.IFormContent
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 *
	 * @constructor
	 * @alias sap.ui.mdc.experimental.Field
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.48.1
	 *
	 * @private
	 * @experimental
	 */
	var Field = Control.extend("sap.ui.mdc.experimental.Field", /* @lends sap.ui.mdc.Field.prototype */ {
		metadata: {
			interfaces: ["sap.ui.core.IFormContent"],
			library: "sap.ui.mdc",
			properties: {
				/**
				 * The value of the field
				 *
				 */
				value: {
					type: "any",
					defaultValue: null
				},
				/**
				 * the additional value of the field.
				 *
				 * Depending on the dataType this could be an description, a unit, a key....
				 */
				additionalValue: {
					type: "any",
					defaultValue: null
				},
				/**
				 * The datatype for the field visualization
				 */
				dataType: {
					type: "string",
					group: "Data",
					defaultValue: 'sap.ui.model.type.String'
				},

				dataTypeConstraints: {
					type: "object",
					group: "Data",
					defaultValue: null
				},

				dataTypeFormatOptions: {
					type: "object",
					group: "Data",
					defaultValue: null
				},

				/**
				 * The width of the field
				 */
				width: {
					type: "sap.ui.core.CSSSize",
					group: "Dimension",
					defaultValue: ""
				},

				/**
				 * Whether the field is editable.
				 */
				editMode: {
					type: "sap.ui.mdc.EditMode",
					group: "Data",
					defaultValue: EditMode.Editable
				},

				/**
				 * Whether the field is required.
				 * TODO: create a type FieldControl (auto, false, true) false might lead to error
				 */
				required: {
					type: "boolean",
					group: "Data",
					defaultValue: false
				},

				/**
				 * Icon to be displayed as graphical element before the field.
				 * This can be an image or an icon from the icon font.
				 */
				icon: {
					type: "sap.ui.core.URI",
					group: "Appearance",
					defaultValue: null
				},

				/**
				 * Defines whether the value and/or description of the field is shown.
				 */
				display: {
					type: "sap.ui.mdc.FieldDisplay",
					defaultValue: FieldDisplay.Value
				},

				/**
				 * Defines the horizontal alignment of the text that is shown inside the input field.
				 */
				textAlign: {
					type: "sap.ui.core.TextAlign",
					group: "Appearance",
					defaultValue: sap.ui.core.TextAlign.Initial
				},

				/**
				 * Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code>
				 */
				textDirection: {
					type: "sap.ui.core.TextDirection",
					group: "Appearance",
					defaultValue: sap.ui.core.TextDirection.Inherit
				},

				/**
				 * Defines a short hint intended to aid the user with data entry when the control has no value.
				 * If the value is null no placeholder is shown.
				 */
				placeholder: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
				 */
				valueState: {
					type: "sap.ui.core.ValueState",
					group: "Appearance",
					defaultValue: sap.ui.core.ValueState.None
				},

				/**
				 * Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
				 */
				valueStateText: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			},
			events: {
//				/**
//				 * To be used to validate the value CTRL+K checks the values against the constraints.
//				 * This is also fired before a value is put to the data model
//				 */
//				validate: {
//
//				},
				/**
				 * This event is fired when the value property of the field is changed
				 *
				 * <b>Note</b> This event is only triggered if the used content control has a change event
				 */
				change: {
					parameters: {

						/**
						 * The new <code>value</code> of the <code>control</code>.
						 */
						value: { type: "string" },

						/**
						 * Flag indecates if the entered <code>value</code> is valid.
						 */
						valid: { type: "boolean" }
					}
				},
				/**
				 * This event is fired when the value of the field is changed - e.g. at each keypress
				 *
				 * <b>Note</b> This event is only triggered if the used content control has a liveChange event
				 */
				liveChange : {
					parameters : {
						/**
						 * The new value of the input.
						 */
						value : {type : "string"},

						/**
						 * Indicate that ESC key triggered the event.
						 * @since 1.48
						 */
						escPressed : {type : "boolean"},

						/**
						 * The value of the input before pressing ESC key.
						 * @since 1.48
						 */
						previousValue : {type : "string"}
					}
				},
				/**
				 * Change event if the value is the data changed successfully. If value is not data bound the event is
				 */
				dataChanged: {}
			},
			aggregations: {
				/**
				 * optional content to be bound to the value of the field
				 */
				content: {
					type: "sap.ui.core.Control",
					multiple: false
				},

				/**
				 * internal content if no control given
				 */
				_content: {
					type: "sap.ui.core.Control",
					multiple: false,
					visibility: "hidden"
				},

				/**
				 * optional FieldHelp
				 */
				fieldHelp: {
					type: "sap.ui.mdc.experimental.FieldHelpBase",
					multiple: false
				}
			},
			associations: {
				/**
				 * Association to controls / IDs that label this control (see WAI-ARIA attribute aria-labelledby).
				 */
				ariaLabelledBy: { type: "sap.ui.core.Control", multiple: true, singularName: "ariaLabelledBy" }
			},
			publicMethods: [],
			defaultAggregation: "content",
			defaultProperty: "value"
		},
		_oManagedObjectModel: null
	});

	Field.prototype.init = function() {

		this._oManagedObjectModel = new ManagedObjectModel(this);

	};

	Field.prototype.exit = function() {

		this._oManagedObjectModel.destroy();
		delete this._oManagedObjectModel;

	};

	Field.prototype.onBeforeRendering = function() {

		// determine internal control
		_createInternalContent.call(this);

	};

	Field.prototype.setValue = function(vValue) {

		this.setProperty("value", vValue);

		_setAdditionalValueFromKey.call(this, vValue);

		return this;

	};

	Field.prototype.setDisplay = function(sDisplay) {

		this.setProperty("display", sDisplay);

		_setAdditionalValueFromKey.call(this, this.getValue());

		return this;

	};

	function _setAdditionalValueFromKey(sKey) {

		if (!this.isBound("additionalValue")) {
			var oFieldHelp = this.getFieldHelp();
			if (oFieldHelp && this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
				var sAdditionalValue;
				if (sKey) {
					sAdditionalValue = oFieldHelp.getTextforKey(sKey);
				}
				this.setAdditionalValue(sAdditionalValue);
			}
		}

	}

	Field.formatText = _formatText;

	function _createInternalContent() {

		if (!this._getContent()) {
			var sEditMode = this.getEditMode();
			var sDataType = this.getDataType();
			var oControl;
			var sId = this.getId() + "-inner";

			switch (sEditMode) {
				case EditMode.Display:
					switch (sDataType) {
						case "Edm.Date":
						case "Edm.DateTimeOffset":
						case "Edm.TimeOfDay":
							oControl = new Text(sId, {
								text: { path: "$field>value", type: this._getDataType() },
								textAlign: "{$field>textAlign}",
								textDirection: "{$field>textDirection}",
								wrapping: false
							});
							break;

						default:
							oControl = new Text(sId, {
								text: { parts: [{ path: "$field>value" }, { path: "$field>additionalValue" }, { path: "$field>display" }], formatter: _formatText },
								textAlign: "{$field>textAlign}",
								textDirection: "{$field>textDirection}",
								wrapping: false
							});
							break;
					}
					break;

				default:
					switch (sDataType) {
						case "Edm.Date":
							oControl = _createDatePicker.call(this, sId);
							break;

						case "Edm.DateTimeOffset":
							oControl = _createDateTimePicker.call(this, sId);
							break;

						case "Edm.TimeOfDay":
							oControl = _createTimePicker.call(this, sId);
							break;

						default:
							var sPath = "$field>value";
							if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
								sPath = "$field>additionalValue";
							}
							oControl = new Input(sId, {
//								value: "{$field>value}",
								value: {path: sPath},
								placeholder: "{$field>placeholder}",
								textAlign: "{$field>textAlign}",
								textDirection: "{$field>textDirection}",
								required: "{$field>required}",
								editable: { path: "$field>editMode", formatter: _getEditable },
								enabled: { path: "$field>editMode", formatter: _getEnabled },
								valueState: "{$field>valueState}", // TODO: own ValueState handling?
								valueStateText: "{$field>valueStateText}",
								showValueHelp: !!this.getFieldHelp(),
								change: _handleContentChange.bind(this),
								liveChange: _handleContentLiveChange.bind(this),
								valueHelpRequest: _handleValueHelpRequest.bind(this)
							});
							break;
					}
					break;
			}

			if (oControl) {
				this.setAggregation("_content", oControl, true);
				_setModelOnContent.call(this, oControl);
			}
		}

	}

	Field.prototype._getContent = function() {

		return this.getContent() || this.getAggregation("_content");

	};

	function _getEditable(sEditMode) {

		if (sEditMode && sEditMode == EditMode.Editable) {
			return true;
		} else {
			return false;
		}

	}

	function _getEnabled(sEditMode) {

		if (sEditMode && sEditMode != EditMode.Disabled) {
			return true;
		} else {
			return false;
		}

	}

	function _formatText(sValue, sAdditionalValue, sDisplay) {
		//format the values in align with UX
		var sFormattedValue = sValue ? sValue : "";//may be changed to -
		var sFormattedAdditionalValue = sAdditionalValue ? sAdditionalValue : "";//may be changed to -

		var sFormattedText = "";

		switch (sDisplay) {
			case FieldDisplay.Description:
				sFormattedText = sFormattedAdditionalValue;
				break;
			case FieldDisplay.ValueDescription:
				sFormattedText = sFormattedValue + " (" + sFormattedAdditionalValue + ")";
				break;
			case FieldDisplay.DescriptionValue:
				sFormattedText = sFormattedAdditionalValue + " (" + sFormattedValue + ")";
				break;
			default: // Value
				sFormattedText = sFormattedValue;
		}

		//remove empty brakets
		if (sFormattedText.replace) {
			sFormattedText = sFormattedText.replace(" ()", "");
		}

		return sFormattedText;

	}

	// function _formatDate(oDate) {

	// 	if (oDate instanceof Date) {
	// 		if (!this._oDateFormat) {
	// 			var fnDateFormat = sap.ui.require("sap/ui/model/type/Date");
	// 			if (fnDateFormat) {
	// 				_createDateFormat.call(this, fnDateFormat);
	// 			} else {
	// 				this._oDate = oDate;
	// 				sap.ui.require(["sap/ui/model/type/Date"], _createDateFormat.bind(this));
	// 			}
	// 		}
	// 		if (this._oDateFormat) {
	// 			return this._oDateFormat.format(oDate);
	// 		} else {
	// 			return oDate;
	// 		}
	// 	} else {
	// 		return oDate;
	// 	}

	// }

	// function _createDateFormat(DateFormat) {
	// 	this._oDateFormat = sap.ui.core.format.DateFormat.getInstance();
	// 	if (this._oDate) {
	// 		// format date async
	// 		var oControl = this.getAggregation("_content");
	// 		oControl.setText(this._oDateFormat.format(this._oDate));
	// 		delete this._oDate;
	// 	}
	// }

	function _createDatePickerControl(DatePicker, sId) {

		var oDatePicker = new DatePicker(sId, {
			value: { path: "$field>value", type: this._getDataType() },
			placeholder: "{$field>placeholder}",
			textAlign: "{$field>textAlign}",
			textDirection: "{$field>textDirection}",
			required: "{$field>required}",
			editable: { path: "$field>editMode", formatter: _getEditable },
			enabled: { path: "$field>editMode", formatter: _getEnabled },
			valueState: "{$field>valueState}", // TODO: own ValueState handling?
			valueStateText: "{$field>valueStateText}",
			width: "100%",
			change: _handleContentChange.bind(this)
		});

		return oDatePicker;

	}

	function _createDatePickerAsync(DatePicker) {

		var sId = this.getId() + "-inner";
		var oDatePicker = _createDatePickerControl.call(this, DatePicker, sId);

		this.setAggregation("_content", oDatePicker);
		_setModelOnContent.call(this, oDatePicker);

	}

	function _createDatePicker(sId) {

		if (!DatePicker) {
			DatePicker = sap.ui.require("sap/m/DatePicker");
			if (!DatePicker) {
				sap.ui.require(["sap/m/DatePicker"], _createDatePickerAsync.bind(this));
				return null;
			}
		}

		return _createDatePickerControl.call(this, DatePicker, sId);

	}


	function _createDateTimePicker(sId) {

		if (!DateTimePicker) {
			DateTimePicker = sap.ui.require("sap/m/DateTimePicker");
			if (!DateTimePicker) {
				sap.ui.require(["sap/m/DateTimePicker"], _createDatePickerAsync.bind(this));
				return null;
			}
		}

		return _createDatePickerControl.call(this, DateTimePicker, sId);

	}

	function _createTimePicker(sId) {

		if (!TimePicker) {
			TimePicker = sap.ui.require("sap/m/TimePicker");
			if (!TimePicker) {
				sap.ui.require(["sap/m/TimePicker"], _createDatePickerAsync.bind(this));
				return null;
			}
		}

		return _createDatePickerControl.call(this, TimePicker, sId);

	}

	function _setModelOnContent(oContent) {
		oContent.setModel(this._oManagedObjectModel, "$field");
		oContent.bindElement({ path: "/", model: "$field" });
	}

	Field.prototype.setEditMode = function(sEditMode) {

		var sOldEditMode = this.getEditMode();

		if (sOldEditMode != sEditMode) {
			if (this.getAggregation("_content")) {
				this.destroyAggregation("_content");
			}
			this.setProperty("editMode", sEditMode);
			_createInternalContent.call(this);
		}

		return this;

	};

	Field.prototype.setContent = function(oContent) {

		var oOldContent = this.getContent();
		if (oOldContent) {
			oOldContent.unbindElement("$field");
			if (oOldContent.getMetadata().getEvents().change) {
				// oldContent has change event -> detach handler
				oOldContent.detachEvent("change", _handleContentChange, this);
			}
			if (oOldContent.getMetadata().getEvents().liveChange) {
				// oldContent has liveChange event -> detach handler
				oOldContent.detachEvent("liveChange", _handleContentLiveChange, this);
			}
		}

		if (this.getAggregation("_content")) {
			this.destroyAggregation("_content");
		}

		this.setAggregation("content", oContent);

		if (oContent) {
			_setModelOnContent.call(this, oContent);
			if (oContent.getMetadata().getEvents().change) {
				// content has change event -> attach handler
				oContent.attachEvent("change", _handleContentChange, this);
			}
			if (oContent.getMetadata().getEvents().liveChange) {
				// content has liveChange event -> attach handler
				oContent.attachEvent("liveChange", _handleContentLiveChange, this);
			}
		} else {
			// internal control needed
			_createInternalContent.call(this);
		}

		return this;

	};

	Field.prototype.destroyContent = function() {

		var oOldContent = this.getContent();
		if (oOldContent) {
			oOldContent.unbindElement("$field");
			if (oOldContent.getMetadata().getEvents().change) {
				// oldContent has change event -> detach handler
				oOldContent.detachEvent("change", _handleContentChange, this);
			}
		}

		this.destroyAggregation("content");

		// internal control needed
		_createInternalContent.call(this);

		return this;

	};

	Field.prototype.setFieldHelp = function(oFieldHelp) {

		var oOldFieldHelp = this.getFieldHelp();
		if (oOldFieldHelp) {
			oOldFieldHelp.detachEvent("select", _handleFieldHelpSelect, this);
			oOldFieldHelp.detachEvent("navigate", _handleFieldHelpNavigate, this);
			oOldFieldHelp.detachEvent("dataUpdate", _handleDataUpdate, this);
		}

		this.setAggregation("fieldHelp", oFieldHelp);

		if (oFieldHelp) {
			oFieldHelp.attachEvent("select", _handleFieldHelpSelect, this);
			oFieldHelp.attachEvent("navigate", _handleFieldHelpNavigate, this);
			oFieldHelp.attachEvent("dataUpdate", _handleDataUpdate, this);
			_setAdditionalValueFromKey.call(this, this.getValue());
		}

		// toggle valueHelp icon on internal Input
		var oContent = this.getAggregation("_content");
		if (oContent && oContent.setShowValueHelp) {
			oContent.setShowValueHelp(!!oFieldHelp);
		}

		return this;

	};

	Field.prototype.destroyFieldHelp = function() {

		var oOldFieldHelp = this.getFieldHelp();
		if (oOldFieldHelp) {
			oOldFieldHelp.detachEvent("select", _handleFieldHelpSelect, this);
			oOldFieldHelp.detachEvent("navigate", _handleFieldHelpNavigate, this);
		}

		this.destroyAggregation("fieldHelp");

		// hide valueHelp icon on internal Input
		var oContent = this.getAggregation("_content");
		if (oContent && oContent.setShowValueHelp) {
			oContent.setShowValueHelp(false);
		}

		return this;

	};

	Field.prototype.getIdForLabel = function() {

		var sId;
		var oContent = this._getContent();
		if (oContent) {
			sId = oContent.getId();
		} else {
			sId = this.getId();
		}

		return sId;

	};

	function _handleContentChange(oEvent) {

		var vValue;
		var bValid = true;

		if ("value" in oEvent.getParameters()) {
			vValue = oEvent.getParameter("value");
		} else {
			vValue = this.getValue();
		}

		if ("valid" in oEvent.getParameters()) {
			bValid = oEvent.getParameter("valid");
		}

		var oFieldHelp = this.getFieldHelp();
		if (oFieldHelp) {
			oFieldHelp.close();
			if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
				// value is used as key -> use selected item
				vValue = oFieldHelp.getSelectedKey();
			}
		}

		this.fireChange({ value: vValue, valid: bValid });

	}

	function _handleContentLiveChange(oEvent) {

		var vValue;
		var vPreviousValue;
		var bEscPressed = false;

		if ("value" in oEvent.getParameters()) {
			vValue = oEvent.getParameter("value");
		}

		if ("escPressed" in oEvent.getParameters()) {
			bEscPressed = oEvent.getParameter("escPressed");
		}

		if ("previousValue" in oEvent.getParameters()) {
			vPreviousValue = oEvent.getParameter("previousValue");
		} else {
			vPreviousValue = this.getValue();
		}

		var oFieldHelp = this.getFieldHelp();
		if (oFieldHelp) {
			oFieldHelp.setFilterValue(vValue);
			if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
				// value is used as key -> while suggestion no item is selected
				oFieldHelp.setSelectedKey("");
			}
			if (oFieldHelp.openByTyping()) {
				oFieldHelp.open();
			}
		}

		this.fireLiveChange({ value: vValue, escPressed: bEscPressed, previousValue: vPreviousValue});

	}

	Field.prototype.getFocusDomRef = function() {

		var oContent = this._getContent();

		if (oContent) {
			return oContent.getFocusDomRef();
		} else {
			return this.getDomRef();
		}

	};

	Field.prototype.setDataType = function(vValue) {
		delete this._oDataType;
		this.setProperty("dataType", vValue, true);
	};

	Field.mapEdmTypes = {
		"Edm.Boolean": "sap.ui.model.odata.type.Boolean",
		"Edm.Byte": "sap.ui.model.odata.type.Byte",
		"Edm.Date": "sap.ui.model.odata.type.Date", // V4 Date
		"Edm.DateTime": "sap.ui.model.odata.type.DateTime", // only for V2  constraints: {displayFormat: 'Date' }
		"Edm.DateTimeOffset": "sap.ui.model.odata.type.DateTimeOffset", //constraints: { V4: true, precision: n }
		"Edm.Decimal": "sap.ui.model.odata.type.Decimal", //constraints: { precision, scale, minimum, maximum, minimumExclusive, maximumExclusive}
		"Edm.Double": "sap.ui.model.odata.type.Double",
		"Edm.Float": "sap.ui.model.odata.type.Single",
		"Edm.Guid": "sap.ui.model.odata.type.Guid",
		"Edm.Int16": "sap.ui.model.odata.type.Int16",
		"Edm.Int32": "sap.ui.model.odata.type.Int32",
		"Edm.Int64": "sap.ui.model.odata.type.Int64",
		//Edm.Raw not supported
		"Edm.SByte": "sap.ui.model.odata.type.SByte",
		"Edm.Single": "sap.ui.model.odata.type.Single",
		"Edm.String": "sap.ui.model.odata.type.String", //constraints: {maxLength, isDigitSequence}
		"Edm.Time": "sap.ui.model.odata.type.Time", // only V2
		"Edm.TimeOfDay": "sap.ui.model.odata.type.TimeOfDay" // V4 constraints: {precision}
	};

	Field.prototype._createDataType = function(sType) {
		var OTypeClass = jQuery.sap.getObject(sType);
		if (!OTypeClass) {
			var sNewType = Field.mapEdmTypes[sType];
			if (!sNewType) {
				jQuery.sap.log.error("Field", "dataType for " + sType + " can not be created!");
				return null;
			}
			return this._createDataType(sNewType);
		}
		return new OTypeClass(this.getDataTypeFormatOptions(), this.getDataTypeConstraints());
	};

	Field.prototype._getDataType = function(sType) {
		if (!this._oDataType) {
			this._oDataType = this.getProperty("dataType");
			if (typeof this._oDataType === "string") {
				this._oDataType = this._createDataType(this._oDataType);
			}
		}
		return this._oDataType;
	};

	/*
	 * If Field is inside of a Form use Forms aria logic for label
	 */
	Field.prototype.enhanceAccessibilityState = function(oElement, mAriaProps) {

		var oParent = this.getParent();

		if (oParent && oParent.enhanceAccessibilityState) {
			// use Field as control, but aria proprties of rendered inner control.
			oParent.enhanceAccessibilityState(this, mAriaProps);
		}

	};

	Field.prototype.onsapup = function(oEvent) {

		var oFieldHelp = this.getFieldHelp();

		if (oFieldHelp) {
			oEvent.preventDefault();
			oEvent.stopPropagation();
			oFieldHelp.navigate(-1);
		}

	};

	Field.prototype.onsapdown = function(oEvent) {

		var oFieldHelp = this.getFieldHelp();

		if (oFieldHelp) {
			oEvent.preventDefault();
			oEvent.stopPropagation();
			oFieldHelp.navigate(1);
		}

	};

	function _handleValueHelpRequest(oEvent) {

		var oFieldHelp = this.getFieldHelp();

		if (oFieldHelp) {
			oFieldHelp.setFilterValue("");
			oFieldHelp.toggleOpen();

			if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
				// value is used as key
				oFieldHelp.setSelectedKey(this.getValue());
			}
//
//			if (oFieldHelp.getFocusOnField()) {
//				this.focus();
//			}
		}

	}

	function _handleFieldHelpSelect(oEvent) {

		var sValue = oEvent.getParameter("value");
		var sAdditionalValue = oEvent.getParameter("additionalValue");
		var sKey = oEvent.getParameter("key");
		var sNewValue;
		var sNewAdditionalValue;

		if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
			// value is used as key
			sNewValue = sKey;
			sNewAdditionalValue = sValue;
		} else {
			sNewValue = sValue;
			sNewAdditionalValue = sAdditionalValue;
		}

		this.setProperty("value", sNewValue);
		this.setAdditionalValue(sNewAdditionalValue);
		this.fireChange({value: sNewValue, valid: true});

	}

	function _handleFieldHelpNavigate(oEvent) {

		var sValue = oEvent.getParameter("value");
//		var sAdditionalValue = oEvent.getParameter("additionalValue");
		var sKey = oEvent.getParameter("key");
		var sNewValue;
//		var sNewAdditionalValue;

		if (this.getDisplay() == sap.ui.mdc.FieldDisplay.Description) {
			// value is used as key
			sNewValue = sKey;
//			sNewAdditionalValue = sValue;
		} else {
			sNewValue = sValue;
//			sNewAdditionalValue = sAdditionalValue;
		}
//TODO: API on Input to update value without property????
		var oContent = this.getAggregation("_content");
		if (oContent && oContent._$input) {
			oContent._$input.val(sValue);
			oContent._doSelect();
		}

		this.fireLiveChange({value: sNewValue});

	}

	function _handleDataUpdate() {

		_setAdditionalValueFromKey.call(this, this.getValue());

	}

	return Field;

}, /* bExport= */ true);

}; // end of sap/ui/mdc/experimental/Field.js
