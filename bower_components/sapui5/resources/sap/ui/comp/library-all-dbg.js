// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.comp.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.comp.config.condition.Type') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides sap.ui.comp.config.condition.Type.
jQuery.sap.declare('sap.ui.comp.config.condition.Type'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/config/condition/Type",[
	'jquery.sap.global', 'sap/ui/base/EventProvider', 'sap/ui/model/json/JSONModel', 'sap/m/Select'
], function(jQuery, EventProvider, JSONModel, Select) {
	"use strict";

	var Type = EventProvider.extend("sap.ui.comp.config.condition.Type", /* @lends "sap.ui.comp.config.condition.Type.prototype */ {
		constructor: function(sFieldName, oFilterProvider, oFieldMetadata) {
			EventProvider.call(this);
			this.oFilterProvider = oFilterProvider;
			//create basic data
			var oData = {
				condition: {
					operation: "",
					value1: null,
					value2: null,
					key: sFieldName
				},
				operations: [],
				controls: [],
				currentoperation: {},
				pending: false
			};
			this.oModel = new JSONModel(oData);

			var fCheckUpdate = this.oModel.checkUpdate;
			this.oModel.suspend = function() {
				this.bSuspended = true;
				this.checkUpdate = function() {};
			};
			this.oModel.resume = function() {
				this.bSuspended = false;
				this.checkUpdate = fCheckUpdate;
				this.checkUpdate();
			};

			this.oContext = this.oModel.getContext("/");
			this.oConditionContext = this.oModel.getContext("/condition");
			this.sFieldName = sFieldName;
			var oOperationChangeBinding = this.oModel.bindProperty("operation", this.oConditionContext),
				that = this;

			oOperationChangeBinding.attachChange(function() {
				var sOperation = that.oModel.getProperty("operation", that.getConditionContext()),
					oOperation = that.getOperation(sOperation);

				if (oOperation) {
					// use new object to not change original operation with current settings
					oOperation = jQuery.extend({}, oOperation);

					if (!that.bIgnoreBindingChange) {
						var aDefaultValues = that.getDefaultValues(oOperation);
						that.setDefaultValues(aDefaultValues[0], aDefaultValues[1]);
					}
				}

				that.setControls([]); //remove the control from the model, before we can create new controls for the current operation 
				that.setControls(that.getControls(oOperation));

				if (oOperation) {
					if (oOperation.getValueList) {
						oOperation.valueList = oOperation.getValueList();
					}
					that.oModel.setProperty("/currentoperation", oOperation);
				}
				if (!that.bIgnoreBindingChange) {
					that.serialize(false, that.bFireFilterChange);
				}
			});

			var oValueChangeBinding = this.oModel.bindProperty("value1", this.oConditionContext);
			oValueChangeBinding.attachChange(function() {
				if (!that.bIgnoreBindingChange) {
					that.serialize(false, that.bFireFilterChange);
				}
			});

			var oValue2ChangeBinding = this.oModel.bindProperty("value2", this.oConditionContext);
			oValue2ChangeBinding.attachChange(function() {
				if (!that.bIgnoreBindingChange) {
					that.serialize(false, that.bFireFilterChange);
				}
			});

			var oPendingChangeBinding = this.oModel.bindProperty("pending", this.oContext);
			oPendingChangeBinding.attachChange(function() {
				if (that.bAsync) {
					if (that._iPendingTimer) {
						jQuery.sap.clearDelayedCall(that._iPendingTimer);
					}
					that._iPendingTimer = jQuery.sap.delayedCall(10, that, "fireEvent", ["PendingChange", { oSource: that, pending: that.oModel.getProperty("/pending") }]);
				}
			});
			this._oOperationSelect = null;
			this.oFieldMetadata = oFieldMetadata;
			this.oOperationFilter = null;
			this.bAsync = false;
		}
	});

	Type._createStableId = function(oInstance, suffix) {
		if (oInstance && oInstance.oFilterProvider && oInstance.oFieldMetadata) {
			return oInstance.oFilterProvider._createFilterControlId(oInstance.oFieldMetadata) + (suffix ? suffix : "");
		} else {
			return undefined;
		}
	};

	Type.getTranslatedText = function(sTextKey, sResourceBundle) {
		if (typeof sTextKey === "object") {
			sResourceBundle = sTextKey.bundle;
			sTextKey = sTextKey.key;
		}
		if (!sResourceBundle) {
			sResourceBundle = "sap.ui.comp";
		}
		return sap.ui.getCore().getLibraryResourceBundle(sResourceBundle).getText(sTextKey) || sTextKey;
	};
	Type.prototype.getTranslatedText = Type.getTranslatedText;

	Type.prototype.applySettings = function(oSettings) {
		if (oSettings && oSettings.operations && oSettings.operations.filter) {
			this.oOperationFilter = oSettings.operations.filter;
		} else {
			this.oOperationFilter = null;
		}
	};

	Type.prototype.getParent = function() {
		return this.oFilterProvider._oSmartFilter;
	};

	Type.prototype.getModel = function() {
		return this.oModel;
	};

	Type.prototype.getConditionContext = function() {
		return this.oConditionContext;
	};

	Type.prototype.setDefaultValues = function(oValue1, oValue2) {
		this.oModel.setProperty("value1", oValue1, this.getConditionContext(), true);
		this.oModel.setProperty("value2", oValue2, this.getConditionContext(), true);
	};

	Type.prototype.getContext = function() {
		return this.oContext;
	};

	Type.prototype.getControls = function(oOperation) {
		return [];
	};

	Type.prototype.getOperations = function() {
		return [];
	};

	Type.prototype.isPending = function() {
		return this.getModel().getProperty("pending", this.getContext());
	};

	Type.prototype.attachPendingChange = function(fHandler) {
		this.attachEvent("PendingChange", fHandler);
	};

	Type.prototype.detachPendingChange = function(fHandler) {
		this.detachEvent("PendingChange", fHandler);
	};


	Type.prototype.setPending = function(bValue) {
		if (this.bAsync) {
			this.getModel().setProperty("pending", bValue, this.getContext());
		}
	};

	Type.prototype._filterOperation = function(oOperation) {
		if (!this.oOperationFilter) {
			return true;
		}
		var oFilter = this.oOperationFilter,
			sValue = oOperation[oFilter.path];
		if (oFilter.path && oFilter.contains && sValue) {
			var bExclude = oFilter.exclude || false,
				aFilterValues = (typeof oFilter.contains === "string") ? oFilter.contains.split(",") : oFilter.contains,
				bResult = bExclude;
			for (var j = 0; j < aFilterValues.length; j++) {
				if (bExclude && sValue.indexOf(aFilterValues[j]) > -1) {
					bResult = false;
				} else if (!bExclude && sValue.indexOf(aFilterValues[j]) > -1) {
					bResult = true;
				}
			}
		}
		return bResult;
	};

	Type.prototype._updateOperation = function(oOperation) {
		if (!oOperation.textValue) {
			oOperation.textValue = "";
		}
		if (!oOperation.languageText && oOperation.textKey) {
			oOperation.languageText = this.getTranslatedText(oOperation.textKey);
		}
	};

	Type.prototype.updateOperations = function() {
		this.oModel.setProperty("operations", [], this.getContext());
	};

	Type.prototype.getOperation = function(sOperationName) {
		var aOperations = this.oModel.getProperty("operations", this.getContext()) || [];
		for (var i = 0; i < aOperations.length; i++) {
			if (sOperationName === aOperations[i].key) {
				return aOperations[i];
			}
		}
		return null;
	};

	Type.prototype.getDefaultOperation = function() {
		var aOperations = this.getOperations();
		if (!aOperations || aOperations.length === 0) {
			return null;
		}
		for (var i = 0; i < aOperations.length; i++) {
			if (aOperations[i].defaultOperation) {
				return aOperations[i];
			}
		}
		return aOperations[0];
	};

	Type.prototype.setControls = function(aControls) {
		var aOldControls = this.oModel.getProperty("controls", this.getContext());
		if (aOldControls) {
			for (var i = 0; i < aOldControls.length; i++) {
				aOldControls[i].destroy();
			}
		}
		this.oModel.setProperty("controls", aControls, this.getContext());
		if (aControls) {
			for (var i = 0; i < aControls.length; i++) {
				aControls[i].setBindingContext(this.getConditionContext(), "$smartEntityFilter");
			}
			this._setAriaLabeledByToControls(aControls);
		}
	};

	Type.prototype._setAriaLabeledByToControls = function(aControls) {
		if (this._oOperationLabel && aControls) {
			for (var i = 0; i < aControls.length; i++) {
				if (aControls[i].addAriaLabelledBy) {
					if (aControls[i].getAriaLabelledBy().indexOf(this._oOperationLabel.getId()) === -1) {
						aControls[i].addAriaLabelledBy(this._oOperationLabel);
					}
				}
			}
		}
	};

	Type.prototype.setOperation = function(sOperation) {
		var oOperation = this.getOperation(sOperation);
		if (oOperation) {
			this.setCondition({
				operation: oOperation.key,
				key: this.sFieldName,
				value1: oOperation.defaultValues[0] || null,
				value2: oOperation.defaultValues[1] || null
			});
			this.getModel().checkUpdate(true);
		} else {
			//log error -> operation is not possible
		}
	};

	Type.prototype.isValidCondition = function() {
		return false;
	};

	Type.prototype.setCondition = function(oCondition) {
		this.oModel.setProperty("key", oCondition.key, this.oConditionContext);
		this.oModel.setProperty("operation", oCondition.operation, this.oConditionContext);
		this.oModel.setProperty("value1", oCondition.value1, this.oConditionContext);
		this.oModel.setProperty("value2", oCondition.value2, this.oConditionContext);
		this.oModel.setProperty("tokenText", this.getTokenText(oCondition), this.oConditionContext);
		return this;
	};

	Type.prototype.setAsync = function(bAsync) {
		this.bAsync = bAsync;
	};

	Type.prototype.getAsync = function(bAsync) {
		return this.bAsync;
	};

	Type.prototype.initialize = function(oJson) {
		this.updateOperations();
	};

	Type.prototype.serialize = function() {};

	Type.prototype.validate = function(bForceError) {
		this._bForceError = bForceError !== false;

		var sInputState = this.getModel().getProperty("inputstate", this.getContext()) || "NONE";

		if (!this.isPending() && this.oFieldMetadata && this.oFieldMetadata.isMandatory && (!this.isValidCondition() || sInputState !== "NONE") && this._bForceError) {
			this.getModel().setProperty("inputstate", "ERROR", this.getContext());
			return false;
		}
		this.getModel().setProperty("inputstate", "NONE", this.getContext());
		return true;
	};


	Type.prototype.getCondition = function() {
		var oCondition = jQuery.extend({}, this.oModel.getProperty("", this.oConditionContext));
		return oCondition;
	};

	Type.prototype.providerDataUpdated = function(aUpdatedFieldNames, oData) {};

	Type.prototype.getFilter = function(oFilter) {
		return null;
	};

	Type.prototype.getFilterRanges = function(oProviderData) {
		return null;
	};

	Type.prototype.getTokenText = function(oOperation) {
		return "";
	};

	Type.prototype.getName = function() {
		return this.getMetadata().getName();
	};

	Type.prototype.getType = function() {
		return "Edm";
	};

	Type.prototype._initializeFilterItemPopoverContent = function(oLayout) {
		//TODO newDRTUI
		var oOperationLabel = new sap.m.Label({ text: Type.getTranslatedText("CONDITION_DATERANGETYPE_POPOVER_LABEL") });
		oLayout.addItem(oOperationLabel);
		this._oOperationLabel = oOperationLabel;

		var oOperationSelect = new sap.m.Select(Type._createStableId(this, "select"), {
			width: "100%",
			ariaLabelledBy: oOperationLabel
		});

		//TODO: Remove once Select supports a public API
		if (oOperationSelect._oList && oOperationSelect._oList.setShowSecondaryValues) {
			oOperationSelect._oList.setShowSecondaryValues(true);
		}

		oOperationSelect.bindProperty("selectedKey", {
			path: "$smartEntityFilter>condition/operation"
		});

		oOperationSelect.bindAggregation("items", {
			path: "$smartEntityFilter>operations",
			sorter: new sap.ui.model.Sorter("order", false, false),
			//filters: [new sap.ui.model.Filter("selectVisible", "EQ", true)],
			filters: new sap.ui.model.Filter("order", function(oValue) {
				return oValue !== undefined && oValue > -1;
			}),
			template: new sap.ui.core.ListItem({
				text: {
					path: "$smartEntityFilter>languageText"
				},
				key: {
					path: "$smartEntityFilter>key"
				},
				additionalText: {
					path: "$smartEntityFilter>textValue"
				}
			})
		});

		oOperationSelect.setBindingContext(this.getContext(), "$smartEntityFilter");

		var oList = this.getModel().bindList("controls", this.getContext());
		oList.attachChange(function() {
			var aNewControls = oList.getModel().getProperty("controls", oList.getContext());
			if (aNewControls) {
				for (var i = 0; i < aNewControls.length; i++) {
					oLayout.addItem(aNewControls[i]);
				}
			}
		});

		oLayout.addItem(oOperationSelect);
		oOperationLabel.setLabelFor(oOperationSelect);
		this._oOperationSelect = oOperationSelect;

		//oOperationSelect.bindProperty("busy",{path: "$smartEntityFilter>/pending"});
		oLayout.setModel(this.getModel(), "$smartEntityFilter");
		this.bIgnoreBindingChange = true;
		this.getModel().checkUpdate(true);
		this.bIgnoreBindingChange = false;

		this.oLayout = oLayout;
	};

	Type.prototype.destroy = function() {
		this.setControls([]);
		this.oLayout = null;
		EventProvider.prototype.destroy.apply(this, arguments);
	};

	return Type;
}, /* bExport= */ true);
}; // end of sap/ui/comp/config/condition/Type.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterBar.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.filerbar.FilterBar control.
jQuery.sap.declare('sap.ui.comp.filterbar.FilterBar.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/filterbar/FilterBar.designtime",[], function() {
	"use strict";
	return {
		annotations: {},
		properties: {
			persistencyKey: {
				ignore: true
			},
			advancedMode: {
				ignore: true
			},
			deltaVariantMode: {
				ignore: true
			},
			useToolbar: {
				ignore: true
			},
			// deprecated
			expandAdvancedArea: {
				ignore: true
			},
			searchEnabled: {
				ignore: false
			},
			filterBarExpanded: {
				ignore: false
			},
			considerGroupTitle: {
				ignore: false
			},
			showClearButton: {
				ignore: false
			},
			showRestoreButton: {
				ignore: false
			},
			showGoOnFB: {
				ignore: false
			},
			showRestoreOnFB: {
				ignore: false
			},
			showClearOnFB: {
				ignore: false
			},
			// deprecated
			showGoButton: {
				ignore: true
			},
			filterContainerWidth: {
				ignore: false
			},
			header: {
				ignore: false
			},
			showFilterConfiguration: {
				ignore: false
			},
			useSnapshot: {
				ignore: false
			}
		},
		customData: {

		}
	};
}, /* bExport= */false);

}; // end of sap/ui/comp/filterbar/FilterBar.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.ui.comp.
 */
jQuery.sap.declare('sap.ui.comp.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/library",[
	'jquery.sap.global', 'sap/ui/core/Core', 'sap/ui/core/library', 'sap/m/library'
], function(jQuery, Core, library1, library2) {
	"use strict";

	/**
	 * SAPUI5 library with smart controls.<br>
	 * <b>Note:</b> The controls in this library only support OData V2 (see {@link sap.ui.model.odata.v2.ODataModel}) and default models.
	 * 
	 * @namespace
	 * @name sap.ui.comp
	 * @public
	 */

	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name: "sap.ui.comp",
		version: "1.50.6",
		dependencies: [
			"sap.ui.core", "sap.m"
		],
		types: [
			"sap.ui.comp.smartfield.ControlProposalType", "sap.ui.comp.smartfield.ControlContextType", "sap.ui.comp.smartfield.ControlType", "sap.ui.comp.smartfield.DisplayBehaviour", "sap.ui.comp.smartfield.JSONType", "sap.ui.comp.smartfield.CriticalityRepresentationType", "sap.ui.comp.smarttable.TableType", "sap.ui.comp.smarttable.ExportType", "sap.ui.comp.smartlist.ListType", "sap.ui.comp.personalization.AggregationRole", "sap.ui.comp.personalization.ResetType", "sap.ui.comp.personalization.ChangeType"
		],
		interfaces: [],
		controls: [
			"sap.ui.comp.filterbar.FilterBar", "sap.ui.comp.navpopover.NavigationPopover", "sap.ui.comp.navpopover.SmartLink", "sap.ui.comp.odata.FieldSelector", "sap.ui.comp.smartchart.SmartChart", "sap.ui.comp.smartfield.SmartField", "sap.ui.comp.smartfield.SmartLabel", "sap.ui.comp.smartfilterbar.SmartFilterBar", "sap.ui.comp.smartform.SmartForm", "sap.ui.comp.smartmicrochart.SmartAreaMicroChart", "sap.ui.comp.smartmicrochart.SmartBulletMicroChart", "sap.ui.comp.smartmicrochart.SmartRadialMicroChart", "sap.ui.comp.smartmicrochart.SmartMicroChart", "sap.ui.comp.smarttable.SmartTable", "sap.ui.comp.smartlist.SmartList", "sap.ui.comp.smartvariants.SmartVariantManagement", "sap.ui.comp.smartvariants.SmartVariantManagementUi2", "sap.ui.comp.transport.TransportDialog", "sap.ui.comp.valuehelpdialog.ValueHelpDialog", "sap.ui.comp.variants.EditableVariantItem", "sap.ui.comp.variants.VariantManagement"
		],
		elements: [
			"sap.ui.comp.filterbar.FilterGroupItem", "sap.ui.comp.filterbar.FilterItem", "sap.ui.comp.navpopover.LinkData", "sap.ui.comp.navpopover.SemanticObjectController", "sap.ui.comp.smartfield.Configuration", "sap.ui.comp.smartfield.ControlProposal", "sap.ui.comp.smartfield.ObjectStatus", "sap.ui.comp.smartfilterbar.ControlConfiguration", "sap.ui.comp.smartfilterbar.GroupConfiguration", "sap.ui.comp.smartfilterbar.SelectOption", "sap.ui.comp.smartform.Group", "sap.ui.comp.smartform.GroupElement", "sap.ui.comp.smartform.Layout", "sap.ui.comp.smartvariants.PersonalizableInfo", "sap.ui.comp.variants.VariantItem", "sap.ui.comp.navpopover.NavigationContainer"
		],
		extensions: {
			flChangeHandlers: {
				"sap.ui.comp.smartform.SmartForm": {
					"removeGroup": "sap/ui/comp/smartform/flexibility/changes/RemoveGroup",
					"addGroup": "sap/ui/comp/smartform/flexibility/changes/AddGroup",
					"moveGroups": "sap/ui/comp/smartform/flexibility/changes/MoveGroups",
					"renameField": "sap/ui/comp/smartform/flexibility/changes/RenameTitle",
					"combineFields": "sap/ui/comp/smartform/flexibility/changes/CombineFields",
					"splitField": "sap/ui/comp/smartform/flexibility/changes/SplitField",
					"moveControls": "default"
				},
				"sap.ui.comp.smartform.Group": {
					"hideControl": "default",
					"unhideControl": "default",
					"renameGroup": "sap/ui/comp/smartform/flexibility/changes/RenameGroup",
					"addField": "sap/ui/comp/smartform/flexibility/changes/AddField",
					"addFields": "sap/ui/comp/smartform/flexibility/changes/AddFields"
				},
				"sap.ui.comp.smartform.GroupElement": {
					"hideControl": "default",
					"unhideControl": "sap/ui/comp/smartform/flexibility/changes/UnhideControl",
					"renameField": "sap/ui/comp/smartform/flexibility/changes/RenameField"
				},
				"sap.ui.comp.navpopover.NavigationContainer": {
					"addLink": {
						"changeHandler": "sap/ui/comp/navpopover/flexibility/changes/AddLink",
						"layers": {
							"USER": true
						}
					},
					"removeLink": {
						"changeHandler": "sap/ui/comp/navpopover/flexibility/changes/RemoveLink",
						"layers": {
							"USER": true
						}
					}
				},
				"sap.ui.comp.smartvariants.SmartVariantManagement": {
					"addFavorite": {
						"changeHandler": "sap/ui/comp/smartvariants/flexibility/changes/addFavorite",
						"layers": {
							"USER": true
						}
					},
					"removeFavorite": {
						"changeHandler": "sap/ui/comp/smartvariants/flexibility/changes/removeFavorite",
						"layers": {
							"USER": true
						}
					}
				},
				"sap.ui.comp.smartfield.SmartField": "sap/ui/comp/smartfield/flexibility/SmartField"
			}
		}
	});

	sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX = "$Parameter.";

	sap.ui.comp.STANDARD_VARIANT_NAME = "STANDARD";

	/**
	 * Determines if given <code>CustomData</code> should be inherited from <code>SmartForm</code>
	 * to the content <code>SmartField</code> controls.
	 *
	 * @param {sap.ui.core.CustomData} oCustomData <code>CustomData</code> to be checked
	 * @return {boolean} If <code>true</code> the <code>CustomData</code> should be inherited
	 * @private
	 * @function
	 */
	sap.ui.comp.smartform.inheritCostomDataToFields = function(oCustomData) {

		var aBlacklist = ["sap.ui.fl:AppliedChanges"];

		for (var i = 0; i < aBlacklist.length; i++) {
			if (oCustomData.getKey() == aBlacklist[i]) {
				return false;
			}
		}

		return true;

	};

	/**
	 * The available control types to configure the internal control selection of a SmartField control.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.ControlType = {

		/**
		 * The SmartField chooses the control.
		 * 
		 * @public
		 */
		auto: "auto",

		/**
		 * The SmartField uses a drop down list box.
		 * 
		 * @public
		 */
		dropDownList: "dropDownList",

		/**
		 * The SmartField displays an input field.
		 * 
		 * @public
		 */
		input: "input",

		/**
		 * The SmartField displays a date picker.
		 * 
		 * @public
		 */
		datePicker: "datePicker",

		/**
		 * The SmartField displays a check box.
		 * 
		 * @public
		 */
		checkBox: "checkBox",

		/**
		 * The SmartField displays a <code>sap.m.Selection</code>.
		 * 
		 * @public
		 */
		selection: "selection"
	};

	/**
	 * The different options to define display behavior for the value help of a SmartField control.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.DisplayBehaviour = {

		/**
		 * The SmartField chooses the display behavior.
		 * 
		 * @public
		 */
		auto: "auto",

		/**
		 * Only the description of the available values is displayed.
		 * 
		 * @public
		 */
		descriptionOnly: "descriptionOnly",

		/**
		 * Description and ID are displayed for available values.
		 * 
		 * @public
		 */
		descriptionAndId: "descriptionAndId",

		/**
		 * ID and description are displayed for available values.
		 * 
		 * @public
		 */
		idAndDescription: "idAndDescription",

		/**
		 * Shows the ID only.
		 * 
		 * @public
		 */
		idOnly: "idOnly",

		/**
		 * Shows Boolean value as True/False
		 * 
		 * @public
		 */
		TrueFalse: "TrueFalse",

		/**
		 * Shows Boolean value as On/Off
		 * 
		 * @public
		 */
		OnOff: "OnOff",

		/**
		 * Shows Boolean value as Yes/No
		 * 
		 * @public
		 */
		YesNo: "YesNo"

	};
	/**
	 * Enumeration of the different data types supported by the SmartField control, if it is using a JSON model.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.JSONType = {

		/**
		 * The JavaScript primary type String
		 * 
		 * @public
		 */
		String: "String",

		/**
		 * The JavaScript Date Object
		 * 
		 * @public
		 */
		Date: "Date",

		/**
		 * Float type
		 * 
		 * @public
		 */
		Float: "Float",

		/**
		 * Integer type
		 * 
		 * @public
		 */
		Integer: "Integer",

		/**
		 * Boolean Type
		 * 
		 * @public
		 */
		Boolean: "Boolean",

		/**
		 * Date Time Type
		 * 
		 * @public
		 */
		DateTime: "DateTime"

	};

	/**
	 * Enumeration of the different contexts supported by the SmartField, if it is using an OData model.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.ControlContextType = {
		/**
		 * No special context is selected. The Smart Field applies its internal defaults.
		 * 
		 * @public
		 */
		None: "",

		/**
		 * Also the UoM layout is influenced.
		 * 
		 * @public
		 */
		ResponsiveTable: "responsiveTable",

		/**
		 * Behaves currently exactly like <code>sap.ui.comp.smartfield.ControlContextType.None</code>.
		 * 
		 * @public
		 */
		Form: "form",

		/**
		 * If this is selected the UoM layout is influenced.
		 * 
		 * @public
		 */
		Table: "table",

		/**
		 * If this is selected the UoM layout is influenced.
		 * 
		 * @public
		 */
		SmartFormGrid: "smartFormGrid"
	};

	/**
	 * Enumeration of the different control proposals supported by the Smart Field, if it is using an OData model.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.ControlProposalType = {
		/**
		 * No special context is selected. The Smart Field applies its internal defaults.
		 * 
		 * @public
		 */
		None: "",

		/**
		 * If this is selected, the sap.m.ObjectNumber control is used to display units of measure. If the value property of the Smart Field is not
		 * bound to a unit of measure, the property is ignored.
		 * 
		 * @public
		 */
		ObjectNumber: "ObjectNumber",

		/**
		 * If this is selected, the sap.m.ObjectIdentifier control is used to display IDs, if they are not editable. The current OData property is
		 * assumed to have a text annotation. Otherwise the configuration is ignored.
		 * 
		 * @public
		 */
		ObjectIdentifier: "ObjectIdentifier"

	/**
	 * If this is selected, the sap.m.ObjectStatus control is used to display values, if they are not editable.
	 * 
	 * @public
	 */
	// ObjectStatus: "ObjectStatus"
	};

	/**
	 * The different options to visualize the ObjectStatus control.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfield.CriticalityRepresentationType = {
		/**
		 * If this is selected, the sap.m.ObjectStatus control does not visualize the criticality using an icon.
		 * 
		 * @public
		 */
		WithoutIcon: "WithoutIcon",

		/**
		 * If this is selected, the sap.m.ObjectStatus control visualizes the criticality using an icon.
		 * 
		 * @public
		 */
		WithIcon: "WithIcon"
	};

	/**
	 * Provides enumeration sap.ui.comp.smarttable.TableType. A subset of table types that fit to a simple API returning one string.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smarttable.TableType = {

		/**
		 * A table (sap.ui.table.Table) control shall be created as the content of the SmartTable, if no table already exists (default)
		 * 
		 * @public
		 */
		Table: "Table",

		/**
		 * A responsive table (sap.m.Table) control that can be used on mobile devices shall be created as the content of the SmartTable, if no table
		 * already exists
		 * 
		 * @public
		 */
		ResponsiveTable: "ResponsiveTable",

		/**
		 * An analytical table (sap.ui.table.AnalyticalTable) control shall be created as the content of the SmartTable, if no table already exists
		 * 
		 * @public
		 */
		AnalyticalTable: "AnalyticalTable",

		/**
		 * A tree table (sap.ui.table.TreeTable) control shall be created as the content of the SmartTable, if no table already exists
		 * 
		 * @public
		 */
		TreeTable: "TreeTable"

	};

	/**
	 * Provides the type of services available for export in the <code>SmartTable</code> control.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smarttable.ExportType = {

		/**
		 * Gateway backend spreadsheet export service is used (default)
		 * 
		 * @public
		 */
		GW: "GW",

		/**
		 * UI5 client-side spreadsheet export service is used
		 * 
		 * @public
		 */
		UI5Client: "UI5Client"

	};

	/**
	 * Provides enumeration sap.ui.comp.smartlist.ListType. A subset of list types that fit to a simple API returning one string.
	 * 
	 * @enum {string}
	 * @public
	 * @since 1.48
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartlist.ListType = {

		/**
		 * A list (sap.m.List) control shall be created as the content of the SmartList, if no list already exists (default)
		 * 
		 * @public
		 */
		List: "List",

		/**
		 * A tree (sap.m.Tree) control shall be created as the content of the SmartList, if no list/tree already exists
		 * 
		 * @public
		 */
		Tree: "Tree"
	};

	/**
	 * Provides enumeration sap.ui.comp.personalization.ResetType. A subset of reset types used in table personalization.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.personalization.ResetType = {

		/**
		 * Reset back to Restore (i.e. the version of the table with which the controller was instantiated or via setter updated) was triggered
		 * (either via API or via reset button)
		 * 
		 * @public
		 */
		ResetFull: "ResetFull",

		/**
		 * Reset back to the CurrentVariant was triggered
		 * 
		 * @public
		 */
		ResetPartial: "ResetPartial"
	};

	/**
	 * Provides enumeration sap.ui.comp.personalization.AggregationRole. A subset of aggregation roles used in table personalization.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.personalization.AggregationRole = {

		/**
		 * Dimension role.
		 * 
		 * @public
		 */
		Dimension: "Dimension",

		/**
		 * Measure role.
		 * 
		 * @public
		 */
		Measure: "Measure",

		/**
		 * Role which is neither dimension nor measure.
		 * 
		 * @public
		 */
		NotDimeasure: "NotDimeasure"
	};

	/**
	 * Provides enumeration sap.ui.comp.personalization.ChangeType. A subset of changes done during table personalization.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.personalization.ChangeType = {

		/**
		 * Not changed
		 * 
		 * @public
		 */
		Unchanged: "Unchanged",

		/**
		 * Change is applied to model but not applied to table
		 * 
		 * @public
		 */
		ModelChanged: "ModelChanged",

		/**
		 * Change is applied to model and to table
		 * 
		 * @public
		 */
		TableChanged: "TableChanged"
	};

	/**
	 * Provides enumeration sap.ui.comp.personalization.TableType. A subset of table types that fit for table personalization.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.personalization.TableType = {

		/**
		 * Represents <code>sap.m.Table</code>.
		 * 
		 * @public
		 */
		ResponsiveTable: "ResponsiveTable",

		/**
		 * Represents <code>sap.ui.table.Table</code>.
		 * 
		 * @public
		 */
		Table: "Table",

		/**
		 * Represents <code>sap.ui.table.AnalyticalTable</code>.
		 * 
		 * @public
		 */
		AnalyticalTable: "AnalyticalTable",

		/**
		 * Represents <code>sap.ui.table.TreeTable</code>.
		 * 
		 * @public
		 */
		TreeTable: "TreeTable",

		/**
		 * Represents <code>sap.ui.comp.personalization.ChartWrapper</code>.
		 * 
		 * @public
		 */
		ChartWrapper: "ChartWrapper",

		/**
		 * Represents <code>sap.ui.comp.personalization.SelectionWrapper</code>.
		 * 
		 * @public
		 */
		SelectionWrapper: "SelectionWrapper"
	};

	/**
	 * The available filter types to configure the internal control of a SmartFilterBar control.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfilterbar.FilterType = {
		/**
		 * Restrict filter based on metadata.
		 * 
		 * @public
		 */
		auto: "auto",
		/**
		 * Restrict filter to a single entry.
		 * 
		 * @public
		 */
		single: "single",
		/**
		 * Restrict filter to multiple entries.
		 * 
		 * @public
		 */
		multiple: "multiple",
		/**
		 * Restrict filter to an interval.
		 * 
		 * @public
		 */
		interval: "interval"
	};

	/**
	 * The available control types to configure the internal control selection of a SmartFilterBar control.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfilterbar.ControlType = {
		/**
		 * Shows field based on metadata.
		 * 
		 * @public
		 */
		auto: "auto",

		/**
		 * Shows an input field.
		 * 
		 * @public
		 */
		input: "input",

		/**
		 * Shows a drop down list field.
		 * 
		 * @public
		 */
		dropDownList: "dropDownList",

		/**
		 * Shows a date picker field.
		 * 
		 * @public
		 */
		date: "date"

	};

	/**
	 * The different options to define mandatory state for fields in the SmartFilter control.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfilterbar.MandatoryType = {
		/**
		 * Shows values based on metadata.
		 * 
		 * @public
		 */
		auto: "auto",
		/**
		 * Shows field as mandatory.
		 * 
		 * @public
		 */
		mandatory: "mandatory",
		/**
		 * Shows field as not mandatory.
		 * 
		 * @public
		 */
		notMandatory: "notMandatory"
	};

	/**
	 * The different options to define display behavior for fields in the SmartFilter control.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfilterbar.DisplayBehaviour = {
		/**
		 * Shows values based on metadata.
		 * 
		 * @public
		 */
		auto: "auto",

		/**
		 * Shows only the description for values.
		 * 
		 * @public
		 */
		descriptionOnly: "descriptionOnly",

		/**
		 * Shows description and then an id in values.
		 * 
		 * @public
		 */
		descriptionAndId: "descriptionAndId",

		/**
		 * Shows id and then a description in values.
		 * 
		 * @public
		 */
		idAndDescription: "idAndDescription",

		/**
		 * Shows only the id for values.
		 * 
		 * @public
		 */
		idOnly: "idOnly"
	};

	/**
	 * The different options to define Sign for Select Options used in SmartFilter control.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartfilterbar.SelectOptionSign = {
		/**
		 * Sign Include
		 * 
		 * @public
		 */
		I: "I",
		/**
		 * Sign Include
		 * 
		 * @public
		 */
		include: "I",
		/**
		 * Sign Exclude
		 * 
		 * @public
		 */
		E: "E",
		/**
		 * Sign Exclude
		 * 
		 * @public
		 */
		exclude: "E"
	};

	/**
	 * Type of change handler type for link personalization.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.navpopover.ChangeHandlerType = {
		/**
		 * Change handler creating a change for an added link.
		 * 
		 * @public
		 */
		addLink: "addLink",
		/**
		 * Change handler creating a change for a removed link.
		 * 
		 * @public
		 */
		removeLink: "removeLink",
		/**
		 * Change handler creating a change for a moved link.
		 * 
		 * @public
		 */
		moveLink: "moveLink"
	};

	/**
	 * Enumeration for changes for personalization of variant favorites.
	 * 
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.ui.comp.smartvariants.ChangeHandlerType = {
		/**
		 * Change handler creating a change for an added favorite.
		 * 
		 * @public
		 */
		addFavorite: "addFavorite",
		/**
		 * Change handler creating a change for a removed favorite.
		 * 
		 * @public
		 */
		removeFavorite: "removeFavorite"
	};

	return sap.ui.comp;

}, /* bExport= */true);

}; // end of sap/ui/comp/library.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.LinkData') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.LinkData.
jQuery.sap.declare('sap.ui.comp.navpopover.LinkData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/LinkData",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'
], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new navpopover/LinkData.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class Stores display text together with a navigation target hyperlink.<br>
	 *        The LinkData class is used by {@link sap.ui.comp.navpopover.SmartLink SmartLink} and
	 *        {@link sap.ui.comp.navpopover.SemanticObjectController SemanticObjectController} to define the visible links on
	 *        {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover}.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @since 1.28.0
	 * @alias sap.ui.comp.navpopover.LinkData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var LinkData = Element.extend("sap.ui.comp.navpopover.LinkData", /** @lends sap.ui.comp.navpopover.LinkData.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Text which can be displayed on the UI
				 */
				text: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Destination link for a navigation operation in internal format. <b>Note</b>: The link will be encoded before it is shown in
				 * external format using the <code>hrefForExternal</code> method of the CrossApplicationNavigation service.
				 */
				href: {
					type: "string",
					defaultValue: null
				},

				/**
				 * The standard values for the <code>target</code> property are: _self, _top, _blank, _parent, _search. Alternatively, a frame name
				 * can be entered. This property is only used if the <code>href</code> property is set.
				 */
				target: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Description of the link.
				 *
				 * @since 1.42.0
				 */
				description: {
					type: "string",
					defaultValue: undefined
				},

				/**
				 * Describes whether the link should be visible on the screen.
				 *
				 * @since 1.44.0
				 * @private
				 */
				visible: {
					type: "boolean",
					defaultValue: true
				},

				/**
				 * Key of link.
				 *
				 * @since 1.44.0
				 * @private
				 */
				key: {
					type: "string",
					defaultValue: undefined
				},

				/**
				 * Callback for <code>press</code> event.
				 *
				 * @since 1.46.0
				 * @private
				 */
				press: {
					type: "object",
					defaultValue: null
				},

				/**
				 * Marker for superior action.
				 *
				 * @since 1.48.0
				 * @private
				 */
				isSuperiorAction: {
					type: "boolean"
				}
			}
		}
	});

	LinkData.prototype.getJson = function() {
		return {
			key: this.getKey(),
			href: this.getHref(),
			text: this.getText(),
			target: this.getTarget(),
			description: this.getDescription(),
			visible: this.getVisible(),
			press: this.getPress(),
			isSuperiorAction: this.getIsSuperiorAction()
		};
	};

	LinkData.convert2Json = function(aLinkDatas) {
		return aLinkDatas.map(function(oLinkData) {
			return oLinkData.getJson();
		});
	};

	return LinkData;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/LinkData.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.SmartLinkRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.SmartLink.
jQuery.sap.declare('sap.ui.comp.navpopover.SmartLinkRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.m.LinkRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/SmartLinkRenderer",[
	'jquery.sap.global', 'sap/ui/core/Renderer', 'sap/m/LinkRenderer'
], function(jQuery, Renderer, LinkRenderer) {
	"use strict";

	var SmartLinkRenderer = Renderer.extend(LinkRenderer);

	SmartLinkRenderer.render = function(oRm, oControl) {
		var bRenderLink = true;

		if (oControl.getIgnoreLinkRendering()) {
			var oReplaceControl = oControl._getInnerControl();
			if (oReplaceControl) {
				oRm.write("<div");
				oRm.writeControlData(oControl);
				oRm.writeClasses();
				oRm.write(">");

				oRm.renderControl(oReplaceControl);

				oRm.write("</div>");

				bRenderLink = false;
			}
		}

		if (bRenderLink) {
			LinkRenderer.render.apply(this, arguments);
		}
	};

	SmartLinkRenderer.writeText = function(oRm, oControl) {
		if (!oControl.getUom()) {
			oRm.writeEscaped(oControl.getText());
			return;
		}
		oRm.write("<span>" + jQuery.sap.encodeHTML(oControl.getText()) + "</span><span style='display:inline-block;min-width:2.5em;width:3.0em;text-align:start'>" + jQuery.sap.encodeHTML(oControl.getUom()) + "</span>");
	};

	return SmartLinkRenderer;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/SmartLinkRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.flexibility.changes.AddLink') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.navpopover.flexibility.changes.AddLink'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/flexibility/changes/AddLink",[
	'jquery.sap.global', 'sap/ui/fl/Utils'
], function(jQuery, Utils) {
	"use strict";

	/**
	 * Change handler for adding a smart form group element (representing a field).
	 * 
	 * @constructor
	 * @private
	 * @since 1.44.0
	 * @alias sap.ui.comp.navpopover.flexibility.changes.AddLink
	 */
	var AddLink = {};

	/**
	 * Adds a smart form group element incl. a value control.
	 * 
	 * @param {sap.ui.fl.Change} oChange
	 * @param {sap.ui.comp.navpopover.NavigationContainer} oNavigationContainer
	 * @param {object} mPropertyBag
	 * @private
	 */
	AddLink.applyChange = function(oChange, oNavigationContainer, mPropertyBag) {
		var oChangeContent = oChange.getContent();
		if (jQuery.isEmptyObject(oChangeContent)) {
			Utils.log.error("Change does not contain sufficient information to be applied");
			return false;
		}

		// Update the value of 'availableActions' aggregation
		oNavigationContainer.getAvailableActions().some(function(oAvailableAction) {
			if (oAvailableAction.getKey() === oChangeContent.key) {
				// Also if the current visibility is equal to the visibility of the change we have to call '_updateAvailableAction' in order to update
				// the 'Define Links' text.
				mPropertyBag.modifier.setProperty(oAvailableAction, "visible", oChangeContent.visible);
				oNavigationContainer._updateAvailableAction(oAvailableAction, oChange.getLayer());
				return true;
			}
		});
		return true;
	};

	/**
	 * Completes the change by adding change handler specific content
	 * 
	 * @param {sap.ui.fl.Change} oChange Change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo
	 * @param {object} mPropertyBag
	 * @private
	 */
	AddLink.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
		if (jQuery.isEmptyObject(oSpecificChangeInfo.content)) {
			throw new Error("oSpecificChangeInfo.content should be filled");
		}
		if (!oSpecificChangeInfo.content.key) {
			throw new Error("In oSpecificChangeInfo.content.key attribute is required");
		}
		if (oSpecificChangeInfo.content.visible !== true) {
			throw new Error("In oSpecificChangeInfo.content.select attribute should be 'true'");
		}

		oChange.setContent(oSpecificChangeInfo.content);
	};

	/**
	 * @private
	 */
	AddLink.discardChangesOfLayer = function(sLayer, oNavigationContainer) {
		oNavigationContainer._discardAvailableActions(sLayer);
	};

	return AddLink;
},
/* bExport= */true);

}; // end of sap/ui/comp/navpopover/flexibility/changes/AddLink.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.flexibility.changes.RemoveLink') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.navpopover.flexibility.changes.RemoveLink'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/flexibility/changes/RemoveLink",[
	'jquery.sap.global', 'sap/ui/fl/Utils'
], function(jQuery, Utils) {
	"use strict";

	/**
	 * Change handler for adding a smart form group element (representing a field).
	 * 
	 * @constructor
	 * @private
	 * @since 1.44.0
	 * @alias sap.ui.comp.navpopover.flexibility.changes.RemoveLink
	 */
	var RemoveLink = {};

	/**
	 * Adds a smart form group element incl. a value control.
	 * 
	 * @param {sap.ui.fl.Change} oChange
	 * @param {sap.ui.comp.navpopover.NavigationContainer} oNavigationContainer
	 * @param {object} mPropertyBag
	 * @private
	 */
	RemoveLink.applyChange = function(oChange, oNavigationContainer, mPropertyBag) {
		var oChangeContent = oChange.getContent();
		if (jQuery.isEmptyObject(oChangeContent)) {
			Utils.log.error("Change does not contain sufficient information to be applied");
			return false;
		}

		// Update the value of 'availableActions' aggregation
		oNavigationContainer.getAvailableActions().some(function(oAvailableAction) {
			if (oAvailableAction.getKey() === oChangeContent.key) {
				// Also if the current visibility is equal to the visibility of the change we have to call '_updateAvailableAction' in order to update
				// the 'Define Links' text.
				mPropertyBag.modifier.setProperty(oAvailableAction, "visible", oChangeContent.visible);
				oNavigationContainer._updateAvailableAction(oAvailableAction, oChange.getLayer());
				return true;
			}
		});
		return true;
	};

	/**
	 * Completes the change by adding change handler specific content
	 * 
	 * @param {sap.ui.fl.Change} oChange Change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo
	 * @param {object} mPropertyBag
	 * @private
	 */
	RemoveLink.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
		if (jQuery.isEmptyObject(oSpecificChangeInfo.content)) {
			throw new Error("oSpecificChangeInfo.content should be filled");
		}
		if (!oSpecificChangeInfo.content.key) {
			throw new Error("In oSpecificChangeInfo.content.key attribute is required");
		}
		if (oSpecificChangeInfo.content.visible !== false) {
			throw new Error("In oSpecificChangeInfo.content.select attribute should be 'false'");
		}

		oChange.setContent(oSpecificChangeInfo.content);
	};

	/**
	 * @private
	 */
	RemoveLink.discardChangesOfLayer = function(sLayer, oNavigationContainer) {
		oNavigationContainer._discardAvailableActions(sLayer);
	};

	return RemoveLink;
},
/* bExport= */true);

}; // end of sap/ui/comp/navpopover/flexibility/changes/RemoveLink.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.ChartMetadata') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// ---------------------------------------------------------------------------------
// Class used to determine/retrieve UI chart type based on the annotation chart type
// ---------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.odata.ChartMetadata'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/odata/ChartMetadata",[
], function() {
	"use strict";


	var mUi5ChartTypeForAnnotationChartType = {
		"com.sap.vocabularies.UI.v1.ChartType/Column": "column",
		"com.sap.vocabularies.UI.v1.ChartType/ColumnStacked": "stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/ColumnDual": "dual_column",
		"com.sap.vocabularies.UI.v1.ChartType/ColumnStackedDual": "dual_stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/ColumnStacked100": "100_stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/ColumnStackedDual100": "100_dual_stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/Bar": "bar",
		"com.sap.vocabularies.UI.v1.ChartType/BarStacked": "stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/BarDual": "dual_bar",
		"com.sap.vocabularies.UI.v1.ChartType/BarStackedDual": "dual_stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/BarStacked100": "100_stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/BarStackedDual100": "100_dual_stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/Area": "line",
		"com.sap.vocabularies.UI.v1.ChartType/AreaStacked": "stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/AreaStacked100": "100_stacked_column",
		"com.sap.vocabularies.UI.v1.ChartType/HorizontalArea": "bar",
		"com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked": "stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked100": "100_stacked_bar",
		"com.sap.vocabularies.UI.v1.ChartType/Line": "line",
		"com.sap.vocabularies.UI.v1.ChartType/LineDual": "dual_line",
		"com.sap.vocabularies.UI.v1.ChartType/Combination": "combination",
		"com.sap.vocabularies.UI.v1.ChartType/CombinationStacked": "stacked_combination",
		"com.sap.vocabularies.UI.v1.ChartType/CombinationDual": "dual_combination",
		"com.sap.vocabularies.UI.v1.ChartType/CombinationStackedDual": "dual_stacked_combination",
		"com.sap.vocabularies.UI.v1.ChartType/HorizontalCombinationStacked": "horizontal_stacked_combination",
		"com.sap.vocabularies.UI.v1.ChartType/Pie": "pie",
		"com.sap.vocabularies.UI.v1.ChartType/Donut": "donut",
		"com.sap.vocabularies.UI.v1.ChartType/Scatter": "scatter",
		"com.sap.vocabularies.UI.v1.ChartType/Bubble": "bubble",
		"com.sap.vocabularies.UI.v1.ChartType/Radar": "line",
		"com.sap.vocabularies.UI.v1.ChartType/HeatMap": "heatmap",
		"com.sap.vocabularies.UI.v1.ChartType/TreeMap": "treemap",
		"com.sap.vocabularies.UI.v1.ChartType/Waterfall": "waterfall",
		"com.sap.vocabularies.UI.v1.ChartType/Bullet": "bullet",
		"com.sap.vocabularies.UI.v1.ChartType/VerticalBullet": "vertical_bullet"
	};

	var mMeasureRole = {
		"com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis1": "axis1",
		"com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis2": "axis2",
		"com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis3": "axis3"
	};

	var mDinemsionRole = {
		"com.sap.vocabularies.UI.v1.ChartDimensionRoleType/Category": "category",
		"com.sap.vocabularies.UI.v1.ChartDimensionRoleType/Series": "series"
	};

	var mValidCriticalityThresholds = [
		"AcceptanceRangeLowValue", "AcceptanceRangeHighValue", "ToleranceRangeLowValue", "ToleranceRangeHighValue", "DeviationRangeLowValue", "DeviationRangeHighValue"
	];

	/**
	 * Object used to determine/retrieve UI5 chart metadata based on the annotation chart metadata
	 *
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var ChartMetadata = {
		mCriticalityType: {},
		mImprovementDirectionType: {},
		/**
		 * Gets the UI5 chart type based on Annotation chart type.
		 *
		 * @public
		 * @param {string} The Annotation chart type
		 * @returns {string} the UI5 chart type (if found)
		 */
		getChartType: function(sType) {
			return mUi5ChartTypeForAnnotationChartType[sType];
		},
		/**
		 * Gets the Annotation chart type based on UI5 chart type.
		 *
		 * @public
		 * @param {string} sUI5ChartType The UI5 chart type
		 * @returns {string} the Annotation chart type (if found)
		 */
		getAnnotationChartType: function(sUI5ChartType) {
			for ( var sChartType in mUi5ChartTypeForAnnotationChartType) {
				if (mUi5ChartTypeForAnnotationChartType[sChartType] === sUI5ChartType) {
					return sChartType;
				}
			}
		},
		/**
		 * Gets the UI5 measure role based on Annotation measure role.
		 *
		 * @public
		 * @param {string} The Annotation measure role
		 * @returns {string} the UI5 measure role (if found)
		 */
		getMeasureRole: function(sRole) {
			return mMeasureRole[sRole];
		},
		/**
		 * Gets the UI5 dimension role based on Annotation dimension role.
		 *
		 * @public
		 * @param {string} The Annotation dimension role
		 * @returns {string} the UI5 dimension role (if found)
		 */
		getDimensionRole: function(sRole) {
			return mDinemsionRole[sRole];
		},

		/**
		 * Get the valid criticality threshold identifiers for semantic coloring.
		 *
		 * @returns {array} the valid criticality thresholds
		 * @public
		 */
		getCriticalityThresholds: function() {
			return mValidCriticalityThresholds;
		},

		/**
		 * Calculates the constant value based on a criticality threshold annotation.
		 *
		 * @param {oThreshold} The criticality threshold annotation
		 * @returns {number} The constant number value for the given annotation
		 * @public
		 */
		calculateConstantValue: function(oThresholdData) {
			var oValue = oThresholdData ? (oThresholdData.Decimal || oThresholdData.Int || oThresholdData.String) : undefined;
			// return value is a number from API
			return Number(oValue);
		},

		/**
		 * Gets the <code>CriticalityType</code> for the annotation.
		 *
		 * @see sap.chart.coloring.CriticalityType
		 * @param {sCriticalityType} The enumeration value for the <code>CriticalityType</code>
		 * @returns {sap.chart.coloring.CriticalityType} The charts semantic color type
		 * @public
		 */
		getCriticalityType: function(sCriticalityType) {
			return ChartMetadata.mCriticalityType[sCriticalityType];

		},

		/**
		 * Gets the <code>ImprovementDirectionType</code> for the annotation.
		 *
		 * @see sap.chart.coloring.ImprovementDirectionType
		 * @param {sImprovementDirectionType} The enumeration value for the <code>ImprovementDirectionType</code>
		 * @returns {sap.chart.coloring.ImprovementDirectionType} The improvement directions value
		 * @public
		 */
		getImprovementDirectionType: function(sImprovementDirectionType) {
			return ChartMetadata.mImprovementDirectionType[sImprovementDirectionType];

		},

		/**
		 *
		 */
		feedWithChartLibrary: function(chartLibrary) {
			if (!ChartMetadata.chartLibrary) {
				ChartMetadata.chartLibrary = chartLibrary;

				var CriticalityType = chartLibrary.coloring.CriticalityType;
				var ImprovementDirectionType = chartLibrary.coloring.ImprovementDirectionType;


				ChartMetadata.mCriticalityType = {
					"com.sap.vocabularies.UI.v1.CriticalityType/Neutral": CriticalityType.Neutral,
					"com.sap.vocabularies.UI.v1.CriticalityType/Negative": CriticalityType.Negative,
					"com.sap.vocabularies.UI.v1.CriticalityType/Critical": CriticalityType.Critical,
					"com.sap.vocabularies.UI.v1.CriticalityType/Positive": CriticalityType.Positive
				};

				ChartMetadata.mImprovementDirectionType = {
					"com.sap.vocabularies.UI.v1.ImprovementDirectionType/Target": ImprovementDirectionType.Target,
					"com.sap.vocabularies.UI.v1.ImprovementDirectionType/Maximize": ImprovementDirectionType.Maximize,
					"com.sap.vocabularies.UI.v1.ImprovementDirectionType/Minimize": ImprovementDirectionType.Minimize
				};

			}
		}
	};

	return ChartMetadata;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/ChartMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.CriticalityMetadata') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// --------------------------------------------------------------------------------------------
// Class used to determine/retrieve criticality info based on the annotation UI.CriticalityType
// --------------------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.odata.CriticalityMetadata'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/odata/CriticalityMetadata",[], function() {
	"use strict";

	var mCriticalityValue = {
		"com.sap.vocabularies.UI.v1.CriticalityType/Neutral": 0,
		"com.sap.vocabularies.UI.v1.CriticalityType/Negative": 1,
		"com.sap.vocabularies.UI.v1.CriticalityType/Critical": 2,
		"com.sap.vocabularies.UI.v1.CriticalityType/Positive": 3
	};

	var mCriticalityToState = {
		0: "None",
		1: "Error",
		2: "Warning",
		3: "Success"
	};

	var mCriticalityToIcon = {
		0: "sap-icon://status-inactive",
		1: "sap-icon://status-negative",
		2: "sap-icon://status-critical",
		3: "sap-icon://status-positive"
	};

	/**
	 * Object used to determine/retrieve criticality info based on the annotation UI.CriticalityType
	 * 
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var CriticalityMetadata = {
		/**
		 * Get the state based on Annotation UI.CriticalityType
		 * 
		 * @public
		 * @param {string} sType - The Annotation criticality type value
		 * @returns {string} the state (if found)
		 */
		getCriticalityState: function(sType) {
			if (typeof sType === "string") {
				sType = mCriticalityValue[sType];
			}
			return mCriticalityToState[sType];
		},

		/**
		 * Get the UI5 icon based on Annotation UI.CriticalityType
		 * 
		 * @public
		 * @param {string} sType - The Annotation criticality type vaue
		 * @returns {string} the icon (if found)
		 */
		getCriticalityIcon: function(sType) {
			if (typeof sType === "string") {
				sType = mCriticalityValue[sType];
			}
			return mCriticalityToIcon[sType];
		},

		/**
		 * Determines whether an icon is shown based on the annotation UI.CriticalityRepresentationType.
		 * 
		 * @public
		 * @param {string} sType - The value of the UI.CriticalityRepresentationType annotation
		 * @returns {boolean} false (if criticality icon is not shown)
		 */
		getShowCriticalityIcon: function(sType) {
			return sType === "com.sap.vocabularies.UI.v1.CriticalityRepresentationType/WithoutIcon" ? false : true;
		}
	};

	return CriticalityMetadata;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/CriticalityMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.odata.FieldSelectorRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelectorRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class FieldSelector renderer.
	 * @static
	 */
	var FieldSelectorRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	FieldSelectorRenderer.render = function(oRm, oControl) {

		// write the HTML into the render manager
		oRm.write("<span");
		oRm.writeControlData(oControl);
		// oRm.addClass("sapUiCompFieldSelector");
		oRm.writeClasses();
		oRm.write(">"); // span element
		var oContent = oControl.getContent();
		oRm.renderControl(oContent);
		oRm.write("</span>");
	};
	

	return FieldSelectorRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/odata/FieldSelectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.ODataModelUtil') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// -------------------------------------------------------------------------------
// Helper class used for generic ODataModel related handling
// -------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.odata.ODataModelUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.v2.ODataModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/ODataModelUtil",["sap/ui/model/odata/v2/ODataModel"], function(ODataModelV2) {
	"use strict";

	/**
	 * Object used to for generic ODataModel related handling
	 * 
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var ODataModelUtil = {
		/**
		 * Static function that takes care of ODataModel initialisation (all parameters are mandatory)
		 * 
		 * @param {Object} oSmartControl - the Smart control (e.g. SmartTable, SmartFilter)
		 * @param {function} fModelInitCallback - the callback function (will be triggered in the SmartControl scope)
		 * @private
		 */
		handleModelInit: function(oSmartControl, fModelInitCallback) {
			var bLoadMetadataAsync = false, oModel;
			if (oSmartControl && !oSmartControl._bMetaModelLoadAttached && fModelInitCallback) {
				oModel = oSmartControl.getModel();
				if (oModel) {
					// Check if ODataMetaModel was loaded
					// If not, delay the creation of table content/helpers until ODataMetaModel is loaded!
					// Do this only for async ODataModel
					if (oModel.getMetadata() && oModel instanceof sap.ui.model.odata.v2.ODataModel) {
						bLoadMetadataAsync = true; // always true for v2.ODataModel
					} else if (oModel.bLoadMetadataAsync || (oModel.getServiceMetadata && !oModel.getServiceMetadata())) {
						bLoadMetadataAsync = true; // assume async if bLoadMetadataAsync or if no service metadata has been loaded for the ODataModel
					}
					oSmartControl._bMetaModelLoadAttached = true;
					if (bLoadMetadataAsync && oModel.getMetaModel() && oModel.getMetaModel().loaded) {
						// wait for the ODataMetaModel loaded promise to be resolved
						oModel.getMetaModel().loaded().then(fModelInitCallback.bind(oSmartControl));
					} else {
						// Could be a non ODataModel or a synchronous ODataModel --> just create the necessary helpers
						fModelInitCallback.apply(oSmartControl);
					}
				}
			}
		}
	};

	return ODataModelUtil;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/ODataModelUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.ODataType') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// -------------------------------------------------------------------------------
// Class used to determine/retrieve OData type based on the Edm type of a property
// -------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.odata.ODataType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Boolean'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Byte'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.DateTime'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.DateTimeOffset'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Decimal'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Double'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Single'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Guid'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Int16'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Int32'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Int64'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.SByte'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.String'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Time'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/ODataType",[
	'sap/ui/model/odata/type/Boolean', 'sap/ui/model/odata/type/Byte', 'sap/ui/model/odata/type/DateTime', 'sap/ui/model/odata/type/DateTimeOffset', 'sap/ui/model/odata/type/Decimal', 'sap/ui/model/odata/type/Double', 'sap/ui/model/odata/type/Single', 'sap/ui/model/odata/type/Guid', 'sap/ui/model/odata/type/Int16', 'sap/ui/model/odata/type/Int32', 'sap/ui/model/odata/type/Int64', 'sap/ui/model/odata/type/SByte', 'sap/ui/model/odata/type/String', 'sap/ui/model/odata/type/Time'
], function(Boolean, Byte, DateTime, DateTimeOffset, Decimal, Double, Single, Guid, Int16, Int32, Int64, SByte, String, Time) {
	"use strict";

	// @see sap.ui.model.odata.type for below types
	var mUi5TypeForEdmType = {
		"Edm.Boolean": Boolean,
		"Edm.Byte": Byte,
		"Edm.DateTime": DateTime,
		"Edm.DateTimeOffset": DateTimeOffset,
		"Edm.Decimal": Decimal,
		"Edm.Double": Double,
		"Edm.Float": Single,
		"Edm.Guid": Guid,
		"Edm.Int16": Int16,
		"Edm.Int32": Int32,
		"Edm.Int64": Int64,
		"Edm.SByte": SByte,
		"Edm.Single": Single,
		"Edm.String": String,
		"Edm.Time": Time
	};

	var mDefaultTypeForEdmType = {
		"Edm.Boolean": "Boolean",
		"Edm.Byte": "Byte",
		"Edm.DateTime": "DateTime",
		"Edm.DateTimeOffset": "DateTimeOffset",
		"Edm.Decimal": "Decimal",
		"Edm.Double": "Double",
		"Edm.Float": "Float",
		"Edm.Guid": "Guid",
		"Edm.Int16": "Int16",
		"Edm.Int32": "Int32",
		"Edm.Int64": "Int64",
		"Edm.SByte": "SByte",
		"Edm.Single": "Single",
		"Edm.String": "String",
		"Edm.Time": "Time"
	};

	var mNumericType = {
		"Edm.Decimal": true,
		"Edm.Double": true,
		"Edm.Float": true,
		"Edm.Int16": true,
		"Edm.Int32": true,
		"Edm.Int64": true,
		"Edm.Single": true
	};

	var mDateOrTimeType = {
		"Edm.DateTime": true,
		"Edm.DateTimeOffset": true,
		"Edm.Time": true
	};

	/**
	 * Object used to determine/retrieve OData model type and other relevant attributes based on the Edm type (primitive types) of an OData property
	 * 
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var ODataType = {
		/**
		 * Create/Get the OData type based on Edm type
		 * 
		 * @public
		 * @param {string} sType - The Edm type from OData property
		 * @param {object} oFormatOptions format options as defined in the interface of {@link sap.ui.model.SimpleType}
		 * @param {object} oConstraints constraints as defined in interface of {@link sap.ui.model.SimpleType} or its concrete subclasses
		 * @returns {sap.ui.model.SimpleType} the OData type
		 */
		getType: function(sType, oFormatOptions, oConstraints) {
			var oType = null, _oType;
			_oType = mUi5TypeForEdmType[sType];
			if (_oType) {
				oType = new _oType(oFormatOptions, oConstraints);
			}
			return oType;
		},
		/**
		 * Returns whether the specified type is numeric or not
		 * 
		 * @public
		 * @param {string} sType - The Edm type from OData property
		 * @returns {boolean} true|false
		 */
		isNumeric: function(sType) {
			return mNumericType[sType] ? true : false;
		},
		/**
		 * Returns whether the specified type is date (or time or datetime) or not
		 * 
		 * @public
		 * @param {string} sType - The Edm type from OData property
		 * @returns {boolean} true|false
		 */
		isDateOrTime: function(sType) {
			return mDateOrTimeType[sType] ? true : false;
		},
		/**
		 * Returns the name of the property containing the default value
		 * 
		 * @public
		 * @param {string} sType - The Edm type from OData property.
		 * @returns {string} property name containing the value.
		 */
		getDefaultValueTypeName: function(sType) {
			return mDefaultTypeForEdmType[sType];
		}
	};

	return ODataType;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/ODataType.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.SideEffects') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.odata.SideEffects'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/SideEffects",[	"jquery.sap.global" ], function(jQuery) {
	"use strict";

	/**
	 * Creates a new instance.
	 * 
	 * @private
	 * @class
	 * @classdesc Analyzes OData Side-Effects annotation.
	 * @author SAP SE
	 * @experimental to be productized soon
	 * @version 1.50.6
	 * @since 1.31.0
	 * @alias sap.ui.comp.odata.SideEffects
	 */
	var SideEffects = function() {
		
	};
	
	/**
	 * Calculates the available side effect annotations for a given path. 
	 * 
	 * @param {string} sPath the path
	 * @param {string} sTypePath the path identifying a property on a complex type
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.complexType the OData property definition
	 * @returns {map} the available side effects ordered by their origin, e.g. the entity set.
	 * @public
	*/
	SideEffects.prototype.getSideEffects = function(sPath, sTypePath, oMetaData) {
		var mResult = {};
		
		if (oMetaData) {
			if (sPath) {
				if (oMetaData.entitySet) {
					mResult.entitySet = this._getForPath(oMetaData.entitySet, sPath);
				}
				
				if (oMetaData.entityType) {
					mResult.entityType = this._getForPath(oMetaData.entityType, sPath);
				}
			}
			
			if (sTypePath && oMetaData.complexType) {
				mResult.complexType = this._getForPath(oMetaData.complexType, sTypePath);
			}
		}
		
		return mResult;
	};
	
	/**
	 * Returns the side effects available on an entity for a given path.
	 *  
	 * @param {object} oEntity the given entity, which can be a complex type, entity type or entity set
	 * @param {string} sPath the path
	 * @returns {map} the available side effects
	 * @private
	 */
	SideEffects.prototype._getForPath = function(oEntity, sPath) {
		var n, oSideEffect, mResult = {};
		
		for (n in oEntity) {
			if (n.indexOf && n.indexOf("com.sap.vocabularies.Common.v1.SideEffects") === 0) {
				oSideEffect = oEntity[n];
				
				if (this._checkSourceProperties(oSideEffect, sPath)) {
					mResult[n] = oSideEffect;
				}
				
				if (this._checkSourceEntities(oSideEffect, sPath)) {
					mResult[n] = oSideEffect;
				}
			}
		}
		
		return mResult;
	};
	
	/**
	 * Checks a given side effect annotation for the given path.
	 * 
	 * @param {object} oSideEffect the given side effect annotation
	 * @param {string} sPath the given path
	 * @returns {boolean} <code>true</code>, if the given side effect annotation contains the given path in its source properties, <code>false</code> otherwise.
	 * @private
	 */
	SideEffects.prototype._checkSourceProperties = function(oSideEffect, sPath) {
		var i, len;
		
		if (oSideEffect.SourceProperties) {
			len = oSideEffect.SourceProperties.length;
			
			for (i = 0; i < len; i++) {
				if (oSideEffect.SourceProperties[i].PropertyPath === sPath) {
					return true;
				}			
			}
		}
		
		return false;
	};
	
	/**
	 * Checks a given side effect annotation for the given path.
	 * 
	 * @param {object} oSideEffect the given side effect annotation
	 * @param {string} sPath the given path
	 * @returns {boolean} <code>true</code>, if the given side effect annotation contains the given path in its source properties, <code>false</code> otherwise.
	 * @private
	 */
	SideEffects.prototype._checkSourceEntities = function(oSideEffect, sPath) {
		var i, len;
		
		if (oSideEffect.SourceEntities && oSideEffect.SourceEntities.Collection) {
			len = oSideEffect.SourceEntities.Collection.length;
			
			for (i = 0; i < len; i++) {
				if (oSideEffect.SourceEntities.Collection[i].NavigationPropertyPath === sPath) {
					return true;
				}			
			}
		}
		
		return false;
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	SideEffects.prototype.destroy = function() {
		
	};
	
	return SideEffects;

}, true);
}; // end of sap/ui/comp/odata/SideEffects.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.ChartWrapper') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.personalization.ChartWrapper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/ChartWrapper",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function(jQuery, Element) {
	"use strict";

	/**
	 * The ChartWrapper can be used to wrap a chart.
	 * 
	 * @class Chart Wrapper
	 * @extends sap.ui.core.Element
	 * @author SAP
	 * @version 1.34.0-SNAPSHOT
	 * @private
	 * @since 1.34.0
	 * @alias sap.ui.comp.personalization.ChartWrapper
	 */
	var ChartWrapper = Element.extend("sap.ui.comp.personalization.ChartWrapper",
	/** @lends sap.ui.comp.personalization.ChartWrapper */
	{
		constructor: function(sId, mSettings) {
			Element.apply(this, arguments);
		},
		metadata: {
			library: "sap.ui.comp",
			properties: {
				/**
				 * Array of filters coming from outside.
				 */
				externalFilters: {
					type: "sap.m.P13nFilterItem[]",
					defaultValue: []
				}
			},
			aggregations: {
				/**
				 * Defines columns.
				 */
				columns: {
					type: "sap.ui.comp.personalization.ColumnWrapper",
					multiple: true,
					singularName: "column"
				}
			},
			associations: {
				/**
				 * Defines original chart object.
				 */
				chart: {
					type: "sap.chart.Chart",
					multiple: false
				}
			},
			events: {
				/**
				 * Fire filters set via property <code>externalFilters</code>.
				 */
				externalFiltersSet: {
					parameters: {
						/**
						 * Array of filters to be shown in the filter panel.
						 */
						filters: {
							type: "sap.m.P13nFilterItem[]"
						}
					}
				}
			}
		}
	});

	ChartWrapper.prototype.getChartObject = function() {
		var oChart = this.getAssociation("chart");
		if (typeof oChart === "string") {
			oChart = sap.ui.getCore().byId(oChart);
		}
		return oChart;
	};

	ChartWrapper.prototype.getDomRef = function() {
		var oChart = this.getChartObject();
		return oChart.getDomRef();
	};

	ChartWrapper.prototype.setExternalFilters = function(aFilters) {
		aFilters = this.validateProperty("externalFilters", aFilters);
		this.setProperty("externalFilters", aFilters, true); // no rerendering
		this.fireExternalFiltersSet({
			filters: aFilters
		});
		return this;
	};

	return ChartWrapper;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/ChartWrapper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.ColumnWrapper') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.personalization.ColumnWrapper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/ColumnWrapper",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function(jQuery, Element) {
	"use strict";

	/**
	 * The ColumnWrapper can be used to wrap a chart.
	 * 
	 * @class Chart Wrapper
	 * @extends sap.ui.core.Element
	 * @author SAP
	 * @version 1.34.0-SNAPSHOT
	 * @private
	 * @since 1.34.0
	 * @alias sap.ui.comp.personalization.ColumnWrapper
	 */
	var ColumnWrapper = Element.extend("sap.ui.comp.personalization.ColumnWrapper",
	/** @lends sap.ui.comp.personalization.ColumnWrapper */
	{
		constructor: function(sId, mSettings) {
			Element.apply(this, arguments);
		},
		metadata: {
			library: "sap.ui.comp",
			properties: {
				/**
				 * Defines label to be displayed for the column.
				 */
				label: {
					type: "string"
				},

				/**
				 * Defines tooltip of column.
				 */
				tooltip: {
					type: "string"
				},

				/**
				 * Defines selection of column.
				 */
				selected: {
					type: "boolean",
					defaultValue: false
				},

				/**
				 * Defines the type of column. Supported values are: "dimension", "measure" and "notDimeasure".
				 */
				aggregationRole: {
					type: "sap.ui.comp.personalization.AggregationRole"
				},

				/**
				 * Defines the role of column. Supported values are: "axis1", "axis2" or "axis3" in case of measure and "category" or "series" in case
				 * of dimension.
				 */
				role: {
					type: "string"
				},

				/**
				 * Defines the href of link.
				 * 
				 * @since 1.46.0
				 */
				href: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Defines the target of link.
				 * 
				 * @since 1.46.0
				 */
				target: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Defines the press event of link.
				 * 
				 * @since 1.46.0
				 */
				press: {
					type: "object",
					defaultValue: null
				},
				/**
				 * Indicates if the column is sorted.
				 * 
				 * @since 1.48.0
				 */
				sorted: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Defines the sort order of the column.
				 * 
				 * @since 1.48.0
				 */
				sortOrder: {
					type: "string",
					defaultValue: "Ascending"
				}
			}
		}
	});

	return ColumnWrapper;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/ColumnWrapper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.SelectionWrapper') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.personalization.SelectionWrapper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/SelectionWrapper",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function(jQuery, Element) {
	"use strict";

	/**
	 * The SelectionWrapper can be used to wrap a chart.
	 * 
	 * @class Selection Wrapper
	 * @extends sap.ui.core.Element
	 * @author SAP
	 * @version 1.46.0-SNAPSHOT
	 * @private
	 * @since 1.46.0
	 * @alias sap.ui.comp.personalization.SelectionWrapper
	 */
	var SelectionWrapper = Element.extend("sap.ui.comp.personalization.SelectionWrapper",
	/** @lends sap.ui.comp.personalization.SelectionWrapper */
	{
		constructor: function(sId, mSettings) {
			Element.apply(this, arguments);
		},
		metadata: {
			library: "sap.ui.comp",
			aggregations: {
				/**
				 * Defines columns.
				 */
				columns: {
					type: "sap.ui.comp.personalization.ColumnWrapper",
					multiple: true,
					singularName: "column"
				}
			}
		}
	});

	return SelectionWrapper;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/SelectionWrapper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.Util') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * @namespace Provides utitlity functions for the personalization dialog
 * @name sap.ui.comp.personalization.Util
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.25.0
 */
jQuery.sap.declare('sap.ui.comp.personalization.Util'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/Util",[
	'./ChartWrapper', './SelectionWrapper', './ColumnWrapper', 'sap/ui/comp/library', 'sap/m/library'
], function(ChartWrapper, SelectionWrapper, ColumnWrapper, CompLibrary, MLibrary) {
	"use strict";
	var Util = {

		/**
		 *
		 */
		splitDimeasures: function(aDimeasureItems, aItems, aDimensions, aMeasures) {
			aDimeasureItems.forEach(function(oDimeasureItem) {
				var oItem = this.getArrayElementByKey("columnKey", oDimeasureItem.columnKey, aItems);
				if (oItem.aggregationRole === sap.ui.comp.personalization.AggregationRole.Dimension) {
					aDimensions.push(oDimeasureItem);
				} else if (oItem.aggregationRole === sap.ui.comp.personalization.AggregationRole.Measure) {
					aMeasures.push(oDimeasureItem);
				}
			}, this);
		},

		/**
		 *
		 */
		createChartWrapper: function(oChart, aAdditionalData, aColumnKeysOrdered) {
			var oP13nData;
			var oColumnKey2ColumnMap = {};
			oChart.getDimensions().forEach(function(oDimension) {
				oP13nData = oDimension.data("p13nData");
				oColumnKey2ColumnMap[oP13nData.columnKey] = new ColumnWrapper({
					label: oDimension.getLabel(),
					tooltip: oDimension.getTooltip(),
					selected: oChart.getVisibleDimensions().indexOf(oDimension.getName()) > -1,
					aggregationRole: sap.ui.comp.personalization.AggregationRole.Dimension,
					role: oDimension.getRole() ? oDimension.getRole() : oDimension.getMetadata().getProperty("role").getDefaultValue(),//oRb.getText('COLUMNSPANEL_CHARTROLE_CATEGORY'),
					sorted: oP13nData.sorted,
					sortOrder: oP13nData.sortOrder,
					customData: new sap.ui.core.CustomData({
						key: "p13nData",
						value: oP13nData
					})
				});
			});
			oChart.getMeasures().forEach(function(oMeasure) {
				oP13nData = oMeasure.data("p13nData");
				oColumnKey2ColumnMap[oP13nData.columnKey] = new ColumnWrapper({
					label: oMeasure.getLabel(),
					tooltip: oMeasure.getTooltip(),
					selected: oChart.getVisibleMeasures().indexOf(oMeasure.getName()) > -1,
					aggregationRole: sap.ui.comp.personalization.AggregationRole.Measure,
					role: oMeasure.getRole() ? oMeasure.getRole() : oMeasure.getMetadata().getProperty("role").getDefaultValue(),//oRb.getText('COLUMNSPANEL_CHARTROLE_AXIS1'),
					sorted: oP13nData.sorted,
					sortOrder: oP13nData.sortOrder,
					customData: new sap.ui.core.CustomData({
						key: "p13nData",
						value: oP13nData
					})
				});
			});
			if (aAdditionalData) {
				aAdditionalData.forEach(function(oP13nData) {
					oColumnKey2ColumnMap[oP13nData.columnKey] = new ColumnWrapper({
						label: oP13nData.label,
						tooltip: oP13nData.tooltip,
						selected: false,
						aggregationRole: sap.ui.comp.personalization.AggregationRole.NotDimeasure,
						sorted: oP13nData.sorted,
						sortOrder: oP13nData.sortOrder,
						customData: new sap.ui.core.CustomData({
							key: "p13nData",
							value: oP13nData
						})
					});
				});
			}
			return new ChartWrapper({
				chart: oChart,
				columns: aColumnKeysOrdered.map(function(sColumnKey) {
					return oColumnKey2ColumnMap[sColumnKey];
				})
			});
		},

		/**
		 *
		 */
		createSelectionWrapper: function(aMAvailableActions, bForbidNavigation) {
			var aColumns = aMAvailableActions.map(function(oMAvailableAction) {
				var oColumn = new ColumnWrapper({
					label: oMAvailableAction.text,
					selected: oMAvailableAction.visible,
					href: bForbidNavigation ? undefined : oMAvailableAction.href,
					target: oMAvailableAction.target,
					press: oMAvailableAction.press
				});
				oColumn.data("p13nData", {
					columnKey: oMAvailableAction.key
				});
				return oColumn;
			}, this);

			return new SelectionWrapper({
				columns: aColumns
			});
		},

		/**
		 * Sort the items in alphabetical order.
		 *
		 * @param {object} aItems
		 */
		sortItemsByText: function(aItems, sKeyName) {
			var sLanguage;
			try {
				var sLanguage = sap.ui.getCore().getConfiguration().getLocale().toString();
				if (typeof window.Intl !== 'undefined') {
					var oCollator = window.Intl.Collator(sLanguage, {
						numeric: true
					});
					aItems.sort(function(a, b) {
						return oCollator.compare(a[sKeyName], b[sKeyName]);
					});
				} else {
					aItems.sort(function(a, b) {
						return a[sKeyName].localeCompare(b[sKeyName], sLanguage, {
							numeric: true
						});
					});
				}
			} catch (oException) {
				// this exception can happen if the configured language is not convertible to BCP47 -> getLocale will deliver an exception
			}
		},

		/**
		 * Converts string value to Date instance in filter model data <code>oPersonalisationData</code>.
		 *
		 * @param {object} oPersonalisationData
		 * @param {array} aColumnKeysOfDateType Optional parameter which can be passed to improve performance
		 */
		recoverPersonalisationDateData: function(oPersonalisationData, aColumnKeysOfDateType) {
			if (aColumnKeysOfDateType.length && oPersonalisationData && oPersonalisationData.filter) {
				oPersonalisationData.filter.filterItems.forEach(function(oFilterItem) {
					if (aColumnKeysOfDateType.indexOf(oFilterItem.columnKey) > -1) {
						if (oFilterItem.value1 && typeof (oFilterItem.value1) === "string") {
							oFilterItem.value1 = new Date(oFilterItem.value1);
						}
						if (oFilterItem.value2 && typeof (oFilterItem.value2) === "string") {
							oFilterItem.value2 = new Date(oFilterItem.value2);
						}
					}
				});
			}
		},

		recoverPersonalisationTimeData: function(oPersonalisationData, aColumnKeysOfTimeType) {
			if (aColumnKeysOfTimeType.length && oPersonalisationData && oPersonalisationData.filter) {
				oPersonalisationData.filter.filterItems.forEach(function(oFilterItem) {
					if (aColumnKeysOfTimeType.indexOf(oFilterItem.columnKey) > -1) {
						if (oFilterItem.value1 && typeof (oFilterItem.value1) === "string") {
							oFilterItem.value1 = new Date(oFilterItem.value1);
						}
						if (oFilterItem.value2 && typeof (oFilterItem.value2) === "string") {
							oFilterItem.value2 = new Date(oFilterItem.value2);
						}
					}
				});
			}
		},

		/**
		 * Converts string value to Boolean instance in filter model data <code>oPersonalisationData</code>.
		 *
		 * @param {object} oPersonalisationData
		 * @param {array} aColumnKeysOfDateType Optional parameter which can be passed to improve performance
		 */
		recoverPersonalisationBooleanData: function(oPersonalisationData, aColumnKeysOfDateType) {
			if (aColumnKeysOfDateType.length && oPersonalisationData && oPersonalisationData.filter) {
				oPersonalisationData.filter.filterItems.forEach(function(oFilterItem) {
					if (aColumnKeysOfDateType.indexOf(oFilterItem.columnKey) > -1) {
						if (oFilterItem.value1 && typeof (oFilterItem.value1) === "string") {
							oFilterItem.value1 = oFilterItem.value1 === "true";
						}
						if (oFilterItem.value2 && typeof (oFilterItem.value2) === "string") {
							oFilterItem.value2 = oFilterItem.value2 === "true";
						}
					}
				});
			}
		},

		getUnionOfAttribute: function(oSetting, sAttributeName) {
			var aUnion = [];
			var fAddColumnKey = function(sColumnKey) {
				if (aUnion.indexOf(sColumnKey) < 0) {
					aUnion.push(sColumnKey);
				}
			};
			for ( var sNamespace in oSetting) {
				var oNamespace = oSetting[sNamespace];
				if (!oNamespace[sAttributeName]) {
					continue;
				}
				oNamespace[sAttributeName].forEach(fAddColumnKey);
			}
			return aUnion;
		},

		getUnionOfColumnKeys: function(oColumnKeys) {
			var aUnion = [];
			var fConcatUnique = function(aColumnKeys) {
				var aUnion_ = aUnion.concat(aColumnKeys);
				aUnion = aUnion_.filter(function(sItem, iPos) {
					return aUnion_.indexOf(sItem) === iPos;
				});
			};
			for ( var sNamespace in oColumnKeys) {
				fConcatUnique(oColumnKeys[sNamespace]);
			}
			return aUnion;
		},

		copy: function(oObject) {
			if (oObject instanceof Array) {
				return jQuery.extend(true, [], oObject);
			}
			return jQuery.extend(true, {}, oObject);
		},

		sort: function(sKeyName, aArray) {
			var aResult = this.copy(aArray);
			aResult.sort(function(a, b) {
				var aText = a[sKeyName].toLocaleLowerCase();
				var bText = b[sKeyName].toLocaleLowerCase();

				if (aText < bText) {
					return -1;
				}
				if (aText > bText) {
					return 1;
				}
				// a must be equal to b
				return 0;
			});
			return aResult;
		},

		removeEmptyProperty: function(oObject) {
			for ( var type in oObject) {
				if (oObject[type] === null || oObject[type] === undefined) {
					delete oObject[type];
				}
			}
			return oObject;
		},

		semanticEqual: function(oItemA, oItemB) {
			if (!oItemA || !oItemB) {
				return false;
			}
			for ( var property in oItemA) {
				if (oItemA[property] !== oItemB[property]) {
					return false;
				}
			}
			return true;
		},

		/**
		 * @param {sap.ui.comp.personalization.ResetType}
		 * @returns {boolean} true if at least one property of oChangeType has 'ModelChanged' or 'TableChanged'.
		 */
		hasChangedType: function(oChangeType) {
			for ( var type in oChangeType) {
				if (oChangeType[type] === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeType[type] === sap.ui.comp.personalization.ChangeType.TableChanged) {
					return true;
				}
			}
			return false;
		},

		/**
		 * @param {sap.ui.comp.personalization.ResetType}
		 * @returns {boolean} true if property <code>sNamespace</code> of oChangeType has 'ModelChanged' or 'TableChanged'.
		 */
		isNamespaceChanged: function(oChangeType, sNamespace) {
			if (oChangeType[sNamespace]) {
				return oChangeType[sNamespace] === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeType[sNamespace] === sap.ui.comp.personalization.ChangeType.TableChanged;
			}
			return false;
		},

		/**
		 * Returns an array of elements coming from sElements that are separated by commas.
		 *
		 * @param {string} sElements
		 * @returns {array}
		 */
		createArrayFromString: function(sElements) {
			if (!sElements) {
				return [];
			}
			var aElements = [];
			var aRowElements = sElements.split(",");
			aRowElements.forEach(function(sField) {
				if (sField !== "") {
					aElements.push(sField.trim());
				}
			});
			return aElements;
		},

		/**
		 * @param {string} sKeyName: property name for key
		 * @param {string} sKeyValue: kay value which is looking for
		 * @param {Array} aArray: array where the element with key value 'sKeyValue' is looking for
		 * @returns {int} Index of sKey or -1 if not found
		 */
		getIndexByKey: function(sKeyName, sKeyValue, aArray) {
			if (!aArray || !aArray.length) {
				return -1;
			}
			var iIndex = -1;
			aArray.some(function(oElement, i) {
				if (oElement[sKeyName] !== undefined && oElement[sKeyName] === sKeyValue) {
					iIndex = i;
					return true;
				}
			});
			return iIndex;
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {string | null}
		 */
		getColumnKey: function(oColumn) {
			return this._getCustomProperty(oColumn, "columnKey") || oColumn.getId();
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {string | null}
		 */
		getColumnType: function(oColumn) {
			return this._getCustomProperty(oColumn, "type");
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {boolean}
		 */
		isGroupable: function(oColumn) {
			if (sap.ui.table && sap.ui.table.AnalyticalColumn && oColumn instanceof sap.ui.table.AnalyticalColumn) {
				// cf. implementation of sap.ui.table.AnalyticalColumnMenu.prototype._addGroupMenuItem
				var oTable = oColumn.getParent();
				var oBinding = oTable && oTable.getBinding("rows");
				var oResultSet = oBinding && oBinding.getAnalyticalQueryResult();

				if (oTable && oResultSet && oResultSet.findDimensionByPropertyName(oColumn.getLeadingProperty()) && jQuery.inArray(oColumn.getLeadingProperty(), oBinding.getSortablePropertyNames()) > -1 && jQuery.inArray(oColumn.getLeadingProperty(), oBinding.getFilterablePropertyNames()) > -1) {
					return true;
				}
			}

			if (oColumn instanceof sap.m.Column) {
				return this.isSortable(oColumn);
			}

			// Not yet supported
			// if (oColumn instanceof sap.ui.table.Column) {
			// return oColumn.getParent().getEnableGrouping() && this.isSortable(oColumn);
			// }

			return false;
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column | sap.ui.comp.personalization.ColumnWrapper} oColumn
		 * @returns {boolean}
		 */
		isSortable: function(oColumn) {
			// If oColumn implements "sortProperty" property then we take it
			if (oColumn.getSortProperty) {
				return !!oColumn.getSortProperty();
			}
			// Only if oColumn does not implement "sortProperty" property then we take "p13nData"
			return !!this._getCustomProperty(oColumn, "sortProperty");

		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column | sap.ui.comp.personalization.ColumnWrapper} oColumn
		 * @returns {boolean}
		 */
		isFilterable: function(oColumn) {
			// If oColumn implements "filterProperty" property then we take it.
			if (oColumn.getFilterProperty) {
				return !!oColumn.getFilterProperty();
			}
			// Only if oColumn does not implement "filterProperty" property then we take "p13nData".
			return !!this._getCustomProperty(oColumn, "filterProperty");

		},

		/**
		 * @param {sap.m.Column[] | sap.ui.table.Column[]} aColumns
		 * @returns {boolean} True if all columns support 'columnKey' or all columns do not support 'columnKey'. False in case of mixed situation.
		 */
		isConsistent: function(aColumns) {
			if (!aColumns || !aColumns.length) {
				return true;
			}
			var oColumnKeys = {};
			var bConsistent = true;
			var bHasColumnKeyFirst = !!this._getCustomProperty(aColumns[0], "columnKey");
			aColumns.some(function(oColumn) {
				var sColumnKey = this._getCustomProperty(oColumn, "columnKey");
				var bHasColumnKeyCurrent = !!sColumnKey;
				if (bHasColumnKeyCurrent !== bHasColumnKeyFirst) {
					// The table instance provided contains some columns for which a columnKey is provided, some for which a columnKey is not
					// provided.
					bConsistent = false;
					return true; // leave some()
				}

				if (bHasColumnKeyFirst) {
					if (oColumnKeys[sColumnKey]) {
						// The table instance provided contains some columns with a duplicate 'columnKey'.
						bConsistent = false;
						return true; // leave some()
					}
					oColumnKeys[sColumnKey] = {};
				}
			}, this);
			return bConsistent;
		},

		/**
		 * @param {string} sKeyName: property name for key
		 * @param {string} sKeyValue: kay value which is looking for
		 * @param {Array} aArray: array where the element with key value 'sKeyValue' is looking for
		 * @returns {object | null} either found array element or null if 'sKeyValue' does not exist in aArray
		 */
		getArrayElementByKey: function(sKeyName, sKeyValue, aArray) {
			if (!aArray || !aArray.length) {
				return null;
			}
			var oElement = null;
			aArray.some(function(oElement_) {
				if (oElement_[sKeyName] !== undefined && oElement_[sKeyName] === sKeyValue) {
					oElement = oElement_;
					return true;
				}
			});
			return oElement;
		},

		/**
		 * Checks whether <code>columnKey</code> of <code>oColumn</code> exists in <code>aIgnoredColumnKeys</code>.
		 *
		 * @param {sap.ui.table.Column|sap.m.Column} oColumn The column to be checked whether it is ignored
		 * @param {array} aIgnoredColumnKeys The array with ignored column keys
		 * @returns {boolean} <code>true</code> if oColumn exists in aIgnoredColumnKeys; <code>false</code> else
		 * @public
		 */
		isColumnIgnored: function(oColumn, aIgnoredColumnKeys) {
			if (!aIgnoredColumnKeys) {
				return false;
			}
			return aIgnoredColumnKeys.indexOf(this.getColumnKey(oColumn)) > -1;
		},

		/**
		 * This method will make an initial json snapshot of the given table instance and stores the column sorting information in the given array.
		 *
		 * @param {sap.ui.table.Table | sap.ui.comp.personalization.ChartWrapper} oTable The table where the sort data has to be extracted
		 * @param {array} aDestination The array where the sort json data should be stored
		 * @public
		 */
		createSort2Json: function(oTable, aDestination, aIgnoreColumnKeys) {
			if (this.getTableBaseType(oTable) !== sap.ui.comp.personalization.TableType.Table && this.getTableType(oTable) !== sap.ui.comp.personalization.TableType.ChartWrapper) {
				return;
			}
			this.addSortPersistentData(this._mapTable2P13nSortJson(oTable), {
				sort: {
					sortItems: aDestination
				}
			}, aIgnoreColumnKeys);
		},

		/**
		 * @private
		 */
		addSortPersistentData: function(oSourceJsonData, oDestinationJsonData, aIgnoreColumnKeys) {
			oSourceJsonData.sort.sortItems.forEach(function(oSourceItem) {
				if (!oSourceItem.isSorted || aIgnoreColumnKeys.indexOf(oSourceItem.columnKey) > -1) {
					return;
				}
				oDestinationJsonData.sort.sortItems.push({
					columnKey: oSourceItem.columnKey,
					operation: oSourceItem.operation
				});
			});
		},

		/**
		 *
		 * @param {sap.ui.table.Table | sap.ui.comp.personalization.ChartWrapper} oTable The table where the sort data has to be extracted
		 * @private
		 */
		_mapTable2P13nSortJson: function(oTable) {
			return {
				sort: {
					sortItems: oTable.getColumns().map(function(oColumn) {
						return {
							columnKey: Util.getColumnKey(oColumn),
							isSorted: oColumn.getSorted(),
							operation: oColumn.getSortOrder()
						};
					})
				}
			};
		},

		/**
		 * Determines the type of the <code>oTable</code>.
		 * @param {sap.ui.comp.personalization.ChartWrapper | sap.ui.comp.personalization.SelectionWrapper | sap.m.Table | sap.ui.table.AnalyticalTable | sap.ui.table.TreeTable | sap.ui.table.Table} oTable
		 * @returns {sap.ui.comp.personalization.TableType | null}
		 */
		getTableType: function(oTable) {
			if (oTable instanceof sap.ui.comp.personalization.ChartWrapper) {
				return sap.ui.comp.personalization.TableType.ChartWrapper;
			}
			if (oTable instanceof sap.ui.comp.personalization.SelectionWrapper) {
				return sap.ui.comp.personalization.TableType.SelectionWrapper;
			}
			if (sap.m && sap.m.Table && oTable instanceof sap.m.Table) {
				return sap.ui.comp.personalization.TableType.ResponsiveTable;
			}
			if (sap.ui.table && sap.ui.table.AnalyticalTable && oTable instanceof sap.ui.table.AnalyticalTable) {
				return sap.ui.comp.personalization.TableType.AnalyticalTable;
			}
			if (sap.ui.table && sap.ui.table.TreeTable && oTable instanceof sap.ui.table.TreeTable) {
				return sap.ui.comp.personalization.TableType.TreeTable;
			}
			if (sap.ui.table && sap.ui.table.Table && oTable instanceof sap.ui.table.Table) {
				return sap.ui.comp.personalization.TableType.Table;
			}
			return null;
		},

		/**
		 * Determines the base type of the <code>oTable</code>.
		 * @param {sap.ui.comp.personalization.ChartWrapper | sap.ui.comp.personalization.SelectionWrapper | sap.m.Table | sap.ui.table.AnalyticalTable | sap.ui.table.TreeTable | sap.ui.table.Table} oTable
		 * @return {sap.ui.comp.personalization.TableType | null}
		 */
		getTableBaseType: function(oTable) {
			switch (this.getTableType(oTable)) {
				case sap.ui.comp.personalization.TableType.ChartWrapper:
					return sap.ui.comp.personalization.TableType.ChartWrapper;
				case sap.ui.comp.personalization.TableType.SelectionWrapper:
					return sap.ui.comp.personalization.TableType.SelectionWrapper;
				case sap.ui.comp.personalization.TableType.ResponsiveTable:
					return sap.ui.comp.personalization.TableType.ResponsiveTable;
				case sap.ui.comp.personalization.TableType.AnalyticalTable:
				case sap.ui.comp.personalization.TableType.Table:
				case sap.ui.comp.personalization.TableType.TreeTable:
					return sap.ui.comp.personalization.TableType.Table;
				default:
					return null;
			}
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @param {string} sProperty
		 * @param {boolean} bParse
		 * @returns {object | null} either value of custom data property or null
		 */
		_getCustomProperty: function(oColumn, sProperty) {
			var oCustomData = this._getCustomData(oColumn);
			if (!oCustomData || !sProperty) {
				return null;
			}
			return oCustomData[sProperty];
		},

		/**
		 * @param {sap.m.Column | sap.ui.table.Column} oColumn
		 * @returns {object | null} either custom data object or null
		 */
		_getCustomData: function(oColumn) {
			if (!oColumn) {
				return null;
			}
			var oCustomData = oColumn.data("p13nData");
			if (typeof oCustomData === "string") {
				try {
					oCustomData = JSON.parse(oCustomData);
					oColumn.data("p13nData", oCustomData);
				} catch (oException) {
					// do not update the custom data, go ahead
				}
			}
			return oCustomData;
		}

	};
	return Util;
}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/Util.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.Validator') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * @namespace Provides validator functions for the personalization dialog
 * @name sap.ui.comp.personalization.Validator
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.48.0
 */
jQuery.sap.declare('sap.ui.comp.personalization.Validator'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/Validator",[
	'sap/m/library', 'sap/ui/core/MessageType'
], function(MLibrary, MessageType) {
	"use strict";
	var Validator = {

		/**
		 * Also if in case of the AnalyticalTable the inResult=true we have to show warning if the column is not visible.
		 */
		checkGroupAndColumns: function(sTableType, oSetting, oPayload, oColumnKey2ColumnMap, oPersistentDataTotal, aResult) {
			if (sTableType !== sap.ui.comp.personalization.TableType.AnalyticalTable || !oSetting.group || !oSetting.columns) {
				return Promise.resolve(aResult);
			}
			var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
			for ( var sColumnKey in oColumnKey2ColumnMap) {
				var bColumnSelected = oSetting.columns.controller.isColumnSelected(oPayload.columns, oPersistentDataTotal.columns, sColumnKey);
				var bGroupSelected = oSetting.group.controller.isGroupSelected(oPayload.group, oPersistentDataTotal.group, sColumnKey);
				if (bGroupSelected && !bColumnSelected) {
					aResult.push({
						columnKey: sColumnKey,
						panelTypes: [
							sap.m.P13nPanelType.group, sap.m.P13nPanelType.columns
						],
						messageType: MessageType.Warning,
						messageText: oRB.getText("PERSODIALOG_MSG_GROUPING_NOT_POSSIBLE_DESCRIPTION")
					});
				}
			}
			return Promise.resolve(aResult);
		},

		checkSaveChanges: function(sTableType, oSetting, oPayload, aResult) {
			if (sTableType !== sap.ui.comp.personalization.TableType.SelectionWrapper || !oSetting.selection || !oSetting.selection.payload || !oPayload || !oPayload.selection) {
				return Promise.resolve(aResult);
			}
			var aSelectionItems = oPayload.selection.selectionItems.map(function(oSelectionItem) {
				return {
					columnKey: oSelectionItem.getColumnKey(),
					visible: oSelectionItem.getSelected()
				};
			});
			return oSetting.selection.payload.callbackSaveChanges(aSelectionItems).then(function(bSaved) {
				if (bSaved) {
					return aResult;
				}
				aResult.push({
					panelTypes: [
						sap.m.P13nPanelType.selection
					],
					messageType: MessageType.Error,
					messageText: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("PERSODIALOG_MSG_CHANGES_SAVE_FAILED")
				});
				return aResult;
			});
		}
	};
	return Validator;
}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/Validator.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.TokenParser') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.providers.TokenParser'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/TokenParser",["jquery.sap.global", "sap/ui/base/ManagedObject"],
	function(jQuery, ManagedObject) {
		"use strict";

		/**
		 * Constructs a class to parse condition values and create token elements inside a MultiInput field
		 * 
		 * @constructor
		 * @experimental This module is only for internal/experimental use!
		 * @private
		 * @param {object} sDefaultOperation - default operation for the token parsing
		 * @author Peter Harbusch
		 */
		var TokenParser = function(sDefaultOperation) {
			this._sDefaultOperation = sDefaultOperation;

			this._aKeyFields = [];

			this._mTypeOperations = {
				"default": ["Contains", "EQ", "BT", "StartsWith", "EndsWith", "LT", "LE", "GT", "GE", "NE"],
				"string": ["Contains", "EQ", "BT", "StartsWith", "EndsWith", "LT", "LE", "GT", "GE", "NE"],
				"date": ["EQ", "BT", "LT", "LE", "GT", "GE", "NE"],
				"time": ["EQ", "BT", "LT", "LE", "GT", "GE", "NE"],
				"numeric": ["EQ", "BT", "LT", "LE", "GT", "GE", "NE"],
				"boolean": ["EQ"]
			};

			this._init();
		};

		/**
		 * initialize all operations
		 * 
		 * @private
		 */
		TokenParser.prototype._init = function() {
			this.createOperation("BT", "foo...bar", "...", /^.+\.\.\..+$/, "$0...$1", function(sText) {
				var s1 = sText.slice(0, sText.indexOf(this.operation));
				var s2 = sText.slice(sText.indexOf(this.operation) + this.operation.length);
				return [s1, s2];
			});
			this.createOperation("EQ", "=foo", "=", /^\=.+$/, "=$0");
			this.createOperation("Contains", "*foo*", "**", /^\*.+\*$/, "*$0*", function(sText) {
				return [sText.slice(1, sText.length - 1).trim()];
			});
			this.createOperation("StartsWith", "foo*", "*", /^([^\*].*)\*$/, "$0*", function(sText) {
				return [sText.slice(0, sText.length - 1).trim()];
			});
			this.createOperation("EndsWith", "*foo", "*", /^\*(.*[^\*])$/, "*$0");
			this.createOperation("LT", "< foo", "<", /^\<([^\=].*)$/, "<$0");
			this.createOperation("LE", "<=foo", "<=", /^\<\=(.+)$/, "<=$0");
			this.createOperation("GT", "> foo", ">", /^\>([^\=].*)$/, ">$0");
			this.createOperation("GE", ">=foo", ">=", /^\>\=(.+)$/, ">=$0");
			this.createOperation("NE", "!=foo", "!=", /^\!\=(.+)$/, "!(=$0)").exclude = true;
		};

		TokenParser.prototype.destroy = function() {
			this._oInput.removeValidator(this._validator);
			this._oInput = null;
			this._aOrgValidators = null;
			this._aKeyFields = null;
			this._mTypeOperations = null;
		};

		/**
		 * Specifies the default operation for the token parser
		 * 
		 * @param {string} sOperationKey - the key of the default operation
		 * @public
		 */
		TokenParser.prototype.setDefaultOperation = function(sOperationKey) {
			this._sDefaultOperation = sOperationKey;
		};

		/**
		 * returns the default operation for the token parser
		 * 
		 * @returns {string} the default operation key
		 * @public
		 */
		TokenParser.prototype.getDefaultOperation = function() {
			return this._sDefaultOperation;
		};

		/**
		 * Specifies the maxLength for a token value. the input of a field will be truncated to this maxLength.  
		 * 
		 * @param {int} iMaxLength - the key of the default operation
		 * @public
		 */
		TokenParser.prototype.setMaxLength = function(iMaxlength) {
			this._iMaxLength = iMaxlength;
		};

		/**
		 * returns the maxLength for the token parser
		 * 
		 * @returns {int} the maxLength value
		 * @public
		 */
		TokenParser.prototype.getMaxLength = function() {
			return this._iMaxLength;
		};

		/**
		 * Specifies the displayFormat for a token value. Currently only UpperCase is supported  
		 * 
		 * @param {string} sDisplayFormat 
		 * @public
		 */
		TokenParser.prototype.setDisplayFormat = function(sDisplayFormat) {
			this._sDisplayFormat = sDisplayFormat;
		};

		/**
		 * returns the displayFormat for the token parser
		 * 
		 * @returns {string} the displayFormat value
		 * @public
		 */
		TokenParser.prototype.getDisplayFormat = function() {
			return this._sDisplayFormat;
		};

		/**
		 * returns the map of all operations
		 * 
		 * @returns {map} 
		 * @public
		 */
		TokenParser.prototype.getOperations = function() {
			return this._mOperations;
		};

		/**
		 * returns a specific operation
		 * 
		 * @param {string} sOperationKey - the key of the operation 
		 * @returns {object} 
		 * @public
		 */
		TokenParser.prototype.getOperation = function(sOperationKey) {
			return this._mOperations && this._mOperations[sOperationKey];
		};

		/**
		 * returns the KeyField by label
		 * 
		 * @param {string} sLabel - the label of the keyfield
		 * @private
		 */
		TokenParser.prototype._getKeyFieldByLabel = function(sLabel) {
			var keyField;
			this._aKeyFields.some(function(oKeyField) {
				if (oKeyField.label.toUpperCase() === sLabel.toUpperCase()) {
					keyField = oKeyField;
				}
			}, this);
			return keyField;
		};

		TokenParser.prototype.addKeyField = function(oKeyField) {
			this._aKeyFields.push(oKeyField);
		};

		TokenParser.prototype.addTypeOperations = function(sType, aOperations) {
			this._mTypeOperations[sType] = aOperations;
		};

		TokenParser.prototype.removeTypeOperations = function(sType) {
			delete this._mTypeOperations[sType];
		};

		TokenParser.prototype.getTypeOperations = function(sType) {
			return this._mTypeOperations[sType];
		};

		/**
		 * create a new operation for the parser
		 * 
		 * @param {string} sOperationKey - operation key
		 * @param {string} sExample - shown as  help text in  suggest
		 * @param {string} sOperation - operation characters
		 * @param {regExp} regEx
		 * @param {string} sTemplate - template for formatter which will be shown as token text
		 * @param {function} fParse - parser callback function
		 * @public
		 */
		TokenParser.prototype.createOperation = function(sOperationKey, sExample, sOperation, regEx, sTemplate, fParse) {
			if (!this._mOperations) {
				this._mOperations = {};
			}

			this._mOperations[sOperationKey] = {
				key: sOperationKey,
				example: sExample,
				operation: sOperation,
				re: regEx,
				template: sTemplate,
				exclude: false,
				parser: this,
				match: function(sText) {
					return this.re.exec(sText);
				},
				parse: fParse || function(sText) {
					return [sText.slice(this.operation.length).trim()];
				},
				getFilledTemplate: function(sText) {
					var aValues = this.parse(sText);
					var sTokenText = this.template;
					for (var i = 0; i < aValues.length; i++) {
						sTokenText = sTokenText.replace("$" + i, this.format(aValues[i]));
					}
					return sTokenText;
				},
				getConditionData: function(sText) {
					var range = {};
					range.exclude = this.exclude;
					range.operation = this.exclude ? "EQ" : this.key;

					var aValues = this.parse(sText);
					for (var i = 0; i < aValues.length; i++) {
						range["value" + (i + 1)] = this.format(aValues[i]);
					}

					return range;
				},
				format: function(sValue) {
					if (this.parser.getMaxLength() >= 0) {
						sValue = sValue.substring(0, this.parser.getMaxLength());
					}
					if (this.parser._sDisplayFormat === "UpperCase") {
						sValue = sValue.toUpperCase();
					}
					return sValue;
				}
			};

			return this._mOperations[sOperationKey];
		};

		/**
		 * remove an operation of the parser
		 * 
		 * @param {string} sOperationKey - key of the operation which will be removed
		 * @public
		 */
		TokenParser.prototype.removeOperation = function(sOperationKey) {
			delete this._mOperations[sOperationKey];
		};

		/**
		 * remove all operations of the parser
		 * 
		 * @public
		 */
		TokenParser.prototype.removeAllOperations = function() {
			var aOperationKeys = Object.keys(this._mOperations);
			aOperationKeys.forEach(function(operationKey) {
				delete this._mOperations[operationKey];
			}, this);
		};

		/**
		 * returns the translated name of the operation
		 * 
		 * @param {string} sType - type of the field
		 * @param {object} oOperation  
		 * @param {string} sResourceBundle - name of the resource bundle 
		 * @returns {string} translated name
		 * @public
		 */
		TokenParser.prototype.getTranslatedText = function(sType, oOperation, sResourceBundle) {
			var sTextKey = oOperation.key;

			sType = sType !== "default" ? "_" + sType.toUpperCase() + "_" : "";

			if (sType === "_STRING_" || sType === "_BOOLEAN_") {
				sType = "";
			}
			if (sType === "_TIME_") {
				sType = "_DATE_";
			}

			if (!sResourceBundle) {
				sResourceBundle = "sap.m";
			}

			sTextKey = "CONDITIONPANEL_OPTION" + sType + sTextKey;
			var sText = sap.ui.getCore().getLibraryResourceBundle(sResourceBundle).getText(sTextKey) || sTextKey;
			if (jQuery.sap.startsWith(sText, "CONDITIONPANEL_OPTION")) {
				// when for the specified type the resource does not exist use the normal string resource text
				sTextKey = "CONDITIONPANEL_OPTION" + oOperation.key;
				sText = sap.ui.getCore().getLibraryResourceBundle(sResourceBundle).getText(sTextKey);
			}

			//TODO NE operation missing in resources
			// if (sText === "CONDITIONPANEL_OPTIONNE") {
			// 	sText = "not equals to";
			// }

			return sText;
		};

		/**
		 * associates an multiInput control with the token parser. The function is adding a validator to the multiInput and creates tokens when the input is matching to an operation
		 * 
		 * @param {control} oInput - multiInput control
		 * @public
		 */
		TokenParser.prototype.associateInput = function(oInput) {
			this._oInput = oInput;

			this._aOrgValidators = this._oInput._tokenizer ? this._oInput._tokenizer._aTokenValidators.slice() : [];
			this._oInput.removeAllValidators();

			this._oInput.addValidator(this._validator.bind(this));
		};

		TokenParser.prototype._validator = function(args) {
			//queue the validator calls
			if (this._aOrgValidators) {
				var oToken;
				this._aOrgValidators.some(function(fValidator) {
					oToken = fValidator(args);
					return oToken;
				}, this);

				if (oToken) {
					return oToken;
				}
			}

			if (args.suggestionObject && args.suggestionObject.getKey) {
				var key = args.suggestionObject.getKey();
				var text = args.suggestionObject.getText();
				var additionalText = args.suggestionObject.getAdditionalText();

				if (additionalText) { //} && additionalText === argsValue) {
					return this._onValidate(additionalText);
				} else {
					return new sap.m.Token({ key: key, text: text + " (" + key + ")", tooltip: text });
				}
			}

			if (args.suggestedToken) {
				var sText = args.suggestedToken.getText();
				var sKey = args.suggestedToken.getKey();
				args.suggestedToken.setText(sText + " (" + sKey + ")");
				args.suggestedToken.setTooltip(args.suggestedToken.getText());

				return args.suggestedToken;
			}

			if (args.text) {
				return this._onValidate(args.text);
			}

			return null;
		};


		/**
		 * called from the muliInput validator 
		 * 
		 * @param {string} sText - the entered text which should be parsed and validated
		 * @private
		 */
		TokenParser.prototype._onValidate = function(sText) {
			var oKeyField = this._aKeyFields.length > 0 ? this._aKeyFields[0] : null;
			
			// Ticket 1780396542
			if (this._oInput._getIsSuggestionPopupOpen && this._oInput._getIsSuggestionPopupOpen() && 
					this._oInput._oSuggestionTable && this._oInput._oSuggestionTable.getSelectedItem()) {
				//avoid the validation handling when the suggest list is open and the user has clicked on a suggest item.
				return null;
			}
			
			if (oKeyField) {
				var akeyFieldMaches = /^\w+\:\s/.exec(sText);
				if (akeyFieldMaches) {
					var sKeyLabel = akeyFieldMaches[0];
					oKeyField = this._getKeyFieldByLabel(sKeyLabel.slice(0, sKeyLabel.indexOf(":")));
					sText = sText.slice(akeyFieldMaches[0].length).trim();
				}
			}

			var type = oKeyField && oKeyField.type || "default";
			var aTypeOperations = this._mTypeOperations[type];

			var fCheck = function(oOperation, sText) {
				if (oOperation.match(sText)) {
					var range = oOperation.getConditionData(sText);
					range.keyField = oKeyField ? oKeyField.key : null;

					var sTokenText = (oKeyField && oKeyField.label && this._aKeyFields.length > 1 ? oKeyField.label + ": " : "") + oOperation.getFilledTemplate(sText);
					sTokenText = ManagedObject.bindingParser.escape(sTokenText); 
					return new sap.m.Token({ text: sTokenText, tooltip: sTokenText }).data("range", range);
					//return new sap.m.Token().setText(sTokenText).setTooltip(sTokenText).data("range", range);
				}
				return null;
			}.bind(this);

			var token;
			if (aTypeOperations.some(function(operationKey) {
					token = fCheck(this._mOperations[operationKey], sText);
					return token;
				}, this)) {
				return token;
			}

			// check for default operation
			//var sDefaultOperation = "EQ";
			if (this._sDefaultOperation && this._mOperations[this._sDefaultOperation]) {
				sText = this._mOperations[this._sDefaultOperation].template.replace("$0", sText);
				return fCheck(this._mOperations[this._sDefaultOperation], sText);
			}

			return null;
		};

		return TokenParser;
	}, true);
}; // end of sap/ui/comp/providers/TokenParser.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ValueHelp.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.provider.ValueHelpProvider
jQuery.sap.declare('sap.ui.comp.providers.ValueHelp.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/providers/ValueHelp.designtime",[], function() {
	"use strict";

	return {
		annotations: {
			/**
			 * Contains annotations that provide information for rendering a <code>ValueHelp/Suggest</code> that are set on the <code>Property</code>.
			 * Each parameter in the <code>ValueList</code> annotation has a maximum of two parameters:
			 * <ol>
			 *   <li>LocalDataProperty - Path to the property in the local entity that triggered the <code>ValueHelp/Suggest</code>.</li>
			 *   <li>ValueListProperty - Path to property in the ValueList entity.</li>
			 * </ol>
			 *
			 * <b>Note:</b> Currently only the <code>EntitySet</code> with the <code>CollectionPath</code> is supported that should be part of the same metadata service.
			 *
			 * <i>XML Example of V4 with CompanyCode ValueHelp/Suggest</i>
			 * <pre>
			 *    &lt;Annotations Target="CompanyCode" xmlns="http://docs.oasis-open.org/odata/ns/edm"&gt;
			 *       &lt;Annotation Term="com.sap.vocabularies.Common.v1.ValueList"&gt;
			 *          &lt;Record&gt;
			 *             &lt;PropertyValue Property="CollectionPath" String="Company" /&gt;
			 *             &lt;PropertyValue Property="SearchSupported" Bool="true" /&gt;
			 *             &lt;PropertyValue Property="Parameters"&gt;
			 *                &lt;Collection&gt;
			 *                   &lt;Record&gt;
			 *                      &lt;PropertyValue Property="LocalDataProperty" PropertyPath="CompanyCode" /&gt;
			 *                      &lt;PropertyValue Property="ValueListProperty" PropertyPath="Company" /&gt;
			 *                   &lt;/Record&gt;
			 *                &lt;/Collection&gt;
			 *          &lt;/Record&gt;
			 *       &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			valueList: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "ValueList",
				target: ["Property", "Parameter"],
				defaultValue: null,
				appliesTo: ["valueHelp"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Renders the column fields in the <code>ValueHelp/Suggest</code>.
			 *
			 * <i>XML Example of V4 with CompanyName as Column in ValueHelp/Suggest</i>
			 * <pre>
			 *    &lt;Annotations Target="CompanyCode" xmlns="http://docs.oasis-open.org/odata/ns/edm"&gt;
			 *       &lt;Annotation Term="com.sap.vocabularies.Common.v1.ValueList"&gt;
			 *          &lt;Record&gt;
			 *             &lt;PropertyValue Property="CollectionPath" String="Company" /&gt;
			 *             &lt;PropertyValue Property="SearchSupported" Bool="true" /&gt;
			 *             &lt;PropertyValue Property="Parameters"&gt;
			 *                &lt;Collection&gt;
			 *                   &lt;Record&gt;
			 *                      &lt;PropertyValue Property="LocalDataProperty" PropertyPath="CompanyCode" /&gt;
			 *                      &lt;PropertyValue Property="ValueListProperty" PropertyPath="Company" /&gt;
			 *                   &lt;/Record&gt;
			 *                   &lt;Record Type="com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly"&gt;
			 *                      &lt;PropertyValue Property="ValueListProperty" PropertyPath="CompanyName" /&gt;
			 *                   &lt;/Record&gt;
			 *                &lt;/Collection&gt;
			 *          &lt;/Record&gt;
			 *       &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			valueListParameterDisplayOnly: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "ValueListParameterDisplayOnly",
				target: ["PropertyPath"],
				defaultValue: null,
				appliesTo: ["valueHelp/#columnList"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Defines whether the data that is set in the control context for <code>LocalDataProperty</code> must be taken into consideration
			 * when the </code>ValueHelp/Suggest</code> is opened.
			 * The value will be set into the <code>ValueListProperty</code> in the <code>ValueHelp/Suggest</code>
			 * and can be used to filter data in the <code>ValueHelp/Suggest</code>.
			 *
			 * <i>XML Example of OData V4 with ValueListParameterIn on CompanyCode Property</i>
			 * <pre>
			 *    &lt;Annotations Target="CompanyCode" xmlns="http://docs.oasis-open.org/odata/ns/edm"&gt;
			 *       &lt;Annotation Term="com.sap.vocabularies.Common.v1.ValueList"&gt;
			 *          &lt;Record&gt;
			 *             &lt;PropertyValue Property="CollectionPath" String="Company" /&gt;
			 *             &lt;PropertyValue Property="SearchSupported" Bool="true" /&gt;
			 *             &lt;PropertyValue Property="Parameters"&gt;
			 *                &lt;Collection&gt;
			 *                   &lt;Record Type="com.sap.vocabularies.Common.v1.ValueListParameterIn"&gt;
			 *                      &lt;PropertyValue Property="LocalDataProperty" PropertyPath="CompanyCode" /&gt;
			 *                      &lt;PropertyValue Property="ValueListProperty" PropertyPath="Company" /&gt;
			 *                   &lt;/Record&gt;
			 *                   &lt;Record Type="com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly"&gt;
			 *                      &lt;PropertyValue Property="ValueListProperty" PropertyPath="CompanyName" /&gt;
			 *                   &lt;/Record&gt;
			 *                &lt;/Collection&gt;
			 *          &lt;/Record&gt;
			 *       &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			valueListParameterIn: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "ValueListParameterIn",
				target: ["PropertyPath"],
				defaultValue: null,
				appliesTo: ["valueHelp/#field"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Defines whether the <code>ValueListProperty</code> parameter of the <code>ValueHelp/Suggest</code> selection context
			 * will set the data back into the <code>LocalDataProperty</code> context of the control that triggered the <code>ValueHelp/Suggest</code>
			 *
			 * <i>XML Example of OData V4 with ValueListParameterOut on CompanyCode Property</i>
			 * <pre>
			 *    &lt;Annotations Target="CompanyCode" xmlns="http://docs.oasis-open.org/odata/ns/edm"&gt;
			 *       &lt;Annotation Term="com.sap.vocabularies.Common.v1.ValueList"&gt;
			 *          &lt;Record&gt;
			 *             &lt;PropertyValue Property="CollectionPath" String="Company" /&gt;
			 *             &lt;PropertyValue Property="SearchSupported" Bool="true" /&gt;
			 *             &lt;PropertyValue Property="Parameters"&gt;
			 *                &lt;Collection&gt;
			 *                   &lt;Record Type="com.sap.vocabularies.Common.v1.ValueListParameterOut"&gt;
			 *                      &lt;PropertyValue Property="LocalDataProperty" PropertyPath="CompanyCode" /&gt;
			 *                      &lt;PropertyValue Property="ValueListProperty" PropertyPath="Company" /&gt;
			 *                   &lt;/Record&gt;
			 *                   &lt;Record Type="com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly"&gt;
			 *                      &lt;PropertyValue Property="ValueListProperty" PropertyPath="CompanyName" /&gt;
			 *                   &lt;/Record&gt;
			 *                &lt;/Collection&gt;
			 *          &lt;/Record&gt;
			 *       &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			valueListParameterOut: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "ValueListParameterOut",
				target: ["PropertyPath"],
				defaultValue: null,
				appliesTo: ["valueHelp/#field"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * A combination of the <code>ValueListParameterIn</code> and <code>ValueListParameterOut</code> annotations that provides
			 * functions for both of these annotations.
			 *
			 * <i>XML Example of OData V4 with ValueListParameterInOut on CompanyCode Property</i>
			 * <pre>
			 *    &lt;Annotations Target="CompanyCode" xmlns="http://docs.oasis-open.org/odata/ns/edm"&gt;
			 *       &lt;Annotation Term="com.sap.vocabularies.Common.v1.ValueList"&gt;
			 *          &lt;Record&gt;
			 *             &lt;PropertyValue Property="CollectionPath" String="Company" /&gt;
			 *             &lt;PropertyValue Property="SearchSupported" Bool="true" /&gt;
			 *             &lt;PropertyValue Property="Parameters"&gt;
			 *                &lt;Collection&gt;
			 *                   &lt;Record Type="com.sap.vocabularies.Common.v1.ValueListParameterInOut"&gt;
			 *                      &lt;PropertyValue Property="LocalDataProperty" PropertyPath="CompanyCode" /&gt;
			 *                      &lt;PropertyValue Property="ValueListProperty" PropertyPath="Company" /&gt;
			 *                   &lt;/Record&gt;
			 *                   &lt;Record Type="com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly"&gt;
			 *                      &lt;PropertyValue Property="ValueListProperty" PropertyPath="CompanyName" /&gt;
			 *                   &lt;/Record&gt;
			 *                &lt;/Collection&gt;
			 *          &lt;/Record&gt;
			 *       &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			valueListParameterInOut: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "ValueListParameterInOut",
				target: ["PropertyPath"],
				defaultValue: null,
				appliesTo: ["valueHelp/#field"],
				group: ["Behavior"],
				since: "1.28.1"
			}

		},
		customData: {
		}
	};
}, /* bExport= */false);
}; // end of sap/ui/comp/providers/ValueHelp.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartchart.SmartChart.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartchart.SmartChart control.
jQuery.sap.declare('sap.ui.comp.smartchart.SmartChart.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartchart/SmartChart.designtime",[], function() {
	"use strict";
	return {
		annotations: {
			/**
			 * Defines a name of the <code>SemanticObject</code> that can be represented with an <code>EntitySet</code>, <code>EntityType</code>
			 * or identified by a <code>Property</code>. With this annotation in place, the <code>SemanticObjectController</code> will provide
			 * all the available features for the <code>SmartChart</code> control. <i>XML Example of OData V4 with SemanticObject on ProductName</i>
			 * <br>
			 * <b>Note:</b> Navigation targets are determined using {@link sap.ushell.services.CrossApplicationNavigation CrossApplicationNavigation} of the unified shell service.
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;ProductName&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.SemanticObject&quot; String=&quot;SemanticObjectName&quot; /&gt;
			 *   &lt;/Annotations&gt;
			 * </pre>
			 */
			semanticObject: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "SemanticObject",
				target: [
					"EntitySet", "EntityType", "Property"
				],
				defaultValue: null,
				appliesTo: [
					"text"
				],
				group: [
					"Behavior"
				],
				since: "1.34.1"
			},

			/**
			 * Defines whether a field in the SmartChart control is visible. The SmartChart interprets the
			 * <code>EnumMember</code> <code>FieldControlType/Hidden</code> of the <code>FieldControl</code> annotation for setting the
			 * visibility. <b>Note:</b> Currently only <code>FieldControlType/Hidden</code> is supported for statically hiding the fields. <i>XML
			 * Example of OData V4 with hidden Customer and CompanyCode Properties</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/Hidden&quot;/&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/Hidden&quot;/&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:visible</code> annotation on the <code>Property</code> can be used to assign visibility.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:visible=&quot;false&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:visible=&quot;false&quot;/&gt;
			 * </pre>
			 */
			fieldVisible: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "FieldControlType",
				target: [
					"Property"
				],
				whiteList: {
					values: [
						"Hidden"
					]
				},
				defaultValue: false,
				appliesTo: [
					"field/#/visible"
				],
				group: [
					"Behavior"
				],
				since: "1.34.1"
			},

			/**
			 * Renders the initial chart fields for the SmartChart control. A <code>PropertyPath</code> and an <code>AnnotationPath</code> can be
			 * used for constructing PresentationVariant annotation. <i>XML Example of OData V4 with Customer and CompanyCode Properties as
			 * PresentationVariant</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.PresentationVariant&quot;&gt;
			 *      &lt;Record&gt;
			 *        &lt;PropertyValue Property=&quot;Visualizations&quot;&gt;
			 *          &lt;Collection&gt;
			 *            &lt;AnnotationPath&gt;@UI.Chart&lt;/AnnotationPath&gt;
			 *          &lt;/Collection&gt;
			 *        &lt;/PropertyValue&gt;
			 *        &lt;PropertyValue Property=&quot;RequestAtLeast&quot;&gt;
			 *          &lt;Collection&gt;
			 *            &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *            &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *          &lt;/Collection&gt;
			 *        &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;SortOrder&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;Record&gt;
			 *                &lt;PropertyValue Property=&quot;Property&quot; PropertyPath=&quot;CompanyCode&quot;/&gt;
			 *                &lt;PropertyValue Property=&quot;Descending&quot; Bool=&quot;true&quot;/&gt;
			 *              &lt;/Record&gt;
			 *              &lt;Record&gt;
			 *                &lt;PropertyValue Property=&quot;Property&quot; PropertyPath=&quot;Customer&quot;/&gt;
			 *              &lt;/Record&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *        &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 * </pre>
			 */
			presentationVariant: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "PresentationVariant",
				target: [
					"EntitySet", "EntityType"
				],
				defaultValue: null,
				appliesTo: [
					"chartFields"
				],
				group: [
					"Behavior"
				],
				since: "1.34.1"
			},

			/**
			 * Renders a chart based on the information that is provided within the <code>Chart</code> annotation. <code>Chart</code> annotation
			 * must be defined for an </code>EntityType</code>
			 *
			 * <i>XML Example of OData V4 with Chart Annotation and ChartType Column Chart</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;Item&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot;&gt;
			 *        &lt;Record&gt;
			 *          &lt;PropertyValue Property=&quot;Title&quot; String=&quot;Line Items&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;ChartType&quot;
			 *             EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartType/Column&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Dimensions&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *              &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;Measures&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;AmountInCompanyCodeCurrency&lt;/PropertyPath&gt;
			 *              &lt;PropertyPath&gt;AmountInTransactionCurrency&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *        &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			chart: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "Chart",
				target: [
					"EntityType"
				],
				defaultValue: null,
				appliesTo: [
					"chart"
				],
				group: [
					"Behavior"
				],
				since: "1.34.1"
			},
			/**
			 * Based on the UI.DataPoint that is provided by the measure attributes, semantic patterns and coloring can be defined for the chart. The
			 * <code>UI.DataPoint</code> annotation must be defined for an </code>EntityType</code> <i>XML Example of OData V4 with DataPoint
			 * Annotation with semantic coloring</i> For more information see {@link sap.chart.ColoringType.Criticality}
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;Item&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot;&gt;
			 *        &lt;Record&gt;
			 *          &lt;PropertyValue Property=&quot;Title&quot; String=&quot;Line Items&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;ChartType&quot;
			 *             EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartType/Column&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Dimensions&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *              &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;Measures&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;AmountInCompanyCodeCurrency&lt;/PropertyPath&gt;
			 *              &lt;PropertyPath&gt;AmountInTransactionCurrency&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;MeasureAttributes&quot;&gt;
			 *            &lt;Collection&gt;
			 *               &lt;Record&gt;
			 *                  &lt;PropertyValue Property=&quot;Measure&quot; PropertyPath=&quot;AmountInCompanyCodeCurrency&quot; /&gt;
			 *                  &lt;PropertyValue Property=&quot;Role&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis1&quot; /&gt;
			 *                  &lt;PropertyValue Property=&quot;DataPoint&quot; AnnotationPath=&quot;@com.sap.vocabularies.UI.v1.DataPoint#semanticColoring&quot; /&gt;
			 *               &lt;/Record&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *        &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.DataPoint&quot; Qualifier=&quot;semanticColoring&quot; &gt;
			 * 	  &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.DataPointType&quot;&gt;
			 * 		&lt;PropertyValue Property=&quot;Value&quot; Path=&quot;AmountInCompanyCodeCurrency&quot; /&gt;
			 * 		&lt;PropertyValue Property=&quot;Criticality&quot; EnumMember=&quot;sap.chart.ColoringType.Negative&quot; /&gt;
			 * 	  &lt;/Record&gt;
			 *     &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 *
			 * Using this UI.DataPoint annotation, the semantic coloring for a measure changes as follows:
			 *
			 * <pre>
			 *    var oColorings = {
			 *        Criticality: {
			 *           MeasureValues: {
			 *               &quot;AmountInCompanyCodeCurrency&quot;: {
			 *                    Static: sap.chart.ColoringType.Negative
			 *               }
			 *           }
			 *    }
			 * </pre>
			 *
			 * <i>XML Example of OData V4 with DataPoint Annotation with semantic pattern</i> For more information see
			 * {@link sap.chart.data.MeasureSemantics}
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;Item&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot;&gt;
			 *        &lt;Record&gt;
			 *          &lt;PropertyValue Property=&quot;Title&quot; String=&quot;Line Items&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;ChartType&quot;
			 *             EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartType/Column&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Dimensions&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *              &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;Measures&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;AmountInCompanyCodeCurrency&lt;/PropertyPath&gt;
			 *              &lt;PropertyPath&gt;TargetAmountInCompanyCodeCurrency&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;MeasureAttributes&quot;&gt;
			 *            &lt;Collection&gt;
			 *               &lt;Record&gt;
			 *                  &lt;PropertyValue Property=&quot;Measure&quot; PropertyPath=&quot;AmountInCompanyCodeCurrency&quot; /&gt;
			 *                  &lt;PropertyValue Property=&quot;Role&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis1&quot; /&gt;
			 *                  &lt;PropertyValue Property=&quot;DataPoint&quot; AnnotationPath=&quot;@com.sap.vocabularies.UI.v1.DataPoint#semanticPattern&quot; /&gt;
			 *               &lt;/Record&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *        &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.DataPoint&quot; Qualifier=&quot;semanticPattern&quot; &gt;
			 * 	  &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.DataPointType&quot;&gt;
			 * 		&lt;PropertyValue Property=&quot;Value&quot; Path=&quot;AmountInCompanyCodeCurrency&quot; /&gt;
			 * 		&lt;PropertyValue Property=&quot;TargetValue&quot; Path=&quot;TargetAmountInCompanyCodeCurrency&quot; /&gt;
			 * 	  &lt;/Record&gt;
			 *     &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 *
			 * Using this UI.DataPoint annotation, the semantics of the chart measures are set as follows:
			 *
			 * <pre>
			 * var oAmountInCompanyCodeCurrency = oChart.getMeasureByName(&quot;AmountInCompanyCodeCurrency&quot;);
			 * oAmountInCompanyCodeCurrency.setSemantics(sap.chart.data.MeasureSemantics.Actual);
			 *
			 * var oTargetAmountInCompanyCodeCurrency = oChart.getMeasureByName(&quot;TargetAmountInCompanyCodeCurrency&quot;);
			 * oTargetAmountInCompanyCodeCurrency.setSemantics(sap.chart.data.MeasureSemantics.Reference);
			 * </pre>
			 */
			dataPoint: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "DataPoint",
				target: [
					"PropertyValue"
				],
				defaultValue: null,
				appliesTo: [
					"dataPoint"
				],
				group: [
					"Behavior"
				],
				since: "1.48.0"
			}
		},
		customData: {
			/**
			 * Overrides the default settings for formatting dates in all dimensions of the SmartChart control. The format settings can be provided as
			 * a JSON object or a JSON string. For more information see {@link sap.ui.model.type.Date}
			 */
			dateFormatSettings: {
				type: "string",
				defaultValue: "\{'UTC':'true'\}",
				group: [
					"Appearance"
				],
				since: "1.28.1"
			},
			/**
			 * If set to
			 * <code>true</true> the UI.Chart annotation will not be taken into account when creating the content of the Smart Chart control.
			 */
			skipAnnotationParse: {
				type: "boolean",
				defaultValue: null,
				appliesTo: [
					"content"
				],
				since: "1.28.1"
			},
			/**
			 * Used for dimension properties that has an additional sap:text annotation for further description. For more information see
			 * {@link sap.ui.comp.smartfilterbar.DisplayBehaviour} <b>Note</b> Use the annotation UI.TextArrangement instead.
			 */
			defaultDimensionDisplayBehaviour: {
				type: "sap.ui.comp.smartfilterbar.DisplayBehaviour",
				defaultValue: "",
				since: "1.28.1"
			},
			/**
			 * When set to the SmartChart control the UI.Chart annotation that matches the qualifier is rendered on the UI, otherwise the
			 * non-qualified UI.Chart annotation is rendered. <b>Note</b> the chart qualifier is only evaluated in case no presentation variant is
			 * available -or- no valid visualization in presentation variant is available.
			 */
			chartQualifier: {
				type: "string",
				defaultValue: null,
				appliesTo: [
					"content"
				]
			},
			/**
			 * When set to the SmartChart control, the UI.PresentationVariant annotation that matches the qualifier and have a visualization for the
			 * UI:Chart annotation is used to have influence on presented chart type, on sorting etc.
			 */
			presentationVariantQualifier: {
				type: "string",
				defaultValue: null,
				appliesTo: [
					"content"
				]
			},
			/**
			 * A JSON object containing the personalization dialog settings.
			 *
			 * <i>Below you can find a brief example</i>
			 *
			 * <pre><code>
			 * {
			 * 		group: {
			 * 			visible: false
			 * 		},
			 * 		sort: {
			 *      	visible: true
			 *  	},
			 *  	filter: {
			 *     	 	visible:false
			 *  	}
			 * }
			 * </code></pre>
			 */
			p13nDialogSettings: {
				type: "object",
				defaultValue: {}
			}
		},
		properties: {

			entitySet: {
				ignore: true
			},

			smartFilterId: {
				ignore: true
			},

			ignoredFields: {
				ignore: true
			},

			requestAtLeastFields: {
				ignore: false
			},

			ignoreFromPersonalisation: {
				ignore: true
			},

			chartType: {
				ignore: true
			},

			ignoredChartTypes: {
				ignore: false
			},

			useVariantManagement: {
				ignore: true
			},

			useChartPersonalisation: {
				ignore: true
			},

			header: {
				ignore: false
			},

			persistencyKey: {
				ignore: true
			},

			currentVariantId: {
				ignore: false
			},

			enableAutoBinding: {
				ignore: false
			},

			chartBindingPath: {
				ignore: false
			},

			showDrillButtons: {
				ignore: false
			},

			showZoomButtons: {
				ignore: false
			},

			showSemanticNavigationButton: {
				ignore: false
			},

			showVariantManagement: {
				ignore: false
			},

			showDownloadButton: {
				ignore: false
			},

			showDetailsButton: {
				ignore: false
			},

			showDrillBreadcrumbs: {
				ignore: false
			},

			showChartTooltip: {
				ignore: false
			},

			showLegendButton: {
				ignore: false
			},

			legendVisible: {
				ignore: false
			},

			selectionMode: {
				ignore: false
			},

			showFullScreenButton: {
				ignore: false
			},

			useTooltip: {
				ignore: false
			},

			useListForChartTypeSelection: {
				ignore: true
			},

			detailsItemActionFactory: {
				ignore: false
			},

			detailsListActionFactory: {
				ignore: true
			},
			noData: {
				ignore: false
			},
			showChartTypeSelectionButton: {
				ignore: false
			}
		}
	};
}, /* bExport= */false);

}; // end of sap/ui/comp/smartchart/SmartChart.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.AnnotationHelper') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Utility to access annotations for SmartField control. OData V2 annotations are supported and vocabulary-based OData V4 annotations, which are used
 * as fall-back. For <code>sap:updatable-path</code> currently no OData V4 annotation is considered, because it is replaced by the instance
 * annotation <code>com.sap.vocabularies.Common.v1.Updatable</code>, which is meaningless in a context of OData V2 with additional OData V4
 * annotations. An additional exception is <code>sap:visible</code>, as there is no replacement available. Additionally please note that
 * <code>sap:display-format</code> with value <code>Date</code> is not considered here, as it is replaced by the new primitive type
 * <code>Edm.Date</code> from V4 onwards. And <code>sap:semantics</code> with value <code>fixed-values</code> on entity set is not considered
 * here. It addresses value help use cases, especially the entity set used for value help.
 *
 * @name sap.ui.comp.smartfield.AnnotationHelper
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.29.0
 * @return {sap.ui.comp.smartfield.AnnotationHelper} the annotation access class.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.AnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartfield/AnnotationHelper",[], function() {
	"use strict";

	/**
	 * @private
	 * @constructor
	 */
	var AnnotationHelper = function() {
		// nothing to do here.
	};

	/**
	 * Calculates the value of the text annotation.
	 *
	 * @param {object} oProperty the OData property from the meta model for which to calculate the value of the text annotation
	 * @return {string} the value of the text annotation, which can be <code>null</code>.
	 * @public
	 */
	AnnotationHelper.prototype.getText = function(oProperty) {
		return oProperty["sap:text"] || this._getObject("com.sap.vocabularies.Common.v1.Text/Path", oProperty);
	};

	/**
	 * Gets the value of the text arrangement annotation.
	 *
	 * @param {object} oProperty the given property from the meta model
	 * @param {object} oEntityType the given entity set from the meta model
	 * @returns {string} <code>"idOnly"</code>, <code>"descriptionOnly"</code>, <code>"idAndDescription"</code>, <code>"descriptionAndId"</code>
	 * @public
	 */
	AnnotationHelper.prototype.getTextArrangement = function(oProperty, oEntityType) {
		var oEnumTextArrangement = null,
			oPropertyTextAnnotation = null;

		oPropertyTextAnnotation = this._getObject("com.sap.vocabularies.Common.v1.Text", oProperty);

		if (oPropertyTextAnnotation) {
			oEnumTextArrangement = oPropertyTextAnnotation["com.sap.vocabularies.UI.v1.TextArrangement"];
		}

		if (!oEnumTextArrangement) {
			oEnumTextArrangement = this._getObject("com.sap.vocabularies.UI.v1.TextArrangement", oEntityType);
		}

		if (oEnumTextArrangement && oEnumTextArrangement.EnumMember) {

			if (oEnumTextArrangement.EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst") {
				return "descriptionAndId";
			}

			if (oEnumTextArrangement.EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast") {
				return "idAndDescription";
			}

			if (oEnumTextArrangement.EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate") {
				return "idOnly";
			}

			if (oEnumTextArrangement.EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly") {
				return "descriptionOnly";
			}
		}

		return null;
	};

	/**
	 * Calculates the value of the unit annotation.
	 *
	 * @param {object} oProperty the OData property from the meta model for which to calculate the value of the unit annotation
	 * @return {string} the value of the unit annotation, which can be <code>null</code>.
	 * @public
	 */
	AnnotationHelper.prototype.getUnit = function(oProperty) {
		return oProperty["sap:unit"] || this._getObject("Org.OData.Measures.V1.ISOCurrency/Path", oProperty) || this._getObject("Org.OData.Measures.V1.Unit/Path", oProperty);
	};

	/**
	 * Calculates the value of the label annotation.
	 *
	 * @param {object} oProperty the OData property for which to calculate the value of the label annotation
	 * @return {string} the value of the label annotation, which can be <code>null</code>.
	 * @public
	 */
	AnnotationHelper.prototype.getLabel = function(oProperty) {
		var sLabel = this._getObject("com.sap.vocabularies.UI.v1.DataFieldWithUrl/Label/String", oProperty);
		return sLabel || oProperty["sap:label"] || this._getObject("com.sap.vocabularies.Common.v1.Label/String", oProperty);
	};

	/**
	 * Checks whether the given property semantically addresses a currency.
	 *
	 * @param {object} oProperty the OData property
	 * @return {boolean} <code>true</code>, if a currency is addressed, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.isCurrency = function(oProperty) {
		return (oProperty["sap:semantics"] === "currency-code") || !!this._getObject("Org.OData.Measures.V1.ISOCurrency/Path", oProperty);
	};

	/**
	 * Calculates the value of the quickinfo annotation. e.q. usage as tooltip
	 *
	 * @param {object} oProperty the OData property from the meta model
	 * @return {string} the value of the quickinfo annotation, which can be <code>null</code>.
	 * @public
	 */
	AnnotationHelper.prototype.getQuickInfo = function(oProperty) {
		return oProperty["sap:quickinfo"] || this._getObject("com.sap.vocabularies.Common.v1.QuickInfo/String", oProperty);
	};

	/**
	 * Checks whether the given property needs to be masked. e.q. usage as password
	 *
	 * @param {object} oProperty the OData property from the meta model
	 * @return {boolean} <code>true</code>, if masking is required, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.isMasked = function(oProperty) {
		return (!!this._getObject("com.sap.vocabularies.Common.v1.Masked", oProperty));
	};

	/**
	 * Checks whether the given property supports the multi-line-text annotation
	 *
	 * @param {object} oProperty the OData property from the meta model
	 * @return {boolean} <code>true</code>, if this annotation exists, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.isMultiLineText = function(oProperty) {
		return (!!this._getObject("com.sap.vocabularies.UI.v1.MultiLineText", oProperty));
	};

	/**
	 * Checks whether the given property is static-mandatory.
	 *
	 * @param {object} oProperty The OData property from the meta model
	 * @return {boolean} <code>true</code>, if a property is static-mandatory, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.isStaticMandatory = function(oProperty) {
		var oFieldControl = this._getObject("com.sap.vocabularies.Common.v1.FieldControl", oProperty);
		if (oFieldControl && oFieldControl.EnumMember) {
			return (oFieldControl.EnumMember === "com.sap.vocabularies.Common.v1.FieldControlType/Mandatory");
		}
		return false;
	};

	/**
	 * Checks whether the given property is nullable.
	 *
	 * @param {object} oProperty The OData property from the meta model
	 * @return {boolean} <code>true</code>, if a property is nullable, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.isNullable = function(oProperty) {
		var oNullable = this._getObject("nullable", oProperty);
		if (oNullable) {
			return (oNullable === "true");
		}
		return true;
	};

	/**
	 * Checks whether the given property requires a conversion of its value to upper case.
	 *
	 * @param {object} oProperty the OData property from the meta model
	 * @return {boolean} <code>true</code>, if a conversion to upper case is required, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.isUpperCase = function(oProperty) {
		return (oProperty["sap:display-format"] === "UpperCase") || (this._getObject("com.sap.vocabularies.Common.v1.IsUpperCase/Bool", oProperty) === "true");
	};

	/**
	 * Checks whether creating an entity set is statically enabled.
	 *
	 * @param {object} oEntitySet the given entity set from the meta model
	 * @return {boolean} <code>true</code>, if creating an entity set is statically enabled, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.canCreateEntitySet = function(oEntitySet) {
		var bNo = (oEntitySet["sap:creatable"] === "false") || (this._getObject("Org.OData.Capabilities.V1.InsertRestrictions/Insertable/Bool", oEntitySet) === "false");
		return !bNo;
	};

	/**
	 * Checks whether creating a property is statically enabled.
	 *
	 * @param {object} oProperty the given property from the meta model
	 * @return {boolean} <code>true</code>, if creating a property is statically enabled, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.canCreateProperty = function(oProperty) {

		if (this._getObject("Org.OData.Core.V1.Computed/Bool", oProperty) === "true") {
			return false;
		}

		if (oProperty["sap:creatable"] === "false") {
			return false;
		}

		return true;
	};

	/**
	 * Checks whether updating an entity set is statically enabled.
	 *
	 * @param {object} oEntitySet the given entity set from the meta model
	 * @return {boolean} <code>true</code>, if updating an entity set is statically enabled, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.canUpdateEntitySet = function(oEntitySet) {
		var bNo = (oEntitySet["sap:updatable"] === "false") || (this._getObject("Org.OData.Capabilities.V1.UpdateRestrictions/Updatable/Bool", oEntitySet) === "false");
		return !bNo;
	};

	/**
	 * Checks whether updating an entity set is statically enabled.
	 *
	 * @param {object} oEntitySet the given entity set from the meta model
	 * @return {string} the path of the field control property.
	 * @public
	 */
	AnnotationHelper.prototype.getUpdateEntitySetPath = function(oEntitySet) {
		return oEntitySet["sap:updatable"] || this._getObject("Org.OData.Capabilities.V1.UpdateRestrictions/Updatable/Path", oEntitySet);
	};

	/**
	 * Checks whether updating a property is statically enabled.
	 *
	 * @param {object} oProperty the given property from the meta model
	 * @return {boolean} <code>true</code>, if updating a property is statically enabled, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.canUpdateProperty = function(oProperty) {
		var bNo = (oProperty["sap:updatable"] === "false") || (this._getObject("Org.OData.Core.V1.Immutable/Bool", oProperty) === "true") || (this._getObject("com.sap.vocabularies.Common.v1.FieldControl/EnumMember", oProperty) === "com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly");
		return !bNo;
	};

	/**
	 * Calculates the path of the field control property for a given property.
	 *
	 * @param {object} oProperty the given property from the meta model
	 * @return {string} the path of the field control property.
	 * @public
	 */
	AnnotationHelper.prototype.getFieldControlPath = function(oProperty) {
		return oProperty["sap:field-control"] || this._getObject("com.sap.vocabularies.Common.v1.FieldControl/Path", oProperty);
	};

	/**
	 * Checks whether the visibility of a property is statically modeled.
	 *
	 * @param {object} oProperty the given property from the meta model
	 * @return {string} <code>true</code>, if a property is modeled as statically visible, <code>false</code> otherwise.
	 * @public
	 */
	AnnotationHelper.prototype.getVisible = function(oProperty) {

		if (oProperty["sap:visible"]) {
			return oProperty["sap:visible"];
		}

		// no "sap:visible": so check for a static field control.
		var sValue = this._getObject("com.sap.vocabularies.Common.v1.FieldControl/EnumMember", oProperty);

		if (sValue === "com.sap.vocabularies.Common.v1.FieldControlType/Hidden") {
			return "false";
		}

		// return default.
		return "true";
	};

	/**
	 * Returns an object that is addressed by a given path. If no object can be found <code>null</code> is returned.
	 *
	 * @param {string} sPath the path to address the object
	 * @param {object} oObject the object to start with
	 * @return {object} the target object, can be <code>null</code>.
	 * @private
	 */
	AnnotationHelper.prototype._getObject = function(sPath, oObject) {
		var oNode = oObject, aParts = sPath.split("/"), iIndex = 0;

		while (oNode && aParts[iIndex]) {
			oNode = oNode[aParts[iIndex]];
			iIndex++;
		}

		return oNode;
	};

	AnnotationHelper.prototype.destroy = function() {
		// nothing to do here.
	};

	return AnnotationHelper;
}, true);

}; // end of sap/ui/comp/smartfield/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.BindingUtil') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Utility to access control binding for <code>SmartField</code> control.
 *
 * @name sap.ui.comp.smartfield.BindingUtil
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @returns {sap.ui.comp.smartfield.BindingUtil} The binding access class.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.BindingUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.BindingParser'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/BindingUtil",["sap/ui/model/odata/AnnotationHelper", "sap/ui/base/BindingParser"], function( AnnotationHelper, BindingParser ) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 */
	var BindingUtil = function() {
		//nothing to do here.
	};

	/**
	 * Corrects a given navigation path, especially IDs are removed, e.g. <code>Tasks('id-1428419016778-51')</code> is converted into
	 * <code>Tasks</code>.
	 *
	 * @param {string} sPath The path to be converted.
	 * @returns {string} Conversion result.
	 * @since 1.29.0
	 * @public
	 */
	BindingUtil.prototype.correctPath = function(sPath) {
		var sEntity,
			oRegExp = /\((.+)\)*/,
			aMatches = oRegExp.exec(sPath);

		if (aMatches) {
			sEntity = sPath.replace(aMatches[0], "");
		} else {
			sEntity = sPath;
		}

		return sEntity.replace("/", "");
	};

	/**
	 * Calculates the navigation properties to traverse. The binding context and object binding are used as a basis for this calculation.
	 *
	 * @param {sap.ui.core.control} oControl The control for which the binding context and object binding have to be analyzed.
	 * @returns {map} The navigation properties to traverse or an empty array, never <code>null</code>.
	 * @since 1.29.0
	 * @public
	 */
	BindingUtil.prototype.getNavigationProperties = function(oControl) {
		var oObjectBinding, oBindingContext, mResult = {};

		// check the binding context.
		oBindingContext = oControl.getBindingContext();

		if (oBindingContext && oBindingContext.sPath) {
			mResult.paths = oBindingContext.sPath.split("/");
		}

		// check the object binding.
		oObjectBinding = oControl.getObjectBinding();

		if (oObjectBinding && oObjectBinding.sPath) {
			mResult.objectBinding = oObjectBinding.sPath;

			if (mResult.paths) {
				mResult.paths.push(oObjectBinding.sPath);
			} else {
				mResult.paths = [
					oObjectBinding.sPath
				];
			}
		}

		if (!mResult.paths) {
			mResult.paths = [];
		}

		return mResult;
	};

	/**
	 * Converts the paths from the binding information of a control property to their original form.
	 *
	 * @param {object} oBindingInfo The binding information from the control
	 * @param {array} aPaths The binding paths
	 * @param {object} oInfo Information about the binding
	 * @public
	 */
	BindingUtil.prototype.getBindingParts = function(oBindingInfo, aPaths, oInfo) {
		var len = 0, i, oPart, sOut;

		if (oBindingInfo && oBindingInfo.parts) {
			len = oBindingInfo.parts.length;
		}

		for (i = 0; i < len; i++) {
			sOut = "";
			oPart = oBindingInfo.parts[i];

			if (oPart.model) {
				sOut = sOut + oPart.model + ">";
			}

			sOut = sOut + oPart.path;
			aPaths.push(sOut);
			oInfo.length++;
		}
	};

	/**
	 * Converts binding information for a control property to its original form.
	 *
	 * @param {object} oInfo The binding information from the control.
	 * @returns {object} Conversion result.
	 * @public
	 */
	BindingUtil.prototype.toBinding = function(oInfo) {
		var oOut = {}, n, oPart, i, len, mNames = {
			model: true,
			formatter: true,
			mode: true,
			path: true
		};

		if (oInfo) {
			if (oInfo.parts && oInfo.parts.length) {
				len = oInfo.parts.length;
				oOut.parts = [];
			}

			for (i = 0; i < len; i++) {
				oPart = oInfo.parts[i];
				oOut.parts.push(oPart);
			}

			for (n in mNames) {
				if (oInfo[n]) {
					oOut[n] = oInfo[n];
				}
			}

			return oOut;
		}

		return null;
	};

	/**
	 * Converts binding information for a control property to its original form.
	 *
	 * @param {object} oInfo The binding information from the control.
	 * @returns {string} Conversion result.
	 * @public
	 */
	BindingUtil.prototype.toBindingPath = function(oInfo) {
		var oOut, sOut = "", oPart, i, len;

		oOut = this.toBinding(oInfo);

		if (oOut) {
			if (oOut.model) {
				sOut = oOut.model + ">";
			}

			if (oOut.path) {
				sOut = sOut + oOut.path;
			} else if (oOut.parts && oOut.parts.length > 0) {
				len = oOut.parts.length;

				for (i = 0; i < len; i++) {
					oPart = oOut.parts[i];

					if (oPart.model) {
						sOut = sOut + oPart.model + ">";
					}

					sOut = sOut + oPart.path;
				}
			}
		}

		return sOut;
	};

	/**
	 * Creates a binding definition for a formatter.
	 *
	 * @param {string} sModel The name of the current model
	 * @param {map} oFormatter The formatter
	 * @param {array} aPaths Overall collection of paths
	 * @returns {map} The binding definition
	 * @public
	 */
	BindingUtil.prototype.fromFormatter = function(sModel, oFormatter, aPaths) {
		var i, len, aParts, mBind = {
			model: sModel,
			formatter: oFormatter.formatter
		};

		aParts = oFormatter.path();
		len = aParts.length;

		if (len > 0) {
			mBind.parts = aParts;

			if (aPaths) {
				for (i = 0; i < len; i++) {
					aPaths.push(aParts[i]);
				}
			}

		} else {
			mBind.path = "";
		}

		return mBind;
	};

	/**
	 * This helper function is able to to handle odata binding expressions like path and apply function
	 *
	 * @param {object} oBindingExpression The oData description starting with <code>Apply Function</code> or with a <code>path</code> expression
	 * @param {object} oBindingContext The current binding context
	 * @returns {string} The resulting value of the function execution
	 * @private
	 * @since 1.30.0
	 */
	BindingUtil.prototype.executeODataBindingExpression = function(oBindingExpression, oBindingContext) {

		var i, sValue, aValues, oParseResult, sHref, sHrefResult = "";

		if (oBindingExpression && oBindingContext) {

			sHref = AnnotationHelper.format(oBindingContext, oBindingExpression); // generate a sapui5 binding expression
			sHrefResult = sHref;

			oParseResult = BindingParser.complexParser(sHref, oBindingContext); // parse the binding expression
			aValues = [];
			if (oParseResult) {

				if (oParseResult.formatter) {

					for (i = 0; i < oParseResult.parts.length; i++) {
						sValue = oBindingContext.getProperty(oParseResult.parts[i].path, "value");
						aValues.push(sValue);
					}

					sHrefResult = oParseResult.formatter.apply(null, aValues);
				} else {
					sHrefResult = oBindingContext.getProperty(oParseResult.path, "value");
				}
			}
		}

		return sHrefResult;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 *
	 * @public
	 */
	BindingUtil.prototype.destroy = function() {
		//nothing to do here.
	};

	return BindingUtil;
}, true);

}; // end of sap/ui/comp/smartfield/BindingUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.Configuration') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfield.Configuration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/Configuration",[
	"jquery.sap.global", "sap/ui/comp/library", "sap/ui/core/Element"
], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new <code>Smartfield</code>/<code>Configuration</code>.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The configuration allows to further define the behavior of a <code>SmartField</code>.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.Configuration
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Configuration = Element.extend("sap.ui.comp.smartfield.Configuration", /** @lends sap.ui.comp.smartfield.Configuration.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * By default the SmartField chooses the controls it hosts by interpreting OData metadata. This property allows to overwrite the
				 * default behavior to some extent. For example makes it possible to define that an OData property of type Edm.Boolean is displayed as
				 * a combo box.
				 */
				controlType: {
					type: "sap.ui.comp.smartfield.ControlType",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The property specifies how value help, that is available for input fields, is presented. For example, it specifies whether the
				 * descriptions of the values shown in the result after a query are displayed.
				 */
				displayBehaviour: {
					type: "sap.ui.comp.smartfield.DisplayBehaviour",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If there are value help annotations for a smart field, it is possible to specify whether the table in the value help dialog for
				 * this field will be filled initially. The default value is <code>true</code>, which means the table will not be filled as the
				 * data fetch is prevented.
				 */
				preventInitialDataFetchInValueHelpDialog: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			}
		}
	});

	return Configuration;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/Configuration.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ControlProposal') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfield.ControlProposal'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ControlProposal",["jquery.sap.global", "sap/ui/comp/library", "sap/ui/core/Element"], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new <code>smartfield/ControlProposal</code>.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Proposes a control to be rendered. The smart field may ignore the proposal.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.ControlProposal
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ControlProposal = Element.extend("sap.ui.comp.smartfield.ControlProposal", /** @lends sap.ui.comp.smartfield.ControlProposal.prototype */ { metadata : {

		library : "sap.ui.comp",
		properties : {

			/**
			 * By default the SmartField chooses the controls it hosts by interpreting OData meta data. This property allows to overwrite the default behavior to some
			 * extent; for example this property allows to define that an OData property of type Edm.Boolean is displayed as combo box.
			 */
			controlType : {type : "sap.ui.comp.smartfield.ControlProposalType", group : "Misc", defaultValue : sap.ui.comp.smartfield.ControlProposalType.None}

		},
		aggregations: {

			/**
			 * Optional definition to further qualify how an object status control should be rendered.
			 *
			 * @since 1.34.0
			 */
			objectStatus : {type: "sap.ui.comp.smartfield.ObjectStatus", multiple : false}
		}
	}});


	return ControlProposal;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfield/ControlProposal.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.FieldControl') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Field Control Implementation for <code>SmartField</code> Control. The implementation operates on OData meta data.
 *
 * @name sap.ui.comp.smartfield.FieldControl
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @returns {sap.ui.comp.smartfield.FieldControl} the field control class.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.FieldControl'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/FieldControl",[
	"jquery.sap.global", "sap/ui/comp/smartfield/BindingUtil", "sap/ui/model/ParseException"
], function(jQuery, BindingUtil, ParseException) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.core.Control} oParent the parent control.
	 * @param {sap.ui.comp.smartfield.ODataHelper} oHelper a reference to the oData helper implementation.
	 */
	var FieldControl = function(oParent, oHelper) {
		this._bIsDestroyed = false;
		this._oBinding = new BindingUtil();
		this._oStoredProperties = {};
		this._bVisibleSet = false;
		this._bEditableSet = false;
		this._bMandatorySet = false;
		this._bUomEditableSet = false;
		this._oStoredBindings = {};
		this._oParent = oParent;
		this._oHelper = oHelper;
		this._oAnnotation = oHelper.oAnnotation;
	};

	/**
	 * Calculates the control attributes that can be bound with field-control.
	 *
	 * @param {boolean} bNoMandatory flag indicating whether the mandatory attribute can be returned.
	 * @returns {array} the control attributes that can be bound with field-control.
	 * @public
	 */
	FieldControl.prototype.getBindableAttributes = function(bNoMandatory) {
		var oConfig = this._oParent.data("configdata");

		// in case of table there is no need to bind visible and mandatory properties.
		if (oConfig && (oConfig.configdata && !oConfig.configdata.isUOM || !oConfig.configdata)) {

			if (oConfig.configdata && oConfig.configdata.property && oConfig.configdata.property.property && this._oAnnotation.getFieldControlPath(oConfig.configdata.property.property)) {
				return [
					"editable", "visible"
				];
			} else {
				return [
					"editable"
				];
			}
		}

		if (bNoMandatory) {
			return [
				"editable", "visible"
			];
		}

		return [
			"editable", "visible", "mandatory"
		];
	};

	/**
	 * Returns formatter functions for the given control properties. The formatters use the given control property and its subordinate attributes.
	 * Each formatter consists of two function, one to calculate the binding paths and the formatter function itself.
	 *
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {array} aBindings the names of the properties to be bound, e.g. "editable", "mandatory" and "visible".
	 * @returns {map} formatter functions for the given control properties.
	 * @public
	 */
	FieldControl.prototype.getControlProperties = function(oMetaData, aBindings) {
		var sMethod, len, sName, oResult = {};

		if (oMetaData && aBindings) {
			len = aBindings.length;

			while (len--) {
				sName = aBindings[len];
				sMethod = "_get" + sName.substring(0, 1).toUpperCase() + sName.substring(1);

				if (this[sMethod]) {
					oResult[sName] = this[sMethod](oMetaData, this._oParent.getBindingInfo(sName));
				}
			}
		}

		return oResult;
	};

	/**
	 * Returns formatter functions for the <code>editable</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 *
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @param {object} oBindingInfo the current binding of the property
	 * @param {string} sProperty the property
	 * @returns {object} formatter function for the given control attribute
	 * @private
	 */
	FieldControl.prototype._getEditable = function(oMetaData, oBindingInfo, sProperty) {
		var bParent, iPropertyPos = -1, iEntitySetPos = -1, iBindingPos = -1, that = this, oParts = {
			length: 0
		};

		// if the field is not bound, use the initial value from the parent control.
		if (sProperty === "uomEditable") {
			this._bUomEditableSet = true;
		} else {
			this._bEditableSet = true;
		}
		if (!oBindingInfo) {
			if (sProperty) {
				bParent = this._oParent["get" + sProperty.substring(0, 1).toUpperCase() + sProperty.substring(1)]();
				this._oStoredProperties[sProperty] = bParent;
			} else {
				bParent = this._oParent.getEditable();
				this._oStoredProperties["editable"] = bParent;
			}
			this._oStoredBindings.editable = null;
		} else if (this._oStoredBindings.editable === undefined) {
			this._oStoredBindings.editable = oBindingInfo;
		}

		return {
			path: function() {
				var aPaths = [], sPath, len = 0;

				// no value bound on smart field, but a URL could be there.
				if (!oMetaData.property || !oMetaData.property.property) {
					return [
						""
					];
				}

				// check for field-control on property level and set position.
				sPath = that._oAnnotation.getFieldControlPath(oMetaData.property.property);

				if (sPath) {
					aPaths.push(that._toPath(oMetaData, sPath));
					iPropertyPos = len;
					len++;
				}

				// check for field-control on entity set level and set position.
				// for "sap:updatable-path" no OData V4 annotation is considered,
				// because it is replaced by the instance annotation com.sap.vocabularies.Common.v1.Updatable.
				if (oMetaData.entitySet["sap:updatable-path"]) {
					aPaths.push(oMetaData.entitySet["sap:updatable-path"]);
					iEntitySetPos = len;
					len++;
				}

				// check for binding info and set position.
				if (oBindingInfo) {
					iBindingPos = len;
					that._oBinding.getBindingParts(oBindingInfo, aPaths, oParts);
					len = len + oParts.length;
				}

				if (len > 0) {
					return aPaths;
				}

				return [
					""
				];
			},
			formatter: function(vValue, p1, p2, p3) {
				var aArgs = [], oBindingContext, oObject;

				if (that._bIsDestroyed) {
					return false;
				}

				if (!that._oAnnotation) {
					return false;
				}

				// check the modeled static values.
				oBindingContext = that._oParent.getBindingContext();

				if (!oBindingContext) {
					return vValue;
				}

				if (oBindingContext.getObject && oMetaData && oMetaData.property && oMetaData.property.property) {
					oObject = oBindingContext.getObject();

					if (oObject && oObject.__metadata && oObject.__metadata.created) {
						if (!that._getCreatableStatic(oMetaData)) {
							return false;
						}
					} else if (!that._getUpdatableStatic(oMetaData)) {
						return false;
					}
				}

				// get the values to compare.
				if (iPropertyPos > -1) {
					aArgs.push(arguments[iPropertyPos] !== 1);
				}

				// ignore updatable-path during create
				if (iEntitySetPos > -1 && (!oObject || !oObject.__metadata || !oObject.__metadata.created)) {
					aArgs.push(!!arguments[iEntitySetPos]);
				}

				// check for binding, in case of no binding, use value from parent
				if (iBindingPos > -1) {
					if (oBindingInfo.formatter) {
						aArgs.push(that._execFormatter(oBindingInfo.formatter, arguments, iBindingPos, oParts.length));
					} else {
						aArgs.push(!!arguments[iBindingPos]);
					}
				} else {
					aArgs.push(bParent);
				}

				return that._compare(aArgs, false, true);
			}
		};
	};

	/**
	 * Executes the given formatter.
	 *
	 * @param {function} fFormatter The formatter to be executed
	 * @param {array} aArguments The possible arguments
	 * @param {int} iStart The start position
	 * @param {int} iLength The length
	 * @returns {object} The formatting result
	 * @private
	 */
	FieldControl.prototype._execFormatter = function(fFormatter, aArguments, iStart, iLength) {
		var aArgs = [], i;

		if (iStart > -1 && iLength > -1) {
			for (i = 0; i < iLength; i++) {
				aArgs.push(aArguments[iStart + i]);
			}
		}

		return fFormatter.apply(null, aArgs);
	};

	/**
	 * Returns static value for the <code>enabled</code> property of a control.
	 *
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @returns {boolean} static value for the <code>enabled</code> property of a control.
	 * @private
	 */
	FieldControl.prototype._getCreatableStatic = function(oMetaData) {
		return (this._oAnnotation.canCreateEntitySet(oMetaData.entitySet) && this._oAnnotation.canCreateProperty(oMetaData.property.property));
	};

	/**
	 * Returns static value for the <code>enabled</code> property of a control.
	 *
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @returns {boolean} static value for the <code>enabled</code> property of a control.
	 * @private
	 */
	FieldControl.prototype._getUpdatableStatic = function(oMetaData) {
		return (this._oAnnotation.canUpdateEntitySet(oMetaData.entitySet) && this._oAnnotation.canUpdateProperty(oMetaData.property.property));
	};

	/**
	 * Compares the boolean values from field control evaluation. First the values are compared to <code>bPessimist</code>. If this comparison does
	 * not evaluate to <code>true</code>, <code>bDefault</code> is returned.
	 *
	 * @param {array} aArgs values to be compared.
	 * @param {boolean} bPessimist first operand.
	 * @param {boolean} bDefault second operand.
	 * @returns {boolean} comparison result.
	 * @private
	 */
	FieldControl.prototype._compare = function(aArgs, bPessimist, bDefault) {
		var i, len = aArgs.length;

		for (i = 0; i < len; i++) {
			if (aArgs[i] === bPessimist) {
				return bPessimist;
			}
		}

		return bDefault;
	};

	/**
	 * Returns formatter functions for the <code>visible</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 *
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oBindingInfo the current binding of the property.
	 * @returns {object} formatter function for the given control attribute.
	 * @private
	 */
	FieldControl.prototype._getVisible = function(oMetaData, oBindingInfo) {
		var bParent, iBindingPos = -1, iPropertyPos = -1, that = this, oParts = {
			length: 0
		};

		// if the field is not bound, use the initial value from the parent control.
		this._bVisibleSet = true;
		if (!oBindingInfo) {
			bParent = this._oParent.getVisible();
			this._oStoredProperties.visible = bParent;
			this._oStoredBindings.visible = null;
		} else if (this._oStoredBindings.visible === undefined) {
			this._oStoredBindings.visible = oBindingInfo;
		}

		return {
			path: function() {
				var aPaths = [], sPath, len = 0;

				// no value bound on smart field, but a URL could be there.
				if (!oMetaData.property || !oMetaData.property.property) {
					return [
						""
					];
				}

				// check for field-control on entity set level and set position.
				sPath = that._oAnnotation.getFieldControlPath(oMetaData.property.property);

				if (sPath) {
					aPaths.push(that._toPath(oMetaData, sPath));
					iPropertyPos = len;
					len++;
				}

				// check for binding info and set position.
				if (oBindingInfo) {
					iBindingPos = len;
					that._oBinding.getBindingParts(oBindingInfo, aPaths, oParts);
					len = len + oParts.length;
				}

				if (len > 0) {
					return aPaths;
				}

				return [
					""
				];
			},
			formatter: function(p1, p2) {
				var aArgs = [];

				if (that._bIsDestroyed) {
					return false;
				}

				if (!that._oAnnotation) {
					return false;
				}

				// check static property.
				if (oMetaData.property && oMetaData.property.property && that._oAnnotation.getVisible(oMetaData.property.property) === "false") {
					return false;
				}

				// check, if field-control is available.
				if (iPropertyPos > -1) {
					aArgs.push(arguments[iPropertyPos] !== 0);
				}

				// check for binding, in case of no binding, use value from parent.
				if (iBindingPos > -1) {
					if (oBindingInfo.formatter) {
						aArgs.push(that._execFormatter(oBindingInfo.formatter, arguments, iBindingPos, oParts.length));
					} else {
						aArgs.push(!!arguments[iBindingPos]);
					}
				} else {
					aArgs.push(bParent);
				}

				return that._compare(aArgs, false, true);
			}
		};
	};

	/**
	 * Returns formatter functions for the <code>mandatory</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 *
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {object} oBindingInfo the current binding of the property.
	 * @returns {object} formatter function for the given control attribute.
	 * @private
	 */
	FieldControl.prototype._getMandatory = function(oMetaData, oBindingInfo) {
		var bParent, iBindingPos = -1, iPropertyPos = -1, that = this, oParts = {
			length: 0
		};

		// if the field is not bound, use the initial value from the parent control.
		this._bMandatorySet = true;
		if (!oBindingInfo) {
			bParent = this._oParent.getMandatory();
			this._oStoredProperties.mandatory = bParent;
			this._oStoredBindings.mandatory = null;
		} else if (this._oStoredBindings.mandatory === undefined) {
			this._oStoredBindings.mandatory = oBindingInfo;
		}

		return {
			path: function() {
				var aPaths = [], sPath, len = 0;

				// no value bound on smart field, but a URL could be there.
				if (!oMetaData.property || !oMetaData.property.property) {
					return [
						""
					];
				}

				// check for field-control on entity set level and set position.
				sPath = that._oAnnotation.getFieldControlPath(oMetaData.property.property);

				if (sPath) {
					aPaths.push(that._toPath(oMetaData, sPath));
					iPropertyPos = len;
					len++;
				}

				// check for binding info and set position.
				if (oBindingInfo) {
					iBindingPos = len;
					that._oBinding.getBindingParts(oBindingInfo, aPaths, oParts);
					len = len + oParts.length;
				}

				if (len > 0) {
					return aPaths;
				}

				return [
					""
				];
			},
			formatter: function(p1, p2) {
				var aArgs = [];

				if (that._bIsDestroyed) {
					return true;
				}

				// no field control, so check for null-able or static mandatory.
				// default for null-able is true, so it has to be set to false to make a property mandatory.
				if (oMetaData.property && oMetaData.property.property) {
					if (oMetaData.property.property.nullable === "false" || (that._oAnnotation && that._oAnnotation.isStaticMandatory(oMetaData.property.property))) {
						aArgs.push(true);
					} else if (oMetaData.property.property.nullable) {
						aArgs.push(false);
					}
				}

				// check, if field-control is active.
				if (iPropertyPos > -1) {
					aArgs.push(arguments[iPropertyPos] === 7);
				}

				// check for binding, in case of no binding, use value from parent.
				if (iBindingPos > -1) {
					if (oBindingInfo.formatter) {
						aArgs.push(that._execFormatter(oBindingInfo.formatter, arguments, iBindingPos, oParts.length));
					} else {
						aArgs.push(!!arguments[iBindingPos]);
					}
				} else {
					aArgs.push(bParent);
				}

				return that._compare(aArgs, true, false);
			}
		};
	};

	/**
	 * Constructs a binding path for a formatter from the <code>value</code> attribute of a JSON property.
	 *
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.property the OData property definition.
	 * @param {string} oMetaData.path the binding path.
	 * @param {string} sPath the given path.
	 * @returns {string} binding path for an attribute.
	 * @private
	 */
	FieldControl.prototype._toPath = function(oMetaData, sPath) {

		// if the original property is a complex path,
		// impossible to have a navigation property in sPath.
		// so we assume this as a prerequisite.
		if (oMetaData.property.complex) {
			return oMetaData.path.replace(oMetaData.property.property.name, sPath);
		}

		// add an optional navigation path from value property of the smart control:
		// should be done for simple and complex properties!
		if (oMetaData.navigationPath) {
			return oMetaData.navigationPath + "/" + sPath;
		}

		return sPath;
	};

	/**
	 * Returns a function to check whether a field is a mandatory field.
	 *
	 * @param {object} oProperty the meta data to execute the check.
	 * @returns {function} the check function, can be <code>null</code>.
	 * @public
	 */
	FieldControl.prototype.getMandatoryCheck = function(oProperty) {
		var fReturn, that = this;

		if (oProperty) {
			switch (oProperty.property.type) {
				case "Edm.DateTimeOffset":
				case "Edm.DateTime":
				case "Edm.Time":
				case "Edm.String":
					fReturn = function(sValue) {
						if (that._oParent && that._oParent.getMandatory() && that._oParent.getClientSideMandatoryCheck() &&
							(!that._oAnnotation || !that._oAnnotation.isStaticMandatory(oProperty.property) || !that._oAnnotation.isNullable(oProperty.property)) && !sValue) {
							throw new ParseException(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("VALUEHELPVALDLG_FIELDMESSAGE"));
						}
					};
					break;
				case "Edm.Decimal":
				case "Edm.Double":
				case "Edm.Float":
				case "Edm.Single":
				case "Edm.Int16":
				case "Edm.Int32":
				case "Edm.Int64":
				case "Edm.Byte":
				case "Edm.SByte":
					fReturn = function(sValue) {
						if (that._oParent && that._oParent.getMandatory() && that._oParent.getClientSideMandatoryCheck() &&
							(!that._oAnnotation || !that._oAnnotation.isStaticMandatory(oProperty.property) || !that._oAnnotation.isNullable(oProperty.property)) &&
							(sValue === null || sValue === undefined || sValue === "")) {
							throw new ParseException(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("VALUEHELPVALDLG_FIELDMESSAGE"));
						}
					};
					break;
				default:
					break;
			}
		}

		return fReturn;
	};

	/**
	 * Returns formatter functions for the <code>uomEditState</code> property of a control. The formatters use the given OData property and its
	 * subordinate attributes.
	 *
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @returns {object} formatter function for the given control attribute
	 * @public
	 */
	FieldControl.prototype.getUOMEditState = function(oMetaData) {
		var mNumber, mUnit, oUnitMetaData, lenNumber = 0, oBindingInfo;

		// get the formatter for the number.
		oBindingInfo = this._oParent.getBindingInfo("editable");
		mNumber = this._getEditable(oMetaData, oBindingInfo);

		// get the formatter for the unit.
		oUnitMetaData = {
			model: oMetaData.model,
			path: this._oHelper.getUOMPath(oMetaData),
			entitySet: oMetaData.entitySet,
			entityType: oMetaData.entityType,
			property: {
				property: oMetaData.annotations.uom.property,
				complex: oMetaData.property.complex,
				typePath: this._oHelper.getUOMTypePath(oMetaData)
			}
		};
		mUnit = this._getEditable(oUnitMetaData, this._oParent.getBindingInfo("uomEditable"), "uomEditable");

		return {
			path: function() {
				var aNumber = mNumber.path(), aUnit = mUnit.path();

				if (aNumber[0] === "" && aUnit === "") {
					return [
						""
					];
				}

				lenNumber = aNumber.length;

				return aNumber.concat(aUnit);
			},
			formatter: function(v, p1, p2, p3) {
				var aArgs = [], i, bNumber, bUnit, len = arguments.length;

				// execute the formatter for the number
				for (i = 0; i < lenNumber; i++) {
					aArgs.push(arguments[i]);
				}

				bNumber = mNumber.formatter.apply(null, aArgs);

				// prepare the arguments for the unit formatter => simply remove the arguments for the number.
				aArgs = [];

				for (i = 0; i < len; i++) {
					aArgs.push(arguments[i]);
				}

				for (i = 0; i < lenNumber; i++) {
					aArgs.shift();
				}

				// execute the formatter for the unit.
				bUnit = mUnit.formatter.apply(null, aArgs);

				// calculate the result
				if (!bUnit && !bNumber) {
					return 0;
				}

				return 1;
			}
		};
	};

	/**
	 * Checks whether a formatter for the property <code>uomEditState</code> of a control can be returned.
	 *
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @returns {boolean} <code>uomEditState</code>, if a formatter for the property <code>uomEditState</code> of a control can be returned,
	 *          <code>false</code> otherwise
	 * @public
	 */
	FieldControl.prototype.hasUomEditState = function(oMetaData) {
		var oProposal;

		if (oMetaData && oMetaData.annotations && oMetaData.annotations.uom) {
			oProposal = this._oParent.getControlProposal();

			if (oProposal) {
				if (oProposal.getControlType() === "ObjectNumber") {
					return true;
				}

				if (oProposal.getObjectStatus()) {
					return true;
				}
			}

			return this._oParent.getProposedControl() === "ObjectNumber";
		}

		return false;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 *
	 * @public
	 */
	FieldControl.prototype.destroy = function() {
		if (this._oBinding) {
			this._oBinding.destroy();
		}

		this._oAnnotation = null;
		this._oBinding = null;

		if (this._oParent && !this._oParent._bInDestroy) {

			// reset properties
			for ( var sProperty in this._oStoredProperties) {
				this._oParent.unbindProperty(sProperty, true);
				if (this._oParent["set" + sProperty.substring(0, 1).toUpperCase() + sProperty.substring(1)]) {
					this._oParent["set" + sProperty.substring(0, 1).toUpperCase() + sProperty.substring(1)](this._oStoredProperties[sProperty]);
				}
			}

			if (this._oStoredProperties) {
				if (!this._oStoredProperties.editable && this._bEditableSet) {
					this._oParent.unbindProperty("editable");
				}
				if (!this._oStoredProperties.visible && this._bVisibleSet) {
					this._oParent.unbindProperty("visible");
				}
				if (!this._oStoredProperties.mandatory && this._bMandatorySet) {
					this._oParent.unbindProperty("mandatory");
				}
				if (!this._oStoredProperties.uomEditable && this._bUomEditableSet) {
					this._oParent.unbindProperty("uomEditable");
				}
			}

			if (this._oStoredBindings) {
				if (this._oStoredBindings.editable) {
					if (this._oParent.isBound("editable")) {
						this._oParent.unbindProperty("editable");
					}
					this._oParent.bindProperty("editable", this._oStoredBindings.editable);
				}
				if (this._oStoredBindings.visible) {
					if (this._oParent.isBound("visible")) {
						this._oParent.unbindProperty("visible");
					}
					this._oParent.bindProperty("visible", this._oStoredBindings.visible);
				}
				if (this._oStoredBindings.mandatory) {
					if (this._oParent.isBound("mandatory")) {
						this._oParent.unbindProperty("mandatory");
					}
					this._oParent.bindProperty("mandatory", this._oStoredBindings.mandatory);
				}
				if (this._oStoredBindings.uomEditable) {
					if (this._oParent.isBound("uomEditable")) {
						this._oParent.unbindProperty("uomEditable");
					}
					this._oParent.bindProperty("uomEditable", this._oStoredBindings.uomEditable);
				}
			}

		}

		this._oStoredProperties = null;
		this._oStoredBindings = null;
		this._oParent = null;
		this._oHelper = null;
		this._bIsDestroyed = true;
		this._bEditableSet = false;
		this._bMandatorySet = false;
		this._bVisibleSet = false;
		this._bUomEditableSet = false;
	};

	return FieldControl;
}, true);

}; // end of sap/ui/comp/smartfield/FieldControl.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.JSONTypes') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Utility class to access data types, if the SmartField uses a JSON model.
 *
 * @name sap.ui.comp.smartfield.JSONTypes
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @returns {sap.ui.comp.smartfield.JSONTypes} the new instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.JSONTypes'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Boolean'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Float'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Integer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.String'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/JSONTypes",[	"jquery.sap.global", "sap/ui/model/type/Boolean", "sap/ui/model/type/Date", "sap/ui/model/type/Float", "sap/ui/model/type/Integer", "sap/ui/model/type/String" ], function(jQuery, BooleanType, DateType, FloatType, IntegerType, StringType) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 */
	var JSONTypes = function() {
		//nothing to do here.
	};

	/**
	 * Returns an instance of a sub-class of <code>sap.ui.model.Type</code> depending on the OData property's EDM type.
	 *
	 * @param {sType} sType the name of the type to be created.
	 * @returns {sap.ui.model.Type} an instance of a sub-class of <code>sap.ui.model.Type</code>.
	 * @public
	 */
	JSONTypes.prototype.getType = function(sType) {
		if (sType) {
			switch (sType) {
				case "Boolean":
					return new BooleanType();
				case "Date":
					return new DateType();
				case "Float":
					return new FloatType();
				case "Integer":
					return new IntegerType();
				default:
					return new StringType();
			}
		}

		return null;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 *
	 * @public
	 */
	JSONTypes.prototype.destroy = function() {
		//nothing to do here.
	};

	return JSONTypes;
}, true);

}; // end of sap/ui/comp/smartfield/JSONTypes.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataControlSelector') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Selector for controls that are hosted by <code>sap.ui.comp.smartfield.SmartField</code>.
 *
 * @private
 * @name sap.ui.comp.smartfield.ODataControlSelector
 * @author SAP SE
 * @version 1.50.6
 * @since 1.28.0
 * @param {jQuery} jQuery a reference to the jQuery implementation.
 * @returns {sap.ui.comp.smartfield.ODataControlSelector} new control selector instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataControlSelector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataControlSelector",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {object} oMetaData the meta data used to create the control.
	 * @param {object} oMetaData.entitySet the OData entity set definition.
	 * @param {object} oMetaData.entityType the OData entity type definition.
	 * @param {object} oMetaData.annotations the OData annotations.
	 * @param {string} oMetaData.path the binding path.
	 * @param {sap.ui.core.Control} oParent the parent control.
	 * @param {sap.ui.comp.smartfield.ODataTypes} oTypes types utility.
	 */
	var ODataControlSelector = function(oMetaData, oParent, oTypes) {
		this._oMetaData = oMetaData;
		this._oParent = oParent;
		this._oTypes = oTypes;
	};

	/**
	 * Checks whether a combo-box should be displayed.
	 *
	 * @param {boolean} bConfigOnly if set to <code>true</code>, only the control configuration will be checked.
	 * @returns {object} a flag indicating whether a combo-box should be displayed and the value list annotation to use the control to be created
	 *          regardless of whether a combo-box has to be created or not.
	 * @public
	 */
	ODataControlSelector.prototype.checkComboBox = function(bConfigOnly) {
		var oResult = {};

		// no annotation means no combo box in any case.
		if (this._oMetaData.annotations.valuelist) {
			oResult.valuelistType = this._oMetaData.annotations.valuelistType;
			oResult.annotation = this._oMetaData.annotations.valuelist;
		}

		if (!oResult.annotation) {
			return oResult;
		}

		// currently there is no replacement for <code>sap:semantics</code> with value <code>fixed-values</code>.
		if ((oResult.valuelistType === "fixed-values") && !bConfigOnly) {
			oResult.combobox = true;
		}

		// check configuration to find out whether a combo box should be created.
		if (!oResult.combobox) {
			oResult.annotation = this._oMetaData.annotations.valuelist;
			oResult.combobox = this._checkConfig("dropDownList");
		}

		return oResult;
	};

	/**
	 * Checks whether a <code>sap.m.Selection</code> should be displayed.
	 *
	 * @returns {object} a flag indicating whether a combo-box should be displayed and the value list annotation to use the control to be created
	 *          regardless of whether a <code>sap.m.Selection</code> has to be created or not.
	 * @public
	 */
	ODataControlSelector.prototype.checkSelection = function() {
		var oResult = {};

		// no annotation means no combo box in any case.
		if (this._oMetaData.annotations.valuelist) {
			oResult.annotation = this._oMetaData.annotations.valuelist;
			oResult.selection = this._checkConfig("selection");
		}

		return oResult;
	};

	/**
	 * Returns <code>true</code>, if a check box has to be rendered. The prerequisite is a property of Edm.type string with a maximum length of 1.
	 * Additionally the control has to be configured as a check box.
	 *
	 * @returns {boolean} <code>true</code>, if a check box has to be rendered, <code>false</code> otherwise.
	 * @public
	 */
	ODataControlSelector.prototype.checkCheckBox = function() {
		var oBind, iMaxLength;

		if (this._oMetaData.property && this._oMetaData.property.property && this._oMetaData.property.property.type === "Edm.String") {
			oBind = this._oParent.getBindingInfo("value");
			iMaxLength = this._oTypes.getMaxLength(this._oMetaData.property, oBind);

			if (iMaxLength === 1) {
				if (this._checkConfig("checkBox")) {
					return true;
				}
			}
		}

		return false;
	};

	/**
	 * Checks whether a <code>sap.m.DatePicker</code> has to be created. The <code>display-format</code> is evaluated and the control
	 * configuration.
	 *
	 * @returns {boolean} <code>true</code>, if a <code>sap.m.DatePicker</code> has to be created, <code>false</code> otherwise.
	 * @public
	 */
	ODataControlSelector.prototype.checkDatePicker = function() {

		// check the display-format annotation.
		// this method is only invoked for Edm.DateTime,
		// so no need exists to replace it with V4 annotations,
		// as Edm.DateTime is "pruned" in V4.
		if (this._oMetaData.property && this._oMetaData.property.property && this._oMetaData.property.property["sap:display-format"] === "Date") {
			return true;
		}

		// check the control configuration.
		return this._checkConfig("datePicker");
	};

	/**
	 * Checks whether a configuration exists for the given SmartField. If this is the case the controlType property is a validated.
	 *
	 * @param {string} sType the value of the type property to be checked against.
	 * @returns {boolean} <code>true</code>, if a configuration exists and the controlType property has the given value, <code>false</code>
	 *          otherwise.
	 * @private
	 */
	ODataControlSelector.prototype._checkConfig = function(sType) {
		var oConfig = this._oParent.getConfiguration();

		if (oConfig) {
			return oConfig.getControlType() === sType;
		}

		return false;
	};

	/**
	 * Returns the name of a method to create a control.
	 *
	 * @param {boolean} bBlockSmartLinkCreation if true, SmartLink will not be created
	 * @returns {string} the name of the factory method to create the control.
	 * @public
	 */
	ODataControlSelector.prototype.getCreator = function(bBlockSmartLinkCreation) {
		var bContextEditable = true,
			oConfig;

		var mMethods = {
			"Edm.Decimal": "_createEdmNumeric",
			"Edm.Double": "_createEdmNumeric",
			"Edm.Float": "_createEdmNumeric",
			"Edm.Single": "_createEdmNumeric",
			"Edm.Int16": "_createEdmNumeric",
			"Edm.Int32": "_createEdmNumeric",
			"Edm.Int64": "_createEdmNumeric",
			"Edm.Byte": "_createEdmNumeric",
			"Edm.DateTimeOffset": "_createEdmDateTimeOffset",
			"Edm.DateTime": "_createEdmDateTime",
			"Edm.Boolean": "_createEdmBoolean",
			"Edm.String": "_createEdmString",
			"Edm.Time": "_createEdmTime"
		};

		// check for unit of measure being displayed as object status.
		if (this._isUOMDisplayObjectStatus()) {
			return "_createEdmUOMObjectStatus";
		}

		// check for unit of measure being displayed as object number.
		if (this._isUOMDisplay()) {
			return "_createEdmUOMObjectNumber";
		}

		// context editable in smart form is on parent's parent in UOM for unit.
		oConfig = this._oParent.data("configdata");

		if (oConfig && oConfig.configdata && oConfig.configdata.isUOM) {
			if (oConfig.configdata.getContextEditable) {
				bContextEditable = oConfig.configdata.getContextEditable();
			}
		}

		// check for display mode.
		if (!this._oParent.getEditable() || !this._oParent.getEnabled() || !this._oParent.getContextEditable() || !bContextEditable) {
			if (this._oMetaData.annotations) {

				// ObjectIdentifier + SmartLink
				if (this.useObjectIdentifier(this.checkDatePicker()) && this._oMetaData.annotations.text && this._oMetaData.annotations.semanticKeys && this._oMetaData.annotations.semanticKeys.semanticKeyFields && this._oMetaData.annotations.semanticKeys.semanticKeyFields.indexOf(this._oMetaData.path) > -1) {
					return "_createEdmDisplay";
				}

				// SmartLink
				if (this._oMetaData.annotations.semantic && !bBlockSmartLinkCreation) {
					return "_createEdmSemantic";
				}

				if (this._oMetaData.annotations.uom) {
					return "_createEdmUOMDisplay";
				}

				if (this._isObjectStatusProposed()) {
					return "_createObjectStatus";
				}

				return (this._oMetaData.property && this._oMetaData.property.property && this._oMetaData.property.property.type === "Edm.Boolean") ? "_createEdmBoolean" : "_createEdmDisplay";
			}
		}

		// check for unit of measure.
		if (this._oMetaData.annotations && this._oMetaData.annotations.uom) {
			return "_createEdmUOM";
		}

		if (this._oMetaData.property && this._oMetaData.property.property) {

			// check by EdmType.
			return mMethods[this._oMetaData.property.property.type] || "_createEdmString";
		}

		return null;
	};

	/**
	 * Checks whether the complete unit of measure is in display mode.
	 *
	 * @returns {boolean} <code>true</code>, if the complete unit of measure is in display mode, <code>false</code> otherwise
	 * @private
	 */
	ODataControlSelector.prototype._isUOMDisplay = function() {

		if (this._oMetaData.annotations.uom) {

			if (this._isObjectNumberProposed()) {
				if (!this._oParent.getContextEditable() || (!this._oParent.getEditable() && !this._oParent.getUomEditable()) || (!this._oParent.getEnabled() && !this._oParent.getUomEnabled())) {
					return true;
				}

				// check field-control: unit and measure should be read-only!!!!
				if (this._oParent.getUomEditState() === 0) {
					return true;
				}
			}
		}

		return false;
	};

	/**
	 * Checks whether the complete unit of measure is in display mode and an object status control has to be displayed.
	 *
	 * @returns {boolean} <code>true</code>, if the complete unit of measure is in display mode and an object status control has to be displayed,
	 *          <code>false</code> otherwise
	 * @private
	 */
	ODataControlSelector.prototype._isUOMDisplayObjectStatus = function() {

		if (this._oMetaData.annotations.uom) {

			if (this._isObjectStatusProposed()) {

				if (!this._oParent.getContextEditable() || (!this._oParent.getEditable() && !this._oParent.getUomEditable()) || (!this._oParent.getEnabled() && !this._oParent.getUomEnabled())) {
					return true;
				}

				// check field-control: unit and measure should be read-only!!!!
				if (this._oParent.getUomEditState() === 0) {
					return true;
				}
			}
		}

		return false;
	};

	/**
	 * Checks whether an ObjectStatus is proposed.
	 *
	 * @returns {boolean} <code>true</code>, if ObjectStatus is proposed, <code>false</code> otherwise
	 * @private
	 */
	ODataControlSelector.prototype._isObjectStatusProposed = function() {
		var oProposal = this._oParent.getControlProposal(), oStatus;

		if (oProposal) {
			oStatus = oProposal.getObjectStatus();

			if (oStatus) {
				return true;
			}
		}

		return false;
	};

	/**
	 * Checks whether the object number control has been proposed.
	 *
	 * @returns {boolean} <code>true</code>, the object number control has been proposed, <code>false</code> otherwise
	 * @private
	 */
	ODataControlSelector.prototype._isObjectNumberProposed = function() {
		var oProposal;

		if (this._oParent.data("suppressUnit") !== "true") {
			oProposal = this._oParent.getControlProposal();

			if (oProposal && oProposal.getControlType() === "ObjectNumber") {
				return true;
			}

			if (this._oParent.getProposedControl() === "ObjectNumber") {
				return true;
			}
		}

		return false;
	};

	/**
	 * Checks whether the <code>sap.m.ObjectIdentifier</code> control has to be created.
	 *
	 * @param {boolean} bDatePicker flag indicating whether a data picker has to be displayed
	 * @param {boolean} bMasked flag indicating whether a masked input field has to be displayed
	 * @returns {boolean} <code>true</code>, if <code>sap.m.ObjectIdentifier</code> control has to be created, <code>false</code> otherwise
	 * @public
	 */
	ODataControlSelector.prototype.useObjectIdentifier = function(bDatePicker, bMasked) {
		var oProposal;

		if (this._oMetaData && this._oMetaData.property && this._oMetaData.property.property && this._oMetaData.property.property.type === "Edm.String") {

			if (!bDatePicker && !bMasked) {
				oProposal = this._oParent.getControlProposal();

				if (oProposal && oProposal.getControlType() === "ObjectIdentifier") {
					return true;
				}

				if (this._oParent.getProposedControl() === "ObjectIdentifier") {
					return true;
				}
			}
		}

		return false;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 *
	 * @public
	 */
	ODataControlSelector.prototype.destroy = function() {
		this._oParent = null;
		this._oMetaData = null;
		this._oTypes = null;
	};

	return ODataControlSelector;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/ODataControlSelector.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ObjectStatus') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfield.ObjectStatus'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ObjectStatus",[
	"jquery.sap.global", "sap/ui/comp/library", "sap/ui/core/Element"
], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new <code>SmartField/ObjectStatus</code>.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class Defines a possible object status control to be rendered. The smart field may ignore the proposal.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.ObjectStatus
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ObjectStatus = Element.extend("sap.ui.comp.smartfield.ObjectStatus", /** @lends sap.ui.comp.smartfield.ControlProposal.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Optional attribute, which can be set, if the control type has the value ObjectStatus.
				 */
				criticality: {
					type: "any",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Optional attribute, which can be set to control how the criticality is visualized.
				 */
				criticalityRepresentationType: {
					type: "sap.ui.comp.smartfield.CriticalityRepresentationType",
					group: "Misc",
					defaultValue: sap.ui.comp.smartfield.CriticalityRepresentationType.WithIcon
				}
			}
		}
	});

	return ObjectStatus;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/ObjectStatus.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SideEffectUtil') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfield.SideEffectUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SideEffectUtil",[	"jquery.sap.global", "sap/ui/comp/odata/SideEffects" ], function(jQuery, SideEffects) {
	"use strict";

	/**
	 * Creates a new instance.
	 *
	 * @param {sap.ui.core.Control} oParent the parent control
	 * @author SAP SE
	 * @version 1.50.6
	 * @private
	 * @since 1.31.0
	 * @class
	 * Analyzes OData Side-Effects annotation in the SmartField.
	 * @experimental
	 * @alias sap.ui.comp.odata.SideEffects
	 */
	var SideEffectUtil = function(oParent) {
		this._oParent = oParent;
		this._oSideEffects = new SideEffects();
	};

	/**
	 * Calculates the field group IDs according to the side effects annotation.
	 *
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @param {sap.ui.core.mvc.View} oView the current view
	 * @returns {array} the IDs of the field groups
	 * @public
	 */
	SideEffectUtil.prototype.getFieldGroupIDs = function(oMetaData, oView) {
		var oMeta, oComplex, sTypePath, mSideEffects;

		if (oMetaData.property && oMetaData.property.complex) {
			oComplex = oMetaData.property.parents[0];
			sTypePath = this._toTypePath(oMetaData.path, oComplex);
		}

		oMeta = {
			entitySet: oMetaData.entitySet,
			entityType: oMetaData.entityType,
			complexType: oComplex
		};

		mSideEffects = this._oSideEffects.getSideEffects(oMetaData.path, sTypePath, oMeta);
		return this._calcFieldGroups(mSideEffects, oMetaData, oView);
	};

	/**
	 * Calculates the field group definitions and returns the IDs of the field group.
	 *
	 * @param {map} mSideEffects the given side effects
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @param {sap.ui.core.mvc.View} oView the current view
	 * @returns {array} the field group IDs
	 * @private
	 */
	SideEffectUtil.prototype._calcFieldGroups = function(mSideEffects, oMetaData, oView) {
		var sContextPath, aSideEffects, i, len, aGroupIDs = [];

		aSideEffects = this._getSideEffects(mSideEffects, oMetaData, oView);
		len = aSideEffects.length;
		sContextPath = this._oParent.getBindingContext().getPath();

		for (i = 0; i < len; i++) {
			this._calcFieldGroups2(aSideEffects[i], aGroupIDs, oView, sContextPath);
		}

		return aGroupIDs.length > 0 ? aGroupIDs : null;
	};

	/**
	 * Calculates the field group definitions and returns the IDs of the field group for side effects
	 * that have been collected for entity set, entity type or complex type.
	 *
	 * @param {map} oSideEffects the given side effects
	 * @param {array} aGroupIDs all available field group IDs
	 * @param {sap.ui.core.mvc.View} oView the current view
	 * @param {string} sContextPath the given binding context path
	 * @private
	 */
	SideEffectUtil.prototype._calcFieldGroups2 = function(oSideEffects, aGroupIDs, oView, sContextPath) {
		var sUUID, sID, oID, that = this;

		oSideEffects.sideEffects.forEach(function(oItem) {
			oID = {
				name: oItem.name,
				originType: oItem.originType,
				originName: oSideEffects.origin.name,
				originNamespace: oSideEffects.origin.namespace,
				context: sContextPath
			};

			sID = JSON.stringify(oID);
			sID = sID.substring(1, sID.length - 2); //remove "{ ... }" because sID will be set to a property, where the JSON curly bracket { will be interpreted as binding...
			sUUID = oView.data(sID);

			if (!sUUID) {
				sUUID = that.createUUID();
				oView.data(sUUID, oID);
				oView.data(sID, sUUID);
			}

			aGroupIDs.push(sUUID);
		});
	};

	/**
	 * Returns side effects.
	 *
	 * @param {map} mSideEffects the given side effects
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @returns {array} the side effects
	 * @private
	 */
	SideEffectUtil.prototype._getSideEffects = function(mSideEffects, oMetaData) {
		var aResult = [];

		// check entity set
		var oResult = {};
		oResult.sideEffects = this._getSideEffectsFromEntity("entitySet", mSideEffects);

		if (oResult.sideEffects && oResult.sideEffects.length) {
			oResult.origin = oMetaData.entitySet;
			aResult.push(oResult);
		}

		// check entity type
		oResult = {};
		oResult.sideEffects = this._getSideEffectsFromEntity("entityType", mSideEffects);

		if (oResult.sideEffects && oResult.sideEffects.length) {
			oResult.origin = oMetaData.entityType;
			aResult.push(oResult);
		}

		// check complex type
		oResult = {};
		oResult.sideEffects = this._getSideEffectsFromEntity("complexType", mSideEffects);

		if (oResult.sideEffects && oResult.sideEffects.length) {
			oResult.origin = oMetaData.property.parents[0];
			aResult.push(oResult);
		}

		return aResult;
	};

	/**
	 * Returns the side effect in the map.
	 *
	 * @param {string} sName the name of the map
	 * @param {map} mSideEffects the given side effects
	 * @returns {array} the side effects in the map
	 * @private
	 */
	SideEffectUtil.prototype._getSideEffectsFromEntity = function(sName, mSideEffects) {
		var n,
			aSideEffects = [];

		if (mSideEffects[sName]) {
			for (n in mSideEffects[sName]) {
				aSideEffects.push({
					name: n,
					originType: sName,
					sideEffect: mSideEffects[sName][n]
				});
			}
		}

		return aSideEffects;
	};

	/**
	 * Converts a given path to the type path.
	 *
	 * @param {string} sPath the given path
	 * @param {object} oComplexType the given complex type
	 * @returns {string} the type path.
	 * @private
	 */
	SideEffectUtil.prototype._toTypePath = function(sPath, oComplexType) {
		var aProp = sPath.split("/");
		return sPath.replace(aProp[0], oComplexType.name);
	};

	/**
	 * Creates a new UUID.
	 *
	 * @returns {string} the new UUID.
	 * @public
	 */
	SideEffectUtil.prototype.createUUID = function() {
		var d = new Date().getTime();
		var uuid = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".replace(/[x]/g, function(c) {
			var r = (d + Math.random() * 16) % 16 | 0;
			d = Math.floor(d / 16);
			return (c === "x" ? r : (r & 0x7 | 0x8)).toString(16);
		});
		return uuid;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 *
	 * @public
	 */
	SideEffectUtil.prototype.destroy = function() {
		if (this._oSideEffects) {
			this._oSideEffects.destroy();
		}

		this._oSideEffects = null;
	};

	return SideEffectUtil;

}, true);

}; // end of sap/ui/comp/smartfield/SideEffectUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SmartField.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartfield.SmartField control.
jQuery.sap.declare('sap.ui.comp.smartfield.SmartField.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SmartField.designtime",['sap/ui/fl/Utils'], function(FlexUtils) {
	"use strict";
	return {
		annotations: {
			/**
			 * Based on the data type the <code>SmartField</code> determines the rendering of the inner control. Additionally the
			 * <code>FieldControl</code> is used.
			 * <code>FieldControl</code> is an annotation that contains a collection of <code>EnumMembers</code> that can dynamically set the state of the control.
			 * Controls used for the <code>SmartField</code> control during runtime are:
			 * <ul>
			 *    <li>sap.m.Input of type Edm.String without value help. <br>
			 *       Used if control is editable and the EntityType is updatable.
			 *    </li>
			 *    <li>sap.m.Input of type Edm.String with value help and suggestion list. <br>
			 *       Used if control is editable, the <code>EntityType</code> is updatable, and a ValueHelp annotations exists.
			 *    </li>
			 * </ul>
			 */
			dataType: {
				namespace: "Edm",
				types: [
					"String", "Boolean", "Byte", "DateTimeOffset", "Date", "Time", "Decimal", "Double", "Single", "Int16", "Int32", "Int64", "Guid"
				]
			},

			/**
			 * Defines the rendering of the field from a dynamic value that can be provided as a path by referencing another
			 * <code>Property</code> within the same <code>EntityType</code>. Whenever the value of the referenced property changes the control adapts.
			 * If value is
			 *
			 * <ul>
			 *  <li> 0, then the control is hidden
			 *  <li> 1, then the control is read-only
			 *  <li> 3, then the control is optional (default)
			 *  <li> 7, then the control is mandatory
			 * </ul>
			 *
			 * <i>XML Example of OData V4 with dynamic field control Customer and CompanyCode Properties</i>
			 *
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; Path=&quot;FieldControlValue&quot;/&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; Path=&quot;FieldControlValue&quot;/&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 *
			 *
			 *
			 * For OData v2 the <code>sap:field-control</code> annotation on the <code>Property</code> can be used to assign the field control.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:field-control=&quot;FieldControlValue&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:field-control=&quot;FieldControlValue&quot;/&gt;
			 * </pre>
			 */
			fieldControl: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "FieldControl",
				target: [
					"Property", "Record"
				],
				defaultValue: false,
				appliesTo: [
					"fieldItem/#"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Defines whether the control is visible. A fixed value can be provided as <code>EnumMember</code> <code>FieldControlType/Hidden</code> of the <code>FieldControl</code> annotation.
			 * The property <code>visible</code> of the SmartField control can be used to handle the
			 * visibility of the control.
			 *
			 * <i>XML Example of OData V4 with static Hidden Customer and CompanyCode Properties</i>
			 *
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/Hidden&quot;/&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/Hidden&quot;/&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 *
			 *
			 * For OData v2 the <code>sap:visible</code> annotation on the <code>Property</code> can be used to assign visibility.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:visible=&quot;false&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:visible=&quot;false&quot;/&gt;
			 * </pre>
			 */
			fieldVisible: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "FieldControlType",
				target: [
					"Property", "Record"
				],
				whiteList: {
					values: [
						"Hidden"
					]
				},
				defaultValue: false,
				appliesTo: [
					"fieldItem/#/visible"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Defines whether the control is read-only. A fixed value can be provided as <code>EnumMember</code> <code>FieldControlType/ReadOnly</code> of the <code>FieldControl</code> annotation.
			 * The <code>editable</code> property of the SmartField control renders the field as
			 * editable input. A SmartField is only editable if the corresponding <code>EntityType</code> is at least annotated as
			 * <code>com.sap.vocabularies.Common.v1.Updatable</code>.
			 *
			 * <i>XML Example of OData V4 with static Read-only Customer and CompanyCode Properties</i>
			 *
             * <pre>
			 *    &lt;Property Name=&quot;Customer&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly&quot;/&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly&quot;/&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 *
			 *
			 * For OData v2 the <code>sap:updatable</code> annotation on the <code>Property</code> can be used to render fields in read-only mode.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:updatable=&quot;false&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:updatable=&quot;false&quot;/&gt;
			 * </pre>
			 */
			fieldReadOnly: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "FieldControlType",
				target: [
					"Property", "Record"
				],
				whiteList: {
					 values: [
						"ReadOnly"
					]
				},
				defaultValue: false,
				appliesTo: [
					"fieldItem/#/editable"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Defines whether the control is mandatory. A fixed value can be provided as <code>EnumMember</code> <code>FieldControlType/Mandatory</code> of the <code>FieldControl</code> annotation.
			 * The <code>mandatory</code> property of the SmartField control renders the field as
			 * mandatory input. A SmartField can only be mandatory if the corresponding <code>EntityType</code> is at least annotated as
			 * <code>com.sap.vocabularies.Common.v1.Updatable</code>.
			 *
			 * <i>XML Example of OData V4 with static Mandatory Customer and CompanyCode Properties</i>
			 *
			 *
             * <pre>
			 *    &lt;Property Name=&quot;Customer&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/Mandatory&quot;/&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/Mandatory&quot;/&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>Nullable</code> property on the <code>Property</code> can be used to specify whether the field is
			 * mandatory.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ...Nullable=&quot;false&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... Nullable=&quot;false&quot;/&gt;
			 * </pre>
			 */
			fieldMandatory: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "FieldControlType",
				target: [
					"Property", "Record"
				],
				whiteList: {
					values: [
						"Mandatory"
					]
				},
				defaultValue: false,
				appliesTo: [
					"fieldItem/#/editable"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Determines that a control must not display the actual value in a field with sensitive data, but replace it with a placeholder, for
			 * example, *. Use this annotation for sensitive data. <i>XML Example of OData V4 with Masked Password property</i>
			 *
			 * <pre>
			 *   &lt;Property Name=&quot;Password&quot; /&gt;
			 *   &lt;Annotations Target=&quot;Password&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *     &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.Masked&quot; /&gt;
			 *   &lt;/Annotations&gt;
			 * </pre>
			 */
			fieldMasked: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "Masked",
				target: [
					"Property"
				],
				defaultValue: false,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * A short, human-readable text suitable for labels on user interfaces. Renders the value associated with the label annotation of a
			 * <code>Property</code>, which can be <code>null</code>. <i>XML Example of OData V4 with CustomerName as Label for Customer</i>
			 *
			 * <pre>
			 *   &lt;Property Name=&quot;Customer&quot;&gt;
			 *     &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.Label&quot; Path=&quot;CustomerName&quot; /&gt;
			 *   &lt;/Property&gt;
			 *   &lt;Property Name=&quot;CustomerName&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:label</code> annotation on the <code>Property</code> can be used to assign a label.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:label=&quot;Customer Name&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:label=&quot;Company Code&quot;/&gt;
			 * </pre>
			 */
			fieldLabel: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "Label",
				target: [
					"Property", "PropertyPath"
				],
				defaultValue: null,
				appliesTo: [
					"fieldItem/#/label"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * A descriptive text for values of the annotated property. <b>Note:</b> The value must be a dynamic expression when used as metadata
			 * annotation. <i>XML Example of OData V4 Text on CustomerName Property</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.Text&quot; Path=&quot;CustomerName&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CustomerName&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:text</code> annotation on the <code>Property</code> can be used to assign text.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:text=&quot;CustomerName&quot;/&gt;
			 *    &lt;Property Name=&quot;CustomerName&quot; type=&quot;Edm.String&quot;/&gt;
			 * </pre>
			 */
			fieldText: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "Text",
				target: [
					"Property"
				],
				defaultValue: null,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Describes the arrangement of a code value and its text. The value can be a fixed or dynamic value of an enumeration by referencing
			 * another <code>Property</code> within the same <code>EntityType</code>. The enumeration members can have the following possible
			 * values:
			 * <ul>
			 * <li><code>com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst</code><br>
			 * The underlying control is represented with the specified description followed by its ID. </li>
			 * <li><code>com.sap.vocabularies.UI.v1.TextArrangementType/TextLast</code><br>
			 * The underlying control is represented with the specified ID followed by its description. </li>
			 * </ul>
			 * <i>XML Example of OData V4 with TextArrangement on ProductType</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;ProductType&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.TextArrangement&quot; EnumMember=&quot;UI.TextArrangementType/TextFirst&quot;/&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			textArrangement: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "TextArrangement",
				target: [
					"EntityType"
				],
				defaultValue: null,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Appearance", "Behavior"
				],
				since: "1.32.1"
			},

			/**
			 * Defines a currency code for an amount according to the ISO 4217 standard. <code>ISOCurrency</code> annotation can point to a
			 * <code>Property</code>, which can also be <code>null</code>. <i>XML Example of OData V4 with Price and CurrencyCode as ISOCurrency</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Price&quot;&gt;
			 *       &lt;Annotation Term=&quot;Org.OData.Measures.V1.ISOCurrency&quot; Path=&quot;CurrencyCode&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CurrencyCode&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:semantics="currency-code"</code> along with <code>sap:unit</code> annotations on the
			 * <code>Property</code> can be used to assign a currency code to the field.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Price&quot; ... sap:unit=&quot;CurrencyCode&quot;/&gt;
			 *    &lt;Property Name=&quot;CurrencyCode&quot; ... sap:semantics=&quot;currency-code&quot;/&gt;
			 * </pre>
			 */
			fieldCurrencyCode: {
				namespace: "Org.OData.Measures.V1",
				annotation: "ISOCurrency",
				target: [
					"Property"
				],
				defaultValue: null,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * The unit of measure for this measured quantity, for example, cm for centimeters. Renders the value associated with the unit annotation
			 * of a <code>Property</code>, which can be <code>null</code>. <i>XML Example of OData V4 with OrderedQuantity and OrderedUnit as
			 * Unit</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;OrderedQuantity&quot;&gt;
			 *       &lt;Annotation Term=&quot;Org.OData.Measures.V1.Unit&quot; Path=&quot;OrderedUnit&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;OrderedUnit&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:semantics="unit-of-measure"</code> along with <code>sap:unit</code> annotations on the
			 * <code>Property</code> can be used to assign a unit of measure to the field.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;OrderedQuantity&quot; ... sap:unit=&quot;OrderedUnit&quot;/&gt;
			 *    &lt;Property Name=&quot;OrderedUnit&quot; ... sap:semantics=&quot;unit-of-measure&quot;/&gt;
			 * </pre>
			 */
			fieldUnitOfMeasure: {
				namespace: "Org.OData.Measures.V1",
				annotation: "Unit",
				target: [
					"Property"
				],
				defaultValue: null,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Defines the number of digits that are to be displayed after the decimal point. This annotation can be applied to a
			 * <code>Property</code>. <i>XML Example of OData V4 with Scaled Price and Weight Properties</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Price&quot;&gt;
			 *       &lt;Annotation Term=&quot;Org.OData.Measures.V1.Scale&quot; Path=&quot;PriceScale&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;Weight&quot;&gt;
			 *       &lt;Annotation Term=&quot;Org.OData.Measures.V1.Scale&quot; Path=&quot;WeightScale&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;PriceScale&quot; type=&quot;Edm.Byte&quot; /&gt;
			 *    &lt;Property Name=&quot;WeightScale&quot; type=&quot;Edm.Byte&quot; /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:precision</code> annotation on the <code>Property</code> can be used to scale the number of digits to be
			 * displayed after the decimal point.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Price&quot; ... sap:precision=&quot;2&quot;/&gt;
			 *    &lt;Property Name=&quot;Weight&quot; ... sap:precision=&quot;3&quot;/&gt;
			 * </pre>
			 */
			fieldScale: {
				namespace: "Org.OData.Measures.V1",
				annotation: "Scale",
				target: [
					"Property"
				],
				defaultValue: null,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * A short, human-readable text suitable for tool tips in user interfaces. <i>XML Example of OData V4 with Tooltip on CompanyCode Property</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;CompanyCode&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.QuickInfo&quot; Path=&quot;CompanyCodeQuickInfo&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CompanyQuickInfo&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:quickinfo</code> annotation on the <code>Property</code> can be used to assign information relevant for
			 * tool tips of the field.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:quickinfo=&quot;Company Code quickinfo&quot;/&gt;
			 * </pre>
			 */
			fieldQuickInfo: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "QuickInfo",
				target: [
					"Property"
				],
				defaultValue: null,
				appliesTo: [
					"fieldItem/#/tooltip"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Properties annotated with this annotation are rendered as multi-line text (for example, text area). <i>XML Example of OData V4 with
			 * Multi-line Text Description Property</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Description&quot; /&gt;
			 *    &lt;Annotations Target=&quot;Description&quot;&gt;
			 *       &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.MultiLineText&quot; /&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			fieldMultiLineText: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "MultiLineText",
				target: [
					"Property", "PropertyPath"
				],
				defaultValue: true,
				appliesTo: [
					"fieldItem/#/control"
				],
				group: [
					"Appearance", "Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Defines whether a string value is capitalized. <i>XML Example of OData V4 with Capitalized Customer and CompanyCode Properties</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.IsUpperCase&quot;&gt;
			 *        &lt;Collection&gt;
			 *           &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *           &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *        &lt;/Collection&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:display-format="UpperCase"</code> annotation on the <code>Property</code> can be used to render the text
			 * in upper case format.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:display-format=&quot;UpperCase&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:display-format=&quot;UpperCase&quot;/&gt;
			 * </pre>
			 */
			fieldUpperCase: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "IsUpperCase",
				target: [
					"Property", "Parameter"
				],
				defaultValue: true,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Indicates whether the annotated <code>Property</code> contains only digit sequences
			 * (non-negative numeric values).
			 *
			 * Other input leads to validation errors and the value state message popup is shown.
			 * In addition, whenever the control's value property is changed on the user interface side, and the change
			 * has to be propagated back into the data model, then the value is either filled with leading zeroes
			 * (if the <code>maxLength</code> attribute is given) or the leading zeroes are removed (if no
			 * <code>maxLength</code> attribute is given).
			 *
			 * Intended for <code>Edm.String</code> properties that are stored as ABAP <code>NUMC</code> (numeric text)
			 * data type.
			 *
			 * <i>XML Example of the OData V4 Annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Price&quot; MaxLength=&quot;20&quot; Type=&quot;Edm.String&quot;/&gt;
			 *    &lt;Annotations Target=&quot;Price&quot;&gt;
			 *        &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.IsDigitSequence&quot; Bool=&quot;true&quot;/&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			fieldDigitSequence: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "IsDigitSequence",
				target: [
					"Property"
				],
				defaultValue: true,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.46"
			},

			/**
			 * Indicates whether a <code>Property</code> contains an e-mail address.
			 *
			 * <i>XML Example of the OData V4 E-mail Address Annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Email&quot; Type=&quot;Edm.String&quot;/&gt;
			 *    &lt;Annotations Target=&quot;Email&quot;&gt;
			 *        &lt;Annotation Term=&quot;com.sap.vocabularies.Communication.v1.IsEmailAddress&quot; Bool=&quot;true&quot;/&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			fieldEmailAddress: {
				namespace: "com.sap.vocabularies.Communication.v1",
				annotation: "IsEmailAddress",
				target: [
					"Property"
				],
				defaultValue: true,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.46"
			},

			/**
			 * Indicates whether a <code>Property</code> contains a phone number.
			 *
			 * <i>XML Example of the OData V4 Phone Number Annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Phone&quot; Type=&quot;Edm.String&quot;/&gt;
			 *    &lt;Annotations Target=&quot;Phone&quot;&gt;
			 *        &lt;Annotation Term=&quot;com.sap.vocabularies.Communication.v1.IsPhoneNumber&quot; Bool=&quot;true&quot;/&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			fieldPhoneNumber: {
				namespace: "com.sap.vocabularies.Communication.v1",
				annotation: "IsPhoneNumber",
				target: [
					"Property"
				],
				defaultValue: true,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.46"
			},

			/**
			 * Indicates whether a <code>Property</code> contains a URL.
			 *
			 * <i>XML Example of the OData V4 URL Annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;URL&quot; Type=&quot;Edm.String&quot;/&gt;
			 *    &lt;Annotations Target=&quot;URL&quot;&gt;
			 *        &lt;Annotation Term=&quot;Org.OData.Core.V1.IsURL&quot; Bool=&quot;true&quot;/&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			fieldUrl: {
				namespace: "Org.OData.Core.V1",
				annotation: "IsURL",
				target: [
					"Property"
				],
				defaultValue: true,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.46"
			},

			/**
			 * Defines whether an <code>EntitySet</code> can be created. <i>XML Example of OData V4 with Insertable ProductCollection EntitySet</i>
			 *
			 * <pre>
			 *   &lt;EntitySet Name=&quot;ProductCollection&quot;&gt;
			 *     &lt;Annotation Term=&quot;Org.OData.Capabilities.V1.InsertRestrictions&quot;&gt;
			 *       &lt;Record&gt;
			 *         &lt;PropertyValue Property=&quot;Insertable&quot; Bool=&quot;true&quot; /&gt;
			 *       &lt;/Record&gt;
			 *     &lt;/Annotation&gt;
			 *   &lt;/EntitySet&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:creatable</code> annotation on the <code>Property</code> can be used to specify that the field is
			 * creatable.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:creatable=&quot;true&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:creatable=&quot;true&quot;/&gt;
			 * </pre>
			 */
			fieldCreatable: {
				namespace: "Org.OData.Capabilities.V1",
				annotation: "InsertRestrictions/Insertable",
				target: [
					"EntitySet"
				],
				defaultValue: false,
				appliesTo: [
					"fieldItem/#/editable"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Defines whether a <code>Property</code> can be created. A value for this <code>Property</code> is generated on both insert and
			 * update actions. <i>XML Example of OData V4 with Computed Customer and CompanyCode Properties</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;Org.OData.Core.V1.Computed&quot;&gt;
			 *        &lt;Collection&gt;
			 *           &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *           &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *        &lt;/Collection&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:creatable</code> and <code>sap:updatable</code> annotation on the <code>Property</code> can be used to
			 * specify whether a value has to be created on insert and update actions.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:creatable=&quot;true&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:creatable=&quot;true&quot;/&gt;
			 * </pre>
			 */
			fieldComputed: {
				namespace: "Org.OData.Core.V1",
				annotation: "Computed",
				target: [
					"Property"
				],
				defaultValue: true,
				appliesTo: [
					"fieldItem/#/editable"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Defines whether an <code>EntitySet</code> can be updated. <i>XML Example of OData V4 with Updatable ProductCollection EntitySet</i>
			 *
			 * <pre>
			 *   &lt;EntitySet Name=&quot;ProductCollection&quot;&gt;
			 *     &lt;Annotation Term=&quot;Org.OData.Capabilities.V1.UpdateRestrictions&quot;&gt;
			 *       &lt;Record&gt;
			 *         PropertyValue Property=&quot;Updatable&quot; Bool=&quot;true&quot; /&gt;
			 *       &lt;/Record&gt;
			 *     &lt;/Annotation&gt;
			 *   &lt;/EntitySet&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:updatable</code> annotation on the <code>Property</code> can be used to specify whether a field is
			 * updatable.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:updatable=&quot;true&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:updatable=&quot;true&quot;/&gt;
			 * </pre>
			 */
			fieldUpdatableEntitySet: {
				namespace: "Org.OData.Capabilities.V1",
				annotation: "UpdateRestrictions/Updatable",
				target: [
					"EntitySet"
				],
				defaultValue: false,
				appliesTo: [
					"fieldItem/#editable"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * A value for this non-key property can be provided on <code>insert</code> and cannot even be changed on update actions. <i>XML Example
			 * of OData V4 with Immutable Customer and CompanyCode properties</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;Org.OData.Core.V1.Immutable&quot;&gt;
			 *        &lt;Collection&gt;
			 *           &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *           &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *        &lt;/Collection&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:updatable</code> and <code>sap:creatable</code> annotation on the <code>Property</code> can be used to
			 * avoid changes that can be done on update actions.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:creatable=&quot;false&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:creatable=&quot;false&quot;/&gt;
			 * </pre>
			 */
			fieldImmutable: {
				namespace: "Org.OData.Core.V1",
				annotation: "Immutable",
				target: [
					"Property"
				],
				defaultValue: true,
				appliesTo: [
					"fieldItem/#/editable"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Changes to the source properties may have side-effects on the target properties or entities. If neither TargetProperties nor
			 * TargetEntities are specified, a change to the source property values may have unforeseeable side-effects. An empty
			 * NavigationPropertyPath may be used in TargetEntities to specify that any property of the annotated entity type may be affected. Actions
			 * are a special case: here the change trigger is the action invocation, so SourceProperties and SourceEntities have no meaning, only
			 * TargetProperties and TargetEntities are relevant. They are addressed via the binding parameter of the action. <code>SideEffects</code>
			 * can be associated with the given entity, which can be a complex type, entity type or entity set. In addition to this,
			 * <code>SideEffects</code> can also be applied to a <code>PropertyPath</code> or a <code>NavigationPropertyPath</code> of the given
			 * entity. <i>XML Example of OData V4 with Side Effect on CurrencyCode Property</i>
			 *
			 * <pre>
			 *   &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.SideEffects&quot; Qualifier=&quot;ExampleQualifierName&quot;&gt;
			 *     &lt;Record&gt;
			 *       &lt;PropertyValue Property=&quot;SourceProperties&quot;&gt;
			 *         &lt;Collection&gt;
			 *           &lt;PropertyPath&gt;CurrencyCode&lt;/PropertyPath&gt;
			 *         &lt;/Collection&gt;
			 *       &lt;/PropertyValue&gt;
			 *       &lt;PropertyValue Property=&quot;TargetProperties&quot;&gt;
			 *         &lt;Collection&gt;
			 *           &lt;PropertyPath&gt;CurrencyCode&lt;/PropertyPath&gt;
			 *         &lt;/Collection&gt;
			 *       &lt;/PropertyValue&gt;
			 *       &lt;PropertyValue Property=&quot;EffectTypes&quot; EnumMember=&quot;ValidationMessage&quot; /&gt;
			 *     &lt;/Record&gt;
			 *   &lt;/Annotation&gt;
			 * </pre>
			 */
			fieldSideEffects: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "SideEffects",
				target: [
					"EntitySet", "EntityType", "ComplexType"
				],
				defaultValue: null,
				appliesTo: [
					"fieldItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.32.1"
			},

			/**
			 * Specifies how to get a list of acceptable values for a property or parameter. Provides the value help dialog and type-ahead function.
			 * <i>XML Example of OData V4 Value List on Category Property</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.ValueList&quot;&gt;
			 *      &lt;Record&gt;
			 *        &lt;PropertyValue Property=&quot;Label&quot; String=&quot;Category&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;CollectionPath&quot; String=&quot;Category&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;SearchSupported&quot; Bool=&quot;true&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;Parameters&quot;&gt;
			 *          &lt;Collection&gt;
			 *            &lt;Record Type=&quot;com.sap.vocabularies.Common.v1.ValueListParameterOut&quot;&gt;
			 *              &lt;PropertyValue Property=&quot;LocalDataProperty&quot; PropertyPath=&quot;Category&quot; /&gt;
			 *              &lt;PropertyValue Property=&quot;ValueListProperty&quot; String=&quot;Description&quot; /&gt;
			 *            &lt;/Record&gt;
			 *            &lt;Record Type=&quot;com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly&quot;&gt;
			 *              &lt;PropertyValue Property=&quot;ValueListProperty&quot; String=&quot;CategoryName&quot; /&gt;
			 *            &lt;/Record&gt;
			 *          &lt;/Collection&gt;
			 *        &lt;/PropertyValue&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 */
			valueList: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "ValueList",
				target: [
					"Property", "Parameter"
				],
				defaultValue: null,
				appliesTo: [
					"field/#/fieldHelp"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * If set to <code>true</code>, there's only one value list mapping, and its value list
			 * consists of a small number of fixed values.
			 * The value list is rendered as a dropdown list containing all possible values.
			 * <i>XML Example of OData V4 Value List on Category Property</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.ValueListWithFixedValues&quot; Bool=&quot;true&quot;/&gt;
			 * </pre>
			 */
			valueListWithFixedValues: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "ValueListWithFixedValues",
				target: [
					"Property", "Parameter"
				],
				defaultValue: null,
				appliesTo: [
					"field/#/fieldHelp"
				],
				group: [
					"Behavior"
				],
				since: "1.48.1"
			}
		},

		properties: {
			value: {
				ignore: true
			},
			enabled: {
				ignore: true
			},
			entitySet: {
				ignore: true
			// can be used only in a static way
			},
			editable: {
				ignore: true
			},
			contextEditable: {
				ignore: true
			},
			width: {
				ignore: true
			},
			textAlign: {
				ignore: true
			},
			placeholder: {
				ignore: true
			},
			name: {
				ignore: true
			},
			valueState: {
				ignore: true
			},
			valueStateText: {
				ignore: true
			},
			showValueStateMessage: {
				ignore: true
			},
			jsontype: {
				ignore: true
			},
			mandatory: {
				ignore: true
			},
			maxLength: {
				ignore: true
			},
			showSuggestion: {
				ignore: true
			},
			showValueHelp: {
				ignore: false
			},
			showLabel: {
				ignore: true
			},
			textLabel: {
				ignore: true
			},
			tooltipLabel: {
				ignore: true
			},
			uomVisible: {
				ignore: true
			},
			uomEditable: {
				ignore: true
			},
			uomEnabled: {
				ignore: true
			},
			url: {
				ignore: true
			},
			uomEditState: {
				ignore: true
			},
			controlContext: {
				ignore: true
			// can be used only in a static way
			},
			proposedControl: {
				ignore: true
			},
			wrapping: {
				ignore: true
			},
			clientSideMandatoryCheck: {
				ignore: true
			},
			fetchValueListReadOnly: {
				ignore: true
			},
			expandNavigationProperties: {
				ignore: true
			}
		},
		aggregations: {
			_content: {
				ignore: function(oSmartField){
					var oInternalControl = oSmartField.getAggregation("_content");
					if (oInternalControl) {
						return oInternalControl.getMetadata().getName() !== "sap.ui.comp.navpopover.SmartLink";
					} else {
						return true;
					}
				}
			}
		},

		customData: {
			/**
			 * Overrides the default settings for formatting dates inside the control.
			 *
			 * For more information see {@link sap.ui.model.type.Date}
			 */
			dateFormatSettings: {
				type: "string",
				defaultValue: "\{'UTC':'true'\}",
				group: ["Appearance"],
				since: "1.28.1"
			},
			/**
			 * Used to select from the different options to define display behavior of a SmartField control.
			 *
			 * For more information see {@link sap.ui.comp.smartfield.DisplayBehaviour}
			 */
			displayBehaviour: {
				type: "sap.ui.comp.smartfield.DisplayBehaviour",
				defaultValue: "auto",
				since: "1.28.1"
			},
			/**
			 * If set to <code>true</true> then for currency or measure field the unit is not shown.
			 */
			suppressUnit: {
				type: "boolean",
				defaultValue: false,
				group: ["Appearance"],
				since: "1.28.1"
			},
			/**
			 * JSON object to configure how longer text are displayed in a text area.
			 */
			multiLineSettings: {
				type: "object",
				defaultValue: "{cols: 20, rows: 2}",
				group: ["Appearance"],
				since: "1.28.1"
			}
		}
	};
}, /* bExport= */false);

}; // end of sap/ui/comp/smartfield/SmartField.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.flexibility.SmartField.flexibility') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfield.flexibility.SmartField.flexibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.ChangeHandlerMediator'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/flexibility/SmartField.flexibility",[
	"sap/ui/fl/changeHandler/ChangeHandlerMediator"
], function (ChangeHandlerMediator) {
	"use strict";

	/**
	 * Function returning a set of SmartField + SmartLabel ready to be added
	 * @param  {sap.ui.fl.changeHandler.BaseTreeModifier} oModifier    Tree Modifier
	 * @param  {object} mPropertyBag Required data for the field + label creation
	 *                               appComponent
	 *                               view
	 *                               fieldSelector
	 *                               bindingPath
	 * @return {object}              Object containing the created control + label
	 */
	var fnCreateField = function(oModifier, mPropertyBag){
		return oModifier.createControl("sap.ui.comp.smartfield.SmartField",
			mPropertyBag.appComponent,
			mPropertyBag.view,
			mPropertyBag.fieldSelector,
			{value : "{" + mPropertyBag.bindingPath + "}"}
		);
	};

	var fnCreateFieldWithLabel = function(oModifier, mPropertyBag){
		var oSmartField = fnCreateField.apply(null, arguments);
		var sNewFieldId = oModifier.getId(oSmartField);
		var oSmartFieldLabel = oModifier.createControl("sap.ui.comp.smartfield.SmartLabel",
			mPropertyBag.appComponent,
			mPropertyBag.view,
			sNewFieldId + "-label",
			{labelFor: sNewFieldId}
		);
		return {
			"label" : oSmartFieldLabel,
			"control" : oSmartField
		};
	};


	// Register the required information to enable the "addODataProperty" action using SmartField
	ChangeHandlerMediator.addChangeHandlerSettings({
		"scenario" : "addODataFieldWithLabel",
		"oDataServiceVersion" : "2.0" }, {
		"createFunction" : fnCreateFieldWithLabel
	});
	ChangeHandlerMediator.addChangeHandlerSettings({
		"scenario" : "addODataFieldWithLabel",
		"oDataServiceVersion" : "1.0" }, {
		"createFunction" : fnCreateFieldWithLabel
	});
	ChangeHandlerMediator.addChangeHandlerSettings({
		"scenario" : "addODataField",
		"oDataServiceVersion" : "2.0" }, {
		"createFunction" : fnCreateField
	});
	ChangeHandlerMediator.addChangeHandlerSettings({
		"scenario" : "addODataField",
		"oDataServiceVersion" : "1.0" }, {
		"createFunction" : fnCreateField
	});

	return {};
}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/flexibility/SmartField.flexibility.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.AbapBool') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.AbapBool'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FormatException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.SimpleType'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/AbapBool",["jquery.sap.global", "sap/ui/model/FormatException", "sap/ui/model/ParseException", "sap/ui/model/SimpleType" ], function(jQuery, FormatException, ParseException, SimpleType) {
	"use strict";

	/**
	 * Constructor for an ABAP Boolean type.
	 *
	 * @class
	 * ABAP Boolean data type.
	 * @author SAP SE
	 * @version 1.50.6
	 * @private
	 * @since 1.28.0
	 * @extends sap.ui.model.type.SimpleType
	 * @alias sap.ui.comp.smartfield.type.AbapBool
	 */
	var AbapBool = SimpleType.extend("sap.ui.comp.smartfield.type.AbapBool", {
		constructor: function() {
			SimpleType.apply(this, arguments);
			this.sName = "sap.ui.comp.smartfield.type.AbapBool";
		}
	});

	/**
	 * Formats the given boolean value to the given target type.
	 *
	 * @param {boolean} bValue the value to be formatted
	 * @param {string} sTargetType the target type; may be "any" or "boolean".
	 * @returns {boolean} the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to
	 *          <code>null</code>
	 * @throws {sap.ui.model.FormatException} if <code>sTargetType</code> is unsupported.
	 * @public
	 */
	AbapBool.prototype.formatValue = function(bValue, sTargetType) {
		if (bValue === undefined || bValue === null) {
			return null;
		}

		switch (sTargetType) {
			case "boolean":
			case "any":
				return bValue === "X";
			default:
				throw new FormatException("Don't know how to format Boolean to " + sTargetType);
		}
	};

	/**
	 * Parses the given value from the given type to a boolean.
	 *
	 * @param {boolean} oValue the value to be parsed.
	 * @param {string} sSourceType the source type, may be "boolean".
	 * @returns {boolean} the parsed value.
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string is neither "X" nor "".
	 * @public
	 */
	AbapBool.prototype.parseValue = function(oValue, sSourceType) {
		switch (sSourceType) {
			case "boolean":
				return (oValue === true) ? "X" : "";
			default:
				throw new ParseException("Don't know how to parse Boolean from " + sSourceType);
		}
	};

	/**
	 * Validates whether the given value in model representation is valid and meets the given constraints.
	 *
	 * @param {boolean} sValue the value to be validated.
	 * @throws {sap.ui.model.ValidateException} if the value is not valid
	 * @public
	 */
	AbapBool.prototype.validateValue = function(sValue) {
		if (sValue !== null && sValue !== undefined) {
			if (sValue !== "X" && sValue !== "") {
				throw new ParseException("Invalid Boolean " + sValue);
			}
		}
	};

	return AbapBool;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/type/AbapBool.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.DateTime') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Date Time data type that supports field-control.
 *
 * @name sap.ui.comp.smartfield.type.DateTime
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.DateTime
 * @returns {sap.ui.comp.smartfield.type.DateTime} the date time implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.DateTime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.DateTime'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/DateTime",["sap/ui/model/odata/type/DateTime" ], function(DateTimeBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.DateTime</code>.
	 *
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var DateTime = DateTimeBase.extend("sap.ui.comp.smartfield.type.DateTime", {
		constructor: function(oFormatOptions, oConstraints) {
			DateTimeBase.apply(this, arguments);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>Date</code>.
	 *
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {Date} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	DateTime.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = DateTimeBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};

	/**
	 * Returns the type's name.
	 *
	 * @returns {string} the type's name
	 * @public
	 */
	DateTime.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.DateTime";
	};

	return DateTime;
});

}; // end of sap/ui/comp/smartfield/type/DateTime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.DateTimeOffset') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Date Time Offset data type that supports field-control.
 *
 * @name sap.ui.comp.smartfield.type.DateTimeOffset
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.DateTimeOffset
 * @returns {sap.ui.comp.smartfield.type.DateTimeOffset} the date time implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.DateTimeOffset'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.DateTimeOffset'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/DateTimeOffset",["sap/ui/model/odata/type/DateTimeOffset" ], function(DateTimeBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.DateTimeOffset</code>.
	 *
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var DateTimeOffset = DateTimeBase.extend("sap.ui.comp.smartfield.type.DateTimeOffset", {
		constructor: function(oFormatOptions, oConstraints) {
			DateTimeBase.apply(this, arguments);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>Date</code>.
	 *
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {Date} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	DateTimeOffset.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = DateTimeBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};

	/**
	 * Returns the type's name.
	 *
	 * @returns {string} the type's name
	 * @public
	 */
	DateTimeOffset.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.DateTimeOffset";
	};

	return DateTimeOffset;
});

}; // end of sap/ui/comp/smartfield/type/DateTimeOffset.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Decimal') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Decimal data type that supports field-control.
 *
 * @name sap.ui.comp.smartfield.type.Decimal
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.Decimal
 * @returns {sap.ui.comp.smartfield.type.Decimal} the decimal implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Decimal'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Decimal'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Decimal",["sap/ui/model/odata/type/Decimal" ], function(DecimalBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Decimal</code>.
	 *
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var DecimalType = DecimalBase.extend("sap.ui.comp.smartfield.type.Decimal", {
		constructor: function(oFormatOptions, oConstraints) {
			DecimalBase.apply(this, arguments);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>decimal</code>.
	 *
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {decimal} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	DecimalType.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = DecimalBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};

	/**
	 * Returns the type's name.
	 *
	 * @returns {string} the type's name
	 * @public
	 */
	DecimalType.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Decimal";
	};

	return DecimalType;
});

}; // end of sap/ui/comp/smartfield/type/Decimal.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Int16') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * 16 byte integer data type that supports field-control.
 *
 * @name sap.ui.comp.smartfield.type.Int16
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.Int16
 * @returns {sap.ui.comp.smartfield.type.Int16} the integer implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Int16'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Int16'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Int16",["sap/ui/model/odata/type/Int16" ], function(IntBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Int16</code>.
	 *
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var Int16Type = IntBase.extend("sap.ui.comp.smartfield.type.Int16", {
		constructor: function(oFormatOptions, oConstraints) {
			IntBase.apply(this, arguments);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 *
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {int} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	Int16Type.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = IntBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};

	/**
	 * Returns the type's name.
	 *
	 * @returns {string} the type's name
	 * @public
	 */
	Int16Type.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Int16";
	};

	return Int16Type;
});

}; // end of sap/ui/comp/smartfield/type/Int16.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Int32') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * 32 byte integer data type that supports field-control.
 *
 * @name sap.ui.comp.smartfield.type.Int32
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.Int32
 * @returns {sap.ui.comp.smartfield.type.Int32} the integer implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Int32'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Int32'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Int32",["sap/ui/model/odata/type/Int32" ], function(IntBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Int32</code>.
	 *
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var Int32Type = IntBase.extend("sap.ui.comp.smartfield.type.Int32", {
		constructor: function(oFormatOptions, oConstraints) {
			IntBase.apply(this, arguments);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 *
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {int} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	Int32Type.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = IntBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};

	/**
	 * Returns the type's name.
	 *
	 * @returns {string} the type's name
	 * @public
	 */
	Int32Type.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Int32";
	};

	return Int32Type;
});

}; // end of sap/ui/comp/smartfield/type/Int32.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Int64') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * 64 byte integer data type that supports field-control.
 *
 * @name sap.ui.comp.smartfield.type.Int64.
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.31.0
 * @extends sap.ui.model.odata.type.Int64
 * @returns {sap.ui.comp.smartfield.type.Int64} the integer implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Int64'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Int64'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Int64",["sap/ui/model/odata/type/Int64" ], function(IntBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Int64</code>.
	 *
	 * @param {object} oFormatOptions format options.
	 * @param {object} oConstraints constraints.
	 * @private
	 */
	var Int64Type = IntBase.extend("sap.ui.comp.smartfield.type.Int64", {
		constructor: function(oFormatOptions, oConstraints) {
			IntBase.apply(this, arguments);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 *
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {int} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	Int64Type.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = IntBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};

	/**
	 * Returns the type's name.
	 *
	 * @returns {string} the type's name
	 * @public
	 */
	Int64Type.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Int64";
	};

	return Int64Type;
});

}; // end of sap/ui/comp/smartfield/type/Int64.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.SByte') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * SByte data type that supports field-control.
 *
 * @name sap.ui.comp.smartfield.type.SByte
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.SByte
 * @returns {sap.ui.comp.smartfield.type.SByte} the byte implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.SByte'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.SByte'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/SByte",["sap/ui/model/odata/type/SByte" ], function(SByteBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.SByte</code>.
	 *
	 * @param {object} oFormatOptions format options
	 * @param {object} oConstraints constraints
	 * @private
	 */
	var SByteType = SByteBase.extend("sap.ui.comp.smartfield.type.SByte", {
		constructor: function(oFormatOptions, oConstraints) {
			SByteBase.apply(this, arguments);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>integer</code>.
	 *
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {int} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	SByteType.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = SByteBase.prototype.parseValue.apply(this, [ sValue, sSourceType ]);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};

	/**
	 * Returns the type's name.
	 *
	 * @returns {string} the type's name
	 * @public
	 */
	SByteType.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.SByte";
	};

	return SByteType;
});

}; // end of sap/ui/comp/smartfield/type/SByte.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.String') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * String data type that supports field-control.
 *
 * @name sap.ui.comp.smartfield.type.String
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @extends sap.ui.model.odata.type.String
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.String'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.String'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/String",["sap/ui/model/odata/type/String" ], function(StringBase) {
	"use strict";

	var StringType = StringBase.extend("sap.ui.comp.smartfield.type.String", {
		constructor: function(oFormatOptions, oConstraints) {
			StringBase.apply(this, arguments);
			this.oFieldControl = null;
		}
	});

	StringType.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = StringBase.prototype.parseValue.apply(this, arguments);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};

	StringType.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.String";
	};

	return StringType;
});

}; // end of sap/ui/comp/smartfield/type/String.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.type.Time') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Time data type that supports field-control.
 *
 * @name sap.ui.comp.smartfield.type.Time
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.34.0
 * @extends sap.ui.model.odata.type.Time
 * @returns {sap.ui.comp.smartfield.type.Time} the time implementation.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.type.Time'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.type.Time'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/type/Time",["sap/ui/model/odata/type/Time" ], function(TimeBase) {
	"use strict";

	/**
	 * Constructor for a primitive type <code>Edm.Time</code>.
	 *
	 * @param {object} oFormatOptions format options
	 * @param {object} oConstraints constraints
	 * @private
	 */
	var Time = TimeBase.extend("sap.ui.comp.smartfield.type.Time", {
		constructor: function(oFormatOptions, oConstraints) {
			TimeBase.apply(this, arguments);
			this.oFieldControl = null;
		}
	});

	/**
	 * Parses the given value to JavaScript <code>Date</code>.
	 *
	 * @param {string} sValue the value to be parsed; the empty string and <code>null</code> will be parsed to <code>null</code>
	 * @param {string} sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
	 * @returns {Date} the parsed value
	 * @throws {sap.ui.model.ParseException} if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a Date
	 * @public
	 */
	Time.prototype.parseValue = function(sValue, sSourceType) {
		var oReturn = TimeBase.prototype.parseValue.apply(this, arguments);
		this.oFieldControl(sValue, sSourceType);
		return oReturn;
	};

	/**
	 * Returns the type's name.
	 *
	 * @returns {string} the type's name
	 * @public
	 */
	Time.prototype.getName = function() {
		return "sap.ui.comp.smartfield.type.Time";
	};

	return Time;
});

}; // end of sap/ui/comp/smartfield/type/Time.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.AdditionalConfigurationHelper') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfilterbar.AdditionalConfigurationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/AdditionalConfigurationHelper",[
	'jquery.sap.global'
], function(jQuery) {
	"use strict";

	/**
	 * @public
	 * @constructor
	 */
	var AdditionalConfigurationHelper = function(aControlConfiguration, aGroupConfiguration) {
		this.controlConfiguration = [];
		this.groupConfiguration = [];
		this._initialize(aControlConfiguration, aGroupConfiguration);
	};

	/**
	 * Fills the internal structures
	 * 
	 * @private
	 */
	AdditionalConfigurationHelper.prototype._initialize = function(aControlConfiguration, aGroupConfiguration) {
		var i, length, oGroupConfiguration, oControlConfiguration, o, aDefaultFilterValues, oDefaultFilterValue, j, length2, oo;

		if (!aControlConfiguration) {
			aControlConfiguration = [];
		}

		if (!aGroupConfiguration) {
			aGroupConfiguration = [];
		}

		// Control Configuration
		length = aControlConfiguration.length;
		for (i = 0; i < length; i++) {
			oControlConfiguration = aControlConfiguration[i];
			o = {};
			o.key = oControlConfiguration.getKey();
			o.groupId = oControlConfiguration.getGroupId();
			o.index = oControlConfiguration.getIndex();
			o.label = oControlConfiguration.getLabel();
			o.isVisible = oControlConfiguration.getVisible();
			o.mandatory = oControlConfiguration.getMandatory();
			o.width = oControlConfiguration.getWidth();
			o.hasValueHelpDialog = oControlConfiguration.getHasValueHelpDialog();
			o.hasTypeAhead = oControlConfiguration.getHasTypeAhead();
			o.controlType = oControlConfiguration.getControlType();
			o.filterType = oControlConfiguration.getFilterType();
			o.customControl = oControlConfiguration.getCustomControl();
			o.visibleInAdvancedArea = oControlConfiguration.getVisibleInAdvancedArea();
			o.preventInitialDataFetchInValueHelpDialog = oControlConfiguration.getPreventInitialDataFetchInValueHelpDialog();
			o.displayBehaviour = oControlConfiguration.getDisplayBehaviour();
			o.defaultFilterValues = [];
			o.conditionType = oControlConfiguration.getConditionType();
			aDefaultFilterValues = oControlConfiguration.getDefaultFilterValues();
			if (aDefaultFilterValues && aDefaultFilterValues.length) {
				length2 = aDefaultFilterValues.length;
				for (j = 0; j < length2; j++) {
					oDefaultFilterValue = aDefaultFilterValues[j];
					oo = {};
					oo.sign = oDefaultFilterValue.getSign();
					oo.operator = oDefaultFilterValue.getOperator();
					oo.low = oDefaultFilterValue.getLow();
					oo.high = oDefaultFilterValue.getHigh();
					o.defaultFilterValues.push(oo);
				}
			}
			this.controlConfiguration.push(o);
		}

		// Group Configuration
		length = aGroupConfiguration.length;
		for (i = 0; i < length; i++) {
			oGroupConfiguration = aGroupConfiguration[i];
			o = {
				key: oGroupConfiguration.getKey(),
				index: oGroupConfiguration.getIndex(),
				label: oGroupConfiguration.getLabel()
			};
			this.groupConfiguration.push(o);
		}
	};

	/**
	 * Returns the control configuration for a specified key. Returns undefined, if there is no configuration.
	 * 
	 * @public
	 */
	AdditionalConfigurationHelper.prototype.getControlConfigurationByKey = function(sKey) {
		var i, length;

		length = this.controlConfiguration.length;
		for (i = 0; i < length; i++) {
			if (this.controlConfiguration[i].key === sKey) {
				return this.controlConfiguration[i];
			}
		}
		return undefined;
	};

	/**
	 * Returns all control configurations
	 * 
	 * @public
	 */
	AdditionalConfigurationHelper.prototype.getControlConfiguration = function() {
		return this.controlConfiguration;
	};

	/**
	 * Returns all group configurations
	 * 
	 * @public
	 */
	AdditionalConfigurationHelper.prototype.getGroupConfiguration = function() {
		return this.groupConfiguration;
	};

	/**
	 * Returns the control configuration for a specified key. Returns undefined, if there is no configuration.
	 */
	AdditionalConfigurationHelper.prototype.getGroupConfigurationByKey = function(sKey) {
		var i, length;

		length = this.groupConfiguration.length;
		for (i = 0; i < length; i++) {
			if (this.groupConfiguration[i].key === sKey) {
				return this.groupConfiguration[i];
			}
		}
		return undefined;
	};

	return AdditionalConfigurationHelper;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/AdditionalConfigurationHelper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.ControlConfiguration') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.ControlConfiguration.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.ControlConfiguration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/ControlConfiguration",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'
], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new smartfilterbar/ControlConfiguration.
	 * 
	 * @param {string} [sID] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class ControlConfiguration can be used to add additional configuration for filter fields in the SmartFilterBar control, in order to overwrite
	 *        the default settings from the OData metadata. For instance, it is possible to change the label, index or control type of a filter field.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.ControlConfiguration
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ControlConfiguration = Element.extend("sap.ui.comp.smartfilterbar.ControlConfiguration", /** @lends sap.ui.comp.smartfilterbar.ControlConfiguration.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * The key property corresponds to the field name from the OData service $metadata document.
				 */
				key: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The groupId can be used to move a field from one group to another. The groupId corresponds to the EntityName from the OData
				 * metadata. It is also possible to move a field from the advanced area to the basic area by specifying the groupId _BASIC.
				 */
				groupId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Using this property it is possible to overwrite the label of a filter field in the SmartFilterBar.
				 */
				label: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Using this flag it is possible to hide fields from the OData metadata.
				 */
				visible: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Specifies whether a value help dialog is available or not.
				 */
				hasValueHelpDialog: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The SmartFilterBar calculates which kind of control will be used for a filter fields based on multiple OData Attributes and
				 * annotations. Using this property it is possible to overwrite the OData metadata.
				 */
				controlType: {
					type: "sap.ui.comp.smartfilterbar.ControlType",
					group: "Misc",
					defaultValue: 'auto'
				},

				/**
				 * The filter type specifies whether the filter fields is e.g. type single value, multi-value,or interval. The filter type is being
				 * calculated by the martFilterBar based on the OData metadata. Using this property the filter type can be configured manually.
				 */
				filterType: {
					type: "sap.ui.comp.smartfilterbar.FilterType",
					group: "Misc",
					defaultValue: 'auto'
				},

				/**
				 * The zero based index can be used to specify the initial order of fields (without any variants).
				 */
				index: {
					type: "int",
					group: "Misc",
					defaultValue: -1
				},

				/**
				 * Property can be used to enable the TypeAhead service. TypeAhead does not work with all controls, e.g it does not work for
				 * DrodDownListbox
				 */
				hasTypeAhead: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Property can be used to overwrite the mandatory state of a filter field. Property can only be set during initialization. Changes at
				 * runtime will be ignored.
				 */
				mandatory: {
					type: "sap.ui.comp.smartfilterbar.MandatoryType",
					group: "Misc",
					defaultValue: 'auto'
				},

				/**
				 * The width of the filter field in a CSS compatible format. The width can be set only once during initialization. Changes at runtime
				 * will not be reflected. The width will not be applied to custom controls.
				 */
				width: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to true this field will be added to the advanced area (aka. Dynamic Selection) by default.
				 */
				visibleInAdvancedArea: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * In case there are value help annotations for this filter field, it is possible to specify whether the table in the value help
				 * dialog for this field will be filled initially. The default value is true, which means the table will not be filled as the data
				 * fetch is prevented.
				 */
				preventInitialDataFetchInValueHelpDialog: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The displayBehaviour specifies how the content should be displayed on certain controls. Ex: DescriptionOnly for Combobox (DropDown
				 * text) , Description and ID for MultiInput (token text)
				 */
				displayBehaviour: {
					type: "sap.ui.comp.smartfilterbar.DisplayBehaviour",
					group: "Misc",
					defaultValue: 'auto'
				},

				/**
				 * The condition Type class name to use for this filter item. Implementation should derive from sap.ui.comp.config.condition.Type
				 */
				conditionType: {
					type: "any",
					group: "Misc",
					defaultValue: null
				}
			},
			aggregations: {

				/**
				 * Default value for a filter field.
				 */
				defaultFilterValues: {
					type: "sap.ui.comp.smartfilterbar.SelectOption",
					multiple: true,
					singularName: "defaultFilterValue"
				},

				/**
				 * If a custom control is specified, the SmartFilterBar will not create a control but use the custom control. Additional services like
				 * TypeAhead have to implemented manually.
				 */
				customControl: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {

				/**
				 * Fired when the value of a property, for example isVisible, has changed.
				 */
				change: {
					parameters: {

						/**
						 * Name of the changed property
						 */
						propertyName: {
							type: "string"
						}
					}
				}
			}
		}
	});

	ControlConfiguration.prototype.setVisible = function(bIsVisible) {
		this.setProperty("visible", bIsVisible);
		this.fireChange({
			propertyName: "visible"
		});
	};

	ControlConfiguration.prototype.setLabel = function(sLabel) {
		this.setProperty("label", sLabel);
		this.fireChange({
			propertyName: "label"
		});
	};

	ControlConfiguration.prototype.setVisibleInAdvancedArea = function(bVisible) {
		this.setProperty("visibleInAdvancedArea", bVisible);
		this.fireChange({
			propertyName: "visibleInAdvancedArea"
		});
	};

	// Assign types from library for backward compatibility!
	ControlConfiguration.FILTERTYPE = sap.ui.comp.smartfilterbar.FilterType;
	ControlConfiguration.CONTROLTYPE = sap.ui.comp.smartfilterbar.ControlType;
	ControlConfiguration.MANDATORY = sap.ui.comp.smartfilterbar.MandatoryType;
	ControlConfiguration.DISPLAYBEHAVIOUR = sap.ui.comp.smartfilterbar.DisplayBehaviour;

	return ControlConfiguration;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/ControlConfiguration.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.GroupConfiguration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.GroupConfiguration.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.GroupConfiguration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/GroupConfiguration",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	/**
	 * Constructor for a new smartfilterbar/GroupConfiguration.
	 *
	 * @param {string} [sID] ID for the new control, generated automatically if no ID is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A GroupConfiguration can be used to add additional configurations for groups in the SmartFilterBar. A group in the SmartFilterBar is a group of filter fields in the advanced search.
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.GroupConfiguration
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GroupConfiguration = Element.extend("sap.ui.comp.smartfilterbar.GroupConfiguration", /** @lends sap.ui.comp.smartfilterbar.GroupConfiguration.prototype */ { metadata : {

		library : "sap.ui.comp",
		properties : {

			/**
			 * The key property shall correspond to the name EntityTypeName from the OData service $metadata document.
			 */
			key : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Zero based integer index.
			 * The index can be used to specify the order of groups. If no index is specified, the order like in the OData metadata will be used.
			 */
			index : {type : "any", group : "Misc", defaultValue : undefined},

			/**
			 * Using this property it is possible to overwrite the label of a group in the advanced area of the SmartFilterBar.
			 */
			label : {type : "any", group : "Misc", defaultValue : undefined}
		},
		events : {

			/**
			 * Fired when the value of a property, for example label, has changed
			 */
			change : {
				parameters : {

					/**
					 * Name of the changed property
					 */
					propertyName : {type : "string"}
				}
			}
		}
	}});
	
	GroupConfiguration.prototype.setLabel = function(sLabel) {
		this.setProperty("label", sLabel);
		this.fireChange({
			propertyName: "label"
		});
	};

	return GroupConfiguration;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartfilterbar/GroupConfiguration.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.SelectOption') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.SelectOption.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.SelectOption'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/SelectOption",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element', 'sap/ui/model/FilterOperator'
], function(jQuery, library, Element, FilterOperator) {
	"use strict";

	/**
	 * Constructor for a new smartfilterbar/SelectOption.
	 *
	 * @param {string} [sID] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A Select Option can be used to specify default filter values for a control configuration of the SmartFilterBar.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.SelectOption
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SelectOption = Element.extend("sap.ui.comp.smartfilterbar.SelectOption", /** @lends sap.ui.comp.smartfilterbar.SelectOption.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * The sign for a Select Option. Possible values are I for include or E for exclude.
				 */
				sign: {
					type: "sap.ui.comp.smartfilterbar.SelectOptionSign",
					group: "Misc",
					defaultValue: 'I'
				},

				/**
				 * The operator for a select option. The default value is EQ "for equals".
				 */
				operator: {
					type: "sap.ui.model.FilterOperator",
					group: "Misc",
					defaultValue: 'EQ'
				},

				/**
				 * The low value for a select option.
				 */
				low: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The high value for a select option. The high value is only required for a few operators, e.g. BT (between).
				 */
				high: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			}
		}
	});
	// Assign types from library for backward compatibility!
	SelectOption.SIGN = sap.ui.comp.smartfilterbar.SelectOptionSign;
	SelectOption.OPERATOR = FilterOperator;

	return SelectOption;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/SelectOption.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.SmartFilterBar.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartfilerbar.SmartFilterBar control.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.SmartFilterBar.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartfilterbar/SmartFilterBar.designtime",[], function() {
	"use strict";
	return {
		annotations: {
			/**
			 * NonFilterableProperties defines whether a <code>Property</code> can be used for filtering data. All properties are filterable by
			 * default. In order to disable filtering capability, these properties must be excluded. <b>Note:</b> Support for V4 annotation is added
			 * since SAPUI5 version 1.40. <i>XML Example of OData V4 with Excluded Customer and CompanyCode Properties</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;Org.OData.Capabilities.V1.FilterRestrictions&quot;&gt;
			 *      &lt;PropertyValue Property=&quot;NonFilterableProperties&quot;&gt;
			 *        &lt;Collection&gt;
			 *          &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *          &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *        &lt;/Collection&gt;
			 *      &lt;/PropertyValue&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:filterable</code> annotation on the <code>Property</code> can be used to exclude properties from
			 * filtering.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:filterable=&quot;false&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:filterable=&quot;false&quot;/&gt;
			 * </pre>
			 *
			 * RequiredProperties defines the filter field as mandatory filter. Filter fields having this annotation must be a part of the
			 * <code>$filter</code> request sent to the back-end. <b>Note:</b> Support for V4 annotation is added since SAPUI5 version 1.40. <i>XML
			 * Example of OData V4 with Required CompanyCode Filter</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;Org.OData.Capabilities.V1.FilterRestrictions&quot;&gt;
			 *      &lt;Record&gt;
			 *          &lt;PropertyValue Property=&quot;RequiresFilter&quot; Bool=&quot;true&quot;/&gt;
			 *          &lt;PropertyValue Property=&quot;RequiredProperties&quot;&gt;
			 *           &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *           &lt;/Collection&gt;
			 *        &lt;/PropertyValue&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:required-in-filter</code> annotation on the <code>Property</code> can be used for setting the filter as
			 * a mandatory filter field.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:required-in-filter=&quot;true&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:required-in-filter=&quot;true&quot;/&gt;
			 * </pre>
			 */

			filterRestrictions: {
				namespace: "Org.OData.Capabilities.V1",
				annotation: "FilterRestrictions",
				target: [
					"EntitySet"
				],
				whiteList: {
					properties: [
						"NonFilterableProperties", "RequiredProperties"
					]
				},
				defaultValue: true,
				appliesTo: [
					"filterItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Defines a group for a filter field. The value can be provided as a fixed or dynamic 
			 * value of an enumeration by referencing another Property within the same EntityType.
			 *
			 * <i>XML Example for OData V4 with CompanyName and CompanyCode properties</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.FieldGroup&quot; Qualifier=&quot;FieldGroup1&quot;&gt;
			 *      &lt;Record&gt;
			 *        &lt;PropertyValue Property=&quot;Label&quot; String=&quot;my Field Group 1&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;Data&quot;&gt;
			 *          &lt;Collection&gt;
			 *            &lt;PropertyPath&gt;CompanyName&lt;/PropertyPath&gt;
			 *            &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *          &lt;/Collection&gt;
			 *        &lt;/PropertyValue&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 */
			fieldGroup: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "FieldGroup",
				target: [
					"EntityType"
				],
				defaultValue: null,
				appliesTo: [
					"filterGroupItem"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Defines the relevant field groups. If a filter facet has been defined, only the referenced field groups are
			 * displayed in the <i>Adapt Filters</i> dialog, the other filters are omitted. <br>
			 * If you don't define any filter facets all field groups are displayed.
			 *
			 * <i>XML Example for OData V4 with two relevant field groups</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.FilterFacets&quot; &gt;
			 *      &lt;Collection&gt;
			 *        &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.ReferenceFacet&quot; &gt;
			 *          &lt;PropertyValue Property=&quot;Target&quot; AnnotationPath=&quot;com.sap.vocabularies.UI.v1.FieldGroup#FieldGroup1&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Label&quot; String=&quot;Field Group 1&quot; /&gt;
			 *      &lt;/Record&gt;
			 *        &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.ReferenceFacet&quot; &gt;
			 *          &lt;PropertyValue Property=&quot;Target&quot; AnnotationPath=&quot;com.sap.vocabularies.UI.v1.FieldGroup#FieldGroup2&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Label&quot; String=&quot;Field Group 2&quot; /&gt;
			 *      &lt;/Record&gt;
			 *      &lt;/Collection&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 */
			filterFacet: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "FilterFacets",
				target: [
					"EntityType"
				],
				defaultValue: null,
				appliesTo: [
					"filterGroupItem"
				],
				group: [
					"Behavior"
				],
				since: "1.48"
			},

			/**
			 * Describes the arrangement of a code value and its text. The value can be provided as a fixed or dynamic value of an enumeration by
			 * referencing another <code>Property</code> within the same <code>EntityType</code>. The enumeration members can have the following
			 * values:
			 * <ul>
			 * <li><code>com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst</code><br>
			 * The underlying control is represented with the specified description followed by its ID. </li>
			 * <li><code>com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly</code><br>
			 * The underlying control is represented with the specified description only. </li>
			 * </ul>
			 * <i>XML Example of OData V4 with EntityType ProductType</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;ProductType&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.TextArrangement&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst&quot;/&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			textArrangement: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "TextArrangement",
				target: [
					"EntityType"
				],
				defaultValue: null,
				appliesTo: [
					"text"
				],
				group: [
					"Appearance", "Behavior"
				],
				since: "1.32.1"
			},

			/**
			 * Defines whether the filter is visible. The SmartFilterBar interprets the <code>EnumMember</code> <code>FieldControlType/Hidden</code>
			 * of the <code>FieldControl</code> annotation for setting the visibility. <b>Note:</b> Currently only
			 * <code>FieldControlType/Hidden</code> is supported for statically hiding the filter fields.
			 *
			 * <i>XML Example of OData V4 with Hidden Customer and CompanyCode Properties</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/Hidden&quot;/&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/Hidden&quot;/&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:visible</code> annotation on the <code>Property</code> can be used to assign visibility.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:visible=&quot;false&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:visible=&quot;false&quot;/&gt;
			 * </pre>
			 */
			filterVisible: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "FieldControlType",
				target: [
					"Property"
				],
				whiteList: {
					values: [
						"Hidden"
					]
				},
				defaultValue: false,
				appliesTo: [
					"filterItem/#/visible"
				],
				group: [
					"Behavior"
				],
				since: "1.32.1"
			},

			/**
			 * Contains annotations that provide information for rendering a <code>ValueHelpList</code> that are set on the <code>Property</code>.
			 * Each Parameter on the <code>ValueList</code> annotation has maximum of two properties:
			 * <ol>
			 * <li>LocalDataProperty - Path to the property on the local entity that triggered the ValueList.</li>
			 * <li>ValueListProperty - Path to property in on the ValueList entity.</li>
			 * </ol>
			 * <i>XML Example of OData V4 with Category having ValueList</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.ValueList&quot;&gt;
			 *      &lt;Record&gt;
			 *        &lt;PropertyValue Property=&quot;Label&quot; String=&quot;Category&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;CollectionPath&quot; String=&quot;Category&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;SearchSupported&quot; Bool=&quot;true&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;Parameters&quot;&gt;
			 *        &lt;Collection&gt;
			 *          &lt;Record Type=&quot;com.sap.vocabularies.Common.v1.ValueListParameterOut&quot;&gt;
			 *            &lt;PropertyValue Property=&quot;LocalDataProperty&quot; PropertyPath=&quot;Category&quot; /&gt;
			 *            &lt;PropertyValue Property=&quot;ValueListProperty&quot; String=&quot;Description&quot; /&gt;
			 *          &lt;/Record&gt;
			 *          &lt;Record Type=&quot;com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly&quot;&gt;
			 *            &lt;PropertyValue Property=&quot;ValueListProperty&quot; String=&quot;CategoryName&quot; /&gt;
			 *          &lt;/Record&gt;
			 *        &lt;/Collection&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 */
			valueList: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "ValueList",
				target: [
					"Property", "Parameter"
				],
				defaultValue: null,
				appliesTo: [
					"filterItem/#/fieldHelp"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * If specified as <code>true</code>, there's only one value list mapping and its value list
			 * consists of a small number of fixed values.
			 * The value list will be rendered as pick list containing all possible values.
			 *
			 * <i>XML Example of OData V4 Value List on Category Property</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.ValueListWithFixedValues&quot; Bool=&quot;true&quot;/&gt;
			 * </pre>
			 */
			valueListWithFixedValues: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "ValueListWithFixedValues",
				target: [
					"Property", "Parameter"
				],
				defaultValue: null,
				appliesTo: [
					"field/#/fieldHelp"
				],
				group: [
					"Behavior"
				],
				since: "1.48.1"
			},

			/**
			 * A short, human-readable text suitable for the filter's name. The <code>com.sap.vocabularies.Common.v1.Label</code> annotation is
			 * defined on the <code>Property</code>. If the <code>com.sap.vocabularies.Common.v1.Label</code> annotation is given, it has
			 * precedence. If none of the annotations are given, then the label will be the Property name. 
			 *
			 * <i>XML Example for OData V4 where CustomerName is the Label assigned to Customer</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; /&gt;
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.Label&quot; Path=&quot;Customer&quot; String=&quot;Customer Name&quot;/&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:label</code> annotation on the <code>Property</code> can be used to define the label of the column.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:label=&quot;Customer Name&quot;/&gt;
			 * </pre>
			 */
			filterLabelOnProperty: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "Label",
				target: [
					"Property", "PropertyPath"
				],
				defaultValue: null,
				appliesTo: [
					"filterItem/label"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * A short, human-readable text suitable for the filter's name. The
			 * <code>Label</code> annotation of <code>com.sap.vocabularies.UI.v1.DataFieldAbstract</code> is defined within <code>com.sap.vocabularies.UI.v1.LineItem</code> annotation.
			 * If the <code>com.sap.vocabularies.Common.v1.Label</code> annotation is given, it has precedence.
			 * If none of the annotations are given, then the label will be the Property name of the column.
			 *
			 * <i>XML Example for OData V4 where CustomerName is the Label assigned to Customer</i>
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot;&gt;
			 *     &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.Label&quot; Path=&quot;CustomerName&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CustomerName&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:label</code> annotation on the <code>Property</code> can be used to define the label of the column.
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:label=&quot;My Customer&quot;/&gt;
			 * </pre>
			 */
			filterLabelOnLineItem: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "DataFieldAbstract",
				target: [
					"Property", "Parameter"
				],
				whiteList: {
					properties: [
						"Label"
					]
				},
				appliesTo: [
					"filterItem/label"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Enum member MultiValue defines whether multiple values can be used in a single filter. With multi-value filtering, more that one
			 * "equals" condition can be defined for filtering the data. <b>Note:</b> Support for V4 annotation is added since SAPUI5 version 1.40.
			 * <i>XML Example of OData V4 with Multi-value Customer and CompanyCode Properties</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FilterExpressionRestriction&quot; /&gt;
			 *       &lt;Collection&gt;
			 *          &lt;Record&gt;
			 *             &lt;PropertyValue Property=&quot;Property&quot; PropertyPath=&quot;Customer&quot; /&gt;
			 *             &lt;PropertyValue Property=&quot;AllowedExpressions&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FilterExpressionType/MultiValue&quot; /&gt;
			 *          &lt;/Record&gt;
			 *          &lt;Record&gt;
			 *             &lt;PropertyValue Property=&quot;Property&quot; PropertyPath=&quot;CompanyCode&quot; /&gt;
			 *             &lt;PropertyValue Property=&quot;AllowedExpressions&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FilterExpressionType/MultiValue&quot; /&gt;
			 *          &lt;/Record&gt;
			 *       &lt;/Collection&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:filter-restriction="multi-value"</code> annotation on the <code>Property</code> can be used for
			 * rendering multi-value filter field.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:filter-restriction=&quot;multi-value&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:filter-restriction=&quot;multi-value&quot;/&gt;
			 * </pre>
			 *
			 * Enum member SingleValue restricts the filter to only <b>one</b> single value entry. With single-value filtering, you cannot define
			 * more than one "equals" condition for filtering the data. <b>Note:</b> Support for V4 annotation is added since SAPUI5 version 1.40.
			 * <i>XML Example of OData V4 with Single-value Customer and CompanyCode Properties</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FilterExpressionRestriction&quot; /&gt;
			 *       &lt;Collection&gt;
			 *          &lt;Record&gt;
			 *             &lt;PropertyValue Property=&quot;Property&quot; PropertyPath=&quot;Customer&quot; /&gt;
			 *             &lt;PropertyValue Property=&quot;AllowedExpressions&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FilterExpressionType/SingleValue&quot; /&gt;
			 *          &lt;/Record&gt;
			 *          &lt;Record&gt;
			 *             &lt;PropertyValue Property=&quot;Property&quot; PropertyPath=&quot;CompanyCode&quot; /&gt;
			 *             &lt;PropertyValue Property=&quot;AllowedExpressions&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FilterExpressionType/SingleValue&quot; /&gt;
			 *          &lt;/Record&gt;
			 *       &lt;/Collection&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:filter-restriction="single-value"</code> annotation on the <code>Property</code> can be used for
			 * rendering a single-value filter field.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:filter-restriction=&quot;single-value&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:filter-restriction=&quot;single-value&quot;/&gt;
			 * </pre>
			 *
			 * Enum member SingleInterval restricts the filter to specify an interval, for example, a date interval for filtering the data present
			 * between the given dates. <b>Note:</b> Support for V4 annotation is added since SAPUI5 version 1.40. <i>XML Example of OData V4 with
			 * Interval Restriction on DocumentDate Property</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FilterExpressionRestriction&quot; /&gt;
			 *      &lt;Collection&gt;
			 *         &lt;Record&gt;
			 *            &lt;PropertyValue Property=&quot;Property&quot; PropertyPath=&quot;DocumentDate&quot; /&gt;
			 *            &lt;PropertyValue Property=&quot;AllowedExpressions&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FilterExpressionType/SingleInterval&quot; /&gt;
			 *         &lt;/Record&gt;
			 *      &lt;/Collection&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:filter-restriction="interval"</code> annotation on the <code>Property</code> can be used for rendering
			 * an interval filter field.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;DocumentDate&quot; ... sap:filter-restriction=&quot;interval&quot;/&gt;
			 * </pre>
			 */
			filterExpression: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "FilterExpressionType",
				target: [
					"EntitySet"
				],
				whiteList: {
					values: [
						"MultiValue", "SingleValue", "SingleInterval"
					]
				},
				defaultValue: null,
				appliesTo: [
					"filterItem/#/input"
				],
				group: [
					"Behavior"
				],
				since: "1.28.1"
			},

			/**
			 * Defines whether certain fields should be initially visible in the <code>SmartFilterBar</code> control. The fields will be rendered in
			 * the order that is specified in this annotation. <b>Note:</b> This annotation is supported since SAPUI5 version 1.40. <i>XML Example of
			 * OData V4 with SelectionFields annotation.</i>
			 *
			 * <pre>
			 *   &lt;Annotations Target=&quot;Product&quot;&gt;
			 *     &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.SelectionFields&quot;&gt;
			 *       &lt;Collection&gt;
			 *         &lt;PropertyPath&gt;ProductCategory&lt;/PropertyPath&gt;
			 *         &lt;PropertyPath&gt;Supplier&lt;/PropertyPath&gt;
			 *         &lt;PropertyPath&gt;Product&lt;/PropertyPath&gt;
			 *       &lt;/Collection&gt;
			 *     &lt;/Annotation&gt;
			 *   &lt;/Annotations&gt;
			 * </pre>
			 */
			selectionFields: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "SelectionFields",
				target: [
					"EntityType"
				],
				defaultValue: null,
				appliesTo: [
					"filterItem/#/value"
				],
				group: [
					"Behavior"
				],
				since: "1.40.1"
			},

			/**
			 * Defines whether certain fields should be hidden in the <code>SmartFilterBar</code> control. <i>XML Example for OData V4 where
			 * ProductPictureURL should never be visible on the UI</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;ProductPictureURL&quot; &gt;
			 *     &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.HiddenFilter&quot;/&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			filterHidden: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "HiddenFilter",
				target: [
					"Property"
				],
				appliesTo: [
					"filterItem/hidden"
				],
				group: [
					"Behavior"
				],
				since: "1.44.0"
			},

			/**
			 * Defines variant items, based on SelectionVariant annotation. SelectionVariants with a qualifier will be added as variants to the
			 * <code>VariantManagement</code> control.
			 * A SelectionVariant annotation <bold>without<bold> a qualifier will define the Standard variant, in case no vendor Standard variant exists.
			 * All mentioned filters will be treated as at least <code>partOfCurrentVariant</code>.
			 *
			 * <pre>
			 *     &lt;Annotations Target=&quot;Product&quot;&gt;
			 *     &lt;Annotation Qualifier=&quot;Group&quot; Term=&quot;com.sap.vocabularies.UI.v1.SelectionVariant&quot; &gt;
			 *         &lt;Record&gt;
			 *            &lt;PropertyValue Text=&quot;SelectionVariant from Annotations&quot; /&gt;
			 *            &lt;PropertyValue Property=&quot;SelectOptions&quot;&gt;
			 *               &lt;Collection&gt;
			 *         			&lt;Record Type=&quot;UI.SelectOptionType&quot;&gt;
			 *            			&lt;PropertyValue Property=&quot;PropertyName&quot; PropertyPath=&quot;Bukrs&quot; /&gt;
			 *                      &lt;PropertyValue Property=&quot;Ranges&quot; &gt;
			 *                      	&lt;Collection&gt;
			 *                          	&lt;Record Type=&quot;UI.SelectionRangeType&quot;&gt;
			 *            						&lt;PropertyValue Property=&quot;Sign&quot; EnumMember=&quot;UI.SelectionRangeSignType/I&quot; /&gt;
			 *            						&lt;PropertyValue Property=&quot;Option&quot; EnumMember=&quot;UI.SelectionRangeOptionType/EQ&quot; /&gt;
			 *            						&lt;PropertyValue Property=&quot;Low&quot; String=&quot;0001&quot; /&gt;
			 *                          	&lt;/Record&gt;
			 *                          &lt;/Collection&gt;
			 *                      &lt;/PropertyValue&gt;
			 *                  &lt;/Record&gt;
			 *               &lt;/Collection&gt;
			 *            &lt;/PropertyValue&gt;
			 *         &lt;/Record&gt;
			 *     &lt;Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			selectionBVariant: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "SelectionVariant",
				target: [
					"EntityType"
				],
				appliesTo: [
					"SmartVariantManagement"
				],
				group: [
					"Behavior"
				],
				since: "1.48.0"
			}
		},
		properties: {
			entitySet: {
				ignore: true
			},
			entityType: {
				ignore: true
			},
			// deprecated
			resourceUri: {
				ignore: true
			},
			basicSearchFieldName: {
				ignore: true
			},
			enableBasicSearch: {
				ignore: true
			},
			considerAnalyticalParameters: {
				ignore: true
			},
			liveMode: {
				ignore: false
			},
			showMessages: {
				ignore: false
			},
			useDateRangeType: {
				ignore: true
			},
			suppressSelection: {
				ignore: false
			},
			considerSelectionVariants: {
				ignore: true
			},
			defaultSelectionVariantName: {
				ignore: true
			},
			useProvidedNavigationProperties: {
				ignore: true
			},
			navigationProperties: {
				ignore: true
			}
		},
		customData: {
			/**
			 * Used for properties that has an additional sap:text annotation for further description and are displayed in a dropdown selection. For
			 * more information see {@link sap.ui.comp.smartfilterbar.DisplayBehaviour} <b>Note</b> Use the annotation UI.TextArrangement instead.
			 */
			defaultDropDownDisplayBehaviour: {
				type: "sap.ui.comp.smartfilterbar.DisplayBehaviour",
				defaultValue: "",
				since: "1.28.1"
			},
			/**
			 * Used for properties that has an additional sap:text annotation for further description and are displayed as a token.
			 *
			 * @see sap.ui.comp.smartfilterbar.DisplayBehaviour <b>Note</b> Use the annotation UI.TextArrangement instead.
			 */
			defaultTokenDisplayBehaviour: {
				type: "sap.ui.comp.smartfilterbar.DisplayBehaviour",
				defaultValue: "",
				since: "1.28.1"
			},
			/**
			 * Overrides the default settings for formatting dates. For more information see {@link sap.ui.model.type.Date}
			 */
			dateFormatSettings: {
				type: "string",
				defaultValue: "\{'UTC':'true'\}",
				group: [
					"Appearance"
				],
				since: "1.28.1"
			},
			/**
			 * If set to <code>true</code> the contains filter operator will be used as default filter. For more information see
			 * {@link sap.ui.model.FilterOperator}
			 */
			useContainsAsDefaultFilter: {
				type: "boolean",
				defaultValue: false,
				since: "1.28.1"
			},
			/**
			 * If set to <code>true</true> the standard variant of the variant management is executed on selection.
			 */
			executeStandardVariantOnSelect: {
				type: "boolean",
				defaultValue: false,
				since: "1.28.1"
			}
		},
		aggregations: {

			content: {
				propagateMetadata : function(oElement){
					return {
						actions: null
					};
				}
			}

			// groupConfiguration: {}
		}
	};
}, /* bExport= */false);

}; // end of sap/ui/comp/smartfilterbar/SmartFilterBar.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.Layout') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.Layout.
jQuery.sap.declare('sap.ui.comp.smartform.Layout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/Layout",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'
], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new smartform/Layout.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Layout settings to adjust the <code>ResponsiveGridLayout</code> used inside the <code>Form</code>.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.Layout
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Layout = Element.extend("sap.ui.comp.smartform.Layout", /** @lends sap.ui.comp.smartform.Layout.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Default span for labels in extra large size.
				 *
				 * @since 1.38.0
				 */
				labelSpanXL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Default span for labels in large size. This span is only used if more than 1 container is in one line, if only 1 container is in
				 * the line the <code>labelSpanM</code> value is used.
				 */
				labelSpanL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Default span for labels in medium size. This property is used for full size containers. If more than one Container is in one line,
				 * <code>labelSpanL</code> is used.
				 */
				labelSpanM: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Default span for labels in small size.
				 */
				labelSpanS: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of grid cells that are empty at the end of each line on extra large size.
				 *
				 * @since 1.38.0
				 */
				emptySpanXL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of grid cells that are empty at the end of each line on large size.
				 */
				emptySpanL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of grid cells that are empty at the end of each line on medium size.
				 */
				emptySpanM: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of grid cells that are empty at the end of each line on small size.
				 */
				emptySpanS: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of columns for extra large size.<br>
				 * The number of columns for extra large size must not be smaller than the number of columns for large size.
				 *
				 * @since 1.38.0
				 */
				columnsXL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of columns for large size.<br>
				 * The number of columns for large size must not be smaller than the number of columns for medium size.
				 */
				columnsL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Number of columns for medium size.
				 */
				columnsM: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If the <code>SmartForm</code> contains only one single Group and this property is set, the Group is displayed using the full size of the
				 * <code>SmartForm</code>. In this case the properties <code>columnsL</code> and <code>columnsM</code> are ignored.<br>
				 * In all other cases the Group is displayed in the size of one column.
				 *
				 * @since 1.34.1
				 */
				singleGroupFullSize: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Breakpoint (in pixel) between large size and extra large (XL) size.
				 *
				 * @since 1.38.0
				 */
				breakpointXL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Breakpoint (in pixel) between Medium size and Large size.
				 */
				breakpointL: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * reakpoint (in pixel) between Small size and Medium size.
				 */
				breakpointM: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters
				 * L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4
				 * m4". Note that the parameters has to be provided in the order large medium small.<br>
				 * The value set here will be set to all group elements when used with horizontal layout (<code>SmartForm</code> property <code>useHorizontalLayout</code>)
				 */
				gridDataSpan: {
					type: "sap.ui.layout.GridSpan",
					group: "Misc",
					defaultValue: ""
				}
			}
		},
		_oSpan: {XL: 0, L: 0, M: 0, S:0}
	});

	Layout.prototype.setGridDataSpan = function( sGridDataSpan ) {

		// calculate spans for each size
		var aResult = [];

		var Pattern = /XL([1-9]|1[0-2])(?:\s|$)/i;
		aResult = Pattern.exec(sGridDataSpan);
		if (aResult && aResult[1]) {
			this._oSpan.XL = parseInt(aResult[1], 10);
		} else {
			this._oSpan.XL = 0;
		}

		Pattern = /\bL([1-9]|1[0-2])(?:\s|$)/i;
		aResult = Pattern.exec(sGridDataSpan);
		if (aResult && aResult[1]) {
			this._oSpan.L = parseInt(aResult[1], 10);
			if (!this._oSpan.XL) {
				this._oSpan.XL = this._oSpan.L;
			}
		}

		Pattern = /M([1-9]|1[0-2])(?:\s|$)/i;
		aResult = Pattern.exec(sGridDataSpan);
		if (aResult && aResult[1]) {
			this._oSpan.M = parseInt(aResult[1], 10);
		}

		Pattern = /S([1-9]|1[0-2])(?:\s|$)/i;
		aResult = Pattern.exec(sGridDataSpan);
		if (aResult && aResult[1]) {
			this._oSpan.S = parseInt(aResult[1], 10);
		}

		this.setProperty("gridDataSpan", sGridDataSpan);

		return this;

	};

	Layout.prototype._getGridDataSpanNumbers = function( ) {

		return this._oSpan;

	};

	return Layout;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/Layout.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.SmartForm.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartform.Group control
jQuery.sap.declare('sap.ui.comp.smartform.SmartForm.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartform/SmartForm.designtime",[], function() {
	"use strict";

	return {
		aggregations: {
			groups: {
				propagateRelevantContainer: true,

				childNames: {
					singular: "GROUP_CONTROL_NAME",
					plural: "GROUP_CONTROL_NAME_PLURAL"
				},
				actions: {
					move: "moveGroups",
					createContainer: {
						changeType: "addGroup",
						isEnabled: true,
						getCreatedContainerId: function(sNewControlID) {
							return sNewControlID;
						}
					}
				}
			}
		},
		name: "{name}",
		description: "{description}",
		properties: {
			title: {
				ignore: false
			},
			useHorizontalLayout: {
				ignore: false
			},
			horizontalLayoutGroupElementMinWidth: {
				ignore: true
			},
			checkButton: {
				ignore: false
			},
			entityType: {
				ignore: true
			},
			expandable: {
				ignore: false
			},
			expanded: {
				ignore: false
			},
			editTogglable: {
				ignore: false
			},
			editable: {
				ignore: false
			},
			ignoredFields: {
				ignore: true
			},
			flexEnabled: {
				ignore: true
			}
		}
	};

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/SmartForm.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.SmartForm') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* global Promise */


// To avoid loading the fl lib in every case it is only "lazy"-loaded on lib level and loaded explicitly here: 
sap.ui.getCore().loadLibrary('sap.ui.fl');

// Provides control sap.ui.comp.smartform.SmartForm.
jQuery.sap.declare('sap.ui.comp.smartform.SmartForm'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.Form'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.ResponsiveLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.ResponsiveGridLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Panel'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSeparator'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/SmartForm",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/m/MessageBox', 'sap/ui/core/Control', 'sap/ui/layout/form/Form', 'sap/ui/layout/form/ResponsiveLayout', 'sap/ui/layout/form/ResponsiveGridLayout', 'sap/ui/fl/Utils', 'sap/ui/fl/registry/Settings', 'sap/m/Title', 'sap/m/Button', 'sap/m/ButtonType', 'sap/m/Panel', 'sap/m/OverflowToolbar', 'sap/m/ToolbarSpacer', 'sap/m/ToolbarSeparator'
], function(jQuery, library, MessageBox, Control, Form, ResponsiveLayout, ResponsiveGridLayout, Utils, Settings, Title, Button, ButtonType, Panel, OverflowToolbar, ToolbarSpacer, ToolbarSeparator) {
	"use strict";

	/**
	 * Constructor for a new smartform/SmartForm.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The <code>SmartForm</code> control renders a form (<code>sap.ui.layout.form.Form</code>) and supports key user personalization, such as adding/hiding fields and
	 *        groups, changing the order of fields and groups, and changing labels. When used with the <code>SmartField</code> control the label is taken from the
	 *        metadata annotation <code>sap:label</code> if not specified in the XML view.
	 *
	 * <b>Note:</b> Do not put any layout controls into the <code>GroupElements</code>. This could destroy the visual layout,
	 * keyboard support and screen-reader support.
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.SmartForm
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartForm = Control.extend("sap.ui.comp.smartform.SmartForm", /**
																		 * @lends sap.ui.comp.smartform.SmartForm.prototype
																		 */
	{
		metadata: {

			library: "sap.ui.comp",
			designTime: true,
			properties: {

				/**
				 * Title of the form.
				 */
				title: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the groups are rendered in a {@link sap.ui.layout.form.ResponsiveLayout ResponsiveLayout} with the label above
				 * the field. Each group is rendered in a new line.
				 */
				useHorizontalLayout: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the minimal size in pixels of all group elements of the form if the horizontal layout is used.
				 *
				 * @deprecated Since version 1.48.0, please do not use this property as it does not have any effect on the current layout of the <code>SmartForm</code> control.
				 */
				horizontalLayoutGroupElementMinWidth: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether a check button is added to the toolbar.
				 */
				checkButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * CSV of entity types for which the flexibility features are available.<br>
				 * For more information about SAPUI5 flexibility, refer to the Developer Guide.<br>
				 * <b>Note:</b>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				entityType: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the control is expandable. Per default the control is not rendered as expanded.
				 */
				expandable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * If expandable, this property indicates whether the state is expanded or not. If expanded, then the toolbar (if available) and the
				 * content is rendered; if expanded is false, then only the headerText/headerToolbar is rendered.
				 */
				expanded: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code>, a button to toggle the <code>editable</code> property is shown in the toolbar.
				 */
				editTogglable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Specifies whether the form is editable.
				 */
				editable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * CSV of fields that must be ignored in the OData metadata by the SmartForm control.<br>
				 * <b>Note:</b><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the form enables flexibility features, such as adding new fields.<br>
				 * For more information about SAPUI5 flexibility, refer to the Developer Guide.
				 */
				flexEnabled: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			defaultAggregation: "groups",
			aggregations: {

				/**
				 * Groups are used to group form elements.
				 */
				groups: {
					type: "sap.ui.comp.smartform.Group",
					multiple: true,
					singularName: "group"
				},

				/**
				 * Content to be rendered.
				 */
				content: {
					type: "sap.ui.core.Control",
					multiple: false,
					visibility: "hidden"
				},

				/**
				 * Layout settings to adjust <code>ResponsiveGridLayout</code>
				 */
				layout: {
					type: "sap.ui.comp.smartform.Layout",
					multiple: false
				},

				/**
				 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
				 */
				semanticObjectController: {
					type: "sap.ui.comp.navpopover.SemanticObjectController",
					multiple: false
				},

				/**
				 * An additional toolbar that can be added by the users, which can contain further custom buttons, controls, etc.
				 */
				customToolbar: {
					type: "sap.m.Toolbar",
					multiple: false
				},

				/**
				 * Toolbar
				 */
				toolbar: {
					type: "sap.m.Toolbar",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {

				/**
				 * This event is fired when the editable property is toggled.
				 */
				editToggled: {
					parameters: {
						/**
						 * If <code>true</code>, the control is in edit mode
						 */
						editable: {
							type: "boolean"
						}
					}
				},

				/**
				 * This event is fired after check was performed.
				 */
				checked: {
					parameters: {
						/**
						 * An array containing all smart fields with errors
						 */
						erroneousFields: {
							type: "sap.ui.comp.smartfield.SmartField[]"
						}
					}
				}
			}
		},
		renderer: function(oRm, oSmartForm) {
			oRm.write("<div");
			oRm.writeControlData(oSmartForm);
			oRm.addClass("sapUiCompSmartForm");
			oRm.writeClasses();
			oRm.write(">");

			var oContent = oSmartForm.getAggregation("content");
			oRm.renderControl(oContent);

			oRm.write("</div>");
		}
	});

	SmartForm.prototype.init = function() {

		var oFormLayout = _createResponsiveGridLayout.call(this);
		this._oForm = new Form(this.getId() + "--Form", {layout: oFormLayout});
		this._oForm.getToolbar = function(){
			var oSmartForm = this.getParent();
			if (oSmartForm && !oSmartForm.getExpandable()) {
				return oSmartForm._getToolbar();
			}
		};

		this.setAggregation("content", this._oForm);
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

	};

	SmartForm.prototype.onBeforeRendering = function() {

		this._addChangeModeToToolbar(); // RTA mode can only determined before rendering as we need to check the parents
		_useResponsiveLayout.call(this);

	};

	SmartForm.prototype.addGroup = function(oGroup) {

		if (!oGroup) {
			return this;
		}

		// as "groups" aggregation is not used, at least validate it
		oGroup = this.validateAggregation("groups", oGroup, /* multiple */ true);

		_inheritCustomData.call(this, oGroup);
		this._delegateEditMode(oGroup);

		this._oForm.addFormContainer(oGroup);

		oGroup.attachEvent("_visibleChanged", _updateColumnsForLayout, this);
		oGroup.setHorizontalLayoutGroupElementMinWidth(this.getHorizontalLayoutGroupElementMinWidth());
		oGroup.setUseHorizontalLayout(this.getUseHorizontalLayout());
		if (this.getUseHorizontalLayout()) {
			oGroup._updateGridDataSpan();
			oGroup._updateLineBreaks();
		} else {
			_updateColumnsForLayout.call(this);
		}

		return this;

	};

	SmartForm.prototype.getGroups = function() {
		return this._oForm.getFormContainers();

	};

	SmartForm.prototype.indexOfGroup = function(oGroup) {

		return this._oForm.indexOfFormContainer(oGroup);

	};

	SmartForm.prototype.insertGroup = function(oGroup, iIndex) {

		if (!oGroup) {
			return this;
		}

		// as "groups" aggregation is not used, at least validate it
		oGroup = this.validateAggregation("groups", oGroup, /* multiple */ true);

		_inheritCustomData.call(this, oGroup);
		this._delegateEditMode(oGroup);

		this._oForm.insertFormContainer(oGroup, iIndex);

		oGroup.attachEvent("_visibleChanged", _updateColumnsForLayout, this);
		oGroup.setHorizontalLayoutGroupElementMinWidth(this.getHorizontalLayoutGroupElementMinWidth());
		oGroup.setUseHorizontalLayout(this.getUseHorizontalLayout());
		if (this.getUseHorizontalLayout()) {
			oGroup._updateGridDataSpan();
			oGroup._updateLineBreaks();
		} else {
			_updateColumnsForLayout.call(this);
		}

		return this;

	};

	SmartForm.prototype.removeGroup = function(vGroup) {

		var oGroup = this._oForm.removeFormContainer(vGroup);

		if (oGroup) {
			oGroup.detachEvent("_visibleChanged", _updateColumnsForLayout, this);
			_removeCustomData.call(this, oGroup);
			_updateColumnsForLayout.call(this);
		}

		return oGroup;

	};

	SmartForm.prototype.removeAllGroups = function() {

		var aGroups = this._oForm.removeAllFormContainers();

		for (var i = 0; i < aGroups.length; i++) {
			aGroups[i].detachEvent("_visibleChanged", _updateColumnsForLayout, this);
			_removeCustomData.call(this, aGroups[i]);
		}
		_updateColumnsForLayout.call(this);

		return aGroups;

	};

	SmartForm.prototype.destroyGroups = function() {

		var aGroups = this.getGroups();
		for (var i = 0; i < aGroups.length; i++) {
			aGroups[i].detachEvent("_visibleChanged", _updateColumnsForLayout, this);
		}

		this._oForm.destroyFormContainers();
		_updateColumnsForLayout.call(this);

		return this;

	};

	/**
	 * @return {object} oToolbar Returns the toolbar.
	 * @private
	 */
	SmartForm.prototype._getToolbar = function() {
		var oCustomToolbar = this.getCustomToolbar();
		return oCustomToolbar || this.getAggregation("toolbar");
	};

	/**
	 * Sets default span for <code>GridData</code> layout of group elements when used with horizontal layout.
	 *
	 * <b>Note:</b> There is no need to call this function
	 * as the update of all <code>GroupElement</code> elements inside the <code>SmartForm</code> control is triggered automatically
	 * if the <code>GridDataSpan</code> property of the <code>Layout</code> aggregation changes or the <code>Layout</code> aggregation is added.
	 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.propagateGridDataSpan = function() {

		var aGroups = this.getGroups();
		for (var i = 0; i < aGroups.length; i++) {
			var oGroup = aGroups[i];
			oGroup._updateGridDataSpan();
			oGroup._updateLineBreaks();
		}

		return this;

	};

	SmartForm.prototype._getGridDataSpanNumbers = function( ) {

		var oLayout = this.getLayout();
		var oSpan;

		if (oLayout && oLayout._getGridDataSpanNumbers) {
			oSpan = oLayout._getGridDataSpanNumbers();
		}

		return oSpan;

	};

	/**
	 * Change to edit/read only depending on the current state.
	 *
	 * @private
	 */
	SmartForm.prototype._toggleEditMode = function() {
		var bEditable = this.getEditable();
		this.setEditable(!bEditable);
	};

	/**
	 * Triggers the addition of the button for personalization to the toolbar, if change mode supported.
	 *
	 * @returns {Promise} the promise for flexibility settings
	 * @private
	 */
	SmartForm.prototype._addChangeModeToToolbar = function() {
		if (!Settings.isFlexChangeMode()) {
			_removeFlexButtonFromToolbar.call(this); // to be sure
			return Promise.resolve();
		}

		var bIsInDialog = !!this._getContainingDialog(this);
		if (bIsInDialog || Settings.isFlexibilityAdaptationButtonAllowed()) {
			return this._getAddChangeModelToToolbarPromise();
		}
	};

	/**
	 * Creates the promise for the personalization button.
	 *
	 * @returns {Promise} the promise for the addition of the toolbar modification.
	 * @private
	 */
	SmartForm.prototype._getAddChangeModelToToolbarPromise = function() {
		var that = this;

		var bIsFlexEnabled = this.getFlexEnabled();
		if (bIsFlexEnabled) {
			var sComponentName = Utils.getComponentClassName(this);
			var oAppDescriptor = Utils.getAppDescriptor(this);
			var sAppVersion = Utils.getAppVersionFromManifest(oAppDescriptor);
			var mPropertyBag = {
				appDescriptor: oAppDescriptor,
				siteId: Utils.getSiteId(this)
			};

			return Settings.getInstance(sComponentName, sAppVersion, mPropertyBag).then(function(oSettings) {
				if (oSettings.isKeyUser() && Utils.checkControlId(that)) {
					_addFlexButtonToToolbar.call(that);
				}
			});
		} else {
			_removeFlexButtonFromToolbar.call(this); // to be sure
			return Promise.resolve();
		}
	};

	/**
	 * Handles press of personalization button.
	 *
	 * @param {sap.ui.base.Event} oEvent event from the pressing of the adaptation button
	 * @private
	 */
	SmartForm.prototype._handleAdaptationButtonPress = function(oEvent) {
		var oAdaptationButton = oEvent.getSource();
		oAdaptationButton.setEnabled(false);

		jQuery.sap.require("sap.ui.rta.RuntimeAuthoring");
		var oRta = new sap.ui.rta.RuntimeAuthoring({
			triggeredFromDialog : true,
			rootControl: this._getContainingDialog(this)
		});

		oRta.attachStop(function(oAdaptationButton) {
			oAdaptationButton.setEnabled(true);
		}.bind(this, oAdaptationButton));

		oRta.start();
	};

	/**
	 * Determination of the Dialog in which the <code>SmartForm</code> is embedded. Returns undefined if the <code>SmartForm</code> is not embedded in any dialog.
	 *
	 * @param {sap.ui.base.Control} oControl control to check if it is a <code>sap.m.Dialog</code> or contained in one
	 * @return {sap.m.Dialog | undefined} - the control itself if it is a <code>sap.m.Dialog</code>, the dialog containing the object or undefined
	 *         in the control is not wihtin a dialog
	 * @private
	 */
	SmartForm.prototype._getContainingDialog = function(oControl) {
		if (!oControl) {
			return undefined;
		}

		if (oControl.getMetadata && oControl.getMetadata().getName() === "sap.m.Dialog") {
			return oControl;
		}

		return this._getContainingDialog(oControl.getParent());
	};

	/**
	 * Checks smart fields for client errors.
	 *
	 * @param {boolean} bConsiderOnlyVisible Determines is only visible fields in visible groups should be considered. default: <code>true</code>
	 * @returns {string[]} An array of fields with errors
	 * @public
	 */
	SmartForm.prototype.check = function(bConsiderOnlyVisible) {

		if (bConsiderOnlyVisible === undefined) {
			bConsiderOnlyVisible = true;
		}

		var aErroneousFields = this._checkClientError(bConsiderOnlyVisible);
		return aErroneousFields;
	};

	/**
	 * Check smart fields for client errors.
	 *
	 * @param {boolean} bConsiderOnlyVisible determines if only visible filters of visible <code>groups</code> and <code>groupElements</code> should be considered. Default. <code>true</code>
	 * @returns {string[]} an array of fields with errors
	 * @private
	 */
	SmartForm.prototype._checkClientError = function(bConsiderOnlyVisible) {

		if (bConsiderOnlyVisible === undefined) {
			bConsiderOnlyVisible = true;
		}

		var aFields = this.getSmartFields(bConsiderOnlyVisible, bConsiderOnlyVisible);
		var aErroneousFields = [];
		var oGroup = null;
		aFields.forEach(function(oField) {
			if (oField.checkClientError()) {

				if (bConsiderOnlyVisible && oField.getVisible) {
					if (!oField.getVisible()) {
						return;
					}
				}

				oGroup = oField.getParent();
				while (oGroup.getParent) {
					oGroup = oGroup.getParent();
					if (oGroup instanceof sap.ui.comp.smartform.Group) {
						if (!oGroup.getExpanded()) {
							oGroup.setExpanded(true);
						}
						break;
					}
				}
				aErroneousFields.push(oField.getId());
			}
		});
		return aErroneousFields;
	};

	/**
	 * Displays error message.
	 * @param {array} aErroneousFields field with error
	 * @private
	 */
	SmartForm.prototype._displayError = function(aErroneousFields) {

		var sErrorTitle = this._oRb.getText("FORM_CLIENT_CHECK_ERROR_TITLE");
		var sErrorMessage = this._oRb.getText("FORM_CLIENT_CHECK_ERROR");

		MessageBox.show(sErrorMessage, {
			icon: MessageBox.Icon.ERROR,
			title: sErrorTitle,
			styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : ""
		});
	};

	SmartForm.prototype.setEditable = function(bEditable) {

		var bOldEditable = this.getEditable();
		if (bOldEditable === bEditable) {
			return this;
		}

		if (!bEditable && this.hasListeners("editToggled")) {
			var aErroneousFields = this.check(true);
			if (aErroneousFields && aErroneousFields.length > 0) {
				this._displayError(aErroneousFields);
				return this;
			}
		}

		this.setProperty("editable", bEditable);
		if (this._oForm) {
			this._oForm.setEditable(bEditable);
		}

		this.fireEditToggled({
			editable: bEditable
		});

		if (this._oEditToggleButton) {
			this._oEditToggleButton.setIcon(bEditable ? "sap-icon://display" : "sap-icon://edit");
			var sTooltip = this._oRb.getText(bEditable ? "FORM_TOOLTIP_DISPLAY" : "FORM_TOOLTIP_EDIT");
			this._oEditToggleButton.setTooltip(sTooltip);
		}

		var aGroup = this.getGroups();
		aGroup.forEach(function(oGroup) {
			oGroup.setEditMode(bEditable);
		});

		if (this.getCheckButton() && bEditable) {
			_addCheckButtonToToolbar.call(this);
		} else {
			_removeCheckButtonFromToolbar.call(this);
		}

		return this;

	};

	SmartForm.prototype.setEditTogglable = function(bTogglable) {

		this.setProperty("editTogglable", bTogglable, true); // do not need to rerender whole Form

		if (bTogglable) {
			_addEditableButtonToToolbar.call(this);
		} else {
			_removeEditableButtonFromToolbar.call(this);
		}

		return this;

	};

	SmartForm.prototype.setTitle = function(sTitle) {

		this.setProperty("title", sTitle, true); // do not need to rerender whole Form

		if (sTitle) {
			if (!this._oTitle) {
				this._oTitle = new Title(this.getId() + "-title-sfmain").addStyleClass("title");
			}
			this._oTitle.setText(sTitle);
			this._oForm.addAriaLabelledBy(this._oTitle);
			_addTitleToToolbar.call(this);
		} else if (this._oTitle) {
			_removeTitleFromToolbar.call(this);
			this._oForm.removeAriaLabelledBy(this._oTitle);
			this._oTitle.destroy();
			this._oTitle = null;
		}

		return this;

	};

	SmartForm.prototype.setCheckButton = function(bCheckButton) {

		this.setProperty("checkButton", bCheckButton, true); // do not need to rerender whole Form

		if (bCheckButton) {
			_addCheckButtonToToolbar.call(this);
		} else {
			_removeCheckButtonFromToolbar.call(this);
		}

		return this;

	};

	SmartForm.prototype.setUseHorizontalLayout = function(bUseHorizontalLayout) {

		var bOldUseHorizontalLayout = this.getUseHorizontalLayout();

		if (bOldUseHorizontalLayout !== bUseHorizontalLayout) {
			this.setProperty("useHorizontalLayout", bUseHorizontalLayout);

			if (bUseHorizontalLayout) {
				this.addStyleClass("sapUiCompSmartFormHorizontalLayout");
			} else {
				this.removeStyleClass("sapUiCompSmartFormHorizontalLayout");
			}

			// update groups
			var aGroup = this.getGroups();
			if (aGroup) {
				aGroup.forEach(function(oGroup) {
					oGroup.setUseHorizontalLayout(bUseHorizontalLayout);
				});
			}

			var oLayout = this.getLayout();
			if (bUseHorizontalLayout) {
				// if ResponsiveLayout is needed this will be checked before rendering as Layout needs to be updated before
				_updateResponsiveGridLayout.call(this, oLayout);
			} else {
				// ResponsiveLayout not longer needed (if used) - remove and create new ResponsiveGridLayout and use Layouts settings
				_useResponsiveLayout.call(this);
				_updateResponsiveGridLayout.call(this, oLayout);
			}
		}

		return this;

	};

	SmartForm.prototype.setLayout = function(oLayout) {

		var oOldLayout = this.getLayout();
		if (oOldLayout == oLayout) {
			return this;
		}

		if (oOldLayout) {
			oOldLayout.detachEvent("_change", _handleLayoutChanged, this);
		}

		this.setAggregation("layout", oLayout);

		if (oLayout) {
			oLayout.attachEvent("_change", _handleLayoutChanged, this);
		}
		this.propagateGridDataSpan();

		// now we can decide to use ResponsiveLayout or not
		_useResponsiveLayout.call(this);
		_updateResponsiveGridLayout.call(this, oLayout);

		return this;

	};

	SmartForm.prototype.destroyLayout = function() {

		var oOldLayout = this.getLayout();
		if (!oOldLayout) {
			return this;
		}

		this.destroyAggregation("layout");

		this.propagateGridDataSpan();

		// now we can decide to use ResponsiveLayout or not
		_useResponsiveLayout.call(this);
		_updateResponsiveGridLayout.call(this, null);

		return this;

	};

	SmartForm.prototype.setHorizontalLayoutGroupElementMinWidth = function(nMinWidth) {

		var nOldValue = this.getHorizontalLayoutGroupElementMinWidth();
		if (nOldValue == nMinWidth) {
			return this;
		}

		jQuery.sap.log.error("HorizontalLayoutGroupElementMinWidth is deprecated", this);

		this.setProperty("horizontalLayoutGroupElementMinWidth", nMinWidth);

		// update groups
		var aGroup = this.getGroups();
		if (aGroup) {
			aGroup.forEach(function(oGroup) {
				oGroup.setHorizontalLayoutGroupElementMinWidth(nMinWidth);
			});
		}
		return this;
	};

	/**
	 * Returns the array of properties currently visible on the UI.
	 *
	 * @return {string[]} The properties currently visible
	 * @public
	 */
	SmartForm.prototype.getVisibleProperties = function() {

		var aProperty = [];

		var aGroup = this.getGroups();
		if (aGroup) {
			aGroup.forEach(function(oGroup) {
				var aGroupElements = oGroup.getGroupElements();
				if (aGroupElements.length > 0) {
					aGroupElements.forEach(function(oGroupElement) {
						var aElements = oGroupElement.getElements();
						if (aElements.length > 0) {
							aElements.forEach(function(oElement) {
								if (oElement.getVisible()) {
									var sPath = oElement.getBindingPath("value");
									if (sPath) {
										aProperty.push(sPath);
									}
								}
							});
						}
					});
				}
			});
		}

		return aProperty;

	};

	SmartForm.prototype.setCustomToolbar = function(oCustomToolbar) {

		var oOldCustomToolbar = this.getCustomToolbar();

		if (oOldCustomToolbar == oCustomToolbar) {
			return this;
		}

		// remove content from old toolbar
		_removeTitleFromToolbar.call(this);
		_removeEditableButtonFromToolbar.call(this);
		_removeCheckButtonFromToolbar.call(this);
		_removeFlexButtonFromToolbar.call(this);

		this.setAggregation("customToolbar", oCustomToolbar);

		// add content to new toolbar
		if (this.getTitle()) {
			_addTitleToToolbar.call(this);
		}
		if (this.getEditTogglable()) {
			_addEditableButtonToToolbar.call(this);
		}
		if (this.getCheckButton()) {
			_addCheckButtonToToolbar.call(this);
		}
		//FlexButton is added onBeforeRendering

		return this;

	};

	SmartForm.prototype.destroyCustomToolbar = function() {

		var oCustomToolbar = this.getCustomToolbar();

		if (oCustomToolbar) {
			// remove content from cutomToolbar
			_removeTitleFromToolbar.call(this);
			_removeEditableButtonFromToolbar.call(this);
			_removeCheckButtonFromToolbar.call(this);
		}

		this.destroyAggregation("customToolbar");

		// add content to private toolbar
		if (this.getTitle()) {
			_addTitleToToolbar.call(this);
		}
		if (this.getEditTogglable()) {
			_addEditableButtonToToolbar.call(this);
		}
		if (this.getCheckButton()) {
			_addCheckButtonToToolbar.call(this);
		}

		return this;

	};

	SmartForm.prototype.setExpandable = function(bExpandable) {

		this.setProperty("expandable", bExpandable);

		if (bExpandable) {
			if (!this._oPanel) {
				this._oPanel = new Panel( this.getId() + "--Panel", {
					expanded: this.getExpanded(),
					expandable: true,
					headerText: this.getTitle(),
					expandAnimation: false
				});

				this._oPanel.getHeaderToolbar = function(){
					var oSmartForm = this.getParent();
					if (oSmartForm) {
						return oSmartForm._getToolbar();
					}
				};

				this._oPanel.attachExpand(_handlePanelExpand, this);
			}
			this.setAggregation("content", this._oPanel);
			this._oPanel.addContent(this._oForm);
		} else if (this._oPanel) {
			// just put Form back to Content
			this.setAggregation("content", this._oForm);
			this._oPanel.destroy();
			this._oPanel = null;
		}

		return this;

	};

	function _handlePanelExpand(oEvent) {

		this.setProperty("expanded", oEvent.getParameter("expand"), true); // no invalidation of SmartForm

	}

	SmartForm.prototype.setExpanded = function(bExpanded) {

		this.setProperty("expanded", bExpanded);

		if (this._oPanel) {
			this._oPanel.setExpanded(bExpanded);
		}

		return this;

	};

	/**
	 * Adds some customData into the aggregation <code>customData</code>.
	 *
	 * <b>Note:</b> <code>customData</code> that is used by the <code>SmartField</code> control itself
	 * is also added to the <code>Group</code> elements, <code>GroupElement</code> elements
	 * and the <code>SmartField</code> controls in the children hierarchy.
	 * Additional <code>customData</code> that is not used by the <code>SmartField</code> control
	 * internally might not be added.
	 *
	 * @param {sap.ui.core.CustomData} oCustomData the customData to add; if empty, nothing is added
	 * @return {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.addCustomData = function(oCustomData) {

		if (!oCustomData) {
			return this;
		}

		Control.prototype.addCustomData.apply(this, arguments);

		var aGroups = this.getGroups();
		for (var i = 0; i < aGroups.length; i++) {
			_addCustomDataToGroup.call(this, aGroups[i], oCustomData);
		}

		return this;

	};

	/**
	 * Inserts some customData into the aggregation <code>customData</code>.
	 *
	 * <b>Note:</b> <code>customData</code> that is used by the <code>SmartField</code> control itself
	 * is also added to the <code>Group</code> elements, <code>GroupElement</code> elements
	 * and the <code>SmartField</code> controls in the children hierarchy.
	 * Additional <code>customData</code> that is not used by the <code>SmartField</code> control
	 * internally might not be added.
	 *
	 * @param {sap.ui.core.CustomData} oCustomData the customData to insert; if empty, nothing is inserted
	 * @param {int} iIndex the 0-based index the customData should be inserted at; for a negative value of iIndex, the customData is inserted at position 0; for a value greater than the current size of the aggregation, the customData is inserted at the last position
	 * @return {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> to allow method chaining.
	 * @public
	 */
	SmartForm.prototype.insertCustomData = function(oCustomData, iIndex) {

		if (!oCustomData) {
			return this;
		}

		Control.prototype.insertCustomData.apply(this, arguments);

		var aGroups = this.getGroups();
		for (var i = 0; i < aGroups.length; i++) {
			// order doesn't matter
			_addCustomDataToGroup.call(this, aGroups[i], oCustomData);
		}

		return this;

	};

	SmartForm.prototype.removeCustomData = function(vCustomData) {

		var oCustomData = Control.prototype.removeCustomData.apply(this, arguments);

		if (oCustomData) {
			var aGroups = this.getGroups();
			for (var i = 0; i < aGroups.length; i++) {
				_removeCustomData.call(this, aGroups[i], oCustomData.getId());
			}
		}

		return oCustomData;

	};

	SmartForm.prototype.removeAllCustomData = function() {

		var aCustomData = Control.prototype.removeAllCustomData.apply(this, arguments);

		if (aCustomData.length > 0) {
			var aGroups = this.getGroups();
			for (var i = 0; i < aGroups.length; i++) {
				_removeCustomData.call(this, aGroups[i]);
			}
		}

		return aCustomData;

	};

	SmartForm.prototype.destroyCustomData = function() {

		Control.prototype.destroyCustomData.apply(this, arguments);

		var aGroups = this.getGroups();
		for (var i = 0; i < aGroups.length; i++) {
			_removeCustomData.call(this, aGroups[i]);
		}

		return this;

	};

	function _inheritCustomData(oGroup) {

		var aCustomData = this.getCustomData();

		for (var i = 0; i < aCustomData.length; i++) {
			_addCustomDataToGroup.call(this, oGroup, aCustomData[i]);
		}

	}

	function _addCustomDataToGroup(oGroup, oCustomData) {

		if (sap.ui.comp.smartform.inheritCostomDataToFields(oCustomData)) {
			var oNewCustomData = oCustomData.clone();
			oNewCustomData._bFromSmartForm = true;
			oNewCustomData._sOriginalId = oCustomData.getId();
			oGroup.addCustomData(oNewCustomData);
		}

	}

	function _removeCustomData(oGroup, sOriginalId) {

		var aCustomData = oGroup.getCustomData();

		for (var i = 0; i < aCustomData.length; i++) {
			var oCustomData = aCustomData[i];
			if (oCustomData._bFromSmartForm && (!sOriginalId || sOriginalId == oCustomData._sOriginalId)) {
				oGroup.removeCustomData(oCustomData);
			}
		}

	}

	/**
	 * Delegates the edit mode from the <code>SmartForm</code> to the given group
	 *
	 * @private
	 * @param {object} oGroup on which the editable property should be set
	 */
	SmartForm.prototype._delegateEditMode = function(oGroup) {
		if (oGroup) {
			oGroup.setEditMode(this.getEditable());
		}
	};

	/**
	 * Retrieves all the smart fields of the form.
	 *
	 * <b>Note:</b> Even invisible <code>SmartField</code> controls are returned if the <code>group</code> or <code>groupElement</code> is visible.
	 *
	 * @param {boolean} bConsiderOnlyVisibleGroups Determines if only visible <code>groups</code> are taken into account; default is true
	 * @param {boolean} bConsiderOnlyVisibleGroupElements Determines if only visible <code>groupElement</code> elements are taken into account; default is false (to be compatible)
	 * @return {sap.ui.comp.smartfield.SmartField[]} An array of smart fields (might be empty).
	 * @public
	 */
	SmartForm.prototype.getSmartFields = function(bConsiderOnlyVisibleGroups, bConsiderOnlyVisibleGroupElements) {
		var aGroups = [];
		var aGroupElements = [];
		var aElements = [];
		var aSmartFields = [];

		if (bConsiderOnlyVisibleGroups === undefined) {
			bConsiderOnlyVisibleGroups = true;
		}

		aGroups = this.getGroups();

		for (var i = 0; i < aGroups.length; i++) {
			var oGroup = aGroups[i];
			if (!bConsiderOnlyVisibleGroups || (bConsiderOnlyVisibleGroups && oGroup.getVisible())) {
				aGroupElements = oGroup.getGroupElements();
				for (var j = 0; j < aGroupElements.length; j++) {
					var oGroupElement = aGroupElements[j];
					if (!bConsiderOnlyVisibleGroupElements || (bConsiderOnlyVisibleGroupElements && oGroupElement.getVisible())) {
						aElements = oGroupElement.getElements();
						for (var k = 0; k < aElements.length; k++) {
							var oElement = aElements[k];
							if (oElement instanceof sap.ui.comp.smartfield.SmartField) {
								aSmartFields.push(oElement);
							}
						}
					}
				}
			}
		}

		return aSmartFields;
	};

	/**
	 * Sets the focus on the first editable control.
	 *
	 * @since 1.36.0
	 * @public
	 */
	SmartForm.prototype.setFocusOnEditableControl = function() {
		var aControls = [];
		this.getGroups().forEach(function(oGroup) {
			if (oGroup.getVisible()) {
				oGroup.getGroupElements().forEach(function(oGroupElement) {
					if (oGroupElement.getVisible()) {
						aControls = aControls.concat(oGroupElement.getElements());
					}
				});
			}
		});

		aControls.some(function(oControl) {
			if (oControl.getEditable && oControl.getEditable() && oControl.focus && oControl.getVisible()) {

				if (oControl instanceof sap.ui.comp.smartfield.SmartField) {
					oControl.attachEventOnce("innerControlsCreated", function(oEvent) {
						jQuery.sap.delayedCall(0, oEvent.oSource._oControl[oEvent.oSource._oControl.current], "focus");
					});
				} else {
					oControl.focus();
				}
				return true;
			}
		});
	};

	/*
	 * As we do not want to clone internal controls like Form, Layout, Panel, Toolbar, ToolbarButtons or CustomData
	 * we need to remove them from the aggregations before cloning and add them afterwards.
	 * As Groups have cloned CustomData, the CustomData must be removed from the groups and added again.
	 */
	SmartForm.prototype.clone = function(sIdSuffix, aLocalIds) {

		this.setAggregation("content", null);
		var oLayout = this.getLayout();
		var oToolbar = this.getAggregation("toolbar");
		var oCustomToolbar = this.getCustomToolbar();
		var aCustomData = this.getCustomData();
		var aGroups = this.getGroups();
		var i = 0;

		if (oLayout) {
			oLayout.detachEvent("_change", _handleLayoutChanged, this);
		}

		if (oCustomToolbar) {
			_removeTitleFromToolbar.call(this);
			_removeEditableButtonFromToolbar.call(this);
			_removeCheckButtonFromToolbar.call(this);
			_removeFlexButtonFromToolbar.call(this);
		} else if (oToolbar) {
			this.setAggregation("toolbar", null);
		}

		if (aCustomData.length > 0) {
			for (i = 0; i < aGroups.length; i++) {
				_removeCustomData.call(this, aGroups[i]);
			}
		}

		var oClone = Control.prototype.clone.apply(this, arguments);

		// clone groups manually as assigned to internal Form that is not cloned
		for (i = 0; i < aGroups.length; i++) {
			var oGroupClone = aGroups[i].clone(sIdSuffix, aLocalIds);
			oClone.addGroup(oGroupClone);
		}

		if (this.getExpandable()) {
			this.setAggregation("content", this._oPanel);
		} else {
			this.setAggregation("content", this._oForm);
		}

		if (oLayout) {
			oLayout.attachEvent("_change", _handleLayoutChanged, this);
		}

		if (oCustomToolbar) {
			if (this.getTitle()) {
				_addTitleToToolbar.call(this);
			}
			if (this.getEditTogglable()) {
				_addEditableButtonToToolbar.call(this);
			}
			if (this.getCheckButton()) {
				_addCheckButtonToToolbar.call(this);
			}
		} else if (oToolbar) {
			this.setAggregation("toolbar", oToolbar);
		}

		if (aCustomData.length > 0) {
			for (i = 0; i < aGroups.length; i++) {
				_inheritCustomData.call(this, aGroups[i]);
			}
		}

		return oClone;
	};

	SmartForm.prototype.exit = function() {
		if (this._oForm) {
			this._oForm.destroy();
		}
		if (this._oPanel) {
			this._oPanel.destroy();
		}
		if (this._oTitle) {
			this._oTitle.destroy();
		}
		if (this._oEditToggleButton) {
			this._oEditToggleButton.destroy();
		}

		this._oForm = null;
		this._oPanel = null;
		this._oTitle = null;
		this._oRb = null;
		this._oEditToggleButton = null;
	};

	// Toolbar handling
	function _createToolbar() {

		var oToolbar = this.getAggregation("toolbar");

		if (!oToolbar) {
			oToolbar = new OverflowToolbar(this.getId() + "-toolbar-sfmain", {
				"height": "3rem",
				"design": sap.m.ToolbarDesign.Transparent
			});
			oToolbar._bCreatedBySmartForm = true;
			this.setAggregation("toolbar", oToolbar);
		}

		return oToolbar;

	}

	function _destroyToolbar(bCheck) {

		var oToolbar = this.getAggregation("toolbar");

		if (oToolbar) {
			if (bCheck) {
				var aContent = oToolbar.getContent();
				if (aContent.length > 0) {
					return;
				}
			}
			this.destroyAggregation("toolbar");
		}

	}

	function _addTitleToToolbar() {

		if (!this._oTitle) {
			return;
		}

		var oToolbar = this._getToolbar();
		if (!oToolbar) {
			oToolbar = _createToolbar.call(this);
		}

		oToolbar.insertContent(this._oTitle, 0);

	}

	function _removeTitleFromToolbar() {

		if (!this._oTitle) {
			return;
		}

		var oToolbar = this._getToolbar();

		oToolbar.removeContent(this._oTitle);

		_destroyToolbar.call(this, true);

	}

	function _addEditableButtonToToolbar() {

		if (!this.getEditTogglable()) {
			return;
		}

		var oToolbar = this._getToolbar();
		if (!oToolbar) {
			oToolbar = _createToolbar.call(this);
		}

		if (!this._oCheckButton && !this._oFlexButton) {
			// Separator if first button
			_addSeparatorToToolbar.call(this, oToolbar);
		}

		if (!this._oEditToggleButton) {
			var sIconSrc = this.getEditable() ? "sap-icon://display" : "sap-icon://edit";
			var sTooltip = this._oRb.getText(this.getEditable() ? "FORM_TOOLTIP_DISPLAY" : "FORM_TOOLTIP_EDIT");

			this._oEditToggleButton = new Button(oToolbar.getId() + "-button-sfmain-editToggle", {
				type: ButtonType.Default,
				icon: sIconSrc,
				tooltip: sTooltip
			});

			this._oEditToggleButton.attachPress(this._toggleEditMode, this);
		}

		var iIndex = oToolbar.getContent().length;
		if (this._oCheckButton) {
			iIndex--;
		}
		if (this._oFlexButton) {
			iIndex--;
		}

		oToolbar.insertContent(this._oEditToggleButton, iIndex);

	}

	function _removeEditableButtonFromToolbar() {

		if (!this._oEditToggleButton) {
			return;
		}

		var oToolbar = this._getToolbar();
		oToolbar.removeContent(this._oEditToggleButton);
		this._oEditToggleButton.destroy();
		this._oEditToggleButton = null;

		_removeSeparatorFromToolbar.call(this, oToolbar);
		_destroyToolbar.call(this, true);

	}

	function _addCheckButtonToToolbar() {

		if (!this.getCheckButton() || !this.getEditable()) {
			return;
		}

		var oToolbar = this._getToolbar();
		if (!oToolbar) {
			oToolbar = _createToolbar.call(this);
		}

		if (!this._oEditToggleButton && !this._oFlexButton) {
			// Separator if first button
			_addSeparatorToToolbar.call(this, oToolbar);
		}

		if (!this._oCheckButton) {
			this._oCheckButton = new Button(this.getId() + "-" + oToolbar.getId() + "-button-sfmain-check", {
				type: ButtonType.Default,
				text: this._oRb.getText("SMART_FORM_CHECK")
			});

			this._oCheckButton.attachPress(_checkForm, this);
		}


		var iIndex = oToolbar.getContent().length;
		if (this._oFlexButton) {
			iIndex--;
		}

		oToolbar.insertContent(this._oCheckButton, iIndex);

	}

	function _removeCheckButtonFromToolbar() {

		if (!this._oCheckButton) {
			return;
		}

		var oToolbar = this._getToolbar();
		oToolbar.removeContent(this._oCheckButton);
		this._oCheckButton.destroy();
		this._oCheckButton = null;

		_removeSeparatorFromToolbar.call(this, oToolbar);
		_destroyToolbar.call(this, true);

	}

	function _checkForm(oEvent) {

		var aErroneousFields = [];
		aErroneousFields = this.check();
		this.fireChecked({
			erroneousFields: aErroneousFields
		});

	}

	function _addFlexButtonToToolbar() {

		var oToolbar = this._getToolbar();
		if (!oToolbar) {
			oToolbar = _createToolbar.call(this);
			oToolbar.addStyleClass("titleBar");
		}

		if (!this._oEditToggleButton && !this._oFlexButton) {
			// Separator if first button
			_addSeparatorToToolbar.call(this, oToolbar);
		}

		if (!this._oFlexButton) {
			this._oFlexButton = new Button(this.getId() + "-" + oToolbar.getId() + "-AdaptationButton", {
				type: ButtonType.Default,
				icon: "sap-icon://wrench",
				tooltip: this._oRb.getText("FORM_TOOLTIP_SETTINGS")
			});

			this._oFlexButton.attachPress(this._handleAdaptationButtonPress, this);
		}

		var iIndex = oToolbar.getContent().length;
		oToolbar.insertContent(this._oFlexButton, iIndex);

	}

	function _removeFlexButtonFromToolbar() {

		if (!this._oFlexButton) {
			return;
		}

		var oToolbar = this._getToolbar();
		oToolbar.removeContent(this._oFlexButton);
		this._oFlexButton.destroy();
		this._oFlexButton = null;

		_removeSeparatorFromToolbar.call(this, oToolbar);
		_destroyToolbar.call(this, true);

	}

	function _addSeparatorToToolbar(oToolbar) {

		var oToolbarSpacer;

		if (!oToolbar._bCreatedBySmartForm) {
			var aContent = oToolbar.getContent();

			// add spacer to customToolbar
			var bFound = false;
			for (var i = 0; i < aContent.length; i++) {
				if (aContent[i] instanceof ToolbarSpacer) {
					bFound = true;
					break;
				}
			}
			if (!bFound) {
				oToolbarSpacer = new ToolbarSpacer();
				oToolbarSpacer._bCreatedBySmartForm = true;
				oToolbar.addContent(oToolbarSpacer);
			}

			if (!(aContent[aContent.length - 1] instanceof ToolbarSeparator)) {
				var oSeparator = new ToolbarSeparator();
				oSeparator._bCreatedBySmartForm = true;
				oToolbar.addContent(oSeparator);
			}
		} else {
			// in private toolbar no separtaor - just spacer
			oToolbarSpacer = new ToolbarSpacer();
			oToolbarSpacer._bCreatedBySmartForm = true;
			oToolbar.addContent(oToolbarSpacer);
		}

	}

	function _removeSeparatorFromToolbar(oToolbar) {

		var aContent = oToolbar.getContent();
		var oLastControl;
		if (!oToolbar._bCreatedBySmartForm) {
			// remove Separator from customToolbar
			oLastControl = aContent[aContent.length - 1];
			if (oLastControl instanceof ToolbarSeparator && oLastControl._bCreatedBySmartForm) {
				oLastControl.destroy();
			}

			aContent = oToolbar.getContent();
		}

		oLastControl = aContent[aContent.length - 1];
		if (oLastControl instanceof ToolbarSpacer && oLastControl._bCreatedBySmartForm) {
			oLastControl.destroy();
		}

	}

	function _createResponsiveGridLayout() {

		this._oFormLayoutNotInitial = true;
		var oFormLayout = new ResponsiveGridLayout();
		_initResponsiveGridLayout.call(this, oFormLayout);
		return oFormLayout;

	}

	function _useResponsiveLayout() {

		var oLayout = this.getLayout();
		var oFormLayout = this._oForm.getLayout();
		var bLayoutChanged = false;

		if (this.getUseHorizontalLayout() && (!oLayout || !oLayout.getGridDataSpan())) {
			if (!(oFormLayout instanceof sap.ui.layout.form.ResponsiveLayout)) {
				oFormLayout.destroy();
				oFormLayout = new sap.ui.layout.form.ResponsiveLayout();
				this._oForm.setLayout(oFormLayout);
				bLayoutChanged = true;
			}
		} else if (!(oFormLayout instanceof sap.ui.layout.form.ResponsiveGridLayout)){
			oFormLayout.destroy();
			oFormLayout = _createResponsiveGridLayout.call(this);
			this._oForm.setLayout(oFormLayout);
			_updateResponsiveGridLayout.call(this, oLayout);
			bLayoutChanged = true;
		}

		if (bLayoutChanged) {
			var aGroups = this.getGroups();
			for (var i = 0; i < aGroups.length; i++) {
				var oGroup = aGroups[i];
				oGroup._updateLayoutData();
			}
		}

	}

	function _updateResponsiveGridLayout(oLayout) {

		var oFormLayout = this._oForm.getLayout();
		if (!(oFormLayout instanceof sap.ui.layout.form.ResponsiveGridLayout)) {
			return;
		}

		if (this.getUseHorizontalLayout()) {
			if (oLayout && oLayout.getGridDataSpan()) {
				_initResponsiveGridLayout.call(this, oFormLayout);
				oFormLayout.setColumnsL(1);
				oFormLayout.setColumnsM(1);
				if (oLayout.getBreakpointM() > 0) {
					oFormLayout.setBreakpointM(oLayout.getBreakpointM());
				}
				if (oLayout.getBreakpointL() > 0) {
					oFormLayout.setBreakpointL(oLayout.getBreakpointL());
				}
				if (oLayout.getBreakpointXL() > 0) {
					oFormLayout.setBreakpointXL(oLayout.getBreakpointXL());
				}
				this._oFormLayoutNotInitial = true;
			}
		} else {
			if (oLayout) {
				oFormLayout.setLabelSpanXL(oLayout.getLabelSpanXL() ? oLayout.getLabelSpanXL() : -1);
				oFormLayout.setLabelSpanL(oLayout.getLabelSpanL() ? oLayout.getLabelSpanL() : 4);
				oFormLayout.setLabelSpanM(oLayout.getLabelSpanM() ? oLayout.getLabelSpanM() : 4);
				oFormLayout.setLabelSpanS(oLayout.getLabelSpanS() ? oLayout.getLabelSpanS() : 12);
				oFormLayout.setEmptySpanXL(oLayout.getEmptySpanXL() ? oLayout.getEmptySpanXL() : -1);
				oFormLayout.setEmptySpanL(oLayout.getEmptySpanL() ? oLayout.getEmptySpanL() : 0);
				oFormLayout.setEmptySpanM(oLayout.getEmptySpanM() ? oLayout.getEmptySpanM() : 0);
				oFormLayout.setColumnsXL(oLayout.getColumnsXL() ? oLayout.getColumnsXL() : -1);
				oFormLayout.setColumnsL(oLayout.getColumnsL() ? oLayout.getColumnsL() : 3);
				oFormLayout.setColumnsM(oLayout.getColumnsM() ? oLayout.getColumnsM() : 2);
				oFormLayout.setSingleContainerFullSize(oLayout.getSingleGroupFullSize());
				oFormLayout.setBreakpointXL(oLayout.getBreakpointXL() ? oLayout.getBreakpointXL() : 1440);
				oFormLayout.setBreakpointL(oLayout.getBreakpointL() ? oLayout.getBreakpointL() : 1024);
				oFormLayout.setBreakpointM(oLayout.getBreakpointM() ? oLayout.getBreakpointM() : 600);
				this._oFormLayoutNotInitial = true;
			} else {
				_initResponsiveGridLayout.call(this, oFormLayout);
			}
			_updateColumnsForLayout.call(this, oLayout, oFormLayout);
		}

	}

	function _updateColumnsForLayout(oLayout, oFormLayout) {

		if (this.getUseHorizontalLayout()) {
			return;
		}

		if (!oFormLayout) {
			oFormLayout = this._oForm.getLayout();
			oLayout = this.getLayout();
		}

		var aGroups = this.getGroups();
		var iColumnsXL = -1;
		var iColumnsL = 3;
		var bSingleContainerFullSize = true;
		var iVisibleGroups = 0;

		for (var i = 0; i < aGroups.length; i++) {
			if (aGroups[i].getVisible()) {
				iVisibleGroups++;
			}
		}

		if (oLayout) {
			iColumnsL = oLayout.getColumnsL() ? oLayout.getColumnsL() : 3;
			iColumnsXL = (oLayout.getColumnsXL() > 0) ? oLayout.getColumnsXL() : -1;
			bSingleContainerFullSize = oLayout.getSingleGroupFullSize();
		}

		if (aGroups && iVisibleGroups > 0 && iVisibleGroups < iColumnsXL && bSingleContainerFullSize) {
			oFormLayout.setColumnsXL(iVisibleGroups);
		} else if (oFormLayout.getColumnsXL() != iColumnsXL) {
			oFormLayout.setColumnsXL(iColumnsXL); // to restet to default if group number increased
		}

		if (aGroups && iVisibleGroups > 0 && iVisibleGroups < iColumnsL && bSingleContainerFullSize) {
			oFormLayout.setColumnsL(iVisibleGroups);
		} else if (oFormLayout.getColumnsL() != iColumnsL) {
			oFormLayout.setColumnsL(iColumnsL); // to restet to default if group number increased
		}

	}

	function _initResponsiveGridLayout(oFormLayout) {

		if (this._oFormLayoutNotInitial) {
			oFormLayout.setLabelSpanXL(-1);
			oFormLayout.setLabelSpanL(4);
			oFormLayout.setLabelSpanM(4);
			oFormLayout.setLabelSpanS(12);
			oFormLayout.setEmptySpanXL(-1);
			oFormLayout.setEmptySpanL(0);
			oFormLayout.setEmptySpanM(0);
			oFormLayout.setColumnsXL(-1);
			oFormLayout.setColumnsL(3);
			oFormLayout.setColumnsM(2);
			oFormLayout.setSingleContainerFullSize(true);
			oFormLayout.setBreakpointXL(1440);
			oFormLayout.setBreakpointL(1024);
			oFormLayout.setBreakpointM(600);
			this._oFormLayoutNotInitial = false;
		}

	}

	function _handleLayoutChanged(oEvent) {

		var oLayout = oEvent.oSource;
		_updateResponsiveGridLayout.call(this, oLayout);

		if (oEvent.getParameter("name") == "gridDataSpan") {
			this.propagateGridDataSpan();
		}

	}

	return SmartForm;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/SmartForm.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.AddField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.AddField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/AddField",[
	"jquery.sap.global", "sap/ui/fl/Utils", "sap/ui/fl/changeHandler/Base", "sap/ui/fl/changeHandler/JsControlTreeModifier"
], function(jQuery, Utils, Base, JsControlTreeModifier) {
	"use strict";

	/**
	 * Change handler for adding a smart form group element (representing a field).
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.AddField
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.27.0
	 */
	var AddField = {};

	/**
	 * Adds a smart form group element incl. a value control.
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.Group|Element} oGroup group control that matches the change selector for applying the change
	 * @param {object} mPropertyBag - property bag
	 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
	 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
	 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
	 * @return {boolean} true if successfully added
	 * @public
	 */
	AddField.applyChange = function(oChange, oGroup, mPropertyBag) {
		var oChangeDefinition = oChange.getDefinition();

		var fnCheckChangeDefinition = function(oChangeDefinition) {
			var bMandatoryTextsArePresent = oChangeDefinition.texts && oChangeDefinition.texts.fieldLabel && oChangeDefinition.texts.fieldLabel.value;
			var bContentPresent = oChangeDefinition.content;
			var bMandatoryContentPresent = false;

			if (bContentPresent) {
				bMandatoryContentPresent = oChangeDefinition.content.field && (oChangeDefinition.content.field.selector || oChangeDefinition.content.field.id) &&
					oChangeDefinition.content.field.jsType && oChangeDefinition.content.field.value && oChangeDefinition.content.field.valueProperty;
			}

			return  bMandatoryTextsArePresent && bContentPresent && bMandatoryContentPresent;
		};

		var oModifier = mPropertyBag.modifier;
		var oView = mPropertyBag.view;


		if (fnCheckChangeDefinition(oChangeDefinition)) {
			var oChangeContent = oChangeDefinition.content;

			var sFieldSelector = oChangeContent.field.selector;
			var sFieldId = oChangeContent.field.id;
			var sLabelText = oChangeDefinition.texts.fieldLabel.value;
			var sJsType = oChangeContent.field.jsType;
			var sPropertyName = oChangeContent.field.valueProperty;
			var oPropertyValue = oChangeContent.field.value;
			var oEntitySet = oChangeContent.field.entitySet;
			var insertIndex = oChangeContent.field.index;

			var oGroupElement = oModifier.createControl("sap.ui.comp.smartform.GroupElement", mPropertyBag.appComponent, oView, sFieldSelector || sFieldId);


			oModifier.setProperty(oGroupElement, "label", undefined);
			oModifier.setProperty(oGroupElement, "label", sLabelText);

			oModifier.insertAggregation(oGroup, "groupElements", oGroupElement, insertIndex, oView);

			this.addElementIntoGroupElement(oModifier, oView, oGroupElement, sLabelText, sJsType, sPropertyName, oPropertyValue, oEntitySet, insertIndex, mPropertyBag.appComponent);
			return true;
		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChangeDefinition.layer + "]" + oChangeDefinition.namespace + "/" + oChangeDefinition.fileName + "." + oChangeDefinition.fileType);
			//however subsequent changes should be applied
		}
	};

	AddField.addElementIntoGroupElement = function(oModifier, oView, oGroupElement, sLabelText, sJsType, sPropertyName, oPropertyValue, sEntitySet, iIndex, oAppComponent) {

		var oValueControl = oModifier.createControl(sJsType, oAppComponent, oView);
		oModifier.bindProperty(oValueControl, sPropertyName, oPropertyValue);
		oModifier.insertAggregation(oGroupElement, "elements", oValueControl, iIndex, oView, true);
		if (sEntitySet) {
			oModifier.setProperty(oValueControl, "entitySet", sEntitySet);
		}
		//TODO Check if necessary
		// if (oValueControl.setTextLabel) {
		// 	oValueControl.setTextLabel(oChangeDefinition.texts["fieldLabel" + i].value);
		// }

	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo with attributes "fieldLabel", the field label to be included in the change,
	 * 								 "fieldValue", the value for the control that displays the value,
	 * 								 "valueProperty", the control property that holds the field value,
	 * 								 "newControlId", the control ID for the control to be added
	 * 								 and "jsType", the JavaScript control for the field value.
	 * @public
	 */
	AddField.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
		var oAppComponent = mPropertyBag.appComponent;
		var oChangeDefinition = oChange.getDefinition();

		if (oSpecificChangeInfo.fieldLabel) {
			Base.setTextInChange(oChangeDefinition, "fieldLabel", oSpecificChangeInfo.fieldLabel, "XFLD");
		} else {
			throw new Error("oSpecificChangeInfo.fieldLabel attribute required");
		}
		if (!oChangeDefinition.content) {
			oChangeDefinition.content = {};
		}
		if (!oChangeDefinition.content.field) {
			oChangeDefinition.content.field = {};
		}
		if (oSpecificChangeInfo.fieldValue) {
			oChangeDefinition.content.field.value = oSpecificChangeInfo.fieldValue;
		} else {
			throw new Error("oSpecificChangeInfo.fieldValue attribute required");
		}
		if (oSpecificChangeInfo.valueProperty) {
			oChangeDefinition.content.field.valueProperty = oSpecificChangeInfo.valueProperty;
		} else {
			throw new Error("oSpecificChangeInfo.valueProperty attribute required");
		}
		if ( oSpecificChangeInfo.newControlId ){
			oChangeDefinition.content.field.selector = JsControlTreeModifier.getSelector(oSpecificChangeInfo.newControlId, oAppComponent, {
				index : oSpecificChangeInfo.index
			});
		} else {
			throw new Error("oSpecificChangeInfo.newControlId attribute required");
		}
		if (oSpecificChangeInfo.jsType) {
			oChangeDefinition.content.field.jsType = oSpecificChangeInfo.jsType;
		} else {
			throw new Error("oSpecificChangeInfo.jsType attribute required");
		}
		if (oSpecificChangeInfo.index === undefined) {
			throw new Error("oSpecificChangeInfo.index attribute required");
		} else {
			oChangeDefinition.content.field.index = oSpecificChangeInfo.index;
		}
		if (oSpecificChangeInfo.entitySet){
			//an optional entity set can be configured
			oChangeDefinition.content.field.entitySet = oSpecificChangeInfo.entitySet;
		}

	};

	return AddField;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/AddField.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.AddFields') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.AddFields'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/AddFields",[
		"jquery.sap.global", "sap/ui/fl/Utils", "sap/ui/fl/changeHandler/Base", "sap/ui/fl/changeHandler/JsControlTreeModifier"],
		function(jQuery, Utils, Base, JsControlTreeModifier) {
	"use strict";

	/**
	 * Change handler for adding a smart form group element (representing one or more fields).
	 *
	 * @alias sap.ui.fl.changeHandler.AddFields
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.33.0
	 */
	var AddFields = { };

	/**
	 * Adds a smart form group element incl. one or more value controls.
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.Group|Element} oGroup group control or xml element that matches the change selector for applying the change
	 * @param {object} mPropertyBag - property bag
	 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
	 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
	 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
	 * @return {boolean} true if successfully added
	 * @public
	 */
	AddFields.applyChange = function(oChange, oGroup, mPropertyBag) {
		var oChangeDefinition = oChange.getDefinition();
		var fnCheckChangeDefinition = function(oChangeDefinition) {
			var bContentPresent = oChangeDefinition.content;
			var bMandatoryContentPresent = false;

			if (bContentPresent) {
				bMandatoryContentPresent = oChangeDefinition.content.field && (oChangeDefinition.content.field.selector || oChangeDefinition.content.field.id) &&
					oChangeDefinition.content.field.jsTypes && oChangeDefinition.content.field.value && oChangeDefinition.content.field.valueProperty;
			}

			return  bContentPresent && bMandatoryContentPresent;
		};

		var oModifier = mPropertyBag.modifier;
		var oView = mPropertyBag.view;
		if (fnCheckChangeDefinition(oChangeDefinition)) {

			var oFieldSelector = oChangeDefinition.content.field.selector;
			var sFieldId = oChangeDefinition.content.field.id;

			var insertIndex = oChangeDefinition.content.field.index;
			var oGroupElement = oModifier.createControl("sap.ui.comp.smartform.GroupElement", mPropertyBag.appComponent, oView, oFieldSelector || sFieldId);

			for (var i = 0; i < oChangeDefinition.content.field.jsTypes.length; i++) {
				var sJsType = oChangeDefinition.content.field.jsTypes[i];
				var sPropertyName = oChangeDefinition.content.field.valueProperty[i];
				var oPropertyValue = oChangeDefinition.content.field.value[i];
				var oEntitySet = oChangeDefinition.content.field.entitySet;

				this.addElementIntoGroupElement(oModifier, oView, oGroupElement, sJsType, sPropertyName, oPropertyValue, oEntitySet, i, mPropertyBag.appComponent);
			}

			oModifier.insertAggregation(oGroup, "groupElements", oGroupElement, insertIndex);

			return true;

		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChangeDefinition.layer + "]"
					+ oChangeDefinition.namespace + "/" + oChangeDefinition.fileName + "." + oChangeDefinition.fileType);
			// however subsequent changes should be applied
		}
	};

	AddFields.addElementIntoGroupElement = function(oModifier, oView, oGroupElement, sJsType, sPropertyName, oPropertyValue, sEntitySet, iIndex, oAppComponent) {

		var oValueControl = oModifier.createControl(sJsType, oAppComponent, oView);
		oModifier.bindProperty(oValueControl, sPropertyName, oPropertyValue);
		oModifier.setProperty(oValueControl, "expandNavigationProperties", true);

		oModifier.insertAggregation(oGroupElement, "elements", oValueControl, iIndex, oView, true);
		if (sEntitySet) {
			oModifier.setProperty(oValueControl, "entitySet", sEntitySet);
		}

	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo with attributes "fieldLabel", the field label to be included in the change,
	 *          "fieldValue", the value for the control that displays the value, "valueProperty", the control property
	 *          that holds the field value, "newControlId", the control ID for the control to be added and "jsType", the
	 *          JavaScript control for the field value. Alternative new format is index, label, newControlId and bindingPath,
	 *          which will result in a new SmartField being added and bound.
	 *
	 * @public
	 */
	AddFields.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
		var oAppComponent = mPropertyBag.appComponent;
		var oChangeDefinition = oChange.getDefinition();

		if (!oChangeDefinition.content) {
			oChangeDefinition.content = {};
		}
		if (!oChangeDefinition.content.field) {
			oChangeDefinition.content.field = {};
		}
		if (oSpecificChangeInfo.fieldValues) {
			oChangeDefinition.content.field.value = oSpecificChangeInfo.fieldValues;
		} else if (oSpecificChangeInfo.bindingPath) {
			oChangeDefinition.content.field.value = [oSpecificChangeInfo.bindingPath];
		} else {
			throw new Error("oSpecificChangeInfo.fieldValue or bindingPath attribute required");
		}
		if (oSpecificChangeInfo.valueProperty) {
			oChangeDefinition.content.field.valueProperty = oSpecificChangeInfo.valueProperty;
		} else if (oSpecificChangeInfo.bindingPath) {
			oChangeDefinition.content.field.valueProperty = ["value"];
		} else {
			throw new Error("oSpecificChangeInfo.valueProperty or bindingPath attribute required");
		}
		if (oSpecificChangeInfo.newControlId) {
			oChangeDefinition.content.field.selector = JsControlTreeModifier.getSelector(oSpecificChangeInfo.newControlId, oAppComponent);
		} else {
			throw new Error("oSpecificChangeInfo.newControlId attribute required");
		}
		if (oSpecificChangeInfo.jsTypes) {
			oChangeDefinition.content.field.jsTypes = oSpecificChangeInfo.jsTypes;
		} else if (oSpecificChangeInfo.bindingPath) {
			oChangeDefinition.content.field.jsTypes = ["sap.ui.comp.smartfield.SmartField"];
		} else {
			throw new Error("oSpecificChangeInfo.jsTypes or bindingPath attribute required");
		}
		if (oSpecificChangeInfo.index === undefined) {
			throw new Error("oSpecificChangeInfo.index attribute required");
		} else {
			oChangeDefinition.content.field.index = oSpecificChangeInfo.index;
		}
		if (oSpecificChangeInfo.entitySet) {
			// an optional entity set can be configured
			oChangeDefinition.content.field.entitySet = oSpecificChangeInfo.entitySet;
		}

	};

	return AddFields;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/AddFields.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.AddGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.AddGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/AddGroup",[
	"sap/ui/fl/Utils", "jquery.sap.global", "sap/ui/fl/changeHandler/Base", "sap/ui/fl/changeHandler/JsControlTreeModifier"
], function(Utils, jQuery, Base, JsControlTreeModifier) {
	"use strict";

	/*
	 * Change handler for adding a smart form group.
	 * @alias sap.ui.fl.changeHandler.AddGroup
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.27.0
	 */
	var AddGroup = { };

	/**
	 * Adds a smart form group.
	 *
	 * @param {sap.ui.fl.Change} oChange change object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.SmartForm|Element} oForm smart form control that matches the change selector for applying the change
	 * @param {object} oControlMap flat list of ids that point to control instances
	 * @param {object} mPropertyBag
	 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
	 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
	 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
	 * @public
	 */
	AddGroup.applyChange = function(oChange, oForm, mPropertyBag) {
		var oModifier = mPropertyBag.modifier;
		var oAppComponent = mPropertyBag.appComponent;
		var oView = mPropertyBag.view;
		var oChangeDefinition = oChange.getDefinition();
		if (oChangeDefinition.texts && oChangeDefinition.texts.groupLabel && oChangeDefinition.texts.groupLabel.value && oChangeDefinition.content && oChangeDefinition.content.group && (oChangeDefinition.content.group.selector || oChangeDefinition.content.group.id)) {
			var sLabelText = oChangeDefinition.texts.groupLabel.value;
			var iInsertIndex = oChangeDefinition.content.group.index;
			var oGroup = oModifier.createControl("sap.ui.comp.smartform.Group", oAppComponent, oView, oChangeDefinition.content.group.selector || oChangeDefinition.content.group.id);

			oModifier.setProperty(oGroup, "label", sLabelText);
			oModifier.insertAggregation(oForm, "groups", oGroup, iInsertIndex, oView);

		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChangeDefinition.layer + "]" + oChangeDefinition.namespace + "/" + oChangeDefinition.fileName + "." + oChangeDefinition.fileType);
			//however subsequent changes should be applied
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo with attributes "groupLabel", the group label to be included in the change and "newControlId", the control ID for the control to be added
	 * @param {object} mPropertyBag
	 * @param {sap.ui.core.UiComponent} mPropertyBag.appComponent component in which the change should be applied
	 * @public
	 */
	AddGroup.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
		var oChangeDefinition = oChange.getDefinition();
		var oAppComponent = mPropertyBag.appComponent;

		if (oSpecificChangeInfo.newLabel) {
			Base.setTextInChange(oChangeDefinition, "groupLabel", oSpecificChangeInfo.newLabel, "XFLD");
		} else {
			throw new Error("oSpecificChangeInfo.groupLabel attribute required");
		}
		if (!oChangeDefinition.content) {
			oChangeDefinition.content = {};
		}
		if (!oChangeDefinition.content.group) {
			oChangeDefinition.content.group = {};
		}

		if (oSpecificChangeInfo.index === undefined) {
			throw new Error("oSpecificChangeInfo.index attribute required");
		} else {
			oChangeDefinition.content.group.index = oSpecificChangeInfo.index;
		}

		if ( oSpecificChangeInfo.newControlId ){
			oChangeDefinition.content.group.selector = JsControlTreeModifier.getSelector(oSpecificChangeInfo.newControlId, oAppComponent);
		} else {
			throw new Error("oSpecificChangeInfo.newControlId attribute required");
		}
	};

	return AddGroup;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/AddGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.CombineFields') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.CombineFields'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/CombineFields",[
		"jquery.sap.global", "sap/ui/fl/Utils", "sap/ui/fl/changeHandler/Base"],
		function(jQuery, FlexUtils, Base) {
	"use strict";

	/**
	 * Change handler for combining smart form group elements (representing one or more fields).
	 *
	 * @alias sap.ui.comp.smartform.flexibility.changes.CombineFields
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.46
	 */
	var CombineFields = { };

	CombineFields._evaluteElementForIndex = function(oModifier, aGroupElements) {
		var iMandatoryField = -1;
		var aSingleFields = [];

		var bMandatory = aGroupElements.some(function (oGroupElement) {
			aSingleFields = oModifier.getAggregation(oGroupElement, "elements");
			return aSingleFields.some(function (oSingleField) {
				iMandatoryField++;
				return oModifier.getProperty(oSingleField, "mandatory");
			});
		});

		if (bMandatory) {
			return iMandatoryField;
		}
		return -1;
	};

	/**
	 * Combines content from other smart group elements into the selected group element
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.SmartForm|Element} oControl smartform control that matches the change selector for applying the change
	 * @param {object} mPropertyBag - map of properties
	 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
	 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
	 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
	 * @return {boolean} true - if change could be applied
	 *
	 * @public
	 */
	CombineFields.applyChange = function(oChange, oControl, mPropertyBag) {
		var oChangeDefinition = oChange.getDefinition();
		var oModifier = mPropertyBag.modifier;
		var oAppComponent = mPropertyBag.appComponent;
		var oView =  mPropertyBag.view;
		var oSourceControl = oModifier.bySelector(oChangeDefinition.content.sourceSelector, oAppComponent, oView);
		var aLabelText = [];
		var sLabel;
		var sPreviousLabel;
		var oText;
		var oParent;

		var aSingleFields = [];

		var aGroupElements = oChangeDefinition.content.combineFieldSelectors.map(function (oCombineFieldSelector) {
			return oModifier.bySelector(oCombineFieldSelector, oAppComponent, oView);
		});

		var iMandatoryFieldIndex = this._evaluteElementForIndex(oModifier, aGroupElements);
		if (iMandatoryFieldIndex > 0) {
			oModifier.setProperty(oSourceControl, "elementForLabel", iMandatoryFieldIndex);
		}
		var bIsRtl = sap.ui.getCore().getConfiguration().getRTL();

		for (var i = 0; i < aGroupElements.length; i++) {
			sLabel = "fieldLabel" + i.toString();
			oText = oChangeDefinition.texts[sLabel];
			if (oText && oText.value !== sPreviousLabel && oText.value.length > 0) {
				bIsRtl ? aLabelText.unshift(oText.value) : aLabelText.push(oText.value);
				sPreviousLabel = oText.value;
			}

			aSingleFields = oModifier.getAggregation(aGroupElements[i], "elements");

			if (aGroupElements[i] !== oSourceControl) {
				for (var k = 0, m = aSingleFields.length; k < m; k++) {
					oModifier.removeAggregation(aGroupElements[i], "elements", aSingleFields[k]);
					oModifier.insertAggregation(oSourceControl, "elements", aSingleFields[k], i + k, oView);
				}
				oParent = oModifier.getParent(aGroupElements[i]);
				oModifier.removeAggregation(oParent, "groupElements", aGroupElements[i]);
				// The removed GroupElement must be destroyed when the app is closed, therefore it must be
				// placed in another aggregation (the "dependents" aggregation is invisible)
				oModifier.insertAggregation(oParent, "dependents", aGroupElements[i], 0, oView);
			}
		}

		if (aLabelText.length > 0) {
			oModifier.setProperty(oSourceControl, "label", aLabelText.join("/"));
		}

		return true;

	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo - specific info object
	 * @param {object} oSpecificChangeInfo.combineFieldIds ids of selected fields
	 *                                                     to be combined
	 * @param {object} mPropertyBag - map of properties
	 * @param {object} mPropertyBag.modifier - modifier for the controls
	 *
	 * @public
	 */
	CombineFields.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
		var oModifier = mPropertyBag.modifier;
		var oAppComponent = mPropertyBag.appComponent;
		var oChangeDefinition = oChange.getDefinition();

		var aCombineFieldIds = oSpecificChangeInfo.combineFieldIds;
		if (aCombineFieldIds && aCombineFieldIds.length >= 2) {
			oChangeDefinition.content.combineFieldSelectors = aCombineFieldIds.map(function(sCombineFieldId) {
				return oModifier.getSelector(sCombineFieldId, oAppComponent);
			});
			oChange.addDependentControl(aCombineFieldIds, "combinedFields", mPropertyBag);
		} else {
			throw new Error("oSpecificChangeInfo.combineFieldIds attribute required");
		}

		if (oSpecificChangeInfo.sourceControlId) {
			oChangeDefinition.content.sourceSelector = oModifier.getSelector(oSpecificChangeInfo.sourceControlId, oAppComponent);
			oChange.addDependentControl(oSpecificChangeInfo.sourceControlId, "sourceControl", mPropertyBag);
		} else {
			throw new Error("oSpecificChangeInfo.sourceControlId attribute required");
		}

		var sText;
		var sFieldLabel;
		var oGroupElement;
		for (var i = 0; i < aCombineFieldIds.length; i++) {
			oGroupElement = oModifier.byId(aCombineFieldIds[i]);
			sText = oGroupElement.getLabelText();
			if (sText) {
				sFieldLabel = "fieldLabel" + i;
				Base.setTextInChange(oChangeDefinition, sFieldLabel, sText, "XFLD");
			}
		}
	};

	return CombineFields;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/CombineFields.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.MoveFields') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.MoveFields'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/MoveFields",[
	"jquery.sap.global", "sap/ui/fl/changeHandler/Base", "sap/ui/fl/Utils", "sap/ui/fl/changeHandler/JsControlTreeModifier"
	], function (jQuery, Base, FlexUtils, JsControlTreeModifier) {
		"use strict";

		/**
		 * Change handler for moving of fields within/between groups.
		 * @alias sap.ui.comp.smartform.flexibility.changes.MoveFields
		 * @author SAP SE
		 * @version 1.50.6
		 * @experimental Since 1.27.0
		 */
		var MoveFields = { };

		MoveFields._checkCompleteChangeContentConditions = function(oSpecificChangeInfo) {
			if (!oSpecificChangeInfo.movedElements) {
				throw new Error("oSpecificChangeInfo.movedElements attribute required");
			}
			if (oSpecificChangeInfo.movedElements.length === 0) {
				throw new Error("MovedElements array is empty");
			}
			oSpecificChangeInfo.movedElements.forEach(function (oMoveField) {
				if (!oMoveField.id) {
					throw new Error("MovedElements element has no id attribute");
				}
				if (typeof (oMoveField.targetIndex) !== "number") {
					throw new Error("Index attribute at MovedElements element is no number");
				}
			});
		};

		MoveFields._buildStableChangeInfo = function(mMoveActionParameter){
			var sSourceParentId = mMoveActionParameter.source.id;
			var sTargetParentId = mMoveActionParameter.target.id;
			var mChangeData = {
				changeType : mMoveActionParameter.changeType,
				selector : {
					id : sSourceParentId
				},
				targetId : sTargetParentId !== sSourceParentId ? sTargetParentId : null
			};
			mChangeData[mMoveActionParameter.changeType] = [];

			mMoveActionParameter.movedElements.forEach(function(mMovedElement) {
				mChangeData[mMoveActionParameter.changeType].push({
					id : mMovedElement.id,
					index : mMovedElement.targetIndex
				});
			});

			return mChangeData;
		};

		/**
		 * Moves field(s) within a group or between groups.
		 *
		 * @param {object} oChange change object with instructions to be applied on the control
		 * @param {object} oGroup Smart form group instance which is referred to in change selector section
		 * @param {object} mPropertyBag - map of properties
		 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
		 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
		 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
		 * @public
		 * @function
		 * @returns {boolean} true - if change could be applied
		 * @name sap.ui.comp.smartform.flexibility.changes.MoveFields#applyChange
		 */
		MoveFields.applyChange = function(oChange, oGroup, mPropertyBag) {
			function checkConditions(oChange, oModifier) {
				if (!oChange) {
					throw new Error("No change instance");
				}

				var oChangeContent = oChange.getContent();

				if (!oModifier.getAggregation(oGroup, "groupElements")) {
					FlexUtils.log.error("Object has no group elements aggregation", oModifier.getId(oGroup));
				}
				if (!oChangeContent || !oChangeContent.moveFields || oChangeContent.moveFields.length === 0) {
					throw new Error("Change format invalid");
				}
			}

			function getFieldControlOrThrowError(oMoveField, oModifier, oAppComponent, oView) {
				if (!oMoveField.selector && !oMoveField.id) {
					throw new Error("Change format invalid - moveFields element has no id attribute");
				}
				if (typeof (oMoveField.index) !== "number") {
					throw new Error("Change format invalid - moveFields element index attribute is no number");
				}

				return oModifier.bySelector(oMoveField.selector || oMoveField.id, oAppComponent, oView);
			}

			var oModifier = mPropertyBag.modifier;
			var oView = mPropertyBag.view;
			var oAppComponent = mPropertyBag.appComponent;

			checkConditions(oChange, oModifier);

			var oChangeContent = oChange.getContent();
			var oTargetGroup = oGroup;

			if (oChangeContent.targetSelector || oChangeContent.targetId) {
				oTargetGroup = oModifier.bySelector(oChangeContent.targetSelector || oChangeContent.targetId, oAppComponent, oView);
			}

			oChangeContent.moveFields.forEach(function (oMoveField) {
				var oField = getFieldControlOrThrowError(oMoveField, oModifier, oAppComponent, oView);

				if (!oField) {
					FlexUtils.log.warning("Field to move not found");
					return;
				}

				oModifier.removeAggregation(oGroup, "groupElements", oField, oView);
				oModifier.insertAggregation(oTargetGroup, "groupElements", oField, oMoveField.index);
			});

			return true;
		};

		/**
		 * Completes the change by adding change handler specific content
		 *
		 * @param {object} oChange change object to be completed
		 * @param {object} oSpecificChangeInfo with attribute moveFields which contains an array which holds objects which have attributes
		 * 				   id and index - id is the id of the field to move and index the new position of the field in the smart form group
		 * @param {object} mPropertyBag  - map of properties
		 * @param {sap.ui.core.UiComponent} mPropertyBag.appComponent component in which the change should be applied
		 * @public
		 * @function
		 * @name sap.ui.comp.smartform.flexibility.changes.MoveFields#completeChangeContent
		 */
		MoveFields.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
			this._checkCompleteChangeContentConditions(oSpecificChangeInfo);

			oSpecificChangeInfo = this._buildStableChangeInfo(oSpecificChangeInfo);

			var oChangeDefinition = oChange.getDefinition();
			var oAppComponent = mPropertyBag.appComponent;

			if (!oChangeDefinition.content) {
				oChangeDefinition.content = {};
			}
			if (!oChangeDefinition.content.moveFields) {
				oChangeDefinition.content.moveFields = [];
			}

			oSpecificChangeInfo.moveFields.forEach(function (oField) {
				var oFieldControl = JsControlTreeModifier.bySelector(oField.id, oAppComponent);
				var oSelector = JsControlTreeModifier.getSelector(oFieldControl, oAppComponent);

				oChangeDefinition.content.moveFields.push({
					selector: oSelector,
					index: oField.index
				});
			});

			if (oSpecificChangeInfo.targetId) {
				var oTargetControl = JsControlTreeModifier.bySelector(oSpecificChangeInfo.targetId, oAppComponent);
				oChangeDefinition.content.targetSelector = JsControlTreeModifier.getSelector(oTargetControl, oAppComponent);
			}
		};

		return MoveFields;
	},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/MoveFields.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.MoveGroups') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.MoveGroups'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/MoveGroups",[
	"jquery.sap.global", "sap/ui/fl/changeHandler/Base", "sap/ui/fl/Utils", "sap/ui/fl/changeHandler/JsControlTreeModifier"
	], function (jQuery, Base, FlexUtils, JsControlTreeModifier) {
		"use strict";

		/**
		 * Change handler for moving of groups inside a smart form.
		 * @alias sap.ui.fl.changeHandler.MoveGroups
		 * @author SAP SE
		 * @version 1.50.6
		 * @experimental Since 1.27.0
		 */
		var MoveGroups = { };

		MoveGroups._checkCompleteChangeContentConditions = function(oSpecificChangeInfo) {
			if (!oSpecificChangeInfo.movedElements) {
				throw new Error("oSpecificChangeInfo.movedElements attribute required");
			}
			if (oSpecificChangeInfo.movedElements.length === 0) {
				throw new Error("MovedElements array is empty");
			}
			oSpecificChangeInfo.movedElements.forEach(function (oMoveField) {
				if (!oMoveField.id) {
					throw new Error("MovedElements element has no id attribute");
				}
				if (typeof (oMoveField.targetIndex) !== "number") {
					throw new Error("Index attribute at MovedElements element is no number");
				}
			});
		};

		MoveGroups._buildStableChangeInfo = function(mMoveActionParameter){
			var sSourceParentId = mMoveActionParameter.source.id;
			var sTargetParentId = mMoveActionParameter.target.id;
			var mChangeData = {
				changeType : mMoveActionParameter.changeType,
				selector : {
					id : sSourceParentId
				},
				targetId : sTargetParentId !== sSourceParentId ? sTargetParentId : null
			};

			mChangeData[mMoveActionParameter.changeType] = [];

			mMoveActionParameter.movedElements.forEach(function(mMovedElement) {
				mChangeData[mMoveActionParameter.changeType].push({
					id : mMovedElement.id,
					index : mMovedElement.targetIndex
				});
			});

			return mChangeData;
		};

		/**
		 * Moves group(s) inside a smart form.
		 *
		 * @param {object} oChange change object with instructions to be applied on the control
		 * @param {object|Element} oSmartForm Smart form instance which is referred to in change selector section
		 * @param {object} mPropertyBag - map of properties
		 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
		 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
		 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
		 * @function
		 * @returns {boolean} true - if change could be applied
		 * @name sap.ui.comp.smartform.flexibility.changes.MoveGroups#applyChange
		 */
		MoveGroups.applyChange = function(oChange, oSmartForm, mPropertyBag) {
			function checkConditions(oChange, oModifier) {
				if (!oChange) {
					throw new Error("No change instance");
				}

				var oChangeContent = oChange.getContent();

				if (!oModifier.getAggregation(oSmartForm, "groups")) {
					FlexUtils.log.error("Object has no smartform elements aggregation", oModifier.getId(oSmartForm));
				}
				if (!oChangeContent || !oChangeContent.moveGroups || oChangeContent.moveGroups.length === 0) {
					throw new Error("Change format invalid");
				}
			}

			function getGroupControlOrThrowError(oMoveGroup, oModifier, oAppComponent, oView) {
				if (!oMoveGroup.selector && !oMoveGroup.id) {
					throw new Error("Change format invalid - moveGroups element has no id attribute");
				}
				if (typeof (oMoveGroup.index) !== "number") {
					throw new Error("Change format invalid - moveGroups element index attribute is no number");
				}

				return oModifier.bySelector(oMoveGroup.selector || oMoveGroup.id, oAppComponent, oView);
			}

			var oModifier = mPropertyBag.modifier;
			var oView = mPropertyBag.view;
			var oAppComponent = mPropertyBag.appComponent;

			checkConditions(oChange, oModifier);

			var oChangeContent = oChange.getContent();

			oChangeContent.moveGroups.forEach(function (oMoveGroup) {
				var oGroup = getGroupControlOrThrowError(oMoveGroup, oModifier, oAppComponent, oView);

				if (!oGroup) {
					FlexUtils.log.warning("Group to move not found");
					return;
				}

				oModifier.removeAggregation(oSmartForm, "groups", oGroup, oView);
				oModifier.insertAggregation(oSmartForm, "groups", oGroup, oMoveGroup.index);
			});

			return true;
		};

		/**
		 * Completes the change by adding change handler specific content
		 *
		 * @param {object} oChange change object to be completed
		 * @param {object} oSpecificChangeInfo with attribute moveGroups which contains an array which holds objects which have attributes
		 * 				   id and index - id is the id of the group to move and index the new position of the group in the smart form
		 * @param {object} mPropertyBag - map of properties
		 * @param {sap.ui.core.UiComponent} mPropertyBag.appComponent component in which the change should be applied
		 * @public
		 * @function
		 * @name sap.ui.comp.smartform.flexibility.changes.MoveGroups#completeChangeContent
		 */
		MoveGroups.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
			this._checkCompleteChangeContentConditions(oSpecificChangeInfo);

			oSpecificChangeInfo = this._buildStableChangeInfo(oSpecificChangeInfo);

			var oChangeJson = oChange.getDefinition();

			if (!oChangeJson.content) {
				oChangeJson.content = {};
			}
			if (!oChangeJson.content.moveGroups) {
				oChangeJson.content.moveGroups = [];
			}

			var aMovedGroups = oSpecificChangeInfo.moveGroups.map(function (oGroup) {
				var oGroupControl = sap.ui.getCore().byId(oGroup.id);
				var oSelector = JsControlTreeModifier.getSelector(oGroupControl, mPropertyBag.appComponent);
				oChangeJson.content.moveGroups.push({
					selector: oSelector,
					index: oGroup.index
				});
				return oGroupControl;
			});
			oChange.addDependentControl(aMovedGroups, "movedGroups", mPropertyBag);
		};

		return MoveGroups;
	},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/MoveGroups.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.RemoveField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.RemoveField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/RemoveField",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/Base'
], function(jQuery, Base) {
	"use strict";

	/**
	 * Change handler for removing a smart form group element.
	 * @alias sap.ui.fl.changeHandler.RemoveField
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.27.0
	 */
	var RemoveField = { };

	/**
	 * Removes a smart form group element.
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.GroupElement|Element} oField GroupElement control that matches the change selector for applying the change
	 * @param {object} mPropertyBag
	 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
	 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
	 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
	 * @return {boolean} true if successfully added
	 * @public
	 */
	RemoveField.applyChange = function(oChange, oField, mPropertyBag) {
		var oModifier = mPropertyBag.modifier;
		var oView = mPropertyBag.view;
		var oGroup = oModifier.getParent(oField);
		if (oGroup) {
			oModifier.removeAggregation(oGroup, "groupElements", oField, oView);
		}

		return true;
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo as an empty object since no additional attributes are required for this operation
	 * @public
	 */
	RemoveField.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (!oChange.content) {
			oChange.content = {};
		}
	};

	return RemoveField;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/RemoveField.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.RemoveGroup') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.RemoveGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/RemoveGroup",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/Base'
], function(jQuery, Base) {
	"use strict";

	/**
	 * Change handler for removing a smart form group.
	 *
	 * @alias sap.ui.fl.changeHandler.RemoveGroup
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.27.0
	 */
	var RemoveGroup = { };

	/**
	 * Removes a smart form group.
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.Group|Element} oGroup group control that matches the change selector for applying the change
	 * @param {object} mPropertyBag
	 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
	 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
	 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
	 * @return {boolean} true if successfully added
	 * @public
	 */
	RemoveGroup.applyChange = function(oChange, oGroup, mPropertyBag) {
		var oModifier = mPropertyBag.modifier;
		var oView = mPropertyBag.view;

		var oForm = oModifier.getParent(oGroup);
		if (oModifier.getControlType(oForm) === "sap.ui.layout.form.Form") {
			oModifier.removeAggregation(oForm, "formContainers", oGroup, oView);
		} else {
			oModifier.removeAggregation(oForm, "groups", oGroup, oView);
		}
		return true;
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo as an empty object since no additional attributes are required for this operation
	 * @public
	 */
	RemoveGroup.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (!oChange.content) {
			oChange.content = {};
		}
	};

	return RemoveGroup;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/RemoveGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.RenameField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.RenameField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.BaseRename'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/RenameField",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/BaseRename', "sap/ui/fl/Utils"
], function(jQuery, BaseRename, Utils) {
	"use strict";

	var PROPERTY_NAME = "label";
	var CHANGE_PROPERTY_NAME = "fieldLabel";
	var TT_TYPE = "XFLD";

	/**
	 * Change handler for renaming a smart form group element.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.RenameField
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.27.0
	 */
	var RenameField = BaseRename.createRenameChangeHandler({
		changePropertyName : CHANGE_PROPERTY_NAME,
		translationTextType : TT_TYPE
	});

	/**
	 * Renames a SmartField.
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.core.Control|Element} oControl Control that matches the change selector for applying the change
	 * @param {object} mPropertyBag property bag
	 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
	 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
	 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
	 * @returns {boolean} true if successful
	 * @public
	 */
	RenameField.applyChange = function(oChange, oControl, mPropertyBag) {
		var oModifier = mPropertyBag.modifier;
		var oChangeDefinition = oChange.getDefinition();
		var sText = oChangeDefinition.texts[CHANGE_PROPERTY_NAME];
		var sValue = sText.value;

		if (oChangeDefinition.texts && sText && typeof (sValue) === "string") {

			// The value can be a binding - e.g. for translatable values in WebIde
			// In order to properly save the undo, the label "text" property also needs to be set
			var vLabel = oModifier.getProperty(oControl, "label");
			if (Utils.isBinding(sValue)) {
				if (vLabel && (typeof vLabel !== "string")){
					oModifier.setPropertyBinding(vLabel, "text", sValue);
				} else {
					oModifier.setPropertyBinding(oControl, PROPERTY_NAME, sValue);
				}
			} else {
				if (vLabel && (typeof vLabel !== "string")){
					oModifier.setProperty(vLabel, "text", sValue);
				} else {
					oModifier.setProperty(oControl, PROPERTY_NAME, sValue);
				}
			}

			return true;

		} else {
			Utils.log.error("Change does not contain sufficient information to be applied: [" + oChangeDefinition.layer + "]" + oChangeDefinition.namespace + "/" + oChangeDefinition.fileName + "." + oChangeDefinition.fileType);
			//however subsequent changes should be applied
		}
	};

	return RenameField;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/RenameField.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.RenameGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.RenameGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.BaseRename'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/RenameGroup",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/BaseRename'
], function(jQuery, BaseRename) {
	"use strict";

	/**
	 * Change handler for renaming a SmartForm group.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.RenameGroup
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.27.0
	 */
	var RenameGroup = BaseRename.createRenameChangeHandler({
		propertyName : "label",
		changePropertyName : "groupLabel",
		translationTextType : "XFLD"
	});

	return RenameGroup;
},
/* bExport= */true);
}; // end of sap/ui/comp/smartform/flexibility/changes/RenameGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.RenameTitle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.RenameTitle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.BaseRename'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/RenameTitle",[
	'jquery.sap.global', 'sap/ui/fl/changeHandler/BaseRename'
], function(jQuery, BaseRename) {
	"use strict";

	/**
	 * Change handler for renaming a smart form title
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.RenameTitle
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.46
	 */
	var RenameTitle = BaseRename.createRenameChangeHandler({
		propertyName : "title",
		changePropertyName : "fieldLabel",
		translationTextType : "XFLD"
	});

	return RenameTitle;
},
/* bExport= */true);
}; // end of sap/ui/comp/smartform/flexibility/changes/RenameTitle.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.SplitField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.SplitField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/SplitField",[
		"jquery.sap.global", "sap/ui/fl/Utils", "sap/ui/fl/changeHandler/Base"],
		function(jQuery, FlexUtils, Base) {
	"use strict";

	/**
	 * Change handler for splitting smart form group elements (representing one or more fields).
	 *
	 * @alias sap.ui.comp.smartform.flexibility.changes.SplitField
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.46
	 */
	var SplitField = { };

	/**
	 * Split a smart form group element incl. more value controls.
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.SmartForm|Element} oControl smartform control that matches the change selector for applying the change
	 * @param {object} mPropertyBag - map of properties
	 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
	 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
	 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
	 * @return {boolean} true - if change could be applied
	 *
	 * @public
	 */
	SplitField.applyChange = function(oChange, oControl, mPropertyBag) {
		var oChangeDefinition = oChange.getDefinition();
		var oModifier = mPropertyBag.modifier;
		var oAppComponent = mPropertyBag.appComponent;
		var oView = mPropertyBag.view;
		var oSourceControl = oModifier.bySelector(oChangeDefinition.content.sourceSelector, oAppComponent, oView);
		var sLabelText;
		var sNewId;
		var oNewGroupElement;
		var vLabel;

		var oParent = oModifier.bySelector(oChangeDefinition.content.parentSelector, oAppComponent, oView);
		var aNewElementIds = oChangeDefinition.content.newElementIds.slice();
		var aFields = oModifier.getAggregation(oSourceControl, "elements");
		var iLabelElementIndex = oModifier.getProperty(oSourceControl, "elementForLabel");
		var aGroupElements = oModifier.getAggregation(oParent, "groupElements");
		var iControlIndex = aGroupElements.indexOf(oSourceControl);

		vLabel = oModifier.getProperty(oSourceControl, "label");
		if (vLabel && (typeof vLabel !== "string")){
			sLabelText = oModifier.getProperty(vLabel, "text");
		} else {
			sLabelText = vLabel;
		}

		for (var i = 0, n = aFields.length; i < n; i++) {
			if (i !== iLabelElementIndex) {

				// create groupElement with new element ID
				sNewId = aNewElementIds.pop();
				oNewGroupElement = oModifier.createControl("sap.ui.comp.smartform.GroupElement",
					mPropertyBag.appComponent, oView, sNewId);

				// remove field from combined groupElement
				oModifier.removeAggregation(oSourceControl, "elements", aFields[i]);

				// insert field to groupElement
				oModifier.insertAggregation(oNewGroupElement, "elements", aFields[i], 0, oView);
				oModifier.insertAggregation(oParent, "groupElements", oNewGroupElement, iControlIndex + i, oView);

				// set label of groupElement if not set by smartField
				if (oModifier.getControlType(aFields[i]) !== "sap.ui.comp.smartfield.SmartField") {
					vLabel = oModifier.getProperty(oNewGroupElement, "label");
					if (vLabel && (typeof vLabel !== "string")){
						oModifier.setProperty(vLabel, "text", sLabelText);
					} else {
						oModifier.setProperty(oNewGroupElement, "label", sLabelText);
					}
				}
			} else {
				if (iLabelElementIndex !== 0) {
					oModifier.setProperty(oSourceControl, "elementForLabel", 0);
				}
				oModifier.removeAggregation(oSourceControl, "elements", aFields[i]);
				oModifier.insertAggregation(oSourceControl, "elements", aFields[i], 0, oView);

				// set label to combined groupElement if not set by smartField
				if (oModifier.getControlType(aFields[i]) !== "sap.ui.comp.smartfield.SmartField") {
					vLabel = oModifier.getProperty(oSourceControl, "label");
					if (vLabel && (typeof vLabel !== "string")){
						oModifier.setProperty(vLabel, "text", sLabelText);
					} else {
						oModifier.setProperty(oSourceControl, "label", sLabelText);
					}
				}

			}
		}

		return true;

	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo - specific change info containing parentId
	 * @param {object} mPropertyBag - map of properties
	 *
	 * @public
	 */
	SplitField.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
		var oModifier = mPropertyBag.modifier;
		var oAppComponent = mPropertyBag.appComponent;
		var oChangeDefinition = oChange.getDefinition();

		if (oSpecificChangeInfo.newElementIds) {
			oChangeDefinition.content.newElementIds = oSpecificChangeInfo.newElementIds;
		} else {
			throw new Error("oSpecificChangeInfo.newElementIds attribute required");
		}

		if (oSpecificChangeInfo.sourceControlId) {
			oChangeDefinition.content.sourceSelector = oModifier.getSelector(oSpecificChangeInfo.sourceControlId, oAppComponent);
			oChange.addDependentControl(oSpecificChangeInfo.sourceControlId, "sourceControl", mPropertyBag);

		} else {
			throw new Error("oSpecificChangeInfo.sourceControlId attribute required");
		}

		if (oSpecificChangeInfo.parentId) {
			oChangeDefinition.content.parentSelector = oModifier.getSelector(oSpecificChangeInfo.parentId, oAppComponent);
			oChange.addDependentControl(oSpecificChangeInfo.parentId, "parent", mPropertyBag);
		} else {
			throw new Error("oSpecificChangeInfo.parentId attribute required");
		}
	};

	return SplitField;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/SplitField.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.flexibility.changes.UnhideControl') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartform.flexibility.changes.UnhideControl'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartform/flexibility/changes/UnhideControl",[], function() {
	"use strict";

	/**
	 * Change handler for revealing a smart form group element.
	 * @alias sap.ui.comp.smartform.flexibility.changes.UnhideControl
	 * @author SAP SE
	 * @version 1.50.6
	 * @experimental Since 1.44.0
	 */
	var UnhideControl = { };

	/**
	 * Reveals a smart form group element.
	 *
	 * @param {sap.ui.fl.Change} oChange change wrapper object with instructions to be applied on the control map
	 * @param {sap.ui.comp.smartform.GroupElement|Element} oGroupElement GroupElement control that matches the change selector for applying the change
	 * @param {object} mPropertyBag property bag
	 * @param {sap.ui.fl.changeHandler.BaseTreeModifier} mPropertyBag.modifier - modifier for the controls
	 * @param {sap.ui.core.UIComponent} mPropertyBag.appComponent - component in which the change should be applied
	 * @param {object} mPropertyBag.view - view object or xml element representing an ui5 view
	 * @return {boolean} true if successfully added
	 * @public
	 */
	UnhideControl.applyChange = function(oChange, oGroupElement, mPropertyBag) {
		var oModifier = mPropertyBag.modifier;
		var aFields = oModifier.getAggregation(oGroupElement, "elements");

		var bPartiallyVisible = aFields.some(function(oField) {
			return oModifier.getVisible(oField);
		});

		// if there is a visible field inside the group element, don't set all fields to visible
		if (!bPartiallyVisible) {
			aFields.forEach(function(oField) {
				oModifier.setVisible(oField, true);
			});
		}

		// if there is a label, it needs to be set visible aswell
		var oLabel = oModifier.getAggregation(oGroupElement, "label");
		if (oLabel && (typeof oLabel !== "string")) {
			oModifier.setVisible(oLabel, true);
		}
		oModifier.setVisible(oGroupElement, true);
		return true;
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.Change} oChangeWrapper change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo as an empty object since no additional attributes are required for this operation
	 * @public
	 */
	UnhideControl.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (!oChange.content) {
			oChange.content = {};
		}
	};

	return UnhideControl;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartform/flexibility/changes/UnhideControl.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartlist.SmartList') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartlist.SmartList.
jQuery.sap.declare('sap.ui.comp.smartlist.SmartList'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBoxRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.Tree'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartlist/SmartList",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/m/VBox', 'sap/m/VBoxRenderer', 'sap/m/List', 'sap/m/Tree', 'sap/m/Title', 'sap/m/OverflowToolbar', 'sap/m/ToolbarDesign', 'sap/m/OverflowToolbarButton', 'sap/ui/comp/odata/ODataModelUtil', 'sap/ui/core/format/NumberFormat'
], function(jQuery, library, VBox, VBoxRenderer, List, Tree, Title, OverflowToolbar, ToolbarDesign, OverflowToolbarButton, ODataModelUtil, NumberFormat) {
	"use strict";

	/**
	 * Constructor for a new smartlist/SmartList.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A smart control to simplify using the <code>sap.m.List</code> and <code>sap.m.Tree</code> controls in list patterns.
	 *        <h3>Overview</h3>
	 *        The <code>SmartList</code> control creates a list or tree based on the configuration specified. There is, however, a difference to
	 *        other smart controls: This control does not use annotations to automatically create its content. Hence, a template must always be
	 *        provided for this control.
	 *        <h3>Structure</h3>
	 *        The <code>SmartList</code> control consists of the following elements:
	 *        <ul>
	 *        <li> <code>OverflowToolbar</code> control: Displays the header and other action buttons. Users can add their own toolbar and buttons
	 *        in the view.</li>
	 *        <li> <code>List</code> or <code>Tree</code> control: The actual list/tree control. Users can also add this in the view with the
	 *        required configuration.</li>
	 *        </ul>
	 *        The <code>entitySet</code> property must be specified to use the control. This attribute is used to fetch the actual data.<br>
	 *        The <code>listItemTemplate</code> aggregation must also be specified with the required item template, such as
	 *        <code>StandardListItem/StandardTreeItem</code>, which will be used during binding.
	 *        <h3><b>Note:</b></h3>
	 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
	 * @extends sap.m.VBox
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @since 1.48
	 * @alias sap.ui.comp.smartlist.SmartList
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartList = VBox.extend("sap.ui.comp.smartlist.SmartList", /** @lends sap.ui.comp.smartlist.SmartList.prototype */
	{
		metadata: {
			library: "sap.ui.comp",
			properties: {
				/**
				 * The entity set name from which to fetch data.<br>
				 * <i>Note:</i><br>
				 * This is not a dynamic UI5 property.
				 * 
				 * @since 1.48.0
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be selected when request is sent to the backend.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.<br>
				 * This property is only needed when used together with an <code>ODataModel</code>.
				 * 
				 * @since 1.48.0
				 */
				selectFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be expanded when request is sent to the backend.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.<br>
				 * This property is only needed when used together with an <code>ODataModel</code>.
				 * 
				 * @since 1.48.0
				 */
				expandFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code> (default), the number of rows is shown along with the header text.<br>
				 * If set to <code>false</code>, the number of rows will not be shown on the user interface.<br>
				 * <i>Note:</i><br>
				 * To avoid sending dedicated OData requests in order to improve your application's performance, you must configure the binding of the
				 * list as required.
				 * 
				 * @since 1.48.0
				 */
				showRowCount: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Specifies header text that is shown in list.
				 * 
				 * @since 1.48.0
				 */
				header: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * When set to <code>true</code>, this enables automatic binding of the list using the <code>listBindingPath</code> (if it
				 * exists) or <code>entitySet</code> property. This happens right after the <code>initialise</code> event has been fired.
				 * 
				 * @since 1.48.0
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},
				/**
				 * Specifies the path that is used during the binding of the list. If not specified, the <code>entitySet</code> property is used
				 * instead. (used only if binding is done automatically or when using <code>rebindList</code>)
				 * 
				 * @since 1.48.0
				 */
				listBindingPath: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * Specifies the type of list to be created in the <code>SmartList</code> control.<br>
				 * <i>Note:</i><br>
				 * If you add a <code>List</code> or <code>Tree</code> to the content of the <code>SmartList</code> control in the view, this
				 * property has no effect.
				 * 
				 * @since 1.48.0
				 */
				listType: {
					type: "sap.ui.comp.smartlist.ListType",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * Controls the visibility of the full screen button.
				 * 
				 * @since 1.48.0
				 */
				showFullScreenButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			associations: {
				/**
				 * The <code>SmartFilterBar</code> control to be linked to the <code>SmartList</code> control. Some events of the
				 * <code>SmartFilterBar</code> control are then used to fetch data, show overlay etc.
				 * 
				 * @since 1.48.0
				 */
				smartFilter: {
					type: "sap.ui.core.Control"
				}
			},
			aggregations: {
				/**
				 * Specifies the template that is used for the inner <code>List</code> or <code>Tree</code> control.<br>
				 * <b>Note:</b><br>
				 * This template is used when binding the <code>items</code> of <code>sap.m.List</code> or <code>sap.m.Tree</code> control, and
				 * will not be available in the <code>SmartList</code> control once the binding has been done.
				 * 
				 * @since 1.48.0
				 */
				listItemTemplate: {
					type: "sap.m.ListItemBase",
					multiple: false,
					bindable: false
				}
			},
			events: {
				/**
				 * Event fired once the control has been initialized.
				 * 
				 * @since 1.48.0
				 */
				initialise: {},
				/**
				 * Event fired right before the binding is being done.
				 * 
				 * @param {sap.ui.base.Event} oControlEvent
				 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
				 * @param {object} oControlEvent.getParameters
				 * @param {object} oControlEvent.getParameters.bindingParams The bindingParams object contains filters, sorters and other
				 *        binding-related information for the list
				 * @param {boolean} oControlEvent.getParameters.bindingParams.preventTableBind If set to <code>true</code> by the listener, binding
				 *        is prevented
				 * @param {sap.ui.model.Filter[]} oControlEvent.getParameters.bindingParams.filters The combined filter array containing a set of
				 *        <code>sap.ui.model.Filter</code> instances from the <code>SmartList</code> and <code>SmartFilter</code> controls; can
				 *        be modified by users to influence filtering
				 * @param {sap.ui.model.Sorter[]} oControlEvent.getParameters.bindingParams.sorter An array containing a set of
				 *        <code>sap.ui.model.Sorter</code> instances from the <code>SmartList</code> control (personalization); can be modified by
				 *        users to influence sorting
				 * @since 1.48.0
				 */
				beforeRebindList: {},
				/**
				 * Event fired when data is received after binding. The event is usually only fired if the binding for the list is done by the
				 * <code>SmartList</code> control itself.
				 * 
				 * @since 1.48.0
				 */
				dataReceived: {}
			}
		},
		renderer: VBoxRenderer.render,
		constructor: function() {
			VBox.apply(this, arguments);
			this.addStyleClass("sapUiCompSmartList");
			this._createToolbar();
			this._createList();
			this.attachModelContextChange(this._initialiseMetadata, this);
		}
	});
	// default aggregation
	SmartList.prototype._sAggregation = "items";

	SmartList.prototype.setHeader = function(sText) {
		this.setProperty("header", sText, true);
		this._refreshHeaderText();
		return this;
	};

	SmartList.prototype.setShowRowCount = function(bShow) {
		this.setProperty("showRowCount", bShow, true);
		this._refreshHeaderText();
		return this;
	};

	SmartList.prototype.setShowFullScreenButton = function(bShowFullScreenButton) {
		this.setProperty("showFullScreenButton", bShowFullScreenButton, true);
		if (this._oFullScreenButton) {
			this._oFullScreenButton.setVisible(this.getShowFullScreenButton());
		}
		return this;
	};

	SmartList.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
		this._initialiseMetadata();
		return this;
	};

	/**
	 * sets the header text
	 * 
	 * @private
	 */
	SmartList.prototype._refreshHeaderText = function() {
		if (!this._headerText) {
			return;
		}

		var sText = this.getHeader();
		var bTextVisible = !!sText;
		this._headerText.setVisible(bTextVisible);

		if (bTextVisible && this.getShowRowCount()) {
			var iRowCount = parseInt(this._getRowCount(), 10);
			if (!this._oNumberFormatter) {
				this._oNumberFormatter = NumberFormat.getFloatInstance();
			}
			var sValue = this._oNumberFormatter.format(iRowCount);
			sText += " (" + sValue + ")";
		}
		this._headerText.setText(sText);
	};

	/**
	 * creates the fullscreen button and adds it into toolbar
	 */
	SmartList.prototype._addFullScreenButton = function() {
		// always remove content first
		if (this._oFullScreenButton) {
			this._oToolbar.removeContent(this._oFullScreenButton);
		}
		if (this.getShowFullScreenButton()) {
			if (!this._oFullScreenButton) {
				this._oFullScreenButton = new OverflowToolbarButton(this.getId() + "-btnFullScreen", {
					press: function() {
						this._toggleFullScreen(!this.bFullScreen);
					}.bind(this)
				});
			}
			this._toggleFullScreen(this.bFullScreen, true);
			this._oToolbar.addContent(this._oFullScreenButton);
		}
	};
	/**
	 * creates the toolbar
	 * 
	 * @private
	 */
	SmartList.prototype._createToolbar = function() {
		var aContent, iLen, oToolbar;
		if (!this._oToolbar) {
			aContent = this.getItems();
			iLen = aContent ? aContent.length : 0;
			// Check if a Toolbar already exists in the content (Ex: from view.xml)
			while (iLen--) {
				oToolbar = aContent[iLen];
				if (oToolbar instanceof sap.m.Toolbar) {
					break;
				}
				oToolbar = null;
			}
			if (oToolbar) {
				this._oToolbar = oToolbar;
			} else {
				this._oToolbar = new OverflowToolbar(this.getId() + "-toolbar", {
					design: ToolbarDesign.Transparent
				});
				this.insertItem(this._oToolbar, 0);
			}
			// Set layoutData on the toolbar, if none already exists
			if (!this._oToolbar.getLayoutData()) {
				this._oToolbar.setLayoutData(new sap.m.FlexItemData({
					shrinkFactor: 0
				}));
			}
		}
	};
	/**
	 * Toggles between fullscreen and normal view mode
	 * 
	 * @param {boolean} bValue - the new value of FullScreen
	 * @param {boolean} bForced - whether setting FullScreen is forced
	 * @private
	 */
	SmartList.prototype._toggleFullScreen = function(bValue, bForced) {
		var resourceB = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp"), sText;

		if (!this._oFullScreenButton || (bValue === this.bFullScreen && !bForced)) {
			return;
		}

		this.bFullScreen = bValue;

		if (!this._oFullScreenUtil) {
			this._oFullScreenUtil = sap.ui.requireSync("sap/ui/comp/util/FullScreenUtil");
		}
		this._oFullScreenUtil.toggleFullScreen(this, this.bFullScreen, this._oFullScreenButton);

		sText = this.bFullScreen ? resourceB.getText("CHART_MINIMIZEBTN_TOOLTIP") : resourceB.getText("CHART_MAXIMIZEBTN_TOOLTIP");
		this._oFullScreenButton.setTooltip(sText);
		this._oFullScreenButton.setText(sText);
		this._oFullScreenButton.setIcon(this.bFullScreen ? "sap-icon://exit-full-screen" : "sap-icon://full-screen");
	};

	/**
	 * creates the toolbar content
	 * 
	 * @private
	 */
	SmartList.prototype._createToolbarContent = function() {
		if (!this._oToolbar) {
			this._createToolbar();
		}
		// insert the items in the custom toolbar in reverse order => insert always at position 0
		this._addHeaderToToolbar();

		// add spacer to toolbar
		this._addSpacerToToolbar();

		// First show Display/Edit icon, then Personalisation and finally Excel Export
		this._addFullScreenButton();

	};

	/**
	 * adds the header line to the toolbar
	 * 
	 * @private
	 */
	SmartList.prototype._addHeaderToToolbar = function() {
		// always remove content first
		if (this._headerText) {
			this._oToolbar.removeContent(this._headerText);
		}

		if (!this._headerText) {
			this._headerText = new Title(this.getId() + "-header");
			this._headerText.addStyleClass("sapMH4Style");
			this._headerText.addStyleClass("sapUiCompSmartTableHeader");
		}

		this._refreshHeaderText();
		this._oToolbar.insertContent(this._headerText, 0);
	};

	/**
	 * adds a spacer to the toolbar
	 * 
	 * @private
	 */
	SmartList.prototype._addSpacerToToolbar = function() {
		var bFoundSpacer = false, aItems = this._oToolbar.getContent(), i, iLength;
		if (aItems) {
			iLength = aItems.length;
			i = 0;
			for (i; i < iLength; i++) {
				if (aItems[i] instanceof sap.m.ToolbarSpacer) {
					bFoundSpacer = true;
					break;
				}
			}
		}

		if (!bFoundSpacer) {
			this._oToolbar.addContent(new sap.m.ToolbarSpacer(this.getId() + "-toolbarSpacer"));
		}
	};

	/**
	 * gets list's row count
	 * 
	 * @private
	 * @returns {int} the row count
	 */
	SmartList.prototype._getRowCount = function() {
		var oRowBinding = this._getRowBinding();

		if (!oRowBinding) {
			return 0;
		}

		var iRowCount = 0;
		if (oRowBinding.getTotalSize) {
			iRowCount = oRowBinding.getTotalSize();
		} else {
			iRowCount = oRowBinding.getLength();
		}

		if (iRowCount < 0 || iRowCount === "0") {
			iRowCount = 0;
		}

		return iRowCount;
	};

	/**
	 * returns the row/items binding of the currently used internal list
	 * 
	 * @private
	 * @returns {sap.ui.model.Binding} the row/items binding
	 */
	SmartList.prototype._getRowBinding = function() {
		if (this._oList) {
			return this._oList.getBinding(this._sAggregation);
		}
	};

	/**
	 * Initialises the OData metadata necessary to create the list
	 * 
	 * @private
	 */
	SmartList.prototype._initialiseMetadata = function() {
		if (!this.bIsInitialised) {
			ODataModelUtil.handleModelInit(this, this._onMetadataInitialised);
		}
	};

	/**
	 * Called once the necessary Model metadata is available
	 * 
	 * @private
	 */
	SmartList.prototype._onMetadataInitialised = function() {
		this._bMetaModelLoadAttached = false;
		if (!this.bIsInitialised) {
			this.detachModelContextChange(this._initialiseMetadata, this);
			// Indicates the control is initialised and can be used in the initialise event/otherwise!
			this.bIsInitialised = true;
			this._listenToSmartFilter();
			this._createToolbarContent();
			this._createContent();
			this.fireInitialise();
			this._checkAndTriggerBinding();
		}
	};

	/**
	 * Check if control needs to be bound and trigger binding accordingly.
	 * 
	 * @private
	 */
	SmartList.prototype._checkAndTriggerBinding = function() {
		if (!this._bAutoBindingTriggered) {
			this._bAutoBindingTriggered = true;
			if (this.getEnableAutoBinding()) {
				if (this._oSmartFilter) {
					this._oSmartFilter.search();
				} else {
					this._reBindList();
				}
			}
		}
	};

	/**
	 * Listen to changes on the corresponding SmartFilter (if any)
	 * 
	 * @private
	 */
	SmartList.prototype._listenToSmartFilter = function() {
		var sSmartFilterId = null;
		// Register for SmartFilter Search
		sSmartFilterId = this.getSmartFilter();
		if (typeof sSmartFilterId === "string") {
			this._oSmartFilter = sap.ui.getCore().byId(sSmartFilterId);
		} else {
			this._oSmartFilter = sSmartFilterId;
		}

		if (this._oSmartFilter) {
			this._oSmartFilter.attachSearch(this._reBindList, this);
			this._oSmartFilter.attachFilterChange(this._filterChangeEvent, this);
			this._oSmartFilter.attachCancel(this._cancelEvent, this);

			// Set initial empty text only if a valid SmartFilter is found
			this._setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_DATA"));
		}
	};

	SmartList.prototype._filterChangeEvent = function() {
		if (this._isListBound() && this._oSmartFilter && !this._oSmartFilter.getLiveMode()) {
			this._showOverlay(true);
		}
	};

	SmartList.prototype._cancelEvent = function() {
		if (this._oSmartFilter && !this._oSmartFilter.getLiveMode()) {
			this._showOverlay(false);
		}
	};

	/**
	 * sets the ShowOverlay property on the inner list, fires the ShowOverlay event
	 * 
	 * @param {boolean} bShow true to display the overlay, otherwise false
	 * @private
	 */
	SmartList.prototype._showOverlay = function(bShow) {
		// to be implemented --> Not supported by the List/Tree
	};

	/**
	 * This can be used to trigger binding on the list used in the SmartList
	 * 
	 * @param {boolean} bForceRebind - force bind call to be triggered on the inner list
	 * @protected
	 */
	SmartList.prototype.rebindList = function(bForceRebind) {
		this._reBindList(null, bForceRebind);
	};

	/**
	 * Re-binds the list
	 * 
	 * @param {Object} mEventParams - the event parameters
	 * @param {boolean} bForceRebind - force bind call to be triggered on the list
	 * @private
	 */
	SmartList.prototype._reBindList = function(mEventParams, bForceRebind) {
		var oListBinding, sListBindingPath, aSmartFilters, aFilters, aSorters, mParameters = {}, mBindingParams = {
			preventListBind: false
		};

		// Get Filters and parameters from SmartFilter
		if (this._oSmartFilter) {
			aSmartFilters = this._oSmartFilter.getFilters();
			mParameters = this._oSmartFilter.getParameters() || {};
		}
		aFilters = aSmartFilters;

		// No sorters yet!
		if (!aSorters) {
			aSorters = [];
		}

		// Select parameters
		mParameters["select"] = this.getSelectFields();
		// expand parameters
		mParameters["expand"] = this.getExpandFields();

		// Enable batch requests (by default)
		mParameters["useBatchRequests"] = true;

		mBindingParams.filters = aFilters;
		mBindingParams.sorter = aSorters;
		mBindingParams.parameters = mParameters;
		mBindingParams.length = undefined;
		mBindingParams.startIndex = undefined;
		// fire event to enable user modification of certain binding options (Ex: Filters)
		this.fireBeforeRebindList({
			bindingParams: mBindingParams
		});

		if (!mBindingParams.preventListBind) {
			aSorters = mBindingParams.sorter;
			aFilters = mBindingParams.filters;
			mParameters = mBindingParams.parameters;

			sListBindingPath = this.getListBindingPath() || ("/" + this.getEntitySet());
			this._bDataLoadPending = true;
			this._bIgnoreChange = false; // if a 2nd request is sent while the 1st one is in progress the dataReceived event may not be fired!
			// Only check if binding exists, if list is not being forcefully rebound
			if (!bForceRebind) {
				oListBinding = this._oList.getBinding(this._sAggregation);
				if (oListBinding && oListBinding.mParameters) {
					// Check if binding needs to be redone!
					// Evaluate to true if:
					// binding parameters change -or- custom binding parameters change -or- if length, startIndex or listBindingPath change!
					bForceRebind = !(jQuery.sap.equal(mParameters, oListBinding.mParameters, true) && jQuery.sap.equal(mParameters.custom, oListBinding.mParameters.custom) && !mBindingParams.length && !mBindingParams.startIndex && sListBindingPath === oListBinding.getPath());
				}
			}

			// do the binding if no binding is already present or if it is being forced!
			if (!oListBinding || !this._bIsListBound || bForceRebind) {
				this._oList.bindItems({
					path: sListBindingPath,
					filters: aFilters,
					sorter: aSorters,
					parameters: mParameters,
					length: mBindingParams.length,
					startIndex: mBindingParams.startIndex,
					template: this._oTemplate,
					events: {
						dataRequested: function() {
							this._bIgnoreChange = true;
						}.bind(this),
						dataReceived: function(mEventParams) {
							this._bIgnoreChange = false;
							this._onDataLoadComplete(mEventParams, true);
							// notify any listeners about dataReceived
							this.fireDataReceived(mEventParams);
						}.bind(this),
						change: function(mEventParams) {
							if (this._bIgnoreChange) {
								return;
							}
							var sReason, bForceUpdate = false;
							sReason = (mEventParams && mEventParams.getParameter) ? mEventParams.getParameter("reason") : undefined;
							// Force update state if reason for binding change is "context" or "filter" -or- not defined
							if (!sReason || sReason === "filter" || sReason === "context") {
								bForceUpdate = true;
							}
							if (sReason === "change" || bForceUpdate) {
								this._onDataLoadComplete(mEventParams, bForceUpdate);
							}
						}.bind(this)
					}
				});
				// Flag to indicate if list was bound (data fetch triggered) at least once
				this._bIsListBound = true;
			} else {
				oListBinding.sort(aSorters);
				oListBinding.filter(aFilters, "Application");
			}
			this._showOverlay(false);
		}
	};

	/**
	 * Called once data is loaded in the binding (i.e. either backend fetch or once change event is fired)
	 * 
	 * @param {Object} mEventParams - the event parameters
	 * @param {boolean} bForceUpdate - force update
	 * @private
	 */
	SmartList.prototype._onDataLoadComplete = function(mEventParams, bForceUpdate) {
		if (this._bDataLoadPending || bForceUpdate) {
			this._bDataLoadPending = false;
			// Update No data text (once) only if list has no results!
			if (!this._bNoDataUpdated && !this._getRowCount()) {
				this._bNoDataUpdated = true;
				this._setNoDataText();
			}
			this._refreshHeaderText();
		}
	};

	/**
	 * Returns true if the inner UI5 list was bound at least once by the SmartList -or- if binding was done by the app.
	 * 
	 * @returns {Boolean} whether the inner UI5 list is bound
	 * @private
	 */
	SmartList.prototype._isListBound = function() {
		if (this._bIsListBound) {
			return true;
		}
		if (this._oList) {
			return this._oList.isBound(this._sAggregation);
		}
		return false;
	};

	/**
	 * Sets the no data text to the internal list
	 * 
	 * @param {string} sOverwriteText - optional text to set on the list
	 * @private
	 */
	SmartList.prototype._setNoDataText = function(sOverwriteText) {
		if (this._oList) {
			if (!sOverwriteText) {
				sOverwriteText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_RESULTS");
			}
			this._oList.setNoDataText(sOverwriteText);
		}
	};

	/**
	 * Creates the content based on the metadata/configuration
	 * 
	 * @private
	 */
	SmartList.prototype._createContent = function() {
		if (!this._oTemplate) {
			this._oTemplate = this.getListItemTemplate();
		}
	};

	/**
	 * Creates a list based on the configuration, if necessary. This also prepares the methods to be used based on the list type.
	 * 
	 * @private
	 */
	SmartList.prototype._createList = function() {
		var aContent = this.getItems(), iLen = aContent ? aContent.length : 0, oList, sId;
		// Check if a List already exists in the content (Ex: from view.xml)
		while (iLen--) {
			oList = aContent[iLen];
			if (oList instanceof List || oList instanceof Tree) {
				break;
			}
			oList = null;
		}

		// If a List exists determine its type else create one based on the listItemType property!
		if (oList) {
			this._oList = oList;
			if (oList instanceof Tree) {
				this._isTree = true;
			} else {
				this._isList = true;
			}
			// get the item template from the view
			this._oTemplate = (oList.getItems() && oList.getItems().length > 0) ? oList.getItems()[0] : this.getListItemTemplate();
			oList.removeAllItems();
		} else {
			sId = this.getId() + "-ui5list";
			// Create list/tree
			if (this.getListType() === "Tree") {
				this._oList = new Tree(sId);
				this._isTree = true;
			} else {
				this._oList = new List(sId, {
					growing: true,
					growingScrollToLoad: true
				});
				this._isList = true;
			}
			this.insertItem(this._oList, 2);
		}

		if (!this._oList.getLayoutData()) {
			this._oList.setLayoutData(new sap.m.FlexItemData({
				growFactor: 1,
				baseSize: "auto"
			}));
		}
		// Set ariaLabelledBy on the inner UI5 list
		this._oList.addAriaLabelledBy(this.getId() + "-header");

	};

	/**
	 * Returns the <code>List</code> or <code>Tree</code> used internally.
	 * 
	 * @public
	 * @returns {object} the control
	 */
	SmartList.prototype.getList = function() {
		return this._oList;
	};

	/**
	 * Checks whether the control is initialized.
	 * 
	 * @returns {boolean} returns whether control has already been initialized
	 * @protected
	 */
	SmartList.prototype.isInitialised = function() {
		return !!this.bIsInitialised;
	};

	/**
	 * Cleans up the control
	 * 
	 * @protected
	 */
	SmartList.prototype.exit = function() {
		// Cleanup smartFilter events as it can be used again stand-alone without being destroyed!
		if (this._oSmartFilter) {
			this._oSmartFilter.detachSearch(this._reBindList, this);
			this._oSmartFilter.detachFilterChange(this._filterChangeEvent, this);
			this._oSmartFilter.detachCancel(this._cancelEvent, this);
			this._oSmartFilter = null;
		}

		if (this._oFullScreenUtil) {
			this._oFullScreenUtil.cleanUpFullScreen(this);
			this._oFullScreenUtil = null;
		}

		// Destroy the template as it is not part of the UI5 list as long as it is not bound!
		if (!this._bIsListBound && this._oTemplate) {
			this._oTemplate.destroy();
		}
		this._oTemplate = null;
		this._oToolbar = null;
		this._headerText = null;
		this._oFullScreenButton = null;
		this._oNumberFormatter = null;
		this._oList = null;
	};

	return SmartList;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartlist/SmartList.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartAreaMicroChart.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartmicrochart.SmartAreaMicroChart control.
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartAreaMicroChart.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartmicrochart/SmartAreaMicroChart.designtime",[], function() {
	"use strict";
	return {
		annotations: {
			/**
			 * Renders a AreaMicroChart based on the <code>Chart</code> annotation.
			 * <i>XML Example of SmartAreaMicroChart with Chart Annotation</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;AmcNamespace.StockPrice&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot; Qualifier=&quot;AreaChartQualifier&quot;&gt;
			 *        &lt;Record&gt;
			 *          &lt;PropertyValue Property=&quot;Title&quot; Path=&quot;Title&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;ChartType&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.Chart/Area&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Description&quot; Path=&quot;Description&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Dimensions&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;Day&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;Measures&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;Price&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;MeasureAttributes&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.ChartMeasureAttributeType&quot;&gt;
			 *                &lt;PropertyValue Property=&quot;Measure&quot; PropertyPath=&quot;Price&quot; /&gt;
			 *                &lt;PropertyValue Property=&quot;Role&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis1&quot; /&gt;
			 *                &lt;PropertyValue Property=&quot;DataPoint&quot; AnnotationPath=&quot;@com.sap.vocabularies.UI.v1.DataPoint#AreaChartDataPoint&quot; /&gt;
			 *              &lt;/Record&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *        &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			chart: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "Chart",
				target: ["EntityType"],
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>ChartDefinitionType</code> is <code>ComplexType</code> that is used to describe the <code>Chart</code> annotation.
			 */
			chartDefinitionType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "ChartDefinitionType",
				target: ["EntityType"],
				whiteList: {
					properties: [
						"Title",
						"Description",
						"ChartType",
						"Measures",
						"MeasureAttributes",
						"Dimensions"
					]
				},
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>ChartType</code> is <code>EnumType</code> that is provided within the <code>Chart</code> annotation. The <code>ChartType</code> property value must be Area or Line.
			 * <i>XML Example of using ChartType property with Area</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot; Qualifier=&quot;AreaChartQualifier&quot;&gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.ChartDefinitionType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;ChartType&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.Chart/Area&quot; /&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 */
			chartType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "ChartType",
				target: ["Property"],
				whiteList: {
					values: ["Area", "Line"]
				},
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * Based on the <code>DataPoint</code> annotation that is provided by the <code>MeasureAttributes</code>, the color of the chart is defined
			 * due to the thresholds by using the <code>CriticalityCalculation</code> property and <code>ImprovementDirection</code> property.
			 * <code>DataPoint</code> must be defined for an <code>EntityType</code>
			 * <i>XML Example of using DataPoint annotation and CriticalityCalculation property</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.DataPoint&quot; Qualifier=&quot;AreaChartDataPoint&quot; &gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.DataPointType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;Value&quot; Path=&quot;Price&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;TargetValue&quot; Path=&quot;PriceTarget&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;CriticalityCalculation&quot;&gt;
			 *          &lt;Record Type=&quot;UI.CriticalityCalculationType&quot;&gt;
			 *            &lt;PropertyValue Property=&quot;ImprovementDirection&quot; EnumMember=&quot;UI.ImprovementDirectionType/Target&quot; /&gt;
			 *            &lt;PropertyValue Property=&quot;DeviationRangeLowValue&quot; Path=&quot;PriceDeviationLowerBound&quot;/&gt;
			 *            &lt;PropertyValue Property=&quot;ToleranceRangeLowValue&quot; Path=&quot;PriceToleranceLowerBound&quot;/&gt;
			 *            &lt;PropertyValue Property=&quot;ToleranceRangeHighValue&quot; Path=&quot;PriceToleranceUpperBound&quot;/&gt;
			 *            &lt;PropertyValue Property=&quot;DeviationRangeHighValue&quot; Path=&quot;PriceDeviationUpperBound&quot;/&gt;
			 *          &lt;/Record&gt;
			 *        &lt;/PropertyValue&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 */
			dataPoint: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "DataPoint",
				target: ["EntityType"],
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>DataPointType</code> is <code>ComplexType</code> that is used to define the type of the <code>DataPoint</code> annotation.
			 */
			dataPointType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "DataPointType",
				target: ["EntityType"],
				whiteList: {
					properties: [
						"Value",
						"TargetValue",
						"CriticalityCalculation"
					]
				},
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>CriticalityCalculationType</code> is <code>ComplexType</code> that is used to define the type of <code>CriticalityCalculation</code> property in the <code>DataPoint</code> annotation.
			 * <i>XML Example of using CriticalityCalculation property with the CriticalityCalculationType type</i>
			 *
			 * <pre>
			 *    &lt;PropertyValue Property=&quot;CriticalityCalculation&quot;&gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.CriticalityCalculationType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;ImprovementDirection&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ImprovementDirectionType/Target&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;DeviationRangeLowValue&quot; Path=&quot;PriceDeviationLowerBound&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;ToleranceRangeLowValue&quot; Path=&quot;PriceToleranceLowerBound&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;ToleranceRangeHighValue&quot; Path=&quot;PriceToleranceUpperBound&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;DeviationRangeHighValue&quot; Path=&quot;PriceDeviationUpperBound&quot;/&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/PropertyValue&gt;
			 * </pre>
			 */
			criticalityCalculationType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "CriticalityCalculationType",
				target: ["Property"],
				whiteList: {
					properties: [
						"ImprovementDirection",
						"ToleranceRangeLowValue",
						"ToleranceRangeHighValue",
						"DeviationRangeLowValue",
						"DeviationRangeHighValue"
					]
				},
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>ISOCurrency</code> annotation describes the <code>Value</code> property of the <code>DataPoint</code> annotation.
			 * <i>XML Example of using ISOCurrency annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Revenue&quot;&gt;
			 *       &lt;Annotation Term=&quot;Org.OData.Measures.V1.ISOCurrency&quot; Path=&quot;Currency&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;Currency&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 */
			currency: {
				namespace: "Org.OData.Measures.V1",
				annotation: "ISOCurrency",
				target: ["Property"],
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>Unit</code> annotation describes the <code>Value</code> property of the <code>DataPoint</code> annotation.
			 * <i>XML Example of using Unit annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Revenue&quot;&gt;
			 *       &lt;Annotation Term=&quot;Org.OData.Measures.V1.Unit&quot; Path=&quot;Currency&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;Currency&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 */
			unit: {
				namespace: "Org.OData.Measures.V1",
				annotation: "Unit",
				target: ["Property"],
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>IsCalendarYear</code> annotation describes the Dimensions property in the <code>Chart</code> annotation.
			 * A corresponding formatter is used to format the value of the Dimensions property.
			 * <i>XML Example of using IsCalendarYear annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Date&quot;&gt;
			 *       &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.IsCalendarYear&quot;/&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 */
			isCalendarYear: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "IsCalendarYear",
				target: ["Property"],
				defaultValue: null,
				since: "1.44.0"
			},

			/**
			 * The <code>IsCalendarYearMonth</code> annotation describes the Dimensions property in the <code>Chart</code> annotation.
			 * A corresponding formatter is used to format the value of the Dimensions property.
			 * <i>XML Example of using IsCalendarYearMonth annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Date&quot;&gt;
			 *       &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.IsCalendarYearMonth&quot;/&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 */
			isCalendarYearMonth: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "IsCalendarYearMonth",
				target: ["Property"],
				defaultValue: null,
				since: "1.44.0"
			},

			/**
			 * The <code>IsCalendarDate</code> annotation describes the Dimensions property in the <code>Chart</code> annotation.
			 * A corresponding formatter is used to format the value of the Dimensions property.
			 * <i>XML Example of using IsCalendarDate annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Date&quot;&gt;
			 *       &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.IsCalendarDate&quot;/&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 */
			isCalendarDate: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "IsCalendarDate",
				target: ["Property"],
				defaultValue: null,
				since: "1.44.0"
			}
		},

		customData: {
			/**
			 * Defines whether a Qualifier needs to be considered or not. If provided the value of the customData is the qualifier value without hashtag ("#").
			 */
			chartQualifier : {
				type : "string",
				defaultValue : null,
				group : ["Appearance"],
				since : "1.42.0"
			}
		}
	};
}, /* bExport= */false);
}; // end of sap/ui/comp/smartmicrochart/SmartAreaMicroChart.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartAreaMicroChartRenderer') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartAreaMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartmicrochart/SmartAreaMicroChartRenderer",[ 'jquery.sap.global' ],
	function(jQuery) {
	"use strict";

	/**
	* @class SmartAreaMicroChart renderer.
	* @static
	* @version 1.50.6
	* @since 1.38.0
	*/
	var SmartAreaMicroChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	SmartAreaMicroChartRenderer.render = function(oRm, oControl) {
		if (oControl._bIsInitialized) {
			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl.getAggregation("_chart"));
			oRm.write("</div>");
		}
	};

	return SmartAreaMicroChartRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/comp/smartmicrochart/SmartAreaMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartBulletMicroChart.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartmicrochart.SmartBulletMicroChart control.
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartBulletMicroChart.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartmicrochart/SmartBulletMicroChart.designtime",[], function() {
	"use strict";
	return {
		annotations: {
			/**
			 * Renders a BulletMicroChart based on the <code>Chart</code> annotation.
			 * <i>XML Example of SmartBulletMicroChart with Chart annotation</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;BmcNamespace.ProductType&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot; Qualifier=&quot;BulletChartQualifier&quot;&gt;
			 *        &lt;Record&gt;
			 *          &lt;PropertyValue Property=&quot;Title&quot; Path=&quot;Title&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;ChartType&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.Chart/Bullet&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Description&quot; Path=&quot;Description&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Measures&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;Revenue&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;MeasureAttributes&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.ChartMeasureAttributeType&quot;&gt;
			 *                &lt;PropertyValue Property=&quot;Measure&quot; PropertyPath=&quot;Revenue&quot; /&gt;
			 *                &lt;PropertyValue Property=&quot;Role&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis1&quot; /&gt;
			 *                &lt;PropertyValue Property=&quot;DataPoint&quot; AnnotationPath=&quot;@com.sap.vocabularies.UI.v1.DataPoint#BulletChartDataPoint&quot; /&gt;
			 *              &lt;/Record&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *        &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			chart: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "Chart",
				target: ["EntityType"],
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>ChartDefinitionType</code> is <code>ComplexType</code> that is used to describe the <code>Chart</code> annotation.
			 */
			chartDefinitionType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "ChartDefinitionType",
				target: ["EntityType"],
				whiteList: {
					properties: [
						"Title",
						"Description",
						"ChartType",
						"Measures",
						"MeasureAttributes"
					]
				},
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>ChartType</code> is <code>EnumType</code> that is provided within the <code>Chart</code> annotation. The <code>ChartType</code> property value must be Bullet.
			 * <i>XML Example of using ChartType property with Bullet</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot; Qualifier=&quot;BulletChartQualifier&quot;&gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.ChartDefinitionType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;ChartType&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.Chart/Bullet&quot; /&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 */
			chartType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "ChartType",
				target: ["Property"],
				whiteList: {
					values: ["Bullet"]
				},
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * Based on the <code>DataPoint</code> annotation that is provided by the <code>MeasureAttributes</code> property, the color of the chart is defined
			 * due to the <code>Criticality</code> property directly or to the thresholds by using the <code>CriticalityCalculation</code> property.
			 * <code>DataPoint</code> must be defined for an <code>EntityType</code>
			 * <i>XML Example of using DataPoint annotation and Criticality property</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.DataPoint&quot; Qualifier=&quot;BulletChartDataPoint&quot; &gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.DataPointType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;Title&quot; String=&quot;Price&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;Value&quot; Path=&quot;Revenue&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;TargetValue&quot; Path=&quot;TargetRevenue&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;ForecastValue&quot; Path=&quot;ForecastRevenue&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;MinimumValue&quot; Decimal=&quot;0&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;MaximumValue&quot; Decimal=&quot;200&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;Criticality&quot; Path=&quot;Criticality&quot;/&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * <i>XML Example of using DataPoint annotation and CriticalityCalculation property</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.DataPoint&quot; Qualifier=&quot;BulletChartDataPoint&quot; &gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.DataPointType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;Title&quot; String=&quot;Price&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;Value&quot; Path=&quot;Revenue&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;TargetValue&quot; Path=&quot;TargetRevenue&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;ForecastValue&quot; Path=&quot;ForecastRevenue&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;MinimumValue&quot; Decimal=&quot;0&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;MaximumValue&quot; Decimal=&quot;200&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;CriticalityCalculation&quot;&gt;
			 *          &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.CriticalityCalculationType&quot;&gt;
			 *            &lt;PropertyValue Property=&quot;ImprovementDirection&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ImprovementDirectionType/Target&quot; /&gt;
			 *            &lt;PropertyValue Property=&quot;DeviationRangeLowValue&quot; Path=&quot;PriceDeviationLowerBound&quot;/&gt;
			 *            &lt;PropertyValue Property=&quot;ToleranceRangeLowValue&quot; Path=&quot;PriceToleranceLowerBound&quot;/&gt;
			 *            &lt;PropertyValue Property=&quot;ToleranceRangeHighValue&quot; Path=&quot;PriceToleranceUpperBound&quot;/&gt;
			 *            &lt;PropertyValue Property=&quot;DeviationRangeHighValue&quot; Path=&quot;PriceDeviationUpperBound&quot;/&gt;
			 *          &lt;/Record&gt;
			 *        &lt;/PropertyValue&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 */
			dataPoint: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "DataPoint",
				target: ["EntityType"],
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>DataPointType</code> is <code>ComplexType</code> that is used to define the type of the <code>DataPoint</code> annotation.
			 */
			dataPointType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "DataPointType",
				target: ["EntityType"],
				whiteList: {
					properties: [
						"Title",
						"Value",
						"TargetValue",
						"ForecastValue",
						"MinimumValue",
						"MaximumValue",
						"Criticality",
						"CriticalityCalculation"
					]
				},
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>CriticalityCalculationType</code> is <code>ComplexType</code> that is used to define the type of the <code>CriticalityCalculation</code> property in the <code>DataPoint</code> annotation.
			 * <i>XML Example of using the CriticalityCalculation property with the CriticalityCalculationType type</i>
			 *
			 * <pre>
			 *    &lt;PropertyValue Property=&quot;CriticalityCalculation&quot;&gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.CriticalityCalculationType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;ImprovementDirection&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ImprovementDirectionType/Target&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;DeviationRangeLowValue&quot; Path=&quot;DeviationLowerBound&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;ToleranceRangeLowValue&quot; Path=&quot;PriceToleranceLowerBound&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;ToleranceRangeHighValue&quot; Path=&quot;PriceToleranceUpperBound&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;DeviationRangeHighValue&quot; Path=&quot;PriceDeviationUpperBound&quot;/&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/PropertyValue&gt;
			 * </pre>
			 */
			criticalityCalculationType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "CriticalityCalculationType",
				target: ["Property"],
				whiteList: {
					properties: [
						"ImprovementDirection",
						"ToleranceRangeLowValue",
						"ToleranceRangeHighValue",
						"DeviationRangeLowValue",
						"DeviationRangeHighValue"
					]
				},
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>ISOCurrency</code> annotation describes the <code>Value</code> property of the <code>DataPoint</code> annotation.
			 * <i>XML Example of using ISOCurrency annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Revenue&quot;&gt;
			 *       &lt;Annotation Term=&quot;Org.OData.Measures.V1.ISOCurrency&quot; Path=&quot;Currency&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;Currency&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 */
			currency: {
				namespace: "Org.OData.Measures.V1",
				annotation: "ISOCurrency",
				target: ["Property"],
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>Unit</code> annotation describes the <code>Value</code> property of the <code>DataPoint</code> annotation.
			 * <i>XML Example of using Unit annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Revenue&quot;&gt;
			 *       &lt;Annotation Term=&quot;Org.OData.Measures.V1.Unit&quot; Path=&quot;Currency&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;Currency&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 */
			unit: {
				namespace: "Org.OData.Measures.V1",
				annotation: "Unit",
				target: ["Property"],
				defaultValue: null,
				since: "1.38.0"
			}
		},

		customData: {
			/**
			 * Defines whether a Qualifier needs to be considered or not. If provided the value of the customData is the qualifier value without hashtag ("#").
			 */
			chartQualifier : {
				type : "string",
				defaultValue : null,
				group : ["Appearance"],
				since : "1.42.0"
			}
		}
	};
}, /* bExport= */false);
}; // end of sap/ui/comp/smartmicrochart/SmartBulletMicroChart.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartBulletMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartBulletMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartmicrochart/SmartBulletMicroChartRenderer",[ 'jquery.sap.global' ],
	function(jQuery) {
	"use strict";
	/**
	 * @class SmartBulletMicroChart renderer.
	 * @static
	 * @version 1.50.6
	 * @since 1.38.0
	 */
	var SmartBulletMicroChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	SmartBulletMicroChartRenderer.render = function(oRm, oControl) {
		if (oControl._bIsInitialized) {
			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl.getAggregation("_chart"));
			oRm.write("</div>");
		}
	};

	return SmartBulletMicroChartRenderer;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartmicrochart/SmartBulletMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartMicroChart.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartmicrochart.SmartMicroChart control.
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartMicroChart.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartmicrochart/SmartMicroChart.designtime",[], function() {
	"use strict";
	return {
		annotations: {
			/**
			 * Renders a MicroChart based on the information that is provided within the <code>Chart</code> annotation. The <code>Chart</code> annotation
			 * contains the <code>ChartType</code> property that must be defined. Supported chart types are Area, Bullet, Donut and Line.
			 * <i>XML Example of using Chart annotation with Bullet ChartType</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;SmartMicroChart.ProductType&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot; Qualifier=&quot;BulletChartQualifier&quot;&gt;
			 *        &lt;Record&gt;
			 *          &lt;PropertyValue Property=&quot;ChartType&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartType/Bullet&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Title&quot; String=&quot;ProductTitle&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Description&quot; String=&quot;ProductDescription&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Measures&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;Revenue&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;MeasureAttributes&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.ChartMeasureAttributeType&quot;&gt;
			 *                &lt;PropertyValue Property=&quot;Measure&quot; PropertyPath=&quot;Revenue&quot; /&gt;
			 *                &lt;PropertyValue Property=&quot;Role&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis1&quot; /&gt;
			 *                &lt;PropertyValue Property=&quot;DataPoint&quot; AnnotationPath=&quot;@com.sap.vocabularies.UI.v1.DataPoint#BulletChartDataPoint&quot; /&gt;
			 *              &lt;/Record&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *        &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			chart: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "Chart",
				target: ["EntityType"],
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>ChartDefinitionType</code> is <code>ComplexType</code> that is used to describe the <code>Chart</code> annotation.
			 */
			chartDefinitionType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "ChartDefinitionType",
				target: ["EntityType"],
				whiteList: {
					properties: ["chartType"]
				},
				defaultValue: null,
				since: "1.38.0"
			},

			/**
			 * The <code>ChartType</code> is <code>EnumType</code> that is provided within the <code>Chart</code> annotation to define the chart type.
			 * Supported chart types are Area, Bullet, Donut and Line.
			 * <i>XML Example of using ChartType property with Bullet</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot; Qualifier=&quot;BulletChartQualifier&quot;&gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.ChartDefinitionType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;ChartType&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.Chart/Bullet&quot; /&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 */
			chartType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "ChartType",
				target: ["Property"],
				whiteList: {
					values: ["Area", "Bullet", "Donut", "Line"]
				},
				defaultValue: null,
				since: "1.38.0"
			}
		},

		customData: {
			/**
			 * Defines whether a Qualifier needs to be considered or not. If provided the value of the customData is the qualifier value without hashtag ("#").
			 */
			chartQualifier : {
				type : "string",
				defaultValue : null,
				group : ["Appearance"],
				since : "1.42.0"
			}
		}
	};
}, /* bExport= */false);
}; // end of sap/ui/comp/smartmicrochart/SmartMicroChart.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartmicrochart/SmartMicroChartRenderer",[ 'jquery.sap.global' ],
	function(jQuery) {
	"use strict";
	/**
	 * @class SmartMicroChart renderer.
	 * @static
	 * @version 1.50.6
	 * @since 1.38.0
	 */
	var SmartMicroChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	SmartMicroChartRenderer.render = function(oRm, oControl) {
		if (oControl._bIsinitialized) {
			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl.getAggregation("_chart"));
			oRm.write("</div>");
		}
	};

	return SmartMicroChartRenderer;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartmicrochart/SmartMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartRadialMicroChart.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartmicrochart.SmartRadialMicroChart control.
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartRadialMicroChart.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartmicrochart/SmartRadialMicroChart.designtime",[], function() {
	"use strict";
	return {
		annotations: {
			/**
			 * Renders a RadialMicroChart based on the <code>Chart</code> annotation.
			 * <i>XML Example of SmartRadialMicroChart with Chart Annotation</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;DmcNamespace.ProductType&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot; Qualifier=&quot;DonutChartQualifier&quot;&gt;
			 *        &lt;Record&gt;
			 *          &lt;PropertyValue Property=&quot;Title&quot; Path=&quot;Title&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;ChartType&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.Chart/Donut&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Description&quot; Path=&quot;Description&quot; /&gt;
			 *          &lt;PropertyValue Property=&quot;Measures&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;PropertyPath&gt;Sold&lt;/PropertyPath&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property=&quot;MeasureAttributes&quot;&gt;
			 *            &lt;Collection&gt;
			 *              &lt;Record Type=&quot;ChartMeasureAttributeType&quot;&gt;
			 *                &lt;PropertyValue Property=&quot;Measure&quot; PropertyPath=&quot;Price&quot; /&gt;
			 *                &lt;PropertyValue Property=&quot;Role&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis1&quot; /&gt;
			 *                &lt;PropertyValue Property=&quot;DataPoint&quot; AnnotationPath=&quot;@com.sap.vocabularies.UI.v1.DataPoint#DonutChartDataPoint&quot; /&gt;
			 *              &lt;/Record&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *        &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			chart: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "Chart",
				target: ["EntityType"],
				defaultValue: null,
				since: "1.42.0"
			},

			/**
			 * The <code>ChartDefinitionType</code> is a <code>ComplexType</code> that is used to describe the <code>Chart</code> annotation.
			 */
			chartDefinitionType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "ChartDefinitionType",
				target: ["EntityType"],
				whiteList: {
					properties: [
						"Title",
						"Description",
						"ChartType",
						"Measures",
						"MeasureAttributes"
					]
				},
				defaultValue: null,
				since: "1.42.0"
			},

			/**
			 * The <code>ChartType</code> is <code>EnumType</code> that is provided within the <code>Chart</code> annotation. The <code>ChartType</code> property value must be Donut.
			 * <i>XML Example of SmartRadialMicroChart with chartType Donut</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;DmcNamespace.ProductType&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.Chart&quot; Qualifier=&quot;DonutChartQualifier&quot;&gt;
			 *        &lt;Record&gt;
			 *          &lt;PropertyValue Property=&quot;ChartType&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ChartType/Donut&quot; /&gt;
			 *        &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			chartType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "ChartType",
				target: ["Property"],
				whiteList: {
					values: ["Donut"]
				},
				defaultValue: null,
				since: "1.42.0"
			},

			/**
			 * Based on the <code>DataPoint</code> annotation that is provided by the <code>MeasureAttributes</code>, the color of the chart is defined
			 * due to the thresholds by either using the <code>Criticality</code> property or by using both <code>CriticalityCalculation</code> and <code>ImprovementDirection</code> properties.
			 * <code>DataPoint</code> must be defined for an <code>EntityType</code>
			 *
			 * <i>XML Example with DataPoint annotation and Criticality property</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.DataPoint&quot; Qualifier=&quot;DonutChartDataPointPercent&quot; &gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.DataPointType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;Value&quot; Path=&quot;Price&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;TargetValue&quot;&gt; /&gt;
			 *        &lt;PropertyValue Property=&quot;Criticality&quot;&gt; /&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * <i>XML Example with DataPoint annotation and CriticalityCalculation property</i>
			 *
			 * <pre>
			 *    &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.DataPoint&quot; Qualifier=&quot;DonutChartDataPointPercent&quot; &gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.DataPointType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;Value&quot; Path=&quot;Price&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;TargetValue&quot;&gt; /&gt;
			 *        &lt;PropertyValue Property=&quot;CriticalityCalculation&quot;&gt;
			 *          &lt;Record&gt;
			 *            &lt;PropertyValue Property=&quot;ImprovementDirection&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ImprovementDirectionType/Maximize&quot; /&gt;
			 *            &lt;PropertyValue Path=&quot;MinSold&quot; Property=&quot;DeviationRangeLowValue&quot;/&gt;
			 *            &lt;PropertyValue Path=&quot;ToleranceSold&quot; Property=&quot;ToleranceRangeLowValue&quot;/&gt;
			 *          &lt;/Record&gt;
			 *        &lt;/PropertyValue&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 */
			dataPoint: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "DataPoint",
				target: ["EntityType"],
				defaultValue: null,
				since: "1.42.0"
			},

			/**
			 * The <code>DataPointType</code> is <code>ComplexType</code> that is used to define the type of <code>DataPoint</code> annotation.
			 */
			dataPointType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "DataPointType",
				target: ["EntityType"],
				whiteList: {
					properties: [
						"Value",
						"TargetValue",
						"Criticality",
						"CriticalityCalculation"
					]
				},
				defaultValue: null,
				since: "1.42.0"
			},

			/**
			 * The <code>CriticalityCalculationType</code> is <code>ComplexType</code> that is used to define the type of <code>CriticalityCalculation</code> property in the <code>DataPoint</code> annotation.
			 * <i>XML Example of using CriticalityCalculation property with CriticalityCalculationType type</i>
			 *
			 * <pre>
			 *    &lt;PropertyValue Property=&quot;CriticalityCalculation&quot;&gt;
			 *      &lt;Record Type=&quot;com.sap.vocabularies.UI.v1.CriticalityCalculationType&quot;&gt;
			 *        &lt;PropertyValue Property=&quot;ImprovementDirection&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.ImprovementDirectionType/Target&quot; /&gt;
			 *        &lt;PropertyValue Property=&quot;DeviationRangeLowValue&quot; Path=&quot;DeviationLowerBound&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;ToleranceRangeLowValue&quot; Path=&quot;PriceToleranceLowerBound&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;ToleranceRangeHighValue&quot; Path=&quot;PriceToleranceUpperBound&quot;/&gt;
			 *        &lt;PropertyValue Property=&quot;DeviationRangeHighValue&quot; Path=&quot;PriceDeviationUpperBound&quot;/&gt;
			 *      &lt;/Record&gt;
			 *    &lt;/PropertyValue&gt;
			 * </pre>
			 */
			criticalityCalculationType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "CriticalityCalculationType",
				target: ["Property"],
				whiteList: {
					properties: [
						"ImprovementDirection",
						"ToleranceRangeLowValue",
						"ToleranceRangeHighValue",
						"DeviationRangeLowValue",
						"DeviationRangeHighValue"
					]
				},
				defaultValue: null,
				since: "1.42.0"
			},

			/**
			 * The <code>ISOCurrency</code> annotation describes the value property of the <code>DataPoint</code> annotation.
			 * <i>XML Example of ISOCurrency annotation</i>
			 *
			 * <pre>
			 *    &lt;Annotations xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot; Target=&quot;AmcNamespace.StockPrice/Price&quot; &gt;
			 *      &lt;Annotation Term=&quot;Org.OData.Measures.V1.ISOCurrency&quot; Path=&quot;Currency&quot;&gt;&lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			currency: {
				namespace: "Org.OData.Measures.V1",
				annotation: "ISOCurrency",
				target: ["Property"],
				defaultValue: null,
				since: "1.42.0"
			},

			/**
			 * The <code>Unit</code> annotation describes the value property of the <code>DataPoint</code> annotation.
			 * <i>XML Example of using Unit annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Revenue&quot;&gt;
			 *       &lt;Annotation Term=&quot;Org.OData.Measures.V1.Unit&quot; Path=&quot;Currency&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;Currency&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 */
			unit: {
				namespace: "Org.OData.Measures.V1",
				annotation: "Unit",
				target: ["Property"],
				defaultValue: null,
				since: "1.42.0"
			},

			/**
			 * The <code>Label</code> annotation describes the value property of the <code>DataPoint</code> annotation.
			 * <i>XML Example of using Label annotation</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Revenue&quot;&gt;
			 *       &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.Label&quot; Path=&quot;FreeText&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;FreeText&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 */
			label: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "Label",
				target: ["Property"],
				defaultValue: null,
				since: "1.42.0"
			}
		},

		customData: {
			/**
			 * Defines whether a Qualifier needs to be considered or not. If provided, the value of the customData is the qualifier value without hashtag ("#").
			 */
			chartQualifier : {
				type : "string",
				defaultValue : null,
				group : ["Appearance"],
				since : "1.42.0"
			}
		}
	};
}, /* bExport= */false);
}; // end of sap/ui/comp/smartmicrochart/SmartRadialMicroChart.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartRadialMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartRadialMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartmicrochart/SmartRadialMicroChartRenderer",[ 'jquery.sap.global' ],
	function(jQuery) {
	"use strict";
	/**
	 * @class SmartRadialMicroChart renderer.
	 * @static
	 * @version 1.50.6
	 * @since 1.42.0
	 */
	var SmartRadialMicroChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	SmartRadialMicroChartRenderer.render = function(oRm, oControl) {
		if (oControl._bIsInitialized) {
			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl.getAggregation("_chart"));
			oRm.write("</div>");
		}
	};

	return SmartRadialMicroChartRenderer;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartmicrochart/SmartRadialMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smarttable.SmartTable.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smarttable.SmartTable control.
jQuery.sap.declare('sap.ui.comp.smarttable.SmartTable.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smarttable/SmartTable.designtime",[], function() {
	"use strict";

	return {
		aggregations: {
			customToolbar: {
				ignore: true
			},
			semanticObjectController: {
				ignore: true
			},
			noData: {
				ignore: true
			}
		},
		annotations: {
			/**
			 * Defines whether a column can be sorted.
			 * Columns are sortable by default. If sorting on columns has to be restricted,
			 * then such columns must be listed under <code>NonSortableProperties</code> (exclude from sorting).
			 *
			 * The annotation is calculated from the currently bound <code>EntitySet</code> and contains a <code>Property</code> collection of the
			 * corresponding <code>EntityType</code> definition. Only <code>PropertyPath</code> for columns to be excluded from sorting can be applied.
			 *
			 * For columns added to the content of the SmartTable control, the annotation is not used, and the hosting component needs to take care
			 * of correct settings.
			 *
			 * <i>XML Example of OData V4 with Customer and CompanyCode Properties Excluded from Sorting</i>
			 * <pre>
			 *    &lt;Annotation Term="Org.OData.Capabilities.V1.SortRestrictions"&gt;
			 *      &lt;PropertyValue Property="NonSortableProperties"&gt;
			 *        &lt;Collection&gt;
			 *           &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *           &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *        &lt;/Collection&gt;
			 *      &lt;/PropertyValue&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:sortable</code> annotation on the <code>Property</code> can be used to exclude from sorting.
			 * <pre>
			 *    &lt;Property Name="Customer" ... sap:sortable="false"/&gt;
			 *    &lt;Property Name="CompanyCode" ... sap:sortable="false"/&gt;
			 * </pre>
			 */
			sortable: {
				namespace: "Org.OData.Capabilities.V1",
				annotation: "SortRestrictions",
				target: ["EntitySet"],
				whiteList: {
					properties: ["NonSortableProperties"]
				},
				defaultValue: true,
				interpretation: "exclude",
				appliesTo: ["columns/#"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Defines whether a column can be filtered.
			 * Columns are filterable by default and need to be excluded.
			 *
			 * The annotation is calculated from the currently bound <code>EntitySet</code> and contains a <code>PropertyPath</code> collection of the
			 * corresponding <code>EntityType</code> definition. Only PropertyPaths for columns to be excluded from filtering can be applied.
			 *
			 * For columns added to the content's table of the SmartTable, the annotation is not used and the hosting component needs to take care
			 * of correct settings.
			 *
			 * <b>Note:</b> Currently only OData V2 annotation is supported.
			 *
			 * <i>XML Example of OData V4 with Excluded Customer and CompanyCode Properties from Filtering</i>
			 * <pre>
			 *    &lt;Annotation Term="Org.OData.Capabilities.V1.FilterRestrictions"&gt;
			 *      &lt;PropertyValue Property="NonFilterableProperties"&gt;
			 *        &lt;Collection&gt;
			 *           &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *           &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *        &lt;/Collection&gt;
			 *      &lt;/PropertyValue&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:filterable</code> annotation on the <code>Property</code> can be used to exclude from filtering.
			 * <pre>
			 *    &lt;Property Name="Customer" ... sap:filterable="false"/&gt;
			 *    &lt;Property Name="CompanyCode" ... sap:filterable="false"/&gt;
			 * </pre>
			 */
			filterable: {
				namespace: "Org.OData.Capabilities.V1",
				annotation: "FilterRestrictions",
				target: ["EntitySet"],
				whiteList: {
					properties: ["NonFilterableProperties"]
				},
				defaultValue: true,
				interpretation: "exclude",
				appliesTo: ["columns/#"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * A short, human-readable text suitable for the column header's text.
			 *
			 * Either <code>com.sap.vocabularies.Common.v1.Label</code> annotation on the <code>Property</code> or <code>Label</code> annotation of
			 * <code>com.sap.vocabularies.UI.v1.DataFieldAbstract</code> within <code>com.sap.vocabularies.UI.v1.LineItem</code> annotation can be used.
			 * If <code>com.sap.vocabularies.Common.v1.Label</code> annotation is given, it has precedence.
			 * If none of the annotations is given the label will be the Property name of the column.
			 *
			 * For columns added to the content's table of the SmartTable, the annotation is not used and the hosting component needs to take care
			 * of correct settings and translation.
			 *
			 * <i>XML Example of OData V4 with CustomerName as Label for Customer Property</i>
			 * <pre>
			 *    &lt;Property Name="Customer"&gt;
			 *       &lt;Annotation Term="com.sap.vocabularies.Common.v1.Label" Path="CustomerName" /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name="CustomerName" type="Edm.String" /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:label</code> annotation on the <code>Property</code> can be used to define the label of the column.
			 * <pre>
			 *    &lt;Property Name="Customer" ... sap:label="My Customer"/&gt;
			 * </pre>
			 *
			 */
			columnLabelOnProperty: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "Label",
				target: ["Property", "PropertyPath"],
				defaultValue: null,
				appliesTo: ["columns/#/label"],
				group: ["Appearance", "Behavior"],
				since: "1.28.1"
			},

			/**
			 * Defines whether the column is visible.
			 * The SmartTable control interprets the <code>EnumMember</code> <code>FieldControlType/Hidden</code> of the <code>FieldControl</code> annotation for setting the visibility.
			 * If a <code>Property</code> is set to hidden in OData annotation, then the SmartTable control ignores processing this <code>Property</code>.
			 *
			 * <b>Note:</b> Currently only <code>FieldControlType/Hidden</code> is supported for statically hiding the columns.
			 *
			 * <i>XML Example of OData V4 with Hidden Customer and CompanyCode Properties</i>
			 * <pre>
			 *    &lt;Property Name="Customer"&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/Hidden&quot;/&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name="CompanyCode"&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.FieldControl&quot; EnumMember=&quot;com.sap.vocabularies.Common.v1.FieldControlType/Hidden&quot;/&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:visible</code> annotation on the <code>Property</code> can be used to assign visibility.
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:visible=&quot;false&quot;/&gt;
			 *    &lt;Property Name=&quot;CompanyCode&quot; ... sap:visible=&quot;false&quot;/&gt;
			 * </pre>
			 */
			columnVisible: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "FieldControlType",
				target: ["Property"],
				whiteList: {
					values: ["Hidden"]
				},
				defaultValue: false,
				appliesTo: ["columns/#/visible"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Defines a currency code for an amount according to the ISO 4217 standard.
			 * <code>ISOCurrency</code> annotation can point to a <code>Property</code>, which can also be <code>null</code>.
			 *
			 * <i>XML Example of OData V4 with CurrencyCode Associated to Price Property</i>
			 * <pre>
			 *    &lt;Property Name="Price"&gt;
			 *       &lt;Annotation Term="Org.OData.Measures.V1.ISOCurrency" Path="CurrencyCode" /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name="CurrencyCode" type="Edm.String" /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:semantics="currency-code"</code> along with <code>sap:unit</code> annotations on the <code>Property</code> can be used to assign a currency code to the field.
			 * <pre>
			 *    &lt;Property Name="Price" ... sap:ubit="CurrencyCode"/&gt;
			 *    &lt;Property Name="CurrencyCode" ... sap:semantics="currency-code"/&gt;
			 * </pre>
			 */
			columnCurrencyCode: {
				namespace: "Org.OData.Measures.V1",
				annotation: "ISOCurrency",
				target: ["Property"],
				defaultValue: null,
				appliesTo: ["columns/#/cellContent"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * The unit of measure for a measured quantity, for example, cm for centimeters.
			 * Renders the value associated with the unit annotation of a <code>Property</code>, which can be <code>null</code>.
			 *
			 * <i>XML Example of OData V4 with OrderedUnit Associated to OrderedQuantity Property</i>
			 * <pre>
			 *   &lt;Property Name="OrderedQuantity"&gt;
			 *     &lt;Annotation Term="Org.OData.Measures.V1.Unit" Path="OrderedUnit" /&gt;
			 *   &lt;/Property&gt;
			 *   &lt;Property Name="OrderedUnit" type="Edm.String" /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:semantics="unit-of-measure"</code> along with <code>sap:unit</code> annotations on the <code>Property</code> can be used to assign unit of measure to the field.
			 * <pre>
			 *    &lt;Property Name="OrderedQuantity" ... sap:unit="OrderedUnit"/&gt;
			 *    &lt;Property Name="OrderedUnit" ... sap:semantics="unit-of-measure"/&gt;
			 * </pre>
			 */
			columnUnitOfMeasure: {
				namespace: "Org.OData.Measures.V1",
				annotation: "Unit",
				target: ["Property"],
				defaultValue: null,
				appliesTo: ["columns/#/cellContent"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Defines whether a string is capitalized.
			 *
			 * <i>XML Example of OData V4 with Capitalized Customer and CompanyCode Properties</i>
			 * <pre>
			 *    &lt;Annotation Term="com.sap.vocabularies.Common.v1.IsUpperCase"&gt;
			 *        &lt;Collection&gt;
			 *           &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *           &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *        &lt;/Collection&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:display-format="UpperCase"</code> annotation on the <code>Property</code> can be used to render the text in upper case format.
			 * <pre>
			 *    &lt;Property Name="Customer" ... sap:display-format="UpperCase"/&gt;
			 *    &lt;Property Name="CompanyCode" ... sap:display-format="UpperCase"/&gt;
			 * </pre>
			 */
			columnUpperCase: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "IsUpperCase",
				target: ["Property", "Parameter"],
				defaultValue: true,
				appliesTo: ["columns/#", "columns/#/cellContent"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Renders the initial columns for the SmartTable control.
			 *
			 * <i>XML Example of OData V4 Customer and CompanyCode Properties as LineItem</i>
			 * <pre>
			 *    &lt;Annotation Term="com.sap.vocabularies.UI.v1.LineItem"&gt;
			 *        &lt;Collection&gt;
			 *          &lt;Record&gt;
			 *             &lt;PropertyValue Property="Value" Path="Customer" /&gt;
			 *             &lt;PropertyValue Property="Value" Path="CompanyCode" /&gt;
			 *           &lt;/Record&gt;
			 *        &lt;/Collection&gt;
			 *    &lt;/Annotation&gt;
			 * </pre>
			 *
			 * Supported record types are: <code>DataFieldWithUrl</code> and <code>DataField</code>.
			 */
			lineItem: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "LineItem",
				target: ["EntityType"],
				whiteList: {
					types: ["DataFieldWithUrl", "DataField"]
				},
				defaultValue: null,
				appliesTo: ["columns"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Renders the initial columns for the SmartTable control.
			 * A <code>PropertyPath</code> and an <code>AnnotationPath</code> can be used for constructing PresentationVariant annotation.
			 *
			 * <i>XML Example of OData V4 with Customer and CompanyCode Properties as PresentationVariant</i>
			 * <pre>
			 *    &lt;Annotation Term="com.sap.vocabularies.UI.v1.PresentationVariant"&gt;
			 *      &lt;Record&gt;
			 *        &lt;PropertyValue Property="Visualizations"&gt;
			 *          &lt;Collection&gt;
			 *            &lt;AnnotationPath&gt;@UI.LineItem&lt;/AnnotationPath&gt;
			 *          &lt;/Collection&gt;
			 *        &lt;/PropertyValue&gt;
			 *        &lt;PropertyValue Property="RequestAtLeast"&gt;
			 *          &lt;Collection&gt;
			 *            &lt;PropertyPath&gt;Customer&lt;/PropertyPath&gt;
			 *            &lt;PropertyPath&gt;CompanyCode&lt;/PropertyPath&gt;
			 *          &lt;/Collection&gt;
			 *        &lt;/PropertyValue&gt;
			 *          &lt;PropertyValue Property="SortOrder"&gt;
			 *            &lt;Collection&gt;
			 *              &lt;Record&gt;
			 *                &lt;PropertyValue Property="Property" PropertyPath="CompanyCode"/&gt;
			 *                &lt;PropertyValue Property="Descending" Bool="true"/&gt;
			 *              &lt;/Record&gt;
			 *              &lt;Record&gt;
			 *                &lt;PropertyValue Property="Property" PropertyPath="Customer"/&gt;
			 *              &lt;/Record&gt;
			 *            &lt;/Collection&gt;
			 *          &lt;/PropertyValue&gt;
			 *        &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 * </pre>
			 */
			presentationVariant: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "PresentationVariant",
				target: ["EntitySet", "EntityType"],
				defaultValue: null,
				appliesTo: ["columns"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Shows columns with priority high on phones, with priority medium or high on tablets, and with all priorities on the desktop.
			 *
			 * <b>Note:</b> Currently the <code>Importance</code> annotation is only evaluated in the <code>LineItem DataField</code> annotation.
			 *
			 * <i>XML Example of OData V4 with the Importance Annotation</i>
			 * <pre>
			 *    &lt;Property Name="Customer"&gt;
			 *      &lt;Annotation Term="com.sap.vocabularies.UI.v1.Importance" EnumMember="com.sap.vocabularies.UI.v1.ImportanceType/High" /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name="CompanyCode"&gt;
			 *      &lt;Annotation Term="com.sap.vocabularies.UI.v1.Importance" EnumMember="com.sap.vocabularies.UI.v1.ImportanceType/Medium" /&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 */
			columnImportance: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "Importance",
				target: ["Record", "Annotation"],
				defaultValue: null,
				appliesTo: ["columns/#/visible"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * This annotation can be specified along with the <code>LineItem</code> annotation in order to specify that a property
			 * is rendered as a regular data field.
			 *
			 * <i>XML Example for OData V4 with DataField Annotation</i>
			 * <pre>
			 *    &lt;Record Type="com.sap.vocabularies.UI.v1.DataField"&gt;
			 *      &lt;Annotation Term="UI.Importance" EnumMember="UI.ImportanceType/High"/&gt;
			 *      &lt;PropertyValue Property="Label" String="Language"/&gt;
			 *      &lt;PropertyValue Property="Value" Path="Language"/&gt;
			 *    &lt;/Record&gt;
			 * </pre>
			 *
			 *  Supported properties are: <code>Criticality, CriticalityRepresentation, Label</code> and <code>Value</code>.
			 */
			columnDataField: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "DataField",
				target: ["LineItem/Record"],
				whiteList: {
					properties: [
						"Criticality",
						"CriticalityRepresentation",
						"Label",
						"Value"
					]
				},
				defaultValue: null,
				appliesTo: ["columns/cellContent"],
				group:["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Renders the value as a URL, if a URL parameter path is present.
			 * This annotation must be specified along with the <code>LineItem</code> annotation.
			 *
			 * <b>Note:</b> Currently only <code>odata.fillUriTemplate</code> with LabeledElement for filling the URL parameter is support
			 * in the <code>Apply Function</code>.
			 *
			 * <i>XML Example for OData V4 with DataFieldWithUrl Annotation</i>
			 * <pre>
			 *    &lt;Record Type="com.sap.vocabularies.UI.v1.DataFieldWithUrl"&gt;
			 *      &lt;PropertyValue Property="Label" String="Link to"/&gt;
			 *      &lt;PropertyValue Property="Value" String="Google Maps"/&gt;
			 *      &lt;PropertyValue Property="Url"&gt;
			 *        &lt;Apply Function="odata.fillUriTemplate"&gt;
			 *          &lt;String&gt;https://www.google.de/maps/{city1}/{street},{city2}&lt;/String&gt;
			 *            &lt;LabeledElement Name="street"&gt;
			 *              &lt;Path&gt;Address/Street&lt;/Path&gt;
			 *            &lt;/LabeledElement&gt;
			 *            &lt;LabeledElement Name="city1"&gt;
			 *              &lt;Path&gt;Address/City&lt;/Path&gt;
			 *            &lt;/LabeledElement&gt;
			 *            &lt;LabeledElement Name="city2"&gt;
			 *              &lt;Path&gt;Address/City&lt;/Path&gt;
			 *            &lt;/LabeledElement&gt;
			 *        &lt;/Apply&gt;
			 *      &lt;/PropertyValue&gt;
			 *    &lt;/Record&gt;
			 * </pre>
			 *
			 * Supported properties are: <code>Url, Label</code> and <code>Value</code>.
			 */
			columnDataFieldWithUrl: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "DataFieldWithUrl",
				target: ["LineItem/Record"],
				whiteList: {
					properties: [
						"Label",
						"Url",
						"Value"
					]
				},
				defaultValue: null,
				appliesTo: ["columns/cellContent"],
				group:["Behavior"],
				since: "1.38.1"
			},

			/**
			 * Represents the criticality state of the data that is present inside the column.
			 * This annotation must be specified along with the <code>LineItem</code> annotation.
			 * Color coding is also applied to the criticality state based on the provided <code>EnumMember</code>.
			 *
			 * <i>XML Example for OData V4 with CriticalityType Annotation</i>
			 * <pre>
			 *    &lt;Record Type="com.sap.vocabularies.UI.v1.DataField"&gt;
			 *      &lt;PropertyValue Property="Criticality"
			 *        Path="to_StockAvailability/StockAvailability" /&gt;
			 *      &lt;PropertyValue Property="CriticalityRepresentation"
			 *        EnumMember="com.sap.vocabularies.UI.v1.CriticalityRepresentationType/WithoutIcon" /&gt;
			 *      &lt;PropertyValue Property="Value" Path="to_StockAvailability/StockAvailability" /&gt;
			 *    &lt;/Record&gt;
			 * </pre>
			 */
			columnCriticality: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "CriticalityType",
				target: ["PropertyPath"],
				defaultValue: null,
				appliesTo: ["columns/criticality"],
				group:["Behavior"],
				since: "1.38.1"
			},

			/**
			 * Determines if criticality is visualized by means of an icon.
			 * The <code>CriticalityRepresentation</code> contains <code>EnumMember</code> that can be used to control the visibility of the icon.
			 * An icon is added along with the criticality state by default.
			 * If <code>PropertyPath</code> is to be excluded from having an icon,
			 * then <code>PropertyPath</code> must be annotated with the <code>CriticalityRepresentationType/WithoutIcon</code> annotation.
			 *
			 * <i>XML Example for OData V4 with CriticalityRepresentationType/WithoutIcon Annotation</i>
			 * <pre>
			 *    &lt;Record Type="com.sap.vocabularies.UI.v1.DataField"&gt;
			 *      &lt;PropertyValue Property="Criticality"
			 *        Path="to_StockAvailability/StockAvailability" /&gt;
			 *      &lt;PropertyValue Property="CriticalityRepresentation"
			 *        EnumMember="com.sap.vocabularies.UI.v1.CriticalityRepresentationType/WithoutIcon" /&gt;
			 *      &lt;PropertyValue Property="Value" Path="to_StockAvailability/StockAvailability" /&gt;
			 *    &lt;/Record&gt;
			 * </pre>
			 */
			columnCriticalityRepresentationType: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "CriticalityRepresentationType",
				target: ["Property"],
				whiteList: {
					values: ["WithoutIcon"]
				},
				interpretation: "excludeIcon",
				defaultValue: null,
				appliesTo: ["columns/criticalityIcon"],
				group:["Behavior"],
				since: "1.38.1"
			},

			/**
			 * Defines whether a property is a semantic key which is used for key columns (rendering sap.m.ObjectIdentifier).
			 *
			 * <i>XML Example of OData V4 with SemanticKey Annotation</i>
			 * <pre>
			 *    &lt;Annotations Target="SalesOrderType" xmlns="http://docs.oasis-open.org/odata/ns/edm"&gt;
			 *      &lt;Annotation Term="com.sap.vocabularies.Common.v1.SemanticKey"&gt;
			 *        &lt;Collection&gt;
			 *          &lt;PropertyPath&gt;SalesOrderID&lt;/PropertyPath&gt;
			 *          &lt;PropertyPath&gt;SalesOrderItemID&lt;/PropertyPath&gt;
			 *        &lt;/Collection&gt;
			 *      &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			semanticKey: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "SemanticKey",
				target: ["EntityType"],
				defaultValue: null,
				appliesTo: ["columns/cellContent"],
				group: ["Behavior"],
				since: "1.38.1"
			},

			/**
			 * Defines a name of the <code>SemanticObject</code> that can be represented with a <code>Property</code> that is defined within an
			 * <code>EntityType</code>. The <code>SmartTable</code> control creates a <code>SmartLink</code> control by providing relevant information
			 * to the <code>SmartLink</code> control.
			 *
			 * <br>
			 * <b>Note:</b> Navigation targets are determined using {@link sap.ushell.services.CrossApplicationNavigation CrossApplicationNavigation} of the unified shell service.
			 *
			 * <i>XML Example of OData V4 with SemanticObject Annotation</i>
			 * <pre>
			 *   &lt;Annotations Target=&quot;ProductCollection.Product/Name&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.SemanticObject&quot; String=&quot;SemanticObjectName&quot; /&gt;
			 *   &lt;/Annotations&gt;
			 * </pre>
			 */
			semanticObject: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "SemanticObject",
				target: ["Property"],
				defaultValue: null,
				appliesTo: ["columns/cellContent"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Renders an image in the cell if the annotation is present.
			 *
			 * <i>XML Example of OData V4 with the IsImageURL Annotation</i>
			 * <pre>
			 *    &lt;Property Name="Product"&gt;
			 *      &lt;Annotation Term="com.sap.vocabularies.Common.v1.IsImageURL" Bool="true" /&gt;
			 *    &lt;/Property&gt;
			 * </pre>
			 */
			columnIsImageURL: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "IsImageURL",
				target: ["Property"],
				defaultValue: true,
				appliesTo: ["columns/image"],
				group: ["Behavior"],
				since: "1.38.1"
			},

			/**
			 * A descriptive text for values of the annotated property.
			 * <b>Note:</b> The value must be a dynamic expression when used as metadata annotation.
			 *
			 * <i>XML Example of OData V4 Text on CustomerName Property</i>
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.Text&quot; Path=&quot;CustomerName&quot; /&gt;
			 *    &lt;/Property&gt;
			 *    &lt;Property Name=&quot;CustomerName&quot; type=&quot;Edm.String&quot; /&gt;
			 * </pre>
			 *
			 * For OData v2 the <code>sap:text</code> annotation on the <code>Property</code> can be used to assign text.
			 *
			 * <pre>
			 *    &lt;Property Name=&quot;Customer&quot; ... sap:text=&quot;CustomerName&quot;/&gt;
			 *    &lt;Property Name=&quot;CustomerName&quot; type=&quot;Edm.String&quot;/&gt;
			 * </pre>
			 */
			columnText: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "Text",
				target: ["Property"],
				defaultValue: null,
				appliesTo: ["column/cellContent"],
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Describes the arrangement of a code value and its text. The <code>TextArragement</code> annotation requires the
			 * <code>com.sap.vocabularies.Common.v1.Text</code> annotation to be defined.
			 * The enumeration members can have the following values:
			 * <ul>
			 * <li><code>com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst</code><br>
			 * The underlying control is represented with the specified description followed by its ID. This is the default, if no annotation is specified.</li>
			 * <li><code>com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly</code><br>
			 * The underlying control is represented with the specified description only. </li>
			 * <li><code>com.sap.vocabularies.UI.v1.TextArrangementType/TextLast</code><br>
			 * The underlying control is represented with the specified ID followed by its description. </li>
			 * <li><code>com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate</code><br>
			 * The underlying control is represented with the specified ID only. </li>
			 * </ul>
			 *
			 * <i>XML Example of OData V4 with EntityType ProductType</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;ProductType&quot;&gt;
			 *      &lt;Annotation Term=&quot;com.sap.vocabularies.UI.v1.TextArrangement&quot; EnumMember=&quot;com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst&quot;/&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			textArrangement: {
				namespace: "com.sap.vocabularies.UI.v1",
				annotation: "TextArrangement",
				target: ["EntityType", "com.sap.vocabularies.Common.v1.Text"],
				defaultValue: null,
				appliesTo: ["column/cellContent"],
				group: ["Appearance", "Behavior"],
				since: "1.38"
			}
		},

		customData: {
			/**
			 * Defines whether SmartField controls can be used in the SmartTable control. For editable tables, this property must be set to <code>true</code>.
			 */
			useSmartField: {
				type: "boolean",
				defaultValue: false,
				group: ["Appearance", "Behavior"],
				since: "1.28.1"
			},

			/**
			 * Overrides the default settings for formatting dates in all columns of the SmartTable control. The format settings can be provided as a JSON object or a JSON string.
			 *
			 * @see sap.ui.model.type.Date
			 */
			dateFormatSettings: {
				type: "string",
				defaultValue: "{ UTC : true }",
				group: ["Appearance"],
				since: "1.28.1"
			},

			/**
			 * Defines whether currency symbols are to be applied to currency fields.
			 */
			currencyFormatSettings: {
				type: "string",
				defaultValue: null,
				appliesTo: ["cellContent"],
				since: "1.28.1"
			},

			/**
			 * A unique key used to save, retrieve, or apply custom personalization for a column.
			 */
			columnKey: {
				type: "string",
				defaultValue: null,
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Sorts the table based on the column specified; ODataModel property name must be used.
			 */
			sortProperty: {
				type: "string",
				defaultValue: null,
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Filters the table with the condition that is defined; ODataModel property name must be used.
			 */
			filterProperty: {
				type: "string",
				defaultValue: null,
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Defines controls according to the type that is defined. Value can be either date, numeric, or empty string; control will be switched accordingly.
			 */
			type: {
				type: "string",
				defaultValue: null,
				group: ["Behavior"],
				since: "1.28.1"
			},

			/**
			 * Numeric value to restrict number of entries in input fields.
			 */
			maxLength: {
				type: "string",
				defaultValue: null,
				group: ["Appearance"],
				since: "1.28.1"
			},

			/**
			 * Numeric value for precision.
			 */
			precision: {
				type: "string",
				defaultValue: null,
				group: ["Appearance"],
				since: "1.28.1"
			},

			/**
			 * Numeric value for scale.
			 */
			scale: {
				type: "string",
				defaultValue: null,
				group: ["Appearance"],
				since: "1.28.1"
			}
		},

		properties: {
			entitySet: {
				ignore: true
			},
			smartFilterId: {
				ignore: true
			},
			ignoredFields: {
				ignore: true
			},
			initiallyVisibleFields: {
				ignore: true
			},
			requestAtLeastFields: {
				ignore: true
			},
			ignoreFromPersonalisation: {
				ignore: true
			},
			tableType: {
				ignore: true
			},
			useVariantManagement: {
				ignore: true
			},
			showVariantManagement: {
				ignore: false
			},
			useExportToExcel: {
				ignore: false
			},
			exportType: {
				ignore: false
			},
			useTablePersonalisation: {
				ignore: true
			},
			showTablePersonalisation: {
				ignore: false
			},
			showRowCount: {
				ignore: false
			},
			header: {
				ignore: false
			},
			toolbarStyleClass: {
				ignore: true
			},
			enableCustomFilter: {
				ignore: true
			},
			persistencyKey: {
				ignore: true
			},
			useOnlyOneSolidToolbar: {
				ignore: true
			},
			currentVariantId: {
				ignore: true
			},
			editable: {
				ignore: false
			},
			enableAutoBinding:{
				ignore: false
			},
			tableBindingPath: {
				ignore: false
			},
			editTogglable: {
				ignore: true
			},
			demandPopin: {
				ignore: false
			},
			showFullScreenButton: {
				ignore: true
			}
		}
	};
}, /* bExport= */false);

}; // end of sap/ui/comp/smarttable/SmartTable.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.PersonalizableInfo') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartvariants.PersonalizableInfo.
jQuery.sap.declare('sap.ui.comp.smartvariants.PersonalizableInfo'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/PersonalizableInfo",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element'
], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new smartvariants/PersonalizableInfo.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The PersonalizableInfo class describes the personalizable control associated with the <code>SmartVariantManagement</code> control.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartvariants.PersonalizableInfo
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var PersonalizableInfo = Element.extend("sap.ui.comp.smartvariants.PersonalizableInfo", /** @lends sap.ui.comp.smartvariants.PersonalizableInfo.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Describes the type of variant management.
				 */
				type: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Name of the data service
				 */
				dataSource: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Defines the property name of the personalization key.
				 */
				keyName: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			},
			associations: {

				/**
				 * Contains the control that can be personalized.
				 */
				control: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			}
		}
	});

	return PersonalizableInfo;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartvariants/PersonalizableInfo.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.SmartVariantManagement.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartvariants.SmartVariantManagement control.
jQuery.sap.declare('sap.ui.comp.smartvariants.SmartVariantManagement.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartvariants/SmartVariantManagement.designtime",[], function() {
	"use strict";
	return {
		annotations: {},
		properties: {
			persistencyKey: {
				ignore: true
			}
		},
		customData: {}
	};
}, /* bExport= */false);

}; // end of sap/ui/comp/smartvariants/SmartVariantManagement.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.flexibility.changes.AddFavorite') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartvariants.flexibility.changes.AddFavorite'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/flexibility/changes/AddFavorite",[
	'jquery.sap.global', 'sap/ui/fl/Utils'
], function(jQuery, Utils) {
	"use strict";

	/**
	 * Change handler for adding the favorite flag to the variant.
	 * 
	 * @constructor
	 * @private
	 * @since 1.50.0
	 * @alias sap.ui.comp.smartvariants.flexibility.changes.AddFavorite
	 */
	var AddFavorite = {};

	/**
	 * Adds the favorite flag to a variant.
	 * 
	 * @param {sap.ui.fl.Change} oChange
	 * @param {sap.ui.comp.variants.VariantManagement} oVariantManagement control
	 * @param {object} mPropertyBag
	 * @private
	 */
	AddFavorite.applyChange = function(oChange, oVariantManagement, mPropertyBag) {
		var oChangeContent = oChange.getContent();
		if (jQuery.isEmptyObject(oChangeContent)) {
			Utils.log.error("Change does not contain sufficient information to be applied");
			return false;
		}

		// Update the value of 'favorites' property
		oVariantManagement.getItems().some(function(oItem) {
			if (oItem.getKey() === oChangeContent.key) {
				// Also if the current visibility is equal to the visibility of the change we have to call '_updateAvailableAction' in order to update
				// the 'Define Links' text.
				// mPropertyBag.modifier.setProperty(oItem, "visible", oChangeContent.visible);
				oItem.setFavorite(oChangeContent.visible);
				return true;
			} else if (oItem.getKey() === sap.ui.comp.STANDARD_VARIANT_NAME) {
				oVariantManagement.setStandardFavorite(oChangeContent.visible);
				return true;
			}
		});
		return true;
	};

	/**
	 * Completes the change by adding change handler specific content
	 * 
	 * @param {sap.ui.fl.Change} oChange Change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo
	 * @param {object} mPropertyBag
	 * @private
	 */
	AddFavorite.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
		if (jQuery.isEmptyObject(oSpecificChangeInfo.content)) {
			throw new Error("oSpecificChangeInfo.content should be filled");
		}
		if (!oSpecificChangeInfo.content.key) {
			throw new Error("In oSpecificChangeInfo.content.key attribute is required");
		}
		if (oSpecificChangeInfo.content.visible !== true) {
			throw new Error("In oSpecificChangeInfo.content.select attribute should be 'true'");
		}

		oChange.setContent(oSpecificChangeInfo.content);
	};

	return AddFavorite;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartvariants/flexibility/changes/AddFavorite.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.flexibility.changes.RemoveFavorite') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartvariants.flexibility.changes.RemoveFavorite'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/flexibility/changes/RemoveFavorite",[
	'jquery.sap.global', 'sap/ui/fl/Utils'
], function(jQuery, Utils) {
	"use strict";

	/**
	 * Change handler for removing the favorite flag to the variant.
	 * 
	 * @constructor
	 * @private
	 * @since 1.50
	 * @alias sap.ui.comp.smartvariants.flexibility.changes..RemoveFavorite
	 */
	var RemoveFavorite = {};

	/**
	 * Removes the favorite flag from a variant.
	 * 
	 * @param {sap.ui.fl.Change} oChange
	 * @param {sap.ui.comp.variants.VariantManagement} oVariantManagement control
	 * @param {object} mPropertyBag
	 * @private
	 */
	RemoveFavorite.applyChange = function(oChange, oVariantManagement, mPropertyBag) {
		var oChangeContent = oChange.getContent();
		if (jQuery.isEmptyObject(oChangeContent)) {
			Utils.log.error("Change does not contain sufficient information to be applied");
			return false;
		}

		// Update the value of 'favorites' property
		oVariantManagement.getItems().some(function(oItem) {
			if (oItem.getKey() === oChangeContent.key) {
				// Also if the current visibility is equal to the visibility of the change we have to call '_updateAvailableAction' in order to update
				// the 'Define Links' text.
				// mPropertyBag.modifier.setProperty(oItem, "visible", oChangeContent.visible);
				oItem.setFavorite(oChangeContent.visible);
				return true;
			} else if (oItem.getKey() === sap.ui.comp.STANDARD_VARIANT_NAME) {
				oVariantManagement.setStandardFavorite(oChangeContent.visible);
				return true;
			}
		});
		return true;
	};

	/**
	 * Completes the change by adding change handler specific content
	 * 
	 * @param {sap.ui.fl.Change} oChange Change wrapper object to be completed
	 * @param {object} oSpecificChangeInfo
	 * @param {object} mPropertyBag
	 * @private
	 */
	RemoveFavorite.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
		if (jQuery.isEmptyObject(oSpecificChangeInfo.content)) {
			throw new Error("oSpecificChangeInfo.content should be filled");
		}
		if (!oSpecificChangeInfo.content.key) {
			throw new Error("In oSpecificChangeInfo.content.key attribute is required");
		}
		if (oSpecificChangeInfo.content.visible !== false) {
			throw new Error("In oSpecificChangeInfo.content.select attribute should be 'false'");
		}

		oChange.setContent(oSpecificChangeInfo.content);
	};

	return RemoveFavorite;
},
/* bExport= */true);

}; // end of sap/ui/comp/smartvariants/flexibility/changes/RemoveFavorite.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.state.UIState') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.state.UIState'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/state/UIState",[
	"sap/ui/base/ManagedObject"
], function(ManagedObject) {
	"use strict";

	/**
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Creates a new instance of an UIState class.
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.50.6
	 * @constructor
	 * @public
	 * @since 1.50
	 * @alias sap.ui.comp.state.UIState
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var UIState = ManagedObject.extend("sap.ui.comp.state.UIState", /** @lends sap.ui.comp.state.UIState */
	{
		metadata: {
			library: "sap.ui.comp",
			properties: {
				/**
				 * Object representing the presentation variant.
				 * The structure looks like:
				 * <pre><code>
				 *	{
				 *		ContextUrl: {string},
				 *		MaxItems: {int},
				 *	  	SortOrder: [],
				 *		GroupBy: [],
				 *		Total: [],
				 *		RequestAtLeast: [],
				 *		Visualizations: []
				 *	}
				 * </code></pre>
				 * <b>Note:</b>
				 * <ul>
				 *     <li> <code>PresentationVariantID</code> property is not provided</li>
				 *     <li> <code>Text</code> property is not provided because it is translated text</li>
				 *     <li> <code>TotalBy</code> is not supported yet</li>
				 *     <li> <code>IncludeGrandTotal</code> is not supported yet</li>
				 *     <li> <code>InitialExpansionLevel</code> is not supported yet</li>
				 *     <li> <code>Title</code> of <code>Visualizations.Content</code> property is not provided because it is translated text</li>
				 *     <li> <code>Description</code> of <code>Visualizations.Content</code> property is not provided because it is translated text</li>
				 *     <li> <code>VariantName</code> property is not part of specified DataSuiteFormat yet
				 * </ul>
				 */
				presentationVariant: {
					type: "object"
				},
				/**
				 * Object representing the selection variant.
				 * The structure looks like:
				 * <pre><code>
				 *	{
				 *		SelectOptions: []
				 *  }
				 * </code></pre>
				 */
				selectionVariant: {
					type: "object"
				},
				/**
				 * Variant name.
				 */
				variantName: {
					type: "string"
				}
			}
		}
	});
	return UIState;
});

}; // end of sap/ui/comp/state/UIState.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.transport.TransportDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.transport.TransportDialog.

jQuery.sap.declare('sap.ui.comp.transport.TransportDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.transport.TransportDialog'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/transport/TransportDialog",["sap/ui/fl/transport/TransportDialog"], function(FlTransportDialog) {
	"use strict";

	/**
	 * Constructor for a new transport/TransportDialog.
	 *
	 * @class
	 * The Transport Dialog Control can be used to implement a value help for selecting an ABAP package and transport request. It is not a generic utility, but part of the Variantmanament and therefore cannot be used in any other application.
	 * @extends sap.ui.fl.transport.FlTransportDialog
	 *
	 * @constructor
	 * @public
	 * @deprecated
	 * @alias sap.ui.comp.transport.TransportDialog
	 */
	var TransportDialog = FlTransportDialog.extend("sap.ui.comp.transport.TransportDialog");

	return TransportDialog;
}, true);


}; // end of sap/ui/comp/transport/TransportDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.util.FormatUtil') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// --------------------------------------------------------------------------------
// Utility class used by smart controls for formatting related operations
// --------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.util.FormatUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/util/FormatUtil",[
	"jquery.sap.global", "sap/ui/model/FilterOperator", "sap/ui/core/format/NumberFormat"
], function(jQuery, FilterOperator, NumberFormat) {
	"use strict";

	/**
	 * Utility class used by smart controls for formatting related operations
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var FormatUtil = {
		/**
		 * Static function that returns a formatted expression based on the displayBehaviour. Fallback is to return the Id (sId)
		 * @param {string} sDisplayBehaviour - the display behaviour (e.g. as defined in: sap.ui.comp.smartfilterbar.DisplayBehaviour)
		 * @param {string} sId - the Id field value
		 * @param {string} sDescription - the Description field value
		 * @returns {string} the formatted string value based on the displayBehaviour
		 * @private
		 */
		getFormattedExpressionFromDisplayBehaviour: function(sDisplayBehaviour, sId, sDescription) {
			var oTexts = this.getTextsFromDisplayBehaviour(sDisplayBehaviour, sId, sDescription);
			return oTexts.secondText ? oTexts.firstText + " (" + oTexts.secondText + ")" : oTexts.firstText;
		},
		/**
		 * Static function that returns an object with first and second text values based on the displayBehaviour. Fallback is to return the Id (sId)
		 * @param {string} sDisplayBehaviour The display behaviour (e.g. as defined in: sap.ui.comp.smartfilterbar.DisplayBehaviour)
		 * @param {string | null} sId The ID field value
		 * @param {string} sDescription The Description field value
		 * @returns {object} Object with first and second text values based on the <code>sDisplayBehaviour</code>
		 * @private
		 */
		getTextsFromDisplayBehaviour: function(sDisplayBehaviour, sId, sDescription) {
			switch (sDisplayBehaviour) {
				case "descriptionAndId":
					return {
						firstText: sDescription ? sDescription : sId,
						secondText: sDescription ? sId : undefined
					};
				case "idAndDescription":
					return {
						firstText: sId,
						secondText: sDescription ? sDescription : undefined
					};
				case "descriptionOnly":
					return {
						firstText: sDescription ? sDescription : sId,
						secondText: undefined
					};
					// idOnly and fallback to Id in case nothing was specified
				default:
					return {
						firstText: sId,
						secondText: undefined
					};
			}
		},
		/**
		 * Static function that returns a formatted binding expression based on the displayBehaviour. Fallback is to return the Id (sId)
		 * @param {string} sDisplayBehaviour - the display behaviour (e.g. as defined in: sap.ui.comp.smartfilterbar.DisplayBehaviour)
		 * @param {string} sId - the Id field name/path in the model
		 * @param {string} sDescription - the Description field name/path in the model
		 * @returns {string} the calculated binding path based on the displayBehaviour
		 * @private
		 */
		getFormattedBindingExpressionFromDisplayBehaviour: function(sDisplayBehaviour, sId, sDescription) {
			return FormatUtil.getFormattedExpressionFromDisplayBehaviour(sDisplayBehaviour, "{" + sId + "}", "{" + sDescription + "}");
		},
		/**
		 * creates and returns a formatted text for the specified range
		 * @private
		 * @param {string} sOperation the operation type sap.ui.model.FilterOperator
		 * @param {string} sValue1 value of the first range field
		 * @param {string} sValue2 value of the second range field
		 * @param {boolean} bExclude indicates if the range is an Exclude range
		 * @returns {string} the range token text
		 */
		getFormattedRangeText: function(sOperation, sValue1, sValue2, bExclude) {
			var sTokenText;
			if (sValue1) {
				switch (sOperation) {
					case FilterOperator.EQ:
						sTokenText = "=" + sValue1;
						break;
					case FilterOperator.GT:
						sTokenText = ">" + sValue1;
						break;
					case FilterOperator.GE:
						sTokenText = ">=" + sValue1;
						break;
					case FilterOperator.LT:
						sTokenText = "<" + sValue1;
						break;
					case FilterOperator.LE:
						sTokenText = "<=" + sValue1;
						break;
					case FilterOperator.Contains:
						sTokenText = "*" + sValue1 + "*";
						break;
					case FilterOperator.StartsWith:
						sTokenText = sValue1 + "*";
						break;
					case FilterOperator.EndsWith:
						sTokenText = "*" + sValue1;
						break;
					case FilterOperator.BT:
						if (sValue2) {
							sTokenText = sValue1 + "..." + sValue2;
						}
						break;
					default:
						sTokenText = "";
						break;
				}
			}

			if (bExclude && sTokenText) {
				sTokenText = "!(" + sTokenText + ")";
			}

			return sTokenText;
		},
		_initialiseCurrencyFormatter: function() {
			// create number formatter instance
			if (!FormatUtil._oCurrencyFormatter) {
				FormatUtil._oCurrencyFormatter = NumberFormat.getCurrencyInstance({
					showMeasure: false
				});
			}
			if (!FormatUtil._MAX_CURRENCY_DIGITS) {
				FormatUtil._MAX_CURRENCY_DIGITS = 3;
			}
			FormatUtil._initialiseSpaceChars();
		},
		_initialiseSpaceChars: function() {
			// initialise SPACE chars the 1st time
			if (!FormatUtil._FIGURE_SPACE || !FormatUtil._PUNCTUATION_SPACE) {
				// Whitespace characters to align values
				FormatUtil._FIGURE_SPACE = '\u2007';
				FormatUtil._PUNCTUATION_SPACE = '\u2008';
			}
		},
		/**
		 * creates and returns an Amount Currency formatter, for formatting amount with spaces
		 * @private
		 * @returns {function} a formatter function accepting raw value of amount and currency
		 */
		getAmountCurrencyFormatter: function() {
			FormatUtil._initialiseCurrencyFormatter();
			if (!FormatUtil._fAmountCurrencyFormatter) {
				FormatUtil._fAmountCurrencyFormatter = function(oAmount, sCurrency) {
					// Adapted logic from sap.ui.unified.Currency to implement basic padding for some currencies (Ex: JPY)
					var sValue, iCurrencyDigits, iPadding;
					if (oAmount === undefined || oAmount === null || sCurrency === "*") {
						return "";
					}
					// Get the formatted numeric value
					sValue = FormatUtil._oCurrencyFormatter.format(oAmount, sCurrency);

					// Get the currency digits
					iCurrencyDigits = FormatUtil._oCurrencyFormatter.oLocaleData.getCurrencyDigits(sCurrency);

					// Add padding for decimal "."
					if (iCurrencyDigits === 0) {
						sValue += FormatUtil._PUNCTUATION_SPACE;
					}
					// Calculate and set padding for missing currency digits
					iPadding = FormatUtil._MAX_CURRENCY_DIGITS - iCurrencyDigits;
					if (iPadding) {
						sValue = jQuery.sap.padRight(sValue, FormatUtil._FIGURE_SPACE, sValue.length + iPadding);
					}
					return sValue;
				};
			}
			return FormatUtil._fAmountCurrencyFormatter;
		},
		/**
		 * creates and returns a Currency symbol formatter
		 * @private
		 * @returns {function} a formatter function accepting currency value
		 */
		getCurrencySymbolFormatter: function() {
			FormatUtil._initialiseCurrencyFormatter();
			if (!FormatUtil._fCurrencySymbolFormatter) {
				// Formatter function for currency symbol conversion
				FormatUtil._fCurrencySymbolFormatter = function(sCurrency) {
					if (!sCurrency || sCurrency === "*") {
						return "";
					}
					return FormatUtil._oCurrencyFormatter.oLocaleData.getCurrencySymbol(sCurrency);
				};
			}
			return FormatUtil._fCurrencySymbolFormatter;
		},
		/**
		 * creates and returns a Measure Unit formatter, for formatting measure values with spaces
		 * @private
		 * @returns {function} a formatter function accepting strings for value and unit (unit is not used currently)
		 */
		getMeasureUnitFormatter: function() {
			FormatUtil._initialiseSpaceChars();
			if (!FormatUtil._fMeasureFormatter) {
				// Formatter function for value part of measure
				FormatUtil._fMeasureFormatter = function(sValue, sUnit) {
					if (sValue === undefined || sValue === null || sUnit === "*") {
						return "";
					}
					return sValue + FormatUtil._FIGURE_SPACE;
				};
			}
			return FormatUtil._fMeasureFormatter;
		},
		/**
		 * creates and returns an inline Measure Unit formatter, for formatting measure and unit values separated by a space
		 * @private
		 * @returns {function} a formatter function accepting strings for value and unit
		 */
		getInlineMeasureUnitFormatter: function() {
			FormatUtil._initialiseSpaceChars();
			if (!FormatUtil._fInlineMeasureFormatter) {
				// Formatter function for inline value and unit (measure)
				FormatUtil._fInlineMeasureFormatter = function(sValue, sUnit) {
					if (sValue === undefined || sValue === null || sUnit === "*") {
						return "";
					}
					if (!sUnit) {
						return sValue;
					}
					return sValue + FormatUtil._FIGURE_SPACE + sUnit;
				};
			}
			return FormatUtil._fInlineMeasureFormatter;
		},
		/**
		 * creates and returns an inline Amount Currency formatter, for formatting amount and currency values separated by a space
		 * @private
		 * @returns {function} a formatter function accepting strings for amount and currency
		 */
		getInlineAmountFormatter: function() {
			FormatUtil._initialiseCurrencyFormatter();
			if (!FormatUtil._fInlineAmountFormatter) {
				FormatUtil._fInlineAmountFormatter = function(oAmount, sCurrency) {
					var sValue;
					if (oAmount === undefined || oAmount === null || sCurrency === "*") {
						return "";
					}
					// Get the formatted numeric value
					sValue = FormatUtil._oCurrencyFormatter.format(oAmount, sCurrency);

					return sValue + FormatUtil._FIGURE_SPACE + sCurrency;
				};
			}
			return FormatUtil._fInlineAmountFormatter;
		},
		/**
		 * Returns Time in 'PT'HH'H'mm'M'ss'S' format (as expected by Edm.Time fields)
		 * @private
		 * @param {Object} oDate - The input date object
		 * @returns {string} The time in 'PT'HH'H'mm'M'ss'S' format
		 */
		getEdmTimeFromDate: function(oDate) {
			if (!FormatUtil._oTimeFormat) {
				jQuery.sap.require("sap.ui.core.format.DateFormat");
				FormatUtil._oTimeFormat = sap.ui.core.format.DateFormat.getTimeInstance({
					pattern: "'PT'HH'H'mm'M'ss'S'"
				});
			}
			return FormatUtil._oTimeFormat.format(oDate);
		},
		/**
		 * Returns the width from the metadata attributes. min-width if there is no width specified
		 * @param {object} oField - OData metadata for the table field
		 * @param {Number} iMax - The max width (optional, default 30)
		 * @param {Number} iMin - The min width (optional, default 3)
		 * @returns {string} - width of the filter field in em
		 * @private
		 */
		getWidth: function(oField, iMax, iMin) {
			var sWidth = oField.maxLength || oField.precision, iWidth;
			if (!iMax) {
				iMax = 30;
			}
			if (!iMin) {
				iMin = 3;
			}
			// Force set the width to 9em for date fields
			if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
				sWidth = "9em";
			} else if (sWidth) {
				// Use max width if "Max is set in the
				if (sWidth === "Max") {
					sWidth = iMax + "";
				}
				iWidth = parseInt(sWidth, 10);
				if (!isNaN(iWidth)) {
					// Add additional .75 em (~12px) to avoid showing ellipsis in some cases!
					iWidth += 0.75;
					// use a max initial width of 50em (default)
					if (iWidth > iMax) {
						iWidth = iMax;
					} else if (iWidth < iMin) {
						// use a min width of 3em (default)
						iWidth = iMin;
					}
					sWidth = iWidth + "em";
				} else {
					// if NaN reset the width so min width would be used
					sWidth = null;
				}
			}
			if (!sWidth) {
				// For Boolean fields - Use min width as the fallabck, in case no width could be derived.
				if (oField.type === "Edm.Boolean") {
					sWidth = iMin + "em";
				} else {
					// use the max width as the fallback width of the column, if no width can be derived
					sWidth = iMax + "em";
				}
			}
			return sWidth;
		},
		/**
		 * Static function to parse the value of numeric interval field
		 * @private
		 * @param {string} oValue of interval
		 * @returns {array} containing low and high values of the passed interval
		 */
		parseFilterNumericIntervalData: function(oValue) {
			var aResult = [], aRegResult = oValue.match(RegExp("^(-?[^-]*)-(-?[^-]*)$"));

			if (aRegResult && aRegResult.length >= 2) {
				aResult.push(aRegResult[1]);
				aResult.push(aRegResult[2]);
			}

			return aResult;
		}
	};

	return FormatUtil;

}, /* bExport= */true);

}; // end of sap/ui/comp/util/FormatUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.util.FullScreenUtil') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// ------------------------------------------------------------------------------------------
// Utility class used by smart controls for switching a control to full-screen mode and back.
// ------------------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.util.FullScreenUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/util/FullScreenUtil",[
	"jquery.sap.global", "sap/m/Dialog", "sap/ui/core/HTML"
], function(jQuery, Dialog, HTML) {
	"use strict";

	/**
	 * Utility class used by smart controls for switching a control to fullscreen
	 * 
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var FullScreenUtil = {
		/**
		 * Static function that toggles a control to full screen mode.<br>
		 * Please ensure that you call the clean up function when the control (enabled here for full screen) is destroyed!
		 * 
		 * @param {Object} oControl - the control which can be toggled to full screen
		 * @param {boolean} bEnterFullScreen - whether the control should be enter/exit full screen mode
		 * @param {Object} oFullScreenButton - full screen button of the control which can be toggled to full screen
		 * @param {function} fnExternalClose - callback function to be called when dialog is closed externally (E.g. due to navigation)
		 * @private
		 */
		toggleFullScreen: function(oControl, bEnterFullScreen, oFullScreenButton, fnExternalClose) {
			var $oContent;
			// Switch to full-screen mode
			if (bEnterFullScreen) {
				// get the dom reference of the control
				$oContent = oControl.$();
				// add 100% height to the FlexBox container for the Control to rendering in full screen
				$oContent.css("height", "100%");
				if ($oContent) {
					// Create an HTML element to add the controls DOM content in the FullScreen dialog
					if (!oControl._oHTML) {
						oControl._oHTML = new HTML({
							preferDOM: false,
							afterRendering: function() {
								if (oControl && oControl._oHTML) {
									var $oHTMLContent = oControl._oHTML.$(), oChildren;
									// Get the current HTML Dom content
									if ($oHTMLContent) {
										// remove any old child content
										oChildren = $oHTMLContent.children();
										oChildren.remove();
										// stretch the content to occupy the whole space
										$oHTMLContent.css("height", "100%");
										// append the control dom to HTML content
										$oHTMLContent.append(oControl.getDomRef());
									}
								}
							}
						});
					}
					// Create and set a fullscreen Dialog (without headers) on the registered control instance
					if (!oControl._oFullScreenDialog) {
						oControl._oFullScreenDialog = new Dialog({
							showHeader: false,
							stretch: true,
							escapeHandler: function(oPromise) {
								// reject ther Promise
								oPromise.reject();

								// TODO: Discuss leaving the full screen
							},
							beforeClose: function() {
								// In case fullscreen dialog was closed due to navigation to another page/view/app etc. The dialog close would be
								// triggered externally and we need to clean up and replace the DOM content back to the original location
								if (oControl && oControl._$placeHolder && fnExternalClose) {
									fnExternalClose();
								}
							},
							content: [
								oControl._oHTML
							]
						});
						// Set focus back on full-screen button of control
						if (oFullScreenButton) {
							oControl._oFullScreenDialog.attachAfterOpen(function() {
								oFullScreenButton.focus();
							});
							oControl._oFullScreenDialog.attachAfterClose(function() {
								oFullScreenButton.focus();
							});
						}
						// add the style class from control to the dialog
						oControl._oFullScreenDialog.addStyleClass($oContent.closest(".sapUiSizeCompact").length ? "sapUiSizeCompact" : "");
						// add style class to make the scroll container height as 100% (required to stretch UI to 100% e.g. for SmartChart)
						oControl._oFullScreenDialog.addStyleClass("sapUiCompSmartFullScreenDialog");
						// Disable "Escape" handling
						if (oControl._oFullScreenDialog.oPopup) {
							oControl._oFullScreenDialog.oPopup.onsapescape = null;
						}
					}
					// create a dummy div node (place holder)
					oControl._$placeHolder = jQuery(document.createElement("div"));
					// Set the place holder before the current content
					$oContent.before(oControl._$placeHolder);
					// Add a dummy div as content of the HTML control
					oControl._oHTML.setContent("<div/>");
				}
				// open the full screen Dialog
				oControl._oFullScreenDialog.open();
				// Switch back from full-screen mode
			} else if (oControl._$placeHolder && oControl._oHTML) {
				// get the HTML controls content --> as it should contain the control's current DOM ref
				$oContent = oControl._oHTML.$();
				// Replace the place holder with the Controls DOM ref (child of HTML)
				oControl._$placeHolder.replaceWith($oContent.children());

				oControl._$placeHolder = null;
				$oContent = null;

				// close the full screen Dialog
				if (oControl._oFullScreenDialog) {
					oControl._oFullScreenDialog.close();
				}
			}
		},
		/**
		 * Static function that cleans up resources created for full-screen mode.<br>
		 * 
		 * @param {Object} oControl - the control which can be toggled to full screen
		 * @private
		 */
		cleanUpFullScreen: function(oControl) {
			// Destroy the Dialog and hence the containing HTML control
			if (oControl._oFullScreenDialog) {
				oControl._oFullScreenDialog.destroy();
				oControl._oFullScreenDialog = null;
			}
			// clean up instance variables created for full screen mode
			oControl._$placeHolder = null;
			oControl._oHTML = null;
		}
	};

	return FullScreenUtil;

}, /* bExport= */true);

}; // end of sap/ui/comp/util/FullScreenUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.util.IdentifierUtil') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// ------------------------------------------------------------------------------------------
// Utility class used by smart controls for creating stable ids.
// ------------------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.util.IdentifierUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/util/IdentifierUtil",[
	"jquery.sap.global", 'sap/ui/base/DataType'
], function(jQuery, DataType) {
	"use strict";

	/**
	 * Utility class used by smart controls for creating stable ids
	 * 
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var IdentifierUtil = {
		/**
		 * Static function that replaces special characters with a underscore.<br>
		 * 
		 * @param {String} sName - String whose special characters shall be replaced. 
		 * @returns {String} Cleaned up String 
		 * 
		 */
		replace: function(sName){
			
			var t = DataType.getType("sap.ui.core.ID");
			if (!t.isValid(sName)) {
				sName = sName.replace(/[^A-Za-z0-9_.:]+/g, "_");
				if (!t.isValid(sName)) {
					sName = "A_" + sName;
				}
			}
			return sName;
		}
	};
	return IdentifierUtil;
}, /* bExport= */true);
}; // end of sap/ui/comp/util/IdentifierUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.util.MultiCurrencyUtil') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// ----------------------------------------------------------------
// Utility class used by smart controls for multi-currency scenario
// ----------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.util.MultiCurrencyUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/util/MultiCurrencyUtil",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Utility class used by smart controls for multi-currency scenario
	 * 
	 * @private
	 * @experimental This module is only for internal/experimental use!
	 */
	var MultiCurrencyUtil = {
		/**
		 * returns true/false based on whether multi-currency "*" value is present for currency
		 * 
		 * @private
		 * @param {string} sCurrency - The currency value
		 * @returns {function} whether there are multiple currencies - "*"
		 */
		isMultiCurrency: function(sCurrency) {
			return sCurrency === "*";
		},
		openMultiCurrencyPopover: function(oEvent, mAdditionalParams) {
			var oSmartTable = sap.ui.getCore().byId(mAdditionalParams.smartTableId);
			var oAnalyticalTable = oSmartTable.getTable();
			var oBinding = oAnalyticalTable.getBinding("rows");
			var sCurrency = mAdditionalParams.currency;
			var sCurrencyUnit = mAdditionalParams.unit;
			var oCurrencyTemplate = mAdditionalParams.template;
			var oAnalyticalInfoForColumn, sDimension;
			// no binding or currency or unit --> return
			if (!oBinding || !sCurrency || !sCurrencyUnit) {
				return;
			}

			var oLink = oEvent.getSource();
			// The link is inside a container (e.g. VBox), get this layout container control in order to get the row and finally the analytical info
			var oLayout = oLink.getParent();
			if (mAdditionalParams.additionalParent) {
				oLayout = oLayout.getParent();
			}
			// via the row, we can get the analytical information
			var oAnalyticalInfo = oAnalyticalTable.getAnalyticalInfoOfRow(oAnalyticalTable.getRowForCell(oLayout));
			if (!oAnalyticalInfo) {
				return;
			}
			// prepare filter statement, select and title

			var i, aFilters = [], aSelect = [
				// always request amount and currency
				sCurrency, sCurrencyUnit
			], sTitle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_MULTI_TOTAL_TITLE") || "Total";

			// Add any application filters already present on the binding (these should be the ones already processed by SmartTable)
			if (oBinding.aApplicationFilter) {
				aFilters = [].concat(oBinding.aApplicationFilter);
			}

			// Grand Total --> do nothing as we already add Currency and unit to the Select clause
			if (oAnalyticalInfo.groupTotal || oAnalyticalInfo.group) {
				// Group Total / Group Header
				var aGroupedColumns = oAnalyticalInfo.groupedColumns;

				for (i = 0; i < aGroupedColumns.length; i++) {
					sDimension = sap.ui.getCore().byId(aGroupedColumns[i]).getLeadingProperty();
					if (!sDimension) {
						continue;
					}
					// Get Analytical Info for column --> in order to determine/use the proper dimensionProperty!
					// When grouping is done on text column, the actual grouping happens on the dimension (code) property and not the text
					oAnalyticalInfoForColumn = oBinding.getAnalyticalInfoForColumn(sDimension);
					if (oAnalyticalInfoForColumn) {
						sDimension = oAnalyticalInfoForColumn.dimensionPropertyName;
					}
					if (sDimension) {
						aFilters.push(new sap.ui.model.Filter(sDimension, sap.ui.model.FilterOperator.EQ, oAnalyticalInfo.context.getProperty(sDimension)));
					}
				}
				sTitle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_MULTI_GROUP_TITLE") || "Subtotal";
			} else if (!oAnalyticalInfo.grandTotal) {
				// Line item that contains multiple currencies
				var aProperties = Object.getOwnPropertyNames(oBinding.getDimensionDetails());
				for (i = 0; i < aProperties.length; i++) {
					aFilters.push(new sap.ui.model.Filter(aProperties[i], sap.ui.model.FilterOperator.EQ, oAnalyticalInfo.context.getProperty(aProperties[i])));
				}
				sTitle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_MULTI_GROUP_TITLE") || "Subtotal";
			}

			var oDetailsTemplate = oCurrencyTemplate.clone(); // clone the original currency template
			oDetailsTemplate.unbindProperty("visible"); // necessary for the details list

			// create popover
			var sPopoverId = mAdditionalParams.smartTableId + "-multiUnitPopover", oPopover, oDetailsList;
			oPopover = sap.ui.getCore().byId(sPopoverId);
			if (!oPopover) {
				oDetailsList = new sap.m.List(sPopoverId + "-detailsList", {
					showSeparators: "None",
					ariaLabelledBy: sPopoverId + "-title"
				});
				oDetailsList.addStyleClass("sapUiContentPadding sapUiCompMultiCurrency");

				oPopover = new sap.m.ResponsivePopover(sPopoverId, {
					content: oDetailsList
				});
				jQuery.sap.syncStyleClass("sapUiSizeCompact", oAnalyticalTable, oPopover);
				oAnalyticalTable.addDependent(oPopover);
			}
			if (!oDetailsList) {
				oDetailsList = sap.ui.getCore().byId(sPopoverId + "-detailsList");
			}

			// Update the Popover content and bind the result list
			oPopover.setTitle(sTitle);
			oPopover.setPlacement(oAnalyticalInfo.grandTotal ? "PreferredTopOrFlip" : "PreferredBottomOrFlip");
			oDetailsList.bindItems({
				path: oBinding.getPath(),
				filters: aFilters,
				parameters: {
					select: aSelect.join(",")
				},
				templateShareable: false,
				template: new sap.m.CustomListItem({
					content: [
						oDetailsTemplate
					]
				})
			});
			oPopover.openBy(oLink);
		}
	};

	return MultiCurrencyUtil;

}, /* bExport= */true);

}; // end of sap/ui/comp/util/MultiCurrencyUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.valuehelpdialog.ItemsCollection') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.valuehelpdialog.ItemsCollection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/valuehelpdialog/ItemsCollection",[
	'jquery.sap.global', 'sap/ui/comp/util/FormatUtil'
], function(jQuery, FormatUtil) {
	"use strict";

	/**
	 * Constructs a class to map key/object pairs
	 * 
	 * @constructor
	 * @public
	 * @author Peter Harbusch
	 */
	var ItemsCollection = function() {
		this.items = {};
	};

	/**
	 * Add or overwrite a key in the map and the associated obj.
	 * 
	 * @param {string} the key of the obj in the map
	 * @param {object} the obj which has to been stored in the map
	 * @public
	 */
	ItemsCollection.prototype.add = function(sKey, obj) {
		this.items[sKey] = obj;
	};

	/**
	 * Removes the key in the map and the associated obj.
	 * 
	 * @param {string} sKey - the key of the obj in the map
	 * @public
	 */
	ItemsCollection.prototype.remove = function(sKey) {
		delete this.items[sKey];
	};

	/**
	 * Removes all the items.
	 * 
	 * @public
	 */
	ItemsCollection.prototype.removeAll = function() {
		this.items = {};
	};

	/**
	 * Returns the obj of the key on the map.
	 * 
	 * @param {string} sKey - the key of the obj in the map
	 * @returns {object} the object with the given key
	 * @public
	 */
	ItemsCollection.prototype.getItem = function(sKey) {
		return this.items[sKey];
	};

	/**
	 * returns an array of all keys in the map
	 * 
	 * @returns {array} the array of all the map keys
	 * @public
	 */
	ItemsCollection.prototype.getItems = function() {
		var aKeys = [];
		for ( var item in this.items) {
			aKeys.push(item);
		}
		return aKeys;
	};

	/**
	 * Returns an array of all selected tokens in the map.
	 * 
	 * @param {string} sKey - the property name of the obj in the map which will be used for the Display Key in the tokens returned in the array
	 * @param {string} sDescriptionKey - the property name of the obj in the map which will be returned in the array
	 * @param {string} sDisplayBehaviour - the behaviour/format of the token text (See: sap.ui.comp.smartfilterbar.DisplayBehaviour)
	 * @returns {sap.m.Token[]} array of tokens with the given key and the text value
	 * @public
	 */
	ItemsCollection.prototype.getSelectedItemsTokenArray = function(sKey, sDescriptionKey, sDisplayBehaviour) {
		var aTokens = [];
		for ( var sItemKey in this.items) {
			var oItem = this.items[sItemKey];
			var sText, sDisplayKey;

			if (typeof oItem === "string") {
				sDisplayKey = sItemKey;
				sText = oItem;
			} else {
				sDisplayKey = oItem[sKey];
				sText = oItem[sDescriptionKey];

				if (sText === undefined) {
					sText = this.items[sItemKey];
				} else {
					if (!sDisplayBehaviour) {
						sDisplayBehaviour = "descriptionAndId";
					}
					sText = FormatUtil.getFormattedExpressionFromDisplayBehaviour(sDisplayBehaviour, sDisplayKey, sText);
				}
			}

			var oToken = new sap.m.Token({
				key: sDisplayKey,
				text: sText,
				tooltip: sText
			});

			if (typeof oItem !== "string") {
				oToken.data("row", oItem);
				oToken.data("longKey", sItemKey);
			}
			aTokens.push(oToken);
		}
		return aTokens;
	};

	/**
	 * Returns an array of all objects in the map.
	 * 
	 * @returns {string[]} array of all the map objects
	 * @public
	 */
	ItemsCollection.prototype.getModelData = function() {
		var aModelItems = [];
		for ( var itemKey in this.items) {
			var item = this.items[itemKey];
			if (typeof item === "string") {
				item = {
					missing: itemKey
				};
			}
			aModelItems.push(item);
		}
		return aModelItems;
	};

	return ItemsCollection;

}, /* bExport= */true);

}; // end of sap/ui/comp/valuehelpdialog/ItemsCollection.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.valuehelpdialog.ValueHelpDialog') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.valuehelpdialog.ValueHelpDialog.
jQuery.sap.declare('sap.ui.comp.valuehelpdialog.ValueHelpDialog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.DialogRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/valuehelpdialog/ValueHelpDialog",[
	'jquery.sap.global', 'sap/m/Dialog', 'sap/m/MessageBox', 'sap/m/MultiInput', 'sap/m/Token', 'sap/ui/comp/library', './ItemsCollection', 'sap/ui/core/Control', 'sap/ui/core/format/DateFormat', 'sap/ui/core/format/NumberFormat', 'sap/m/VBox', 'sap/m/HBox', 'sap/m/ButtonType', 'sap/ui/comp/util/FormatUtil', 'sap/m/DialogRenderer'
], function(jQuery, Dialog, MessageBox, MultiInput, Token, library, ItemsCollection, Control, DateFormat, NumberFormat, VBox, HBox, ButtonType, FormatUtil, DialogRenderer) {
	"use strict";

	/**
	 * Constructor for a new valuehelpdialog/ValueHelpDialog.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The ValueHelpDialog control can be used to implement a value help for an input field.
	 * @extends sap.m.Dialog
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.valuehelpdialog.ValueHelpDialog
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ValueHelpDialog = Dialog.extend("sap.ui.comp.valuehelpdialog.ValueHelpDialog", /** @lends sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype */ {
		metadata: {

			library: "sap.ui.comp",
			properties: {
				/**
				 * Defines the value for the basic search field. The value is set into the basic search field of the filter bar used.
				 *
				 * @since 1.24
				 */
				basicSearchText: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * Enables multi-selection in the table used.
				 *
				 * @since 1.24
				 */
				supportMultiselect: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Enables the ranges (conditions) feature in the dialog.
				 *
				 * @since 1.24
				 */
				supportRanges: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * If this property is set to <code>true</code>, the value help dialog only supports the ranges (conditions) feature.
				 *
				 * @since 1.24
				 */
				supportRangesOnly: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Defines the key of the column used for the internal key handling. The value of the column is used for the token key and also to
				 * identify the row in the table.
				 *
				 * @since 1.24
				 */
				key: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * Defines the list of additional keys of the column used for the internal key handling.
				 *
				 * @since 1.24
				 */
				keys: {
					type: "string[]",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Defines the key of the column used for the token text.
				 *
				 * @since 1.24
				 */
				descriptionKey: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * Defines the maximum number of include ranges.
				 *
				 * @since 1.24
				 */
				maxIncludeRanges: {
					type: "string",
					group: "Misc",
					defaultValue: '-1'
				},

				/**
				 * Defines the maximum number of exclude ranges.
				 *
				 * @since 1.24
				 */
				maxExcludeRanges: {
					type: "string",
					group: "Misc",
					defaultValue: '-1'
				},

				/**
				 * Represents the display format of the range values. With the <code>displayFormat</code> value UpperCase, the entered value of the
				 * range (condition) is converted to uppercase letters.
				 *
				 * @since 1.24
				 */
				displayFormat: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid
				 * <code>sap.ui.comp.smartfilterbar.DisplayBehaviour</code> values.
				 *
				 * @since 1.24
				 */
				tokenDisplayBehaviour: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
				 *
				 * @since 1.24
				 */
				filterMode: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			aggregations: {

				/**
				 * Allows you to add a {@link sap.ui.comp.filterbar.FilterBar FilterBar} or
				 * {@link sap.ui.comp.smartfilterbar.SmartFilterBar SmartFilterBar} control to the value help dialog.
				 */
				filterBar: {
					type: "sap.ui.comp.filterbar.FilterBar",
					multiple: false
				}
			},
			events: {

				/**
				 * This event is fired when the OK button is pressed.
				 *
				 * @since 1.24
				 */
				ok: {
					parameters: {
						/**
						 * The array of tokens created or modified on the ValueHelpDialog.
						 */
						tokens: {
							type: "sap.m.Token[]"
						}
					}
				},

				/**
				 * This event is fired when the Cancel button is pressed.
				 *
				 * @since 1.24
				 */
				cancel: {},

				/**
				 * This event is fired when the user selects an item in the items table.
				 *
				 * <b>Note:</b> The event will only be raised when the dialog gets a table
				 * instance from outside via <code>setTable</code>.
				 *
				 * @since 1.32
				 */
				selectionChange: {
					parameters: {
						/**
						 * The RowSelectionChange event parameter from the hosted table that contains the selected items.
						 */
						tableSelectionParams: {
							type: "object"
						},

						/**
						 * Returns an array of objects which represents all selected row tokens. The object contains the token key, the row object
						 * data from the model, and the information if the token is selected. <code>
						 *  [{sKey, oRow, bSelect}, ...]
						 *  </code>
						 */
						updateTokens: {
							type: "object[]"
						},

						/**
						 * Can be set to <code>true</code> to execute the default behaviour of the ValueHelpDialog.
						 */
						useDefault: {
							type: "boolean",
							defaultValue: false
						}
					}
				},

				/**
				 * This event is fired when the user removes one or multiple existing token(s) from the dialog.
				 *
				 * <b>Note:</b> The event will only be raised when the dialog gets a table
				 * instance from outside via <code>setTable</code>.
				 *
				 * @since 1.32
				 */
				tokenRemove: {
					parameters: {
						/**
						 * The array of token keys that has been removed.
						 */
						tokenKeys: {
							type: "string[]"
						},

						/**
						 * Can be set to true to execute the default behaviour of ValueHelpDialog.
						 */
						useDefault: {
							type: "boolean",
							defaultValue: false
						}
					}

				},

				/**
				 * This event is fired when the table gets an update and all existing tokens must be selected in the table.
				 *
				 * <b>Note:</b> The event will only be raised when the dialog gets a table
				 * instance from outside via <code>setTable</code>.
				 *
				 * @since 1.32
				 */
				updateSelection: {
					parameters: {
						/**
						 * The array of existing token keys for which the selection in the table has to be updated.
						 */
						tokenKeys: {
							type: "string[]"
						},

						/**
						 * Can be set to true to execute the default behavior of ValueHelpDialog.
						 */
						useDefault: {
							type: "boolean",
							defaultValue: false
						}
					}

				}
			}
		},
		renderer: DialogRenderer.render
	});

	ValueHelpDialog.prototype.setSupportMultiselect = function(bEnabled) {
		this.setProperty("supportMultiselect", bEnabled);

		this._updatePropertySupportMultiselect(bEnabled);

		this._oTokenizerGrid.setVisible(bEnabled);
		this._oButtonOk.setVisible(bEnabled);
		return this;
	};

	ValueHelpDialog.prototype._updatePropertySupportMultiselect = function(bEnabled) {
		if (!this._oTable) {
			return undefined;
		}

		if (!this._isPhone()) {
			if (this._oTable.setSelectionMode) {
				this._oTable.setSelectionMode(bEnabled ? sap.ui.table.SelectionMode.MultiToggle : sap.ui.table.SelectionMode.Single);
			}
		} else if (this._oTable.setMode) {
			this._oTable.setMode(bEnabled ? sap.m.ListMode.MultiSelect : sap.m.ListMode.SingleSelectLeft);
		}

		return this;
	};

	ValueHelpDialog.prototype.setSupportRanges = function(bEnabled) {
		this.setProperty("supportRanges", bEnabled);

		this._updateNavigationControl();

		return this;
	};

	ValueHelpDialog.prototype.setSupportRangesOnly = function(bEnabled) {
		this.setProperty("supportRangesOnly", bEnabled);

		this._updateNavigationControl();
		return this;
	};

	// Sets the Title of the dialog.
	// The value is used for the different titles which we display during runtime on the dialog header.
	// The dialog title changes depending on the content.
	ValueHelpDialog.prototype.setTitle = function(sTitle) {
		this.setProperty("title", sTitle);

		this._updateDlgTitle();

		return this;
	};

	ValueHelpDialog.prototype.setFilterBar = function(oCtrl) {
		this.setAggregation("filterBar", oCtrl);

		if (this._oMainLayout && oCtrl) {
			if (this._isPhone()) {
				if (this._oFilterBar) {
					// Remove the old filterbar.
					this._oVBox.removeItem(this._oFilterBar);
					this._oFilterBar.detachInitialise(this._handleFilterBarInitialize);
				}

			} else if (this._oFilterBar) {
				// Remove the old filterbar.
				this._oMainLayout.removeItem(this._oFilterBar);
				this._oFilterBar.detachInitialise(this._handleFilterBarInitialize);
			}

			this._oFilterBar = oCtrl;

			this._oFilterBar.attachInitialise(this._handleFilterBarInitialize, this);

			if (this._oFilterBar) {

				this._oFilterBar.addStyleClass("compVHSearch");

				if (this._isPhone()) {
					// Let the Search Field on a phone show the search icon.
					var oSearchField = sap.ui.getCore().byId(this._oFilterBar.getBasicSearch());
					if (oSearchField instanceof sap.m.SearchField) {
						oSearchField.setShowSearchButton(true);
						oSearchField.attachSearch(function(oEvent) {
							if (oEvent.mParameters.refreshButtonPressed !== undefined) { // Workaround to ignore the remove icon click on the
								// Search control.
								this.getFilterBar().search();
							}
						}.bind(this));
					}
					this._oFilterBar.setShowGoOnFB(false);

					// Add the Collective Search as first item into the VBox.
					this._oColSearchBox.setLayoutData(new sap.m.FlexItemData({
						shrinkFactor: 0
					}));
					this._oVBox.insertItem(this._oColSearchBox, 0);

					// The Filterbar with the Basic Search is the second item.
					this._oFilterBar.setLayoutData(new sap.m.FlexItemData({
						shrinkFactor: 0
					}));
					this._oVBox.insertItem(this._oFilterBar, 1);

					// On the phone listen on the Search event to show the LIST_VIEW.
					this._oFilterBar.attachSearch(function(oEvent) {
						this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW);
					}.bind(this));

					if (this._currentViewMode === sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW) {
						// update the Filterbar states
						this._oFilterBar.setVisible(true);
						this._oFilterBar.setFilterBarExpanded(false);
						this._handleFilterBarInitialize();
					}
				} else {
					// for Tablet and Desktop add the Filterbar into the mainGrid and place the CollectiveSearch inside the Filterbar.
					this._oFilterBar._setCollectiveSearch(this._oColSearchBox);
					this._oMainLayout.insertItem(this._oFilterBar, 0);
				}
			}

			// Try to fill the basic search text into the SmartFilterBar and set the initial Focus.
			if (this._oFilterBar._oBasicSearchField) {
				var oBasicSearchField = this._oFilterBar._oBasicSearchField;
				oBasicSearchField.setValue(this.getBasicSearchText());

				this.setInitialFocus(oBasicSearchField);
			}
		}

		return this;
	};

	ValueHelpDialog.prototype._handleFilterBarInitialize = function() {
		if (this._currentViewMode === sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW) {
			// update the Filterbar states
			this._oFilterBar._handleVisibilityOfToolbar();
			var bShowAdvancedSearch = this._oFilterBar && this._oFilterBar.getFilterGroupItems() && this._oFilterBar.getFilterGroupItems().length > 0;
			this._oAdvancedSearchLink.setVisible(bShowAdvancedSearch);
			this._oFilterBar.setShowGoButton(!(this._oFilterBar && this._oFilterBar.getBasicSearch()));
		}
	};

	ValueHelpDialog.prototype.getFilterBar = function() {
		return this._oFilterBar;
	};

	ValueHelpDialog.prototype.setBasicSearchText = function(sText) {
		this.setProperty("basicSearchText", sText);

		if (this._oFilterBar && this._oFilterBar._oBasicSearchField) {
			this._oFilterBar._oBasicSearchField.setValue(sText);
		}

		return this;
	};

	/**
	 * Sets the array of tokens. The <code>sap.m.Tokens</code> are added to the dialog tokenizer Selected Items or Excluded Items. Normal tokens are added to the
	 * Selected Items tokenizer only and are selected in the table. <code>
	 * new sap.m.Token({key: "0001", text:"SAP A.G. (0001)"});
	 * </code> Tokens with
	 * the extra data with value 'range' are handled as range tokens or exclude range tokens. <code>
	 * new sap.m.Token({key: "i1", text: "ID: a..z"}).data("range", { "exclude": false, "operation": sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, "keyField": "CompanyCode", "value1": "a", "value2": "z"});
	 * </code>
	 * The selected items or range tokens are returned in the event parameters of the Ok event.
	 *
	 * @public
	 * @since 1.24
	 * @param {sap.m.Token[]} aTokens An array of token controls
	 */
	ValueHelpDialog.prototype.setTokens = function(aTokens) {
		if (aTokens.length) {
			var n = 0,
				sKey;
			for (var i = 0; i < aTokens.length; i++) {
				var token = aTokens[i];
				if (token.data("range")) {
					var range = token.data("range");
					sKey = token.getKey();
					if (!sKey) {
						do {
							sKey = "range_" + n;
							n++;
						} while (this._oSelectedRanges[sKey]);
					}
					var theTokenText = this._getFormatedRangeTokenText(range.operation, range.value1, range.value2, range.exclude, range.keyField);
					this._addToken2Tokenizer(sKey, theTokenText, range.exclude ? this._oExcludedTokens : this._oSelectedTokens);

					this._oSelectedRanges[sKey] = range;
				} else {
					sKey = token.getKey();
					var sText = token.getText();
					var sLongKey = token.data("longKey");
					var oRowData = token.data("row");
					if (!sLongKey) {
						sLongKey = sKey;
					}

					this._oSelectedItems.add(sLongKey, oRowData ? oRowData : token.getText());

					this._oSelectedTokens.addToken(new Token({
						key: sLongKey,
						text: sText,
						tooltip: sText
					}));
				}
			}
		} else {
			this._oSelectedItems.removeAll();
			this._oSelectedRanges = {};
		}
	};

	ValueHelpDialog.prototype.open = function() {

		// take the current visibility of the title and button for the visibility of the colSearchBox
		this.bCollectiveSearchActive = this.oSelectionTitle.getVisible() && this.oSelectionButton.getVisible();
		if (this._oColSearchBox) {
			this._oColSearchBox.setVisible(this.bCollectiveSearchActive);
		}

		if (!this._isPhone()) {
			if (this.getSupportRangesOnly() || this.getFilterMode()) {
				this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW);
			} else if (!this._oTable) {
				this._createDefaultTable();
			}

			// set the default dialog width for Tablet/Desktop
			this.setContentWidth(this._getDefaultContentWidth());
		} else {
			if (!this._oTable) {
				this._createDefaultTable();
			}
			this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_MAIN_VIEW);
		}

		Dialog.prototype.open.apply(this);
		return this;
	};

	/**
	 * Gives access to the internal table instance.
	 *
	 * @public
	 * @returns {object} the used table instance
	 * @since 1.28
	 */
	ValueHelpDialog.prototype.getTable = function() {
		if (!this._oTable) {
			this._createDefaultTable();
		}

		return this._oTable;
	};

	/**
	 * Sets the table used in the value help dialog. If not used, the dialog creates a sap.ui.table.Table or sap.m.Table instance internally.
	 *
	 * @param {object} oTable The used table control instance
	 *
	 * @since 1.32
	 * @public
	 */
	ValueHelpDialog.prototype.setTable = function(oTable) {
		if (this._oTable) {
			//jQuery.sap.log.error("ValueHelpDialog", "oTable exist");
			this._oMainLayout.removeItem(this._oTable);
		}

		this._bTableCreatedInternal = (arguments.length > 1) && (arguments[1] == true);

		if (oTable instanceof sap.ui.comp.smarttable.SmartTable) {
			this._oTable = oTable.getTable();
		} else {
			this._oTable = oTable;
		}

		this._oTable.setLayoutData(new sap.m.FlexItemData({
			shrinkFactor: 0,
			growFactor: 1
		}));

		this.theTable = this._oTable; // support old public theTable property for usage outside the class

		this._initializeTable();
		this._oMainLayout.addItem(oTable);
	};

	/**
	 * return the default ContentWidth for the dialog
	 *
	 * @private
	 * @returns {string} The width in px
	 */
	ValueHelpDialog.prototype._getDefaultContentWidth = function() {
		var nColumns = 0;
		if (this._oTable) {
			nColumns = this._oTable.getColumns().length;
		}
		var nWidth = Math.max(1080, nColumns * 130);
		return nWidth + "px";
	};

	/**
	 * Resets the table binding and changes the table NoDataText to "Please press Search Button".
	 *
	 * @private
	 * @since 1.24
	 */
	ValueHelpDialog.prototype.resetTableState = function() {
		if (this._oTable) {
			if (this._oTable.unbindRows) {
				this._oTable.unbindRows();
			}
			this._updateNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_PRESSSEARCH"));
		}
	};

	/**
	 * Changes the table NoDataText to "Please press Search Button".
	 *
	 * @private
	 * @since 1.24
	 */
	ValueHelpDialog.prototype.TableStateSearchData = function() {
		this._updateNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_PRESSSEARCH"));
	};

	/**
	 * Changes the table NoDataText.
	 *
	 * @param {string} sNoDataText Text for "no data" information
	 * @private
	 * @since 1.40
	 */
	ValueHelpDialog.prototype._updateNoDataText = function(sNoDataText) {
		if (this._oTable) {
			if (this._oTable.setNoData) {
				this._oTable.setNoData(sNoDataText);
			} else if (this._oTable.setNoDataText) {
				this._oTable.setNoDataText(sNoDataText);
			}
		}
	};

	/**
	 * Changes the table NoDataText to "No Data found!".
	 *
	 * @private
	 * @since 1.24
	 */
	ValueHelpDialog.prototype.TableStateDataFilled = function() {
		this._updateNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_NODATA"));
	};

	/**
	 * Changes the table NoDataText to "Searching...".
	 *
	 * @private
	 * @since 1.28
	 */
	ValueHelpDialog.prototype.TableStateDataSearching = function() {
		this._updateNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_SEARCHING"));
	};

	/*
	 * Initializes the control.
	 */
	ValueHelpDialog.prototype.init = function() {
		Dialog.prototype.init.apply(this);

		this._bTableCreatedInternal = false;

		this._aIncludeRangeOperations = {};
		this._aExcludeRangeOperations = {};

		this.setStretch(this._isPhone());
		this.setResizable(!this._isPhone());
		this.setDraggable(!this._isPhone());

		this.bCollectiveSearchActive = false;

		// init the Dialog itself
		this.addStyleClass("compValueHelpDialog");

		// init some resources
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this._sTableTitle1 = this._oRb.getText("VALUEHELPDLG_TABLETITLE1");
		this._sTableTitle2 = this._oRb.getText("VALUEHELPDLG_TABLETITLE2");
		this._sTableTitleNoCount = this._oRb.getText("VALUEHELPDLG_TABLETITLENOCOUNT");

		this._currentViewMode = null; // sap.ui.comp.valuehelpdialog._ValueHelpViewMode
		this._oSelectedItems = new ItemsCollection();
		this._oSelectedRanges = {};

		this._createHeaderBar();

		this._createCollectiveSearch();

		this._createTokenizer();
		this._updateTokenizer();

		this._oVBox = new VBox({
			fitContainer: true
		});
		this.addContent(this._oVBox);

		this._oMainLayout = new VBox({
			fitContainer: true,
			items: [
				this._oFilterBar
			],
			layoutData: new sap.m.FlexItemData({
				growFactor: 1,
				shrinkFactor: 0
			})
		});

		this._createNavigationControl();
		this._updateNavigationControl();

		this._oVBox.addItem(this._oMainLayout);

		if (this.getMaxIncludeRanges() === "-1" && this.getMaxExcludeRanges() !== "0" && !this.getFilterMode()) {
			this._oVBox.addItem(this._oTokenizerGrid);
		}

		this._createFooterControls();

		// vertical scrolling of the dialog content is disabled to get the expected layout of the used VBox in the content.
		// scrolling itself is enabled via css overflow-y: auto
		this.setVerticalScrolling(false);
		this.setHorizontalScrolling(false);

		// to support touch scrolling we have to set the event to marked, otherwise when using a sap.m.App touch events are not handled.
		if (!sap.ui.Device.system.desktop) {
			this._oVBox.attachBrowserEvent("touchmove", function(event) {
				event.setMarked();
			});
		}

		if (!this._isPhone()) {
			this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW);
		}
	};

	/**
	 * Update the visible view of the dialog. The method is changing the visibility of the used controls to only show the required parts of the view.
	 *
	 * @private
	 * @param {sap.ui.comp.valuehelpdialog._ValueHelpViewMode} newViewMode View mode which should be shown
	 */
	ValueHelpDialog.prototype._updateView = function(newViewMode) {
		if (this._currentViewMode === newViewMode) {
			return;
		}

		switch (newViewMode) {
			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW:
				this._validateRanges(function() {
					// when valid show the Items Table
					this._oTokenizerGrid.setVisible(this.getSupportMultiselect());
					this._oMainLayout.removeAllItems();
					if (this._oTabBar && this._oTabBar.getSelectedKey() !== sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW) {
						this._oTabBar.setSelectedKey(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW);
					}
					this._oMainLayout.addItem(this._oFilterBar);
					this._oMainLayout.addItem(this._oTable);
					this._updateDlgTitle();
				}.bind(this), function() {
					// if not valid go back to the Ranges Tab
					this._oTabBar.setSelectedKey(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW);
					this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW);
				}.bind(this));
				break;

			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW:

				if (this.getSupportRanges()) {
					this.bCollectiveSearchActive = this.oSelectionTitle.getVisible() && this.oSelectionButton.getVisible();
					this._oMainLayout.removeAllItems();
					if (this._oTabBar && this._oTabBar.getSelectedKey() !== sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW) {
						this._oTabBar.setSelectedKey(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW);
					}
					this._oMainLayout.addItem(this._getRanges());
					this._oButtonOk.setVisible(this.getSupportRangesOnly() || this.getSupportMultiselect());

					this._oTokenizerGrid.setVisible(this.getSupportMultiselect());
					if (!(this.getMaxIncludeRanges() === "-1" && this.getMaxExcludeRanges() !== "0" && !this.getFilterMode())) {
						this._oTokenizerGrid.setVisible(false);
					}
				}
				break;

			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_MAIN_VIEW:
				this.setVerticalScrolling(false);

				this._oColSearchBox.setVisible(false);
				this._oMainListMenu.setVisible(true);
				this._updateNavigationControl();
				this._oAdvancedSearchLink.setVisible(false);
				if (this._oFilterBar) {
					this._oFilterBar.setVisible(false);
					this._oFilterBar.setFilterBarExpanded(false);
				}
				this._oTable.setVisible(false);

				this._oTokenizerGrid.setVisible(this.getSupportMultiselect());
				if (!(this.getMaxIncludeRanges() === "-1" && this.getMaxExcludeRanges() !== "0" && !this.getFilterMode())) {
					this._oTokenizerGrid.setVisible(false);
				}

				if (this._oRanges) {
					this._oRanges.setVisible(false);
				}

				this._oButtonGo.setVisible(false);
				this._oButtonClear.setVisible(false);
				this._oButtonOk.setVisible(true);
				this._oButtonCancel.setVisible(true);
				this._oBackButton.setVisible(false);

				this._bNoneMainView = false;
				// if we do not show the Tokenizer (Selected/Excluded Items and only have either a List or the Condition part as ListItem we directly
				// open the List or Condition view in the dialog
				if (!this._oTokenizerGrid.getVisible() && !(this._oSelectItemLI.getVisible() && this._oDefineConditionsLI.getVisible())) {
					this._bNoneMainView = true; // used to not show the backbutton on the list and condition view
					if (this._oSelectItemLI.getVisible()) {
						// make the Selection Table visible by default
						this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW);
					}
					if (this._oDefineConditionsLI.getVisible()) {
						// make the condition screen visible by default
						this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_CONDITIONS_VIEW);
					}
					return;
				}

				break;

			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW:
				this.setVerticalScrolling(true);

				this._oColSearchBox.setVisible(this.bCollectiveSearchActive);
				this._oMainListMenu.setVisible(false);
				if (this._oFilterBar) {
					var bShowAdvancedSearch = this._oFilterBar && this._oFilterBar.getFilterGroupItems() && this._oFilterBar.getFilterGroupItems().length > 0;
					this._oAdvancedSearchLink.setVisible(bShowAdvancedSearch);
					this._oFilterBar.setShowGoButton(!(this._oFilterBar && this._oFilterBar.getBasicSearch()));
					this._oFilterBar.setVisible(true);
					this._oFilterBar.setFilterBarExpanded(false);
				}
				this._oTable.setVisible(true);
				this._oTokenizerGrid.setVisible(false);
				if (this._oRanges) {
					this._oRanges.setVisible(false);
				}

				this._oButtonGo.setVisible(false);
				this._oButtonClear.setVisible(false);
				this._oButtonOk.setVisible(this.getSupportMultiselect());
				this._oButtonCancel.setVisible(true);
				this._oBackButton.setVisible(!this._bNoneMainView);
				break;

			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_SEARCH_VIEW:
				this.setVerticalScrolling(true);

				this._oColSearchBox.setVisible(false);
				this._oMainListMenu.setVisible(false);
				if (this._oFilterBar) {
					this._oFilterBar.setVisible(true);
					this._oFilterBar.setFilterBarExpanded(true);
				}
				this._oAdvancedSearchLink.setVisible(false);
				this._oTable.setVisible(false);
				this._oTokenizerGrid.setVisible(false);
				if (this._oRanges) {
					this._oRanges.setVisible(false);
				}

				this._oButtonGo.setVisible(true);
				this._oButtonClear.setVisible(true);
				this._oButtonOk.setVisible(false);
				this._oButtonCancel.setVisible(true);
				this._oBackButton.setVisible(true);
				break;

			case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_CONDITIONS_VIEW:
				this.setVerticalScrolling(true);

				this._oColSearchBox.setVisible(false);
				this._oMainListMenu.setVisible(false);
				if (this._oFilterBar) {
					this._oFilterBar.setVisible(false);
				}
				this._oAdvancedSearchLink.setVisible(false);
				this._oTable.setVisible(false);
				this._oTokenizerGrid.setVisible(false);
				if (!this._oRanges) {
					this._oMainLayout.addItem(this._getRanges());
				}
				this._oRanges.setVisible(true);

				this._oButtonGo.setVisible(false);
				this._oButtonClear.setVisible(false);
				this._oButtonOk.setVisible(true);
				this._oButtonCancel.setVisible(true);
				this._oBackButton.setVisible(!this._bNoneMainView);
				break;

			default:
				break;
		}

		if (this._oMainListMenu && this._oVBox) {

			// check if the Toolbar of the FilterBar is empty and make the toolbar invisible
			if (this._oFilterBar) {
				this._oFilterBar._handleVisibilityOfToolbar();
			}

			this._oVBox.rerender();
		}

		this._currentViewMode = newViewMode;
		this._updateDlgTitle();
	};

	/**
	 * select or deselect the row in the table with the given key
	 *
	 * @private
	 * @param {string} sKey the key of the row
	 * @param {boolean} bSelect specifies if the row should be selected or deselected
	 */
	ValueHelpDialog.prototype._changeTableRowSelectionForKey = function(sKey, bSelect) {
		var i;
		var oTable = this._oTable;

		this._bIgnoreSelectionChange = true;

		if (sap.ui.table.Table && oTable instanceof sap.ui.table.Table) {
			var rows = oTable.getBinding("rows");
			if (rows) {
				if (rows.aKeys) {
					for (i = 0; i < rows.aKeys.length; i++) {
						if (decodeURIComponent(rows.aKeys[i]) === sKey) {
							if (bSelect) {
								oTable.addSelectionInterval(i, i);
							} else {
								oTable.removeSelectionInterval(i, i);
							}
							break;
						}
					}
				} else {
					this.oRows = oTable.getBinding("rows");
					if (this.oRows.aIndices) {
						for (i = 0; i < this.oRows.aIndices.length; i++) {
							var oContext = oTable.getContextByIndex(this.oRows.aIndices[i]);
							if (oContext) {
								var oRow = oContext.getObject();
								if (oRow[this.getKey()] === sKey) {
									if (bSelect) {
										oTable.addSelectionInterval(i, i);
									} else {
										oTable.removeSelectionInterval(i, i);
									}
									break;
								}
							}
						}
					}
				}
			}
		} else {

			// Handle selection update of the m.table
			for (i = 0; i < oTable.getItems().length; i++) {
				var oColListItem = oTable.getItems()[i];
				var oRowData = oColListItem.getBindingContext().getObject();
				if (oRowData[this.getKey()] === sKey) {
					oTable.setSelectedItem(oColListItem, bSelect);
					break;
				}
			}

		}

		this._bIgnoreSelectionChange = false;

	};

	/**
	 * Updates the selection of rows in the table. This function must be called after a first binding or binding update of the table. It will set a
	 * table row as selected if a token for this row exists.
	 *
	 * @public
	 * @since 1.24
	 */
	ValueHelpDialog.prototype.update = function() {
		var i, j, oRow, oContext;
		var sKey;
		var aItems = this._oSelectedItems.getItems();
		var eventArgs = {
			tokenKeys: aItems,
			useDefault: false
		};

		this._bIgnoreSelectionChange = true;

		if (this._hasListeners("updateSelection")) {
			this.fireUpdateSelection(eventArgs);
		} else {
			eventArgs.useDefault = true;
		}

		if (eventArgs.useDefault) {

			if (sap.ui.table.Table && this._oTable instanceof sap.ui.table.Table) {

				this.oRows = this._oTable.getBinding("rows");
				this._oTable.clearSelection();

				if (this.oRows.aKeys) {
					var aKeys = this.getKeys();
					var sRowKeyPartPrefix = aKeys && aKeys.length > 1 ? this.getKey() + "=" : "";

					// in case of an oDataModel binding the aKeys exist and the row will be found via the keys.
					for (j = 0; j < aItems.length; j++) {
						sKey = aItems[j];
						//sKeyEncoded = encodeURIComponent(sKey); //key of the item must be encoded before we search the item in the table row keys.

						//TODO instead of using encodeURI of the Token key we could try to use the oDataModel.createKey function to build the row key from the Token
						//var sPath = this.oRows.sPath.slice(1);
						//var oRowData = this._oSelectedItems.getItem(aItems[j]);
						//var sKey2 = this.getModel().createKey(sPath, oRowData);

						var sRowKeyPart = sRowKeyPartPrefix + "'" + sKey + "'";

						for (i = 0; i < this.oRows.aKeys.length; i++) {
							var sRowKey = decodeURIComponent(this.oRows.aKeys[i]);
							var bIsRow = sRowKey === sKey;
							if (bIsRow || // either the rowKey is equal the token key or we search if the main key with the value is part of the rowKey
								sRowKey.indexOf(sRowKeyPart) >= 0) {

								if (!bIsRow) { // in this case we will update the old key and use the longKey from the rows
									this._oSelectedItems.remove(sKey); // remove the old key
									// and update the Token key
									var token = this._getTokenByKey(sKey, this._oSelectedTokens);
									if (token) {
										token.setKey(sRowKey);
									}
								}

								// update the row data in the selectedItems List
								oContext = this._oTable.getContextByIndex(i);
								if (oContext) {
									oRow = oContext.getObject();
									this._oSelectedItems.add(sRowKey, oRow);
								}

								// make the row selected
								this._oTable.addSelectionInterval(i, i);
								break;
							}
						}
					}
				} else if (this.oRows.aIndices) {
					this._oTable.clearSelection();

					for (j = 0; j < aItems.length; j++) {
						var key = aItems[j];
						for (i = 0; i < this.oRows.aIndices.length; i++) {
							oContext = this._oTable.getContextByIndex(this.oRows.aIndices[i]);
							if (oContext) {
								oRow = oContext.getObject();
								if (oRow[this.getKey()] === key) {
									this._oSelectedItems.add(oRow[this.getKey()], oRow);
									this._oTable.addSelectionInterval(i, i);
									break;
								}
							}
						}
					}
				}

			} else {
				// Handle selection update of the m.table
				var oTable = this._oTable;
				for (j = 0; j < aItems.length; j++) {
					sKey = aItems[j];
					for (i = 0; i < oTable.getItems().length; i++) {
						var oColListItem = oTable.getItems()[i];
						var oRowData = oColListItem.getBindingContext().getObject();
						if (oRowData[this.getKey()] === sKey) {
							oTable.setSelectedItem(oColListItem, true);
							break;
						}
					}
				}

			}
		}

		this._bIgnoreSelectionChange = false;

		this._updateTitles();
	};

	/**
	 * Create the header bar, the controls for the header and adds it into the custom header.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._createHeaderBar = function() {
		this._oTitle = new sap.m.Title();

		var oBackButton = null;
		if (this._isPhone()) {
			oBackButton = new sap.m.Button({
				visible: false,
				type: ButtonType.Back,
				press: function(oEvent) {
					if (this._currentViewMode === sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_SEARCH_VIEW) {
						this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW);
					} else {
						this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_MAIN_VIEW);
					}
				}.bind(this)
			});

			this._oBackButton = oBackButton;
		}

		this.setCustomHeader(new sap.m.Bar({
			contentLeft: oBackButton,
			contentMiddle: this._oTitle
		}));
	};

	/**
	 * Creates the collective search elements which are placed beside the <code>FilterBar</code>.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._createCollectiveSearch = function() {
		// the oSelectionText and oSelectionButton are accessed outside the dialog!!!
		this.oSelectionTitle = new sap.m.Text({
			visible: false,
			wrapping: false
		}).addStyleClass("compVHColSearchText");

		this.oSelectionButton = new sap.m.Button({
			icon: "sap-icon://arrow-down",
			tooltip: this._oRb.getText("VALUEHELPVALDLG_SEARCHTEMPLATES_TOOLTIP"), // "Search Templates",
			type: sap.m.ButtonType.Transparent,
			visible: false,
			ariaLabelledBy: this.oSelectionTitle
		}).addStyleClass("compVHColSearchBtn");

		this._oColSearchBox = new HBox({
			fitContainer: true,
			visible: this.oSelectionButton.getVisible(),
			items: [
				this.oSelectionTitle, this.oSelectionButton
			]
		});
	};

	/**
	 * Creates the footer buttons.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._createFooterControls = function() {
		this._oButtonOk = new sap.m.Button({
			text: this._oRb.getText("VALUEHELPDLG_OK"),
			press: this._onCloseAndTakeOverValues.bind(this),
			visible: this.getSupportMultiselect(),
			layoutData: new sap.m.OverflowToolbarLayoutData({
				priority: sap.m.OverflowToolbarPriority.NeverOverflow
			})
		});

		this._oButtonCancel = new sap.m.Button({
			text: this._oRb.getText("VALUEHELPDLG_CANCEL"),
			press: this._onCancel.bind(this),
			layoutData: new sap.m.OverflowToolbarLayoutData({
				priority: sap.m.OverflowToolbarPriority.NeverOverflow
			})
		});

		if (this._isPhone()) {
			this._oButtonGo = new sap.m.Button({
				text: this._oRb.getText("VALUEHELPDLG_GO"),
				type: sap.m.ButtonType.Emphasized,
				press: this._onGo.bind(this),
				visible: false,
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.NeverOverflow
				})
			});

			this._oButtonClear = new sap.m.Button({
				text: this._oRb.getText("VALUEHELPDLG_CLEAR"),
				press: this._onClear.bind(this),
				visible: false,
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.NeverOverflow
				})
			});

			this.addButton(this._oButtonGo);
			this.addButton(this._oButtonClear);
		}
		this.addButton(this._oButtonOk);
		this.addButton(this._oButtonCancel);
	};

	/**
	 * Creates the tokenizer part of the dialog.
	 *
	 * @private
	 * @returns {sap.ui.layout.Grid} with all elements
	 */
	ValueHelpDialog.prototype._createTokenizer = function() {
		if (this._oTokenizerGrid) {
			return this._oTokenizerGrid;
		}

		// this._oSelectedTokenTitle = new sap.m.Text().addStyleClass("compVHSelectedItemsText");
		this._oSelectedTokenTitle = new sap.ui.core.InvisibleText();

		this._oSelectedTokens = new sap.m.Tokenizer({
			tokenUpdate: function(oControlEvent) {
				if (this._ignoreRemoveToken) {
					return;
				}

				if (oControlEvent.getParameter("type") === sap.m.Tokenizer.TokenChangeType.Removed) {
					var aRemovedTokens = oControlEvent.getParameter("removedTokens");
					var aTokenKeys = [];
					var aRangeTokenKeys = [];

					for (var j = 0; j < aRemovedTokens.length; j++) {
						var oToken = aRemovedTokens[j];
						var sKey = oToken.getKey();

						if (this._oSelectedRanges && this._oSelectedRanges[sKey]) {
							aRangeTokenKeys.push(sKey);
						} else {
							aTokenKeys.push(sKey);

							// remove single selected item
							this._oSelectedItems.remove(sKey);
							this._removeTokenFromTokenizer(sKey, this._oSelectedTokens);
						}
					}

					// remove range tokens
					this._removeRangeByKey(aRangeTokenKeys, false);
					this._updateTitles();

					var eventArgs = {
						tokenKeys: aTokenKeys,
						useDefault: false
					};

					if (this._hasListeners("tokenRemove")) {
						this._bIgnoreSelectionChange = true;
						this.fireTokenRemove(eventArgs);
						this._bIgnoreSelectionChange = false;

						// if (eventArgs.useDefault) {
						// sap.m.MessageToast.show("useDefault");
						// }

					} else {
						eventArgs.useDefault = true;
					}

					if (eventArgs.useDefault) {
						aTokenKeys.forEach(function(sTokenKey) {
							this._changeTableRowSelectionForKey(sTokenKey, false);
						}.bind(this));
					}

					// try to set the focus to other token - Workaround because the Tokenizer does not set the focus to other token
					if (aRemovedTokens.length === 1) {
						setTimeout(function() {
							if (this._oSelectedTokens.getTokens()) {
								var i = this._oSelectedTokens.getTokens().length - 1;
								if (i >= 0) {
									this._oSelectedTokens.getTokens()[i].focus();
								}
							}
						}.bind(this));
					}

					this._updateTitles();
				}

			}.bind(this),
			ariaLabelledBy: this._oSelectedTokenTitle
		}).addStyleClass("compVHTokensDiv");

		// this "remove all" button is a workaround and should be part of the Tokenizer itself
		this._oRemoveAllSelectedItemsBtn = new sap.m.Button({
			type: sap.m.ButtonType.Transparent,
			icon: sap.ui.core.IconPool.getIconURI("sys-cancel"),
			tooltip: this._oRb.getText("VALUEHELPVALDLG_REMOVETOKENS_TOOLTIP"),
			press: function() {
				this._oSelectedTokens.destroyTokens();

				this._removeRangeByKey(Object.keys(this._oSelectedRanges), false);

				this._oSelectedItems.removeAll();
				this._bIgnoreSelectionChange = true;
				if (this._oTable && this._oTable.clearSelection) {
					this._oTable.clearSelection();
				}
				if (this._oTable && this._oTable.removeSelections) {
					this._oTable.removeSelections();
				}
				this._bIgnoreSelectionChange = false;

				this._updateTitles();
			}.bind(this),
			ariaLabelledBy: this._oSelectedTokenTitle
		}).addStyleClass("compVHRemoveAllBtn");

		var oHContainer1 = new sap.ui.layout.HorizontalLayout({
			content: [
				this._oSelectedTokens, this._oRemoveAllSelectedItemsBtn
			]
		}).addStyleClass("compVHTokenizerHLayout");

		this._oIncludeTokenGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			hSpacing: 0,
			vSpacing: 0,
			content: [
				this._oSelectedTokenTitle, oHContainer1
			]
		});

		this._oExcludedTokenTitle = new sap.m.Text().addStyleClass("compVHSelectedItemsText");

		this._oExcludedTokens = new sap.m.Tokenizer({
			tokenChange: function(oControlEvent) {
				if (this._ignoreRemoveToken) {
					return;
				}

				if (oControlEvent.getParameter("type") === sap.m.Tokenizer.TokenChangeType.Removed || oControlEvent.getParameter("type") === sap.m.Tokenizer.TokenChangeType.RemovedAll) {
					var aRemovedTokens = oControlEvent.getParameter("removedTokens");
					var aTokenKeys = [];

					if (!aRemovedTokens || aRemovedTokens.length == 0) {
						aRemovedTokens = [oControlEvent.getParameter("token")];
					}

					if (!aRemovedTokens || aRemovedTokens.length == 0) {
						aRemovedTokens = [oControlEvent.getParameter("tokens")];
					}

					for (var j = 0; j < aRemovedTokens.length; j++) {
						var oToken = aRemovedTokens[j];
						var sKey = oToken.getKey();
						if (this._oSelectedRanges && this._oSelectedRanges[sKey]) {
							aTokenKeys.push(sKey);
						}
					}

					// remove range
					this._removeRangeByKey(aTokenKeys, true);
					this._updateTitles();
				}

			}.bind(this),
			ariaLabelledBy: this._oExcludedTokenTitle
		}).addStyleClass("compVHTokensDiv");

		// this "remove all" button is a workaround and should be part of the Tokenizer itself
		this._oRemoveAllExcludeItemsBtn = new sap.m.Button({
			type: sap.m.ButtonType.Transparent,
			icon: sap.ui.core.IconPool.getIconURI("sys-cancel"),
			tooltip: this._oRb.getText("VALUEHELPVALDLG_REMOVETOKENS_TOOLTIP"),
			press: function() {
				this._oExcludedTokens.destroyTokens();

				this._removeRangeByKey(Object.keys(this._oSelectedRanges), true);
				this._updateTitles();
			}.bind(this),
			ariaLabelledBy: this._oExcludedTokenTitle
		}).addStyleClass("compVHRemoveAllBtn");

		var oHContainer2 = new sap.ui.layout.HorizontalLayout({
			content: [
				this._oExcludedTokens, this._oRemoveAllExcludeItemsBtn
			]
		}).addStyleClass("compVHTokenizerHLayout");

		this._oExcludeTokenGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			hSpacing: 0,
			vSpacing: 0,
			content: [
				this._oExcludedTokenTitle, oHContainer2
			]
		});

		// only on tablet and desktop we use the expandable panel
		this._oTokenizerPanel = new sap.m.Panel({
			expanded: sap.ui.Device.system.desktop,
			expandable: true, // this._isPhone() ? false : true,
			expandAnimation: true,
			headerText: "",
			width: "auto",
			content: [
				this._oIncludeTokenGrid, this._oExcludeTokenGrid
			],
			expand: function(oEvent) {
				this._updateTokenizer();

				if (oEvent.mParameters.expand && !(this._oTable instanceof sap.m.Table)) {
					// when we open the tokens scroll the dialog content to the end
					var oScrollDiv = jQuery.sap.domById(this.getId() + "-scrollCont");
					if (oScrollDiv && oScrollDiv.scrollTop) {
						oScrollDiv.stop().animate({
							scrollTop: "1000" // oScrollDiv.prop("scrollHeight") - oScrollDiv.height()
						}, 1000);
					}
				}
			}.bind(this)
		}).addStyleClass("compVHBackgroundTransparent").addStyleClass("compVHTokensPanel").addStyleClass("compValueHelpDialogTokens");

		if (this._isPhone()) {
			// workaround to get a vertical layout of the Tokens in the tokenizer
			this._oSelectedTokens.addStyleClass("sapMTokenizerMultiLine");
			this._oExcludedTokens.addStyleClass("sapMTokenizerMultiLine");
		}

		this._oTokenizerGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			hSpacing: 0,
			vSpacing: 0,
			content: this._oTokenizerPanel
		}).addStyleClass("compVHDarkBackground");

		return this._oTokenizerGrid;
	};

	/**
	 * Add/Modify a token in a tokenizer control.
	 *
	 * @private
	 * @param {string} sKey of the token
	 * @param {string} sText the token text
	 * @param {sap.m.Tokenizer} oTokenizer the Tokenizer which contain the token
	 */
	ValueHelpDialog.prototype._addToken2Tokenizer = function(sKey, sText, oTokenizer) {
		var token = this._getTokenByKey(sKey, oTokenizer);

		var sTooltip = (typeof sText === "string") ? sText : "";

		if (token) {
			// update existing token
			token.setText(sText);
			token.setTooltip(sTooltip);
		} else {
			// create a new token
			oTokenizer.addToken(new Token({
				key: sKey,
				text: sText,
				tooltip: sTooltip
			}));
			this._updateTokenizer();
		}
	};

	/**
	 * Search a token by key in the given tokenizer.
	 *
	 * @private
	 * @param {string} sKey of the token
	 * @param {sap.m.Tokenizer} oTokenizer the Tokenizer which contain the token
	 * @returns {sap.m.Token} the found token instance or null
	 */
	ValueHelpDialog.prototype._getTokenByKey = function(sKey, oTokenizer) {
		var aTokens = oTokenizer.getTokens();
		for (var i = 0; i < aTokens.length; i++) {
			var token = aTokens[i];
			if (token.getKey() === sKey) {
				return token;
			}
		}
		return null;
	};

	/**
	 * Removes a token from the selected or excluded tokenizer.
	 *
	 * @private
	 * @param {string} sKey of the token
	 */
	ValueHelpDialog.prototype._removeToken = function(sKey) {
		if (!this._removeTokenFromTokenizer(sKey, this._oSelectedTokens)) {
			this._removeTokenFromTokenizer(sKey, this._oExcludedTokens);
		}
	};

	/**
	 * Removes a token from a tokenizer.
	 *
	 * @private
	 * @param {string} sKey of the token
	 * @param {sap.m.Tokenizer} oTokenizer the Tokenizer which contain the token
	 * @returns {boolean} true when the token has been found and removed, else false
	 */
	ValueHelpDialog.prototype._removeTokenFromTokenizer = function(sKey, oTokenizer) {
		var token = this._getTokenByKey(sKey, oTokenizer);
		if (token) {
			this._ignoreRemoveToken = true;
			oTokenizer.removeToken(token);
			this._ignoreRemoveToken = false;
			this._updateTokenizer();
			return true;
		}
		return false;
	};

	/**
	 * Updating the tokenizer title and RemoveAll buttons.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._updateTokenizer = function() {
		var bExpanded = false;
		if (this._oTokenizerPanel) {
			bExpanded = this._oTokenizerPanel.getExpanded();
			// this._oSelectedTokenTitle.setVisible(false);
		}

		var n1 = this._oSelectedTokens.getTokens().length;
		var n2 = this._oExcludedTokens.getTokens().length;

		var sSelectedItemsTitle = this._oRb.getText("VALUEHELPDLG_SELECTEDITEMS");
		var sNoneSelectedItemsTitle = this._oRb.getText("VALUEHELPDLG_NONESELECTEDITEMS");

		var sSelectedItemsText = sSelectedItemsTitle.replace("{0}", n1.toString());
		var sExcludedItemsText = this._oRb.getText("VALUEHELPDLG_EXCLUDEDITEMS", n2.toString());
		var sText = n1 === 0 ? sNoneSelectedItemsTitle : sSelectedItemsText;

		if (this._oTokenizerPanel) {
			if (!bExpanded) {
				if (this._isPhone()) {
					sSelectedItemsText = this._oRb.getText("VALUEHELPDLG_SELECTEDITEMS_SHORT", n1.toString());
					sExcludedItemsText = this._oRb.getText("VALUEHELPDLG_EXCLUDEDITEMS_SHORT", n2.toString());
				}
				sText = "";
				if (n1 !== 0) {
					sText = sSelectedItemsText;
				}
				if (n2 !== 0) {
					sText += (n1 !== 0 ? " / " : "") + sExcludedItemsText;
				}
				if (sText === "") {
					sText = sNoneSelectedItemsTitle;
				}
			} else if (n1 === 0 && n2 !== 0) {
				sText = sExcludedItemsText;
				sExcludedItemsText = "";
			}
			this._oTokenizerPanel.setHeaderText(sText);
			this._oSelectedTokenTitle.setText(sText);
		} else {
			this._oSelectedTokenTitle.setText(sText);
		}
		this._oRemoveAllSelectedItemsBtn.setEnabled(n1 !== 0);

		this._oExcludedTokenTitle.setText(sExcludedItemsText);

		if (n1 === 0 && n2 !== 0) {
			// hide all when only exclude items exist
			this._oIncludeTokenGrid.addStyleClass("displayNone");
			if (!this._isPhone()) {
				this._oExcludedTokenTitle.addStyleClass("displayNone");
			}
		} else {
			this._oIncludeTokenGrid.removeStyleClass("displayNone");
			this._oExcludedTokenTitle.removeStyleClass("displayNone");
		}

		if (n2 === 0) {
			this._oExcludeTokenGrid.addStyleClass("displayNone");
		} else {
			this._oExcludeTokenGrid.removeStyleClass("displayNone");
		}
	};

	/**
	 * Create the TabBar or on Phone the ListItems as navigation control.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._createNavigationControl = function() {
		if (!this._isPhone()) {
			this._oTabBar = new sap.m.IconTabBar({
				upperCase: true,
				expandable: false,
				items: [
					new sap.m.IconTabFilter({
						visible: true,
						text: this._oRb.getText("VALUEHELPDLG_ITEMSTABLE"),
						key: sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW
					}), new sap.m.IconTabFilter({
						visible: true,
						text: this._oRb.getText("VALUEHELPDLG_RANGES"),
						key: sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW
					})
				],
				select: function(oControlEvent) {
					this._updateView(oControlEvent.getParameters().key);
				}.bind(this)
			});

			this._oTabBar.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0
			}));
			this._oVBox.addItem(this._oTabBar);

		} else {

			this._oSelectItemLI = new sap.m.StandardListItem({
				type: sap.m.ListType.Navigation,
				title: this._oRb.getText("VALUEHELPDLG_ITEMSTABLE")
			}).data("key", sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW);

			this._oDefineConditionsLI = new sap.m.StandardListItem({
				type: sap.m.ListType.Navigation,
				title: this._oRb.getText("VALUEHELPDLG_RANGES")
			}).data("key", sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_CONDITIONS_VIEW);

			this._oMainListMenu = new sap.m.List({
				mode: sap.m.ListMode.None,
				items: [
					this._oSelectItemLI, this._oDefineConditionsLI
				],
				itemPress: function(oEvent) {
					if (oEvent) {
						this._updateView(oEvent.mParameters.listItem.data("key"));
					}
				}.bind(this)
			});

			this._oMainListMenu.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0
			}));
			this._oVBox.addItem(this._oMainListMenu);

			this._oAdvancedSearchLink = new sap.m.Link({
				text: this._oRb.getText("VALUEHELPDLG_ADVANCEDSEARCH"),
				press: function() {
					this._updateView(sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_SEARCH_VIEW);
				}.bind(this)
			}).addStyleClass("compVHAdvancedSearchLink");

			this._oAdvancedSearchLink.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0
			}));
			this._oVBox.addItem(this._oAdvancedSearchLink);
		}
	};

	/**
	 * Update the TabBar or on Phone the Listitems.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._updateNavigationControl = function() {
		var bListTabVisible = !this.getSupportRangesOnly();
		var bRangesTabVisible = this.getSupportRangesOnly() || this.getSupportRanges();

		if (this._oTabBar) {

			var aTabItems = this._oTabBar.getItems();
			aTabItems[0].setVisible(bListTabVisible);
			aTabItems[1].setVisible(bRangesTabVisible);

			this._oTabBar.setVisible(bListTabVisible && bRangesTabVisible);
			this._updateDlgTitle();
		}

		if (this._oMainListMenu) {
			this._oSelectItemLI.setVisible(bListTabVisible);
			this._oDefineConditionsLI.setVisible(bRangesTabVisible);
		}

	};

	/**
	 * Remove a single/multiple range(s) from the UI and the internal selectedRanges list.
	 *
	 * @param {string|array} sKey Single or multiple sKey of the range
	 * @param {boolean} isExclude specifies if the removed range must be an included or excluded range
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._removeRangeByKey = function(sKey, isExclude) {
		var aKeys = sKey;

		if (typeof aKeys === "string") {
			aKeys = [
				aKeys
			];
		}

		aKeys.forEach(function(sKey, index, aKeys) {
			var range = this._oSelectedRanges[sKey];
			if (range.exclude === isExclude) {
				if (!range._oGrid) {
					delete this._oSelectedRanges[sKey];

					if (this._oFilterPanel) {
						var oConditionPanel = range.exclude ? this._oFilterPanel._oExcludeFilterPanel : this._oFilterPanel._oIncludeFilterPanel;

						if (aKeys.length == 1) {
							// only in case of a single key we remove the condition
							oConditionPanel.removeCondition(sKey);
						} else {
							// to make it faster we only remove the key from the internal oConditionMap and later make a refresh on the conditionPanel
							oConditionPanel._removeConditionFromMap(sKey);
						}
					}
				}
			}
		}, this);

		if (aKeys.length > 1 && this._oFilterPanel) {
			var oConditionPanel = isExclude ? this._oFilterPanel._oExcludeFilterPanel : this._oFilterPanel._oIncludeFilterPanel;
			oConditionPanel._clearConditions();
			oConditionPanel._fillConditions();
		}
	};

	// ################################################################################
	// Start Ranges handling
	// ################################################################################

	/**
	 * Create and returns the ranges grid
	 *
	 * @private
	 * @returns {sap.ui.layout.Grid} the ranges grid
	 */
	ValueHelpDialog.prototype._getRanges = function() {
		if (!this._oRanges) {
			this._oRanges = this._createRanges();
		}
		return this._oRanges;
	};

	/**
	 * Create a new instance of ranges grid with all inner controls.
	 *
	 * @private
	 * @returns {sap.ui.layout.Grid} the ranges grid
	 */
	ValueHelpDialog.prototype._createRanges = function() {

		jQuery.sap.require("sap.m.P13nConditionPanel");
		jQuery.sap.require("sap.m.P13nFilterPanel");

		this._oFilterPanel = new sap.m.P13nFilterPanel({
			maxIncludes: this.getMaxIncludeRanges(),
			maxExcludes: this.getMaxExcludeRanges(),
			containerQuery: true,
			addFilterItem: function(oEvent) {
				// sap.m.MessageToast.show("AddFilterItem");

				var params = oEvent.mParameters;
				var oRange = {
					exclude: params.filterItemData.getExclude(),
					keyField: params.filterItemData.getColumnKey(),
					operation: params.filterItemData.getOperation(),
					value1: params.filterItemData.getValue1(),
					value2: params.filterItemData.getValue2()
				};
				this._oSelectedRanges[params.key] = oRange;

				var oCurrentKeyField = this._getKeyFieldByKey(oRange.keyField);
				oRange.value1 = this._convertValue2Object(oRange.value1, oCurrentKeyField.type);
				oRange.value2 = this._convertValue2Object(oRange.value2, oCurrentKeyField.type);

				// the new added filterItemData instance must be passed back into the filterpanel aggregation, otherwise the index of the add, update
				// or remove events is not correct.
				this._oFilterPanel.addFilterItem(params.filterItemData);

				var sTokenText = this._getFormatedRangeTokenText(oRange.operation, oRange.value1, oRange.value2, oRange.exclude, oRange.keyField);
				this._addToken2Tokenizer(params.key, sTokenText, oRange.exclude ? this._oExcludedTokens : this._oSelectedTokens);
				this._updateTokenizer();
			}.bind(this),
			removeFilterItem: function(oEvent) {
				// sap.m.MessageToast.show("RemoveFilterItem");

				var params = oEvent.mParameters;
				delete this._oSelectedRanges[params.key];
				this._removeToken(params.key);
				this._updateTokenizer();
			}.bind(this),
			updateFilterItem: function(oEvent) {
				// sap.m.MessageToast.show("UpdateFilterItem");

				var params = oEvent.mParameters;
				var oRange = this._oSelectedRanges[params.key];
				oRange.exclude = params.filterItemData.getExclude();
				oRange.keyField = params.filterItemData.getColumnKey();
				oRange.operation = params.filterItemData.getOperation();
				oRange.value1 = params.filterItemData.getValue1();
				oRange.value2 = params.filterItemData.getValue2();

				var oCurrentKeyField = this._getKeyFieldByKey(oRange.keyField);
				oRange.value1 = this._convertValue2Object(oRange.value1, oCurrentKeyField.type);
				oRange.value2 = this._convertValue2Object(oRange.value2, oCurrentKeyField.type);

				var sTokenText = this._getFormatedRangeTokenText(oRange.operation, oRange.value1, oRange.value2, oRange.exclude, oRange.keyField);
				this._addToken2Tokenizer(params.key, sTokenText, oRange.exclude ? this._oExcludedTokens : this._oSelectedTokens);
				this._updateTokenizer();
			}.bind(this)
		});

		this._oFilterPanel._oIncludeFilterPanel.setDisplayFormat(this.getDisplayFormat());
		this._oFilterPanel._oExcludeFilterPanel.setDisplayFormat(this.getDisplayFormat());

		this._oFilterPanel._oIncludeFilterPanel._fSuggestCallback = this._fSuggestCallback;
		this._oFilterPanel._oExcludeFilterPanel._fSuggestCallback = this._fSuggestCallback;

		this._oFilterPanel._oIncludeFilterPanel._sAddRemoveIconTooltipKey = "CONDITION";
		this._oFilterPanel._oExcludeFilterPanel._sAddRemoveIconTooltipKey = "CONDITION";
		var sType;
		if (this._aIncludeRangeOperations) {
			for (sType in this._aIncludeRangeOperations) {
				this._oFilterPanel.setIncludeOperations(this._aIncludeRangeOperations[sType], sType);
			}
		}
		if (this._aExcludeRangeOperations) {
			for (sType in this._aExcludeRangeOperations) {
				this._oFilterPanel.setExcludeOperations(this._aExcludeRangeOperations[sType], sType);
			}
		}

		// this._oFilterPanel.setKeyFields([{key: "KeyField1", text: "Field1"}, {key: "KeyField2", text: "Field2", type : "date", isDefault: true}]);
		if (this._aRangeKeyFields) {
			this._aRangeKeyFields.forEach(function(item) {
				this._oFilterPanel.addItem(new sap.m.P13nItem({
					columnKey: item.key,
					text: item.label,
					type: item.type,
					maxLength: item.maxLength,
					scale: item.scale,
					precision: item.precision,
					isDefault: item.isDefault,
					values: item.type === "boolean" ? this._getBooleanValues() : null
				}));
			}, this);
		}

		if (this._oSelectedRanges) {
			for (var rangeId in this._oSelectedRanges) {
				var rangeData = this._oSelectedRanges[rangeId];
				this._oFilterPanel.addFilterItem(new sap.m.P13nFilterItem({
					key: rangeId,
					exclude: rangeData.exclude,
					columnKey: rangeData.keyField,
					operation: rangeData.operation,
					value1: rangeData.value1,
					value2: rangeData.value2
				}));
			}
		}

		var oRangeFieldsGrid = new sap.ui.layout.Grid({
			width: "100%",
			defaultSpan: "L12 M12 S12",
			vSpacing: 0,
			hSpacing: 0,
			content: [
				this._oFilterPanel
			]
		});

		this._sValidationDialogTitle = this._oRb.getText("VALUEHELPVALDLG_TITLE");
		this._sValidationDialogMessage = this._oRb.getText("VALUEHELPVALDLG_MESSAGE");
		this._sValidationDialogFieldMessage = this._oRb.getText("VALUEHELPVALDLG_FIELDMESSAGE");

		return oRangeFieldsGrid;
	};

	ValueHelpDialog.prototype.suggest = function(fSuggestProviderCallback) {
		this._fSuggestCallback = fSuggestProviderCallback;

		if (this._oFilterPanel) {
			if (this._oFilterPanel._oIncludeFilterPanel) {
				this._oFilterPanel._oIncludeFilterPanel._fSuggestCallback = this._fSuggestCallback;
			}
			if (this._oFilterPanel._oExcludeFilterPanel) {
				this._oFilterPanel._oExcludeFilterPanel._fSuggestCallback = this._fSuggestCallback;
			}
		}
	};

	/**
	 * creates an array for boolean value representation (using the odata.type.Boolean) used on the selected control for boolean conditions.
	 *
	 * @returns {string[]} ["", "No", "Yes"]
	 */
	ValueHelpDialog.prototype._getBooleanValues = function() {
		jQuery.sap.require("sap.ui.model.odata.type.Boolean");
		var oBooleanType = new sap.ui.model.odata.type.Boolean();
		var aBooleanValues = null;
		if (oBooleanType) {
			aBooleanValues = [
				"", oBooleanType.formatValue(false, "string"), oBooleanType.formatValue(true, "string")
			];
		}

		return aBooleanValues;
	};

	/**
	 * converts a string value back into a real object.
	 *
	 * @private
	 * @param {string} sValue string representation of the value
	 * @param {string} sType supported type string, date, time or boolean
	 * @returns {string|date|float} Value as object
	 */
	ValueHelpDialog.prototype._convertValue2Object = function(sValue, sType) {
		if (!sValue) {
			return sValue;
		}

		var value = sValue;

		if (sType === "date") {
			value = new Date(sValue);
		}
		if (sType === "time") {
			value = new Date(sValue);
		}
		if (sType === "numeric") {
			value = parseFloat(sValue);
		}
		if (sType === "boolean") {
			if (sValue === "") {
				value = null;
			} else {
				value = sValue == 'true';
			}
		}

		return value;
	};

	/**
	 * returns the KeyField definition with the key sKey
	 *
	 * @param {string} sKey Key of the field
	 *
	 * @returns {object} Key field definition
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._getKeyFieldByKey = function(sKey) {
		var oCurrentKeyField;
		if (this._aRangeKeyFields) {
			// search the current KeyField
			this._aRangeKeyFields.some(function(keyField) {
				if (typeof keyField !== "string") {
					if (keyField.key === sKey) {
						oCurrentKeyField = keyField;
						return true;
					}
				}
				return false;
			});
		}
		return oCurrentKeyField;
	};

	/**
	 * Check if the entered/modified ranges are correct, marks invalid fields yellow (Warning state) and opens a popup message dialog to give the user
	 * the feedback that some values are wrong or missing.
	 *
	 * @private
	 * @param {function} fnCallback will be called when all ranges are valid or the user ignores the wrong/missing fields by pressing Ok on a message
	 *        dialog
	 * @param {function} fnCancelCallback will be called when ranges are invalid and the user press Cancel on a message dialog
	 */
	ValueHelpDialog.prototype._validateRanges = function(fnCallback, fnCancelCallback) {
		if (this._oRanges) {
			if (!this._oRanges.getParent()) {
				fnCallback();
				return;
			}

			// show warnings on invalid fields.
			var bIsIncludeRangesValid = this._oFilterPanel.validateConditions();

			if (!bIsIncludeRangesValid) {
				// open a simple confirm box
				MessageBox.show(this._sValidationDialogMessage, {
					icon: MessageBox.Icon.WARNING,
					title: this._sValidationDialogTitle,
					actions: [
						MessageBox.Action.OK, MessageBox.Action.CANCEL
					],
					styleClass: this.$().closest(".sapUiSizeCompact").length ? "sapUiSizeCompact" : "",
					onClose: function(sResult) {
						if (sResult === MessageBox.Action.OK && fnCallback) {
							fnCallback();
						}
						if (sResult === MessageBox.Action.CANCEL && fnCancelCallback) {
							fnCancelCallback();
						}
					}
				});
				return;
			}

		}

		fnCallback();
	};

	// ################################################################################
	// Start Selected Items handling
	// ################################################################################

	/**
	 * Setter for the singleRowCallback function.
	 *
	 * @param {function} fSingleRowCallback Callback function
	 * @private
	 * @deprecated
	 * @since 1.30
	 */
	ValueHelpDialog.prototype.setUpdateSingleRowCallback = function(fSingleRowCallback) {
		this.fSingleRowCallback = fSingleRowCallback;

		this._updateNavigationControl();
	};

	// ################################################################################
	// Start main Table handling
	// ################################################################################

	ValueHelpDialog.prototype._createDefaultTable = function() {
		if (!this._isPhone()) {
			sap.ui.getCore().loadLibrary("sap.ui.table");
			jQuery.sap.require("sap.ui.table.Table");

			this.setTable(new sap.ui.table.Table(), true);
		} else {
			this.setTable(new sap.m.Table(), true);
			this.TableStateSearchData();
		}
	};

	/**
	 * initialize the table instance
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._initializeTable = function() {

		if (sap.ui.table.Table && this._oTable instanceof sap.ui.table.Table) {

			this._oTable.setTitle(sap.ui.Device.system.desktop ? this._sTableTitleNoCount : null);
			if (this._bTableCreatedInternal) {
				this._oTable.setSelectionBehavior(sap.ui.table.SelectionBehavior.Row);
			}
			this._oTable.setSelectionMode(this.getSupportMultiselect() ? sap.ui.table.SelectionMode.MultiToggle : sap.ui.table.SelectionMode.Single);
			this._updateNoDataText(this._oRb.getText("VALUEHELPDLG_TABLE_PRESSSEARCH"));
			// initial we use Fixed mode to give the table the chance to render and calculate the correct height
			this._oTable.setVisibleRowCountMode(sap.ui.table.VisibleRowCountMode.Fixed);
			this._oTable.setMinAutoRowCount(sap.ui.Device.system.desktop ? 5 : 4);

			this._oTable.attachRowSelectionChange(function(oControlEvent) {
				if (this._bIgnoreSelectionChange || !oControlEvent.getParameter("userInteraction")) {
					return;
				}

				var eventArgs = {
					tableSelectionParams: oControlEvent.mParameters,
					updateTokens: [], // [{sKey, oRow, bSelect}, {}],
					useDefault: false
				};

				if (this._hasListeners("selectionChange")) {
					this._bIgnoreSelectionChange = true;
					this.fireSelectionChange(eventArgs);
					this._bIgnoreSelectionChange = false;

					// if (eventArgs.useDefault) {
					// sap.m.MessageToast.show("useDefault");
					// }

					eventArgs.updateTokens.forEach(function(currentValue) {
						this._addRemoveTokenByKey(currentValue.sKey, currentValue.oRow, currentValue.bSelected);
					}.bind(this));

				} else {
					eventArgs.useDefault = true;
				}

				if (eventArgs.useDefault) {
					// collect all the new selected or removed items
					var oTable = oControlEvent.getSource();
					var aIndices = oControlEvent.getParameter("rowIndices");
					var i, n = aIndices.length;
					var index;
					var oContext;
					var oRow;

					// check if we can select all items, if not we show an error dialog
					for (i = 0; i < n; i++) {
						index = aIndices[i];
						oContext = oTable.getContextByIndex(index);
						oRow = oContext ? oContext.getObject() : null;

						if (!oRow) {
							MessageBox.show(this._oRb.getText("VALUEHELPDLG_SELECTIONFAILED"), {
								icon: MessageBox.Icon.ERROR,
								title: this._oRb.getText("VALUEHELPDLG_SELECTIONFAILEDTITLE"),
								actions: [
									MessageBox.Action.OK
								],
								styleClass: this.$().closest(".sapUiSizeCompact").length ? "sapUiSizeCompact" : ""
							});
							return;
						}
					}

					var bUsePath = false;
					if (oTable.getBinding("rows").aKeys) {
						bUsePath = true;
					}

					for (i = 0; i < n; i++) {
						index = aIndices[i];
						oContext = oTable.getContextByIndex(index);
						oRow = oContext ? oContext.getObject() : null;

						if (oRow) {
							var sKey;
							if (bUsePath) {
								sKey = oContext.sPath.substring(1);
							} else {
								sKey = oRow[this.getKey()];
							}

							this._addRemoveTokenByKey(sKey, oRow, oTable.isIndexSelected(index));
						}
					}
				}

				this._updateTitles();

				if (!this.getSupportMultiselect()) {
					// in case of single select we fireOk and close the dialog 
					this._bIgnoreSelectionChange = true; // set to true, to avoid a double(second) click and deselect the item.
					this._onCloseAndTakeOverValues();
				}
			}.bind(this));

			this._oTable.addStyleClass("compVHMainTable");

			if (!(this._oTable.getParent() instanceof sap.ui.comp.smarttable.SmartTable)) { // && !(this._oTable instanceof
				// sap.ui.table.AnalyticalTable) && !(this._oTable
				// instanceof sap.ui.table.TreeTable)) {
				this._oTable.bindAggregation("columns", "columns>/cols", function(sId, oContext) {
					var ctrl, oTooltip;

					// Tooltip is only possible for certain (string) fields
					// ignore it for all types other than string!
					if (oContext.getProperty("type") === "string") {
						oTooltip = {
							path: oContext.getProperty("template")
						};
					}

					if (oContext.getProperty("type") === "boolean") {
						ctrl = new sap.m.CheckBox({
							enabled: false,
							selected: {
								path: oContext.getProperty("template")
							}
						});
					} else {
						ctrl = new sap.m.Text({
							wrapping: false,
							text: {
								path: oContext.getProperty("template"),
								type: oContext.getProperty("oType")
							},
							tooltip: oTooltip
						});
					}

					if (this._oTable instanceof sap.ui.table.AnalyticalTable) {
						return new sap.ui.table.AnalyticalColumn(sId, {
							label: "{columns>label}",
							tooltip: "{columns>tooltip}",
							template: ctrl,
							width: "{columns>width}",
							hAlign: ctrl instanceof sap.m.CheckBox ? sap.ui.core.HorizontalAlign.Center : sap.ui.core.HorizontalAlign.Begin,
							filterProperty: oContext.getProperty("filter")
						});

					} else {
						return new sap.ui.table.Column(sId, {
							label: "{columns>label}",
							tooltip: "{columns>tooltip}",
							template: ctrl,
							width: "{columns>width}",
							hAlign: ctrl instanceof sap.m.CheckBox ? sap.ui.core.HorizontalAlign.Center : sap.ui.core.HorizontalAlign.Begin,
							// sorting is removed at the moment
							sortProperty: oContext.getProperty("sort"),
							sorted: oContext.getProperty("sorted"),
							sortOrder: oContext.getProperty("sortOrder"),
							filterProperty: oContext.getProperty("filter")
						});
					}
				}.bind(this));
			}
		} else {

			this._oTable.setMode(this.getSupportMultiselect() ? sap.m.ListMode.MultiSelect : sap.m.ListMode.SingleSelectLeft);
			this._oTable.setGrowing(true);

			this._oTable.attachSelectionChange(function(oControlEvent) {
				if (this._bIgnoreSelectionChange) {
					return;
				}

				var eventParams = oControlEvent.mParameters;

				var eventArgs = {
					tableSelectionParams: oControlEvent.mParameters,
					updateTokens: [], // [{sKey, oRow, bSelect}, {}],
					useDefault: false
				};

				if (this._hasListeners("selectionChange")) {
					this._bIgnoreSelectionChange = true;
					this.fireSelectionChange(eventArgs);
					this._bIgnoreSelectionChange = false;

					// if (eventArgs.useDefault) {
					// sap.m.MessageToast.show("useDefault");
					// }

					eventArgs.updateTokens.forEach(function(currentValue) {
						this._addRemoveTokenByKey(currentValue.sKey, currentValue.oRow, currentValue.bSelected);
					}.bind(this));

				} else {
					eventArgs.useDefault = true;
				}

				if (eventArgs.useDefault) {
					var bSelected = eventParams.selected;
					var i, n = eventParams.listItems.length;

					for (i = 0; i < n; i++) {
						var oColListItem = eventParams.listItems[i];
						var oContext = oColListItem.getBindingContext();
						var oRow = oContext ? oContext.getObject() : null;

						if (oRow) {
							var sKey = oRow[this.getKey()];
							this._addRemoveTokenByKey(sKey, oRow, bSelected);
						}
					}
				}

				if (!this.getSupportMultiselect()) {
					// in case of single select we fireOk
					this._onCloseAndTakeOverValues();
				}
			}.bind(this));

			if (!(this._oTable.getParent() instanceof sap.ui.comp.smarttable.SmartTable)) { // this._bTableCreatedInternal) {
				this._oTable.bindAggregation("columns", "columns>/cols", function(sId, oContext) {
					var colLabel = oContext.getProperty("label");
					var bDemandPopin = this._oTable.getColumns().length >= 2;

					return new sap.m.Column({
						header: new sap.m.Label({
							text: colLabel
						}),
						demandPopin: bDemandPopin,
						// popinDisplay: sap.m.PopinDisplay.Inline,
						minScreenWidth: bDemandPopin ? (this._oTable.getColumns().length + 1) * 10 + "rem" : "1px"
					});
				}.bind(this));

				// this._oTable.bindAggregation("items", "/", jQuery.proxy(function(sId, oContext) {
				// var aCols = this._oTable.getModel("columns").getData().cols;
				//
				// return new sap.m.ColumnListItem({
				// cells: aCols.map(function (column) {
				// var colname = column.template;
				// return new sap.m.Label({ text: "{" + colname + "}" });
				// })
				// });
				// }, this));
			}
		}
	};

	ValueHelpDialog.prototype._addRemoveTokenByKey = function(sKey, oRow, bAdd) {
		sKey = decodeURIComponent(sKey); // key of the added or removed item must be decoded
		if (bAdd) {
			this._oSelectedItems.add(sKey, oRow);
			this._addToken2Tokenizer(sKey, this._getFormatedTokenText(sKey), this._oSelectedTokens);
		} else {
			this._oSelectedItems.remove(sKey);
			this._removeTokenFromTokenizer(sKey, this._oSelectedTokens);
		}
	};

	/**
	 * Handler for the Ok close handling. The function prepares the list of all selected items and token and fires the Ok event.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._onCloseAndTakeOverValues = function() {
		var that = this;

		var fnCallback = function() {
			var range;
			var aTokens = that._oSelectedItems.getSelectedItemsTokenArray(that.getKey(), that.getDescriptionKey(), that.getTokenDisplayBehaviour());

			if (that._oSelectedRanges) {
				var i = 0;
				// if the user has changed the ranges we return the new ranges from the selectedRanges
				for (var rangeId in that._oSelectedRanges) {
					range = that._oSelectedRanges[rangeId];
					var sTokenValue = range.tokenValue;
					if (!sTokenValue) {
						sTokenValue = that._getFormatedRangeTokenText(range.operation, range.value1, range.value2, range.exclude, range.keyField);
					}

					if (!range._oGrid || range._oGrid.select.getSelected()) {
						aTokens.push(new Token({
							key: "range_" + i,
							text: sTokenValue,
							tooltip: typeof sTokenValue === "string" ? sTokenValue : null
								// Token text must be of type string
						}).data("range", {
							"exclude": range.exclude,
							"operation": range.operation,
							"keyField": range.keyField,
							"value1": range.value1,
							"value2": range.value2
						}));

						i++;
					}
				}
			}

			that.fireOk({
				"tokens": aTokens
			});
		};

		this._validateRanges(fnCallback);
	};

	/**
	 * Handler for the cancel button. The function fires the Cancel event.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._onCancel = function() {
		this.fireCancel();
	};

	/**
	 * Handler for the Go button. Go button is used on Phone Device and calls the search of the integrated filterbar
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._onGo = function() {
		this._oFilterBar.search();
	};

	/**
	 * Handler for the Clear button. Clear button is used on Phone Device and calls the clear of the integrated filterbar.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._onClear = function() {
		this._oFilterBar.clear();
	};

	/**
	 * Update all titles (table and tokenizer).
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._updateTitles = function() {
		this._updateTableTitle();
		this._updateTokenizer();
	};

	/**
	 * Update the dialog title.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._updateDlgTitle = function() {
		var sMsgKey = "";
		var sMsg;

		if (this._oTitle) {

			if (this._oTabBar && !this._oTabBar.getVisible() && !this.getFilterMode()) {
				// title handling on a normal dialog (on Dekstop and Tablet) when the tabBar is not visible
				if (this._oTabBar.getSelectedKey() === sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_LIST_VIEW) {
					sMsgKey = "VALUEHELPDLG_TITLE";
				} else if (this._oTabBar.getSelectedKey() === sap.ui.comp.valuehelpdialog._ValueHelpViewMode.DESKTOP_CONDITIONS_VIEW) {
					if (this.getMaxIncludeRanges() === "1" && this.getMaxExcludeRanges() === "0") {
						sMsgKey = "VALUEHELPDLG_SINGLECONDITION_TITLE";
					} else {
						sMsgKey = "VALUEHELPDLG_RANGESTITLE";
					}
				}
			} else if (this._isPhone() && !this.getFilterMode()) {
				// on a phone we show the title which depends on the current viewmode
				switch (this._currentViewMode) {
					case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_MAIN_VIEW:
						sMsgKey = "";
						break;
					case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_LIST_VIEW:
						sMsgKey = "VALUEHELPDLG_ITEMSTABLE";
						break;
					case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_SEARCH_VIEW:
						sMsgKey = "VALUEHELPDLG_ADVANCEDSEARCH";
						break;
					case sap.ui.comp.valuehelpdialog._ValueHelpViewMode.PHONE_CONDITIONS_VIEW:
						if (this.getMaxIncludeRanges() === "1" && this.getMaxExcludeRanges() === "0") {
							sMsgKey = "VALUEHELPDLG_SINGLECONDITION_TITLE";
						} else {
							sMsgKey = "VALUEHELPDLG_RANGES";
						}
						break;
					default:
						break;
				}
			}

			if (!sMsg) {
				sMsg = this.getTitle();
			}

			if (sMsgKey) {
				sMsg = this._oRb.getText(sMsgKey, sMsg);
			}

			if (sMsg) {
				this._oTitle.setText(sMsg);
			}
		}
	};

	/**
	 * Update title of the main table.
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._updateTableTitle = function() {
		if (!this._oTable) {
			return;
		}
		var length = 0;
		this.oRows = this._oTable.getBinding("rows");
		var bSupportCount = false; // at the moment we do not support the Items Count in the table header
		if (bSupportCount && this.getModel() && this.getModel().isCountSupported) {
			bSupportCount = this.getModel().isCountSupported();
		}

		if (bSupportCount) {
			if (this.oRows) {
				length = this.oRows.getLength();
			}
			this._setTableTitle(this._sTableTitle1.replace("{0}", length));
		} else {
			this._setTableTitle(this._sTableTitleNoCount);
		}
	};

	/**
	 * Setting the title of the table will remove the focus on a table cell. Because of this we check if the Title control exist and set the Text of
	 * the title instead.
	 *
	 * @param {string} sTitle Title text for the table
	 *
	 * @private
	 */
	ValueHelpDialog.prototype._setTableTitle = function(sTitle) {
		if (sap.ui.Device.system.desktop && !(this._oTable instanceof sap.m.Table)) {
			if (this._oTable.getTitle()) {
				this._oTable.getTitle().setText(sTitle);
			} else {
				this._oTable.setTitle(sTitle);
			}
		}
	};

	ValueHelpDialog.prototype.onAfterRendering = function() {
		Dialog.prototype.onAfterRendering.apply(this);

		if (this._oTable) {
			this._updateTitles();
		}

		if (!this._isPhone() && this.getContentHeight() === "") {
			if (this.getSupportRangesOnly() && (this.getMaxExcludeRanges() === "-1" || this.getMaxIncludeRanges() === "-1")) { //} && this._oSelectedTokens.getTokens().length <= 2) {
				// in case of a conditions only with multiple condition rows we give the dialog a height of 70%
				this.setContentHeight("70%");
			} else {
				// if the content height is not set we fetch the current clientHeight from the ScrollContainer and set it as fixed height
				var oResizeDomRef = this.getDomRef("scroll");
				var _iResizeDomHeight = oResizeDomRef.clientHeight;
				this.setContentHeight(_iResizeDomHeight + "px");
			}
			// correct the minRowCount
			if (sap.ui.table.Table && this._oTable && this._oTable instanceof sap.ui.table.Table) {
				this._oTable.setVisibleRowCountMode(sap.ui.table.VisibleRowCountMode.Auto);
			}
		}
	};

	// Overwriting the Dialog._getDialogOffset function. In our case we will return some other left and top margin values!
	ValueHelpDialog.prototype._getDialogOffset = function(windowWidth) {
		var iWindowWidth = windowWidth || this._$Window.width();
		var screenSizes = {
			small: 600,
			large: 1024
		};
		var remToPixelMargin = function(rem) {
			var iRemInPx = parseInt(window.getComputedStyle(document.body).fontSize, 10);
			return (rem * iRemInPx) * 2;
		};
		var rem = 1;

		if (iWindowWidth > screenSizes.small && iWindowWidth < screenSizes.large) {
			rem = 2;
		} else if (iWindowWidth >= screenSizes.large) {
			rem = 2;
		}

		return {
			top: remToPixelMargin(rem),
			left: remToPixelMargin(rem)
		};
	};

	ValueHelpDialog.prototype.exit = function() {

		var destroyHelper = function(o) {
			if (o && o.destroy) {
				o.destroy();
			}
			return null;
		};

		this._oTokenizerGrid = destroyHelper(this._oTokenizerGrid);
		this._oRanges = destroyHelper(this._oRanges);
		this._oFilterPanel = destroyHelper(this._oFilterPanel);
		if (this._bTableCreatedInternal) {
			this._oTable = destroyHelper(this._oTable);
		}
		this._oTable = null;
		this.theTable = null;

		this._oTabBar = destroyHelper(this._oTabBar);
		this._oMainListMenu = destroyHelper(this._oMainListMenu);
		this._oVBox = destroyHelper(this._oVBox);
		this._oVarManagment = destroyHelper(this._oVarManagment);

		this._aRangeKeyFields = destroyHelper(this._aRangeKeyFields);
		this._aIncludeRangeOperations = destroyHelper(this._aIncludeRangeOperations);
		this._aExcludeRangeOperations = destroyHelper(this._aExcludeRangeOperations);

		if (this._oFilterBar) {
			this._oFilterBar.detachInitialise(this._handleFilterBarInitialize);
			this._oFilterBar = destroyHelper(this._oFilterBar);
		}

		this._oRb = destroyHelper(this._oRb);
		this._sTableTitle1 = destroyHelper(this._sTableTitle1);
		this._sTableTitle2 = destroyHelper(this._sTableTitle2);
		this._sTableTitleNoCount = destroyHelper(this._sTableTitleNoCount);

		this._sValidationDialogTitle = destroyHelper(this._sValidationDialogTitle);
		this._sValidationDialogMessage = destroyHelper(this._sValidationDialogMessage);
		this._sValidationDialogFieldMessage = destroyHelper(this._sValidationDialogFieldMessage);

		this._oSelectedItems = destroyHelper(this._oSelectedItems);
		this._oSelectedRanges = destroyHelper(this._oSelectedRanges);

		this._oButtonOk = destroyHelper(this._oButtonOk);
		this._oButtonCancel = destroyHelper(this._oButtonCancel);
		if (this._oButtonGo) {
			this._oButtonGo = destroyHelper(this._oButtonGo);
		}
		if (this._oButtonClear) {
			this._oButtonClear = destroyHelper(this._oButtonClear);
		}
		if (this._oColSearchBox) {
			this._oColSearchBox = destroyHelper(this._oColSearchBox);
		}
	};

	/**
	 * Sets a RangeKeyFields array. This method allows you to specify the KeyFields for the ranges. You can set an array of objects with Key and Label
	 * properties to define the key fields.
	 *
	 * @public
	 * @since 1.24
	 * @param {object[]} aRangeKeyFields An array of range KeyFields
	 *        <code>[{key: "CompanyCode", label: "ID"}, {key:"CompanyName", label : "Name"}]</code>
	 */
	ValueHelpDialog.prototype.setRangeKeyFields = function(aRangeKeyFields) {
		this._aRangeKeyFields = aRangeKeyFields;
	};

	ValueHelpDialog.prototype.getRangeKeyFields = function() {
		return this._aRangeKeyFields;
	};

	/**
	 * Sets the array for the supported include range operations.
	 *
	 * @public
	 * @since 1.24
	 * @param {sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation[]} aOperation An array of range operations
	 * @param {string} sType the type for which the operations are defined
	 */
	ValueHelpDialog.prototype.setIncludeRangeOperations = function(aOperation, sType) {
		sType = sType || "default";
		this._aIncludeRangeOperations[sType] = aOperation;

		if (this._oFilterPanel) {
			this._oFilterPanel.setIncludeOperations(this._aIncludeRangeOperations[sType], sType);
		}
	};

	/**
	 * Sets the array for the supported exclude range operations.
	 *
	 * @public
	 * @since 1.24
	 * @param {sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation[]} aOperation An array of range operations
	 * @param {string} sType the type for which the operations are defined
	 */
	ValueHelpDialog.prototype.setExcludeRangeOperations = function(aOperation, sType) {
		sType = sType || "default";
		this._aExcludeRangeOperations[sType] = aOperation;

		if (this._oFilterPanel) {
			this._oFilterPanel.setExcludeOperations(this._aExcludeRangeOperations[sType], sType);
		}
	};

	/**
	 * Creates and returns the token text for the selected item.
	 *
	 * @private
	 * @param {string} sKey the key of the selectedItems item
	 * @returns {string} the token text for the selected items with the sKey
	 */
	ValueHelpDialog.prototype._getFormatedTokenText = function(sKey) {
		var oItem = this._oSelectedItems.getItem(sKey);
		var sTokenText = oItem[this.getDescriptionKey()];
		var sDisplayKey = oItem[this.getKey()];
		if (sTokenText === undefined) {
			if (typeof oItem === "string") {
				sTokenText = oItem;
			} else {
				sTokenText = sKey;
			}
		} else {
			sTokenText = FormatUtil.getFormattedExpressionFromDisplayBehaviour(this.getTokenDisplayBehaviour() ? this.getTokenDisplayBehaviour() : sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionAndId, sDisplayKey, sTokenText);
		}

		return sTokenText;
	};

	/**
	 * Creates and returns the token text for a range.
	 *
	 * @private
	 * @param {string} sOperation the operation type sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation
	 * @param {string} sValue1 text of the first range field
	 * @param {string} sValue2 text of the seoncd range field
	 * @param {boolean} bExclude indicates if the range is a Exclude range
	 * @param {string} sKeyField id
	 * @returns {string} the range token text
	 */
	ValueHelpDialog.prototype._getFormatedRangeTokenText = function(sOperation, sValue1, sValue2, bExclude, sKeyField) {
		var sTokenText = "";
		var oFormatter;
		var oCurrentKeyField = this._getKeyFieldByKey(sKeyField);

		if (oCurrentKeyField) {
			switch (oCurrentKeyField.type) {
				case "numeric":
					var oFloatFormatOptions;
					if (oCurrentKeyField.precision || oCurrentKeyField.scale) {
						oFloatFormatOptions = {};
						if (oCurrentKeyField.precision) {
							oFloatFormatOptions["maxIntegerDigits"] = parseInt(oCurrentKeyField.precision, 10);
						}
						if (oCurrentKeyField.scale) {
							oFloatFormatOptions["maxFractionDigits"] = parseInt(oCurrentKeyField.scale, 10);
						}
					}
					oFormatter = NumberFormat.getFloatInstance(oFloatFormatOptions);
					break;
				case "date":
					oFormatter = DateFormat.getDateInstance();
					sValue1 = new Date(sValue1);
					sValue2 = new Date(sValue2);
					break;
				case "time":
					oFormatter = DateFormat.getTimeInstance();
					sValue1 = new Date(sValue1);
					sValue2 = new Date(sValue2);
					break;
				case "boolean":
					var aBooleanValues = this._getBooleanValues();
					sValue1 = aBooleanValues[sValue1 ? 2 : 1];
					sValue2 = aBooleanValues[sValue2 ? 2 : 1];
					break;
				default:
					break;
			}

			if (oFormatter) {
				if (sValue1) {
					sValue1 = oFormatter.format(sValue1);
				}
				if (sValue2) {
					sValue2 = oFormatter.format(sValue2);
				}
			}
		}

		if (sValue1 !== "") {
			switch (sOperation) {
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Initial:
					sTokenText = "=''";
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ:
					sTokenText = "=" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GT:
					sTokenText = ">" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GE:
					sTokenText = ">=" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LT:
					sTokenText = "<" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LE:
					sTokenText = "<=" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains:
					sTokenText = "*" + sValue1 + "*";
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith:
					sTokenText = sValue1 + "*";
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith:
					sTokenText = "*" + sValue1;
					break;

				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT:
					if (sValue2 !== "") {
						sTokenText = sValue1 + "..." + sValue2;
						break;
					}
					break;
				default:
					break;
			}

		}

		if (bExclude && sTokenText !== "") {
			sTokenText = "!(" + sTokenText + ")";
		}

		if (this._aRangeKeyFields && this._aRangeKeyFields.length > 1 && oCurrentKeyField && oCurrentKeyField.label && sTokenText !== "") {
			sTokenText = oCurrentKeyField.label + ": " + sTokenText;
		}

		return sTokenText;
	};

	ValueHelpDialog.prototype._isPhone = function() {
		return sap.ui.Device.system.phone;
	};

	ValueHelpDialog.prototype._hasListeners = function(sEventName) {
		if (this._bTableCreatedInternal) {
			return false;
		}

		return this.hasListeners(sEventName);
	};

	ValueHelpDialog.prototype._rotateSelectionButtonIcon = function(bFlag) {
		if (!sap.ui.Device.system.phone) {
			//var oCtrl = this.oSelectionButton;
			var oCtrl = sap.ui.getCore().byId(this.oSelectionButton.$("img")[0].id);

			if (bFlag) {
				oCtrl.addStyleClass("sapUiVHImageExpand");
			} else {
				oCtrl.removeStyleClass("sapUiVHImageExpand");
			}
		}
	};

	/**
	 * The range operations supported by the <code>ValueHelpDialog</code> control.
	 *
	 * @enum {string}
	 * @public
	 */
	sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation = {
		/**
		 * The Between operation for the ranges.
		 *
		 * @public
		 */
		BT: "BT",
		/**
		 * The Equals operation for the ranges.
		 *
		 * @public
		 */
		EQ: "EQ",
		/**
		 * The Contains operation for the ranges.
		 *
		 * @public
		 */
		Contains: "Contains",
		/**
		 * The StartsWith operation for the ranges.
		 *
		 * @public
		 */
		StartsWith: "StartsWith",
		/**
		 * The EndsWith operation for the ranges.
		 *
		 * @public
		 */
		EndsWith: "EndsWith",
		/**
		 * The Less operation for the ranges.
		 *
		 * @public
		 */
		LT: "LT",
		/**
		 * The Less or equals operation for the ranges.
		 *
		 * @public
		 */
		LE: "LE",
		/**
		 * The Greater operation for the ranges.
		 *
		 * @public
		 */
		GT: "GT",
		/**
		 * The Between or equals operation for the ranges.
		 *
		 * @public
		 */
		GE: "GE",
		/**
		 * The Initial operation for the ranges.
		 *
		 * @private
		 */
		Initial: "Initial"
	};

	sap.ui.comp.valuehelpdialog._ValueHelpViewMode = {
		DESKTOP_LIST_VIEW: "DESKTOP_LIST_VIEW",
		DESKTOP_CONDITIONS_VIEW: "DESKTOP_CONDITIONS_VIEW",
		PHONE_MAIN_VIEW: "PHONE_MAIN_VIEW",
		PHONE_SEARCH_VIEW: "PHONE_SEARCH_VIEW",
		PHONE_LIST_VIEW: "PHONE_LIST_VIEW",
		PHONE_CONDITIONS_VIEW: "PHONE_CONDITIONS_VIEW"
	};

	return ValueHelpDialog;

}, /* bExport= */ true);
}; // end of sap/ui/comp/valuehelpdialog/ValueHelpDialog.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.EditableVariantItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.variants.EditableVariantItem.
jQuery.sap.declare('sap.ui.comp.variants.EditableVariantItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ColumnListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.ColumnListItemRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/EditableVariantItem",[
	'jquery.sap.global', 'sap/m/ColumnListItem', 'sap/m/ColumnListItemRenderer', 'sap/ui/comp/library'
], function(jQuery, ColumnListItem, ColumnListItemRenderer, library) {
	"use strict";

	/**
	 * Constructor for a new variants/EditableVariantItem.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The EditableVariantItem class describes an editable variant list item for the Manage Variants popup.
	 * @extends sap.m.ColumnListItem
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.variants.EditableVariantItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var EditableVariantItem = ColumnListItem.extend("sap.ui.comp.variants.EditableVariantItem", /** @lends sap.ui.comp.variants.EditableVariantItem.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Key of the List Item
				 * 
				 * @since 1.22.0
				 */
				key: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Indicator if a variant is visible for all users.
				 * 
				 * @since 1.26.0
				 */
				global: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * ABAP Package the variant is assigned. Used for transport functionality
				 * 
				 * @since 1.26.0
				 */
				lifecyclePackage: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Identifier of the transport object the variant is assigned to.
				 * 
				 * @since 1.26.0
				 */
				lifecycleTransportId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Variant namespace
				 * 
				 * @since 1.26.0
				 */
				namespace: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Indication if variant can be changed
				 * 
				 * @since 1.26.0
				 */
				readOnly: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Flags for a variant to indicate why it might be read-only
				 * 
				 * @since 1.26.0
				 * @deprecated Since version 1.28.0. Replaced by property <code>labelReadOnly</code>
				 */
				accessOptions: {
					type: "string",
					group: "Misc",
					defaultValue: null,
					deprecated: true
				},

				/**
				 * Indicates if the variant label can be changed
				 * 
				 * @since 1.28.0
				 */
				labelReadOnly: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Author of the variant
				 * 
				 * @since 1.38.0
				 */
				author: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Indicates if favorites can be created.
				 * 
				 * @since 1.50.0
				 */
				favorite: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			}
		},
		renderer: ColumnListItemRenderer.render
	});

	return EditableVariantItem;

}, /* bExport= */true);

}; // end of sap/ui/comp/variants/EditableVariantItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.VariantItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.variants.VariantItem.
jQuery.sap.declare('sap.ui.comp.variants.VariantItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/VariantItem",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Item'
], function(jQuery, library, Item) {
	"use strict";

	/**
	 * Constructor for a new variants/VariantItem.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The VariantItem class describes a variant item.
	 * @extends sap.ui.core.Item
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.variants.VariantItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var VariantItem = Item.extend("sap.ui.comp.variants.VariantItem", /** @lends sap.ui.comp.variants.VariantItem.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Attribute for usage in <code>SmartFilterBar</code>
				 * 
				 * @since 1.26.0
				 */
				executeOnSelection: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * If set to <code>false</code>, the user is allowed to change the item's data
				 * 
				 * @since 1.26.0
				 */
				readOnly: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Identifier of the transport object the variant is assigned to.
				 * 
				 * @since 1.26.0
				 */
				lifecycleTransportId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Indicator if a variant is visible for all users.
				 * 
				 * @since 1.26.0
				 */
				global: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * ABAP package the variant is assigned to. Used for transport functionality.
				 * 
				 * @since 1.26.0
				 */
				lifecyclePackage: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Variant namespace
				 * 
				 * @since 1.26.0
				 */
				namespace: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Flags for a variant to indicate why it might be read-only.
				 * 
				 * @since 1.26.0
				 * @deprecated Since version 1.28.0. Replaced by property <code>labelReadOnly</code>
				 */
				accessOptions: {
					type: "string",
					group: "Misc",
					defaultValue: null,
					deprecated: true
				},

				/**
				 * Indicates if the variant title can be changed.
				 * 
				 * @since 1.26.0
				 */
				labelReadOnly: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Author of the variant
				 * 
				 * @since 1.38.0
				 */
				author: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Indicates if favorites can be created.
				 * 
				 * @since 1.50.0
				 */
				favorite: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			}
		}
	// , renderer: ItemRenderer.render
	});

	return VariantItem;

}, /* bExport= */true);

}; // end of sap/ui/comp/variants/VariantItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.VariantManagement.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.variants.VariantManagement control.
jQuery.sap.declare('sap.ui.comp.variants.VariantManagement.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/variants/VariantManagement.designtime",[], function() {
	"use strict";
	return {
		annotations: {},
		properties: {
			initialSelectionKey: {
				ignore: true
			},
			enabled: {
				ignore: false
			},
			defaultVariantKey: {
				ignore: false
			},
			selectionKey: {
				ignore: true
			},
			showCreateTile: {
				ignore: true
			},
			showExecuteOnSelection: {
				ignore: false
			},
			showShare: {
				ignore: false
			},
			showSetAsDefault: {
				ignore: false
			},
			lifecycleSupport: {
				ignore: true
			},
			standardItemText: {
				ignore: false
			},
			industrySolutionMode: {
				ignore: true
			},
			useFavorites: {
				ignore: false
			}
		},
		customData: {}
	};
}, /* bExport= */false);

}; // end of sap/ui/comp/variants/VariantManagement.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.variants.VariantManagement') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.variants.VariantManagement.
jQuery.sap.declare('sap.ui.comp.variants.VariantManagement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.RadioButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.m.ScreenSize'); // unlisted dependency retained
jQuery.sap.require('sap.m.PopinDisplay'); // unlisted dependency retained
jQuery.sap.require('sap.m.Column'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Bar'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Page'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.ActionSheet'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.ResponsivePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.SelectList'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.InvisibleText'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.VerticalAlign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/variants/VariantManagement",[
	'jquery.sap.global', 'sap/ui/Device', 'sap/ui/model/json/JSONModel', 'sap/m/SearchField', 'sap/m/RadioButton', 'sap/ui/core/TextAlign', 'sap/m/ScreenSize', 'sap/m/PopinDisplay', 'sap/m/Column', 'sap/m/Text', 'sap/m/Bar', 'sap/m/Table', 'sap/m/Page', 'sap/m/PlacementType', 'sap/m/ButtonType', 'sap/m/Toolbar', 'sap/m/ToolbarSpacer', 'sap/m/ActionSheet', 'sap/m/Button', 'sap/m/CheckBox', 'sap/m/Dialog', 'sap/m/Input', 'sap/m/Label', 'sap/m/ResponsivePopover', 'sap/m/SelectList', 'sap/m/ObjectIdentifier', 'sap/ui/comp/library', './EditableVariantItem', './VariantItem', 'sap/ui/core/InvisibleText', 'sap/ui/core/Control', 'sap/ui/core/Item', 'sap/ui/core/ValueState', 'sap/ui/core/VerticalAlign', 'sap/ui/layout/HorizontalLayout', 'sap/ui/layout/Grid'
], function(jQuery, Device, JSONModel, SearchField, RadioButton, TextAlign, ScreenSize, PopinDisplay, Column, Text, Bar, Table, Page, PlacementType, ButtonType, Toolbar, ToolbarSpacer, ActionSheet, Button, CheckBox, Dialog, Input, Label, ResponsivePopover, SelectList, ObjectIdentifier, library, EditableVariantItem, VariantItem, InvisibleText, Control, Item, ValueState, VerticalAlign, HorizontalLayout, Grid) {
	"use strict";

	/**
	 * Constructor for a new VariantManagement.
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The VariantManagement control can be used to manage variants, such as filter bar variants or table variants.
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.variants.VariantManagement
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var VariantManagement = Control.extend("sap.ui.comp.variants.VariantManagement", /** @lends sap.ui.comp.variants.VariantManagement.prototype */
	{
		metadata: {
			library: "sap.ui.comp",
			designTime: true,
			properties: {

				/**
				 * Enables the setting of the initially selected variant.
				 * @since 1.22.0
				 */
				initialSelectionKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Can be set to true or false depending on whether you want to enable or disable the control.
				 * @since 1.22.0
				 */
				enabled: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Provides a string value to set the default variant. Used for the save dialog. Has no effect on the selected variant.
				 * @since 1.22.0
				 */
				defaultVariantKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The key of the currently selected item. Returns null if the default item list is selected.
				 * @since 1.24.0
				 */
				selectionKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Indicates that a Create Tile is visible in the Create dialog.
				 * @since 1.26.0
				 */
				showCreateTile: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Indicates that Execute on Selection is visible in the Save Variant and the Manage Variants dialogs.
				 * @since 1.26.0
				 */
				showExecuteOnSelection: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Indicates that Share is visible in the Save Variant and the Manage Variants dialogs. Share allows you to share variants with other
				 * users.
				 * @since 1.26.0
				 */
				showShare: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Indicates that set as default is visible in the Save Variant and the Manage Variants dialogs.
				 * @since 1.44.0
				 */
				showSetAsDefault: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Enables the lifecycle support. If set to true, the VariantManagement control handles the transport information for shared variants.
				 * @since 1.26.0
				 */
				lifecycleSupport: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Overwrites the default Standard variant title.
				 * @since 1.28.0
				 */
				standardItemText: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to<code>true</code>, the scenario is an industry-specific solution. This flag is only used internally in the app variant
				 * scenarios.
				 * @since 1.32.0
				 */
				industrySolutionMode: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Indicates that the 'Favorites' feature is used. Only variants marked as favorites will be displayed in the variant list.
				 * @since 1.50.0
				 */
				useFavorites: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}

			},
			defaultAggregation: "items",
			aggregations: {

				/**
				 * Items displayed by the <code>VariantManagement</code> control.
				 * @since 1.22.0
				 * @deprecated Since version 1.26.0. Replaced by association <code>variantItems</code>
				 */
				items: {
					type: "sap.ui.core.Item",
					multiple: true,
					singularName: "item",
					deprecated: true
				},

				/**
				 * Variant items displayed by the <code>VariantManagement</code> control.
				 * @since 1.26.0
				 */
				variantItems: {
					type: "sap.ui.comp.variants.VariantItem",
					multiple: true,
					singularName: "variantItem"
				}
			},
			events: {

				/**
				 * This event is fired when the Save Variant dialog is closed with OK for a variant.
				 * @since 1.22.0
				 */
				save: {
					parameters: {
						/**
						 * The variant title
						 */
						name: {
							type: "string"
						},

						/**
						 * Indicates if an existing variant is overwritten or if a new variant is created
						 */
						overwrite: {
							type: "boolean"
						},

						/**
						 * The variant key
						 */
						key: {
							type: "string"
						},

						/**
						 * The Execute on Selection indicator
						 */
						exe: {
							type: "boolean"
						},

						/**
						 * The default variant indicator
						 */
						def: {
							type: "boolean"
						},

						/**
						 * The shared variant indicator
						 */
						global: {
							type: "boolean"
						},

						/**
						 * The package name
						 */
						lifecyclePackage: {
							type: "string"
						},

						/**
						 * The transport ID
						 */
						lifecycleTransportId: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired when users apply changes to variants in the Manage Variants dialog.
				 * @since 1.22.0
				 */
				manage: {
					parameters: {
						/**
						 * List of changed variant keys
						 */
						renamed: {
							type: "string[]"
						},

						/**
						 * List of deleted variant keys
						 */
						deleted: {
							type: "string[]"
						},

						/**
						 * List of variant keys and the associated Execute on Selection indicator
						 */
						exe: {
							type: "object[]"
						},

						/**
						 * The default variant key
						 */
						def: {
							type: "boolean"
						}
					}
				},

				/**
				 * This event is fired when a new variant is selected.
				 * @since 1.22.0
				 */
				select: {
					parameters: {
						/**
						 * The variant key
						 */
						key: {
							type: "string"
						}
					}
				}
			}
		},
		/**
		 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
		 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
		 */
		renderer: function(oRm, oControl) {
			oRm.write("<div ");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUiCompVarMngmt");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl.oVariantLayout);
			oRm.write("</div>");
		}
	});

	VariantManagement.STANDARD_NAME = sap.ui.comp.STANDARD_VARIANT_NAME;
	VariantManagement.MAX_NAME_LEN = 100;

	VariantManagement.FAV_COLUMN = 0;
	VariantManagement.NAME_COLUMN = 1;
	VariantManagement.SHARE_COLUMN = 2;
	VariantManagement.DEF_COLUMN = 3;
	VariantManagement.EXEC_COLUMN = 4;
	VariantManagement.AUTHOR_COLUMN = 5;

	/**
	 * Constructs and initializes the VariantManagement control.
	 */
	VariantManagement.prototype.init = function() {
		var that = this;

		this.STANDARDVARIANTKEY = "*standard*";
		this.setStandardVariantKey(this.STANDARDVARIANTKEY);
		this.aRemovedVariants = [];
		this.aRenamedVariants = [];
		this.aRemovedVariantTransports = [];
		this.aExeVariants = [];
		this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		this.lastSelectedVariantKey = this._sStandardVariantKey;
		this.bVariantItemMode = false;
		this.oSelectedItem = null;
		this.sNewDefaultKey = "";
		this.bManagementTableInitialized = false;
		this.sTransport = null;
		this.sPackage = null;
		this.aEvents = [];
		this.bEventRunning = false;
		this.oVariantSelectionPage = null;
		this.oActions = null;
		this.oActionSheet = null;
		this.oActionSheetManage = null;
		this.oActionSheetSave = null;
		this.oActionSheetSaveAs = null;
		this.bManualVariantKey = false;
		this.bFireSelect = false;
		this.bExecuteOnSelectForStandardViaXML = false;
		this.bExecuteOnSelectForStandardByUser = null;
		this.bSupportExecuteOnSelectOnSandardVariant = false;
		this._bInnerControlsCreated = false;

		this._isVendorLayer = false;

		this.oModel = new JSONModel({
			enabled: false,
			selectedVariant: ""
		});
		this.setModel(this.oModel, "save_enablement");

		this.oVariantInvisbletext = new InvisibleText({
			text: {
				parts: [
					{
						path: 'save_enablement>/selectedVariant'
					}, {
						path: 'save_enablement>/enabled'
					}
				],
				formatter: function(sText, bValue) {
					if (bValue) {
						sText = that.oResourceBundle.getText("VARIANT_MANAGEMENT_MODIFIED", [
							sText
						]);
					}
					return sText;
				}
			}
		});

		this.oVariantText = new Label(this.getId() + "-text", {
			text: "{save_enablement>/selectedVariant}"
		});
		this._setStandardText();
		this.oVariantText.addStyleClass("sapUICompVarMngmtText");
		this.oVariantText.addStyleClass("sapMH4Style");

		if (Device.system.phone) {
			this.oVariantText.addStyleClass("sapUICompVarMngmtTextMaxWidth");
		}

		this.oVariantModifiedText = new Label(this.getId() + "-modified", {
			visible: "{save_enablement>/enabled}"
		});
		this.oVariantModifiedText.setText("*");
		this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtText");

		// FIORITECHP1-3557
		this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtModified");
		this.oVariantModifiedText.addStyleClass("sapMH4Style");

		this.oVariantPopoverTrigger = new Button(this.getId() + "-trigger", {
			type: ButtonType.Transparent,
			icon: "sap-icon://arrow-down",
			press: function() {
				that._openVariantSelection();
			},
			tooltip: this.oResourceBundle.getText("VARIANT_MANAGEMENT_TRIGGER_TT")
		});

		this.oVariantPopoverTrigger.addStyleClass("sapUICompVarMngmtTriggerBtn");

		this.oVariantPopoverTrigger.addAriaLabelledBy(this.oVariantInvisbletext);
		this.oVariantLayout = new HorizontalLayout({
			content: [
				this.oVariantText, this.oVariantModifiedText, this.oVariantPopoverTrigger, this.oVariantInvisbletext
			]
		});
		this.oVariantLayout.addStyleClass("sapUICompVarMngmtLayout");
		this.addDependent(this.oVariantLayout);
	};

	VariantManagement.prototype._columnVisibilityManagementTable = function(nIdx, bFlag) {

		if (!this.bManagementTableInitialized) {
			return;
		}

		if (this.oManagementTable) {
			var aColumns = this.oManagementTable.getColumns();
			if (aColumns && aColumns.length >= nIdx) {
				aColumns[nIdx].setVisible(bFlag);
			}
		}
	};

	VariantManagement.prototype.setUseFavorites = function(bFlag) {
		this.setProperty("useFavorites", bFlag);

		this._columnVisibilityManagementTable(VariantManagement.FAV_COLUMN, bFlag);
	};

	VariantManagement.prototype.setShowShare = function(bFlag) {
		this.setProperty("showShare", bFlag);

		this._columnVisibilityManagementTable(VariantManagement.SHARE_COLUMN, bFlag);
	};

	VariantManagement.prototype.setShowSetAsDefault = function(bFlag) {
		this.setProperty("showSetAsDefault", bFlag);

		this._columnVisibilityManagementTable(VariantManagement.DEF_COLUMN, bFlag);
	};

	VariantManagement.prototype.setShowExecuteOnSelection = function(bFlag) {
		this.setProperty("showExecuteOnSelection", bFlag);

		this._columnVisibilityManagementTable(VariantManagement.EXEC_COLUMN, bFlag);
	};

	VariantManagement.prototype.setStandardItemText = function(sName) {
		this.setProperty("standardItemText", sName);

		var oItem = this._getSelectedItem();
		if (!oItem || (oItem.getKey() === this.getStandardVariantKey())) {
			this.oModel.setProperty("/selectedVariant", sName);
		}

	};

	// FIORITECHP1-3554
	VariantManagement.prototype._setTriggerButtonIcon = function(bFlag) {
		var oIcon;

		if (!Device.system.phone) {

			oIcon = sap.ui.getCore().byId(this.oVariantPopoverTrigger.$("img")[0].id);
			if (oIcon) {
				oIcon.toggleStyleClass("sapUiCompVarMngmtImageExpand");
			}
		}
	};

	VariantManagement.prototype._triggerSave = function() {
		var oEvent = this._createEvent("variantSaveAs", this._handleVariantSaveAs);
		this._addEvent(oEvent);
	};

	VariantManagement.prototype._checkVariantNameConstraints = function(oInputField, oSaveButton, oManagementTable) {

		if (!oInputField) {
			return;
		}

		var sValue = oInputField.getValue();
		sValue = sValue.trim();

		if (!this._checkIsDuplicate(oInputField, sValue, this.oManagementTable)) {

			if (sValue === "") {
				oInputField.setValueState(ValueState.Error);
				oInputField.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
			} else if (sValue.length > VariantManagement.MAX_NAME_LEN) {
				oInputField.setValueState(ValueState.Error);
				oInputField.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_MAX_LEN", [
					VariantManagement.MAX_NAME_LEN
				]));
			} else {
				oInputField.setValueState(ValueState.None);
				oInputField.setValueStateText(null);
			}
		}

		if (oSaveButton) {

			if (oInputField.getValueState() !== ValueState.Error) {
				this._checkIsDuplicate(oInputField, sValue, oManagementTable);
			}

			if ((oInputField.getValueState() === ValueState.Error) || this._anyInErrorState(oManagementTable)) {
				oSaveButton.setEnabled(false);
			} else {
				oSaveButton.setEnabled(true);
			}
		}
	};

	VariantManagement.prototype._anyInErrorState = function(oManagementTable, oInputField) {
		var oItems, oInput, i;

		if (oManagementTable) { //
			oItems = oManagementTable.getItems();
			if (oItems) {
				for (i = 0; i < oItems.length; i++) {
					oInput = oItems[i].getCells()[VariantManagement.NAME_COLUMN];

					if (oInputField && (oInputField === oInput)) {
						continue;
					}

					if (oInput && oInput.getValueState && (oInput.getValueState() === ValueState.Error)) {
						if (this._checkIsDuplicate(oInput, oInput.getValue(), oManagementTable)) {
							return true;
						}
					}
				}
			}
		}

		return false;
	};

	VariantManagement.prototype._checkIsDuplicate = function(oInputField, sValue, oManagementTable) {

		var bFlag = this._isDuplicate(oInputField, sValue, oManagementTable);

		if (bFlag) {
			oInputField.setValueState(ValueState.Error);
			oInputField.setValueStateText(this.oResourceBundle.getText(sValue ? "VARIANT_MANAGEMENT_ERROR_DUPLICATE" : "VARIANT_MANAGEMENT_ERROR_EMPTY"));
		} else {
			oInputField.setValueState(ValueState.None);
			oInputField.setValueStateText(null);
		}

		return bFlag;
	};

	VariantManagement.prototype._isDuplicate = function(oInputField, sValue, oManagementTable) {
		if (oManagementTable) {
			return this._isDuplicateManaged(oInputField, sValue, oManagementTable);
		} else {
			return this._isDuplicateSaveAs(sValue);
		}
	};

	VariantManagement.prototype._isDuplicateManaged = function(oInputField, sValue, oManagementTable) {
		var oItems, oInput, i;

		if (oManagementTable) { //
			oItems = oManagementTable.getItems();
			if (oItems && (oItems.length > 0)) {
				for (i = 0; i < oItems.length; i++) {
					oInput = oItems[i].getCells()[VariantManagement.NAME_COLUMN];

					if (oInput === oInputField) {
						continue;
					}

					if (oInput) {
						if (oInput.getValue && (sValue === oInput.getValue().trim())) {
							return true;
						} else if (oInput.getText && (sValue === oInput.getText().trim())) {
							return true;
						}
					}
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (this._isIndustrySolutionModeAndVendorLayer() && this.bManualVariantKey) {
					return false;
				}
				/* eslint-enable no-lonely-if */
			}
		}

		return false;
	};

	VariantManagement.prototype._isDuplicateSaveAs = function(sValue) {
		var sTrimName = sValue.trim();
		if (!sTrimName) {
			return true;
		}

		var sText = this._determineStandardVariantName();
		if (sText === sTrimName) {
			if (this._isIndustrySolutionModeAndVendorLayer() && this.bManualVariantKey) {
				return false;
			}
			return true;
		}

		var oItems = this._getItems();
		for (var iCount = 0; iCount < oItems.length; iCount++) {
			sText = oItems[iCount].getText().trim();
			if (sText === sTrimName) {
				return true;
			}
		}

		return false;
	};

	VariantManagement.prototype._createActionSheet = function() {

		if (!this.oActionSheet) {
			this.oActionSheet = new ActionSheet(this.getId() + "-actionsheet", {
				showCancelButton: true,
				buttons: [
					this.oActionSheetManage, this.oActionSheetSave, this.oActionSheetSaveAs
				],
				placement: PlacementType.Top
			});
		}
	};

	VariantManagement.prototype._createSaveDialog = function() {
		var that = this;

		// this.oSaveSave.setEnabled(false);

		var sValue = this.oInputName ? this.oInputName.getValue() : "";
		this.oSaveSave.setEnabled(!this._isDuplicate(this.oInputName, sValue));

		if (!this.oSaveDialog) {

			this.oSaveDialog = new Dialog(this.getId() + "-savedialog", {
				title: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVEDIALOG"),
				beginButton: this.oSaveSave,
				endButton: new Button(this.getId() + "-variantcancel", {
					text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_CANCEL"),
					press: function() {
						that._bSaveCanceled = true;
						that.oSaveDialog.close();
					}
				}),
				content: [
					this.oLabelName, this.oInputName, this.oLabelKey, this.oInputKey, this.oSaveDialogOptionsGrid
				],
				stretch: Device.system.phone,
				afterOpen: function() {
					that._setTriggerButtonIcon(false);
				},
				afterClose: function() {
					that._setTriggerButtonIcon(true);
				}
			});
			this.oSaveDialog.setParent(this);
			this.oSaveDialog.addStyleClass("sapUiPopupWithPadding");
			this.oSaveDialog.addStyleClass("sapUiCompVarMngmtSaveDialog");
		}
	};

	VariantManagement.prototype._createManagementDialog = function() {
		var that = this;

		if (!this.oManagementDialog) {
			this.oManagementDialog = new Dialog(this.getId() + "-managementdialog", {
				beginButton: this.oManagementSave,
				endButton: new Button(this.getId() + "-managementcancel", {
					text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_CANCEL"),
					press: function() {
						that.aRemovedVariants = [];
						that.oManagementDialog.close();
					}
				}),
				content: [
					this.oManagementTable
				],
				stretch: Device.system.phone,
				afterOpen: function() {
					that._setTriggerButtonIcon(false);
				},
				afterClose: function() {
					if (that.bFireSelect == true) {
						that.bFireSelect = false;
						setTimeout(function() {
							that._fireSelectAsync();
						}, 0);
					}
					that._setTriggerButtonIcon(true);
				}
			});
			this.oManagementDialog.setParent(this);

			this.oManagementDialog.setTitle(this.oResourceBundle.getText("VARIANT_MANAGEMENT_MANAGEDIALOG"));
			var oSubHeader = new Bar();
			this.oManageDialogSearchField = new SearchField();

			this.oManageDialogSearchField.attachLiveChange(function(oEvent) {
				this._triggerSearchInManageDialog(oEvent);
			}.bind(this));

			oSubHeader.addContentRight(this.oManageDialogSearchField);
			this.oManagementDialog.setSubHeader(oSubHeader);

		}
	};

	VariantManagement.prototype._handleArrowUpDown = function(oList, oSearch) {

		var sItemId = null;
		var that = this;

		oList.attachBrowserEvent("keydown", function(e) {
			if (e.which === 38) { // UP
				if (that.oVariantSelectionPage.getShowSubHeader()) {
					sItemId = document.activeElement.id;
				}
			}
		});

		oList.attachBrowserEvent("keyup", function(e) {
			if (e.which === 38) { // UP
				if (sItemId && (sItemId === document.activeElement.id)) {
					var aItems = oList.getItems();
					if (aItems && aItems.length > 0) {
						var oItem = sap.ui.getCore().byId(sItemId);
						if (oItem === aItems[0]) {
							oSearch.focus();
						}
					}
				}

				sItemId = null;
			}
		});

		oSearch.attachBrowserEvent("keyup", function(e) {
			if (e.which === 40) { // DOWN
				var aItems = oList.getItems();
				if (aItems && aItems.length > 0) {
					aItems[0].focus();
				}
			}
		});
	};

	VariantManagement.prototype._triggerSearch = function(oEvent) {

		if (!oEvent) {
			return;
		}

		var parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}

		this._restoreCompleteList();

		var sValue = parameters.newValue ? parameters.newValue : "";

		this._triggerSearchByValue(sValue.toLowerCase());
	};

	VariantManagement.prototype._triggerSearchByValue = function(sValue) {
		var sText, sKey, oVariantListItem;

		this.oSelectedVariantItemKey = null;

		oVariantListItem = this.oVariantList.getItemByKey(this.getStandardVariantKey());
		if (oVariantListItem && (oVariantListItem.getText().toLowerCase().indexOf(sValue) < 0)) {

			if (this.getSelectionKey() === sKey) {
				this.oSelectedVariantItemKey = sKey;
			}
			this.oVariantList.removeItem(oVariantListItem);

			oVariantListItem.destroy();
		}

		var oItems = this._getItems();
		for (var iCount = 0; iCount < oItems.length; iCount++) {
			sText = oItems[iCount].getText();

			if (sText.toLowerCase().indexOf(sValue) < 0) {
				sKey = oItems[iCount].getKey();
				oVariantListItem = this.oVariantList.getItemByKey(sKey);
				if (oVariantListItem) {

					if (this.getSelectionKey() === sKey) {
						this.oSelectedVariantItemKey = sKey;
					}
					this.oVariantList.removeItem(oVariantListItem);

					oVariantListItem.destroy();
				}
			}
		}
	};

	VariantManagement.prototype._triggerSearchInManageDialog = function(oEvent) {
		var sValue, bNoMatch, sColumnValue = "", oCell, aCells;

		if (!oEvent) {
			return;
		}

		var parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}

		sValue = parameters.newValue ? parameters.newValue.toLowerCase() : "";

		if (this.oManagementTable) {
			var aVariants = this.oManagementTable.getItems();
			aVariants.forEach(function(oRow) {
				bNoMatch = true;
				sColumnValue = "";
				aCells = oRow.getCells();
				if (aCells && aCells[VariantManagement.NAME_COLUMN]) {

					oCell = aCells[VariantManagement.NAME_COLUMN];
					if (oCell.getTitle) {
						sColumnValue = oCell.getTitle();
					} else if (oCell.getValue) {
						sColumnValue = oCell.getValue();
					}

					if (sColumnValue.toLowerCase().indexOf(sValue) >= 0) {
						bNoMatch = false;
					}
				}

				if (bNoMatch && aCells && aCells[VariantManagement.AUTHOR_COLUMN]) {
					oCell = aCells[VariantManagement.AUTHOR_COLUMN];
					if (oCell.getText) {
						sColumnValue = oCell.getText();
						if (sColumnValue.toLowerCase().indexOf(sValue) >= 0) {
							bNoMatch = false;
						}
					}
				}

				oRow.setVisible(!bNoMatch);

			});

		}

	};

	VariantManagement.prototype._considerItem = function(bIgnoreFavorites, oItem) {

		if (this.getUseFavorites() && !bIgnoreFavorites) {

			if (this._isIndustrySolutionModeAndVendorLayer()) {
				return true;
			}

			if (oItem.getFavorite && oItem.getFavorite()) {
				return true;
			}

// if (this.oSelectedVariantItemKey) {
// if (this.oSelectedVariantItemKey === oItem.getKey()) {
// return true;
// }
// } else {
// /* eslint-disable no-lonely-if */
// if (this.getSelectionKey() === oItem.getKey() || this.getSelectionKey() === null) {
// return true;
// /* eslint-enable no-lonely-if */
// }
// }

			return false;

		}

		return true;
	};

	VariantManagement.prototype._restoreCompleteList = function(bIgnoreFavorites) {
		var iCount, oItem, oItems, oVariantListItem;

		this.oVariantList.destroyItems();

		oVariantListItem = this.oVariantList.getItemByKey(this.getStandardVariantKey());
		if (!oVariantListItem) {
			oVariantListItem = this._createStandardVariantListItem();
			if (oVariantListItem) {
				if (this._considerItem(bIgnoreFavorites, oVariantListItem)) {
					this.oVariantList.insertItem(oVariantListItem, 0);
				} else {
					oVariantListItem.destroy();
				}
			}
		}

		if (oVariantListItem) {
			if (this.oSelectedVariantItemKey) {
				if (this.oSelectedVariantItemKey === oVariantListItem.getKey()) {
					this.oVariantList.setSelectedItem(oVariantListItem);
					this.oSelectedVariantItemKey = null;
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (this.getSelectionKey() == oVariantListItem.getKey() || this.getSelectionKey() === null) {
					this.oVariantList.setSelectedItem(oVariantListItem);
					/* eslint-enable no-lonely-if */
				}
			}
		}

		oItems = this._getItems();
		oItems.sort(this._compareItems);
		for (iCount = 0; iCount < oItems.length; iCount++) {
			oItem = oItems[iCount];

			if (!this._considerItem(bIgnoreFavorites, oItem)) {
				continue;
			}

			if (oItem.getKey() === this.getStandardVariantKey()) {
				continue;
			}

			oVariantListItem = this.oVariantList.getItemByKey(oItem.getKey());
			if (!oVariantListItem) {
				oVariantListItem = this._createVariantListItem(oItem, iCount);
				this.oVariantList.addItem(oVariantListItem);
			}

			if (this.oSelectedVariantItemKey) {
				if (this.oSelectedVariantItemKey === oVariantListItem.getKey()) {
					this.oVariantList.setSelectedItem(oVariantListItem);
					this.oSelectedVariantItemKey = null;
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (this.getSelectionKey() == oVariantListItem.getKey()) {
					this.oVariantList.setSelectedItem(oVariantListItem);
					/* eslint-enable no-lonely-if */
				}
			}

		}
	};

	VariantManagement.prototype._determineStandardVariantName = function() {

		var sText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_STANDARD");

		if (this.bVariantItemMode === false) {
			sText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT");
		}

		if (this.getStandardVariantKey() === this.STANDARDVARIANTKEY) {
			if (this.getStandardItemText() !== null && this.getStandardItemText() != "") {
				sText = this.getStandardItemText();
			}
		}

		return sText;

	};

	VariantManagement.prototype._createStandardVariantListItem = function() {
		var oItem, oVariantListItem = null;

		var sText = this._determineStandardVariantName();

		if ((this.bVariantItemMode === true) || (this.bVariantItemMode === false && (this.getSelectionKey() === this.getStandardVariantKey() || this.getSelectionKey() === null))) {

			oVariantListItem = new VariantItem(this.oVariantPopoverTrigger.getId() + "-item-standard", {
				key: this.getStandardVariantKey(),
				// text: sText, // issue with curly brackets
				readOnly: true, // !this.getIndustrySolutionMode(),
				executeOnSelection: this.getExecuteOnSelectForStandardVariant()
			});
			oVariantListItem.setText(sText);

			if (this._isIndustrySolutionModeAndVendorLayer() && this.bVariantItemMode) {
				oVariantListItem.setGlobal(true);
				oVariantListItem.setReadOnly(false); // in vendor layer a change should be possible
			}

			if (this.getStandardVariantKey() !== this.STANDARDVARIANTKEY) {
				oItem = this.getItemByKey(this.getStandardVariantKey());
				if (oItem) {
					this._setVariantListItemProperties(oItem, oVariantListItem);
					// oVariantListItem.setReadOnly(true);
				}
			} else {
				oVariantListItem.setAuthor("SAP");

				oVariantListItem.setFavorite(this.getStandardFavorite());
			}
		}

		return oVariantListItem;
	};

	VariantManagement.prototype._createVariantListItem = function(oItem, iCount) {
		var oVariantListItem = new VariantItem(this.oVariantPopoverTrigger.getId() + "-item-" + iCount, {
			key: oItem.getKey(),
			text: oItem.getText()
		// leads to issues if curly brackets are added
		});

		// oVariantListItem.setText(oItem.getText());

		this._setVariantListItemProperties(oItem, oVariantListItem);

		return oVariantListItem;
	};

	VariantManagement.prototype._setVariantListItemProperties = function(oItem, oVariantListItem) {
		if (oItem.getReadOnly) {
			oVariantListItem.setReadOnly(oItem.getReadOnly());
		}
		if (oItem.getExecuteOnSelection) {
			oVariantListItem.setExecuteOnSelection(oItem.getExecuteOnSelection());
		}
		if (oItem.getGlobal) {
			oVariantListItem.setGlobal(oItem.getGlobal());
		}
		if (oItem.getLifecyclePackage) {
			oVariantListItem.setLifecyclePackage(oItem.getLifecyclePackage());
		}
		if (oItem.getLifecycleTransportId) {
			oVariantListItem.setLifecycleTransportId(oItem.getLifecycleTransportId());
		}
		if (oItem.getNamespace) {
			oVariantListItem.setNamespace(oItem.getNamespace());
		}
		if (oItem.getAccessOptions) {
			oVariantListItem.setAccessOptions(oItem.getAccessOptions());
		}
		if (oItem.getLabelReadOnly) {
			oVariantListItem.setLabelReadOnly(oItem.getLabelReadOnly());
		}
		if (oItem.getAuthor) {
			oVariantListItem.setAuthor(oItem.getAuthor());
		}
		if (oItem.getFavorite) {
			oVariantListItem.setFavorite(oItem.getFavorite());
		}
	};

	// exit destroy all controls created in init
	VariantManagement.prototype.exit = function() {

		if (this.oSearchField) {
			this.oSearchField.destroy();
			this.oSearchField = undefined;
		}
		if (this.oManageDialogSearchField) {
			this.oManageDialogSearchField.destroy();
			this.oManageDialogSearchField = undefined;
		}

		if (this.oVariantManage) {
			this.oVariantManage.destroy();
			this.oVariantManage = undefined;
		}
		if (this.oVariantSave) {
			this.oVariantSave.destroy();
			this.oVariantSave = undefined;
		}
		if (this.oVariantList) {
			this.oVariantList.destroy();
			this.oVariantList = undefined;
		}
		if (this.oInputName) {
			this.oInputName.destroy();
			this.oInputName = undefined;
		}
		if (this.oLabelName) {
			this.oLabelName.destroy();
			this.oLabelName = undefined;
		}
		if (this.oDefault) {
			this.oDefault.destroy();
			this.oDefault = undefined;
		}
		if (this.oSaveSave) {
			this.oSaveSave.destroy();
			this.oSaveSave = undefined;
		}
		if (this.oSaveDialog) {
			this.oSaveDialog.destroy();
			this.oSaveDialog = undefined;
		}
		if (this.oManagementTable) {
			this.oManagementTable.destroy();
			this.oManagementTable = undefined;
		}
		if (this.oManagementSave) {
			this.oManagementSave.destroy();
			this.oManagementSave = undefined;
		}
		if (this.oManagementDialog) {
			this.oManagementDialog.destroy();
			this.oManagementDialog = undefined;
		}
		if (this.oVariantText) {
			this.oVariantText.destroy();
			this.oVariantText = undefined;
		}
		if (this.oVariantPopoverTrigger) {
			this.oVariantPopoverTrigger.destroy();
			this.oVariantPopoverTrigger = undefined;
		}
		if (this.oVariantLayout) {
			this.oVariantLayout.destroy();
			this.oVariantLayout = undefined;
		}
		if (this.oVariantPopOver) {
			this.oVariantPopOver.destroy();
			this.oVariantPopOver = undefined;
		}
		if (this.oVariantSaveAs) {
			this.oVariantSaveAs.destroy();
			this.oVariantSaveAs = undefined;
		}
		if (this.oShare) {
			this.oShare.destroy();
			this.oShare = undefined;
		}
		if (this.oExecuteOnSelect) {
			this.oExecuteOnSelect.destroy();
			this.oExecuteOnSelect = undefined;
		}
		if (this.oCreateTile) {
			this.oCreateTile.destroy();
			this.oCreateTile = undefined;
		}
		if (this.oSaveDialogOptionsGrid) {
			this.oSaveDialogOptionsGrid.destroy();
			this.oSaveDialogOptionsGrid = undefined;
		}
		if (this.oVariantSelectionPage) {
			this.oVariantSelectionPage.destroy();
			this.oVariantSelectionPage = undefined;
		}
		if (this.oActions) {
			this.oActions.destroy();
			this.oActions = undefined;
		}
		if (this.oActionSheet) {
			this.oActionSheet.destroy();
			this.oActionSheet = undefined;
		}
		if (this.oActionSheetManage && !this.oActionSheetManage._bIsBeingDestroyed) {
			this.oActionSheetManage.destroy();
			this.oActionSheetManage = undefined;
		}
		if (this.oActionSheetSave && !this.oActionSheetSave._bIsBeingDestroyed) {
			this.oActionSheetSave.destroy();
		}
		this.oActionSheetSave = undefined;

		if (this.oActionSheetSaveAs && !this.oActionSheetSaveAs._bIsBeingDestroyed) {
			this.oActionSheetSaveAs.destroy();
		}
		this.oActionSheetSaveAs = undefined;

		if (this.oInputKey) {
			this.oInputKey.destroy();
			this.oInputKey = undefined;
		}
		if (this.oLabelKey) {
			this.oLabelKey.destroy();
			this.oLabelKey = undefined;
		}

		if (this.oModel) {
			this.oModel.destroy();
			this.oModel = undefined;
		}
	};

	VariantManagement.prototype.addItem = function(oItem) {
		oItem = this.validateAggregation("items", oItem, true);
		this.bVariantItemMode = false;
		this.addAggregation("items", oItem, false);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};

	VariantManagement.prototype.insertItem = function(oItem, iIndex) {
		var _iIndex = iIndex;
		oItem = this.validateAggregation("items", oItem, true);
		this.bVariantItemMode = false;
		this.insertAggregation("items", oItem, _iIndex);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};

	VariantManagement.prototype.removeItem = function(oItem) {
		oItem = this.removeAggregation("items", oItem);
		this._manageButtonState();
		return oItem;
	};

	VariantManagement.prototype.removeAllItems = function() {
		var ret = this.removeAllAggregation("items");
		this._manageButtonState();
		this._setSelectedItem(null);
		return ret;
	};

	VariantManagement.prototype.destroyItems = function() {
		this.destroyAggregation("items");
		this._manageButtonState();
		this._setSelectedItem(null);
		return this;
	};

	VariantManagement.prototype._getItems = function() {
		if (this.bVariantItemMode) {
			return this.getVariantItems();
		} else {
			return this.getItems();
		}
	};

	VariantManagement.prototype._removeItem = function(oItem) {
		if (this.bVariantItemMode) {
			return this.removeVariantItem(oItem);
		} else {
			return this.removeItem(oItem);
		}
	};

	VariantManagement.prototype.getItemByKey = function(sKey) {
		var oItems = this._getItems();
		for (var iCount = 0; iCount < oItems.length; iCount++) {
			if (sKey == oItems[iCount].getKey()) {
				return oItems[iCount];
			}
		}
		return null;
	};

	VariantManagement.prototype.addVariantItem = function(oVariantItem) {
		oVariantItem = this.validateAggregation("variantItems", oVariantItem, true);
		this.bVariantItemMode = true;
		this.addAggregation("variantItems", oVariantItem, false);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oVariantItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};

	VariantManagement.prototype.insertVariantItem = function(oVariantItem, iIndex) {
		var _iIndex = iIndex;
		oVariantItem = this.validateAggregation("variantItems", oVariantItem, true);
		this.bVariantItemMode = true;
		this.insertAggregation("variantItems", oVariantItem, _iIndex);
		var _sKey = this.getInitialSelectionKey();
		this._setSelection(oVariantItem, _sKey);
		this._manageButtonState();
		this._setStandardText();
		return this;
	};

	VariantManagement.prototype._setSelectedItem = function(oItem) {
		this.oSelectedItem = oItem;
		// when standard variant comes from SmartVariant Management texts from other languages overrule the translation of "Standard"
		if (oItem != null && oItem.getKey() != this.getStandardVariantKey()) {
			this._setVariantText(oItem.getText());
		} else {
			this._setStandardText();
		}
	};

	VariantManagement.prototype._getSelectedItem = function() {
		return this.oSelectedItem;
	};

	VariantManagement.prototype.setInitialSelectionKey = function(sKey) {
		this.setProperty("initialSelectionKey", sKey, true); // do not re-render !
		this._setSelectionByKey(sKey);
		return this;
	};

	VariantManagement.prototype.setEnabled = function(bEnabled) {
		this.setProperty("enabled", bEnabled, false);
		if (this.oVariantPopoverTrigger) {
			this.oVariantPopoverTrigger.setEnabled(bEnabled);
		}
		if (!bEnabled) {
			this.oVariantText.addStyleClass("sapUICompVarMngmtDisabled");
			this.oVariantModifiedText.addStyleClass("sapUICompVarMngmtDisabled");
		} else {
			this.oVariantText.removeStyleClass("sapUICompVarMngmtDisabled");
			this.oVariantModifiedText.removeStyleClass("sapUICompVarMngmtDisabled");
		}
		return this;
	};

	VariantManagement.prototype.getFocusDomRef = function() {
		if (this.oVariantPopoverTrigger && this.getEnabled()) {
			return this.oVariantPopoverTrigger.getFocusDomRef();
		}

		return sap.ui.core.Element.prototype.getFocusDomRef.apply(this, []);
	};

	/**
	 * The string given as "sKey" will be used to set the initial selected item of the <code>VariantManagement</code>. If an item exists with the
	 * matching key the item will be marked as selected If the key is set before any items are added the <code>VariantManagement</code> will try to
	 * set the selection when the items are added in "addItem" or "insterItem".
	 * @param {sap.ui.core.Item} oItem the Item to be compared
	 * @param {string} sKey the string used to be compared with the item's key attribute
	 */
	VariantManagement.prototype._setSelection = function(oItem, sKey) {
		if (oItem.getKey() === sKey) {
			this._setSelectedItem(oItem);
			this.fireSelect({
				key: sKey
			});
		}
	};

	VariantManagement.prototype.addStyleClass = function(sStyleClass) {
		if (Control.prototype.addStyleClass) {
			Control.prototype.addStyleClass.apply(this, arguments);
		}
		if (this.oVariantPopOver) {
			this.oVariantPopOver.addStyleClass(sStyleClass);
		}
		if (this.oSaveDialog) {
			this.oSaveDialog.addStyleClass(sStyleClass);
		}
		if (this.oManagementDialog) {
			this.oManagementDialog.addStyleClass(sStyleClass);
		}
	};

	VariantManagement.prototype.removeStyleClass = function(sStyleClass) {
		if (Control.prototype.addStyleClass) {
			Control.prototype.removeStyleClass.apply(this, arguments);
		}
		if (this.oVariantPopOver) {
			this.oVariantPopOver.removeStyleClass(sStyleClass);
		}
		if (this.oSaveDialog) {
			this.oSaveDialog.removeStyleClass(sStyleClass);
		}
		if (this.oManagementDialog) {
			this.oManagementDialog.removeStyleClass(sStyleClass);
		}
	};

	/**
	 * Removes the current variant selection and resets to default value.
	 * @public
	 * @since 1.22.0
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	VariantManagement.prototype.clearVariantSelection = function() {
		this.setInitialSelectionKey(this.getStandardVariantKey());
		this._setSelectedItem(null);
	};

	/**
	 * If the oControl has the ".sapUiSizeCompact" class it will be also set on the oDialog
	 * @param {sap.ui.core.Control} oControl the control to be checked for compact
	 * @param {sap.ui.core.Control} oDialog the dialog/popover to receive the compact style class
	 */
	VariantManagement.prototype._setDialogCompactStyle = function(oControl, oDialog) {
		if (this._checkDialogCompactStyle(oControl)) {
			oDialog.addStyleClass("sapUiSizeCompact");
		} else {
			oDialog.removeStyleClass("sapUiSizeCompact");
		}
	};

	/**
	 * If the oControl has the ".sapUiSizeCompact" the function will return true
	 * @param {sap.ui.core.Control} oControl the control to be checked for compact
	 * @returns {boolean} result
	 */
	VariantManagement.prototype._checkDialogCompactStyle = function(oControl) {
		if (oControl.$().closest(".sapUiSizeCompact").length > 0) {
			return true;
		} else {
			return false;
		}
	};

	/**
	 * Check and set Manage Button State
	 */
	VariantManagement.prototype._manageButtonState = function() {
		if (this.oActionSheetManage) {
			this.oActionSheetManage.setEnabled(true);
		}
	};

	VariantManagement.prototype.getSelectionKey = function() {
		var sKey = null;
		var oItem = this._getSelectedItem();
		if (oItem !== null) {
			sKey = oItem.getKey();
		} else if (this.bVariantItemMode) {
			sKey = this.getStandardVariantKey();
		} else {
			sKey = null;
		}
		return sKey;
	};

	VariantManagement.prototype._setSelectionByKey = function(sKey) {
		var oItems = this._getItems();
		var bFound = false;
		if (oItems.length > 0) {
			for (var iI = 0; iI < oItems.length; iI++) {
				if (oItems[iI].getKey() === sKey) {
					this._setSelectedItem(oItems[iI]);
					bFound = true;
					break;
				}
			}
		}
		if (!bFound) {
			this._setSelectedItem(null);
		}
	};

	VariantManagement.prototype.replaceKey = function(sOldKey, sNewKey) {
		var oItems = this._getItems();
		if (oItems.length > 0) {
			for (var iI = 0; iI < oItems.length; iI++) {
				if (oItems[iI].getKey() === sOldKey) {
					oItems[iI].setKey(sNewKey);
					if (this.getDefaultVariantKey() == sOldKey) {
						this.setDefaultVariantKey(sNewKey);
					}
					if (this._getSelectedItem() === oItems[iI]) {
						this._setSelectedItem(null);
					}
					break;
				}
			}
		}
	};

	VariantManagement.prototype._assignUser = function(sKey, sUser) {
		var oItems = this._getItems();
		if (oItems.length > 0) {
			for (var iI = 0; iI < oItems.length; iI++) {
				if (oItems[iI].getKey() === sKey) {
					if (oItems[iI].setAuthor && oItems[iI].getAuthor && !oItems[iI].getAuthor()) {
						oItems[iI].setAuthor(sUser);
					}
					break;
				}
			}
		}
	};

	/**
	 * Sets the dirty flag of the current variant.
	 * @public
	 * @param {boolean} bFlag The value indicating the dirty state of the current variant
	 */
	VariantManagement.prototype.currentVariantSetModified = function(bFlag) {
		this.oModel.setProperty("/enabled", bFlag);
	};

	/**
	 * Gets the dirty flag of the current variant.
	 * @public
	 * @returns {boolean} The dirty state of the current variant
	 */
	VariantManagement.prototype.currentVariantGetModified = function() {
		return this.oModel.getProperty("/enabled");
	};

	VariantManagement.prototype._delayedControlCreation = function() {
		var that = this;

		if (this._bInnerControlsCreated) {
			return;
		}

		this._bInnerControlsCreated = true;

		this.oVariantManage = new Button(this.getId() + "-manage", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_MANAGE"),
			enabled: true, // FIORITECHP1-3572
			press: function() {
				that._openVariantManagementDialog();
			}
		});
		this.oVariantManage.addStyleClass("sapUiHideOnPhone");

		this.oVariantSave = new Button(this.getId() + "-mainsave", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE"),
			press: function() {
				var oEvent = that._createEvent("variantSavePressed", that._variantSavePressed);
				that._addEvent(oEvent);
			},
			enabled: false
		});
		this.oVariantSave.setModel(this.oModel);
		this.oVariantSave.addStyleClass("sapUiHideOnPhone");

		this.oVariantSaveAs = new Button(this.getId() + "-saveas", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVEAS"),
			press: function() {
				that._openSaveAsDialog();
			}
		});
		this.oVariantSaveAs.addStyleClass("sapUiHideOnPhone");

		this.oVariantList = new SelectList(this.getId() + "-list", {
			itemPress: function(event) {
				var sSelectionKey = null;
				if (event && event.getParameters()) {
					var oItemPressed = event.getParameters().item;
					if (oItemPressed) {
						sSelectionKey = oItemPressed.getKey();
// if (!this.getSelectedItem() || sSelectionKey !== this.getSelectedItem().getKey()) {
// bNewSelection = true;
// }
					}
				}
				if (sSelectionKey) {
					that.lastSelectedVariantKey = sSelectionKey;
					that._setSelectionByKey(sSelectionKey);
					that.oVariantPopOver.close();
// that.bDirty = false;
					that.oModel.setProperty("/enabled", false);
					that.bFireSelect = true;
				}
			}
		});
		this.oVariantList.setNoDataText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_NODATA"));

		this.oActionSheetManage = new Button({
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_MANAGE"),
			enabled: false,
			press: function(oEvent) {
				that._openVariantManagementDialog();
			}
		});
		this.oActionSheetSave = new Button({
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE"),
			enabled: false,
			press: function(oEvent) {
				var olEvent = that._createEvent("variantSavePressed", that._variantSavePressed);
				that._addEvent(olEvent);
			}
		});
		this.oActionSheetSaveAs = new Button({
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVEAS"),
			press: function(oEvent) {
				that._openSaveAsDialog();
			}
		});

		this.oActions = new Button(this.getId() + "-actions", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_ACTIONS"),
			press: function() {
				that._createActionSheet();
				that.oActionSheet.openBy(this);
			}
		});
		this.oActions.addStyleClass("sapUiVisibleOnlyOnPhone");

		this.oSearchField = new SearchField();
		this.oSearchField.attachLiveChange(function(oEvent) {
			that._triggerSearch(oEvent);
		});

		this._handleArrowUpDown(this.oVariantList, this.oSearchField);

		this.oVariantSelectionPage = new Page(this.getId() + "selpage", {
			subHeader: new Toolbar({
				content: [
					this.oSearchField
				]
			}),
			content: [
				this.oVariantList
			],
			footer: new Toolbar({
				content: [
					new ToolbarSpacer(this.getId() + "-spacer"), this.oVariantManage, this.oVariantSave, this.oVariantSaveAs, this.oActions
				]
			}),
			showSubHeader: false,
			showNavButton: false,
			showHeader: false
		});
		this.oVariantPopOver = new ResponsivePopover(this.getId() + "-popover", {
			title: this.oResourceBundle.getText("VARIANT_MANAGEMENT_VARIANTS"),
			contentWidth: "400px",
			placement: PlacementType.Bottom,
			content: [
				this.oVariantSelectionPage
			],
			afterOpen: function() {
				// that.bPopoverOpen = true;
				that._markSharedVariants();

				that._setTriggerButtonIcon(false);
			},
			afterClose: function() {
				if (that.bFireSelect == true) {
					that.bFireSelect = false;
					setTimeout(function() {
						that._fireSelectAsync();
					}, 0);
				}

				that._setTriggerButtonIcon(true);
//
// setTimeout(function() {
// that.bPopoverOpen = false;
// }, 300);

			},
			contentHeight: "300px"
		});

		this.oVariantPopOver.setParent(this);

		this.oVariantPopOver.addStyleClass("sapUICompVarMngmtPopover");

		/* save new dialog */
		this.oInputName = new Input(this.getId() + "-name", {
			liveChange: function(oEvent) {
				that._checkVariantNameConstraints(this, that.oSaveSave);
			}
		});
		this.oLabelName = new Label(this.getId() + "-namelabel", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_NAME"),
			required: true
		});
		this.oLabelName.setLabelFor(this.oInputName);

		this.oDefault = new CheckBox(this.getId() + "-default", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SETASDEFAULT"),
			enabled: true,
			visible: true,
			width: "100%"
		});

		this.oExecuteOnSelect = new CheckBox(this.getId() + "-execute", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_EXECUTEONSELECT"),
			enabled: true,
			visible: false,
			width: "100%"
		});

		this.oCreateTile = new CheckBox(this.getId() + "-tile", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_CREATETILE"),
			enabled: true,
			visible: false,
			width: "100%"
		});

		this.oShare = new CheckBox(this.getId() + "-share", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_SHARE"),
			enabled: true,
			visible: false,
			select: function(oControlEvent) {
				var oEvent = that._createEvent("inputfieldChange", that._handleShareSelected);
				oEvent.args.push(oControlEvent);
				that._addEvent(oEvent);
			},
			width: "100%"
		});

		this.oInputKey = new Input(this.getId() + "-key", {
			liveChange: function(oEvent) {
				that._checkVariantNameConstraints(this);
			}
		});

		this.oLabelKey = new Label(this.getId() + "-keylabel", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_KEY"),
			required: true
		});
		this.oLabelKey.setLabelFor(this.oInputKey);

		this.oSaveSave = new Button(this.getId() + "-variantsave", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_OK"),
			press: function() {
				that._bSaveCanceled = false;
				that._triggerSave();
			},
			enabled: true
		});
		this.oSaveDialogOptionsGrid = new Grid({
			defaultSpan: "L6 M6 S12"
		});

		this.oManagementTable = new Table(this.getId() + "-managementTable");

		this.oManagementSave = new Button(this.getId() + "-managementsave", {
			text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_OK"),
			enabled: true,
			press: function() {
				var oEvent = that._createEvent("managementSave", that._handleManageSavePressed);
				that._addEvent(oEvent);
			}
		});

		this._manageButtonState();

	};

	VariantManagement.prototype._openVariantSelection = function() {
		var oItems = null;

		this._delayedControlCreation();

		// if (this.bPopoverOpen == true) {
		if (this.oVariantPopOver && this.oVariantPopOver.isOpen()) {
			this.oVariantPopOver.close();
			return;
		}

		this.oVariantSave.setEnabled(false);
		this.oActionSheetSave.setEnabled(false);
		if (this.bVariantItemMode === false && this.getSelectionKey() !== null) {
			this.oVariantSave.setEnabled(true);
			this.oActionSheetSave.setEnabled(true);
		}

		oItems = this._getItems();
		if (oItems.length < 9) {
			this.oVariantSelectionPage.setShowSubHeader(false);
		} else {
			this.oVariantSelectionPage.setShowSubHeader(true);
			this.oSearchField.setValue("");
		}

		this._restoreCompleteList();

		if (this.currentVariantGetModified()) {
			var oSelectedItem = this.oVariantList.getItemByKey(this.getSelectionKey());
			if (oSelectedItem) {
				if (!oSelectedItem.getReadOnly() || (this._isIndustrySolutionModeAndVendorLayer() && (this.getStandardVariantKey() === oSelectedItem.getKey()))) {
					this.oVariantSave.setEnabled(true);
					this.oActionSheetSave.setEnabled(true);
				}
			}
		}

		this.oVariantSaveAs.setEnabled(true);
// if (this._isIndustrySolutionModeAndVendorLayer() && (this.getStandardVariantKey() === this.getSelectionKey()) && (this.getStandardVariantKey() ===
// this.STANDARDVARIANTKEY)) {
// this.oVariantSaveAs.setEnabled(false);
// }

		if (this._isIndustrySolutionModeAndVendorLayer() && this.bManualVariantKey && (this.getStandardVariantKey() === this.STANDARDVARIANTKEY)) {
			this.oVariantSave.setEnabled(false);
			this.oVariantSaveAs.setEnabled(true);
		}

		this._setDialogCompactStyle(this, this.oVariantPopOver);
		this._manageButtonState();

		var oSelectedItem = this.oVariantList.getSelectedItem();
		if (oSelectedItem) {
			this.oVariantPopOver.setInitialFocus(oSelectedItem.getId());
		}
		this.oVariantPopOver.openBy(this.oVariantPopoverTrigger);
	};

	VariantManagement.prototype._initalizeManagementTableColumns = function() {
		if (this.bManagementTableInitialized) {
			return;
		}

		var oAddColumn = new Column({
			header: new Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_ADD_FAV")
			}),
			width: "4rem",
			visible: this.getUseFavorites() && !this._isIndustrySolutionModeAndVendorLayer()
		});

		this.oManagementTable.addColumn(oAddColumn);
		var oAddColumnHeader = oAddColumn.getHeader();
		if (oAddColumnHeader) {
			oAddColumnHeader.setTooltip(this.oResourceBundle.getText("VARIANT_MANAGEMENT_ADD_FAV_TOOLTIP"));
		}

		this.oManagementTable.addColumn(new Column({
			header: new Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_NAME")
			}),
			width: "14rem"
		}));

		// if (this.getShowShare()) {
		this.oManagementTable.addColumn(new Column({
			header: new Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_VARIANTTYPE")
			}),
			width: "8rem",
			demandPopin: true,
			popinDisplay: PopinDisplay.Inline,
			minScreenWidth: ScreenSize.Tablet,
			visible: this.getShowShare()
		}));
		// }

		// if (this.getShowSetAsDefault()) {
		this.oManagementTable.addColumn(new Column({
			header: new Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT")
			}),
			width: "4rem",
			demandPopin: true,
			popinDisplay: PopinDisplay.Inline,
			minScreenWidth: ScreenSize.Tablet,
			visible: this.getShowSetAsDefault()
		}));
		// }
		// if (this.getShowExecuteOnSelection()) {
		this.oManagementTable.addColumn(new Column({
			header: new Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_EXECUTEONSELECT")
			}),
			width: "5rem",
			hAlign: TextAlign.Center,
			demandPopin: true,
			popinDisplay: PopinDisplay.Inline,
			minScreenWidth: "800px",
			visible: this.getShowExecuteOnSelection()
		}));
		// }
		this.oManagementTable.addColumn(new Column({
			header: new Text({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_AUTHOR")
			}),
			width: "8rem",
			demandPopin: true,
			popinDisplay: PopinDisplay.Inline,
			minScreenWidth: "900px"
		}));
		this.oManagementTable.addColumn(new Column({
			width: "2rem",
			hAlign: TextAlign.Center
		}));
		this.bManagementTableInitialized = true;
	};

	VariantManagement.prototype._initalizeSaveAsDialog = function() {
		this.oSaveDialogOptionsGrid.removeAllContent();

		this.oDefault.setVisible(this.getShowSetAsDefault());
		this.oShare.setVisible(this.getShowShare());
		this.oExecuteOnSelect.setVisible(this.getShowExecuteOnSelection());
		this.oCreateTile.setVisible(this.getShowCreateTile());

		if (this.getShowSetAsDefault()) {
			this.oSaveDialogOptionsGrid.addContent(this.oDefault);
		}
		if (this.getShowShare()) {
			this.oSaveDialogOptionsGrid.addContent(this.oShare);
		}
		if (this.getShowExecuteOnSelection()) {
			this.oSaveDialogOptionsGrid.addContent(this.oExecuteOnSelect);
		}
		if (this.getShowCreateTile()) {
			this.oSaveDialogOptionsGrid.addContent(this.oCreateTile);
		}
	};

	VariantManagement.prototype.onBeforeRendering = function() {

		var fGetMax = function(aContent) {
			var len, maxLength = 0;
			for (var i = 0; i < aContent.length; i++) {
				len = aContent[i].$().width();
				if (len > maxLength) {
					maxLength = len;
				}
			}

			return maxLength;
		};

		if (this.oSaveDialogOptionsGrid && this.oSaveDialog && this.oSaveDialog.getVisible()) {
			var aContent = this.oSaveDialogOptionsGrid.getContent();
			if (aContent && aContent.length > 0) {
				var widthGrid = this.oSaveDialogOptionsGrid.$().width();

				var widthLabel = fGetMax(aContent);

				var widthPaddingLeft = 32;
				var widthCB = 12;
				if (!this._checkDialogCompactStyle(this.oSaveDialog)) {
					widthPaddingLeft = 48;
					widthCB = 18;
				}

				if ((widthPaddingLeft + widthLabel + widthCB) > widthGrid / 2) {
					this.oSaveDialogOptionsGrid.setDefaultSpan("L12 M12 S12");
				}

			}
		}
	};

	VariantManagement.prototype._markSharedVariants = function() {

		var oVariantListItem, oItem, oItems = this._getItems();

		for (var i = 0; i < oItems.length; i++) {
			oItem = oItems[i];

			if (oItem.getGlobal && oItem.getGlobal()) {
				oVariantListItem = this.oVariantList.getItemByKey(oItem.getKey());
				if (oVariantListItem) {
					var oItemElement = oVariantListItem.$();
					if (oItemElement) {
						oItemElement.addClass("sapUiCompVarMngmtSharedVariant");
					}
				}
			}
		}
	};

	VariantManagement.prototype._variantSavePressed = function() {
		var oItem = this._getSelectedItem();

		if (!oItem) {
			if (this.getStandardVariantKey() === this.STANDARDVARIANTKEY) {

				oItem = new VariantItem({
					// text: this._determineStandardVariantName(), // issues with curly brackets
					key: this.STANDARDVARIANTKEY,
					global: this._isIndustrySolutionModeAndVendorLayer()
				});

				oItem.setText(this._determineStandardVariantName());
			} else {
				oItem = this.getItemByKey(this.getStandardVariantKey());
			}
		}

		var bDefault = false;
		if (this.getDefaultVariantKey() === oItem.getKey()) {
			bDefault = true;
		}

		if (oItem.getLifecyclePackage && oItem.getGlobal() == true) {
			var that = this;
			var fOkay = function(sPackage, sTransport) {
				that.oVariantPopOver.close();
				that.sPackage = sPackage;
				that.sTransport = sTransport;
				that.fireSave({
					name: oItem.getText(),
					overwrite: true,
					key: oItem.getKey(),
					def: bDefault,
					global: (that._isIndustrySolutionModeAndVendorLayer() && (that.getStandardVariantKey() === that.getStandardVariantKey())),
					lifecyclePackage: that.sPackage,
					lifecycleTransportId: that.sTransport
				});
				oItem.setLifecycleTransportId(that.sTransport);
				// that.bDirty = false;
				that.oModel.setProperty("/enabled", false);
				that._eventDone();
			};
			var fError = function(oResult) {
				that.sTransport = null;
				that.sPackage = null;
				that._cancelAllEvents();
			};
			this._assignTransport(oItem, fOkay, fError, this.oVariantText);
		} else {
			this.oVariantPopOver.close();
			this.fireSave({
				name: oItem.getText(),
				overwrite: true,
				key: oItem.getKey(),
				def: bDefault
			});
			this.oModel.setProperty("/enabled", false);
			this._eventDone();
		}
	};

	VariantManagement.prototype._assignTransport = function(oVariant, fOkay, fError, oControl) {
		var oObject = {
			type: "variant",
			name: "",
			namespace: ""
		};
		oObject["package"] = "";
		if (oVariant !== null) {
			oObject["package"] = oVariant.getLifecyclePackage();
			oObject["name"] = oVariant.getKey();
			oObject["namespace"] = oVariant.getNamespace();
		}
		var _fOkay = function(oResult) {
			var sPackage;
			var sTransport;
			sTransport = oResult.getParameters().selectedTransport;
			sPackage = oResult.getParameters().selectedPackage;
			fOkay(sPackage, sTransport);
		};
		var _fError = function(oResult) {
			fError(oResult);
		};
		if (this.getLifecycleSupport()) {
			var sTransport = null;
			if (oVariant) {
				sTransport = oVariant.getLifecycleTransportId();
			}
			if (sTransport != null && sTransport.trim().length > 0) {
				fOkay(oObject["package"], sTransport);
			} else {
				var oTransports = this._getTransportSelection(); // new TransportSelection();
				oTransports.selectTransport(oObject, _fOkay, _fError, this._checkDialogCompactStyle(oControl), oControl);
			}
		} else {
			fOkay(oObject["package"], "");
		}
	};

	VariantManagement.prototype._getTransportSelection = function() {
		if (this.getTransportSelection) {
			return this.getTransportSelection();
		} else {
			return this._getFlTransportSelection();
		}
	};

	VariantManagement.prototype._getFlTransportSelection = function() {
		if (!sap.ui.fl) {
			sap.ui.getCore().loadLibrary('sap.ui.fl');
		}
		jQuery.sap.require("sap.ui.fl.transport.TransportSelection");

		return new sap.ui.fl.transport.TransportSelection();
	};

	VariantManagement.prototype.getDefaultVariantKey = function() {
		var sValue = this.getProperty("defaultVariantKey");
		if (sValue === "") {
			if (this.bVariantItemMode) {
				sValue = this.getStandardVariantKey();
			}
		}
		return sValue;
	};

	VariantManagement.prototype._compareItems = function(first, second) {
		var sFirst = first.getText();
		var sSecond = second.getText();
		var sFirstU = sFirst.toUpperCase();
		var sSecondU = sSecond.toUpperCase();
		if (sFirstU == sSecondU) {
			if (sFirst == sSecond) {
				return 0;
			}
			if (sFirst < sSecond) {
				return -1;
			}
			if (sFirst > sSecond) {
				return 1;
			}
		}
		if (sFirstU < sSecondU) {
			return -1;
		}
		if (sFirstU > sSecondU) {
			return 1;
		}
	};

	VariantManagement.prototype._accessOptionsText = function(sOptions) {
		var sMessage = null;
		switch (sOptions) {
			case "R":
				sMessage = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LAYER");
				break;
			case "RD":
				sMessage = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LANGUAGE");
				break;
			default:
				sMessage = null;
		}
		return sMessage;
	};

	VariantManagement.prototype._openSaveAsDialog = function() {
		this._initalizeSaveAsDialog();
		if (this._getSelectedItem()) {
			this.oInputName.setValue(this._getSelectedItem().getText());
		} else {
			this.oInputName.setValue("");
		}
		this.oInputName.setEnabled(true);
		this.oInputName.setValueState(ValueState.None);
		this.oInputName.setValueStateText(null);
		this.oDefault.setSelected(false);
		this.oShare.setSelected(false);
		this.oCreateTile.setSelected(false);
		this.oExecuteOnSelect.setSelected(false);

		// set variant name to Standard
		if (this._isIndustrySolutionModeAndVendorLayer() /* && this.bManualVariantKey */) {
			this.oInputName.setValue(this.oResourceBundle.getText("VARIANT_MANAGEMENT_STANDARD"));
			// this.oInputName.setEnabled(false);
		}

		this._createSaveDialog();
		this._setDialogCompactStyle(this, this.oSaveDialog);
		this.oVariantPopOver.close();
		this.sTransport = null;
		this.sPackage = null;
		if (this.bManualVariantKey) {
			this.oInputKey.setVisible(true);
			this.oInputKey.setEnabled(true);
			this.oInputKey.setValueState(ValueState.None);
			this.oInputKey.setValueStateText(null);
			this.oLabelKey.setVisible(true);
		} else {
			this.oInputKey.setVisible(false);
			this.oLabelKey.setVisible(false);
		}

		this.oSaveDialog.open();
	};

	VariantManagement.prototype._checkManageItemNameChange = function(oManageItem) {
		var sText = "";
		var oInputField = null;
		var that = this;
		oInputField = oManageItem.getCells()[VariantManagement.NAME_COLUMN];

		sText = oInputField.getValue();
		sText = sText.trim();
		var oEditableVariantItem = oManageItem;
		var sKey = oEditableVariantItem.getKey();

		this._checkVariantNameConstraints(oInputField, this.oManagementSave, this.oManagementTable);

		if (oInputField.getValueState() === ValueState.Error) {
			// this.oManagementSave.setEnabled(false);
			this._eventDone();
			return;
		}

		if (this.oVariantList.getItemByKey(sKey).getText().trim() === sText) {
			this._eventDone();
			return;
		}

		if (oEditableVariantItem.getGlobal()) {
			var fOkay = function(sPackage, sTransport) {
				oEditableVariantItem.setLifecyclePackage(sPackage);
				oEditableVariantItem.setLifecycleTransportId(sTransport);
				that._eventDone();
			};

			var fError = function(oResult) {
				var oItem = that.oVariantList.getItemByKey(sKey); // ???
				oInputField.setValue(oItem.getText());
				that._cancelAllEvents();
			};

			this._createManagementDialog();
			this._assignTransport(oEditableVariantItem, fOkay, fError, this.oManagementDialog);
		} else {
			this._eventDone();
		}
	};

	VariantManagement.prototype._handleManageSavePressed = function() {
		var oNewItems = this.oManagementTable.getItems();
		var oItem, oControl;
		var fireSelect = false;
		var sName = "";
		var oOriginalItem = null;
		var iD = 0;
		var aFavoriteChanges = [];

		for (var iG = 0; iG < oNewItems.length; iG++) {
			oItem = this.oVariantList.getItemByKey(oNewItems[iG].getKey());
			oControl = oNewItems[iG].getCells()[VariantManagement.NAME_COLUMN];
			if (oControl && oControl.getValue) {
				sName = oControl.getValue();
			} else if (oControl && oControl.getTitle) {
				sName = oControl.getTitle();
			}

			sName = sName.trim();
			if (oItem.getText() !== sName) {
				this.aRenamedVariants.push({
					key: oItem.getKey(),
					name: sName
				});
				oOriginalItem = this.getItemByKey(oNewItems[iG].getKey());
				oOriginalItem.setText(sName);
				if (oOriginalItem.setLifecyclePackage) {
					oOriginalItem.setLifecyclePackage(oNewItems[iG].getLifecyclePackage());
					oOriginalItem.setLifecycleTransportId(oNewItems[iG].getLifecycleTransportId());
				}

				if (this.lastSelectedVariantKey === oItem.getKey()) {
					this._setVariantText(sName);
					// BCP 1670301513
// this.bDirty = false;
// this.oVariantModifiedText.setVisible(false);
// this.oModel.setProperty("/enabled", false);
				}
			}

			if (this.getUseFavorites() && !this._isIndustrySolutionModeAndVendorLayer()) {
				var sKey = oNewItems[iG].getKey();
				if (this._mFavoriteChanges && this._mFavoriteChanges[sKey] !== undefined) {
					var bNewSelected = this._mFavoriteChanges[sKey];

					if (sKey === this.STANDARDVARIANTKEY) {
						if (this.getStandardFavorite() !== bNewSelected) {
							aFavoriteChanges.push({
								key: sKey,
								visible: bNewSelected
							});
							this.setStandardFavorite(bNewSelected);
						}
					} else {
						oOriginalItem = this.getItemByKey(oNewItems[iG].getKey());
						if (oOriginalItem && oItem.getFavorite && (oItem.getFavorite() !== bNewSelected)) {
							aFavoriteChanges.push({
								key: sKey,
								visible: bNewSelected
							});
							oOriginalItem.setFavorite(bNewSelected);
						}
					}

				}
			}

			if (this.getShowExecuteOnSelection() && oItem.getExecuteOnSelection && oItem.getExecuteOnSelection() != oNewItems[iG].getCells()[VariantManagement.EXEC_COLUMN].getSelected()) {
				// execute on selection changed
				var bFlag = oNewItems[iG].getCells()[VariantManagement.EXEC_COLUMN].getSelected();
				var oItemTmp = this.getItemByKey(oNewItems[iG].getKey());

				if (!oItemTmp && (this.getSupportExecuteOnSelectOnSandardVariant() & (oNewItems[iG].getKey() === this.getStandardVariantKey()/* this.STANDARDVARIANTKEY */))) {
					oItemTmp = new VariantItem();
				}

				if (oItemTmp && oItemTmp.setExecuteOnSelection) {
					oItemTmp.setExecuteOnSelection(bFlag);

					if (this.getSupportExecuteOnSelectOnSandardVariant() & (oNewItems[iG].getKey() === this.getStandardVariantKey())) {
						this._executeOnSelectForStandardVariantByUser(bFlag);
					}
					this.aExeVariants.push({
						key: oItem.getKey(),
						exe: bFlag
					});
					if (oItemTmp.setLifecyclePackage) {
						oItemTmp.setLifecyclePackage(oNewItems[iG].getLifecyclePackage());
						oItemTmp.setLifecycleTransportId(oNewItems[iG].getLifecycleTransportId());
					}
				}
			}
		}

		if (this.oManagementDialog) {
			this.oManagementDialog.close();
		}
		this._manageButtonState();
		if (this.bVariantItemMode === false) {
			if (this.getDefaultVariantKey() != this.sNewDefaultKey) {
				var oItemTmpDef = null;
				if (this.sNewDefaultKey == this.getStandardVariantKey()) {
					oItemTmpDef = this.getItemByKey(this.getDefaultVariantKey());
					this.fireSave({
						name: oItemTmpDef.getText(),
						overwrite: true,
						key: oItemTmpDef.getKey(),
						def: false
					});
				} else {
					oItemTmpDef = this.getItemByKey(this.sNewDefaultKey);
					this.fireSave({
						name: oItemTmpDef.getText(),
						overwrite: true,
						key: oItemTmpDef.getKey(),
						def: true
					});
				}
			}
		}

		if (this.sNewDefaultKey != this.getDefaultVariantKey()) {
			this.setDefaultVariantKey(this.sNewDefaultKey);
		}

		for (iD = 0; iD < this.aRemovedVariants.length; iD++) {
			oItem = this.getItemByKey(this.aRemovedVariants[iD]);
			for (var iE = 0; iE < this.aRemovedVariantTransports.length; iE++) {
				if (this.aRemovedVariants[iD] === this.aRemovedVariantTransports[iE].key) {
					var oManageItem = this.aRemovedVariantTransports[iE];
					if (oItem.setLifecyclePackage) {
						oItem.setLifecycleTransportId(oManageItem.transport);
					}
					break;
				}
			}
		}

		this.fireManage({
			renamed: this.aRenamedVariants,
			deleted: this.aRemovedVariants,
			exe: this.aExeVariants,
			def: this.getDefaultVariantKey(),
			fav: aFavoriteChanges
		});

		for (iD = 0; iD < this.aRemovedVariants.length; iD++) {
			oItem = this.getItemByKey(this.aRemovedVariants[iD]);
			if (oItem) {
				this._removeItem(oItem);
				oItem.destroy();
			}
			if (this.lastSelectedVariantKey === this.aRemovedVariants[iD]) {
				fireSelect = true;
				this._setSelectedItem(null);
				this.oModel.setProperty("/enabled", false);
			}
		}
// if (!fireSelect) {
//
// if (this._mFavoriteChanges && (this._mFavoriteChanges[this.lastSelectedVariantKey] !== undefined) &&
// !this._mFavoriteChanges[this.lastSelectedVariantKey]) {
// fireSelect = true;
// this._setSelectedItem(null);
// this.oModel.setProperty("/enabled", false);
// }
// }

		if (fireSelect) {
			this.bFireSelect = true;
		}
		this._eventDone();
	};

	// new event processor handling
	VariantManagement.prototype._createEvent = function(sName, fCallback) {
		var oEvent = {
			name: sName,
			fFunc: fCallback,
			args: []
		};
		return oEvent;
	};

	VariantManagement.prototype._handleNextEvent = function() {
		if (this.aEvents.length > 0) {
			if (!this.bEventRunning) {
				this.bEventRunning = true;
				var nextEvent = this.aEvents.pop();
				nextEvent.fFunc.apply(this, nextEvent.args);
			}
			// else {
			// if(bShow)
			// // console.log("Event still running");
			// }
			// } else {
			// // console.log("No Events to process");
		}
	};

	VariantManagement.prototype._addEvent = function(oEvent) {
		this.aEvents.push(oEvent);
		this._handleNextEvent();
	};

	VariantManagement.prototype._cancelAllEvents = function() {
		this.aEvents = [];
		this.bEventRunning = false;
	};

	VariantManagement.prototype._eventDone = function() {
		this.bEventRunning = false;
		this._handleNextEvent();
	};

	VariantManagement.prototype._handleManageExecuteOnSelectionChanged = function(oCheckBox) {
		var that = this;
		var oManageItem = oCheckBox.getParent();
		if (oManageItem.getGlobal()) {
			var fOkay = function(sPackage, sTransport) {
				oManageItem.setLifecyclePackage(sPackage);
				oManageItem.setLifecycleTransportId(sTransport);
				that._eventDone();
			};
			var fError = function(oResult) {
				oCheckBox.setSelected(!oCheckBox.getSelected());
				that._cancelAllEvents();
			};

			this._createManagementDialog();
			this._assignTransport(oManageItem, fOkay, fError, this.oManagementDialog);
		} else {
			this._eventDone();
		}
	};

	VariantManagement.prototype._handleManageDeletePressed = function(oButton) {
		var that = this, oStandardItem;

		var fgetStandardEntry = function() {
			var oStandardItem = null, aItems = that.oManagementTable.getItems();
			aItems.some(function(oEntry) {
				if (oEntry.getKey() === that.getStandardVariantKey()) {
					oStandardItem = oEntry;
					return true;
				}
			});

			return oStandardItem;
		};

		if (!this._anyInErrorState(this.oManagementTable, oButton.getParent().getCells()[VariantManagement.NAME_COLUMN])) {
			this.oManagementSave.setEnabled(true);
		}

		oStandardItem = fgetStandardEntry();

		var oItem = oButton.getParent();
		if (oItem.getGlobal()) {

			var fOkay = function(sPackage, sTransport) {
				var sKey = oItem.getKey();
				that.aRemovedVariants.push(sKey);
				that.oManagementTable.removeItem(oItem);
				if (that.getShowSetAsDefault()) {
					if ((oItem.getKey() === that.sNewDefaultKey)) {
						if (oStandardItem) {
							oStandardItem.getCells()[VariantManagement.DEF_COLUMN].setSelected(true);
							oStandardItem.getCells()[VariantManagement.DEF_COLUMN].fireSelect({
								selected: true
							});
						} else {
							that.setStandardVariantKey(that.STANDARDVARIANTKEY);
						}
						that.sNewDefaultKey = that.getStandardVariantKey();
					}
				}
				oItem.destroy();
				var oTransportAssignment = {
					key: sKey,
					transport: sTransport
				};
				that.aRemovedVariantTransports.push(oTransportAssignment);
				that._eventDone();
			};
			var fError = function(oResult) {
				that._cancelAllEvents();
			};

			this._createManagementDialog();
			this._assignTransport(oItem, fOkay, fError, this.oManagementDialog);
		} else {
			this.aRemovedVariants.push(oItem.getKey());
			this.oManagementTable.removeItem(oItem);
			if (this.getShowSetAsDefault()) {
				if (oItem.getKey() === this.sNewDefaultKey) {
					if (oStandardItem) {
						oStandardItem.getCells()[VariantManagement.DEF_COLUMN].setSelected(true);
						oStandardItem.getCells()[VariantManagement.DEF_COLUMN].fireSelect({
							selected: true
						});
					}
					this.sNewDefaultKey = this.getStandardVariantKey();
				}
			}
			oItem.destroy();
			this._eventDone();
		}

		var oCancelButton = sap.ui.getCore().byId(this.getId() + "-managementcancel");
		if (oCancelButton) {
			oCancelButton.focus();
		}
	};

	VariantManagement.prototype._handleShareSelected = function(oControlEvent) {
		var that = this;

		if (oControlEvent.getParameters().selected) {
			var fOkay = function(sPackage, sTransport) {
				that.sTransport = sTransport;
				that.sPackage = sPackage;
				that._eventDone();
			};
			var fError = function(oResult) {
				that.oShare.setSelected(false);
				that.sTransport = null;
				that.sPackage = null;
				that._cancelAllEvents();
			};

			this._createSaveDialog();
			this._assignTransport(null, fOkay, fError, this.oSaveDialog);
		} else {
			this.sTransport = null;
			this.sPackage = null;
			this._eventDone();
		}
	};

	VariantManagement.prototype._handleVariantSaveAs = function() {
		var sKey = "SV" + new Date().getTime();
		var sName = this.oInputName.getValue();
		var sManualKey = this.oInputKey.getValue();
		var sTransport = "";
		var sPackage = "";
		var bExecuteOnSelect = false;
		var bCreateTile = false;
		var oItem = null;
		sName = sName.trim();
		if (sName == "") {
			this.oInputName.setValueState(ValueState.Error);
			this.oInputName.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
			this._cancelAllEvents();
			return;
		}
		sManualKey = sManualKey.trim();
		if (this.bManualVariantKey && sManualKey == "") {
			this.oInputKey.setValueState(ValueState.Error);
			this.oInputKey.setValueStateText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_ERROR_EMPTY"));
			this._cancelAllEvents();
			return;
		}
		if (this.bManualVariantKey) {
			sKey = sManualKey;
		}

		if (this.oSaveDialog) {
			this.oSaveDialog.close();
		}
		if (this.oExecuteOnSelect !== null) {
			bExecuteOnSelect = this.oExecuteOnSelect.getSelected();
		}
		if (this.oCreateTile !== null) {
			bCreateTile = this.oCreateTile.getSelected();
		}
		if (this.bVariantItemMode) {
			oItem = new VariantItem({
				key: sKey,
				// text: sName, issue with curly brackets
				readOnly: false,
				executeOnSelection: bExecuteOnSelect,
				global: this.oShare.getSelected(),
				lifecycleTransportId: this.sTransport,
				lifecyclePackage: this.sPackage
			});
			oItem.setText(sName);
			this.addVariantItem(oItem);
			this._setSelectedItem(oItem);
		} else {
			oItem = new Item({
				key: sKey
			// , text: sName // issues with curly brackets
			});
			oItem.setText(sName);

			this.addItem(oItem);
			this._setSelectedItem(oItem);
		}
		if (this.oDefault.getSelected()) {
			this.setDefaultVariantKey(sKey);
		}
		if (this.oShare.getSelected()) {
			sPackage = this.sPackage;
			sTransport = this.sTransport;
		}
		this._manageButtonState();
		this.fireSave({
			name: sName,
			overwrite: false,
			def: this.oDefault.getSelected(),
			key: sKey,
			exe: this.oExecuteOnSelect.getSelected(),
			tile: bCreateTile,
			global: this.oShare.getSelected(),
			lifecyclePackage: sPackage,
			lifecycleTransportId: sTransport
		});
		this.oModel.setProperty("/enabled", false);
		this._eventDone();
	};

	/**
	 * Defines the internal mode. The VariantManagement is able to support two different modes:<br>
	 * 1. the mode with standard entry displayed as 'Default' and<br>
	 * 2. the mode with standard entry displayed as 'Standard'.<br>
	 * The 'Default* display is the initial mode.<br>
	 * <code>Note:</code> this method has to be executed, before any items are assigned to the VariantManagement control!
	 * @public
	 * @since 1.48.0
	 * @param {boolean} bFlag defines the behavior: <code>true</code> new mode, otherwize 'old' mode.
	 */
	VariantManagement.prototype.setBackwardCompatibility = function(bFlag) {
		this._setBackwardCompatibility(bFlag);
	};

	VariantManagement.prototype._setBackwardCompatibility = function(bFlag) {
		if (this.getItems().length === 0 && this.getVariantItems().length === 0) {
			this.bVariantItemMode = !bFlag;
		}
		this._setStandardText();
	};

	VariantManagement.prototype._setStandardText = function() {
		var sKey = this.getSelectionKey();
		if (sKey === null || sKey === this.getStandardVariantKey()) {
			if (this.bVariantItemMode == false) {
				this._setVariantText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT"));
			} else {
				this._setVariantText(this.oResourceBundle.getText("VARIANT_MANAGEMENT_STANDARD"));
			}
			if (this.getStandardItemText() !== null && this.getStandardItemText() != "") {
				this._setVariantText(this.getStandardItemText());
			}
		}
	};

	VariantManagement.prototype._setVariantText = function(sText) {

		var oModel, oBInfo, sValue = sText;

		if (this.extractBindingInfo) {
			oBInfo = this.extractBindingInfo(sText);
		}

		if ((typeof oBInfo === "object") && oBInfo.model && oBInfo.path) {
			oModel = this.getModel(oBInfo.model);
			if (oModel) {
				sValue = oModel.getProperty(oBInfo.path);
			}
		}

		this.oModel.setProperty("/selectedVariant", sValue);
	};

	VariantManagement.prototype._getVariantText = function(sText) {
		return this.oModel.getProperty("/selectedVariant");
	};

	VariantManagement.prototype._updateVariantInvisibletext = function(sText, bValue) {
// var sText = this.oVariantText.getText();
// if (this.oVariantModifiedText && this.oVariantModifiedText.getVisible()) {
// sText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_MODIFIED", [
// sText
// ]);
// }
// this.oVariantInvisbletext.setText(sText, true);

		if (bValue) {
			sText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_MODIFIED", [
				sText
			]);
		}

		return sText;
	};

	VariantManagement.prototype._openVariantManagementDialog = function() {
		var oItem;
		var oItems = null;
		var iItemNo = 0;
		var oManageItem;
		var oNameCell;
		var oTypeCell;
		var oDefaultCell;
		var oExecuteCell;
		var oDeleteCell;
		var sTypeText;
		var sTooltip;
		var fLiveChange, fChange, fSelectRB, fSelectCB, fSelectFav, fPress;

		var that = this;

		this._mFavoriteChanges = {};

		this.oManagementSave.setEnabled(true);

		this.oManagementTable.destroyItems();

		fLiveChange = function(oControlEvent) {
			that._checkVariantNameConstraints(this, that.oManagementSave, that.oManagementTable);
		};

		fChange = function(oControlEvent) {
			var oEvent = that._createEvent("inputfieldChange", that._checkManageItemNameChange);
			oEvent.args.push(this.getParent());
			that._addEvent(oEvent);
		};

		fSelectFav = function(oControlEvent) {
			var bSelected = (oControlEvent.getParameters().selected === true), oItem = this.getParent();
			if (oItem) {
				that._mFavoriteChanges[oItem.getKey()] = bSelected;
			}
		};

		fSelectRB = function(oControlEvent) {
			var bSelected = (oControlEvent.getParameters().selected === true), oItem = this.getParent();
			if (oItem) {

				if (bSelected) {
					that.sNewDefaultKey = oItem.getKey();
					that._mFavoriteChanges[oItem.getKey()] = bSelected;
				} else {
					if (oItem.getFavorite && that._mFavoriteChanges.hasOwnProperty(oItem.getKey()) && that._mFavoriteChanges[oItem.getKey()] !== oItem.getFavorite()) {
						delete that._mFavoriteChanges[oItem.getKey()];
					}
				}

				var oFavCtrl = oItem.getCells()[VariantManagement.FAV_COLUMN];
				if (oFavCtrl && oItem.getFavorite) {
					if (bSelected) {
						oFavCtrl.setSelected(true);

					} else {
						if (that._mFavoriteChanges[oItem.getKey()] !== undefined) {
							oFavCtrl.setSelected(that._mFavoriteChanges[oItem.getKey()]);
						} else {
							oFavCtrl.setSelected(oItem.getFavorite() === true);
						}
					}

					oFavCtrl.setEditable(!bSelected);
				}
			}
		};

		fSelectCB = function(oControlEvent) {
			var oEvent = that._createEvent("executeOnSelectionChange", that._handleManageExecuteOnSelectionChanged);
			oEvent.args.push(this);
			that._addEvent(oEvent);
		};

		fPress = function(oControlEvent) {
			var oEvent = that._createEvent("manageDeletePressed", that._handleManageDeletePressed);
			oEvent.args.push(this);

			that._addEvent(oEvent);
		};

		if (this.oManageDialogSearchField) {
			this.oManageDialogSearchField.setValue("");
		}

		this._initalizeManagementTableColumns();
		this.sNewDefaultKey = this.getDefaultVariantKey();

		this._restoreCompleteList(true);

		if (this.oVariantList.getItems()[0].getKey() !== this.getStandardVariantKey() && this.bVariantItemMode == false) {
			oItem = new VariantItem(this.oVariantManage.getId() + "-item-standard", {
				key: this.getStandardVariantKey(),
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_DEFAULT"),
				readOnly: true,
				executeOnSelection: false
			});
			this.oVariantList.insertItem(oItem, 0);
		}

		if (this.getUseFavorites()) {

			oItem = this.oVariantList.getItemByKey(this.getStandardVariantKey());
			if (oItem) {
				this.oVariantList.removeItem(oItem);
			}
		}

		oItems = this.oVariantList.getItems();

		if (this.getUseFavorites()) {
			oItems.sort(this._compareItems);
			if (oItem) {
				this.oVariantList.insertItem(oItem);
				oItems.splice(0, 0, oItem);
			}
		}
		for (var iH = 0; iH < oItems.length; iH++) {
			if (oItems[iH].getReadOnly() || oItems[iH].getLabelReadOnly()) {
				var sOptions = oItems[iH].getAccessOptions();
				sTooltip = this._accessOptionsText(sOptions);
			} else {
				sTooltip = null;
			}
			if (oItems[iH].getReadOnly()) {
				sTooltip = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LAYER");
			} else if (oItems[iH].getLabelReadOnly() === true) {
				sTooltip = this.oResourceBundle.getText("VARIANT_MANAGEMENT_WRONG_LANGUAGE");
			}

			if (oItems[iH].getKey() === this.getStandardVariantKey()) {
				sTooltip = null;
			}
			oManageItem = new EditableVariantItem(this.oVariantManage.getId() + "-edit-" + iItemNo, {
				key: oItems[iH].getKey(),
				global: oItems[iH].getGlobal(),
				lifecyclePackage: oItems[iH].getLifecyclePackage(),
				lifecycleTransportId: oItems[iH].getLifecycleTransportId(),
				namespace: oItems[iH].getNamespace(),
				labelReadOnly: oItems[iH].getLabelReadOnly(),
				author: oItems[iH].getAuthor(),
				favorite: oItems[iH].getFavorite(),
				vAlign: VerticalAlign.Middle
			});

			// Favorites column
			oNameCell = new CheckBox(this.oVariantManage.getId() + "-fav-" + iItemNo, {
				select: fSelectFav
			});
			if (oItems[iH].getFavorite) {
				oNameCell.setSelected(oItems[iH].getFavorite() === true);
//
// if (oItems[iH].getKey() === this.getSelectionKey()) {
// oNameCell.setEditable(false);
// }

			}
			oManageItem.addCell(oNameCell);

			// name column
			if (oItems[iH].getKey() === this.getStandardVariantKey() || oItems[iH].getReadOnly() === true || oItems[iH].getLabelReadOnly() === true) {
				oNameCell = new ObjectIdentifier(this.oVariantManage.getId() + "-text-" + iItemNo, {
				// title: oItems[iH].getText() // issue with curly brackets
				});
				oNameCell.setTitle(oItems[iH].getText());

				// oNameCell.addStyleClass("sapUICompVarMngmtLbl");
				if (sTooltip) {
					oNameCell.setTooltip(sTooltip);
				}
			} else {
				oNameCell = new Input(this.oVariantManage.getId() + "-input-" + iItemNo, {
					liveChange: fLiveChange,
					change: fChange
				});

				oNameCell.setValue(oItems[iH].getText());
			}
			oManageItem.addCell(oNameCell);

			// if (this.getShowShare()) {
			if (oItems[iH].getGlobal()) {
				sTypeText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_SHARED");
			} else {
				sTypeText = this.oResourceBundle.getText("VARIANT_MANAGEMENT_PRIVATE");
			}
			oTypeCell = new Text(this.oVariantManage.getId() + "-type-" + iItemNo, {
				text: sTypeText,
				wrapping: false
			});
			oTypeCell.addStyleClass("sapUICompVarMngmtType");
			oManageItem.addCell(oTypeCell);
			// }

			// if (this.getShowSetAsDefault()) {
			oDefaultCell = new RadioButton(this.oVariantManage.getId() + "-def-" + iItemNo, {
				groupName: this.oVariantManage.getId(),
				select: fSelectRB
			});

			if (this.sNewDefaultKey === oItems[iH].getKey() || oItems[iH].getKey() === this.getStandardVariantKey() && this.sNewDefaultKey === "") {
				oDefaultCell.setSelected(true);

				if (oItems[iH].getFavorite) {
					oManageItem.getCells()[0].setSelected(true);
					oManageItem.getCells()[0].setEditable(false);
				}

			}
			oManageItem.addCell(oDefaultCell);
			// }

			// if (this.getShowExecuteOnSelection()) {
			oExecuteCell = new CheckBox(this.oVariantManage.getId() + "-exe-" + iItemNo, {
				selected: false,
				enabled: false,
				select: fSelectCB
			});
			if (oItems[iH].getExecuteOnSelection) {
				if ((oItems[iH].getKey() === this.getStandardVariantKey() && this.getSupportExecuteOnSelectOnSandardVariant())) {
					oExecuteCell.setEnabled(true);
				} else {
					oExecuteCell.setEnabled(!oItems[iH].getReadOnly());
				}
				oExecuteCell.setSelected(oItems[iH].getExecuteOnSelection());
				if (sTooltip) {
					oExecuteCell.setTooltip(sTooltip);
				}
			}
			oManageItem.addCell(oExecuteCell);
			// }

			oTypeCell = new Text(this.oVariantManage.getId() + "-author-" + iItemNo, {
				text: oItems[iH].getAuthor(),
				textAlign: "Begin"
			});
			oManageItem.addCell(oTypeCell);

			oDeleteCell = new Button(this.oVariantManage.getId() + "-del-" + iItemNo, {
				icon: "sap-icon://sys-cancel",
				enabled: true,
				type: ButtonType.Transparent,
				press: fPress,
				tooltip: this.oResourceBundle.getText("VARIANT_MANAGEMENT_DELETE")
			});

			this._assignColumnInfoForDeleteButton(oDeleteCell);

			if (oItems[iH].getReadOnly && oItems[iH].getReadOnly()) {
				oDeleteCell.setEnabled(false);

				// FIORITECHP1-3560
				oDeleteCell.setVisible(false);
			}
			oManageItem.addCell(oDeleteCell);

			this.oManagementTable.addItem(oManageItem);
			iItemNo++;
		}

		this.aRemovedVariants = [];
		this.aRemovedVariantTransports = [];
		this.aRenamedVariants = [];

		this.aExeVariants = [];

		this._createManagementDialog();
		this._setDialogCompactStyle(this, this.oManagementDialog);
		oItem = this.oVariantList.getSelectedItem();
		if (oItem) {
			this.lastSelectedVariantKey = oItem.getKey();
		}
		this.oVariantPopOver.close();
		this.oManagementDialog.open();
	};

	VariantManagement.prototype._assignColumnInfoForDeleteButton = function(oDeleteButton) {
		if (!this._oInvisibleDeleteColumnName) {
			this._oInvisibleDeleteColumnName = new InvisibleText({
				text: this.oResourceBundle.getText("VARIANT_MANAGEMENT_ACTION_COLUMN")
			});

			this._createManagementDialog();
			this.oManagementDialog.addContent(this._oInvisibleDeleteColumnName);

		}

		if (this._oInvisibleDeleteColumnName) {
			oDeleteButton.addAriaLabelledBy(this._oInvisibleDeleteColumnName);
		}
	};

	VariantManagement.prototype._enableManualVariantKey = function(bEnable) {
		this.bManualVariantKey = bEnable;
	};

	VariantManagement.prototype._fireSelectAsync = function(sKey) {
		var slKey;
		if (sKey === undefined || sKey === null) {
			var oItem = this._getSelectedItem();
			if (oItem === null) {
				slKey = this.getStandardVariantKey();
			} else {
				slKey = oItem.getKey();
			}
		}
		this.fireSelect({
			key: slKey
		});
	};

	VariantManagement.prototype.setSupportExecuteOnSelectOnSandardVariant = function(bFlag) {
		this.bSupportExecuteOnSelectOnSandardVariant = bFlag;
	};
	VariantManagement.prototype.getSupportExecuteOnSelectOnSandardVariant = function() {
		return this.bSupportExecuteOnSelectOnSandardVariant;
	};

	VariantManagement.prototype._executeOnSelectForStandardVariantByXML = function(bSelect) {
		this.bExecuteOnSelectForStandardViaXML = bSelect;
	};

	VariantManagement.prototype._executeOnSelectForStandardVariantByUser = function(bSelect) {
		this.bExecuteOnSelectForStandardByUser = bSelect;
	};

	VariantManagement.prototype.getExecuteOnSelectForStandardVariant = function() {

		if (this.getSupportExecuteOnSelectOnSandardVariant()) {
			if (this.bExecuteOnSelectForStandardByUser !== null) {
				return this.bExecuteOnSelectForStandardByUser;
			}
		}

		return this.bExecuteOnSelectForStandardViaXML;
	};

	VariantManagement.prototype.getStandardVariantKey = function() {
		return this._sStandardVariantKey;
	};

	VariantManagement.prototype.setStandardVariantKey = function(sStandardVariantKey) {
		this._sStandardVariantKey = sStandardVariantKey;
	};

	VariantManagement.prototype._setVendorLayer = function(bVendorLayer) {
		this._isVendorLayer = bVendorLayer;
	};

	VariantManagement.prototype.setStandardFavorite = function(bFavorite) {
		this._isFavorite = bFavorite;
	};
	VariantManagement.prototype.getStandardFavorite = function() {
		return this._isFavorite;
	};

	VariantManagement.prototype._isIndustrySolutionModeAndVendorLayer = function() {
		if (this.getIndustrySolutionMode() && this._isVendorLayer) {
			return true;
		}

		return false;
	};

	return VariantManagement;

}, /* bExport= */true);

}; // end of sap/ui/comp/variants/VariantManagement.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.config.condition.DateRangeType') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides sap.ui.comp.config.condition.DateRangeType.
jQuery.sap.declare('sap.ui.comp.config.condition.DateRangeType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.DateRangeSelection'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.date.UniversalDate'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LocaleData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.Filter'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/config/condition/DateRangeType",[
	'jquery.sap.global', 'sap/ui/comp/config/condition/Type', 'sap/m/Input', 'sap/m/DateRangeSelection', 'sap/m/DatePicker', 'sap/m/Text', 'sap/m/Select', 'sap/ui/core/date/UniversalDate', 'sap/ui/core/Locale', 'sap/ui/core/LocaleData', 'sap/ui/model/odata/Filter'
], function(jQuery, Type, Input, DateRangeSelection, DatePicker, Text, Select, UniversalDate, Locale, LocaleData, Filter) {
	"use strict";

	sap.ui.model.type.Integer.extend("sap.ui.model.type.NullableInteger", {
		parseValue: function(oValue, sInternalType) {
			switch (this.getPrimitiveType(sInternalType)) {
				case "string":
					if (oValue === "") {
						return null;
					}
			}

			return sap.ui.model.type.Integer.prototype.parseValue.apply(this, arguments);
		}
	});


	var DateRangeType = Type.extend("sap.ui.comp.config.condition.DateRangeType", /** @lends "sap.ui.comp.config.condition.DateRangeType.prototype */ {
		constructor: function(sFieldName, oFilterProvider, oFieldViewMetadata) {
			Type.apply(this, [
				sFieldName, oFilterProvider, oFieldViewMetadata
			]);
			this.oDateFormat = oFilterProvider && oFilterProvider._oDateFormatSettings ? oFilterProvider._oDateFormatSettings : {
				UTC: true
			};

			this._bIgnoreTime = false;
			this._maxIntValue = 10000; // max int value for "LAST/NEXT X DAYS/MONTH...." operators
			this.bMandatory = this.oFieldMetadata ? this.oFieldMetadata.isMandatory : false;
		}
	});

	DateRangeType.prototype.applySettings = function(oSettings) {
		Type.prototype.applySettings.apply(this, arguments);

		if (oSettings && oSettings.ignoreTime) {
			this._bIgnoreTime = oSettings.ignoreTime;
		}
	};


	/**
	 * Sets and returns the given date with the start time 00:00:00.000 UTC
	 *
	 * @param {UniversalDate} oDate the date
	 * @returns {UniversalDate} the given date with the start time 00:00:00.000 UTC
	 */
	DateRangeType.setStartTime = function(oDate) {
		if (oDate instanceof Date) {
			oDate = new UniversalDate(oDate);
		}
		if (!oDate) {
			oDate = new UniversalDate();
		}
		oDate.setHours(0);
		oDate.setMinutes(0);
		oDate.setSeconds(0);
		oDate.setMilliseconds(0);
		return oDate;
	};

	/**
	 * Sets and returns the given date with the end time 23:59:59.999 UTC
	 *
	 * @param {UniversalDate} oDate the date
	 * @returns {UniversalDate} the given date with the end time 23:59:59.999 UTC
	 */
	DateRangeType.setEndTime = function(oDate) {
		oDate = DateRangeType.toUniversalDate(oDate);
		oDate.setHours(23);
		oDate.setMinutes(59);
		oDate.setSeconds(59);
		oDate.setMilliseconds(999);
		return oDate;
	};

	DateRangeType.toUniversalDate = function(oDate) {
		if (oDate instanceof Date) {
			oDate = new UniversalDate(oDate);
		}
		if (!oDate) {
			oDate = new UniversalDate();
		}
		return oDate;
	};

	/**
	 * Returns the weeks start date of a given universal date based on the locale and format settings
	 */
	DateRangeType.getWeekStartDate = function(oUniversalDate) {
		var oLocale = new Locale(sap.ui.getCore().getConfiguration().getFormatSettings().getFormatLocale().toString()),
			oLocaleData = LocaleData.getInstance(oLocale),
			iFirstDayOfWeek = oLocaleData.getFirstDayOfWeek();
		if (!oUniversalDate) {
			oUniversalDate = new UniversalDate();
		}
		oUniversalDate.setDate(oUniversalDate.getDate() - oUniversalDate.getDay() + iFirstDayOfWeek);
		return DateRangeType.setStartTime(oUniversalDate);
	};

	/**
	 * Returns the month start date of a given universal date
	 */
	DateRangeType.getMonthStartDate = function(oUniversalDate) {
		if (!oUniversalDate) {
			oUniversalDate = new UniversalDate();
		}
		oUniversalDate.setDate(1);
		return DateRangeType.setStartTime(oUniversalDate);
	};

	/**
	 * Returns the quarter start date of a given universal date
	 */
	DateRangeType.getQuarterStartDate = function(oUniversalDate) {
		if (!oUniversalDate) {
			oUniversalDate = new UniversalDate();
		}
		oUniversalDate.setMonth(3 * Math.floor(oUniversalDate.getMonth() / 3));
		oUniversalDate.setDate(1);
		return DateRangeType.setStartTime(oUniversalDate);
	};

	/**
	 * Returns the years start date of a given universal date. If no date is given, today is used.
	 *
	 * @param {sap.ui.core.date.UniversalDate} [oUniversalDate] the universal date
	 * @returns the years start date of a given universal date.
	 * @public
	 */
	DateRangeType.getYearStartDate = function(oUniversalDate) {
		if (!oUniversalDate) {
			oUniversalDate = new UniversalDate();
		}
		oUniversalDate.setMonth(0);
		oUniversalDate.setDate(1);
		return DateRangeType.setStartTime(oUniversalDate);
	};

	/**
	 * Returns an array of a date range based on the given universal date If no date is given, today is used.
	 *
	 * @param {int} iValue positive and negative values to calculate the date range
	 * @param {string} sType defines the range that the iValue refers to ("DAY","WEEK","MONTH","QUARTER","YEAR")
	 * @param {sap.ui.core.date.UniversalDate} [oUniversalDate] the universal date
	 * @param {boolean} bCalcBaseStartDate calculate start date even if Date is provided
	 * @param {boolean} bIgnoreCurrentInterval If iValue > 0 the start date is the begin of the next interval
	 * @returns {sap.ui.core.date.UniversalDate[]} array with 2 values where [0] is the start and [1] is the end date for the range
	 * @public
	 */
	DateRangeType.getDateRange = function(iValue, sType, oUniversalDate, bCalcBaseStartDate, bIgnoreCurrentInterval) {
		if (oUniversalDate === true) {
			bCalcBaseStartDate = true;
			oUniversalDate = null;
		}
		if (!oUniversalDate) {
			oUniversalDate = new UniversalDate();
		} else if (!(oUniversalDate instanceof UniversalDate)) {
			throw new Error("Date must be a UniversalDate object " + this);
		}

		var oStartDate = new UniversalDate(),
			oEndDate;
		if (oUniversalDate) {
			oStartDate.getJSDate().setTime(oUniversalDate.getTime());
			oStartDate = DateRangeType.setStartTime(oStartDate);
		}
		if (iValue !== 0 && !isNaN(iValue)) {
			if (sType === "DAY") {
				if (bIgnoreCurrentInterval && iValue > 0) {
					oStartDate.setDate(oStartDate.getDate() + 1);
				}
				oEndDate = new UniversalDate(oStartDate);
				oEndDate.setDate(oStartDate.getDate() + iValue);
			} else if (sType === "WEEK") {
				if (bCalcBaseStartDate) {
					oStartDate = DateRangeType.getWeekStartDate(oStartDate);
				}
				if (bIgnoreCurrentInterval && iValue > 0) {
					oStartDate.setDate(oStartDate.getDate() + 7);
				}
				oEndDate = new UniversalDate(oStartDate);
				oEndDate.setDate(oStartDate.getDate() + (iValue * 7));
			} else if (sType === "MONTH") {
				if (bCalcBaseStartDate) {
					oStartDate = DateRangeType.getMonthStartDate(oStartDate);
				}
				if (bIgnoreCurrentInterval && iValue > 0) {
					oStartDate.setMonth(oStartDate.getMonth() + 1);
				}
				oEndDate = new UniversalDate(oStartDate);
				oEndDate.setMonth(oStartDate.getMonth() + iValue);
			} else if (sType === "QUARTER") {
				if (bCalcBaseStartDate) {
					oStartDate = DateRangeType.getQuarterStartDate(oStartDate);
				}
				if (bIgnoreCurrentInterval && iValue > 0) {
					oStartDate.setMonth(oStartDate.getMonth() + 3);
				}
				oEndDate = new UniversalDate(oStartDate);
				oEndDate.setMonth(oStartDate.getMonth() + (iValue * 3));
			} else if (sType === "YEAR") {
				if (bCalcBaseStartDate) {
					oStartDate = DateRangeType.getYearStartDate(oStartDate);
				}
				if (bIgnoreCurrentInterval && iValue > 0) {
					oStartDate.setFullYear(oStartDate.getFullYear() + 1);
				}
				oEndDate = new UniversalDate(oStartDate);
				oEndDate.setFullYear(oStartDate.getFullYear() + iValue);
			}
		}
		if (!oEndDate) {
			return [];
		}
		if (oEndDate.getTime() < oStartDate.getTime()) {
			// swap start/end date
			oEndDate = [oStartDate, oStartDate = oEndDate][0];
		}

		// adjust endDate
		oEndDate.setDate(oEndDate.getDate() - 1);

		return [
			DateRangeType.setStartTime(oStartDate), DateRangeType.setEndTime(oEndDate)
		];
	};

	DateRangeType.getTextField = function(oInstance, bExpression) {
		if (bExpression) {
			return new Text(Type._createStableId(oInstance, "text"), {
				text: "{path: '$smartEntityFilter>value1', type:'sap.ui.model.type.Date', formatOptions:" + JSON.stringify({
					style: oInstance.oDateFormat.style,
					pattern: oInstance.oDateFormat.pattern
				}) + "} - {path: '$smartEntityFilter>value2', type:'sap.ui.model.type.Date', formatOptions:" + JSON.stringify({
					style: oInstance.oDateFormat.style,
					pattern: oInstance.oDateFormat.pattern
				}) + "}"
			});
		}
		return new Text(Type._createStableId(oInstance, "text"), {
			text: {
				path: '$smartEntityFilter>value1',
				type: 'sap.ui.model.type.Date',
				formatOptions: {
					style: oInstance.oDateFormat.style,
					pattern: oInstance.oDateFormat.pattern
				}
			}
		});
	};

	DateRangeType.getIntField = function(oInstance) {
		return new Input(Type._createStableId(oInstance, "field"), {
			ariaLabelledBy: oInstance.oOperationSelect || null,
			value: {
				path: "$smartEntityFilter>value1",
				type: new sap.ui.model.type.NullableInteger({}, { minimum: 0, maximum: oInstance._maxIntValue })
			},
			textAlign: "End",
			//type: "Number",
			width: "100%"
		});
	};

	DateRangeType.ControlFactory = function(oInstance, aResult, oOperation) {
		if (oOperation.type === "range") {
			var oControl = DateRangeType.getTextField(oInstance, oOperation.display !== "start");
			oControl.addStyleClass("sapUiCompFilterBarCTPaddingTop");
			aResult.push(oControl);
			return;
		}
		if (oOperation.type === "int") {
			var oControl = DateRangeType.getIntField(oInstance);
			aResult.push(oControl);
			if (oOperation.descriptionTextKeys) {
				oControl.setFieldWidth("auto");
				oControl.bindProperty("description", {
					path: "$smartEntityFilter>value1",
					type: "sap.ui.model.type.Integer",
					formatter: function() {
						var sTextKey = oOperation.descriptionTextKeys[0];
						var sTextMulti = oOperation.descriptionTextKeys[1];
						if (this.getBinding("description").getValue() === 1) {
							return Type.getTranslatedText(sTextKey);
						} else {
							return Type.getTranslatedText(sTextMulti || sTextKey);
						}
					}
				});
			}
		}
	};

	DateRangeType._defaultOnChangeHandler = function(sValue, oInstance) {
		//console.log("---> onChange :" + sValue);

		if (sValue.toLowerCase() === this.languageText.toLowerCase()) {
			oInstance.oModel.setProperty("/condition/operation", this.key);
			oInstance.oModel.setProperty("inputstate", "NONE", oInstance.getContext());

			if (this.category.indexOf("FIXED") !== 0) {
				//oInstance._toggleOpen();
				oInstance.oModel.setProperty("inputstate", "ERROR", oInstance.getContext());
			}

			return true;
		}
		return false;
	};

	DateRangeType._IntOnChangeHandler = function(sValue, oInstance) {
		if (this.basicLanguageText.indexOf("{0}") >= 0) {
			var rx = new RegExp(this.basicLanguageText.replace("{0}", "[a-zA-Z0-9_]+") + "$", 'i');
			if (sValue.match(rx)) {
				//jQuery.sap.log.debug("DateRangeType -->>> ", oOperation.languageText + " found!");

				var xPos = this.basicLanguageText.indexOf("{0}");
				if (xPos >= 0) {
					var n1 = this.basicLanguageText.length - xPos;
					sValue = sValue.slice(0, sValue.length - n1 + 3);
					sValue = sValue.slice(xPos);
					//jQuery.sap.log.debug("DateRangeType Value ", sValue);
					var iValue = parseInt(sValue, 10);

					if (!isNaN(iValue) && iValue <= oInstance._maxIntValue) {
						oInstance.oModel.setProperty("/condition/operation", this.key);
						oInstance.oModel.setProperty("/condition/value1", iValue);
						oInstance.oModel.setProperty("inputstate", "NONE", oInstance.getContext());
					} else {
						oInstance.oModel.setProperty("inputstate", "ERROR", oInstance.getContext());
					}
					return true;
				}
			}
		}
		return false;
	};

	DateRangeType._DateOnChangeHandler = function(sValue, oInstance) {
		if (sValue.toLowerCase().indexOf(this.languageText.toLowerCase()) === 0) {
			var s = sValue.slice(this.languageText.length);
			if (s.length > 0 && s[0] === " ") {
				s = s.trim();
				if (s[0] === "(" && s[s.length - 1] === ")") {
					s = s.slice(1, s.length - 1);
				}

				var oDateFormatter = oInstance._getDateFormatter(true);
				var oDate = oDateFormatter.parse(s);

				if (oDate) {
					oInstance.oModel.setProperty("/condition/operation", this.key);
					oInstance.oModel.setProperty("/condition/value1", oDate);
					oInstance.oModel.setProperty("inputstate", "NONE", oInstance.getContext());
				} else {
					oInstance.oModel.setProperty("inputstate", "ERROR", oInstance.getContext());
				}

				return true;
			}
		}
		return false;
	};

	DateRangeType._DateRangeOnChangeHandler = function(sValue, oInstance) {
		if (sValue.toLowerCase().indexOf(this.languageText.toLowerCase()) === 0) {
			var s = sValue.slice(this.languageText.length).trim();
			if (s[0] === "(" && s[s.length - 1] === ")") {
				s = s.slice(1, s.length - 1);
			}
			var sValue1 = s.split("-")[0];
			var sValue2 = s.split("-")[1];

			var oDateFormatter = oInstance._getDateFormatter(true);
			var oDate1 = oDateFormatter.parse(sValue1);
			var oDate2 = oDateFormatter.parse(sValue2);

			if (oDate1 && oDate2) {
				oInstance.oModel.setProperty("/condition/operation", this.key);
				oInstance.oModel.setProperty("/condition/value1", oDate1);
				oInstance.oModel.setProperty("/condition/value2", oDate2);
				oInstance.oModel.setProperty("inputstate", "NONE", oInstance.getContext());
			} else {
				oInstance.oModel.setProperty("inputstate", "ERROR", oInstance.getContext());
			}

			return true;
		}
		return false;
	};

	DateRangeType._MonthOnChangeHandler = function(sValue, oInstance) {
		var sMonth;
		var bResult = false;

		if (sValue.toLowerCase().indexOf(this.languageText.toLowerCase()) === 0) {
			sMonth = sValue.slice(this.languageText.length).trim();
			if (sMonth.indexOf("(") == 0) {
				sMonth = sMonth.slice(1);
				sMonth = sMonth.slice(0, sMonth.length - 1);
			}
			bResult = true;
		} else {
			sMonth = sValue;
		}

		var aMonth = this.getValueList();
		var iMonthIndex = -1;
		aMonth.some(function(oItem, index) {
			var bResult = oItem.text.toLowerCase() === sMonth.toLowerCase();
			if (bResult) {
				iMonthIndex = index;
			}
			return bResult;
		});

		if (iMonthIndex > -1) {
			oInstance.oModel.setProperty("/condition/operation", this.key);
			oInstance.oModel.setProperty("/condition/value1", iMonthIndex);
			oInstance.oModel.setProperty("inputstate", "NONE", oInstance.getContext());
			return true;
		} else {
			if (bResult) {
				oInstance.oModel.setProperty("inputstate", "ERROR", oInstance.getContext());
			}
			return bResult;
		}
	};

	DateRangeType._DefaultFilterSuggestItem = function(sValue, oItem, oInstance) {
		var bMatch = false;
		if (jQuery.sap.startsWithIgnoreCase(this.languageText.toLowerCase(), sValue.toLowerCase())) {
			bMatch = true;
		} else {
			var aWords = this.languageText.split(" ");
			for (var i = 0; i < aWords.length; i++) {
				var sWord = aWords[i];
				if (jQuery.sap.startsWithIgnoreCase(sWord.toLowerCase(), sValue.toLowerCase())) {
					bMatch = true;
				}
			}
		}

		oItem.setAdditionalText(this.textValue);
		oItem.setText(this.languageText);
		return bMatch;
	};

	DateRangeType._HideFilterSuggestItem = function(sValue, oItem, oInstance) {
		return false;
	};

	DateRangeType._IntFilterSuggestItem = function(sValue, oItem, oInstance) {
		var xPos = this.basicLanguageText.indexOf("{0}");
		var sPart1;
		var sPart2;
		if (xPos >= 0) {
			sPart1 = this.basicLanguageText.slice(0, xPos).trim();
			sPart2 = this.basicLanguageText.slice(xPos + 3).trim();
		}

		var aParts = sValue.split(" ");
		if (aParts.length < 1 || aParts.length > 3) {
			return false;
		}
		var bMatch = false;
		var sNumber;
		var isValidNumber = function(sValue) {
			return !!sValue.match(/(?!(0))(^[0-9]+$)/) && parseInt(sValue, 10) > 0;
		};

		if (jQuery.sap.startsWithIgnoreCase(sPart1.toLowerCase(), aParts[0].toLowerCase())) {
			// starts with the first word
			if (aParts[1]) {
				if (isValidNumber(aParts[1])) {
					// second part is number
					sNumber = aParts[1];
					if (aParts[2]) {
						if (jQuery.sap.startsWithIgnoreCase(sPart2.toLowerCase(), aParts[2].toLowerCase())) {
							bMatch = true;
						}
					} else {
						bMatch = true;
					}
				}
			} else {
				// only first part -> OK
				bMatch = true;
			}
		} else if (isValidNumber(aParts[0]) && aParts.length < 3) {
			// starts with number
			sNumber = aParts[0];
			if (aParts[1]) {
				if (jQuery.sap.startsWithIgnoreCase(sPart2.toLowerCase(), aParts[1].toLowerCase())) {
					bMatch = true;
				}
			} else {
				// only number -> OK
				bMatch = true;
			}
		} else if (jQuery.sap.startsWithIgnoreCase(sPart2.toLowerCase(), aParts[0].toLowerCase()) && aParts.length == 1) {
			// starts with last word
			bMatch = true;
		}

		if (bMatch && sNumber) {
			var sType;
			switch (this.category) {
				case "DYNAMIC.DATE.INT":
					sType = "DAY";
					break;
				case "DYNAMIC.WEEK.INT":
					sType = "WEEK";
					break;
				case "DYNAMIC.MONTH.INT":
					sType = "MONTH";
					break;
				case "DYNAMIC.QUARTER.INT":
					sType = "QUARTER";
					break;
				case "DYNAMIC.YEAR.INT":
					sType = "YEAR";
					break;

				default:
					sType = "DAY";
					break;
			}

			var iNumber = parseInt(sNumber, 10),
				bFlag = true;

			if (iNumber > oInstance._maxIntValue) {
				bMatch = false;
			}

			if (jQuery.sap.startsWith(this.key, "LAST")) {
				iNumber = iNumber * -1;
				bFlag = false;
			}

			var aDates = DateRangeType.getDateRange(iNumber, sType, true, bFlag, bFlag);

			// if (aDates.length > 0) {
			// 	if (isNaN(aDates[0].getTime())) {
			// 		bMatch = false;
			// 	}
			// 	if (isNaN(aDates[1].getTime())) {
			// 		bMatch = false;
			// 	}
			// }

			var oDateFormatter = oInstance._getDateFormatter(true);
			if (Math.abs(iNumber) === 1 && this.singulareBasicLanguageText) {
				oItem.setText(this.singulareBasicLanguageText);
				if (sType !== "DAY") {
					oItem.setAdditionalText(oDateFormatter.format(aDates[0]) + " - " + oDateFormatter.format(aDates[1]));
				} else {
					oItem.setAdditionalText(oDateFormatter.format(aDates[0]));
				}
			} else {
				oItem.setText(oInstance._fillNumberToText(this.basicLanguageText, sNumber));
				oItem.setAdditionalText(oDateFormatter.format(aDates[0]) + " - " + oDateFormatter.format(aDates[1]));
			}
			oItem._value1 = parseInt(sNumber, 10);
		} else {
			oItem.setAdditionalText(null);
			oItem.setText(this.languageText);
			oItem._value1 = null;
		}
		return bMatch;
	};

	DateRangeType._DateFilterSuggestItem = function(sValue, oItem, oInstance) {
		var oDateFormatter = oInstance._getDateFormatter(true);
		var oDate = oDateFormatter.parse(sValue);

		if (oDate) {
			oItem.setText(this.languageText + " (" + oDateFormatter.format(oDate) + ")");
			oItem._value1 = oDate;
			return true;
		} else {
			oItem.setText(this.languageText);
			oItem._value1 = null;
			return false;
		}
	};

	DateRangeType._DateRangeFilterSuggestItem = function(sValue, oItem, oInstance) {
		var oDateFormatter = oInstance._getDateFormatter(true);
		var oDate1, oDate2;
		var sDelimiter = "-";
		var bValid = false;

		var aDates = sValue.split(sDelimiter);
		if (aDates.length === 2) {
			// if delimiter only appears once in value (not part of date pattern) remove " " to be more flexible for input
			if (aDates[0].slice(aDates[0].length - 1, aDates[0].length) == " ") {
				aDates[0] = aDates[0].slice(0, aDates[0].length - 1);
			}
			if (aDates[1].slice(0, 1) == " ") {
				aDates[1] = aDates[1].slice(1);
			}
		} else {
			aDates = sValue.split(" " + sDelimiter + " "); // Delimiter appears more than once -> try with separators
		}
		if (aDates.length < 2) {
			// no delimiter found -> maybe only " " is used
			var aDates2 = sValue.split(" ");
			if (aDates2.length === 2) {
				aDates = aDates2;
			}
		}

		if (aDates.length >= 1 && aDates.length <= 2) {
			oDate1 = oDateFormatter.parse(aDates[0]);
			if (oDate1) {
				oItem._value1 = oDate1;
				if (aDates.length == 2 && aDates[1] === "") {
					// second date empty - just ignore
					aDates.splice(1, 1);
				}
				if (aDates.length == 2) {
					oDate2 = oDateFormatter.parse(aDates[1]);
					if (oDate2) {
						// start and end date
						oItem._value2 = oDate2;
						bValid = true;
						oItem.setText(this.languageText + " (" + oDateFormatter.format(oDate1) + " " + sDelimiter + " " + oDateFormatter.format(oDate2) + ")");
					}
				} else {
					// only start date
					bValid = true;
					oItem.setText(this.languageText + " (" + oDateFormatter.format(oDate1) + " " + sDelimiter + ")");
				}
			}
		}
		if (!bValid) {
			oItem.setText(this.languageText);
			oItem._value1 = null;
			oItem._value2 = null;
		}

		return bValid;
	};

	DateRangeType._MonthFilterSuggestItem = function(sValue, oItem, oInstance) {
		var bMonthFound = false;
		oItem._value1 = null;
		var aMonths = this.getValueList();
		for (var i = 0; i < aMonths.length; i++) {
			var oMonth = aMonths[i];
			bMonthFound = jQuery.sap.startsWithIgnoreCase(oMonth.text.toLowerCase(), sValue.toLowerCase());
			if (bMonthFound) {
				oItem.setText(this.languageText + " (" + oMonth.text + ")");
				oItem._value1 = i;
				break;
			}
		}
		return bMonthFound;
	};

	DateRangeType._DefaultOnItemSelected = function(sValue, oItem, oInstance) {

		oInstance.oModel.setProperty("/condition/operation", this.key);
		if ("value1" in this) {
			oInstance.oModel.setProperty("/condition/value1", oItem._value1);
		}
		if ("value2" in this) {
			oInstance.oModel.setProperty("/condition/value2", oItem._value2);
		}
		oInstance.oModel.setProperty("inputstate", "NONE", oInstance.getContext());
		oInstance._bSuggestItemSelected = true;

	};

	DateRangeType._IntOnItemSelected = function(sValue, oItem, oInstance) {

		var iNumber = oItem._value1;

		oInstance.oModel.setProperty("/condition/operation", this.key);
		oInstance.oModel.setProperty("/condition/value1", iNumber);
		oInstance.oModel.setProperty("inputstate", "NONE", oInstance.getContext());
		oInstance._bSuggestItemSelected = true;
	};


	DateRangeType.getFixedRangeOperation = function(sKey, sTextKey, sCategory, aDefaults, fnFilterSuggestItem, iOrder) {
		return {
			key: sKey,
			textKey: sTextKey,
			category: sCategory,
			order: iOrder || 100,
			defaultValues: aDefaults || null,
			type: "range",
			display: "range",
			//onChange: DateRangeType._defaultOnChangeHandler,
			filterSuggestItem: fnFilterSuggestItem || DateRangeType._DefaultFilterSuggestItem,
			onItemSelected: DateRangeType._DefaultOnItemSelected,
			getControls: DateRangeType.ControlFactory
		};
	};

	/**
	 * Supported operations of the DateRangeType
	 */
	DateRangeType.Operations = {
		DATERANGE: {
			key: "DATERANGE",
			textKey: "CONDITION_DATERANGETYPE_DATERANGE",
			category: "DYNAMIC.DATERANGE",
			order: 2,
			defaultOperation: true,
			defaultValues: [
				null, null
			],
			value1: null,
			value2: null,
			onChange: DateRangeType._DateRangeOnChangeHandler,
			filterSuggestItem: DateRangeType._DateRangeFilterSuggestItem,
			onItemSelected: DateRangeType._DefaultOnItemSelected,
			getControls: function(oInstance, aResult) {
				var oLabel = new sap.m.Label({ text: Type.getTranslatedText("CONDITION_DATERANGETYPE_DATERANGE_LABELFROM") });
				oLabel.addStyleClass("sapUiCompFilterBarCTPaddingTop");
				aResult.push(oLabel);

				var oControl = new DatePicker(Type._createStableId(oInstance, "field1"), {
					dateValue: { path: "$smartEntityFilter>value1" },
					displayFormat: oInstance.oDateFormat.style || oInstance.oDateFormat.pattern || "",
					change: function(oEvent) {
						var bValid = oEvent.getParameter("valid");

						if (bValid) {
							this.getModel("$smartEntityFilter").setProperty("inputstate", "NONE", this.getModel("$smartEntityFilter").getContext("/"));
						} else {
							this.getModel("$smartEntityFilter").setProperty("inputstate", "ERROR", this.getModel("$smartEntityFilter").getContext("/"));
							//TODO remove the old value1 from model
						}
					}
				});
				oLabel.setLabelFor(oControl);
				aResult.push(oControl);

				oLabel = new sap.m.Label({ text: Type.getTranslatedText("CONDITION_DATERANGETYPE_DATERANGE_LABELTO") });
				oLabel.addStyleClass("sapUiCompFilterBarCTPaddingTop");
				aResult.push(oLabel);

				oControl = new DatePicker(Type._createStableId(oInstance, "field2"), {
					//ariaLabelledBy: oInstance.oOperationSelect || null,
					dateValue: { path: "$smartEntityFilter>value2" },
					minDate: { path: "$smartEntityFilter>value1" },
					displayFormat: oInstance.oDateFormat.style || oInstance.oDateFormat.pattern || "",
					change: function(oEvent) {
						var bValid = oEvent.getParameter("valid");

						if (bValid) {
							this.getModel("$smartEntityFilter").setProperty("inputstate", "NONE", this.getModel("$smartEntityFilter").getContext("/"));
						} else {
							this.getModel("$smartEntityFilter").setProperty("inputstate", "ERROR", this.getModel("$smartEntityFilter").getContext("/"));
							//TODO remove the old value2 from model
						}
					}
				});
				oLabel.setLabelFor(oControl);
				aResult.push(oControl);
			}
		},
		FROM: {
			key: "FROM",
			textKey: "CONDITION_DATERANGETYPE_FROM",
			category: "DYNAMIC.DATE",
			order: 0,
			defaultValues: [
				null
			],
			value1: null,
			onChange: DateRangeType._DateOnChangeHandler,
			filterSuggestItem: DateRangeType._DateFilterSuggestItem,
			onItemSelected: DateRangeType._DefaultOnItemSelected,
			getControls: function(oInstance, aResult) {
				var oControl = new DatePicker(Type._createStableId(oInstance, "field"), {
					ariaLabelledBy: oInstance.oOperationSelect || null,
					dateValue: { path: "$smartEntityFilter>value1" },
					displayFormat: oInstance.oDateFormat.style || oInstance.oDateFormat.pattern || "",
					change: function(oEvent) {
						var bValid = oEvent.getParameter("valid");

						if (bValid) {
							this.getModel("$smartEntityFilter").setProperty("inputstate", "NONE", this.getModel("$smartEntityFilter").getContext("/"));
						} else {
							this.getModel("$smartEntityFilter").setProperty("inputstate", "ERROR", this.getModel("$smartEntityFilter").getContext("/"));
							//TODO remove the old value1 from model
						}
					}
				});
				aResult.push(oControl);
			}
		},
		TO: {
			key: "TO",
			textKey: "CONDITION_DATERANGETYPE_TO",
			category: "DYNAMIC.DATE",
			order: 1,
			defaultValues: [
				null
			],
			value1: null,
			onChange: DateRangeType._DateOnChangeHandler,
			filterSuggestItem: DateRangeType._DateFilterSuggestItem,
			onItemSelected: DateRangeType._DefaultOnItemSelected,
			getControls: function(oInstance, aResult, oOperation) {
				var oControl = new DatePicker(Type._createStableId(oInstance, "field"), {
					ariaLabelledBy: oInstance.oOperationSelect || null,
					dateValue: { path: "$smartEntityFilter>value1" },
					displayFormat: oInstance.oDateFormat.style || oInstance.oDateFormat.pattern || "",
					change: function(oEvent) {
						var bValid = oEvent.getParameter("valid");

						if (bValid) {
							this.getModel("$smartEntityFilter").setProperty("inputstate", "NONE", this.getModel("$smartEntityFilter").getContext("/"));
						} else {
							this.getModel("$smartEntityFilter").setProperty("inputstate", "ERROR", this.getModel("$smartEntityFilter").getContext("/"));
							//TODO remove the old value1 from model
						}
					}
				});
				aResult.push(oControl);
			}
		},
		LASTDAYS: {
			key: "LASTDAYS",
			textKey: "CONDITION_DATERANGETYPE_LASTDAYS",
			singularTextKey: "CONDITION_DATERANGETYPE_YESTERDAY",
			category: "DYNAMIC.DATE.INT",
			order: 4,
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_DAY", "CONDITION_DATERANGETYPE_MULTIPLE_DAYS"],
			onChange: DateRangeType._IntOnChangeHandler,
			filterSuggestItem: DateRangeType._IntFilterSuggestItem,
			onItemSelected: DateRangeType._IntOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		LASTWEEKS: {
			key: "LASTWEEKS",
			textKey: "CONDITION_DATERANGETYPE_LASTWEEKS",
			singularTextKey: "CONDITION_DATERANGETYPE_LASTWEEK",
			category: "DYNAMIC.WEEK.INT",
			order: 8,
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_WEEK", "CONDITION_DATERANGETYPE_MULTIPLE_WEEKS"],
			onChange: DateRangeType._IntOnChangeHandler,
			filterSuggestItem: DateRangeType._IntFilterSuggestItem,
			onItemSelected: DateRangeType._IntOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		LASTMONTHS: {
			key: "LASTMONTHS",
			textKey: "CONDITION_DATERANGETYPE_LASTMONTHS",
			singularTextKey: "CONDITION_DATERANGETYPE_LASTMONTH",
			category: "DYNAMIC.MONTH.INT",
			order: 14,
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_MONTH", "CONDITION_DATERANGETYPE_MULTIPLE_MONTHS"],
			onChange: DateRangeType._IntOnChangeHandler,
			filterSuggestItem: DateRangeType._IntFilterSuggestItem,
			onItemSelected: DateRangeType._IntOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		LASTQUARTERS: {
			key: "LASTQUARTERS",
			textKey: "CONDITION_DATERANGETYPE_LASTQUARTERS",
			singularTextKey: "CONDITION_DATERANGETYPE_LASTQUARTER",
			category: "DYNAMIC.QUARTER.INT",
			order: 19,
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_QUARTER", "CONDITION_DATERANGETYPE_MULTIPLE_QUARTERS"],
			onChange: DateRangeType._IntOnChangeHandler,
			filterSuggestItem: DateRangeType._IntFilterSuggestItem,
			onItemSelected: DateRangeType._IntOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		LASTYEARS: {
			key: "LASTYEARS",
			textKey: "CONDITION_DATERANGETYPE_LASTYEARS",
			singularTextKey: "CONDITION_DATERANGETYPE_LASTYEAR",
			category: "DYNAMIC.YEAR.INT",
			order: 28,
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_YEAR", "CONDITION_DATERANGETYPE_MULTIPLE_YEARS"],
			onChange: DateRangeType._IntOnChangeHandler,
			filterSuggestItem: DateRangeType._IntFilterSuggestItem,
			onItemSelected: DateRangeType._IntOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		NEXTDAYS: {
			key: "NEXTDAYS",
			textKey: "CONDITION_DATERANGETYPE_NEXTDAYS",
			singularTextKey: "CONDITION_DATERANGETYPE_TOMORROW",
			category: "DYNAMIC.DATE.INT",
			order: 5,
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_DAY", "CONDITION_DATERANGETYPE_MULTIPLE_DAYS"],
			onChange: DateRangeType._IntOnChangeHandler,
			filterSuggestItem: DateRangeType._IntFilterSuggestItem,
			onItemSelected: DateRangeType._IntOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		NEXTWEEKS: {
			key: "NEXTWEEKS",
			textKey: "CONDITION_DATERANGETYPE_NEXTWEEKS",
			singularTextKey: "CONDITION_DATERANGETYPE_NEXTWEEK",
			category: "DYNAMIC.WEEK.INT",
			order: 10,
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_WEEK", "CONDITION_DATERANGETYPE_MULTIPLE_WEEKS"],
			onChange: DateRangeType._IntOnChangeHandler,
			filterSuggestItem: DateRangeType._IntFilterSuggestItem,
			onItemSelected: DateRangeType._IntOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		NEXTMONTHS: {
			key: "NEXTMONTHS",
			textKey: "CONDITION_DATERANGETYPE_NEXTMONTHS",
			singularTextKey: "CONDITION_DATERANGETYPE_NEXTMONTH",
			category: "DYNAMIC.MONTH.INT",
			order: 16,
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_MONTH", "CONDITION_DATERANGETYPE_MULTIPLE_MONTHS"],
			onChange: DateRangeType._IntOnChangeHandler,
			filterSuggestItem: DateRangeType._IntFilterSuggestItem,
			onItemSelected: DateRangeType._IntOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		NEXTQUARTERS: {
			key: "NEXTQUARTERS",
			textKey: "CONDITION_DATERANGETYPE_NEXTQUARTERS",
			singularTextKey: "CONDITION_DATERANGETYPE_NEXTQUARTER",
			category: "DYNAMIC.QUARTER.INT",
			order: 21,
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_QUARTER", "CONDITION_DATERANGETYPE_MULTIPLE_QUARTERS"],
			onChange: DateRangeType._IntOnChangeHandler,
			filterSuggestItem: DateRangeType._IntFilterSuggestItem,
			onItemSelected: DateRangeType._IntOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		NEXTYEARS: {
			key: "NEXTYEARS",
			textKey: "CONDITION_DATERANGETYPE_NEXTYEARS",
			singularTextKey: "CONDITION_DATERANGETYPE_NEXTYEAR",
			category: "DYNAMIC.YEAR.INT",
			order: 30,
			defaultValues: [
				1
			],
			value1: null,
			type: "int",
			descriptionTextKeys: ["CONDITION_DATERANGETYPE_SINGLE_YEAR", "CONDITION_DATERANGETYPE_MULTIPLE_YEARS"],
			onChange: DateRangeType._IntOnChangeHandler,
			filterSuggestItem: DateRangeType._IntFilterSuggestItem,
			onItemSelected: DateRangeType._IntOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		SPECIFICMONTH: {
			key: "SPECIFICMONTH",
			textKey: "CONDITION_DATERANGETYPE_SPECIFICMONTH",
			category: "DYNAMIC.MONTH",
			order: 11,
			defaultValues: function() {
				var oDate = new UniversalDate();
				return [
					oDate.getMonth()
				];
			},
			value1: null,
			onChange: DateRangeType._MonthOnChangeHandler,
			onItemSelected: DateRangeType._DefaultOnItemSelected,
			filterSuggestItem: DateRangeType._MonthFilterSuggestItem,
			getControls: function(oInstance, aResult, oOperation) {
				var oSelect = new Select(Type._createStableId(oInstance, "field"), {
					ariaLabelledBy: oInstance.oOperationSelect || null,
					width: "100%",
					selectedKey: {
						path: "$smartEntityFilter>value1",
						type: "sap.ui.model.type.Integer"
					}
				});
				oSelect.bindAggregation("items", {
					path: "$smartEntityFilter>/currentoperation/valueList",
					template: new sap.ui.core.ListItem({
						text: {
							path: "$smartEntityFilter>text"
						},
						key: {
							path: "$smartEntityFilter>key"
						}
					})
				});
				aResult.push(oSelect);
			},
			getValueList: function() {
				var oDate = new UniversalDate(),
					aMonths = [],
					oFormatter = sap.ui.core.format.DateFormat.getDateInstance({
						pattern: "MMMM"
					});
				oDate.setDate(15);
				oDate.setMonth(0);
				for (var i = 0; i < 12; i++) {
					aMonths.push({
						text: oFormatter.format(oDate),
						key: i
					});
					oDate.setMonth(oDate.getMonth() + 1);
				}
				return aMonths;
			}
		},
		TODAY: {
			key: "TODAY",
			textKey: "CONDITION_DATERANGETYPE_TODAY",
			category: "FIXED.DATE",
			order: 3,
			defaultValues: function() {
				return DateRangeType.getDateRange(1, "DAY", true);
			},
			type: "range",
			display: "start",
			onChange: DateRangeType._defaultOnChangeHandler,
			onItemSelected: DateRangeType._DefaultOnItemSelected,
			getControls: DateRangeType.ControlFactory
		},
		THISWEEK: DateRangeType.getFixedRangeOperation("THISWEEK", "CONDITION_DATERANGETYPE_THISWEEK", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(1, "WEEK", true);
		}, DateRangeType._DefaultFilterSuggestItem, 6),
		LASTWEEK: DateRangeType.getFixedRangeOperation("LASTWEEK", "CONDITION_DATERANGETYPE_LASTWEEK", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(-1, "WEEK", true);
		}, DateRangeType._DefaultFilterSuggestItem, 7),
		LAST2WEEKS: DateRangeType.getFixedRangeOperation("LAST2WEEKS", "CONDITION_DATERANGETYPE_LAST2WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(-2, "WEEK", true);
		}, DateRangeType._HideFilterSuggestItem, -1),
		LAST3WEEKS: DateRangeType.getFixedRangeOperation("LAST3WEEKS", "CONDITION_DATERANGETYPE_LAST3WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(-3, "WEEK", true);
		}, DateRangeType._HideFilterSuggestItem, -1),
		LAST4WEEKS: DateRangeType.getFixedRangeOperation("LAST4WEEKS", "CONDITION_DATERANGETYPE_LAST4WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(-4, "WEEK", true);
		}, DateRangeType._HideFilterSuggestItem, -1),
		LAST5WEEKS: DateRangeType.getFixedRangeOperation("LAST5WEEKS", "CONDITION_DATERANGETYPE_LAST5WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(-5, "WEEK", true);
		}, DateRangeType._HideFilterSuggestItem, -1),
		NEXTWEEK: DateRangeType.getFixedRangeOperation("NEXTWEEK", "CONDITION_DATERANGETYPE_NEXTWEEK", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(1, "WEEK", true, true, true);
		}, DateRangeType._DefaultFilterSuggestItem, 9),
		NEXT2WEEKS: DateRangeType.getFixedRangeOperation("NEXT2WEEKS", "CONDITION_DATERANGETYPE_NEXT2WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(2, "WEEK", true, true, true);
		}, DateRangeType._HideFilterSuggestItem, -1),
		NEXT3WEEKS: DateRangeType.getFixedRangeOperation("NEXT3WEEKS", "CONDITION_DATERANGETYPE_NEXT3WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(3, "WEEK", true, true, true);
		}, DateRangeType._HideFilterSuggestItem, -1),
		NEXT4WEEKS: DateRangeType.getFixedRangeOperation("NEXT4WEEKS", "CONDITION_DATERANGETYPE_NEXT4WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(4, "WEEK", true, true, true);
		}, DateRangeType._HideFilterSuggestItem, -1),
		NEXT5WEEKS: DateRangeType.getFixedRangeOperation("NEXT5WEEKS", "CONDITION_DATERANGETYPE_NEXT5WEEKS", "FIXED.WEEK", function() {
			return DateRangeType.getDateRange(5, "WEEK", true, true, true);
		}, DateRangeType._HideFilterSuggestItem, -1),
		THISMONTH: DateRangeType.getFixedRangeOperation("THISMONTH", "CONDITION_DATERANGETYPE_THISMONTH", "FIXED.MONTH", function() {
			return DateRangeType.getDateRange(1, "MONTH", true);
		}, DateRangeType._DefaultFilterSuggestItem, 12),
		LASTMONTH: DateRangeType.getFixedRangeOperation("LASTMONTH", "CONDITION_DATERANGETYPE_LASTMONTH", "FIXED.MONTH", function() {
			return DateRangeType.getDateRange(-1, "MONTH", true);
		}, DateRangeType._DefaultFilterSuggestItem, 13),
		NEXTMONTH: DateRangeType.getFixedRangeOperation("NEXTMONTH", "CONDITION_DATERANGETYPE_NEXTMONTH", "FIXED.MONTH", function() {
			return DateRangeType.getDateRange(1, "MONTH", true, true, true);
		}, DateRangeType._DefaultFilterSuggestItem, 15),
		THISQUARTER: DateRangeType.getFixedRangeOperation("THISQUARTER", "CONDITION_DATERANGETYPE_THISQUARTER", "FIXED.QUARTER", function() {
			return DateRangeType.getDateRange(1, "QUARTER", true);
		}, DateRangeType._DefaultFilterSuggestItem, 17),
		LASTQUARTER: DateRangeType.getFixedRangeOperation("LASTQUARTER", "CONDITION_DATERANGETYPE_LASTQUARTER", "FIXED.QUARTER", function() {
			return DateRangeType.getDateRange(-1, "QUARTER", true);
		}, DateRangeType._DefaultFilterSuggestItem, 18),
		NEXTQUARTER: DateRangeType.getFixedRangeOperation("NEXTQUARTER", "CONDITION_DATERANGETYPE_NEXTQUARTER", "FIXED.QUARTER", function() {
			return DateRangeType.getDateRange(1, "QUARTER", true, true, true);
		}, DateRangeType._DefaultFilterSuggestItem, 20),
		YEARTODATE: DateRangeType.getFixedRangeOperation("YEARTODATE", "CONDITION_DATERANGETYPE_YEARTODATE", "FIXED.YEAR", function() {
			return [
				DateRangeType.getYearStartDate(new UniversalDate()), DateRangeType.setEndTime()
			];
		}, DateRangeType._DefaultFilterSuggestItem, 31),
		THISYEAR: DateRangeType.getFixedRangeOperation("THISYEAR", "CONDITION_DATERANGETYPE_THISYEAR", "FIXED.YEAR", function() {
			return DateRangeType.getDateRange(1, "YEAR", true);
		}, DateRangeType._DefaultFilterSuggestItem, 26),
		LASTYEAR: DateRangeType.getFixedRangeOperation("LASTYEAR", "CONDITION_DATERANGETYPE_LASTYEAR", "FIXED.YEAR", function() {
			return DateRangeType.getDateRange(-1, "YEAR", true);
		}, DateRangeType._DefaultFilterSuggestItem, 27),
		NEXTYEAR: DateRangeType.getFixedRangeOperation("NEXTYEAR", "CONDITION_DATERANGETYPE_NEXTYEAR", "FIXED.YEAR", function() {
			return DateRangeType.getDateRange(1, "YEAR", true, true, true);
		}, DateRangeType._DefaultFilterSuggestItem, 29),
		QUARTER1: DateRangeType.getFixedRangeOperation("QUARTER1", "CONDITION_DATERANGETYPE_QUARTER1", "FIXED.QUARTER", function() {
			var oStartDate = DateRangeType.getYearStartDate();
			return DateRangeType.getDateRange(1, "QUARTER", oStartDate);
		}, DateRangeType._DefaultFilterSuggestItem, 22),
		QUARTER2: DateRangeType.getFixedRangeOperation("QUARTER2", "CONDITION_DATERANGETYPE_QUARTER2", "FIXED.QUARTER", function() {
			var oStartDate = DateRangeType.getDateRange(1, "QUARTER", DateRangeType.getYearStartDate())[1];
			oStartDate.setMilliseconds(1000);
			return DateRangeType.getDateRange(1, "QUARTER", oStartDate);
		}, DateRangeType._DefaultFilterSuggestItem, 23),
		QUARTER3: DateRangeType.getFixedRangeOperation("QUARTER3", "CONDITION_DATERANGETYPE_QUARTER3", "FIXED.QUARTER", function() {
			var oStartDate = DateRangeType.getDateRange(2, "QUARTER", DateRangeType.getYearStartDate())[1];
			oStartDate.setMilliseconds(1000);
			return DateRangeType.getDateRange(1, "QUARTER", oStartDate);
		}, DateRangeType._DefaultFilterSuggestItem, 24),
		QUARTER4: DateRangeType.getFixedRangeOperation("QUARTER4", "CONDITION_DATERANGETYPE_QUARTER4", "FIXED.QUARTER", function() {
			var oStartDate = DateRangeType.getDateRange(3, "QUARTER", DateRangeType.getYearStartDate())[1];
			oStartDate.setMilliseconds(1000);
			return DateRangeType.getDateRange(1, "QUARTER", oStartDate);
		}, DateRangeType._DefaultFilterSuggestItem, 25)
	};

	/**
	 * Returns the controls to be used for the given operation
	 *
	 * @param {object} oOperation the current operation of the condition type
	 * @returns [sap.ui.core.Control] Array of controls to be used to visualize the condition types operation
	 * @protected
	 */
	DateRangeType.prototype.getControls = function(oOperation) {
		var aControls = [];
		if (!oOperation) {
			return;
		}
		oOperation.getControls(this, aControls, oOperation);
		return aControls;
	};


	/**
	 * Property setter for the ignoreTime
	 *
	 * @param {boolean} bIgnoreTime new value of this property
	 * @public
	 */
	DateRangeType.prototype.setIgnoreTime = function(bIgnoreTime) {
		this._bIgnoreTime = bIgnoreTime;
	};

	/**
	 * Gets current value of property ignoreTime.
	 * When the value is true, the returned range enddate has a time stamp of 00:00:00. The default for the time stamp is 23:59:59:999
	 *
	 * Default value is false.
	 *
	 * @returns {boolean} of controls to be used to visualize the condition types operation
	 * @public
	 */
	Type.prototype.getIgnoreTime = function(bIgnoreTime) {
		return this._bIgnoreTime;
	};

	/**
	 * Returns the default values for the given operation
	 *
	 * @param {object} oOperation the current operation of the condition type
	 * @returns [object] Array of default values to be used for the operation
	 * @protected
	 */
	DateRangeType.prototype.getDefaultValues = function(oOperation) {
		if (!oOperation) {
			return [];
		}
		var aDefaultValues = oOperation.defaultValues || [];
		if (typeof aDefaultValues === "function") {
			aDefaultValues = oOperation.defaultValues();
		}
		var oCondition = this.getCondition(),
			oValue1 = aDefaultValues[0] || null,
			oValue2 = aDefaultValues[1] || null;
		if (oOperation.key === "DATERANGE" && oCondition && oCondition.value1 && oCondition.value2) {
			//Default fallback to a date range if value1 and value2 are already provided as dates
			oValue1 = oCondition.value1.oDate || oCondition.value1;
			oValue2 = oCondition.value2.oDate || oCondition.value2;
		} else {
			// make sure that both values are of type UniversalDate
			if (oValue1 instanceof Date) {
				oValue1 = new UniversalDate(oValue1);
			}
			if (oValue2 instanceof Date) {
				oValue2 = new UniversalDate(oValue2);
			}
		}

		return [
			oValue1, oValue2
		];
	};

	DateRangeType.prototype.getOperations = function() {
		var aOperations = [];
		for (var n in DateRangeType.Operations) {
			var oOperation = DateRangeType.Operations[n];
			if (this._filterOperation(oOperation)) {
				aOperations.push(oOperation);
			}
		}
		return aOperations;
	};

	DateRangeType.prototype._updateOperation = function(oOperation) {
		Type.prototype._updateOperation.apply(this, [oOperation]);

		if (oOperation.languageText && !oOperation.basicLanguageText) {
			oOperation.basicLanguageText = oOperation.languageText;
			if (!oOperation.singulareBasicLanguageText && oOperation.singularTextKey) {
				oOperation.singulareBasicLanguageText = this.getTranslatedText(oOperation.singularTextKey);
			}
			oOperation.languageText = this._fillNumberToText(oOperation.languageText);
		}

		if (oOperation.display) {
			var aDefaultValues = this.getDefaultValues(oOperation);
			var oDateFormatter = this._getDateFormatter(false);

			if (oOperation.display === "start") {
				oOperation.textValue = oDateFormatter.format(aDefaultValues[0].oDate);
			} else if (oOperation.display === "range" && aDefaultValues && aDefaultValues[0] && aDefaultValues[1]) {
				// in some cases (when you toggle between variants which use async app operations) the aDefaultValues can be empty or the values null 
				// BCP 002075129500003647642017
				oOperation.textValue = oDateFormatter.format(aDefaultValues[0].oDate) + " - " + oDateFormatter.format(aDefaultValues[1].oDate);
			}
		}

		oOperation.suggestText = oOperation.languageText;
	};

	DateRangeType.prototype.updateOperations = function() {
		var aOperations = this.getOperations();
		for (var i = 0; i < aOperations.length; i++) {
			this._updateOperation(aOperations[i]);
		}
		return this.oModel.setProperty("operations", aOperations, this.getContext(), true);
	};

	DateRangeType.prototype.isValidCondition = function() {
		var oCondition = this.getCondition(),
			oOperation = this.getOperation(oCondition.operation);
		if (oOperation && oCondition && oCondition.key && oCondition.operation) {
			if ("value1" in oOperation && "value2" in oOperation) {
				return "value1" in oCondition && oCondition.value1 !== null && "value2" in oCondition && oCondition.value2 !== null;
			} else if ("value1" in oOperation) {
				return "value1" in oCondition && oCondition.value1 !== null;
			} else if ("value2" in oOperation) {
				return "value2" in oCondition && oCondition.value2 !== null;
			} else if (!("value1" in oOperation) && !("value2" in oOperation)) {
				return true;
			}
		}
		return false;
	};

	DateRangeType.prototype.providerDataUpdated = function(aUpdatedFieldNames, oData) {
		/*		
		jQuery.sap.log.error(">>> " + this.sFieldName + " / "+ JSON.stringify(oData[this.sFieldName]));
		jQuery.sap.log.error(">>> " + JSON.stringify(aUpdatedFieldNames));
		for (var n in aUpdatedFieldNames) {
			jQuery.sap.log.error(">>> " + aUpdatedFieldNames[n] + ": " + JSON.stringify(oData[aUpdatedFieldNames[n]]));
		}
		jQuery.sap.log.error(">>> "); 
		*/
	};

	DateRangeType.prototype.initialize = function(oJson) {
		Type.prototype.initialize.apply(this, [oJson]);
		this.oModel.suspend();
		var oOrgJson = jQuery.extend({}, oJson, true);

		var sCalendarType = (new UniversalDate()).getCalendarType();
		if (!oJson.conditionTypeInfo) {
			if (oJson.ranges && oJson.ranges.length == 1) {
				// if no conditionTypeInfo exist but one ranges item we restore the date range as DATERANGE operation. This is required for a better deserialize handling of DataSuite format.
				var sOperation = "DATERANGE";
				if (oJson.ranges[0].operation === "GE") {
					//if the range operation is GE we map it on the FROM DateRangeType operation 
					sOperation = "FROM";
				}
				if (oJson.ranges[0].operation === "LE") {
					//if the range operation is LE we map it on the TO DateRangeType operation 
					sOperation = "TO";
				}
				oJson.conditionTypeInfo = {
					name: this.getName(),
					data: {
						key: this.sFieldName,
						operation: sOperation,
						value1: oJson.ranges[0].value1,
						value2: oJson.ranges[0].value2,
						calendarType: sCalendarType
					}
				};
			} else {
				var oDefaultOperation = this.getDefaultOperation(),
					sKey = oDefaultOperation ? oDefaultOperation.key : "";
				oJson.conditionTypeInfo = {
					name: this.getName(),
					data: {
						key: this.sFieldName,
						operation: sKey,
						calendarType: sCalendarType
					}
				};
			}
		}
		if (oJson.conditionTypeInfo) {
			oJson = oJson.conditionTypeInfo;
		}
		if (oJson.name && oJson.data) {
			if (oJson.name !== this.getName()) {

				jQuery.sap.log.debug("ConditionType " + this.getName() + " tries to deserialize data from " + oJson.name);
			}
			oJson = oJson.data;
		}
		if (!oJson.operation) {
			return;
		}


		// map not supported operations like NEXT2WEEKS to NEXTWEEKS with value1=2
		if (this.getOperation(oJson.operation) && this.getOperation(oJson.operation).order < 0) {
			var index = ["LAST2WEEKS", "LAST3WEEKS", "LAST4WEEKS", "LAST5WEEKS"].indexOf(oJson.operation);
			if (index >= 0) {
				oJson.operation = "LASTWEEKS";
				oJson.value1 = index + 2;
			}
			index = ["NEXT2WEEKS", "NEXT3WEEKS", "NEXT4WEEKS", "NEXT5WEEKS"].indexOf(oJson.operation);
			if (index >= 0) {
				oJson.operation = "NEXTWEEKS";
				oJson.value1 = index + 2;
			}
		}

		var oOperation = this.getOperation(oJson.operation);
		if (!oOperation) {
			// if no operation is found and the Type is async we wait for PendingChange
			if (this.getAsync()) {

				this.setPending(true);

				var that = this,
					fnHandler = function(oEvent) {
						if (oEvent.getParameter("pending") === false) {
							that.oFilterProvider.detachPendingChange(fnHandler);
							that.initialize(oOrgJson);
						}
					};
				this.oFilterProvider.attachPendingChange(fnHandler);

				this.oModel.resume();
				return;
			}
			//TODO if not async we could use the DefaultOperation????
		}

		var aValues;
		// handle transform from calendar type differences
		if (sCalendarType !== oJson.calendarType && (oJson.calendarType === "Islamic" || sCalendarType === "Islamic") && oJson.operation === "SPECIFICMONTH") {
			oJson.operation = "DATERANGE";
			var iValue = parseInt(oJson.value1, 10),
				oDate = UniversalDate.getInstance(new Date(), oJson.calendarType);
			oDate.setMonth(iValue);
			oDate = DateRangeType.getMonthStartDate(oDate);
			aValues = DateRangeType.getDateRange(1, "MONTH", oDate, true);
			oJson.value1 = aValues[0].oDate.toISOString();
			oJson.value2 = aValues[1].oDate.toISOString();
		}

		var oProperty = this.getConditionContext().getObject();

		oProperty.operation = oJson.operation;
		oProperty.key = oJson.key;
		oProperty.value1 = null;
		oProperty.value2 = null;
		if (oJson.operation === "DATERANGE") {
			if (typeof oJson.value1 === "string") {
				oJson.value1 = oJson.value1 === "" ? null : (new UniversalDate(oJson.value1)).oDate;
			}
			if (typeof oJson.value2 === "string") {
				oJson.value2 = oJson.value2 === "" ? null : (new UniversalDate(oJson.value2)).oDate;
			}
			oProperty.value1 = oJson.value1;
			oProperty.value2 = oJson.value2;
		} else if (oJson.operation === "FROM") {
			if (typeof oJson.value1 === "string") {
				oJson.value1 = oJson.value1 === "" ? null : (new UniversalDate(oJson.value1)).oDate;
			}
			oProperty.value1 = oJson.value1;
		} else if (oJson.operation === "TO") {
			if (typeof oJson.value1 === "string") {
				oJson.value1 = oJson.value1 === "" ? null : (new UniversalDate(oJson.value1)).oDate;
			}
			oProperty.value1 = oJson.value1;
		} else if ([
				"LASTDAYS", "LASTWEEKS", "LASTMONTHS", "LASTQUARTERS", "LASTYEARS"
			].indexOf(oJson.operation) > -1) {
			oProperty.value1 = oJson.value1;
		} else if (oJson.operation === "SPECIFICMONTH") {
			oProperty.value1 = oJson.value1 + "";
		} else {
			aValues = this.getDefaultValues(this.getOperation(oJson.operation));
			oProperty.value1 = aValues[0];
			oProperty.value2 = aValues[1];
		}

		// ignore some model change events, so that we not overwrite the values by some defaultValues 
		this.bIgnoreBindingChange = true;
		this.oModel.resume();
		delete this.bIgnoreBindingChange;

		this.serialize(true, false);
	};

	DateRangeType.prototype.serialize = function(bUpdateProviderSyncron, bFireFilterChange) {
		var oJson = {},
			oCondition = this.getCondition();
		if (!oCondition.operation) {
			return null;
		}
		var oOperation = this.getOperation(oCondition.operation);
		if (!oOperation || !("value1" in oOperation)) {
			oCondition.value1 = null;
		}
		if (!oOperation || !("value2" in oOperation)) {
			oCondition.value2 = null;
		}
		oCondition.calendarType = (new UniversalDate()).getCalendarType();
		oJson.conditionTypeInfo = {
			name: this.getName(),
			data: oCondition
		};

		if (this.iChangeTimer) {
			jQuery.sap.clearDelayedCall(this.iChangeTimer);
			delete this.iChangeTimer;
		}

		if (bUpdateProviderSyncron) {
			this._updateProvider(oJson, true, bFireFilterChange);
		} else {
			this.iChangeTimer = jQuery.sap.delayedCall(1, this, this._updateProvider, [oJson, false, bFireFilterChange]);
		}

		return oJson;
	};


	DateRangeType.prototype._updateProvider = function(oJson, bSync, bFireFilterChange) {
		//this.validate(false);
		oJson.ranges = this.getFilterRanges();
		oJson.items = [];
		var bSetCursor = false;
		var iCursorPos = 0;
		var iSelectionStart = 0;
		var iSelectionEnd = 0;

		//TODO newDRTUI
		//  update the formattedText and the inputstate which we display in the input field   
		if (this.oModel.getData().currentoperation.languageText) {
			var oData = this.oModel.getData();
			//TODO Check if we can do this calculation of formattedText at another place
			var sFormattedText = oData.currentoperation.languageText;

			if (oData.currentoperation.basicLanguageText.indexOf("{0}") >= 0) {
				if (oJson.conditionTypeInfo.data.value1 != null && oJson.conditionTypeInfo.data.value1 != "") {
					if (oJson.conditionTypeInfo.data.value1 === 1 && oData.currentoperation.singulareBasicLanguageText) {
						sFormattedText = oData.currentoperation.singulareBasicLanguageText;
					} else {
						sFormattedText = this._fillNumberToText(oData.currentoperation.basicLanguageText, oJson.conditionTypeInfo.data.value1);
					}
					this.oModel.setProperty("inputstate", "NONE", this.getContext());
				} else if (this._bSuggestItemSelected) {
					sFormattedText = this._fillNumberToText(oData.currentoperation.basicLanguageText);
					var xPos = oData.currentoperation.basicLanguageText.indexOf("{0}");
					iCursorPos = xPos + 1;
					iSelectionStart = xPos;
					iSelectionEnd = xPos + 1;
					bSetCursor = true;
				} else {
					sFormattedText = "";
					this.oModel.setProperty("inputstate", "NONE", this.getContext());
				}
			} else if (oData.currentoperation.textValue) {
				sFormattedText = oData.currentoperation.languageText + " (" + oData.currentoperation.textValue + ")";
				this.oModel.setProperty("inputstate", "NONE", this.getContext());
			} else {
				if (oJson.conditionTypeInfo.data.value1 !== null && oJson.conditionTypeInfo.data.value1 !== "") {
					var v1 = oJson.conditionTypeInfo.data.value1;
					var v2 = oJson.conditionTypeInfo.data.value2;
					var sValue;
					if (typeof v1 === "number" && oData.currentoperation.valueList) {
						// in case of number access the month from  the value List array
						sValue = oData.currentoperation.valueList[v1].text;
					} else if (v1 instanceof Date) {
						var oDateFormatter = this._getDateFormatter(false);
						if (oJson.conditionTypeInfo.data.operation !== "DATERANGE" && (v1 && !v2)) {
							sValue = oDateFormatter.format(v1);
						} else if (oJson.conditionTypeInfo.data.operation === "DATERANGE" && v1 && v2) {
							//TODO replace "-" by Delimiter 
							sValue = oDateFormatter.format(v1) + " - " + oDateFormatter.format(v2);
						} else if (oJson.conditionTypeInfo.data.operation === "DATERANGE" && v1 && !v2 && !(this._oPopup && this._oPopup.isOpen())) {
							//TODO replace "-" by Delimiter 
							sValue = oDateFormatter.format(v1) + " - ";
							bSetCursor = true;
						} else {
							sValue = "";
						}
					} else {
						sValue = oJson.conditionTypeInfo.data.value1;
					}

					if (sValue) {
						sFormattedText = oData.currentoperation.languageText + " (" + sValue + ")";
						iCursorPos = sFormattedText.length - 1;
						this.oModel.setProperty("inputstate", "NONE", this.getContext());
					} else {
						sFormattedText = "";
					}
				} else {
					// not a valid condition
					sFormattedText = "";
				}
			}
			this._bSuggestItemSelected = false;
			this.oModel.setProperty("/formattedText", sFormattedText);

			if (bSetCursor && !(this._oPopup && this._oPopup.isOpen())) {
				// set cursor to placeholder
				this._oInput.$("inner").cursorPos(iCursorPos);
				if (iSelectionStart < iSelectionEnd) {
					this._oInput.selectText(iSelectionStart, iSelectionEnd);
				}
				this._oInput._lastValue = ""; // to recheck by focusout again as it might be an invalid value
			}
		}

		if (this.oFilterProvider) {
			this.oFilterProvider.oModel.setProperty("/" + this.sFieldName, oJson);
			this.oFilterProvider.setFilterData({}, false, this.sFieldName);

			if (bFireFilterChange && this.oFilterProvider._oSmartFilter) {
				//call the fireFilterChange syncron 
				this.oFilterProvider._oSmartFilter.fireFilterChange();

				// because the DateRangeType does not have a change event which will in case of liveMode trigger a search we call the triggerSearch explicit. 
				if (this.oFilterProvider._oSmartFilter.getLiveMode()) {
					this.oFilterProvider._oSmartFilter.triggerSearch(sap.ui.comp.smartfilterbar.SmartFilterBar.LIVE_MODE_INTERVAL);
				}
			}
		}
	};

	DateRangeType.prototype.getFilterRanges = function() {
		var oCondition = this.getCondition(),
			aValues = [];

		if (oCondition.operation === "LASTDAYS") {
			aValues = DateRangeType.getDateRange(-oCondition.value1, "DAY", true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "LASTWEEKS") {
			aValues = DateRangeType.getDateRange(-oCondition.value1, "WEEK", true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "LASTMONTHS") {
			aValues = DateRangeType.getDateRange(-oCondition.value1, "MONTH", true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "LASTQUARTERS") {
			aValues = DateRangeType.getDateRange(-oCondition.value1, "QUARTER", true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "LASTYEARS") {
			aValues = DateRangeType.getDateRange(-oCondition.value1, "YEAR", true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "NEXTDAYS") {
			aValues = DateRangeType.getDateRange(oCondition.value1, "DAY", true, true, true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "NEXTWEEKS") {
			aValues = DateRangeType.getDateRange(oCondition.value1, "WEEK", true, true, true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "NEXTMONTHS") {
			aValues = DateRangeType.getDateRange(oCondition.value1, "MONTH", true, true, true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "NEXTQUARTERS") {
			aValues = DateRangeType.getDateRange(oCondition.value1, "QUARTER", true, true, true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "NEXTYEARS") {
			aValues = DateRangeType.getDateRange(oCondition.value1, "YEAR", true, true, true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		} else if (oCondition.operation === "SPECIFICMONTH") {
			var iValue = parseInt(oCondition.value1, 10),
				oDate = new UniversalDate();
			oDate.setMonth(iValue);
			oDate = DateRangeType.getMonthStartDate(oDate);
			aValues = DateRangeType.getDateRange(1, "MONTH", oDate, true);
			oCondition.value1 = aValues[0];
			oCondition.value2 = aValues[1];
		}

		if (oCondition.value1 instanceof UniversalDate) {
			oCondition.value1 = oCondition.value1.oDate;
		}
		if (oCondition.value2 instanceof UniversalDate) {
			oCondition.value2 = oCondition.value2.oDate;
		}

		if (oCondition.operation === "FROM") {
			if (!(this.isValidCondition() && oCondition.value1)) {
				return [];
			}
			oCondition.operation = "GE";
			delete oCondition.value2;
		} else if (oCondition.operation === "TO") {
			if (!(this.isValidCondition() && oCondition.value1)) {
				return [];
			}
			oCondition.operation = "LE";
			delete oCondition.value2;

			if (this._bIgnoreTime) {
				oCondition.value1 = DateRangeType.setStartTime(oCondition.value1).oDate;
			} else {
				oCondition.value1 = DateRangeType.setEndTime(oCondition.value1).oDate;
			}
		} else {
			if (!(this.isValidCondition() && oCondition.value1 && oCondition.value2)) {
				return [];
			}
			oCondition.operation = "BT";

			if (this._bIgnoreTime) {
				// set the time to 00:00:00
				oCondition.value2 = DateRangeType.setStartTime(oCondition.value2).oDate;
			} else {
				// ensure the day and set time to beginning of day
				oCondition.value1 = DateRangeType.setStartTime(oCondition.value1).oDate;

				// include the day and set time to 23:59:59:999
				oCondition.value2 = DateRangeType.setEndTime(oCondition.value2).oDate;
			}
		}

		oCondition.exclude = false;
		oCondition.keyField = oCondition.key;
		delete oCondition.key;

		return [
			oCondition
		];
	};

	DateRangeType.prototype.getTokenText = function() {
		return "";
	};

	DateRangeType.prototype.getName = function() {
		return this.getMetadata().getName();
	};

	DateRangeType.prototype.getType = function() {
		return "Edm.Date";
	};

	DateRangeType.prototype._bindValueState = function(oControl) {
		oControl.bindProperty("valueState", {
			path: "$smartEntityFilter>inputstate",
			formatter: function() {
				if (this.getBinding("valueState").getValue() === "ERROR") {
					return sap.ui.core.ValueState.Error;
				} else {
					return sap.ui.core.ValueState.None;
				}
			}
		});
	};

	DateRangeType.prototype.initializeFilterItem = function() {
		this._oInput = new sap.m.Input(Type._createStableId(this), {
			value: "{$smartEntityFilter>formattedText}",
			//tooltip: "{$smartEntityFilter>formattedText}",
			showValueHelp: true,
			showSuggestion: true,
			maxSuggestionWidth: "auto",
			valueHelpRequest: this._toggleOpen.bind(this)
		});

		//TODO overwrite the default highlight function and not hightligh values in the addtionalValue column
		this._oInput._highlightListText = function() {
			var i,
				label,
				labels = this._oList.$().find('.sapMDLILabel, .sapMSLITitleOnly');

			for (i = 0; i < labels.length; i++) {
				label = labels[i];
				label.innerHTML = this._createHighlightedText(label);
			}
		};

		// Test: if we can open the suggest list via CTRL+SPACE
		// this._oInput.onkeydown = function(oEvent) {

		// 	if (oEvent.keyCode == jQuery.sap.KeyCodes.SPACE && oEvent.ctrlKey) {
		// 		oEvent.preventDefault();
		// 		this._triggerSuggest(" ");
		// 	}

		// 	sap.m.Input.prototype.onkeydown.apply( this, arguments );
		// };		

		this._bindValueState(this._oInput);

		this._oInput.bindAggregation("suggestionItems", {
			path: "$smartEntityFilter>operations",
			sorter: new sap.ui.model.Sorter("order", false, false),
			filters: new sap.ui.model.Filter("order", function(oValue) {
				return oValue !== undefined && oValue > -1;
			}),
			template: new sap.ui.core.ListItem({
				//				text: {
				//					path: "$smartEntityFilter>suggestText"
				//				},
				key: {
					path: "$smartEntityFilter>key"
						//				},
						//				additionalText: {
						//					path: "$smartEntityFilter>textValue"
				}
			})
		});

		this._oInput.setFilterFunction(function(sValue, oItem) {
			if (this._oPopup && this._oPopup.isOpen()) {
				return false;
			}

			var oOperation = this.getOperation(oItem.getKey());

			sValue = sValue.trim();
			if (sValue === "?") {
				// make all operations visible which can be selected and not do open the _oPopup
				DateRangeType._DefaultFilterSuggestItem.call(oOperation, sValue, oItem, this);
				return oOperation.category !== "DYNAMIC.DATERANGE" && oOperation.category !== "DYNAMIC.DATE";
			}

			if (oOperation.filterSuggestItem) {
				return oOperation.filterSuggestItem(sValue, oItem, this);
			} else {
				// default filtering
				return DateRangeType._DefaultFilterSuggestItem.call(oOperation, sValue, oItem, this);
			}
		}.bind(this));

		this._oInput.attachSuggestionItemSelected(function(oEvent) {
			var oItem = oEvent.getParameter("selectedItem");
			if (!oItem) {
				return;
			}
			var sOperation = oItem.getKey();
			var oOperation = this.getOperation(sOperation);
			var sValue = oEvent.oSource.getValue().trim();

			if (oOperation.onItemSelected) {
				oOperation.onItemSelected(sValue, oItem, this);
				return;
			} else {
				DateRangeType._DefaultOnItemSelected.call(oOperation, sValue, oItem, this);
			}
		}.bind(this));

		this._oInput.attachChange(function(oEvent) {
			var sValue = oEvent.getParameter("value");
			if (sValue) {

				//jQuery.sap.log.debug("DateRangeType ", sValue);

				var aOperarations = this.getOperations();
				var bHandled = aOperarations.some(function(oOperation) {
					if (oOperation.onChange) {
						return oOperation.onChange(sValue, this);
					} else {
						return DateRangeType._defaultOnChangeHandler.call(oOperation, sValue, this);
					}
				}, this);

				if (!bHandled) {
					this.oModel.setProperty("inputstate", "ERROR", this.getContext());
				}
			} else {
				// field is blanked/empty

				this.setCondition({
					key: this.sFieldName,
					operation: "FROM",
					value1: null,
					value2: null
				});

				this.oModel.setProperty("inputstate", "NONE", this.getContext());
			}
		}.bind(this));

		this._oInput.attachBrowserEvent("focusin", function(oEvent) {
			if (jQuery(oEvent.target).hasClass("sapMInputBaseInner") && this._oPopup && this._oPopup.isOpen()) {
				this._oPopup.close();
			}
		}.bind(this));

		this._oInput.setBindingContext(this.getContext(), "$smartEntityFilter");

		this._oInput.setModel(this.getModel(), "$smartEntityFilter");
		//this.bIgnoreBindingChange = true;
		this.bFireFilterChange = false;
		this.getModel().checkUpdate(true);
		this.bFireFilterChange = true;
		//this.bIgnoreBindingChange = false;
		
		return this._oInput;
	};

	DateRangeType.prototype._toggleOpen = function(oEvent) {
		//		var sOperation = this.oModel.getProperty("operation", this.oConditionContext);
		//		var oOperation = this.getOperation(sOperation);
		//		var bOpenSuggest = false;
		//		if (oOperation.category.indexOf("DYNAMIC") < 0) {
		//			bOpenSuggest = true;
		//		}

		//		if ((this.oInput.getValue() === "" || bOpenSuggest) && oEvent) {
		//			this.oInput.setFilterFunction(function() { return true; } );
		//			//this.oInput._oSuggestionPopup.open();
		//			var sOrgValue = this.oInput.getValue(" ");
		//			this.oInput.setValue(" ");
		//			this.oInput._triggerSuggest(" ");		
		//			jQuery.sap.delayedCall(500, this, function(){ 
		//				this.oInput.setFilterFunction();
		//				this.oInput.setValue(sOrgValue);
		//			});
		//			return;
		//		}

		// create popover
		if (!this._oPopup) {
			this._oPopupLayout = new sap.m.VBox();
			this._oPopupLayout.addStyleClass("sapUiCompDateRangeType");
			this._initializeFilterItemPopoverContent(this._oPopupLayout);

			this._oPopup = new sap.m.ResponsivePopover({
				showCloseButton: false,
				showArrow: true,
				showHeader: false,
				horizontalScrolling: false,
				//				title: "{$smartEntityFilter>/currentoperation/languageText}",
				placement: sap.m.PlacementType.VerticalPreferedBottom,
				//				beginButton: new sap.m.Button({ 
				//					text: "Ok", 
				//					press: jQuery.proxy(function(oEvent){
				//						this._oPopup.close();
				//					}, this)
				//				}),
				//				endButton: new sap.m.Button({ 
				//					text: "Cancel", 
				//					press: jQuery.proxy(function(oEvent){
				//						this._oPopup.close();
				//					}, this)}),
				content: this._oPopupLayout,
				contentWidth: "18rem"
			});

			if (sap.ui.Device.system.phone) {
				// One phone we have to provide at lease a close button
				this._oPopup.setBeginButton(new sap.m.Button({
					text: Type.getTranslatedText("CONDITION_DATERANGETYPE_POPOVER_CLOSEBUTTON"),
					type: "Emphasized",
					press: function(oEvent) {
						this._oPopup.close();
					}.bind(this)
				}));
			}

			sap.ui.getCore().getMessageManager().registerObject(this._oPopup, true);
			this._oPopup.setModel(this.getModel(), "$smartEntityFilter");
			this._oPopup._oControl.oPopup.setAutoCloseAreas([this._oInput.getDomRef()]);
		}

		if (!this._oPopup.isOpen()) {
			this._oPopup.openBy(this._oInput._getValueHelpIcon());
		} else {
			this._oPopup.close();
		}
	};

	DateRangeType.prototype._getDateFormatter = function(bStrict) {
		var oFormatSettings = {
			style: this.oDateFormat.style,
			pattern: this.oDateFormat.pattern,
			strictParsing: bStrict
		};
		return sap.ui.core.format.DateFormat.getInstance(oFormatSettings);
	};

	DateRangeType.prototype._fillNumberToText = function(sText, iNumber) {
		var sNumber = "X";
		if (iNumber) {
			sNumber = String(iNumber);
		}
		return sText.replace("{0}", sNumber);
	};

	DateRangeType.prototype.destroy = function() {
		if (this.iChangeTimer) {
			jQuery.sap.clearDelayedCall(this.iChangeTimer);
			delete this.iChangeTimer;
		}
		if (this._oPopup) {
			sap.ui.getCore().getMessageManager().unregisterObject(this._oPopup);
			this._oPopup.destroy();
		}
		Type.prototype.destroy.apply(this, arguments);
	};

	return DateRangeType;
}, /* bExport= */ true);
}; // end of sap/ui/comp/config/condition/DateRangeType.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.filterbar.FilterItem.
jQuery.sap.declare('sap.ui.comp.filterbar.FilterItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TooltipBase'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/FilterItem",[
	'jquery.sap.global', 'sap/m/Label', 'sap/ui/comp/library', 'sap/ui/core/Element', 'sap/ui/core/TooltipBase', 'sap/ui/comp/util/IdentifierUtil'
], function(jQuery, Label, library, Element, TooltipBase, IdentifierUtil) {
	"use strict";

	/**
	 * Constructor for a new FilterBar/FilterItem.
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class Represents a filter belonging to the basic group.
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.filterbar.FilterItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FilterItem = Element.extend("sap.ui.comp.filterbar.FilterItem", /** @lends sap.ui.comp.filterbar.FilterItem.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Label of the filter.
				 */
				label: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Name of the filter. This is an identifier for the filter and has to be unique.
				 */
				name: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Mandatory flag.
				 */
				mandatory: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Visibility state of the filter.
				 */
				visible: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Tooltip for the filter.
				 */
				labelTooltip: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Determines if a filter is part of the currently selected variant. <br>
				 * <b>Note:</b> This property can also be changed using the <code>visibleInFilterBar</code> property and by user interaction in the
				 * Select Filters dialog or the variant handling.
				 * @since 1.26.1
				 */
				partOfCurrentVariant: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Controls the visibility of a filter item in the filter bar.
				 * @since 1.26.1
				 */
				visibleInFilterBar: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * A hidden filter will never be visible in the filter bar control
				 * @since 1.44.0
				 */
				hiddenFilter: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			aggregations: {

				/**
				 * The control of the filter.
				 */
				control: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {

				/**
				 * This event is fired when one of the properties is changed.
				 */
				change: {
					parameters: {

						/**
						 * Name of the changed property
						 */
						propertyName: {
							type: "string"
						}
					}
				}
			}
		}
	});

	/**
	 * Initializes the filter item.
	 * @public
	 */
	FilterItem.prototype.init = function() {
		this._oLabel = null;
		this._bIsParameter = false;
	};

	/**
	 * @private
	 * @returns {boolean} indicates if this is a parameter.
	 */
	FilterItem.prototype._isParameter = function() {
		return this._bIsParameter;
	};

	/**
	 * Setter for visible property.
	 * @public
	 * @param {boolean} bVisible State of visibility
	 */
	FilterItem.prototype.setVisible = function(bVisible) {
		this.setProperty("visible", bVisible);
		this.fireChange({
			propertyName: "visible"
		});
	};

	/**
	 * Setter for visible in filter bar.
	 * @public
	 * @since 1.26.1
	 * @param {boolean} bVisible State of visibility in filter bar
	 */
	FilterItem.prototype.setVisibleInFilterBar = function(bVisible) {
		this.setProperty("visibleInFilterBar", bVisible);

		this.fireChange({
			propertyName: "visibleInFilterBar"
		});
	};

	/**
	 * Setter for partOfCurrentVariant in filter bar.
	 * @public
	 * @param {boolean} bVisible State of visibility in filter bar
	 */
	FilterItem.prototype.setPartOfCurrentVariant = function(bVisible) {
		this.setProperty("partOfCurrentVariant", bVisible);

		this.fireChange({
			propertyName: "partOfCurrentVariant"
		});
	};

	FilterItem.prototype._getGroupName = function() {

		var sName = "";
		if (this.getGroupName) {
			sName = IdentifierUtil.replace(this.getGroupName());
		}

		return sName;
	};

	FilterItem.prototype._getName = function() {
		var sName = IdentifierUtil.replace(this.getName());
		var sGroupName = this._getGroupName();

		if (sGroupName) {
			sName = sGroupName + "-" + sName;
		}

		return sName;

	};

	FilterItem.prototype._createLabelControl = function(sFilterBarId) {

		var sText = this.getLabel();

		var sId = "filterItem-" + this._getName();
		if (sFilterBarId) {
			sId = sFilterBarId + "-" + sId;
		}

		var oLabelCtrl = new Label({
			id: sId,
			text: sText,
			required: this.getMandatory(),
			tooltip: this.getLabelTooltip(),
			textAlign: "Begin"
		});

		return oLabelCtrl;
	};

	/**
	 * Setter for mandatory flag.
	 * @public
	 * @param {string} bValue Mandatory state
	 */
	FilterItem.prototype.setMandatory = function(bValue) {
		this.setProperty("mandatory", bValue);

		if (this._oLabel) {
			this._oLabel.setRequired(bValue);
		}

		this.fireChange({
			propertyName: "mandatory"
		});
	};

	/**
	 * Setter for label.
	 * @public
	 * @param {string} sValue Label text
	 */
	FilterItem.prototype.setLabel = function(sValue) {
		this.setProperty("label", sValue);

		if (this._oLabel) {
			this._oLabel.setText(sValue);
		}

		if (!this.getLabelTooltip()) {
			this.setLabelTooltip(sValue);
		}

		this.fireChange({
			propertyName: "label"
		});
	};

	/**
	 * Setter for tooltip.
	 * @public
	 * @param {string} sText Tooltip text
	 */
	FilterItem.prototype.setLabelTooltip = function(sText) {
		this.setProperty("labelTooltip", sText);

		if (this._oLabel) {
			this._oLabel.setTooltip(sText);
		}

		this.fireChange({
			propertyName: "labelTooltip"
		});
	};

	/**
	 * Returns the label control.
	 * @param {string} sFilterBarId The ID of the filter bar
	 * @returns {sap.m.Label} Label control
	 */
	FilterItem.prototype.getLabelControl = function(sFilterBarId) {

		if (!this._oLabel) {
			this._oLabel = this._createLabelControl(sFilterBarId);
		}

		return this._oLabel;
	};

	/**
	 * Destroys this element.
	 * @public
	 */
	FilterItem.prototype.destroy = function() {

		if (this._oLabel && !this._oLabel.bDestroyed) {
			this._oLabel.destroy();
		}

		Element.prototype.destroy.apply(this, arguments);

		this._oLabel = null;
	};

	return FilterItem;

}, /* bExport= */true);

}; // end of sap/ui/comp/filterbar/FilterItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.VariantConverterFrom') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.filterbar.VariantConverterFrom'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.DateRangeSelection'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/VariantConverterFrom",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/comp/valuehelpdialog/ValueHelpDialog', 'sap/m/MultiComboBox', 'sap/m/MultiInput', 'sap/m/DatePicker', 'sap/m/DateRangeSelection'
], function(jQuery, library, ValueHelpDialog, MultiComboBox, MultiInput, DatePicker, DateRangeSelection) {
	"use strict";

	/**
	 * Constructs a utility class to convert the FilterBar variant from/to internal to suite format
	 * @constructor
	 * @public
	 * @author SAP
	 */
	var VariantConverterFrom = function() {
	};

	/**
	 * the variant in suite format will be transformed to the internal format
	 * @public
	 * @param {string} sSuiteContent object representing the variant data
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @param {boolean} [bStrictMode=true] determines if a passed filter name is checked by exact match,<br>
	 *        or verified against the analytical parameters by adding the prefix 'P_' to its name.
	 * @returns {object} variant in the internal format
	 */
	VariantConverterFrom.prototype.convert = function(sSuiteContent, oFilterBar, bStrictMode) {
		var oContent = null, oRetContent = null, oSuiteContent;

		if (sSuiteContent) {

			this._bStrictMode = bStrictMode;

			oSuiteContent = JSON.parse(sSuiteContent);

			if (oFilterBar && oFilterBar.getFilterBarViewMetadata && oSuiteContent) {

				this._sBasicSearchName = null;
				this._sBasicSearchValue = null;

				if (oFilterBar.getBasicSearchName) {
					this._sBasicSearchName = oFilterBar.getBasicSearchName();
				}

				oContent = {};
				if (oSuiteContent.Parameters) {
					this._addParameters(oSuiteContent.Parameters, oFilterBar, oContent);
				}

				if (oSuiteContent.SelectOptions) {
					this._addSelectOptions(oSuiteContent.SelectOptions, oFilterBar, oContent);
				}

				oRetContent = {
					payload: null,
					variantId: null
				};
				oRetContent.payload = JSON.stringify(oContent);

				if (oSuiteContent.SelectionVariantID) {
					oRetContent.variantId = oSuiteContent.SelectionVariantID;
				}

				if (this._sBasicSearchValue) {
					oRetContent.basicSearch = this._sBasicSearchValue;
				}

			}
		}

		return oRetContent;
	};

	VariantConverterFrom.prototype.retrieveVariantId = function(sSuiteContent) {
		var sVariantId = null;
		var oSuiteContent;

		if (sSuiteContent) {

			oSuiteContent = JSON.parse(sSuiteContent);

			if (oSuiteContent && oSuiteContent.SelectionVariantID) {
				sVariantId = oSuiteContent.SelectionVariantID;
			}
		}

		return sVariantId;
	};

	/**
	 * Retrieve the meta data for a given filter name. If the non-strict mode is set, we check first if the name identifies an analytical parameter.
	 * 1. check with complete name; 2. with $Parameter.P_ name. In strict mode only $Parameter. may be omit.
	 * @private
	 * @param {string} sName of the filter
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @param {boolean} bIsParameter defines if the current name is from the parameters or selectoption section.
	 * @returns {object} meta data of the filter; null otherwise
	 */
	VariantConverterFrom.prototype._getParameterMetaData = function(sName, oFilterBar, bIsParameter) {

		if (this._bStrictMode) {
			return this._getParameterMetaDataStrictMode(sName, oFilterBar);
		}

		return this._getParameterMetaDataNonStrictMode(sName, oFilterBar, bIsParameter);
	};

	VariantConverterFrom.prototype._getFilter = function(sName, oFilterBar) {
		var i, j, oGroup, aFilterMetaData;

		aFilterMetaData = oFilterBar.getFilterBarViewMetadata();
		if (aFilterMetaData) {
			for (i = 0; i < aFilterMetaData.length; i++) {
				oGroup = aFilterMetaData[i];
				for (j = 0; j < oGroup.fields.length; j++) {
					if (sName === oGroup.fields[j].fieldName) {
						return oGroup.fields[j];
					}
				}
			}
		}

		return null;
	};

	VariantConverterFrom.prototype._getParameter = function(sName, oFilterBar) {
		var j, aAnaParameterMetaData;

		if (oFilterBar.getAnalyticalParameters) {
			aAnaParameterMetaData = oFilterBar.getAnalyticalParameters();
			if (aAnaParameterMetaData) {
				for (j = 0; j < aAnaParameterMetaData.length; j++) {

					if (sName === aAnaParameterMetaData[j].fieldName) {
						return aAnaParameterMetaData[j];
					}
				}
			}
		}

		return null;
	};

	VariantConverterFrom.prototype._getParameterWithInnerPrefix = function(sName, oFilterBar) {
		var sParamName = sName;
		if (sName.indexOf(sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX) !== 0) {
			sParamName = sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX + sName;
		}
		return this._getParameter(sParamName, oFilterBar);
	};

	VariantConverterFrom.prototype._getParameterMetaDataStrictMode = function(sName, oFilterBar) {

		var oMetadata = this._getExactFilterMatch(sName, oFilterBar);
		if (oMetadata) {
			return oMetadata;
		}

		return null;
	};

	VariantConverterFrom.prototype._getParameterMetaDataNonStrictMode = function(sOrigName, oFilterBar, bIsParameter) {
		var oMetadata, sNameWithPrefix, sNameWithoutPrefix, sTryName, sName = sOrigName;

		if (sOrigName.indexOf(sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX) === 0) {
			sName = sOrigName.substr(sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX.length); // remove $Parameter. prefix
		}

		if (sName.indexOf("P_") === 0) {
			sNameWithPrefix = sName;
			sNameWithoutPrefix = sName.substr(2); // remove P_ prefix
		} else {
			sNameWithPrefix = "P_" + sName;
			sNameWithoutPrefix = sName;
		}

		if (sName !== sNameWithPrefix) {
			sTryName = sNameWithPrefix;
		} else if (sName !== sNameWithoutPrefix) {
			sTryName = sNameWithoutPrefix;
		}

		if (bIsParameter) { // Parameter

			oMetadata = this._getExactParameterMatch(sName, oFilterBar);
			if (oMetadata) {
				return oMetadata;
			}

			oMetadata = this._getFuzzyParameterMatch(sTryName, oFilterBar);
			if (oMetadata) {
				return oMetadata;
			}

		} else { // SelectOption

			oMetadata = this._getExactFilterMatch(sName, oFilterBar);
			if (oMetadata) {
				return oMetadata;
			}

			oMetadata = this._getFuzzyFilterMatch(sTryName, oFilterBar);
			if (oMetadata) {
				return oMetadata;
			}

		}

		return null;
	};

	VariantConverterFrom.prototype._getExactParameterMatch = function(sName, oFilterBar) {
		var oFilter, oParameter;

		oParameter = this._getParameterWithInnerPrefix(sName, oFilterBar);
		if (oParameter) {
			return oParameter;
		}

		oFilter = this._getFilter(sName, oFilterBar);
		if (oFilter) {
			return oFilter;
		}

		return null;
	};

	VariantConverterFrom.prototype._getFuzzyParameterMatch = function(sName, oFilterBar) {
		var oFilter, oParameter;

		oParameter = this._getParameterWithInnerPrefix(sName, oFilterBar);
		if (oParameter) {
			return oParameter;
		}

		oFilter = this._getFilter(sName, oFilterBar);
		if (oFilter) {
			return oFilter;
		}

		return null;
	};

	VariantConverterFrom.prototype._getExactFilterMatch = function(sName, oFilterBar) {
		var oFilter, oParameter;

		oFilter = this._getFilter(sName, oFilterBar);
		if (oFilter) {
			return oFilter;
		}

		oParameter = this._getParameterWithInnerPrefix(sName, oFilterBar);
		if (oParameter) {
			return oParameter;
		}

		return null;
	};

	VariantConverterFrom.prototype._getFuzzyFilterMatch = function(sName, oFilterBar) {
		var oFilter, oParameter;

		oFilter = this._getFilter(sName, oFilterBar);
		if (oFilter) {
			return oFilter;
		}

		oParameter = this._getParameterWithInnerPrefix(sName, oFilterBar);
		if (oParameter) {
			return oParameter;
		}

		return null;
	};

	/**
	 * convert a simple parameter
	 * @private
	 * @param {object} oSuiteParameters object representing the suite single value parameters
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @param {object} oContent representing the resulting internal format
	 */
	VariantConverterFrom.prototype._addParameters = function(oSuiteParameters, oFilterBar, oContent) {
		var i;
		var sName, sValue;
		var oFilterMetaData;

		for (i = 0; i < oSuiteParameters.length; i++) {
			sValue = oSuiteParameters[i].PropertyValue;
			sName = oSuiteParameters[i].PropertyName;

			if (this._sBasicSearchName && (sName === this._sBasicSearchName)) {
				this._sBasicSearchValue = sValue;
				continue;
			}

			oFilterMetaData = this._getParameterMetaData(sName, oFilterBar, true);
			if (oFilterMetaData) {

				oFilterBar.determineControlByName(sName);
				this._addAccordingMetaData(oContent, oFilterMetaData, sValue);

			} else {
				jQuery.sap.log.error("neither metadata nor custom information for filter '" + sName + "'");
			}
		}
	};

	/**
	 * convert a simple parameter
	 * @private
	 * @param {object} oSuiteSelectOptions object representing the suite SelectOptions entity
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @param {object} oContent representing the resulting internal format
	 */
	VariantConverterFrom.prototype._addSelectOptions = function(oSuiteSelectOptions, oFilterBar, oContent) {
		var i;
		var sName, aRanges;
		var oFilterMetaData, oControl;
		// var oConditionTypeInfo;

		for (i = 0; i < oSuiteSelectOptions.length; i++) {
			sName = oSuiteSelectOptions[i].PropertyName;
			aRanges = oSuiteSelectOptions[i].Ranges;

			if (this._sBasicSearchName && (sName === this._sBasicSearchName)) {
				if (aRanges && aRanges.length > 0) {
					this._sBasicSearchValue = aRanges[0].Low;
				}
				continue;
			}

			oFilterBar.determineControlByName(sName);

			// oConditionTypeInfo = oSuiteSelectOptions[i]["__ConditionTypeInfo"];
			oFilterMetaData = this._getParameterMetaData(sName, oFilterBar, false);
			if (oFilterMetaData) {
				oControl = oFilterMetaData.control;
				this._addRangesAccordingMetaData(oContent, oFilterMetaData, aRanges, oControl);
				// if (oConditionTypeInfo) {
				// this._addConditionTypeInfo(oContent, oFilterMetaData, oConditionTypeInfo);
				// }

			} else {
				jQuery.sap.log.error("neither metadata nor custom information for filter '" + name + "'");
			}
		}
	};

	/**
	 * Convert suite ranges to UI5. Domain 'DDOPTION' P13nCond. Description
	 * --------------------------------------------------------------------------------- I EQ -> I EQ Equals I BT -> I BT Between ... and ... I LE ->
	 * I LE Less than or equal to I GE -> I GE Greater than or equal to I GT -> I GT Greater than I LT -> I LT Less than I CP -> I Contains or
	 * Contains the template StartsWith or EndsWith I NE -> not supported Not equal to I NB -> not supported Not between ... and ... I NP -> not
	 * supported Does not contain the template E EQ -> E EQ E BT -> not supported E ... -> not supported
	 * @protected
	 * @param {string} sSuiteOption Suite option
	 * @param {string} sValue Suite value
	 * @returns {object} Format: {op: string, v: string}
	 */
	VariantConverterFrom.convertOption = function(sSuiteOption, sValue) {
		var sInternalOperation;
		switch (sSuiteOption) {
			case "CP":
				sInternalOperation = sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains;
				if (sValue) {
					var nIndexOf = sValue.indexOf('*');
					var nLastIndex = sValue.lastIndexOf('*');

					// only when there are '*' at all
					if (nIndexOf > -1) {
						if ((nIndexOf === 0) && (nLastIndex !== (sValue.length - 1))) {
							sInternalOperation = sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith;
							sValue = sValue.substring(1, sValue.length);
						} else if ((nIndexOf !== 0) && (nLastIndex === (sValue.length - 1))) {
							sInternalOperation = sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith;
							sValue = sValue.substring(0, sValue.length - 1);
						} else {
							sValue = sValue.substring(1, sValue.length - 1);
						}
					}
				}
				break;
			case "EQ":
			case "BT":
			case "LE":
			case "GE":
			case "GT":
			case "LT":
				sInternalOperation = sSuiteOption;
				break;
			default:
				jQuery.sap.log.error("Suite Option is not supported '" + sSuiteOption + "'");
				sInternalOperation = undefined;
				sValue = undefined;
		}

		return {
			op: sInternalOperation,
			v: sValue
		};
	};

	VariantConverterFrom.prototype._addRangesAccordingMetaData = function(oContent, oFilterMetaData, aRanges, oControl, sName) {
		var i, oObj;

		var fCreateRanges = function(sFilterName, aRanges) {

			var i, oItem, oObj;

			for (i = 0; i < aRanges.length; i++) {
				oObj = VariantConverterFrom.convertOption(aRanges[i].Option, aRanges[i].Low);

				if (oObj && oObj.op) {
					oItem = {
						"exclude": (aRanges[i].Sign === "E"),
						"operation": oObj.op,
						"keyField": sFilterName,
						"value1": oObj.v,
						"value2": aRanges[i].High
					};

					if (!oContent[sFilterName]) {
						oContent[sFilterName] = {
							ranges: [],
							items: [],
							value: null
						};
					}

					oContent[sFilterName].ranges.push(oItem);
				}
			}
		};

		if (aRanges && aRanges.length > 0) {

			// custom filters
			if (oFilterMetaData.isCustomFilterField) {
				if (!oContent._CUSTOM) {
					oContent._CUSTOM = {};
				}
				oContent._CUSTOM[oFilterMetaData.fieldName] = aRanges[0].Low;
				return;
			}

			// conditiontype filters
			if (oFilterMetaData.conditionType) {
				for (i = 0; i < aRanges.length; i++) { // ensure the upper value is set
					if (!aRanges[i].High) {
						aRanges[i].High = aRanges[i].Low;
					}
				}
				fCreateRanges(oFilterMetaData.fieldName, aRanges);
				return;
			}

			// consider filter restrictions
			if (oFilterMetaData.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.single) {
				if (!aRanges[0].Low && oControl && (oControl instanceof DatePicker)) {
					oContent[oFilterMetaData.fieldName] = null;
				} else {
					oContent[oFilterMetaData.fieldName] = aRanges[0].Low;
				}

			} else if (oFilterMetaData.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.interval) {

				/* eslint-disable no-lonely-if */
				if (oControl && (oControl instanceof DateRangeSelection)) {

					if (aRanges[0].Low && aRanges[0].High) {
						oContent[oFilterMetaData.fieldName] = {
							low: aRanges[0].Low,
							high: aRanges[0].High
						};
					} else if (aRanges[0].Low && !aRanges[0].High) {
						oContent[oFilterMetaData.fieldName] = {
							low: aRanges[0].Low,
							high: aRanges[0].Low
						};

					} else if (!aRanges[0].Low && aRanges[0].High) {
						oContent[oFilterMetaData.fieldName] = {
							low: aRanges[0].High,
							high: aRanges[0].High
						};
					} else {
						oContent[oFilterMetaData.fieldName] = {
							low: null,
							high: null
						};
					}

				} else {

					if (oFilterMetaData.type === "Edm.Time") {
						fCreateRanges(oFilterMetaData.fieldName, aRanges);
					} else {
						oContent[oFilterMetaData.fieldName] = {
							low: aRanges[0].Low === undefined ? null : aRanges[0].Low,
							high: aRanges[0].High === undefined ? null : aRanges[0].High
						};
					}
				}
				/* eslint-enable no-lonely-if */

			} else if (oFilterMetaData.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.multiple) {

				oContent[oFilterMetaData.fieldName] = {
					ranges: [],
					items: [],
					value: null
				};

				if (oControl && ((oControl instanceof MultiComboBox) || (oControl instanceof MultiInput))) {
					for (i = 0; i < aRanges.length; i++) {
						oObj = VariantConverterFrom.convertOption(aRanges[i].Option, aRanges[i].Low);

						if (oObj.op === sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ) {

							if (oFilterMetaData.type === "Edm.DateTime") {
								oContent[oFilterMetaData.fieldName].ranges.push({
									value1: oObj.v
								});
							} else {
								oContent[oFilterMetaData.fieldName].items.push({
									key: oObj.v
								});
							}
						}
					}
				} else {
					fCreateRanges(oFilterMetaData.fieldName, aRanges);
				}

			} else {

				fCreateRanges(oFilterMetaData.fieldName, aRanges);
			}

			jQuery.sap.log.warning("potential reduced information for filter '" + oFilterMetaData.fieldName + "'");

		} else {
			jQuery.sap.log.warning("no Ranges-section found for filter '" + oFilterMetaData.fieldName + "'");
		}
	};

	VariantConverterFrom.prototype._addAccordingMetaData = function(oContent, oFilterMetaData, sValue) {

		var sHigh = oFilterMetaData.type === "Edm.DateTime" ? "" : sValue;

		var aRanges = [
			{
				Sign: "I",
				Low: sValue,
				High: sHigh,
				Option: "EQ"
			}
		];

		this._addRangesAccordingMetaData(oContent, oFilterMetaData, aRanges);

	};

	// VariantConverterFrom.prototype._addConditionTypeInfo = function(oContent, oFilterMetaData, oInfo) {
	// return;
	// oContent[oFilterMetaData.fieldName].conditionTypeInfo = {
	// data : oInfo.Data,
	// name: oInfo.Name,
	// }
	// };

	return VariantConverterFrom;

}, /* bExport= */true);

}; // end of sap/ui/comp/filterbar/VariantConverterFrom.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.VariantConverterTo') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.filterbar.VariantConverterTo'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/VariantConverterTo",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/comp/valuehelpdialog/ValueHelpDialog', 'sap/ui/comp/odata/ODataType', 'sap/ui/comp/util/FormatUtil'
], function(jQuery, library, ValueHelpDialog, ODataType, FormatUtil) {
	"use strict";

	/**
	 * Constructs a utility class to convert the FilterBar variant from/to internal to suite format
	 * @constructor
	 * @public
	 * @author SAP
	 */
	var VariantConverterTo = function() {
	};

	/**
	 * the current variant will be transformed to suite format
	 * @public
	 * @param {string} sKey of the current variant
	 * @param {array} aFilters containing filter names
	 * @param {string} sData json string representing the filter values
	 * @param {object} oFilterBar instance of the FilterBar object
	 * @param {string} sVersion determining the API version number
	 * @returns {string} variant in the suite format as json string
	 */
	VariantConverterTo.prototype.convert = function(sKey, aFilters, sData, oFilterBar, sVersion) {

		var aFields, i, oJson, oJsonCustom, n = null, sBasicSearchName, sBasicSearchValue;

		var oSuiteContent = {
			SelectionVariantID: sKey
		};

		this._sAPILevel = sVersion;

		if (sData && aFilters) {
			oJson = JSON.parse(sData);
			if (oJson) {
				aFields = this._getFields(aFilters);
				if (aFields && aFields.length > 0) {
					for (i = 0; i < aFields.length; i++) {
						this._convertField(oSuiteContent, aFields[i], oJson, oFilterBar);
					}
				}

				// CUSTOM FIELDS
				if (oJson._CUSTOM) {

					if (typeof oJson._CUSTOM === "string") {
						oJsonCustom = JSON.parse(oJson._CUSTOM);
					} else {
						oJsonCustom = oJson._CUSTOM;
					}

					for (n in oJsonCustom) {
						if (n) {
							this._addSingleValue(oSuiteContent, n, VariantConverterTo._getValue(oJsonCustom[n], true));
						}
					}
				}

				if (oFilterBar && oFilterBar.getBasicSearchName) {
					sBasicSearchName = oFilterBar.getBasicSearchName();
					if (sBasicSearchName) {
						sBasicSearchValue = oFilterBar.getBasicSearchValue();
						this._addSingleValue(oSuiteContent, sBasicSearchName, VariantConverterTo._getValue(sBasicSearchValue, true));
					}
				}
			}
		}

		return JSON.stringify(oSuiteContent);
	};

	/**
	 * retrieve the meta data for a given filter
	 * @private
	 * @param {string} sName of the filter
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar instance of the filter bar control
	 * @returns {object} meta data of the filter; null otherwise
	 */
	VariantConverterTo.prototype._getParameterMetaData = function(sName, oFilterBar) {
		var i, j, oGroup;

		var aFilterMetaData = oFilterBar.getFilterBarViewMetadata();
		if (aFilterMetaData) {
			for (i = 0; i < aFilterMetaData.length; i++) {
				oGroup = aFilterMetaData[i];
				for (j = 0; j < oGroup.fields.length; j++) {
					if (sName === oGroup.fields[j].fieldName) {
						return oGroup.fields[j];
					}
				}
			}
		}

		if (oFilterBar.getAnalyticalParameters) {
			var aAnaParameterMetaData = oFilterBar.getAnalyticalParameters();
			if (aAnaParameterMetaData) {
				for (j = 0; j < aAnaParameterMetaData.length; j++) {

					if (sName === aAnaParameterMetaData[j].fieldName) {
						return aAnaParameterMetaData[j];
					}
				}
			}
		}

		return null;
	};

	/**
	 * retrieve the array of relevant filters
	 * @private
	 * @param {object} oSuiteContent represents the suite format of the variant; will be changed
	 * @param {string} sFilterName name of the filter
	 * @param {object} oContent json representing the values of the variant
	 * @param {object} oFilterBar representing the FilterBar instance
	 */
	VariantConverterTo.prototype._convertField = function(oSuiteContent, sFilterName, oContent, oFilterBar) {
		var oObj, sValue, sOp = null, oRanges, oFilterMetaData;

		if (oContent && sFilterName && oSuiteContent) {
			oObj = oContent[sFilterName];
			if (oObj) {

				oFilterMetaData = this._getParameterMetaData(sFilterName, oFilterBar);
				if (oFilterMetaData) {
					if (oFilterMetaData.isCustomFilterField) {
						return; // custom fields will be handled separately
					}

					if (oFilterMetaData.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.single) {
						sValue = (oObj.value === undefined) ? oObj : oObj.value;

						sValue = VariantConverterTo._getValue(sValue, true);
						this._addSingleValue(oSuiteContent, sFilterName, sValue);

					} else if (oFilterMetaData.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.interval) {
						if (oObj.conditionTypeInfo) {
							this._convertFieldByValue(oSuiteContent, sFilterName, oContent, oFilterMetaData);
						} else {
							oRanges = VariantConverterTo.addRangeEntry(oSuiteContent, sFilterName);

							if ((oFilterMetaData.type === "Edm.DateTime") && !oObj.high) {
								oObj.high = oObj.low;
							} else if ((oFilterMetaData.type === "Edm.String") && !oObj.high) {
								sOp = "EQ";
							}

							if (oFilterMetaData.type === "Edm.Time") {
								this._addRangeMultipleRangeValues(oRanges, oObj.ranges, true);
							} else if (ODataType.isNumeric(oFilterMetaData.type) && !oObj.high) {
								var sOp = "BT", aValue = FormatUtil.parseFilterNumericIntervalData(oObj.low);
								if (aValue && (aValue.length === 2) && aValue[0]) {
									this._addRangeLowHigh(oRanges, {
										low: aValue[0],
										high: aValue[1]
									}, "BT");
								} else {
									this._addRangeLowHigh(oRanges, oObj, "EQ");
								}
							} else {
								this._addRangeLowHigh(oRanges, oObj, sOp);
							}
						}
					} else if (oFilterMetaData.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.multiple) {
						oRanges = VariantConverterTo.addRangeEntry(oSuiteContent, sFilterName);
						if (oObj.items && oObj.items.length > 0) {
							this._addRangeMultipleSingleValues(oRanges, oObj.items);
						} else if (oObj.ranges && oObj.ranges.length > 0) {
							this._addRangeMultipleRangeValues(oRanges, oObj.ranges);
						} else {
							this._addRangeSingleValue(oRanges, oObj.value);
						}
					} else {
						this._convertFieldByValue(oSuiteContent, sFilterName, oContent, oFilterMetaData);
					}
				} else {
					this._convertFieldByValue(oSuiteContent, sFilterName, oContent, oFilterMetaData);
				}

			}
		}
	};

	VariantConverterTo.prototype._convertFieldByValue = function(oSuiteContent, sFilterName, oContent, oFilterMetaData) {
		var oObj;
		var oRanges;

		if (oContent && sFilterName && oSuiteContent) {
			oObj = oContent[sFilterName];
			if (oObj) {
				if (oObj.conditionTypeInfo) {
					if (oObj.ranges && oObj.ranges.length > 0) {
						oRanges = VariantConverterTo.addRangeEntry(oSuiteContent, sFilterName);
						VariantConverterTo.addRanges(oRanges, oObj.ranges);
					}
				} else if ((oObj.ranges !== undefined) && (oObj.items !== undefined) && (oObj.value !== undefined)) {

					oRanges = VariantConverterTo.addRangeEntry(oSuiteContent, sFilterName);

					if (oObj.ranges && oObj.ranges.length > 0) {
						VariantConverterTo.addRanges(oRanges, oObj.ranges);
					}
					if (oObj.items && oObj.items.length > 0) {
						this._addRangeMultipleSingleValues(oRanges, oObj.items);
					}
					if (oObj.value) { // date
						this._addRangeSingleValue(oRanges, oObj.value);
					}

				} else if ((oObj.items !== undefined) && oObj.items && (oObj.items.length > 0)) {
					oRanges = VariantConverterTo.addRangeEntry(oSuiteContent, sFilterName);
					this._addRangeMultipleSingleValues(oRanges, oObj.items);
				} else if ((oObj.low !== undefined) && oObj.low && (oObj.high !== undefined) && oObj.high) { // date
					oRanges = VariantConverterTo.addRangeEntry(oSuiteContent, sFilterName);
					this._addRangeLowHigh(oRanges, oObj);
				} else if ((oObj.value !== undefined) && oObj.value) {
					this._addSingleValue(oSuiteContent, sFilterName, oObj.value);
				} else if (oObj) {
					this._addSingleValue(oSuiteContent, sFilterName, oObj);
				}
			}
		}
	};

	/**
	 * create a suite 'Ranges' object
	 * @protected
	 * @param {object} oSuiteContent represents the suite format of the variant; will be changed
	 * @param {string} sFilterName name of the filter
	 * @returns {object} representing the suite ranges segment
	 */
	VariantConverterTo.addRangeEntry = function(oSuiteContent, sFilterName) {
		var oObj = {
			PropertyName: sFilterName,
			Ranges: []
		};
		if (!oSuiteContent.SelectOptions) {
			oSuiteContent.SelectOptions = [];
		}
		oSuiteContent.SelectOptions.push(oObj);

		return oObj.Ranges;
	};

	/**
	 * Convert UI5 to suite ranges. P13nCond. Domain 'DDOPTION' Description
	 * --------------------------------------------------------------------------------- I EQ -> I EQ Equals I BT -> I BT Between ... and ... I
	 * Contains -> I CP Contains the template I StartsWith -> I CP I EndsWith -> I CP I LE -> I LE Less than or equal to I GE -> I GE Greater than or
	 * equal to I GT -> I GT Greater than I LT -> I LT Less than E EQ -> E EQ NE Not equal to NB Not between ... and ... NP Does not contain the
	 * template
	 * @protected
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {array} aRanges containing the ranges
	 */
	VariantConverterTo.addRanges = function(oRanges, aRanges) {

		var sSign, sOption, sLow, sHigh;

		for (var i = 0; i < aRanges.length; i++) {
			sSign = aRanges[i].exclude ? "E" : "I";
			sLow = VariantConverterTo._getValue(aRanges[i].value1, true);
			sHigh = null;
			if (aRanges[i].operation === sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT) {
				sHigh = VariantConverterTo._getValue(aRanges[i].value2);
			}

			switch (aRanges[i].operation) {
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains:
					sOption = "CP";
					if (sLow) {
						sLow = "*" + sLow + "*";
					}
					break;
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith:
					sOption = "CP";
					if (sLow) {
						sLow = sLow + "*";
					}
					break;
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith:
					sOption = "CP";
					if (sLow) {
						sLow = "*" + sLow;
					}
					break;
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ:
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT:
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LE:
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GE:
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GT:
				case sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LT:
					sOption = aRanges[i].operation;
					break;
				default:
					jQuery.sap.log.error("ValueHelpRangeOperation is not supported '" + aRanges[i].operation + "'");
					return;
			}

			oRanges.push({
				Sign: sSign,
				Option: sOption,
				Low: sLow,
				High: sHigh
			});
		}
	};

	/**
	 * convert UI5 to suite multiple single values
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {array} aItems containing the ranges
	 */
	VariantConverterTo.prototype._addRangeMultipleSingleValues = function(oRanges, aItems) {

		for (var i = 0; i < aItems.length; i++) {
			oRanges.push({
				Sign: "I",
				Option: "EQ",
				Low: VariantConverterTo._getValue(aItems[i].key, true),
				High: null
			});
		}
	};

	VariantConverterTo.prototype._addRangeMultipleRangeValues = function(oRanges, aItems, bTimeInterval) {

		for (var i = 0; i < aItems.length; i++) {
			oRanges.push({
				Sign: "I",
				Option: bTimeInterval ? "BT" : "EQ",
				Low: VariantConverterTo._getValue(aItems[i].value1, true),
				High: bTimeInterval ? VariantConverterTo._getValue(aItems[i].value2) : null
			});
		}
	};

	/**
	 * convert UI5 to suite between e.q. Date
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {string} sValue of the filter
	 */
	VariantConverterTo.prototype._addRangeSingleValue = function(oRanges, sValue) {

		oRanges.push({
			Sign: "I",
			Option: "EQ",
			Low: VariantConverterTo._getValue(sValue, true),
			High: null
		});
	};

	/**
	 * convert UI5 to suite between e.q. Date
	 * @private
	 * @param {object} oRanges represents the suite ranges format of the variant; will be changed
	 * @param {object} oLowHigh containing the ranges
	 * @param {string} sOp override the default operation
	 */
	VariantConverterTo.prototype._addRangeLowHigh = function(oRanges, oLowHigh, sOp) {
		var sOperation = sOp || "BT";

		oRanges.push({
			Sign: "I",
			Option: sOperation,
			Low: VariantConverterTo._getValue(oLowHigh.low, true),
			High: VariantConverterTo._getValue(oLowHigh.high)
		});
	};

	/**
	 * convert UI5 to suite between e.q. Date
	 * @private
	 * @param {object} oSuiteContent represents the suite format of the variant; will be changed
	 * @param {string} sFilterName name of the filter
	 * @param {string} sValue of the filter
	 */
	VariantConverterTo.prototype._addParamaterSingleValue = function(oSuiteContent, sFilterName, sValue) {

		if (!oSuiteContent.Parameters) {
			oSuiteContent.Parameters = [];
		}

		oSuiteContent.Parameters.push({
			PropertyName: sFilterName,
			PropertyValue: sValue
		});
	};

	VariantConverterTo.prototype._createRangeSingleValue = function(oSuiteContent, sFilterName, sValue) {
		var oRanges = VariantConverterTo.addRangeEntry(oSuiteContent, sFilterName);
		this._addRangeSingleValue(oRanges, sValue);
	};

	VariantConverterTo.prototype._addSingleValue = function(oSuiteContent, sFilterName, sValue) {

		var aName;

		if (this._sAPILevel) {
			aName = sFilterName.split(sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX);
			if (aName.length > 1) {
				this._addParamaterSingleValue(oSuiteContent, aName[aName.length - 1], sValue);
			} else {
				this._createRangeSingleValue(oSuiteContent, sFilterName, sValue);
			}

		} else {
			this._addParamaterSingleValue(oSuiteContent, sFilterName, sValue);

		}
	};

	/**
	 * retrieve the array of relevant filters
	 * @private
	 * @param {array} aFilters representing the filter items
	 * @returns {array} of strings; array of filter names
	 */
	VariantConverterTo.prototype._getFields = function(aFilters) {

		var aRelevantFilters = [];

		if (aFilters) {
			for (var i = 0; i < aFilters.length; i++) {
				aRelevantFilters.push(aFilters[i].name);
			}
		}

		return aRelevantFilters;
	};

	/**
	 * returns either the value
	 * @private
	 * @param {object} oValue object
	 * @param {boolean} bUseEmptyString indicates if a default value should be null or empty string
	 * @returns {object} stringified value
	 */
	VariantConverterTo._getValue = function(oValue, bUseEmptyString) {
		if ((oValue === null) || (oValue === undefined) || (oValue === "")) {
			return (bUseEmptyString ? "" : null);
		}

		return "" + oValue;
	};

	return VariantConverterTo;

}, /* bExport= */true);

}; // end of sap/ui/comp/filterbar/VariantConverterTo.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.FlexConnector') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// To avoid loading the fl lib in every case it is only "lazy"-loaded on lib level and loaded explicitly here:
sap.ui.getCore().loadLibrary('sap.ui.fl');

/**
 * Connector to layered repository (LRep) APIs.
 *
 * @alias sap.ui.comp.personalization.FlexConnector
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.44.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */

jQuery.sap.declare('sap.ui.comp.navpopover.FlexConnector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.ChangePersistenceFactory'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/FlexConnector",[
	'sap/ui/comp/library', 'sap/ui/comp/navpopover/flexibility/changes/AddLink', 'sap/ui/comp/navpopover/flexibility/changes/RemoveLink', 'sap/ui/fl/Utils', 'sap/ui/fl/FlexControllerFactory', 'sap/ui/fl/ChangePersistenceFactory'
], function(CompLibrary, AddLink, RemoveLink, FlUtil, FlexControllerFactory, ChangePersistenceFactory) {
	"use strict";

	var FlexConnector = {

		/**
		 * Returns the Component that belongs to given control whose type is "application". If the control has no component, it walks up the control
		 * tree in order to find a control having one.
		 *
		 * @param {sap.ui.core.Control} oControl Control for which changes will be applied
		 * @returns {sap.ui.base.Component} Component
		 * @private
		 */
		getAppComponentForControl: function(oControl) {
			return FlUtil.getAppComponentForControl(oControl);
		},

		/**
		 * Indicates if the VENDOR layer is selected.
		 *
		 * @returns {Boolean} true if it's a VENDOR layer
		 * @private
		 */
		isVendorLayer: function() {
			return FlUtil.isVendorLayer();
		},

		/**
		 * Creates flexibility changes for <code>oMLinks</code> and also saves them in the USER layer.
		 *
		 * @param {object[]} aMAddedLinks Array of objects in format:
		 *
		 * <pre>
		 * [{key: {string}, visible: {boolean}}]
		 * </pre>
		 *
		 * @param {object[]} aMRemovedLinks Array of objects in format:
		 *
		 * <pre>
		 * [{key: {string}, visible: {boolean}}]
		 * </pre>
		 *
		 * @param {sap.ui.core.Control} oControl Control for which changes will be applied
		 * @returns {Promise} A <code>Promise</code> for asynchronous execution
		 * @private
		 */
		createAndSaveChangesForControl: function(aMAddedLinks, aMRemovedLinks, oControl) {
			if (!aMAddedLinks.length && !aMRemovedLinks.length) {
				return Promise.resolve();
			}
			this.createChangesForControl(aMRemovedLinks, oControl, sap.ui.comp.navpopover.ChangeHandlerType.removeLink);
			this.createChangesForControl(aMAddedLinks, oControl, sap.ui.comp.navpopover.ChangeHandlerType.addLink);

			return this.saveChangesForControl(oControl);
		},

		/**
		 * Creates flexibility change for each element of <code>aMLinks</code> array with the <code>sChangeType</code> change type for
		 * <code>oControl</code> in the USER layer.
		 *
		 * @param {object[]} aMLinks Array of objects of format {key: {string}, visible: {boolean}, index: {integer}}
		 * @param {sap.ui.core.Control} oControl Control for which changes will be applied
		 * @param {string} sChangeType Registered type of ChangeHandler in sap.ui.comp.library.js
		 * @private
		 */
		createChangesForControl: function(aMLinks, oControl, sChangeType) {
			if (!aMLinks.length) {
				return;
			}
			if (!sChangeType) {
				throw new Error("sChangeType should be filled");
			}
			var oFlexController = FlexControllerFactory.createForControl(oControl);
			aMLinks.forEach(function(oMLink) {
				oFlexController.createAndApplyChange({
					changeType: sChangeType,
					content: oMLink,
					isUserDependent: true
				}, oControl);
			});
		},

		/**
		 * Saves all flexibility changes.
		 *
		 * @param {sap.ui.core.Control} oControl Control for which changes will be applied
		 * @returns {Promise} A <code>Promise</code> for asynchronous execution
		 * @private
		 */
		saveChangesForControl: function(oControl) {
			return FlexControllerFactory.createForControl(oControl).saveAll();
			// return new Promise(function(resolve, reject) {
			// 	setTimeout(function() {
			// 		FlexControllerFactory.createForControl(oControl).saveAll().then(function() {
			// 			return resolve();
			// 		})['catch'](function(oError) {
			// 			return reject(oError);
			// 		});
			// 		// return reject({
			// 		// 	status: "Dummy save"
			// 		// });
			// 	}, 5000);
			// });
		},

		/**
		 * Reads flexibility changes for the <code>sStableID</code>.
		 *
		 * @param {string} sStableID Stable ID for which changes will be read
		 * @param {sap.ui.core.Control} oControl Control for which changes will be applied
		 * @returns {object[]} Array, empty array if no changes exist
		 * @private
		 */
		readChangesForControl: function(sStableID, oControl) {
			var oAppComponent = this.getAppComponentForControl(oControl);
			var sComponentName = FlUtil.getFlexReference(oAppComponent.getManifestObject());
			var oMapOfChanges = ChangePersistenceFactory.getChangePersistenceForComponent(sComponentName).getChangesMapForComponent();
			return oMapOfChanges.mChanges[sStableID] ? oMapOfChanges.mChanges[sStableID] : [];
		},

		/**
		 * Discards flexibility changes.
		 *
		 * @param {sap.ui.core.Control} oControl Control for which changes will be discarded
		 * @param {boolean} bDiscardPersonalization If <code>true</code> changes of end-user will be discarded
		 * @returns {Promise} A <code>Promise</code> for asynchronous execution
		 * @private
		 */
		discardChangesForControl: function(oControl, bDiscardPersonalization) {
			// return Promise.reject("Dummy discard");
			return FlexControllerFactory.createForControl(oControl).discardChangesForId(oControl.getId(), bDiscardPersonalization).then(function() {
				if (bDiscardPersonalization) {
					AddLink.discardChangesOfLayer("USER", oControl);
					RemoveLink.discardChangesOfLayer("USER", oControl);
				}
			});
		},

		// ---------------------------------------------------------------------------------------------

		/**
		 * Activates a channel in order to collect statistics about flexibility changes which will be applied after the channel has been activated.
		 *
		 * @private
		 */
		activateApplyChangeStatistics: function() {
			var that = this;
			this.aStatistics = [];
			var fWriteStatistics = function(oChange, oNavigationPopover) {
				if (that.aStatistics.findIndex(function(oStatistic) {
					return oStatistic.stableId === oNavigationPopover.getId() && oStatistic.changeId === oChange.getId();
				}) < 0) {
					var oAvailableAction = oNavigationPopover.getAvailableActions().find(function(oAvailableAction_) {
						return oAvailableAction_.getKey() === oChange.getContent().key;
					});
					that.aStatistics.push({
						stableId: oNavigationPopover.getId(),
						changeId: oChange.getId(),
						layer: oChange.getLayer(),
						key: oChange.getContent().key,
						text: oAvailableAction ? oAvailableAction.getText() : '',
						changeType: oChange.getChangeType()
					});
				}
			};

			var fDiscardFromStatistics = function(sLayer) {
				that.aStatistics = that.aStatistics.filter(function(oStatistic) {
					return oStatistic.layer !== sLayer;
				});
			};

			// Monkey patch AddLink.applyChange
			var fAddLinkApplyChangeOrigin = AddLink.applyChange.bind(AddLink);
			AddLink.applyChange = function(oChange, oNavigationPopover, mPropertyBag) {
				fWriteStatistics(oChange, oNavigationPopover);
				fAddLinkApplyChangeOrigin(oChange, oNavigationPopover, mPropertyBag);
			};

			// Monkey patch RemoveLink.applyChange
			var fRemoveLinkApplyChangeOrigin = RemoveLink.applyChange.bind(RemoveLink);
			RemoveLink.applyChange = function(oChange, oNavigationPopover, mPropertyBag) {
				fWriteStatistics(oChange, oNavigationPopover);
				fRemoveLinkApplyChangeOrigin(oChange, oNavigationPopover, mPropertyBag);
			};

			// Monkey patch AddLink.discardChangesOfLayer
			var fAddLinkDiscardChangesOfLayerOrigin = AddLink.discardChangesOfLayer.bind(AddLink);
			AddLink.discardChangesOfLayer = function(sLayer, oNavigationPopover) {
				fDiscardFromStatistics(sLayer);
				fAddLinkDiscardChangesOfLayerOrigin(sLayer, oNavigationPopover);
			};

			// Monkey patch RemoveLink.discardChangesOfLayer
			var fRemoveLinkDiscardChangesOfLayerOrigin = RemoveLink.discardChangesOfLayer.bind(RemoveLink);
			RemoveLink.discardChangesOfLayer = function(sLayer, oNavigationPopover) {
				fDiscardFromStatistics(sLayer);
				fRemoveLinkDiscardChangesOfLayerOrigin(sLayer, oNavigationPopover);
			};
		},

		_formatStatistic: function(oStatistic) {
			var sLayer = oStatistic.layer;
			switch (oStatistic.layer) {
				case "VENDOR":
					sLayer = "" + sLayer;
					break;
				case "CUSTOMER":
					sLayer = "        " + sLayer;
					break;
				case "USER":
					sLayer = "                " + sLayer;
					break;
				default:
					sLayer = "" + sLayer;
			}
			var sValue;
			switch (oStatistic.changeType) {
				case sap.ui.comp.navpopover.ChangeHandlerType.addLink:
					sValue = "On";
					break;
				case sap.ui.comp.navpopover.ChangeHandlerType.removeLink:
					sValue = "Off";
					break;
				default:
					sValue = "";
			}
			return {
				formattedLayer: sLayer,
				formattedValue: sValue
			};
		},

		/**
		 * Shows statistics for all applied links in console collected since the activation has been started.
		 *
		 * @private
		 */
		printStatisticAll: function() {
			if (!this.aStatistics) {
				jQuery.sap.log.info("Please activate with sap.ui.comp.navpopover.FlexConnector.activateApplyChangeStatistics()");
				return;
			}
			var that = this;
			jQuery.sap.log.info("idx - VENDOR ------------ CUSTOMER ----------- USER --------------------------------------");
			this.aStatistics.forEach(function(oStatistic, iIndex) {
				var oFormattedStatistic = that._formatStatistic(oStatistic);
				jQuery.sap.log.info(iIndex + " " + oStatistic.stableId + " " + oFormattedStatistic.formattedLayer + " '" + oStatistic.text + "' " + oFormattedStatistic.formattedValue);
			});
		}
	};
	return FlexConnector;
}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/FlexConnector.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.MetadataAnalyser') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Analyses the OData service metadata doc ($metadata), having SAP-Annotations,
// to resolve all properties from entities, filterable properties, etc.
// -----------------------------------------------------------------------------
/* global Promise */
jQuery.sap.declare('sap.ui.comp.odata.MetadataAnalyser'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.ODataModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.ODataAnnotations'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/MetadataAnalyser",[
	'jquery.sap.global', 'sap/ui/model/odata/ODataModel', 'sap/ui/model/odata/ODataAnnotations', './ODataType'
], function(jQuery, ODataModel, ODataAnnotations, ODataType) {
	"use strict";

	// map OData v4 FilterExpressionType enum member to corresponding filter-restriction value
	var mFilterRestrictions = {
		"com.sap.vocabularies.Common.v1.FilterExpressionType/SingleInterval": "interval",
		"com.sap.vocabularies.Common.v1.FilterExpressionType/MultiValue": "multi-value",
		"com.sap.vocabularies.Common.v1.FilterExpressionType/SingleValue": "single-value"
	};

	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations. \n<b>Note:</b> Please ensure that
	 * the promise returned by {@link sap.ui.model.odata.ODataMetaModel#loaded loaded} is resolved before using this class!
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {String} oResourceRootUri - The URL of the resource or ODataModel
	 * @author SAP SE
	 */
	var MetadataAnalyser = function(oResourceRootUri) {
		if (typeof oResourceRootUri === "object") {
			this.oModel = oResourceRootUri;
		} else {
			this._sResourceRootUri = oResourceRootUri;
		}
		this._oMetadata = null;
		if (!this.oModel && this._sResourceRootUri) {
			this.oModel = new ODataModel(this._sResourceRootUri);
		}
		if (this.oModel) {
			this._oMetaModel = this.oModel.getMetaModel();
		}
		if (this._oMetaModel) {
			this._oMetadata = this._oMetaModel.getProperty("/");
		}

		// store the default schema
		if (this._oMetadata && this._oMetadata.dataServices) {
			this._oSchemaDefinition = this._oMetadata.dataServices.schema[0];
		}
	};

	// TODO: should we cache all these entity fields for future access?
	// this.mFilterFields[sEntityTypeName] = aFinalFilterableFields;

	/**
	 * Returns the namespace from the Schema
	 * 
	 * @returns {string} the namespace
	 * @public
	 * @deprecated Since 1.29.
	 */
	MetadataAnalyser.prototype.getNamespace = function() {
		if (this._oSchemaDefinition) {
			return this._oSchemaDefinition.namespace;
		}
	};

	/**
	 * @public Get the schema definition of the odata service
	 * @returns {Object} Get the schema definition of the odata service
	 * @deprecated Since 1.29.
	 */
	MetadataAnalyser.prototype.getSchemaDefinition = function() {
		return this._oSchemaDefinition;
	};

	/**
	 * Gets the specified attribute (sap:annotation) value from the default entity container
	 * 
	 * @param {String} sAttribute - The name of the attribute (sap:annotation) on the entity container
	 * @returns {String} The value of the specified attribute (if found)|null
	 * @public
	 */
	MetadataAnalyser.prototype.getEntityContainerAttribute = function(sAttribute) {
		var sAttributeValue = null, oEntityContainer;
		if (this._oMetaModel && sAttribute) {
			if (sAttribute.indexOf("sap:") < 0) {
				sAttribute = "sap:" + sAttribute;
			}
			oEntityContainer = this._oMetaModel.getODataEntityContainer();
			sAttributeValue = oEntityContainer[sAttribute] || null;
		}
		return sAttributeValue;
	};

	/**
	 * Gets the specified label for an Entity with non annotation
	 * 
	 * @param {string} sEntityType - name of the entity set
	 * @returns {string} - value of the label (if found)|empty
	 * @public
	 */
	MetadataAnalyser.prototype.getEntityLabelByEntityTypeName = function(sEntityType) {
		var oEntityDef = this._getEntityDefinition(sEntityType), oResult, sResult = "";
		if (oEntityDef) {
			oResult = oEntityDef["com.sap.vocabularies.Common.v1.Label"];
			if (oResult && oResult.String) {
				sResult = oResult.String;
			}
		}

		return sResult;
	};

	/**
	 * Gets the entity definition for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document (with or without namespace)
	 * @returns {Object} entity definition
	 * @private
	 */
	MetadataAnalyser.prototype._getEntityDefinition = function(sEntityTypeName) {
		var oEntityDef = null;
		if (sEntityTypeName) {
			oEntityDef = this._oMetaModel.getODataEntityType(this._getFullyQualifiedNameForEntity(sEntityTypeName));
		}
		return oEntityDef;
	};

	/**
	 * Gets the complex type definition for the specified type
	 * 
	 * @param {String} sComplexTypeName - The complex type name as specified in the metadata document (with or without namespace)
	 * @returns {Object} entity definition
	 * @private
	 */
	MetadataAnalyser.prototype._getComplexTypeDefinition = function(sComplexTypeName) {
		var oComplexTypeDef = null;
		if (sComplexTypeName) {
			oComplexTypeDef = this._oMetaModel.getODataComplexType(this._getFullyQualifiedNameForEntity(sComplexTypeName));
		}
		return oComplexTypeDef;
	};

	/**
	 * Gets the property name of a complextype in a given entityType
	 * 
	 * @param {String} sEntityType - EntityType to search for the property
	 * @param {String} sComplexTypeEntityName - Type-Name of the complextype to resolve it.
	 * @returns {String} Returns the propertyname of the complextype as used in the given entityType
	 * @private
	 */
	MetadataAnalyser.prototype._getNameOfPropertyUsingComplexType = function(sEntityType, sComplexTypeEntityName) {
		var sCurrentNamespace = this.getNamespace();
		if (sEntityType && sComplexTypeEntityName && sCurrentNamespace) {
			var sTypeOnMainEntityType = sCurrentNamespace + "." + sComplexTypeEntityName;
			var oMainEntityTypeDef = this._getEntityDefinition(sEntityType);
			if (oMainEntityTypeDef) {
				var aProperties = oMainEntityTypeDef.property;
				if (aProperties && aProperties.length) {
					var i = 0;
					for (i = 0; i < aProperties.length; i++) {
						var oProperty = aProperties[i];
						if (oProperty && oProperty.type === sTypeOnMainEntityType) {
							return oProperty.name;
						}
					}
				}
			}
		}
		return null;
	};

	/**
	 * Removes the namespace from the specified string <br>
	 * returns string content that appears after the last "." separator <br>
	 * E.g.: if input is "com.sap.foo.EntityType", returns "EntityType" as the result
	 * 
	 * @param {string} sString String
	 * @returns {string} String without name space. If no name space was found, the original string will be returned.
	 * @public
	 */
	MetadataAnalyser.prototype.removeNamespace = function(sString) {
		var iIndex, sResult = sString;
		// Return the result
		if (sString) {
			iIndex = sString.lastIndexOf(".") + 1;
		}
		if (iIndex > 0) {
			sResult = sString.substring(iIndex);
		}
		return sResult;
	};

	/**
	 * Gets the entity type from the Entity name (EntitySet name)
	 * 
	 * @param {string} sEntitySetName - The entity name
	 * @returns {string} The entity type
	 * @private
	 */
	MetadataAnalyser.prototype.getEntityTypeNameFromEntitySetName = function(sEntitySetName) {
		var oEntitySet = null, sEntityTypeName = null;

		if (this._oMetaModel) {
			oEntitySet = this._oMetaModel.getODataEntitySet(sEntitySetName);
			if (oEntitySet) {
				sEntityTypeName = oEntitySet.entityType;
			}
		}
		return sEntityTypeName;
	};

	/**
	 * Gets the first matching entity set from the Entity Type name (EntityType name)
	 * 
	 * @param {string} sEntityTypeName - The entity name
	 * @returns {string} The entitySet name
	 * @private
	 * @deprecated Since 1.29.
	 */
	MetadataAnalyser.prototype.getEntitySetNameFromEntityTypeName = function(sEntityTypeName) {
		var sQualifiedEntity, oEntityContainer, aEntitySet, i, iLen, oEntitySet;
		// get entity type
		if (this._oMetaModel && sEntityTypeName) {
			sQualifiedEntity = this._getFullyQualifiedNameForEntity(sEntityTypeName);
			oEntityContainer = this._oMetaModel.getODataEntityContainer();
			if (oEntityContainer && sQualifiedEntity) {
				aEntitySet = oEntityContainer.entitySet;
				iLen = aEntitySet.length;
				for (i = 0; i < iLen; i++) {
					oEntitySet = aEntitySet[i];
					if (oEntitySet.entityType === sQualifiedEntity) {
						break;
					}
					oEntitySet = null;
				}
				// get entity set name
				if (oEntitySet) {
					return oEntitySet.name;
				}
			}
		}

		return null;
	};

	/**
	 * Gets a collection of keys (field names) for the specified entity name
	 * 
	 * @param {String} sEntitySetName - The entity name as specified in the metadata document
	 * @returns {Array} Array of key names
	 * @public
	 */
	MetadataAnalyser.prototype.getKeysByEntitySetName = function(sEntitySetName) {
		var aKeys = null, sEntityTypeName = null;
		if (!this._oMetaModel) {
			return undefined;
		}
		sEntityTypeName = this.getEntityTypeNameFromEntitySetName(sEntitySetName);
		if (sEntityTypeName) {
			aKeys = this.getKeysByEntityTypeName(sEntityTypeName);
		}
		return aKeys;
	};

	/**
	 * Gets a collection keys (field names) for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of key names
	 * @public
	 */
	MetadataAnalyser.prototype.getKeysByEntityTypeName = function(sEntityTypeName) {
		var aKeys = null, aPropertyRefs = null, i, iLen = 0, oEntityDef = null;
		if (!this._oMetaModel) {
			return undefined;
		}
		oEntityDef = this._getEntityDefinition(sEntityTypeName);
		if (oEntityDef) {
			if (oEntityDef.key) {
				aPropertyRefs = oEntityDef.key.propertyRef;
				if (aPropertyRefs) {
					iLen = aPropertyRefs.length;
					aKeys = [];
					for (i = 0; i < iLen; i++) {
						aKeys.push(aPropertyRefs[i].name);
					}
				}
			}
		}
		return aKeys;
	};

	/**
	 * Gets a collection of fields for the specified entity name
	 * 
	 * @param {String} sEntitySetName - The entity name as specified in the metadata document
	 * @returns {Array} Array of fields
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldsByEntitySetName = function(sEntitySetName) {
		var aFields = null, oEntitySet, sEntityTypeName = null;
		if (!this._oMetaModel) {
			return undefined;
		}
		oEntitySet = this._oMetaModel.getODataEntitySet(sEntitySetName);
		if (oEntitySet) {
			sEntityTypeName = oEntitySet.entityType;
		}

		if (sEntityTypeName) {
			aFields = this.getFieldsByEntityTypeName(sEntityTypeName);
			this._enrichEntitySetMetadata(aFields, oEntitySet);
		}

		return aFields;
	};

	/**
	 * Enriches the fields with entitySet relevant metadata
	 * 
	 * @param {Array} aFields - Array of field metadata derived from OData properties
	 * @param {Object} oEntitySet - The entity set instance from ODataMetaModel
	 * @private
	 */
	MetadataAnalyser.prototype._enrichEntitySetMetadata = function(aFields, oEntitySet) {
		var iLen, oField, aNonSortablePaths, aNonFilterablePaths, aRequiredFilterFields, mFilterExpressionRestriction;

		aNonSortablePaths = this._getNonSortableFields(oEntitySet);
		aNonFilterablePaths = this._getNonFilterableFields(oEntitySet);
		aRequiredFilterFields = this._getRequiredFilterFields(oEntitySet);
		mFilterExpressionRestriction = this._getFilterExpressionRestriction(oEntitySet);

		// Loop over the fields
		iLen = aFields.length;
		while (iLen--) {
			oField = aFields[iLen];
			// Update sortable on fields
			oField.sortable = !(aNonSortablePaths.indexOf(oField.name) > -1);
			// Update Filterable on fields
			oField.filterable = !(aNonFilterablePaths.indexOf(oField.name) > -1);
			// Update required filters
			oField.requiredFilterField = (aRequiredFilterFields.indexOf(oField.name) > -1);
			// Update FilterRestriction
			oField.filterRestriction = mFilterExpressionRestriction[oField.name];
		}
	};

	/**
	 * Extracts list of field names from the provided annotation and property (Org.OData.Capabilities.V1.SortRestrictions and NonSortableProperties)
	 * 
	 * @param {Object} oAnnotation - The annotation that from which PropertyPaths needs to be extracted
	 * @param {string} sAnnotationProperty - the property on the annotation that contains the array of PropertyPaths
	 * @returns {Array} Array of field names or []
	 * @private
	 */
	MetadataAnalyser.prototype._extractPropertyPathsFromAnnotation = function(oAnnotation, sAnnotationProperty) {
		var aPaths = [], aAnnotationProperties, iLen, sPath;
		if (oAnnotation && sAnnotationProperty) {
			aAnnotationProperties = oAnnotation[sAnnotationProperty];
		}
		if (aAnnotationProperties) {
			iLen = aAnnotationProperties.length;
			while (iLen--) {
				sPath = aAnnotationProperties[iLen].PropertyPath;
				if (sPath) {
					aPaths.push(sPath);
				}
			}
		}
		return aPaths;
	};

	/**
	 * Retrieves list of non sortable fields from the entitySet annotation (Org.OData.Capabilities.V1.SortRestrictions)
	 * 
	 * @param {Object} oEntitySet - The entity set instance from ODataMetaModel
	 * @returns {Array} Array of field names
	 * @private
	 */
	MetadataAnalyser.prototype._getNonSortableFields = function(oEntitySet) {
		var oSortRestrictions;
		if (oEntitySet) {
			oSortRestrictions = oEntitySet["Org.OData.Capabilities.V1.SortRestrictions"];
		}
		return this._extractPropertyPathsFromAnnotation(oSortRestrictions, "NonSortableProperties");
	};

	/**
	 * Retrieves list of non sortable fields from the entitySet annotation (Org.OData.Capabilities.V1.SortRestrictions)
	 * 
	 * @param {Object} oEntitySet - The entity set instance from ODataMetaModel
	 * @returns {Array} Array of field names
	 * @private
	 */
	MetadataAnalyser.prototype._getNonFilterableFields = function(oEntitySet) {
		var oFilterRestrictions;
		if (oEntitySet) {
			oFilterRestrictions = oEntitySet["Org.OData.Capabilities.V1.FilterRestrictions"];
		}
		return this._extractPropertyPathsFromAnnotation(oFilterRestrictions, "NonFilterableProperties");
	};

	/**
	 * Retrieves list of required fields based on the entitySet annotation (Org.OData.Capabilities.V1.FilterRestrictions/RequiredProperties)
	 * 
	 * @param {Object} oEntitySet - The entity set instance from ODataMetaModel
	 * @returns {Array} Array of field names
	 * @private
	 */
	MetadataAnalyser.prototype._getRequiredFilterFields = function(oEntitySet) {
		var oFilterRestrictions;
		if (oEntitySet) {
			oFilterRestrictions = oEntitySet["Org.OData.Capabilities.V1.FilterRestrictions"];
		}
		return this._extractPropertyPathsFromAnnotation(oFilterRestrictions, "RequiredProperties");
	};

	/**
	 * Retrieves map of fields with filter restriction the entitySet annotation (com.sap.vocabularies.Common.v1.FilterExpressionRestrictions)
	 * 
	 * @param {Object} oEntitySet - The entity set instance from ODataMetaModel
	 * @returns {Object} JSON map of field names with filter restriction
	 * @private
	 */
	MetadataAnalyser.prototype._getFilterExpressionRestriction = function(oEntitySet) {
		var mFilterExpressionRestriction = {}, aFilterExpressionRestrictions, iLen, oFilterExpressionRestriction, oProperty, oAllowedExpression;
		if (oEntitySet) {
			aFilterExpressionRestrictions = oEntitySet["com.sap.vocabularies.Common.v1.FilterExpressionRestrictions"];
			if (aFilterExpressionRestrictions) {
				iLen = aFilterExpressionRestrictions.length;
				while (iLen--) {
					oFilterExpressionRestriction = aFilterExpressionRestrictions[iLen];
					if (oFilterExpressionRestriction) {
						oProperty = oFilterExpressionRestriction.Property;
						oAllowedExpression = oFilterExpressionRestriction.AllowedExpressions;
						if (oProperty && oAllowedExpression && oProperty.PropertyPath && oAllowedExpression.EnumMember) {
							// convert to v2 format expected in several Smart controls
							mFilterExpressionRestriction[oProperty.PropertyPath] = mFilterRestrictions[oAllowedExpression.EnumMember];
						}
					}
				}
			}
		}
		return mFilterExpressionRestriction;
	};

	/**
	 * Checks if a property/navigation property is filterable (Org.OData.Capabilities.V1.FilterRestrictions/NonFilterableProperties)
	 * 
	 * @param {Object} oProperty - The property instance from ODataMetaModel
	 * @param {Object} oEntitySet - The entity set from the metadata document
	 * @returns {Boolean} whether the specified property is filterable
	 * @private
	 */
	MetadataAnalyser.prototype._isFilterable = function(oProperty, oEntitySet) {
		var aNonFilterablePaths, bFilterable = !(oProperty["sap:filterable"] === "false");
		// Only check for V4 annotation from entitySet when no filterable="false" V2 annotation exists.
		// (ODataMetaModel does not yet support V2-->V2 conversion of filterable for navigationProperty!)
		if (bFilterable && oEntitySet) {
			aNonFilterablePaths = this._getNonFilterableFields(oEntitySet);
			bFilterable = !(aNonFilterablePaths.indexOf(oProperty.name) > -1);
		}
		return bFilterable;
	};

	/**
	 * Checks if a property/navigation property is marked as hiddenFilter (com.sap.vocabularies.UI.v1.HiddenFilter)
	 * 
	 * @param {Object} oProperty - The property instance from ODataMetaModel
	 * @returns {Boolean} whether the specified property is marked as hiddenFilter
	 * @private
	 */
	MetadataAnalyser.prototype._isHiddenFilter = function(oProperty) {
		var bHiddenFilter = false,
		// hidden in filter
		oResult = oProperty["com.sap.vocabularies.UI.v1.HiddenFilter"];
		if (oResult) {
			bHiddenFilter = true;
		}
		return bHiddenFilter;
	};

	/**
	 * Checks if a property/navigation property is marked as <code>hidden</code> (com.sap.vocabularies.UI.v1.Hidden) The semantic of hidden is: the
	 * data is available on the UI, but no control is rendered for the data.
	 * 
	 * @param {Object} oProperty - The property instance from ODataMetaModel
	 * @returns {Boolean} whether the specified property is marked as hidden
	 * @private
	 */
	MetadataAnalyser.prototype._isHidden = function(oProperty) {
		// hidden at all on UI
		if (oProperty["com.sap.vocabularies.UI.v1.Hidden"]) {
			return true;
		}
		return false;
	};

	/**
	 * Gets a collection of fields for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of fields
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldsByEntityTypeName = function(sEntityTypeName) {
		var oEntityDef;
		if (!this._oMetaModel) {
			return undefined;
		}
		oEntityDef = this._getEntityDefinition(sEntityTypeName);
		return this._getFieldsByEntityDefinition(oEntityDef);
	};

	/**
	 * Gets a collection of fields for the specified complex type
	 * 
	 * @param {String} sComplexTypeName - The complex type name as specified in the metadata document
	 * @param {string} sParentPropertyName - The name of the parent property (complex type property)
	 * @returns {Array} Array of fields
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldsByComplexTypeName = function(sComplexTypeName, sParentPropertyName) {
		var oComplexDef;
		if (!this._oMetaModel) {
			return undefined;
		}
		oComplexDef = this._getComplexTypeDefinition(sComplexTypeName);
		return this._getFieldsByEntityDefinition(oComplexDef, sParentPropertyName);
	};

	/**
	 * Get an array of all entity type names
	 * 
	 * @returns {Array} Returns an array of entity type names
	 * @public
	 */
	MetadataAnalyser.prototype.getAllEntityTypeNames = function() {
		if (!this._oMetaModel) {
			return undefined;
		}
		var oSchema = this._oSchemaDefinition;
		if (oSchema.entityType && oSchema.entityType.length > 0) {
			var i = 0;
			var aResult = [];
			for (i = 0; i < oSchema.entityType.length; i++) {
				aResult.push(oSchema.entityType[i].name);
			}
			return aResult;
		}
		return null;
	};

	/**
	 * Gets a map with fields and their related semantic objects
	 * 
	 * @param {String} sEntitySetName - The entity set for which the map should be returned
	 * @returns {object} map between fields and semantic objects
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldSemanticObjectMap = function(sEntitySetName) {
		var aODataFieldMetadata = this.getFieldsByEntitySetName(sEntitySetName);
		if (!aODataFieldMetadata) {
			return null;
		}
		var oMap = {}, i, iLen = aODataFieldMetadata.length;
		for (i = 0; i < iLen; i++) {
			var oField = aODataFieldMetadata[i];
			var mAnnotation = this.getSemanticObjectAnnotation(oField.fullName);
			if (mAnnotation && mAnnotation.semanticObject) {
				oMap[oField.name] = mAnnotation.semanticObject;
			}
		}

		return oMap;
	};

	/**
	 * Gets a collection fields for the specified entity definition
	 * 
	 * @param {Object} oEntityDef - The entity definition as specified in the metadata document
	 * @param {string} sParentPropertyName - The name of the parent property (navigationProperty/complex type)
	 * @returns {Array} Array of fields
	 */
	MetadataAnalyser.prototype._getFieldsByEntityDefinition = function(oEntityDef, sParentPropertyName) {
		var aFields = null, aProperty = null, i = 0, iLen = 0, oProperty, oField;
		if (oEntityDef) {
			aProperty = oEntityDef.property;
		}

		// Enrich the fields with necessary information as an attribute (easy access)
		if (aProperty) {
			aFields = [];
			iLen = aProperty.length;
			for (i = 0; i < iLen; i++) {
				oProperty = aProperty[i];
				if (oProperty) {
					oField = this._parseProperty(oProperty, oEntityDef, sParentPropertyName);
					aFields.push(oField);
				}
			}
		}
		return aFields;
	};

	/**
	 * DO NOT USE: This method is mainly only needed to support sap:display-format="Date" which is not automatically converted to V4.<br>
	 * Gets the display format for a field.
	 * 
	 * @param {Object} oProperty The property whose details need to be extracted
	 * @returns {string|undefined} The display format if exists, otherwise <code>undefined</code>
	 */
	MetadataAnalyser.getDisplayFormat = function(oProperty) {
		var sDisplayFormat = oProperty["sap:display-format"];

		if (sDisplayFormat) {
			return sDisplayFormat;
		}

		if (MetadataAnalyser.isTermDefaultTrue(oProperty["com.sap.vocabularies.Common.v1.IsUpperCase"])) {
			return "UpperCase";
		}
	};

	/**
	 * Gets the display format for a link field.
	 * 
	 * @param {Object} oProperty The property whose details need to be extracted
	 * @returns {string} The display format if exists, otherwise an empty string
	 */
	MetadataAnalyser.getLinkDisplayFormat = function(oProperty) {

		if (MetadataAnalyser.isEmailAddress(oProperty)) {
			return "EmailAddress";
		}

		if (MetadataAnalyser.isPhoneNumber(oProperty)) {
			return "PhoneNumber";
		}

		if (MetadataAnalyser.isURL(oProperty)) {
			return "URL";
		}

		return "";
	};

	MetadataAnalyser.getValueListMode = function(oProperty) {
		var sValueList = oProperty["sap:value-list"];

		if (sValueList) {
			return sValueList;
		}

		if (MetadataAnalyser.isValueListWithFixedValues(oProperty)) {
			return "fixed-values";
		}

		return "";
	};

	/**
	 * Returns true if the annotation marked as true
	 * 
	 * @param {object} oTerm The Term annotation object
	 * @returns {boolean} <code>true</code>, if the annotation exists and is set to true
	 */
	MetadataAnalyser.isTermTrue = function(oTerm) {
		return !!oTerm && (oTerm.Bool === "true");
	};

	MetadataAnalyser.isPropertyStringType = function(oProperty) {
		return !!oProperty && (oProperty.type === "Edm.String");
	};

	/**
	 * Returns true if the annotation is not explicitly marked as false or if it is simply present
	 * 
	 * @param {object} oTerm The Term annotation object
	 * @returns {boolean} <code>true</code>, if the annotation exists -or- is not false
	 */
	MetadataAnalyser.isTermDefaultTrue = function(oTerm) {
		if (oTerm) {
			return oTerm.Bool ? oTerm.Bool !== "false" : true;
		}
		return false;
	};

	/**
	 * Checks whether a value is required for <code>oProperty</code>.
	 * 
	 * @param {object} oProperty The OData property from the meta model
	 * @returns {boolean} <code>false</code>, if <code>oProperty</code> is defined and the <code>nullable</code> attribute/constrain is set to
	 *          <code>false</code>, otherwise <code>true</code>
	 * @protected
	 * @since 1.50
	 */
	MetadataAnalyser.isNullable = function(oProperty) {
		return !(oProperty && (oProperty.nullable === "false"));
	};

	/**
	 * Checks whether <code>oProperty</code> is annotated as a digit sequence. Intended for <code>Edm.String</code> fields that are internally
	 * stored as <code>NUMC</code> (numeric text) data type.
	 * 
	 * @param {object} oProperty The OData property from the meta model
	 * @returns {boolean} <code>true</code>, if the OData property is annotated with the following
	 *          <code>"com.sap.vocabularies.Common.v1.IsDigitSequence": { "Bool" : "true" }</code> annotation.
	 * @protected
	 * @since 1.46
	 */
	MetadataAnalyser.isDigitSequence = function(oProperty) {
		return MetadataAnalyser.isPropertyStringType(oProperty) && MetadataAnalyser.isTermDefaultTrue(oProperty["com.sap.vocabularies.Common.v1.IsDigitSequence"]);
	};

	/**
	 * Checks whether <code>oProperty</code> is annotated as an e-mail address.
	 * 
	 * @param {object} oProperty The OData property from the meta model
	 * @returns {boolean} <code>true</code>, if the OData property is annotated with the following
	 *          <code>"com.sap.vocabularies.Common.v1.IsDigitSequence": { "Bool" : "true" }</code> annotation.
	 * @protected
	 * @since 1.46
	 */
	MetadataAnalyser.isEmailAddress = function(oProperty) {
		return MetadataAnalyser.isPropertyStringType(oProperty) && MetadataAnalyser.isTermDefaultTrue(oProperty["com.sap.vocabularies.Communication.v1.IsEmailAddress"]);
	};

	/**
	 * Checks whether <code>oProperty</code> is annotated as a phone number.
	 * 
	 * @param {object} oProperty The OData property from the meta model
	 * @returns {boolean} <code>true</code>, if the OData property is annotated with the following
	 *          <code>"com.sap.vocabularies.Common.v1.IsPhoneNumber": { "Bool" : "true" }</code> annotation.
	 * @protected
	 * @since 1.46
	 */
	MetadataAnalyser.isPhoneNumber = function(oProperty) {
		return MetadataAnalyser.isPropertyStringType(oProperty) && MetadataAnalyser.isTermDefaultTrue(oProperty["com.sap.vocabularies.Communication.v1.IsPhoneNumber"]);
	};

	/**
	 * Checks whether <code>oProperty</code> is annotated as a URL.
	 * 
	 * @param {object} oProperty The OData property from the meta model
	 * @returns {boolean} <code>true</code>, if the OData property is annotated with the following
	 *          <code>"Org.OData.Core.V1.IsURL": { "Bool" : "true" }</code> annotation.
	 * @protected
	 * @since 1.46
	 */
	MetadataAnalyser.isURL = function(oProperty) {
		return MetadataAnalyser.isPropertyStringType(oProperty) && (MetadataAnalyser.isTermDefaultTrue(oProperty["Org.OData.Core.V1.IsURL"]) || MetadataAnalyser.isTermDefaultTrue(oProperty["Org.OData.Core.V1.IsUrl"]));
	};

	/**
	 * Checks whether <code>oProperty</code> is annotated as value list.
	 * 
	 * @param {object} oProperty The OData property from the meta model
	 * @returns {boolean} <code>true</code>, if the OData property is annotated with the following
	 *          <code>com.sap.vocabularies.Common.v1.ValueList</code> annotation.
	 * @protected
	 * @since 1.46
	 */
	MetadataAnalyser.isValueList = function(oProperty) {
		var sTerm = "com.sap.vocabularies.Common.v1.ValueList";
		return !!(oProperty && (oProperty["sap:value-list"] || oProperty[sTerm]));
	};

	/**
	 * Checks whether <code>oProperty</code> is annotated as value list with fixed values.
	 * 
	 * @param {object} oProperty The OData property from the meta model
	 * @returns {boolean} <code>true</code>, if the OData property is annotated with the following
	 *          <code>"com.sap.vocabularies.Common.v1.ValueListWithFixedValues": { "Bool" : "true" }</code> annotation.
	 * @protected
	 * @since 1.46
	 */
	MetadataAnalyser.isValueListWithFixedValues = function(oProperty) {
		var sTerm = "com.sap.vocabularies.Common.v1.ValueListWithFixedValues";
		return MetadataAnalyser.isTermTrue(oProperty[sTerm]);
	};

	/**
	 * Parses a property and extracts the relevant information for easy consumption
	 * 
	 * @param {Object} oProperty - The property whose details need to be extracted
	 * @param {Object} oEntityDef - The entity definition as specified in the metadata document
	 * @param {string} sParentPropertyName - The name of the parent property (navigationProperty/complex type)
	 * @returns {Object} field
	 * @private
	 */
	MetadataAnalyser.prototype._parseProperty = function(oProperty, oEntityDef, sParentPropertyName) {
		var oField = jQuery.extend({}, oProperty), oResult;
		oResult = oProperty["com.sap.vocabularies.Common.v1.Label"];
		if (oResult) {
			oField.fieldLabel = oResult.String;
		}

		oResult = oProperty["com.sap.vocabularies.Common.v1.QuickInfo"];
		if (oResult) {
			oField.quickInfo = oResult.String;
		}
		// display terms
		oField.displayFormat = MetadataAnalyser.getDisplayFormat(oProperty);
		oField.isDigitSequence = MetadataAnalyser.isDigitSequence(oProperty);
		oField.isURL = MetadataAnalyser.isURL(oProperty);
		oField.isEmailAddress = MetadataAnalyser.isEmailAddress(oProperty);
		oField.isPhoneNumber = MetadataAnalyser.isPhoneNumber(oProperty);
		// oField.isUpperCase = MetadataAnalyser.isUpperCase(oProperty); coming soon..

		oField.aggregationRole = oProperty["sap:aggregation-role"];

		oResult = oProperty["Org.OData.Measures.V1.ISOCurrency"];
		if (oResult) {
			oField.isCurrencyField = true;
			oField.isMeasureField = true;
			oField.unit = oResult.Path;
		}
		oResult = oProperty["Org.OData.Measures.V1.Unit"];
		if (oResult) {
			oField.isMeasureField = true;
			oField.unit = oResult.Path;
		}
		oResult = oProperty["com.sap.vocabularies.Common.v1.Text"];
		if (oResult) {
			oField.description = oResult.Path;
			oField.displayBehaviour = this.getTextArrangementValue(oResult);
		}

		// Set filter attributes on the field
		oResult = oProperty["sap:filterable"];
		oField.filterable = oResult !== "false";
		oField.filterRestriction = oProperty["sap:filter-restriction"];
		oResult = oProperty["sap:required-in-filter"];
		oField.requiredFilterField = oResult === "true";

		// Set sort attributes on the field
		oResult = oProperty["sap:sortable"];
		oField.sortable = oResult !== "false";

		// Set whether field is an Image URL (twice - capital wording and CamelCase)
		// com.sap.vocabularies.UI.v1.IsImageURL is the expected one
		oResult = oProperty["com.sap.vocabularies.UI.v1.IsImageURL"] || oProperty["com.sap.vocabularies.UI.v1.IsImageUrl"];
		oField.isImageURL = MetadataAnalyser.isTermDefaultTrue(oResult);

		// Set the visible attribute on the field
		oResult = oProperty["com.sap.vocabularies.Common.v1.FieldControl"];
		oField.visible = !(oResult && oResult.EnumMember === "com.sap.vocabularies.Common.v1.FieldControlType/Hidden");
		oField.entityName = oEntityDef.name;
		oField.parentPropertyName = sParentPropertyName;
		oField.fullName = this._getFullyQualifiedNameForField(oProperty.name, oEntityDef);

		// hidden...
		// ...at all
		oField.hidden = this._isHidden(oProperty);
		// ...as filter
		oField.hiddenFilter = this._isHiddenFilter(oProperty) || oField.hidden;

		// defaultValue for parameters (and create scenarios -not yet relevant)
		if (oProperty["defaultValue"] !== "undefined") {
			oField.defaultPropertyValue = oProperty["defaultValue"];
		}

		// defaultValue for filters
		oResult = oProperty["com.sap.vocabularies.Common.v1.FilterDefaultValue"];
		if (oResult) {
			oField.defaultFilterValue = this._getDefaultValues(oProperty.type, oResult, oProperty); // oResult.String;
		}

		return oField;
	};

	MetadataAnalyser.prototype._getDefaultValues = function(sType, oResult, oProperty) {
		var vValue = null, sDefaultValueType = ODataType.getDefaultValueTypeName(sType);

		if (oResult[sDefaultValueType]) {
			vValue = oResult[sDefaultValueType];
		} else {
			jQuery.sap.log.error("default value for " + oProperty.name + " expected through the property " + sDefaultValueType);
		}

		return vValue;

	};

	/**
	 * Extract the property at the specified navigationProperty path and entitySet name
	 * 
	 * @param {String} sPropertyPath - The property path (via a navigation property) E.g. toProduct/ProductText
	 * @param {String} sEntitySetName - The entity name as specified in the metadata document
	 * @returns {Object} The extracted and parsed field (ODataProperty)
	 * @public
	 */
	MetadataAnalyser.prototype.extractNavigationPropertyField = function(sPropertyPath, sEntitySetName) {
		var sEntitySetPath, oMetaContext, oODataProperty, aPropertyPath, sPropertyName, sNavigationProperty, oEntityDef, oField = null;
		if (sEntitySetName && sPropertyPath) {
			sEntitySetPath = "/" + sEntitySetName + "/";
			aPropertyPath = sPropertyPath.split("/");
			sPropertyName = aPropertyPath.pop();
			sNavigationProperty = aPropertyPath.join("/");
			if (sNavigationProperty && sPropertyName) {
				oMetaContext = this._oMetaModel.getMetaContext(sEntitySetPath + sNavigationProperty);
				if (oMetaContext) {
					oEntityDef = this._oMetaModel.getProperty(oMetaContext.getPath());
				}
			}
			if (oEntityDef) {
				oODataProperty = this._oMetaModel.getODataProperty(oEntityDef, sPropertyName);
			}
			if (oODataProperty) {
				oField = this._parseProperty(oODataProperty, oEntityDef, sNavigationProperty);
			}
		}
		return oField;
	};

	/**
	 * Gets a an Array of the names of all possible filterable fields for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of names of overall filterable fields
	 * @internal
	 * @deprecated Since 1.40.
	 */
	MetadataAnalyser.prototype.getAllFilterableFieldNamesByEntityTypeName = function(sEntityTypeName) {
		var aGroup, i, groupLength, j, fieldLength, aResult, oGroup;

		aResult = [];
		aGroup = this.getAllFilterableFieldsByEntityTypeName(sEntityTypeName);
		if (aGroup && aGroup.length) {
			groupLength = aGroup.length;
			for (i = 0; i < groupLength; i++) {
				oGroup = aGroup[i];
				if (oGroup.fields && oGroup.fields.length) {
					fieldLength = oGroup.fields.length;
					for (j = 0; j < fieldLength; j++) {
						aResult.push(oGroup.fields[j].name);
					}
				}
			}
		}
		return aResult;
	};

	/**
	 * Gets a collection of all possible filterable fields for the specified entity type or entity set
	 * 
	 * @param {String} sEntity - The entity type name or entity set name as specified in the metadata document
	 * @param {Boolean} bIsEntitySet - true when entity set name is passed
	 * @param {Boolean} bIgnoreAnalyticalParameters if true the entity types with <code>sap:semantic = 'parameter'</code> will be ignored
	 * @param {Array} aConsiderNavProperties List of allowed property names. If <code>null</code> all properties are taken into account
	 * @returns {Array} Array of overall filterable fields
	 * @private
	 */
	MetadataAnalyser.prototype._getAllFilterableFieldsByEntity = function(sEntity, bIsEntitySet, bIgnoreAnalyticalParameters, aConsiderNavProperties) {
		var aFilterGroups = [], oEntityDef, oEntitySet, mAssociations, sNavigationProperty, oResult, oSubEntityDef, oSubEntitySet, sSubEntityType;
		if (!this._oMetaModel || !sEntity) {
			return undefined;
		}

		if (bIsEntitySet) {
			oEntitySet = this._oMetaModel.getODataEntitySet(sEntity);
			if (oEntitySet) {
				oEntityDef = this._getEntityDefinition(oEntitySet.entityType);
			}
		} else {
			oEntityDef = this._getEntityDefinition(sEntity);
		}

		if (oEntityDef) {
			// filterable fields from the main entity
			aFilterGroups.push(this._getFilterableFieldsFromEntityDefinition(oEntityDef, undefined, oEntitySet));

			// filterable fields from associations which have 0..1 or 1 cardinality
			mAssociations = this._getFilterableAssociations(oEntityDef, oEntitySet);
			for (sNavigationProperty in mAssociations) {

				if (!aConsiderNavProperties || (aConsiderNavProperties.indexOf(sNavigationProperty) > -1)) {

					sSubEntityType = mAssociations[sNavigationProperty];
					if (bIsEntitySet) {
						oResult = this._oMetaModel.getODataAssociationSetEnd(oEntityDef, sNavigationProperty);
						if (oResult.entitySet) {
							oSubEntitySet = this._oMetaModel.getODataEntitySet(oResult.entitySet);
						}
					}
					oSubEntityDef = this._getEntityDefinition(sSubEntityType);
					// Entity definition can be null when entities are loaded lazily in the metadata (e.g. ValueList)
					if (oSubEntityDef) {

						if (bIgnoreAnalyticalParameters && (oSubEntityDef["sap:semantics"] === "parameters")) {
							continue;
						}

						aFilterGroups.push(this._getFilterableFieldsFromEntityDefinition(oSubEntityDef, sNavigationProperty, oSubEntitySet));
					}
				}
			}
		}
		return aFilterGroups;
	};

	/**
	 * Gets a collection of all possible filterable fields for the specified entity name
	 * 
	 * @param {String} sEntitySetName - The entity name as specified in the metadata document
	 * @param {Boolean} bIgnoreAnalyticalParameters if <code>true</code> the entity types, referenced by the navigation properties with
	 *        <code>sap:semantic = 'parameter'</code> will be ignored
	 * @param {Array} aConsiderNavProperties List of allowed property names. If <code>null</code> all properties are taken into account
	 * @returns {Array} Array of overall filterable fields
	 * @public
	 */
	MetadataAnalyser.prototype.getAllFilterableFieldsByEntitySetName = function(sEntitySetName, bIgnoreAnalyticalParameters, aConsiderNavProperties) {
		if (!this._oMetaModel) {
			return undefined;
		}

		return this._getAllFilterableFieldsByEntity(sEntitySetName, true, bIgnoreAnalyticalParameters, aConsiderNavProperties);
	};

	/**
	 * Gets a collection of all possible filterable fields for the specified entity type
	 * 
	 * @param {String} sEntityTypeName - The entity type name as specified in the metadata document
	 * @returns {Array} Array of overall filterable fields
	 * @public
	 */
	MetadataAnalyser.prototype.getAllFilterableFieldsByEntityTypeName = function(sEntityTypeName) {
		if (!this._oMetaModel) {
			return undefined;
		}

		return this._getAllFilterableFieldsByEntity(sEntityTypeName);
	};

	/**
	 * Gets an Object containing collection of filterable fields that are directly under the specified entity type
	 * 
	 * @param {Object} oEntityDef - The entity type definition from the metadata document
	 * @param {string} sParentPropertyName - The name of the parent property (navigationProperty/complex type)
	 * @param {Object} oEntitySet - The relevant entity set from which metadata should be enriched on the entity fields
	 * @returns {Object} Object containing array of filterable fields
	 * @private
	 */
	MetadataAnalyser.prototype._getFilterableFieldsFromEntityDefinition = function(oEntityDef, sParentPropertyName, oEntitySet) {
		var oFilterData = {}, aFields = [], aProperties = null, oProp, i, iLen, oProperty = null;
		if (!this._oMetaModel || !oEntityDef) {
			return undefined;
		}
		// Set the name and label from entity into the field's group
		oProp = oEntityDef["com.sap.vocabularies.Common.v1.Label"];
		if (oProp) {
			oFilterData.groupLabel = oProp.String;
		}
		oFilterData.groupEntityName = oEntityDef.name;
		oFilterData.groupName = sParentPropertyName;

		aProperties = this._getFieldsByEntityDefinition(oEntityDef, sParentPropertyName);
		// If a relevant entitySet is provided - enrich the field metadata
		if (oEntitySet) {
			this._enrichEntitySetMetadata(aProperties, oEntitySet);
		}
		iLen = aProperties.length;
		// Extract only visible and filterable fields from all fields!
		for (i = 0; i < iLen; i++) {
			oProperty = aProperties[i];
			if (oProperty.visible && oProperty.filterable) {
				aFields.push(oProperty);
			}
		}
		oFilterData.fields = aFields;
		return oFilterData;
	};

	/**
	 * Returns the fully qualified name of a field which is e.g. "com.sap.GL.ZAF.GL_ACCOUNT/CompanyCode". Schema namespace, entity type name and field
	 * name.
	 * 
	 * @param {string} sFieldName - the name of the field/property
	 * @param {Object} oEntityType - the entity Type under which the field/property is present
	 * @returns {string} - the fully qualified name
	 * @private
	 */
	MetadataAnalyser.prototype._getFullyQualifiedNameForField = function(sFieldName, oEntityType) {
		var sNamespace, sEntityTypeName, sResult = sFieldName;
		if (oEntityType) {
			sNamespace = oEntityType.namespace;
			sEntityTypeName = oEntityType.name;
		}
		if (sNamespace && sEntityTypeName) {
			sResult = sNamespace + "." + sEntityTypeName + "/" + sFieldName;
		}
		return sResult;
	};

	/**
	 * @param {string} sFullyQualifiedFieldName Fully qualified name
	 * @returns {string} The field name without name space and without entity
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldNameByFullyQualifiedFieldName = function(sFullyQualifiedFieldName) {
		var sResult, nPos;

		sResult = this.removeNamespace(sFullyQualifiedFieldName);
		nPos = sResult.indexOf("/");
		sResult = sResult.substring(nPos + 1);
		return sResult;
	};

	/**
	 * Gets a collection of filterable associations under the specified entity type
	 * 
	 * @param {Object} oEntityDef - The entity type definition from the metadata document
	 * @param {Object} oEntitySet - The relevant entity set for which filterable associations have to be determined
	 * @returns {Object} Map of filterable associations
	 * @private
	 */
	MetadataAnalyser.prototype._getFilterableAssociations = function(oEntityDef, oEntitySet) {
		var mFilterableAssociations = {}, aNavigationProperties = null, oNavigationProperty = null, i, iLen = 0, oEndRole = null;
		if (!this._oMetaModel || !oEntityDef) {
			return undefined;
		}
		aNavigationProperties = oEntityDef.navigationProperty;
		if (aNavigationProperties && aNavigationProperties.length) {
			iLen = aNavigationProperties.length;
			for (i = 0; i < iLen; i++) {
				oNavigationProperty = aNavigationProperties[i];
				// if the navigation property is explicitly marked as not filterable; skip it
				// also skip it, if it is marked as HiddenFilter
				if (!this._isFilterable(oNavigationProperty, oEntitySet) || this._isHiddenFilter(oNavigationProperty)) {
					continue;
				}
				// Get the End role of the navigation property
				oEndRole = this._oMetaModel.getODataAssociationEnd(oEntityDef, oNavigationProperty.name);
				if (!oEndRole || oEndRole.type === (oEntityDef.namespace + "." + oEntityDef.name)) {
					continue;
				}
				// check if the end role has cardinality 0..1 or 1
				if (oEndRole.multiplicity === "1" || oEndRole.multiplicity === "0..1") {
					// Only add filterable entities, if they were not already added
					if (mFilterableAssociations[oNavigationProperty.name] === undefined) {
						mFilterableAssociations[oNavigationProperty.name] = oEndRole.type;
					}
				}
			}
		}
		return mFilterableAssociations;
	};

	/**
	 * Retrieves the ValueList Annotation lazily for the specified property/target
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace)
	 * @returns {Promise} a Promise that would be resolved once the ValueList annotation is loaded -or- rejected if specified property path is
	 *          incorrect or value list could not be resolved
	 * @public
	 */
	MetadataAnalyser.prototype.getValueListAnnotationLazy = function(sPath) {
		var oPromise, mAnnotation = {
			additionalAnnotations: []
		}, oResolvedAnnotation, sParentFieldName, aPath, oType, sProperty, oPropertyContext, sQualifier;
		oPromise = new Promise(function(fResolve, fReject) {
			if (sPath && this._oMetaModel) {
				// Split the property path and
				aPath = sPath.split("/");
				// The type could either be an entity type or a complex type
				oType = this._oMetaModel.getODataEntityType(aPath[0]) || this._oMetaModel.getODataComplexType(aPath[0]);
				sParentFieldName = aPath[1];
				// Get the property path from the type
				sProperty = this._oMetaModel.getODataProperty(oType, sParentFieldName, true);
				if (sProperty) {
					// create property context from its path
					oPropertyContext = this._oMetaModel.createBindingContext(sProperty);

					this._oMetaModel.getODataValueLists(oPropertyContext).then(function(mValueList) {
						for (sQualifier in mValueList) {
							oResolvedAnnotation = {
								annotation: mValueList[sQualifier]
							};
							// TODO: to be removed in the next release! - Ignore ValueList with PresentationVariantQualifier
							if (oResolvedAnnotation.annotation && !oResolvedAnnotation.annotation["PresentationVariantQualifier"]) {
								this._enrichValueHelpAnnotation(oResolvedAnnotation, sParentFieldName);
								// Check if there is no qualifier --> the default/primaryValueListAnnotation
								if (!sQualifier) {
									mAnnotation.primaryValueListAnnotation = oResolvedAnnotation;
								} else {
									// Set the qualifier on the resolved annotation
									oResolvedAnnotation.qualifier = sQualifier;
									mAnnotation.additionalAnnotations.push(oResolvedAnnotation);
								}
							}
						}
						fResolve(mAnnotation);
					}.bind(this), fReject);
					return;
				}
			}
			fReject();
		}.bind(this));
		return oPromise;
	};

	/**
	 * Formats a ValueList Annotation object in the format which is used by BaseValueListProvider
	 * 
	 * @param {Map} mValueListData A data object which contains the value help info in a format used by the ODataModel
	 * @param {String} sParentFieldName The name of the field for which the Value Help is made
	 * @returns {Map} the formatted annotation
	 * @public
	 * @experimental
	 * @since 1.38
	 */
	MetadataAnalyser.prototype.getValueListAnnotationForFunctionImport = function(mValueListData, sParentFieldName) {
		var mAnnotation = {
			additionalAnnotations: []
		}, oResolvedAnnotation, sQualifier;
		for (sQualifier in mValueListData) {
			oResolvedAnnotation = {
				annotation: mValueListData[sQualifier]
			};
			if (oResolvedAnnotation.annotation) {
				this._enrichValueHelpAnnotation(oResolvedAnnotation, sParentFieldName);
				// Check if there is no qualifier --> the default/primaryValueListAnnotation
				if (!sQualifier) {
					mAnnotation.primaryValueListAnnotation = oResolvedAnnotation;
				} else {
					// Set the qualifier on the resolved annotation
					oResolvedAnnotation.qualifier = sQualifier;
					mAnnotation.additionalAnnotations.push(oResolvedAnnotation);
				}
			}
		}
		return mAnnotation;
	};

	/**
	 * Retrieves the ValueList Annotation for the specified property/target
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace)
	 * @returns {Object} a Map of resolved ValueHelpList (if any) annotations
	 * @deprecated Since 1.29 - use #getValueListAnnotationLazy instead!
	 * @public
	 */
	MetadataAnalyser.prototype.getValueListAnnotation = function(sPath) {
		var mAnnotation = {
			additionalAnnotations: []
		}, oResolvedAnnotation, sParentFieldName, aPath, oType, oProperty, sQualifier;
		if (sPath && this._oMetaModel) {
			// Split the property path and
			aPath = sPath.split("/");
			// The type could either be an entity type or a complex type
			oType = this._oMetaModel.getODataEntityType(aPath[0]) || this._oMetaModel.getODataComplexType(aPath[0]);
			// Get the property from the type
			oProperty = this._oMetaModel.getODataProperty(oType, aPath[1]);
			if (oProperty) {
				sParentFieldName = oProperty.name;
				for ( var sProp in oProperty) {
					if (sProp === "com.sap.vocabularies.Common.v1.ValueList" || sProp.indexOf("com.sap.vocabularies.Common.v1.ValueList#") > -1) {
						sQualifier = null;
						oResolvedAnnotation = {
							annotation: oProperty[sProp]
						};
						aPath = sProp.split("#");
						if (aPath.length === 2) {
							sQualifier = aPath[1];
						}
						if (oResolvedAnnotation.annotation) {
							this._enrichValueHelpAnnotation(oResolvedAnnotation, sParentFieldName);
							// Check if there is no qualifier --> the default/primaryValueListAnnotation
							if (!sQualifier) {
								mAnnotation.primaryValueListAnnotation = oResolvedAnnotation;
							} else {
								// Set the qualifier on the resolved annotation
								oResolvedAnnotation.qualifier = sQualifier;
								mAnnotation.additionalAnnotations.push(oResolvedAnnotation);
							}
						}
					}
				}
			}
		}
		return mAnnotation;
	};

	/**
	 * Enriches the provided Value Help annotation with key and other relevant information
	 * 
	 * @param {object} oAnnotation Annotation object
	 * @param {string} sParentFieldName - the parent field name
	 * @private
	 */
	MetadataAnalyser.prototype._enrichValueHelpAnnotation = function(oAnnotation, sParentFieldName) {
		var mResult, oResult, oEntitySet, aKeys = [], sKey, mInParams = {}, mOutParams = {}, bIsInParam, bIsOutParam, aFields = [], aValueListFields = [], aRecords, oProperty, sValueListProperty, sLocalDataProperty, oParam, iLen = 0, i = 0, iFieldLen = 0;
		if (oAnnotation && oAnnotation.annotation) {
			mResult = oAnnotation.annotation;
			if (mResult) {
				oResult = mResult["SearchSupported"];
				oAnnotation.isSearchSupported = oResult ? oResult.Bool === "true" : false;
				oResult = mResult["CollectionPath"];
				// Set the CollectionPath on the annotation
				if (oResult) {
					oAnnotation.valueListEntitySetName = oResult.String;
					if (this._oMetaModel) {
						oEntitySet = this._oMetaModel.getODataEntitySet(oAnnotation.valueListEntitySetName);
					}
					if (oEntitySet) {
						oAnnotation.valueListEntityName = oEntitySet.entityType;
						oAnnotation.semantics = oEntitySet["sap:semantics"];
						aKeys = this.getKeysByEntitySetName(oEntitySet.name);
						aFields = this.getFieldsByEntitySetName(oEntitySet.name);
					}
				}

				oResult = mResult["Label"];
				// Set the valueListTitle on the annotation
				if (oResult) {
					oAnnotation.valueListTitle = oResult.String;
				}

				// Get all the params to create mappings, fields, key etc
				aRecords = mResult["Parameters"];
				if (aFields && aRecords) {
					iLen = aRecords.length;
				}
				// Loop through all the parameters/records
				for (i = 0; i < iLen; i++) {
					oParam = aRecords[i];
					sValueListProperty = undefined;
					sLocalDataProperty = undefined;
					// Each Parameter on the VL annotation has max 2 properties:
					// LocalDataProperty - Path to the property on the local entity that triggered the ValueList
					// ValueListProperty - Path to property in on the ValueList entity
					oProperty = oParam["ValueListProperty"];
					if (oProperty) {
						sValueListProperty = oProperty.String;
					}
					oProperty = oParam["LocalDataProperty"];
					if (oProperty) {
						sLocalDataProperty = oProperty.PropertyPath;
					}

					bIsInParam = false;
					if (oParam.RecordType === "com.sap.vocabularies.Common.v1.ValueListParameterInOut" || oParam.RecordType === "com.sap.vocabularies.Common.v1.ValueListParameterIn") {
						bIsInParam = true;
					}
					bIsOutParam = false;
					if (oParam.RecordType === "com.sap.vocabularies.Common.v1.ValueListParameterInOut" || oParam.RecordType === "com.sap.vocabularies.Common.v1.ValueListParameterOut") {
						bIsOutParam = true;
					}

					// Mapping for In/InOut params
					if (bIsInParam) {
						mInParams[sLocalDataProperty] = sValueListProperty;
					}

					// Mapping for Out/InOut params
					if (bIsOutParam) {
						mOutParams[sLocalDataProperty] = sValueListProperty;
					}

					// For sFin/gateway; this apparently should form the columns/fields in the list!
					if (bIsOutParam || oParam.RecordType === "com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly") {
						iFieldLen = aFields.length;
						while (iFieldLen--) {
							if (aFields[iFieldLen].name === sValueListProperty) {
								aValueListFields.push(aFields[iFieldLen]);
								break;
							}
						}
					}
					// The 1st InOut/Out param having the parent field as LocalDataProperty; should be the Key!
					if (!sKey && bIsOutParam && sLocalDataProperty === sParentFieldName) {
						sKey = sValueListProperty;
					}
				}
			}
			// Set the mappings, fields, keys, return key and corresponding description on the annotation
			oAnnotation.inParams = mInParams;
			oAnnotation.outParams = mOutParams;
			oAnnotation.fields = aFields;
			oAnnotation.valueListFields = aValueListFields;
			oAnnotation.keys = aKeys;
			oAnnotation.keyField = sKey;
			oAnnotation.descriptionField = this.getDescriptionFieldName(oAnnotation.keyField, oAnnotation.valueListEntitySetName);
		}
	};

	/**
	 * Gets the human readable text/description field's name from the specified Key field's name and entity name
	 * 
	 * @param {string|object} sKeyField - the name of the key field / oField - the field as present in the OData metadata
	 * @param {string} sEntityName - the name of the entity (required if the name of the field is passed as the 1st param)
	 * @returns {string} the description field name, if any
	 * @public
	 */
	MetadataAnalyser.prototype.getDescriptionFieldName = function(sKeyField, sEntityName) {
		var aFields, i = 0, iLength, oField, sDescriptionField;
		if (typeof sKeyField === "object") {
			oField = sKeyField;
		} else {
			aFields = this.getFieldsByEntitySetName(sEntityName);
			if (aFields) {
				iLength = aFields.length;
				for (i = 0; i < iLength; i++) {
					oField = aFields[i];
					if (oField.name === sKeyField) {
						// Found the specified field, exit loop
						break;
					}
					oField = null;
				}
			}
		}
		if (oField && oField["com.sap.vocabularies.Common.v1.Text"]) {
			sDescriptionField = oField["com.sap.vocabularies.Common.v1.Text"].Path;
		}
		return sDescriptionField;
	};

	/**
	 * Returns whether Search query is supported for this value help annotation
	 * 
	 * @param {object} oAnnotation - ValueHelpAnnotation
	 * @returns {boolean} whether search query is supported
	 * @public
	 */
	MetadataAnalyser.prototype.getIsSearchSupported = function(oAnnotation) {
		var bIsSearchSupported = false, oProperty;

		if (oAnnotation) {
			oProperty = oAnnotation.SearchSupported;
			if (oProperty && oProperty.Bool === "true") {
				bIsSearchSupported = true;
			}
		}

		return bIsSearchSupported;
	};

	/**
	 * Gets the valuelist entity sets semantics from the specified ValueList annotation
	 * 
	 * @param {Object} oAnnotation - the value list annotation
	 * @returns {string} - the semantics of the value list entity set (if any)
	 * @protected
	 */
	MetadataAnalyser.prototype.getValueListSemantics = function(oAnnotation) {
		var sEntitySet, oEntitySet, sSemantics;
		if (oAnnotation) {
			sEntitySet = oAnnotation["CollectionPath"] ? oAnnotation["CollectionPath"].String : undefined;
		}
		if (sEntitySet) {
			oEntitySet = this._oMetaModel.getODataEntitySet(sEntitySet);
			if (oEntitySet) {
				sSemantics = oEntitySet["sap:semantics"];
			}
		}
		return sSemantics;
	};

	/**
	 * Retrieves the LineItem Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the full path of the entity type (including the namespace)
	 * @param {String} sQualifier the qualifier for retrieving the UI.LineItem annotation (optional)
	 * @returns {Object} the resolved LineItem annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getLineItemAnnotation = function(sPath, sQualifier) {
		var oEntityType, sTerm, aAnnotationData, oResolvedAnnotation;
		if (sPath && this._oMetaModel) {
			oEntityType = this._oMetaModel.getODataEntityType(sPath);
			if (oEntityType) {
				sTerm = "com.sap.vocabularies.UI.v1.LineItem";
				if (sQualifier) {
					sTerm += "#" + sQualifier;
				}
				aAnnotationData = oEntityType[sTerm];
				// Resolve the annotation data into easily accessible properties
				if (aAnnotationData) {
					oResolvedAnnotation = {
						annotation: aAnnotationData
					};
					this._enrichAnnotationWithUIDataField(oResolvedAnnotation, aAnnotationData);
				}
			}
		}
		return oResolvedAnnotation;
	};

	/**
	 * Determines if the semantics annotation <code>sap:semantics</code> is set to 'aggregate'
	 * 
	 * @param {String} sPath the full path of the entity type (including the namespace)
	 * @returns {boolean} the semantics=aggregate state
	 * @public
	 */
	MetadataAnalyser.prototype.isSemanticAggregation = function(sPath) {
		var oEntityType;
		if (sPath && this._oMetaModel) {
			oEntityType = this._oMetaModel.getODataEntityType(sPath);
			if (oEntityType) {
				return oEntityType["sap:semantics"] === "aggregate";
			}
		}

		return false;
	};

	/**
	 * Retrieves the PresentationVariant Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the full path of the entity type (including the namespace)
	 * @param {String} sQualifier the qualifier for retrieving the UI.PresentationVariant annotation (optional)
	 * @returns {Object} the resolved PresentationVariant annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getPresentationVariantAnnotation = function(sPath, sQualifier) {
		var oEntityType, sTerm, aAnnotationData, iLen, i, oResolvedAnnotation, oLineItemAnnotation, oChartAnnotation, sItemPath;
		if (sPath && this._oMetaModel) {
			oEntityType = this._oMetaModel.getODataEntityType(sPath);
			if (oEntityType) {
				sTerm = "com.sap.vocabularies.UI.v1.PresentationVariant";
				if (sQualifier) {
					sTerm += "#" + sQualifier;
				}
				aAnnotationData = oEntityType[sTerm];
				if (aAnnotationData) {
					oResolvedAnnotation = {
						annotation: aAnnotationData,
						requestAtLeastFields: [],
						sortOrderFields: [],
						groupByFields: [],
						maxItems: undefined
					};
					if (aAnnotationData.Visualizations) {
						iLen = aAnnotationData.Visualizations.length;
						for (i = 0; i < iLen; i++) {
							sItemPath = aAnnotationData.Visualizations[i].AnnotationPath;
							if (!oLineItemAnnotation && (sItemPath === "@com.sap.vocabularies.UI.v1.LineItem" || sItemPath.indexOf("@com.sap.vocabularies.UI.v1.LineItem#") > -1)) {
								// get the lineitem annotation from entityType, ignoring the @
								oLineItemAnnotation = oEntityType[sItemPath.substring(1)];
								// process and set the line item annotation on the resolved result
								oResolvedAnnotation.lineItemAnnotation = {
									annotation: oLineItemAnnotation
								};
								this._enrichAnnotationWithUIDataField(oResolvedAnnotation.lineItemAnnotation, oLineItemAnnotation);
							} else if (!oChartAnnotation && (sItemPath === "@com.sap.vocabularies.UI.v1.Chart" || sItemPath.indexOf("@com.sap.vocabularies.UI.v1.Chart#") > -1)) {
								// get the chart annotation from entityType, ignoring the @
								oChartAnnotation = oEntityType[sItemPath.substring(1)];
								// process and set the line item annotation on the resolved result
								oResolvedAnnotation.chartAnnotation = {
									annotation: oChartAnnotation,
									semantics: oEntityType["sap:semantics"]
								};
								this._enrichChartAnnotation(oResolvedAnnotation.chartAnnotation, oChartAnnotation);
							}

							// break only if both LineItem and Chart annotations have been found!
							if (oLineItemAnnotation && oChartAnnotation) {
								break;
							}
						}
					}
					if (aAnnotationData.RequestAtLeast) {
						iLen = aAnnotationData.RequestAtLeast.length;
						for (i = 0; i < iLen; i++) {
							oResolvedAnnotation.requestAtLeastFields.push(aAnnotationData.RequestAtLeast[i].PropertyPath);
						}
					}
					if (aAnnotationData.SortOrder) {
						iLen = aAnnotationData.SortOrder.length;
						for (i = 0; i < iLen; i++) {
							oResolvedAnnotation.sortOrderFields.push({
								name: aAnnotationData.SortOrder[i].Property.PropertyPath,
								descending: aAnnotationData.SortOrder[i].Descending ? aAnnotationData.SortOrder[i].Descending.Bool === "true" : false
							});
						}
					}

					if (aAnnotationData.GroupBy) {
						iLen = aAnnotationData.GroupBy.length;
						for (i = 0; i < iLen; i++) {
							oResolvedAnnotation.groupByFields.push(aAnnotationData.GroupBy[i].PropertyPath);
						}
					}

					if (aAnnotationData.MaxItems) {
						oResolvedAnnotation.maxItems = aAnnotationData.MaxItems.Int;
					}
				}
			}
		}
		return oResolvedAnnotation;
	};

	/**
	 * Enriches the provided FieldGroup/LineItem annotation with UI.DataField attributes
	 * 
	 * @param {object} oAnnotation - the annotation that would be enriched
	 * @param {object} oAnnotationData - array of params having UI.DataField
	 * @private
	 */
	MetadataAnalyser.prototype._enrichChartAnnotation = function(oAnnotation, oAnnotationData) {
		var i, iLen, oObj;

		if (oAnnotation && oAnnotationData) {
			oAnnotation.measureFields = [];
			oAnnotation.dimensionFields = [];
			oAnnotation.measureAttributes = {};
			oAnnotation.dimensionAttributes = {};

			if (oAnnotationData.ChartType && oAnnotationData.ChartType.EnumMember) {
				oAnnotation.chartType = oAnnotationData.ChartType.EnumMember;
			}

			if (oAnnotationData.Measures) {
				iLen = oAnnotationData.Measures.length;
				for (i = 0; i < iLen; i++) {
					oAnnotation.measureFields.push(oAnnotationData.Measures[i].PropertyPath);
				}
			}

			if (oAnnotationData.MeasureAttributes) {
				iLen = oAnnotationData.MeasureAttributes.length;
				for (i = 0; i < iLen; i++) {
					oObj = oAnnotationData.MeasureAttributes[i];
					if (oObj.Measure) {
						// enrich measure attributes
						oAnnotation.measureAttributes[oObj.Measure.PropertyPath] = {
							role: oObj.Role ? oObj.Role.EnumMember : null,
							dataPoint: oObj.DataPoint ? oObj.DataPoint.AnnotationPath : null
						};
					}
				}
			}

			if (oAnnotationData.Dimensions) {
				iLen = oAnnotationData.Dimensions.length;
				for (i = 0; i < iLen; i++) {
					oAnnotation.dimensionFields.push(oAnnotationData.Dimensions[i].PropertyPath);
				}
			}

			if (oAnnotationData.DimensionAttributes) {
				iLen = oAnnotationData.DimensionAttributes.length;
				for (i = 0; i < iLen; i++) {
					oObj = oAnnotationData.DimensionAttributes[i];
					if (oObj.Dimension) {
						// enrich dimension attributes
						oAnnotation.dimensionAttributes[oObj.Dimension.PropertyPath] = {
							role: oObj.Role ? oObj.Role.EnumMember : null
						};
					}
				}
			}
		}

	};

	/**
	 * Retrieves the Chart Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the full path of the entity type (including the namespace)
	 * @param {String} sQualifier the qualifier for retrieving the Chart annotation (optional)
	 * @returns {Object} the resolved Chart annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getChartAnnotation = function(sPath, sQualifier) {
		var oEntityType, aAnnotationData, oResolvedAnnotation, sTerm;
		if (sPath && this._oMetaModel) {
			oEntityType = this._oMetaModel.getODataEntityType(sPath);
			if (oEntityType) {
				sTerm = "com.sap.vocabularies.UI.v1.Chart";
				if (sQualifier) {
					sTerm += "#" + sQualifier;
				}
				aAnnotationData = oEntityType[sTerm];
				// Resolve the annotation data into easily accessible properties
				if (aAnnotationData) {
					oResolvedAnnotation = {
						annotation: aAnnotationData,
						semantics: oEntityType["sap:semantics"]
					};
					this._enrichChartAnnotation(oResolvedAnnotation, aAnnotationData);
				}
			}
		}
		return oResolvedAnnotation;
	};

	/**
	 * Retrieves the DataPoint Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the full path of the entity type (including the namespace)
	 * @returns {Object} oResolvedAnnotation - object of the resolved DataPoint annotations (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getDataPointAnnotation = function(sPath) {
		var oEntityType, sProp, sQualifier, aPath, oDataPointAnnotationData, oResolvedAnnotation = {};
		if (sPath && this._oMetaModel) {
			oEntityType = this._oMetaModel.getODataEntityType(sPath);
			if (oEntityType) {
				for (sProp in oEntityType) {
					if (sProp === "com.sap.vocabularies.UI.v1.DataPoint" || sProp.indexOf("com.sap.vocabularies.UI.v1.DataPoint#") > -1) {
						sQualifier = null;
						oDataPointAnnotationData = oEntityType[sProp];
						aPath = sProp.split("#");
						if (aPath.length === 2) {
							sQualifier = aPath[1];
						}
						if (oDataPointAnnotationData) {
							// Set the qualifier of the annotation
							if (sQualifier) {
								if (!oResolvedAnnotation.additionalAnnotations) {
									oResolvedAnnotation.additionalAnnotations = {};
								}
								oResolvedAnnotation.additionalAnnotations[sQualifier] = oDataPointAnnotationData;
							} else {
								oResolvedAnnotation.primaryAnnotation = oDataPointAnnotationData;
							}
						}
					}
				}
			}
		}
		return oResolvedAnnotation;
	};

	/**
	 * Retrieves an array of FieldGroup Annotation for the specified target entity type
	 * 
	 * @param {String} sPath the entity type name -or- the full path of the entity type (including the namespace)
	 * @returns {Object} the resolved array of FieldGroup annotations (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldGroupAnnotation = function(sPath) {
		var oEntityType, sQualifier, aPath, oResult, oAnnotation, oResolvedAnnotation, aResolvedAnnotation = [];
		if (sPath && this._oMetaModel) {
			// Field groups annotations are used also by SmartFilter, which can be used without a fully qualified path --> add support for that
			oEntityType = this._oMetaModel.getODataEntityType(this._getFullyQualifiedNameForEntity(sPath));
			if (oEntityType) {
				for ( var sProp in oEntityType) {
					if (sProp === "com.sap.vocabularies.UI.v1.FieldGroup" || sProp.indexOf("com.sap.vocabularies.UI.v1.FieldGroup#") > -1) {
						sQualifier = null;
						oAnnotation = oEntityType[sProp];
						aPath = sProp.split("#");
						if (aPath.length === 2) {
							sQualifier = aPath[1];
						}
						if (oAnnotation) {
							oResolvedAnnotation = {
								annotation: oAnnotation
							};
							// Set the groupName of the annotation
							if (sQualifier) {
								oResolvedAnnotation.groupName = sQualifier;
							}
							// Get the label for the group
							oResult = oAnnotation["Label"];
							if (oResult) {
								// Assign the groupLabel to the annotation if it exists
								oResolvedAnnotation.groupLabel = oResult.String;
							}

							// Get the collection of UI fields
							oResult = oAnnotation["Data"];
							if (oResult) {
								this._enrichAnnotationWithUIDataField(oResolvedAnnotation, oResult);
							}
							aResolvedAnnotation.push(oResolvedAnnotation);
						}
					}
				}
			}
		}
		return aResolvedAnnotation;
	};

	/**
	 * Retrieves an array of FieldGroup annotation as specified by the FilterFacets annotation for a target entity type. If no FilterFacet annotation
	 * is provided, all the FieldGroups are returned (same behaviour as getFieldGroupAnnotation method).
	 * 
	 * @param {String} sPath the entity type name -or- the full path of the entity type (including the namespace)
	 * @returns {Object} the resolved array of FieldGroup annotations (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getFieldGroupsByFilterFacetsAnnotation = function(sPath) {
		var oEntityType, aPath, sQualifier, aRecords, aResolvedAnnotation, aFieldGroupsAnnotation = this.getFieldGroupAnnotation(sPath);

		aResolvedAnnotation = aFieldGroupsAnnotation;

		if (sPath && this._oMetaModel) {
			// Field groups annotations are used also by SmartFilter, which can be used without a fully qualified path --> add support for that
			oEntityType = this._oMetaModel.getODataEntityType(this._getFullyQualifiedNameForEntity(sPath));
			if (oEntityType) {
				for ( var sProp in oEntityType) {
					if (sProp === "com.sap.vocabularies.UI.v1.FilterFacets" || sProp.indexOf("com.sap.vocabularies.UI.v1.FilterFacets#") > -1) {

						aResolvedAnnotation = [];

						aRecords = oEntityType[sProp];
						if (aRecords) {
							for (var i = 0; i < aRecords.length; i++) {
								aPath = aRecords[i].Target.AnnotationPath.split("#");
								if (aPath.length === 2) {
									sQualifier = aPath[1];
								}

								if (sQualifier) {
									/* eslint-disable no-loop-func */
									aFieldGroupsAnnotation.some(function(oFieldGroupAnnotation) {
										if (oFieldGroupAnnotation.groupName === sQualifier) {
											if (aRecords[i].Label) {
												oFieldGroupAnnotation.groupLabel = aRecords[i].Label.String;
											}
											aResolvedAnnotation.push(oFieldGroupAnnotation);
											return true;
										}
										return false;

									});
									/* eslint-enable no-loop-func */
								}
							}
						}
					}
				}
			}
		}

		return aResolvedAnnotation;
	};

	/**
	 * Enriches the provided FieldGroup/LineItem annotation with UI.DataField attributes
	 * 
	 * @param {object} oAnnotation - the annotation that would be enriched
	 * @param {Array} aRecords - array of params having UI.DataField
	 * @private
	 */
	MetadataAnalyser.prototype._enrichAnnotationWithUIDataField = function(oAnnotation, aRecords) {
		var aFields = [], mURLInfo = {}, mLabels = {}, mImportance = {}, mCriticality = {}, oProperty, sField, oParam, iLen = 0, i = 0;
		if (oAnnotation && aRecords) {
			iLen = aRecords.length;
			aFields = [];
			mLabels = {};
			for (i = 0; i < iLen; i++) {
				oParam = aRecords[i];
				// Check if term is correct
				if (oParam && (oParam.RecordType === "com.sap.vocabularies.UI.v1.DataField" || oParam.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl")) {
					sField = null;
					oProperty = oParam["Value"];
					if (oProperty) {
						sField = oProperty.Path;
					}
					if (sField) {
						// Add field to the fields array
						aFields.push(sField);
						// Extract Url param only if a value path exists
						oProperty = oParam["Url"];
						if (oProperty) {
							mURLInfo[sField] = this._extractURLInfo(oProperty);
						}
						// Check if a Label is defined with the annotation
						oProperty = oParam["Label"];
						if (oProperty && oProperty.String) {
							mLabels[sField] = oProperty.String;
						}
						// Calculate and set Importance metadata
						mImportance[sField] = this._getImportanceAnnotation(oParam);
						// Check if Criticality Path is defined for the DataField
						oProperty = oParam["Criticality"];
						if (oProperty) {
							mCriticality[sField] = this._extractCriticalityInfo(oProperty, oParam);
						}
					}
				}
			}

			// Assign the resolved fields and labels to the annotation
			oAnnotation.fields = aFields;
			oAnnotation.urlInfo = mURLInfo;
			oAnnotation.labels = mLabels;
			oAnnotation.importance = mImportance;
			oAnnotation.criticality = mCriticality;
		}
	};

	/**
	 * Extracts the Criticality meta object and fields
	 * 
	 * @param {Object} oCriticality - the Criticality parameter
	 * @param {Object} oRecord - the record containing the Criticality parameter
	 * @returns {Object} oCriticality - the parsed Criticality metadata
	 * @private
	 */
	MetadataAnalyser.prototype._extractCriticalityInfo = function(oCriticality, oRecord) {
		var oResult, oCriticalityRepresentation;
		// extract info only if a Path or EnumMember exist
		if (oCriticality.Path || oCriticality.EnumMember) {
			oResult = {};
			oResult["path"] = oCriticality.Path;
			oResult["criticalityType"] = oCriticality.EnumMember;
			oCriticalityRepresentation = oRecord["CriticalityRepresentation"];
			if (oCriticalityRepresentation && oCriticalityRepresentation.EnumMember) {
				oResult["criticalityRepresentationType"] = oCriticalityRepresentation.EnumMember;
			}
		}
		return oResult;
	};

	/**
	 * Extracts the Apply "odata.fillUriTemplate" meta object and fields
	 * 
	 * @param {Object} oParameter - the Apply "odata.fillUriTemplate" meta object
	 * @returns {Object} oUrlInfo - the parsed "odata.fillUriTemplate" metadata
	 * @private
	 */
	MetadataAnalyser.prototype._extractURLInfo = function(oParameter) {
		var oResult, aParameters, iLength, oParam;
		if (oParameter) {
			if (oParameter.Apply && oParameter.Apply.Name === "odata.fillUriTemplate") {
				oResult = {
					urlTarget: undefined,
					parameters: []
				};
				// Create a dummy annotation helper context at the instance level
				if (!this._oDummyAnnotationHelperContext) {
					this._oDummyAnnotationHelperContext = this._oMetaModel.createBindingContext("/");
					// require the AnnotationHelper instance once
					jQuery.sap.require("sap.ui.model.odata.AnnotationHelper");
				}
				if (this._oDummyAnnotationHelperContext) {
					// extract target URL from fillUriTemplate
					oResult.urlTarget = sap.ui.model.odata.AnnotationHelper.format(this._oDummyAnnotationHelperContext, oParameter);
				}
				// extract LabeledElement --> Path from Parameters (these should be added to $select)
				aParameters = oParameter.Apply.Parameters;
				iLength = aParameters && aParameters.length ? aParameters.length : 0;
				while (iLength--) {
					oParam = aParameters[iLength];
					if (oParam && oParam.Type === "LabeledElement" && oParam.Value && oParam.Value.Path) {
						oResult.parameters.push(oParam.Value.Path);
					}
				}
			} else if (oParameter.Path) {
				oResult = {
					urlPath: oParameter.Path
				};
			}
		}
		return oResult;
	};

	/**
	 * Retrieves the SelectionVariant annotation for a specified entity
	 * 
	 * @param {String} sPath the entity type name -or- the full path of the entity type (including the namespace)
	 * @returns {array} the resolved array of SelectionVariant annotations (if any).
	 * @public
	 */
	MetadataAnalyser.prototype.getSelectionVariantAnnotation = function(sPath) {
		var oEntityType, oAnnotation, sQualifier, aResolvedAnnotation = [], aPath;
		if (sPath && this._oMetaModel) {
			// SelectionFields annotations is used also by SmartFilter, which can be used without a fully qualified path --> add support for that
			oEntityType = this._oMetaModel.getODataEntityType(this._getFullyQualifiedNameForEntity(sPath));
			if (oEntityType) {
				for ( var sProp in oEntityType) {
					if (sProp === "com.sap.vocabularies.UI.v1.SelectionVariant" || sProp.indexOf("com.sap.vocabularies.UI.v1.SelectionVariant#") > -1) {
						sQualifier = "";
						oAnnotation = oEntityType[sProp];
						aPath = sProp.split("#");
						if (aPath.length === 2) {
							sQualifier = aPath[1];
						}
						if (oAnnotation) {
							aResolvedAnnotation.push({
								qualifier: sQualifier,
								annotation: oAnnotation
							});
						}
					}
				}
			}
		}
		return aResolvedAnnotation;
	};

	/**
	 * Retrieves the SelectionFields annotation for a specified entity
	 * 
	 * @param {String} sPath the entity type name -or- the full path of the entity type (including the namespace)
	 * @returns {Object} the resolved array of FieldGroup annotations (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getSelectionFieldsAnnotation = function(sPath) {
		var oEntityType, aAnnotationData, iLen, i, oResolvedAnnotation;
		if (sPath && this._oMetaModel) {
			// SelectionFields annotations is used also by SmartFilter, which can be used without a fully qualified path --> add support for that
			oEntityType = this._oMetaModel.getODataEntityType(this._getFullyQualifiedNameForEntity(sPath));
			if (oEntityType) {
				aAnnotationData = oEntityType["com.sap.vocabularies.UI.v1.SelectionFields"];
				if (aAnnotationData) {
					oResolvedAnnotation = {
						annotation: aAnnotationData,
						selectionFields: []
					};
					iLen = aAnnotationData.length;
					for (i = 0; i < iLen; i++) {
						oResolvedAnnotation.selectionFields.push(aAnnotationData[i].PropertyPath);
					}
				}
			}
		}
		return oResolvedAnnotation;
	};

	/**
	 * Retrieves the SemanticKey Annotation for the specified entity
	 * 
	 * @param {String} sPath the full path of the entity/target (including the namespace)
	 * @returns {Object} the resolved SemanticKey annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getSemanticKeyAnnotation = function(sPath) {
		var oEntityType, aAnnotationData, iLen, i, oResolvedAnnotation;
		if (sPath && this._oMetaModel) {
			oEntityType = this._oMetaModel.getODataEntityType(sPath);
			if (oEntityType) {
				aAnnotationData = oEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
				if (aAnnotationData) {
					oResolvedAnnotation = {
						annotation: aAnnotationData,
						semanticKeyFields: []
					};
					iLen = aAnnotationData.length;
					for (i = 0; i < iLen; i++) {
						oResolvedAnnotation.semanticKeyFields.push(aAnnotationData[i].PropertyPath);
					}
				}
			}
		}
		return oResolvedAnnotation;
	};

	/**
	 * Returns the importance annotation if available
	 * 
	 * @param {Object} oParam - the parameter containing the importance annotation
	 * @returns {string} the found importance value or null
	 * @private
	 */
	MetadataAnalyser.prototype._getImportanceAnnotation = function(oParam) {
		var sImportance = null, oResult;

		oResult = oParam["com.sap.vocabularies.UI.v1.Importance"];
		if (oResult) {
			sImportance = oResult.EnumMember;
		}

		switch (sImportance) {
			case "com.sap.vocabularies.UI.v1.ImportanceType/Medium":
				return "Medium";
			case "com.sap.vocabularies.UI.v1.ImportanceType/Low":
				return "Low";
			default:
				return "High";
		}

		// return "High"; // if nothing is specified / or a unknown type is used, default to High
	};

	/**
	 * Resolves and returns the displayBehaviour from TextArrangement Annotation for the specified property/target
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace) or the property itself
	 * @returns {string} the resolved displayBehaviour from TextArrangement enumeration (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getTextArrangementValue = function(sPath) {
		var aPath, oType, oObject, oAnnotation, sDisplayBehaviour;

		if (sPath && this._oMetaModel) {
			if (typeof (sPath) === "string") {
				sPath = this._getFullyQualifiedNameForEntity(sPath);
				// Split the property path and
				aPath = sPath.split("/");
				if (aPath.length > 1) {
					// The type could either be an entity type or a complex type
					oType = this._oMetaModel.getODataEntityType(aPath[0]) || this._oMetaModel.getODataComplexType(aPath[0]);
					// Get the property from the type
					oObject = this._oMetaModel.getODataProperty(oType, aPath[1]);
				} else {
					oObject = this._oMetaModel.getODataEntityType(sPath) || this._oMetaModel.getODataComplexType(sPath);
				}
			} else {
				oObject = sPath;
			}
			if (oObject) {
				oAnnotation = oObject["com.sap.vocabularies.UI.v1.TextArrangement"];
			}
			if (oAnnotation) {
				switch (oAnnotation.EnumMember) {
					case "com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst":
						sDisplayBehaviour = "descriptionAndId";
						break;
					case "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast":
						sDisplayBehaviour = "idAndDescription";
						break;
					case "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate":
						sDisplayBehaviour = "idOnly";
						break;
					case "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly":
						sDisplayBehaviour = "descriptionOnly";
						break;
					default:
						sDisplayBehaviour = undefined;
						break;
				}
			}
		}
		return sDisplayBehaviour;
	};

	/**
	 * Retrieves the SemanticObject Annotation for the specified property/target
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace)
	 * @returns {Object} the resolved semanticObject annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getSemanticObjectAnnotation = function(sPath) {
		var aPath, oType, oProperty, oAnnotation;

		if (sPath && this._oMetaModel) {
			// Split the property path and
			aPath = sPath.split("/");
			// The type could either be an entity type or a complex type
			oType = this._oMetaModel.getODataEntityType(aPath[0]) || this._oMetaModel.getODataComplexType(aPath[0]);
			// Get the property from the type
			oProperty = this._oMetaModel.getODataProperty(oType, aPath[1]);
			if (oProperty) {
				oAnnotation = oProperty["com.sap.vocabularies.Common.v1.SemanticObject"];
			}
			return this._prepareSemanticObjectAnnotationFromProperty(oAnnotation);
		}
		return null;
	};

	/**
	 * Retrieves the default SemanticObject and additionals SemanticObjects from Annotation for the specified property/target.
	 * 
	 * @param {String} sPath the full path of the property/target (including the namespace)
	 * @returns {object | undefined} the resolved semanticObject annotation object (if any)
	 * @private
	 */
	MetadataAnalyser.prototype.getSemanticObjectsFromAnnotation = function(sPath) {
		if (!sPath || !this._oMetaModel) {
			return null;
		}
		// Note: slash inside of namespace is not allowed due to OData specification:
		// http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part3-csdl/odata-v4.0-errata03-os-part3-csdl-complete.html#_Namespace
		var aPath = sPath.split("/");
		// The type could either be an entity type or a complex type
		var oType = this._oMetaModel.getODataEntityType(aPath[0]) || this._oMetaModel.getODataComplexType(aPath[0]);
		return MetadataAnalyser.getSemanticObjectsFromProperty(this._oMetaModel.getODataProperty(oType, aPath[1]));
	};

	/**
	 * Retrieves the default SemanticObject and other SemanticObjects for the specified annotations.
	 * 
	 * @param {object} oProperty the given OData property
	 * @returns {object | undefined} the resolved semanticObject annotation object (if any)
	 * @private
	 */
	MetadataAnalyser.getSemanticObjectsFromProperty = function(oProperty) {
		var oSemanticObjects = {
			defaultSemanticObject: undefined,
			additionalSemanticObjects: []
		};
		for ( var sAttr in oProperty) {
			if (sAttr === "com.sap.vocabularies.Common.v1.SemanticObject") {
				oSemanticObjects.defaultSemanticObject = oProperty[sAttr]["String"];
			} else if (jQuery.sap.startsWith(sAttr, "com.sap.vocabularies.Common.v1.SemanticObject#")) {
				oSemanticObjects.additionalSemanticObjects.push(oProperty[sAttr]["String"]);
			}
		}
		return (oSemanticObjects.defaultSemanticObject || oSemanticObjects.additionalSemanticObjects.length > 0) ? oSemanticObjects : undefined;
	};

	/**
	 * Retrieves the SemanticObject Annotation for the specified property/target
	 * 
	 * @param {object} oProperty the given OData property
	 * @returns {Object} the resolved semanticObject annotation object (if any)
	 * @public
	 */
	MetadataAnalyser.prototype.getSemanticObjectAnnotationFromProperty = function(oProperty) {
		var oAnnotation;

		if (oProperty) {
			oAnnotation = oProperty["com.sap.vocabularies.Common.v1.SemanticObject"];
			return this._prepareSemanticObjectAnnotationFromProperty(oAnnotation);
		}

		return null;
	};

	/**
	 * Prepares the semantic object annotation.
	 * 
	 * @param {object} oAnnotation the original annotation
	 * @returns {object} the preparation result
	 * @private
	 */
	MetadataAnalyser.prototype._prepareSemanticObjectAnnotationFromProperty = function(oAnnotation) {
		var oResult, oResolvedAnnotation;

		if (oAnnotation) {
			oResult = oAnnotation["String"];
			if (oResult) {
				oResolvedAnnotation = {
					annotation: oAnnotation
				};
				oResolvedAnnotation.semanticObject = oResult;
			}
		}

		return oResolvedAnnotation;
	};

	/**
	 * Returns the fully qualified name of an entity which is e.g. "com.sap.GL.ZAF.GL_ACCOUNT" from the specified type name.
	 * 
	 * @param {string} sEntityTypeName - the entity Type name which needs to be converted
	 * @returns {string} - the fully qualified name for this entity
	 * @private
	 */
	MetadataAnalyser.prototype._getFullyQualifiedNameForEntity = function(sEntityTypeName) {
		var sNamespace, sResult;
		if (!sEntityTypeName) {
			return undefined;
		}
		// if entity type name already has a ".", just return it
		if (sEntityTypeName.indexOf(".") > -1) {
			return sEntityTypeName;
		}
		sNamespace = this.getNamespace();
		if (sNamespace && !(sEntityTypeName.indexOf(sNamespace) > -1)) {
			sResult = sNamespace + "." + sEntityTypeName;
		} else {
			sResult = sEntityTypeName;
		}
		return sResult;
	};

	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	MetadataAnalyser.prototype.destroy = function() {
		this.oModel = null;
		this._oMetaModel = null;
		this._oMetadata = null;
		this._oSchemaDefinition = null;
		this._sResourceRootUri = null;
		this.bIsDestroyed = true;
		this._oDummyAnnotationHelperContext = null;
	};

	return MetadataAnalyser;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/MetadataAnalyser.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.BaseController') ) {
/* eslint-disable strict */

/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides BaseController
jQuery.sap.declare('sap.ui.comp.personalization.BaseController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/BaseController",[
	'sap/ui/base/ManagedObject', './Util'
], function(ManagedObject, Util) {
	"use strict";

	/**
	 * The BaseController is a base class for personalization Controller like e.g. FilterController, SortController etc. *
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class An abstract class for personalization Controllers.
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.25.0-SNAPSHOT *
	 * @constructor
	 * @private
	 * @since 1.28.0
	 * @alias sap.ui.comp.personalization.BaseController
	 */
	var BaseController = ManagedObject.extend("sap.ui.comp.personalization.BaseController",
	/** @lends sap.ui.comp.personalization.BaseController */
	{
		metadata: {
			"abstract": true,
			library: "sap.ui.comp",
			properties: {
				/**
				 * Controller type for generic use. Due to extensibility reason the type of "type" property should be "string". So it is feasible to
				 * add a custom controller without expanding the type.
				 */
				type: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * Controller model. Each controller has its own name space as part of the entire model.
				 */
				model: {
					type: "sap.ui.model.json.JSONModel",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * Stores the restore data.
				 */
				persistentDataRestore: {
					type: "object",
					group: "Misc",
					defaultValue: null,
					visibility: "hidden"
				},
				/**
				 * @since 1.32.0
				 */
				ignoreColumnKeys: {
					type: "object",
					group: "Misc",
					defaultValue: [],
					visibility: "hidden"
				},
				columnHelper: {
					type: "sap.ui.comp.personalization.ColumnHelper",
					defaultValue: null,
					visibility: "hidden"
				}
			},
			associations: {
				/**
				 * Table for which settings are applied.
				 */
				table: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {
				/**
				 * Event is raised before potential change on table will be applied.
				 */
				beforePotentialTableChange: {},
				/**
				 * Event is raised after potential change on table has be applied.
				 */
				afterPotentialTableChange: {}
			}
		}
	});

	/**
	 * Initialization hook.
	 *
	 * @private
	 */
	BaseController.prototype.init = function() {
		this._aColumnKeys = [];
	};

	/**
	 * Load data - used for lazy loading
	 *
	 * @protected
	 * @returns {function} to set the model data
	 */
	BaseController.prototype.setModelFunction = function() {
		var that = this;
		return function() {
			if (!this.getModel("$sapmP13nPanel")) {
				this.setModel(that.getModel("$sapuicomppersonalizationBaseController"), "$sapmP13nPanel");
			}
		};
	};

	/**
	 * Getter for association <code>table</code>
	 *
	 * @returns {object} that represents sap.m.Table || sap.ui.table.Table
	 * @protected
	 */
	BaseController.prototype.getTable = function() {
		var oTable = this.getAssociation("table");
		if (typeof oTable === "string") {
			oTable = sap.ui.getCore().byId(oTable);
		}
		return oTable;
	};

	/**
	 * Creates persistent object
	 *
	 * @param {array} aItems is a list of items that will be placed in the new created persistent structure
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.createPersistentStructure = function(aItems) {
		aItems = aItems || [];
		var oPersistentData = {};
		oPersistentData[this.getType()] = {};
		oPersistentData[this.getType()][this.getItemType()] = aItems;
		return oPersistentData;
	};

	/**
	 * Creates transient object
	 *
	 * @param {array} aItems is a list of items that will be placed in the new created transient structure
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.createTransientStructure = function(aItems) {
		aItems = aItems || [];
		var oTransientData = {};
		oTransientData[this.getType()] = {};
		oTransientData[this.getType()].items = aItems;
		return oTransientData;
	};

	BaseController.prototype.getItemType = function() {
		return this.getType() + "Items";
	};

	/**
	 * Getter of persistent data object
	 *
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.getPersistentData = function() {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		var oPersistentData = {};
		if (!oData.persistentData[this.getType()]) {
			oPersistentData = this.createPersistentStructure();
		} else {
			oPersistentData[this.getType()] = oData.persistentData[this.getType()];
		}
		return oPersistentData;
	};

	/**
	 * Setter of persistent data object *
	 *
	 * @param {object} oDataNew contains the new data that will be set into model persistentData
	 * @protected
	 */
	BaseController.prototype.setPersistentData = function(oDataNew) {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		oData.persistentData[this.getType()] = oDataNew[this.getType()];
	};

	/**
	 * Getter of persistent items data object
	 *
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.getPersistentDataItems = function() {
		return this.getPersistentData()[this.getType()][this.getItemType()];
	};

	/**
	 * Getter of transient data object
	 *
	 * @returns {object} JSON object
	 * @protected
	 */
	BaseController.prototype.getTransientData = function() {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		var oTransientData = {};
		if (!oData.transientData[this.getType()]) {
			oTransientData = this.createTransientStructure();
		} else {
			oTransientData[this.getType()] = oData.transientData[this.getType()];
		}
		return oTransientData;
	};

	/**
	 * Setter of transient data object
	 *
	 * @param {object} oDataNew contains the new data that will be set into model transientData
	 * @protected
	 */
	BaseController.prototype.setTransientData = function(oDataNew) {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		oData.transientData[this.getType()] = oDataNew[this.getType()];
	};

	/**
	 * Initialization of model
	 *
	 * @param {object} oModel of type sap.ui.model.json.JSONModel that will be used for initialization
	 */
	BaseController.prototype.initializeModel = function(oModel) {
		this.setModel(oModel, "$sapuicomppersonalizationBaseController");
		this.setTransientData(this.getTransientData());
		this.setPersistentData(this.getPersistentData());
	};

	BaseController.prototype.getColumnMap = function(bOnlyValid) {
		return bOnlyValid ? this.getColumnHelper().getColumnMapOfValidColumnKeys(this.getType(), this.getIgnoreColumnKeys()) : this.getColumnHelper().getColumnMap();
	};

	BaseController.prototype.createTableRestoreJson = function(aColumnKeys) {
		this._aColumnKeys = aColumnKeys;
		// TODO: this is not correct but the best we can do - problem is that the order in which we sort is not extractable from the table instance.
		// Consider to log error if more that one sort criteria
		this.setPersistentDataRestore(this._getTable2JsonRestore(aColumnKeys));
	};

	BaseController.prototype.getTableRestoreJson = function() {
		return Util.copy(this.getPersistentDataRestore());
	};

	/**
	 * only keep a columnItem if key is available in table
	 */
	BaseController.prototype.reducePersistentModel = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return;
		}

		var aItemsReduced = [];
		var oPersistentData = this.getPersistentData();
		oPersistentData[this.getType()][this.getItemType()].forEach(function(oItem) {
			if (this._aColumnKeys.indexOf(oItem.columnKey) > -1) {
				aItemsReduced.push(oItem);
			}
		}, this);
		oPersistentData[this.getType()][this.getItemType()] = aItemsReduced;
		this.setPersistentData(oPersistentData);
	};

	/**
	 * this method will make a complete json snapshot of the current table instance ("original") from the perspective of the columns controller; the
	 * json snapshot can later be applied to any table instance to recover all columns related infos of the "original" table TODO: This really only
	 * works for when max 1 sort criteria is defined since otherwise potentially order of sort criteria is destroyed
	 */
	BaseController.prototype._getTable2Json = function() {
	};

	BaseController.prototype._getTable2JsonRestore = function(aColumnKeys) {
		return this._getTable2Json();
	};

	BaseController.prototype.syncTable2PersistentModel = function() {
		// first put table representation into persistentData - full json representation
		// NOTE: This really only works for when max 1 sort criteria is defined since otherwise potentially order of sort
		// criteria is destroyed
		this.setPersistentData(this._getTable2Json());

		// NOTE: we leave persistentData in this form though for persistence we have too much data (compared to what we need to persist); reason is
		// that we wish to expose this data in the UI.
	};

	BaseController.prototype.syncTable2TransientModel = function() {
	};

	BaseController.prototype.getPanel = function() {
	};

	/**
	 * hook to apply made changes. The "oPayload" object can be used by subclasses.
	 *
	 * @param {object} oPayload is an object that contains additional data, which can be filled by the connected panels
	 */
	BaseController.prototype.onAfterSubmit = function(oPayload) {
		this.syncJsonModel2Table(this.getModel("$sapuicomppersonalizationBaseController").getData().persistentData);
	};

	/**
	 * This method is called from Controller after Reset button was executed. This method is a base implementation and it is optional to re-implement
	 * it in the specific sub-controller
	 *
	 * @param {object} oPayload is an object that contains additional data, which can be filled by the connected panels
	 */
	BaseController.prototype.onAfterReset = function(oPayload) {
	};

	BaseController.prototype.syncJsonModel2Table = function(oJsonModel) {
	};

	/**
	 * Operations on sorting are processed sometime directly at the table and sometime not. In case that something has been changed via
	 * Personalization Dialog the consumer of the Personalization Dialog has to apply sorting at the table. In case that sorting has been changed via
	 * user interaction at table, the change is instantly applied at the table.
	 *
	 * @param {object} oPersistentDataBase JSON object
	 * @param {object} oPersistentDataCompare JSON object
	 */
	BaseController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
	};

	/**
	 * Result is XOR based difference = oPersistentDataBase - oPersistentDataCompare
	 *
	 * @param {object} oPersistentDataBase JSON object.
	 * @param {object} oPersistentDataCompare JSON object. Note: if sortItems is [] then it means that all sortItems have been deleted
	 */
	BaseController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if sortItems is []
	 *        then it means that all sortItems have been deleted
	 * @returns {object} Copied union data
	 */
	BaseController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
	};

	BaseController.prototype.determineNeededColumnKeys = function(oPersistentData) {
		var oResult = {};
		oResult[this.getType()] = [];

		if (!oPersistentData || !oPersistentData[this.getType()] || !oPersistentData[this.getType()][this.getItemType()]) {
			return oResult;
		}
		oPersistentData[this.getType()][this.getItemType()].forEach(function(oModelColumn) {
			oResult[this.getType()].push(oModelColumn.columnKey);
		}, this);
		return oResult;
	};

	/**
	 * Cleans up before destruction.
	 *
	 * @private
	 */
	BaseController.prototype.exit = function() {
		this._aColumnKeys = null;
	};

	/* eslint-enable strict */

	return BaseController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/BaseController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.ColumnHelper') ) {
/* eslint-disable strict */

/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.personalization.ColumnHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/ColumnHelper",[
	'jquery.sap.global', 'sap/ui/base/ManagedObject', './Util', './ColumnWrapper'
], function(jQuery, ManagedObject, Util, ColumnWrapper) {
	"use strict";

	/**
	 * Constructor for a helper class.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Helper class
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.50.6
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @private
	 * @since 1.38.0
	 * @alias sap.ui.comp.personalization.ColumnHelper
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ColumnHelper = ManagedObject.extend("sap.ui.comp.personalization.ColumnHelper", /** @lends sap.ui.comp.personalization.ColumnHelper */
	{
		constructor: function(sId, mSettings) {
			ManagedObject.apply(this, arguments);
		},
		metadata: {
			properties: {
				callbackOnSetVisible: {
					type: "object",
					defaultValue: null
				},
				callbackOnSetSummed: {
					type: "object",
					defaultValue: null
				}
			}
		}
	});

	ColumnHelper.prototype.init = function() {
		this._oColumnKey2ColumnMap = {};
		this._oColumnKeyIsMonkeyPatched = {};
		this._oStoredColumnMapForColumnKeys = {};
	};

	// ------------------- setter methods ---------------------------------------------
	ColumnHelper.prototype.addColumnMap = function(oColumnKey2ColumnMap) {
		if (!oColumnKey2ColumnMap) {
			return;
		}
		for ( var sColumnKey in oColumnKey2ColumnMap) {
			this._addColumnToMap(sColumnKey, oColumnKey2ColumnMap[sColumnKey]);
		}
	};

	ColumnHelper.prototype.addColumnsToMap = function(aColumns) {
		if (!aColumns) {
			return;
		}
		aColumns.forEach(function(oColumn) {
			var sColumnKey = Util.getColumnKey(oColumn);
			this._addColumnToMap(sColumnKey, oColumn);
		}, this);
	};

	ColumnHelper.prototype._addColumnToMap = function(sColumnKey, oColumn) {
		if (!this._oColumnKey2ColumnMap[sColumnKey]) {
			this._oColumnKey2ColumnMap[sColumnKey] = oColumn;
			this._monkeyPatchColumn(oColumn, sColumnKey);
		}
	};

	// ------------------- getter methods -------------------------------------------
	ColumnHelper.prototype.getColumnMap = function() {
		return this._oColumnKey2ColumnMap;
	};

	/**
	 * For every <code>sType</code> a map is stored with key as columnKey and value as corresponding column. The columnKeys are reduced by
	 * <code>aIgnoredColumnKeys</code>. If then during the life-cycle the amount of columnKeys is changed the stored map will be invalidated.
	 *
	 * @param {sap.m.P13nPanelType} sType
	 * @param {array} aIgnoredColumnKeys
	 * @returns {object} Map of columnKeys and corresponding columns
	 */
	ColumnHelper.prototype.getColumnMapOfValidColumnKeys = function(sType, aIgnoredColumnKeys) {
		this._invalidateStoredColumnMapForColumnKeys(sType);
		if (this._oStoredColumnMapForColumnKeys[sType]) {
			return this._oStoredColumnMapForColumnKeys[sType].map;
		}

		if (!aIgnoredColumnKeys || !aIgnoredColumnKeys.length) {
			this._oStoredColumnMapForColumnKeys[sType] = {
				columnKeys: this.getColumnKeysOfMap(),
				map: this._oColumnKey2ColumnMap
			};
			return this._oStoredColumnMapForColumnKeys[sType].map;
		}

		this._oStoredColumnMapForColumnKeys[sType] = {
			columnKeys: this.getColumnKeysOfMap(),
			map: jQuery.extend(true, {}, this._oColumnKey2ColumnMap)
		};
		aIgnoredColumnKeys.forEach(function(sColumnKey) {
			delete this._oStoredColumnMapForColumnKeys[sType].map[sColumnKey];
		}, this);

		return this._oStoredColumnMapForColumnKeys[sType].map;
	};

	ColumnHelper.prototype._invalidateStoredColumnMapForColumnKeys = function(sType) {
		var oValue = this._oStoredColumnMapForColumnKeys[sType];
		if (!oValue) {
			return;
		}
		var aColumnKeys = this.getColumnKeysOfMap();
		var aDiff = aColumnKeys.filter(function(sColumnKey) {
			return oValue.columnKeys.indexOf(sColumnKey) < 0;
		});
		if (aDiff.length) {
			delete this._oStoredColumnMapForColumnKeys[sType];
		}
	};

	ColumnHelper.prototype.getColumnKeysOfMap = function() {
		var aColumnKeys = [];
		for ( var sColumnKey in this._oColumnKey2ColumnMap) {
			aColumnKeys.push(sColumnKey);
		}
		return aColumnKeys;
	};

	ColumnHelper.prototype.getVisibleColumnKeys = function() {
		var aColumnKeys = [];
		for ( var sColumnKey in this._oColumnKey2ColumnMap) {
			var oColumn = this._oColumnKey2ColumnMap[sColumnKey];
			if (oColumn.getVisible && oColumn.getVisible()) {
				aColumnKeys.push(sColumnKey);
			}
		}
		return aColumnKeys;
	};

	/**
	 * Determines <code>columnKeys</code> of a specific type.
	 *
	 * @param {string} sType
	 * @return {array} Array of strings representing the <code>columnKeys</code>
	 */
	ColumnHelper.prototype.getColumnKeysOfType = function(sType) {
		var aColumnKeys = [];
		for ( var sColumnKey in this._oColumnKey2ColumnMap) {
			var oColumn = this._oColumnKey2ColumnMap[sColumnKey];
			if (Util.getColumnType(oColumn) === sType) {
				aColumnKeys.push(sColumnKey);
			}
		}
		return aColumnKeys;
	};

	ColumnHelper.prototype.hasFilterableColumns = function() {
		for ( var sColumnKey in this._oColumnKey2ColumnMap) {
			if (Util.isFilterable(this._oColumnKey2ColumnMap[sColumnKey])) {
				return true;
			}
		}
		return false;
	};

	ColumnHelper.prototype.hasSortableColumns = function() {
		for ( var sColumnKey in this._oColumnKey2ColumnMap) {
			if (Util.isSortable(this._oColumnKey2ColumnMap[sColumnKey])) {
				return true;
			}
		}
		return false;
	};

	ColumnHelper.prototype._monkeyPatchColumn = function(oColumn, sColumnKey) {
		if (oColumn instanceof ColumnWrapper) {
			return;
		}

		if (this._oColumnKeyIsMonkeyPatched[sColumnKey]) {
			// Do nothing if for the current column the methods are already overwritten.
			return;
		}
		this._oColumnKeyIsMonkeyPatched[sColumnKey] = true;

		// Monkey patch setVisible
		var fCallbackOnSetVisible = this.getCallbackOnSetVisible();
		var fSetVisibleOrigin = oColumn.setVisible.bind(oColumn);
		var fSetVisibleOverwritten = function(bVisible) {
			if (fCallbackOnSetVisible) {
				fCallbackOnSetVisible(bVisible, sColumnKey);
			}
			fSetVisibleOrigin(bVisible);
		};
		oColumn.setVisible = fSetVisibleOverwritten;

		// Monkey patch setSummed of AnalyticalTable
		if (oColumn.setSummed) {
			var fCallbackOnSetSummed = this.getCallbackOnSetSummed();
			var fSetSummedOrigin = oColumn.setSummed.bind(oColumn);
			var fSetSummedOverwritten = function(bIsSummed) {
				if (fCallbackOnSetSummed) {
					fCallbackOnSetSummed(bIsSummed, oColumn);
				}
				fSetSummedOrigin(bIsSummed);
			};
			oColumn.setSummed = fSetSummedOverwritten;
		}
	};

	ColumnHelper.prototype.exit = function() {
		this._oColumnKey2ColumnMap = null;
		this._oColumnKeyIsMonkeyPatched = null;
		this._oStoredColumnMapForColumnKeys = null;
	};

	/* eslint-enable strict */
	return ColumnHelper;
}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/ColumnHelper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.ColumnsController') ) {
/* eslint-disable strict */

/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides ColumnsController
jQuery.sap.declare('sap.ui.comp.personalization.ColumnsController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/ColumnsController",[
	'jquery.sap.global', './BaseController', 'sap/m/library', './Util'
], function(jQuery, BaseController, library, Util) {
	"use strict";

	// TODO: wenn an dem Column "Freeze" gesetzt wurde, sollte die Spalte nicht mehr verschoben werden können in dem
	// ColumnsPanel

	/**
	 * The ColumnsController can be used to...
	 *
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP SE
	 * @version 1.50.6
	 * @private
	 * @since 1.26.0
	 * @alias sap.ui.comp.ColumnsController
	 */
	var ColumnsController = BaseController.extend("sap.ui.comp.personalization.ColumnsController", /** @lends sap.ui.comp.personalization.ColumnsController */

	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.columns);
		},
		metadata: {
			properties: {
				/**
				 * @since 1.36.5
				 */
				triggerModelChangeOnColumnInvisible: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},

			/**
			 * Event is raised after columns data has been changed in data model
			 *
			 * @since 1.26.0
			 */
			events: {
				afterColumnsModelDataChange: {}
			}
		}
	});

	ColumnsController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
			oTable.detachColumnMove(this._onColumnMove, this);
			oTable.detachColumnVisibility(this._onColumnVisibility, this);
			oTable.detachColumnResize(this._onColumnResize, this);
			oTable.attachColumnMove(this._onColumnMove, this);
			oTable.attachColumnVisibility(this._onColumnVisibility, this);
			oTable.attachColumnResize(this._onColumnResize, this);
		}

		this._monkeyPatchTable(oTable);

		// TODO: $ investigate this to avoid changing the transientData by e.g. variantChange
		// this._syncTable2TransientModel();
	};

	ColumnsController.prototype.createPersistentStructure = function(aItems) {
		var oPersistentData = BaseController.prototype.createPersistentStructure.apply(this, arguments);
		oPersistentData.columns.fixedColumnCount = 0; // Default value of property 'fixedColumnCount' of sap.ui.table.Table
		return oPersistentData;
	};

	/**
	 * Does a complete JSON snapshot of the current table instance ("original") from the perspective of the columns controller; the JSON snapshot can
	 * later be applied to any table instance to recover all columns related infos of the "original" table
	 *
	 * @returns {objects} JSON objects with meta data from existing table columns
	 */
	ColumnsController.prototype._getTable2Json = function() {
		return this._mapTable2Json(this.getTable());
	};

	ColumnsController.prototype._getDataSuiteFormat2Json = function(oDataSuiteFormat) {
		return this._mapDataSuiteFormat2Json(oDataSuiteFormat);
	};

	ColumnsController.prototype._mapTable2Json = function(oTable) {
		var oJsonData = this.createPersistentStructure();
		if (!oTable) {
			return oJsonData;
		}
		var oColumnKey2ColumnMap = this.getColumnMap(true);
		var iIndex = 0;
		oTable.getColumns().forEach(function(oColumn) {
			var sColumnKey = Util.getColumnKey(oColumn);
			if (!oColumnKey2ColumnMap[sColumnKey]) {
				return;
			}
			oJsonData.columns.columnsItems.push({
				columnKey: sColumnKey,
				index: iIndex,
				visible: oColumn.getVisible(),
				width: (oColumn && oColumn.getWidth) ? oColumn.getWidth() : undefined,
				total: (oColumn && oColumn.getSummed) ? oColumn.getSummed() : undefined
			});
			iIndex++;
		});
		return oJsonData;
	};

	/**
	 * Note: 1. If more than one 'LineItem' exists in <code>oDataSuiteFormat</code> the first one will taken over.
	 * 		 2. 'Width' is not supported by Data Suite Format yet
	 * @param {object} oDataSuiteFormat
	 * @returns {object}
	 * @private
	 */
	ColumnsController.prototype._mapDataSuiteFormat2Json = function(oDataSuiteFormat) {
		var oPersistentData = Util.copy(this.getPersistentDataRestore());

		// Take over 'Total'
		if (oDataSuiteFormat.Total && oDataSuiteFormat.Total.length) {
			oDataSuiteFormat.Total.forEach(function(sColumnKey) {
				var oColumnsItem = Util.getArrayElementByKey("columnKey", sColumnKey, oPersistentData.columns.columnsItems);
				if (oColumnsItem) {
					oColumnsItem.total = true;
				}
			});
		}

		// Take over 'Visualizations'
		if (oDataSuiteFormat.Visualizations && oDataSuiteFormat.Visualizations.length) {
			var aLineItemVisualizations = oDataSuiteFormat.Visualizations.filter(function(oVisualization) {
				return oVisualization.Type === "LineItem";
			});
			if (aLineItemVisualizations.length) {
				// Set all columns as not visible first
				oPersistentData.columns.columnsItems.forEach(function(oColumnsItem) {
					oColumnsItem.visible = false;
				});
				// Set now the visible columns
				aLineItemVisualizations[0].Content.forEach(function(oContent, iIndexTo) {
					var oColumnsItem = Util.getArrayElementByKey("columnKey", oContent.Value, oPersistentData.columns.columnsItems);
					if (!oColumnsItem) {
						return;
					}
					oColumnsItem.visible = true;
					var iIndexFrom = Util.getIndexByKey("columnKey", oContent.Value, oPersistentData.columns.columnsItems);
					this._moveModelItems(iIndexFrom, iIndexTo, oPersistentData.columns.columnsItems);
				}, this);
			}
		}
		return oPersistentData;
	};

	ColumnsController.prototype._moveModelItems = function(iIndexFrom, iIndexTo, aItems) {
		if (iIndexFrom < 0 || iIndexTo < 0 || iIndexFrom > aItems.length - 1 || iIndexTo > aItems.length - 1) {
			return;
		}
		// Move items
		var aMItems = aItems.splice(iIndexFrom, 1);
		aItems.splice(iIndexTo, 0, aMItems[0]);

		// Re-Index the persistentIndex and tableIndex
		aItems.forEach(function(oMItem, iIndex) {
			oMItem.index = iIndex;
		});
	};

	/**
	 * The restore structure is build based on <code>aColumnKeys</code> which contains all possible column keys. For those columns which are
	 * currently not part of table only 'columnKey' and 'index' come from column.
	 *
	 * @param {array} aColumnKeys Contains column key of all possible column
	 * @returns {objects} JSON objects with meta data from existing table columns
	 */
	ColumnsController.prototype._getTable2JsonRestore = function(aColumnKeys) {
		if (!aColumnKeys) {
			return BaseController.prototype._getTable2JsonRestore.apply(this, arguments);
		}
		var oJsonData = this.createPersistentStructure();
		var aIgnoreColumnKeys = this.getIgnoreColumnKeys();
		var oColumnKey2ColumnMap = this.getColumnMap();

		var iIndex = 0;
		aColumnKeys.forEach(function(sColumnKey) {
			if (aIgnoreColumnKeys.indexOf(sColumnKey) > -1) {
				return;
			}
			var oColumn = oColumnKey2ColumnMap[sColumnKey];
			oJsonData.columns.columnsItems.push({
				columnKey: sColumnKey,
				index: iIndex,
				visible: oColumn ? oColumn.getVisible() : false,
				width: oColumn ? oColumn.getWidth() : undefined,
				total: (oColumn && oColumn.getSummed) ? oColumn.getSummed() : undefined
			});
			iIndex++;
		});
		return oJsonData;
	};

	ColumnsController.prototype.syncTable2TransientModel = function() {
		// this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.columns.items = jQuery.extend(true, [],
		// this._aInitialTransientItems);
		// TODO: see ($)
		this._syncTable2TransientModel();
	};

	ColumnsController.prototype._determineTooltipText = function(oObject) {
		var sTooltip = null;

		if (oObject && oObject.getTooltip) {

			// first check whether actual object is extended by TooltipBase
			if (oObject.getTooltip() instanceof sap.ui.core.TooltipBase) {
				sTooltip = oObject.getTooltip().getTooltip_Text();
			} else {
				sTooltip = oObject.getTooltip_Text();
			}

			// If no tooltip exist now -> check whether oObject is of type analyticalColumn -> that have it's own way to get the tooltip via binding
			if (!sTooltip && oObject instanceof sap.ui.table.AnalyticalColumn) {
				sTooltip = oObject.getTooltip_AsString();
			}

			// for all other try to get tooltip from assigned label
			if (!sTooltip && oObject.getLabel && oObject.getLabel().getTooltip_Text) {
				sTooltip = oObject.getLabel().getTooltip_Text();
			}
		}

		return sTooltip;
	};

	ColumnsController.prototype._syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];
		var sColumnKey;
		var oColumn;

		if (oTable) {
			var oColumnKey2ColumnMap = this.getColumnMap(true);
			if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
				for (sColumnKey in oColumnKey2ColumnMap) {
					oColumn = oColumnKey2ColumnMap[sColumnKey];
					var sTooltip = this._determineTooltipText(oColumn);
					aItems.push({
						columnKey: sColumnKey,
						text: oColumn.getLabel().getText(),
						tooltip: sTooltip,
						visible: oColumn.getVisible(),
						width: oColumn.getWidth(),
						total: (oColumn && oColumn.getSummed) ? oColumn.getSummed() : undefined
					});
				}
			} else {
				if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.ResponsiveTable) {
					for (sColumnKey in oColumnKey2ColumnMap) {
						oColumn = oColumnKey2ColumnMap[sColumnKey];
						aItems.push({
							columnKey: sColumnKey,
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text(),
							visible: oColumn.getVisible(),
							width: oColumn.getWidth()
						});
					}
				}
			}
		}

		// check if Items was changed at all and take over if it was changed
		var aItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.columns.items;
		if (jQuery(aItems).not(aItemsBefore).length !== 0 || jQuery(aItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.columns.items = aItems;
		}

		// TODO: see ($)
		// this._aInitialTransientItems = jQuery.extend(true, [],
		// this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.columns.items);
	};

	/**
	 * Set index into existing columnsItem. If it does not exist create new columnsItem with new index
	 *
	 * @param {object} oData is the JSON based model data wherein the index shall be manipulated
	 * @param {object} oColumn is the table column
	 * @param {int} iNewIndex is the index value that shall be set
	 * @private
	 */
	ColumnsController.prototype._setNewColumnItemIndex = function(oData, oColumn, iNewIndex) {
		var iColumnsItemIndex = -1;

		if (oColumn && iNewIndex !== null && iNewIndex !== undefined && iNewIndex > -1) {
			iColumnsItemIndex = Util.getIndexByKey("columnKey", Util.getColumnKey(oColumn), oData.persistentData.columns.columnsItems);
			if (iColumnsItemIndex > -1) {
				oData.persistentData.columns.columnsItems[iColumnsItemIndex].index = iNewIndex;
			} else {
				oData.persistentData.columns.columnsItems.push({
					columnKey: Util.getColumnKey(oColumn),
					index: iNewIndex
				});
			}
		}
	};

	/**
	 * Callback method for table event: ColumnMove
	 *
	 * @param {object} oEvent that contains all information about that column move
	 * @private
	 */
	ColumnsController.prototype._onColumnMove = function(oEvent) {

		var i = 0, iNewIndex = null, oTempColumn = null;
		var oTable = null, oData = null, oColumn = null;
		var iNewColumnIndex = null, iOldColumnIndex = null;

		// get new columns information, like new index and the columns that was moved
		oColumn = oEvent.getParameter("column");
		iNewColumnIndex = oEvent.getParameter("newPos");

		this.fireBeforePotentialTableChange();

		// calculate "old" columns information
		if (oColumn) {
			oTable = this.getTable();
			iOldColumnIndex = oTable.indexOfColumn(oColumn);
		}

		// change index property in model data of columnsItems
		if (iOldColumnIndex !== null && iNewColumnIndex !== null) {
			oData = this.getModel("$sapuicomppersonalizationBaseController").getData();

			if (iOldColumnIndex > iNewColumnIndex) {
				for (i = iNewColumnIndex; i <= iOldColumnIndex; i++) {
					if (i < iOldColumnIndex) {
						oTempColumn = oTable.getColumns()[i];
						iNewIndex = i + 1;
					} else {
						oTempColumn = oColumn;
						iNewIndex = oEvent.getParameter("newPos");
					}
					this._setNewColumnItemIndex(oData, oTempColumn, iNewIndex);
				}
			} else {
				for (i = iOldColumnIndex; i <= iNewColumnIndex; i++) {
					if (i === iOldColumnIndex) {
						oTempColumn = oColumn;
						iNewIndex = oEvent.getParameter("newPos");
					} else {
						oTempColumn = oTable.getColumns()[i];
						iNewIndex = i - 1;
					}
					this._setNewColumnItemIndex(oData, oTempColumn, iNewIndex);
				}
			}

			this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);

			this.fireAfterPotentialTableChange();

			this.fireAfterColumnsModelDataChange();
		}
	};

	/**
	 * Callback method for table event: ColumnVisibility
	 *
	 * @param {object} oEvent that contains all information about that column visibility
	 * @private
	 */
	ColumnsController.prototype._onColumnVisibility = function(oEvent) {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		var oColumn = oEvent.getParameter("column");
		var bVisible = oEvent.getParameter("newVisible");

		this.fireBeforePotentialTableChange();

		var iIndex = Util.getIndexByKey("columnKey", Util.getColumnKey(oColumn), oData.persistentData.columns.columnsItems);
		if (iIndex > -1) {
			oData.persistentData.columns.columnsItems[iIndex].visible = bVisible;
		} else {
			oData.persistentData.columns.columnsItems.push({
				columnKey: Util.getColumnKey(oColumn),
				visible: bVisible
			});
		}
		this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);

		this.fireAfterPotentialTableChange();

		this.fireAfterColumnsModelDataChange();
	};

	ColumnsController.prototype._onColumnTotal = function(oParams) {
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		var oColumn = oParams.column;
		var bIsSummed = oParams.isSummed;

		this.fireBeforePotentialTableChange();

		var iIndex = Util.getIndexByKey("columnKey", Util.getColumnKey(oColumn), oData.persistentData.columns.columnsItems);
		if (iIndex > -1) {
			oData.persistentData.columns.columnsItems[iIndex].total = bIsSummed;
		} else {
			oData.persistentData.columns.columnsItems.push({
				columnKey: Util.getColumnKey(oColumn),
				total: bIsSummed
			});
		}
		this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);

		this.fireAfterPotentialTableChange();

		this.fireAfterColumnsModelDataChange();
	};

	ColumnsController.prototype._onColumnFixedCount = function(iFixedColumnCount) {
		this.fireBeforePotentialTableChange();

		this.getModel("$sapuicomppersonalizationBaseController").setProperty("/persistentData/columns/fixedColumnCount", iFixedColumnCount);

		this.fireAfterPotentialTableChange();

		this.fireAfterColumnsModelDataChange();
	};

	ColumnsController.prototype._onColumnResize = function(oEvent) {
		var oColumn = oEvent.getParameter("column");
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();

		this.fireBeforePotentialTableChange();

		var iIndex = Util.getIndexByKey("columnKey", Util.getColumnKey(oColumn), oData.persistentData.columns.columnsItems);
		if (iIndex > -1) {
			oData.persistentData.columns.columnsItems[iIndex].width = oEvent.getParameter("width");
		} else {
			oData.persistentData.columns.columnsItems.push({
				columnKey: Util.getColumnKey(oColumn),
				width: oEvent.getParameter("width")
			});
		}
		this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);

		this.fireAfterPotentialTableChange();

		this.fireAfterColumnsModelDataChange();
	};

	/**
	 * Returns a ColumnsPanel control
	 *
	 * @returns {sap.m.P13nColumnsPanel} returns a new created ColumnsPanel
	 */
	ColumnsController.prototype.getPanel = function(oPayload) {

		sap.ui.getCore().loadLibrary("sap.m");
		jQuery.sap.require("sap/m/P13nColumnsPanel");
		jQuery.sap.require("sap/m/P13nItem");
		jQuery.sap.require("sap/m/P13nColumnsItem");

		var that = this;
		var iVisibleItemsThreshold = -1;
		if (oPayload && oPayload.visibleItemsThreshold) {
			iVisibleItemsThreshold = oPayload.visibleItemsThreshold;
		}
		var oPanel = new sap.m.P13nColumnsPanel({
			visibleItemsThreshold: iVisibleItemsThreshold,
			items: {
				path: '$sapmP13nPanel>/transientData/columns/items',
				template: new sap.m.P13nItem({
					columnKey: '{$sapmP13nPanel>columnKey}',
					text: '{$sapmP13nPanel>text}',
					visible: '{$sapmP13nPanel>visible}',
					tooltip: '{$sapmP13nPanel>tooltip}',
					width: "{$sapmP13nPanel>width}"
				})
			},
			columnsItems: {
				path: "$sapmP13nPanel>/persistentData/columns/columnsItems",
				template: new sap.m.P13nColumnsItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					index: "{$sapmP13nPanel>index}",
					visible: "{$sapmP13nPanel>visible}",
					width: "{$sapmP13nPanel>width}",
					total: "{$sapmP13nPanel>total}"
				})
			},
			beforeNavigationTo: this.setModelFunction(),
			changeColumnsItems: function(oEvent) {
				var aMColumnsItems = [];
				if (oEvent.getParameter("items")) {
					oEvent.getParameter("items").forEach(function(oMItem) {
						aMColumnsItems.push({
							columnKey: oMItem.columnKey,
							index: oMItem.index === -1 ? undefined : oMItem.index, // due to backwards compatibility
							visible: oMItem.visible,
							width: oMItem.width,
							total: oMItem.total
						});
					});
					that.getModel("$sapuicomppersonalizationBaseController").setProperty("/persistentData/columns/columnsItems", aMColumnsItems);
				}
			}
		});
		return oPanel;
	};

	ColumnsController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var aItems = oJsonModel.columns.columnsItems;

		this.fireBeforePotentialTableChange();

		if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
			this._applyChangesToUiTableType(oTable, aItems);
		} else if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.ResponsiveTable) {
			this._applyChangesToMTableType(oTable, aItems);
		}

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Note: Attribute <code>index</code> can be undefined.
	 */
	ColumnsController.prototype._sortByIndex = function(a, b) {
		if (a.index !== undefined && b.index === undefined) {
			return -1;
		}
		if (b.index !== undefined && a.index === undefined) {
			return 1;
		}
		if (a.index < b.index) {
			return -1;
		}
		if (a.index > b.index) {
			return 1;
		}
		return 0;
	};

	/**
	 * Applies changes to a table of type UI table
	 *
	 * @param {object} oTable is the table where all personalization changes shall be allied to
	 * @param {array} aColumnsItems is an array with changes that shall be applied to oTable
	 */
	ColumnsController.prototype._applyChangesToUiTableType = function(oTable, aColumnsItems) {
		var oColumn = null;
		var oColumnsItemsMap = {};
		var iFixedColumnCountPersistent = this.getModel("$sapuicomppersonalizationBaseController").getProperty("/persistentData/columns/fixedColumnCount");
		// var iFixedColumnCount = oTable.getFixedColumnCount();
		// var iFixedColumnIndex = iFixedColumnCount === 0 ? iFixedColumnCount : iFixedColumnCount - 1;
		var that = this;

		var fSetOrderArray = function(aColumnsItems_, aColumnKeys) {
			var aResult = [];
			// organize columnsItems by it's index to apply them in the right order
			aColumnsItems_.sort(that._sortByIndex);

			aColumnsItems_.forEach(function(oColumnsItem) {
				aResult.push(oColumnsItem.columnKey);
				oColumnsItemsMap[oColumnsItem.columnKey] = oColumnsItem;
			});

			aColumnKeys.forEach(function(sColumnKey, iIndex) {
				if (aResult.indexOf(sColumnKey) < 0) {
					aResult.splice(iIndex, 0, sColumnKey);
				}
			});
			return aResult;
		};

		var fSetVisibility = function(sColumnKey, oColumn) {
			// Apply column visibility
			var oColumnsItem = oColumnsItemsMap[sColumnKey];
			if (oColumnsItem && oColumnsItem.visible !== undefined && oColumn.getVisible() !== oColumnsItem.visible) {
				// TODO: was ist mit Binding, wenn das "Visible" Property im XML view gebunden ist?
				// In dem Beispiel von Markus K. wird die Spalte "Document Number" nicht auf Invisible gesetzt.
				oColumn.setVisible(oColumnsItem.visible, true);
			}
		};

		var bInitializeFixedColumnCount = false;
		var fSetOrder = function(iIndex, sColumnKey, oColumn) {
			// Apply column order
			var iTableColumnIndex = oTable.indexOfColumn(oColumn); // -1
			var iModelColumnIndex = iIndex;
			if (iModelColumnIndex !== undefined && iTableColumnIndex !== iModelColumnIndex) {

				if (iTableColumnIndex > -1) {
					// column exists
					oTable.removeColumn(oColumn, true);
				}
				oTable.insertColumn(oColumn, iModelColumnIndex, true);

				// TODO: we would like to avoid "removeColumn" completely, however, only doing an insert produces incorrect result (in certain cases)
				// - problem in
				// Analytical Table ?
				// if (iTableColumnIndex > -1) {
				// // so column is already existing in table
				// if (iTableColumnIndex < iModelColumnIndex) {
				// // it was to the left of its new position
				// iModelColumnIndex++;
				// }
				// }

				// // Remove "freeze" if a column was moved from the frozen zone out or column was moved inside of frozen zone.
				// // Allowed is only column move outside of frozen zone.
				// if (!(iTableColumnIndex > iFixedColumnIndex && iModelColumnIndex > iFixedColumnIndex)) {
				// 	// oTable.setFixedColumnCount(0, true);
				// 	bInitializeFixedColumnCount = true;
				// }
			}
		};

		var fSetWidth = function(sColumnKey, oColumn) {
			// Apply column width
			var oColumnsItem = oColumnsItemsMap[sColumnKey];
			if (oColumnsItem && oColumnsItem.width !== undefined && oColumn.getWidth() !== oColumnsItem.width) {
				oColumn.setWidth(oColumnsItem.width, true);
			}
		};

		var fSetTotal = function(sColumnKey, oColumn) {
			// Apply column summed
			var oColumnsItem = oColumnsItemsMap[sColumnKey];
			if (oColumnsItem && oColumnsItem.total !== undefined && oColumn.getSummed && oColumn.getSummed() !== oColumnsItem.total) {
				oColumn.setSummed(oColumnsItem.total, true);
			}
		};

		var fSetFixedColumnCount = function(oTable) {
			// Apply table fixedColumnCount
			if (bInitializeFixedColumnCount) {
				oTable.setFixedColumnCount(0, true);
			} else if (iFixedColumnCountPersistent !== oTable.getFixedColumnCount()) {
				oTable.setFixedColumnCount(iFixedColumnCountPersistent, true);
			}
		};

		if (aColumnsItems.length) {
			// apply columnsItems
			var aColumnsItemsArray = fSetOrderArray(aColumnsItems, this._aColumnKeys);
			var oColumnKey2ColumnMap = this.getColumnMap();
			aColumnsItemsArray.forEach(function(sColumnKey, iIndex) {
				oColumn = oColumnKey2ColumnMap[sColumnKey];
				if (oColumn) {
					fSetVisibility(sColumnKey, oColumn);
					fSetOrder(iIndex, sColumnKey, oColumn);
					fSetWidth(sColumnKey, oColumn);
					fSetTotal(sColumnKey, oColumn);
				}
			});
			fSetFixedColumnCount(oTable);
		}
	};

	/**
	 * Applies changes to a table of type M table
	 *
	 * @param {object} oTable is the table where all personalization changes shall be allied to
	 * @param {array} aColumnsItems is an array with changes that shall be applied to oTable
	 */
	ColumnsController.prototype._applyChangesToMTableType = function(oTable, aColumnsItems) {
		var bTableInvalidateNeeded = false;
		var oColumnKey2ColumnMap = this.getColumnMap();

		var fSetOrder = function(oColumnsItem, oColumn) {
			// Apply column order
			var iModelColumnIndex = oColumnsItem.index;
			if (iModelColumnIndex !== undefined) {
				oColumn.setOrder(iModelColumnIndex, true);
				bTableInvalidateNeeded = true;
			}
		};

		var fSetVisibility = function(oColumnsItem, oColumn) {
			// Apply column visibility
			if (oColumnsItem.visible !== undefined && oColumn.getVisible() !== oColumnsItem.visible) {
				oColumn.setVisible(oColumnsItem.visible, true);
				bTableInvalidateNeeded = true;
			}
		};

		// organize columnsItems by it's index to apply them in the right order
		if (aColumnsItems.length) {
			aColumnsItems.sort(function(a, b) {
				if (a.index < b.index) {
					return -1;
				}
				if (a.index > b.index) {
					return 1;
				}
				return 0;
			});

			// apply columnsItems
			aColumnsItems.forEach(function(oColumnsItem) {
				var oColumn = oColumnKey2ColumnMap[oColumnsItem.columnKey];
				if (oColumn) {
					fSetOrder(oColumnsItem, oColumn);
					fSetVisibility(oColumnsItem, oColumn);
				}
			}, this);
		}
		// TODO: Check why table rerendering is needed for m.table when column is moved; change of visibility works fine
		if (bTableInvalidateNeeded) {
			oTable.invalidate();
		}
	};

	/**
	 * Operations on columns are processed every time directly at the table. In case that something has been changed via Personalization Dialog or via
	 * user interaction at table, change is applied to the table.
	 *
	 * @param {object} oPersistentDataBase (new) JSON object
	 * @param {object} oPersistentDataCompare (old) JSON object
	 * @returns {object} that represents the change type, like: Unchanged || TableChanged || ModelChanged
	 */
	ColumnsController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		var oChangeData = this.getChangeData(oPersistentDataBase, oPersistentDataCompare);
		// analytical table needs to re-read data from backend even in case a column was made invisible !
		var bNeedModelChange = Util.getTableType(this.getTable()) === sap.ui.comp.personalization.TableType.AnalyticalTable || this.getTriggerModelChangeOnColumnInvisible();
		if (oChangeData) {
			var oChangeType = sap.ui.comp.personalization.ChangeType.TableChanged;
			oChangeData.columns.columnsItems.some(function(oItem) {
				if (oItem.visible || (oItem.visible === false && bNeedModelChange)) {
					oChangeType = sap.ui.comp.personalization.ChangeType.ModelChanged;
					return true;
				}
				if (oItem.total === false || oItem.total === true) {
					oChangeType = sap.ui.comp.personalization.ChangeType.ModelChanged;
					return true;
				}
			});
			return oChangeType;
		}
		return sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * Result is XOR based difference = oPersistentDataBase - oPersistentDataCompare (new - old)
	 *
	 * @param {object} oPersistentDataBase (new) JSON object which represents the current model state (Restore+PersistentData)
	 * @param {object} oPersistentDataCompare (old) JSON object which represents AlreadyKnown || Restore
	 * @returns {object} JSON object or null
	 */
	ColumnsController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
		// not valid
		if (!oPersistentDataCompare || !oPersistentDataCompare.columns || !oPersistentDataCompare.columns.columnsItems) {
			return null;
		}

		var oChangeData = {
			columns: Util.copy(oPersistentDataBase.columns)
		};

		// If no changes inside of columns.columnsItems array, return null.
		// Note: the order inside of columns.columnsItems array is irrelevant.
		var bIsEqual = true;
		bIsEqual = (oPersistentDataBase.columns.fixedColumnCount === oPersistentDataCompare.columns.fixedColumnCount);
		oPersistentDataBase.columns.columnsItems.some(function(oItem) {
			var oItemCompare = Util.getArrayElementByKey("columnKey", oItem.columnKey, oPersistentDataCompare.columns.columnsItems);
			if (!Util.semanticEqual(oItem, oItemCompare)) {
				// Leave forEach() as there are different items
				bIsEqual = false;
				return true;
			}
		});
		if (bIsEqual) {
			return null;
		}

		// If same items are different then delete equal properties and return the rest of item
		var aToBeDeleted = [];
		oChangeData.columns.columnsItems.forEach(function(oItem, iIndex) {
			var oItemCompare = Util.getArrayElementByKey("columnKey", oItem.columnKey, oPersistentDataCompare.columns.columnsItems);
			if (Util.semanticEqual(oItem, oItemCompare)) {
				// Condenser: remove items which are not changed in a chain
				aToBeDeleted.push(oItem);
				return;
			}
			for ( var property in oItem) {
				if (property === "columnKey" || !oItemCompare) {
					if (oItemCompare && oItemCompare[property] === undefined) {
						delete oItem[property];
					} else {
						continue;
					}
				}
				if (oItem[property] === oItemCompare[property]) {
					delete oItem[property];
				}
			}
			if (Object.keys(oItem).length < 2) {
				aToBeDeleted.push(oItem);
			}
		});
		aToBeDeleted.forEach(function(oItem) {
			var iIndex = Util.getIndexByKey("columnKey", oItem.columnKey, oChangeData.columns.columnsItems);
			oChangeData.columns.columnsItems.splice(iIndex, 1);
		});

		return oChangeData;
	};

	/**
	 * This method sorts a given ARRAY by a well defined property name of it's included objects. If it is required the array will be copied before.
	 *
	 * @param {array} aArrayToBeSorted is the array that shall be sorted by the given property
	 * @param {string} sPropertyName is the property name that shall be taken as sorting criteria
	 * @param {Boolean} bTakeACopy is optional and desides whether the given arry shall be copied before its content will be sorted
	 * @returns {object[]} aSortedArray is the sorted array
	 */
	ColumnsController.prototype._sortArrayByPropertyName = function(aArrayToBeSorted, sPropertyName, bTakeACopy) {
		var aSortedArray = [];

		if (bTakeACopy === null || bTakeACopy === undefined) {
			bTakeACopy = false;
		}

		if (aArrayToBeSorted && aArrayToBeSorted.length > 0 && sPropertyName !== undefined && sPropertyName !== null && sPropertyName !== "") {

			if (bTakeACopy) {
				aSortedArray = jQuery.extend(true, [], aArrayToBeSorted);
			} else {
				aSortedArray = aArrayToBeSorted;
			}

			aSortedArray.sort(function(a, b) {
				var propertyA = a[sPropertyName];
				var propertyB = b[sPropertyName];
				if (propertyA < propertyB || (propertyA !== undefined && propertyB === undefined)) {
					return -1;
				}
				if (propertyA > propertyB || (propertyA === undefined && propertyB !== undefined)) {
					return 1;
				}
				return 0;
			});
		}
		return aSortedArray;
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added. E.g. Restore
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. E.g. CurrentVariant ||
	 *        PersistentData
	 * @returns {object} new JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	ColumnsController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
		var oPersistentDataBaseCopy = Util.copy(oPersistentDataBase);
		// oPersistentDataCompare is empty -> result = oPersistentDataBaseCopy
		if (!oPersistentDataCompare || !oPersistentDataCompare.columns || !oPersistentDataCompare.columns.columnsItems || (oPersistentDataCompare.columns.columnsItems.length === 0 && oPersistentDataCompare.columns.fixedColumnCount === 0)) {
			return oPersistentDataBaseCopy.columns ? {
				columns: oPersistentDataBaseCopy.columns
			} : null;
		}

		// oPersistentDataBaseCopy is empty -> result = oPersistentDataCompare
		if (!oPersistentDataBaseCopy || !oPersistentDataBaseCopy.columns || !oPersistentDataBaseCopy.columns.columnsItems) {
			return {
				columns: jQuery.extend(true, {}, oPersistentDataCompare.columns)
			};
		}

		var aDeltaColumnsItem = [];

		var oUnion = this.createPersistentStructure();

		oUnion.columns.fixedColumnCount = oPersistentDataBaseCopy.columns.fixedColumnCount;
		// Due to backwards compatibility (e.g. variant does not have 'fixedColumnCount')
		if (oPersistentDataCompare.columns.fixedColumnCount !== undefined) {
			oUnion.columns.fixedColumnCount = oPersistentDataCompare.columns.fixedColumnCount;
		}

		oPersistentDataBaseCopy.columns.columnsItems.forEach(function(oColumnsItemPersistent, iIndex) {
			var oColumnsItemDelta = Util.getArrayElementByKey("columnKey", oColumnsItemPersistent.columnKey, oPersistentDataCompare.columns.columnsItems);

			if (oColumnsItemDelta) {
				if (oColumnsItemDelta.visible !== undefined) {
					oColumnsItemPersistent.visible = oColumnsItemDelta.visible;
				}

				if (oColumnsItemDelta.width !== undefined) {
					oColumnsItemPersistent.width = oColumnsItemDelta.width;
				}

				if (oColumnsItemDelta.total !== undefined) {
					oColumnsItemPersistent.total = oColumnsItemDelta.total;
				}

				if (oColumnsItemDelta.index !== undefined) {
					oColumnsItemPersistent.index = oColumnsItemDelta.index;
					aDeltaColumnsItem.push(oColumnsItemPersistent);
					return;
				}
			}
			oUnion.columns.columnsItems.push(oColumnsItemPersistent);
		});

		if (aDeltaColumnsItem && aDeltaColumnsItem.length > 0) {
			this._sortArrayByPropertyName(aDeltaColumnsItem, "index");
			aDeltaColumnsItem.forEach(function(oDeltaColumnsItem) {
				oUnion.columns.columnsItems.splice(oDeltaColumnsItem.index, 0, oDeltaColumnsItem);
			});
		}

		oUnion.columns.columnsItems.forEach(function(oColumnsItemUnion, iIndex) {
			oColumnsItemUnion.index = iIndex;
		});

		return oUnion;
	};

	/**
	 * Determines whether a specific column is selected or not.
	 *
	 * @param {object} oPayload structure about the current selection coming from panel
	 * @param {string} sColumnKey column key of specific column
	 * @returns {boolean} true if specific column is selected, false if not
	 */
	ColumnsController.prototype.isColumnSelected = function(oPayload, oPersistentData, sColumnKey) {
		if (!oPayload) {
			oPersistentData.columnsItems.some(function(oColumnsItem, iIndex_) {
				if (oColumnsItem.columnKey === sColumnKey && oColumnsItem.visible) {
					iIndex = iIndex_;
					return true;
				}
			});
			return iIndex > -1;
		}

		// oPayload has been passed...
		if (!oPayload.selectedItems) {
			return false;
		}
		var iIndex = Util.getIndexByKey("columnKey", sColumnKey, oPayload.selectedItems);
		return iIndex > -1;
	};

	/**
	 * Creates, if not already exists, property <code>Visualizations</code> in <code>oDataSuiteFormat</code> object if at least one column item exists. Adds an entry for in <code>Visualizations</code> for each visible column of the current PersistentData snapshot.
	 * Additionally creates property <code>Total</code> in <code>oDataSuiteFormat</code> object if at least one column item with 'total=true' exists. The <code>Total</code> contains the current PersistentData snapshot.
	 * <b>Note:</b> the 'Label' property is not filled because it is translated text. For example if person 'A' sends via email the DataSuiteFormat in language 'a' the recipient person 'B' will be see the data in language 'a' instead of 'b'.
	 * @param {object} oDataSuiteFormat Structure of Data Suite Format
	 */
	ColumnsController.prototype.getDataSuiteFormatSnapshot = function(oDataSuiteFormat) {
		var oPersistentDataTotal = this.getUnionData(this.getPersistentDataRestore(), this.getPersistentData());
		if (!oPersistentDataTotal.columns || !oPersistentDataTotal.columns.columnsItems || !oPersistentDataTotal.columns.columnsItems.length) {
			return;
		}

		// Fill 'Total'
		var aColumnsItemsContainingTotal = oPersistentDataTotal.columns.columnsItems.filter(function(oColumnsItem) {
			return !!oColumnsItem.total;
		});
		if (aColumnsItemsContainingTotal.length) {
			oDataSuiteFormat.Total = aColumnsItemsContainingTotal.map(function(oColumnsItem) {
				return oColumnsItem.columnKey;
			});
		}

		// Fill 'Visualizations'
		// Filter all visible columnsItems and sort them by 'index'
		var aColumnsItemsVisible = oPersistentDataTotal.columns.columnsItems.filter(function(oColumnsItem) {
			return !!oColumnsItem.visible;
		});
		if (aColumnsItemsVisible.length) {
			if (!oDataSuiteFormat.Visualizations) {
				oDataSuiteFormat.Visualizations = [];
			}
			aColumnsItemsVisible.sort(this._sortByIndex);

			oDataSuiteFormat.Visualizations.push({
				Type: "LineItem",
				Content: aColumnsItemsVisible.map(function(oColumnsItem) {
					return {
						Value: oColumnsItem.columnKey,
						Label: undefined
					};
				})
			});
		}
	};

	ColumnsController.prototype._monkeyPatchTable = function(oTable) {
		if (Util.getTableBaseType(oTable) !== sap.ui.comp.personalization.TableType.Table) {
			return;
		}

		var that = this;
		var fSetFixedColumnCountOrigin = oTable.setFixedColumnCount.bind(oTable);
		var fSetFixedColumnCountOverwritten = function(iFixedColumnCount, bSuppressInvalidate) {
			that._onColumnFixedCount(iFixedColumnCount);
			fSetFixedColumnCountOrigin(iFixedColumnCount, bSuppressInvalidate);
		};
		if (oTable.setFixedColumnCount.toString() === fSetFixedColumnCountOverwritten.toString()) {
			// Do nothing if due to recursion the method is already overwritten.
			return;
		}
		oTable.setFixedColumnCount = fSetFixedColumnCountOverwritten;
	};

	/**
	 * Cleans up before destruction.
	 *
	 * @private
	 */
	ColumnsController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
			oTable.detachColumnMove(this._onColumnMove, this);
			oTable.detachColumnVisibility(this._onColumnVisibility, this);
			oTable.detachColumnResize(this._onColumnResize, this);
		}
	};

	/* eslint-enable strict */

	return ColumnsController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/ColumnsController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.DimeasureController') ) {
/* eslint-disable strict */

/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides DimeasureController
jQuery.sap.declare('sap.ui.comp.personalization.DimeasureController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/DimeasureController",[
	'jquery.sap.global', './BaseController', 'sap/m/library', 'sap/ui/comp/library', './ChartWrapper', './Util'
], function(jQuery, BaseController, MLibrary, CompLibrary, ChartWrapper, Util) {
	"use strict";

	/**
	 * The DimeasureController can be used to...
	 *
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP SE
	 * @version 1.50.6
	 * @private
	 * @since 1.34.0
	 * @alias sap.ui.comp.DimeasureController
	 */
	var DimeasureController = BaseController.extend("sap.ui.comp.personalization.DimeasureController", /** @lends sap.ui.comp.personalization.DimeasureController */

	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.dimeasure);
		},
		metadata: {
			events: {
				afterDimeasureModelDataChange: {}
			}
		}
	});

	DimeasureController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (Util.getTableType(oTable) !== sap.ui.comp.personalization.TableType.ChartWrapper) {
			throw "The provided object is incorrect. 'oTable' has to be an instance of sap.ui.comp.personalization.ChartWrapper. ";
		}

		var oChart = oTable.getChartObject();
		oChart.detachDrilledDown(this._onDrilledDown, this);
		oChart.attachDrilledDown(this._onDrilledDown, this);
		oChart.detachDrilledUp(this._onDrilledUp, this);
		oChart.attachDrilledUp(this._onDrilledUp, this);

		var that = this;
		var fSetChartTypeOrigin = oChart.setChartType.bind(oChart);
		var fSetChartTypeOverwritten = function(sChartType) {
			fSetChartTypeOrigin(sChartType);
			var oModel = that.getModel("$sapuicomppersonalizationBaseController");
			var oData = oModel.getData();
			if (sChartType && sChartType !== oData.persistentData.dimeasure.chartTypeKey) {
				that.fireBeforePotentialTableChange();
				oData.persistentData.dimeasure.chartTypeKey = sChartType;
				that.fireAfterPotentialTableChange();
				that.fireAfterDimeasureModelDataChange();
			}
		};
		if (oChart.setChartType.toString() === fSetChartTypeOverwritten.toString()) {
			// Do nothing if due to recursion the method is already overwritten.
			return;
		}
		oChart.setChartType = fSetChartTypeOverwritten;
	};

	DimeasureController.prototype._onDrilledDown = function(oEvent) {
		this._updateModel(oEvent.getSource());
	};

	DimeasureController.prototype._onDrilledUp = function(oEvent) {
		this._updateModel(oEvent.getSource());
	};

	DimeasureController.prototype._updateModel = function(oChart) {
		var oModel = this.getModel("$sapuicomppersonalizationBaseController");
		var oData = oModel.getData();
		var oColumnKey2ColumnMap = this.getColumnMap();

		this.fireBeforePotentialTableChange();

		// Take over visible dimensions and measures as dimMeasureItems into model
		oData.persistentData.dimeasure.dimeasureItems = [];

		oChart.getVisibleDimensions().forEach(function(sDimensionName) {
			var oColumn = oColumnKey2ColumnMap[sDimensionName];
			oData.persistentData.dimeasure.dimeasureItems.push({
				columnKey: sDimensionName,
				index: oData.persistentData.dimeasure.dimeasureItems.length,
				visible: true,
				role: oColumn.getRole()
			});
		});
		oChart.getVisibleMeasures().forEach(function(sMeasureName) {
			var oColumn = oColumnKey2ColumnMap[sMeasureName];
			oData.persistentData.dimeasure.dimeasureItems.push({
				columnKey: sMeasureName,
				index: oData.persistentData.dimeasure.dimeasureItems.length,
				visible: true,
				role: oColumn.getRole()
			});
		});
		oModel.refresh();

		this.fireAfterPotentialTableChange();

		this.fireAfterDimeasureModelDataChange();
	};

	DimeasureController.prototype.createPersistentStructure = function(aItems) {
		var oPersistentData = BaseController.prototype.createPersistentStructure.apply(this, arguments);
		oPersistentData.dimeasure.chartTypeKey = "";
		return oPersistentData;
	};

	DimeasureController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var oChart = oTable.getChartObject();
		var aDimensionItems = [];
		var aMeasureItems = [];
		var fUpdateSelectedEntities = function(aDimeasureItems, aSelectedEntitiesOld, fSetSelectedEntities, fGetDimeasureByName) {
			var aDimeasureItemsCopy = Util.copy(aDimeasureItems);
			aDimeasureItemsCopy.sort(DimeasureController._sortByIndex);
			var aSelectedEntitiesNew = [];
			aDimeasureItemsCopy.forEach(function(oDimeasureItem) {
				if (oDimeasureItem.visible === true) {
					aSelectedEntitiesNew.push(oDimeasureItem.columnKey);
					var oDimeasure = fGetDimeasureByName(oDimeasureItem.columnKey);
					if (oDimeasure) {
						oDimeasure.setRole(oDimeasureItem.role);
					}
				}
			});
			if (JSON.stringify(aSelectedEntitiesNew) !== JSON.stringify(aSelectedEntitiesOld)) {
				fSetSelectedEntities(aSelectedEntitiesNew);
			}
		};

		// Apply changes to the Chart
		this.fireBeforePotentialTableChange();

		Util.splitDimeasures(oJsonModel.dimeasure.dimeasureItems, this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.dimeasure.items, aDimensionItems, aMeasureItems);

		var aVisibleDimensions = oChart.getVisibleDimensions();
		fUpdateSelectedEntities(aDimensionItems, aVisibleDimensions, oChart.setVisibleDimensions.bind(oChart), oChart.getDimensionByName.bind(oChart));
		var aVisibleMeasures = oChart.getVisibleMeasures();
		fUpdateSelectedEntities(aMeasureItems, aVisibleMeasures, oChart.setVisibleMeasures.bind(oChart), oChart.getMeasureByName.bind(oChart));

		oChart.setChartType(oJsonModel.dimeasure.chartTypeKey);

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Does a complete JSON snapshot of the current table instance ("original") from the perspective of the columns controller; the JSON snapshot can
	 * later be applied to any table instance to recover all columns related infos of the "original" table
	 *
	 * @returns {objects} JSON objects with meta data from existing table columns
	 */
	DimeasureController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		this._addPersistentData(this._mapTable2Json(this.getTable()), oJsonData);
		return oJsonData;
	};

	DimeasureController.prototype._getDataSuiteFormat2Json = function(oDataSuiteFormat) {
		var oJsonData = this.createPersistentStructure();
		this._addPersistentData(this._mapDataSuiteFormat2Json(oDataSuiteFormat), oJsonData);
		return oJsonData;
	};

	DimeasureController.prototype._addPersistentData = function(oSourceJsonData, oDestinationJsonData) {
		var oColumnKey2ColumnMap = this.getColumnMap(true);
		oDestinationJsonData.dimeasure.chartTypeKey = oSourceJsonData.dimeasure.chartTypeKey;
		oSourceJsonData.dimeasure.dimeasureItems.forEach(function(oSourceItem) {
			if (!oColumnKey2ColumnMap[oSourceItem.columnKey]) {
				return;
			}
			oDestinationJsonData.dimeasure.dimeasureItems.push({
				columnKey: oSourceItem.columnKey,
				index: oSourceItem.index,
				visible: oSourceItem.visible,
				role: oSourceItem.role
			});
		});
	};

	DimeasureController.prototype._mapTable2Json = function(oTable) {
		var oJsonData = this.createPersistentStructure();
		if (!oTable) {
			return oJsonData;
		}
		var oChart = oTable.getChartObject();
		var aVisibleDimensionNames = oChart.getVisibleDimensions();
		var aVisibleMeasureNames = oChart.getVisibleMeasures();
		var oColumnKey2ColumnMap = this.getColumnMap(true);
		var aDimensionItems = aVisibleDimensionNames.filter(function(sDimensionName) {
			return (oColumnKey2ColumnMap[sDimensionName] && (oColumnKey2ColumnMap[sDimensionName].getAggregationRole() === sap.ui.comp.personalization.AggregationRole.Dimension || oColumnKey2ColumnMap[sDimensionName].getAggregationRole() === sap.ui.comp.personalization.AggregationRole.Measure));
		}).map(function(sDimensionName, iIndex) {
			return {
				columnKey: sDimensionName,
				index: iIndex,
				visible: true,
				role: oColumnKey2ColumnMap[sDimensionName].getRole()
			};
		});
		var aMeasureItems = aVisibleMeasureNames.filter(function(sMeasureName) {
			return (oColumnKey2ColumnMap[sMeasureName] && (oColumnKey2ColumnMap[sMeasureName].getAggregationRole() === sap.ui.comp.personalization.AggregationRole.Dimension || oColumnKey2ColumnMap[sMeasureName].getAggregationRole() === sap.ui.comp.personalization.AggregationRole.Measure));
		}).map(function(sMeasureName, iIndex) {
			return {
				columnKey: sMeasureName,
				index: aDimensionItems.length + iIndex,
				visible: true,
				role: oColumnKey2ColumnMap[sMeasureName].getRole()
			};
		});
		oJsonData.dimeasure.chartTypeKey = oChart.getChartType();
		oJsonData.dimeasure.dimeasureItems = aDimensionItems.concat(aMeasureItems);
		return oJsonData;
	};

	/**
	 * <b>Note:</b> 1. If more than one 'Chart' in <code>oDataSuiteFormat</code> exists, the first one is taken over.
	 *  			2. If 'Role' is not provided with <code>oDataSuiteFormat</code> then the default value of property 'role' is taken.
	 * @param {object} oDataSuiteFormat
	 * @returns {Object}
	 * @private
	 */
	DimeasureController.prototype._mapDataSuiteFormat2Json = function(oDataSuiteFormat) {
		var oJsonData = this.createPersistentStructure();
		if (!oDataSuiteFormat.Visualizations || !oDataSuiteFormat.Visualizations.length) {
			return oJsonData;
		}
		var aChartVisualizations = oDataSuiteFormat.Visualizations.filter(function(oVisualization) {
			return oVisualization.Type === "Chart";
		});
		if (!aChartVisualizations.length) {
			return oJsonData;
		}
		var aDimensionItems = [];
		if (aChartVisualizations[0].Content.Dimensions.length && aChartVisualizations[0].Content.DimensionAttributes.length) {
			aDimensionItems = aChartVisualizations[0].Content.Dimensions.map(function(sDimensionName, iIndex) {
				var oDimensionAttribute = Util.getArrayElementByKey("Dimension", sDimensionName, aChartVisualizations[0].Content.DimensionAttributes);
				return {
					columnKey: sDimensionName,
					index: iIndex,
					visible: true,
					role: oDimensionAttribute ? oDimensionAttribute.Role : this._getDefaultValueOfProperty("role", sDimensionName, "Dimension")
				};
			}, this);
		}
		var aMeasureItems = [];
		if (aChartVisualizations[0].Content.Measures.length && aChartVisualizations[0].Content.MeasureAttributes.length) {
			aMeasureItems = aChartVisualizations[0].Content.Measures.map(function(sMeasureName, iIndex) {
				var oMeasureAttribute = Util.getArrayElementByKey("Measure", sMeasureName, aChartVisualizations[0].Content.MeasureAttributes);
				return {
					columnKey: sMeasureName,
					index: aDimensionItems.length + iIndex,
					visible: true,
					role: oMeasureAttribute ? oMeasureAttribute.Role : this._getDefaultValueOfProperty("role", sMeasureName, "Measure")
				};
			}, this);
		}
		oJsonData.dimeasure.dimeasureItems = aDimensionItems.concat(aMeasureItems);
		// Note: if runtime error occurs because sap.chart library has not been loaded (there is dependency to sap.chart inside of sap.ui.comp.odata.ChartMetadata) then the caller of DimeasureController has to load the sap.chart library.
		oJsonData.dimeasure.chartTypeKey = sap.ui.comp.odata.ChartMetadata.getChartType(aChartVisualizations[0].Content.ChartType);
		return oJsonData;
	};

	DimeasureController.prototype._getDefaultValueOfProperty = function(sPropertyName, sColumnKey, sType) {
		var oTable = this.getTable();
		if (oTable && sType === "Dimension") {
			return oTable.getChartObject().getDimensionByName(sColumnKey).getMetadata().getProperty(sPropertyName).getDefaultValue();
		} else if (oTable && sType === "Measure") {
			return oTable.getChartObject().getMeasureByName(sColumnKey).getMetadata().getProperty(sPropertyName).getDefaultValue();
		}
		return undefined;
	};

	/**
	 * The restore structure is build based on <code>aColumnKeys</code> which contains all possible column keys. For those columns which are
	 * currently not part of table only 'columnKey' and 'index' come from column.
	 *
	 * @param {array} aColumnKeys Contains column key of all possible column
	 * @returns {objects} JSON objects with meta data from existing table columns
	 */
	DimeasureController.prototype._getTable2JsonRestore = function(aColumnKeys) {
		if (!aColumnKeys) {
			return BaseController.prototype._getTable2JsonRestore.apply(this, arguments);
		}
		var oJsonData = this.createPersistentStructure();
		var aIgnoreColumnKeys = this.getIgnoreColumnKeys();
		var oColumnKey2ColumnMap = this.getColumnMap();

		var oChart = this.getTable().getChartObject();
		var aVisibleDimensionNames = oChart.getVisibleDimensions();
		var aVisibleMeasureNames = oChart.getVisibleMeasures();

		var iIndex = 0;
		aColumnKeys.forEach(function(sColumnKey) {
			if (aIgnoreColumnKeys.indexOf(sColumnKey) > -1) {
				return;
			}
			if (oColumnKey2ColumnMap[sColumnKey].getAggregationRole() === sap.ui.comp.personalization.AggregationRole.NotDimeasure) {
				return;
			}
			oJsonData.dimeasure.dimeasureItems.push({
				columnKey: sColumnKey,
				index: iIndex,
				visible: aVisibleDimensionNames.indexOf(sColumnKey) > -1 || aVisibleMeasureNames.indexOf(sColumnKey) > -1,
				role: oColumnKey2ColumnMap[sColumnKey].getRole()
			});
			iIndex++;
		});
		oJsonData.dimeasure.chartTypeKey = oChart.getChartType();
		return oJsonData;
	};

	DimeasureController.prototype.syncTable2TransientModel = function() {
		var aItems = [];
		var oTable = this.getTable();
		if (!oTable) {
			return;
		}

		var oColumnKey2ColumnMap = this.getColumnMap(true);
		for ( var sColumnKey in oColumnKey2ColumnMap) {
			var oColumn = oColumnKey2ColumnMap[sColumnKey];
			if (oColumn.getAggregationRole() === sap.ui.comp.personalization.AggregationRole.NotDimeasure) {
				continue;
			}
			aItems.push({
				columnKey: sColumnKey,
				text: oColumn.getLabel(),
				tooltip: oColumn.getTooltip(),
				// visible: oColumn.getSelected(),
				aggregationRole: oColumn.getAggregationRole()
			});
		}

		// check if Items was changed at all and take over if it was changed
		var aItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.dimeasure.items;
		if (jQuery(aItems).not(aItemsBefore).length !== 0 || jQuery(aItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.dimeasure.items = aItems;
		}
	};

	/**
	 * Returns a ColumnsPanel control
	 *
	 * @returns {sap.m.P13nDimMeasurePanel} returns a new created ColumnsPanel
	 */
	DimeasureController.prototype.getPanel = function(oPayload) {

		sap.ui.getCore().loadLibrary("sap.m");
		jQuery.sap.require("sap/m/P13nDimMeasurePanel");
		jQuery.sap.require("sap/m/P13nItem");
		jQuery.sap.require("sap/m/P13nDimMeasureItem");

		var that = this;
		var aAvailableChartTypes = [];
		if (oPayload && oPayload.availableChartTypes) {
			aAvailableChartTypes = oPayload.availableChartTypes;
		}
		var oPanel = new sap.m.P13nDimMeasurePanel({
			availableChartTypes: aAvailableChartTypes,
			chartTypeKey: "{$sapmP13nPanel>/persistentData/dimeasure/chartTypeKey}",
			items: {
				path: '$sapmP13nPanel>/transientData/dimeasure/items',
				template: new sap.m.P13nItem({
					columnKey: '{$sapmP13nPanel>columnKey}',
					text: '{$sapmP13nPanel>text}',
					tooltip: '{$sapmP13nPanel>tooltip}',
					aggregationRole: '{$sapmP13nPanel>aggregationRole}'
				})
			},
			dimMeasureItems: {
				path: "$sapmP13nPanel>/persistentData/dimeasure/dimeasureItems",
				template: new sap.m.P13nDimMeasureItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					index: "{$sapmP13nPanel>index}",
					visible: "{$sapmP13nPanel>visible}",
					role: "{$sapmP13nPanel>role}"
				})
			},
			beforeNavigationTo: that.setModelFunction(),
			changeChartType: function(oEvent) {
				that.getModel("$sapuicomppersonalizationBaseController").setProperty("/persistentData/dimeasure/chartTypeKey", oEvent.getParameter("chartTypeKey"));
			},
			changeDimMeasureItems: function(oEvent) {
				var aMDimeasureItems = [];
				oEvent.getParameter("items").forEach(function(oMItem) {
					aMDimeasureItems.push({
						columnKey: oMItem.columnKey,
						index: oMItem.index,
						visible: oMItem.visible,
						role: oMItem.role
					});
				});
				that.getModel("$sapuicomppersonalizationBaseController").setProperty("/persistentData/dimeasure/dimeasureItems", aMDimeasureItems);
			}
		});
		return oPanel;
	};

	DimeasureController.prototype._isDimMeasureItemEqual = function(oDimMeasureItemA, oDimMeasureItemB) {
		if (!oDimMeasureItemA && !oDimMeasureItemB) {
			return true;
		}
		if (oDimMeasureItemA && !oDimMeasureItemB) {
			if (oDimMeasureItemA.index === -1 && oDimMeasureItemA.visible === false) {
				return true;
			}
			return false;
		}
		if (oDimMeasureItemB && !oDimMeasureItemA) {
			if (oDimMeasureItemB.index === -1 && oDimMeasureItemB.visible === false) {
				return true;
			}
			return false;
		}
		for ( var property in oDimMeasureItemA) {
			if (oDimMeasureItemB[property] === undefined || oDimMeasureItemA[property] !== oDimMeasureItemB[property]) {
				return false;
			}
		}
		return true;
	};

	DimeasureController.prototype._isSemanticEqual = function(oPersistentDataBase, oPersistentData) {
		if (oPersistentDataBase.dimeasure.chartTypeKey !== oPersistentData.dimeasure.chartTypeKey) {
			return false;
		}
		var fSort = function(a, b) {
			if (a.visible === true && (b.visible === false || b.visible === undefined)) {
				return -1;
			} else if ((a.visible === false || a.visible === undefined) && b.visible === true) {
				return 1;
			} else if (a.visible === true && b.visible === true) {
				if (a.index < b.index) {
					return -1;
				} else if (a.index > b.index) {
					return 1;
				} else {
					return 0;
				}
			} else if ((a.visible === false || a.visible === undefined) && (b.visible === false || b.visible === undefined)) {
				if (a.columnKey < b.columnKey) {
					return -1;
				} else if (a.columnKey > b.columnKey) {
					return 1;
				} else {
					return 0;
				}
			}
		};
		var aDimeasureItemsBase = Util.copy(oPersistentDataBase.dimeasure.dimeasureItems).sort(fSort);
		var aDimeasureItems = Util.copy(oPersistentData.dimeasure.dimeasureItems).sort(fSort);
		// if (aDimeasureItems.length !== aDimeasureItemsBase.length) {
		// return false;
		// }
		var bIsEqual = true;
		aDimeasureItemsBase.some(function(oDimeasureItem, iIndex) {
			if (!this._isDimMeasureItemEqual(oDimeasureItem, aDimeasureItems[iIndex])) {
				bIsEqual = false;
				return true;
			}
		}, this);
		return bIsEqual;
	};

	/**
	 * Operations on columns are processed every time directly at the table. In case that something has been changed via Personalization Dialog or via
	 * user interaction at table, change is applied to the table.
	 *
	 * @param {object} oPersistentDataBase (new) JSON object
	 * @param {object} oPersistentDataCompare (old) JSON object
	 * @returns {object} that represents the change type, like: Unchanged || TableChanged || ModelChanged
	 */
	DimeasureController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.dimeasure || !oPersistentDataCompare.dimeasure.dimeasureItems) {
			return sap.ui.comp.personalization.ChangeType.Unchanged;
		}
		return this._isSemanticEqual(oPersistentDataBase, oPersistentDataCompare) ? sap.ui.comp.personalization.ChangeType.Unchanged : sap.ui.comp.personalization.ChangeType.TableChanged;
	};

	/**
	 * Result is XOR based difference = oPersistentDataBase - oPersistentDataCompare (new - old)
	 *
	 * @param {object} oPersistentDataBase (new) JSON object which represents the current model state (Restore+PersistentData)
	 * @param {object} oPersistentDataCompare (old) JSON object which represents AlreadyKnown || Restore
	 * @returns {object} JSON object or null
	 */
	DimeasureController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {

		if (!oPersistentDataBase || !oPersistentDataBase.dimeasure || !oPersistentDataBase.dimeasure.dimeasureItems) {
			return this.createPersistentStructure();
		}

		if (!oPersistentDataCompare || !oPersistentDataCompare.dimeasure || !oPersistentDataCompare.dimeasure.dimeasureItems) {
			return {
				chartTypeKey: oPersistentDataBase.dimeasure.chartTypeKey,
				dimeasure: Util.copy(oPersistentDataBase.dimeasure)
			};
		}
		if (!this._isSemanticEqual(oPersistentDataBase, oPersistentDataCompare)) {
			return {
				chartTypeKey: oPersistentDataBase.dimeasure.chartTypeKey,
				dimeasure: Util.copy(oPersistentDataBase.dimeasure)
			};
		}
		return null;
	};

	/**
	 * @param {object} oDataOld: JSON object to which different properties from oDataNew are added. E.g. Restore
	 * @param {object} oDataNew: JSON object from where the different properties are added to oDataOld. E.g. CurrentVariant || PersistentData
	 * @returns {object} new JSON object as union result of oDataOld and oPersistentDataCompare
	 */
	DimeasureController.prototype.getUnionData = function(oDataOld, oDataNew) {
		if (!oDataNew || !oDataNew.dimeasure || !oDataNew.dimeasure.dimeasureItems) {
			return {
				chartTypeKey: oDataOld.dimeasure.chartTypeKey,
				dimeasure: Util.copy(oDataOld.dimeasure)
			};
		}
		return {
			dimeasure: {
				chartTypeKey: oDataNew.dimeasure.chartTypeKey ? oDataNew.dimeasure.chartTypeKey : oDataOld.dimeasure.chartTypeKey,
				dimeasureItems: Util.copy(oDataNew.dimeasure.dimeasureItems)
			}
		};
	};

	/**
	 * Creates, if not already exists, property <code>Visualizations</code> in <code>oDataSuiteFormat</code> object if at least one dimeasure item exists. Adds an object of the current PersistentData snapshot into <code>Visualizations</code> array.
	 * @param {object} oDataSuiteFormat Structure of Data Suite Format
	 */
	DimeasureController.prototype.getDataSuiteFormatSnapshot = function(oDataSuiteFormat) {
		var oPersistentDataTotal = this.getUnionData(this.getPersistentDataRestore(), this.getPersistentData());
		if (!oPersistentDataTotal.dimeasure || !oPersistentDataTotal.dimeasure.dimeasureItems || !oPersistentDataTotal.dimeasure.dimeasureItems.length) {
			return;
		}

		// Fill 'Visualizations'
		var aDimensionItems = [];
		var aMeasureItems = [];
		var oTransientData = this.getTransientData();
		Util.splitDimeasures(oPersistentDataTotal.dimeasure.dimeasureItems, oTransientData.dimeasure.items, aDimensionItems, aMeasureItems);

		var aDimensionItemsVisible = aDimensionItems.filter(function(oDimensionItem) {
			return !!oDimensionItem.visible;
		});
		var aMeasureItemsVisible = aMeasureItems.filter(function(oMeasureItem) {
			return !!oMeasureItem.visible;
		});
		if (aDimensionItemsVisible.length || aMeasureItemsVisible.length) {
			if (!oDataSuiteFormat.Visualizations) {
				oDataSuiteFormat.Visualizations = [];
			}
			oDataSuiteFormat.Visualizations.push({
				Type: "Chart",
				Content: {
					// Note: if runtime error occurs because sap.chart library has not been loaded (there is dependency to sap.chart inside of sap.ui.comp.odata.ChartMetadata) then the caller of DimeasureController has to load the sap.chart library.
					ChartType: sap.ui.comp.odata.ChartMetadata.getAnnotationChartType(oPersistentDataTotal.dimeasure.chartTypeKey),
					Dimensions: aDimensionItemsVisible.map(function(oDimensionItem) {
						return oDimensionItem.columnKey;
					}),
					DimensionAttributes: aDimensionItemsVisible.map(function(oDimensionItem) {
						return {
							Dimension: oDimensionItem.columnKey,
							Role: oDimensionItem.role
						};
					}),
					Measures: aMeasureItemsVisible.map(function(oMeasureItem) {
						return oMeasureItem.columnKey;
					}),
					MeasureAttributes: aMeasureItemsVisible.map(function(oMeasureItem) {
						return {
							Measure: oMeasureItem.columnKey,
							Role: oMeasureItem.role
						};
					})
				}
			});
		}
	};

	DimeasureController._sortByIndex = function(a, b) {
		if (a.index < b.index) {
			return -1;
		} else if (a.index > b.index) {
			return 1;
		} else {
			return 0;
		}
	};
	/**
	 * Cleans up before destruction.
	 *
	 * @private
	 */
	DimeasureController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (oTable) {
			var oChart = oTable.getChartObject();
			if (oChart) {
				oChart.detachDrilledDown(this._onDrilledDown, this);
				oChart.detachDrilledUp(this._onDrilledUp, this);
			}
		}
	};

	/* eslint-enable strict */

	return DimeasureController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/DimeasureController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.FilterController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides FilterController
jQuery.sap.declare('sap.ui.comp.personalization.FilterController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/FilterController",[
	'jquery.sap.global', './BaseController', 'sap/m/library', './Util', './ChartWrapper', 'sap/ui/comp/filterbar/VariantConverterTo', 'sap/ui/comp/filterbar/VariantConverterFrom'
], function(jQuery, BaseController, library, Util, ChartWrapper, VariantConverterTo, VariantConverterFrom) {
	"use strict";

	/**
	 * The FilterController can be used to...
	 *
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP
	 * @version 1.25.0-SNAPSHOT
	 * @private
	 * @alias sap.ui.comp.personalization.FilterController
	 */
	var FilterController = BaseController.extend("sap.ui.comp.personalization.FilterController",
	/** @lends sap.ui.comp.personalization.FilterController */
	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.filter);
		},
		metadata: {
			events: {
				afterFilterModelDataChange: {}
			}
		}
	});

	FilterController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.ChartWrapper) {
			oTable.detachExternalFiltersSet(this._onExternalFiltersSet, this);
			oTable.attachExternalFiltersSet(this._onExternalFiltersSet, this);
		}
	};

	FilterController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		this._addPersistentData(this._mapTable2Json(this.getTable()), oJsonData);
		return oJsonData;
	};

	FilterController.prototype._getDataSuiteFormat2Json = function(oDataSuiteFormat) {
		var oJsonData = this.createPersistentStructure();
		this._addPersistentData(this._mapDataSuiteFormat2Json(oDataSuiteFormat), oJsonData);
		return oJsonData;
	};

	FilterController.prototype._addPersistentData = function(oSourceJsonData, oDestinationJsonData) {
		var oColumnKey2ColumnMap = this.getColumnMap(true);
		oSourceJsonData.filter.filterItems.forEach(function(oSourceItem) {
			if (!oSourceItem.isFiltered || !oColumnKey2ColumnMap[oSourceItem.columnKey]) {
				return;
			}
			oDestinationJsonData.filter.filterItems.push({
				columnKey: oSourceItem.columnKey,
				exclude: oSourceItem.exclude,
				operation: oSourceItem.operation,
				value1: oSourceItem.value1,
				value2: oSourceItem.value2
			});
		});
	};

	FilterController.prototype._mapTable2Json = function(oTable) {
		var oJsonData = this.createPersistentStructure();
		// This is not complete but the best we can do - problem is that the filter is not extractable from other table instances.
		if (Util.getTableBaseType(oTable) !== sap.ui.comp.personalization.TableType.Table) {
			return oJsonData;
		}
		oJsonData.filter.filterItems = oTable.getColumns().map(function(oColumn) {
			return {
				columnKey: Util.getColumnKey(oColumn),
				isFiltered: oColumn.getFiltered(),
				exclude: false,
				operation: oColumn.getFilterOperator(),
				value1: oColumn.getFilterValue(),
				value2: "" // The Column API does not provide method for 'value2'
			};
		});
		return oJsonData;
	};

	/**
	 * Note: DataSuiteFormat is applied on top of the initial state which is based on metadata. So e.g. several filtered columns can be applied.
	 * If more than one Range exists, the first one will be taken over.
	 * @param {object} oDataSuiteFormat
	 * @returns {object}
	 * @private
	 */
	FilterController.prototype._mapDataSuiteFormat2Json = function(oDataSuiteFormat) {
		var oJsonData = this.createPersistentStructure();
		if (!oDataSuiteFormat.SelectOptions || !oDataSuiteFormat.SelectOptions.length) {
			return oJsonData;
		}
		oJsonData.filter.filterItems = oDataSuiteFormat.SelectOptions.map(function(oSelectOption) {
			var oConvertedOption = VariantConverterFrom.convertOption(oSelectOption.Ranges[0].Option, oSelectOption.Ranges[0].Low);
			return {
				columnKey: oSelectOption.PropertyName,
				isFiltered: true,
				exclude: (oSelectOption.Ranges[0].Sign === "E"),
				operation: oConvertedOption.op,
				value1: oConvertedOption.v,
				value2: oSelectOption.Ranges[0].High
			};
		});
		return oJsonData;
	};

	FilterController.prototype.syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];
		var oColumn;
		var sColumnKey;

		if (oTable) {
			var aBoolean, aValues, oBoolType;

			if (oTable.getModel() instanceof sap.ui.model.odata.ODataModel || oTable.getModel() instanceof sap.ui.model.odata.v2.ODataModel) {
				jQuery.sap.require("sap.ui.model.odata.type.Boolean");
				oBoolType = new sap.ui.model.odata.type.Boolean();
			} else {
				if (oTable.getModel() instanceof sap.ui.model.Model) {
					jQuery.sap.require("sap.ui.model.type.Boolean");
					oBoolType = new sap.ui.model.type.Boolean();
				}
			}

			if (oBoolType) {
				aBoolean = [
					"", oBoolType.formatValue(false, "string"), oBoolType.formatValue(true, "string")
				];
			}
			var oColumnKey2ColumnMap = this.getColumnMap(true);
			if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
				for (sColumnKey in oColumnKey2ColumnMap) {
					oColumn = oColumnKey2ColumnMap[sColumnKey];
					if (Util.isFilterable(oColumn)) {
						if (Util.getColumnType(oColumn) === "boolean") {
							aValues = Util._getCustomProperty(oColumn, "values") || aBoolean;
						}
						aItems.push({
							columnKey: sColumnKey,
							text: oColumn.getLabel().getText(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text(),
							maxLength: Util._getCustomProperty(oColumn, "maxLength"),
							precision: Util._getCustomProperty(oColumn, "precision"),
							scale: Util._getCustomProperty(oColumn, "scale"),
							type: Util.getColumnType(oColumn),
							values: aValues
						});
					}
				}
			} else if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.ResponsiveTable) {
				for (sColumnKey in oColumnKey2ColumnMap) {
					oColumn = oColumnKey2ColumnMap[sColumnKey];
					if (Util.getColumnType(oColumn) === "boolean") {
						aValues = Util._getCustomProperty(oColumn, "values") || aBoolean;
					}
					if (Util.isFilterable(oColumn)) {
						aItems.push({
							columnKey: sColumnKey,
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text(),
							maxLength: Util._getCustomProperty(oColumn, "maxLength"),
							precision: Util._getCustomProperty(oColumn, "precision"),
							scale: Util._getCustomProperty(oColumn, "scale"),
							type: Util.getColumnType(oColumn),
							values: aValues
						});
					}
				}
			} else if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.ChartWrapper) {
				for (sColumnKey in oColumnKey2ColumnMap) {
					oColumn = oColumnKey2ColumnMap[sColumnKey];
					if (Util.isFilterable(oColumn)) {
						aItems.push({
							columnKey: sColumnKey,
							text: oColumn.getLabel(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text(),
							maxLength: Util._getCustomProperty(oColumn, "maxLength"),
							precision: Util._getCustomProperty(oColumn, "precision"),
							scale: Util._getCustomProperty(oColumn, "scale"),
							type: Util.getColumnType(oColumn),
							values: aValues
						});
					}
				}
			}
		}

		Util.sortItemsByText(aItems, "text");

		// check if Items was changed at all and take over if it was changed
		var oItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.filter.items;
		if (jQuery(aItems).not(oItemsBefore).length !== 0 || jQuery(oItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.filter.items = aItems;
		}
	};

	// FilterController.prototype._onFilter = function(oEvent) {
	// // TODO: implement this method. Currently SmartTable does not support filtering directly on the table, only via
	// // personalization dialog
	//
	// // Siehe: sap.ui.table.Column.prototype.filter() und sap.ui.table.Column.prototype._getFilter()
	//
	// // operation: soll Type abhängig sein, z.B. Contains bei String, und Equal bei Number und Boolean...
	// // Was wird in der Spalte erwarten: true oder on?
	// // Wird von Menu her "Between" unterstützt?
	// // Kann man mehrere Werte für ein Column eingeben?
	// // Wenn es in Personalization Dialog mehrere Filter für eine Spalte denifiert sind, was soll in Filter Input field angezeigt werden?
	// // Wo bekommt man den Typen her?
	// // Date soll konvertiert werden...
	//
	// this.fireBeforePotentialTableChange();
	//
	// var oColumn = oEvent.getParameter("column");
	// var sValue = oEvent.getParameter("value");
	// var oFilterData = this.getModel("$sapuicomppersonalizationBaseController").getData().persistentData.filter;
	// var sColumnKey = Util.getColumnKey(oColumn);
	// var i = Util.getIndexByKey("columnKey", sColumnKey, oFilterData.filterItems);
	//
	// if (i > -1) {
	// oFilterData.filterItems.splice(i, 1);
	// }
	// oFilterData.filterItems.push({
	// columnKey: sColumnKey,
	// operation: "Contains",
	// value1: sValue,
	// value2: undefined
	// });
	//
	// this.fireAfterPotentialTableChange();
	//
	// this.fireAfterFilterModelDataChange();
	// };

	FilterController.prototype._onExternalFiltersSet = function(oEvent) {
		var oModel = this.getModel("$sapuicomppersonalizationBaseController");
		var oData = oModel.getData();
		var oColumnKey2ColumnMap = this.getColumnMap(true);

		this.fireBeforePotentialTableChange();

		// Remove all 'chart' specific filters coming outside
		oData.persistentData.filter.filterItems = oData.persistentData.filter.filterItems.filter(function(oFilterItem) {
			return oFilterItem.source !== "chart";
		});

		// Add all 'chart' specific filters
		oEvent.getParameters().filters.forEach(function(oFilterItem) {
			if (oFilterItem && oFilterItem.getColumnKey() && oFilterItem.getOperation()) {
				var oColumn = oColumnKey2ColumnMap[oFilterItem.getColumnKey()];
				if (!oColumn) {
					return;
				}
				var oMFilterItem = {
					columnKey: oFilterItem.getColumnKey(),
					operation: oFilterItem.getOperation(),
					value1: oFilterItem.getValue1(),
					value2: oFilterItem.getValue2(),
					source: "chart"
				};
				if (this._hasSemanticEqual(oMFilterItem, oData.persistentData.filter.filterItems)) {
					return;
				}
				oData.persistentData.filter.filterItems.push(oMFilterItem);
			}
		}, this);
		oModel.refresh();

		this.fireAfterPotentialTableChange();

		this.fireAfterFilterModelDataChange();
	};

	FilterController.prototype._hasSemanticEqual = function(oFilterItem, aFilterItems) {
		if (!oFilterItem || !aFilterItems.length) {
			return false;
		}
		var aEqualFilterItems = aFilterItems.filter(function(oFilterItem_) {
			for ( var property in oFilterItem) {
				if (oFilterItem[property] !== oFilterItem_[property]) {
					return false;
				}
			}
			return true;
		});
		return aEqualFilterItems.length > 0;
	};

	FilterController.prototype.getPanel = function(oPayload) {

		sap.ui.getCore().loadLibrary("sap.m");

		jQuery.sap.require("sap/m/P13nFilterPanel");
		jQuery.sap.require("sap/m/P13nItem");
		jQuery.sap.require("sap/m/P13nFilterItem");

		if (!this.getColumnHelper().hasFilterableColumns()) {
			return null;
		}
		if (oPayload && oPayload.column) {
			var sColumnKey = Util.getColumnKey(oPayload.column);
			if (sColumnKey) {

				var aItems = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.filter.items;

				aItems.forEach(function(oItem) {
					oItem["isDefault"] = oItem.columnKey === sColumnKey;
				});
			}
		}
		var that = this;
		var oPanel = new sap.m.P13nFilterPanel({
			containerQuery: true,
			items: {
				path: "$sapmP13nPanel>/transientData/filter/items",
				template: new sap.m.P13nItem({
					columnKey: '{$sapmP13nPanel>columnKey}',
					text: "{$sapmP13nPanel>text}",
					tooltip: "{$sapmP13nPanel>tooltip}",
					maxLength: "{$sapmP13nPanel>maxLength}",
					precision: "{$sapmP13nPanel>precision}",
					scale: "{$sapmP13nPanel>scale}",
					type: "{$sapmP13nPanel>type}",
					isDefault: "{$sapmP13nPanel>isDefault}",
					values: "{$sapmP13nPanel>values}"
				})
			},
			filterItems: {
				path: "$sapmP13nPanel>/persistentData/filter/filterItems",
				template: new sap.m.P13nFilterItem({
					key: "{$sapmP13nPanel>key}",
					columnKey: "{$sapmP13nPanel>columnKey}",
					exclude: "{$sapmP13nPanel>exclude}",
					operation: "{$sapmP13nPanel>operation}",
					value1: "{$sapmP13nPanel>value1}",
					value2: "{$sapmP13nPanel>value2}"
				})
			},
			beforeNavigationTo: that.setModelFunction()
		});

		var fSuggestCallback = function(oControl, sFieldName) {

			var oColumnKey2ColumnMap = this.getColumnMap(true);
			var oColumn = oColumnKey2ColumnMap[sFieldName];
			var sFullyQualifiedFieldName = Util._getCustomProperty(oColumn, "fullName");

			if (sFullyQualifiedFieldName) {
				jQuery.sap.require("sap.ui.comp.providers.ValueListProvider");
				oControl.setShowSuggestion(true);
				oControl.setFilterSuggests(false);
				oControl.setModel(this.getTable().getModel()); // the control which should show suggest need the model from the table assigned

				return new sap.ui.comp.providers.ValueListProvider({
					control: oControl,
					fieldName: sFieldName,
					typeAheadEnabled: true,
					aggregation: "suggestionRows",
					// displayFormat: this.sDisplayFormat,
					resolveInOutParams: false,
					loadAnnotation: true,
					fullyQualifiedFieldName: sFullyQualifiedFieldName,
					model: this.getTable().getModel(),
					enableShowTableSuggestionValueHelp: false
				});
			}
		}.bind(this);

		oPanel._oIncludeFilterPanel._fSuggestCallback = fSuggestCallback;
		oPanel._oExcludeFilterPanel._fSuggestCallback = fSuggestCallback;

		oPanel.attachAddFilterItem(function(oEvent) {
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			var params = oEvent.getParameters();
			var oFilterItem = {
				columnKey: params.filterItemData.getColumnKey(),
				operation: params.filterItemData.getOperation(),
				exclude: params.filterItemData.getExclude(),
				value1: params.filterItemData.getValue1(),
				value2: params.filterItemData.getValue2()
			};
			if (params.index > -1) {
				oData.persistentData.filter.filterItems.splice(params.index, 0, oFilterItem);
			} else {
				oData.persistentData.filter.filterItems.push(oFilterItem);
			}
			this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
		}, this);

		oPanel.attachRemoveFilterItem(function(oEvent) {
			var params = oEvent.getParameters();
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			if (params.index > -1) {
				oData.persistentData.filter.filterItems.splice(params.index, 1);
				this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
			}
		}, this);

		return oPanel;
	};

	// FilterController.prototype.onBeforeSubmit = function() {
	// };

	FilterController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oColumnKey2ColumnMap = this.getColumnMap();
		var oColumnKey2ColumnMapUnfiltered = jQuery.extend(true, {}, oColumnKey2ColumnMap);

		this.fireBeforePotentialTableChange();

		if (Util.getTableBaseType(this.getTable()) === sap.ui.comp.personalization.TableType.Table) {
			oJsonModel.filter.filterItems.forEach(function(oFilterItem) {
				var oColumn = oColumnKey2ColumnMap[oFilterItem.columnKey];
				if (oColumn) {
					if (!oColumn.getFiltered()) {
						oColumn.setFiltered(true);
					}
					delete oColumnKey2ColumnMapUnfiltered[oFilterItem.columnKey];
				}
			});

			for ( var sColumnKey in oColumnKey2ColumnMapUnfiltered) {
				var oColumn = oColumnKey2ColumnMapUnfiltered[sColumnKey];
				if (oColumn && oColumn.getFiltered()) {
					oColumn.setFiltered(false);
				}
			}
		}

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Operations on filter are processed sometime directly at the table and sometime not. In case that something has been changed via Personalization
	 * Dialog the consumer of the Personalization Dialog has to apply filtering at the table. In case that filter has been changed via user
	 * interaction at table, the change is instantly applied at the table.
	 */
	FilterController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.filter || !oPersistentDataCompare.filter.filterItems) {
			return sap.ui.comp.personalization.ChangeType.Unchanged;
		}

		if (oPersistentDataCompare && oPersistentDataCompare.filter && oPersistentDataCompare.filter.filterItems) {
			oPersistentDataCompare.filter.filterItems.forEach(function(oFilterItem) {
				delete oFilterItem.key;
				delete oFilterItem.source;
			});
		}
		if (oPersistentDataBase && oPersistentDataBase.filter && oPersistentDataBase.filter.filterItems) {
			oPersistentDataBase.filter.filterItems.forEach(function(oFilterItem) {
				delete oFilterItem.key;
				delete oFilterItem.source;
			});
		}
		var bIsDirty = JSON.stringify(oPersistentDataBase.filter.filterItems) !== JSON.stringify(oPersistentDataCompare.filter.filterItems);

		return bIsDirty ? sap.ui.comp.personalization.ChangeType.ModelChanged : sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * Result is XOR based difference = CurrentModelData - oPersistentDataCompare
	 *
	 * @param {object} oPersistentDataCompare JSON object. Note: if sortItems is [] then it means that all sortItems have been deleted
	 * @returns {object} JSON object or null
	 */
	FilterController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataBase || !oPersistentDataBase.filter || !oPersistentDataBase.filter.filterItems) {
			return this.createPersistentStructure();
		}

		if (oPersistentDataCompare && oPersistentDataCompare.filter && oPersistentDataCompare.filter.filterItems) {
			oPersistentDataCompare.filter.filterItems.forEach(function(oFilterItem) {
				delete oFilterItem.key;
				delete oFilterItem.source;
			});
		}
		if (oPersistentDataBase && oPersistentDataBase.filter && oPersistentDataBase.filter.filterItems) {
			oPersistentDataBase.filter.filterItems.forEach(function(oFilterItem) {
				delete oFilterItem.key;
				delete oFilterItem.source;
			});
		}

		if (!oPersistentDataCompare || !oPersistentDataCompare.filter || !oPersistentDataCompare.filter.filterItems) {
			return {
				filter: Util.copy(oPersistentDataBase.filter)
			};
		}

		if (JSON.stringify(oPersistentDataBase.filter.filterItems) !== JSON.stringify(oPersistentDataCompare.filter.filterItems)) {
			return {
				filter: Util.copy(oPersistentDataBase.filter)
			};
		}
		return null;
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if filterItems
	 *        is [] then it means that all filterItems have been deleted
	 * @returns {object} JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	FilterController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataBase || !oPersistentDataBase.filter || !oPersistentDataBase.filter.filterItems) {
			return this.createPersistentStructure();
		}

		if (!oPersistentDataCompare || !oPersistentDataCompare.filter || !oPersistentDataCompare.filter.filterItems) {
			return {
				filter: Util.copy(oPersistentDataBase.filter)
			};
		}

		return {
			filter: Util.copy(oPersistentDataCompare.filter)
		};
	};

	/**
	 * Creates property <code>SelectOptions</code> in <code>oDataSuiteFormat</code> object if at least one filter item exists. The <code>SelectOptions</code> contains the current PersistentData snapshot.
	 * @param {object} oDataSuiteFormat Structure of Data Suite Format
	 */
	FilterController.prototype.getDataSuiteFormatSnapshot = function(oDataSuiteFormat) {
		var oPersistentDataTotal = this.getUnionData(this.getPersistentDataRestore(), this.getPersistentData());
		if (!oPersistentDataTotal.filter || !oPersistentDataTotal.filter.filterItems || !oPersistentDataTotal.filter.filterItems.length) {
			return;
		}
		oPersistentDataTotal.filter.filterItems.forEach(function(oFilterItem) {
			var aRanges = VariantConverterTo.addRangeEntry(oDataSuiteFormat, oFilterItem.columnKey);
			VariantConverterTo.addRanges(aRanges, [
				oFilterItem
			]);
		});
	};

	/**
	 * Cleans up before destruction.
	 *
	 * @private
	 */
	FilterController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.ChartWrapper) {
			oTable.detachExternalFiltersSet(this._onExternalFiltersSet, this);
		}
	};

	return FilterController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/FilterController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.GroupController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides GroupController
jQuery.sap.declare('sap.ui.comp.personalization.GroupController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nConditionPanel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/GroupController",[
	'jquery.sap.global', './BaseController', 'sap/m/library', './Util', 'sap/m/P13nConditionPanel'
], function(jQuery, BaseController, library, Util, P13nConditionPanel /*Needed for Enum sap.m.P13nConditionOperation */) {
	"use strict";

	/**
	 * The GroupController can be used to handle the grouping of the Analytical and sap.m.Table. The grouping of the sap.ui.table.Table is not
	 * supported and the existing coding is only for testing and finding the limitations integrated.
	 *
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP
	 * @version 1.25.0-SNAPSHOT
	 * @private
	 * @alias sap.ui.comp.personalization.GroupController
	 */
	var GroupController = BaseController.extend("sap.ui.comp.personalization.GroupController",
	/** @lends sap.ui.comp.personalization.GroupController */
	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.group);
		},
		metadata: {
			events: {
				afterGroupModelDataChange: {}
			}
		}
	});

	GroupController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
			oTable.detachGroup(this._onGroup, this);
			oTable.attachGroup(this._onGroup, this);
		}
	};

	/**
	 * Does a complete JSON snapshot of the current table instance ("original") from the perspective of the columns controller; the json snapshot can
	 * later be applied to any table instance to recover all columns related infos of the "original" table
	 */
	GroupController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		this._addPersistentData(this._mapTable2Json(this.getTable()), oJsonData);
		return oJsonData;
	};

	/**
	 * Note: the DataSuiteFormate does not support group sort order and 'showIfGrouped'.
	 * @param oDataSuiteFormat
	 * @returns {Object}
	 */
	GroupController.prototype._getDataSuiteFormat2Json = function(oDataSuiteFormat) {
		var oJsonData = this.createPersistentStructure();
		this._addPersistentData(this._mapDataSuiteFormat2Json(oDataSuiteFormat), oJsonData);
		return oJsonData;
	};

	GroupController.prototype._addPersistentData = function(oSourceJsonData, oDestinationJsonData) {
		var oColumnKey2ColumnMap = this.getColumnMap(true);
		oSourceJsonData.group.groupItems.forEach(function(oSourceItem) {
			if (!oSourceItem.isGrouped || !oColumnKey2ColumnMap[oSourceItem.columnKey]) {
				return;
			}
			oDestinationJsonData.group.groupItems.push({
				columnKey: oSourceItem.columnKey,
				operation: oSourceItem.operation,
				showIfGrouped: oSourceItem.showIfGrouped
			});
		});
	};

	GroupController.prototype._mapTable2Json = function(oTable) {
		// Collect grouped columns respectively there orders
		var aColumns = [];
		if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table && oTable.getGroupBy) {
			aColumns = oTable.getGroupBy() || [];
			if (typeof aColumns === "string") {
				aColumns = [
					aColumns
				];
			}
			// TODO: the getGroupBy returns no grouping when we call it to early. The result can be that we do not find the default grouping of the ui.Table
		}
		if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.AnalyticalTable && oTable.getGroupedColumns) {
			aColumns = oTable.getGroupedColumns() || [];
		}
		var oJsonData = this.createPersistentStructure();
		oJsonData.group.groupItems = aColumns.map(function(oColumn) {
			if (typeof oColumn === "string") {
				oColumn = sap.ui.getCore().byId(oColumn);
			}
			// TODO: this really should be done differently: we need to load P13nConditionPanel in order to get access to
			// P13nConditionOperation below
			// - would be better to include the P13nConditionOperation in the library.js. Since the latter is anyhow loaded ( we need already
			// P13nPanelType
			// in the constructor ) we would need no explicit "require" here.
			// jQuery.sap.require("sap/m/P13nConditionPanel");
			return {
				columnKey: Util.getColumnKey(oColumn),
				isGrouped: oColumn.getGrouped(),
				operation: oColumn.getSortOrder && oColumn.getSortOrder() === sap.ui.table.SortOrder.Ascending ? sap.m.P13nConditionOperation.GroupAscending : sap.m.P13nConditionOperation.GroupDescending,
				showIfGrouped: oColumn.getShowIfGrouped ? oColumn.getShowIfGrouped() : false
			};
		});
		return oJsonData;
	};

	/**
	 * @param {object} oDataSuiteFormat
	 * @returns {object}
	 * @private
	 */
	GroupController.prototype._mapDataSuiteFormat2Json = function(oDataSuiteFormat) {
		var oJsonData = this.createPersistentStructure();
		if (!oDataSuiteFormat.GroupBy || !oDataSuiteFormat.GroupBy.length) {
			return oJsonData;
		}
		oJsonData.group.groupItems = oDataSuiteFormat.GroupBy.map(function(sGroupBy) {
			return {
				columnKey: sGroupBy,
				isGrouped: true,
				operation: sap.m.P13nConditionOperation.GroupAscending,
				showIfGrouped: false
			};
		});
		return oJsonData;
	};

	GroupController.prototype.syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];
		var oColumn;
		var sColumnKey;
		var oColumnKey2ColumnMap = this.getColumnMap(true);

		if (oTable) {
			if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
				for (sColumnKey in oColumnKey2ColumnMap) {
					oColumn = oColumnKey2ColumnMap[sColumnKey];
					if (Util.isGroupable(oColumn)) {
						aItems.push({
							columnKey: sColumnKey,
							text: oColumn.getLabel().getText(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text()
						});
					}
				}
			}
			if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.ResponsiveTable) {
				for (sColumnKey in oColumnKey2ColumnMap) {
					oColumn = oColumnKey2ColumnMap[sColumnKey];
					if (Util.isGroupable(oColumn)) {
						aItems.push({
							columnKey: sColumnKey,
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text()
						});
					}
				}
			}
		}

		Util.sortItemsByText(aItems, "text");

		// check if groupItems was changed at all and take over if it was changed
		var oGroupItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.group.items;
		if (jQuery(aItems).not(oGroupItemsBefore).length !== 0 || jQuery(oGroupItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.group.items = aItems;
		}
	};

	GroupController.prototype._onGroup = function(oEvent) {
		var oTable = this.getTable();

		var aGroupedColumns = oEvent.mParameters.groupedColumns;

		this.fireBeforePotentialTableChange();

		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
		oData.persistentData.group.groupItems = [];
		aGroupedColumns.forEach(function(oColumn, iIndex) {
			if (typeof oColumn === "string") {
				oColumn = sap.ui.getCore().byId(oColumn);
			}

			if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.AnalyticalTable) {
				if (oColumn.getGrouped()) {
					oData.persistentData.group.groupItems.push({
						columnKey: Util.getColumnKey(oColumn),
						showIfGrouped: oColumn.getShowIfGrouped ? oColumn.getShowIfGrouped() : false
					});
				}
			} else if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
				oData.persistentData.group.groupItems.push({
					columnKey: Util.getColumnKey(oColumn),
					showIfGrouped: false
				});
			}
		}, this);

		this.fireAfterPotentialTableChange();

		this.fireAfterGroupModelDataChange();
	};

	GroupController.prototype._hasTableGroupableColumns = function() {
		var oTable = this.getTable();
		if (!oTable) {
			return false;
		}

		var bHasGrouping = false;
		oTable.getColumns().some(function(oColumn) {
			if (Util.isGroupable(oColumn)) {
				bHasGrouping = true;
				return true;
			}
		});
		return bHasGrouping;
	};

	GroupController.prototype.getPanel = function() {

		sap.ui.getCore().loadLibrary("sap.m");

		jQuery.sap.require("sap/m/P13nGroupPanel");
		jQuery.sap.require("sap/m/P13nItem");
		jQuery.sap.require("sap/m/P13nGroupItem");

		if (!this._hasTableGroupableColumns()) {
			return null;
		}

		var that = this;
		var oPanel = new sap.m.P13nGroupPanel({
			maxGroups: Util.getTableType(this.getTable()) === sap.ui.comp.personalization.TableType.AnalyticalTable ? "-1" : "1",
			containerQuery: true,
			items: {
				path: "$sapmP13nPanel>/transientData/group/items",
				template: new sap.m.P13nItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					text: "{$sapmP13nPanel>text}",
					tooltip: "{$sapmP13nPanel>tooltip}"
				})
			},
			groupItems: {
				path: "$sapmP13nPanel>/persistentData/group/groupItems",
				template: new sap.m.P13nGroupItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					operation: "{$sapmP13nPanel>operation}",
					showIfGrouped: "{$sapmP13nPanel>showIfGrouped}"
				})
			},
			beforeNavigationTo: that.setModelFunction()
		});

		oPanel.attachAddGroupItem(function(oEvent) {
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			var params = oEvent.getParameters();
			var oGroupItem = {
				columnKey: params.groupItemData.getColumnKey(),
				operation: params.groupItemData.getOperation(),
				showIfGrouped: params.groupItemData.getShowIfGrouped()
			};
			if (params.index > -1) {
				oData.persistentData.group.groupItems.splice(params.index, 0, oGroupItem);
			} else {
				oData.persistentData.group.groupItems.push(oGroupItem);
			}
			this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
		}, this);

		oPanel.attachRemoveGroupItem(function(oEvent) {
			var params = oEvent.getParameters();
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			if (params.index > -1) {
				oData.persistentData.group.groupItems.splice(params.index, 1);
				this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
			}
		}, this);

		return oPanel;
	};

	GroupController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oTable = this.getTable();
		var oColumn;
		var oColumnKey2ColumnMap = this.getColumnMap();

		this.fireBeforePotentialTableChange();

		if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.TreeTable) {
			return;

		} else if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.AnalyticalTable) {
			// we have to set all columns first to unGrouped
			for ( var sColumnKey in oColumnKey2ColumnMap) {
				oColumn = oColumnKey2ColumnMap[sColumnKey];
				if (oColumn && oColumn.getGrouped()) {
					oColumn.setGrouped(false);
					oColumn.setShowIfGrouped(false);
				}
			}

			oJsonModel.group.groupItems.forEach(function(oGroupItem) {
				oColumn = oColumnKey2ColumnMap[oGroupItem.columnKey];
				if (!oColumn) {
					return;
				}
				oColumn.setGrouped(true);

				oColumn.setShowIfGrouped(oGroupItem.showIfGrouped);
				// if(oGroupItem.showIfGrouped && oColumn.getInResult()){
				// 	oColumn.setShowIfGrouped(oGroupItem.showIfGrouped);
				// 	oColumn.setVisible(true);
				// }
			});

		} else if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
			if (oJsonModel.group.groupItems.length > 0) {
				oJsonModel.group.groupItems.some(function(oGroupItem) {
					oColumn = oColumnKey2ColumnMap[oGroupItem.columnKey];
					if (oColumn) {
						oTable.setGroupBy(oColumn);
						return true;
					}

				}, this);
			} else {
				// TODO removing the grouping does not work. we need a correction on the ui.table cf. commit Ifda0dbbfd22a586415f53aa99cbe6663577fe847
				oTable.setGroupBy(null);
			}
		}

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Operations on group are processed every time directly at the table. In case that something has been changed via Personalization Dialog or via
	 * user interaction at table, the change is instantly applied at the table.
	 */
	GroupController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.group || !oPersistentDataCompare.group.groupItems) {
			return sap.ui.comp.personalization.ChangeType.Unchanged;
		}
		var bIsDirty = JSON.stringify(oPersistentDataBase.group.groupItems) !== JSON.stringify(oPersistentDataCompare.group.groupItems);

		return bIsDirty ? sap.ui.comp.personalization.ChangeType.ModelChanged : sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * Result is XOR based difference = CurrentModelData - oPersistentDataCompare
	 *
	 * @param {object} oPersistentDataCompare JSON object
	 * @returns {object} JSON object or empty object
	 */
	GroupController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {

		if (!oPersistentDataBase || !oPersistentDataBase.group || !oPersistentDataBase.group.groupItems) {
			return this.createPersistentStructure();
		}

		if (!oPersistentDataCompare || !oPersistentDataCompare.group || !oPersistentDataCompare.group.groupItems) {
			return {
				group: Util.copy(oPersistentDataBase.group)
			};
		}

		if (JSON.stringify(oPersistentDataBase.group.groupItems) !== JSON.stringify(oPersistentDataCompare.group.groupItems)) {
			return {
				group: Util.copy(oPersistentDataBase.group)
			};
		}
		return null;
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if groupItems
	 *        is [] then it means that all groupItems have been deleted
	 * @returns {object} new JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	GroupController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
		// not valid
		if (!oPersistentDataCompare || !oPersistentDataCompare.group || !oPersistentDataCompare.group.groupItems) {
			return {
				group: Util.copy(oPersistentDataBase.group)
			};
		}

		return {
			group: Util.copy(oPersistentDataCompare.group)
		};
	};

	/**
	 * Determines whether a grouping has been selected for specific column or not.
	 *
	 * @param {object} oPayload structure about the current selection coming from panel
	 * @param {string} sColumnKey column key of specific column
	 * @returns {boolean} true if grouping for a specific column is selected, false if not
	 */
	GroupController.prototype.isGroupSelected = function(oPayload, oPersistentData, sColumnKey) {
		var iIndex;
		if (!oPayload) {
			oPersistentData.groupItems.some(function(oGroupItem, iIndex_) {
				if (oGroupItem.columnKey === sColumnKey) {
					iIndex = iIndex_;
					return true;
				}
			});
			return iIndex > -1;
		}

		// oPayload has been passed...
		if (!oPayload.selectedColumnKeys) {
			return false;
		}
		if (oPayload.selectedColumnKeys) {
			oPayload.selectedColumnKeys.some(function(sSelectedColumnKey, iIndex_) {
				if (sSelectedColumnKey === sColumnKey) {
					iIndex = iIndex_;
					return true;
				}
			});
		}
		return iIndex > -1;
	};

	/**
	 * Creates property <code>GroupBy</code> in <code>oDataSuiteFormat</code> object if at least one group item exists. The <code>GroupBy</code> contains the current PersistentData snapshot.
	 * @param {object} oDataSuiteFormat Structure of Data Suite Format
	 */
	GroupController.prototype.getDataSuiteFormatSnapshot = function(oDataSuiteFormat) {
		var oPersistentDataTotal = this.getUnionData(this.getPersistentDataRestore(), this.getPersistentData());
		if (!oPersistentDataTotal.group || !oPersistentDataTotal.group.groupItems || !oPersistentDataTotal.group.groupItems.length) {
			return;
		}
		oDataSuiteFormat.GroupBy = oPersistentDataTotal.group.groupItems.map(function(oGroupItem) {
			return oGroupItem.columnKey;
		});
	};

	/**
	 * Cleans up before destruction.
	 */
	GroupController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
			oTable.detachGroup(this._onGroup, this);
		}
	};

	return GroupController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/GroupController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.SelectionController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides SelectionController
jQuery.sap.declare('sap.ui.comp.personalization.SelectionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nSelectionPanel'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nSelectionItem'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/SelectionController",[
	'jquery.sap.global', './BaseController', 'sap/m/library', 'sap/ui/comp/library', './Util', 'sap/m/P13nSelectionPanel', 'sap/m/P13nItem', 'sap/m/P13nSelectionItem'
], function(jQuery, BaseController, MLibrary, CompLibrary, Util, P13nSelectionPanel, P13nItem, P13nSelectionItem) {
	"use strict";

	/**
	 * The SelectionController can be used to...
	 *
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP SE
	 * @version 1.50.6
	 * @private
	 * @since 1.34.0
	 * @alias sap.ui.comp.SelectionController
	 */
	var SelectionController = BaseController.extend("sap.ui.comp.personalization.SelectionController", /** @lends sap.ui.comp.personalization.SelectionController */

	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.selection);
		},
		metadata: {
			events: {
				afterSelectionModelDataChange: {}
			}
		}
	});

	/**
	 * Callback from main controller after OK button has been executed.
	 *
	 * @param {object} oPayload that contains additional information from the panel
	 */
	SelectionController.prototype.onAfterSubmit = function(oPayload) {
		if (!oPayload || !oPayload.selection) {
			return;
		}
		var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();

		// Take over updated, new added or deleted selectionItems into model
		oData.persistentData.selection.selectionItems = [];
		oPayload.selection.selectionItems.forEach(function(oSelectionItem) {
			oData.persistentData.selection.selectionItems.push({
				columnKey: oSelectionItem.getColumnKey(),
				visible: oSelectionItem.getSelected()
			});
		});
		this.getModel("$sapuicomppersonalizationBaseController").refresh();

		// Apply changes
		BaseController.prototype.onAfterSubmit.apply(this, arguments);
	};

	/**
	 * Does a complete JSON snapshot of the current table instance ("original") from the perspective of the columns controller; the JSON snapshot can
	 * later be applied to any table instance to recover all columns related infos of the "original" table
	 *
	 * @returns {objects} JSON objects with meta data from existing table columns
	 */
	SelectionController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		var oTable = this.getTable();
		if (!oTable) {
			return oJsonData;
		}
		var oColumnKey2ColumnMap = this.getColumnMap(true);
		for ( var sColumnKey in oColumnKey2ColumnMap) {
			var oColumn = oColumnKey2ColumnMap[sColumnKey];
			oJsonData.selection.selectionItems.push({
				columnKey: sColumnKey,
				text: oColumn.getLabel(),
				visible: oColumn.getSelected()
			});
		}
		return oJsonData;
	};

	SelectionController.prototype._getTable2JsonRestore = function() {
		return this._getTable2Json();
	};

	SelectionController.prototype.syncTable2TransientModel = function() {
		var aItems = [];
		var oTable = this.getTable();
		if (!oTable) {
			return;
		}

		var oColumnKey2ColumnMap = this.getColumnMap(true);
		for ( var sColumnKey in oColumnKey2ColumnMap) {
			var oColumn = oColumnKey2ColumnMap[sColumnKey];
			aItems.push({
				columnKey: sColumnKey,
				text: oColumn.getLabel(),
				href: oColumn.getHref(),
				target: oColumn.getTarget(),
				press: oColumn.getPress()
			});
		}

		// check if Items was changed at all and take over if it was changed
		var aItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.selection.items;
		if (jQuery(aItems).not(aItemsBefore).length !== 0 || jQuery(aItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.selection.items = aItems;
		}
	};

	/**
	 * Returns a ColumnsPanel control
	 *
	 * @returns {sap.m.P13nChartSelectionPanel} returns a new created ColumnsPanel
	 */
	SelectionController.prototype.getPanel = function(oPayload) {
		return new P13nSelectionPanel({
			titleLarge: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_SELECTION_TITLE"),
			items: {
				path: '$sapmP13nPanel>/transientData/selection/items',
				template: new P13nItem({
					columnKey: '{$sapmP13nPanel>columnKey}',
					href: '{$sapmP13nPanel>href}',
					target: '{$sapmP13nPanel>target}',
					text: '{$sapmP13nPanel>text}',
					press: '{$sapmP13nPanel>press}'
				})
			},
			selectionItems: {
				path: "$sapmP13nPanel>/persistentData/selection/selectionItems",
				template: new P13nSelectionItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					selected: "{$sapmP13nPanel>visible}"
				})
			},
			beforeNavigationTo: this.setModelFunction()
		});
	};

	/**
	 * Operations on columns are processed every time directly at the table. In case that something has been changed via Personalization Dialog or via
	 * user interaction at table, change is applied to the table.
	 *
	 * @param {object} oDataOld (new) JSON object
	 * @param {object} oDataNew (old) JSON object
	 * @returns {object} that represents the change type, like: Unchanged || TableChanged || ModelChanged
	 */
	SelectionController.prototype.getChangeType = function(oDataOld, oDataNew) {
		return this.getChangeData(oDataOld, oDataNew) ? sap.ui.comp.personalization.ChangeType.ModelChanged : sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * Result is XOR based difference = oDataCompare - oDataNew (new - old)
	 *
	 * @param {object} oDataBase JSON object which represents the current model state (Restore+PersistentData)
	 * @param {object} oDataCompare JSON object which represents AlreadyKnown || Restore
	 * @returns {object} JSON object or null
	 */
	SelectionController.prototype.getChangeData = function(oDataBase, oDataCompare) {
		// not valid
		if (!oDataCompare || !oDataCompare.selection || !oDataCompare.selection.selectionItems) {
			return null;
		}

		var oChangeData = {
			selection: Util.copy(oDataBase.selection)
		};

		// If no changes inside of selection.selectionItems array, return null.
		// Note: the order inside of selection.selectionItems array is irrelevant.
		if (this._isSemanticEqual(oDataBase, oDataCompare)) {
			return null;
		}

		// If corresponding items are different then delete equal properties and return the rest of item
		var aToBeDeleted = [];
		oChangeData.selection.selectionItems.forEach(function(oItemOld) {
			var oItemNew = Util.getArrayElementByKey("columnKey", oItemOld.columnKey, oDataCompare.selection.selectionItems);
			if (Util.semanticEqual(oItemOld, oItemNew)) {
				// Condenser: remove items which are not changed in a chain
				aToBeDeleted.push(oItemOld);
				return;
			}
			for ( var property in oItemOld) {
				if (property === "columnKey" || !oItemNew) {
					continue;
				}
				if (oItemOld[property] === oItemNew[property]) {
					delete oItemOld[property];
				}
			}
			// oItemOld has only one property 'columnKey'
			if (Object.keys(oItemOld).length < 2) {
				aToBeDeleted.push(oItemOld);
			}
		});
		aToBeDeleted.forEach(function(oItemOld) {
			var iIndex = Util.getIndexByKey("columnKey", oItemOld.columnKey, oChangeData.selection.selectionItems);
			oChangeData.selection.selectionItems.splice(iIndex, 1);
		});

		return oChangeData;
	};

	/**
	 * @param {object} oDataOld: JSON object to which different properties from oDataNew are added. E.g. Restore
	 * @param {object} oDataNew: JSON object from where the different properties are added to oDataOld. E.g. CurrentVariant || PersistentData
	 * @returns {object} new JSON object as union result of oDataOld and oDataNew
	 */
	SelectionController.prototype.getUnionData = function(oDataOld, oDataNew) {
		if (!oDataNew || !oDataNew.selection || !oDataNew.selection.selectionItems) {
			return oDataOld.selection ? {
				selection: Util.copy(oDataOld.selection)
			} : null;
		}

		if (!oDataOld || !oDataOld.selection || !oDataOld.selection.selectionItems) {
			return {
				selection: Util.copy(oDataNew.selection)
			};
		}

		var oUnion = this.createPersistentStructure();
		oDataOld.selection.selectionItems.forEach(function(oSelectionItemOld) {
			var oSelectionItemNew = Util.getArrayElementByKey("columnKey", oSelectionItemOld.columnKey, oDataNew.selection.selectionItems);
			if (oSelectionItemNew) {
				if (oSelectionItemNew.visible !== undefined) {
					oSelectionItemOld.visible = oSelectionItemNew.visible;
				}
			}
			oUnion.selection.selectionItems.push(oSelectionItemOld);
		});

		return oUnion;
	};

	SelectionController.prototype._isSemanticEqual = function(oDataOld, oDataNew) {
		var fSort = function(a, b) {
			if (a.visible === true && (b.visible === false || b.visible === undefined)) {
				return -1;
			} else if ((a.visible === false || a.visible === undefined) && b.visible === true) {
				return 1;
			} else if (a.visible === true && b.visible === true) {
				// if (a.index < b.index) {
				// return -1;
				// } else if (a.index > b.index) {
				// return 1;
				// } else {
				return 0;
				// }
			} else if ((a.visible === false || a.visible === undefined) && (b.visible === false || b.visible === undefined)) {
				if (a.columnKey < b.columnKey) {
					return -1;
				} else if (a.columnKey > b.columnKey) {
					return 1;
				} else {
					return 0;
				}
			}
		};
		var aDataOldSorted = Util.copy(oDataOld.selection.selectionItems).sort(fSort);
		var aDataNewSorted = Util.copy(oDataNew.selection.selectionItems).sort(fSort);
		return !aDataOldSorted.some(function(oSelectionItem, iIndex) {
			if (!Util.semanticEqual(oSelectionItem, aDataNewSorted[iIndex])) {
				return true;
			}
		});
	};

	/**
	 * Cleans up before destruction.
	 *
	 * @private
	 */
	SelectionController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);
	};

	return SelectionController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/SelectionController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.SortController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides SortController
jQuery.sap.declare('sap.ui.comp.personalization.SortController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/SortController",[
	'jquery.sap.global', './BaseController', 'sap/m/library', './Util'
], function(jQuery, BaseController, library, Util) {
	"use strict";

	/**
	 * The SortController can be used to...
	 *
	 * @class Table Personalization Controller
	 * @extends sap.ui.comp.personalization.BaseController
	 * @author SAP
	 * @version 1.25.0-SNAPSHOT
	 * @private
	 * @alias sap.ui.comp.personalization.SortController
	 */
	var SortController = BaseController.extend("sap.ui.comp.personalization.SortController",
	/** @lends sap.ui.comp.personalization.SortController */
	{
		constructor: function(sId, mSettings) {
			BaseController.apply(this, arguments);
			this.setType(sap.m.P13nPanelType.sort);
		},
		metadata: {
			events: {
				afterSortModelDataChange: {}
			}
		}
	});

	SortController.prototype.setTable = function(oTable) {
		BaseController.prototype.setTable.apply(this, arguments);

		if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
			oTable.detachSort(this._onSort, this);
			oTable.attachSort(this._onSort, this);
		}
	};

	/**
	 * this method will make a complete initial json snapshot of the current table instance ("original") from the perspective of the SortController. The
	 * json snapshot can later be applied to any table instance to recover all sort related info of the "original" table
	 * TODO: This really only works for when max 1 sort criteria is defined since otherwise potentially order of sort criteria is destroyed
	 */
	SortController.prototype._getTable2Json = function() {
		var oJsonData = this.createPersistentStructure();
		Util.createSort2Json(this.getTable(), oJsonData.sort.sortItems, this.getIgnoreColumnKeys());
		return oJsonData;
	};

	SortController.prototype._getDataSuiteFormat2Json = function(oDataSuiteFormat) {
		var oJsonData = this.createPersistentStructure();
		Util.addSortPersistentData(this._mapDataSuiteFormat2Json(oDataSuiteFormat), oJsonData, this.getIgnoreColumnKeys());
		return oJsonData;
	};

	/**
	 * Note: DataSuiteFormat is applied on top of the initial state which is based on metadata. So e.g. several sorted columns can be applied to sap.m.Table.
	 * @param {object} oDataSuiteFormat
	 * @returns {object}
	 * @private
	 */
	SortController.prototype._mapDataSuiteFormat2Json = function(oDataSuiteFormat) {
		var oJsonData = this.createPersistentStructure();
		if (!oDataSuiteFormat.SortOrder || !oDataSuiteFormat.SortOrder.length) {
			return oJsonData;
		}
		oJsonData.sort.sortItems = oDataSuiteFormat.SortOrder.map(function(oSortOrder) {
			return {
				columnKey: oSortOrder.Property,
				isSorted: true,
				operation: oSortOrder.Descending ? "Descending" : "Ascending"
			};
		});
		return oJsonData;
	};

	SortController.prototype.syncTable2TransientModel = function() {
		var oTable = this.getTable();
		var aItems = [];
		var oColumn;
		var sColumnKey;
		var oColumnKey2ColumnMap = this.getColumnMap(true);

		if (oTable) {
			if (Util.getTableBaseType(oTable) === sap.ui.comp.personalization.TableType.Table) {
				for (sColumnKey in oColumnKey2ColumnMap) {
					oColumn = oColumnKey2ColumnMap[sColumnKey];
					if (Util.isSortable(oColumn)) {
						aItems.push({
							columnKey: sColumnKey,
							text: oColumn.getLabel().getText(),
							tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text()
						});
					}
				}
			} else if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.ResponsiveTable) {
				for (sColumnKey in oColumnKey2ColumnMap) {
					oColumn = oColumnKey2ColumnMap[sColumnKey];
					if (Util.isSortable(oColumn)) {
						aItems.push({
							columnKey: sColumnKey,
							text: oColumn.getHeader().getText(),
							tooltip: (oColumn.getHeader().getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getHeader().getTooltip().getTooltip_Text() : oColumn.getHeader().getTooltip_Text()
						});
					}
				}
			} else if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.ChartWrapper) {
				for (sColumnKey in oColumnKey2ColumnMap) {
					oColumn = oColumnKey2ColumnMap[sColumnKey];
					aItems.push({
						columnKey: sColumnKey,
						text: oColumn.getLabel(),
						tooltip: (oColumn.getTooltip() instanceof sap.ui.core.TooltipBase) ? oColumn.getTooltip().getTooltip_Text() : oColumn.getTooltip_Text()
					});
				}
			}
		}

		Util.sortItemsByText(aItems, "text");

		// check if items was changed at all and take over if it was changed
		// TODO: clean up here
		var aItemsBefore = this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.sort.items;
		if (jQuery(aItems).not(aItemsBefore).length !== 0 || jQuery(aItemsBefore).not(aItems).length !== 0) {
			this.getModel("$sapuicomppersonalizationBaseController").getData().transientData.sort.items = aItems;
		}
	};

	SortController.prototype._onSort = function(oEvent) {
		oEvent.preventDefault();
		var bAdded = oEvent.mParameters.columnAdded;

		var oTable = this.getTable();
		if (typeof oTable === "string") {
			oTable = sap.ui.getCore().byId(oTable);
		}

		this.fireBeforePotentialTableChange();

		// remove existing sortings
		if (!bAdded) {
			var oColumnKey2ColumnMap = this.getColumnMap();
			for ( var sColumnKey in oColumnKey2ColumnMap) {
				var oColumn = oColumnKey2ColumnMap[sColumnKey];
				if (oColumn.setSorted) {
					oColumn.setSorted(false);
				}
			}
		}
		var oColumn = oEvent.mParameters.column;
		if (oColumn && oColumn.setSorted) {
			oColumn.setSorted(true);
			oColumn.setSortOrder(oEvent.mParameters.sortOrder);
		}

		var oSortData = this.getModel("$sapuicomppersonalizationBaseController").getData().persistentData.sort;

		if (!bAdded) {
			oSortData.sortItems = [];
		}

		var i = Util.getIndexByKey("columnKey", Util.getColumnKey(oColumn), oSortData.sortItems);
		if (i > -1) {
			oSortData.sortItems.splice(i, 1);
		}
		oSortData.sortItems.push({
			columnKey: Util.getColumnKey(oColumn),
			operation: oEvent.mParameters.sortOrder
		});

		this.fireAfterPotentialTableChange();

		this.fireAfterSortModelDataChange();
	};

	SortController.prototype.getPanel = function() {

		sap.ui.getCore().loadLibrary("sap.m");

		jQuery.sap.require("sap/m/P13nSortPanel");
		jQuery.sap.require("sap/m/P13nItem");
		jQuery.sap.require("sap/m/P13nSortItem");

		if (!this.getColumnHelper().hasSortableColumns()) {
			return null;
		}
		var that = this;
		var oPanel = new sap.m.P13nSortPanel({
			containerQuery: true,
			items: {
				path: "$sapmP13nPanel>/transientData/sort/items",
				template: new sap.m.P13nItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					text: "{$sapmP13nPanel>text}",
					tooltip: "{$sapmP13nPanel>tooltip}",
					maxLength: "{$sapmP13nPanel>maxlength}",
					type: "{$sapmP13nPanel>type}"
				})
			},
			sortItems: {
				path: "$sapmP13nPanel>/persistentData/sort/sortItems",
				template: new sap.m.P13nSortItem({
					columnKey: "{$sapmP13nPanel>columnKey}",
					operation: "{$sapmP13nPanel>operation}"
				})
			},
			beforeNavigationTo: that.setModelFunction()
		});

		oPanel.attachAddSortItem(function(oEvent) {
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			var params = oEvent.getParameters();
			var oSortItem = {
				columnKey: params.sortItemData.getColumnKey(),
				operation: params.sortItemData.getOperation()
			};
			if (params.index > -1) {
				oData.persistentData.sort.sortItems.splice(params.index, 0, oSortItem);
			} else {
				oData.persistentData.sort.sortItems.push(oSortItem);
			}
			this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
		}, this);

		oPanel.attachRemoveSortItem(function(oEvent) {
			var params = oEvent.getParameters();
			var oData = this.getModel("$sapuicomppersonalizationBaseController").getData();
			if (params.index > -1) {
				oData.persistentData.sort.sortItems.splice(params.index, 1);
				this.getModel("$sapuicomppersonalizationBaseController").setData(oData, true);
			}
		}, this);

		return oPanel;
	};

	SortController.prototype.syncJsonModel2Table = function(oJsonModel) {
		var oColumnKey2ColumnMap = this.getColumnMap();
		var oColumnKey2ColumnMapUnsorted = jQuery.extend(true, {}, oColumnKey2ColumnMap);

		this.fireBeforePotentialTableChange();

		if (Util.getTableBaseType(this.getTable()) === sap.ui.comp.personalization.TableType.Table) {
			oJsonModel.sort.sortItems.forEach(function(oSortItem) {
				var oColumn = oColumnKey2ColumnMap[oSortItem.columnKey];
				if (!oColumn) {
					return;
				}
				if (!oColumn.getSorted()) {
					oColumn.setSorted(true);
				}
				if (oColumn.getSortOrder() !== oSortItem.operation) {
					oColumn.setSortOrder(oSortItem.operation);
				}
				delete oColumnKey2ColumnMapUnsorted[oSortItem.columnKey];
			});

			for ( var sColumnKey in oColumnKey2ColumnMapUnsorted) {
				var oColumn = oColumnKey2ColumnMapUnsorted[sColumnKey];
				if (oColumn && oColumn.getSorted()) {
					oColumn.setSorted(false);
				}
			}
		}

		this.fireAfterPotentialTableChange();
	};

	/**
	 * Operations on sorting are processed sometime directly at the table and sometime not. In case that something has been changed via
	 * Personalization Dialog the consumer of the Personalization Dialog has to apply sorting at the table. In case that sorting has been changed via
	 * user interaction at table, the change is instantly applied at the table.
	 *
	 * @returns {sap.ui.comp.personalization.ChangeType}
	 */
	SortController.prototype.getChangeType = function(oPersistentDataBase, oPersistentDataCompare) {
		if (!oPersistentDataCompare || !oPersistentDataCompare.sort || !oPersistentDataCompare.sort.sortItems) {
			return sap.ui.comp.personalization.ChangeType.Unchanged;
		}
		var bIsDirty = JSON.stringify(oPersistentDataBase.sort.sortItems) !== JSON.stringify(oPersistentDataCompare.sort.sortItems);

		return bIsDirty ? sap.ui.comp.personalization.ChangeType.ModelChanged : sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * Result is XOR based difference = oPersistentDataBase - oPersistentDataCompare
	 *
	 * @param {object} oPersistentDataCompare JSON object. Note: if sortItems is [] then it means that all sortItems have been deleted
	 * @returns {object} JSON object or empty object
	 */
	SortController.prototype.getChangeData = function(oPersistentDataBase, oPersistentDataCompare) {

		if (!oPersistentDataBase || !oPersistentDataBase.sort || !oPersistentDataBase.sort.sortItems) {
			return {
				sort: {
					sortItems: []
				}
			};
		}

		if (!oPersistentDataCompare || !oPersistentDataCompare.sort || !oPersistentDataCompare.sort.sortItems) {
			return {
				sort: Util.copy(oPersistentDataBase.sort)
			};
		}

		if (JSON.stringify(oPersistentDataBase.sort.sortItems) !== JSON.stringify(oPersistentDataCompare.sort.sortItems)) {
			return {
				sort: Util.copy(oPersistentDataBase.sort)
			};
		}
		return null;
	};

	/**
	 * @param {object} oPersistentDataBase: JSON object to which different properties from JSON oPersistentDataCompare are added
	 * @param {object} oPersistentDataCompare: JSON object from where the different properties are added to oPersistentDataBase. Note: if sortItems is []
	 *        then it means that all sortItems have been deleted
	 * @returns {object} new JSON object as union result of oPersistentDataBase and oPersistentDataCompare
	 */
	SortController.prototype.getUnionData = function(oPersistentDataBase, oPersistentDataCompare) {
		// not valid
		if (!oPersistentDataCompare || !oPersistentDataCompare.sort || !oPersistentDataCompare.sort.sortItems) {
			return {
				sort: Util.copy(oPersistentDataBase.sort)
			};
		}

		return {
			sort: Util.copy(oPersistentDataCompare.sort)
		};
	};

	/**
	 * Creates property <code>SortOrder</code> in <code>oDataSuiteFormat</code> object if at least one sort item exists. The <code>SortOrder</code> contains the current PersistentData snapshot.
	 * @param {object} oDataSuiteFormat Structure of Data Suite Format
	 */
	SortController.prototype.getDataSuiteFormatSnapshot = function(oDataSuiteFormat) {
		var oPersistentDataTotal = this.getUnionData(this.getPersistentDataRestore(), this.getPersistentData());
		if (!oPersistentDataTotal.sort || !oPersistentDataTotal.sort.sortItems || !oPersistentDataTotal.sort.sortItems.length) {
			return;
		}
		oDataSuiteFormat.SortOrder = oPersistentDataTotal.sort.sortItems.map(function(oSortItem) {
			return {
				Property: oSortItem.columnKey,
				Descending: oSortItem.operation === "Descending"
			};
		});
	};

	/**
	 * Cleans up before destruction.
	 *
	 * @private
	 */
	SortController.prototype.exit = function() {
		BaseController.prototype.exit.apply(this, arguments);

		var oTable = this.getTable();
		if (Util.getTableBaseType(this.getTable()) === sap.ui.comp.personalization.TableType.Table) {
			oTable.detachSort(this._onSort, this);
		}
	};

	return SortController;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/SortController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.BaseValueListProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Retrieves the metadata necessary for a value list from the OData metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.BaseValueListProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/BaseValueListProvider",[
	'jquery.sap.global', 'sap/ui/base/EventProvider', 'sap/ui/comp/odata/ODataType', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/util/FormatUtil'
], function(jQuery, EventProvider, ODataType, MetadataAnalyser, FormatUtil) {
	"use strict";

	/**
	 * Retrieves the data for a collection from the OData metadata to bind to a given control/aggregation
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mParams - map containing the control,aggregation,annotation and the oODataModel
	 * @author SAP SE
	 */
	var BaseValueListProvider = EventProvider.extend("sap.ui.comp.providers.BaseValueListProvider", {
		constructor: function(mParams) {
			EventProvider.call(this);
			this.sFieldName = mParams.fieldName;
			this.oControl = mParams.control;
			this.sValueListEntitySetName = null;
			this.oODataModel = mParams.model;
			this.oFilterModel = mParams.filterModel;
			this.oFilterProvider = mParams.filterProvider;
			this.sDisplayFormat = mParams.displayFormat;
			this._oDateFormatSettings = mParams.dateFormatSettings;
			this._fieldViewMetadata = mParams.fieldViewMetadata;
			if (!this._oDateFormatSettings) {
				this._oDateFormatSettings = {};
			}
			// Default to UTC true if nothing is provided --> as sap:display-format="Date" should be used without a timezone
			if (!this._oDateFormatSettings.hasOwnProperty("UTC")) {
				this._oDateFormatSettings["UTC"] = true;
			}

			// Default resolution of InOut params when used in standard OData scenarios
			this.bResolveInOutParams = (mParams.resolveInOutParams === false) ? false : true;
			// The configured display behaviour
			this.sDisplayBehaviour = mParams.displayBehaviour;
			// the calculated display behaviour for DDLB
			this.sDDLBDisplayBehaviour = this.sDisplayBehaviour;
			if (!this.sDDLBDisplayBehaviour || this.sDDLBDisplayBehaviour === sap.ui.comp.smartfilterbar.DisplayBehaviour.auto) {
				this.sDDLBDisplayBehaviour = this.oFilterProvider ? this.oFilterProvider.sDefaultDropDownDisplayBehaviour : sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionOnly;
			}
			// If the property if part of a complex type this would be filled
			this.sPropertyTypePath = "";
			if (this.bResolveInOutParams && !this.oFilterModel && !this.oFilterProvider) {
				this._resolvePropertyPath();
			}

			if (mParams.loadAnnotation && mParams.fullyQualifiedFieldName) {
				this._oMetadataAnalyser = mParams.metadataAnalyser;
				this._sFullyQualifiedFieldName = mParams.fullyQualifiedFieldName;
				this._attachAnnotationLoadOnRender();
			} else {
				this._onAnnotationLoad({
					primaryValueListAnnotation: mParams.annotation,
					additionalAnnotations: mParams.additionalAnnotations
				});
			}

			if (!sap.ui.comp.smartfilterbar || !sap.ui.comp.smartfilterbar.FilterProvider) {
				jQuery.sap.require("sap.ui.comp.smartfilterbar.FilterProvider");
			}
		}
	});

	/**
	 * Attach to control render events to trigger load
	 * @private
	 */
	BaseValueListProvider.prototype._attachAnnotationLoadOnRender = function() {
		/**
		 * Delay the fetch of valuelist metadata until the control is being rendered!
		 */
		this.oBeforeRenderingEventDelegate = {
			onBeforeRendering: function() {
				this.oControl.removeEventDelegate(this.oBeforeRenderingEventDelegate, this);
				delete this.oBeforeRenderingEventDelegate;

				if (!this._bValueListRequested) {

					if (this.bInitialised) {
						if (this._onMetadataInitialised && this.sAggregationName && !this.bTypeAheadEnabled && this.oControl.$()) {
							this._onMetadataInitialised();
						}
					} else {
						this._loadAnnotation();
					}
				}
			}
		};
		this.oControl.addEventDelegate(this.oBeforeRenderingEventDelegate, this);
	};

	/**
	 * Ensure the metadata is loaded. In case the metadata are not yet loaded, the load will be initiated.<br>
	 * <b>Note:</b>the request for metadata is triggered asynchronously.
	 * @private
	 */
	BaseValueListProvider.prototype.loadAnnotation = function() {

		if (this.oBeforeRenderingEventDelegate) {
			this.oControl.removeEventDelegate(this.oBeforeRenderingEventDelegate, this);
			delete this.oBeforeRenderingEventDelegate;
		}

		if (this.oAfterRenderingEventDelegate) {
			this.oControl.removeEventDelegate(this.oAfterRenderingEventDelegate, this);
			delete this.oAfterRenderingEventDelegate;
		}

		this._loadAnnotation();
	};

	/**
	 * Load the annotation from ODataModel
	 * @private
	 */
	BaseValueListProvider.prototype._loadAnnotation = function() {

		if (!this._bValueListRequested) {

			this._bValueListRequested = true;

			if (!this._oMetadataAnalyser) {
				this._oMetadataAnalyser = new MetadataAnalyser(this.oODataModel);
				this._bCleanupMetadataAnalyser = true;
			}

			this._oMetadataAnalyser.getValueListAnnotationLazy(this._sFullyQualifiedFieldName).then(this._onAnnotationLoad.bind(this), function(oError) {
				this._oError = oError;
				this.bInitialised = true;
				jQuery.sap.log.debug(oError);
			}.bind(this));
		}
	};

	/**
	 * Attaches event handler <code>fnFunction</code> to the <code>valueListChanged</code> event.<br>
	 * This event is relevant only while setting data back (OUT parameters) to the ODataModel
	 * @param {function} fnFunction the function to call when the event occurs
	 * @param {object} [oListener] object on which to call the given function
	 * @public
	 * @since 1.32.0
	 */
	BaseValueListProvider.prototype.attachValueListChanged = function(fnFunction, oListener) {
		this.attachEvent("valueListChanged", fnFunction, oListener);
	};

	/**
	 * Detaches event handler <code>fnFunction</code> from the <code>valueListChanged</code> event.<br>
	 * This event is relevant only while setting data back (OUT parameters) to the ODataModel
	 * @param {function} fnFunction the function to call when the event occurs
	 * @param {object} [oListener] object on which to call the given function
	 * @public
	 * @since 1.32.0
	 */
	BaseValueListProvider.prototype.detachValueListChanged = function(fnFunction, oListener) {
		this.detachEvent("valueListChanged", fnFunction, oListener);
	};

	/**
	 * Called once valuelist annotation is loaded!
	 * @private
	 * @param {Object} mValueList - value list annotation from metadata
	 */
	BaseValueListProvider.prototype._onAnnotationLoad = function(mValueList) {
		this.oPrimaryValueListAnnotation = mValueList.primaryValueListAnnotation;
		this.additionalAnnotations = mValueList.additionalAnnotations;
		this._resolveAnnotationData(this.oPrimaryValueListAnnotation);
		this.bInitialised = true;
		if (this._onMetadataInitialised && this.sAggregationName && !this.bTypeAheadEnabled && this.oControl.$()) {
			this._onMetadataInitialised();
		}
	};

	/**
	 * Resolve the path from control's binding info to find out if the property is part of a ComplexType. (This is valid only for ODataModel In/Out
	 * parameter handling)
	 * @private
	 */
	BaseValueListProvider.prototype._resolvePropertyPath = function() {
		var oBindingInfo = this.oControl.getBindingInfo("value"), sPath, sProperty, aPaths;
		if (oBindingInfo && oBindingInfo.parts) {
			sPath = oBindingInfo.parts[0] ? oBindingInfo.parts[0].path : "";
		}
		if (sPath) {
			aPaths = sPath.split("/");
			if (aPaths.length > 1) {
				sProperty = aPaths[aPaths.length - 1];
				this.sPropertyTypePath = sPath.replace("/" + sProperty, "");
			}
		}
	};

	/**
	 * Resolve the annotation data and recalculate the required metadata
	 * @param {Object} oAnnotation - the selected annotation which needs to be processed
	 * @private
	 */
	BaseValueListProvider.prototype._resolveAnnotationData = function(oAnnotation) {
		var iLen = 0, i = 0, aCols, oField, sType, oType, oConstraints, oFormatOptions;
		if (this.oODataModel && oAnnotation) {
			this.bSupportBasicSearch = oAnnotation.isSearchSupported;
			this.sValueListTitle = oAnnotation.valueListTitle || oAnnotation.qualifier;
			this.sKey = oAnnotation.keyField;
			this._aKeys = oAnnotation.keys;
			this.sValueListEntitySetName = oAnnotation.valueListEntitySetName;
			this.mInParams = oAnnotation.inParams;
			this.mOutParams = oAnnotation.outParams;

			// the calculated display behaviour for tokens
			this.sTokenDisplayBehaviour = this.sDisplayBehaviour;
			if (!this.sTokenDisplayBehaviour || this.sTokenDisplayBehaviour === sap.ui.comp.smartfilterbar.DisplayBehaviour.auto) {
				this.sTokenDisplayBehaviour = this.oFilterProvider ? this.oFilterProvider.sDefaultTokenDisplayBehaviour : sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionAndId;
			}

			// fallback to idOnly if no description is present for tokens
			if (!oAnnotation.descriptionField) {
				this.sTokenDisplayBehaviour = sap.ui.comp.smartfilterbar.DisplayBehaviour.idOnly;
			}

			this.sDescription = oAnnotation.descriptionField || this.sKey; // fall back to key if there is no description

			if (this.sValueListEntitySetName && this.sKey) {
				// Get the Columns information (all fields on the UI)
				this._aCols = [];
				this.aSelect = [];
				aCols = oAnnotation.valueListFields;
				iLen = aCols.length;
				for (i = 0; i < iLen; i++) {
					oField = aCols[i];
					// Type Handling: Special handling for date and boolean fields
					sType = null;
					oType = null;
					oConstraints = undefined;
					oFormatOptions = undefined;
					if (oField.type === "Edm.Boolean") {
						sType = "boolean";
					} else if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
						sType = "date";
						oFormatOptions = this._oDateFormatSettings;
						oConstraints = {
							displayFormat: "Date"
						};
					} else if (oField.type === "Edm.Decimal") {
						sType = "decimal";
						oConstraints = {
							precision: oField.precision,
							scale: oField.scale
						};
					} else if (oField.type === "Edm.String") {
						sType = "string";
					}

					oType = ODataType.getType(oField.type, oFormatOptions, oConstraints);

					// Do not show statically hidden fields (visible = false) as columns
					if (oField.visible) {
						this._aCols.push({
							label: oField.fieldLabel,
							tooltip: oField.quickInfo || oField.fieldLabel,
							type: sType,
							oType: oType,
							width: FormatUtil.getWidth(oField, 15),
							template: oField.name,
							sort: oField.sortable /* oField["sap:sortable"] !== "false" */? oField.name : undefined,
							sorted: oField.sortable && oField.name === this.sKey, // false,
							sortOrder: "Ascending" // sap.ui.table.SortOrder.Ascending
						});
					}
					// Request data for fields regardless of visibility (since it could be needed for OUT param handling)!
					this.aSelect.push(oField.name);
				}
				if (oAnnotation.descriptionField) {
					this.aSelect.push(oAnnotation.descriptionField);
				}
			} else {
				if (!this.sKey) {
					jQuery.sap.log.error("BaseValueListProvider", "key for ValueListEntitySetName '" + this.sValueListEntitySetName + "' missing! Please check your annotations");
				}
			}
		}
	};

	BaseValueListProvider.prototype._getFilterData = function() {
		var oData, oFilterData = {};

		if (this.oFilterProvider && this.oFilterProvider._oSmartFilter) {
			oData = this.oFilterProvider._oSmartFilter.getFilterData();

			if (this._fieldViewMetadata && this._fieldViewMetadata.fieldName && (this._fieldViewMetadata.fieldName.indexOf(sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX) === 0)) {

				Object.keys(oData).forEach(function(sName) {
					var name = sName.split(sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX);
					oFilterData[name[name.length - 1]] = oData[sName];
				});

				return oFilterData;
			}

		}

		return oData;
	};

	BaseValueListProvider.prototype._setFilterData = function(mFilterOutputData) {
		var oData = mFilterOutputData, oFilterData = {};

		if (this.oFilterProvider) {

			if (this._fieldViewMetadata && this._fieldViewMetadata.fieldName && (this._fieldViewMetadata.fieldName.indexOf(sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX) === 0)) {

				Object.keys(mFilterOutputData).forEach(function(sName) {
					oFilterData[sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX + sName] = mFilterOutputData[sName];
				});

				oData = oFilterData;
			}

			this.oFilterProvider.setFilterData(oData);
		}
	};

	/**
	 * Called by the control when needed, to get input data for filtering
	 * @private
	 */
	BaseValueListProvider.prototype._calculateFilterInputData = function() {
		var sLocalFieldName, sValueListFieldName, oData = null;
		// Search view can be switched for collective search help; reset the mFilterInputData in that case.
		delete this.mFilterInputData;
		// Check if the SmartFilter is present and try to get data for only visible fields from SmartFilter
		// else use the filterModel to get data
		if (this.oFilterProvider && this.oFilterProvider._oSmartFilter) {
			oData = this._getFilterData();
			// oData = this.oFilterProvider._oSmartFilter.getFilterData();
		} else if (this.oFilterModel) {
			oData = this.oFilterModel.getData();
		} else if (this.oODataModel && this.bResolveInOutParams) {
			oData = this.oODataModel.getData(this.sPropertyTypePath, this.oControl.getBindingContext());
		}
		if (this.mInParams && oData) {
			this.mFilterInputData = {};
			this.aFilterField = [];
			for (sLocalFieldName in this.mInParams) {
				if (sLocalFieldName) {
					sValueListFieldName = this.mInParams[sLocalFieldName];
					if (sValueListFieldName !== this.sKey) {
						// Only set IN parameter data if it is non empty
						if (oData[sLocalFieldName]) {
							this.mFilterInputData[sValueListFieldName] = oData[sLocalFieldName];
							this.aFilterField.push(sValueListFieldName);
						}
					}
				}
			}
		}
	};

	/**
	 * Called when data needs to be set back to the SmartFilter from ValueHelp/suggest
	 * @param {Array} aData - array of row data that has be set back
	 * @private
	 */
	BaseValueListProvider.prototype._calculateAndSetFilterOutputData = function(aData) {
		var sLocalFieldName, sValueListFieldName, mFilterOutputData = null, oData, oExistingData, oNewData, i, fFilterDuplicates;
		if (this.mOutParams && aData && (this.oFilterProvider || this.oFilterModel)) {
			mFilterOutputData = {};
			fFilterDuplicates = function(obj) {
				return obj.key === oNewData.key;
			};
			for (sLocalFieldName in this.mOutParams) {
				if (sLocalFieldName) {
					sValueListFieldName = this.mOutParams[sLocalFieldName];
					if (sValueListFieldName !== this.sKey) {
						oExistingData = null;
						i = aData.length;
						while (i--) {
							oData = aData[i];
							// Only set Out parameter data if it exists in the passed data
							if (oData[sValueListFieldName]) {
								oNewData = {
									key: oData[sValueListFieldName]
								};
								if (!mFilterOutputData[sLocalFieldName]) {
									// Get Existing filter data
									if (!oExistingData && this.oFilterModel) {
										oExistingData = this.oFilterModel.getData();
									}
									// if existing data already contains the property as a multi-value --> amend to it
									if (oExistingData && oExistingData[sLocalFieldName] && oExistingData[sLocalFieldName].items) {
										mFilterOutputData[sLocalFieldName] = oExistingData[sLocalFieldName];
									} else {
										mFilterOutputData[sLocalFieldName] = {
											items: []
										};
									}
								}
								// Check for duplicates before adding new data
								if (mFilterOutputData[sLocalFieldName].items.filter(fFilterDuplicates).length <= 0) {
									var bFound = false;

									if (this.oFilterProvider && oExistingData && oExistingData[sLocalFieldName] && oExistingData[sLocalFieldName].ranges) {
										/* eslint-disable no-loop-func */
										oExistingData[sLocalFieldName].ranges.some(function(oRange) {
											if (oRange.operation === "EQ" && oRange.value1 === oNewData.key) {
												bFound = true;
											}

											return bFound;
										});
										/* eslint-enable no-loop-func */
									}

									if (!bFound) {
										mFilterOutputData[sLocalFieldName].items.push(oNewData);
									}
								}
							}
						}
					}
				}
			}

			if (mFilterOutputData) {
				// Use API from FilterProvider if it exists
				if (this.oFilterProvider) {
					this._setFilterData(mFilterOutputData);
					// this.oFilterProvider.setFilterData(mFilterOutputData);

					if (!jQuery.isEmptyObject(mFilterOutputData)) {
						this.fireEvent("valueListChanged", {
							"changes": Object.keys(mFilterOutputData)
						});
					}
				} else if (this.oFilterModel) {
					// try to merge data into the filter model
					this.oFilterModel.setData(mFilterOutputData, true);
				}
			}
		} else if (this.oODataModel && this.bResolveInOutParams) {
			// ODataModel --> assume only 1 value can be set back!
			this._calculateAndSetODataModelOutputData(aData[0]);
		}
	};

	/**
	 * Called when data needs to be set back to the Model (ODataModel) from ValueHelp/suggest
	 * @param {Object} oData - the row data that needs to be set back
	 * @private
	 */
	BaseValueListProvider.prototype._calculateAndSetODataModelOutputData = function(oData) {
		var oBindingContext, sLocalFieldName, sValueListFieldName, sPathToResolve, oValue, mChangedFields = {};
		if (oData && this.mOutParams) {
			oBindingContext = this.oControl.getBindingContext();
			for (sLocalFieldName in this.mOutParams) {
				if (sLocalFieldName) {
					sValueListFieldName = this.mOutParams[sLocalFieldName];
					if (sValueListFieldName !== this.sKey) {
						oValue = oData[sValueListFieldName];
						mChangedFields[sLocalFieldName] = oValue;
						sPathToResolve = this.sPropertyTypePath ? this.sPropertyTypePath + "/" + sLocalFieldName : sLocalFieldName;
						this.oODataModel.setProperty(sPathToResolve, oValue, oBindingContext, true);
					}
				}
			}
			if (mChangedFields && !jQuery.isEmptyObject(mChangedFields)) {
				this.fireEvent("valueListChanged", {
					"changes": mChangedFields
				});
			}
		}
	};

	/**
	 * Destroys the object
	 */
	BaseValueListProvider.prototype.destroy = function() {
		sap.ui.base.EventProvider.prototype.destroy.apply(this, arguments);
		if (this._bCleanupMetadataAnalyser && this._oMetadataAnalyser) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;
		this.oControl = null;
		this.sFieldName = null;
		this.mFilterInputData = null;
		this.aFilterField = null;
		this.sValueListEntitySetName = null;
		this.oODataModel = null;
		this.oFilterModel = null;
		this.oFilterProvider = null;
		this.oPrimaryValueListAnnotation = null;
		this.additionalAnnotations = null;
		this.sDisplayFormat = null;
		this.bSupportBasicSearch = null;
		this.bInitialised = null;
		this._oError = null;
		this.sValueListTitle = null;
		this.sKey = null;
		this._aKeys = null;
		this.mInParams = null;
		this.mOutParams = null;
		this.sDescription = null;
		this.aSelect = null;
		this._aCols = null;
		this.sDDLBDisplayBehaviour = null;
		this.sTokenDisplayBehaviour = null;
		this._oDateFormatSettings = null;

		this.bIsDestroyed = true;
	};

	return BaseValueListProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/BaseValueListProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ValueHelpProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Retrieves the data for a value list from the OData metadata to bind to a given control/aggregation (TODO: take into account Searchsupported +
// ValueList In/Out/InOut parameter to set data)
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ValueHelpProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.ResponsivePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ValueHelpProvider",[
	'jquery.sap.global', 'sap/m/List', 'sap/m/PlacementType', 'sap/m/ResponsivePopover', 'sap/m/StandardListItem', './BaseValueListProvider', 'sap/ui/comp/util/FormatUtil', 'sap/ui/model/json/JSONModel'
], function(jQuery, List, PlacementType, ResponsivePopover, StandardListItem, BaseValueListProvider, FormatUtil, JSONModel) {
	"use strict";

	/**
	 * Retrieves the data for a collection from the OData metadata to bind to a given control/aggregation
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mParams - map containing the control,aggregation,annotation and the oODataModel
	 * @author SAP SE
	 */
	var ValueHelpProvider = BaseValueListProvider.extend("sap.ui.comp.providers.ValueHelpProvider", {
		constructor: function(mParams) {
			if (mParams) {
				this.preventInitialDataFetchInValueHelpDialog = mParams.preventInitialDataFetchInValueHelpDialog;
				this.sTitle = mParams.title;
				this.bSupportMultiselect = !!mParams.supportMultiSelect;
				this.bSupportRanges = mParams.supportRanges;
				this.bIsSingleIntervalRange = mParams.isSingleIntervalRange;
				this.bIsUnrestrictedFilter = mParams.isUnrestrictedFilter;
				this.bTakeOverInputValue = (mParams.takeOverInputValue === false) ? false : true;
				// If field is of type Single Interval -> The dialog should support only 1 interval range selection
				if (this.bIsSingleIntervalRange) {
					this.bSupportRanges = true;
				}
				this._sType = mParams.type;
				this._sMaxLength = mParams.maxLength;
				this._sScale = mParams.scale;
				this._sPrecision = mParams.precision;
			}
			BaseValueListProvider.apply(this, arguments); // Call constructor of base class
			this._onInitialise();
		}
	});

	/**
	 * Initialise the relevant stuff
	 * @private
	 */
	ValueHelpProvider.prototype._onInitialise = function() {
		// Check if ValueHelp is supported by the control
		if (this.oControl.attachValueHelpRequest) {
			this._fVHRequested = function(oEvent) {
				if (!this.bInitialised) {
					return;
				}
				this.oControl = oEvent.getSource();
				this.bForceTriggerDataRetreival = oEvent.getParameter("fromSuggestions");
				if (this.bTakeOverInputValue || this.bForceTriggerDataRetreival) {
					this.sBasicSearchText = oEvent.getSource().getValue();
				}
				this._createValueHelpDialog();
			}.bind(this);
			this.oControl.attachValueHelpRequest(this._fVHRequested);
		}
	};

	/**
	 * Creates the Value Help Dialog
	 * @private
	 */
	ValueHelpProvider.prototype._createValueHelpDialog = function() {
		if (!this.bCreated) {
			this.bCreated = true;
			if (!this._oValueHelpDialogClass) {
				// Create ValueHelpDialog instance lazily
				sap.ui.require([
					'sap/ui/comp/valuehelpdialog/ValueHelpDialog'
				], this._onValueHelpDialogRequired.bind(this));
			} else {
				this._onValueHelpDialogRequired(this._oValueHelpDialogClass);
			}
		}
	};

	/**
	 * Returns the Value Help Dialog title. Either the exiting sTitle or via the oFilterProvider
	 * @private
	 */
	ValueHelpProvider.prototype._getTitle = function() {
		if (this.sTitle) {
			return this.sTitle;
		} else if (this.oFilterProvider) {
			return this.oFilterProvider._determineFieldLabel(this._fieldViewMetadata);
		}
		return "";
	};

	/**
	 * Called once the ValueHelpDialog instance is required
	 * @param {Object} ValueHelpDialog - the ValueHelpDialog class object
	 * @private
	 */
	ValueHelpProvider.prototype._onValueHelpDialogRequired = function(ValueHelpDialog) {
		this._oValueHelpDialogClass = ValueHelpDialog;
		var sValueHelpDialogId = this.oControl.getId() + "-valueHelpDialog";
		this.oValueHelpDialog = new ValueHelpDialog(sValueHelpDialogId, {
			stretch: sap.ui.Device.system.phone,
			basicSearchText: this.sBasicSearchText,
			supportRangesOnly: this.bIsSingleIntervalRange || !this.oPrimaryValueListAnnotation,
			supportMultiselect: this.bSupportMultiselect,
			title: this._getTitle(),
			supportRanges: this.bSupportRanges,
			displayFormat: this.sDisplayFormat,
			ok: this._onOK.bind(this),
			cancel: this._onCancel.bind(this),
			afterClose: function() {
				if (this.oPrimaryValueListAnnotation) {
					this._resolveAnnotationData(this.oPrimaryValueListAnnotation);
				}
				this.oValueHelpDialog.destroy();
				this.bCreated = false;
				if (this.oControl && this.oControl.focus && !sap.ui.Device.system.phone) {
					this.oControl.focus();
				}
			}.bind(this)
		});
		this.oControl.addDependent(this.oValueHelpDialog);

		this.oValueHelpDialog.suggest(function(oControl, sFieldName) {
			if (this.oPrimaryValueListAnnotation) {
				// without oPrimaryValueListAnnotation we do not have to create the ValueListProvider
				jQuery.sap.require("sap.ui.comp.providers.ValueListProvider");
				oControl.setShowSuggestion(true);
				oControl.setFilterSuggests(false);
				return new sap.ui.comp.providers.ValueListProvider({
					control: oControl,
					fieldName: sFieldName,
					typeAheadEnabled: true,
					aggregation: "suggestionRows",
					displayFormat: this.sDisplayFormat,
					displayBehaviour: this.sTokenDisplayBehaviour,
					resolveInOutParams: false,
					annotation: this.oPrimaryValueListAnnotation,
					model: this.oODataModel,
					enableShowTableSuggestionValueHelp: false
				});
			}
		}.bind(this));

		// Enable the Dialog to show only 1 interval range selection
		if (this.bIsSingleIntervalRange) {
			this.oValueHelpDialog.setIncludeRangeOperations([
				sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ
			], this._sType);
			this.oValueHelpDialog.setMaxIncludeRanges(1);
			this.oValueHelpDialog.setMaxExcludeRanges(0);
			this._updateInitialInterval();
		} else if ((this._sType === "date" || this._sType === "time") && !this.bIsUnrestrictedFilter) {
			// Enable the Dialog to show only multiple "EQ" date selection
			this.oValueHelpDialog.setIncludeRangeOperations([
				sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ
			], this._sType);
			this.oValueHelpDialog.setMaxExcludeRanges(0);
		}

		if (this.oControl.$() && this.oControl.$().closest(".sapUiSizeCompact").length > 0) {
			// check if the Token field runs in Compact mode. We either find via closed a element with class sapUiSizeCompact or the body has such
			// class
			this.oValueHelpDialog.addStyleClass("sapUiSizeCompact");
		} else if (this.oControl.$() && this.oControl.$().closest(".sapUiSizeCozy").length > 0) {
			this.oValueHelpDialog.addStyleClass("sapUiSizeCozy");
		} else if (jQuery("body").hasClass("sapUiSizeCompact")) {
			this.oValueHelpDialog.addStyleClass("sapUiSizeCompact");
		} else {
			this.oValueHelpDialog.addStyleClass("sapUiSizeCozy");
		}

		if (this.bSupportRanges) {
			this.oValueHelpDialog.setRangeKeyFields([
				{
					label: this._getTitle(),
					key: this.sFieldName,
					type: this._sType,
					scale: this._sScale,
					precision: this._sPrecision,
					maxLength: this._sMaxLength
				}
			]);
		}
		if (!(this.bIsSingleIntervalRange || !this.oPrimaryValueListAnnotation)) {
			this.oValueHelpDialog.setModel(this.oODataModel);
			this._createAdditionalValueHelpControls();
			this._createCollectiveSearchControls();
		}

		// pass the existing tokens to the value help dialog
		if (this.oControl.getTokens) {
			var aTokens = this.oControl.getTokens();
			this.oValueHelpDialog.setTokens(aTokens);
		}

		this.oValueHelpDialog.open();
	};

	/**
	 * Updated the ValueHelpDialog with the initial value of the interval token
	 * @private
	 */
	ValueHelpProvider.prototype._updateInitialInterval = function() {
		var sIntervalValue = this.oControl.getValue(), oToken, oRange, aValues;
		if (sIntervalValue) {
			oToken = new sap.m.Token();
			oRange = {
				exclude: false,
				keyField: this.sFieldName
			};

			if (this._sType === "numeric") {
				aValues = FormatUtil.parseFilterNumericIntervalData(sIntervalValue);
			} else {
				aValues = sIntervalValue.split("-");
			}

			if (aValues && aValues.length === 2) {
				oRange.operation = "BT";
				oRange.value1 = aValues[0];
				oRange.value2 = aValues[1];
			} else {
				oRange.operation = "EQ";
				oRange.value1 = sIntervalValue;
			}

			oToken.data("range", oRange);
		}
		if (oToken) {
			this.oValueHelpDialog.setTokens([
				oToken
			]);
		}
	};

	/**
	 * Creates the necessary control(s) for Collective Search Help on the ValueHelpDialog
	 * @private
	 */
	ValueHelpProvider.prototype._createCollectiveSearchControls = function() {
		var oPopOver, oList, oItem, i = 0, len = 0, fOnSelect, oAdditionalAnnotation, oResourceBundle;
		if (this.additionalAnnotations && this.additionalAnnotations.length) {
			fOnSelect = function(oEvt) {
				var oSource = oEvt.getParameter("listItem"), oAnnotation;
				oPopOver.close();
				if (oSource) {
					oAnnotation = oSource.data("_annotation");
					if (oAnnotation) {
						this._triggerAnnotationChange(oAnnotation);
					}
				}
			}.bind(this);
			// Selection Controls
			oList = new List({
				mode: sap.m.ListMode.SingleSelectMaster,
				selectionChange: fOnSelect
			});
			oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

			oPopOver = new ResponsivePopover({
				placement: PlacementType.Bottom,
				showHeader: true,
				contentHeight: "30rem",
				title: oResourceBundle.getText("COLLECTIVE_SEARCH_SELECTION_TITLE"),
				content: [
					oList
				],
				afterClose: function() {
					this.oValueHelpDialog._rotateSelectionButtonIcon(false);
				}.bind(this)
			});

			oItem = new StandardListItem({
				title: this.oPrimaryValueListAnnotation.valueListTitle
			});
			oItem.data("_annotation", this.oPrimaryValueListAnnotation);
			oList.addItem(oItem);
			oList.setSelectedItem(oItem);

			this.oValueHelpDialog.oSelectionTitle.setText(this.oPrimaryValueListAnnotation.valueListTitle);
			this.oValueHelpDialog.oSelectionTitle.setTooltip(this.oPrimaryValueListAnnotation.valueListTitle);
			len = this.additionalAnnotations.length;
			for (i = 0; i < len; i++) {
				oAdditionalAnnotation = this.additionalAnnotations[i];
				oItem = new StandardListItem({
					title: oAdditionalAnnotation.valueListTitle
				});
				oItem.data("_annotation", oAdditionalAnnotation);
				oList.addItem(oItem);
			}
			this.oValueHelpDialog.oSelectionButton.setVisible(true);
			this.oValueHelpDialog.oSelectionTitle.setVisible(true);
			this.oValueHelpDialog.oSelectionButton.attachPress(function() {
				if (!oPopOver.isOpen()) {
					this.oValueHelpDialog._rotateSelectionButtonIcon(true);
					oPopOver.openBy(this.oValueHelpDialog.oSelectionButton);
				} else {
					oPopOver.close();
				}
			}.bind(this));
		}
	};

	ValueHelpProvider.prototype._triggerAnnotationChange = function(oAnnotation) {
		this.oValueHelpDialog.oSelectionTitle.setText(oAnnotation.valueListTitle);
		this.oValueHelpDialog.oSelectionTitle.setTooltip(oAnnotation.valueListTitle);
		this.oValueHelpDialog.resetTableState();
		this._resolveAnnotationData(oAnnotation);
		this._createAdditionalValueHelpControls();
	};

	/**
	 * Create the SmartFilter control on the Value Help Dialog and set the model
	 * @private
	 */
	ValueHelpProvider.prototype._createAdditionalValueHelpControls = function() {
		var sBasicSearchFieldName = null;
		this.oValueHelpDialog.setKey(this.sKey);
		this.oValueHelpDialog.setKeys(this._aKeys);
		this.oValueHelpDialog.setDescriptionKey(this.sDescription);
		this.oValueHelpDialog.setTokenDisplayBehaviour(this.sTokenDisplayBehaviour);

		/*
		 * This is necessary since, ValueHelpDialog control expects columns for table would be filled from a model called columns with column data!
		 */
		// init the columns model for the table
		var oColModel = new JSONModel();
		oColModel.setData({
			cols: this._aCols
		});
		this.oValueHelpDialog.setModel(oColModel, "columns");

		// Set the Basic search field if search is supported
		if (this.bSupportBasicSearch) {
			sBasicSearchFieldName = this.sKey;
		}

		// Remove the old collectiveSearch from the existing filterbar and destroy the filterbar instance
		if (this.oSmartFilterBar) {
			this.oSmartFilterBar._setCollectiveSearch(null);
			this.oSmartFilterBar.destroy();
		}

		// Create the smart filter
		this.oSmartFilterBar = new sap.ui.comp.smartfilterbar.SmartFilterBar(this.oValueHelpDialog.getId() + "-smartFilterBar", {
			entitySet: this.sValueListEntitySetName,
			basicSearchFieldName: sBasicSearchFieldName,
			enableBasicSearch: this.bSupportBasicSearch,
			advancedMode: true,
			showGoOnFB: !sap.ui.Device.system.phone,
			expandAdvancedArea: (!this.bForceTriggerDataRetreival && sap.ui.Device.system.desktop),
			search: this._onFilterBarSearchPressed.bind(this),
			reset: this._onFilterBarResetPressed.bind(this),
			filterChange: this._onFilterBarFilterChange.bind(this),
			initialise: this._onFilterBarInitialise.bind(this)
		});
		if (this._oDateFormatSettings) {
			this.oSmartFilterBar.data("dateFormatSettings", this._oDateFormatSettings);
		}
		// This has to be set before the SmartFilter is initialised!
		this.oSmartFilterBar.isRunningInValueHelpDialog = true;
		// Set SmartFilter on ValueHelp Dialog
		this.oValueHelpDialog.setFilterBar(this.oSmartFilterBar);
	};

	/**
	 * Called when the filter data is changed in SmartFilter
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarFilterChange = function() {
		if (this.oValueHelpDialog.isOpen()) {
			var oTable = this.oValueHelpDialog.getTable();
			if (oTable) {
				oTable.setShowOverlay(true);
				this.oValueHelpDialog.TableStateSearchData();
			}
		}
	};

	/**
	 * Called when the search is triggered in SmartFilter
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarSearchPressed = function() {
		this._rebindTable();
	};

	/**
	 * Binds the table taking current filters and parameters into account
	 * @private
	 */
	ValueHelpProvider.prototype._rebindTable = function() {
		var aFilters, mParameters, mBindingParams, oTable, aEntitySetFields, oSorter;
		aFilters = this.oSmartFilterBar.getFilters();
		mParameters = this.oSmartFilterBar.getParameters() || {};
		if (this.aSelect && this.aSelect.length) {
			mParameters["select"] = this.aSelect.toString();
		}

		// Check first if property can be sorted
		if (this.sKey && this._oMetadataAnalyser) {
			aEntitySetFields = this._oMetadataAnalyser.getFieldsByEntitySetName(this.sValueListEntitySetName);
			for (var i = 0; i < aEntitySetFields.length; i++) {
				if (aEntitySetFields[i].name === this.sKey && aEntitySetFields[i].sortable !== false) {
					oSorter = new sap.ui.model.Sorter(this.sKey);
					break;
				}
			}
		}

		mBindingParams = {
			path: "/" + this.sValueListEntitySetName,
			filters: aFilters,
			parameters: mParameters,
			sorter: oSorter,
			events: {
				dataReceived: function(oEvt) {
					this.oValueHelpDialog.TableStateDataFilled();
					oTable.setBusy(false);
					var oBinding = oEvt.getSource(), iBindingLength;
					if (oBinding && this.oValueHelpDialog && this.oValueHelpDialog.isOpen()) {
						iBindingLength = oBinding.getLength();
						// Infinite number of requests are triggered if an error occurs, so don't update if no data is present
						// The below code is mainly required for token handling on the ValueHelpDialog.
						if (iBindingLength) {
							this.oValueHelpDialog.update();
						}
					}
				}.bind(this)
			}
		};

		oTable = this.oValueHelpDialog.getTable();
		oTable.setShowOverlay(false);
		this.oValueHelpDialog.TableStateDataSearching();
		oTable.setBusy(true);
		if (oTable instanceof sap.m.Table) {
			mBindingParams.factory = function(sId, oContext) {
				var aCols = oTable.getModel("columns").getData().cols;
				return new sap.m.ColumnListItem({
					cells: aCols.map(function(column) {
						var colname = column.template;
						return new sap.m.Label({
							text: "{" + colname + "}"
						});
					})
				});
			};
			oTable.bindItems(mBindingParams);
		} else {
			oTable.bindRows(mBindingParams);
		}
	};

	/**
	 * Called when the reset button was clicked in the SmartFilter
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarResetPressed = function() {
		this._calculateFilterInputData();
		if (this.oSmartFilterBar) {
			this.oSmartFilterBar.setFilterData(this.mFilterInputData);
		}
	};

	/**
	 * Called when the filterbar is initialised
	 * @private
	 */
	ValueHelpProvider.prototype._onFilterBarInitialise = function() {
		var oBasicSearchField = null;
		// (Re-)Set the data to default
		this._onFilterBarResetPressed();

		// Update the basic search text!
		if (this.oSmartFilterBar && this.oSmartFilterBar.getBasicSearchControl) {
			oBasicSearchField = this.oSmartFilterBar.getBasicSearchControl();
			if (oBasicSearchField) {
				oBasicSearchField.setValue(this.sBasicSearchText);

				if (sap.ui.Device.system.phone && oBasicSearchField instanceof sap.m.SearchField) {
					oBasicSearchField.setShowSearchButton(true);
				}
			}
		}
		// trigger the data request if the fetch was initiated from Suggest -or- if data fetch is not prevented
		if (!this.preventInitialDataFetchInValueHelpDialog || this.bForceTriggerDataRetreival) {
			this._rebindTable();
			this.bForceTriggerDataRetreival = false;
		}
	};

	/**
	 * Callback method after OK is clicked on the VH Dialog
	 * @param {object} oControlEvent - the event data from the control
	 * @private
	 */
	ValueHelpProvider.prototype._onOK = function(oControlEvent) {
		var aTokens = oControlEvent.getParameter("tokens"), oRangeData, sKey, i = 0, aRowData = [], oRowData = null;
		// First close the dialog, since when used in an aggregation - some model updates (setting IN/OUT params to ODataModel) destroy this
		// instance/control!
		this._onCancel();
		if (this.oControl instanceof sap.m.MultiInput) {
			// Clearing typed text if value is not selected from suggestion list but rather from ValueHelpDialog
			this.oControl.setValue("");
			this.oControl.setTokens(aTokens);
			// this.oControl.fireTokenChange({
			// type: "tokensChanged"
			// });
			i = aTokens.length;
			while (i--) {
				oRowData = aTokens[i].data("row");
				if (oRowData) {
					aRowData.push(oRowData);
				}
			}
		} else {
			if (aTokens[0]) {
				// Single Interval
				if (this.bIsSingleIntervalRange) {
					oRangeData = aTokens[0].data("range");
					if (oRangeData) {
						// check if data is in the format: "2005-2014"
						if (oRangeData.operation === "BT") {
							sKey = oRangeData.value1 + "-" + oRangeData.value2;
						} else {
							sKey = oRangeData.value1;
						}
					}
				} else {
					sKey = aTokens[0].getKey();
				}
				oRowData = aTokens[0].data("row");
				if (oRowData) {
					aRowData.push(oRowData);
				}
			}
			this.oControl.setValue(sKey);

			// Manually trigger the change event on sapUI5 control since it doesn't do this internally on setValue!
			this.oControl.fireChange({
				value: sKey,
				validated: true
			});
		}
		this._calculateAndSetFilterOutputData(aRowData);
	};

	/**
	 * Callback method after Cancel is clicked on the VH Dialog
	 * @private
	 */
	ValueHelpProvider.prototype._onCancel = function() {
		this.oValueHelpDialog.close();
		this.oValueHelpDialog.setModel(null);
	};

	/**
	 * Destroys the object
	 */
	ValueHelpProvider.prototype.destroy = function() {
		if (this.oControl && this.oControl.detachValueHelpRequest) {
			this.oControl.detachValueHelpRequest(this._fVHRequested);
			this._fVHRequested = null;
		}
		BaseValueListProvider.prototype.destroy.apply(this, arguments);
		// Destroy other local data
		if (this.oValueHelpDialog) {
			this.oValueHelpDialog.destroy();
			this.oValueHelpDialog = null;
		}
		if (this.oSmartFilterBar) {
			this.oSmartFilterBar.destroy();
			this.oSmartFilterBar = null;
		}
		this.sTitle = null;
		this._fieldViewMetadata = null;
		this._oValueHelpDialogClass = null;
	};

	return ValueHelpProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/ValueHelpProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ValueListProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// -----------------------------------------------------------------------------
// Retrieves the data for a value list from the OData metadata to bind to a given control/aggregation
//
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ValueListProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Column'); // unlisted dependency retained
jQuery.sap.require('sap.m.ColumnListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ValueListProvider",[
	'jquery.sap.global', 'sap/m/Column', 'sap/m/ColumnListItem', 'sap/m/Text', 'sap/m/Token', './BaseValueListProvider', 'sap/ui/core/Item', 'sap/ui/model/Filter', 'sap/ui/model/Sorter', 'sap/ui/model/json/JSONModel', 'sap/ui/comp/util/FormatUtil'
], function(jQuery, Column, ColumnListItem, Text, Token, BaseValueListProvider, Item, Filter, Sorter, JSONModel, FormatUtil) {
	"use strict";

	/**
	 * Retrieves the data for a collection from the OData metadata to bind to a given control/aggregation
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mParams - map containing the control,aggregation,annotation and the oODataModel
	 * @author SAP SE
	 */
	var ValueListProvider = BaseValueListProvider.extend("sap.ui.comp.providers.ValueListProvider", {
		constructor: function(mParams) {
			if (mParams) {
				this.sAggregationName = mParams.aggregation;
				this.bTypeAheadEnabled = mParams.typeAheadEnabled;
				this.bEnableShowTableSuggestionValueHelp = mParams.enableShowTableSuggestionValueHelp === undefined ? true : mParams.enableShowTableSuggestionValueHelp;
			}
			BaseValueListProvider.apply(this, arguments);
			this._onInitialise();
		}
	});

	/**
	 * Initialise the relevant stuff
	 * @private
	 */
	ValueListProvider.prototype._onInitialise = function() {

		if (!this.bTypeAheadEnabled) {
			/**
			 * Delay the fetch of data for standard dropdowns until the rendering is done! This inherently causes only the relevant data to be fetched
			 * from the backend!
			 */
			this.oAfterRenderingEventDelegate = {
				onAfterRendering: this._onMetadataInitialised
			};
			this.oControl.addEventDelegate(this.oAfterRenderingEventDelegate, this);

		} else if (this.oControl.attachSuggest) {
			// Check if Suggest is supported by the control
			this._fSuggest = function(oEvent) {
				this.oControl = oEvent.getSource();
				if (!this.bInitialised) {
					return;
				}
				if (!this.oTemplate || !this.oControl.data("_hassuggestionTemplate")) {
					this._createSuggestionTemplate();
				}
				var sSearchText = oEvent.getParameter("suggestValue");
				this._fetchData(sSearchText);
			}.bind(this);
			this.oControl.attachSuggest(this._fSuggest);

			this._handleSelect();
		}
	};

	/**
	 * Metadata is available --> Initialise the relevant stuff
	 * @private
	 */
	ValueListProvider.prototype._onMetadataInitialised = function() {
		if (this.bInitialised) {
			if (this.oAfterRenderingEventDelegate) {
				this.oControl.removeEventDelegate(this.oAfterRenderingEventDelegate, this);
				delete this.oAfterRenderingEventDelegate;
			}

			this._createDropDownTemplate();
			this._fetchData();
		}
	};

	ValueListProvider.prototype._isSortable = function(sName) {
		if (this.oPrimaryValueListAnnotation) {
			for (var i = 0; i < this.oPrimaryValueListAnnotation.valueListFields.length; i++) {
				if (this.oPrimaryValueListAnnotation.valueListFields[i].name === sName) {
					return this.oPrimaryValueListAnnotation.valueListFields[i].sortable !== false;
				}
			}

			return false;
		}

		return true;
	};

	/**
	 * Creates a template for drop down fields
	 * @private
	 */
	ValueListProvider.prototype._createDropDownTemplate = function() {
		this._oTemplate = new Item({
			key: "{" + this.sKey + "}",
			text: this._getDDLBTextBindingPath()
		});

		this._oSorter = null;

		// ComboBox/MultiComboBox:
		// Sort based on key if displayBehaviour is based on id
		if (this.sDDLBDisplayBehaviour === sap.ui.comp.smartfilterbar.DisplayBehaviour.idOnly || this.sDDLBDisplayBehaviour === sap.ui.comp.smartfilterbar.DisplayBehaviour.idAndDescription) {

			if (this._isSortable(this.sKey)) {
				this._oSorter = new Sorter(this.sKey);
			}
		} else {
			// Sort based on description by default
			if (this._isSortable(this.sDescription)) {
				this._oSorter = new Sorter(this.sDescription);
			} else if ((this.sDescription !== this.sKey) && this._isSortable(this.sKey)) {
				this._oSorter = new Sorter(this.sKey);
			}
		}
	};

	/**
	 * Creates a template for multi-column suggest
	 * @private
	 */
	ValueListProvider.prototype._createSuggestionTemplate = function() {
		var i = 0, iLen = 0, oTooltip, fSuggestWidth = 0;
		// Create a template
		this._oTemplate = new ColumnListItem();
		if (this._aCols) {
			// remove any exiting columns
			this.oControl.removeAllSuggestionColumns();
			iLen = this._aCols.length;
			for (i = 0; i < iLen; i++) {
				var bDemandPopin = false, sMinScreenWidth = "1px", sWidth = this._aCols[i].width;
				// In the phone mode don't set a fixed width for columns;
				// instead enable demand popin when there are over 2 columns, and not enough space
				if (sap.ui.Device.system.phone) {
					sWidth = undefined;
					if (i >= 2) {
						bDemandPopin = true;
						sMinScreenWidth = (i + 1) * 10 + "rem";
					}
				}
				// add Column headers
				this.oControl.addSuggestionColumn(new Column({
					header: new Text({
						wrapping: false,
						text: this._aCols[i].label,
						tooltip: this._aCols[i].tooltip || this._aCols[i].label
					}),
					demandPopin: bDemandPopin,
					popinDisplay: sap.m.PopinDisplay.Inline,
					minScreenWidth: sMinScreenWidth,
					width: sWidth
				}));
				// Tooltip is only possible for certain (string) fields
				// ignore it for all types other than string!
				oTooltip = null;
				if (this._aCols[i].type === "string") {
					oTooltip = {
						path: this._aCols[i].template
					};
				}
				// Add cells to the template
				this._oTemplate.addCell(new Text({
					wrapping: false,
					text: {
						path: this._aCols[i].template,
						type: this._aCols[i].oType
					},
					tooltip: oTooltip
				}));

				// we calculate the sum of all columns width (assumption is that the sWidth is always given in em)
				if (sWidth) {
					fSuggestWidth += parseFloat(sWidth.substring(0, sWidth.length - 2));
				}
			}

			// set the total width of all columns as Width for the suggest popover.
			// Add a small delta based on number of columns since there seems to be a padding added for some browsers
			if (fSuggestWidth > 0) {
				// BCP: 1770294638
				// this.oControl.setMaxSuggestionWidth(fSuggestWidth + iLen + "em");
				this.oControl.setProperty('maxSuggestionWidth', fSuggestWidth + iLen + "em", true);
			}
		}
		this.oControl.data("_hassuggestionTemplate", true);
	};

	/**
	 * Get Text binding path for dropdowns according to the DisplayBehaviour
	 * @private
	 * @returns {String} the DDLB text binding path
	 */
	ValueListProvider.prototype._getDDLBTextBindingPath = function() {
		return FormatUtil.getFormattedBindingExpressionFromDisplayBehaviour(this.sDDLBDisplayBehaviour, this.sKey, this.sDescription);
	};

	/**
	 * Handle validation/selection of Item
	 * @private
	 */
	ValueListProvider.prototype._handleSelect = function() {
		var fHandleRowSelect = function(oDataModelRow, fCallback) {
			var sKey, sText, oToken;
			if (oDataModelRow) {
				sKey = oDataModelRow[this.sKey];
				sText = oDataModelRow[this.sDescription];
			}
			// Key found
			if (sKey || (sKey === "")) {
				// MultiInput field --> Create a token with the selected key
				if (this.oControl.addToken) {
					// Format the text as per the displayBehaviour
					sText = FormatUtil.getFormattedExpressionFromDisplayBehaviour(this.sTokenDisplayBehaviour, sKey, sText);
					oToken = new Token({
						key: sKey,
						text: sText,
						tooltip: sText
					});
					oToken.data("row", oDataModelRow);
					if (fCallback) {
						fCallback(oToken);
					}
					// Clear the ValidationText
					delete this.oControl.__sValidationText;
				} else {
					// normal input field --> just set the value
					this.oControl.setValue(sKey);
					// Manually trigger the change event on sapUI5 control since it doesn't do this internally on setValue!
					this.oControl.fireChange({
						value: sKey,
						validated: true
					});
				}
			}
			// do this last --> since when used in an aggregation - some model updates (setting IN/OUT params to ODataModel) destroy this
			// instance/control!
			this._calculateAndSetFilterOutputData([
				oDataModelRow
			]);

		}.bind(this);
		var fAfterTokenValidate = function() {
			// trigger search on the SmartFilter if search was pending
			if (this.oFilterProvider && this.oFilterProvider._oSmartFilter && this.oFilterProvider._oSmartFilter.bIsSearchPending && this.oFilterProvider._oSmartFilter.search) {
				if (this.oFilterProvider._oSmartFilter.getLiveMode && this.oFilterProvider._oSmartFilter.getLiveMode()) {
					return;
				}

				this.oFilterProvider._oSmartFilter.search();
			}
		}.bind(this);
		// Selection handling has to be done manually for Multi-Column suggest!
		// add Validators --> Only available for Multi-Input
		if (this.oControl.addValidator) {
			var aValidators = this.oControl._tokenizer ? this.oControl._tokenizer._aTokenValidators.slice() : [];
			this.oControl.removeAllValidators();

			this._fValidator = function(oData) {
				if (!this.bInitialised) {
					return;
				}

				// queue the validator calls
				if (aValidators) {
					var oToken;
					aValidators.some(function(fValidator) {
						oToken = fValidator(oData);
						return oToken;
					}, this);

					if (oToken) {
						return oToken;
					}
				}

				var oRow = oData.suggestionObject, oDataModelRow, sInput = oData.text, aFilters = [], mParams;
				// Selection via suggestion row --> no round trip needed
				if (oRow) {
					// Get the actual datamodel row
					oDataModelRow = this.oODataModel.getData(oRow.getBindingContextPath());
					fHandleRowSelect(oDataModelRow, oData.asyncCallback);
				} else if (sInput) {
					// Validation required from backend
					// Check if input needs to be converted to upper case
					if (this.sDisplayFormat === "UpperCase") {
						sInput = sInput.toUpperCase();
					}
					// Check if the entered input text is same as the ValidationText
					if (this.oControl.__sValidationText !== sInput) {
						// Store the input as Validation text
						this.oControl.__sValidationText = sInput;
						// Set flag to indicate token validation is in progress
						this.oControl.__bValidatingToken = true;
						this._calculateFilterInputData();
						if (this.mFilterInputData && this.aFilterField) {
							aFilters = sap.ui.comp.smartfilterbar.FilterProvider.generateFilters(this.aFilterField, this.mFilterInputData);
						}
						aFilters.push(new Filter(this.sKey, sap.ui.model.FilterOperator.EQ, sInput));
						if (this.bSupportBasicSearch) {
							mParams = {
								"search-focus": this.sKey
							};
						}
						this.oODataModel.read("/" + this.sValueListEntitySetName, {
							filters: aFilters,
							urlParameters: mParams,
							success: function(oResponseData, response) {
								var oResultRow = oResponseData;
								// first remove the token validation flag
								delete this.oControl.__bValidatingToken;
								if (oResponseData) {
									// Check if result has rows
									if (oResponseData.results && oResponseData.results.length >= 1) {
										// handle response for creating tokens only if 1 unique result exists!
										if (oResponseData.results.length === 1) {
											oResultRow = oResponseData.results[0];
										}
										if (this.oControl.data("__validationError")) {
											this.oControl.data("__validationError", null);
											this.oControl.setValueState("None");
										}
									} else {
										this.oControl.setValueState("Error");
										this.oControl.data("__validationError", true);
									}
									// If returned row has the key do the selection!
									if (oResultRow && oResultRow[this.sKey]) {
										fHandleRowSelect(oResultRow, oData.asyncCallback);
									}
								}
								// Trigger after token validation handling
								fAfterTokenValidate();
							}.bind(this),
							error: function() {
								// Clear previous validation error state if current validation fails!
								if (this.oControl.data("__validationError")) {
									this.oControl.setValueState("None");
								}
								// Remove the token validation flag
								delete this.oControl.__bValidatingToken;
								// Trigger after token validation handling
								fAfterTokenValidate();
							}.bind(this)
						});
					} else {
						// Re-set the error state if same value is entered again!
						if (this.oControl.data("__validationError")) {
							this.oControl.setValueState(sap.ui.core.ValueState.Error);
						}
					}
				}
			}.bind(this);
			this.oControl.addValidator(this._fValidator);
		} else if (this.oControl.attachSuggestionItemSelected) {
			this._fSuggestionItemSelected = function(oEvent) {
				var oRow = oEvent.getParameter("selectedRow"), oDataModelRow;
				// MultiColumn Suggest
				if (oRow) {
					// Get the actual datamodel row
					oDataModelRow = oRow.getModel().getData(oRow.getBindingContextPath());
					fHandleRowSelect(oDataModelRow);
				}
			};
			// Single-Input --> just enable selection handling
			this.oControl.attachSuggestionItemSelected(this._fSuggestionItemSelected);
		}
		// custom result filter function for tabular suggestions - selection text;
		// the returned result will be shown on the input when the user uses the arrow key on suggest
		this.oControl.setRowResultFunction(function(oSelectedItem) {
			var oContext, sResult = "";
			if (oSelectedItem) {
				oContext = oSelectedItem.getBindingContext();
			}
			if (oContext && this.sKey) {
				sResult = oContext.getProperty(this.sKey);
			}
			return sResult;
		}.bind(this));
	};

	/**
	 * Bind the control to internally read the data (ODataModel takes care of this) from backend with optional search text to filter data
	 * @param {object} sSearchText - the optional search text
	 * @private
	 */
	ValueListProvider.prototype._fetchData = function(sSearchText) {
		var mParams = {}, aFilters = [], length, oEvents;
		if (this.bTypeAheadEnabled) {
			// Convert search text to UpperCase if displayFormat = "UpperCase"
			if (sSearchText && this.sDisplayFormat === "UpperCase") {
				sSearchText = sSearchText.toUpperCase();
			}
			if (this.bSupportBasicSearch) {
				mParams["custom"] = {
					"search-focus": this.sKey,
					"search": sSearchText
				};
			}
			this._calculateFilterInputData();
			if (this.mFilterInputData && this.aFilterField) {
				aFilters = sap.ui.comp.smartfilterbar.FilterProvider.generateFilters(this.aFilterField, this.mFilterInputData, {
					dateSettings: this._oDateFormatSettings
				});
			}
			// If SearchSupported = false; create a $filter for the keyfield with a StartsWith operator for the typed in/search text
			if (!this.bSupportBasicSearch) {
				aFilters.push(new Filter(this.sKey, sap.ui.model.FilterOperator.StartsWith, sSearchText));
			}
			// Restrict to 10 records for type Ahead
			length = 10;
			if (this.bEnableShowTableSuggestionValueHelp) {
				// Hide the Show All Items button if the number if items is less than the length (restriction)
				oEvents = {
					dataReceived: function(oEvent) {
						var oBinding = oEvent.getSource(), iBindingLength;
						if (oBinding) {
							iBindingLength = oBinding.getLength();
							if (iBindingLength && iBindingLength <= length) {
								this.oControl.setShowTableSuggestionValueHelp(false);
							} else {
								this.oControl.setShowTableSuggestionValueHelp(true);
							}
						}
					}.bind(this)
				};
			} else {
				// Hide the Show All Items as per configuration
				this.oControl.setShowTableSuggestionValueHelp(false);
			}
		}

		if (this.aSelect && this.aSelect.length) {
			mParams["select"] = this.aSelect.toString();
		}

		if (!this.sValueListEntitySetName) {
			jQuery.sap.log.error("ValueListProvider", "Empty sValueListEntitySetName for " + this.sAggregationName + " binding! (missing primaryValueListAnnotation)");
		}

		// Bind the specified aggregation with valueList path in the model
		this.oControl.bindAggregation(this.sAggregationName, {
			path: "/" + this.sValueListEntitySetName,
			length: length,
			parameters: mParams,
			filters: aFilters,
			sorter: this._oSorter,
			events: oEvents,
			template: this._oTemplate,
			templateShareable: false
		});
	};

	/**
	 * Destroys the object
	 */
	ValueListProvider.prototype.destroy = function() {
		if (this.oControl) {
			if (this.oControl.detachSuggest) {
				this.oControl.detachSuggest(this._fSuggest);
				this._fSuggest = null;
			}
			if (this.oControl.removeValidator) {
				this.oControl.removeValidator(this._fValidator);
				this._fValidator = null;
			} else if (this.oControl.detachSuggestionItemSelected) {
				this.oControl.detachSuggestionItemSelected(this._fSuggestionItemSelected);
				this._fSuggestionItemSelected = null;
			}
			this.oControl.unbindAggregation(this.sAggregationName);
			this.oControl.data("_hassuggestionTemplate", false);
			delete this.oControl.__sValidationText;
			delete this.oControl.__bValidatingToken;
		}
		BaseValueListProvider.prototype.destroy.apply(this, arguments);
		// Destroy other local data
		if (this.oJsonModel) {
			this.oJsonModel.destroy();
			this.oJsonModel = null;
		}
		this._oTemplate = null;
		this.sAggregationName = null;
		this.bTypeAheadEnabled = null;
		this._oSorter = null;
	};

	return ValueListProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/ValueListProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ControlFactoryBase') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Base class for factory implementations that create controls that are hosted by <code>sap.ui.comp.smartfield.SmartField</code>.
 *
 * @name sap.ui.comp.smartfield.ControlFactoryBase
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ControlFactoryBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ControlFactoryBase",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/ui/comp/util/FormatUtil",
	"sap/ui/comp/providers/ValueHelpProvider",
	"sap/ui/comp/providers/ValueListProvider",
	"sap/ui/comp/smartfield/BindingUtil",
	"sap/m/HBox"
], function(jQuery, BaseObject, FormatUtil, ValueHelpProvider, ValueListProvider, BindingUtil, HBox) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.model.Model} oModel the model currently used
	 * @param {sap.ui.core.Control} oParent the parent control
	 */
	var ControlFactoryBase = BaseObject.extend("sap.ui.comp.smartfield.ControlFactoryBase", {
		constructor: function(oModel, oParent) {
			BaseObject.apply(this, arguments);
			this.sName = "ControlFactoryBase";
			this._oModel = oModel;
			this._oParent = oParent;
			this._oBinding = new BindingUtil();
			this._aProviders = [];
			this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
		}
	});

	/**
	 * Creates a control instance.
	 *
	 * @param {boolean} bBlockSmartLinkCreation if <code>true</code>, a <code>SmartLink</code> will not be created
	 * @returns {sap.ui.core.Control} the new control instance or <code>null</code>, if no control could be determined
	 * @public
	 */
	ControlFactoryBase.prototype.createControl = function(bBlockSmartLinkCreation) {
		var sMethod, oControl;

		sMethod = this._getCreator(bBlockSmartLinkCreation);

		if (sMethod) {
			oControl = this[sMethod]();

			this._addAriaLabelledBy(oControl);

			if (oControl && oControl.onCreate) {
				this[oControl.onCreate](oControl.control, oControl.params);
			}
		}

		return oControl;
	};

	ControlFactoryBase.prototype._addAriaLabelledBy = function(oControl) {
		var oTargetControl;

		if ((this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.None) || (this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.Form) || (this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.SmartFormGrid)) {

			if (oControl) {
				oTargetControl = oControl.control;

				if (oTargetControl instanceof HBox) {

					if (oTargetControl.getItems().length > 0) {
						oTargetControl = oTargetControl.getItems()[0];
					}
				}
			}

			if (oTargetControl && oTargetControl.addAriaLabelledBy && this._oParent.getAriaLabelledBy().length > 0) {
				oTargetControl.removeAllAriaLabelledBy();
				this._oParent.getAriaLabelledBy().forEach(function(vAriaLabelledBy) {
					oTargetControl.addAriaLabelledBy(vAriaLabelledBy);
				});
			}
		}
	};

	/**
	 * Adds validations to the given control.
	 *
	 * @param {sap.ui.core.Control} oControl the given control
	 * @param {string} sMethod an optional method name of a method to be invoked on the parent smart field to notify it of the current state
	 * @public
	 */
	ControlFactoryBase.prototype.addValidations = function(oControl, sMethod) {
		var fState, fError, that = this;

		fState = function(sState, oEvent) {
			var sMessage, oException, oSource = oEvent.getSource();

			if (oSource) {

				if (oSource.setValueState) {
					oSource.setValueState(sState);
				}

				oException = oEvent.getParameter("exception");

				if (oException) {
					sMessage = oException.message;
				}

				// check also for an event parameter called message.
				if (!sMessage) {
					sMessage = oEvent.getParameter("message");
				}

				if (oSource.setValueStateText) {
					oSource.setValueStateText(sMessage);
				}
			}

			if (sMethod) {
				that._oParent[sMethod](sState === sap.ui.core.ValueState.Error);
			}
		};

		fError = function(oEvent) {
			fState(sap.ui.core.ValueState.Error, oEvent);
		};

		// attach to the errors.
		oControl.attachFormatError(fError);
		oControl.attachParseError(fError);
		oControl.attachValidationError(fError);
		oControl.attachValidationSuccess(function(oEvent) {
			fState(sap.ui.core.ValueState.None, oEvent);
		});
	};

	/**
	 * Gets the display behaviour from the configuration
	 *
	 * @param {string} sDefaultDisplayMode determines the default display mode
	 * @returns {string} Display behaviour or <code>null</code>
	 * @private
	 */
	ControlFactoryBase.prototype._getDisplayBehaviourConfiguration = function(sDefaultDisplayMode) {
		var sDisplay = null;

		// check the configuration for display behavior.
		var oConfig = this._oParent.getConfiguration();

		if (oConfig) {
			sDisplay = oConfig.getDisplayBehaviour();
		}

		if (!sDisplay && this._oMetaData && this._oMetaData.entityType) {
			sDisplay = this._oHelper.oAnnotation.getTextArrangement(this._oMetaData.property.property, this._oMetaData.entityType);
		}

		if (!sDisplay) {
			sDisplay = this._oParent.data(sDefaultDisplayMode);
		}

		return sDisplay;
	};

	/**
	 * Gets the value of the <code>preventInitialDataFetchInVHDialog</code> from the configuration
	 *
	 * @returns {boolean} whether initial data fetch in value help dialog is demanded
	 * @private
	 */
	ControlFactoryBase.prototype._getPreventInitialDataFetchInVHDialog = function() {
		var oConfig = this._oParent.getConfiguration();
		return oConfig ? oConfig.getPreventInitialDataFetchInValueHelpDialog() : true;
	};

	/**
	 * Format a value according to the display behaviour settings
	 *
	 * @param {string} sDefaultDisplayMode determines the default display mode
	 * @param {string} sKey the main value
	 * @param {string} sDescription dependent value
	 * @returns {string} relevant displayBehaviour option or <code>null</code>
	 * @private
	 */
	ControlFactoryBase.prototype._formatDisplayBehaviour = function(sDefaultDisplayMode, sKey, sDescription) {
		var sDisplay = this._getDisplayBehaviourConfiguration(sDefaultDisplayMode);

		if (sDefaultDisplayMode === "defaultCheckBoxDisplayBehaviour") {
			return this._getFormattedExpressionFromDisplayBehaviour(sDisplay, sKey);
		}

		if (sDefaultDisplayMode === "defaultComboBoxReadOnlyDisplayBehaviour" && !sDisplay) {
			sDisplay = "descriptionAndId";
		}

		return FormatUtil.getFormattedExpressionFromDisplayBehaviour(sDisplay || "idOnly", sKey, sDescription);
	};

	ControlFactoryBase.prototype._getFormattedExpressionFromDisplayBehaviour = function(sDisplay, bValue) {
		var sKey = "";

		switch (sDisplay) {

			case "OnOff":
				sKey = bValue ? "SMARTFIELD_CB_ON" : "SMARTFIELD_CB_OFF";
				break;

			case "TrueFalse":
				sKey = bValue ? "SMARTFIELD_CB_TRUE" : "SMARTFIELD_CB_FALSE";
				break;

			// case "YesNo": sKey = bValue ? "SMARTFIELD_CB_YES" : "SMARTFIELD_CB_NO"; break;
			default:
				sKey = bValue ? "SMARTFIELD_CB_YES" : "SMARTFIELD_CB_NO";
				break;
		}

		return this._oRb.getText(sKey);
	};

	/**
	 * Checks whether an annotation for value help exists and adds type-ahead and value help.
	 *
	 * @param {sap.ui.core.Control} oControl the new control.
	 * @param {object} oProperty the OData property.
	 * @param {object} oValueHelp the value help configuration.
	 * @param {object} oValueHelp.annotation the value help annotation.
	 * @param {string} oValueHelp.aggregation the aggregation to attach the value list to.
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted.
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted.
	 * @param {string} oValueHelp.dialogtitle title for the value help dialog.
	 * @param {sap.ui.model.odata.ODataModel} oModel the OData model currently used
	 * @param {function} fOnChange optional event handler for change event of value list provider and value help provider
	 * @protected
	 */
	ControlFactoryBase.prototype.createValueHelp = function(oControl, oProperty, oValueHelp, oModel, fOnChange) {
		var oValueHelpDlg,
			oValueList;

		if (oValueHelp.annotation && (oProperty["sap:value-list"] || oProperty["com.sap.vocabularies.Common.v1.ValueList"])) {

			// check the configuration for display behavior.
			var sDisplay = this._getDisplayBehaviourConfiguration("defaultDropDownDisplayBehaviour"),
				oDateFormatSettings = this._oParent.data("dateFormatSettings"),
				bPreventInitialDataFetchInVHDialog = this._getPreventInitialDataFetchInVHDialog();

			if (typeof oDateFormatSettings === "string") {
				try {
					oDateFormatSettings = JSON.parse(oDateFormatSettings);
				} catch (ex) {
					// Invalid dateformat settings provided, Ignore!
				}
			}

			// check what is the content of oValueHelp.annotation - path or annotation object
			var oAnnotation,
				sAnnotationPath;

			if (typeof oValueHelp.annotation === "string") {
				sAnnotationPath = oValueHelp.annotation;
			} else if (oValueHelp && typeof oValueHelp.annotation === "object") {
				oAnnotation = oValueHelp.analyser.getValueListAnnotationForFunctionImport({
					"": oValueHelp.annotation
				}, oProperty.name).primaryValueListAnnotation;
			}

			// add dialog, if necessary. Case when the value help is no combobox
			if (!oValueHelp.noDialog) {

				if (oControl.setFilterSuggests) {
					oControl.setFilterSuggests(false);
				}

				// create the value help provider.
				oValueHelpDlg = new ValueHelpProvider({
					loadAnnotation: true,
					fullyQualifiedFieldName: sAnnotationPath,
					annotation: oAnnotation,
					metadataAnalyser: oValueHelp.analyser,
					control: oControl,
					model: oModel,
					preventInitialDataFetchInValueHelpDialog: bPreventInitialDataFetchInVHDialog,
					dateFormatSettings: oDateFormatSettings,
					takeOverInputValue: false,
					supportMultiSelect: false,
					supportRanges: false,
					fieldName: oProperty.name,
					title: oValueHelp.dialogtitle,
					displayBehaviour: sDisplay
				});

				// register for change event.
				if (fOnChange) {
					oValueHelpDlg.attachValueListChanged(fOnChange);
				}

				this._aProviders.push(oValueHelpDlg);

				// create the value list provider.
				if (oControl.setShowValueHelp) {
					oControl.setShowValueHelp(true);
				}
			}

			oValueList = new ValueListProvider({
				control: oControl,
				typeAheadEnabled: !oValueHelp.noTypeAhead,
				aggregation: oValueHelp.aggregation,
				loadAnnotation: true,
				fullyQualifiedFieldName: sAnnotationPath,
				annotation: oAnnotation,
				metadataAnalyser: oValueHelp.analyser,
				model: oModel,
				dateFormatSettings: oDateFormatSettings,
				displayBehaviour: sDisplay
			});

			if (!oValueHelp.noTypeAhead) {

				if (oControl.setShowSuggestion) {
					oControl.setShowSuggestion(true);
				}
			}

			// register for change event.
			if (fOnChange) {
				oValueList.attachValueListChanged(fOnChange);
			}

			this._aProviders.push(oValueList);
		}
	};

	/**
	 * Returns a binding for a given attribute, if no binding is specified a fixed value or <code>null</code>, which is deduced from the
	 * information maintained on the parent.
	 *
	 * @param {string} sName the name of the attribute
	 * @returns {object} binding for a given attribute, if no binding is specified a fixed value or <code>null</code>.
	 * @public
	 */
	ControlFactoryBase.prototype.getAttribute = function(sName) {
		var oInfo = this._oParent.getBindingInfo(sName);

		if (oInfo) {
			return this._oBinding.toBindingPath(oInfo);
		}

		return this._oParent["get" + sName.substring(0, 1).toUpperCase() + sName.substring(1)]();
	};

	/**
	 * Returns the standard attributes used during creation of a control.
	 *
	 * @param {string} sAttribute the "leading" attribute, can be <code>null</code>.
	 * @param {object} oTypeInfo optional type information.
	 * @param {map} mNames the names of the attributes to be set.
	 * @param {object} oEvent the optional description of an event to register to and raise the <code>change</code> event on the
	 *        <code>SmartField</code>.
	 * @param {string} oEvent.event the name of an event to register to and raise the <code>change</code> event on the <code>SmartField</code>.
	 * @param {string} oEvent.parameter the name of a parameter to send with the <code>change</code> event on the <code>SmartField</code>.
	 * @returns {map} the standard attributes used during creation of a control.
	 * @public
	 */
	ControlFactoryBase.prototype.createAttributes = function(sAttribute, oTypeInfo, mNames, oEvent) {
		var that = this, n, oInfo, mAttributes = {};

		// check the standard attributes, whether they are bound or not.
		for (n in mNames) {
			oInfo = this._oParent.getBindingInfo(n);

			if (oInfo) {
				mAttributes[n] = this._oBinding.toBinding(oInfo);
			} else {
				mAttributes[n] = this._oParent["get" + n.substring(0, 1).toUpperCase() + n.substring(1)]();
			}
		}

		// map the value binding of the parent smart field to the child control's attribute.
		if (sAttribute) {
			mAttributes[sAttribute] = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: oTypeInfo ? this._oTypes.getType(oTypeInfo) : null
			};
		}

		// prepare the event that triggers the parent smart field's change event.
		if (oEvent) {
			mAttributes[oEvent.event] = function(oParam) {
				try {
					that._oParent.fireChange({
						value: oParam.mParameters[oEvent.parameter],
						newValue: oParam.mParameters[oEvent.parameter]
					});
				} catch (ex) {
					jQuery.sap.log.warning(ex);
				}
			};
		}

		this.addObjectBinding(mAttributes); // add an optional object binding
		return mAttributes;
	};

	/**
	 * Maps the bindings for the given attributes and collects.
	 *
	 * @param {map} mAttributes the standard attributes used during creation of a control.
	 * @param {map} mNames the names of the attributes to be mapped.
	 * @public
	 */
	ControlFactoryBase.prototype.mapBindings = function(mAttributes, mNames) {
		var n,
			oInfo;

		for (n in mNames) {
			oInfo = this._oParent.getBindingInfo(n);

			if (oInfo) {
				mAttributes[mNames[n]] = this._oBinding.toBinding(oInfo);
			} else {
				mAttributes[mNames[n]] = this._oParent["get" + n.substring(0, 1).toUpperCase() + n.substring(1)]();
			}
		}
	};

	/**
	 * Adds a possibly existing object binding to the attributes.
	 *
	 * @param {map} mAttributes the attributes to which to add the object binding.
	 * @param {object} oBinding optional object binding.
	 * @public
	 */
	ControlFactoryBase.prototype.addObjectBinding = function(mAttributes, oBinding) {

		if (!oBinding) {
			oBinding = this._oParent.getObjectBinding(this._oMetaData.model);
		}

		if (mAttributes && oBinding) {
			mAttributes.objectBindings = {};
			mAttributes.objectBindings[this._oMetaData.model] = oBinding.sPath;
		}
	};

	/**
	 * Gets the format settings given the <code>sFormat</code>.
	 *
	 * @param {string} sFormat The key identifying the format
	 * @returns {object} The format settings if available otherwise <code>null</code>
	 * @protected
	 */
	ControlFactoryBase.prototype.getFormatSettings = function(sFormat) {
		var mFormat = null,
			aCustom,
			oCustom,
			len;

		if (sFormat) {

			// check the simple data
			mFormat = this._oParent.data(sFormat);

			// check the custom data as fall-back.
			if (!mFormat) {
				aCustom = this._oParent.getCustomData();

				if (aCustom) {
					len = aCustom.length;

					while (len--) {
						oCustom = aCustom[len];

						if (oCustom.getKey() === sFormat) {
							mFormat = oCustom.getValue();
							break;
						}
					}
				}
			}

			// if we have a format, try to apply it.
			if (mFormat && typeof (mFormat) === "string") {
				try {
					mFormat = JSON.parse(mFormat);
				} catch (ex) {
					return null;
				}
			}
		}

		return mFormat;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 *
	 * @public
	 */
	ControlFactoryBase.prototype.destroy = function() {
		var len = this._aProviders.length;

		while (len--) {
			this._aProviders[len].destroy();
		}

		if (this._oBinding) {
			this._oBinding.destroy();
		}

		this._oBinding = null;
		this._oParent = null;
		this._oModel = null;
		this._aProviders = [];
		this._oRb = null;
	};

	return ControlFactoryBase;
}, true);

}; // end of sap/ui/comp/smartfield/ControlFactoryBase.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.JSONControlFactory') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Factory class to create controls that are hosted by <code>sap.ui.comp.smartfield.SmartField</code>.
 *
 * @name sap.ui.comp.smartfield.JSONControlFactory
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @returns {sap.ui.comp.smartfield.JSONControlFactory} new control factory instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.JSONControlFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/JSONControlFactory",[ "jquery.sap.global", "sap/m/CheckBox", "sap/m/ComboBox", "sap/m/DatePicker", "sap/m/Input", "sap/m/Text", "sap/ui/comp/smartfield/ControlFactoryBase", "sap/ui/comp/smartfield/JSONTypes" ], function(jQuery, CheckBox, ComboBox, DatePicker, Input, Text, ControlFactoryBase, JSONTypes) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.model.json.JSONModel} oModel the JSON model currently used.
	 * @param {sap.ui.core.Control} oParent the parent control.
	 * @param {object} oMetaData the meta data used to initialize the factory.
	 * @param {object} oMetaData.model the name of the model.
	 * @param {object} oMetaData.path the path identifying the JSON property.
	 */
	var JSONControlFactory = ControlFactoryBase.extend("sap.ui.comp.smartfield.JSONControlFactory", {
		constructor: function(oModel, oParent, oMetaData) {
			ControlFactoryBase.apply(this, [
				oModel, oParent
			]);
			this.sName = "JSONControlFactory";
			this._oMetaData = oMetaData;
			this._oTypes = new JSONTypes();
		}
	});

	/**
	 * Returns the name of a method to create a control.
	 *
	 * @returns {string} the name of the factory method to create the control.
	 * @private
	 */
	JSONControlFactory.prototype._getCreator = function() {
		var mMethods = {
			"Boolean": "_createBoolean",
			"Date": "_createDate",
			"DateTime": "_createString",
			"Float": "_createString",
			"Integer": "_createString",
			"String": "_createString"
		};

		if (!this._oParent.getEditable() || !this._oParent.getEnabled()) {
			if (this._oParent.getJsontype() === "Boolean") {
				return "_createBoolean";
			}

			return "_createDisplay";
		}

		return mMethods[this._oParent.getJsontype()] || "_createString";
	};

	/**
	 * Creates a control instance to edit a model property of type <code>String</code>, <code>Integer</code> or <code>Float</code>. Either
	 * <code>sap.m.Input</code> is returned or <code>sap.m.Combobox</code> depending on configuration.
	 *
	 * @returns {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createString = function() {
		var bNoValueHelp, bNoTypeAhead, mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true,
			maxLength: true
		};

		// get the configuration properties.
		bNoValueHelp = !this._oParent.getShowValueHelp();
		bNoTypeAhead = !this._oParent.getShowSuggestion();

		// create and return a combo box, if it has been configured.
		if (bNoValueHelp) {
			if (((this._oParent.data("controlType") === "dropDownList"))) {
				return this._createComboBox({
					annotation: null,
					noDialog: bNoValueHelp,
					noTypeAhead: true
				});
			}
		}

		return {
			control: new Input(this.createAttributes("value", this._oParent.getJsontype(), mNames, {
				event: "change",
				parameter: "value"
			})),
			onCreate: "_onCreate",
			noDialog: bNoValueHelp,
			noTypeAhead: bNoTypeAhead,
			params: {
				getValue: "getValue"
			}
		};
	};

	/**
	 * Creates an instance of <code>sap.m.Combobox</code> based on OData meta data.
	 *
	 * @param {object} oValueHelp the value help configuration.
	 * @param {object} oValueHelp.annotation the value help annotation.
	 * @param {object} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted.
	 * @param {object} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted.
	 * @returns {sap.m.Combobox} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createComboBox = function(oValueHelp) {
		var mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		return {
			control: new ComboBox(this.createAttributes("value", this._oParent.getJsontype(), mNames, {
				event: "selectionChange",
				parameter: "selectedItem"
			})),
			onCreate: "_onCreate",
			params: {
				valuehelp: oValueHelp,
				getValue: "getValue"
			}
		};
	};

	/**
	 * Creates a control instance to edit a model property that is of type <code>Boolean</code>
	 *
	 * @returns {sap.m.CheckBox} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createBoolean = function() {
		var mAttributes = this.createAttributes("selected", this._oParent.getJsontype(), {}, {
			event: "select",
			parameter: "selected"
		});
		mAttributes.enabled = this._oParent.getEditable() && this._oParent.getEnabled();

		return {
			control: new CheckBox(mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getSelected"
			}
		};
	};

	/**
	 * Creates a control instance to edit a model property of type <code>Date</code>.
	 *
	 * @returns {sap.m.DatePicker} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createDate = function() {
		var mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};

		return {
			control: new DatePicker(this.createAttributes("value", this._oParent.getJsontype(), mNames, {
				event: "change",
				parameter: "value"
			})),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue"
			}
		};
	};

	/**
	 * Creates a control instance for display-only use cases.
	 *
	 * @returns {sap.m.Text} the new control instance.
	 * @private
	 */
	JSONControlFactory.prototype._createDisplay = function() {
		var mNames = {
			width: true,
			textAlign: true
		};

		return {
			control: new Text(this.createAttributes("text", this._oParent.getJsontype(), mNames))
		};
	};

	/**
	 * Event handler, that is invoked after successful creation of a nested control.
	 *
	 * @param {sap.ui.core.Control} oControl the new control.
	 * @param {map} mParams parameters to further define the behavior of the event handler.
	 * @private
	 */
	JSONControlFactory.prototype._onCreate = function(oControl, mParams) {
		var sGetValue;

		// place validations.
		this.addValidations(oControl, "setSimpleClientError");

		// add optional getValue call-back.
		if (mParams.getValue) {
			sGetValue = mParams.getValue;
			mParams.getValue = function() {
				return oControl[sGetValue]();
			};
		}
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 *
	 * @public
	 */
	JSONControlFactory.prototype.destroy = function() {
		this._oTypes.destroy();
		this._oTypes = null;
		this._oMetaData = null;

		ControlFactoryBase.prototype.destroy.apply(this, []);
	};

	return JSONControlFactory;
}, true);

}; // end of sap/ui/comp/smartfield/JSONControlFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataHelper') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Utility class to access OData Meta Data.
 *
 * @name sap.ui.comp.smartfield.ODataHelper
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @returns {sap.ui.comp.smartfield.ODataHelper} the new instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataHelper",[
	"jquery.sap.global", "sap/ui/comp/odata/MetadataAnalyser", "sap/ui/comp/smartfield/AnnotationHelper"
], function(jQuery, MetadataAnalyser, Annotation) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel} oModel the OData model currently used
	 * @param {sap.ui.comp.smartfield.BindingUtil} oUtil a reference to the binding utility
	 * @param {sap.ui.model.odata.ODataMetaModel} oMetaModel the given OData meta model
	 */
	var ODataHelper = function(oModel, oUtil, oMetaModel) {
		if (oModel) {
			this.oMeta = oModel.getMetaModel();
		}

		if (oMetaModel) {
			this.oMeta = oMetaModel;
		}

		this._oModel = oModel;
		this._oUtil = oUtil;
		this.oAnnotation = new Annotation();
	};

	/**
	 * Returns a reference to the meta data analyzer and creates it lazily.
	 *
	 * @param {object} oModel the model instance (optional)
	 * @returns {sap.ui.comp.odata.MetaDataAnalyser} meta data analyzer
	 * @public
	 */
	ODataHelper.prototype.getAnalyzer = function(oModel) {
		if (!this._oAnalyzer) {
			this._oAnalyzer = new MetadataAnalyser(this._oModel || oModel);
		}

		return this._oAnalyzer;
	};

	/**
	 * Checks whether the current path contains a sequence of navigation properties and corrects the current meta data accordingly. Especially the
	 * optional property <code>navigationPath</code> is added to the meta data.
	 *
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @param {sap.ui.core.Control} oControl the control
	 * @public
	 */
	ODataHelper.prototype.checkNavigationProperty = function(oMetaData, oControl) {
		var mPaths, sPath, len, oResult;

		if (oControl && oMetaData) {
			mPaths = this._oUtil.getNavigationProperties(oControl);
			len = mPaths.paths.length;

			while (len--) {
				sPath = mPaths.paths.shift();
				sPath = this._oUtil.correctPath(sPath);

				if (sPath === "" || sPath === oMetaData.entitySet.name) {
					continue;
				}

				oResult = this.getNavigationProperty(oMetaData.entityType, sPath);

				if (oResult.entitySet) {
					oMetaData.entitySet = oResult.entitySet;
					oMetaData.entityType = oResult.entityType;
				}
			}
		}
	};

	/**
	 * Checks whether a path addresses a navigation property and returns the target entity set and entity type, if this is the case.
	 *
	 * @param {object} oEntityType the OData entity type definition
	 * @param {string} sPath the binding path
	 * @returns {object} the target entity set and entity type.
	 * @public
	 */
	ODataHelper.prototype.getNavigationProperty = function(oEntityType, sPath) {
		var oNavi, oTarget, oResult = {};

		oNavi = this._getNamedProperty(sPath, "navigationProperty", oEntityType);

		if (oNavi) {
			oTarget = this.oMeta.getODataAssociationSetEnd(oEntityType, oNavi.name);
			oResult.entitySet = this.oMeta.getODataEntitySet(oTarget.entitySet);
			oResult.entityType = this.oMeta.getODataEntityType(oResult.entitySet.entityType);
		}

		return oResult;
	};

	/**
	 * Checks whether a given paths starts with a navigation property.
	 *
	 * @param {string} sPath the given path.
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @returns {string} the first navigation property, if the given paths starts with a navigation property, <code>null</code> otherwise
	 * @public
	 */
	ODataHelper.prototype.startWithNavigationProperty = function(sPath, oMetaData) {
		var aPath = sPath.split("/"), oProperty;

		if (aPath && aPath.length > 1) {
			oProperty = this._getNamedProperty(aPath.shift(), "navigationProperty", oMetaData.entityType);
		}

		if (oProperty) {
			return oProperty.name;
		}

		return null;
	};

	/**
	 * Calculates the definition of a property of an entity type.
	 *
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @public
	 */
	ODataHelper.prototype.getProperty = function(oMetaData) {
		var aNavigation = [], len, aProp, oProp, sPart, sPath, oResult = {
			entityType: oMetaData.entityType,
			entitySet: oMetaData.entitySet
		};

		if (oMetaData) {
			aProp = oMetaData.path.split("/");
			len = aProp.length;

			// check for navigation properties.
			if (len > 1) {
				while (oResult.entityType) {
					sPart = aProp[0];
					oResult = this.getNavigationProperty(oResult.entityType, sPart);

					if (oResult.entityType) {
						oMetaData.entityType = oResult.entityType;
						oMetaData.entitySet = oResult.entitySet;
						aNavigation.push(aProp.shift());
						len--;
					}
				}
			}

			// add navigation path
			oMetaData.navigationPath = aNavigation.join("/");

			// property can be complex.
			if (len > 1) {
				oProp = this.oMeta.getODataProperty(oMetaData.entityType, aProp[0]);

				// property name may be invalid: check for existing prop to avoid exceptions
				if (oProp) {
					oMetaData.property = this._getComplex(oProp, aProp, len);
				}

				return;
			}

			// simple property (can be with and without navigation path)
			if (oMetaData.navigationPath) {
				sPath = oMetaData.path.replace(oMetaData.navigationPath + "/", "");
			} else {
				sPath = oMetaData.path;
			}

			oProp = this.oMeta.getODataProperty(oMetaData.entityType, sPath);
			oMetaData.property = {
				property: oProp,
				typePath: oMetaData.path
			};
		}
	};

	/**
	 * Returns a complex property.
	 *
	 * @param {object} oProperty the object
	 * @param {array} aProp the path to the OData property
	 * @param {int} iLen the length of the path to the OData property
	 * @returns {object} the complex property
	 * @private
	 */
	ODataHelper.prototype._getComplex = function(oProperty, aProp, iLen) {
		var oObject = oProperty, sTypePath, aComplex = [];

		while (iLen--) {
			if (oObject) {
				if (iLen === 0) {
					sTypePath = oObject.name;
					oObject = this._getNamedProperty(aProp[0], "property", oObject);

					return {
						typePath: sTypePath + "/" + aProp[0],
						property: oObject,
						complex: true,
						parents: aComplex
					};
				}

				oObject = this.oMeta.getODataComplexType(oObject.type);

				if (oObject) {
					aComplex.push(oObject);
				}
			}

			aProp.shift();
		}
	};

	/**
	 * Returns a named property.
	 *
	 * @param {string} sName the name
	 * @param {string} sArray the name of the array to scan for the property
	 * @param {object} oProperty the object
	 * @returns {object} the named property, can be <code>null</code>
	 * @private
	 */
	ODataHelper.prototype._getNamedProperty = function(sName, sArray, oProperty) {
		var oResult;

		if (oProperty[sArray]){
			for (var i = 0; i < oProperty[sArray].length; i++ ){
				if (oProperty[sArray][i].name === sName) {
					oResult = oProperty[sArray][i];
					break;
				}
			}
		}

		return oResult;
	};

	/**
	 * Checks whether an OData property has a <code>text</code> annotation and adds it to the available meta data.
	 *
	 * @param {object} oMetaDataIn the meta data used to create the control
	 * @param {object} oMetaDataIn.entitySet the OData entity set definition
	 * @param {object} oMetaDataIn.entityType the OData entity type definition
	 * @param {object} oMetaDataIn.property the OData property definition
	 * @param {string} oMetaDataIn.path the binding path
	 * @returns {object} the OData property representing the text annotation, if no text annotation is encountered, <code>null</code> is returned
	 * @public
	 */
	ODataHelper.prototype.getTextProperty2 = function(oMetaDataIn) {
		var sAnnotation, oMetaData;

		sAnnotation = this.oAnnotation.getText(oMetaDataIn.property.property);

		if (sAnnotation) {
			oMetaData = this._preprocAnnotation(sAnnotation, oMetaDataIn);
			this.getProperty(oMetaData);
			this._postprocAnnotation(oMetaData, oMetaDataIn);
		}

		return oMetaData;
	};

	/**
	 * Checks whether an OData property represents semantically a unit of measure, e.g. a currency, and returns its definition, if the property
	 * represents a unit of measure.
	 *
	 * @param {object} oMetaDataIn the meta data available
	 * @param {object} oMetaDataIn.entitySet the name of the OData entity set
	 * @param {object} oMetaDataIn.entityType the name of the OData entity type
	 * @returns {object} the OData property representing the unit, if no unit of measure is encountered, <code>null</code> is returned
	 * @public
	 */
	ODataHelper.prototype.getUnitOfMeasure2 = function(oMetaDataIn) {
		var sAnnotation, oMetaData;

		sAnnotation = this.oAnnotation.getUnit(oMetaDataIn.property.property);

		if (sAnnotation) {
			oMetaData = this._preprocAnnotation(sAnnotation, oMetaDataIn);
			this.getProperty(oMetaData);
			this._postprocAnnotation(oMetaData, oMetaDataIn);
		}

		return oMetaData;
	};

	/**
	 * Pre-processes an annotation.
	 *
	 * @param {string} sAnnotation the given annotation
	 * @param {object} oMetaDataIn the meta data available
	 * @param {object} oMetaDataIn.entitySet the name of the OData entity set
	 * @param {object} oMetaDataIn.entityType the name of the OData entity type
	 * @returns {object} the meta data representing the annotation
	 * @private
	 */
	ODataHelper.prototype._preprocAnnotation = function(sAnnotation, oMetaDataIn) {
		var sPath, oMetaData;

		// annotation can contain navigation properties: so get the entity type and set
		// additionally the navigation properties are exposed as "navigation path".
		oMetaData = this.traverseNavigationProperties(sAnnotation, oMetaDataIn.entityType);

		// set the entity set, if it is not returned from the traversal.
		if (!oMetaData.navigationPath) {
			oMetaData.entitySet = oMetaDataIn.entitySet;
		}

		// get the path identifying the property: it may contain complex types,
		// but we know the navigation properties.
		if (oMetaDataIn.navigationPath) {
			oMetaData.path = oMetaDataIn.path.replace(oMetaDataIn.navigationPath + "/", "");
		} else {
			oMetaData.path = oMetaDataIn.path;
		}

		if (oMetaData.navigationPath) {
			sPath = sAnnotation.replace(oMetaData.navigationPath + "/", "");
		} else {
			sPath = sAnnotation;
		}

		oMetaData.path = oMetaData.path.replace(oMetaDataIn.property.property.name, sPath);

		// make sure navigation path does not get lost, if after this method get property is invoked.
		if (oMetaData.navigationPath) {
			oMetaData.navigationPathHelp = oMetaData.navigationPath;
		}

		return oMetaData;
	};

	/**
	 * Post-processes an annotation.
	 *
	 * @param {object} oMetaData the new meta data
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaDataIn the meta data available
	 * @param {object} oMetaDataIn.entitySet the name of the OData entity set
	 * @param {object} oMetaDataIn.entityType the name of the OData entity type
	 * @private
	 */
	ODataHelper.prototype._postprocAnnotation = function(oMetaData, oMetaDataIn) {
		var sPath;

		// make sure navigation path does not get lost, if after this method get property is invoked.
		if (oMetaData.navigationPathHelp) {
			oMetaData.navigationPath = oMetaData.navigationPathHelp;
		}

		// now complete the navigation path of the new meta data.
		if (oMetaData.navigationPath) {
			sPath = oMetaData.navigationPath;
		} else {
			sPath = "";
		}

		if (oMetaDataIn.navigationPath) {
			if (sPath) {
				sPath = oMetaDataIn.navigationPath + "/" + sPath;
			} else {
				sPath = oMetaDataIn.navigationPath;
			}
		}

		oMetaData.navigationPath = sPath;

		// now correct the path of the new meta data, if necessary.
		if (oMetaData.navigationPath) {
			oMetaData.path = oMetaData.navigationPath + "/" + oMetaData.path;
		}
	};

	/**
	 * Traverses the navigation properties contained in a path.
	 *
	 * @param {string} sPath the given path
	 * @param {object} oEntityType the given entity type.
	 * @returns {object} the target entity set and entity type of the navigation properties
	 * @public
	 */
	ODataHelper.prototype.traverseNavigationProperties = function(sPath, oEntityType) {
		var oResult = {}, oResult1 = {}, aPath, sPart, len;

		aPath = sPath.split("/");
		len = aPath.length;
		oResult.entityType = oEntityType;
		oResult1.entityType = oEntityType;

		while (len--) {
			sPart = aPath.shift();

			if (sPart === "") {
				continue;
			}

			oResult1 = this.getNavigationProperty(oResult.entityType, sPart);

			if (!oResult1.entitySet) {
				break;
			}

			oResult.entityType = oResult1.entityType;
			oResult.entitySet = oResult1.entitySet;

			if (oResult.navigationPath) {
				oResult.navigationPath = oResult.navigationPath + "/" + sPart;
			} else {
				oResult.navigationPath = sPart;
			}
		}

		return oResult;
	};

	/**
	 * Calculates the value list annotation for the given property.
	 *
	 * @param {object} oMetaData the meta data available
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @returns {object} the value list annotation or <code>null</code>
	 * @public
	 */
	ODataHelper.prototype.getValueListAnnotationPath = function(oMetaData) {
		var sPath, len;

		if (oMetaData.property.complex) {
			len = oMetaData.property.parents.length - 1;
			sPath = oMetaData.property.parents[len].namespace;
			sPath = sPath + "." + oMetaData.property.typePath;
		} else {
			sPath = oMetaData.entitySet.entityType + "/" + oMetaData.property.property.name;
		}

		return sPath;
	};

	/**
	 * Calculates the value list annotation for the given property, if it represents a unit of measure, and adds it to the meta data as
	 * <code>valuelistuom</code> in the annotations.
	 *
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @public
	 */
	ODataHelper.prototype.getUOMValueListAnnotationPath = function(oMetaData) {
		var sPath;

		if (oMetaData.annotations.uom) {
			sPath = this.getValueListAnnotationPath(oMetaData.annotations.uom);
		}

		if (sPath) {
			oMetaData.annotations.valuelistuom = sPath;
		}
	};

	/**
	 * Calculates a possibly existing text annotation for the unit in a unit of measure field and add it, if it exists.
	 *
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @public
	 */
	ODataHelper.prototype.getUOMTextAnnotation = function(oMetaData) {
		if (oMetaData && oMetaData.annotations && oMetaData.annotations.uom) {
			oMetaData.annotations.textuom = this.getTextProperty2(oMetaData.annotations.uom);
		}
	};

	/**
	 * Calculates the entity set a value list annotation for the given property points to and adds it to the meta data as
	 * <code>valuelistentityset</code> in the annotations.
	 *
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @public
	 */
	ODataHelper.prototype.geValueListEntitySet = function(oMetaData) {
		if (oMetaData && oMetaData.annotations && oMetaData.annotations.valuelist) {
			if (oMetaData.annotations.valuelist.primaryValueListAnnotation && oMetaData.annotations.valuelist.primaryValueListAnnotation.valueListEntitySetName) {
				oMetaData.annotations.valuelistentityset = this.oMeta.getODataEntitySet(oMetaData.annotations.valuelist.primaryValueListAnnotation.valueListEntitySetName);
			}
		}
	};

	/*
	 * Gets the metadata property.
	 *
	 * @returns {object} The metadata property
	 * @protected
	 * @since 1.48
	 */
	ODataHelper.prototype.getEdmProperty = function(oMetaData) {
		var oMetadataProperty = oMetaData.property;
		return (oMetadataProperty && oMetadataProperty.property) || null;
	};

	/**
	 * Adds the value list data to the given meta data.
	 *
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @public
	 */
	ODataHelper.prototype.getValueListData = function(oMetaData) {
		var oMetadataProperty = this.getEdmProperty(oMetaData),
			oAnnotations = oMetaData.annotations;

		if (MetadataAnalyser.isValueList(oMetadataProperty)) {
			oAnnotations.valuelist = this.getValueListAnnotationPath(oMetaData);

			var sValueList = MetadataAnalyser.getValueListMode(oMetadataProperty);

			if (sValueList) {
				oAnnotations.valuelistType = sValueList;
			} else {
				oAnnotations.valuelistType = this.getAnalyzer().getValueListSemantics(oMetadataProperty["com.sap.vocabularies.Common.v1.ValueList"]);
			}
		}
	};

	/**
	 * Calculates the binding path for the <code>text</code> property for the display use case. If a text annotation exists, it is considered,
	 * otherwise the binding path addresses the property.
	 *
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @returns {string} the binding path
	 * @public
	 */
	ODataHelper.prototype.getEdmDisplayPath = function(oMetaData) {
		if (oMetaData.annotations.text) {
			return oMetaData.annotations.text.path;
		}

		return oMetaData.path;
	};

	/**
	 * Calculates the binding path for the Unit of Measure.
	 *
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model.
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @returns {string} the binding path for the Unit of Measure text, which can be <code>null</code>
	 * @public
	 */
	ODataHelper.prototype.getUOMPath = function(oMetaData) {
		if (oMetaData && oMetaData.annotations && oMetaData.annotations.uom) {
			return oMetaData.annotations.uom.path;
		}

		return null;
	};

	/**
	 * Calculates the type path for the Unit of Measure.
	 *
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {object} oMetaData.entitySet the name of the OData entity set
	 * @param {object} oMetaData.entityType the name of the OData entity type
	 * @param {object} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @param {object} oMetaData.annotations the current annotations
	 * @returns {string} the binding path for the Unit of Measure text, which can be <code>null</code>
	 * @public
	 */
	ODataHelper.prototype.getUOMTypePath = function(oMetaData) {

		if (oMetaData.property.complex) {
			return oMetaData.property.typePath.replace(oMetaData.property.property.name, oMetaData.annotations.uom.property.name);
		}

		return oMetaData.annotations.uom.property.name;
	};

	/**
	 * Returns an event handler for the change event in unit of measure use cases.
	 *
	 * @param {sap.ui.core.Control} oControl the control which propagates the event
	 * @param {boolean} bUnit flag indicating whether the measure or the unit is affected by the change
	 * @returns {function} handler for the change event in unit of measure use cases.
	 * @public
	 */
	ODataHelper.prototype.getUOMChangeHandler = function(oControl, bUnit) {
		return function(oParam) {
			try {
				oControl.fireChange({
					value: oParam.mParameters.value,
					newValue: oParam.mParameters.value,
					unitChanged: bUnit,
					validated: oParam.mParameters["validated"]
				});
			} catch (ex) {
				jQuery.sap.log.warning(ex);
			}
		};
	};

	/**
	 * Returns an event handler for the selection change event.
	 *
	 * @param {sap.ui.core.Control} oControl the control which propagates the event
	 * @returns {function} handler for the selection change event
	 * @public
	 */
	ODataHelper.prototype.getSelectionChangeHandler = function(oControl) {
		return function(oParam) {
			var sKey = "";

			try {
				var oItem = oParam.getParameter("selectedItem");

				if (oItem) {
					sKey = oItem.getKey();
				}

				oControl.fireChange({
					value: sKey,
					newValue: sKey,
					selectionChange: true
				});
			} catch (ex) {
				jQuery.sap.log.warning(ex);
			}
		};
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 *
	 * @public
	 */
	ODataHelper.prototype.destroy = function() {

		if (this._oAnalyzer) {
			this._oAnalyzer.destroy();
		}

		if (this.oAnnotation) {
			this.oAnnotation.destroy();
		}

		this._oUtil = null;
		this.oMeta = null;
		this.oAnalyzer = null;
		this.oAnnotation = null;
	};

	/**
	 * This method is used to scan the meta data annotations for hidden navigation properties and expand them in advance.
	 * This is done in order to be prepared for new fields on the view that may need these annotations.
	 *
	 * @param {object} oMetadataProperty - The meta data for this smart field control
	 * @returns {string} A comma separated list of auto expand properties
	 *
	 * @public
	 * @since 1.48
	 */
	ODataHelper.prototype.getAutoExpandProperties = function(oMetadataProperty) {
		var aNavigationProperties = [],
			aAsPath = [];

		for (var sAnnotation in oMetadataProperty) {
			switch (sAnnotation) {
				case "sap:unit":
				case "sap:field-control":
				case "sap:text":
					aAsPath = oMetadataProperty[sAnnotation].split("/");
					break;
				case "com.sap.vocabularies.Common.v1.Text":
				case "Org.OData.Measures.V1.Unit":
				case "Org.OData.Measures.V1.ISOCurrency":
				case "com.sap.vocabularies.Common.v1.FieldControl":

					if (oMetadataProperty[sAnnotation].Path) {
						aAsPath = oMetadataProperty[sAnnotation].Path.split("/");
					}

					break;

				// no default
			}

			if (aAsPath.length > 1 && aNavigationProperties.indexOf(aAsPath[0]) < 0) {
				aNavigationProperties.push(aAsPath[0]);
			}
		}

		return aNavigationProperties.join(",");
	};

	return ODataHelper;
}, true);

}; // end of sap/ui/comp/smartfield/ODataHelper.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataTypes') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Utility class to access OData Types. The implementation operates on OData meta data, so an instance of <code>sap.ui.model.odata.ODataModel</code>.
 *
 * @private
 * @name sap.ui.comp.smartfield.ODataTypes
 * @author SAP SE
 * @version 1.50.6
 * @since 1.28.0
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataTypes'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Boolean'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Currency'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Guid'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataTypes",[
	"jquery.sap.global",
	"sap/ui/core/format/NumberFormat",
	"sap/ui/model/odata/type/Boolean",
	"sap/ui/comp/smartfield/type/DateTime",
	"sap/ui/comp/smartfield/type/DateTimeOffset",
	"sap/ui/comp/smartfield/type/Decimal",
	"sap/ui/comp/smartfield/type/Int16",
	"sap/ui/comp/smartfield/type/Int32",
	"sap/ui/comp/smartfield/type/Int64",
	"sap/ui/comp/smartfield/type/SByte",
	"sap/ui/comp/smartfield/type/String",
	"sap/ui/comp/smartfield/type/AbapBool",
	"sap/ui/model/type/Currency",
	"sap/ui/comp/smartfield/type/Time",
	"sap/ui/model/odata/type/Guid",
	"sap/ui/comp/odata/MetadataAnalyser"
], function(jQuery, NumberFormat, BooleanType, DateTimeType, DateTimeOffsetType, DecimalType, Int16Type, Int32Type, Int64Type, SByteType, StringType, AbapBoolean, CurrencyType, TimeType, GuidType, MetadataAnalyser) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.core.Control} oParent the parent control.
	 */
	var ODataTypes = function(oParent) {
		this._oParent = oParent;
	};

	/**
	 * Returns an instance of a sub-class of <code>sap.ui.model.Type</code> depending on the OData property's EDM type.
	 *
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @param {object} oFormatOptions optional format options as defined in e.g. {@link sap.ui.core.format.DateFormat}.
	 * @param {object} mConstraints optional constraints.
	 * @returns {sap.ui.model.Type} an instance of a sub-class of <code>sap.ui.model.Type</code>.
	 * @public
	 */
	ODataTypes.prototype.getType = function(oProperty, oFormatOptions, mConstraints) {
		var oConstraints, oInfo;

		// if a type is configured on the smart field, use it.
		oInfo = this._oParent.getBindingInfo("value");

		if (oInfo && oInfo.type) {
			return oInfo.type;
		}

		// select the type by EDM type.
		if (oProperty && oProperty.property && oProperty.property.type) {
			switch (oProperty.property.type) {
				case "Edm.Boolean":
					return new BooleanType();
				case "Edm.Decimal":
				case "Edm.Double":
				case "Edm.Float":
				case "Edm.Single":
					oConstraints = this._getDecimalConstraints(oProperty);
					return new DecimalType(oFormatOptions, oConstraints);
				case "Edm.Int16":
					return new Int16Type();
				case "Edm.Int32":
					return new Int32Type();
				case "Edm.Int64":
					return new Int64Type();
				case "Edm.Byte":
				case "Edm.SByte":
					return new SByteType();
				case "Edm.DateTimeOffset":
					return new DateTimeOffsetType(oFormatOptions, oConstraints);
				case "Edm.DateTime":
					oConstraints = this._getDateTimeConstraints(oProperty, mConstraints);
					return new DateTimeType(oFormatOptions, oConstraints);
				case "Edm.String":
					oConstraints = this._getStringConstraints(oProperty);
					return new StringType(oFormatOptions, oConstraints);
				case "Edm.Time":
					return new TimeType(oFormatOptions, mConstraints);
				case "Edm.Guid":
					return new GuidType(oFormatOptions, mConstraints);
				default:
					return null;
			}
		}

		return null;
	};

	/**
	 * Calculates the constraints for <code>Edm.DateTime</code>.
	 *
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @param {object} mConstraints optional constraints.
	 * @returns {object} the constraints.
	 * @private
	 */
	ODataTypes.prototype._getDateTimeConstraints = function(oProperty, mConstraints) {
		var oConstraints = {}, n;

		// this method is only invoked for Edm.DateTime,
		// so no need exists to replace it with V4 annotations,
		// as Edm.DateTime is "pruned" in V4.
		if (oProperty.property["sap:display-format"] === "Date") {
			oConstraints = {
				displayFormat: "Date"
			};
		}

		// constraints from control have priority.
		for (n in mConstraints) {
			oConstraints[n] = mConstraints[n];
		}

		return oConstraints;
	};

	/**
	 * Calculates the value of the control's <code>maxLength</code> property. The value can be configured in the <code>maxLength</code> attribute
	 * of the OData property to which the the control's <code>value</code> property is bound to. Alternatively it can be configured in the the
	 * control's <code>maxLength</code> property. If both are available the minimum value of both is returned.
	 *
	 * @param {object} oProp the property from which to take the <code>maxLength</code>.
	 * @param {object} oBind the <code>value</code> binding of the parent smart field.
	 * @returns {int} maximum number of characters, <code>0</code> means the feature is switched off.
	 * @public
	 */
	ODataTypes.prototype.getMaxLength = function(oProp, oBind) {
		var iProp, aVals = [], len, iVal, iField, iResult = 0;

		// is a max length available from binding.
		if (oBind && oBind.constraints) {
			if (oBind.constraints.maxLength && oBind.constraints.maxLength > -1) {
				aVals.push(oBind.constraints.maxLength);
			}
		}

		// is a max length available from binding type.
		if (oBind && oBind.type && oBind.type.oConstraints) {
			if (oBind.type.oConstraints.maxLength && oBind.type.oConstraints.maxLength > -1) {
				aVals.push(oBind.type.oConstraints.maxLength);
			}
		}

		// is a max length available from oData property.
		if (oProp && oProp.property && oProp.property.maxLength) {
			iProp = parseInt(oProp.property.maxLength, 10);

			if (iProp > -1) {
				aVals.push(iProp);
			}
		}

		// is a max length available from smart field property.
		iField = this._oParent.getMaxLength();

		if (iField > 0) {
			aVals.push(iField);
		}

		// now search for the minimum value larger than 0.
		// no value specified, return 0.
		len = aVals.length;

		while (len--) {
			iVal = aVals[len];

			if (iVal > 0) {
				if (iResult > 0) {
					if (iVal < iResult) {
						iResult = iVal;
					}
				} else {
					iResult = iVal;
				}
			}
		}

		return iResult;
	};

	/**
	 * Calculates the constraints for a numeric Edm.Type, with optional <code>scale</code> and <code>precision</code> attributes of the OData
	 * property set.
	 *
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @returns {map} the constraints.
	 * @private
	 */
	ODataTypes.prototype._getDecimalConstraints = function(oProperty) {
		var mArgs = null;

		if (oProperty.property.precision) {
			mArgs = {};
			mArgs.precision = parseInt(oProperty.property.precision, 10);
		}

		if (oProperty.property.scale) {
			if (!mArgs) {
				mArgs = {};
			}

			mArgs.scale = parseInt(oProperty.property.scale, 10);
		}

		return mArgs;
	};

	/**
	 * Calculates the constraints for a property of type <code>Edm.String</code>.
	 *
	 * @param {object} oProperty the definition of a property of an OData entity
	 * @returns {object} The constraints
	 */
	ODataTypes.prototype._getStringConstraints = function(oProperty) {
		var oBindingInfo = this._oParent.getBindingInfo("value"),
			iMaxLength = this.getMaxLength(oProperty, oBindingInfo),
			oEquals,
			mConstraints = {
				nullable: MetadataAnalyser.isNullable(oProperty.property)
			};

		// get the constrains: equals
		if (oBindingInfo && oBindingInfo.type && oBindingInfo.type.oConstraints) {
			if (oBindingInfo.type.oConstraints.equals) {
				oEquals = oBindingInfo.type.oConstraints.equals;
			}
		}

		// create the return value
		if (iMaxLength > 0 || oEquals) {

			if (iMaxLength > 0) {
				mConstraints.maxLength = iMaxLength;
			}

			if (oEquals) {
				mConstraints.equals = oEquals;
			}
		}

		if (MetadataAnalyser.isDigitSequence(oProperty.property)) {
			mConstraints.isDigitSequence = true;
		}

		return mConstraints;
	};

	/**
	 * Returns formatter function for displaying a unit of measure.
	 *
	 * @param {object} oProperty The definition of a property of an OData entity
	 * @param {boolean} bCurrency Flag indicating whether the formatter actually refers to a currency or just unit-of-measure
	 * @returns {function} Formatter function for displaying a unit of measure
	 * @public
	 */
	ODataTypes.prototype.getDisplayFormatter = function(oProperty, bCurrency) {
		if (bCurrency) {
			return this.getCurrencyDisplayFormatter(true);
		} else {
			return this.getUOMDisplayFormatter(oProperty);
		}
	};

	/**
	 * Returns formatter function for displaying a currency.
	 *
	 * @param {boolean} bCurrency Flag indicating whether the formatter actually refers to a currency or just unit-of-measure
	 * @returns {function} Formatter function for displaying a currency
	 * @public
	 */
	ODataTypes.prototype.getCurrencyDisplayFormatter = function(bCurrency) {
		var oFormat = NumberFormat.getCurrencyInstance({
			showMeasure: false
		});

		return function(oAmount, sCurrency) {
			var sValue, iCurrencyDigits, iPadding;

			if (!oAmount || !sCurrency || sCurrency === "*") {
				return "";
			}

			if (!bCurrency) {
				sValue = oAmount += "\u2008";
				return sValue;
			}

			iCurrencyDigits = oFormat.oLocaleData.getCurrencyDigits(sCurrency);
			sValue = oFormat.format(oAmount, sCurrency);

			if (iCurrencyDigits === 0) {
				sValue += "\u2008";
			}

			iPadding = 3 - iCurrencyDigits;

			if (iPadding) {
				sValue = jQuery.sap.padRight(sValue, "\u2007", sValue.length + iPadding);
			}

			return sValue;
		};
	};

	/**
	 * Returns formatter function for displaying a measure.
	 *
	 * @param {object} oProperty The definition of a property of an OData entity
	 * @returns {function} Formatter function for displaying a unit of measure
	 * @public
	 */
	ODataTypes.prototype.getUOMDisplayFormatter = function(oProperty) {
		var oFormatOptions = {};

		if (oProperty.scale) {
			oFormatOptions.decimals = parseInt(oProperty.scale, 10);
		}

		if (oProperty.precision) {
			oFormatOptions.precision = parseInt(oProperty.precision, 10);
		}

		var oFormat = NumberFormat.getFloatInstance(oFormatOptions);

		return function(oMeasure, sUnit) {
			var sValue;

			if (!oMeasure || !sUnit || sUnit === "*") {
				return "";
			}

			if (isNaN(parseFloat(oMeasure))) {
				return oMeasure.toString() + "\u2008";
			}

			sValue = oFormat.format(oMeasure, sUnit);
			sValue += "\u2008";
			return sValue;
		};
	};

	/**
	 * Creates a new currency type instance and returns it.
	 *
	 * @param {object} oProperty the OData property to use for constraint calculation, e.g. precision and scale.
	 * @returns {sap.ui.model.type.Currency} the new currency type instance.
	 * @public
	 */
	ODataTypes.prototype.getCurrencyType = function(oProperty) {
		var oConstraints, oFormat = {
			showMeasure: false,
			parseAsString: true,
			emptyString: 0
		};

		if (oProperty) {
			oConstraints = this._getDecimalConstraints(oProperty);

			if (oConstraints) {
				if (oConstraints.precision) {
					oFormat.maxIntegerDigits = oConstraints.precision;
					if (oConstraints.scale) {
						oFormat.maxIntegerDigits -= oConstraints.scale;
					}
				}

				if (oConstraints.precision && oConstraints.scale) {
					oConstraints.maximum = Math.pow(10, oFormat.maxIntegerDigits) - (1 / Math.pow(10, oConstraints.scale));
					oConstraints.minimum = -1 * oConstraints.maximum;
				}
			}

			return new CurrencyType(oFormat, oConstraints);
		}

		return null;
	};

	/**
	 * Creates a new ABAP Boolean type instance.
	 *
	 * @returns {sap.ui.comp.smartfield.type.AbapBool} The new instance.
	 * @public
	 */
	ODataTypes.prototype.getAbapBoolean = function() {
		return new AbapBoolean();
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 *
	 * @public
	 */
	ODataTypes.prototype.destroy = function() {
		this._oParent = null;
	};

	return ODataTypes;
}, true);

}; // end of sap/ui/comp/smartfield/ODataTypes.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.FilterProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// -----------------------------------------------------------------------------
// Generates the data-model required for SmartFilter using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.smartfilterbar.FilterProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.DateRangeSelection'); // unlisted dependency retained
jQuery.sap.require('sap.m.TimePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/FilterProvider",[
	'jquery.sap.global', 'sap/m/Select', 'sap/ui/core/Item', 'sap/m/ComboBox', 'sap/m/DatePicker', 'sap/m/DateRangeSelection', 'sap/m/TimePicker', 'sap/m/Input', 'sap/m/MultiComboBox', 'sap/m/MultiInput', 'sap/m/SearchField', 'sap/m/Token', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/providers/ValueHelpProvider', 'sap/ui/comp/providers/ValueListProvider', 'sap/ui/model/Filter', 'sap/ui/model/json/JSONModel', 'sap/ui/comp/odata/ODataType', 'sap/ui/comp/util/FormatUtil', 'sap/ui/base/EventProvider', 'sap/ui/comp/util/IdentifierUtil', 'sap/ui/comp/providers/TokenParser', 'sap/ui/core/format/DateFormat'
], function(jQuery, Select, Item, ComboBox, DatePicker, DateRangeSelection, TimePicker, Input, MultiComboBox, MultiInput, SearchField, Token, MetadataAnalyser, ValueHelpProvider, ValueListProvider, Filter, JSONModel, ODataType, FormatUtil, EventProvider, IdentifierUtil, TokenParser, DateFormat) {
	"use strict";

	/**
	 * Constructs a class to generate the view/datamodel metadata for the SmartFilterBar from the SAP-Annotations metadata
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mPropertyBag - PropertyBag having members model, serviceUrl, entityType, additionalConfiguration
	 * @author SAP
	 */
	var FilterProvider = function(mPropertyBag) {
		this._bInitialized = false;
		this._bPending = true;
		this._bConsiderAnalyticalParameters = false;
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this._sServiceURL = mPropertyBag.serviceUrl;
			this._sBasicSearchFieldName = mPropertyBag.basicSearchFieldName;
			this._isBasicSearchEnabled = mPropertyBag.enableBasicSearch;
			this._bUseContainsAsDefault = mPropertyBag.useContainsAsDefaultFilter === "true";
			this.sEntityType = mPropertyBag.entityType;
			this.sEntitySet = mPropertyBag.entitySet;
			this._isRunningInValueHelpDialog = mPropertyBag.isRunningInValueHelpDialog;
			this._oAdditionalConfiguration = mPropertyBag.additionalConfiguration;
			this.sDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour;
			this.sDefaultTokenDisplayBehaviour = mPropertyBag.defaultTokenDisplayBehaviour;
			if (typeof mPropertyBag.dateFormatSettings === "string") {
				try {
					this._oDateFormatSettings = mPropertyBag.dateFormatSettings ? JSON.parse(mPropertyBag.dateFormatSettings) : undefined;
				} catch (ex) {
					// Invalid dateformat provided!
				}
			} else {
				this._oDateFormatSettings = mPropertyBag.dateFormatSettings;
			}
			if (!this._oDateFormatSettings) {
				this._oDateFormatSettings = {};
			}
			// Default to UTC true if nothing is provided --> as sap:display-format="Date" should be used without a timezone
			if (!this._oDateFormatSettings.hasOwnProperty("UTC")) {
				this._oDateFormatSettings["UTC"] = true;
			}

			// Used for IN param handling (visible field)
			// TODO: CleanUp - a better handling
			this._oSmartFilter = mPropertyBag.smartFilter;

			this._bConsiderAnalyticalParameters = mPropertyBag.considerAnalyticalParameters;
			this._bUseDateRangeType = mPropertyBag.useDateRangeType;
			this._bConsiderSelectionVariants = mPropertyBag.considerSelectionVariants;

			this._aConsiderNavigations = mPropertyBag.considerNavigations;
		}
		this.sFilterModelName = FilterProvider.FILTER_MODEL_NAME;
		this._sBasicFilterAreaID = FilterProvider.BASIC_FILTER_AREA_ID;
		this._aAnalyticalParameters = [];
		this._aFilterBarViewMetadata = [];
		this._aFilterBarFieldNames = [];
		this._aFilterBarMultiValueFieldMetadata = [];
		this._aFilterBarDateFieldNames = [];
		this._aFilterBarTimeFieldNames = [];
		this._aFilterBarTimeIntervalFieldNames = [];
		this._aFilterBarDateTimeMultiValueFieldNames = [];
		this._aFilterBarStringFieldNames = [];
		// Array of FieldGroups from FieldGroup annotations
		this._aFieldGroupAnnotation = [];
		this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel || this._sServiceURL);
		// Initialise the model early so this can already be passed to the necessary helper classes --> Ex: BaseValueListProvider
		this.oModel = new JSONModel();

		this._aValueListProvider = [];
		this._aValueHelpDialogProvider = [];
		this._mTokenHandler = {};
		this._mConditionTypeFields = {};
		this._aSelectionVariants = [];

		this._intialiseMetadata();
		this._bInitialized = true;
	};

	FilterProvider.FILTER_MODEL_NAME = "fi1t3rM0d31";
	FilterProvider.BASIC_FILTER_AREA_ID = "_BASIC";
	FilterProvider.BASIC_SEARCH_FIELD_ID = "_BASIC_SEARCH_FIELD";
	FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY = "_CUSTOM";
	FilterProvider.FIELD_NAME_REGEX = /\./g;

	/**
	 * Initialises the necessary filter metadata and model
	 * @private
	 */
	FilterProvider.prototype._intialiseMetadata = function() {
		var iGroupLen, iFieldLen, oSelectionFields, oODataFilterGroup, aODataFilterGroups, i, j, oODataFilterField, oFieldMetadata, oGroupMetadata, aCustomFilterField, aCustomGroup;
		// first, create a Basic Area Group (groupId/groupName shall be "_BASIC")
		this._aFilterBarViewMetadata.push({
			groupName: this._sBasicFilterAreaID,
			index: 0, // should be the 1st group on the UI
			fields: []
		});
		// try to calculate entitySet using entityType, when no entitySet is provided
		if (!this.sEntitySet && this.sEntityType) {
			this.sEntitySet = this._oMetadataAnalyser.getEntitySetNameFromEntityTypeName(this.sEntityType);
		}
		// Calculate the entityType from entitySet, if not entityType is provided

		this.sEntityType = this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(this.sEntitySet);

		aODataFilterGroups = this._oMetadataAnalyser.getAllFilterableFieldsByEntitySetName(this.sEntitySet, this._bConsiderAnalyticalParameters, this._aConsiderNavigations);
		if (aODataFilterGroups) {
			// update TextArrangement
			this._updateDisplayBehaviour();

			// Get the array of FieldGroup annotations
			this._aFieldGroupAnnotation = this._oMetadataAnalyser.getFieldGroupsByFilterFacetsAnnotation(this.sEntityType);

			// Get the SemanticFields annotation
			oSelectionFields = this._oMetadataAnalyser.getSelectionFieldsAnnotation(this.sEntityType);
			if (oSelectionFields && oSelectionFields.selectionFields) {
				this._aSelectionFields = oSelectionFields.selectionFields;
			}

			// Create groups based on FieldGroup annotation
			if (this._aFieldGroupAnnotation) {
				iGroupLen = this._aFieldGroupAnnotation.length;
				for (i = 0; i < iGroupLen; i++) {
					// Create metadata for group
					oODataFilterGroup = this._aFieldGroupAnnotation[i];
					oGroupMetadata = this._createGroupMetadata(oODataFilterGroup);
					oGroupMetadata.index = this._aFilterBarViewMetadata.length; // Set the index to maintain the order
					this._aFilterBarViewMetadata.push(oGroupMetadata);
				}
			}

			// Create groups and fields based on entity metadata
			iGroupLen = aODataFilterGroups.length;
			for (i = 0; i < iGroupLen; i++) {
				// Create metadata for group
				oODataFilterGroup = aODataFilterGroups[i];
				iFieldLen = oODataFilterGroup.fields.length;
				oGroupMetadata = this._createGroupMetadata(oODataFilterGroup);
				this._aFilterBarViewMetadata.push(oGroupMetadata);

				// Create metadata for fields
				for (j = 0; j < iFieldLen; j++) {
					oODataFilterField = oODataFilterGroup.fields[j];
					// Check if field is not a Primitive type --> only generate metadata for primitive/simple type fields
					if (oODataFilterField.type.indexOf("Edm.") === 0) {
						oFieldMetadata = this._createFieldMetadata(oODataFilterField);
						oGroupMetadata.fields.push(oFieldMetadata);
						this._aFilterBarFieldNames.push(oFieldMetadata.fieldName);
					}
				}
			}
		}

		// custom groups
		aCustomGroup = this._getAdditionalConfigurationForCustomGroups(aODataFilterGroups);
		iGroupLen = aCustomGroup.length;
		for (j = 0; j < iGroupLen; j++) {
			oGroupMetadata = this._createGroupMetadataForCustomGroup(aCustomGroup[j]);
			if (oGroupMetadata) {
				this._aFilterBarViewMetadata.push(oGroupMetadata);
			}
		}

		// custom filter fields
		aCustomFilterField = this._getAdditionalConfigurationForCustomFilterFields();
		iFieldLen = aCustomFilterField.length;
		for (j = 0; j < iFieldLen; j++) {
			oFieldMetadata = this._createFieldMetadataForCustomFilterFields(aCustomFilterField[j]);
			if (oFieldMetadata) {
				this._aFilterBarViewMetadata[0].fields.push(oFieldMetadata);
			}
		}

		// Basic search
		if (this._hasBasicSearch()) {
			oFieldMetadata = this._createBasicSearchFieldMetadata();
			this._aFilterBarViewMetadata[0].fields.push(oFieldMetadata);
		}

		// parameters
		if (this._bConsiderAnalyticalParameters) {
			this._createAnalyticalParameters();
		}

		// Selection Variants
		if (this._bConsiderSelectionVariants) {
			this._createSelectionVariants();
		}

		this._applyGroupId();
		this._applyIndexes();
		this._createInitialModel(true);
		this._initializeConditionTypeFields();
		this.setPending(this.isPending());
	};

	FilterProvider.prototype._createSelectionVariants = function() {
		// Get the SelectionVariant annotation
		this._aSelectionVariants = this._oMetadataAnalyser.getSelectionVariantAnnotation(this.sEntityType);
	};

	FilterProvider.prototype._createAnalyticalParameters = function() {
		var o4AnaModel;

		if (this._oMetadataAnalyser.isSemanticAggregation(this.sEntityType)) {

			jQuery.sap.require("sap.ui.model.analytics.odata4analytics");
			try {
				o4AnaModel = new sap.ui.model.analytics.odata4analytics.Model(new sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(this._oParentODataModel));
			} catch (e) {
				throw "Failed to instantiate analytical extensions for given OData model: " + e.message;
			}

			// Will find the necessary entry point to work with the parameter set
			var oQueryResult = o4AnaModel && o4AnaModel.findQueryResultByName(this.sEntitySet);
			this._oParameterization = oQueryResult && oQueryResult.getParameterization();

			this._createAnalyticParameters(this._oParameterization);
		}

	};

	FilterProvider.prototype.attachPendingChange = function(fn) {
		if (!this._oEventProvider) {
			this._oEventProvider = new EventProvider();
		}
		this._oEventProvider.attachEvent("PendingChange", fn);
	};

	FilterProvider.prototype.detachPendingChange = function(fn) {
		if (this._oEventProvider) {
			this._oEventProvider.detachEvent("PendingChange", fn);
		}
	};

	FilterProvider.prototype.setPending = function(bValue) {
		var bChanged = this._bPending !== bValue;
		this._bPending = bValue;
		if (bChanged && this._oEventProvider) {
			var mParameters = {};
			mParameters.pending = bValue;
			this._oEventProvider.fireEvent("PendingChange", mParameters);
		}
	};

	FilterProvider.prototype.isPending = function() {
		if (!this._bInitialized) {
			return true;
		}
		for ( var n in this._mConditionTypeFields) {
			if (this._mConditionTypeFields[n].conditionType.isPending()) {
				return true;
			}
		}
		return false;
	};

	/**
	 * Updates the displayBehaviour from TextArrangment annotation, if necessary
	 * @private
	 */
	FilterProvider.prototype._updateDisplayBehaviour = function() {
		this._sTextArrangementDisplayBehaviour = this._oMetadataAnalyser.getTextArrangementValue(this.sEntityType);
		if (!this.sDefaultDropDownDisplayBehaviour) {
			if (this._sTextArrangementDisplayBehaviour) {
				this.sDefaultDropDownDisplayBehaviour = this._sTextArrangementDisplayBehaviour;
			} else {
				this.sDefaultDropDownDisplayBehaviour = sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionOnly;
			}
		}
		if (!this.sDefaultTokenDisplayBehaviour) {
			if (this._sTextArrangementDisplayBehaviour) {
				this.sDefaultTokenDisplayBehaviour = this._sTextArrangementDisplayBehaviour;
			} else {
				this.sDefaultTokenDisplayBehaviour = sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionAndId;
			}
		}
	};

	/**
	 * Returns a flag indicating whether a field for the basic search shall be rendered or not
	 * @returns {boolean} Flag
	 * @private
	 */
	FilterProvider.prototype._hasBasicSearch = function() {
		return this._isBasicSearchEnabled;
	};

	/**
	 * Looks for custom filter fields from the additional configuration which have a name which is not known in the ODATA metadata
	 * @returns {Array} Array containing the the control configuration of the additional filter fields
	 * @private
	 */
	FilterProvider.prototype._getAdditionalConfigurationForCustomFilterFields = function() {
		var aControlConfiguration, length, i, aResult;

		// get additional control configuration
		if (!this._oAdditionalConfiguration) {
			return [];
		}
		aControlConfiguration = this._oAdditionalConfiguration.getControlConfiguration();

		// check if fields from OData metadata exist
		if (!this._aFilterBarFieldNames || !this._aFilterBarFieldNames.length) {
			return aControlConfiguration;
		}

		aResult = [];
		length = aControlConfiguration.length;
		for (i = 0; i < length; i++) {
			// filter field for control configuration could not be found in OData metadata...this is a custom filter field!
			if (this._aFilterBarFieldNames.indexOf(aControlConfiguration[i].key) < 0) {
				aResult.push(aControlConfiguration[i]);
			}
		}
		return aResult;
	};

	/**
	 * Looks for custom groups from the additional configuration which have a name which is not known in the ODATA metadata
	 * @param {object} aODataFilterGroups - groups from the ODATA metadata
	 * @returns {Array} Array containing the the group configuration of the custom groups
	 * @private
	 */
	FilterProvider.prototype._getAdditionalConfigurationForCustomGroups = function(aODataFilterGroups) {
		var aGroupConfiguration, length, nODataGroupsLength, i, aResult, j, bFound, sGroupName;

		// get additional group configuration
		if (!this._oAdditionalConfiguration) {
			return [];
		}
		aGroupConfiguration = this._oAdditionalConfiguration.getGroupConfiguration();

		// get groups from OData metadata
		if (!aODataFilterGroups || !aODataFilterGroups.length) {
			return aGroupConfiguration;
		}

		aResult = [];
		nODataGroupsLength = aODataFilterGroups.length;
		length = aGroupConfiguration.length;
		for (i = 0; i < length; i++) {
			bFound = false;
			for (j = 0; j < nODataGroupsLength; j++) {
				sGroupName = aODataFilterGroups[j].groupName || aODataFilterGroups[j].groupEntityName;
				if (sGroupName === aGroupConfiguration[i].key) {
					bFound = true;
					break;
				}
			}
			if (!bFound) { // group from group configuration could not be found in OData metadata...this is a custom group!
				aResult.push(aGroupConfiguration[i]);
			}
		}

		return aResult;
	};

	/**
	 * Initialises the necessary filter metadata and model
	 * @param {object} oJSONData - The JSON data from the model
	 * @param {object} oFilterFieldMetadata - The metadata for the filter field
	 * @param {boolean} bUseDefaultValues - whether default values from configuration shall be used
	 * @private
	 */
	FilterProvider.prototype._createInitialModelForField = function(oJSONData, oFilterFieldMetadata, bUseDefaultValues) {
		var bIsDateTimeType = false, aDefaultFilterValues, oDefaultFilterValue, bHasDefaultFilterValue = false, bIsRangeField = false, sLowValue = null, sHighValue = null, iLength, oItem = null, aItems = [], aRanges = [];
		// Model will no be created for custom filter fields..
		if (!oFilterFieldMetadata || oFilterFieldMetadata.isCustomFilterField) {
			return;
		}
		if (oFilterFieldMetadata.filterRestriction !== sap.ui.comp.smartfilterbar.FilterType.multiple) {
			bIsRangeField = true;
		}

		if ((oFilterFieldMetadata.filterType === "date") || (oFilterFieldMetadata.filterType === "time")) {
			bIsDateTimeType = true;
		}

		if (bUseDefaultValues) {
			// Get the array of default filter values
			aDefaultFilterValues = oFilterFieldMetadata.defaultFilterValues;
			bHasDefaultFilterValue = aDefaultFilterValues && aDefaultFilterValues.length;

			if (!bHasDefaultFilterValue && oFilterFieldMetadata.defaultFilterValue || oFilterFieldMetadata.defaultPropertyValue) {

				if (oFilterFieldMetadata.isParameter) {
					aDefaultFilterValues = [
						{
							low: oFilterFieldMetadata.defaultPropertyValue
						}
					];
				} else {
					aDefaultFilterValues = [
						{
							low: oFilterFieldMetadata.defaultFilterValue,
							high: oFilterFieldMetadata.defaultFilterValue,
							operator: "EQ",
							sign: "I"
						}
					];
				}
				bHasDefaultFilterValue = true;
			}

		}
		if (oFilterFieldMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.single) {
			// If there is a default filter value use only the low value of 1st one --> single filter scenario!
			if (bHasDefaultFilterValue) {
				oDefaultFilterValue = aDefaultFilterValues[0];
				sLowValue = bIsDateTimeType ? this._createDateTimeValue(oFilterFieldMetadata, oDefaultFilterValue.low) : oDefaultFilterValue.low;
			}

			oJSONData[oFilterFieldMetadata.fieldName] = sLowValue;

		} else if (oFilterFieldMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.interval && oFilterFieldMetadata.type !== "Edm.Time") {
			// If there is a default filter value use both low and high, but only of the 1st one --> interval filter scenario!
			if (bHasDefaultFilterValue) {
				oDefaultFilterValue = aDefaultFilterValues[0];
				sLowValue = bIsDateTimeType ? this._createDateTimeValue(oFilterFieldMetadata, oDefaultFilterValue.low) : oDefaultFilterValue.low;
				sHighValue = bIsDateTimeType ? this._createDateTimeValue(oFilterFieldMetadata, oDefaultFilterValue.high) : oDefaultFilterValue.high;
			}

			oJSONData[oFilterFieldMetadata.fieldName] = {
				low: sLowValue,
				high: sHighValue
			};
		} else {
			// If there is a default filter value use all the low values as keys --> multiple/range
			if (bHasDefaultFilterValue) {
				iLength = aDefaultFilterValues.length;
				while (iLength--) {
					oDefaultFilterValue = aDefaultFilterValues[iLength];
					if (bIsRangeField) {
						oItem = {
							"exclude": oDefaultFilterValue.sign === "E",
							// Convert "CP" from Configuration to "Contains"
							"operation": oDefaultFilterValue.operator === "CP" ? "Contains" : oDefaultFilterValue.operator,
							"keyField": oFilterFieldMetadata.fieldName,
							"value1": bIsDateTimeType ? this._createDateTimeValue(oFilterFieldMetadata, oDefaultFilterValue.low) : oDefaultFilterValue.low,
							"value2": bIsDateTimeType ? "" : oDefaultFilterValue.high
						};

						if ((oFilterFieldMetadata.filterType === "time") && oDefaultFilterValue.high) {
							oItem.value2 = new Date(oDefaultFilterValue.high);
						}

					} else {
						oItem = {
							key: bIsDateTimeType ? this._createDateTimeValue(oFilterFieldMetadata, oDefaultFilterValue.low) : oDefaultFilterValue.low,
							text: bIsDateTimeType ? "" : oDefaultFilterValue.low
						};
					}

					aItems.push(oItem);
				}
			}
			// Add this to the local multi-value field array
			this._aFilterBarMultiValueFieldMetadata.push(oFilterFieldMetadata);
			// Update the model
			oJSONData[oFilterFieldMetadata.fieldName] = {
				value: null
			};
			if (bIsRangeField) {
				aRanges = aItems.slice(0);
				aItems = [];
				oJSONData[oFilterFieldMetadata.fieldName].ranges = aRanges;
			}
			oJSONData[oFilterFieldMetadata.fieldName].items = aItems;

			// Update the corresponding control with array value
			this._updateMultiValueControl(oFilterFieldMetadata.control, aItems, aRanges);
		}
	};

	FilterProvider.prototype._createDateTimeValue = function(oFilterFieldMetadata, sValue) {

		if ((oFilterFieldMetadata.type === "Edm.Time") && (sValue.indexOf("PT") === 0)) {
			return this._getTime(sValue);
		} else {
			return new Date(sValue);
		}

	};

	/**
	 * Initialises the JSON model for filter fields
	 * @param {boolean} bUseDefaultValues - whether default values from configuration shall be used
	 * @private
	 */
	FilterProvider.prototype._createInitialModel = function(bUseDefaultValues) {
		var oJSONData, iGroupLength, iFieldLength, oGroup, j, i;
		oJSONData = {};
		this._bCreatingInitialModel = true;
		// This will now be recreated if required
		this._aFilterBarMultiValueFieldMetadata = [];
		if (this._aFilterBarViewMetadata) {
			iGroupLength = this._aFilterBarViewMetadata.length;
			for (i = 0; i < iGroupLength; i++) {
				oGroup = this._aFilterBarViewMetadata[i];
				iFieldLength = oGroup.fields.length;
				for (j = 0; j < iFieldLength; j++) {
					this._createInitialModelForField(oJSONData, oGroup.fields[j], bUseDefaultValues);
				}
			}
		}

		// set the initial model for analytical parameters
		if (this._aAnalyticalParameters) {
			iFieldLength = this._aAnalyticalParameters.length;
			for (j = 0; j < iFieldLength; j++) {
				this._createInitialModelForField(oJSONData, this._aAnalyticalParameters[j], bUseDefaultValues);
			}
		}

		this.oModel.setData(oJSONData);
		if (!bUseDefaultValues) {
			this._clearConditionTypeFields();
		}
		this._updateConditionTypeFields();
		this._bCreatingInitialModel = false;
	};

	/**
	 * Updates the multi-value control with initial/filter data
	 * @param {Object} oControl - the control to be updated
	 * @param {Array} aItems = the array of key, text values to be set in the control
	 * @param {Array} aRanges = the array of range values to be set in the control
	 * @param {Object} oFilterFieldMetadata = filter field metadata
	 * @private
	 */
	FilterProvider.prototype._updateMultiValueControl = function(oControl, aItems, aRanges, oFilterFieldMetadata) {
		var i = 0, aTokens = null, oToken = null, oRange = null, sText = null, aKeys = null, value1, value2, oType;
		// MultiComboBox and MultiInput fields cannot be bound, since the tokens are created internally and do not support 2 way binding
		// In case the model is reset/set initially, set the tokens manually through this
		if (oControl && aItems) {
			i = aItems.length;
			if (oControl instanceof MultiInput) {
				aTokens = [];
				while (i--) {
					sText = aItems[i].text || aItems[i].key;
					aTokens.push(new Token({
						key: aItems[i].key,
						text: sText,
						tooltip: sText
					}));
				}
				if (aRanges) {
					i = aRanges.length;
					while (i--) {
						oRange = aRanges[i];
						if (oRange.tokenText) {
							sText = oRange.tokenText;
						} else {
							value1 = oRange.value1;
							value2 = oRange.value2;
							if (oFilterFieldMetadata) {

								if ((oFilterFieldMetadata.filterType === "date") || (oFilterFieldMetadata.filterType === "datetime") || (oFilterFieldMetadata.filterType === "time")) {
									if (value1 && typeof value1 === "string") {
										value1 = new Date(value1);
									}
									if (value2 && typeof value2 === "string") {
										value2 = new Date(value2);
									}
								}

								if ((value1 instanceof Date) || (value2 instanceof Date)) {
									oType = this._getType(oFilterFieldMetadata);
									if (value1) {
										value1 = oType.formatValue(value1, "string");
									}
									if (value2) {
										value2 = oType.formatValue(value2, "string");
									}
								}
							}

							sText = FormatUtil.getFormattedRangeText(oRange.operation, value1, value2, oRange.exclude);
						}
						oToken = new Token({
							text: sText,
							tooltip: sText
						});
						oToken.data("range", oRange);
						aTokens.push(oToken);
					}
				}
				oControl.setTokens(aTokens);
// oControl.fireTokenChange({
// type: "tokensChanged"
// });
			}
			if (oControl instanceof MultiComboBox) {
				aKeys = [];
				while (i--) {
					aKeys.push(aItems[i].key);
				}
				oControl.setSelectedKeys(aKeys);
			}
		}
	};

	/**
	 * Updates the view metadata by applying index of groups and fields from the additional configuration.
	 * @private
	 */
	FilterProvider.prototype._applyIndexes = function() {
		var groupLength, i;

		if (!this._aFilterBarViewMetadata) {
			return;
		}

		// sort groups by index
		this._aFilterBarViewMetadata = this._sortByIndex(this._aFilterBarViewMetadata);

		groupLength = this._aFilterBarViewMetadata.length;
		for (i = 0; i < groupLength; i++) {
			// sort fields of a group by index
			if (this._aFilterBarViewMetadata[i].fields) {
				this._aFilterBarViewMetadata[i].fields = this._sortByIndex(this._aFilterBarViewMetadata[i].fields);
			}
		}
	};

	/**
	 * Returns a new Array containing all Elements from the incoming Array and the order was changed considering the indexes
	 * @param {Array} aArray - Array of objects having an index property
	 * @returns {Array} sorted array
	 * @private
	 */
	FilterProvider.prototype._sortByIndex = function(aArray) {
		var aFieldsHavingAnIndex, i, length, aResult, iIndex, oField;
		if (!aArray || !aArray.length) {
			return aArray;
		}
		aResult = [];
		aFieldsHavingAnIndex = [];
		length = aArray.length;
		for (i = 0; i < length; i++) {
			oField = aArray[i];
			iIndex = oField.index;
			if (iIndex >= 0) {
				aFieldsHavingAnIndex.push(oField);
			} else {
				aResult.push(oField); // add fields having no index to result...
			}
		}
		length = aFieldsHavingAnIndex.length;
		if (length) {
			// Sort fields having an index
			aFieldsHavingAnIndex = aFieldsHavingAnIndex.sort(function(field1, field2) {
				return field1.index - field2.index;
			});
			// Check if fields without index exist, if not, use the sorted indexed fields array as result
			if (!aResult.length) {
				aResult = aFieldsHavingAnIndex;
			} else {
				// add fields having an index at the right location (if possible) in result array
				for (i = 0; i < length; i++) {
					oField = aFieldsHavingAnIndex[i];
					if (oField.index >= aResult.length) {
						aResult.push(oField);
					} else {
						aResult.splice(oField.index, 0, oField);
					}
				}
			}
		}
		return aResult;
	};

	/**
	 * Updates the view metadata by applying the groupId from the additional configuration.
	 * @private
	 */
	FilterProvider.prototype._applyGroupId = function() {
		var groupLength, i, fieldLength, j, oField, oNewParentGroup, k;
		groupLength = this._aFilterBarViewMetadata.length;

		for (i = 0; i < groupLength; i++) {
			if (!this._aFilterBarViewMetadata[i].fields) { // if there are no fields...
				continue;
			}
			fieldLength = this._aFilterBarViewMetadata[i].fields.length;
			for (j = 0; j < fieldLength; j++) {
				oField = this._aFilterBarViewMetadata[i].fields[j];
				if (oField && oField.groupId && oField.groupId !== this._aFilterBarViewMetadata[i].groupName) {
					// Find new parent group
					oNewParentGroup = undefined;
					for (k = 0; k < groupLength; k++) {
						if (this._aFilterBarViewMetadata[k].groupName === oField.groupId) {
							oNewParentGroup = this._aFilterBarViewMetadata[k];
							break;
						}
					}

					// Move field to new parent group
					if (oNewParentGroup) {
						this._aFilterBarViewMetadata[i].fields.splice(j, 1);
						j--;
						fieldLength--;
						oNewParentGroup.fields = oNewParentGroup.fields || [];
						oNewParentGroup.fields.push(oField);
					}
				}
			}
		}
	};

	/**
	 * Creates an id for a filter control based on its field view metadata.
	 * @param {Object} oFieldViewMetadata - resolved filter view data with OData metadata and control configuration
	 * @returns {String} Id of a control used inside the SmartFilterBar
	 * @private
	 */
	FilterProvider.prototype._createFilterControlId = function(oFieldViewMetadata) {
		var sFilterBarName = this._oSmartFilter.getId();
		var sGroupId = IdentifierUtil.replace(oFieldViewMetadata.groupId || "");
		var sName = IdentifierUtil.replace(oFieldViewMetadata.fieldName);

		return sFilterBarName + "-filterItemControl" + sGroupId + "-" + sName;
	};

	/**
	 * Creates a group based on the OData metadata
	 * @private
	 * @param {object} oODataFilterBarGroup - OData metadata for group
	 * @returns {object} view metadata for group
	 */
	FilterProvider.prototype._createGroupMetadata = function(oODataFilterBarGroup) {
		var oGroupMetadata, oGroupConfiguration, sGroupName;

		sGroupName = oODataFilterBarGroup.groupName || oODataFilterBarGroup.groupEntityName;
		// Get additional configuration for groups
		oGroupConfiguration = this._oAdditionalConfiguration.getGroupConfigurationByKey(sGroupName);

		oGroupMetadata = {};
		oGroupMetadata.groupName = sGroupName;
		oGroupMetadata.groupLabel = this._getGroupLabel(oODataFilterBarGroup, oGroupConfiguration); // if label is specified in additional
		// configuration,
		// pick this
		// one
		oGroupMetadata.fields = [];
		oGroupMetadata.index = this._getGroupIndex(oGroupConfiguration);

		return oGroupMetadata;
	};

	/**
	 * Creates a group based on the additional configuration (GroupConfiguration)
	 * @private
	 * @param {object} oGroupConfiguration - OData metadata for group
	 * @returns {object} view metadata for group
	 */
	FilterProvider.prototype._createGroupMetadataForCustomGroup = function(oGroupConfiguration) {
		var oGroupMetadata;

		oGroupMetadata = {};
		oGroupMetadata.groupName = oGroupConfiguration.key;
		oGroupMetadata.groupLabel = oGroupConfiguration.label;
		// one
		oGroupMetadata.fields = [];
		oGroupMetadata.index = this._getGroupIndex(oGroupConfiguration);

		return oGroupMetadata;
	};

	FilterProvider.prototype._getTime = function(sValue) {
		var oFormat = DateFormat.getTimeInstance({
			pattern: "'PT'hh'H'mm'M'ss'S'"
		});

		return oFormat.parse(sValue);
	};

	FilterProvider.prototype._checkMetadataDefaultValue = function(oFieldViewMetadata) {
		var oType, sDefaultValue = oFieldViewMetadata.defaultFilterValue || oFieldViewMetadata.defaultPropertyValue;

		if (sDefaultValue) {

			try {
				if ((oFieldViewMetadata.type === "Edm.Time") && (sDefaultValue.indexOf("PT") === 0)) {
					this._getTime(sDefaultValue);
				} else {
					oType = this._getType(oFieldViewMetadata);
					oType.parseValue(sDefaultValue, "string");
				}

			} catch (ex) {
				oFieldViewMetadata.defaultPropertyValue = null;
				oFieldViewMetadata.defaultFilterValue = null;
				jQuery.sap.log.error("default value for " + oFieldViewMetadata.fieldName + " could not be parsed.");
			}
		}
	};

	FilterProvider.prototype._getType = function(oFieldViewMetadata) {
		var oType, oFormatOptions = {}, oConstraints = {};

		// Set constraints from metadata
		if (oFieldViewMetadata.precision || oFieldViewMetadata.scale) {
			oConstraints.precision = oFieldViewMetadata.precision;
			oConstraints.scale = oFieldViewMetadata.scale;
		}
		if (oFieldViewMetadata.maxLength) {
			oConstraints.maxLength = oFieldViewMetadata.maxLength;
		}
		if (oFieldViewMetadata.displayFormat) {
			oConstraints.displayFormat = oFieldViewMetadata.displayFormat;
		}

		// Set Format options from metadata (only for date type for now)
		if (oFieldViewMetadata.fControlConstructor === DateRangeSelection || oFieldViewMetadata.fControlConstructor === DatePicker || oFieldViewMetadata.type === "Edm.DateTimeOffset") {
			oFormatOptions = jQuery.extend({}, this._oDateFormatSettings, {
				UTC: false
			});
		}

		oType = ODataType.getType(oFieldViewMetadata.type, oFormatOptions, oConstraints);

		return oType;
	};

	/**
	 * Creates the control instance based on the OData Metadata and additional configuration
	 * @param {Object} oFieldViewMetadata - resolved filter view data with OData metadata and control configuration
	 * @returns {Object} an instance of the control to be used in the SmartFilterBar
	 * @private
	 */
	FilterProvider.prototype._createControl = function(oFieldViewMetadata) {
		var oControl, oType, bIsInterval = false, iMaxLength, fClearModel;

		// if a custom control is specified, use it
		if (oFieldViewMetadata.customControl) {
			return oFieldViewMetadata.customControl;
		}

		oType = this._getType(oFieldViewMetadata);

		oControl = new oFieldViewMetadata.fControlConstructor(this._createFilterControlId(oFieldViewMetadata));
		if (oFieldViewMetadata.fControlConstructor === DateRangeSelection) {
			oControl.bindProperty('dateValue', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/low");
			oControl.bindProperty('secondDateValue', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/high");
		} else if ((oFieldViewMetadata.fControlConstructor === ComboBox) || (oFieldViewMetadata.fControlConstructor === Select)) {
			if (oControl.setForceSelection) {
				oControl.setForceSelection(true);
			}
			if (oFieldViewMetadata.fControlConstructor === Select) {
				oControl.addItem(new Item({
					key: "",
					text: ""
				}));
				oControl.addItem(new Item({
					key: false,
					text: oType.formatValue(false, "string")
				}));
				oControl.addItem(new Item({
					key: true,
					text: oType.formatValue(true, "string")
				}));

			} else {
				this._associateValueList(oControl, "items", oFieldViewMetadata);

				// Listen to the selection change and update the model accordingly
				oControl.attachSelectionChange(function() {
					// Do nothing while the data is being created/updated!
					if (this._bUpdatingFilterData || this._bCreatingInitialModel) {
						return;
					}
					// Manually trigger the change event on sapUI5 control since it doesn't do this internally on selectionChange!
					oControl.fireChange({
						filterChangeReason: oFieldViewMetadata.fieldName,
						value: ""
					});
				}.bind(this));
			}

			oControl.bindProperty('selectedKey', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName);
		} else if (oFieldViewMetadata.fControlConstructor === MultiComboBox) {
			this._associateValueList(oControl, "items", oFieldViewMetadata);
			// Listen to the selection change and update the model accordingly
			oControl.attachSelectionChange(function(oEvt) {
				// Do nothing while the data is being created/updated!
				if (this._bUpdatingFilterData || this._bCreatingInitialModel) {
					return;
				}
				var oCtrl = oEvt.getSource(), aSelectedItems = null, aKeys = [], iLength;
				aSelectedItems = oCtrl.getSelectedItems();
				if (aSelectedItems) {
					iLength = aSelectedItems.length;
					while (iLength--) {
						aKeys.push({
							key: aSelectedItems[iLength].getKey(),
							text: aSelectedItems[iLength].getText()
						});
					}
				}
				if (this.oModel) {
					this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/items", aKeys);
				}
				// Manually trigger the change event on sapUI5 control since it doesn't do this internally on selectionChange!
				oCtrl.fireChange({
					filterChangeReason: oFieldViewMetadata.fieldName,
					value: ""
				});
			}.bind(this));
			oControl.bindProperty('value', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/value");
		} else if (oFieldViewMetadata.fControlConstructor === MultiInput) {
			if (oFieldViewMetadata.controlType === sap.ui.comp.smartfilterbar.ControlType.date || oFieldViewMetadata.type === "Edm.Time") {
				oControl.setValueHelpOnly(true);
				if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.interval) {
					this._associateValueHelpDialog(oControl, oFieldViewMetadata, false, false);
				} else {
					this._associateValueHelpDialog(oControl, oFieldViewMetadata, true, true);
				}
			} else {
				if (oFieldViewMetadata.hasValueHelpDialog) {
					this._associateValueHelpDialog(oControl, oFieldViewMetadata, oFieldViewMetadata.filterRestriction !== sap.ui.comp.smartfilterbar.FilterType.multiple, true);
				} else {
					oControl.setShowValueHelp(false);
				}
				oControl.bindProperty('value', {
					path: this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/value",
					type: oType
				});
			}
			this._handleMultiInput(oControl, oFieldViewMetadata, oType);
		} else if (oFieldViewMetadata.fControlConstructor === Input) {
			if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.interval) {
				bIsInterval = true;
				// we assume the interval values shall be split by "-"; so bind only to low and resolve this later while creating the filters
				oControl.bindProperty('value', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName + "/low");
				if (!this.oResourceBundle) {
					this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
				}
				if (!this.sIntervalPlaceholder) {
					this.sIntervalPlaceholder = this.oResourceBundle.getText("INTERVAL_PLACEHOLDER_TEXT");
				}
				oControl.setPlaceholder(this.sIntervalPlaceholder);
			} else {
				oControl.bindProperty('value', {
					path: this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName,
					type: oType
				});
			}
			if (oFieldViewMetadata.hasValueHelpDialog) {
				oControl.setShowValueHelp(true);
				this._associateValueHelpDialog(oControl, oFieldViewMetadata, false, false);
			}
		} else if (oFieldViewMetadata.fControlConstructor === DatePicker || oFieldViewMetadata.fControlConstructor === TimePicker) {
			oControl.bindProperty('dateValue', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName);
		}

		if (oControl instanceof DatePicker) {
			if (this._oDateFormatSettings && this._oDateFormatSettings.style) {
				oControl.setDisplayFormat(this._oDateFormatSettings.style);
			}
			// Error handling for DatePicker controls!
			oControl.attachChange(function(oEvent) {
				var bValid = oEvent.getParameter("valid");
				// Clear mandatory empty error state flag
				oControl.data("__mandatoryEmpty", null);
				if (bValid) {
					// If value is valid clear value state
					oControl.setValueState(sap.ui.core.ValueState.None);
					oControl.setValueStateText();
				} else {
					// If value is invalid set value state as error
					oControl.setValueState(sap.ui.core.ValueState.Error);
					// Show the exception message from OData DateTime type by parsing a dummy value
					if (oType) {
						try {
							oType.parseValue("foo", "string");
						} catch (oEx) {
							// If value is invalid --> set value state text from exception message
							oControl.setValueStateText(oEx.message);
						}
					}
				}
			});
		}

		if (oFieldViewMetadata.hasTypeAhead) {
			oControl.setShowSuggestion(true);
			oControl.setFilterSuggests(false);
			this._associateValueList(oControl, "suggestionRows", oFieldViewMetadata, true);
		}

		// Convert typed in values to UpperCase for displayFormat = UpperCase
		if (oFieldViewMetadata.displayFormat === "UpperCase" && oControl.attachChange && oControl.getValue && oControl.setValue) {
			oControl.attachChange(function() {
				var sValue = oControl.getValue();
				if (sValue) {
					oControl.setValue(sValue.toUpperCase());
				}
			});

			if (this._mTokenHandler[oControl.getId()] && this._mTokenHandler[oControl.getId()].parser) {
				var oTokenParser = this._mTokenHandler[oControl.getId()].parser;
				oTokenParser.setDisplayFormat(oFieldViewMetadata.displayFormat); // "UpperCase"
			}
		}

		// Additional handling for Input and MultiInput
		if (oControl instanceof Input) {
			// Set MaxLength for fields without any ValueListAnnotation or non intervals!
			if (!oFieldViewMetadata.hasValueListAnnotation && !bIsInterval && oFieldViewMetadata.maxLength) {
				iMaxLength = parseInt(oFieldViewMetadata.maxLength, 10);
				if (!isNaN(iMaxLength)) {
					if (this._mTokenHandler[oControl.getId()] && this._mTokenHandler[oControl.getId()].parser) {
						var oTokenParser = this._mTokenHandler[oControl.getId()].parser;
						oTokenParser.setMaxLength(iMaxLength);
					} else {
						oControl.setMaxLength(iMaxLength);
					}
				}
			}
		}

		// Special handling when users clears the value or enters an invalid one
		fClearModel = function(oEvent) {
			var oException = oEvent.getParameter("exception");
			if (oControl) {
				if (oException) {
					if (oControl.setValueStateText) {
						oControl.setValueStateText(oException.message);
					}
				}
				if (oControl.setValueState) {
					oControl.setValueState(sap.ui.core.ValueState.Error);
				}
				// Clear mandatory empty error state flag
				oControl.data("__mandatoryEmpty", null);
			}
		};
		oControl.attachParseError(fClearModel);
		oControl.attachFormatError(fClearModel);
		oControl.attachValidationError(fClearModel);
		oControl.attachValidationSuccess(function(oEvent) {
			if (oControl) {
				if (oControl.setValueState) {
					oControl.setValueState(sap.ui.core.ValueState.None);
				}
				if (oControl.setValueStateText) {
					oControl.setValueStateText();
				}
				// Clear mandatory empty error state flag
				oControl.data("__mandatoryEmpty", null);
				// Clear the ValidationText set during validation request
				delete oControl.__sValidationText;
			}
		});

		return oControl;
	};

	/**
	 * Creates the control instance based on the OData Metadata and additional configuration
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @returns {function} the constructor function of the control
	 * @private
	 */
	FilterProvider.prototype._getControlConstructor = function(oFieldViewMetadata, sParamPrefix) {
		// default to input
		var fControlConstructor = Input, bFilterRestrictionSingle, bFilterRestrictionInterval, sPrefixedFieldName;

		sPrefixedFieldName = sParamPrefix ? sParamPrefix + oFieldViewMetadata.fieldName : oFieldViewMetadata.fieldName;

		// if a custom control is specified, use it
		if (oFieldViewMetadata.isCustomFilterField) {
			fControlConstructor = undefined;
		} else {
			bFilterRestrictionSingle = (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.single);
			bFilterRestrictionInterval = (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.interval);

			if (oFieldViewMetadata.controlType === sap.ui.comp.smartfilterbar.ControlType.date) {
				// If Date controls are being used --> force the displayFormat to be Date
				oFieldViewMetadata.displayFormat = "Date";
				if (bFilterRestrictionSingle) {
					fControlConstructor = DatePicker;
				} else {
					fControlConstructor = bFilterRestrictionInterval ? DateRangeSelection : MultiInput;
				}
				this._aFilterBarDateFieldNames.push(sPrefixedFieldName); // Date fields need special handling to always store Date objects
				if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.multiple) {
					this._aFilterBarDateTimeMultiValueFieldNames.push(sPrefixedFieldName);
				}
			} else if (oFieldViewMetadata.controlType === sap.ui.comp.smartfilterbar.ControlType.dropDownList) {
				if (bFilterRestrictionSingle) {
					fControlConstructor = this._isBooleanWithFixedValuedButWithoutValueListAnnotation(oFieldViewMetadata) ? Select : ComboBox;
				} else {
					fControlConstructor = MultiComboBox;
				}

				// Filter Restriction is defaulted to auto, reset it to multiple if it is a MultiComboBox
				if (!bFilterRestrictionSingle) {
					oFieldViewMetadata.filterRestriction = sap.ui.comp.smartfilterbar.FilterType.multiple;
				}
			} else if (oFieldViewMetadata.type === "Edm.Time") {
				if (bFilterRestrictionSingle) {
					fControlConstructor = TimePicker;
				} else {
					fControlConstructor = MultiInput;
				}
				this._aFilterBarTimeFieldNames.push(sPrefixedFieldName); // Time fields need special handling to send back time values
				if (bFilterRestrictionInterval) {
					this._aFilterBarTimeIntervalFieldNames.push(sPrefixedFieldName);
				} else if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.multiple) {
					this._aFilterBarDateTimeMultiValueFieldNames.push(sPrefixedFieldName);
				}
			} else if (!bFilterRestrictionSingle && !bFilterRestrictionInterval) {
				fControlConstructor = MultiInput;
			}
		}
		return fControlConstructor;
	};

	/**
	 * handles MultiInput specific changes
	 * @param {object} oControl - The control
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @param {object} oType - odata type of the current field
	 * @private
	 */
	FilterProvider.prototype._handleMultiInput = function(oControl, oFieldViewMetadata, oType) {
		oControl.setEnableMultiLineMode(true);
		oControl.attachTokenChange(function(oEvt) {
			// Do nothing while the data is being created/updated -or- if tokensChanged is not the event!
			if (this._bUpdatingFilterData || this._bCreatingInitialModel || (oEvt.getParameter("type") !== "tokensChanged") && (oEvt.getParameter("type") !== "removed")) {
				return;
			}

			var aTokens = oEvt.getSource().getTokens(), aItems = [], iLength, oToken = null, oRangeData = null, aRanges = [];
			if (aTokens) {
				iLength = aTokens.length;
				while (iLength--) {
					oToken = aTokens[iLength];
					oRangeData = oToken.data("range");
					// Check if token is a range token
					if (oRangeData) {
						oRangeData.tokenText = oToken.getText();
						aRanges.push(oRangeData);
					} else {
						// Items array
						aItems.push({
							key: oToken.getKey(),
							text: oToken.getText()
						});
					}
				}
			}
			if (this.oModel) {
				this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/items", aItems);
				this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/ranges", aRanges);
			}

			// Manually trigger the change event on sapUI5 control since it doesn't do this internally on setValue!
			oControl.fireChange({
				filterChangeReason: oFieldViewMetadata.fieldName,
				value: ""
			});
		}.bind(this));

		var oDateValue, bDateFormat = ((oFieldViewMetadata.type === "Edm.DateTime" && oFieldViewMetadata.displayFormat === "Date"));

		// Copy/Paste for multi values can work property only for String fields
		if (oFieldViewMetadata.hasValueListAnnotation || (oFieldViewMetadata.type === "Edm.String") || bDateFormat) {
			// Handle internal _validateOnPaste event from MultiInput
			oControl.attachEvent("_validateOnPaste", function(oEvent) {
				var aTexts = oEvent.getParameter("texts"), oProperty, iLength, sText, sTokenText, aRanges;
				iLength = aTexts ? aTexts.length : 0;
				// When more than 1 text exists .. directly add it on the Input without any validation!
				if (iLength > 1) {
					// prevent the default behaviour --> (validation will not be done in the MultiInput)
					oEvent.preventDefault();
					// Get relevant property
					oProperty = this.oModel.getProperty("/" + oFieldViewMetadata.fieldName);
					// get existing ranges, if any
					aRanges = oProperty.ranges || [];
					// first clear the value on the MultiInput
					oControl.setValue("");
					// _updateMultiValue uses a reverse while to add tokens; use a reverse while here as well to make the tokens appear in same order
					// as pasted
					while (iLength--) {
						sText = aTexts[iLength];
						if (sText) {
							sTokenText = null;

							if (bDateFormat) {
								oDateValue = this._getDateValue(sText, oType);
								if (isNaN(oDateValue.getDate())) {
									continue;
								} else {
									sTokenText = sText;
									sText = oDateValue;
								}
							}

							// Add text to ranges
							aRanges.push({
								"exclude": false,
								"operation": "EQ",
								"keyField": oFieldViewMetadata.fieldName,
								"value1": sText,
								"value2": null,
								"tokenText": sTokenText

							});
						}
					}
					// Set the updated ranges back to the model
					this.oModel.setProperty("/" + oFieldViewMetadata.fieldName + "/ranges", aRanges);

					// trigger update on the control
					this._updateMultiValueControl(oControl, oProperty.items, aRanges);
				}
			}.bind(this));
		}
	};

	FilterProvider.prototype._getDateValue = function(sValue, oType) {

		var oDate;
		/* eslint-disable no-empty */

		try {
			oDate = oType.parseValue(sValue, "string");
			if (oDate) {
				return oDate;
			}
		} catch (ex) {

		}
		/* eslint-enable no-empty */

		return new Date(sValue);

	};

	/**
	 * Associates the control with a ValueHelp Dialog using the details retrieved from the metadata (annotation)
	 * @param {object} oControl - The control
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @param {boolean} bSupportRanges - Specify if the ValueHelpDialog supports ranges
	 * @param {boolean} bSupportMultiselect - Specify if the ValueHelpDialog supports multi select
	 * @private
	 */
	FilterProvider.prototype._associateValueHelpDialog = function(oControl, oFieldViewMetadata, bSupportRanges, bSupportMultiselect) {
		var oValueHelpProvider = new ValueHelpProvider({
			loadAnnotation: oFieldViewMetadata.hasValueListAnnotation,
			fullyQualifiedFieldName: oFieldViewMetadata.fullName,
			metadataAnalyser: this._oMetadataAnalyser,
			control: oControl,
			filterModel: this.oModel,
			filterProvider: this,
			model: this._oParentODataModel,
			preventInitialDataFetchInValueHelpDialog: oFieldViewMetadata.preventInitialDataFetchInValueHelpDialog,
			dateFormatSettings: this._oDateFormatSettings,
			supportMultiSelect: bSupportMultiselect,
			supportRanges: bSupportRanges,
			isUnrestrictedFilter: oFieldViewMetadata.filterRestriction !== sap.ui.comp.smartfilterbar.FilterType.multiple,
			isSingleIntervalRange: oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.interval,
			fieldName: oFieldViewMetadata.fieldName,
			type: oFieldViewMetadata.filterType,
			scale: oFieldViewMetadata.scale,
			precision: oFieldViewMetadata.precision,
			maxLength: oFieldViewMetadata.maxLength,
			displayFormat: oFieldViewMetadata.displayFormat,
			displayBehaviour: oFieldViewMetadata.displayBehaviour,
			// title: this._determineFieldLabel(oFieldViewMetadata), //oFieldViewMetadata.label,
			fieldViewMetadata: oFieldViewMetadata
		});

		oValueHelpProvider.attachValueListChanged(function(oEvent) {
			if (this._oSmartFilter) {
				this._oSmartFilter.fireFilterChange(oEvent);
			}
		}.bind(this));

		if (oFieldViewMetadata.visibleInAdvancedArea || (oFieldViewMetadata.groupId === FilterProvider.BASIC_FILTER_AREA_ID)) {
			oValueHelpProvider.loadAnnotation();
		}

		this._aValueHelpDialogProvider.push(oValueHelpProvider);

		if (bSupportRanges && oControl.addValidator) {
			var oTokenParser = new TokenParser();
			oTokenParser.addKeyField({
				key: oFieldViewMetadata.fieldName,
				label: oFieldViewMetadata.label,
				type: oFieldViewMetadata.filterType
			});
			oTokenParser.associateInput(oControl);
			this._mTokenHandler[oControl.getId()] = {
				parser: oTokenParser
			};
		}
	};

	FilterProvider.prototype._determineFieldLabel = function(oFieldViewMetadata) {
		var oFilterItem, sLabel = oFieldViewMetadata.label;
		if (this._oSmartFilter && this._oSmartFilter.determineFilterItemByName) {
			oFilterItem = this._oSmartFilter.determineFilterItemByName(oFieldViewMetadata.name);
			if (oFilterItem) {
				sLabel = oFilterItem.getLabel();
			}
		}

		return sLabel;
	};

	/**
	 * Associates the control with a ValueList using the details retrieved from the metadata (annotation)
	 * @param {object} oControl - The control
	 * @param {string} sAggregation - The aggregation in the control to bind to
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @param {boolean} bHasTypeAhead - Indicates whether the control also supports TypeAhead aka Suggest
	 * @private
	 */
	FilterProvider.prototype._associateValueList = function(oControl, sAggregation, oFieldViewMetadata, bHasTypeAhead) {
		var oValueListProvider;
		if (oFieldViewMetadata.hasValueListAnnotation) {
			oValueListProvider = new ValueListProvider({
				control: oControl,
				fieldName: oFieldViewMetadata.fieldName,
				typeAheadEnabled: bHasTypeAhead,
				aggregation: sAggregation,
				displayFormat: oFieldViewMetadata.displayFormat,
				displayBehaviour: oFieldViewMetadata.displayBehaviour,
				dateFormatSettings: this._oDateFormatSettings,
				loadAnnotation: true,
				fullyQualifiedFieldName: oFieldViewMetadata.fullName,
				metadataAnalyser: this._oMetadataAnalyser,
				filterModel: this.oModel,
				filterProvider: this,
				model: this._oParentODataModel,
				fieldViewMetadata: oFieldViewMetadata
			});

			oValueListProvider.attachValueListChanged(function(oEvent) {
				if (this._oSmartFilter) {
					this._oSmartFilter.fireFilterChange(oEvent);
				}
			}.bind(this));

			if (oFieldViewMetadata.visibleInAdvancedArea || (oFieldViewMetadata.groupId === FilterProvider.BASIC_FILTER_AREA_ID)) {
				oValueListProvider.loadAnnotation();
			}

			this._aValueListProvider.push(oValueListProvider);
		} else if (this._mTokenHandler[oControl.getId()] && this._mTokenHandler[oControl.getId()].parser) {
			this._mTokenHandler[oControl.getId()].parser.setDefaultOperation("EQ");
		}
	};

	FilterProvider.prototype._createAnalyticParameters = function(oParameterization) {
		// Determine all parameters
		var sEntitySetName, oEntitySet, aParameterNames, oParameterMetadata, aParameterMetadataOData;

		if (oParameterization) {
			aParameterNames = oParameterization.getAllParameterNames();
			oEntitySet = oParameterization.getEntitySet();

			if (oEntitySet) {
				sEntitySetName = oParameterization.getEntitySet().getQName();
				aParameterMetadataOData = this._oMetadataAnalyser.getFieldsByEntitySetName(sEntitySetName);

				for (var i = 0; i < aParameterMetadataOData.length; i++) {

					if (aParameterNames.indexOf(aParameterMetadataOData[i].name) >= 0) {
						oParameterMetadata = this._createAnalyticParameterMetadata(aParameterMetadataOData[i]);

						if (oParameterMetadata.visible) {
							this._aAnalyticalParameters.push(oParameterMetadata);
						}
					}
				}
			}
		}
	};

	FilterProvider.prototype._createAnalyticParameterMetadata = function(oParameterMetadataOData) {

		var sParamPrefix = sap.ui.comp.ANALYTICAL_PARAMETER_PREFIX;

		oParameterMetadataOData.filterRestriction = "single-value";

		var oFieldMetadata = this._createFieldMetadata(oParameterMetadataOData, sParamPrefix);

		oFieldMetadata.fieldName = sParamPrefix + oParameterMetadataOData.name;
		oFieldMetadata.isMandatory = true;
		oFieldMetadata.isParameter = true;
		oFieldMetadata.visibleInAdvancedArea = true;

		return oFieldMetadata;
	};

	/**
	 * Returns a list of analytical paramaters
	 * @returns {array} List of names of analytical paramaters. Array can be empty, if none exists.
	 * @protected
	 */
	FilterProvider.prototype.getAnalyticParameters = function() {
		return this._aAnalyticalParameters;
	};

	/**
	 * Returns selection variants
	 * @returns {array} of SelectionVariant annotations.
	 * @protected
	 */
	FilterProvider.prototype.getSelectionVariants = function() {
		return this._aSelectionVariants;
	};

	/**
	 * Returns the binding paths for the analytic paramaters
	 * @returns {string} Binding path of the analytical paramaters
	 * @protected
	 */
	FilterProvider.prototype.getAnalyticBindingPath = function() {
		var oValues, aParamNames = [], aParameters = this.getAnalyticParameters();

		aParameters.forEach(function(oParam) {
			aParamNames.push(oParam.fieldName);
		});

		oValues = this.getFilledFilterData(aParamNames);

		return this._createAnalyticBindingPath(aParameters, oValues);
	};

	/**
	 * Constructs binding information for analytical parameters.
	 * @param {array} aParameters with analytical parameters and the corresponding values
	 * @param {object} oValues of the analytic parameters
	 * @returns {string} Paths information
	 * @private
	 */
	FilterProvider.prototype._createAnalyticBindingPath = function(aParameters, oValues) {
		var sValue, sPath = "", oParamRequest;
		oParamRequest = this._getParameterizationRequest(this._oParameterization);
		if (oParamRequest) {
			aParameters.forEach(function(oParam) {
				sValue = oValues[oParam.fieldName];
				if (!sValue) {
					sValue = "";
				} else if (oParam.type === "Edm.Time" && sValue instanceof Date) {
					sValue = {
						__edmType: "Edm.Time",
						ms: (((sValue.getHours() * 60) + sValue.getMinutes()) * 60 + sValue.getSeconds()) * 1000 + sValue.getMilliseconds()
					};
				} else if (this._oDateFormatSettings && this._oDateFormatSettings.UTC && sValue instanceof Date) {
					sValue = FilterProvider.getDateInUTCOffset(sValue);
				}

				oParamRequest.setParameterValue(oParam.name, sValue);
			}.bind(this));

			sPath = oParamRequest.getURIToParameterizationEntry() + '/' + this._oParameterization.getNavigationPropertyToQueryResult();
		}

		return sPath;
	};

	FilterProvider.prototype._getParameterizationRequest = function() {
		return this._oParameterization ? new sap.ui.model.analytics.odata4analytics.ParameterizationRequest(this._oParameterization) : null;
	};

	/**
	 * Calculates additional flags and attributes for a field e.g. whether TypeAhead is switched on
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @returns {Object} the field metadata
	 * @private
	 */
	FilterProvider.prototype._createFieldMetadata = function(oFilterFieldODataMetadata, sParamPrefix) {
		var oFieldViewMetadata, oControlConfiguration;

		oFilterFieldODataMetadata.fieldName = this._getFieldName(oFilterFieldODataMetadata);
		oFilterFieldODataMetadata.fieldNameOData = oFilterFieldODataMetadata.fieldName.replace(FilterProvider.FIELD_NAME_REGEX, "/");

		// Get Additional configuration
		oControlConfiguration = this._oAdditionalConfiguration ? this._oAdditionalConfiguration.getControlConfigurationByKey(oFilterFieldODataMetadata.fieldName) : null;

		oFieldViewMetadata = jQuery.extend({}, oFilterFieldODataMetadata);

		oFieldViewMetadata.filterRestriction = this._getFilterRestriction(oFilterFieldODataMetadata, oControlConfiguration);
		this._updateValueListMetadata(oFieldViewMetadata, oFilterFieldODataMetadata);
		oFieldViewMetadata.hasValueHelpDialog = this._hasValueHelpDialog(oFieldViewMetadata, oControlConfiguration);
		oFieldViewMetadata.preventInitialDataFetchInValueHelpDialog = oControlConfiguration ? oControlConfiguration.preventInitialDataFetchInValueHelpDialog : true;
		oFieldViewMetadata.controlType = this._getControlType(oFieldViewMetadata, oControlConfiguration);
		// Use configured displayBehaviour, only if it is defined!
		if (oControlConfiguration && oControlConfiguration.displayBehaviour && oControlConfiguration.displayBehaviour !== "auto") {
			oFieldViewMetadata.displayBehaviour = oControlConfiguration.displayBehaviour;
		}
		oFieldViewMetadata.isCustomFilterField = !!(oControlConfiguration && oControlConfiguration.customControl);
		oFieldViewMetadata.visibleInAdvancedArea = !!(oControlConfiguration && oControlConfiguration.visibleInAdvancedArea);
		oFieldViewMetadata.label = this._getLabel(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.isMandatory = this._isMandatory(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.width = this._getWidth(oControlConfiguration);
		oFieldViewMetadata.isVisible = this._isVisible(oControlConfiguration);
		oFieldViewMetadata.groupId = this._getGroupID(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.index = this._getIndex(oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.fControlConstructor = this._getControlConstructor(oFieldViewMetadata, sParamPrefix);
		oFieldViewMetadata.filterType = this._getFilterType(oFieldViewMetadata);
		oFieldViewMetadata.hasTypeAhead = this._hasTypeAhead(oFieldViewMetadata, oFilterFieldODataMetadata, oControlConfiguration);
		oFieldViewMetadata.customControl = oControlConfiguration ? oControlConfiguration.customControl : undefined;
		oFieldViewMetadata.fCreateControl = function(oFieldMetadata) {
			var oData, oFilterData;
			oFieldMetadata.control = this._createControl(oFieldMetadata);
			oData = this.oModel.getData();
			oFilterData = oData[oFieldMetadata.fieldName];
			if (oFilterData) {
				this._updateMultiValueControl(oFieldMetadata.control, oFilterData.items, oFilterData.ranges);
			}
		}.bind(this);

		this._applyWidth(oFieldViewMetadata);

		oFieldViewMetadata.defaultFilterValues = oControlConfiguration ? oControlConfiguration.defaultFilterValues : undefined;

		if (oFieldViewMetadata.type === "Edm.String") {
			this._aFilterBarStringFieldNames.push(oFieldViewMetadata.fieldName);
		}
		oFieldViewMetadata.conditionType = null;
		var oConditionType = oControlConfiguration ? oControlConfiguration.conditionType : null;
		if (!oConditionType && this._bUseDateRangeType && (oFieldViewMetadata.fControlConstructor === DateRangeSelection)) {
			oConditionType = "sap.ui.comp.config.condition.DateRangeType";
		}

		if (oConditionType) {
			var sConditionType = "";
			if (typeof oConditionType === "object") {
				sConditionType = oConditionType.module;
				delete oConditionType.module;
			} else {
				sConditionType = oConditionType;
				oConditionType = null;
			}
			try {
				jQuery.sap.require(sConditionType);
				var oConditionTypeClass = jQuery.sap.getObject(sConditionType);
				if (oConditionTypeClass) {
					oFieldViewMetadata.conditionType = new oConditionTypeClass(oFieldViewMetadata.fieldName, this, oFieldViewMetadata);
					this._mConditionTypeFields[oFieldViewMetadata.fieldName] = oFieldViewMetadata;
				}
				if (oConditionType && !this._bUseDateRangeType) {
					oFieldViewMetadata.conditionType.applySettings(oConditionType);
				}
			} catch (ex) {
				jQuery.sap.log.error("Module " + sConditionType + " could not be loaded");
			}
		}

		this._checkMetadataDefaultValue(oFieldViewMetadata);

		return oFieldViewMetadata;
	};

	/**
	 * Returns the filterType of the field based on metadata, else undefined
	 * @param {object} oField - ViewMetadata for the filter field
	 * @returns {string} the filter type for the field
	 * @private
	 */
	FilterProvider.prototype._getFilterType = function(oField) {
		if (ODataType.isNumeric(oField.type)) {
			return "numeric";
		} else if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
			return "date";
		} else if (oField.type === "Edm.String") {
			return "string";
		} else if (oField.type === "Edm.Boolean") {
			return "boolean";
		} else if (oField.type === "Edm.Time") {
			return "time";
		}
		return undefined;
	};

	/**
	 * Update the metadata for ValueList annotation
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @param {object} oFieldODataMetadata - OData metadata for the filter field
	 * @private
	 */
	FilterProvider.prototype._updateValueListMetadata = function(oFieldViewMetadata, oFieldODataMetadata) {

		// First check for "sap:value-list" annotation
		oFieldViewMetadata.hasValueListAnnotation = oFieldODataMetadata["sap:value-list"] !== undefined;
		if (oFieldViewMetadata.hasValueListAnnotation) {
			oFieldViewMetadata.hasFixedValues = oFieldODataMetadata["sap:value-list"] === "fixed-values";
		} else if (oFieldODataMetadata["com.sap.vocabularies.Common.v1.ValueList"]) {
			// Then check for "com.sap.vocabularies.Common.v1.ValueList" and retrieve the semantics
			oFieldViewMetadata.hasValueListAnnotation = true;
			oFieldViewMetadata.hasFixedValues = this._oMetadataAnalyser.getValueListSemantics(oFieldODataMetadata["com.sap.vocabularies.Common.v1.ValueList"]) === "fixed-values";
			if (!oFieldViewMetadata.hasFixedValues) {
				oFieldViewMetadata.hasFixedValues = MetadataAnalyser.isValueListWithFixedValues(oFieldODataMetadata);
			}
		}
	};

	/**
	 * Creates the metadata for the basic search field. The basic search is supposed to be used in the ValuehelpDialog
	 * @returns {object} the field metadata
	 * @private
	 */
	FilterProvider.prototype._createBasicSearchFieldMetadata = function() {
		var oFieldViewMetadata;
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

		oFieldViewMetadata = {};
		oFieldViewMetadata.filterRestriction = sap.ui.comp.smartfilterbar.FilterType.single;
		oFieldViewMetadata.name = FilterProvider.BASIC_SEARCH_FIELD_ID;
		oFieldViewMetadata.fieldName = FilterProvider.BASIC_SEARCH_FIELD_ID;
		oFieldViewMetadata.label = undefined;
		oFieldViewMetadata.isMandatory = false;
		oFieldViewMetadata.isVisible = true;
		oFieldViewMetadata.groupId = FilterProvider.BASIC_FILTER_AREA_ID;
		oFieldViewMetadata.index = -1; // index of Basic Search field is irrelevant!
		oFieldViewMetadata.control = new SearchField(this._oSmartFilter.getId() + "-btnBasicSearch", {
			showSearchButton: true
		});

		if (!this._isRunningInValueHelpDialog) {
			oFieldViewMetadata.control.setPlaceholder(oRb.getText("FILTER_BAR_BSEARCH_PLACE_HOLDER"));
		}

		oFieldViewMetadata.control.bindProperty('value', this.sFilterModelName + ">/" + oFieldViewMetadata.fieldName);

		return oFieldViewMetadata;
	};

	/**
	 * If a width is specified in the additional configuration, it will be applied to the control
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @private
	 */
	FilterProvider.prototype._applyWidth = function(oFieldViewMetadata) {

		if (oFieldViewMetadata && oFieldViewMetadata.width && oFieldViewMetadata.control && oFieldViewMetadata.control.setWidth && (typeof oFieldViewMetadata.control.setWidth === 'function')) {
			oFieldViewMetadata.control.setWidth(oFieldViewMetadata.width);
		}
	};

	/**
	 * Calculates additional flags and attributes for a field e.g. whether TypeAhead is switched on
	 * @param {Object} oControlConfiguration - the control configuration for the field
	 * @returns {Object} the field metadata
	 * @private
	 */
	FilterProvider.prototype._createFieldMetadataForCustomFilterFields = function(oControlConfiguration) {
		var oFieldViewMetadata;

		// Custom filter fields are required to have a custom control
		if (!oControlConfiguration || !oControlConfiguration.customControl) {
			return undefined;
		}

		oFieldViewMetadata = {};
		oFieldViewMetadata.name = oControlConfiguration.key;
		oFieldViewMetadata.fieldName = oControlConfiguration.key;
		oFieldViewMetadata.label = oControlConfiguration.label;
		oFieldViewMetadata.visibleInAdvancedArea = !!(oControlConfiguration && oControlConfiguration.visibleInAdvancedArea);
		oFieldViewMetadata.isVisible = this._isVisible(oControlConfiguration);
		oFieldViewMetadata.groupId = oControlConfiguration.groupId;
		oFieldViewMetadata.isMandatory = this._isMandatory(undefined, oControlConfiguration);
		oFieldViewMetadata.index = oControlConfiguration.index;
		oFieldViewMetadata.width = this._getWidth(oControlConfiguration);
		oFieldViewMetadata.control = oControlConfiguration.customControl;
		oFieldViewMetadata.isCustomFilterField = true;
		this._applyWidth(oFieldViewMetadata);

		return oFieldViewMetadata;
	};

	/**
	 * Extends the filter metadata with fieldName attribute which has the entity name for associations
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @returns {string} the field name
	 * @private
	 */
	FilterProvider.prototype._getFieldName = function(oFilterFieldODataMetadata) {
		if (!oFilterFieldODataMetadata.parentPropertyName) {
			return oFilterFieldODataMetadata.name;
		} else {
			return oFilterFieldODataMetadata.parentPropertyName + "." + oFilterFieldODataMetadata.name;
		}
	};

	/**
	 * Returns a flag indicating whether the field supports the value help dialog, or not
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @param {Object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean} whether valuehelp is supported by the field
	 * @private
	 */
	FilterProvider.prototype._hasValueHelpDialog = function(oFieldViewMetadata, oControlConfiguration) {
		var bValueHelpDialog = true;

		if (oControlConfiguration) {
			if (oControlConfiguration.controlType === sap.ui.comp.smartfilterbar.ControlType.dropDownList) {
				bValueHelpDialog = false;
			} else if (oControlConfiguration.hasValueHelpDialog !== true) {
				bValueHelpDialog = false;
			}
		}
		if (oFieldViewMetadata && !oFieldViewMetadata.hasValueListAnnotation) {
			if (oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.single || oFieldViewMetadata.filterRestriction === sap.ui.comp.smartfilterbar.FilterType.multiple) {
				bValueHelpDialog = false;
			}
		}

		return bValueHelpDialog;
	};

	/**
	 * Returns a flag indicating whether the field is visible, or not
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean} whether the field is visible
	 * @private
	 */
	FilterProvider.prototype._isVisible = function(oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.isVisible === false) {
			return false;
		}

		return true;
	};

	/**
	 * Returns the width from the control configuration. Undefined if there is no width specified
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {string} - width of the filter field
	 * @private
	 */
	FilterProvider.prototype._getWidth = function(oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.width) {
			return oControlConfiguration.width;
		}

		return undefined;
	};

	/**
	 * Returns a flag indicating whether the field is required/mandatory, or not
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean} whether the field is mandatory
	 * @private
	 */
	FilterProvider.prototype._isMandatory = function(oFilterFieldODataMetadata, oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.mandatory !== sap.ui.comp.smartfilterbar.MandatoryType.auto) {
			return oControlConfiguration.mandatory === sap.ui.comp.smartfilterbar.MandatoryType.mandatory;
		}
		if (oFilterFieldODataMetadata) {
			return oFilterFieldODataMetadata.requiredFilterField;
		}
		return false;
	};

	/**
	 * Returns the effective filter restriction. Possible values can be found in this enum: sap.ui.comp.smartfilterbar.FilterType
	 * @param {object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {string} sFilterRestriction; the effective filter restriction
	 */
	FilterProvider.prototype._getFilterRestriction = function(oFilterFieldODataMetadata, oControlConfiguration) {
		var sFilterRestriction;

		if (oControlConfiguration && oControlConfiguration.filterType && oControlConfiguration.filterType !== sap.ui.comp.smartfilterbar.FilterType.auto) {
			sFilterRestriction = oControlConfiguration.filterType;
		} else if (oFilterFieldODataMetadata.filterRestriction === "single-value") {
			sFilterRestriction = sap.ui.comp.smartfilterbar.FilterType.single;
		} else if (oFilterFieldODataMetadata.filterRestriction === "multi-value") {
			sFilterRestriction = sap.ui.comp.smartfilterbar.FilterType.multiple;
		} else if (oFilterFieldODataMetadata.filterRestriction === "interval") {
			sFilterRestriction = sap.ui.comp.smartfilterbar.FilterType.interval;
		} else {
			sFilterRestriction = sap.ui.comp.smartfilterbar.FilterType.auto;
		}

		return sFilterRestriction;
	};

	/**
	 * Returns the effective control type. Control types can be found in enum: sap.ui.comp.smartfilterbar.ControlType
	 * @param {object} oFieldViewMetadata - view metadata for the filter field
	 * @param {object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {string} sControlType; the effective control type
	 */
	FilterProvider.prototype._getControlType = function(oFieldViewMetadata, oControlConfiguration) {
		var sControlType;

		if (oControlConfiguration && oControlConfiguration.controlType && oControlConfiguration.controlType !== sap.ui.comp.smartfilterbar.ControlType.auto) {
			sControlType = oControlConfiguration.controlType;
		} else if (oFieldViewMetadata.type === "Edm.DateTime" && oFieldViewMetadata.displayFormat === "Date") {
			sControlType = sap.ui.comp.smartfilterbar.ControlType.date;
		} else if (oFieldViewMetadata.hasValueListAnnotation && oFieldViewMetadata.hasFixedValues) {
			sControlType = sap.ui.comp.smartfilterbar.ControlType.dropDownList;
		} else if (this._isBooleanWithFixedValuedButWithoutValueListAnnotation(oFieldViewMetadata)) {
			sControlType = sap.ui.comp.smartfilterbar.ControlType.dropDownList;
		} else {
			sControlType = sap.ui.comp.smartfilterbar.ControlType.input;
		}
		return sControlType;
	};

	FilterProvider.prototype._isBooleanWithFixedValuedButWithoutValueListAnnotation = function(oFieldViewMetadata) {
		if (oFieldViewMetadata.type === "Edm.Boolean" && !oFieldViewMetadata.hasFixedValues && !oFieldViewMetadata.hasValueListAnnotation && (oFieldViewMetadata.filterRestriction === "single")) {
			return true;
		}

		return false;
	};

	/**
	 * Returns the id of the parent group for a filter field from the additional configuration
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {Object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {string} groupId; the groupId for the configuration
	 */
	FilterProvider.prototype._getGroupID = function(oFilterFieldODataMetadata, oControlConfiguration) {
		if (oControlConfiguration && oControlConfiguration.groupId) {
			return oControlConfiguration.groupId;
		} else if (oFilterFieldODataMetadata && (oFilterFieldODataMetadata.requiredFilterField || (this._aSelectionFields && this._aSelectionFields.indexOf(oFilterFieldODataMetadata.fieldNameOData) > -1))) {
			return this._sBasicFilterAreaID;
		}
		return this._getGroupIDFromFieldGroup(oFilterFieldODataMetadata);
	};

	/**
	 * Returns the id (if found) of the parent group for a filter field from the FieldGroup annotation
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @private
	 * @returns {string} groupId; the groupId for the field (if found)
	 */
	FilterProvider.prototype._getGroupIDFromFieldGroup = function(oFilterFieldODataMetadata) {
		var iLen = 0, oFieldGroupAnnotation = null, sGroupName;
		if (oFilterFieldODataMetadata && this._aFieldGroupAnnotation && this._aFieldGroupAnnotation.length) {
			iLen = this._aFieldGroupAnnotation.length;
			// Loop through the FieldGroup annotation list and check if the field is found somewhere
			while (iLen--) {
				oFieldGroupAnnotation = this._aFieldGroupAnnotation[iLen];
				if (oFieldGroupAnnotation && oFieldGroupAnnotation.fields && oFieldGroupAnnotation.fields.indexOf(oFilterFieldODataMetadata.fieldNameOData) > -1) {
					sGroupName = oFieldGroupAnnotation.groupName;
					break;
				}
			}
		}
		return sGroupName;
	};

	/**
	 * Returns the label of the filter field. OData metadata and additional configuration are used for this
	 * @param {Object} oFilterFieldODataMetadata - OData metadata
	 * @param {Object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {string} label for the filter field
	 */
	FilterProvider.prototype._getLabel = function(oFilterFieldODataMetadata, oControlConfiguration) {

		if (oControlConfiguration && oControlConfiguration.label) {
			return oControlConfiguration.label;
		}
		return this._getLabelFromFieldGroup(oFilterFieldODataMetadata) || oFilterFieldODataMetadata.fieldLabel || oFilterFieldODataMetadata.fieldName;
	};

	/**
	 * Returns the label (if found) of the filter field from the FieldGroup annotation
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @private
	 * @returns {string} label; undefined if field is no part of field group annotation
	 */
	FilterProvider.prototype._getLabelFromFieldGroup = function(oFilterFieldODataMetadata) {
		var iLen = 0, oFieldGroupAnnotation = null, sLabel;
		if (oFilterFieldODataMetadata && this._aFieldGroupAnnotation && this._aFieldGroupAnnotation.length) {
			iLen = this._aFieldGroupAnnotation.length;
			// Loop through the FieldGroup annotation list and check if the field is found somewhere
			while (iLen--) {
				oFieldGroupAnnotation = this._aFieldGroupAnnotation[iLen];
				if (oFieldGroupAnnotation && oFieldGroupAnnotation.fields && oFieldGroupAnnotation.fields.indexOf(oFilterFieldODataMetadata.fieldNameOData) > -1) {
					sLabel = oFieldGroupAnnotation.labels[oFilterFieldODataMetadata.fieldNameOData];
					break;
				}
			}
		}
		return sLabel;
	};

	/**
	 * Returns the index for a filter field from the additional configuration -or- based on FieldGroup annotation
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {Object} oControlConfiguration - Additional configuration for this filter field
	 * @private
	 * @returns {int} index; undefined if index is not specified in additional configuration
	 */
	FilterProvider.prototype._getIndex = function(oFilterFieldODataMetadata, oControlConfiguration) {
		if (oControlConfiguration && (oControlConfiguration.index >= 0)) {
			return oControlConfiguration.index;
		} else if (this._aSelectionFields && this._aSelectionFields.indexOf(oFilterFieldODataMetadata.fieldNameOData) > -1) {
			return this._aSelectionFields.indexOf(oFilterFieldODataMetadata.fieldNameOData);
		}
		return this._getIndexFromFieldGroup(oFilterFieldODataMetadata);
	};

	/**
	 * Returns the index (if found) of the filter field from the FieldGroup annotation
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @private
	 * @returns {int} index; undefined if field is no part of field group annotation
	 */
	FilterProvider.prototype._getIndexFromFieldGroup = function(oFilterFieldODataMetadata) {
		var iLen = 0, oFieldGroupAnnotation = null, iIndex;
		if (oFilterFieldODataMetadata && this._aFieldGroupAnnotation && this._aFieldGroupAnnotation.length) {
			iLen = this._aFieldGroupAnnotation.length;
			// Loop through the FieldGroup annotation list and check if the field is found somewhere
			while (iLen--) {
				oFieldGroupAnnotation = this._aFieldGroupAnnotation[iLen];
				if (oFieldGroupAnnotation && oFieldGroupAnnotation.fields) {
					iIndex = oFieldGroupAnnotation.fields.indexOf(oFilterFieldODataMetadata.fieldNameOData);
					if (iIndex > -1) {
						break;
					}
					iIndex = undefined;
				}
			}
		}
		return iIndex;
	};

	/**
	 * Returns the index for a filter group from the additional configuration
	 * @param {Object} oGroupConfiguration - Additional configuration for this filter group
	 * @private
	 * @returns {int} index; undefined if index is not specified in additional configuration
	 */
	FilterProvider.prototype._getGroupIndex = function(oGroupConfiguration) {
		if (oGroupConfiguration && (oGroupConfiguration.index || oGroupConfiguration.index === 0)) {
			return oGroupConfiguration.index;
		}
	};

	/**
	 * Returns the label for a filter group from the additional configuration
	 * @param {Object} oFilterGroupODataMetadata - OData metadata for the filter group
	 * @param {Object} oGroupConfiguration - Additional configuration for this filter group
	 * @private
	 * @returns {int} index; undefined if label is not specified in additional configuration
	 */
	FilterProvider.prototype._getGroupLabel = function(oFilterGroupODataMetadata, oGroupConfiguration) {
		if (oGroupConfiguration && oGroupConfiguration.label) {
			return oGroupConfiguration.label;
		}
		return oFilterGroupODataMetadata.groupLabel || oFilterGroupODataMetadata.groupName || oFilterGroupODataMetadata.groupEntityName;
	};

	/**
	 * Returns a flag indicating whether the field supports TypeAhead (aka. Suggest), or not
	 * @param {Object} oFieldViewMetadata - view metadata for the filter field
	 * @param {Object} oFilterFieldODataMetadata - OData metadata for the filter field
	 * @param {Object} oControlConfiguration - Additional configuration for this filter field
	 * @returns {boolean} whether type ahead can be enabled for the field
	 * @private
	 */
	FilterProvider.prototype._hasTypeAhead = function(oFieldViewMetadata, oFilterFieldODataMetadata, oControlConfiguration) {
		var bHasTypeAhead;

		bHasTypeAhead = true;
		if (oControlConfiguration) {
			bHasTypeAhead = oControlConfiguration.hasTypeAhead;
		} else if (oFilterFieldODataMetadata.type !== "Edm.String") {
			return false;
		}
		// Disable type ahead for anything other than Input/MultiInput
		if (!(oFieldViewMetadata.fControlConstructor === Input || oFieldViewMetadata.fControlConstructor === MultiInput)) {
			return false;
		}

		return bHasTypeAhead;
	};

	/**
	 * Get the model
	 * @returns {Object} the model
	 * @public
	 */
	FilterProvider.prototype.getModel = function() {
		return this.oModel;
	};

	/**
	 * Get the view metadata for filter fields
	 * @returns {Array} array of filter field view metadata
	 * @public
	 */
	FilterProvider.prototype.getFilterBarViewMetadata = function() {
		return this._aFilterBarViewMetadata;
	};

	/**
	 * Get the list of value help provideres
	 * @returns {Array} array of value help provideres
	 * @private
	 */
	FilterProvider.prototype.getAssociatedValueHelpProviders = function() {
		return this._aValueHelpDialogProvider;
	};

	/**
	 * Get the list of value list provideres
	 * @returns {Array} array of value list provideres
	 * @private
	 */
	FilterProvider.prototype.getAssociatedValueListProviders = function() {
		return this._aValueListProvider;
	};

	/**
	 * Returns an parameter object which can be used to restrict the query result from OData. This function is required only for the basic search.
	 * @returns {object} object containing OData query parameters
	 * @public
	 */
	FilterProvider.prototype.getParameters = function() {
		var oParameter, sBasicSearchText = null;

		if (this.oModel) {
			sBasicSearchText = this.oModel.getProperty("/" + FilterProvider.BASIC_SEARCH_FIELD_ID);
		}

		if (this._sBasicSearchFieldName || sBasicSearchText) {
			oParameter = {
				custom: {}
			};

			if (this._sBasicSearchFieldName) {
				oParameter.custom["search-focus"] = this._sBasicSearchFieldName;
			}

			oParameter.custom["search"] = sBasicSearchText || "";
		}
		return oParameter;
	};

	/**
	 * Returns an array of filters that can be used to restrict the query result from OData
	 * @param {Array} aFieldNames - the names of the fields whose values should be returned (Ex: visible fields)
	 * @returns {Array} array of filters if any
	 * @public
	 */
	FilterProvider.prototype.getFilters = function(aFieldNames) {
		var oData = null;
		if (this.oModel) {
			oData = this.oModel.getData();
		}

		return FilterProvider.generateFilters(aFieldNames, oData, {
			dateSettings: this._oDateFormatSettings,
			useContainsAsDefault: this._bUseContainsAsDefault,
			stringFields: this._aFilterBarStringFieldNames,
			timeFields: this._aFilterBarTimeFieldNames
		});
	};

	/**
	 * Returns the data currently set in the filter data model
	 * @returns {object} the json data in the FilterBar
	 * @public
	 */
	FilterProvider.prototype.getFilterData = function() {
		return this.oModel ? this.oModel.getData() : null;
	};

	/**
	 * Returns the data currently set in the filter data model as string
	 * @returns {string} the string json data in the FilterBar
	 * @public
	 */
	FilterProvider.prototype.getFilterDataAsString = function() {
		return this.oModel ? this.oModel.getJSON() : null;
	};

	/**
	 * Returns the filled data currently set in the filter data model
	 * @param {Array} aFieldNames - the names of the fields whose values should be returned (Ex: visible fields)
	 * @returns {object} the json data in the FilterBar
	 * @public
	 */
	FilterProvider.prototype.getFilledFilterData = function(aFieldNames) {
		var oData, oFilledData = {}, iFieldLength, sField, oValue;
		oData = this.oModel ? this.oModel.getData() : null;
		if (oData && aFieldNames) {
			iFieldLength = aFieldNames.length;
			while (iFieldLength--) {
				sField = aFieldNames[iFieldLength];
				if (sField && sField !== FilterProvider.BASIC_SEARCH_FIELD_ID) {
					oValue = oData[sField];
					if (oValue && oValue.hasOwnProperty("low")) {// interval
						if (oValue.low) {
							oFilledData[sField] = oValue;
						}
					} else if (oValue && oValue.hasOwnProperty("items")) {// unrestricted/multi-value
						if (oValue.value && typeof oValue.value === "string") {
							oValue.value = oValue.value.trim();
						}
						if (oValue.items.length || (oValue.ranges && oValue.ranges.length) || oValue.value) {
							oFilledData[sField] = oValue;
						}
					} else if (oValue) { // Single Value
						if (typeof oValue === "string") {
							oValue = oValue.trim();
						}
						if (oValue) {
							oFilledData[sField] = oValue;
						}
					}
				}
				// Finally fill the Custom data if it exists
				if (iFieldLength === 0) {
					sField = FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY;
					oValue = oData[sField];
					if (oValue) {
						oFilledData[sField] = oValue;
					}
				}
			}
		}
		// Always return a copy of the original data, since some objects may be referenced elsewhere and could get destroyed (or removed) during
		// usage!
		return jQuery.extend(true, {}, oFilledData);
	};

	/**
	 * Returns the filled data currently set in the filter data model as string
	 * @param {Array} aFieldNames - the names of the fields whose values should be returned (Ex: visible fields)
	 * @returns {string} the string json data in the FilterBar
	 * @public
	 */
	FilterProvider.prototype.getFilledFilterDataAsString = function(aFieldNames) {
		return JSON.stringify(this.getFilledFilterData(aFieldNames));
	};

	/**
	 * Sets the data in the filter data model
	 * @param {object} oJson - the json data in the FilterBar
	 * @param {boolean} bReplace - Replace existing filter data
	 * @public
	 */
	FilterProvider.prototype.setFilterData = function(oJson, bReplace) {
		var oData = null, aFieldNames = null, sKey = null;
		if (this.oModel && oJson) {
			// Set flag to indicate data is being updated
			this._bUpdatingFilterData = true;

			try {
				if (bReplace) {
					this._createInitialModel(false);
				}
				oData = this._parseFilterData(oJson, bReplace);
				if (oData) {
					this.oModel.setData(oData, true);
					aFieldNames = [];
					var sFieldName = arguments[2];
					if (sFieldName) {
						aFieldNames.push(sFieldName);
					}
					for (sKey in oData) {
						aFieldNames.push(sKey);
					}
					this._handleFilterDataUpdate(aFieldNames);
				}
			} finally {

				// Reset data update flag
				this._bUpdatingFilterData = false;
			}
		}
	};

	/**
	 * Sets the data in the filter data model as string
	 * @param {string} sJson - the json data in the FilterBar
	 * @param {boolean} bReplace - Replace existing filter data
	 * @public
	 */
	FilterProvider.prototype.setFilterDataAsString = function(sJson, bReplace) {
		if (sJson) {
			this.setFilterData(JSON.parse(sJson), bReplace);
		}
	};

	/**
	 * Parse the filter data to handle some formats and not consider all formats
	 * @param {Object} oJson = the filter data input
	 * @param {boolean} bReplace - whether the data shall be replaced instead of merged
	 * @returns {Object} the parsed filter data
	 * @private
	 */
	FilterProvider.prototype._parseFilterData = function(oJson, bReplace) {
		return FilterProvider.parseFilterData(this.oModel.getData(), oJson, {
			dateFields: this._aFilterBarDateFieldNames,
			timeFields: this._aFilterBarTimeFieldNames,
			timeIntervalFields: this._aFilterBarTimeIntervalFieldNames,
			dateTimeMultiValueFields: this._aFilterBarDateTimeMultiValueFieldNames,
			conditionTypeFields: this._mConditionTypeFields
		}, bReplace);
	};

	/**
	 * Called once the FilterData is set via SetFilterData. Handles control update for non binding controls (multi-value)
	 * @param {Array} aFieldNames - Array containing name of updated fields
	 * @private
	 */
	FilterProvider.prototype._handleFilterDataUpdate = function(aFieldNames) {
		var i = 0, oFilterFieldMetadata, oData, oFilterData;
		if (this._aFilterBarMultiValueFieldMetadata) {
			i = this._aFilterBarMultiValueFieldMetadata.length;
			while (i--) {
				if (!oData) {
					oData = this.oModel.getData();
				}
				if (oData) {
					oFilterFieldMetadata = this._aFilterBarMultiValueFieldMetadata[i];
					// Only update the value if the field was changed in the handleDataUpate
					if (aFieldNames.indexOf(oFilterFieldMetadata.fieldName) > -1) {
						oFilterData = oData[oFilterFieldMetadata.fieldName];
						if (oFilterData) {
							this._updateMultiValueControl(oFilterFieldMetadata.control, oFilterData.items, oFilterData.ranges, oFilterFieldMetadata);
						}
					}
				}
			}
			this._updateConditionTypeFields();
		}
	};

	/**
	 * Clears the model
	 * @public
	 */
	FilterProvider.prototype.clear = function() {
		this._createInitialModel(false);
	};

	/**
	 * Resets the model
	 * @public
	 */
	FilterProvider.prototype.reset = function() {
		this._createInitialModel(true);
	};

	/**
	 * Updates the conditionType fields after changes to other fields and initially
	 * @private
	 */
	FilterProvider.prototype._initializeConditionTypeFields = function() {
		var handlePendingChange = function(oEvent) {
			this.setPending(this.isPending());
		}.bind(this);
		for ( var n in this._mConditionTypeFields) {
			this._mConditionTypeFields[n].conditionType.initialize(this.oModel.getData()[n]);
			if (this._mConditionTypeFields[n].conditionType.getAsync()) {
				this._mConditionTypeFields[n].conditionType.attachPendingChange(handlePendingChange);
			}
		}
	};

	/**
	 * Updates the conditionType fields after changes to other fields and initially
	 * @private
	 */
	FilterProvider.prototype._updateConditionTypeFields = function() {
		var oldData = this._oldData;
		var newData = this.oModel.getData();
		this._oldData = jQuery.extend(true, {}, newData);

		if (oldData !== undefined) {
			// check which fields have a changed filter model
			var aUpdateFields = [], n;
			for (n in newData) {
				var sNewData = JSON.stringify(newData[n]);
				var sOldData = JSON.stringify(oldData[n]);
				if (sNewData !== sOldData) {
					aUpdateFields.push(n);
				}
			}

			if (aUpdateFields.length > 0) {
				// only if we found changed fields we call providerDataUpdated with the changed fields
				for (n in this._mConditionTypeFields) {
					this._mConditionTypeFields[n].conditionType.providerDataUpdated(aUpdateFields, newData);
				}
			}
		}
	};

	/**
	 * Clears the conditionType fields
	 * @private
	 */
	FilterProvider.prototype._clearConditionTypeFields = function() {
		var newData = this.oModel.getData();
		for ( var n in this._mConditionTypeFields) {
			this._mConditionTypeFields[n].conditionType.initialize(newData[n]);
		}
	};

	FilterProvider.prototype._validateConditionTypeFields = function() {
		var bInvalid = false;
		for ( var n in this._mConditionTypeFields) {
			var bValid = this._mConditionTypeFields[n].conditionType.validate();
			if (!bValid && !bInvalid) {
				bInvalid = true;
			}
		}
		return bInvalid;
	};

	// TODO: Move this to a Util
	/**
	 * Static function to generate filter array from the given field name array and Json data object
	 * @param {Array} aFieldNames - array of field names
	 * @param {Object} oData - the json object data
	 * @param {Object} mSettings - optional settings used while creating filters
	 * @returns {Array} array of sap.ui.model.Filter
	 * @private
	 */
	FilterProvider.generateFilters = function(aFieldNames, oData, mSettings) {
		var aFilters = [], aArrayFilters = null, oExcludeFilters = null, aExcludeFilters = null, sField = null, sMatch = FilterProvider.FIELD_NAME_REGEX, oValue = null, oValue1, oValue2, aValue = null, iLen = 0, iFieldLength = 0;
		var oDateFormatSettings, bEnableUseContainsAsDefault, aStringFields, aTimeFields, bUseContains, bIsTimeField;
		if (mSettings) {
			oDateFormatSettings = mSettings.dateSettings;
			bEnableUseContainsAsDefault = mSettings.useContainsAsDefault;
			aStringFields = mSettings.stringFields;
			aTimeFields = mSettings.timeFields;
		}
		if (aFieldNames && oData) {
			iFieldLength = aFieldNames.length;
			while (iFieldLength--) {
				bIsTimeField = false;
				sField = aFieldNames[iFieldLength];
				if (sField && sField !== FilterProvider.BASIC_SEARCH_FIELD_ID) {
					bUseContains = false;
					if (bEnableUseContainsAsDefault && aStringFields) {
						if (aStringFields.indexOf(sField) > -1) {
							bUseContains = true;
						}
					} else if (aTimeFields && aTimeFields.indexOf(sField) > -1) {
						bIsTimeField = true;
					}
					oValue = oData[sField];
					// Replace all "." with "/" to convert to proper paths
					sField = sField.replace(sMatch, "/");
					if (oValue && oValue.hasOwnProperty("low")) {// The data in the model corresponds to low and high Objects
						if (oValue.low && oValue.high) {
							oValue1 = oValue.low;
							oValue2 = oValue.high;
							if (oDateFormatSettings && oDateFormatSettings.UTC && oValue1 instanceof Date && oValue2 instanceof Date) {
								oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
								oValue2 = FilterProvider.getDateInUTCOffset(oValue2);
							}
							aFilters.push(new Filter(sField, sap.ui.model.FilterOperator.BT, oValue1, oValue2));
						} else if (oValue.low) {
							if (oValue.low instanceof Date) {
								// We do not have an interval value --> Use typed in value as a single value date filter
								oValue1 = oValue.low;
								if (oDateFormatSettings && oDateFormatSettings.UTC) {
									oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
								}
								aFilters.push(new Filter(sField, sap.ui.model.FilterOperator.EQ, oValue1));
							} else if (typeof oValue.low === "string") {
								// since we bind non date interval values only to low; resolve this by splitting "-" into an interval
								aValue = FormatUtil.parseFilterNumericIntervalData(oValue.low);
								if (aValue && aValue.length === 2) {
									aFilters.push(new Filter(sField, sap.ui.model.FilterOperator.BT, aValue[0], aValue[1]));
								} else {
									// We do not have an interval value --> Use typed in value as a single value filter
									aFilters.push(new Filter(sField, bUseContains ? sap.ui.model.FilterOperator.Contains : sap.ui.model.FilterOperator.EQ, oValue.low));
								}
							}
						}
					} else if (oValue && oValue.hasOwnProperty("items")) {// The data in the model corresponds to multi-value/range with a typed in
						// value
						aArrayFilters = [];
						aExcludeFilters = [];
						oExcludeFilters = null;
						if (oValue && oValue.hasOwnProperty("ranges")) { // Check if the data is for an unrestricted filter
							aValue = oValue.ranges;
							iLen = aValue.length;
							// Range Filters
							while (iLen--) {
								oValue1 = aValue[iLen].value1;
								oValue2 = aValue[iLen].value2;
								if (bIsTimeField) {
									if (oValue1 instanceof Date) {
										oValue1 = FormatUtil.getEdmTimeFromDate(oValue1);
									}
									if (oValue2 instanceof Date) {
										oValue2 = FormatUtil.getEdmTimeFromDate(oValue2);
									}
								} else if (oDateFormatSettings && oDateFormatSettings.UTC) {// Check if Date values have to be converted to UTC
									if (oValue1 instanceof Date) {
										oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
									}
									if (oValue2 instanceof Date) {
										oValue2 = FilterProvider.getDateInUTCOffset(oValue2);
									}
								}
								if (aValue[iLen].exclude) { // Exclude Select Option is not supported entirely except EQ, which can be changed to NE
									if (aValue[iLen].operation === sap.ui.model.FilterOperator.EQ) {
										aExcludeFilters.push(new Filter(sField, sap.ui.model.FilterOperator.NE, oValue1));
									}
								} else {
									aArrayFilters.push(new Filter(sField, aValue[iLen].operation, oValue1, oValue2));
								}
							}
							if (aExcludeFilters.length) {
								oExcludeFilters = new Filter(aExcludeFilters, true);
							}
						}
						aValue = oValue.items;
						iLen = aValue.length;
						// Item filters
						while (iLen--) {
							aArrayFilters.push(new Filter(sField, sap.ui.model.FilterOperator.EQ, aValue[iLen].key));
						}
						// Only ignore "", null and undefined values
						if (oValue.value || oValue.value === 0 || oValue.value === false) {
							if (typeof oValue.value === "string") {
								oValue.value = oValue.value.trim();
							}
							if (oValue.value || oValue.value === 0 || oValue.value === false) {
								aArrayFilters.push(new Filter(sField, bUseContains ? sap.ui.model.FilterOperator.Contains : sap.ui.model.FilterOperator.EQ, oValue.value));
							}
						}

						// OR the array values while creating the filter
						if (aArrayFilters.length) {
							// If Exclude and array (inlcude) filters exists --> use AND between them before pushing to the filter array
							if (oExcludeFilters) {
								aFilters.push(new Filter([
									new Filter(aArrayFilters, false), oExcludeFilters
								], true));
							} else {
								aFilters.push(new Filter(aArrayFilters, false));
							}
						} else if (oExcludeFilters) {
							// Only exclude filters exists --> add to the filter array
							aFilters.push(oExcludeFilters);
						}
					} else if (oValue || oValue === 0 || oValue === false) {// Single Value
						// Only ignore "", null and undefined values
						if (typeof oValue === "string") {
							oValue = oValue.trim();
						}
						if (oValue && oValue instanceof Date) {
							if (bIsTimeField) {
								oValue = FormatUtil.getEdmTimeFromDate(oValue);
							} else if (oDateFormatSettings && oDateFormatSettings.UTC) {
								oValue = FilterProvider.getDateInUTCOffset(oValue);
							}
						}
						if (oValue || oValue === 0 || oValue === false) {
							aFilters.push(new Filter(sField, bUseContains ? sap.ui.model.FilterOperator.Contains : sap.ui.model.FilterOperator.EQ, oValue));
						}
					}
				}
			}
		}
		// AND the top level filter attributes if there is more than 1
		return (aFilters.length > 1) ? [
			new Filter(aFilters, true)
		] : aFilters;
	};

	// TODO: Move this to a Util
	/**
	 * Static function to parse and convert json data to be set into the data of the filter model (JsonModel.oData) into proper format
	 * @private
	 * @param {Object} oData - The data from the datamodel
	 * @param {Object} oInputJson - the json object data that needs to be convered/parsed
	 * @param {Object} mSettings - settings used while for parsing filter data
	 * @param {boolean} bReplace - whether the data shall be replaced instead of merged
	 * @returns {Object} The resolved/parsed/converted data that can be set into the model
	 */
	FilterProvider.parseFilterData = function(oData, oInputJson, mSettings, bReplace) {
		var oResolvedData = {}, mConditionTypeFields = null, sField = null, oValue = null, oNewValue, oJson, i, iLen, oRange, aFilterBarDateFieldNames, aFilterBarTimeFieldNames, aFilterBarTimeIntervalFieldNames, aFilterBarDateTimeMultiValueFieldNames, aEQRanges;
		if (mSettings) {
			aFilterBarDateFieldNames = mSettings.dateFields;
			aFilterBarTimeFieldNames = mSettings.timeFields;
			aFilterBarTimeIntervalFieldNames = mSettings.timeIntervalFields;
			aFilterBarDateTimeMultiValueFieldNames = mSettings.dateTimeMultiValueFields;
			mConditionTypeFields = mSettings.conditionTypeFields || {};
		}
		if (!aFilterBarDateFieldNames) {
			aFilterBarDateFieldNames = [];
		}
		if (!aFilterBarTimeFieldNames) {
			aFilterBarTimeFieldNames = [];
		}
		if (!aFilterBarTimeIntervalFieldNames) {
			aFilterBarTimeIntervalFieldNames = [];
		}
		if (!aFilterBarDateTimeMultiValueFieldNames) {
			aFilterBarDateTimeMultiValueFieldNames = [];
		}
		if (oData && oInputJson) {
			oJson = jQuery.extend({}, oInputJson, true);
			for (sField in oJson) {
				if (oData.hasOwnProperty(sField) && sField !== FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY) {
					oValue = oData[sField];
					oNewValue = oJson[sField];
					if (sField in mConditionTypeFields) {
						if ("conditionTypeInfo" in oNewValue || (!("conditionTypeInfo" in oNewValue) && oNewValue.ranges)) {
							// only if there is a saved conditionTypeInfo
							mConditionTypeFields[sField].conditionType.initialize(oNewValue);
						}
					} else if (oValue && oValue.hasOwnProperty("low")) {// interval
						oResolvedData[sField] = oNewValue;
						if (oNewValue) {
							if (oNewValue.low && oNewValue.high) { // Date Range

								if ((aFilterBarDateFieldNames.indexOf(sField) > -1) || (aFilterBarTimeFieldNames.indexOf(sField) > -1)) {
									// oResolvedData[sField] = oNewValue;
									if (!(oNewValue.low instanceof Date)) { // Date needs to be set as a Date Object always!
										oResolvedData[sField].low = new Date(oNewValue.low);
									}
									if (!(oNewValue.high instanceof Date)) {// Date needs to be set as a Date Object always!
										oResolvedData[sField].high = new Date(oNewValue.high);
									}
								} else {
									oResolvedData[sField].low = oNewValue.low + '-' + oNewValue.high;
									oResolvedData[sField].high = null;
								}
							} else if ((oNewValue.low || oNewValue.value) && !oNewValue.high) {
								if (!oNewValue.low && oNewValue.value) {
									oNewValue.low = oNewValue.value;
								}
								if ((aFilterBarDateFieldNames.indexOf(sField) > -1 || aFilterBarTimeFieldNames.indexOf(sField) > -1) && !(oNewValue.low instanceof Date)) {
									oResolvedData[sField].low = new Date(oNewValue.low);
								} else {
									oResolvedData[sField].low = oNewValue.low;
								}
								oResolvedData[sField].high = null;
							}
						}
					} else if (oValue && oValue.hasOwnProperty("items")) {// unrestricted/multi-value
						if (oNewValue && (oNewValue.items || oNewValue.ranges)) {
							if (oNewValue.ranges && oNewValue.ranges.length) {
								// Interval Edm.Time fields
								if (aFilterBarTimeIntervalFieldNames.indexOf(sField) > -1) {
									iLen = oNewValue.ranges.length;
									for (i = 0; i < iLen; i++) {
										oRange = oNewValue.ranges[i];
										if (!oRange.exclude && (oRange.operation === "EQ" || oRange.operation === "BT")) {
											break;
										}
										oRange = null;
									}
									if (oRange) {
										// String input but date expected
										if (oRange.value1 && typeof oRange.value1 === "string") {
											oRange.value1 = new Date(oRange.value1);
										}
										if (oRange.value2 && typeof oRange.value2 === "string") {
											oRange.value2 = new Date(oRange.value2);
										}
										// Create range data
										oResolvedData[sField] = {
											ranges: [
												oRange
											],
											items: [],
											value: ""
										};
									}
									// continue with next field as no further actions is necessary
									continue;
								} else if (aFilterBarDateTimeMultiValueFieldNames.indexOf(sField) > -1) {
									// multi-value Date/Time field
									iLen = oNewValue.ranges.length;
									aEQRanges = [];
									for (i = 0; i < iLen; i++) {
										oRange = oNewValue.ranges[i];
										if (!oRange.exclude && oRange.operation === "EQ") {
											// String input but date expected
											if (oRange.value1 && typeof oRange.value1 === "string") {
												oRange.value1 = new Date(oRange.value1);
											}
											aEQRanges.push(oRange);
										}
									}
									// Create range data
									oResolvedData[sField] = {
										ranges: aEQRanges,
										items: [],
										value: ""
									};
									// continue with next field as no further actions is necessary
									continue;
								} else if (aFilterBarDateFieldNames.indexOf(sField) > -1 || aFilterBarTimeFieldNames.indexOf(sField) > -1) {
									// Unrestricted Date/Time field
									iLen = oNewValue.ranges.length;
									for (i = 0; i < iLen; i++) {
										oRange = oNewValue.ranges[i];
										// String input but date expected
										if (oRange.value1 && typeof oRange.value1 === "string") {
											oRange.value1 = new Date(oRange.value1);
										}
										if (oRange.value2 && typeof oRange.value2 === "string") {
											oRange.value2 = new Date(oRange.value2);
										}
									}
								} else if ((oNewValue.ranges.length === 1) && (oNewValue.ranges[0].operation === "EQ") && !oNewValue.ranges[0].value1) {
									// BCP: 1770464128
									continue;
								}
							}
							oResolvedData[sField] = oNewValue;

							if (!bReplace && oResolvedData[sField].ranges) {
								for (i = 0; i < oResolvedData[sField].ranges.length; i++) {
									oResolvedData[sField].ranges[i].tokenText = null;
								}
							}

						} else if (typeof oNewValue === "string" || typeof oNewValue === "number" || oNewValue instanceof Date) { // Single Value
							// Unrestricted/multi-value Date field
							if (oNewValue && (aFilterBarDateFieldNames.indexOf(sField) > -1 || aFilterBarTimeFieldNames.indexOf(sField) > -1)) {
								if (typeof oNewValue === "string") {// String input but date expected
									oNewValue = new Date(oNewValue);
								}
								// Create Date range data
								oResolvedData[sField] = {
									ranges: [
										{
											"exclude": false,
											"operation": "EQ",
											"keyField": sField,
											"value1": oNewValue,
											"value2": null
										}
									],
									items: [],
									value: ""
								};
							} else {
								oResolvedData[sField] = {
									value: oNewValue,
									items: []
								};
							}
						}
					} else {// single value
						oResolvedData[sField] = null; // Default to null!
						// Single Date, string, boolean, number value
						if (typeof oNewValue === "string" || typeof oNewValue === "boolean" || typeof oNewValue === "number" || oNewValue instanceof Date) {
							// String input but date expected!
							if (typeof oNewValue === "string" && (aFilterBarDateFieldNames.indexOf(sField) > -1 || aFilterBarTimeFieldNames.indexOf(sField) > -1)) {
								oResolvedData[sField] = new Date(oNewValue);
							} else {
								oResolvedData[sField] = oNewValue;
							}
						} else if (oNewValue && (oNewValue.value || oNewValue.value === 0 || oNewValue.value === false)) { // Use the types in value
							// from multiValue if any
							oResolvedData[sField] = oNewValue.value;
						} else if (oNewValue && oNewValue.items && oNewValue.items.length) { // use the 1st value in items array if any
							oResolvedData[sField] = oNewValue.items[0].key;
						} else if (oNewValue && oNewValue.ranges && oNewValue.ranges.length) { // use the 1st value in ranges array if any
							iLen = oNewValue.ranges.length;
							for (i = 0; i < iLen; i++) {
								oRange = oNewValue.ranges[i];
								if (!oRange.exclude && oRange.operation === "EQ") {
									break;
								}
								oRange = null;
							}
							if (oRange && oRange.value1) {
								// String input but date expected!
								if (typeof oRange.value1 === "string" && (aFilterBarDateFieldNames.indexOf(sField) > -1 || aFilterBarTimeFieldNames.indexOf(sField) > -1)) {
									oResolvedData[sField] = new Date(oRange.value1);
								} else {
									oResolvedData[sField] = oRange.value1;
								}
							}
						}
					}
				} else if (bReplace || sField === FilterProvider.CUSTOM_FIELDS_MODEL_PROPERTY) {
					// Value is for _CUSTOM -> add it as it is
					oResolvedData[sField] = oJson[sField];
				}
			}
		}
		return oResolvedData;
	};

	/**
	 * Static function that returns a UTC offset date
	 * @private
	 * @param {Object} oDate - The input date object
	 * @returns {Object} The UTC offset date object
	 */
	FilterProvider.getDateInUTCOffset = function(oDate) {
		return new Date(oDate.valueOf() - oDate.getTimezoneOffset() * 60 * 1000);
	};

	/**
	 * Destroys the object
	 * @public
	 */
	FilterProvider.prototype.destroy = function() {
		var fDestroy = function(aArray) {
			var i;
			if (aArray) {
				i = aArray.length;
				while (i--) {
					aArray[i].destroy();
				}
			}
		};
		this._oParentODataModel = null;
		this._aAnalyticalParameters = null;
		this._aFilterBarViewMetadata = null;
		this._oParameterization = null;
		this._aFilterBarFieldNames = null;
		this._aFilterBarDateFieldNames = null;
		this._aFilterBarTimeFieldNames = null;
		this._aFilterBarTimeIntervalFieldNames = null;
		this._aFilterBarDateTimeMultiValueFieldNames = null;
		this._aFilterBarStringFieldNames = null;
		this._aFilterBarMultiValueFieldMetadata = null;
		this._aFieldGroupAnnotation = null;
		this._aSelectionFields = null;
		this._aSelectionVariants = null;

		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;

		fDestroy(this._aValueHelpDialogProvider);
		this._aValueHelpDialogProvider = null;

		fDestroy(this._aValueListProvider);
		this._aValueListProvider = null;

		if (this._mTokenHandler) {
			for ( var sHandlerId in this._mTokenHandler) {
				var oHandler = this._mTokenHandler[sHandlerId];
				if (oHandler.parser) {
					oHandler.parser.destroy();
					oHandler.parser = null;
				}
			}
			delete this._mTokenHandler;
		}

		this.oResourceBundle = null;
		this.sIntervalPlaceholder = null;
		this.sDefaultDropDownDisplayBehaviour = null;
		this.sDefaultTokenDisplayBehaviour = null;
		this._oSmartFilter = null;

		if (this._oEventProvider) {
			if (this._oEventProvider.destroy) {
				this._oEventProvider.destroy();
			}
			this._oEventProvider = null;
		}

		for ( var n in this._mConditionTypeFields) {
			this._mConditionTypeFields[n].conditionType.destroy();
		}
		this._mConditionTypeFields = null;

		if (this.oModel) {
			this.oModel.destroy();
			this.oModel = null;
		}

		this.bIsDestroyed = true;
	};

	return FilterProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/FilterProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.GroupElement.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartform.GroupElement control
jQuery.sap.declare('sap.ui.comp.smartform.GroupElement.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartform/GroupElement.designtime",[
	"sap/ui/comp/smartform/SmartForm"
], function(SmartForm) {
	"use strict";

	var fnHasMandatoryFields = function(oGroupElement) {
		var aElements = oGroupElement.getElements();
		if (aElements.length === 0) {
			return false;
		}
		for (var j = 0; j < aElements.length; j++) {
			var oElement = aElements[j];
			if (oElement.getMandatory && oElement.getMandatory()) {
				return true;
			}
		}
		return false;
	};

	var fnGetControlsCount = function (oSelectedElement) {
		if (oSelectedElement.getElements && oSelectedElement.getElements()) {
			return oSelectedElement.getElements().length;
		}
		return 0;
	};

	var fnEnableCheck = function (aControls) {
		var iControlsCount = 0;
		aControls.forEach(function (oControl) {
			iControlsCount += fnGetControlsCount(oControl);
		});

		if (iControlsCount < 2 || iControlsCount > 3) {
			return false;
		}
		return true;
	};

	return {
		name: {
			singular : "FIELD_CONTROL_NAME",
			plural : "FIELD_CONTROL_NAME_PLURAL"
		},
		aggregations: {
			label: {
				ignore: true
			},
			elements: {
				ignore: false,
				propagateMetadata : function(oElement){
					// Actions for controls in GroupElement should be disabled, except for Smartlink (inside a SmartField or not)
					if (oElement.getMetadata().getName() !== "sap.ui.comp.navpopover.SmartLink" &&
						!(oElement.getMetadata().getName() === "sap.ui.comp.navpopover.SmartField" &&
						oElement.getSemanticObjectController && oElement.getSemanticObjectController())){
						return {
							actions: null
						};
					}
				}
			}
		},
		actions: {
			remove: {
				changeType: "hideControl",
				getConfirmationText: function(oGroupElement) {
					// TODO: move text to comp
					var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
					if (fnHasMandatoryFields(oGroupElement)) {
						var sGroupElement = oGroupElement.getLabelText() || oGroupElement.getId();
						return oTextResources.getText("GROUP_ELEMENT_DESIGN_TIME_REMOVE_MANDATORY_FIELD_MESSAGE", sGroupElement);
					}
				}
			},
			reveal : {
				changeType : "unhideControl"
			},
			rename: {
				changeType: "renameField",
				isEnabled: function(oControl) {
					if (oControl._getLabel()) {
						return true;
					}
					return false;
				},
				domRef: function(oControl) {
					return oControl._getLabel().getDomRef();
				}
			},
			combine: {
				changeType: "combineFields",
				changeOnRelevantContainer : true,
				isEnabled : function (aControls) {
					return fnEnableCheck(aControls);
				},
				getState : function(oControl, oChangeDefinition, mPropertyBag) {
					var oModifier = mPropertyBag.modifier;
					var oAppComponent = mPropertyBag.appComponent;
					var oGroupElement, oParent;
					var oState = {
						elementState : []
					};
					var aGroupElements = oChangeDefinition.content.combineFieldSelectors;
					aGroupElements.forEach(function(sGroupElementId) {
						oGroupElement = oModifier.bySelector(sGroupElementId, oAppComponent);
						oParent = oGroupElement.getParent();
						var aElements = oGroupElement.getElements();
						var aElementsLabels = [];
						for (var i = 0; i < aElements.length; i++) {
							var oElement = aElements[i];
							var sLabel = "";
							if (oElement.getTextLabel) {
								sLabel = oElement.getTextLabel();
							}
							aElementsLabels.push(sLabel);
						}
						oState.elementState.push({
							groupElement : oGroupElement,
							parent : oParent,
							groupElementIndex : oParent.getGroupElements().indexOf(oGroupElement),
							content : aElements,
							label: oGroupElement.getLabel(),
							elementsLabels: aElementsLabels
						});
					});
					return oState;
				},
				restoreState : function(oControl, oState) {
					oState.elementState.forEach(function(oElementState) {
						if (oElementState.parent.getGroupElements().indexOf(oElementState.groupElement) === -1) {
							// Removed groups are placed in the "dependents" aggregation, so here they must be cleaned up
							oElementState.groupElement.getParent().removeDependent(oElementState.groupElement);
							oElementState.parent.insertGroupElement(oElementState.groupElement, oElementState.groupElementIndex);
						} else {
							oElementState.groupElement.removeAllElements();
						}
					});
					oState.elementState.forEach(function(oElementState) {
						oElementState.content.forEach(function(oField, index) {
							oElementState.groupElement.insertElement(oField, index);
							if (oField.setTextLabel) {
								oField.setTextLabel(oElementState.elementsLabels[index]);
							}
						});
						oElementState.groupElement.setLabel(oElementState.label);
					});
				}
			},
			split: {
				changeType: "splitField",
				changeOnRelevantContainer : true,
				getControlsCount : function(oGroupElement) {
					return fnGetControlsCount(oGroupElement);
				}
			}
		},
		// TODO Clarify concept to reuse these functions/functionality in Group.designtime.js
		functions: {
			hasMandatoryFields: fnHasMandatoryFields
		},
		properties: {
			useHorizontalLayout: {
				ignore: true
			},
			horizontalLayoutGroupElementMinWidth: {
				ignore: true
			},
			elementForLabel: {
				ignore: true
			}
		}
	};

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/GroupElement.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.SmartVariantManagement') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartvariants.SmartVariantManagement.
// To avoid loading the fl lib in every case it is only "lazy"-loaded on lib level and loaded explicitly here:
sap.ui.getCore().loadLibrary('sap.ui.fl');

jQuery.sap.declare('sap.ui.comp.smartvariants.SmartVariantManagement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Change'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Persistence'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.transport.TransportSelection'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/SmartVariantManagement",[
	'jquery.sap.global', 'sap/ui/comp/library', './PersonalizableInfo', 'sap/ui/comp/variants/VariantItem', 'sap/ui/comp/variants/VariantManagement', 'sap/ui/fl/Change', 'sap/ui/fl/Persistence', 'sap/ui/fl/Utils', 'sap/ui/fl/transport/TransportSelection'
], function(jQuery, library, PersonalizableInfo, VariantItem, VariantManagement, Change, Persistence, FlexUtils, TransportSelection) {
	"use strict";

	/**
	 * Constructor for a new SmartVariantManagement.<br>
	 * The call sequence is as follows:<br>
	 * A control for which personalization is used has to be registered first via the <code>personalizableControls</code> association. Then it has
	 * to call the <code>initialise</code> method with the arguments <code>fCallback</code> function which will be called once the personalization
	 * data has been retrieved and <code>oPersoControl</code>, the control itself.<BR>
	 * <b>Note:</b> the function callback has to be defined in the personalizable control.<BR>
	 * The old behavior, where the control has to register to the <code>initialise</code> event, before the <code>initialise</code> method call,
	 * should not be used any longer and is not supported at all for the page variant scenarios.
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartVariantManagement control is a specialization of the {@link sap.ui.comp.variants.VariantManagement VariantManagement} control
	 *        and communicates with the layer that offers SAPUI5 flexibility services to manage the variants.<br>
	 *        For more information about SAPUI5 flexibility, refer to the Developer Guide.
	 * @extends sap.ui.comp.variants.VariantManagement
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartvariants.SmartVariantManagement
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartVariantManagement = VariantManagement.extend("sap.ui.comp.smartvariants.SmartVariantManagement", /** @lends sap.ui.comp.smartvariants.SmartVariantManagement.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			designTime: true,
			properties: {
				/**
				 * Key used to access personalization data.
				 */
				persistencyKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			},
			aggregations: {

				/**
				 * All controls that rely on variant handling have to be added to this aggregation.
				 */
				personalizableControls: {
					type: "sap.ui.comp.smartvariants.PersonalizableInfo",
					multiple: true,
					singularName: "personalizableControl"
				}
			},
			events: {

				/**
				 * This event is fired when the SmartVariantManagement control is initialized.
				 * @deprecated Since version 1.38.0. Replaced by providing the personalizable control and the callback via the <code>initialise</code>-method.
				 */
				initialise: {},

				/**
				 * This event is fired after a variant has been saved.
				 */
				afterSave: {
					parameters: {
						/**
						 * If the property <code>showCreateTile</code> is set, the Create Tile checkbox is shown and its value is passed to this
						 * event parameter.<br>
						 * If the property <code>showCreateTile</code> is not set, this event parameter is skipped.
						 */
						tile: {
							type: "boolean"
						}
					}
				}
			}
		},

		renderer: function(oRm, oControl) {
			VariantManagement.getMetadata().getRenderer().render(oRm, oControl);
		}
	});

	SmartVariantManagement.prototype.init = function() {
		VariantManagement.prototype.init.apply(this); // Call base class

		this._bIsInitialized = false;

		this._oStandardVariant = null;
		this._oControlPersistence = null;
		// this._oControlComponent = null;
		this._oControlPromise = null;
		this._oPersoControl = null;
		this._sAppStandardVariantKey = null;

		this._oSelectionVariantHandler = {};

		this._oAppStdContent = null;

		this._aPersonalizableControls = [];

		if (this.setLifecycleSupport) {
			this.setLifecycleSupport(true);
		}
		this._setBackwardCompatibility(false);

		this.setSupportExecuteOnSelectOnSandardVariant(true);
	};

	SmartVariantManagement.prototype.applySettings = function() {

		this.setUseFavorites(true);

		VariantManagement.prototype.applySettings.apply(this, arguments);
	};

	SmartVariantManagement.prototype._createControlWrapper = function(oCurrentControlInfo) {
		var oControlInfo = null;
		var oControl = sap.ui.getCore().byId(oCurrentControlInfo.getControl());
		if (oControl) {
			/* eslint-disable new-cap */
			oControlInfo = {
				control: oControl,
				type: oCurrentControlInfo.getType(),
				dataSource: oCurrentControlInfo.getDataSource(),
				keyName: oCurrentControlInfo.getKeyName(),
				loaded: jQuery.Deferred()
			};
			/* eslint-enable new-cap */
		}

		return oControlInfo;
	};

	SmartVariantManagement.prototype._getControlWrapper = function(oControl) {
		var aCurrentControls = this._getAllPersonalizableControls();
		if (aCurrentControls && aCurrentControls.length) {
			for (var i = 0; i < aCurrentControls.length; i++) {
				if (aCurrentControls[i].control === oControl) {
					return aCurrentControls[i];
				}
			}
		}

		return null;
	};

	/**
	 * Registers all controls interested and relying on variant handling.
	 * @public
	 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo Wrapper for the personalizable control
	 * @returns {sap.ui.comp.smartvariants.SmartVariantManagement} Current instance
	 */
	SmartVariantManagement.prototype.addPersonalizableControl = function(oCurrentControlInfo) {
		var oControlWrapper, oControl = null, sControlId = oCurrentControlInfo.getControl();

		oControl = sap.ui.getCore().byId(sControlId);
		if (!oControl) {
			jQuery.sap.log.error("couldn't obtain the control with the id=" + sControlId);
			return this;
		}

		this.addAggregation("personalizableControls", oCurrentControlInfo, true);

		oControlWrapper = this._createControlWrapper(oCurrentControlInfo);
		if (oControlWrapper) {
			this._aPersonalizableControls.push(oControlWrapper);
		}

		if (this.isPageVariant()) {
			return this;
		}

		this._setPersControler(oControl);

		return this;
	};

	/**
	 * Registers all controls interested and relying on variant handling.
	 * @private
	 * @returns {sap.ui.fl.transport.TransportSelection} TransportSelection dialog.
	 */
	SmartVariantManagement.prototype.getTransportSelection = function() {
		return new TransportSelection();
	};

	SmartVariantManagement.prototype._setPersControler = function(oControl) {
		if (!this._oPersoControl && FlexUtils.getComponentClassName(oControl)) { // clone
			this._oPersoControl = oControl;
			this._addPersistenceController(oControl);
		}
	};

	SmartVariantManagement.prototype.setPersistencyKey = function(sKey) {
		this.setProperty("persistencyKey", sKey);

		this._setPersControler(this);
		// this._addPersistenceController(this);
		return this;
	};

	SmartVariantManagement.prototype._addPersistenceController = function(oControl) {
		if (oControl) {
			this._oControlPersistence = new Persistence(oControl, "persistencyKey");

			// this._oControlComponent = FlexUtils.getComponentClassName(oControl);

			this._handleGetChanges(oControl);
		}
	};

	/**
	 * Determines if the <code>SmartVariantManagement</code> instance is a page variant.
	 * @public
	 * @return {boolean} <code>true</code> if it is a page variant, otherwise <code>false</code>
	 */
	SmartVariantManagement.prototype.isPageVariant = function() {
		if (this.getPersistencyKey()) {
			return true;
		}

		return false;
	};

	SmartVariantManagement.prototype._handleGetChanges = function(oControl) {
		var that = this;

		if (oControl && this._oControlPersistence) {

			this._oControlPromise = {};
			this._oControlPromise = new Promise(function(resolve, reject) {
				that._oControlPersistence.getChanges().then(function(mVariants) {
					resolve(mVariants);
				}, function(args) {
					reject(args);
				});

			});
		}
	};

	/**
	 * Retrieves the variant content.
	 * @public
	 * @param {sap.ui.core.Control} oControl Current personalizable control
	 * @param {string} sKey The variant key
	 * @returns {object} JSON Representing the content of the variant
	 */
	SmartVariantManagement.prototype.getVariantContent = function(oControl, sKey) {
		var sPersKey, oContent = this._getChangeContent(sKey);

		if (oContent && this.isPageVariant()) {
			sPersKey = this._getControlPersKey(oControl);
			if (sPersKey) {
				// oContent = oContent[sPersKey];
				oContent = this._retrieveContent(oContent, sPersKey);
			}
		}

		return oContent;
	};

	SmartVariantManagement.prototype._getChangeContent = function(sKey) {
		var oContent = null;

		if (sKey === this.STANDARDVARIANTKEY) {
			oContent = this.getStandardVariant();
		} else {
			oContent = this._getChange(sKey);
			if (oContent) {
				oContent = oContent.getContent();
				if (oContent) {
					oContent = jQuery.extend(true, {}, oContent);
				}
			}
		}

		return oContent;
	};

	/**
	 * Retrieves the variant with the requested ID.
	 * @private
	 * @param {string} sId the variant key
	 * @returns {sap.ui.fl.Change} object representing the variant
	 */
	SmartVariantManagement.prototype._getChange = function(sId) {

		var oChange = null;

		if (this._oControlPersistence) {
			oChange = this._oControlPersistence.getChange(sId);
		}

		return oChange;
	};

	/**
	 * Returns all registered providers.
	 * @private
	 * @returns {array} a list of all registered controls
	 */
	SmartVariantManagement.prototype._getAllPersonalizableControls = function() {

		return this._aPersonalizableControls;
	};

	/**
	 * Removes all registered personalizable controls.
	 * @public
	 */
	SmartVariantManagement.prototype.removeAllPersonalizableControls = function() {

		this.removeAllAggregation("personalizableControls");
		this._aPersonalizableControls = [];
	};

	/**
	 * Removes a registered personalizable control.
	 * @public
	 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo wrapper for the personalizable control
	 * @returns {object} removed wrapper for the personalizable control
	 */
	SmartVariantManagement.prototype.removePersonalizableControl = function(oCurrentControlInfo) {

		var oPersonalizableInfo = this.removeAggregation("personalizableControls", oCurrentControlInfo);

		if (oPersonalizableInfo) {

			this._aPersonalizableControls.some(function(oPerso, index) {
				if (oPerso.control.getId() === oPersonalizableInfo.getControl()) {
					this._aPersonalizableControls.splice(index, 1);
					return true;
				}

				return false;
			}.bind(this));
		}

		return oPersonalizableInfo;
	};

	/**
	 * Removes a registered personalizable control.
	 * @public
	 * @param {sap.ui.control} oControl the personalizable control
	 */
	SmartVariantManagement.prototype.removePersonalizableControlById = function(oControl) {

		var aPersonalizableControls = this.getAggregation("personalizableControls");

		if (aPersonalizableControls) {

			aPersonalizableControls.some(function(oPerso, index) {
				if (oPerso.getControl() === oControl.getId()) {
					this.removePersonalizableControl(oPerso);
					return true;
				}

				return false;
			}.bind(this));

		}
	};

	/**
	 * Creates entries into the variant management control, based on the list of variants.
	 * @private
	 * @param {map} mVariants list of variants, as determined by the flex layer
	 * @returns {array} containing all variant keys
	 */
	SmartVariantManagement.prototype._createVariantEntries = function(mVariants) {

		var n = null;
		var sVariantKey, sStandardVariantKey = null;
		var oVariant, oVariantItem;
		var aVariantKeys = [];
		var aFavoriteChanges = [];

		this.removeAllItems();

		if (mVariants) {
			for (n in mVariants) {
				if (n) {
					oVariant = mVariants[n];
					if (oVariant.isVariant()) {

						oVariantItem = new VariantItem({
							key: oVariant.getId(),
							// text: oVariant.getText("variantName"), // issue with curly brackets
							global: !oVariant.isUserDependent(),
							executeOnSelection: this._getExecuteOnSelection(oVariant),
							lifecycleTransportId: oVariant.getRequest(),
							lifecyclePackage: oVariant.getPackage(),
							namespace: oVariant.getNamespace(),
							readOnly: this._isReadOnly(oVariant),
							labelReadOnly: oVariant.isLabelReadOnly(),
							author: this._getLRepUser(oVariant)
						});
						oVariantItem.setText(oVariant.getText("variantName"));

						if (this._hasStoredStandardVariant(oVariant)) {
							sStandardVariantKey = oVariant.getId();
						}

						this.addVariantItem(oVariantItem);

						aVariantKeys.push(oVariant.getId());
					} else {
						/* eslint-disable no-lonely-if */
						if ((oVariant.getChangeType() === sap.ui.comp.smartvariants.ChangeHandlerType.addFavorite) || (oVariant.getChangeType() === sap.ui.comp.smartvariants.ChangeHandlerType.removeFavorite)) {
							aFavoriteChanges.push(oVariant);
						}
						/* eslint-enable no-lonely-if */
					}
				}
			}
		}

		if (this._oPersoControl) {
			sVariantKey = this._getDefaultVariantKey();
			if (sVariantKey) {
				this.setInitialSelectionKey(sVariantKey); // set the current selected variant
			}

			var bFlag = this._isApplicationVariant(this._oPersoControl);
			if (bFlag) {
				this.setIndustrySolutionMode(bFlag);

				bFlag = FlexUtils.isVendorLayer();
				this._setVendorLayer(bFlag);
			}

			if (this.getIndustrySolutionMode()) {
// if (oCurrentControlInfo.standardvariantkey !== undefined) {
// delete oCurrentControlInfo.standardvariantkey;
// }

				if (sStandardVariantKey) {
					// oCurrentControlInfo.standardvariantkey = sStandardVariantKey;

					this._sAppStandardVariantKey = sStandardVariantKey;

					this.setStandardVariantKey(sStandardVariantKey);
				}
			}

			if (this._oControlPersistence && this._oControlPersistence.isVariantDownport()) {
				this._enableManualVariantKey(true);
			}
		}

		// favorites handling
		this._aFavoriteChanges = aFavoriteChanges;
		this.applyDefaultFavorites(aVariantKeys);

		return aVariantKeys;
	};

	/**
	 * Applies the favorites.
	 * @protected
	 * @param {array} aVariantKeys Contains the added variant keys
	 * @param {boolean} bSelectionVariants Defines if this is the SelectionVariant scenario
	 */
	SmartVariantManagement.prototype.applyDefaultFavorites = function(aVariantKeys, bSelectionVariants) {
		if (this._aFavoriteChanges && (this._aFavoriteChanges.length > 0)) {
			this._applyFavorites(this._aFavoriteChanges);
		} else {
			/* eslint-disable no-lonely-if */
			if (!bSelectionVariants) {
				this._applyDefaultFavorites(aVariantKeys);
			} else {
				this._applyDefaultFavoritesForSelectionVariants(aVariantKeys);
			}
			/* eslint-enable no-lonely-if */
		}
	};

	SmartVariantManagement.prototype._applyDefaultFavoritesForSelectionVariants = function(aVariantKeys) {

		aVariantKeys.forEach(function(sVariantKey) {
			var oVariantItem = this.getItemByKey(sVariantKey);
			if (oVariantItem) {
				this._setFavorite(sVariantKey);
			}

		}.bind(this));

	};

	SmartVariantManagement.prototype._applyDefaultFavorites = function(aVariantKeys) {

		if (!this._sAppStandardVariantKey) {
			this.setStandardFavorite(true);
			this._setFavorite(this.STANDARDVARIANTKEY);
		}

		aVariantKeys.forEach(function(sVariantKey) {
			var oChange = this._getChange(sVariantKey);
			var oVariantItem = this.getItemByKey(sVariantKey);
			if (oChange && oVariantItem) {
				if (!this._isReadOnly(oChange)) {
					this._setFavorite(sVariantKey);
				} else if (oChange.getLayer() === "VENDOR") {
					this._setFavorite(sVariantKey);
				}
			}

		}.bind(this));

	};

	SmartVariantManagement.prototype._applyFavorites = function(aFavoriteChanges) {

		aFavoriteChanges.forEach(function(oChange) {
			var oVariantItem, oContent = oChange.getContent();
			if (oContent && oContent.key) {
				if (oContent.key === this.STANDARDVARIANTKEY) {
					this.setStandardFavorite(oContent.visible);
				} else {
					oVariantItem = this.getItemByKey(oContent.key);
					if (oVariantItem) {
						oVariantItem.setFavorite(oContent.visible);
					}
				}
			}
		}.bind(this));
	};

	/**
	 * @param {object[]} aChanges - Format: {key: {string}, visible: {boolean}}
	 * @private
	 */
	SmartVariantManagement.prototype._addFavorites = function(aChanges) {
		var aAddedFavorites = aChanges.filter(function(oFavorite) {
			return oFavorite.visible === true;
		});
		var aRemovedFavorites = aChanges.filter(function(oFavorite) {
			return oFavorite.visible === false;
		});

		this._createFavoriteTypeChanges(aAddedFavorites, aRemovedFavorites);
	};

	/**
	 * Creates changes for the variant favorites handling.
	 * @param {array} aAddedFavorites containing added favorites
	 * @param {array} aRemovedFavorites containing removed favorites
	 * @private
	 */
	SmartVariantManagement.prototype._createFavoriteTypeChanges = function(aAddedFavorites, aRemovedFavorites) {
		if (!aAddedFavorites.length && !aRemovedFavorites.length) {
			return;
		}

		this._createFavoriteChanges(aAddedFavorites, sap.ui.comp.smartvariants.ChangeHandlerType.addFavorite);
		this._createFavoriteChanges(aRemovedFavorites, sap.ui.comp.smartvariants.ChangeHandlerType.removeFavorite);
	};

	/**
	 * Creates flexibility changes in the USER layer.
	 * @param {array} aFavorites Array of objects of format {key: {string}, visible: {boolean}}
	 * @param {string} sChangeType Registered type of ChangeHandler in sap.ui.comp.library.js
	 * @private
	 */
	SmartVariantManagement.prototype._createFavoriteChanges = function(aFavorites, sChangeType) {
		var oObj = this._oControlPersistence;
		if (!oObj || !aFavorites.length) {
			return;
		}
		if (!sChangeType) {
			throw new Error("sChangeType should be filled");
		}

		aFavorites.forEach(function(oFavorite) {
			oObj.addChange({
				type: sChangeType,
				content: oFavorite,
				isUserDependent: true
			});
		});
	};

	SmartVariantManagement.prototype._isReadOnly = function(oChange) {

		var bReadOnly = oChange.isReadOnly();

		if (bReadOnly) {
			var oUser = this._getUser();
			if (oUser) {
				return !(oUser.getId() === oChange.getOwnerId()); // an owner of a change is allowed to edit it
			}
		}

		return bReadOnly;
	};

	SmartVariantManagement.prototype._getUser = function() {
		var oUser = null;

		if (sap.ushell && sap.ushell.Container && sap.ushell.Container.getUser) {
			oUser = sap.ushell.Container.getUser();
		}

		return oUser;
	};

	/**
	 * Retrieves the list of known variants via access to
	 * @private
	 * @param {Function} fCallBack will be called once the promise is full filled
	 */
	SmartVariantManagement.prototype.getVariantsInfo = function(fCallBack) {

		if (!fCallBack) {
			jQuery.sap.log.error("'getVariantsInfo' failed. Expecting callBack not passed.");
			return;
		}

		var n = null;
		var oVariant;
		var aVariants = [];
		var that = this;

		try {

			if (this._oControlPersistence) {

				this._oControlPersistence.getChanges().then(function(mVariants) {
					if (mVariants) {
						for (n in mVariants) {
							if (n) {
								oVariant = mVariants[n];
								if (oVariant.isVariant()) {
									aVariants.push({
										key: oVariant.getId(),
										text: oVariant.getText("variantName")
									});
								}
							}
						}
					}

					fCallBack(aVariants);
				}, function(args) {
					var sError = "'getChanges' failed:";
					if (args && args[0] && args[0].messages && args[0].messages[0]) {
						sError += (' ' + args[0].messages[0]);
					}
					that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), sError);

					fCallBack(aVariants);
				});
			}

		} catch (ex) {
			this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), "'getChanges' throws an exception");
		}
	};

	/**
	 * Retrieves the current variant ID. For a standard variant, an empty string is returned.
	 * @public
	 * @since 1.28.1
	 * @returns {string} Current variant ID
	 */
	SmartVariantManagement.prototype.getCurrentVariantId = function() {
		var sKey = this._getCurrentVariantId();
		if (sKey === this.STANDARDVARIANTKEY) {
			sKey = "";
		}

		return sKey;
	};

	SmartVariantManagement.prototype._getCurrentVariantId = function() {
		var sKey = this.getSelectionKey();

		return sKey;
	};

	/**
	 * Sets the current variant ID.
	 * @public
	 * @since 1.28.1
	 * @param {string} sVariantId ID of the variant
	 * @param {boolean} bDoNotApplyVariant If set to <code>true</code>, the <code>applyVariant</code> method is not executed yet. Relevant during
	 *        navigation, when called before the initialise event has been executed
	 */
	VariantManagement.prototype.setCurrentVariantId = function(sVariantId, bDoNotApplyVariant) {
		var sId = this._determineVariantId(sVariantId);

		if (this._oPersoControl) {

			if (!this._oStandardVariant) {

				this._setSelectionByKey(sId); // set the current selected variant

			} else {
				this._applyCurrentVariantId(sId, bDoNotApplyVariant);
			}
		}
	};

	SmartVariantManagement.prototype._applyCurrentVariantId = function(sVariantId, bDoNotApplyVariant) {
		var oContent;

		if (this._oPersoControl) {
			oContent = this._getChangeContent(sVariantId);

			if (oContent) {
				this._setSelectionByKey(sVariantId); // set the current selected variant
				if (!bDoNotApplyVariant) {

					if (this.isPageVariant()) {
						this._applyVariants(oContent, "SET_VM_ID");
					} else {
						this._applyVariant(this._oPersoControl, oContent, "SET_VM_ID");
					}
				}
			}
		}
	};

	SmartVariantManagement.prototype._determineVariantId = function(sVariantId) {
		var sId = sVariantId;
		if (!sId) {
			sId = this.getStandardVariantKey();
		} else {

			/* eslint-disable no-lonely-if */
			if (!this.getItemByKey(sId)) {
				sId = this.getStandardVariantKey();
			}
			/* eslint-enable no-lonely-if */
		}

		return sId;
	};

	/**
	 * Initializes the SAPUI5 layer with the flexibility services by retrieving the list of variants. Once the initialization has been completed, the
	 * control for personalization is informed via the initialise event.
	 * @public
	 * @param {function} fCallback Function will be called whenever the data for the personalizable control is received
	 * @param {sap.ui.core.Control} oPersoControl Current control that can be personalized
	 */
	SmartVariantManagement.prototype.initialise = function(fCallback, oPersoControl) {
		var oCurrentControlWrapper = null, oDefaultContent, that = this, sKey, bFlag, parameter = {
			variantKeys: []
		};

		try {

			if (oPersoControl && fCallback) {
				oCurrentControlWrapper = this._getControlWrapper(oPersoControl);
				if (!oCurrentControlWrapper) {
					jQuery.sap.log.error("initialise on an unknown control.");
					return;
				}

				if (oCurrentControlWrapper.bInitialized) {
					jQuery.sap.log.error("initialise on " + oPersoControl.getId() + " already executed");
					return;
				}

				oCurrentControlWrapper.fInitCallback = fCallback;

			} else if (!this.isPageVariant()) {
				oCurrentControlWrapper = this._getControlWrapper(this._oPersoControl);
			}

			if (this._oControlPromise && this._oPersoControl && oCurrentControlWrapper) {

				this._oControlPromise.then(function(mVariants) {

					if (that._bIsBeingDestroyed) {
						return;
					}

					if (!that._bIsInitialized) {
						that._bIsInitialized = true;

						parameter.variantKeys = that._createVariantEntries(mVariants);

						bFlag = that._getExecuteOnSelectOnStandardVariant();
						if (bFlag !== null) {
							that._executeOnSelectForStandardVariantByUser(bFlag);
						}

						sKey = that._getDefaultVariantKey();
						if (sKey) {
							oDefaultContent = that._getChangeContent(sKey);
							if (oDefaultContent) {
								that.setDefaultVariantKey(sKey); // set the default variant
								that.setInitialSelectionKey(sKey); // set the current selected variant
							}
						}

						if (that._sAppStandardVariantKey) {
							that._oAppStdContent = that._getChangeContent(that._sAppStandardVariantKey);
						}

					}
					that._initialize(parameter, oCurrentControlWrapper);

				}, function(args) {
					var sError = "'getChanges' failed:";
					if (args && args.message) {
						sError += (' ' + args.messages);
					}

					that._errorHandling(sError, fCallback, oPersoControl);
				});

			} else {
				this._errorHandling("'initialise' no personalizable component available", fCallback, oPersoControl);
			}

		} catch (ex) {
			this._errorHandling("'getChanges' throws an exception", fCallback, oPersoControl);
		}
	};

	SmartVariantManagement.prototype._errorHandling = function(sErrorText, fCallback, oPersoControl) {
		var parameter = {
			variantKeys: []
		};

		this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"), sErrorText);

		if (fCallback && oPersoControl) {
			fCallback.call(oPersoControl);
		} else {
			this.fireEvent("initialise", parameter);
		}

		if (oPersoControl.variantsInitialized) {
			oPersoControl.variantsInitialized();
		}
	};

	SmartVariantManagement.prototype._initialize = function(parameter, oCurrentControlWrapper) {

		var sKey, oContent = null, bIsPageVariant = this.isPageVariant();

		if (this._oAppStdContent) {
			if ((oCurrentControlWrapper.type === "table") || (oCurrentControlWrapper.type === "chart")) {
				if (bIsPageVariant) {
					this._applyControlVariant(oCurrentControlWrapper.control, this._oAppStdContent, "STANDARD", true);
				} else {
					this._applyVariant(oCurrentControlWrapper.control, this._oAppStdContent, "STANDARD", true);
				}
			}
		}

		if (oCurrentControlWrapper.fInitCallback) {
			oCurrentControlWrapper.fInitCallback.call(oCurrentControlWrapper.control);
			delete oCurrentControlWrapper.fInitCallback;
			oCurrentControlWrapper.bInitialized = true;
		} else {
			this.fireEvent("initialise", parameter);
		}
		oCurrentControlWrapper.loaded.resolve();

		sKey = this.getSelectionKey();
		if (sKey && (sKey !== this.getStandardVariantKey())) {
			oContent = this._getChangeContent(sKey);
		} else if (this._oAppStdContent) {
			oContent = this._oAppStdContent;

			if ((oCurrentControlWrapper.type === "table") || (oCurrentControlWrapper.type === "chart")) {
				// chart and table are already applied with with STANDARD context
				oContent = null;
			}
		}

		if (this._sAppStandardVariantKey) {
			this._updateStandardVariant(oCurrentControlWrapper, this._oAppStdContent);
		} else {
			this._setStandardVariant(oCurrentControlWrapper);
		}

		if (oContent) {

			if (bIsPageVariant) {
				this._applyControlVariant(oCurrentControlWrapper.control, oContent, "INIT", true);
			} else {
				this._applyVariant(oCurrentControlWrapper.control, oContent, "INIT", true);
			}
		}

		if (oCurrentControlWrapper.control.variantsInitialized) {
			oCurrentControlWrapper.control.variantsInitialized();
		}

		if ((this._getCurrentVariantId() === this.getStandardVariantKey()) && this.getExecuteOnSelectForStandardVariant()) {
			if (oCurrentControlWrapper.control.search) {
				oCurrentControlWrapper.control.search();
			}
		}

	};

	SmartVariantManagement.prototype.setInitialState = function() {

		var sKey = this._getDefaultVariantKey() || this.getStandardVariantKey();
		if (sKey) {

			this.setInitialSelectionKey(sKey);

			this._triggerSelectVariant(sKey, "INIT_STATE");

		}

	};

	SmartVariantManagement.prototype._updateVariant = function(oVariantInfo) {

		if (this._isIndustrySolutionModeAndVendorLayer() || (oVariantInfo.key !== this.getStandardVariantKey())) {

			if (oVariantInfo) {
				var oChange = this._getChange(oVariantInfo.key);
				if (oChange) {
					try {

						if ((oVariantInfo.lifecycleTransportId !== null) && (oVariantInfo.lifecycleTransportId !== undefined)) {
							oChange.setRequest(oVariantInfo.lifecycleTransportId);
						}

						var oContent = this._fetchContent();
						if (oContent) {

							var oItem = this.getItemByKey(oVariantInfo.key);
							if (oItem) {
								oContent.executeOnSelection = oItem.getExecuteOnSelection();
							}

							if (oContent.standardvariant !== undefined) {
								delete oContent.standardvariant;
							}

							if (this._isIndustrySolutionModeAndVendorLayer() && (oVariantInfo.key === this.getStandardVariantKey())) {
								oContent.standardvariant = true;
							}

							oChange.setContent(oContent);
						}

					} catch (ex) {
						jQuery.sap.log.error("'_updateVariant' throws an exception");
					}
				}
			}
		}
	};

	SmartVariantManagement.prototype._createChangeHeader = function() {

		if (this.isPageVariant()) {
			return {
				type: "page",
				dataService: "n/a"
			};
		}

		var aCurrentControls = this._getAllPersonalizableControls();
		if (aCurrentControls && aCurrentControls.length > 0) {
			return {
				type: aCurrentControls[0].type,
				dataService: aCurrentControls[0].dataSource
			};
		}

	};

	SmartVariantManagement.prototype._newVariant = function(oVariantInfo) {

		var sId, oContent, oChange, bIsStandardVariant = false;

		if (oVariantInfo && this._oControlPersistence) {

			var oTypeDataSource = this._createChangeHeader();

			var bUserDependent = !oVariantInfo.global;

			var sPackage = "";
			if ((oVariantInfo.lifecyclePackage !== null) && (oVariantInfo.lifecyclePackage !== undefined)) {
				sPackage = oVariantInfo.lifecyclePackage;
			}

			var sTransportId = "";
			if ((oVariantInfo.lifecycleTransportId !== null) && (oVariantInfo.lifecycleTransportId !== undefined)) {
				sTransportId = oVariantInfo.lifecycleTransportId;
			}

			sId = this._isVariantDownport() ? oVariantInfo.key : null;
			// if (this._isIndustrySolutionModeAndVendorLayer() && ((this.getStandardVariantKey() === this.STANDARDVARIANTKEY) &&
			// this._isVariantDownport())) {
			if (this._isIndustrySolutionModeAndVendorLayer() && (this.getStandardVariantKey() === this.STANDARDVARIANTKEY)) {
				if (sTransportId && (oVariantInfo.name === this.oResourceBundle.getText("VARIANT_MANAGEMENT_STANDARD"))) {
					this.setStandardVariantKey(sId);
					bIsStandardVariant = true;
				}
			}
			oContent = this._fetchContent();
			if (oContent) {
				if (oVariantInfo.exe) {
					oContent.executeOnSelection = oVariantInfo.exe;
				}
				if (oVariantInfo.tile) {
					oContent.tile = oVariantInfo.tile;
				}

				if (oContent.standardvariant !== undefined) {
					delete oContent.standardvariant;
				}
				// if (this._isIndustrySolutionModeAndVendorLayer() && ((oVariantInfo.key === this.STANDARDVARIANTKEY) || this._isVariantDownport()))
				// {
				if (bIsStandardVariant) {
					oContent.standardvariant = true;
				}
			}

			var mParams = {
				type: oTypeDataSource.type,
				ODataService: oTypeDataSource.dataSource,
				texts: {
					variantName: oVariantInfo.name
				},
				content: oContent,
				isVariant: true,
				packageName: sPackage,
				isUserDependent: bUserDependent,
				id: sId
			};

			sId = this._oControlPersistence.addChange(mParams);
			this.replaceKey(oVariantInfo.key, sId);
			this.setInitialSelectionKey(sId);

			// if (this.getIndustrySolutionMode() && oVariantInfo.key === this.STANDARDVARIANTKEY) {
			if (this._isIndustrySolutionModeAndVendorLayer() && ((oVariantInfo.key === this.STANDARDVARIANTKEY) || this._isVariantDownport())) {
				this.setStandardVariantKey(sId);
			}

			oChange = this._getChange(sId);
			if (oChange) {
				oChange.setRequest(sTransportId);

				var oItem = this.getItemByKey(sId);
				if (oItem) {
					oItem.setNamespace(oChange.getNamespace());
				}
			}

			if (oVariantInfo.def === true) {
				this._setDefaultVariantKey(sId);
			}

			// new variants are always created with favorite flag set
			this._setFavorite(sId);

		}
	};

	SmartVariantManagement.prototype._setFavorite = function(sId) {
		var oItem = this.getItemByKey(sId);
		if (oItem) {
			oItem.setFavorite(true);
		}

		this._addFavorites([
			{
				key: sId,
				visible: true
			}
		]);
	};

	SmartVariantManagement.prototype._fetchContent = function() {

		var oCurrentControlInfo, sPersKey, oContent, oControlContent = {};

		var aCurrentControls = this._getAllPersonalizableControls();

		for (var i = 0; i < aCurrentControls.length; i++) {

			oCurrentControlInfo = aCurrentControls[i];

			if (oCurrentControlInfo && oCurrentControlInfo.control && oCurrentControlInfo.control.fetchVariant) {

				oContent = oCurrentControlInfo.control.fetchVariant();
				if (oContent) {

// sContent = JSON.stringify(oContent);
// oContent = JSON.parse(sContent);

					if (oContent) {
						oContent = jQuery.extend(true, {}, oContent);
					}

					if (this.isPageVariant()) {

						sPersKey = this._getControlPersKey(oCurrentControlInfo);
						if (sPersKey) {
							// oControlContent[sPersKey] = oContent;
							oControlContent = this._assignContent(oControlContent, oContent, sPersKey);
						} else {
							jQuery.sap.log.error("no persistancy key retrieved");
						}

					} else {
						oControlContent = oContent;
						break;
					}
				}

			}
		}

		return oControlContent;

	};

	SmartVariantManagement.prototype._getControlPersKey = function(oCurrentControlInfo) {
		var sPersKey = null;

		if (oCurrentControlInfo.keyName) {
			if (oCurrentControlInfo.keyName === "id") {
				sPersKey = oCurrentControlInfo.control.getId();
			} else {
				sPersKey = oCurrentControlInfo.control.getProperty(oCurrentControlInfo.keyName);
			}
		} else {
			var oControlWrapper = this._getControlWrapper(oCurrentControlInfo);
			if (oControlWrapper && oControlWrapper.keyName) {
				if (oControlWrapper.keyName === "id") {
					sPersKey = oControlWrapper.control.getId();
				} else {
					sPersKey = oControlWrapper.control.getProperty(oControlWrapper.keyName);
				}
			}
		}

		return sPersKey;
	};

	SmartVariantManagement.prototype._newVariantContent = function(oCurrentControlInfo) {

		var oControlContent = null, oContent, sContent, sPersKey;

		if (oCurrentControlInfo && oCurrentControlInfo.control && oCurrentControlInfo.control.fetchVariant) {

			oContent = oCurrentControlInfo.control.fetchVariant();
			if (oContent) {

				sContent = JSON.stringify(oContent);
				oContent = JSON.parse(sContent);

				if (this.isPageVariant()) {

					sPersKey = this._getControlPersKey(oCurrentControlInfo);
					if (sPersKey) {
						oControlContent = {};
						// oControlContent[sPersKey] = oContent;
						oControlContent = this._assignContent(oControlContent, oContent, sPersKey);
					} else {
						jQuery.sap.log.error("no persistancy key retrieved");
					}

				} else {
					oControlContent = oContent;
				}
			}
		}

		return oControlContent;
	};

	SmartVariantManagement.prototype._appendLifecycleInformation = function(oVariant, sId) {

		var sTransportId;

		var oItem = this.getItemByKey(sId);

		if (oItem) {
			sTransportId = oItem.getLifecycleTransportId();
			if (sTransportId === null || sTransportId === undefined) {
				sTransportId = "";
			}

			if (oVariant) {
				oVariant.setRequest(sTransportId);
			}
		}

	};

	SmartVariantManagement.prototype._renameVariant = function(oVariantInfo) {

		if (oVariantInfo.key !== this.getStandardVariantKey()) {
			if (oVariantInfo) {
				var oChange = this._getChange(oVariantInfo.key);
				if (oChange) {
					oChange.setText("variantName", oVariantInfo.name);
					this._appendLifecycleInformation(oChange, oVariantInfo.key);
				}
			}
		}
	};

	SmartVariantManagement.prototype._deleteVariants = function(aVariantInfo) {
		var i;
		if (aVariantInfo && aVariantInfo.length) {

			var sVariantKey = this._getDefaultVariantKey();

			for (i = 0; i < aVariantInfo.length; i++) {

				// delete on standard variant only possible in vendor layer
				if (aVariantInfo[i] === this.getStandardVariantKey()) {

					if (!this._isIndustrySolutionModeAndVendorLayer()) {
						continue;
					} else {
						// reset to STANDARD
						this.setStandardVariantKey(this.STANDARDVARIANTKEY);
					}
				}

				var oChange = this._getChange(aVariantInfo[i]);
				if (oChange) {
					oChange.markForDeletion();
					if (sVariantKey && sVariantKey === aVariantInfo[i]) {
						this._setDefaultVariantKey("");
					}

					this._appendLifecycleInformation(oChange, aVariantInfo[i]);
				}
			}
		}
	};

	SmartVariantManagement.prototype._getDefaultVariantKey = function() {

		var sDefaultVariantKey = "";
		if (this._oControlPersistence) {
			sDefaultVariantKey = this._oControlPersistence.getDefaultVariantIdSync();
		}

		return sDefaultVariantKey;
	};

	SmartVariantManagement.prototype._setDefaultVariantKey = function(sVariantKey) {

		if (this._oControlPersistence) {
			this._oControlPersistence.setDefaultVariantIdSync(sVariantKey);
		}
	};

	SmartVariantManagement.prototype._getExecuteOnSelectOnStandardVariant = function() {

		var bExecuteOnSelect = null;
		if (this._oControlPersistence) {
			bExecuteOnSelect = this._oControlPersistence.getExecuteOnSelectSync();
		}

		return bExecuteOnSelect;
	};

	SmartVariantManagement.prototype._setExecuteOnSelectOnStandardVariant = function(bFlag) {

		if (this._oControlPersistence) {
			this._oControlPersistence.setExecuteOnSelectSync(bFlag);
		}
	};

	SmartVariantManagement.prototype._isVariantDownport = function() {

		var bDownport = false;
		if (this._oControlPersistence) {
			bDownport = this._oControlPersistence.isVariantDownport();
		}

		return bDownport;
	};

	SmartVariantManagement.prototype._getExecuteOnSelection = function(oVariant) {

		var oContent;

		if (oVariant) {
			oContent = oVariant.getContent();
			if (oContent && (oContent.executeOnSelection !== undefined)) {
				return oContent.executeOnSelection;
			}
		}

		return false;
	};

	SmartVariantManagement.prototype._hasStoredStandardVariant = function(oVariant) {

		var oContent;

		if (oVariant) {
			oContent = oVariant.getContent();
			if (oContent && oContent.standardvariant) {
				return oContent.standardvariant;
			}
		}

		return false;
	};

	SmartVariantManagement.prototype._isComponentTemplate = function(oControl) {

		var bIsTemplate = false;

		var oComponent = FlexUtils.getComponentForControl(oControl);

		// special case for SmartTemplating to reach the real appComponent
		if (oComponent && oComponent.getAppComponent) {
			oComponent = oComponent.getAppComponent();

			if (oComponent) {
				bIsTemplate = true;
			}

		}

		return bIsTemplate;

	};

	SmartVariantManagement.prototype._isApplicationVariant = function(oControl) {
		if (FlexUtils.isApplicationVariant(oControl)) {
			return true;
		}

		if (this._isComponentTemplate(oControl)) {
			return true;
		}

		return false;
	};

	SmartVariantManagement.prototype._setExecuteOnSelections = function(aVariantInfo) {

		var i;
		if (aVariantInfo && aVariantInfo.length) {

			for (i = 0; i < aVariantInfo.length; i++) {

				if (aVariantInfo[i].key === this.STANDARDVARIANTKEY) {
					this._setExecuteOnSelectOnStandardVariant(aVariantInfo[i].exe);
					continue;
				}

				var oChange = this._getChange(aVariantInfo[i].key);
				if (oChange) {
					var oJson = oChange.getContent();
					if (oJson) {
						oJson.executeOnSelection = aVariantInfo[i].exe;
						oChange.setContent(oJson);
					}

					this._appendLifecycleInformation(oChange, aVariantInfo[i].key);
				}
			}
		}
	};

	/**
	 * Save all variants.
	 * @private
	 * @param {boolean} bNewVariant indicates, if the save was triggered after new variant creation
	 * @param {boolean} bIgnoreVariantHandling indicates, if the save was triggered after new variant creation
	 */
	SmartVariantManagement.prototype._save = function(bNewVariant, bIgnoreVariantHandling) {

		var that = this;

		if (this._oControlPersistence) {
			try {
				this._oControlPersistence.saveAll().then(function() {

					if (!bIgnoreVariantHandling) {

						if (bNewVariant) {
							that._updateUser();
						}
						that.fireEvent("afterSave");
					}

				}, function(args) {
					var sError = "'_save' failed:";
					if (args && args.message) {
						sError += (' ' + args.messages);
					}
					that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE_FAILED"), sError);
				});
			} catch (ex) {
				this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE_FAILED"), "'_save' throws an exception");
			}
		}
	};

	SmartVariantManagement.prototype._updateUser = function() {
		var sId = this.getInitialSelectionKey();
		var sUserName = this._getLRepUser(this._getChange(sId));
		if (sUserName) {
			this._assignUser(sId, sUserName);
		}
	};

	SmartVariantManagement.prototype._getLRepUser = function(oChange) {
		var sUserName = null;
		if (oChange && oChange.getDefinition() && oChange.getDefinition().support) {
			sUserName = oChange.getDefinition().support.user ? oChange.getDefinition().support.user : "";
		}

		return sUserName;
	};

	/**
	 * Eventhandler for the save event of the <code>SmartVariantManagement</code> control.
	 * @param {object} oVariantInfo Describes the variant to be saved
	 */
	SmartVariantManagement.prototype.fireSave = function(oVariantInfo) {

		var bSave = false, bNewVariant = true;
		var oEvent = {};

		if (oVariantInfo) {

			if (oVariantInfo.hasOwnProperty("tile")) {
				oEvent.tile = oVariantInfo.tile;
			}

			if (oVariantInfo.overwrite) {
				if (this._isIndustrySolutionModeAndVendorLayer() || (oVariantInfo.key !== this.getStandardVariantKey())) { // Prohibit save on
					// standard variant

					this.fireEvent("save", oEvent);

					if (oVariantInfo.key === this.STANDARDVARIANTKEY) {
						this._newVariant(oVariantInfo);
					} else {
						this._updateVariant(oVariantInfo);
						bNewVariant = false;
					}

					bSave = true;
				}
			} else {

				this.fireEvent("save", oEvent);
				this._newVariant(oVariantInfo);
				bSave = true;
			}

			if (bSave) {
				this._save(bNewVariant);
			}
		}
	};

	/**
	 * Eventhandler for the manage event of the <code>SmartVariantManagement</code> control. Raises the base class event for spacial handlings like
	 * save tile.
	 * @param {object} oVariantInfo Describes the variants that will be deleted/renamed
	 */
	SmartVariantManagement.prototype.fireManage = function(oVariantInfo) {

		var i;

		if (oVariantInfo) {

			if (oVariantInfo.renamed) {

				for (i = 0; i < oVariantInfo.renamed.length; i++) {
					this._renameVariant(oVariantInfo.renamed[i]);
				}
			}

			if (oVariantInfo.deleted) {
				this._deleteVariants(oVariantInfo.deleted);
			}

			if (oVariantInfo.exe) {
				this._setExecuteOnSelections(oVariantInfo.exe);
			}

			if (oVariantInfo.def) {

				var sDefaultVariantKey = this._getDefaultVariantKey();
				if (sDefaultVariantKey !== oVariantInfo.def) {
					this._setDefaultVariantKey(oVariantInfo.def);
				}
			}

			if (oVariantInfo.fav && (oVariantInfo.fav.length > 0)) {
				this._addFavorites(oVariantInfo.fav);
			}

			if ((oVariantInfo.deleted && oVariantInfo.deleted.length > 0) || (oVariantInfo.renamed && oVariantInfo.renamed.length > 0) || (oVariantInfo.exe && oVariantInfo.exe.length > 0) || oVariantInfo.def) {
				this._save();
			} else if (oVariantInfo.fav && (oVariantInfo.fav.length > 0)) {
				this._save(false, true);
			}

			this.fireEvent("manage", oVariantInfo);
		}

	};

	/**
	 * Eventhandler for the select event of the <code>SmartVariantManagement</code> control.
	 * @param {object} oVariantInfo Describes the selected variant
	 * @param {strinf} sContext context
	 */
	SmartVariantManagement.prototype.fireSelect = function(oVariantInfo, sContext) {

		if (this._oPersoControl && oVariantInfo && oVariantInfo.key) {
			this._triggerSelectVariant(oVariantInfo.key, sContext);

			this.fireEvent("select", oVariantInfo);
		}
	};

	SmartVariantManagement.prototype._selectVariant = function(sVariantKey, sContext) {
		this.fireSelect({
			key: sVariantKey
		}, sContext);
	};

	SmartVariantManagement.prototype._checkForSelectionHandler = function(sVariantKey) {

		var oHandler = null, aHandler = Object.keys(this._oSelectionVariantHandler);

		if (aHandler.length > -1) {

			aHandler.some(function(oKey) {
				if (sVariantKey.indexOf(oKey) === 0) {
					oHandler = this._oSelectionVariantHandler[oKey];
					return true;
				}

				return false;
			}.bind(this));

		}

		return oHandler;
	};

	SmartVariantManagement.prototype._triggerSelectVariant = function(sVariantKey, sContext) {

		var oContent, oHandler = this._checkForSelectionHandler(sVariantKey);

		if (oHandler) {
			oContent = this._triggerSpecialSelectVariant(sVariantKey, sContext, oHandler);
		} else {
			oContent = this._triggerGeneralSelectVariant(sVariantKey, sContext);
		}

		if (oContent) {
			if (this.isPageVariant()) {
				this._applyVariants(oContent, sContext);
			} else {
				this._applyVariant(this._oPersoControl, oContent, sContext);
			}
		}
	};

	SmartVariantManagement.prototype._triggerSpecialSelectVariant = function(sVariantKey, sContext, oHandler) {

		return oHandler.callback.call(oHandler.handler, sVariantKey, sContext);

	};

	SmartVariantManagement.prototype._triggerGeneralSelectVariant = function(sVariantKey, sContext) {

		var oContent = this._getChangeContent(sVariantKey);
		if (oContent) {
			var sContent = JSON.stringify(oContent);
			oContent = JSON.parse(sContent);

			if ((sVariantKey === this.STANDARDVARIANTKEY) && this.getExecuteOnSelectForStandardVariant()) {
				oContent.executeOnSelection = this.getExecuteOnSelectForStandardVariant();
			}
		}

		return oContent;
	};

	SmartVariantManagement.prototype._applyControlWrapperVariants = function(oControlWrapper, oContent, sContext) {
		var that = this;
		if (oControlWrapper) {
			oControlWrapper.loaded.then(function() {
				that._applyControlVariant(oControlWrapper.control, oContent, sContext);
			});
		}
	};

	SmartVariantManagement.prototype._applyVariants = function(oContent, sContext) {

		var i, aCurrentControls = this._getAllPersonalizableControls();

		for (i = 0; i < aCurrentControls.length; i++) {
			if (aCurrentControls[i] && aCurrentControls[i].control && aCurrentControls[i].loaded) {
				this._applyControlWrapperVariants(aCurrentControls[i], oContent, sContext);
			}
		}
	};

	/**
	 * Retrieves the standard variant from the ui - control.
	 * @private
	 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo information about the control to be personalized
	 */
	SmartVariantManagement.prototype._setStandardVariant = function(oCurrentControlInfo) {

		var oCurrentControl = oCurrentControlInfo.control;

		if (oCurrentControl) {

			if (oCurrentControl.fireBeforeVariantSave) {
				oCurrentControl.fireBeforeVariantSave(VariantManagement.STANDARD_NAME); // to obtain the CUSTOM_DATA
			}

			this._assignStandardVariant(oCurrentControlInfo);
		}
	};

	SmartVariantManagement.prototype._retrieveContent = function(oContent, sPersKey) {

		var oRetContent = oContent;

		if (this.isPageVariant() && oContent) {
			oRetContent = oContent[sPersKey];
			if (!oRetContent && (sPersKey === this.getPersistencyKey()) && this._aPersonalizableControls && this._aPersonalizableControls.length === 1) {
				oRetContent = oContent;
			}
		}

		return oRetContent;
	};

	SmartVariantManagement.prototype._assignContent = function(oTargetContent, oContent, sPersKey) {

		if (this.isPageVariant()) {
			if (!((sPersKey === this.getPersistencyKey()) && this._aPersonalizableControls && this._aPersonalizableControls.length === 1)) {
				oTargetContent[sPersKey] = oContent;
			} else {
				oTargetContent = oContent;
			}
		} else {
			oTargetContent = oContent;
		}

		return oTargetContent;
	};

	SmartVariantManagement.prototype._updateStandardVariant = function(oCurrentControlInfo, oContent) {

		if (oCurrentControlInfo.control) {
			var oControlContent = oContent;
			if (this.isPageVariant()) {
				var sPersKey = this._getControlPersKey(oCurrentControlInfo);
				if (sPersKey) {
					// oControlContent = oContent[sPersKey];
					oControlContent = this._retrieveContent(oContent, sPersKey);
				}
			}

			this._assignStandardVariantForControl(oCurrentControlInfo, oControlContent);
		}
	};

	SmartVariantManagement.prototype._assignStandardVariant = function(oCurrentControlInfo) {

		var oStandardVariant = null;

		if (oCurrentControlInfo.control) {

			if (oCurrentControlInfo.control.fetchVariant) {
				oStandardVariant = oCurrentControlInfo.control.fetchVariant();
			}

			this._assignStandardVariantForControl(oCurrentControlInfo, oStandardVariant);
		}
	};

	SmartVariantManagement.prototype._assignStandardVariantForControl = function(oCurrentControlInfo, oStandardVariant) {

		var oControlContent = oStandardVariant;

		if (oCurrentControlInfo) {
			if (this.isPageVariant()) {
				var sPersKey = this._getControlPersKey(oCurrentControlInfo.control);
				if (sPersKey) {
					if (!this._oStandardVariant) {
						this._oStandardVariant = {};
					}
					this._oStandardVariant = this._assignContent(this._oStandardVariant, oControlContent, sPersKey);
				}
			} else {

				this._oStandardVariant = oControlContent;
			}
		}

	};

	/**
	 * Returns the standard variant.
	 * @public
	 * @param {sap.ui.core.Control} oCurrentControl Current personalizable control
	 * @returns {Object} The standard variant.
	 */
	SmartVariantManagement.prototype.getStandardVariant = function(oCurrentControl) {
		var sPersKey, oControlInfo, oContent = null;

		if (this._oStandardVariant) {

			if (!oCurrentControl) {
				oContent = this._oStandardVariant;
			} else {
				/* eslint-disable no-lonely-if */
				if (this.isPageVariant()) {
					oControlInfo = this._getControlWrapper(oCurrentControl);
					if (oControlInfo) {
						sPersKey = this._getControlPersKey(oCurrentControl);
						if (sPersKey) {
							// oContent = this._oStandardVariant[sPersKey];
							oContent = this._retrieveContent(this._oStandardVariant, sPersKey);
						}
					}
				} else {
					if ((oCurrentControl === this._oPersoControl)) {
						oContent = this._oStandardVariant;
					}
				}
				/* eslint-enable no-lonely-if */
			}
		}

		return oContent;
	};

	/**
	 * Appliance of the the standard variant.
	 * @private
	 * @param {sap.ui.core.Control} oCurrentControl Personalizable Control
	 * @param {object} oContent JSON object
	 * @param {string} sContext Describes in what context the apply was executed. The context will be forwarded, via the event
	 *        <code>afterVariantLoad</code> to the application.
	 * @param {boolean} bInitial indicates if this apply is called during the initialization phase.
	 */
	SmartVariantManagement.prototype._applyVariant = function(oCurrentControl, oContent, sContext, bInitial) {

		if (oCurrentControl && oCurrentControl.applyVariant) {

			oCurrentControl.applyVariant(oContent, sContext, bInitial);
		}
	};

	SmartVariantManagement.prototype._applyControlVariant = function(oControl, oContent, sContext, bInitial) {
		var oControlContent, sPersKey;

		sPersKey = this._getControlPersKey(oControl);
		if (sPersKey) {
			// oControlContent = oContent[sPersKey];
			oControlContent = this._retrieveContent(oContent, sPersKey);

			if (oControlContent) {

				// if (oContent.executeOnSelection && oControl.type === "filterBar") {
				oControlContent.executeOnSelection = oContent.executeOnSelection;
				// }

				this._applyVariant(oControl, oControlContent, sContext, bInitial);
			}
		}

	};

	/**
	 * Registers for a givven key prefix a select variant handler. For a givven key prefix only one handler is possible.
	 * @private
	 * @param {sap.ui.core.Control} oHandler receives the selectEvent
	 * @param {string} sKeyPrefix handler identifier
	 */
	SmartVariantManagement.prototype.registerSelectionVariantHandler = function(oHandler, sKeyPrefix) {
		this._oSelectionVariantHandler[sKeyPrefix] = oHandler;
	};

	/**
	 * Unregisters a select variant handler.
	 * @private
	 * @param {sap.ui.core.Control} oHandler receives the selectEvent
	 * @param {string} sKeyPrefix handler identifier
	 */
	SmartVariantManagement.prototype.unregisterSelectionVariantHandler = function(oHandler) {

		var sEntryToBeDeleted = null;

		if (!this._oSelectionVariantHandler) {
			return;
		}

		if (typeof oHandler === 'string') {
			sEntryToBeDeleted = oHandler;
		} else {

			Object.keys(this._oSelectionVariantHandler).some(function(oKey) {
				if (this._oSelectionVariantHandler[oKey].handler === oHandler) {
					sEntryToBeDeleted = oKey;
					return true;
				}
				return false;
			}.bind(this));
		}

		if (sEntryToBeDeleted) {
			delete this._oSelectionVariantHandler[sEntryToBeDeleted];
		}

	};

	/**
	 * Sets an error state on the variant management control.
	 * @private
	 * @param {string} sText describing the error reason
	 * @param {string} sLogText describing the error reason for logging
	 */
	SmartVariantManagement.prototype._setErrorValueState = function(sText, sLogText) {
		this.setEnabled(false);

		if (sLogText) {
			jQuery.sap.log.error(sLogText);
		}
	};

	SmartVariantManagement.prototype.exit = function() {
		VariantManagement.prototype.exit.apply(this, arguments);

		this._aPersonalizableControls = null;

		this._oControlPersistence = null;
		// this._oControlComponent = null;
		this._oControlPromise = null;
		this._oPersoControl = null;

		this._oAppStdContent = null;
		this._sAppStandardVariantKey = null;

		this._oSelectionVariantHandler = null;

		this._aFavoriteChanges = null;
	};

	return SmartVariantManagement;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartvariants/SmartVariantManagement.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartvariants.SmartVariantManagementUi2') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartvariants.SmartVariantManagementUi2.
jQuery.sap.declare('sap.ui.comp.smartvariants.SmartVariantManagementUi2'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartvariants/SmartVariantManagementUi2",[
	'jquery.sap.global', 'sap/ui/comp/library', './PersonalizableInfo', 'sap/ui/comp/variants/VariantItem', 'sap/ui/comp/variants/VariantManagement'
], function(jQuery, library, PersonalizableInfo, VariantItem, VariantManagement) {
	"use strict";

	/**
	 * Constructor for a new SmartVariantManagementUi2.
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The SmartVariantManagementUi2 control is a specialization of the {@link sap.ui.comp.variants.VariantManagement VariantManagement}
	 *        control and communicates with the Ui2 personalization layer to manage the variants.
	 * @extends sap.ui.comp.variants.VariantManagement
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartvariants.SmartVariantManagementUi2
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartVariantManagementUi2 = VariantManagement.extend("sap.ui.comp.smartvariants.SmartVariantManagementUi2", /** @lends sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			aggregations: {

				/**
				 * All controls that rely on variant handling have to be added to this aggregation. The only consumer currently known is the
				 * <code>FilterBar</code> control.
				 */
				personalizableControl: {
					type: "sap.ui.comp.smartvariants.PersonalizableInfo",
					multiple: false
				}
			},
			events: {

				/**
				 * Once the <code>SmartVariantManagementUi2</code> control has been initialized, and especially after retrieving the variants via
				 * the UI2 personalization service, the registered consumer will be notified that this phase has completed
				 */
				initialise: {},

				/**
				 * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
				 */
				afterSave: {}
			}
		},
		renderer: function(oRm, oControl) {
			VariantManagement.getMetadata().getRenderer().render(oRm, oControl);
		}

	});

	SmartVariantManagementUi2.prototype.init = function() {
		VariantManagement.prototype.init.apply(this); // Call base class

		this._oStandardVariant = null;
		this._oPersController = null;
		this._sKeyName = null;

		this._oContainer = null;
		this._oVariantSet = null;

		if (this.setLifecycleSupport) {
			this.setLifecycleSupport(false);
		}
		this._setBackwardCompatibility(false);
	};

	/**
	 * Determines if the <code>SmartVariantManagementUi3</code> instance is a page variant.
	 * @public
	 * @return {boolean} always returns <code>false</code>
	 */
	SmartVariantManagementUi2.prototype.isPageVariant = function() {
		return false;
	};

	/**
	 * Retrieves the variant content.
	 * @public
	 * @param {sap.ui.core.Control} oControl current control
	 * @param {string} sKey the variant key
	 * @returns {object} json object representing the content of the variant
	 */
	SmartVariantManagementUi2.prototype.getVariantContent = function(oControl, sKey) {
		var oContent = null;

		if (sKey === this.STANDARDVARIANTKEY) {
			oContent = this._getStandardVariant();

		} else {

			/* eslint-disable no-lonely-if */
			if (this._oVariantSet) {
				var oVariant = this._oVariantSet.getVariant(sKey);
				if (oVariant) {
					oContent = this._getContent(oVariant);
				}
			}
			/* eslint-enable no-lonely-if */
		}

		return oContent;
	};

	/**
	 * Retrieves the current variant ID. For a standard variant, an empty string is returned.
	 * @public
	 * @returns {string} Current variant ID
	 */
	SmartVariantManagementUi2.prototype.getCurrentVariantId = function() {
		var sKey = "";
		var oItem = this._getSelectedItem();
		if (oItem) {
			sKey = oItem.getKey();
			if (sKey === this.STANDARDVARIANTKEY) {
				sKey = "";
			}
		}

		return sKey;
	};

	/**
	 * Sets the current variant ID. In case an invalid ID is passed, a standard variant is set.
	 * @public
	 * @param {string} sVariantId ID of the variant
	 * @param {boolean} bDoNotApplyVariant If set to <code>true</code>, the <code>applyVariant</code> method is not executed yet. Relevant during
	 *        navigation, when called before the initialise event has been executed
	 */
	SmartVariantManagementUi2.prototype.setCurrentVariantId = function(sVariantId, bDoNotApplyVariant) {
		var oContent;

		var sId = sVariantId;
		if (!sId) {
			sId = this.STANDARDVARIANTKEY;
		} else {
			/* eslint-disable no-lonely-if */
			if (!this.getItemByKey(sId)) {
				sId = this.STANDARDVARIANTKEY;
			}
			/* eslint-enable no-lonely-if */
		}

		if (this._oVariantSet) {

			oContent = this.getVariantContent(this._oPersController, sId);
			if (oContent) {
				this._setSelectionByKey(sId); // set the current selected variant
				if (bDoNotApplyVariant !== true) {
					this._applyVariantContent(oContent);
				}
			}
		}
	};

	/**
	 * Registers all controls interested and relying on variant handling. Each control has to be registered separately.
	 * @public
	 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo control providing the required aggregation for flex-layer
	 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} the current instance
	 */
	SmartVariantManagementUi2.prototype.addPersonalizableControl = function(oCurrentControlInfo) {
		this.setAggregation("personalizableControl", oCurrentControlInfo, true);

		if (oCurrentControlInfo.getControl()) {
			this._oPersController = sap.ui.getCore().byId(oCurrentControlInfo.getControl());
		}

		this._sKeyName = oCurrentControlInfo.getKeyName();
		return this;
	};

	/**
	 * Initializes the UI2 personalization layer by retrieving the list of variants. Once the initialization has been completed, the control for
	 * personalization is informed via the initialise event.
	 * @public
	 */
	SmartVariantManagementUi2.prototype.initialise = function() {

		var sContainerKey = this._getPersistencyKey();

		if (!sContainerKey) {
			jQuery.sap.log.warning("PersistencyKey not set");
			this.fireEvent("initialise");

			return;
		}

		if (sap.ushell && sap.ushell.Container) {

			var that = this;
			sap.ushell.Container.getService("Personalization").getContainer(sContainerKey, {
				validity: Infinity
			}).fail(function() {
				jQuery.sap.log.error("Loading personalization container failed");
				that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"));

				that.fireEvent("initialise");
			}).done(function(oContainer) {
				that._readPersonalization(oContainer);
				that.fireEvent("initialise");

				that._setStandardVariant();

				that._setSelectedVariant();
			});

			return;
		}

		jQuery.sap.log.error("Could not obtain the personalization container");
		this._setErrorValueState(this.oResourceBundle.getText("VARIANT_MANAGEMENT_READ_FAILED"));

		this.fireEvent("initialise");
	};

	/**
	 * Obtains from the variant management the current selected entry ands applies the corresponding variant. In case nothing was selected variant
	 * management returns null -> no variant will be applied
	 * @private
	 */
	SmartVariantManagementUi2.prototype._setSelectedVariant = function() {
		var oVariant = null;

		if (this._oVariantSet) { // in case a variant is currently selected, re-apply this variant
			var sKey = this.getSelectionKey();
			if (sKey) {
				oVariant = this._oVariantSet.getVariant(sKey);

				if (oVariant) {
					this._applyVariant(oVariant);
				}
			}
		}
	};

	/**
	 * Create the variant items.
	 * @private
	 */
	SmartVariantManagementUi2.prototype._reCreateVariantEntries = function() {

		var n = null;
		var sVariantKey = null;
		var oVariant, oVariantItem;

		this.removeAllItems();

		if (this._oVariantSet) {
			var mVariantList = this._oVariantSet.getVariantNamesAndKeys();
			if (mVariantList) {
				for (n in mVariantList) {
					if (n) {

						oVariantItem = new VariantItem({
							text: n,
							key: mVariantList[n]
						});
						this.addVariantItem(oVariantItem);
					}
				}

				sVariantKey = this._oVariantSet.getCurrentVariantKey();
				oVariant = this._oVariantSet.getVariant(sVariantKey);
				if (oVariant) {
					this.setDefaultVariantKey(sVariantKey); // set the default variant
					this.setInitialSelectionKey(sVariantKey); // set the current selected variant
				}
			}
		}
	};

	/**
	 * Reads the variant adapter.
	 * @private
	 * @returns {object} the variant set adapter
	 */
	SmartVariantManagementUi2.prototype._getVariantSetAdapter = function() {

		var oVariantSetAdapter = null;

		if (this._oContainer) {
			// jQuery.sap.require("sap.ushell.services.Personalization.VariantSetAdapter");
			oVariantSetAdapter = new sap.ushell.services.Personalization.VariantSetAdapter(this._oContainer);
		}

		return oVariantSetAdapter;
	};

	/**
	 * Reads the variant container and create the variant items.
	 * @private
	 */
	SmartVariantManagementUi2.prototype._createVariantEntries = function() {

		var oVariantSetAdapter = this._getVariantSetAdapter();
		if (oVariantSetAdapter) {
			this._oVariantSet = oVariantSetAdapter.getVariantSet("filterBarVariantSet");
			if (this._oVariantSet) {
				this._reCreateVariantEntries();
			} else {
				this._oVariantSet = oVariantSetAdapter.addVariantSet("filterBarVariantSet");
			}
		}

	};

	/**
	 * Reads the personalization.
	 * @private
	 * @param {object} oContainer personalization conmteiner
	 */
	SmartVariantManagementUi2.prototype._readPersonalization = function(oContainer) {

		this._oContainer = oContainer;

		if (this._oContainer) {
			this._createVariantEntries();
		}
	};

	/**
	 * Handling the save of the personalization container.
	 * @private
	 */
	SmartVariantManagementUi2.prototype._savePersonalizationContainer = function() {

		var that = this;

		if (this._oContainer) {

			this._oContainer.save() // save the whole container!
			.fail(function() {
				jQuery.sap.log.error("Saving personalization data failed");
				that._setErrorValueState(that.oResourceBundle.getText("VARIANT_MANAGEMENT_SAVE_FAILED"));

			}).done(function() {
				// Before the next save is triggered the last one has to be finished.
				// Could be done by disabling the save button during the save.
				jQuery.sap.log.info("Saving personalization data succeeded");
				that.fireEvent("afterSave");
			});
		}
	};

	/**
	 * Eventhandler for the <code>SmartVariantManagementUi2</code> save event.
	 * @private
	 * @param {object} oVariantInfo Describes the variant to be saved
	 */
	SmartVariantManagementUi2.prototype.fireSave = function(oVariantInfo) {

		var oVariant = null, oNewVariant = null;
		var sVariantKey;

		if (!this._oVariantSet) {
			return;
		}

		if (oVariantInfo) {

			if (oVariantInfo.overwrite) {
				if (oVariantInfo.key) {
					oVariant = this._oVariantSet.getVariant(oVariantInfo.key);
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (oVariantInfo.name) {
					oVariant = this._oVariantSet.addVariant(oVariantInfo.name);
					oNewVariant = oVariant; // indicates that we have to adapt the variant management key

					sVariantKey = oNewVariant.getVariantKey();
					this.replaceKey(oVariantInfo.key, sVariantKey);

					this.setInitialSelectionKey(sVariantKey);
				}
				/* eslint-enable no-lonely-if */
			}

			if (oVariant) {

				this.fireEvent("save", oVariantInfo);
				var oVariantContent = this._fetchVariant();
				if (oVariantContent) {

					oVariant.setItemValue("filterBarVariant", oVariantContent.filterBarVariant);
					oVariant.setItemValue("filterbar", oVariantContent.filterbar);
					oVariant.setItemValue("basicSearch", "");
					if (oVariantContent.basicSearch) {
						oVariant.setItemValue("basicSearch", oVariantContent.basicSearch);
					}

					sVariantKey = oVariant.getVariantKey();
					if (oVariantInfo.def) {
						if (sVariantKey) {
							this._oVariantSet.setCurrentVariantKey(sVariantKey);
						}
					} else {
						var sDefaultVariantKey = this._oVariantSet.getCurrentVariantKey();
						if (sVariantKey === sDefaultVariantKey) {
							this._oVariantSet.setCurrentVariantKey(null);
						}
					}
				}

				this._savePersonalizationContainer();
				// if (oNewVariant) {
				// sVariantKey = oNewVariant.getVariantKey();
				// this.replaceKey(oVariantInfo.key, sVariantKey);
				//
				// this.setInitialSelectionKey(sVariantKey);
				// }
			}
		}

	};

	/**
	 * Stores the STANDARD variant.
	 * @private
	 */
	SmartVariantManagementUi2.prototype._setStandardVariant = function() {

		if (this._oPersController && this._oPersController.fireBeforeVariantSave) {
			this._oPersController.fireBeforeVariantSave(VariantManagement.STANDARD_NAME);
		}

		this._oStandardVariant = this._fetchVariant();
	};

	/**
	 * returns a previously stored representation of the standard variant. Only relevant for the UI2 personalization-service
	 * @private
	 * @returns {object} json compatible object representing the standard variant
	 */
	SmartVariantManagementUi2.prototype._getStandardVariant = function() {
		return this._oStandardVariant;
	};
	SmartVariantManagementUi2.prototype.getStandardVariant = function() {
		return this._getStandardVariant();
	};
	/**
	 * Workaround for missing Variant feature 'setVariantName' with U2 < 1.24.0.
	 * @private
	 * @param {object} oVariant the original variant
	 * @param {string} sVariantKey the key of the original variant
	 * @param {string} sNewName the new name of the original variant
	 */
	SmartVariantManagementUi2.prototype._setVariantName = function(oVariant, sVariantKey, sNewName) {

		var sKey;
		var aFieldsAndValues, aFields;

		if (this._oVariantSet) {
			var oNewVariant = this._oVariantSet.addVariant(sNewName);

			aFieldsAndValues = oVariant.getItemValue("filterBarVariant");
			oNewVariant.setItemValue("filterBarVariant", aFieldsAndValues);

			aFields = oVariant.getItemValue("filterbar");
			oNewVariant.setItemValue("filterbar", aFields);

			sKey = this._oVariantSet.getCurrentVariantKey();
			if (sKey === sVariantKey) {
				this._oVariantSet.setCurrentVariantKey(oNewVariant.getVariantKey());
			}
			this._oVariantSet.delVariant(sVariantKey);

			sKey = oNewVariant.getVariantKey();
			this.replaceKey(sVariantKey, sKey);

			this.setInitialSelectionKey(sKey);

		}

	};

	/**
	 * Eventhandler for the <code>SmartVariantManagementUi2</code> manage event.
	 * @private
	 * @param {object} oVariantInfo Describes the variants, which will be deleted/renamed
	 */
	SmartVariantManagementUi2.prototype.fireManage = function(oVariantInfo) {

		var i;
		var renamed = null, deleted = null;
		var oVariant;

		if (!this._oVariantSet) {
			return;
		}

		if (oVariantInfo) {
			renamed = oVariantInfo.renamed;
			deleted = oVariantInfo.deleted;

			if (renamed) {
				for (i = 0; i < renamed.length; i++) {
					oVariant = this._oVariantSet.getVariant(renamed[i].key);
					if (oVariant) {
						if (oVariant.setVariantName) { // available with 1.24.0
							oVariant.setVariantName(renamed[i].name);
						} else {
							this._setVariantName(oVariant, renamed[i].key, renamed[i].name); // workaround for missing variant feature
							// 'setVariantName'
						}
					}
				}
			}

			if (deleted) {
				var sVariantKey = this._oVariantSet.getCurrentVariantKey();
				for (i = 0; i < deleted.length; i++) {
					oVariant = this._oVariantSet.getVariant(deleted[i]);
					if (oVariant) {
						if (sVariantKey && sVariantKey === oVariant.getVariantKey()) {
							this._oVariantSet.setCurrentVariantKey(null);
						}

						this._oVariantSet.delVariant(deleted[i]);
					}
				}
			}

			if (oVariantInfo.def) {
				oVariant = this._oVariantSet.getVariant(oVariantInfo.def);
				if (oVariant || (oVariantInfo.def === this.STANDARDVARIANTKEY)) {
					this._oVariantSet.setCurrentVariantKey(oVariantInfo.def);
				}
			}

			if ((deleted && deleted.length > 0) || (renamed && renamed.length > 0) || (oVariantInfo.def)) {
				this._savePersonalizationContainer();
			}
		}

	};

	/**
	 * Eventhandler for the <code>SmartVariantManagementUi2</code> select event.
	 * @private
	 * @param {object} oVariantInfo Describes the selected variant
	 */
	SmartVariantManagementUi2.prototype.fireSelect = function(oVariantInfo) {

		var oVariant = null;

		if (oVariantInfo && oVariantInfo.key) {

			if (this._oVariantSet) {

				if (oVariantInfo.key === this.STANDARDVARIANTKEY) {
					oVariant = this._getStandardVariant();
				} else {
					oVariant = this._oVariantSet.getVariant(oVariantInfo.key);
				}
			}
		}

		if (oVariant) {
			this._applyVariant(oVariant);
		}
	};

	/**
	 * Retrieves variant content.
	 * @private
	 * @param {object} oVariant json object representing the variant data
	 * @returns {object} the variant content
	 */
	SmartVariantManagementUi2.prototype._getContent = function(oVariant) {
		var oContent = null;

		if (oVariant) {
			if (oVariant.getItemValue) {
				oContent = {
					filterbar: oVariant.getItemValue("filterbar"),
					filterBarVariant: oVariant.getItemValue("filterBarVariant")
				};

				var sBasicSearch = oVariant.getItemValue("basicSearch");
				if (sBasicSearch) {
					oContent.basicSearch = sBasicSearch;
				}
			} else {
				oContent = oVariant; // STANDARD variant
			}
		}

		return oContent;

	};

	/**
	 * Apply a variant.
	 * @private
	 * @param {object} oVariant json object representing the variant data
	 */
	SmartVariantManagementUi2.prototype._applyVariant = function(oVariant) {

		var oContent = this._getContent(oVariant);

		this._applyVariantContent(oContent);
	};

	/**
	 * Apply a variant.
	 * @private
	 * @param {object} oContent json object representing the variant data
	 */
	SmartVariantManagementUi2.prototype._applyVariantContent = function(oContent) {

		if (oContent && this._oPersController && this._oPersController.applyVariant) {
			this._oPersController.applyVariant(oContent);
		}
	};

	/**
	 * Fetch a variant.
	 * @private
	 * @returns {object} json object representing the content of a variant
	 */
	SmartVariantManagementUi2.prototype._fetchVariant = function() {

		if (this._oPersController && this._oPersController.fetchVariant) {
			return this._oPersController.fetchVariant();
		}

		return null;
	};

	/**
	 * Retrieves the persistency key.
	 * @private
	 * @returns {string} persistency key value
	 */
	SmartVariantManagementUi2.prototype._getPersistencyKey = function() {

		if (this._oPersController && this._sKeyName) {
			return this._oPersController.getProperty(this._sKeyName);
		}

		return null;
	};

	/**
	 * Sets an error state on the variant management control.
	 * @private
	 * @param {string} sText describing the error reason
	 */
	SmartVariantManagementUi2.prototype._setErrorValueState = function(sText) {
		this.setEnabled(false);
	};

	SmartVariantManagementUi2.prototype.exit = function() {
		VariantManagement.prototype.exit.apply(this, arguments);

		this._oStandardVariant = null;
		this._oPersController = null;
		this._sKeyName = null;

		this._oContainer = null;
		this._oVariantSet = null;
	};

	return SmartVariantManagementUi2;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartvariants/SmartVariantManagementUi2.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterBar') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.filterbar.FilterBar.
jQuery.sap.declare('sap.ui.comp.filterbar.FilterBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.Bar'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.LabelDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListSeparators'); // unlisted dependency retained
jQuery.sap.require('sap.m.Panel'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.Form'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.ResponsiveGridLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/filterbar/FilterBar",[
	'jquery.sap.global', 'sap/m/MultiInput', 'sap/m/Bar', 'sap/m/Button', 'sap/m/ButtonType', 'sap/m/CheckBox', 'sap/m/Label', 'sap/m/LabelDesign', 'sap/m/Link', 'sap/m/List', 'sap/m/ListSeparators', 'sap/m/Panel', 'sap/m/PlacementType', 'sap/m/SearchField', 'sap/m/Text', 'sap/m/Toolbar', 'sap/m/ToolbarSpacer', 'sap/ui/Device', 'sap/ui/comp/state/UIState', './VariantConverterFrom', './VariantConverterTo', 'sap/ui/comp/library', 'sap/ui/comp/smartvariants/PersonalizableInfo', 'sap/ui/comp/smartvariants/SmartVariantManagementUi2', 'sap/ui/comp/variants/VariantManagement', 'sap/ui/core/Icon', 'sap/ui/core/TextAlign', 'sap/ui/core/Title', 'sap/ui/core/ValueState', 'sap/ui/layout/Grid', 'sap/ui/layout/GridRenderer', 'sap/ui/layout/GridData', 'sap/ui/layout/HorizontalLayout', 'sap/ui/layout/ResponsiveFlowLayout', 'sap/ui/layout/ResponsiveFlowLayoutData', 'sap/ui/layout/VerticalLayout', 'sap/ui/layout/form/Form', 'sap/ui/layout/form/FormContainer', 'sap/ui/layout/form/FormElement', 'sap/ui/layout/form/ResponsiveGridLayout', 'sap/ui/layout/form/FormRenderer', 'sap/ui/comp/util/IdentifierUtil'
], function(jQuery, MultiInput, Bar, Button, ButtonType, CheckBox, Label, LabelDesign, Link, List, ListSeparators, Panel, PlacementType, SearchField, Text, Toolbar, ToolbarSpacer, Device, UIState, VariantConverterFrom, VariantConverterTo, library, PersonalizableInfo, SmartVariantManagementUi2, VariantManagement, Icon, TextAlign, Title, ValueState, Grid, GridRenderer, GridData, HorizontalLayout, ResponsiveFlowLayout, ResponsiveFlowLayoutData, VerticalLayout, Form, FormContainer, FormElement, ResponsiveGridLayout, FormRenderer, IdentifierUtil) {
	"use strict";

	/**
	 * Constructor for a new FilterBar.
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The control displays filters in a user-friendly manner to populate values for a query. The FilterBar consists of a row containing the
	 *        {@link sap.ui.comp.variants.VariantManagement VariantManagement} control, the related buttons, and an area underneath displaying the
	 *        filters. The filters are arranged in a logical row that is divided depending on the space available and the width of the filters. The
	 *        area containing the filters can be hidden or shown using the Hide FilterBar / Show FilterBar button. The Go button triggers the search
	 *        event, and the Filters button shows the filter dialog.<br>
	 *        In this dialog, the consumer has full control over the FilterBar. The filters in this dialog are displayed in one column and organized
	 *        in groups. The filter items of the <code>filterItems</code> aggregation are grouped in the Basic group . Each filter can be marked as
	 *        visible in the FilterBar by selecting Add to FilterBar. In addition, the items in the <code>filterGroupItems</code> aggregation can be
	 *        marked as part of the current variant. The FilterBar also supports a different UI layout when used inside a value help dialog. In this
	 *        case the FilterBar consists of two logical areas, one containing the general search button and one the Advanced Search area. The
	 *        Advanced Search is a collapsible area displaying the advanced filters in two columns.
	 * @extends sap.ui.layout.Grid
	 * @author SAP
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.filterbar.FilterBar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) design-time meta model
	 */
	var FilterBar = Grid.extend("sap.ui.comp.filterbar.FilterBar", /** @lends sap.ui.comp.filterbar.FilterBar.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			designTime: true,
			properties: {

				/**
				 * Key used to access personalization data. Only if the persistencyKey is provided, will the <code>VariantManagement</code> control
				 * be used.
				 */
				persistencyKey: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * The advanced mode is only relevant for the value help scenario. UI representation is different from the standard FilterBar.
				 */
				advancedMode: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Collapses/expands the advanced area.
				 * @deprecated Since version 1.30.0. Replaced by property <code>filterBarExpanded</code> This property is mapped to the
				 *             filterBarExpanded property.
				 */
				expandAdvancedArea: {
					type: "boolean",
					group: "Misc",
					defaultValue: false,
					deprecated: true
				},

				/**
				 * Enables/disables the Search button.
				 * @deprecated Since version 1.32.0.
				 */
				searchEnabled: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Shows/hides the filter row.
				 * @since 1.26.1
				 */
				filterBarExpanded: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If this property is set, then the label for filters will be prefixed with the group title.
				 * @since 1.28.0
				 */
				considerGroupTitle: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Handles visibility of the Clear button on the Filters dialog.
				 * @since 1.26.1
				 */
				showClearButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Handles visibility of the Restore button on the Filters dialog.
				 * @since 1.26.1
				 */
				showRestoreButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Handles visibility of the Go button on the FilterBar.
				 * @since 1.28.0
				 */
				showGoOnFB: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Handles visibility of the Restore button on the FilterBar.
				 * @since 1.28.0
				 */
				showRestoreOnFB: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Handles visibility of the Clear button on the FilterBar.
				 * @since 1.28.0
				 */
				showClearOnFB: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Handles visibility of the Go button on the FilterBar.
				 * @since 1.26.1
				 * @deprecated Since version 1.28.0. Replaced by property <code>showGoOnFB</code>
				 */
				showGoButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: null,
					deprecated: true
				},

				/**
				 * Stores the delta as compared to the standard variant.
				 * @since 1.34.0
				 */
				deltaVariantMode: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Sets the width of the filters container.
				 * @since 1.34.0
				 */
				filterContainerWidth: {
					type: "string",
					group: "Misc",
					defaultValue: "12rem"
				},

				/**
				 * Determines what design should be used. Default is the design with the toolbar. The design with the toolbar is always used on
				 * phones.
				 * @since 1.38.0
				 */
				useToolbar: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Specifies header text that is shown in the toolbar on the first position. This property is ignored, when <code>useToolbar</code>
				 * is set to <code>false</code>.
				 * @since 1.38.0
				 */
				header: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * Handles visibility of the Filters button on the FilterBar.
				 * @since 1.38.0
				 */
				showFilterConfiguration: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Determines the behavior when <code>reset</code> is executed. <br>
				 * <b>Note:</b> This property is only relevant if no variant management is used, and the filter bar is not used in the advanced mode.
				 * A snapshot shows the current state of the filter bar, just before the Filters dialog is opened.
				 * <ul>
				 * <li><code>undefined</code> (default) defines the standard behavior: snapshot will be applied after <code>reset</code> was
				 * triggered</li>
				 * <li><code>false</code> defines that the snapshot will not be applied</li>
				 * <li><code>true</code>is not considered at all</li>
				 * </ul>
				 * @since 1.44
				 */
				useSnapshot: {
					type: "boolean",
					group: "Misc"
				}
			},
			aggregations: {

				/**
				 * Filters belonging to the basic group.
				 * @deprecated Since version 1.48.0. Use aggregation <code>filterGroupItems</code> instead.
				 */
				filterItems: {
					type: "sap.ui.comp.filterbar.FilterItem",
					multiple: true,
					singularName: "filterItem"
				},

				/**
				 * Contains all FilterBar filters. <br>
				 * <code>Note:</code>In case a filter has to be added to the basic group
				 * <ul>
				 * <li>the property <code>groupName</code> has to be set to the constant
				 * <code>sap.ui.comp.filterbar.FilterBar.INTERNAL_GROUP</code></li>
				 * <li>the property <code>groupLabel</code> will be handled internally and will be ignored, if set</li>
				 * <li>the property <code>partOfCurrentVariant</code> has to be set to <code>true</code></li>
				 * <li>if the property <code>visibleInFilterBar</code> is set to <code>true</code>, the property
				 * <code>partOfCurrentVariant</code> will be set internally also to <code>true</code></li>
				 * </ul>
				 */
				filterGroupItems: {
					type: "sap.ui.comp.filterbar.FilterGroupItem",
					multiple: true,
					singularName: "filterGroupItem"
				},

				/**
				 * Special handling for analytic parameters.
				 */
				_parameters: {
					type: "sap.ui.comp.filterbar.FilterGroupItem",
					multiple: true,
					singularName: "_parameter",
					visibility: "hidden"
				}
			},
			associations: {

				/**
				 * Populates the basic search area on the FilterBar and the Filters dialog.
				 * @since 1.30.0
				 */
				basicSearch: {
					type: "sap.m.SearchField",
					multiple: false
				}
			},
			events: {

				/**
				 * This event is fired when the Cancel button on the Filters dialog is pressed and the variant is marked as dirty.
				 */
				cancel: {},

				/**
				 * This event is fired when the Restore button is pressed.
				 */
				reset: {
					parameters: {
						/**
						 * Visible controls
						 */
						selectionSet: {
							type: "sap.ui.core.Control[]"
						}
					}
				},

				/**
				 * This event is fired when the Go button is pressed.
				 */
				search: {
					parameters: {
						/**
						 * Visible controls
						 */
						selectionSet: {
							type: "sap.ui.core.Control[]"
						}
					}
				},

				/**
				 * This event is fired before a variant is saved. The event can be used to adapt the data of the custom filters, which will be saved
				 * as variant later.
				 * @deprecated Since version 1.48.2. Replaced by the event <code>beforeVariantFetch</code>
				 */
				beforeVariantSave: {
					parameters: {
						/**
						 * Context of the event. Can also be <code>null</code> or <code>undefined</code>
						 */
						context: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired before a variant is fetched.
				 * @since 1.28.13
				 */
				beforeVariantFetch: {},

				/**
				 * This event is fired after a variant has been loaded and applied to the FilterBar. The event can be used to adapt custom filters
				 * with data from the variant.
				 */
				afterVariantLoad: {
					parameters: {
						/**
						 * Context of the event. Can also be <code>null</code> or <code>undefined</code>
						 */
						context: {
							type: "string"
						},
						/**
						 * executeOnSelect indicates if the variant will trigger search
						 * @since 1.44.0
						 */
						executeOnSelect: {
							type: "boolean"
						}
					}
				},

				/**
				 * This event is fired when a filter or multiple filters has changed.
				 */
				filterChange: {
					/**
					 * This property is provided, whenever a filter is added via the add/remove filters dialog.
					 */
					added: {
						type: "sap.ui.core.Control"
					},
					/**
					 * This property is provided, whenever a filter is removed via the add/remove filters dialog.
					 */
					deleted: {
						type: "sap.ui.core.Control"
					},

					/**
					 * The filter item is only provided along with added or deleted properties.
					 */
					filterItem: {
						type: "sap.ui.comp.filterbar.FilterGroupItem"
					}
				},

				/**
				 * This event is fired when the Clear button is pressed. The consumer has to clear all filters.
				 */
				clear: {
					parameters: {
						/**
						 * Visible controls
						 */
						selectionSet: {
							type: "sap.ui.core.Control[]"
						}
					}
				},

				/**
				 * This event is fired when the FilterBar is initialized to indicate that the meta data are available.
				 */
				initialise: {},

				/**
				 * This event is fired after the FilterBar was initialized and the standard variant was obtained. Eventual navigation related actions
				 * should be triggered by this event.
				 * @since 1.38.0
				 */
				initialized: {},

				/**
				 * This event is fired after a variant has been saved.
				 */
				afterVariantSave: {},

				/**
				 * This event is fired after the filters dialog is closed.
				 * @since 1.34.0
				 */
				filtersDialogClosed: {
					parameters: {
						/**
						 * Context of the event. Can also be <code>null</code> or <code>undefined</code>
						 */
						context: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired after the filters dialog is opened.
				 * @since 1.48.0
				 */
				filtersDialogBeforeOpen: {},

				/**
				 * This event is fired when the Cancel button on the filters dialog is pressed.
				 * @since 1.48.0
				 */
				filtersDialogCancel: {},

				/**
				 * This event is fired when the Go button on the filters dialog is pressed.
				 * @since 1.48.0
				 */
				filtersDialogSearch: {},

				/**
				 * This event is fired when search field of the filter dialog is changed.
				 * @since 1.48.0
				 */
				filtersDialogSearchForFilters: {
					parameters: {

						/**
						 * Contains the entered search filed value
						 */
						newValue: {
							type: "string"
						}
					}

				},

				/**
				 * This event is fired when the filters information has changed. It indicates specifically that the count of assigned filters may be
				 * changed. One of the intended reaction to this event would be to call <code>retrieveFiltersWithValuesAsText</code> method.
				 * @since 1.38.0
				 */
				assignedFiltersChanged: {}
			}
		},

		renderer: GridRenderer.render
	});

	FilterBar.INTERNAL_GROUP = "__$INTERNAL$";

	/**
	 * Initializes the FilterBar control.
	 * @private
	 */
	FilterBar.prototype.init = function() {

		this._oBasicAreaLayout = null;
		this._oVariantManagement = null;
		this._oCollectiveSearch = null;

		this._aBasicAreaSelection = null;
		this._mAdvancedAreaFilter = null;

		this._fRegisteredFetchData = null;
		this._fRegisteredApplyData = null;
		this._fRegisterGetFiltersWithValues = null;
		this._oHideShowButton = null;
		this._oSearchButton = null;
		this._oFiltersButton = null;
		this._oClearButtonOnFB = null;
		this._oRestoreButtonOnFB = null;

		this._oDialog = null;
		this._oFilterDialog = null;

		this._bIsInitialized = false;

		this._aFields = null;

		this._oBasicSearchField = null;

		this._oVariant = {};

		this._filterChangeSemaphore = true;
		this._triggerFilterChangeState = true;

		this._fRegisteredFilterChangeHandlers = null;
		this._fInitialiseVariants = null;

		this._bHostedVariantManagement = false;

		this._bDoItOnce = false;
		this._oLabelTextWidth = 0;

		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

		this.setHSpacing(0);

		this.addStyleClass("sapUiCompFilterBar");
		if (this._isPhone()) {
			this.addStyleClass("sapUiCompFilterBarPhone");
		} else {
			this.addStyleClass("sapUiCompFilterBarNonPhone");
		}

		this.addStyleClass("sapUiCompFilterBarMarginBottom");
		this.addStyleClass("sapUiCompFilterBarPaddingPanel");
		this.addStyleClass("sapContrastPlus");

		this._oToolbar = this._createToolbar();
		this._oToolbar.setLayoutData(new GridData({
			span: "L12 M12 S12"
		}));
		this.addContent(this._oToolbar);

		// Basic
		this._oBasicAreaLayout = this._createBasicAreaLayout();
		this._oBasicAreaLayout.setLayoutData(new GridData({
			span: "L12 M12 S12"
		}));
		this.addContent(this._oBasicAreaLayout);

		// Advanced
		this._oAdvancedPanel = new Panel();
		this._oAdvancedPanel.setLayoutData(new GridData({
			span: "L12 M12 S12"
		}));

		this._oAdvancedPanel.setVisible(false);
		this._oAdvancedAreaForm = this._createAdvancedAreaForm();
		this._oAdvancedPanel.addContent(this._oAdvancedAreaForm);

		this.addContent(this._oAdvancedPanel);

		// register event handler for resizing
		// jQuery(window).on("resize." + this.getId(), this._fHandleResize.bind(this));
		this._hResizeListener = sap.ui.core.ResizeHandler.register(this._oBasicAreaLayout, this._fHandleResize.bind(this));

		this.oModel = new sap.ui.model.json.JSONModel({});
		this.setModel(this.oModel, "FilterBar");

		this._oHintText = new Text({
			text: this._oRb.getText("FILTER_BAR_NO_FILTERS_ON_FB"),
			textAlign: TextAlign.Center
		});
		this._oHintText.setVisible(false);
		this._oHintText.addStyleClass("sapUiCompFilterBarHint");
		this._oBasicAreaLayout.addContent(this._oHintText);

		if (this._isTablet() || this._isPhone()) {
			this.setFilterBarExpanded(false);
		}

	};

	FilterBar.prototype._hasAnyVisibleFiltersOnFB = function() {

		var aItems = this._retrieveVisibleAdvancedItems();

		for (var i = 0; i < aItems.length; i++) {
			if (aItems[i].filterItem.getVisibleInFilterBar()) {
				return true;
			}
		}

		return false;
	};

	FilterBar.prototype._showHintText = function() {

		var i = 0;

		if (!this._oHintText) {
			return;
		}

		if (!this.getAdvancedMode() && !this._isPhone()) {

			var bFlag = !this._hasAnyVisibleFiltersOnFB();

			if (bFlag && this._mAdvancedAreaFilter) {
				i = this._oBasicAreaLayout.indexOfContent(this._oHintText);
				if (i < 0) {
					this._oBasicAreaLayout.insertContent(this._oHintText, 0);
				}
			}

			this._oHintText.setVisible(bFlag);

			if (i < 0) {
				this._oBasicAreaLayout.rerender();
			}
		}
	};

	FilterBar.prototype._hasRelevantFilters = function() {
		var i, n = null, oItem;

		if (!this._mAdvancedAreaFilter || (Object.keys(this._mAdvancedAreaFilter) < 1)) {
			return false;
		}

		if (this.getAdvancedMode()) {
			for (n in this._mAdvancedAreaFilter) {
				var oGroupElement = this._mAdvancedAreaFilter[n];
				if (oGroupElement && oGroupElement.items) {
					for (i = 0; i < oGroupElement.items.length; i++) {
						oItem = oGroupElement.items[i];
						if (oItem) {
							if (this._determineVisibility(oItem.filterItem)) {
								return true;
							}
						}
					}
				}
			}

			return false;
		}

		return true;
	};

	FilterBar.prototype._adaptButtonsEnablement = function() {

		var bFlag = false || !!this._mAdvancedAreaFilter;

		if (this._oHideShowButton) {
			this._oHideShowButton.setEnabled(bFlag);
			if (this.getAdvancedMode() && !this._isPhone()) {
				this._oHideShowButton.setVisible(this._hasRelevantFilters());
			}
		}
		this._oClearButtonOnFB.setEnabled(bFlag);
		this._oRestoreButtonOnFB.setEnabled(bFlag);
		this._oFiltersButton.setEnabled(bFlag);

		if (bFlag && this.getFilterBarExpanded() && !this._isPhone() && !this.getAdvancedMode()) {
			this._oBasicAreaLayout.setVisible(true);
		}
	};

	/**
	 * Returns the associated VariantManagement control. The returned VariantManagement instance should not be cached or manipulated in any ways. It
	 * should offer the application a convenient way to verify the dirty state and to check for page variant scenario. The method may return
	 * <code>null</code> or a disabled VariantManagement control.
	 * @public
	 * @since 1.44.0
	 * @returns {sap.ui.comp.variants.VariantManagement} the associated VariantManagement control.
	 */
	FilterBar.prototype.getVariantManagement = function() {
		return this._oVariantManagement;
	};

	FilterBar.prototype.setShowClearOnFB = function(bFlag) {

		if (!this._isPhone()) {
			this.setProperty("showClearOnFB", bFlag);
			this._oClearButtonOnFB.setVisible(bFlag);
		}

		return this;
	};

	FilterBar.prototype.setShowRestoreOnFB = function(bFlag) {

		if (!this._isPhone()) {
			this.setProperty("showRestoreOnFB", bFlag);
			this._oRestoreButtonOnFB.setVisible(bFlag);
		}

		return this;
	};

	FilterBar.prototype.setShowGoOnFB = function(bFlag) {

		this.setProperty("showGoOnFB", bFlag);

		this._calcVisibilityGoButton();

		return this;
	};

	/**
	 * Handles the visibility of the Go button on FilterBar.
	 * @private
	 */
	FilterBar.prototype._calcVisibilityGoButton = function() {

		var bFlag = this.getShowGoOnFB();
		if (bFlag && !this._isPhone() && this.isLiveMode && this.isLiveMode()) {
			bFlag = false;
		}

		this._oSearchButton.setVisible(bFlag);
	};

	FilterBar.prototype.setShowGoButton = function(bFlag) {

		this.setShowGoOnFB(bFlag);

		return this;
	};

	FilterBar.prototype.getShowGoButton = function() {

		return this.getShowGoOnFB();
	};

	/**
	 * Hides the Go button on FilterBar. Allows to hide the Go-button for dedicated scenarios, like liveMode.
	 * @protected
	 * @since 1.40.4
	 */
	FilterBar.prototype.hideGoButton = function() {
		this._oSearchButton.setVisible(false);
	};

	/**
	 * Restores the visibility of the Go button on FilterBar. The visibilty of the Go button will be set, according to the showGoOnFB property.
	 * @protected
	 * @since 1.40.4
	 */
	FilterBar.prototype.restoreGoButton = function() {
		this._oSearchButton.setVisible(this.getShowGoOnFB());
	};

	FilterBar.prototype.setShowFilterConfiguration = function(bFlag) {
		this.setProperty("showFilterConfiguration", bFlag);

		if (this._oFiltersButton && !this._isPhone()) {
			this._oFiltersButton.setVisible(bFlag);
		}

		return this;
	};

	/**
	 * Determines if the current variant is the standard variant
	 * @public
	 * @since 1.44.0
	 * @returns {boolean| undefined} indicates if the current variant is the standard variant. In case the variant management does not exists,
	 *          <code>undefined</code> is returned.
	 */
	FilterBar.prototype.isCurrentVariantStandard = function() {

		var sKey;
		if (this._oVariantManagement) {
			sKey = this._oVariantManagement.getCurrentVariantId();
			if (sKey === "") {
				return true;
			}
			return (sKey === this._oVariantManagement.getStandardVariantKey());
		}

		return undefined;
	};

	/**
	 * Sets the current variant ID.
	 * @public
	 * @since 1.28.0
	 * @param {string} sVariantId ID of the variant
	 * @param {boolean} bDoNotApplyVariant If set to <code>true</code>, the <code>applyVariant</code> method is not executed yet. Relevant during
	 *        navigation, when called before the initialise event has been executed.
	 */
	FilterBar.prototype.setCurrentVariantId = function(sVariantId, bDoNotApplyVariant) {

		if (this._oVariantManagement) {
			this._oVariantManagement.setCurrentVariantId(sVariantId, bDoNotApplyVariant);
		}
	};

	/**
	 * Retrieves the current variant ID.
	 * @public
	 * @since 1.28.0
	 * @returns {string} ID of the current variant
	 */
	FilterBar.prototype.getCurrentVariantId = function() {

		var sKey = "";

		if (this._oVariantManagement) {
			sKey = this._oVariantManagement.getCurrentVariantId();
		}

		return sKey;
	};

	/**
	 * Retrieves the current variant as selection variant for UI navigation
	 * @public
	 * @since 1.28.0
	 * @deprecated As of version 1.48, replaced by {@link sap.ui.comp.filterbar.FilterBar.html#getUiState}
	 * @param {boolean} bConsiderAllFilters also include empty/invisible fields filter data
	 * @returns {string} JSON string representing the selection variant for UI navigation; <code>null</code> otherwise
	 */
	FilterBar.prototype.getDataSuiteFormat = function(bConsiderAllFilters) {

		return this._getDataSuiteFormat(bConsiderAllFilters, null);
	};

	FilterBar.prototype._getDataSuiteFormat = function(bConsiderAllFilters, sVersion) {

		var sSuiteVariant = null;
		var sKey, sContent, aFiltersInfo;

		if (this._oVariantManagement) {
			sKey = this.getCurrentVariantId();

			if (this.getFilterDataAsString) {
				aFiltersInfo = this._determineVariantFiltersInfo(bConsiderAllFilters, true);

				sContent = this.getFilterDataAsString(bConsiderAllFilters);
				if (sContent) {
					var oConverter = new VariantConverterTo();
					sSuiteVariant = oConverter.convert(sKey, aFiltersInfo, sContent, this, sVersion);
				}
			}
		}

		return sSuiteVariant;
	};

	/**
	 * Determine the internal basic search field name.
	 * @protected
	 * @returns {string} name of the basic search field.
	 */
	FilterBar.prototype.getBasicSearchName = function() {

		var sBasicSearchFieldName = null;

		if (this._oBasicSearchField && this.getEntitySet) {
			sBasicSearchFieldName = "$" + this.getEntitySet() + ".basicSearch";
		}

		return sBasicSearchFieldName;
	};

	/**
	 * Determine the value of the basic search.
	 * @protected
	 * @returns {string} current value of the basic search field.
	 */
	FilterBar.prototype.getBasicSearchValue = function() {
		return this._getBasicSearchValue();
	};

	/**
	 * Retrieves the current UI state of the <code>FilterBar</code> control.<br>
	 * The current UI state represents the data suite format.
	 * @public
	 * @since 1.48
	 * @param {map} mProperties controls the API behavior
	 * @param {boolean} mProperties.allFilters include empty/invisible fields filter data. Default is <code>false</code>
	 * @returns {sap.ui.comp.state.UIState} object representing the ui-state. Currently only the SelectionVariant part is considered.
	 */
	FilterBar.prototype.getUiState = function(mProperties) {
		var sSelectionVariant, bConsiderAllFilters = false;

		if (mProperties) {
			bConsiderAllFilters = (mProperties.allFilters === true);
		}

		sSelectionVariant = this._getDataSuiteFormat(bConsiderAllFilters, "13.0");

		return new UIState({
			selectionVariant: JSON.parse(sSelectionVariant)
		});
	};

	/**
	 * Sets the current UI state of the <code>FilterBar</code> control.<br>
	 * The current UI state represents the data suite format.
	 * @public
	 * @since 1.48
	 * @param {sap.ui.comp.state.UIState} oUiState object representing the ui-state. Currently only the SelectionVariant part is considered.
	 * @param {map} mProperties controls the API behavior
	 * @param {boolean} mProperties.replace Replaces existing filter data
	 * @param {boolean} mProperties.strictMode defines the filter/parameter determination, based on the name.<BR>
	 *        <ul>
	 *        <li><code>true</code> determine filter based on name; in case no match is found, try to map to parameter (parameter has to start with
	 *        P_ prefix.</li>
	 *        <li><code>false</code> try to determine parameter based on name, P_ -prefix may be omitted; in case no match is found, try to map to
	 *        a filter.</li>
	 *        </ul>
	 */
	FilterBar.prototype.setUiState = function(oUiState, mProperties) {
		var sSelectionVariant, oSelectionVariant = null, bReplace = false, bStrictMode = true;

		if (mProperties) {
			bReplace = (mProperties.replace === true);
			bStrictMode = (mProperties.strictMode === true);
		}

		if (oUiState) {
			oSelectionVariant = oUiState.getSelectionVariant();
			if (oSelectionVariant) {
				sSelectionVariant = JSON.stringify(oSelectionVariant);
			}
		}

		this._setDataSuiteFormat(sSelectionVariant, bReplace, bStrictMode);
	};

	/**
	 * Sets the selection variant for UI navigation to FilterBar.
	 * @public
	 * @since 1.28.0
	 * @deprecated As of version 1.48, replaced by {@link sap.ui.comp.filterbar.FilterBar.html#setUiState}
	 * @param {string} sSuiteData Represents the selection variants for UI navigation
	 * @param {boolean} bReplace Replaces existing filter data
	 */
	FilterBar.prototype.setDataSuiteFormat = function(sSuiteData, bReplace) {

		this._setDataSuiteFormat(sSuiteData, bReplace, true);

	};

	FilterBar.prototype._setDataSuiteFormat = function(sSuiteData, bReplace, bStrictMode) {

		var oConverter, oContent;

		if (sSuiteData) {

			oConverter = new VariantConverterFrom();
			oContent = oConverter.convert(sSuiteData, this, bStrictMode);
			if (oContent) {

				if (oContent.variantId && this._oVariantManagement) {

					if (this._bIsInitialized) {
						if (this._oVariantManagement.isPageVariant()) {
							this._oVariantManagement._selectVariant(oContent.variantId, "DATA_SUITE");
						} else {
							this._setFilterVisibility(oContent.variantId);
						}
					}

					this._oVariantManagement.setInitialSelectionKey(oContent.variantId);
				}

				if (oContent.payload && (bReplace || (Object.keys(JSON.parse(oContent.payload)).length > 0)) && this.setFilterDataAsString) {
					this.setFilterDataAsString(oContent.payload, bReplace);
				}

				if (oContent.basicSearch && this._oBasicSearchField && this._oBasicSearchField.setValue) {
					this._oBasicSearchField.setValue("" || oContent.basicSearch);

					this._updateToolbarText();
				}

			}
		}
	};

	FilterBar.prototype._setFilterVisibility = function(sVariantId) {

		if (this._oVariantManagement.getSelectionKey() !== sVariantId) {
			this._oVariantManagement.setInitialSelectionKey(sVariantId);

			var oStandardVariant = this._getStandardVariant();
			if (oStandardVariant) {
				var oVariant = this._oVariantManagement.getVariantContent(this, sVariantId);
				if (oVariant && oVariant.filterbar) {
					if (oVariant.version === "V2") {
						oVariant = this.mergeVariant(oStandardVariant, oVariant);
					}

					this._reapplyVisibility(oVariant.filterbar);
				}
			}
		}
	};

	FilterBar.prototype.applySettings = function(mSettings) {

		if (this._possibleToChangeVariantManagement()) {
			if (mSettings && mSettings.customData) {
				for (var i = 0; i < mSettings.customData.length; i++) {
					var oCustomData = mSettings.customData[i];
					if (oCustomData && oCustomData.mProperties && oCustomData.mProperties.key === "pageVariantPersistencyKey") {
						this._oVariantManagement.setPersistencyKey(oCustomData.mProperties.value);
						this._oVariantManagement.setVisible(true);
						this._bHostedVariantManagement = true;
					}
				}
			}
		}

		if (mSettings && mSettings.persistencyKey) {
			this._bHostedVariantManagement = true;
		}

		this._applyLayoutDataToToolbarButtons();

		Grid.prototype.applySettings.apply(this, arguments);
	};

	FilterBar.prototype._applyLayoutDataToToolbarButtons = function(sPersistenceKey) {
		jQuery.sap.require("sap.m.ToolbarLayoutData");

		if (this._isPhone() || this._isTablet() || this.getAdvancedMode() || !this.getUseToolbar()) {
			return;
		}

		this._oHideShowButton.setLayoutData(new sap.m.ToolbarLayoutData({
			shrinkable: true
		}));

		this._oClearButtonOnFB.setLayoutData(new sap.m.ToolbarLayoutData({
			shrinkable: true
		}));

		this._oRestoreButtonOnFB.setLayoutData(new sap.m.ToolbarLayoutData({
			shrinkable: true
		}));

		this._oFiltersButton.setLayoutData(new sap.m.ToolbarLayoutData({
			shrinkable: true
		}));

		this._oSearchButton.setLayoutData(new sap.m.ToolbarLayoutData({
			shrinkable: false
		}));

	};

	FilterBar.prototype.setPersistencyKey = function(sPersistenceKey) {

		this.setProperty("persistencyKey", sPersistenceKey);

		if (this._possibleToChangeVariantManagement()) {
			this._oVariantManagement.setVisible(true);
		}

		return this;

	};

	FilterBar.prototype._possibleToChangeVariantManagement = function() {
		if (this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
			return true;
		}

		return false;
	};

	/**
	 * Resets the current selection in the variant management control to standard.
	 * @public
	 */
	FilterBar.prototype.clearVariantSelection = function() {

		if (this._oVariantManagement) {
			this._oVariantManagement.clearVariantSelection();
		}
	};

	FilterBar.prototype.setSearchEnabled = function(bValue) {

		this.setProperty("searchEnabled", bValue);

		if (this._oSearchButton) {
			this._oSearchButton.setEnabled(bValue);
		}

		return this;
	};

	/**
	 * Sets the type of the Search to Emphasize.
	 * @private
	 * @param {boolean} bSetEmphasize Sets the type to Emphasize or Default
	 * @deprecated Since 1.30.0
	 */
	FilterBar.prototype.setSearchButtonEmphType = function(bSetEmphasize) {

	};

	/**
	 * Sets the simplified mode.
	 * @param {boolean} bFlag Sets the simplified mode
	 * @private
	 * @deprecated Since 1.30.0
	 */
	FilterBar.prototype.setSimplifiedMode = function(bFlag) {

		// the simplified mode is with beginning of 1.25 always implicitly used.
		// The former setter-method method stays in place, so that the former usages do not have to be adapted.
	};

	/**
	 * Retrieves the simplified mode.
	 * @returns {boolean} Indicates if the current advanced mode is set
	 * @private
	 * @deprecated Since 1.30.0
	 */
	FilterBar.prototype.getSimplifiedMode = function() {

		if (this.getAdvancedMode()) {
			return false;
		}

		return true;
	};

	/**
	 * Sets the advanced area to collapsed or expanded mode.
	 * @private
	 * @param {boolean} bFlag Sets the advanced area to expanded/collapsed
	 * @deprecated Since 1.30.0
	 */
	FilterBar.prototype.setExpandAdvancedArea = function(bFlag) {

		this.setFilterBarExpanded(bFlag);
	};

	/**
	 * Determines if the advanced area is displayed collapsed or expanded.
	 * @private
	 * @returns {boolean} The state of the advanced area
	 * @deprecated Since 1.30.0
	 */
	FilterBar.prototype.getExpandAdvancedArea = function() {

		return this.getFilterBarExpanded();
	};

	FilterBar.prototype.setAdvancedMode = function(bFlag) {

		this.setProperty("advancedMode", bFlag);

		this.toggleStyleClass("sapContrastPlus", !bFlag);

		if (bFlag) {
			if (this._possibleToChangeVariantManagement()) {
				this._oVariantManagement.setVisible(false);
			}

			if (this._oToolbar) {
				this._oToolbar.addStyleClass("sapUiCompFilterBarToolbarBasicSearchNoVariant");

				if (this._oBasicSearchField) {
					if (this._oToolbar.indexOfContent(this._oBasicSearchField) < 0) {
						this._oToolbar.insertContent(this._oBasicSearchField, 1);
					}
				}
			}

		} else {
			/* eslint-disable no-lonely-if */
			if (this.getPersistencyKey() && this._possibleToChangeVariantManagement()) {
				if (this._oVariantManagement) {
					this._oVariantManagement.setVisible(true);
				}
				if (this._oToolbar) {
					this._oToolbar.removeStyleClass("sapUiCompFilterBarToolbarBasicSearchNoVariant");
				}
			}
			/* eslint-enable no-lonely-if */
		}

		this._oFiltersButton.setVisible(!bFlag);

		if (this._oHideShowButton) {
			this._oHideShowButton.setVisible((bFlag && this._isPhone()) ? false : true);
		}

		this._oBasicAreaLayout.setVisible(!bFlag && this.getFilterBarExpanded());
		this._oAdvancedPanel.setVisible(bFlag && this.getFilterBarExpanded());

		this._adaptButtonsEnablement();

		return this;
	};

	FilterBar.prototype.setUseToolbar = function(bValue) {

		this.setProperty("useToolbar", bValue);

		if (!bValue) {
			this._adaptNewFilterBarDesign();
		} else {
			this._recreateToolbar();
		}

		return this;
	};

	FilterBar.prototype._recreateToolbar = function() {

		if (!this._oToolbar) {

			this._bButtonaAdded = false;

			if (this._oButtonsVLayout) {
				this._oBasicAreaLayout.removeContent(this._oButtonsVLayout);
				this._oButtonsVLayout.destroy();
				this._oButtonsVLayout = null;
			}

			this._oToolbar = this._createToolbar(true);
			this._oToolbar.setLayoutData(new GridData({
				span: "L12 M12 S12"
			}));
			this.insertContent(this._oToolbar, 0);

			if (this._oVariantManagement) {

				if (this._oVariantManagement instanceof SmartVariantManagementUi2 || ((this._oVariantManagement.getId() === (this.getId() + "-variant")))) {
					this._oToolbar.insertContent(this._oVariantManagement, 0);
				}
			}

			this._adaptButtonsEnablement();

			if (this._oBasicSearchFieldContainer) {
				this._oBasicAreaLayout.removeContent(this._oBasicSearchFieldContainer);

				this._cleanBasicSearchContainer();

				this.setBasicSearch(this._oBasicSearchField);
			}

			this._oHintText = new Text({
				text: this._oRb.getText("FILTER_BAR_NO_FILTERS_ON_FB"),
				textAlign: TextAlign.Center
			});
			this._oHintText.setVisible(false);
			this._oHintText.addStyleClass("sapUiCompFilterBarHint");
			this._oBasicAreaLayout.addContent(this._oHintText);

			this._updateToolbarText();
		}
	};

	FilterBar.prototype._cleanBasicSearchContainer = function() {
		if (this._oBasicSearchFieldContainer) {

			var aContent = this._oBasicSearchFieldContainer.removeAllContent();
			if (aContent) {
				for (var i = 0; i < aContent.length; i++) {
					if (aContent[i] !== this._oBasicSearchField) {
						aContent[i].destroy();
					}
				}
			}
			this._oBasicSearchFieldContainer.destroy();
			this._oBasicSearchFieldContainer = null;
		}
	};

	FilterBar.prototype.setHeader = function(sValue) {

		this.setProperty("header", sValue);

		if (this.getUseToolbar()) {
			this._addHeaderToToolbar(sValue);
		}

		return this;
	};

	FilterBar.prototype._addHeaderToToolbar = function(sValue) {

		if (this._oToolbar) {

			if (this._oVariantManagement && (this._oVariantManagement.getVisible() || this._bHostedVariantManagement) && (this._oToolbar.indexOfContent(this._oVariantManagement) > -1)) {
				if (!this._oSeparator) {
					jQuery.sap.require("sap.m.ToolbarSeparator");
					this._oSeparator = new sap.m.ToolbarSeparator();
					this._oToolbar.setHeight("3rem");
				}

				this._oToolbar.removeContent(this._oSeparator);
				this._oToolbar.insertContent(this._oSeparator, 0);
			}

			if (!this._oText) {
				this._oText = new Text();
				this._oText.addStyleClass("sapMH4Style");
				this._oText.addStyleClass("sapUiCompSmartChartHeader");
			}

			this._oText.setText(sValue);
			this._oToolbar.removeContent(this._oText);
			this._oToolbar.insertContent(this._oText, 0);
		}
	};

	FilterBar.prototype._isNewFilterBarDesign = function() {
		if (this.getAdvancedMode() /* || this._isPhone() */) {
			return false;
		}

		if (!this.getUseToolbar()) {
			return true;
		}

		return false;

	};

	FilterBar.prototype._adaptNewFilterBarDesign = function() {
		if (this._isNewFilterBarDesign()) {

			this.setFilterBarExpanded(true);
			this._oBasicAreaLayout.setVisible(true);

			if (this.getUseToolbar()) {
				var aContent = this._oToolbar.getContent();
				for (var i = aContent.length - 1; i > 0; i--) {
					this._oToolbar.removeContent(aContent[i]);
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (this._oToolbar) {
					this.removeContent(this._oToolbar);
					this._oToolbar.removeAllContent();
					this._oToolbar.destroy();
					this._oToolbar = null;
				}
				/* eslint-enable no-lonely-if */
			}

			if (this._oHintText) {
				this._oBasicAreaLayout.removeContent(this._oHintText);
				this._oHintText.destroy();
				this._oHintText = null;
			}

			if (this._oHideShowButton) {
				this._oHideShowButton.destroy();
				this._oHideShowButton = null;
			}

			if (!this._bButtonaAdded) {
				this._bButtonaAdded = true;
				this._addButtonsToBasicArea();
			}

			if (this._oBasicSearchField) {
				this.setBasicSearch(this._oBasicSearchField);
			}

		}
	};

	FilterBar.prototype._addButtonsToBasicArea = function() {

		var oVLayout = new VerticalLayout();

		if (sap.ui.getCore().getConfiguration().getRTL()) {
			oVLayout.addStyleClass("sapUiCompFilterBarFloatLeft");
		} else {
			oVLayout.addStyleClass("sapUiCompFilterBarFloatRight");
		}

		var oHLayout = new HorizontalLayout();
		oHLayout.setLayoutData(new ResponsiveFlowLayoutData({
			margin: true
		}));
		oVLayout.addContent(new Text());
		oVLayout.addContent(oHLayout);

		oHLayout.addContent(this._oClearButtonOnFB);
		this._oClearButtonOnFB.addStyleClass("sapUiCompFilterBarPaddingRightBtn");

		oHLayout.addContent(this._oRestoreButtonOnFB);
		this._oRestoreButtonOnFB.addStyleClass("sapUiCompFilterBarPaddingRightBtn");

		oHLayout.addContent(this._oFiltersButton);
		this._oFiltersButton.addStyleClass("sapUiCompFilterBarPaddingRightBtn");

		oHLayout.addContent(this._oSearchButton);

		this._updateToolbarText();

		oVLayout.addStyleClass("sapUiCompFilterBarPaddingRight");

		if (this._isPhone()) {
			oVLayout.addStyleClass("sapUiCompFilterBarRemoveMinWidth");
			this._oBasicAreaLayout.insertContent(oVLayout, 0);
		} else {
			oVLayout.addStyleClass("sapUiCompFilterBarPaddingTop");
			this._oBasicAreaLayout.addContent(oVLayout);
		}

		this._oButtonsVLayout = oVLayout;

	};

	FilterBar.prototype._addBasicSearchToBasicArea = function(oBasicSearchField) {

		var nWidth = null;
		if (this._oBasicSearchFieldContainer) {
			if (this._oBasicSearchFieldContainer.$()) {
				nWidth = this._oBasicSearchFieldContainer.$().width();
			}
			if (!nWidth) {
				nWidth = this._oBasicSearchFieldContainer.getWidth();
			}

			this._cleanBasicSearchContainer();
		}

		if (oBasicSearchField) {

			var oLabel = new Label({
				text: "\u2008"
			});
			oLabel.addStyleClass("sapBasicSearchFilter");
			var oContainer = this._addControlToBasicAreaContainer(null, oBasicSearchField, oLabel);
			if (oContainer) {
				oContainer.setVisible(true);
				var nPos = 0;
				if (this._isPhone()) {
					nPos = 1;
				}
				this._oBasicAreaLayout.insertContent(oContainer, nPos);
				this._oBasicSearchFieldContainer = oContainer;

				if (nWidth) {
					if (typeof nWidth === 'string') {
						this._oBasicSearchFieldContainer.setWidth(nWidth);
					} else {
						this._oBasicSearchFieldContainer.setWidth(nWidth + "px");
					}
				}
			}
		}
	};

	FilterBar.prototype._setCollectiveSearch = function(oCollectiveSearch) {
		if (this.getAdvancedMode()) {
			if (this._oToolbar) {
				if (this._oVariantManagement) {
					this._oToolbar.removeContent(this._oVariantManagement);
					this._unregisterVariantManagement(this._oVariantManagement);
					this._oVariantManagement = null;
				}

				if (this._oCollectiveSearch) {
					this._oToolbar.removeContent(this._oCollectiveSearch);
				}
				this._oCollectiveSearch = oCollectiveSearch;
				this._oToolbar.insertContent(this._oCollectiveSearch, 0);

				this._oToolbar.removeStyleClass("sapUiCompFilterBarToolbarBasicSearchNoVariant");
			}
		}
	};

	FilterBar.prototype.setBasicSearch = function(oBasicSearchField) {
		var that = this;

		this.setAssociation("basicSearch", oBasicSearchField, true);

		if (typeof oBasicSearchField === "string") {
			oBasicSearchField = sap.ui.getCore().byId(oBasicSearchField);
		}

		if (this._oBasicSearchField && this._oToolbar) {
			this._oToolbar.removeContent(this._oBasicSearchField);
		}

		if (oBasicSearchField && this._isNewFilterBarDesign()) {
			this._addBasicSearchToBasicArea(oBasicSearchField);
		} else {

			/* eslint-disable no-lonely-if */
			if (oBasicSearchField && this._oToolbar && (!this._isPhone() || this.getAdvancedMode())) {

				var nIdx = this._indexOfSpacerOnToolbar();
				this._oToolbar.insertContent(oBasicSearchField, nIdx);
				if (this._isUi2Mode()) {
					oBasicSearchField.attachLiveChange(function(oEvent) {
						that.fireFilterChange(oEvent);
					});
				}
			}
			/* eslint-enable no-lonely-if */
		}

		this._oBasicSearchField = oBasicSearchField;

		return this;
	};

	FilterBar.prototype._getBasicSearchValue = function() {
		if (this._oBasicSearchField && this._oBasicSearchField.getValue) {
			return this._oBasicSearchField.getValue();
		}

		return null;
	};

	FilterBar.prototype._indexOfSpacerOnToolbar = function() {
		var aItems = this._oToolbar.getContent(), i;
		if (aItems) {
			for (i = 0; i < aItems.length; i++) {
				if (aItems[i] instanceof ToolbarSpacer) {
					return i;
				}
			}
		}

		return 0;
	};

	/*
	 * @public Add a FilterItem to the <code>filterItems</code> aggregation.
	 * @deprecated Since version 1.48.0. Use aggregation <code>filterGroupItems</code> instead.
	 */
	FilterBar.prototype.addFilterItem = function(oFilterItem) {

		var sName, oControl, oFilterGroupItem;

		if (!oFilterItem) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterItem()" + " Expected argument 'oFilterItem' may not be null nor empty");
		}

		sName = oFilterItem.getName();
		if (!sName) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterItem()" + " Expected argument 'oFilterItem.name' may not be null nor empty");
		}

		oControl = oFilterItem.getControl();
		if (!oControl) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterItem()" + " Expected argument 'oFilterItem.control' may not be null nor empty");
		}

		this.addAggregation("filterItems", oFilterItem, true);

		// has to be initialized before the call to the container creation
		if (!this._aBasicAreaSelection) {
			this._aBasicAreaSelection = [];
		}

		var oObj = {
			control: oFilterItem.getControl(),
			filterItem: oFilterItem
		};
		this._aBasicAreaSelection.push(oObj);

		oFilterGroupItem = new sap.ui.comp.filterbar.FilterGroupItem({
			label: oFilterItem.getLabel(),
			labelTooltip: oFilterItem.getLabelTooltip(),
			name: oFilterItem.getName(),
			mandatory: oFilterItem.getMandatory(),
			visible: oFilterItem.getVisible(),
			visibleInFilterBar: oFilterItem.getVisibleInFilterBar(),
			partOfCurrentVariant: true,
			control: oFilterItem.getControl(),
			groupName: FilterBar.INTERNAL_GROUP,
			groupTitle: "",
			hiddenFilter: oFilterItem.getHiddenFilter()
		});

		if (oFilterItem.data('isCustomField')) {
			oFilterGroupItem.data('isCustomField', true);
		}

		oFilterItem.attachChange(this._filterItemChange.bind(this, null));

		this.addFilterGroupItem(oFilterGroupItem);

		return this;
	};

	FilterBar.prototype.addFilterGroupItem = function(oFilterGroupItem) {

		var sName, sGroupName, oObj, oContainer;

		if (!oFilterGroupItem) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterGroupItem()" + " Expected argument 'oFilterGroupItem' may not be null nor empty");
		}

		this.addAggregation("filterGroupItems", oFilterGroupItem, true);

		sGroupName = oFilterGroupItem.getGroupName();
		if (!sGroupName) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterGroupItems()" + " GroupName may not be null nor empty");
		}

		sName = oFilterGroupItem.getName();
		if (!sName) {
			throw new Error("sap.ui.comp.filterbar.FilterBar.prototype.addFilterGroupItems()" + " Name may not be null nor empty");
		}

		if (!this._mAdvancedAreaFilter) {
			this._mAdvancedAreaFilter = {};
		}
		if (!this._mAdvancedAreaFilter[sGroupName]) {
			this._mAdvancedAreaFilter[sGroupName] = {};
			this._mAdvancedAreaFilter[sGroupName].filterItem = null;
			this._mAdvancedAreaFilter[sGroupName].items = [];
		}

		if (!this._mAdvancedAreaFilter[sGroupName].items) {
			this._mAdvancedAreaFilter[sGroupName].items = [];
		}

		if (!this._mAdvancedAreaFilter[sGroupName].filterItem) {
			this._mAdvancedAreaFilter[sGroupName].filterItem = oFilterGroupItem;
		}

		oObj = {
			control: oFilterGroupItem.getControl(),
			filterItem: oFilterGroupItem
		};

		if (this.getAdvancedMode() || oFilterGroupItem.getVisibleInFilterBar()) {
			oFilterGroupItem.setVisibleInFilterBar(true);
		} else {
			oFilterGroupItem.setVisibleInFilterBar(false);
		}

		this._mAdvancedAreaFilter[sGroupName].items.push(oObj);

		if (!oFilterGroupItem.getHiddenFilter()) {

			oContainer = this._addControlToBasicAreaFormContainer(oFilterGroupItem);
			if (oContainer) {
				oObj.container = oContainer;

				oContainer.setVisible(oFilterGroupItem.getVisible() && oFilterGroupItem.getVisibleInFilterBar());
				if (oFilterGroupItem.getVisibleInFilterBar()) {
					oFilterGroupItem.setPartOfCurrentVariant(oFilterGroupItem.getVisibleInFilterBar());
				}

				oFilterGroupItem.attachChange(this._filterGroupItemChange.bind(this));
			}

			if (this.getAdvancedMode()) {
				this._rerenderAA();
			} else {
				this._showHintText();
			}

		}
		this._adaptButtonsEnablement();

		return this;
	};

	/**
	 * Adds a <code>FilterGroupItem</code> element to the aggregation <code>_parameters</code>.
	 * @protected
	 * @param {sap.ui.comp.filterbar.FilterGroupItem} oParameter adding a analytical parameter
	 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to this in order to allow method chaining
	 */
	FilterBar.prototype._addParameter = function(oParameter) {
		var i, oObj, oContainer, bInserted = false, sGroupName = FilterBar.INTERNAL_GROUP;

		oParameter._setParameter(true);
		oParameter.setVisibleInFilterBar(true);
		oParameter.setPartOfCurrentVariant(true);

		this.addAggregation("_parameters", oParameter, true);

		oObj = {
			control: oParameter.getControl(),
			filterItem: oParameter
		};

		if (!this._mAdvancedAreaFilter) {
			this._mAdvancedAreaFilter = {};
		}
		if (!this._mAdvancedAreaFilter[sGroupName]) {
			this._mAdvancedAreaFilter[sGroupName] = {};
			this._mAdvancedAreaFilter[sGroupName].filterItem = null;
		}

		if (!this._mAdvancedAreaFilter[sGroupName].items) {
			this._mAdvancedAreaFilter[sGroupName].items = [];
		}

		for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
			var oItem = this._mAdvancedAreaFilter[sGroupName].items[i];
			if (oItem.filterItem._isParameter()) {
				continue;
			}
			this._mAdvancedAreaFilter[sGroupName].items.splice(i, 0, oObj);
			bInserted = true;
			break;
		}

		if (!bInserted) {
			this._mAdvancedAreaFilter[sGroupName].items.push(oObj);
		}

		oContainer = this._addControlToBasicAreaFormContainer(oParameter);
		if (oContainer) {
			oObj.container = oContainer;
			oContainer.setVisible(oParameter.getVisible());
		}

		if (bInserted) {
			this._oBasicAreaLayout.removeContent(oContainer);
			this._addContainerInOrder(oObj.filterItem, oObj.container);
		}

		if (!this.getAdvancedMode()) {
			this._showHintText();
		}

		this._adaptButtonsEnablement();

		return this;

	};

	/**
	 * Event-handler is called when the property of a filter item has changed.
	 * @private
	 * @param {object} oContainer the container of the filter item's control and label
	 * @param {object} oEvent the event
	 */
	FilterBar.prototype._filterItemChange = function(oContainer, oEvent) {

		var oItem;
		var bFlag;
		var sPropertyName;

		if (oEvent && oEvent.oSource && (oEvent.oSource instanceof sap.ui.comp.filterbar.FilterItem)) {

			sPropertyName = oEvent.getParameter("propertyName");

			if (sPropertyName === "visibleInFilterBar" || sPropertyName === "visible" || sPropertyName === "label" || sPropertyName === "labelTooltip" || sPropertyName === "mandatory") {
				oItem = this._determineItemByName(oEvent.oSource.getName(), FilterBar.INTERNAL_GROUP);

				if (oItem && oItem.filterItem) {
					if ((sPropertyName === "visible")) {
						bFlag = oEvent.oSource.getVisible();
						oItem.filterItem.setVisible(bFlag);
					} else if (sPropertyName === "visibleInFilterBar") {
						bFlag = oEvent.oSource.getVisibleInFilterBar();
						var bChangePossible = this._checkChangePossibleVisibleInFilterBar(oItem.filterItem, bFlag);
						if (bChangePossible) {
							oItem.filterItem.setVisibleInFilterBar(bFlag);
						} else {
							oEvent.oSource.setVisibleInFilterBar(true);
						}

					} else if (sPropertyName === "label") {
						oItem.filterItem.setLabel(oEvent.oSource.getLabel());
					} else if (sPropertyName === "labelTooltip") {
						oItem.filterItem.setLabelTooltip(oEvent.oSource.getLabelTooltip());
					} else if (sPropertyName === "mandatory") {
						bFlag = oEvent.oSource.getMandatory();
						oItem.filterItem.setMandatory(bFlag);
					}
				}
			}
		}
	};

	/**
	 * Event handler called when the property of a filter group item has changed.
	 * @private
	 * @param {object} oEvent the event
	 */
	FilterBar.prototype._filterGroupItemChange = function(oEvent) {

		var oItem;
		var sPropertyName;

		if (oEvent && oEvent.oSource) {
			sPropertyName = oEvent.getParameter("propertyName");

			if (sPropertyName === "visibleInFilterBar" || sPropertyName === "visible") {

				oItem = this._determineItemByName(oEvent.oSource.getName(), oEvent.oSource.getGroupName());
				if (oItem) {
					if (sPropertyName === "visibleInFilterBar") {
						var bFlag = oEvent.oSource.getVisibleInFilterBar();

						var bChangePossible = this._checkChangePossibleVisibleInFilterBar(oEvent.oSource, bFlag);
						if (!bChangePossible) {
							oEvent.oSource.setVisibleInFilterBar(true);
							bFlag = true;
						}

						if (bFlag) {
							oEvent.oSource.setPartOfCurrentVariant(true);
							// this._setVisibleInFilterBar(oItem);
						}

						if (!this.getAdvancedMode() && !this._oDialog) {
							this._rerenderItem(oItem);
							this._adaptLinkText(oEvent.oSource.getGroupName());
						}

					} else if (sPropertyName === "visible") {

						if (this.getAdvancedMode() && oItem.container) {
							oItem.container.setVisible(true);
						} else {
							this._updateToolbarText();
							this._rerenderGroup(oItem, oEvent.oSource.getGroupName());
						}
					}

					this._showHintText();
				}
			} else if (sPropertyName === "groupTitle") {
				if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()]) {
					if (this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()].formcontainer) {
						this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()].formcontainer.setTitle(oEvent.oSource.getGroupTitle());
					} else {
						this._adaptGroupTitle(oEvent.oSource.getGroupName());
					}
				}
			} else if (sPropertyName === "label") {
				if (!this._mAdvancedAreaFilter[oEvent.oSource.getGroupName()].formcontainer) { // do not adapt in case the advanced filters dialog is
					// active
					this._adaptGroupTitleForFilter(oEvent.oSource);
				}
			} else if (sPropertyName === "mandatory") {
				if (this._oFilterDialog) { // adapt only in case the advanced filters dialog is active
					this._adaptMandatoryForFilter(oEvent.oSource);
				}

			} else if ((sPropertyName === "partOfCurrentVariant") && this.ensureLoadedValueHelpList) {
				var oFilterItem = this.determineFilterItemByName(oEvent.oSource.getName());
				if (oFilterItem && oFilterItem.getPartOfCurrentVariant()) {
					this.ensureLoadedValueHelpList(oEvent.oSource.getName());
				}
			}

			if (this.getAdvancedMode()) {
				this._rerenderAA();
			}
		}
	};

	FilterBar.prototype._addContainer = function(oItem) {

		if (oItem) {

			if (this._oBasicAreaLayout && !this._oFilterDialog) {

				if (oItem.container && (this._oBasicAreaLayout.indexOfContent(oItem.container) === -1)) {
					this._addContainerInOrder(oItem.filterItem, oItem.container);
				}
			}
		}
	};

	FilterBar.prototype._addContainerInOrder = function(oFilterItem, oContainer) {
		var n, i, idx, aContainers = this._oBasicAreaLayout.getContent(), oPredecessorContainerIdx = -1;

		if (this._isNewFilterBarDesign()) {
			if (this._isPhone()) {
				oPredecessorContainerIdx++;
			}
			if (this._oBasicSearchField) {
				oPredecessorContainerIdx++;
			}
		}

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				var oGroupElement = this._mAdvancedAreaFilter[n];
				if (oGroupElement && oGroupElement.items) {
					for (i = 0; i < oGroupElement.items.length; i++) {

						if (!oGroupElement.items[i].container) {
							continue;
						}

						if (oGroupElement.items[i].container === oContainer) {

							this._oBasicAreaLayout.insertContent(oContainer, oPredecessorContainerIdx + 1);
							return;
						}

						idx = aContainers.indexOf(oGroupElement.items[i].container);
						if (idx >= 0) {
							oPredecessorContainerIdx = idx;
						}
					}
				}
			}
		}
	};

	/**
	 * VisibleInFilterBar-property may not be changed to false, when the filter is mandatory and has no value
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem in question
	 * @param {boolean} bFlag - represents the value of visibleInFilterBar
	 * @returns {boolean} allowed or not allowed change
	 */
	FilterBar.prototype._checkChangePossibleVisibleInFilterBar = function(oFilterItem, bFlag) {

		if (oFilterItem && oFilterItem.getMandatory() && !bFlag) {
			var bHasValue = this._hasFilterValue(oFilterItem);
			if (!bHasValue) {
				oFilterItem.setVisibleInFilterBar(true);
				return false;
			}
		}

		return true;
	};

	/**
	 * In case the visibility was changed, check if the link text has to be adapted.
	 * @private
	 * @param {string} sGroupName the group name
	 */
	FilterBar.prototype._adaptLinkText = function(sGroupName) {

		if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].link) {
			this._setLinkText(sGroupName, this._mAdvancedAreaFilter[sGroupName].link);
		}
	};

	/**
	 * Checks if a filter has a value.
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem the filter
	 * @returns {boolean} returns if the filter has a value or not
	 */
	FilterBar.prototype._hasFilterValue = function(oFilterItem) {

		var aFilters = this._getFiltersWithValues();
		return this._checkFilterForValue(aFilters, oFilterItem);
	};

	/**
	 * Handles dynamic change of the mandatory property.
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem the filter
	 */
	FilterBar.prototype._adaptMandatoryForFilter = function(oFilterItem) {

		var oItem;
		var sGroupName = oFilterItem.getGroupName();

		if (oFilterItem) {
			oItem = this._determineItemByName(oFilterItem.getName(), sGroupName);
			if (oItem && oItem.checkbox && oItem.checkbox.getVisible()) {

				var bEnabled = true;
				if (oFilterItem.getMandatory()) {
					var bHasValue = this._hasFilterValue(oFilterItem);
					if (!bHasValue) {
						bEnabled = false;
						oFilterItem.setVisibleInFilterBar(true);
					}
				}

				oItem.checkbox.setEnabled(bEnabled);
			}
		}
	};

	/**
	 * In case considerGroupTitle is set then all labels of filters of a specific group will post-fixed with the group title.
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterGroupItem} oFilterItem the filter
	 */
	FilterBar.prototype._adaptGroupTitleForFilter = function(oFilterItem) {

		var sLabel;
		var oLabel;

		if (oFilterItem && !oFilterItem.getHiddenFilter()) {
			sLabel = oFilterItem.getLabel();
			oLabel = oFilterItem.getLabelControl(this.getId());
			if (this.getConsiderGroupTitle()) {
				if (oLabel && oFilterItem.getGroupTitle()) {
					oLabel.setText(sLabel + " (" + oFilterItem.getGroupTitle() + ')');
				}
			} else {
				oLabel.setText(sLabel);
			}
		}
	};

	/**
	 * In case considerGroupTitle is set then all labels of filters of a specific group will post-fixed with the group title.
	 * @private
	 * @param {string} sGroupName filter group name
	 */
	FilterBar.prototype._adaptGroupTitle = function(sGroupName) {

		var i;
		var oItem;

		if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items) {
			for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
				oItem = this._mAdvancedAreaFilter[sGroupName].items[i];
				if (oItem && oItem) {
					this._adaptGroupTitleForFilter(oItem.filterItem);
				}
			}
		}
	};

	/**
	 * In case considerGroupTitle is set then all labels of all filters of all groups will be post-fixed with the group title.
	 * @private
	 * @param {string} sGroupName the group name
	 */
	FilterBar.prototype._adaptGroupsTitle = function() {

		var n = null;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n && n !== FilterBar.INTERNAL_GROUP) {
					this._adaptGroupTitle(n);
				}
			}
		}

	};

	/**
	 * Registration of a callback function. The provided callback function is executed to obtain the filters with values.
	 * @public
	 * @since 1.26.1
	 * @param {function} fCallBack Called when a variant must be applied
	 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to this in order to allow method chaining.
	 */
	FilterBar.prototype.registerGetFiltersWithValues = function(fCallBack) {

		this._fRegisterGetFiltersWithValues = fCallBack;

		return this;
	};

	/**
	 * Registration of a callback function. The provided callback function is executed when saving a variant is triggered and must provide all
	 * relevant fields and values in JSON.
	 * @public
	 * @param {function} fCallBack Called when a variant must be fetched
	 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to this in order to allow method chaining.
	 */
	FilterBar.prototype.registerFetchData = function(fCallBack) {

		this._fRegisteredFetchData = fCallBack;

		return this;
	};

	/**
	 * Registration of a callback function. The provided callback function is executed when a variant must be applied. The callback function will
	 * receive the corresponding data set containing all relevant data in JSON, as initially provided by the callback for fetchData.
	 * @public
	 * @param {function} fCallBack Called when a variant must be applied
	 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to this in order to allow method chaining.
	 */
	FilterBar.prototype.registerApplyData = function(fCallBack) {

		this._fRegisteredApplyData = fCallBack;

		return this;
	};

	FilterBar.prototype._isTINAFScenario = function() {

		if (this._oVariantManagement) {

			if (!this._isUi2Mode()) {
				return true;
			}
// if (this._oVariantManagement instanceof SmartVariantManagement) {
// return true;
// }
		} else {

			/* eslint-disable no-lonely-if */
			// scenario: VH dialog: VM replaced with collective search control
			if (this._oCollectiveSearch && this.getAdvancedMode()) {
				return true;
			}
			/* eslint-enable no-lonely-if */
		}

		return false;
	};

	FilterBar.prototype.fireInitialise = function() {

		if (this._isTINAFScenario()) {
			this._createVisibleFilters();
			if (this.getAdvancedMode()) {
				this._ensureFilterLoaded(null);
			}
			this._fireInitialiseEvent();
		} else {
			this._initializeVariantManagement();
		}
	};

	/**
	 * This method will be called by the SmartVariantMangement and indicates, that the standard variant was obtained. It indicates, that the variant
	 * management is fully initialized.
	 * @protected
	 */
	FilterBar.prototype.variantsInitialized = function() {
		this.fireInitialized();
	};

	FilterBar.prototype.fireInitialized = function() {
		this.fireEvent("initialized");
	};

	/**
	 * Initializes the variant management, when the prerequisites are full filled. In this case the initialise-event will be triggered lated, after
	 * the variant management initialization. Triggers the initialise-event immediately, in case the pre-requisits are not full filled.
	 * @private
	 */
	FilterBar.prototype._initializeVariantManagement = function() {
		this._createVisibleFilters();
		// initialise SmartVariant stuff only if it is necessary! (Ex: has a persistencyKey)
		if (this._oVariantManagement && this.getPersistencyKey()) {

			if (this._isTINAFScenario()) {
				this._oVariantManagement.initialise(this._initialiseVariants, this);
			} else {
				// Ui2 handling
				this._fInitialiseVariants = this._initialiseVariants.bind(this);
				this._oVariantManagement.attachInitialise(this._fInitialiseVariants, this);
				this._oVariantManagement.initialise();
			}

		} else {
			this._fireInitialiseEvent();
		}
	};

	FilterBar.prototype._fireInitialiseEvent = function() {

		try {
			this.fireEvent("initialise");
		} catch (ex) {
			jQuery.sap.log.error("error during initialise event handling - " + ex.message);
		}

		this._bIsInitialized = true;

		this._updateToolbarText();
	};

	/**
	 * Is triggered, whenever the flex layer is initialized.
	 * @private
	 */
	FilterBar.prototype._initialiseVariants = function() {

		this._fireInitialiseEvent();
		if (this._oVariantManagement) { // mark any changes as irrelevant
			this._oVariantManagement.currentVariantSetModified(false);
		}
	};

	/**
	 * Informs the consumer of the FilterBar that a new variant was applied.
	 * @private
	 * @param {string} sContext may be undefined, has the values 'RESET'/'CANCEL/'DATA_SUITE'/'SET_VM_ID'/'INIT' and indicates the initial trigger
	 *        source
	 * @param {boolean} bExecuteOnSelect indicates if a follow-on search will be triggered automatically
	 */
	FilterBar.prototype.fireAfterVariantLoad = function(sContext, bExecuteOnSelect) {

		this._rerenderFilters();

		var oEvent = {
			context: sContext,
			executeOnSelect: bExecuteOnSelect
		};
		this.fireEvent("afterVariantLoad", oEvent);
	};

	/**
	 * Informs the consumer of the FilterBar, that a variant is about to be saved.
	 * @private
	 * @param {string} sContext may be undefined, have the value <code>STANDARD</code> and indicates the initial trigger source
	 */
	FilterBar.prototype.fireBeforeVariantSave = function(sContext) {

		var oEvent = {
			context: sContext
		};

		var bFlag = this._getConsiderFilterChanges();

		if (sContext) {
			this._setConsiderFilterChanges(false);
		}

		this.fireEvent("beforeVariantSave", oEvent);

		if (sContext) {
			this._setConsiderFilterChanges(bFlag);
		}
	};

// BCP: 1670241039
// /**
// * Returns all Filters belonging to the 'filterItems' aggregation. Since 1.48.0 this method will return all filters belonging to the BASIC group.
// * @public
// * @returns {sap.ui.comp.filterbar.FilterItem[]} An array of the removed elements (might be empty).
// * @deprecated Since version 1.48.0. Use aggregation <code>filterGroupItems</code> instead.
// */
// FilterBar.prototype.getFilterItems = function() {
//
// var i, aFilters = [];
//
// if (this._mAdvancedAreaFilter) {
//
// this._ensureFilterLoaded(null);
//
// if ((this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP]) && (this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items)) {
// for (i = 0; i < this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items.length; i++) {
// if (this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items[i].filterItem &&
// !this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items[i].filterItem._isParameter()) {
// aFilters.push(this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items[i].filterItem);
// }
// }
// }
// }
//
// return aFilters;
// };

	/**
	 * Removes all entries in the aggregation filterItems.
	 * @public
	 * @returns {sap.ui.comp.filterbar.FilterItem[]} An array of the removed elements (might be empty).
	 * @deprecated Since version 1.48.0. Use aggregation <code>filterGroupItems</code> instead.
	 */
	FilterBar.prototype.removeAllFilterItems = function() {

		var i;
		var aFilters = [];

		this._aBasicAreaSelection = null;

		var aContent = this._oBasicAreaLayout.getContent();
		if (aContent) {
			for (i = 0; i < aContent.length; i++) { // 'variant management' ... 'plus', ' more-less', buttons container
				this._oBasicAreaLayout.removeContent(aContent[i]);
// if (aContent[i]).exit) {
// aContent[i].exit();
// }
			}
		}

		if (this._mAdvancedAreaFilter) {
			if ((this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP]) && (this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items)) {
				for (i = 0; i < this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items.length; i++) {
					if (this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items[i].filterItem) {
						aFilters.push(this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items[i].filterItem);
					}
				}

				delete this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP];
			}

			if (Object.keys(this._mAdvancedAreaFilter).length === 0) {
				this._mAdvancedAreaFilter = null;
			}
		}

		// this.removeAggregation("filterItems");

		this._destroyItems(aFilters);

		this._adaptButtonsEnablement();

		return aFilters;
	};

	/**
	 * Removes all entries in the aggregation filterGroupItems.
	 * @public
	 * @returns {sap.ui.comp.filterbar.FilterItem[]} An array of the removed elements (might be empty).
	 */
	FilterBar.prototype.removeAllFilterGroupItems = function() {

		var n = null, i;
		var aFilters = [];

		for (n in this._mAdvancedAreaFilter) {
			if (n) {
				if (this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						if (this._mAdvancedAreaFilter[n].items[i].filterItem) {
							aFilters.push(this._mAdvancedAreaFilter[n].items[i].filterItem);
						}
					}

					delete this._mAdvancedAreaFilter[n];
				}
			}

			if (Object.keys(this._mAdvancedAreaFilter).length === 0) {
				this._mAdvancedAreaFilter = null;
			}
		}

		this.__bDeleteMode = true;
		// this.removeAggregation("filterGroupItems");
		this._destroyItems(aFilters);

		this.__bDeleteMode = false;

		this._adaptButtonsEnablement();

		return aFilters;
	};

	/**
	 * Removes all entries in the aggregations filterGroupItems, basicSearch
	 * @public
	 */
	FilterBar.prototype.removeAllFilters = function() {
		this.removeAllFilterItems();
		this.removeAllFilterGroupItems();
		this.removeBasicSearch();
	};

	FilterBar.prototype.removeBasicSearch = function() {
		this.setBasicSearch(null);
	};

	/**
	 * Retrieves filters belonging to the current variant.
	 * @public
	 * @param {boolean} bConsiderOnlyVisibleFields Indicates that only visible filters are retrieved. <b>Note:</b> hidden filters are treated as
	 *        visible filters.
	 * @returns {array} filters Of the current variant
	 */
	FilterBar.prototype.getAllFilterItems = function(bConsiderOnlyVisibleFields) {

		var i, n = null;
		var aFilters = [];
		var oElement, oItem;

		if (!bConsiderOnlyVisibleFields) {
			this._ensureFilterLoaded(null);
		}

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					oElement = this._mAdvancedAreaFilter[n];
					if (oElement.items) {
						for (i = 0; i < oElement.items.length; i++) {
							oItem = oElement.items[i];
							if (oItem && oItem.filterItem && oItem.filterItem.getVisible()) {
								if (bConsiderOnlyVisibleFields) {
									if (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()) {
										aFilters.push(oItem.filterItem);
									}
								} else {
									aFilters.push(oItem.filterItem);
								}
							}
						}
					}
				}
			}
		}

		return aFilters;
	};

	/**
	 * Clears an eventual error state on all filter.
	 * @privatef
	 */
	FilterBar.prototype._clearErrorState = function() {

		this._resetFiltersInErrorValueState();
	};

	FilterBar.prototype.getAggregation = function(sName) {

		if (sName == "filterGroupItems" && !this.__bDeleteMode) {
			this._ensureFilterLoaded(null);
		}

		return Grid.prototype.getAggregation.apply(this, arguments);
	};

	/**
	 * Provides filter information for lazy instantiation. Is overwritten by the SmartFilterBar.
	 * @protected
	 * @returns {array} of filter information
	 */
	FilterBar.prototype._getFilterInformation = function() {
		return [];
	};

	FilterBar.prototype._createVisibleFilters = function() {

		this._getFilters();
	};

	FilterBar.prototype._getFilters = function() {

		this._aFields = this._getFilterInformation();
		var i, oField;

		if (this._aFields && this._aFields.length > 0) {
			if (!this._mAdvancedAreaFilter) {
				this._mAdvancedAreaFilter = {};

				if (!this.getAdvancedMode()) {
					this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP] = {};
					this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].filterItem = null;
					this._mAdvancedAreaFilter[FilterBar.INTERNAL_GROUP].items = null;
				}
			}

			for (i = 0; i < this._aFields.length; i++) {
				oField = this._aFields[i];

				if (oField.groupName !== FilterBar.INTERNAL_GROUP) {
					if (!this._mAdvancedAreaFilter[oField.groupName]) {
						this._mAdvancedAreaFilter[oField.groupName] = {};
						this._mAdvancedAreaFilter[oField.groupName].groupTitle = oField.groupTitle;
						this._mAdvancedAreaFilter[oField.groupName].filterItem = null;
						this._mAdvancedAreaFilter[oField.groupName].items = [];
					}
				}

				if (oField.visibleInAdvancedArea || (oField.groupName === FilterBar.INTERNAL_GROUP)) {

					this._instanciateFilterItem(oField);
				}
			}
		}

		this._adaptButtonsEnablement();
	};

	/**
	 * Determines if an filter is visible on he filterbar. This API is only relevant for the Smart Templates scenario any may not be used in any ozher
	 * cases.
	 * @private
	 * @param {string} sName of a filter.
	 * @returns {boolean} determines if a specific filter is visible o the filterbar.
	 */
	FilterBar.prototype.isVisibleInFilterBarByName = function(sName) {
		var oFilterItem, oField = this._getFilterMetadata(sName);
		if (oField && oField.factory) {
			if ((oField.hasOwnProperty("visibleInAdvancedArea") && oField.visibleInAdvancedArea) || (oField.groupName === FilterBar.INTERNAL_GROUP)) {
				return true;
			}
		} else {
			oFilterItem = this.determineFilterItemByName(sName);
			if (oFilterItem) {
				return oFilterItem.getVisibleInFilterBar();
			}
		}

		return false;
	};

	FilterBar.prototype._getFilterMetadata = function(sName) {
		if (this._aFields) {
			for (var i = 0; i < this._aFields.length; i++) {
				if (this._aFields[i].fieldName === sName) {
					return this._aFields[i];
				}
			}
		}

		return null;
	};

	/**
	 * Determines an array of filter names, which are custom filters and non visible on the FilterBar. This API is only relevant for the Smart
	 * Templates scenario any may not be used in any ozher cases.
	 * @private
	 * @returns {array} of filter names.
	 */
	FilterBar.prototype.getNonVisibleCustomFilterNames = function() {

		if (this._aFields.length > 0) {
			return this._getLazyNonVisibleCustomFilterNames();
		} else {
			return this._getNonVisibleCustomFilterNames();
		}

	};

	FilterBar.prototype._getLazyNonVisibleCustomFilterNames = function() {
		var that = this, aArray = [];

		this._aFields.forEach(function(oField) {

			if (oField.factory) {
				if (oField.isCustomFilterField && !oField.visibleInAdvancedArea) {
					aArray.push(oField.fieldName);
				}
			} else if (that._isNonVisibleCustomFilterNamesByName(oField.fieldName, oField.groupName)) {
				aArray.push(oField.fieldName);
			}

		});

		return aArray;
	};

	FilterBar.prototype._isNonVisibleCustomFilterNamesByName = function(sName, sGroupName) {
		var i, oItem;
		if (this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items) {
			for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
				oItem = this._mAdvancedAreaFilter[sGroupName].items[i];
				if (oItem.filterName && (oItem.filterItem.getName() === sName)) {
					return this._isNonVisibleCustomFilterNamesByFilter(oItem.filterItem);
				}
			}
		}

		return false;
	};

	FilterBar.prototype._isNonVisibleCustomFilterNamesByFilter = function(oFilterItem) {
		if (oFilterItem.data("isCustomField") && !oFilterItem.getVisibleInFilterBar()) {
			return true;
		}

		return false;
	};

	FilterBar.prototype._getNonVisibleCustomFilterNames = function() {
		var that = this, aArray = [], aFilterItems = this.getAllFilterItems();

		if (aFilterItems) {
			aFilterItems.forEach(function(oFilterItem) {
				if (that._isNonVisibleCustomFilterNamesByFilter(oFilterItem)) {
					aArray.push(oFilterItem.getName());
				}
			});
		}

		return aArray;
	};

	FilterBar.prototype._ensureFilterLoaded = function(aFilterNames) {
		var i, j, oField;

		if (this._aFields && this._aFields.length > 0) {

			for (j = 0; j < this._aFields.length; j++) {
				oField = this._aFields[j];

				if (!oField.factory) {
					continue;
				}

				if (aFilterNames) {
					for (i = 0; i < aFilterNames.length; i++) {
						if ((oField.fieldName === aFilterNames[i].name) && (oField.groupName === aFilterNames[i].group)) {
							this._instanciateFilterItem(oField);
							break;
						}
					}
				} else {
					this._instanciateFilterItem(oField);
				}

			}

			if (!aFilterNames) {
				this._aFields = [];
			}
		}

	};

// FilterBar.prototype._ensureFilterLoaded = function(aFilterNames) {
//
// var that = this;
//
// if (this._aFields && this._aFields.length > 0) {
//
// if (aFilterNames) {
// aFilterNames.forEach(function(oFilter) {
// that._aFields.some(function(oField) {
// if ((oField.fieldName === oFilter.name) && (oField.groupName === oFilter.group)) {
// if (oField.factory) {
// that._instanciateFilterItem(oField);
// }
// return true;
// }
// return false;
// });
// });
// } else {
//
// this._aFields.forEach(function(oField) {
// if (oField.factory) {
// that._instanciateFilterItem(oField);
// }
// });
// }
//
// if (!aFilterNames) {
// this._aFields = [];
// }
// }
//
// };

	FilterBar.prototype._instanciateFilterItem = function(oField) {

		var factory = oField.factory;
		if (factory) {
			// first remove factory to avoid endless recursion, then call it
			delete oField.factory;
			factory.call(oField);
		}

	};

	/**
	 * Destroys the passed filters.
	 * @private
	 * @param {array} aFilterItems aggregation items
	 */
	FilterBar.prototype._destroyItems = function(aFilterItems) {

		if (aFilterItems && aFilterItems.length) {
			for (var i = 0; i < aFilterItems.length; i++) {
				aFilterItems[i].destroy();
			}
		}
	};

	/**
	 * Handles the visibility of the filters, during the variant appliance, according to the persisted information.
	 * @private
	 * @param {array} aPersData information about the filter fields
	 */
	FilterBar.prototype._reapplyVisibility = function(aPersData) {

		var i, n = null;
		var oItem;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					var oGroup = this._mAdvancedAreaFilter[n];
					if (oGroup && oGroup.items) {
						for (i = 0; i < oGroup.items.length; i++) {
							oItem = oGroup.items[i];
							if (oItem && oItem.filterItem) {
								this._setPersVisibility(aPersData, oItem.filterItem);
							}
						}

						if (n !== FilterBar.INTERNAL_GROUP) {
							this._adaptLinkText(n);
						}
					}
				}
			}
		}
	};

	/**
	 * Determines if the current filter is marks as visible via the personalization
	 * @private
	 * @param {array} aPersData array of filters as obtain by the persistence layer
	 * @param {sap.ui.comp.filterBar.FilterItem} oFilterItem current filterItem
	 */
	FilterBar.prototype._setPersVisibility = function(aPersData, oFilterItem) {

		var sGroupName, sName;
		var oFilterInfo;

		if (oFilterItem && !oFilterItem.getHiddenFilter()) {
			sName = oFilterItem.getName();
			sGroupName = oFilterItem.getGroupName();

			oFilterInfo = this._checkForFilterInfo(aPersData, sName, sGroupName);
			if (this._isTINAFScenario()) {
				if (oFilterInfo) {
					oFilterItem.setVisibleInFilterBar(oFilterInfo.visibleInFilterBar);
					oFilterItem.setPartOfCurrentVariant(oFilterInfo.partOfCurrentVariant);

					if (oFilterInfo.hasOwnProperty("visible")) {
						oFilterItem.setVisible(oFilterInfo.visible);
					}
				} else {
					oFilterItem.setVisibleInFilterBar(false);
					if ((sGroupName === FilterBar.INTERNAL_GROUP) || oFilterItem._isParameter()) {
						oFilterItem.setPartOfCurrentVariant(true);
					} else {
						oFilterItem.setPartOfCurrentVariant(false);
					}
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (oFilterInfo && (oFilterInfo.visibleInFilterBar !== undefined)) {
					oFilterItem.setVisibleInFilterBar((oFilterInfo.visibleInFilterBar));
					oFilterItem.setPartOfCurrentVariant((oFilterInfo.partOfCurrentVariant));
				} else { // old format
					if ((sGroupName !== FilterBar.INTERNAL_GROUP) && oFilterInfo && (oFilterInfo.group === sGroupName)) {

						oFilterItem.setVisibleInFilterBar((oFilterInfo !== null));
					}
				}
				/* eslint-enable no-lonely-if */
			}

			if (sGroupName === FilterBar.INTERNAL_GROUP) { // basic fields are always partOfCurentVariant
				oFilterItem.setPartOfCurrentVariant(true);
			}

			if (oFilterItem) {
				var oControl = this.determineControlByFilterItem(oFilterItem, true);
				if (oControl && oControl.getValueState && (oControl.getValueState() !== ValueState.None)) {
					if (oControl.setValue) {
						oControl.setValue("");
					}
					oControl.setValueState(ValueState.None);
				}
			}

		}
	};

	/**
	 * Determines the filter info from the persistence data for a specific filter.
	 * @private
	 * @param {array} aPersData array of filters as obtain by the persistence layer
	 * @param {string} sName Name of the filter
	 * @param {string} sGroupName Group name of the filter
	 * @returns {object} filter info object
	 */
	FilterBar.prototype._checkForFilterInfo = function(aPersData, sName, sGroupName) {

		var i;
		var oFilterInfo = null;

		if (aPersData && aPersData.length) {
			for (i = 0; i < aPersData.length; i++) {

				if (aPersData[i].name === sName) {

					// thisMode is used to determine if SmartFilterBar is used
					if ((aPersData[i].group === sGroupName) || this.isLiveMode) {
						oFilterInfo = aPersData[i];
						break;
					}

				}

			}
		}

		return oFilterInfo;
	};

	/**
	 * Creates the variant management control.
	 * @private
	 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} the instance of variant management
	 */
	FilterBar.prototype._createVariantManagement = function() {

		var oVarMgm = new SmartVariantManagementUi2(this.getId() + "-variantUi2", {
		// showExecuteOnSelection: true,
		// showShare: true
		});

		var oPersInfo = new PersonalizableInfo({
			type: "filterBar",
			keyName: "persistencyKey"
		});
		oPersInfo.setControl(this);

		oVarMgm.addPersonalizableControl(oPersInfo);

		oVarMgm.addStyleClass("sapUiCompFilterBarMarginLeft");
		return oVarMgm;
	};

	FilterBar.prototype.fireAssignedFiltersChanged = function() {
		this.fireEvent("assignedFiltersChanged");
	};

	/**
	 * Retrieves the labels of all visible filters that belongs to the current variant and have an assigned value.
	 * @public
	 * @returns {array} Filter labels that represents relevant filters with values
	 */
	FilterBar.prototype.retrieveFiltersWithValuesAsText = function() {
		var sText, sCSVText, aFiltersWithValues = this.retrieveFiltersWithValues(), nCount, sBasicSearchValue = this.getBasicSearchValue();

		if (sBasicSearchValue && aFiltersWithValues) {
			aFiltersWithValues.splice(0, 0, sBasicSearchValue);
		}

		if (!aFiltersWithValues || (aFiltersWithValues.length === 0)) {
			sText = this._oRb.getText("FILTER_BAR_ASSIGNED_FILTERS_ZERO");
		} else {

			/* eslint-disable no-lonely-if */
			if (!this._isPhone()) {
				nCount = Math.min(5, aFiltersWithValues.length);
				sCSVText = "";
				for (var i = 0; i < nCount; i++) {
					sCSVText += aFiltersWithValues[i];
					if (i < (nCount - 1)) {
						sCSVText += ', ';
					}
				}

				sText = this._oRb.getText("FILTER_BAR_ASSIGNED_FILTERS", [
					aFiltersWithValues.length, sCSVText
				]);

				if (nCount < aFiltersWithValues.length) {
					sText += ", ...";
				}

			} else {
				sText = this._oRb.getText("FILTER_BAR_ASSIGNED_FILTERS_MOBILE", [
					aFiltersWithValues.length
				]);
			}

			/* eslint-disable no-lonely-if */
		}

		return sText;
	};

	/**
	 * Retrieves the labels of all visible filters that belongs to the current variant and have an assigned value.
	 * @public
	 * @returns {array} Filter labels that represents relevant filters with values
	 */
	FilterBar.prototype.retrieveFiltersWithValues = function() {

		var i, aResultingFilters = [];
		var aFilters = this._getFiltersWithValues();
		if (aFilters) {
			for (i = 0; i < aFilters.length; i++) {
				if (aFilters[i].getVisible() && aFilters[i].getPartOfCurrentVariant()) {
					aResultingFilters.push(aFilters[i].getLabel());
				}
			}
		}

		return aResultingFilters;
	};

	/**
	 * Retrieves all filters with values.
	 * @private
	 * @returns {array} of filters with values
	 */
	FilterBar.prototype._getFiltersWithValues = function() {

		if (this._fRegisterGetFiltersWithValues) {
			try {
				return this._fRegisterGetFiltersWithValues();
			} catch (ex) {
				jQuery.sap.log.error("callback for obtaining the filter count throws an exception");
			}
		}

		return null;
	};

	/**
	 * Retrieve the count for visible filters with values.
	 * @private
	 * @returns {number} count of visible filters with values
	 */
	FilterBar.prototype._getFiltersWithValuesCount = function() {

		var n = 0;

		var aFilters = this.retrieveFiltersWithValues();
		n = aFilters.length;

		if (this._oBasicSearchField && this._oBasicSearchField.getValue && this._oBasicSearchField.getValue()) {
			n++;
		}

		return n;
	};

	/**
	 * Determines if at least one filter is visible.
	 * @private
	 * @param {array} aFilterItemsWithValues contains all filters with values
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem filter to check
	 * @returns {boolean} indicated whether at least one filter is visible
	 */
	FilterBar.prototype._checkFilterForValue = function(aFilterItemsWithValues, oFilterItem) {

		var i;
		if (aFilterItemsWithValues) {
			for (i = 0; i < aFilterItemsWithValues.length; i++) {
				if (aFilterItemsWithValues[i] === oFilterItem) {
					return true;
				}
			}
		}

		return false;
	};

	FilterBar.prototype._handleVisibilityOfToolbar = function() {

		if (this.getAdvancedMode() && this._oToolbar) {

			var bFlag = false;

			var aContent = this._oToolbar.getContent();
			for (var i = 0; i < aContent.length; i++) {
				if (aContent[i] instanceof ToolbarSpacer) {
					continue;
				}

				if (aContent[i].getVisible && aContent[i].getVisible()) {
					bFlag = true;
					break;
				}
			}

			this._oToolbar.setVisible(bFlag);
		}
	};

	/**
	 * Toggles the filterbar mode Hide/Show.
	 * @private
	 */
	FilterBar.prototype._toggleHideShow = function() {

		this.setFilterBarExpanded(!this.getFilterBarExpanded());
	};

	/**
	 * Updates the 'Filters'-button text with the count of filters with values
	 * @private
	 */
	FilterBar.prototype._updateToolbarText = function() {

		var sFiltersKey = this._isNewFilterBarDesign() ? "FILTER_BAR_ADAPT_FILTERS" : "FILTER_BAR_ACTIVE_FILTERS";
		var sZeroFiltersKey = this._isNewFilterBarDesign() ? "FILTER_BAR_ADAPT_FILTERS_ZERO" : "FILTER_BAR_ACTIVE_FILTERS_ZERO";

		var nFilterCount = this._getFiltersWithValuesCount();
		var sText = nFilterCount ? (this._oRb.getText(sFiltersKey, [
			nFilterCount
		])) : (this._oRb.getText(sZeroFiltersKey));
		this._oFiltersButton.setText(sText);
		this._oFiltersButton.setTooltip(sText);

		this.fireAssignedFiltersChanged();

	};

	FilterBar.prototype.setFilterBarExpanded = function(bShowExpanded) {

		if (this.getAdvancedMode()) {

			this.setProperty("filterBarExpanded", bShowExpanded);

			if (this._oHideShowButton) {
				if (bShowExpanded) {
					this._oHideShowButton.setText(this._oRb.getText("FILTER_BAR_VH_HIDE"));
				} else {
					this._oHideShowButton.setText(this._oRb.getText("FILTER_BAR_VH_SHOW"));
				}
			}
			// this._oHideShowButton.setVisible(true);
			this._calcVisibilityGoButton();

			this._oAdvancedPanel.setVisible(bShowExpanded);

		} else {

			var bExpanded = this._isPhone() ? false : bShowExpanded;

			this.setProperty("filterBarExpanded", bExpanded);

			if (this._isNewFilterBarDesign()) {
				return;
			}

			if (this._isPhone()) {

				if (this._oHideShowButton) {
					this._oHideShowButton.setVisible(false);
				}
				this._calcVisibilityGoButton();

				this._oBasicAreaLayout.setVisible(false);

			} else {

				if (this._oHideShowButton) {
					if (bExpanded) {
						this._oHideShowButton.setText(this._oRb.getText("FILTER_BAR_HIDE"));
						this._oHideShowButton.setTooltip(this._oRb.getText("FILTER_BAR_HIDE"));

					} else {
						this._oHideShowButton.setText(this._oRb.getText("FILTER_BAR_SHOW"));
						this._oHideShowButton.setTooltip(this._oRb.getText("FILTER_BAR_SHOW"));
					}
					this._oHideShowButton.setVisible(true);
				}

				this._calcVisibilityGoButton();

				if (this._oHideShowButton) {
					if (this._oHideShowButton.getEnabled()) {
						this._oBasicAreaLayout.setVisible(bExpanded);
					} else {
						this._oBasicAreaLayout.setVisible(false);
					}
				}
			}

		}

		this._updateToolbarText();
	};

	/**
	 * Eventhandler for visibility change in the 'Filters'-dialog.
	 * @private
	 * @param {sap.m.Checkbox } oCheckBox on which the select-state was changed
	 * @param {sap.ui.comp.filterbar.FilterItem } oFilterItem manipulated by the checkbox
	 */
	FilterBar.prototype._selectionChangedInFilterDialog = function(oCheckBox, oFilterItem) {

		oFilterItem.setVisibleInFilterBar(oCheckBox.getSelected());

		if (this._getConsiderFilterChanges() && this._oVariantManagement && this._oVariantManagement.getEnabled()) {
			this._oVariantManagement.currentVariantSetModified(true);
		}

		this._bDirtyViaDialog = true;
	};

	/**
	 * Cross-checks if a mandatory filter has a value.
	 * @private
	 * @param {object } oEvent general event object
	 */
	FilterBar.prototype._mandatoryFilterChange = function(oEvent) {

		if (!oEvent) {
			return;
		}

		var params = oEvent.getParameters();
		if (!params || !params.oSource) {
			return;
		}

		var oItem = this._determineByControl(params.oSource);
		if (oItem && oItem.checkbox) {

			var oFilterItem = oItem.filterItem;

			if (!oFilterItem.getMandatory()) {
				return;
			}

			var bHasValue = this._hasFilterValue(oFilterItem);
			if (oFilterItem.getVisibleInFilterBar()) {
				if (bHasValue) {
					oItem.checkbox.setEnabled(true);
				} else {
					oItem.checkbox.setEnabled(false);
				}
			} else {
				/* eslint-disable no-lonely-if */
				if (!bHasValue) {
					oFilterItem.setVisibleInFilterBar(true);
					oItem.checkbox.setSelected(true);
					oItem.checkbox.setEnabled(false);
				}
				/* eslint-enable no-lonely-if */
			}
		}
	};

	/**
	 * Called from 'Filters'-dialog and creates the form containing all filters.
	 * @private
	 * @returns {sap.ui.layout.form.Form} the filter form
	 */
	FilterBar.prototype._createFiltersAndAdaptBasicArea = function() {

		var oForm;

		this._setConsiderFilterChanges(false);
		this._recreateBasicAreaContainer(true);

		oForm = this._createFilters();

		var aItems = this._retrieveVisibleAdvancedItems();
		if (this._oAddToFilterBarLabel && (!aItems || (aItems.length <= 0))) {
			this._oAddToFilterBarLabel.setVisible(false);
		}

		this._setConsiderFilterChanges(true);

		return oForm;
	};

	/**
	 * Determines how many filters of a specific group are yet not part of the current variant.
	 * @private
	 * @param {string} sGroupName name of the current group
	 * @returns {number} count of filters, for the current group, yet not part of the current variant
	 */
	FilterBar.prototype._determineNotAssignedFiltersCount = function(sGroupName) {

		var nCount = 0, i, oFilterItem;

		if (this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items) {
			for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
				oFilterItem = this._mAdvancedAreaFilter[sGroupName].items[i].filterItem;
				if (!oFilterItem.getVisible() || oFilterItem.getHiddenFilter()) {
					continue;
				}
				if (!oFilterItem.getPartOfCurrentVariant() && !oFilterItem.getVisibleInFilterBar()) {
					nCount++;
				}
			}
		}

		return nCount;
	};

	/**
	 * Handles the visibility of the passed oItem; adapts the more-link text; handles the visibility for the form-container.
	 * @private
	 * @param {object} oItem representing a filter
	 * @param {string} sGroupName name of the current group
	 */
	FilterBar.prototype._rerenderGroup = function(oItem, sGroupName) {

		var i;
		var oFilterItem;

		this._rerenderItem(oItem);
		this._adaptLinkText(sGroupName);

		if (oItem.formelement) {

			if (this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items && this._mAdvancedAreaFilter[sGroupName].formcontainer) {
				for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {

					oFilterItem = this._mAdvancedAreaFilter[sGroupName].items[i].filterItem;
					if (oFilterItem && oFilterItem.getVisible()) {
						this._mAdvancedAreaFilter[sGroupName].formcontainer.setVisible(true);
						return;
					}
				}

				this._mAdvancedAreaFilter[sGroupName].formcontainer.setVisible(false);
			}
		}
	};

	/**
	 * Sets the group's 'More'- link text containing the info about not yet assigned filters to the current group.
	 * @private
	 * @param {string} sGroupName name of the group
	 * @param {sap.m.Link } oLink control
	 * @param {number } nNotAssignedFilterCount count of not yet assigned filters
	 */
	FilterBar.prototype._setLinkTextAndCount = function(sGroupName, oLink, nNotAssignedFilterCount) {

		var sText;

		if (nNotAssignedFilterCount) {
			sText = this._oRb.getText("FILTER_BAR_SHOW_MORE_FILTERS", [
				nNotAssignedFilterCount
			]);
		} else {
			sText = this._oRb.getText("FILTER_BAR_SHOW_CHANGE_FILTERS");
		}

		oLink.setText(sText);
	};

	/**
	 * Sets the group's 'More'- link text containing the info about not yet assigned filters to the current group.
	 * @private
	 * @param {string} sGroupName name of the group
	 * @param {sap.m.Link } oLink control
	 */
	FilterBar.prototype._setLinkText = function(sGroupName, oLink) {

		var nNotAssignedFilterCount = this._determineNotAssignedFiltersCount(sGroupName);

		this._setLinkTextAndCount(sGroupName, oLink, nNotAssignedFilterCount);
	};

	/**
	 * Creates a link control for the current group. The link will open the 'Add/Remove Filters'- dialog
	 * @private
	 * @param {string} sGroupName name of the group
	 * @param {Title} oGroupTitle title of the group to which the link should belong
	 * @returns {sap.m.Link} link control
	 */
	FilterBar.prototype._createLink = function(sGroupName, oGroupTitle) {

		var sGroupNameId, that = this;

		sGroupNameId = IdentifierUtil.replace(sGroupName);

		var oLink = new Link(this.getId() + "-link-" + sGroupNameId);
		this._setLinkText(sGroupName, oLink);

		oLink.attachPress(function() {
			that._createAddRemoveFiltersDialog(sGroupName, oLink);
		});

		if (oGroupTitle) {
			oLink.addAriaLabelledBy(oGroupTitle);
		}

		return oLink;
	};

	/**
	 * Checks if running on phone.
	 * @private
	 * @returns {boolean} true if phone, false other wise
	 */
	FilterBar.prototype._isPhone = function() {

		return (Device.system.phone) ? true : false;
	};

	/**
	 * Checks if running on tablet.
	 * @private
	 * @returns {boolean} true if phone, false other wise
	 */
	FilterBar.prototype._isTablet = function() {
		return (Device.system.tablet && !Device.system.desktop) ? true : false;
	};

	FilterBar.prototype._createForm = function(oAdvancedLayout) {
		var that = this;
		var FiltersForm = null;

		FiltersForm = Form.extend('sap.ui.comp.filterbar.Form', {
			metadata: {},
			renderer: function(oRm, oControl) {
				FormRenderer.render.apply(this, arguments);
			}
		});
		(function() {
			FiltersForm.prototype.contentOnAfterRendering = function() {

				Form.prototype.contentOnAfterRendering.apply(this, arguments);

				that._adaptStyleSheet();

				if (that._oFilterDialog && that._oFilterDialog.isOpen() && (that._isNewFilterBarDesign() || !that._isPhone())) {
					that._repositionAddToFilterBarLabel();
				}
			};
		}());

		return new FiltersForm({
			editable: true,
			layout: oAdvancedLayout
		});
	};

	FilterBar.prototype._adaptStyleSheet = function() {

		var i, sOverFlowValue;
		var oItem, oTitleElement, n = null;

		for (n in this._mAdvancedAreaFilter) {
			if (n && this._mAdvancedAreaFilter[n].items) {

				for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
					oItem = this._mAdvancedAreaFilter[n].items[i];

					if (oItem && oItem.control && oItem.control instanceof MultiInput) {

						oTitleElement = oItem.control.$();
						if (oTitleElement) {
							sOverFlowValue = oTitleElement.parent().css("overflow");
							if (sOverFlowValue !== "visible") {
								oTitleElement.parent().css({
									"overflow": "visible"
								});
							}
						}
					}
				}
			}
		}

	};

	FilterBar.prototype._addFieldToFiltersDialog = function(oItem, oFormContainer, aFilters) {
		var oLabel, oCheckBox, oFormElement, bHasValue;

		if (!oItem && !oItem.filterItem || oItem.filterItem.getHiddenFilter()) {
			return;
		}

		var bShowFilter = this._determineVisibility(oItem.filterItem);

		if (oItem.control.getWidth) {
			oItem.width = oItem.control.getWidth();

			if (oItem.control.setWidth) {
				oItem.control.setWidth("100%");
			}
		}

		oLabel = oItem.filterItem.getLabelControl(this.getId());

		if (this.getConsiderGroupTitle()) {
			oLabel.setText(oItem.filterItem.getLabel());
		}

		oCheckBox = new CheckBox({
			tooltip: this._oRb.getText("FILTER_BAR_SHOW_IN_FILTERBAR")
		});
		oCheckBox.setSelected(oItem.filterItem.getVisibleInFilterBar());
		if (oItem.filterItem.getMandatory()) {
			bHasValue = this._checkFilterForValue(aFilters, oItem.filterItem);
			if (!bHasValue && oItem.filterItem.getVisibleInFilterBar()) {
				oCheckBox.setEnabled(false);
			}

// if (oItem.filterItem._isParameter()) {
// oCheckBox.setEnabled(false);
// }
		}
		oCheckBox.attachSelect(this._selectionChangedInFilterDialog.bind(this, oCheckBox, oItem.filterItem));

		if (this._isNewFilterBarDesign() || !this._isPhone()) {

// oLabel.setLayoutData(new GridData({
// span: "L3 M3 S12"
// }));
			oItem.control.setLayoutData(new GridData({
				span: "L8 M8 S11"
			}));
			oCheckBox.setLayoutData(new GridData({
				span: "L1 M1 S1"
			}));

		} else {
// oLabel.setLayoutData(new GridData({
// span: "L3 M3 S12"
// }));
			oItem.control.setLayoutData(new GridData({
				span: "L8 M8 S12"
			}));

			oCheckBox.setVisible(false);
		}

		oFormElement = new FormElement({
			label: oLabel,
			fields: [
				oItem.control, oCheckBox
			]
		});
		oFormElement.setVisible(bShowFilter);

		oItem.formelement = oFormElement;
		oItem.checkbox = oCheckBox;

		oFormContainer.addFormElement(oFormElement);

	};

	FilterBar.prototype._createHeaderAddToFilterBar = function(oFormContainer) {

		var oAddToFilterBarLabel, oFormElement;

		if (this._isNewFilterBarDesign() || !this._isPhone()) { // label 'Add To Filterbar'

			oAddToFilterBarLabel = new Label({
			// text: this._oRb.getText("FILTER_BAR_SHOW_IN_FILTERBAR")
			});

			oAddToFilterBarLabel.setLayoutData(new GridData({
				span: "L10 M10"
			}));

			oAddToFilterBarLabel.addStyleClass("sapUiCompFilterBarAddFilterLabel");
			this._oAddToFilterBarLabel = oAddToFilterBarLabel;

			oFormElement = new FormElement({
				label: oAddToFilterBarLabel,
				fields: []
			});

			oFormContainer.addFormElement(oFormElement);

			oAddToFilterBarLabel.setLabelFor(null);
		}

	};

	FilterBar.prototype._addBasicSearchAddToFilterBar = function(oFormContainer) {

		var oFormElement;

		if (!this._isPhone()) {

			this._oBasicSearchFieldClone = this._oBasicSearchField.clone();

			if (this._oToolbar) {
				this._replaceOnToolbar(this._oBasicSearchField, this._oBasicSearchFieldClone);
			} else {
				this._addBasicSearchToBasicArea(this._oBasicSearchFieldClone); // a new container was creted
			}

		} else {
			/* eslint-disable no-lonely-if */
			if (this.getAdvancedMode()) {
				this._oBasicSearchFieldClone = this._oBasicSearchField.clone();
			}
			/* eslint-enable no-lonely-if */
		}

		if (this._isNewFilterBarDesign() || !this._isPhone()) {
			this._oBasicSearchField.setLayoutData(new GridData({
				span: "L8 M8 S11",
				indent: "L3 M3 S0"
			}));
		} else {
			this._oBasicSearchField.setLayoutData(new GridData({
				span: "L8 M8 S12"
			}));
		}

		// FRANZ
		if (this._isPhone() && this.getAdvancedMode()) {
			oFormElement = new FormElement({
				fields: [
					this._oBasicSearchFieldClone
				]
			});
		} else {
			oFormElement = new FormElement({
				fields: [
					this._oBasicSearchField
				]
			});
		}

		oFormContainer.addFormElement(oFormElement);

	};

	FilterBar.prototype._isGroupEmpty = function(aItems) {

		var bIsEmpty = true;

		aItems.some(function(oItem) {
			if (oItem.filterItem && oItem.filterItem.getVisible() && !oItem.filterItem.getHiddenFilter()) {
				bIsEmpty = false;
				return true;
			}

			return false;
		});

		return bIsEmpty;
	};

	/**
	 * Creates the form containing all visible filters belonging to the current variant
	 * @private
	 * @returns {sap.ui.layout.form.Form} form with all filters
	 */
	FilterBar.prototype._createFilters = function() {

		var that = this, n = null, i, sGroupName;
		var oFormContainer = null, oFormElement, aFormElements, oItem;
		var oLink, oGroupTitle, bFirstGroup = true, nInvisibleCount;

		this._oClonedVM = null;

		var oAdvancedLayout = new ResponsiveGridLayout();
		oAdvancedLayout.setColumnsL(1);
		oAdvancedLayout.setLabelSpanL(3);
		oAdvancedLayout.setColumnsM(1);
		oAdvancedLayout.setLabelSpanM(3);

		var oForm = this._createForm(oAdvancedLayout);

		oForm.addStyleClass("sapUiCompFilterBarDialogForm");

		if (this._possibleToChangeVariantManagement() && this._oToolbar) {
			var idx = this._oToolbar.indexOfContent(this._oVariantManagement);
			if (idx >= 0) {
				this._oClonedVM = this._oVariantManagement.clone();
				this._oClonedVM._setSelectionByKey(this._oVariantManagement.getSelectionKey());
				this._replaceOnToolbar(this._oVariantManagement, this._oClonedVM);

				oFormContainer = new FormContainer();

				this._oVariantManagement.setLayoutData(new GridData({
					span: "L10 M10 S12"
				}));
				oFormElement = new FormElement({
					fields: this._oVariantManagement
				});

				oFormContainer.addFormElement(oFormElement);

				oForm.addFormContainer(oFormContainer);
			}

			oForm.addStyleClass("sapUiCompFilterBarGroupTitle");
		}

		// basic search field
		if (this._oBasicSearchField && !this._isNewFilterBarDesign()) {
			if (!oFormContainer) {
				oFormContainer = new FormContainer();
				oForm.addFormContainer(oFormContainer);
			}

			this._addBasicSearchAddToFilterBar(oFormContainer);
		}

		this._ensureFilterLoaded(null);

		// filters
		var aFilters = this._getFiltersWithValues();
		this._fRegisteredFilterChangeHandlers = function(oEvent) {
			that._mandatoryFilterChange(oEvent);
		};
		this.attachFilterChange(this._fRegisteredFilterChangeHandlers);

		this._oVariant.content = this.fetchVariant();
		if (this._oVariantManagement) {
			this._oVariant.key = this._oVariantManagement.getSelectionKey();
			this._oVariant.modified = this._oVariantManagement.currentVariantGetModified();
		}
		this._oInitialVariant = {};
		jQuery.extend(true, this._oInitialVariant, this._oVariant);

		for (n in this._mAdvancedAreaFilter) {
			if (n && this._mAdvancedAreaFilter[n].items) {

				if (n === FilterBar.INTERNAL_GROUP) {
					sGroupName = this._oRb.getText("FILTER_BAR_BASIC_GROUP");
				} else {
					sGroupName = this._mAdvancedAreaFilter[n].filterItem.getGroupTitle();
				}

				oGroupTitle = new Title({
					text: sGroupName
				});

				oFormContainer = new FormContainer({
					title: oGroupTitle
				});

				if (bFirstGroup && !this._isGroupEmpty(this._mAdvancedAreaFilter[n].items)) {
					bFirstGroup = false;
					this._createHeaderAddToFilterBar(oFormContainer);
					if (this._oBasicSearchField && this._isNewFilterBarDesign()) {
						this._addBasicSearchAddToFilterBar(oFormContainer);
					}
				}

				nInvisibleCount = 0;

				this._mAdvancedAreaFilter[n].formcontainer = oFormContainer;

				for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
					oItem = this._mAdvancedAreaFilter[n].items[i];

					this._addFieldToFiltersDialog(oItem, oFormContainer, aFilters);
					if (!oItem.filterItem.getVisible()) {
						nInvisibleCount++;
					}
				}

				aFormElements = oFormContainer.getFormElements();
				if (aFormElements && aFormElements.length > 0) {

					// More link
					if ((n !== FilterBar.INTERNAL_GROUP) && !this.getAdvancedMode()) {
						oLink = this._createLink(n, oGroupTitle);
						if (oLink) {

							if (this._isPhone()) {
								oLink.setLayoutData(new GridData({
									span: "L8 M8 S12"
								}));
							} else {
								oLink.setLayoutData(new GridData({
									span: "L8 M8 S12",
									indent: "L3 M3 S0"
								}));
							}

							oFormElement = new FormElement({
								fields: [
									oLink
								]
							});

							this._mAdvancedAreaFilter[n].link = oLink;

							oFormContainer.addFormElement(oFormElement);
						}

						if (nInvisibleCount === aFormElements.length) {
							oFormContainer.setVisible(false);
						}
					}

					oForm.addFormContainer(oFormContainer);
				}
			}
		}

		return oForm;

	};

	FilterBar.prototype._replaceOnToolbar = function(oControl, oNewControl) {
		var nIdx;
		if (this._oToolbar) {
			nIdx = this._oToolbar.indexOfContent(oControl);
			if (nIdx > -1) {
				this._oToolbar.insertContent(oNewControl, nIdx);
				this._oToolbar.removeContent(oControl);
			}
		}

	};

	/**
	 * Creates the content of the basic area, either by replacing the controls with their clones, or removing the clones and moving the original
	 * controls back to it.
	 * @private
	 * @param {boolean} bUseClone indicates if clones or 'original' controls should be placed inside the basic area
	 */
	FilterBar.prototype._recreateBasicAreaContainer = function(bUseClone) {

		var n = null, i;
		var oControl, oLabel;
		var oFilterGroupItem, oContainer, nWidth;

		if (this._possibleToChangeVariantManagement() && this._oToolbar && this._oClonedVM && this._oVariantManagement) {
			this._replaceOnToolbar(this._oClonedVM, this._oVariantManagement);
			this._oClonedVM.destroy();
			this._oClonedVM = null;
		}

		if (!this._isPhone() && this._oToolbar && this._oBasicSearchFieldClone && this._oBasicSearchField) {
			this._replaceOnToolbar(this._oBasicSearchFieldClone, this._oBasicSearchField);
			this._oBasicSearchFieldClone.destroy();
			this._oBasicSearchFieldClone = null;
		}

		var aContent = this._oBasicAreaLayout.removeAllContent();
		if (!bUseClone) {
			// do not destroy the buttons (new design) and the hint text
			if (aContent) {
				var endIdx = aContent.length;
				var startIdx = 0;
				if (this._isNewFilterBarDesign()) {
					if (this._isPhone()) {
						startIdx++;
					} else {
						endIdx--;
					}
				}
				for (i = startIdx; i < endIdx; i++) {
					if (aContent[i] !== this._oHintText) {
						aContent[i].destroy();
					}
				}
			}
		}

		if (this._isNewFilterBarDesign()) {
			this._addBasicSearchToBasicArea(this._oBasicSearchField);
			this._addButtonsToBasicArea();
		}

		for (n in this._mAdvancedAreaFilter) {
			if (n && this._mAdvancedAreaFilter[n].items) {

				for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
					oFilterGroupItem = this._mAdvancedAreaFilter[n].items[i].filterItem;

					if (oFilterGroupItem.getHiddenFilter()) {
						continue; // never consider hideen filters
					}

					nWidth = null;

					if (bUseClone) {

						if (!oFilterGroupItem.getVisible() || !oFilterGroupItem.getVisibleInFilterBar()) {
							continue; // handle only visible filters
						}

						oContainer = this._mAdvancedAreaFilter[n].items[i].container;
						if (oContainer) {
							if (oContainer.$() && oContainer.$().width()) {
								nWidth = oContainer.$().width();
							}
							oContainer.removeAllContent();
							oContainer.destroy();
						}

						oControl = this._mAdvancedAreaFilter[n].items[i].control.clone();
						oLabel = oFilterGroupItem.getLabelControl(this.getId()).clone();
						// label clone does not reset internal reference to the control
						oLabel.setLabelFor(null);

						if (this.getConsiderGroupTitle()) {
							// in advanced filters dialog the label should not contain group title
							oFilterGroupItem.getLabelControl(this.getId()).setText(oFilterGroupItem.getLabel());
						}
					} else {
						oControl = this._mAdvancedAreaFilter[n].items[i].control;
						oLabel = oFilterGroupItem.getLabelControl(this.getId());

						if (this._mAdvancedAreaFilter[n].items[i].width) {
							oControl.setWidth(this._mAdvancedAreaFilter[n].items[i].width);
						}
					}

					oContainer = this._addControlToBasicAreaContainer(oFilterGroupItem, oControl, oLabel);
					if (oContainer) {
						oContainer.setVisible(oFilterGroupItem.getVisible() && oFilterGroupItem.getVisibleInFilterBar());
						this._mAdvancedAreaFilter[n].items[i].container = oContainer;

						if (bUseClone && nWidth) {
							oContainer.setWidth(nWidth + "px");
						}
					}
				}
			}
		}
	};

	/**
	 * Search was executed. Check afterwards if any filer is in error state. Close dialog only in case non of the filters is in error state.
	 * @private
	 */
	FilterBar.prototype._searchRequested = function() {

		var oSearchAllowed, bInErrorState = false;

		if (this.verifySearchAllowed) {
			oSearchAllowed = this.verifySearchAllowed();
			if (oSearchAllowed.hasOwnProperty("pending")) {
				// if search is pending.. do nothing
				return;
			} else if (oSearchAllowed.hasOwnProperty("error") || oSearchAllowed.hasOwnProperty("mandatory")) {
				bInErrorState = true;
			}
		}

		if (bInErrorState) {
			this._bOKFiltersDialogTriggered = false;
			this._activateMainContent();
		} else {
			this._bOKFiltersDialogTriggered = true;
			if (!this.isLiveMode || !this.isLiveMode()) {
				this.search();
			} else {
				this._oFilterDialog.close();
			}
		}
	};

	FilterBar.prototype._activateMainContent = function() {
		var aContent = this.getFilterDialogContent();
		if (aContent && (aContent.length > 1)) {
			this.addFilterDialogContent(aContent[0]);
		}
	};

	FilterBar.prototype.fireSearch = function(oEvent) {

		if (this._oFilterDialog && this._bOKFiltersDialogTriggered) {
			this._oFilterDialog.close();
		}

		this.fireEvent("search", oEvent);

	};

	/**
	 * Close the 'Filters'-dialog and restores the filterbar.
	 * @private
	 * @param {sap.ui.layout.form.Form} oForm representing the filters
	 */
	FilterBar.prototype._closeDialogAndRestoreFilterBar = function(oForm) {

		this._sSearchCriteriaInFiltersDialog = null;

		this._oVariant = {};

		oForm.removeAllFormContainers();

		this._recreateBasicAreaContainer();

		this._deleteProperties();
		this._adaptGroupsTitle();

		if (this._fRegisteredFilterChangeHandlers) {

			this.detachFilterChange(this._fRegisteredFilterChangeHandlers);
			this._fRegisteredFilterChangeHandlers = null;
		}

		if (this.isLiveMode && this.isLiveMode()) {
			this.search();
		}

		this._updateToolbarText();
	};

	FilterBar.prototype._variantSave = function(oEvent) {

		var sKey;
		this._oVariant = {};

		this.fireBeforeVariantSave();

		if (this._oVariantManagement && this._oFilterDialog) {
			sKey = this._oVariantManagement.getSelectionKey();
			this._oVariant.key = sKey;
			this._oVariant.modified = false;
			this._oVariant.content = this._oVariantManagement.getVariantContent(this, sKey);
		}
	};

	FilterBar.prototype._afterVariantSave = function(oEvent) {

		this.fireAfterVariantSave();
	};

	FilterBar.prototype._variantSavePressed = function(oEvent) {

		this._bVariantSavePressed = true;

		if (this._oVariantManagement) {

			var sKey = this._oVariantManagement.getSelectionKey();
			var oCurrentItem = this._oVariantManagement.getItemByKey(this._oVariantManagement.getSelectionKey());

			if (!this._oVariantManagement._isIndustrySolutionModeAndVendorLayer() && ((sKey === this._oVariantManagement.getStandardVariantKey()) || (oCurrentItem && oCurrentItem.getReadOnly && oCurrentItem.getReadOnly()))) {
				this._oVariantManagement._openSaveAsDialog();
			} else {
				this._oVariantManagement._variantSavePressed();
			}

			this._bDirtyViaDialog = false;

			if (this._oInitialVariant && this._oVariantManagement._getVariantContent) {
				this._oInitialVariant.content = this._oVariantManagement._getVariantContent(this, sKey);
			}
		}

	};

	FilterBar.prototype._findFirstVisibleGroup = function() {
		var n = null;

		for (n in this._mAdvancedAreaFilter) {
			if (n && this._mAdvancedAreaFilter[n].formcontainer && this._mAdvancedAreaFilter[n].formcontainer.getVisible()) {
				return this._mAdvancedAreaFilter[n].formcontainer.getTitle();
			}
		}

		return null;
	};

	FilterBar.prototype._checkForCollision = function(oTitleElement, oLabelElement) {

		var oResizeDomRef = this._oFilterDialog.getDomRef("scroll");
		this._oLabelTextWidth = Math.max(oLabelElement.width(), this._oLabelTextWidth);
		if (!this._oLabelTextWidth) {
			return false;
		}

		// relevant in visual filterts scenario with initial non-standard filters dialog content
		if (!(oTitleElement.position() && oTitleElement.width())) {
			return false;
		}

		if ((this._oLabelTextWidth > 0) && oResizeDomRef && (oTitleElement.position().left + oTitleElement.width()) >= (oResizeDomRef.clientWidth - this._oLabelTextWidth - 32)) {
			if (this._oAddToFilterBarLabel) {
				this._oAddToFilterBarLabel.setText("");
			}

			return true;
		}

		return false;

	};

	FilterBar.prototype._repositionAddToFilterBarLabel = function() {

		if (this._isNewFilterBarDesign() || !this._isPhone()) {

			var oTitle = this._findFirstVisibleGroup();

			if (oTitle && this._oAddToFilterBarLabel) {

				var oTitleElement = oTitle.$();
				if (oTitleElement) {

					var oLabelElement = this._oAddToFilterBarLabel.$();
					if (oLabelElement) {

						oTitleElement.css({
							display: "inline"
						});

						if (this._checkForCollision(oTitleElement, oLabelElement)) {
							return;
						}

						var oTitlePosition = oTitleElement.offset();
						var oLabelOffset = oLabelElement.offset();
						if (oLabelOffset && oTitlePosition) {
							oLabelOffset.top = Math.ceil(oTitlePosition.top);
							oLabelElement.offset(oLabelOffset);

							if (!sap.ui.getCore().getConfiguration().getRTL()) {
								oLabelElement.css({
									left: "auto"
								});
							}
						}
					}
				}
			}

			if (this._oAddToFilterBarLabel && !this._oAddToFilterBarLabel.getText()) {
				this._oAddToFilterBarLabel.setText(this._oRb.getText("FILTER_BAR_SHOW_IN_FILTERBAR"));
			}
		}
	};

	// indicates a filter change in the control, but not in the model
	FilterBar.prototype._filterSetInErrorState = function(oControl) {
		if (this._oFilterDialog && this._oFilterDialog.isOpen()) {
			if (this._getConsiderFilterChanges() && this._oVariantManagement && this._oVariantManagement.getEnabled()) {
				this._oVariantManagement.currentVariantSetModified(true);
			}
			this._bDirtyViaDialog = true;
		}
	};

	FilterBar.prototype._cancelFilterDialog = function(bVariantSaveTriggered) {

		// in case the save variant was canceled by the user, set the dirty flag to true,
		// since the save variant was only possible with a dirty variant
		// BCP: 1670342256
		if (bVariantSaveTriggered && this._oVariantManagement) {
			this._bDirtyViaDialog = this._oVariantManagement._bSaveCanceled;
		}

		// BCP: 1780159203
		if (!this.getPersistencyKey() && (this.getUseSnapshot() === false)) {
			this.fireCancel();
			return;
		}

		if (this._oInitialVariant && this._oInitialVariant.content && this._bDirtyViaDialog) {

			this._resetFiltersInErrorValueState();

			this.applyVariant(this._oInitialVariant.content, "CANCEL");

			if (this._oVariantManagement) {
				if (!this._oVariantManagement.isPageVariant()) {
					this._oVariantManagement._setSelectionByKey(this._oInitialVariant.key);
				}
				this._oVariantManagement.currentVariantSetModified(this._oInitialVariant.modified);
			}

			this.fireCancel();
		}
	};

	/**
	 * Resets filters in value state error to value state none. The error value is set in control and not propagated to the model. It is not possible
	 * to restore a filter which was already in error state, once the filters dialog is opened.
	 * @private
	 */
	FilterBar.prototype._resetFiltersInErrorValueState = function() {
		var aNameControls;

		aNameControls = this._retrieveCurrentSelectionSet(true, true);
		aNameControls.forEach(function(oObj) {
			if (oObj.control && oObj.control.setValueState && oObj.control.getValueState) {
				if (oObj.control.getValueState() === ValueState.Error) {
					// oBind = oObj.control.getBinding("value");
					// if (oBind) {
					if (oObj.control.setValue) {
						oObj.control.setValue("");
					}
					// oBind.checkUpdate(true);
					oObj.control.setValueState(ValueState.None);
					// }
				}
			}

		});

	};

	/**
	 * Creates and shows the filters dialog. This method may only be called when FilterBar is displayed and basically accessible. It may also only be
	 * called when the filters dialog is currently not opened.
	 * @public
	 */
	FilterBar.prototype.showFilterDialog = function() {
		if (!this._oFilterDialog) {
			this._showFilterDialog();
		}
	};

	/**
	 * Enables to add application specific content to the filters dialog. If the content was not yet added it will be added. The content will be set
	 * to visible, all other filters dialog content will be set to invisible.
	 * @public
	 * @param {sap.ui.core.Control} oContent to be added; if empty, nothing is inserted.
	 * @returns {sap.ui.core.Control} oContent added or <code>null</code> when filters dialog is not active.
	 */
	FilterBar.prototype.addFilterDialogContent = function(oContent) {
		if (this._oFilterDialog && oContent) {
			var nIdx = this._oFilterDialog.indexOfContent(oContent);
			if (nIdx < 0) {
				this._oFilterDialog.addContent(oContent);
			}

			return this._setFilterDialogActiveContent(oContent);
		}

		return null;
	};

	/**
	 * Returns the filter dialog content. <code>Node:</code>The original content is a {@link sap.ui.layout.form.Form Form}. The form may be
	 * enhanced with a toolbar to enable the inner switch to an added custom content. Besides such operations, the original content should not be
	 * manipulated in any way.
	 * @public
	 * @returns {array} of filters dialog content.
	 */
	FilterBar.prototype.getFilterDialogContent = function() {
		if (this._oFilterDialog) {
			return this._oFilterDialog.getContent();
		}

		return null;
	};

	FilterBar.prototype._setFilterDialogActiveContent = function(oNewActiveContent) {
		var bActiveContentFound = false;
		if (this._oFilterDialog) {

			this.getFilterDialogContent().forEach(function(oContent) {
				if (oNewActiveContent === oContent) {
					oContent.setVisible(true);
					bActiveContentFound = true;
				} else {
					oContent.setVisible(false);
				}
			});

			if (bActiveContentFound) {
				return oNewActiveContent;
			}
		}

		return null;
	};

	FilterBar.prototype._getFilterDialogActiveContent = function() {
		var oActiveContent = null;
		if (this._oFilterDialog) {

			this.getFilterDialogContent().some(function(oContent) {
				if (oContent.getVisible()) {
					oActiveContent = oContent;
					return true;
				}

				return false;
			});
		}

		return oActiveContent;
	};

	/**
	 * Sets the width of the content area of the dialog. The passed dimension will be interpreted as 'px'.
	 * @public
	 * @param {Number} nWidth the content width of the filters dialog.
	 */
	FilterBar.prototype.setContentWidth = function(nWidth) {
		if (this._oFilterDialog) {
			this._oFilterDialog.setContentWidth(nWidth + "px");
		}
	};

	/**
	 * Sets the height of the content area of the dialog. The passed dimension will be interpreted as 'px'.
	 * @public
	 * @param {Number} nHeight the content height of the filters dialog.
	 */
	FilterBar.prototype.setContentHeight = function(nHeight) {
		if (this._oFilterDialog) {
			this._oFilterDialog.setContentHeight(nHeight + "px");
		}
	};

	/**
	 * Creates and shows the 'Filters'-dialog.
	 * @private
	 */
	FilterBar.prototype._showFilterDialog = function() {

		jQuery.sap.require("sap.m.Dialog");

		var that = this;

		this._oFilterDialog = new sap.m.Dialog(this.getId() + "-adapt-filters-dialog", {
			stretch: Device.system.phone,
			resizable: true,
			draggable: true
		});
		this._oFilterDialog.setParent(this);

		this._oFilterDialog.addStyleClass("sapUiPopupWithPadding");

		if (this.$().closest(".sapUiSizeCompact").length > 0) {
			this._oFilterDialog.addStyleClass("sapUiSizeCompact");
		}

		this._oFilterDialog.addStyleClass("sapUiCompFilterBarDialog");
		if (!this._isPhone()) {
			this._oFilterDialog.addStyleClass("sapUiCompFilterBarDialogNonPhone");
		}

		// oDialog.afterClose
		var sTitleKey = "FILTER_BAR_ADV_FILTERS_DIALOG";
		if (this._isNewFilterBarDesign()) {
			sTitleKey = "FILTER_BAR_ADAPT_FILTERS_DIALOG";
		}
		this._oFilterDialog.setTitle(this._oRb.getText(sTitleKey));

		this._oFilterDialog.addStyleClass("sapMH4FontSize");
		this._oFilterDialog.addStyleClass("sapMH4Style");

		this._oFilterDialog.setVerticalScrolling(true);

		var oSubHeader = new Bar();
		this._oFiltersSearchField = new SearchField({
			placeholder: this._oRb.getText("FILTER_BAR_SEARCH")
		});

		oSubHeader.addContentRight(this._oFiltersSearchField);
		this._oFilterDialog.setSubHeader(oSubHeader);

		var oForm = this._createFiltersAndAdaptBasicArea();
		if (!oForm) {
			jQuery.sap.log.error("Content for Advanced Filters Dialog could not be created");
			return;
		}
		this._oFilterDialog.addContent(oForm);

		this._oFiltersSearchField.attachLiveChange(function(oEvent) {
			if (this._oFilterDialog) {

				this.fireFiltersDialogSearchForFilters(oEvent.getParameters());

				this._triggerSearchInFilterDialog(oEvent);
			}
		}.bind(this));

		this._bOKFiltersDialogTriggered = false;
		this._bVariantSaveFiltersDialogTriggered = false;
		this._oFilterDialog.bDoNotAddToBasicArea = true;

		this._oFilterDialog.attachBeforeOpen(function() {
			this.fireFiltersDialogBeforeOpen();
		}.bind(this));

		this._oFilterDialog.attachAfterOpen(function() {

			if (!this._isPhone() && (oForm === this._getFilterDialogActiveContent())) {
				var oResizeDomRef = that._oFilterDialog.getDomRef("scroll");
				if (oResizeDomRef) {
					this.setContentWidth(oResizeDomRef.clientWidth);
					this.setContentHeight(oResizeDomRef.clientHeight);
				}
			}

		}.bind(this));

		this._oFilterDialog.attachBeforeClose(function() {

			if (!that._bOKFiltersDialogTriggered) {
				that._cancelFilterDialog(that._bVariantSaveFiltersDialogTriggered);
			}

			delete that._oFilterDialog.bDoNotAddToBasicArea;
			that._closeDialogAndRestoreFilterBar(oForm);
		});

		this._oFilterDialog.attachAfterClose(function() {
			that._oBasicAreaLayout.rerender(); // seems to be required from 1.32...

			that._oInitialVariant = null;
			that._oFilterDialog.destroy();
			that._oFilterDialog = null;

			that._showHintText();

			var parameter = {};
			parameter.context = that._bOKFiltersDialogTriggered ? "SEARCH" : "CANCEL";

			that.fireFiltersDialogClosed(parameter);

			if (that._isNewFilterBarDesign()) {
				that._fHandleResize();
			}
		});

		this._oFilterDialog.setInitialFocus(this._oFiltersSearchField);

		this._addFilterDialogButtons(oForm);

		this._bDirtyViaDialog = false;
		this._oFilterDialog.open();
	};

	/**
	 * Determines if the filters dialog is opene.
	 * @protected
	 * @returns {boolean} State of filters dialog
	 */
	FilterBar.prototype.isDialogOpen = function() {
		return this._oFilterDialog ? true : false;
	};

	FilterBar.prototype._addFilterDialogButtons = function(oForm) {

		jQuery.sap.require("sap.m.OverflowToolbarPriority");
		jQuery.sap.require("sap.m.OverflowToolbarLayoutData");

		var that = this;
		var oModel;
		var oVariantSaveButton = null, oClearButton, oRestoreButton, oSearchButton, oCancelButton;

		// search button
		oSearchButton = new Button(this.getId() + "-btnGoFilterDialog", {
			text: this._oRb.getText("FILTER_BAR_GO"),
			press: function() {
				oSearchButton.focus();
				that._dialogSearch(oForm);
			},
			layoutData: new sap.m.OverflowToolbarLayoutData({
				priority: sap.m.OverflowToolbarPriority.NeverOverflow
			}),
			type: ButtonType.Emphasized
		});
		this._oFilterDialog.addButton(oSearchButton);

		if (!this.getAdvancedMode()) {

			// variant save button
			if (this._oVariantManagement && this._oVariantManagement.getVisible()) {

				this._oVariantManagement._delayedControlCreation();
				if (this._oVariantManagement.oVariantSave) {

					oVariantSaveButton = new Button(this.getId() + "-btnSaveFilterDialog", {
						text: this._oRb.getText("VARIANT_MANAGEMENT_SAVE"),
						enabled: this._oVariantManagement.oVariantSave.getEnabled(),
						press: function() {
							that._dialogVariantSave(oForm);
						},
						layoutData: new sap.m.OverflowToolbarLayoutData({
							priority: sap.m.OverflowToolbarPriority.Low
						})
					});

					oModel = this._oVariantManagement.getModel("save_enablement");

					oVariantSaveButton.setModel(oModel);
					oVariantSaveButton.bindProperty("enabled", "/enabled");

					this._oFilterDialog.addButton(oVariantSaveButton);

				}
			}

			// clear button
			oClearButton = new Button(this.getId() + "-btnClearFilterDialog", {
				text: this._oRb.getText("FILTER_BAR_CLEAR"),
				visible: this.getShowClearButton(),
				press: function() {
					that._dialogClear(oForm);
				},
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.Low
				})
			});

			this._oFilterDialog.addButton(oClearButton);

			// restore button
			oRestoreButton = new Button(this.getId() + "-btnRestoreFilterDialog", {
				text: this._oRb.getText("FILTER_BAR_RESTORE"),
				visible: this.getShowRestoreButton(),
				press: function() {
					that._dialogRestore(oForm);
				},
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.Low
				})
			});

			if (oModel) {
				oRestoreButton.setEnabled(this._oVariantManagement.oVariantSave.getEnabled());
				oRestoreButton.setModel(oModel);
				oRestoreButton.bindProperty("enabled", "/enabled");
			}

			this._oFilterDialog.addButton(oRestoreButton);

			// Cancel button
			oCancelButton = new Button(this.getId() + "-btnCancelFilterDialog", {
				text: this._oRb.getText("FILTER_BAR_CANCEL"),
				press: function() {
					that._dialogCancel(oForm);
				},
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.High
				})
			});
			this._oFilterDialog.addButton(oCancelButton);
		}
	};

	FilterBar.prototype._dialogSearch = function(oForm) {

		this.fireFiltersDialogSearch();

		this._searchRequested();

	};

	FilterBar.prototype._dialogCancel = function(oForm) {
		if (this._oFilterDialog) {
			this._bOKFiltersDialogTriggered = false;

			this.fireFiltersDialogCancel();

			this._oFilterDialog.close();
		}
	};

	FilterBar.prototype._dialogVariantSave = function(oForm) {
		this._bVariantSaveFiltersDialogTriggered = true;

		this._variantSavePressed();
	};

	FilterBar.prototype._dialogRestore = function(oForm) {

		// var bIsNotForm = (this._getFilterDialogActiveContent() !== oForm);
		// this.reset(bIsNotForm);
		this.reset();

// if (!bIsNotForm) {
		if (this._oVariantManagement && this._oVariantManagement.getEnabled()) {
			this._oVariantManagement.currentVariantSetModified(false);
		}
// }
	};

	FilterBar.prototype._dialogClear = function(oForm) {
		// var bIsNotForm = (this._getFilterDialogActiveContent() !== oForm);
		this.clear();
	};

	FilterBar.prototype._createButtons = function(oToolbar) {

		var that = this;

		this._oHideShowButton = new Button(this.getId() + "-btnShowHide", {
			text: this._oRb.getText("FILTER_BAR_HIDE"),
			tooltip: this._oRb.getText("FILTER_BAR_HIDE"),
			type: ButtonType.Transparent,
			enabled: false
		});
		this._oHideShowButton.attachPress(function() {
			that._toggleHideShow();
		});
		oToolbar.addContent(this._oHideShowButton);

		// clear button
		this._oClearButtonOnFB = new Button(this.getId() + "-btnClear", {
			visible: this.getShowClearOnFB(),
			text: this._oRb.getText("FILTER_BAR_CLEAR"),
			tooltip: this._oRb.getText("FILTER_BAR_CLEAR"),
			type: ButtonType.Transparent,
			enabled: false
		});
		this._oClearButtonOnFB.attachPress(function() {
			that.clear();
		});
		oToolbar.addContent(this._oClearButtonOnFB);

		this._oRestoreButtonOnFB = new Button(this.getId() + "-btnRestore", {
			visible: this.getShowRestoreOnFB(),
			text: this._oRb.getText("FILTER_BAR_RESTORE"),
			tooltip: this._oRb.getText("FILTER_BAR_RESTORE"),
			type: ButtonType.Transparent,
			enabled: false
		});
		this._oRestoreButtonOnFB.attachPress(function() {
			that.reset();
			if (that._oVariantManagement) {
				that._oVariantManagement.currentVariantSetModified(false);
			}
		});
		oToolbar.addContent(this._oRestoreButtonOnFB);

		this._oFiltersButton = new Button(this.getId() + "-btnFilters", {
			visible: this.getShowFilterConfiguration() || this._isPhone(),
			text: this._oRb.getText("FILTER_BAR_ACTIVE_FILTERS_ZERO"),
			tooltip: this._oRb.getText("FILTER_BAR_ACTIVE_FILTERS_ZERO"),
			type: ButtonType.Transparent,
			enabled: false
		});

		this._oFiltersButton.attachPress(function() {
			that._oFiltersButton.focus();
			that._showFilterDialog();
		});
		oToolbar.addContent(this._oFiltersButton);

		this._oSearchButton = new Button(this.getId() + "-btnGo", {
			visible: this.getShowGoOnFB(),
			text: this._oRb.getText("FILTER_BAR_GO"),
			tooltip: this._oRb.getText("FILTER_BAR_GO"),
			type: ButtonType.Emphasized
		});
		this._oSearchButton.attachPress(function() {
			that._oSearchButton.focus();
			that.search();
		});
		oToolbar.addContent(this._oSearchButton);
	};

	/**
	 * Creates the variant management.
	 * @private
	 * @returns {sap.ui.comp.variants.VariantManagement} the VM control
	 */
	FilterBar.prototype._createVariantLayout = function() {

		this._oVariantManagement = this._createVariantManagement();

		if (this._possibleToChangeVariantManagement()) {
			this._oVariantManagement.setVisible(false);
		}

		this._registerVariantManagement();

		return this._oVariantManagement;
	};

	FilterBar.prototype._createToolbar = function(bIgnoreVM) {

		var oToolbar = new Toolbar(this.getId() + "-toolbar");

		if (!bIgnoreVM) {
			var oVariantLayout = this._createVariantLayout();
			oToolbar.addContent(oVariantLayout);
		}

		oToolbar.addContent(new ToolbarSpacer());

		this._createButtons(oToolbar);

		oToolbar.addStyleClass("sapUiCompFilterBarToolbar");
		oToolbar.addStyleClass("sapUiCompFilterBarToolbarMarker");
		return oToolbar;
	};

	FilterBar.prototype._replaceVariantManagement = function(oVariantManagement) {
		if (this._oVariantManagement) {
			this._unregisterVariantManagement();

			if (this._oToolbar && this._oToolbar.getContent(this._oVariantManagement)) {
				this._oToolbar.removeContent(this._oVariantManagement);
			}

			this._oVariantManagement.destroy();
		}

		this._oVariantManagement = oVariantManagement;
		this._registerVariantManagement();

		this._adaptNewFilterBarDesign();
	};

	/**
	 * Creates the layout for the basic area.
	 * @private
	 * @returns {sap.ui.layout.HorizontalLayout} the layout for the selected fields
	 */
	FilterBar.prototype._createBasicAreaLayout = function() {

		// form for selection parameters
		var oBasicAreaLayout = new HorizontalLayout({
			visible: false
		});
		oBasicAreaLayout.setAllowWrapping(true);

		oBasicAreaLayout.addStyleClass("sapUiCompFilterBarWidth100");
		oBasicAreaLayout.addStyleClass("sapUiCompFilterBarBasicArea");
		return oBasicAreaLayout;
	};

	/**
	 * Creates the form for the advanced area, where all the filters will be placed. Only relevant for the value help scenario.
	 * @private
	 * @returns {sap.ui.layout.form.Form} the form for the filter fields
	 */
	FilterBar.prototype._createAdvancedAreaForm = function() {

		var oAdvancedLayout = new ResponsiveGridLayout();

		oAdvancedLayout.addStyleClass("sapUiCompFilterBarPaddingForm");

		oAdvancedLayout.setColumnsL(3);
		oAdvancedLayout.setColumnsM(2);
		var oForm = new Form({
			editable: true
		});
		oForm.setLayout(oAdvancedLayout);

		return oForm;
	};

	/**
	 * Adds a selection field to a FormContainer and this FormContainer to the basic area form.
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterItem filter
	 * @returns {sap.ui.layout.VerticalLayout} the container
	 */
	FilterBar.prototype._addControlToBasicAreaFormContainer = function(oFilterItem) {

		var oControl = oFilterItem.getControl();
		if (!oControl) {
			jQuery.sap.log.error("no Control obtained");
			return null;
		}

		var oLabel = oFilterItem.getLabelControl(this.getId());
		if (!oLabel) {
			jQuery.sap.log.error("no Label obtained");
			return null;
		}

		this._adaptGroupTitleForFilter(oFilterItem);

		return this._addControlToBasicAreaContainer(oFilterItem, oControl, oLabel);

	};

	/**
	 * Adds a selection field to a FormContainer and the FormContainer to the basic area form
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterBar} oFilterItem the filter item
	 * @param {sap.ui.core.Control} oControl the filter control
	 * @param {sap.m.Label} oLabel the label of the filter
	 * @returns {sap.ui.layout.VerticalLayout} the container
	 */
	FilterBar.prototype._addControlToBasicAreaContainer = function(oFilterItem, oControl, oLabel) {

		var oVLayout = new VerticalLayout();
		oVLayout.setLayoutData(new ResponsiveFlowLayoutData({
			margin: true
		}));

		if (oControl.setWidth) {
			oControl.setWidth("100%");
		}

		oVLayout.setWidth(this.getFilterContainerWidth());

		if (oLabel) {
			if (!oLabel.hasStyleClass("sapUiCompFilterLabel")) {
				oLabel.addStyleClass("sapUiCompFilterLabel");
			}
			oVLayout.addContent(oLabel);

			if (oLabel.setLabelFor) {
				if (oFilterItem && oControl) {
					oLabel.setLabelFor(oControl);
				} else if (oControl) {
					jQuery.sap.require("sap.ui.core.InvisibleText");
					var oInvisibleText = new sap.ui.core.InvisibleText({
						text: this._oRb.getText("FILTER_BAR_BSEARCH_PLACE_HOLDER")
					});

					oVLayout.addContent(oInvisibleText);
					oControl.addAriaLabelledBy(oInvisibleText);
				}
			}
		}

		oVLayout.addContent(oControl);

		oVLayout.addStyleClass("sapUiCompFilterBarPaddingRight");
		oVLayout.addStyleClass("sapUiCompFilterBarPaddingTop");

		if (!this.getAdvancedMode() && (!this._oFilterDialog || (!this._oFilterDialog.hasOwnProperty("bDoNotAddToBasicArea")))) {

			if (oFilterItem && oFilterItem.getVisible() && oFilterItem.getVisibleInFilterBar()) {
				if (this._isNewFilterBarDesign()) {
					var aContent = this._oBasicAreaLayout.getContent();
					if (this._isPhone()) {
						this._oBasicAreaLayout.addContent(oVLayout);
					} else {
						this._oBasicAreaLayout.insertContent(oVLayout, aContent.length - 1);
					}
				} else {
					this._oBasicAreaLayout.addContent(oVLayout);
				}
			}
		}

		return oVLayout;
	};

	FilterBar.prototype._rerenderAA = function() {

		this._oAdvancedAreaForm.removeAllFormContainers();

		var aControls = this._flattenMap();
		this._layOutAA(aControls);
	};

	/**
	 * Recreates the layout for all visible filters in the advanced area.
	 * @private
	 * @param {array} aControls list of visible advanced area filter elements
	 */
	FilterBar.prototype._layOutAA = function(aControls) {

		if (this._mAdvancedAreaFilter && Object.keys(this._mAdvancedAreaFilter).length > 1) {
			this._layOutAAMultipleGroup(aControls);
		} else {
			this._layOutAASingleGroup(aControls);
		}
	};

	/**
	 * Recreates the layout for all visible filters in the advanced area. Each Group will be rendered in a FormContainer.
	 * @private
	 * @param {array} aControls list of visible advanced area filter elements
	 */
	FilterBar.prototype._layOutAAMultipleGroup = function(aControls) {

		var i, j, nGroups = 0;
		var oFormContainer = null;

		for (i = 0; i < aControls.length; i++) {
			if (aControls[i].control === null) {
				nGroups++;
			}
		}

		var oAdvancedLayout = this._oAdvancedAreaForm.getLayout();
		if (oAdvancedLayout) {
			if (nGroups >= 3) {
				oAdvancedLayout.setLabelSpanL(5);
				oAdvancedLayout.setLabelSpanM(5);
				oAdvancedLayout.setColumnsL(3);
				oAdvancedLayout.setColumnsM(2);
			} else if (nGroups === 2) {
				oAdvancedLayout.setLabelSpanL(4);
				oAdvancedLayout.setLabelSpanM(5);
				oAdvancedLayout.setColumnsL(2);
				oAdvancedLayout.setColumnsM(2);
			} else if (nGroups === 1) {

				// + dummy group
				oAdvancedLayout.setLabelSpanL(4);
				oAdvancedLayout.setLabelSpanM(5);
				oAdvancedLayout.setColumnsL(2);
				oAdvancedLayout.setColumnsM(2);
			}
		}

		for (i = 0; i < aControls.length; i++) {
			if (aControls[i].control === null) {
				oFormContainer = new FormContainer();

				if (Object.keys(this._mAdvancedAreaFilter).length > 1) { // hide group when only one group is present

					oFormContainer.setTitle(aControls[i].filterItem.getGroupTitle());
				}
				this._oAdvancedAreaForm.addFormContainer(oFormContainer);

				j = i + 1;
				while (j < aControls.length && (aControls[j].control)) {
					this._addControlToAdvancedArea(aControls[j].filterItem, aControls[j].control, oFormContainer);
					j++;
				}

				i = j - 1;
			}
		}

		if (nGroups === 1) {
			this._oAdvancedAreaForm.addFormContainer(new FormContainer()); // dummy
		}
	};

	/**
	 * If only one group with multiple filter fields is available, it will be layouted in two columns. a dummy group will be created and the controls
	 * will be destributed between them.
	 * @private
	 * @param {array} aControls list of visible advanced area filter elements. First element is a group
	 */
	FilterBar.prototype._layOutAASingleGroup = function(aControls) { // adapt to LMS

		var i, idx, nCount, bMod;
		var nFields = aControls.length - 1;
		var nNewGroups = nFields > 2 ? 2 : 1;

		if (nNewGroups > 1) {
			nCount = Math.floor(nFields / nNewGroups);
			bMod = ((nCount * nNewGroups) < nFields);

			for (i = 1; i < nNewGroups; i++) {
				idx = i * nCount;
				if (bMod) {
					++idx;
				}

				if ((idx + i) < aControls.length) {
					aControls.splice(idx + i, 0, aControls[0]); // add dummy group
				}
			}
		}

		this._layOutAAMultipleGroup(aControls);
	};

	/**
	 * Converts the map containing the advanced area filters to an array for simpler handling; only visible filter items are considered.
	 * @private
	 * @returns {array} oControl the visible filter fields
	 */
	FilterBar.prototype._flattenMap = function() {

		var n = null, i;
		var aControls = [];
		var bGroupIsAdded;

		if (this._mAdvancedAreaFilter) {

			for (n in this._mAdvancedAreaFilter) {

				if (n && this._mAdvancedAreaFilter[n].items) {

					bGroupIsAdded = false;
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						var oItem = this._mAdvancedAreaFilter[n].items[i];

						if (oItem.filterItem && oItem.filterItem.getVisibleInFilterBar() && oItem.filterItem.getVisible() && !oItem.filterItem.getHiddenFilter()) {

							if (!bGroupIsAdded) {
								bGroupIsAdded = true;

								aControls.push({
									control: null,
									filterItem: this._mAdvancedAreaFilter[n].filterItem
								});
							}

							aControls.push({
								control: oItem.control,
								filterItem: oItem.filterItem
							});
						}
					}
				}
			}
		}

		return aControls;
	};

	/**
	 * Executes search in the 'Add/Remove Filters' dialog.
	 * @private
	 * @param {string} sValue the search string
	 */
	FilterBar.prototype._triggerSearchByValue = function(sValue) {

		var i, sText, sTooltip;
		var aContent;
		var bIsVisible;

		sValue = sValue.replace(/^\s+|\s+$/g, "").toLowerCase();

		if (this._aListItems) {

			var iSelectedItems = 0;
			for (i = this._aListItems.length - 1; i >= 0; i--) {

				aContent = this._aListItems[i].getContent();
				if (aContent && (aContent.length > 0)) {
					sText = aContent[0].getText();
					sTooltip = this._aListItems[i].data("quickinfo");
					// we want to show an item if it's either an item matching the search or if it's a group item with at least one item selected.
					if ((sText.toLowerCase().indexOf(sValue) >= 0 || (sTooltip && sTooltip.toLowerCase().indexOf(sValue) >= 0)) || (this._aListItems[i].hasStyleClass("sapUiCompFilterBarGroupListItem") && iSelectedItems > 0)) {

						bIsVisible = true;
						if (this._aListItems[i].hasStyleClass("sapUiCompFilterBarGroupListItem")) {

							if (!iSelectedItems) {
								bIsVisible = false; // matching text for group, but not hits in items
							}

						} else {
							iSelectedItems++; // a matching non-group item
						}
						this._aListItems[i].setVisible(bIsVisible);
					} else {
						this._aListItems[i].setVisible(false); // no hit
					}
				}
			}
		}
	};

	/**
	 * Reacts to search field selection.
	 * @private
	 * @param {object} oEvent containing the search string
	 */
	FilterBar.prototype._triggerSearch = function(oEvent) {

		if (!oEvent) {
			return;
		}

		var parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}

		var sValue = parameters.newValue ? parameters.newValue : "";

		this._triggerSearchByValue(sValue);
	};

	/**
	 * Reacts to search field selection. Hide all non matching list entries.
	 * @private
	 * @param {string} sValue the search string
	 */
	FilterBar.prototype._triggerSearchByValueInFilterDialog = function(sValue) {

		var n = null, i;
		var sText, sTooltip;
		var oGroupElement, oFilterItem;
		var nCountInvisibleElements;
		var nCountNonPartOfCurrentVariant;

		var bNoFilterIsVisible = true;

		sValue = sValue.replace(/^\s+|\s+$/g, "").toLowerCase();

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {

						nCountInvisibleElements = 0;
						nCountNonPartOfCurrentVariant = 0;

						for (i = 0; i < oGroupElement.items.length; i++) {
							if (oGroupElement.items[i] && oGroupElement.items[i].filterItem) {

								oFilterItem = oGroupElement.items[i].filterItem;

								if (oFilterItem.getHiddenFilter()) {
									++nCountInvisibleElements;
									continue;
								}

								if (oFilterItem.getVisible()) {

									if (sValue && oGroupElement.items[i].formelement) {

										sText = oFilterItem.getLabel();
										sTooltip = oFilterItem.getLabelTooltip();

										if ((sText.toLowerCase().indexOf(sValue) >= 0 || (sTooltip && sTooltip.toLowerCase().indexOf(sValue) >= 0))) {
											if (oFilterItem.getPartOfCurrentVariant()) {
												oGroupElement.items[i].formelement.setVisible(true);
											} else {
												++nCountNonPartOfCurrentVariant;
											}
										} else {
											++nCountInvisibleElements;
											oGroupElement.items[i].formelement.setVisible(false);
										}

									} else if (oGroupElement.items[i].formelement) {
										// reset to a state without considering search
										oGroupElement.items[i].formelement.setVisible(oFilterItem.getVisibleInFilterBar() || oFilterItem.getPartOfCurrentVariant());
										if (oGroupElement.link && !oGroupElement.link.getVisible()) {
											oGroupElement.link.setVisible(true);
										}
									}
								} else {
									++nCountInvisibleElements;
								}
							}
						}

						if (oGroupElement && oGroupElement.formcontainer) {
							if (nCountInvisibleElements === oGroupElement.items.length) {
								oGroupElement.formcontainer.setVisible(false);
							} else {

								bNoFilterIsVisible = false;

								oGroupElement.formcontainer.setVisible(true);

								if (oGroupElement.link) {
									oGroupElement.link.setVisible((sValue && (nCountNonPartOfCurrentVariant === 0)) ? false : true);

									if (sValue && (nCountNonPartOfCurrentVariant > 0)) {
										this._setLinkTextAndCount(n, oGroupElement.link, nCountNonPartOfCurrentVariant);
									} else {
										this._setLinkText(n, oGroupElement.link);
									}
								}
							}
						}
					}
				}
			}
		}

		if (this._oAddToFilterBarLabel) {
			this._oAddToFilterBarLabel.setVisible(!bNoFilterIsVisible);
		}
	};

	/**
	 * Reacts to search from 'Filters'- dialog. Hide all non matching list entries.
	 * @private
	 * @param {object} oEvent containing the search string
	 */
	FilterBar.prototype._triggerSearchInFilterDialog = function(oEvent) {

		if (!oEvent) {
			return;
		}

		var parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}

		var sValue = parameters.newValue ? parameters.newValue : "";

		this._sSearchCriteriaInFiltersDialog = sValue;

		this._triggerSearchByValueInFilterDialog(sValue);
	};

	/**
	 * Generate for a passed group all the filters in the 'Add/Remove Filters'-dialog
	 * @private
	 * @param {string} sGroupName filter group name
	 * @param {sap.m.List} oList containing the fields of a group
	 */
	FilterBar.prototype._generateListItems = function(sGroupName, oList) {

		jQuery.sap.require("sap.m.CustomListItem");

		var i;
		var oListItem, aAdvacedElements;
		// var aListItems = [];
		var oLabel;
		var bCompactMode = false;

		if (this.$().closest(".sapUiSizeCompact").length > 0) {
			bCompactMode = true;
		}

		if (sGroupName && this._mAdvancedAreaFilter) {

			aAdvacedElements = this._mAdvancedAreaFilter[sGroupName];

			if (aAdvacedElements && aAdvacedElements.items) {

				for (i = 0; i < aAdvacedElements.items.length; i++) {
					var oItem = aAdvacedElements.items[i];

					if (oItem && oItem.filterItem) {

						if (!oItem.filterItem.getVisible() || oItem.filterItem.getHiddenFilter()) {
							continue;
						}

						oListItem = new sap.m.CustomListItem();
						oListItem.setVisible(true);

						// details
						if (!bCompactMode) {
							oListItem.addStyleClass("sapUiCompFilterBarListItem");
						} else {
							oListItem.addStyleClass("sapUiCompFilterBarListItemCompact");
						}
						oListItem.data("quickinfo", oItem.filterItem.getLabelTooltip());

						oItem.initialPartOfCurrentVariant = oItem.filterItem.getPartOfCurrentVariant();
						oItem.initialVisibleInFilterBar = oItem.filterItem.getVisibleInFilterBar();

						oListItem.data('item', oItem);

						oLabel = new Label({
							text: oItem.filterItem.getLabel(),
							tooltip: oItem.filterItem.getLabelTooltip()
						});
						oListItem.addContent(oLabel);

						oList.addItem(oListItem);
						if (oItem.filterItem.getPartOfCurrentVariant()) {
							oList.setSelectedItem(oListItem);
						}

						if (oItem.filterItem.getMandatory() && oItem.checkbox && !oItem.checkbox.getEnabled()) {
							oListItem.getModeControl().setEnabled(false);
						}
					}
				}
			}
		}

		var that = this;
		oList.attachSelectionChange(function(oEvent) {
			if (oEvent) {
				var oParams = oEvent.getParameters();
				if (oParams) {
					var oListItem = oParams.listItem;
					if (oListItem) {
						var oCheckBox = oListItem.getModeControl();
						var oItem = oListItem.data('item');
						that._selectionChangedInAddFiltersDialog(oCheckBox, oItem);
					}
				}
			}
		});
	};

	/**
	 * Adapts the visibility of the filter containers.
	 * @private
	 * @param {object} oItem representing the filter item
	 */
	FilterBar.prototype._rerenderItem = function(oItem) {

		var bFlag;
		if (oItem) {

			bFlag = oItem.filterItem.getVisible() && oItem.filterItem.getVisibleInFilterBar();

			if (oItem.container) {
				oItem.container.setVisible(bFlag);

				if (bFlag) {
					this._addContainer(oItem);
				}
			}

			if (oItem.formelement) {
				oItem.formelement.setVisible(oItem.filterItem.getVisible() && (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()));
				if (oItem.checkbox) {
					oItem.checkbox.setSelected(oItem.filterItem.getVisibleInFilterBar());
				}
			}
		}
	};

	/**
	 * Adapt the visibility for all filter containers.
	 * @private
	 */
	FilterBar.prototype._rerenderFilters = function() {

		var i;
		var n = null;
		var oItem = null;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n && this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						oItem = this._mAdvancedAreaFilter[n].items[i];
						this._rerenderItem(oItem);
					}
				}
			}
		}

		this._updateToolbarText();
	};

	/**
	 * Adapts the visibility for all filter containers.
	 * @private
	 */
	FilterBar.prototype.rerenderFilters = function() {

		this._rerenderFilters();
	};

	/**
	 * Cleans-up and closes the 'Add/Remove Filters'- dialog.
	 * @private
	 * @param {string} sGroupName name of the group for which the filters will be displayed
	 * @param {sap.m.Link} oLink control from filters dialog
	 */
	FilterBar.prototype._closeAddRemoveFiltersDialog = function(sGroupName, oLink) {

		if (sGroupName && oLink) {
			if (this._sSearchCriteriaInFiltersDialog && this._oFilterDialog) {
				this._triggerSearchByValueInFilterDialog(this._sSearchCriteriaInFiltersDialog);
			} else {
				this._setLinkText(sGroupName, oLink);
			}
		}
	};

	/**
	 * Eventhandler for the 'Cancel'-button on the 'Add/Remove Filters'- dialog.
	 * @private
	 * @param {string} sGroupName name of the group for which the filters will be displayed
	 */
	FilterBar.prototype._cancelAddRemoveFiltersDialog = function(sGroupName) {

		var i;
		var oItem;

		if (sGroupName && this._mAdvancedAreaFilter && this._mAdvancedAreaFilter[sGroupName] && this._mAdvancedAreaFilter[sGroupName].items) {
			for (i = 0; i < this._mAdvancedAreaFilter[sGroupName].items.length; i++) {
				oItem = this._mAdvancedAreaFilter[sGroupName].items[i];
				if ((oItem.initialPartOfCurrentVariant !== undefined || oItem.initialVisibleInFilterBar !== undefined) && oItem.filterItem) {

					if (oItem.filterItem.getHiddenFilter()) {
						continue;
					}

					if ((oItem.initialPartOfCurrentVariant !== undefined) && (oItem.filterItem.getPartOfCurrentVariant() !== oItem.initialPartOfCurrentVariant)) {
						oItem.filterItem.setPartOfCurrentVariant(oItem.initialPartOfCurrentVariant);
						this._notifyAboutChangedFilters(oItem.initialPartOfCurrentVariant, oItem.control);
					}

					if ((oItem.initialVisibleInFilterBar !== undefined) && (oItem.filterItem.getVisibleInFilterBar() !== oItem.initialVisibleInFilterBar)) {
						oItem.filterItem.setVisibleInFilterBar(oItem.initialVisibleInFilterBar);
					}
				}
			}
		}

		if (this._oVariantManagement && (this._oVariant.modified2 !== undefined)) {
			this._oVariantManagement.currentVariantSetModified(this._oVariant.modified2);
		}
	};

	/**
	 * Creates the 'Add/Remove Filters' - dialog.
	 * @private
	 * @param {string} sGroupName filter group name
	 * @param {sap.m.Link} oLink more/clear filters link
	 */
	FilterBar.prototype._createAddRemoveFiltersDialog = function(sGroupName, oLink) {

		jQuery.sap.require("sap.m.Dialog");
		jQuery.sap.require("sap.m.ListMode");

		var i, that = this;

		if (!sGroupName) {
			return;
		}

		this._oDialog = new sap.m.Dialog(this.getId() + "-set-filters-dialog", {
			stretch: Device.system.phone,
			resizable: true,
			draggable: true
		});
		this._oDialog.addStyleClass("sapUiPopupWithPadding");
		this._oDialog.addStyleClass("sapUiCompAddRemoveFilterDialog");

		if (this.$().closest(".sapUiSizeCompact").length > 0) {
			this._oDialog.addStyleClass("sapUiSizeCompact");
		}

		this._oDialog.setTitle(this._oRb.getText("SELECT_FILTER_FIELDS"));

		this._oDialog.addStyleClass("sapMH4FontSize");
		this._oDialog.addStyleClass("sapMH4Style");

		this._oDialog.setVerticalScrolling(true);

		var oSubHeader = new Bar();
		var oSearchField = new SearchField({
			placeholder: this._oRb.getText("FILTER_BAR_SEARCH")
		});
		this._oSearchField = oSearchField;
		oSearchField.attachLiveChange(function(oEvent) {
			that._triggerSearch(oEvent);
		});

		oSubHeader.addContentRight(oSearchField);
		this._oDialog.setSubHeader(oSubHeader);

		var oList = new List({
			mode: sap.m.ListMode.MultiSelect
		});
		oList.setShowSeparators(ListSeparators.None);
		this._oDialog.addContent(oList);

		this._generateListItems(sGroupName, oList);

		this._aListItems = oList.getItems();

		for (i = 0; i < this._aListItems.length; i++) {
			oList.addItem(this._aListItems[i]);
		}

		if (this._oVariant && this._oVariantManagement) {
			this._oVariant.modified2 = this._oVariantManagement.currentVariantGetModified();
		}

		this._bOKButtonAddRemoveFilterDialogTriggered = false;
		// OK button
		var oOKButton = new Button(this.getId() + "-btnOKAddRemoveDialog", {
			text: this._oRb.getText("FILTER_BAR_OK")
		});
		oOKButton.attachPress(function() {
			that._bOKButtonAddRemoveFilterDialogTriggered = true;
			that._oDialog.close();
		});
		this._oDialog.addAggregation("buttons", oOKButton);

		this._oDialog.setInitialFocus(this._oSearchField);

		if (this._sSearchCriteriaInFiltersDialog) {
			this._oSearchField.setValue(this._sSearchCriteriaInFiltersDialog);
			this._triggerSearchByValue(this._sSearchCriteriaInFiltersDialog);
		}

		// Cancel button
		var oCancelButton = new Button(this.getId() + "-btnCancelAddRemoveDialog", {
			text: this._oRb.getText("FILTER_BAR_CANCEL"),
			press: function() {
				that._oDialog.close();
			}
		});
		this._oDialog.addAggregation("buttons", oCancelButton);

		this._oDialog.attachBeforeClose(function() {
			if (!that._bOKButtonAddRemoveFilterDialogTriggered) {
				that._cancelAddRemoveFiltersDialog(sGroupName);
			}

			that.rerenderFilters();

			that._closeAddRemoveFiltersDialog(sGroupName, oLink);

			if (that._oFilterDialog) {
				that._oFilterDialog.invalidate();
			}
		});

		this._oDialog.attachAfterClose(function() {
			this._aListItems = null;

			that._oDialog.destroy();
			that._oDialog = null;
		});

		this._oDialog.open();
	};

	/**
	 * Handles the selection change of the checkbox in the 'Add/Remove Filters' - dialog.
	 * @private
	 * @param {sap.m.Checkbox} oCheckBox representing visible in FilterBar
	 * @param {object} oItem internal object associated with this checkbox
	 */
	FilterBar.prototype._selectionChangedInAddFiltersDialog = function(oCheckBox, oItem) {

		var bVisible = oCheckBox.getSelected();

		if (!bVisible && oItem.filterItem.getMandatory() && !oItem.checkbox.getEnabled()) {
			oCheckBox.setSelected(true);
			return; // only enabled entries (mandatory with values) can be removed from the filters dialog
		}

		oItem.filterItem.setPartOfCurrentVariant(bVisible);
		oItem.filterItem.setVisibleInFilterBar(bVisible);

		// this._rerenderItem(oItem);

		this._notifyAboutChangedFilters(bVisible, oItem.control);
	};

	FilterBar.prototype._setTriggerFilterChangeState = function(bFlag) {

		this._triggerFilterChangeState = bFlag;
	};
	FilterBar.prototype._getTriggerFilterChangeState = function() {

		return this._triggerFilterChangeState;
	};

	/**
	 * Sets the semaphore for variant change.
	 * @private
	 * @param {boolean} bFlag setting the semaphore state
	 */
	FilterBar.prototype._setConsiderFilterChanges = function(bFlag) {

		this._filterChangeSemaphore = bFlag;
	};

	/**
	 * Retrieves the semaphore for variant change.
	 * @private
	 * @returns {boolean} the semaphore state
	 */
	FilterBar.prototype._getConsiderFilterChanges = function() {

		return this._filterChangeSemaphore;
	};

	/**
	 * Notifies about a filter change.
	 * @private
	 * @param {object} oEvent general event object
	 * @param {boolean} bDoNotPropagate if set do not raise the filterChange event
	 */
	FilterBar.prototype.fireFilterChange = function(oEvent) {

		this._updateToolbarText();

		if (!this._getTriggerFilterChangeState()) {
			return;
		}

		if (this._getConsiderFilterChanges() && this._oVariantManagement && this._oVariantManagement.getEnabled()) {
			this._oVariantManagement.currentVariantSetModified(true);
		}

		if (this._oFilterDialog && !(this._oFilterDialog.isOpen())) {
			return;
		}

		this._bDirtyViaDialog = true;
		this.fireEvent("filterChange", oEvent);

		if (this._isNewFilterBarDesign()) {
			// this._fHandleResize();
		}
	};

	/**
	 * Prepares event object and fire the 'filterChange' event.
	 * @private
	 * @param {boolean} bVisible indicated whether an filter was added or removed
	 * @param {sap.ui.core.Control} oControl which was either added or removed
	 */
	FilterBar.prototype._notifyAboutChangedFilters = function(bVisible, oControl) {

		var oObj, oFilterItem = this._determineByControl(oControl);

		if (bVisible) {
			oObj = {
				"added": oControl,
				"filterItem": oFilterItem
			};
		} else {
			oObj = {
				"deleted": oControl,
				"filterItem": oFilterItem
			};
		}

		this.fireFilterChange(oObj);

	};

	FilterBar.prototype._determineVariantFiltersInfo = function(bConsiderInvisibleFilters, bIgnoreConsiderFilter) {
		var i;
		var n = null, oItem, oFilter;
		var aFilters = [];
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					if (this._mAdvancedAreaFilter[n].items) {
						for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
							oItem = this._mAdvancedAreaFilter[n].items[i];
							if (bConsiderInvisibleFilters || oItem.filterItem.getVisible()) {
								oFilter = {
									group: oItem.filterItem.getGroupName(),
									name: oItem.filterItem.getName(),
									partOfCurrentVariant: oItem.filterItem.getPartOfCurrentVariant(),
									visibleInFilterBar: oItem.filterItem.getVisibleInFilterBar(),
									visible: oItem.filterItem.getVisible()
								};
								if (bIgnoreConsiderFilter || this._considerFilter(oFilter)) {
									aFilters.push(oFilter);
								}
							}
						}
					}
				}
			}
		}

		return aFilters;
	};

	FilterBar.prototype.mergeVariant = function(oBase, oDelta) {

		var oMerge = {};
		jQuery.extend(true, oMerge, oDelta);
		oMerge.filterbar = [];
		oMerge.filterBarVariant = {};

		jQuery.extend(true, oMerge.filterbar, oBase.filterbar);
		jQuery.extend(true, oMerge.filterBarVariant, oBase.filterBarVariant);

		if (oDelta && oDelta.version === "V2") {
			oMerge.filterbar = this._mergeVariantFields(oMerge.filterbar, oDelta.filterbar);
			oMerge.filterBarVariant = oDelta.filterBarVariant;
		}

		return oMerge;
	};

	FilterBar.prototype._mergeVariantFields = function(aBaseFilters, aDeltaFilters) {

		var i;

		aDeltaFilters.forEach(function(element) {
			for (i = 0; i < aBaseFilters.length; i++) {
				if ((aBaseFilters[i].group === element.group) && (aBaseFilters[i].name === element.name)) {
					aBaseFilters.splice(i, 1);
					break;
				}
			}

		});

		return aBaseFilters.concat(aDeltaFilters);

	};

	FilterBar.prototype._isUi2Mode = function() {
		if (this._oVariantManagement instanceof SmartVariantManagementUi2) {
			return true;
		}

		return false;
	};

	FilterBar.prototype._isDeltaHandling = function() {
		if (this._isUi2Mode()) {
			return false;
		}

		return this.getDeltaVariantMode();
	};

	FilterBar.prototype._getStandardVariant = function() {

		return this._oVariantManagement.getStandardVariant(this);

	};

	FilterBar.prototype._considerFilter = function(oFilter) {

		if (!this._isDeltaHandling()) {
			return true;
		}

		var oBaseFilter = null;
		var oStandardVariant = this._getStandardVariant();
		if (oStandardVariant && oStandardVariant.filterbar) {
			for (var i = 0; i < oStandardVariant.filterbar.length; i++) {
				if ((oStandardVariant.filterbar[i].group === oFilter.group) && (oStandardVariant.filterbar[i].name === oFilter.name)) {
					oBaseFilter = oStandardVariant.filterbar[i];
					break;
				}
			}
		}

		if (!oBaseFilter) {

			if (!oFilter.partOfCurrentVariant) {
				return false;
			}
			return true;
		}

		if ((oBaseFilter.partOfCurrentVariant !== oFilter.partOfCurrentVariant) || (oBaseFilter.visibleInFilterBar !== oFilter.visibleInFilterBar) || (oBaseFilter.visible !== oFilter.visible)) {
			return true;
		}

		return false;
	};

	/**
	 * Adds a filter to the form container.
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem the corresponding filter item
	 * @param {sap.ui.core.Control} oControl the control itself
	 * @param {sap.ui.layout.form.FormContainer} oFormContainer in which the control will be added
	 */
	FilterBar.prototype._addControlToAdvancedArea = function(oFilterItem, oControl, oFormContainer) {

		var oFormElement = new FormElement({
			label: oFilterItem.getLabelControl(this.getId()),
			fields: [
				(oControl !== null) ? oControl : new Text()
			]
		});

		oFormContainer.addFormElement(oFormElement);
	};

	/**
	 * Determines if an item is relevant for the query, based on its visibility.
	 * @private
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem which is beeing checked
	 * @returns {boolean} true for relevant, false for not relevat
	 */
	FilterBar.prototype._determineVisibility = function(oFilterItem) {

		var bVisible = false;

		if (oFilterItem) {
			bVisible = oFilterItem.getVisible() && (oFilterItem.getVisibleInFilterBar() || oFilterItem.getPartOfCurrentVariant());
			bVisible = bVisible && !oFilterItem.getHiddenFilter();
		}

		return bVisible;
	};

	/**
	 * Returns an array of all visible filters.
	 * @private
	 * @returns {array} all visible advanced items
	 */
	FilterBar.prototype._retrieveVisibleAdvancedItems = function() {

		var i, n = null, oItem;
		var aAdvancedItems = [];

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					if (this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
						for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
							oItem = this._mAdvancedAreaFilter[n].items[i];
							if (oItem) {
								// if (oItem.filterItem.getVisibleInFilterBar() || oItem.filterItem.getPartOfCurrentVariant()) {
								if (this._determineVisibility(oItem.filterItem)) {
									aAdvancedItems.push(oItem);
								}
							}
						}
					}
				}
			}
		}

		return aAdvancedItems;
	};

	/**
	 * Retrieves the controls for all visible filters.
	 * @private
	 * @param {boolean} bWithName determines the returning structure. Either list of controls, or list of filter name and control.
	 * @param {boolean} bConsiderParameters determines if parameters should be considered.
	 * @returns {array} all visible controls/filter name & controls
	 */
	FilterBar.prototype._retrieveCurrentSelectionSet = function(bWithName, bConsiderParameters) {

		var i, oItem, oObj, aArray = [];

		var aItems = this._retrieveVisibleAdvancedItems();

		for (i = 0; i < aItems.length; i++) {
			oItem = aItems[i];
			if (oItem.control && oItem.filterItem && (bConsiderParameters || !oItem.filterItem._isParameter())) {
				if (bWithName) {
					oObj = {
						name: aItems[i].filterItem.getName(),
						control: aItems[i].control
					};
				} else {
					oObj = aItems[i].control;
				}

				aArray.push(oObj);
			}
		}

		return aArray;
	};

	/**
	 * Executes the search event. Controls of all visible filters will be passed as event-parameters.
	 * @public
	 * @returns {boolean} indicates the validation result. true means no validation errors.
	 */
	FilterBar.prototype.search = function() {

		var parameter = {};
		parameter.selectionSet = this._retrieveCurrentSelectionSet(false);

		this.fireSearch(parameter);

		return true;
	};

	/**
	 * Executes the clear event. Controls of all visible filters will be passed as event-parameters.
	 * @private
	 */
	FilterBar.prototype.clear = function() {

		var parameter = {};
		parameter.selectionSet = this._retrieveCurrentSelectionSet(false);

		this._clearErrorState();

		this.fireClear(parameter);

		this._updateToolbarText();
	};

	/**
	 * Executes the reset event. Controls of all visible filters will be passed as event-parameters.
	 * @private
	 */
	FilterBar.prototype.reset = function() {

		var parameter = {};
		parameter.selectionSet = this._retrieveCurrentSelectionSet(false);

		this.fireReset(parameter);

		this._resetVariant();
	};

	/**
	 * Obtains from the variant management the current selected entry ands applies the corresponding variant. In case nothing was selected variant
	 * management returns null -> no variant will be applied.
	 * @private
	 */
	FilterBar.prototype._resetVariant = function() {

		var oVariant = null, oVariantSnapshot = null;

		this._resetFiltersInErrorValueState();

		if (this._oVariantManagement) { // in case a variant is currently selected, re-apply this variant

			var sKey = this._oVariantManagement.getSelectionKey();
			if (sKey) {

				oVariant = this._oVariantManagement.getVariantContent(this, sKey);
				if (this._oVariant) {
					this._oVariant.content = oVariant;
					this._oVariant.modified = false;

					if (this.getPersistencyKey() && this._oInitialVariant) {
						// BCP: 1780323271
						// reset the snapshot
						this._oInitialVariant.content = oVariant;
						this._oInitialVariant.modified = false;

						// BCP: 1770468283
						// reset the variant key
						this._oInitialVariant.key = sKey;
					}
				}

				if (!this.getPersistencyKey() && (this.getUseSnapshot() === undefined) && this._oInitialVariant && this._oInitialVariant.content) {
					oVariantSnapshot = this._oInitialVariant.content;
				}

				if (oVariant || oVariantSnapshot) {
					this.applyVariant(oVariant || oVariantSnapshot, "RESET");
				}
			}
		}

		this._resetFilterBarSearch();
		// this._bDirtyViaDialog = false;
	};

	FilterBar.prototype._resetFilterBarSearch = function() {

		this._sSearchCriteriaInFiltersDialog = "";

		if (this._oFiltersSearchField) {
			this._oFiltersSearchField.setValue(this._sSearchCriteriaInFiltersDialog);
			this._triggerSearchByValueInFilterDialog(this._sSearchCriteriaInFiltersDialog);
		}
	};

	/**
	 * Retrieve the data for a specific variant and apply it.
	 * @private
	 * @param {object} oVariant the variant
	 * @param {string} sContext may be undefined, RESET or CANCEL and indicates the source of the appliance
	 * @param {boolean} bInitial indicates if the apply was executed during the initialization phase
	 */
	FilterBar.prototype._applyVariant = function(oVariant, sContext, bInitial) {

		var aFieldsAndValues, aPersFields = null, bTriggerFilterChangeState, bExecuteOnSelection = false;

		if (oVariant) {

			if (bInitial) {
				bTriggerFilterChangeState = this._getTriggerFilterChangeState();
				this._setTriggerFilterChangeState(false);
			}

			this._setConsiderFilterChanges(false);

			aFieldsAndValues = oVariant.filterBarVariant;
			aPersFields = oVariant.filterbar;

			this._ensureFilterLoaded(aPersFields);
			this._reapplyVisibility(aPersFields);

			this._applyVariantFields(aFieldsAndValues);

			if (this._oBasicSearchField && this._oBasicSearchField.setValue) {
				this._oBasicSearchField.setValue("" || oVariant.basicSearch);
			}

			if (oVariant.executeOnSelection) {
				bExecuteOnSelection = oVariant.executeOnSelection;
			}

			this.fireAfterVariantLoad(sContext, bExecuteOnSelection);

			this._setConsiderFilterChanges(true);

			this._updateToolbarText();

			if (bExecuteOnSelection || (this.getLiveMode && this.getLiveMode())) {
				this.search();
			} else {
				this._clearErrorState();
			}

			if (bInitial) {
				this._setTriggerFilterChangeState(bTriggerFilterChangeState);
			}
		}
	};

	/**
	 * Triggers the registered callBack for fetching the current variant data.
	 * @private
	 * @returns {Object} the data representing part of the variant content
	 */
	FilterBar.prototype._fetchVariantFiltersData = function() {

		if (this._fRegisteredFetchData) {
			try {
				return this._fRegisteredFetchData();
			} catch (ex) {
				jQuery.sap.log.error("callback for fetching data throws an exception");
			}
		} else {
			jQuery.sap.log.warning("no callback for fetch data supplied");
		}

		return null;
	};

	/**
	 * Triggers the registered callBack for applying the variant data.
	 * @private
	 * @param {Object} oJson the data blob representing part of the variant content
	 * @returns {object} data to be stored as part of the variant content
	 */
	FilterBar.prototype._applyVariantFields = function(oJson) {

		if (this._fRegisteredApplyData) {
			try {
				return this._fRegisteredApplyData(oJson);
			} catch (ex) {
				jQuery.sap.log.error("callback for applying data throws an exception");
			}
		} else {
			jQuery.sap.log.warning("no callback for appy data supplied");
		}
	};

	FilterBar.prototype._isStandardVariant = function() {
		var sKey = this.getCurrentVariantId();
		if (!sKey) {
			return true;
		}
		if (this._oVariantManagement) {
			if ((sKey === this._oVariantManagement.getStandardVariantKey())) {
				return true;
			}

			if (this._oVariantManagement._oStandardVariant === null) {
				return true;
			}
		}

		return false;
	};

	/**
	 * Returns the information whether the flag 'executeOnSelect' is set or not on current variant.
	 * @public
	 * @returns {boolean} Flag 'executeOnSelect' flag. If varaint management is disabled <code>false</code> is retuned.
	 */
	FilterBar.prototype.isCurrentVariantExecuteOnSelectEnabled = function() {
		if (this._oVariantManagement && this._oVariantManagement.getEnabled()) {

			var sKey = this.getCurrentVariantId();
			if (!sKey) {
				return this._oVariantManagement.getExecuteOnSelectForStandardVariant();
			}

			var oItem = this._oVariantManagement.getItemByKey(sKey);
			if (oItem) {
				return oItem.getExecuteOnSelection();
			}
		}
		return false;
	};

	/**
	 * Creates and returns the variant representation.
	 * @returns {object} JSON object
	 * @public
	 */
	FilterBar.prototype.fetchVariant = function() {

		var aFiltersInfo, oVariant = {}, sBasicSearch;

		if (this._isDeltaHandling()) {
			if (!this._isStandardVariant()) {
				oVariant.version = "V2";
			}
		}

		this.fireBeforeVariantFetch();

		aFiltersInfo = this._determineVariantFiltersInfo(true, !oVariant.version);

		oVariant.filterbar = (!aFiltersInfo) ? [] : aFiltersInfo;

		oVariant.filterBarVariant = this._fetchVariantFiltersData();

		sBasicSearch = this._getBasicSearchValue();
		if (sBasicSearch) {
			oVariant.basicSearch = sBasicSearch;
		}

		if (this._oVariant && this._oVariant.content) {
			this._oVariant.content = oVariant;
		}

		return oVariant;
	};

	/**
	 * Applies the variant.
	 * @param {object} oVariant JSON object
	 * @param {string} sContext Describes in which context the variant is applied. The context is passed on to the application via the
	 *        afterVariantLoad event
	 * @param {boolean} bInitial indicates if the apply was executed during the initialization phase.
	 * @public
	 */
	FilterBar.prototype.applyVariant = function(oVariant, sContext, bInitial) {

		if (oVariant.version === "V2") {
			oVariant = this.mergeVariant(this._getStandardVariant(), oVariant, sContext);
		}

		this._applyVariant(oVariant, sContext, bInitial);

		if (bInitial && this._isNewFilterBarDesign()) {
			// this._fHandleResize();
		}
	};

	/**
	 * Retrieves the mandatory filters.
	 * @public
	 * @returns {array} Of visible mandatory filters
	 */
	FilterBar.prototype.determineMandatoryFilterItems = function() {

		var i;
		var aMandatoryFilters = [];

		var aItems = this._retrieveVisibleAdvancedItems();

		for (i = 0; i < aItems.length; i++) {
			if (aItems[i].filterItem.getMandatory() === true) {
				if (aItems[i].control) {
					aMandatoryFilters.push(aItems[i].filterItem);
				}
			}
		}

		return aMandatoryFilters;
	};

	/**
	 * Retrieves the control associated to the filter.
	 * @public
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem From the aggregations
	 * @param {boolean} bConsiderParameters check also analytics parameter
	 * @returns {sap.ui.core.Control} The corresponding control. If no match is found <code>null</code> is returned.
	 */
	FilterBar.prototype.determineControlByFilterItem = function(oFilterItem, bConsiderParameters) {

		var i, n = null;
		var oItem, oGroupElement;

		if (!oFilterItem || (!bConsiderParameters && oFilterItem._isParameter())) {
			return null;
		}

		if (this._aBasicAreaSelection) {
			for (i = 0; i < this._aBasicAreaSelection.length; i++) {
				oItem = this._aBasicAreaSelection[i];
				if (oFilterItem === oItem.filterItem) {
					return oItem.control;
				}
			}
		}

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {
						for (i = 0; i < oGroupElement.items.length; i++) {
							oItem = oGroupElement.items[i];
							if ((bConsiderParameters || !oItem.filterItem._isParameter()) && (oFilterItem === oItem.filterItem)) {
								return oItem.control;
							}
						}
					}
				}
			}
		}

		return null;
	};

	/**
	 * Retrieves the control based on the name and group name.
	 * @public
	 * @param {string} sName Name of the filter.
	 * @param {string} sGroupName Group name of the filter; <code>null</code> for filter that belongs to basic group.
	 * @returns {sap.ui.core.Control} The corresponding control, if no match is found, <code>null</code> is returned.
	 */
	FilterBar.prototype.determineControlByName = function(sName, sGroupName) {

		var oItem = this._determineEnsuredItemByName(sName, sGroupName);
		if (oItem && oItem.filterItem && !oItem.filterItem._isParameter()) {
			return oItem.control;
		}

		return null;
	};

	/**
	 * Retrieves the associated label based on the name and group name.
	 * @public
	 * @param {string} sName Name of the filter.
	 * @param {string} sGroupName Group name of the filter; <code>null</code> for filter that belongs to basic group.
	 * @returns {sap.m.Label} The associated Label, if no match is found, <code>null</code> is returned.
	 */
	FilterBar.prototype.determineLabelByName = function(sName, sGroupName) {

		var oItem = this._determineEnsuredItemByName(sName, sGroupName);
		if (oItem && oItem.filterItem) {
			return oItem.filterItem._oLabel;
		}

		return null;
	};

	FilterBar.prototype._determineEnsuredItemByName = function(sName, sGroupName) {

		if (!sGroupName) {
			sGroupName = this._determineGroupNameByName(sName);
		}

		this._ensureFilterLoaded([
			{
				name: sName,
				group: sGroupName
			}
		]);

		return this._determineItemByName(sName, sGroupName);
	};

	FilterBar.prototype._determineGroupNameByName = function(sName) {

		if (this._aFields) {
			for (var i = 0; i < this._aFields.length; i++) {
				if (this._aFields[i].fieldName === sName) {
					return this._aFields[i].groupName;
				}
			}
		}

		var oFilterItem = this._determineFilterItemByName(sName);
		if (oFilterItem) {
			var sGroupName = oFilterItem.getGroupName();
			if (sGroupName !== FilterBar.INTERNAL_GROUP) {
				return sGroupName;
			}
		}

		return null;
	};

	/**
	 * Retrieves the internal filter representation based on the name and (optional) group name.
	 * @private
	 * @param {string} sName the control's name
	 * @param {string} sGrpName sGroupName is null for basic area
	 * @returns {object} the corresponding internal item. If no match is found null will returned.
	 */
	FilterBar.prototype._determineItemByName = function(sName, sGrpName) {

		var i;
		var oItem, oGroupElement;
		var sGroupName = sGrpName;

		if (!sName) {
			return null;
		}

		if (!sGroupName) {
			sGroupName = FilterBar.INTERNAL_GROUP;
		}

		if (this._mAdvancedAreaFilter) {
			// check the filter
			oGroupElement = this._mAdvancedAreaFilter[sGroupName];
			if (oGroupElement && oGroupElement.items) {
				for (i = 0; i < oGroupElement.items.length; i++) {
					oItem = oGroupElement.items[i];
					if (oItem && oItem.filterItem && (oItem.filterItem.getName() === sName)) {
						return oItem;
					}
				}
			}
		}

		return null;
	};

	/**
	 * Retrieves the filter corresponding to the filter name.
	 * @public
	 * @param {string} sName the control's name
	 * @returns {sap.ui.comp.filterbar.FilterGroupItem} the corresponding filter item. If no match is found <code>null</code> will returned.
	 */
	FilterBar.prototype.determineFilterItemByName = function(sName) {

		var oItem = this._determineEnsuredItemByName(sName);
		if (oItem && oItem.filterItem) {
			return oItem.filterItem;
		}

		return null;
	};

	FilterBar.prototype._determineFilterItemByName = function(sName) {

		var n, oItem;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				oItem = this._determineItemByName(sName, n);
				if (oItem) {
					return oItem.filterItem;
				}
			}
		}

		return null;
	};

	/**
	 * Retrives for a givven control the corresponding filter.
	 * @private
	 * @param {sap.ui.core.Control} oControl for a filter
	 * @returns {object} the corresponding internal representation. If no match is found null will returned.
	 */
	FilterBar.prototype._determineByControl = function(oControl) {

		var n = null, i;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					var oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {
						for (i = 0; i < oGroupElement.items.length; i++) {
							if (oGroupElement.items[i] && oGroupElement.items[i].control === oControl) {
								return oGroupElement.items[i];
							}
						}
					}
				}
			}
		}

		return null;
	};

	/**
	 * Delete all 'Filters'-dialog specific informations.
	 * @private
	 */
	FilterBar.prototype._deleteProperties = function() {

		var n = null, i;

		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n) {
					var oGroupElement = this._mAdvancedAreaFilter[n];
					if (oGroupElement && oGroupElement.items) {

						if (oGroupElement.formcontainer) {
							oGroupElement.formcontainer.destroy();
							delete oGroupElement.formcontainer;
						}

						if (oGroupElement.link) {
							delete oGroupElement.link;
						}

						for (i = 0; i < oGroupElement.items.length; i++) {
							if (oGroupElement.items[i] && oGroupElement.items[i].checkbox) {
								delete oGroupElement.items[i].checkbox;
							}
							if (oGroupElement.items[i] && oGroupElement.items[i].formelement) {
								delete oGroupElement.items[i].formelement;
							}
						}
					}
				}
			}
		}
	};

	FilterBar.prototype.onAfterRendering = function(oEvent) {
		if (!this._bDoItOnce && !(this._isPhone() || this._isTablet())) {
			this._bDoItOnce = true;

			if (this._oHintText && this._oHintText.getVisible()) {
				this.setFilterBarExpanded(false);
			}
		}

		this._checkAndAdaptFilterWidth();
	};

	FilterBar.prototype._fHandleResize = function(oEvent) {

		if (!this._isPhone() && this._oFilterDialog && this._oFilterDialog.isOpen() && this._mAdvancedAreaFilter) {
			this._repositionAddToFilterBarLabel();
		}

		this._checkAndAdaptFilterWidth();

	};

	FilterBar.prototype._checkAndAdaptFilterWidth = function() {
		if (this._isNewFilterBarDesign() && !this._oFilterDialog) {
			this._adaptFilterWidth();
		}
	};

	FilterBar.prototype._adaptFilterWidth = function() {

		var i;

		if (!this._oBasicAreaLayout) {
			return;
		}

		if (!this._bIsInitialized) {
			return;
		}

		var aContainer = this._oBasicAreaLayout.getContent();
		if (!aContainer) {
			return;
		}

		for (i = aContainer.length - 1; i >= 0; i--) {
			if (!aContainer[i].getVisible()) {
				aContainer.splice(i, 1);
			}
		}

		if (aContainer.length < 1) {
			return;
		}

		var nWidthContainer = this._oBasicAreaLayout.$().width() - 1;

		var nWidth, nCalcWidth = this._calculateRequiredWidthAndResetToInitialWidth(aContainer);

		if (nCalcWidth > nWidthContainer) {
			nWidth = 0;
		} else {
			nWidth = aContainer[aContainer.length - 1].$().width() + 16;
		}

		var startIdx = 0, endIdx = aContainer.length - 1;
		if (this._isPhone()) {
			startIdx++;
			endIdx++;
		}

		var nFilters = 0;
		for (i = startIdx; i < endIdx; i++) {

			if ((nWidth + aContainer[i].$().width() + 16) > nWidthContainer) {
				break;
			}

			nWidth += aContainer[i].$().width() + 16;
			nFilters++;
		}

		var nDeltaFilter = Math.floor((nWidthContainer - nWidth) / nFilters);

		if ((nFilters === 1) && (nCalcWidth < nWidthContainer)) {
			nDeltaFilter = Math.floor(nDeltaFilter / 3);
		}

		if (nDeltaFilter > 0) {
			this._increaseFilterWidth(aContainer, nDeltaFilter, nWidthContainer);
		}

	};

	FilterBar.prototype._calculateRequiredWidthAndResetToInitialWidth = function(aContainer) {
		var i, nContainerWidth, nWidth = aContainer[aContainer.length - 1].$().width() + 16; // buttons

		var aItems = this._retrieveVisibleAdvancedItems();

		if (this._isPhone()) {
			nWidth = aContainer[0].$().width() + 16; // buttons
		} else {
			nWidth = aContainer[aContainer.length - 1].$().width() + 16; // buttons
		}

		if (this._oBasicSearchFieldContainer && this._oBasicSearchFieldContainer.$()) {
			this._oBasicSearchFieldContainer.$().width(this.getFilterContainerWidth());

			this._oBasicSearchFieldContainer.$().css({
				"min-width": this.getFilterContainerWidth()
			});

			this._oBasicSearchFieldContainer.$().css({
				"max-width": this._oBasicSearchFieldContainer.$().width() * 1.5
			});

			nWidth += this._oBasicSearchFieldContainer.$().width();
			nWidth += 16;
		}

		for (i = 0; i < aItems.length; i++) {
			if (aItems[i].filterItem && aItems[i].filterItem.getVisible() && aItems[i].filterItem.getVisibleInFilterBar()) {
				var oContainer = aItems[i].container;
				if (oContainer && oContainer.$()) {
					if (aItems[i].filterWidth) {
						nContainerWidth = oContainer.$().width();

						if (nContainerWidth !== aItems[i].filterWidth) {
							oContainer.$().width(aItems[i].filterWidth);
							nContainerWidth = aItems[i].filterWidth;
						}
					} else {

						oContainer.$().width(this.getFilterContainerWidth());
						nContainerWidth = oContainer.$().width();
						aItems[i].filterWidth = nContainerWidth;
					}

					oContainer.$().css({
						"min-width": nContainerWidth
					});

					oContainer.$().css({
						"max-width": nContainerWidth * 1.5
					});

					nWidth += nContainerWidth;
					nWidth += 16;
				}
			}
		}

		return nWidth;
	};

	FilterBar.prototype._increaseFilterWidth = function(aContainer, nDelta, nWidthContainer) {

		var nFilterWidth, startIdx = 0, endIdx = aContainer.length - 1;

		if (this._isPhone()) {
			startIdx++;
			endIdx++;
		}

		for (var i = startIdx; i < endIdx; i++) {
			nFilterWidth = aContainer[i].$().width() + nDelta;
			aContainer[i].$().width(nFilterWidth);
		}
	};

	FilterBar.prototype._destroyLazyFilterControl = function() {
		var j, oField;

		if (this._aFields && (this._aFields.length > 0)) {
			// delete eventuell not yet created filteritems
			if (this._aFields && this._aFields.length > 0) {
				for (j = 0; j < this._aFields.length; j++) {
					oField = this._aFields[j];

					if (oField.factory) {
						/* eslint-disable no-lonely-if */
						if (oField.control) {
							oField.control.destroy();
						}
						/* eslint-enable no-lonely-if */
					}
				}
			}
		}
	};

	FilterBar.prototype._destroyNonVisibleFilterControl = function() {
		var i, n, oItem;

		// delete currently not visible filteritems
		if (this._mAdvancedAreaFilter) {
			for (n in this._mAdvancedAreaFilter) {
				if (n && this._mAdvancedAreaFilter[n] && this._mAdvancedAreaFilter[n].items) {
					for (i = 0; i < this._mAdvancedAreaFilter[n].items.length; i++) {
						oItem = this._mAdvancedAreaFilter[n].items[i];
						if (oItem && oItem.container) {
							if (this._oBasicAreaLayout && (this._oBasicAreaLayout.indexOfContent(oItem.container) < 0)) {
								if (oItem.control && !oItem.bDestroyed) {
									oItem.control.destroy();
									oItem.bDestroyed = true;
								}
							}
						}
					}
				}
			}
		}

	};

	FilterBar.prototype._destroyFilterControls = function() {

		if (!this.getAdvancedMode()) {

			// delete eventuell not yet created filteritems
			this._destroyLazyFilterControl();

			// delete currently not visible filteritems
			this._destroyNonVisibleFilterControl();

		}
	};

	FilterBar.prototype._registerVariantManagement = function() {
		if (this._oVariantManagement) {
			this._oVariantManagement.attachSave(this._variantSave, this);
			this._oVariantManagement.attachAfterSave(this._afterVariantSave, this);
		}
	};

	FilterBar.prototype._unregisterVariantManagement = function() {

		if (this._oVariantManagement) {

			if (this._fInitialiseVariants) {
				this._oVariantManagement.detachInitialise(this._fInitialiseVariants);
				this._fInitialiseVariants = null;
			}

			this._oVariantManagement.detachSave(this._variantSave, this);
			this._oVariantManagement.detachAfterSave(this._afterVariantSave, this);

			// VM was created by the smart filterbar without a toolbar and has a custom-data persistency key
			// BCP: 1680052358
			// Destroy the VM whenever it was created, but not added to the UI-tree
			// BCP: 1670396582
			if ((!this.getUseToolbar() || this.getAdvancedMode()) && !this._oVariantManagement.getDomRef()) {
				this._oVariantManagement.destroy();
			}
		}
	};

	FilterBar.prototype.destroy = function() {

		// unregister eventhandler for resizing
		// jQuery(window).off("resize." + this.getId());
		sap.ui.core.ResizeHandler.deregister(this._hResizeListener);
		this._hResizeListener = null;

		this._unregisterVariantManagement();

		this._destroyFilterControls();

		Grid.prototype.destroy.apply(this, arguments);

		if (this._oDialog) {
			this._oDialog.destroy();
			this._oDialog = null;
		}

		if (this._oFilterDialog) {
			this._oFilterDialog.destroy();
			this._oFilterDialog = null;
		}

		if (this.oModel) {
			this.oModel.destroy();
			this.oModel = null;
		}

		this._aFields = null;

		this._oHintText = null;

		this._aBasicAreaSelection = null;
		this._mAdvancedAreaFilter = null;
		this._oBasicAreaLayout = null;
		this._oVariantManagement = null;

		this._oCollectiveSearch = null;

		this._oVariant = null;

		this._fRegisteredFetchData = null;
		this._fRegisteredApplyData = null;
		this._fRegisterGetFiltersWithValues = null;
		this._fRegisteredFilterChangeHandlers = null;

		this._oSearchButton = null;
		this._oFiltersButton = null;
		this._oHideShowButton = null;
		this._oClearButtonOnFB = null;
		this._oRestoreButtonOnFB = null;

		this._oAddToFilterBarLabel = null;

		this._oBasicSearchField = null;
		this._oBasicSearchFieldContainer = null;

		this._oButtonsVLayout = null;
	};

	// Hide the follwing sap.ui.layout.Grid functionality in jDoc
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#setDefaultIndent
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#getDefaultIndent
	 * @private
	 */

	/**
	 * @name sap.ui.comp.filterbar.FilterBar#setDefaultSpan
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#getDefaultSpan
	 * @private
	 */

	/**
	 * @name sap.ui.comp.filterbar.FilterBar#setHSpacing
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#getHSpacing
	 * @private
	 */

	/**
	 * @name sap.ui.comp.filterbar.FilterBar#setVSpacing
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#getVSpacing
	 * @private
	 */

	/**
	 * @name sap.ui.comp.filterbar.FilterBar#setPosition
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#getPosition
	 * @private
	 */

	/**
	 * @name sap.ui.comp.filterbar.FilterBar#setContainerQuery
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#getContainerQuery
	 * @private
	 */

	/**
	 * @name sap.ui.comp.filterbar.FilterBar#addContent
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#insertContent
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#removeContent
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#removeAllContent
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#destroyContent
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#getContent
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#indexOfContent
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#insertFilterItem
	 * @private
	 */
	/**
	 * @name sap.ui.comp.filterbar.FilterBar#insertFilterGroupItem
	 * @private
	 */

	return FilterBar;

}, /* bExport= */true);

}; // end of sap/ui/comp/filterbar/FilterBar.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.filterbar.FilterGroupItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.filterbar.FilterGroupItem.
jQuery.sap.declare('sap.ui.comp.filterbar.FilterGroupItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/filterbar/FilterGroupItem",['./FilterItem', 'sap/ui/comp/library'], 
	function(FilterItem, library) {
	"use strict";

	/**
	 * Constructor for a new FilterBar/FilterGroupItem.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class Represents a filter belonging to a group other than basic.
	 * @extends sap.ui.comp.filterbar.FilterItem
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.filterbar.FilterGroupItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FilterGroupItem = FilterItem.extend("sap.ui.comp.filterbar.FilterGroupItem", /** @lends sap.ui.comp.filterbar.FilterGroupItem.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Title of the group.
				 */
				groupTitle: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Name of the group.
				 */
				groupName: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to true, this filter is visible on the filter bar by default. Mapped against the <code>visibleInFilterBar</code> property.
				 * 
				 * @since 1.24.0
				 * @deprecated Since version 1.26.1. Replaced by property <code>visibleInFilterBar</code>
				 */
				visibleInAdvancedArea: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			}
		}
	});

	FilterGroupItem.prototype.init = function() {
		this.setVisibleInAdvancedArea(false);
		this._setParameter(false);
	};

	/**
	 * Setter for parameter indicator.
	 * 
	 * @private
	 * @param {bool} bValue Indicator if this is a parameter.
	 */
	FilterGroupItem.prototype._setParameter = function(bValue) {
		this._bIsParameter = bValue;
	};

	/**
	 * Setter for group title.
	 * 
	 * @public
	 * @param {string} sValue Group title
	 */
	FilterGroupItem.prototype.setGroupTitle = function(sValue) {
		this.setProperty("groupTitle", sValue);

		this.fireChange({
			propertyName: "groupTitle"
		});
	};

	/**
	 * Setter for visibility of filters in the filter bar.
	 * 
	 * @private
	 * @param {boolean} bValue State of visibility
	 */
	FilterGroupItem.prototype.setVisibleInAdvancedArea = function(bValue) {
		this.setVisibleInFilterBar(bValue);
	};

	/**
	 * Getter for visibility of filters in the filter bar.
	 * 
	 * @private
	 * @returns {boolean} bValue State of visibility
	 */
	FilterGroupItem.prototype.getVisibleInAdvancedArea = function() {
		return this.getVisibleInFilterBar();
	};

	/**
	 * Destroys this element.
	 * 
	 * @public
	 */
	FilterGroupItem.prototype.destroy = function() {
		FilterItem.prototype.destroy.apply(this, arguments);
	};

	return FilterGroupItem;

}, /* bExport= */true);

}; // end of sap/ui/comp/filterbar/FilterGroupItem.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.Factory') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * @namespace Factory to access <code>ushell</code> services.
 * @name sap.ui.comp.navpopover.Factory
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.36.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
jQuery.sap.declare('sap.ui.comp.navpopover.Factory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/navpopover/Factory",[
	'sap/ui/comp/library', 'sap/ui/comp/navpopover/FlexConnector'
], function(CompLibrary, FlexConnector) {
	"use strict";
	var Factory = {

		getService: function(sServiceName) {
			switch (sServiceName) {
				case "CrossApplicationNavigation":
					return sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
				case "URLParsing":
					return sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("URLParsing");
				case "FlexConnector":
					return FlexConnector;
				default:
					return null;
			}
		}
	};

	return Factory;
}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/Factory.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.NavigationPopover') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.NavigationPopover.
jQuery.sap.declare('sap.ui.comp.navpopover.NavigationPopover'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.ResponsivePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.Image'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ResponsivePopoverRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/NavigationPopover",[
	'jquery.sap.global', 'sap/m/Link', 'sap/m/ResponsivePopover', 'sap/m/Button', 'sap/m/Title', 'sap/m/Image', 'sap/m/Text', 'sap/ui/layout/form/SimpleForm', 'sap/m/VBox', 'sap/m/HBox', 'sap/m/ResponsivePopoverRenderer', './Factory', './LinkData', 'sap/ui/model/json/JSONModel'
], function(jQuery, Link, ResponsivePopover, Button, Title, Image, Text, SimpleForm, VBox, HBox, ResponsivePopoverRenderer, Factory, LinkData, JSONModel) {
	"use strict";

	/**
	 * Constructor for a new navpopover/NavigationPopover.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The NavigationPopover control is used to present information in a specific format. <b>Note</b>: This control is used by the
	 *        {@link sap.ui.comp.navpopover.NavigationPopoverHandler NavigationPopoverHandler} and must not be used manually.
	 * @extends sap.m.ResponsivePopover
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.NavigationPopover
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var NavigationPopover = ResponsivePopover.extend("sap.ui.comp.navpopover.NavigationPopover", /** @lends sap.ui.comp.navpopover.NavigationPopover.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * The name of the semantic object.
				 *
				 * @deprecated Since 1.40.0. The property <code>semanticObjectName</code> is obsolete as target determination is no longer done by
				 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
				 * @since 1.28.0
				 */
				semanticObjectName: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Describes the semantic attributes. The attribute has to be a map.
				 *
				 * @deprecated Since 1.40.0. The property <code>semanticAttributes</code> is obsolete as target determination is no longer done by
				 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
				 * @since 1.28.0
				 */
				semanticAttributes: {
					type: "object",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The application state key passed to retrieve the navigation targets.
				 *
				 * @deprecated Since 1.40.0. The property <code>appStateKey</code> is obsolete as target determination is no longer done by
				 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
				 * @since 1.28.0
				 */
				appStateKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Sets the description of the main navigation link. If <code>mainNavigation</code> also contains an href description, then
				 * <code>mainNavigationId</code> is displayed. If <code>mainNavigationId</code> is set to an empty string <code>''</code>,
				 * neither description nor subtitle are displayed.
				 *
				 * @since 1.28.0
				 */
				mainNavigationId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Determines the text of personalization link. If this property is set to some string, choosing the personalization link will trigger
				 * the <code>availableActionsPersonalizationPress</code> event. If this property is not set, the personalization link is not shown.
				 *
				 * @since 1.44.0
				 */
				availableActionsPersonalizationText: {
					type: "string",
					group: "Misc",
					defaultValue: undefined
				}
			},
			aggregations: {

				/**
				 * A list of available actions shown as links.
				 *
				 * @since 1.28.0
				 */
				availableActions: {
					type: "sap.ui.comp.navpopover.LinkData",
					multiple: true,
					singularName: "availableAction"
				},

				/**
				 * The main navigation link. If <code>mainNavigationId</code> is not set then <code>text</code> of <code>mainNavigation</code>
				 * is displayed. Otherwise the <code>mainNavigationId</code> is displayed.
				 *
				 * @since 1.28.0
				 */
				mainNavigation: {
					type: "sap.ui.comp.navpopover.LinkData",
					multiple: false
				},

				/**
				 * The navigation taking the user back to the source application.
				 *
				 * @deprecated Since 1.40.0. The property <code>ownNavigation</code> is obsolete as target determination is no longer done by
				 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
				 * @since 1.28.0
				 */
				ownNavigation: {
					type: "sap.ui.comp.navpopover.LinkData",
					multiple: false
				}
			},
			associations: {

				/**
				 * Source control for which the popover is displayed.
				 *
				 * @since 1.28.0
				 */
				source: {
					type: "sap.ui.core.Control",
					multiple: false
				},

				/**
				 * In addition to main navigation link and available links some additional content can be displayed in the popover.
				 *
				 * @since 1.28.0
				 */
				extraContent: {
					type: "sap.ui.core.Control",
					multiple: false
				},

				/**
				 * The parent component.
				 */
				component: {
					type: "sap.ui.core.Element",
					multiple: false
				}
			},
			events: {

				/**
				 * The navigation targets that are shown.
				 *
				 * @deprecated Since 1.40.0. The event <code>navigationTargetsObtained</code> is obsolete as target determination is no longer done
				 *             by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination. The event
				 *             <code>navigationTargetsObtained</code> is fired from NavigationPopoverHandler after navigation targets are
				 *             determined.
				 * @since 1.28.0
				 */
				targetsObtained: {},

				/**
				 * This event is fired when a link is chosen.
				 *
				 * @since 1.28.0
				 */
				navigate: {
					parameters: {
						/**
						 * The UI text shown in the chosen link
						 */
						text: {
							type: "string"
						},

						/**
						 * The navigation target of the chosen link
						 */
						href: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired when personalization of <code>availableActions</code> is chosen.
				 *
				 * @since 1.44.0
				 */
				availableActionsPersonalizationPress: {}
			}
		},
		renderer: ResponsivePopoverRenderer.render
	});

	NavigationPopover.prototype.init = function() {
		ResponsivePopover.prototype.init.call(this);

		var oModel = new JSONModel({
			mainNavigationLink: {
				title: undefined,
				subtitle: undefined,
				href: undefined,
				target: undefined
			},
			ownNavigation: undefined, // obsolete
			availableActions: [],
			availableActionsPressMap: {},
			availableActionsPersonalizationText: undefined,
			extraContent: undefined
		});
		oModel.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);
		oModel.setSizeLimit(1000);
		this.setModel(oModel, "$sapuicompNavigationPopover");

		this._bUseExternalContent = false;

		this.addStyleClass("navigationPopover");
		this.setContentWidth("380px");
		this.setHorizontalScrolling(false);
		this.setShowHeader(sap.ui.Device.system.phone);
		this.setPlacement(sap.m.PlacementType.Auto);
	};

	NavigationPopover.prototype.applySettings = function(mSettings) {
		if (mSettings && mSettings.customData && mSettings.customData.getProperty("key") === "useExternalContent") {
			this._bUseExternalContent = true;
		}
		this._createContent();
		ResponsivePopover.prototype.applySettings.apply(this, arguments);
	};

	// ----------------------- Public Methods --------------------------

	/**
	 * Determines the potential navigation targets for the semantical object and visualize the popover.
	 *
	 * @public
	 * @deprecated Since 1.42.0. Target determination is no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for
	 *             target determination.
	 */
	NavigationPopover.prototype.retrieveNavTargets = function() {

		var oXApplNavigation = Factory.getService("CrossApplicationNavigation");
		var oURLParsing = Factory.getService("URLParsing");
		if (!oXApplNavigation || !oURLParsing) {
			jQuery.sap.log.error("Service 'CrossApplicationNavigation' could not be obtained");
			// still fire targetsObtained event: easier for testing and the eventhandlers still could provide static links
			this.fireTargetsObtained();
			return;
		}

		var that = this;

		this.setMainNavigation(null);
		this.setOwnNavigation(null);
		this.removeAllAvailableActions();

		var oPromise = oXApplNavigation.getLinks({
			semanticObject: this.getSemanticObjectName(),
			params: this.getSemanticAttributes(),
			appStateKey: this.getAppStateKey(),
			ui5Component: this._getComponent(),
			sortResultOnTexts: true
		// ignoreFormFactor: false
		});
		oPromise.done(function(aLinks) {
			if (!aLinks || !aLinks.length) {
				that.fireTargetsObtained();
				return;
			}

			var sCurrentHash = oXApplNavigation.hrefForExternal();
			if (sCurrentHash && sCurrentHash.indexOf("?") !== -1) {
				// sCurrentHash can contain query string, cut it off!
				sCurrentHash = sCurrentHash.split("?")[0];
			}

			aLinks.forEach(function(oLink) {
				if (oLink.intent.indexOf(sCurrentHash) === 0) {
					// Prevent current app from being listed
					// NOTE: If the navigation target exists in
					// multiple contexts (~XXXX in hash) they will all be skipped
					that.setOwnNavigation(new LinkData({
						href: oLink.intent,
						text: oLink.text
					}));
					return;
				}
				// Check if a FactSheet exists for this SemanticObject (to skip the first one found)
				var oShellHash = oURLParsing.parseShellHash(oLink.intent);
				if (oShellHash.action && (oShellHash.action === 'displayFactSheet')) {
					// Prevent FactSheet from being listed in 'Related Apps' section. Requirement: Link with action 'displayFactSheet' should
					// be shown in the 'Main Link' Section
					that.setMainNavigation(new LinkData({
						href: oLink.intent,
						text: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_FACTSHEET")
					}));
					return;
				}

				that.addAvailableAction(new LinkData({
					href: oLink.intent,
					text: oLink.text
				}));
			});

			that.fireTargetsObtained();
		});
		oPromise.fail(function() {
			// Reset actions
			jQuery.sap.log.error("'retrieveNavTargets' failed");
		});
	};

	/**
	 * Displays the popover. This method should be called, once all navigation targets are adapted by the application.
	 *
	 * @public
	 */
	NavigationPopover.prototype.show = function(oDomRef) {
		if (!this._hasNavigationTargets()) {
			jQuery.sap.log.error("no navigation targets assigned");
			return;
		}
		var oControl = oDomRef || this._getControl();
		if (!oControl) {
			jQuery.sap.log.error("no source assigned");
			return;
		}

		this.openBy(oControl);
	};

	/**
	 * Returns link for direct navigation if the NavigationPopover has only <code>mainNavigation</code> or
	 * one <code>availableAction</code> and no <code>extraContent</code>.
	 *
	 * @returns {sap.m.Link | null} Link for direct navigation
	 * @public
	 */
	NavigationPopover.prototype.getDirectLink = function() {
		if (this._bUseExternalContent) {
			return this.getContent()[0].getDirectLink();
		}
		var oModel = this.getModel("$sapuicompNavigationPopover");

		// Extra content should be shown always, no direct navigation possible
		if (oModel.getProperty('/extraContent')) {
			return null;
		}

		// If only main navigation link exists, direct navigation is possible
		if (oModel.getProperty('/mainNavigationLink/href') && !oModel.getProperty('/availableActions').length) {
			return this._oHeaderArea.getItems()[0];
		}

		// If only one availabel action exists (independent whether it is visible or not), direct navigation is possible
		if (oModel.getProperty('/availableActions').length === 1 && !oModel.getProperty('/mainNavigationLink/href')) {
			return this._oActionArea.getItems()[0].getItems()[0];
		}
		return null;
	};

	/**
	 * @private
	 */
	NavigationPopover.prototype.hasContent = function() {
		if (this._bUseExternalContent) {
			return this.getContent()[0].hasContent();
		}
		var oModel = this.getModel("$sapuicompNavigationPopover");
		return !!oModel.getProperty("/mainNavigationLink/href") || !!oModel.getProperty("/availableActions").length || !!oModel.getProperty('/extraContent');
	};

	// ----------------------- Overwrite Property Methods --------------------------

	NavigationPopover.prototype.setMainNavigationId = function(sMainNavigationId) {
		if (this._bUseExternalContent) {
			throw "The API should not be used in case that the external content has been set";
		}
		this.setProperty("mainNavigationId", sMainNavigationId, true);
		var oModel = this.getModel("$sapuicompNavigationPopover");
		if (typeof sMainNavigationId === "string") {
			oModel.setProperty("/mainNavigationLink/title", sMainNavigationId);
		}
		return this;
	};

	NavigationPopover.prototype.setAvailableActionsPersonalizationText = function(sAvailableActionsPersonalizationText) {
		if (this._bUseExternalContent) {
			throw "The API should not be used in case that the external content has been set";
		}
		this.setProperty("availableActionsPersonalizationText", sAvailableActionsPersonalizationText, true);
		var oModel = this.getModel("$sapuicompNavigationPopover");
		oModel.setProperty("/availableActionsPersonalizationText", sAvailableActionsPersonalizationText);
		return this;
	};

	// ----------------------- Overwrite Aggregation Methods --------------------------

	// ----------------------- Overwrite Association Methods --------------------------

	NavigationPopover.prototype.setExtraContent = function(oControl) {
		if (this._bUseExternalContent) {
			throw "The API should not be used in case that the external content has been set";
		}
		var oModel = this.getModel("$sapuicompNavigationPopover");
		if (oModel.getProperty("/extraContent")) {
			this._getContentContainer().removeItem(1);
		}
		// Note: 'extraContent' is an association of an control which is created by application in 'navigationTargetsObtained' event. Now we have to
		// add this control to the popover content aggregation. Doing so the NavigationPopover is responsible for life cycle of this control which
		// will be destroyed together with NavigationPopover.
		if (typeof oControl === "string") {
			oControl = sap.ui.getCore().byId(oControl);
		}

		this._getContentContainer().insertItem(oControl, 1);

		this.setAssociation("extraContent", oControl);
		oModel.setProperty("/extraContent", oControl);
		return this;
	};

	NavigationPopover.prototype.setMainNavigation = function(oLinkData) {
		if (this._bUseExternalContent) {
			throw "The API should not be used in case that the external content has been set";
		}
		this.setAggregation("mainNavigation", oLinkData, true);
		if (!oLinkData) {
			return this;
		}
		var oModel = this.getModel("$sapuicompNavigationPopover");
		if (oLinkData.getHref()) {
			oModel.setProperty("/mainNavigationLink/href", this._convertToExternal(oLinkData.getHref()));
			oModel.setProperty("/mainNavigationLink/target", oLinkData.getTarget());
			this._oHeaderArea.removeStyleClass("navpopoversmallheader");
		} else {
			// oModel.setProperty("/mainNavigationLink/href", null);
			// oModel.setProperty("/mainNavigationLink/target", null);
			this._oHeaderArea.addStyleClass("navpopoversmallheader");
		}
		// Priority for 'title':
		// 1. 'mainNavigationId' 2. oLinkData.getText()
		// Note: Empty string '' have to lead that both title and subtitle will not be displayed. So if title is equal to '' then do not take over the
		// text of link.
		if (!oModel.getProperty("/mainNavigationLink/title") && oModel.getProperty("/mainNavigationLink/title") !== '') {
			oModel.setProperty("/mainNavigationLink/title", oLinkData.getText());
		}
		oModel.setProperty("/mainNavigationLink/subtitle", oLinkData.getDescription());
		return this;
	};

	NavigationPopover.prototype.addAvailableAction = function(oLinkData) {
		if (this._bUseExternalContent) {
			throw "The API should not be used in case that the external content has been set";
		}
		this.addAggregation("availableActions", oLinkData);
		if (!oLinkData) {
			return this;
		}

		oLinkData.setHref(this._convertToExternal(oLinkData.getHref()));
		oLinkData.setPress(this._onLinkPress.bind(this));

		var oModel = this.getModel("$sapuicompNavigationPopover");
		var iIndex = oModel.getProperty("/availableActions").length;
		oModel.getData().availableActions.splice(iIndex, 0, oLinkData.getJson());
		// TODO ändern auf oModel.setProperty("/availableActions", sAvailableActions;
		oModel.getData().availableActionsPressMap[oLinkData.getText() + "---" + oLinkData.getHref()] = this._onLinkPress.bind(this);
		oModel.refresh(true);
		return this;
	};

	NavigationPopover.prototype.insertAvailableAction = function(oLinkData, iIndex) {
		if (this._bUseExternalContent) {
			throw "The API should not be used in case that the external content has been set";
		}
		this.insertAggregation("availableActions", oLinkData, iIndex);
		if (!oLinkData) {
			return this;
		}

		oLinkData.setHref(this._convertToExternal(oLinkData.getHref()));
		oLinkData.setPress(this._onLinkPress.bind(this));

		var oModel = this.getModel("$sapuicompNavigationPopover");
		oModel.getData().availableActions.splice(iIndex, 0, oLinkData.getJson());
		// TODO ändern auf oModel.setProperty("/availableActions", sAvailableActions;
		oModel.getData().availableActionsPressMap[oLinkData.getText() + "---" + oLinkData.getHref()] = this._onLinkPress.bind(this);
		oModel.refresh(true);
		return this;
	};

	NavigationPopover.prototype.removeAvailableAction = function(oLinkData) {
		if (this._bUseExternalContent) {
			throw "The API should not be used in case that the external content has been set";
		}
		var iIndex = this.indexOfAvailableAction(oLinkData);
		if (iIndex > -1) {
			// Remove item data from model
			var oModel = this.getModel("$sapuicompNavigationPopover");
			oModel.getData().availableActions.splice(iIndex, 1);
			oModel.refresh(true);
		}
		oLinkData = this.removeAggregation("availableActions", oLinkData);
		return oLinkData;
	};

	NavigationPopover.prototype.removeAllAvailableActions = function() {
		if (this._bUseExternalContent) {
			throw "The API should not be used in case that the external content has been set";
		}
		var aAvailableActions = this.removeAllAggregation("availableActions");
		// Remove items data from model
		var oModel = this.getModel("$sapuicompNavigationPopover");
		oModel.setProperty("/availableActions", []);
		oModel.refresh(true);
		return aAvailableActions;
	};

	NavigationPopover.prototype.exit = function(oControl) {
		// destroy model and its data
		if (this.getModel("$sapuicompNavigationPopover")) {
			this.getModel("$sapuicompNavigationPopover").destroy();
		}
		ResponsivePopover.prototype.exit.apply(this, arguments);
	};

	NavigationPopover.prototype.onAfterRenderingActionForm = function() {
		var oModel = this.getModel("$sapuicompNavigationPopover");
		var $ContentContainer = oModel.getProperty("/extraContent") ? oModel.getProperty("/extraContent").$()[0] : undefined;

		if ($ContentContainer && $ContentContainer.scrollHeight > $ContentContainer.clientHeight) {
			// Change the default behavior for the case that all three sections can not fit the height of phone (e.g. the additionalContentSection is
			// larger then the spared place
			this._getContentContainer().setFitContainer(false).setJustifyContent(sap.m.FlexJustifyContent.Start);
		}
	};

	// -------------------------- Private Methods ------------------------------------

	/**
	 * @private
	 */
	NavigationPopover.prototype._createContent = function() {
		if (this._bUseExternalContent) {
			return;
		}
		var that = this;

		var oTitle = new Link({
			href: {
				path: '/mainNavigationLink/href'
			},
			text: {
				path: '/mainNavigationLink/title'
			},
			target: {
				path: '/mainNavigationLink/target'
			},
			visible: {
				path: '/mainNavigationLink/title',
				formatter: function(oTitle_) {
					return !!oTitle_;
				}
			},
			enabled: {
				path: '/mainNavigationLink/href',
				formatter: function(oValue) {
					return !!oValue;
				}
			},
			press: this._onLinkPress.bind(this)
		});
		oTitle.addStyleClass("navigationPopoverTitle");

		var oSubTitle = new Text({
			text: {
				path: '/mainNavigationLink/subtitle'
			},
			visible: {
				path: '/mainNavigationLink/subtitle',
				formatter: function(oValue) {
					return !!oValue;
				}
			}
		});

		this._oHeaderArea = new VBox({
			items: [
				oTitle, oSubTitle
			],
			visible: {
				path: '/mainNavigationLink/title',
				formatter: function(oTitle_) {
					return !!oTitle_;
				}
			}
		});
		this._oHeaderArea.addStyleClass("navigationPopoverTitleH1");
		this._oHeaderArea.addStyleClass("navigationPopoverHeader");
		this._oHeaderArea.setModel(this.getModel("$sapuicompNavigationPopover"));

		this._oActionArea = new VBox({
			visible: {
				parts: [
					{
						path: '/availableActions'
					}, {
						path: '/availableActionsPersonalizationText'
					}
				],
				formatter: function(aMAvailableActions, sAvailableActionsPersonalizationText) {
					var aMVisibleAvailableActions = aMAvailableActions.filter(function(oMAvailableAction) {
						return oMAvailableAction.visible === true;
					});
					return aMVisibleAvailableActions.length > 0 || !!sAvailableActionsPersonalizationText;
				}
			},
			items: [
				new VBox({
					items: {
						path: '/availableActions',
						templateShareable: false,
						template: new Link({
							text: "{text}",
							href: "{href}",
							target: "{target}",
							press: function(oEvent) {
								var fOnPress = that.getModel("$sapuicompNavigationPopover").getProperty("/availableActionsPressMap")[this.getText() + "---" + this.getHref()];
								if (fOnPress) {
									fOnPress(oEvent);
								}
							},
							visible: "{visible}"
						})
					}
				})
			]
		});
		this._oActionArea.addEventDelegate({
			onAfterRendering: this.onAfterRenderingActionForm.bind(this)
		});
		this._oActionArea.addStyleClass("navigationPopoverAvailableLinks");
		this._oActionArea.setModel(this.getModel("$sapuicompNavigationPopover"));

		this._oPersonalizationButton = new HBox({
			justifyContent: "End",
			items: new Button({
				type: sap.m.ButtonType.Transparent,
				text: {
					path: '/availableActionsPersonalizationText'
				},
				visible: {
					parts: [
						{
							path: '/availableActions'
						}, {
							path: '/availableActionsPersonalizationText'
						}
					],
					formatter: function(aMAvailableActions, sAvailableActionsPersonalizationText) {
						return aMAvailableActions.length > 0 && !!sAvailableActionsPersonalizationText;
					}
				},
				press: function() {
					that.fireAvailableActionsPersonalizationPress();
				}
			})
		});
		this._oPersonalizationButton.setModel(this.getModel("$sapuicompNavigationPopover"));
		this._oPersonalizationButton.addStyleClass("navigationPopoverPersonalizationButton");

		var oSeparator = new VBox({
			visible: {
				parts: [
					{
						path: '/availableActions'
					}, {
						path: '/availableActionsPersonalizationText'
					}
				],
				formatter: function(aMAvailableActions, sAvailableActionsPersonalizationText) {
					var aMVisibleAvailableActions = aMAvailableActions.filter(function(oMAvailableAction) {
						return oMAvailableAction.visible === true;
					});
					return aMVisibleAvailableActions.length > 0 || !!sAvailableActionsPersonalizationText;
				}
			}
		});
		oSeparator.setModel(this.getModel("$sapuicompNavigationPopover"));
		oSeparator.addStyleClass("navigationPopoverSeparator");

		this.addContent(new VBox({
			// Default behavior for the case that all three sections can fit the height of phone (e.g. only mainNavigationSection and
			// relatedAppsSection w/o additionalContentSection or mainNavigationSection, relatedAppsSection and small additionalContentSection)
			fitContainer: true,
			justifyContent: sap.m.FlexJustifyContent.Start,
			items: [
				this._oHeaderArea, oSeparator, this._oActionArea, this._oPersonalizationButton
			]
		}));
	};

	/**
	 * Returns the container (currently VBox) which contains the mainNavigationSection, additionalContentSection and relatedAppsSection.
	 * @private
	 */
	NavigationPopover.prototype._getContentContainer = function() {
		return this.getContent()[0];
	};

	/**
	 * EventHandler for all link press on this popover
	 *
	 * @param {object} oEvent - the event parameters
	 * @private
	 */
	NavigationPopover.prototype._onLinkPress = function(oEvent) {
		this.fireNavigate({
			text: oEvent.getSource().getText(),
			href: oEvent.getSource().getHref()
		});
	};

	/**
	 * When no fact sheet exists and no actions and no content, then do not show popover.
	 *
	 * @private
	 */
	NavigationPopover.prototype._hasNavigationTargets = function() {
		if (!this.hasContent()) {
			jQuery.sap.require("sap.m.MessageBox");
			var MessageBox = sap.ui.require("sap/m/MessageBox");
			MessageBox.show(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_DETAILS_NAV_NOT_POSSIBLE"), {
				icon: MessageBox.Icon.ERROR,
				title: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_MSG_NAV_NOT_POSSIBLE"),
				actions: [
					sap.m.MessageBox.Action.CLOSE
				],
				styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : ""
			});
			return false;
		}
		return true;
	};

	/**
	 * @private
	 */
	NavigationPopover.prototype._convertToExternal = function(sHref) {
		var oXApplNavigation = Factory.getService("CrossApplicationNavigation");
		if (!oXApplNavigation) {
			return sHref;
		}
		return oXApplNavigation.hrefForExternal({
			target: {
				shellHash: sHref
			}
		}, this._getComponent());
	};

	/**
	 * Returns the control instance for which the popover should be displayed.
	 *
	 * @returns { sap.ui.core.Control}
	 * @private
	 */
	NavigationPopover.prototype._getControl = function() {
		var oControl = this.getAssociation("source");
		if (typeof oControl === "string") {
			oControl = sap.ui.getCore().byId(oControl);
		}
		return oControl;
	};

	/**
	 * Returns the component object.
	 *
	 * @returns {object} the component
	 * @private
	 */
	NavigationPopover.prototype._getComponent = function() {
		var oComponent = this.getComponent();
		if (typeof oComponent === "string") {
			oComponent = sap.ui.getCore().getComponent(oComponent);
		}
		return oComponent;
	};

	return NavigationPopover;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/NavigationPopover.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.SemanticObjectController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.SemanticObjectController.
jQuery.sap.declare('sap.ui.comp.navpopover.SemanticObjectController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/SemanticObjectController",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element', './Factory', 'sap/ui/model/json/JSONModel'
], function(jQuery, library, Element, Factory, JSONModel) {
	"use strict";

	/**
	 * @class The <code>SemanticObjectController</code> control operates as a single entry point for <code>SmartLink</code> controls created automatically
	 * by {@link sap.ui.comp.smarttable.SmartTable SmartTable} control, {@link sap.ui.comp.smartchart.SmartChart SmartChart} control,
	 * {@link sap.ui.comp.smartform.SmartForm SmartForm} control and {@link sap.ui.comp.smartfield.SmartField SmartField} control based on OData metadata.
	 * Additionally, all events provided by the <code>SmartLink</code> control are registered by the SemanticObjectController and can be consumed there in
	 * a single place. As usual, the SemanticObjectController can be defined within the XML view as well as in the code.
	 *
	 * @param {string} [sID] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.SemanticObjectController
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SemanticObjectController = Element.extend("sap.ui.comp.navpopover.SemanticObjectController", /** @lends sap.ui.comp.navpopover.SemanticObjectController.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Comma-separated list of field names that must not be displayed as links.
				 *
				 * @since 1.28.0
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code>, the SemanticObjectController will retrieve all navigation targets once and will disable links for
				 * which no targets were found. Setting this value to <code>true</code> will trigger an additional roundtrip.
				 *
				 * @deprecated Since 1.42.0. The property <code>prefetchNavigationTargets</code> is obsolete as navigation targets are determined
				 *             automatically. The SmartLink controls are re-rendered as soon as the asynchronous determination of navigation targets
				 *             has been completed.
				 * @since 1.28.0
				 */
				prefetchNavigationTargets: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Maps the field names to the related semantic objects. When accessing this property for the first time, the mapping will be
				 * calculated from the metadata within the provided model.
				 *
				 * @since 1.28.0
				 */
				fieldSemanticObjectMap: {
					type: "object",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The name of the entity set used. If <code>entitySet</code> has not been defined, the SemanticObjectController tries to retrieve
				 * the name from its parents. <b>Note:</b> This is not a dynamic UI5 property.
				 *
				 * @since 1.28.0
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Navigation property that points from the current to the related entity type where the
				 * <code>com.sap.vocabularies.Communication.v1.Contact</code> annotation is defined, for example,
				 * <code> '\{"Supplier":"to_Supplier", "CompanyName":"to_Company"\}' </code>. An empty string means that the related entity type is
				 * the current one.
				 *
				 * @since 1.40.0
				 */
				contactAnnotationPaths: {
					type: "object",
					defaultValue: null
				},

				/**
				 * Determines whether the personalization link is shown inside the NavigationPopover control. For example,
				 * <code> '\{"Supplier":false, "CompanyName":true\}' </code>.
				 *
				 * @since 1.44.0
				 */
				enableAvailableActionsPersonalization: {
					type: "object",
					defaultValue: null
				},

				/**
				 * If set to <code>false</code>, the SmartLink control will not replace its field name with the according
				 * <code>semanticObject</code> property during the calculation of the semantic attributes.
				 *
				 * @since 1.48.0
				 */
				mapFieldToSemanticObject: {
					type: "boolean"
				}
			},
			events: {

				/**
				 * After the navigation targets have been retrieved, <code>navigationTargetsObtained</code> is fired and makes it possible you to
				 * change the targets.
				 *
				 * @since 1.28.0
				 */
				navigationTargetsObtained: {
					parameters: {
						/**
						 * The main navigation object.
						 */
						mainNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * Array of available navigation target objects.
						 */
						actions: {
							type: "sap.ui.comp.navpopover.LinkData[]"
						},

						/**
						 * The navigation object for the own application. This navigation option is by default not visible on the popover.
						 */
						ownNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * Array containing contact data.
						 */
						popoverForms: {
							type: "sap.ui.layout.form.SimpleForm[]"
						},

						/**
						 * The semantic object for which the navigation targets have been retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * The ID of the control that fires this event. If <code>navigationTargetsObtained</code> is registered on the SmartLink,
						 * <code>originalId</code> is the same as the event's source ID which is also the SmartLink's ID. If
						 * <code>navigationTargetsObtained</code> is registered on the SemanticObjectController, <code>originalId</code> helps to
						 * identify the original SmartLink control which triggered the event.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
						 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
						 * <code>show()</code>
						 * <ul>
						 * <li><code>show(oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
						 * <ul>
						 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
						 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
						 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
						 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
						 * remain.</li>
						 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
						 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
						 * object still remains.</li>
						 * </ul>
						 * </li>
						 * <li><code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
						 * <ul>
						 * <li>{string | undefined} sMainNavigationId The visible description for the main navigation link. With <code>''</code>,
						 * both the description and subtitle will be removed. With <code>undefined</code>, the description is calculated using the
						 * binding context of a given source object (for example <code>SmartLink</code> control).</li>
						 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
						 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
						 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
						 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
						 * remain.</li>
						 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
						 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
						 * object still remains.</li>
						 * </ul>
						 * </li>
						 * </ul>
						 */
						show: {
							type: "function"
						}
					}
				},

				/**
				 * Event is fired before the navigation popover opens and before navigation target links are retrieved. Event can be used to change
				 * the parameters used to retrieve the navigation targets. In case of SmartLink, <code>beforePopoverOpens</code> is fired after the
				 * link has been clicked.
				 *
				 * @since 1.28.0
				 */
				beforePopoverOpens: {
					parameters: {
						/**
						 * The semantic object for which the navigation targets will be retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
						 *
						 * @deprecated Since 1.42.0. The parameter <code>semanticAttributes</code> is obsolete. Instead use the parameter
						 *             <code>semanticAttributesOfSemanticObjects</code>.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes calculated from
						 * the binding context. The semantic attributes will be used as parameters in order to retrieve the navigation targets.
						 *
						 * @since 1.42.0
						 */
						semanticAttributesOfSemanticObjects: {
							type: "object"
						},

						/**
						 * This callback function enables you to define a changed semantic attributes map. Signatures:
						 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
						 * <ul>
						 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes</li>
						 * <li>{string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs</li>
						 * </ul>
						 */
						setSemanticAttributes: {
							type: "function"
						},

						/**
						 * This callback function sets an application state key that is used over the cross-application navigation. Signatures:
						 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
						 * <ul>
						 * <li>{string} sAppStateKey</li>
						 * </ul>
						 */
						setAppStateKey: {
							type: "function"
						},

						/**
						 * The ID of the control that fires this event. If <code>beforePopoverOpens</code> is registered on the SmartLink,
						 * <code>originalId</code> is the same as the event's source ID which is also the SmartLink's ID. If the
						 * <code>beforePopoverOpens</code> is registered on the SemanticObjectController, <code>originalId</code> helps to
						 * identify the original SmartLink control which triggered the event.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
						 * Signatures: <code>open()</code> If <code>beforePopoverOpens</code> has been registered, <code>open</code> function
						 * has to be called manually in order to open the navigation popover.
						 */
						open: {
							type: "function"
						}
					}
				},

				/**
				 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
				 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
				 *
				 * @since 1.28.0
				 */
				navigate: {
					parameters: {
						/**
						 * The UI text shown in the clicked link.
						 */
						text: {
							type: "string"
						},

						/**
						 * The navigation target of the clicked link.
						 */
						href: {
							type: "string"
						},

						/**
						 * The semantic object used to retrieve this target.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes used to retrieve this target.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * The ID of the control that fires this event. If <code>navigate</code> is registered on the SmartLink,
						 * <code>originalId</code> is the same as the event's source ID which is the SmartLink's ID. If <code>navigate</code> is
						 * registered on the SemanticObjectController, <code>originalId</code> helps to identify the original SmartLink control
						 * which triggered the event.
						 */
						originalId: {
							type: "string"
						}
					}
				},

				/**
				 * If the property <code>prefetchNavigationTargets</code> is set to <code>true</code>, event <code>prefetchDone</code> is fired
				 * after all navigation targets have been retrieved.
				 *
				 * @deprecated Since 1.42.0. The event <code>prefetchDone</code> is obsolete because it depends on the property
				 *             <code>prefetchNavigationTargets</code> which has been deprecated.
				 * @since 1.28.0
				 */
				prefetchDone: {
					parameters: {
						/**
						 * A map containing all semantic objects as keys for which at least one navigation target has been found. The value for each
						 * semantic object key is an array containing the available actions found for this semantic object.
						 */
						semanticObjects: {
							type: "object"
						}
					}
				}
			}
		}
	});

	// Fill 'oSemanticObjects' as soon as possible
	SemanticObjectController.oSemanticObjects = {};
	SemanticObjectController.oNavigationTargetActions = {};
	SemanticObjectController.bHasPrefetchedDistinctSemanticObjects = false;
	SemanticObjectController.bHasPrefetchedNavigationTargetActions = false;
	SemanticObjectController.oPromise = null;
	SemanticObjectController.oPromiseActions = null;

	SemanticObjectController.prototype.init = function() {
		SemanticObjectController.prefetchDistinctSemanticObjects();

		this._proxyOnBeforePopoverOpens = this._onBeforePopoverOpens.bind(this);
		this._proxyOnTargetsObtained = this._onTargetsObtained.bind(this);
		this._proxyOnNavigate = this._onNavigate.bind(this);
		this._aRegisteredControls = [];
	};

	/**
	 * Returns whether the given control has been registered by the SemanticObjectController.
	 *
	 * @param {sap.ui.comp.navpopover.SmartLink | sap.ui.comp.navpopover.NavigationPopoverHandler} oControl Control registered by <code>SemanticObjectController</code>
	 * @returns {boolean} <code>true</code> if the given control has been registered
	 * @public
	 */
	SemanticObjectController.prototype.isControlRegistered = function(oControl) {
		return this._aRegisteredControls.indexOf(oControl) > -1;
	};

	/**
	 * Adds the given control to the SemanticObjectController and registers all relevant events.
	 *
	 * @param {sap.ui.comp.navpopover.SmartLink | sap.ui.comp.navpopover.NavigationPopoverHandler} oControl Control to be registered by <code>SemanticObjectController</code>
	 * @public
	 */
	SemanticObjectController.prototype.registerControl = function(oControl) {
		if (!(oControl instanceof sap.ui.comp.navpopover.SmartLink || oControl instanceof sap.ui.comp.navpopover.NavigationPopoverHandler)) {
			jQuery.sap.log.warning("sap.ui.comp.navpopover.SemanticObjectController: " + (oControl.getMetadata ? oControl.getMetadata() : "parameter") + " is neither of SmartLink nor of NavigationPopoverHandler instance");
			return;
		}
		if (this.isControlRegistered(oControl)) {
			return;
		}
		if (oControl.attachBeforePopoverOpens) {
			oControl.attachBeforePopoverOpens(this._proxyOnBeforePopoverOpens);
		}
		if (oControl.attachNavigationTargetsObtained) {
			oControl.attachNavigationTargetsObtained(this._proxyOnTargetsObtained);
		}

		if (oControl.attachInnerNavigate) {
			oControl.attachInnerNavigate(this._proxyOnNavigate);
		}

		this._aRegisteredControls.push(oControl);
	};

	/**
	 * Removes the given control from the SemanticObjectController and unregisters all relevant events.
	 *
	 * @param {sap.ui.comp.navpopover.SmartLink | sap.ui.comp.navpopover.NavigationPopoverHandler} oControl Control to be unregistered by <code>SemanticObjectController</code>
	 * @public
	 */
	SemanticObjectController.prototype.unregisterControl = function(oControl) {
		if (!oControl) {
			return;
		}
		if (!this.isControlRegistered(oControl)) {
			return;
		}
		if (oControl.detachBeforePopoverOpens) {
			oControl.detachBeforePopoverOpens(this._proxyOnBeforePopoverOpens);
		}
		if (oControl.detachNavigationTargetsObtained) {
			oControl.detachNavigationTargetsObtained(this._proxyOnTargetsObtained);
		}

		if (oControl.detachInnerNavigate) {
			oControl.detachInnerNavigate(this._proxyOnNavigate);
		}

		this._aRegisteredControls.splice(this._aRegisteredControls.indexOf(oControl), 1);
	};

	/**
	 * Eventhandler before navigation popover opens
	 *
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SemanticObjectController.prototype._onBeforePopoverOpens = function(oEvent) {
		var oParameters = oEvent.getParameters();

		if (this.hasListeners("beforePopoverOpens")) {
			this.fireBeforePopoverOpens({
				semanticObject: oParameters.semanticObject,
				semanticAttributes: oParameters.semanticAttributes,
				semanticAttributesOfSemanticObjects: oParameters.semanticAttributesOfSemanticObjects,
				setSemanticAttributes: oParameters.setSemanticAttributes,
				setAppStateKey: oParameters.setAppStateKey,
				originalId: oParameters.originalId,
				open: oParameters.open
			});
		} else {
			oParameters.open();
		}
	};

	/**
	 * Eventhandler after navigation targets have been retrieved.
	 *
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SemanticObjectController.prototype._onTargetsObtained = function(oEvent) {
		var oParameters = oEvent.getParameters();
		if (!this.hasListeners("navigationTargetsObtained")) {
			oParameters.show();
			return;
		}
		this.fireNavigationTargetsObtained({
			mainNavigation: oParameters.mainNavigation,
			actions: oParameters.actions,
			ownNavigation: oParameters.ownNavigation,
			popoverForms: oParameters.popoverForms,
			semanticObject: oParameters.semanticObject,
			semanticAttributes: oParameters.semanticAttributes,
			originalId: oParameters.originalId,
			show: oParameters.show
		});
	};

	/**
	 * Eventhandler after navigation has been triggered.
	 *
	 * @param {object} oEvent the event parameters.
	 * @private
	 */
	SemanticObjectController.prototype._onNavigate = function(oEvent) {
		var oParameters = oEvent.getParameters();
		this.fireNavigate({
			text: oParameters.text,
			href: oParameters.href,
			originalId: oParameters.originalId,
			semanticObject: oParameters.semanticObject,
			semanticAttributes: oParameters.semanticAttributes
		});
	};

	/**
	 * Checks if the given SmartLink has to be enabled or disabled and sets the state.
	 *
	 * @param {sap.ui.comp.navpopover.SmartLink} oSmartLink the SmartLink which should be enabled or disabled.
	 * @public
	 * @deprecated Since 1.42.0. The method <code>setIgnoredState</code> is obsolete as SmartLink is processing the internal state on its own.
	 */
	SemanticObjectController.prototype.setIgnoredState = function(oSmartLink) {
		if (oSmartLink instanceof sap.ui.comp.navpopover.SmartLink) {
			oSmartLink._updateEnabled();
		}
	};

	SemanticObjectController.prototype.setIgnoredFields = function(sIgnoredFields) {
		this.setProperty("ignoredFields", sIgnoredFields);

		this._aRegisteredControls.forEach(function(oRegisteredControl) {
			if (oRegisteredControl._updateEnabled) {
				oRegisteredControl._updateEnabled();
			}
		});
		return this;
	};

	// @deprecated
	SemanticObjectController.prototype.setPrefetchNavigationTargets = function(bPrefetch) {
		this.setProperty("prefetchNavigationTargets", bPrefetch);

		if (bPrefetch !== true) {
			return this;
		}

		jQuery.sap.log.error("sap.ui.comp.navpopover.SemanticObjectController: Please be aware that in case of a large amount of semantic objects the performance may suffer significantly and the received links will be created out of context");

		var that = this;
		SemanticObjectController.getDistinctSemanticObjects().then(function(oSemanticObjects) {
			SemanticObjectController.getNavigationTargetActions(oSemanticObjects).then(function(oNavigationTargetActions) {
				that.firePrefetchDone({
					semanticObjects: oNavigationTargetActions
				});
			});
		});

		return this;
	};

	SemanticObjectController.prototype.getFieldSemanticObjectMap = function() {
		var oMap = this.getProperty("fieldSemanticObjectMap");
		if (oMap) {
			return oMap;
		}

		if (!this.getEntitySet()) {
			jQuery.sap.log.warning("sap.ui.comp.navpopover.SemanticObjectController: FieldSemanticObjectMap is not set on SemanticObjectController, retrieval without EntitySet not possible");
			return null;
		}

		jQuery.sap.require("sap.ui.comp.odata.MetadataAnalyser");
		var oMetadataAnalyzer = new sap.ui.comp.odata.MetadataAnalyser(this.getModel());
		oMap = oMetadataAnalyzer.getFieldSemanticObjectMap(this.getEntitySet());
		if (oMap) {
			this.setProperty("fieldSemanticObjectMap", oMap, true);
		}

		return oMap;
	};

	SemanticObjectController.prototype.getEntitySet = function() {
		var sEntitySet = this.getProperty("entitySet");
		if (sEntitySet) {
			return sEntitySet;
		}

		var oParent = this.getParent();
		while (oParent) {
			if (oParent.getEntitySet) {
				sEntitySet = oParent.getEntitySet();
				if (sEntitySet) {
					this.setProperty("entitySet", sEntitySet, true);
					break;
				}
			}
			oParent = oParent.getParent();
		}

		return sEntitySet;
	};

	/**
	 * Checks if the given semantic object name has a navigation link. <b>Note</b>: this method returns a valid value only after the event
	 * <code>prefetchDone</code> has been raised. The event <code>prefetchDone</code> is raised if the property
	 * <code>prefetchNavigationTargets</code> is set to <code>true</code>.
	 *
	 * @param {string} sSemanticObject Name of semantic object
	 * @returns {boolean} true if the semantic object has any navigation links
	 * @public
	 * @deprecated Since 1.42.0. The method <code>hasSemanticObjectLinks</code> is obsolete because it depends on the property
	 *             <code>prefetchNavigationTargets</code> which has been deprecated.
	 */
	SemanticObjectController.prototype.hasSemanticObjectLinks = function(sSemanticObject) {
		return SemanticObjectController.hasDistinctSemanticObject(sSemanticObject, SemanticObjectController.oSemanticObjects);
	};

	/**
	 * @private
	 */
	SemanticObjectController.prefetchDistinctSemanticObjects = function() {
		SemanticObjectController.getJSONModel();
		if (!SemanticObjectController.bHasPrefetchedDistinctSemanticObjects) {
			SemanticObjectController.getDistinctSemanticObjects();
		}
	};

	/**
	 * Static method which calls asynchronous CrossApplicationNavigation.
	 *
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @private
	 */
	SemanticObjectController.getDistinctSemanticObjects = function() {
		if (SemanticObjectController.bHasPrefetchedDistinctSemanticObjects) {
			return Promise.resolve(SemanticObjectController.oSemanticObjects);
		}
		if (!SemanticObjectController.oPromise) {
			SemanticObjectController.oPromise = new Promise(function(resolve) {
				var oCrossAppNav = Factory.getService("CrossApplicationNavigation");
				if (!oCrossAppNav) {
					jQuery.sap.log.error("sap.ui.comp.navpopover.SemanticObjectController: Service 'CrossApplicationNavigation' could not be obtained");
					SemanticObjectController.bHasPrefetchedDistinctSemanticObjects = true;
					return resolve({});
				}
				oCrossAppNav.getDistinctSemanticObjects().then(function(aSemanticObjects) {
					aSemanticObjects.forEach(function(sSemanticObject_) {
						SemanticObjectController.oSemanticObjects[sSemanticObject_] = {};
					});
					var oModel = SemanticObjectController.getJSONModel();
					oModel.setProperty("/distinctSemanticObjects", SemanticObjectController.oSemanticObjects);
					SemanticObjectController.bHasPrefetchedDistinctSemanticObjects = true;
					return resolve(SemanticObjectController.oSemanticObjects);
				}, function() {
					jQuery.sap.log.error("sap.ui.comp.navpopover.SemanticObjectController: getDistinctSemanticObjects() of service 'CrossApplicationNavigation' failed");
					SemanticObjectController.bHasPrefetchedDistinctSemanticObjects = true;
					return resolve({});
				});
			});
		}
		return SemanticObjectController.oPromise;
	};

	/**
	 * Static method which calls asynchronous CrossApplicationNavigation.
	 * @param {object} oSemanticObjects
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @private
	 */
	SemanticObjectController.getNavigationTargetActions = function(oSemanticObjects) {
		if (SemanticObjectController.bHasPrefetchedNavigationTargetActions) {
			return Promise.resolve(SemanticObjectController.oNavigationTargetActions);
		}
		if (!SemanticObjectController.oPromiseLinks) {
			SemanticObjectController.oPromiseLinks = new Promise(function(resolve) {
				var oCrossAppNav = Factory.getService("CrossApplicationNavigation");
				var oURLParsing = Factory.getService("URLParsing");
				if (!oCrossAppNav || !oURLParsing) {
					jQuery.sap.log.error("sap.ui.comp.navpopover.SemanticObjectController: Service 'CrossApplicationNavigation' or 'URLParsing' could not be obtained");
					SemanticObjectController.bHasPrefetchedNavigationTargetActions = true;
					return resolve({});
				}
				var aSemanticObjects = Object.keys(oSemanticObjects);
				var aParams = aSemanticObjects.map(function(sSemanticObject) {
					// we put just one argument into an array (according to FLP API
					return [
						{
							semanticObject: sSemanticObject
						}
					];
				});
				oCrossAppNav.getLinks(aParams).then(function(aLinksOfSemanticObjects) {
					aSemanticObjects.forEach(function(sSemanticObject, iIndex) {
						SemanticObjectController.oNavigationTargetActions[sSemanticObject] = [];
						aLinksOfSemanticObjects[iIndex][0].forEach(function(oLink) {
							var oShellHash = oURLParsing.parseShellHash(oLink.intent);
							if (oShellHash && oShellHash.semanticObject === sSemanticObject) {
								SemanticObjectController.oNavigationTargetActions[sSemanticObject].push(oShellHash.action);
							}
						});
					});
					var oModel = SemanticObjectController.getJSONModel();
					oModel.setProperty("/navigationTargetActions", SemanticObjectController.oNavigationTargetActions);
					SemanticObjectController.bHasPrefetchedNavigationTargetActions = true;
					return resolve(SemanticObjectController.oNavigationTargetActions);
				}, function() {
					jQuery.sap.log.error("sap.ui.comp.navpopover.SemanticObjectController: getLinks() of service 'CrossApplicationNavigation' failed");
					SemanticObjectController.bHasPrefetchedNavigationTargetActions = true;
					return resolve({});
				});
			});
		}
		return SemanticObjectController.oPromiseLinks;
	};

	/**
	 * @private
	 */
	SemanticObjectController.hasDistinctSemanticObject = function(sSemanticObject, oSemanticObjects) {
		return !!oSemanticObjects[sSemanticObject];
	};

	/**
	 * @private
	 */
	SemanticObjectController.getJSONModel = function() {
		var oModel = sap.ui.getCore().getModel("$sapuicompSemanticObjectController_DistinctSemanticObjects");
		if (oModel && !jQuery.isEmptyObject(oModel.getData())) {
			return oModel;
		}
		oModel = new JSONModel({
			distinctSemanticObjects: {}
		});
		oModel.setDefaultBindingMode(sap.ui.model.BindingMode.OneTime);
		oModel.setSizeLimit(1000);
		sap.ui.getCore().setModel(oModel, "$sapuicompSemanticObjectController_DistinctSemanticObjects");
		return oModel;
	};

	/**
	 * @private
	 */
	SemanticObjectController.destroyDistinctSemanticObjects = function() {
		SemanticObjectController.oSemanticObjects = {};
		SemanticObjectController.oNavigationTargetActions = {};
		SemanticObjectController.oPromise = null;
		SemanticObjectController.oPromiseActions = null;
		SemanticObjectController.bHasPrefetchedDistinctSemanticObjects = false;
		SemanticObjectController.bHasPrefetchedNavigationTargetActions = false;

		// destroy model and its data
		var oModel = sap.ui.getCore().getModel("$sapuicompSemanticObjectController_DistinctSemanticObjects");
		if (oModel) {
			oModel.destroy();
		}
	};

	return SemanticObjectController;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/SemanticObjectController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.Util') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Provides utility functions for the personalization dialog
 *
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.25.0
 * @alias sap.ui.comp.personalization.Util
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
jQuery.sap.declare('sap.ui.comp.navpopover.Util'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleFormLayout'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TitleLevel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
jQuery.sap.require('sap.m.Image'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/Util",[
	'sap/ui/comp/library', './Factory', './LinkData', 'sap/m/Link', 'sap/m/Text', 'sap/ui/layout/form/SimpleFormLayout', 'sap/m/Label', 'sap/ui/core/TitleLevel', 'sap/ui/core/Title', 'sap/ui/layout/form/SimpleForm', 'sap/m/Image'
], function(CompLibrary, Factory, LinkData, Link, Text, SimpleFormLayout, Label, CoreTitleLevel, CoreTitle, SimpleForm, Image) {
	"use strict";
	var Util = {

		/**
		 * Returns available actions with key.
		 *
		 * @param {Object[]} aMAvailableActions
		 */
		getStorableAvailableActions: function(aMAvailableActions) {
			return aMAvailableActions.filter(function(oMAvailableAction) {
				return oMAvailableAction.key !== undefined;
			});
		},

		/**
		 * Sort the string array in alphabetical order.
		 *
		 * @param {String[]} aNames
		 */
		sortArrayAlphabetical: function(aNames) {
			var sLanguage;
			try {
				sLanguage = sap.ui.getCore().getConfiguration().getLocale().toString();
				if (typeof window.Intl !== 'undefined') {
					var oCollator = window.Intl.Collator(sLanguage, {
						numeric: true
					});
					aNames.sort(function(a, b) {
						return oCollator.compare(a, b);
					});
				} else {
					aNames.sort(function(a, b) {
						return a.localeCompare(b, sLanguage, {
							numeric: true
						});
					});
				}
			} catch (oException) {
				// this exception can happen if the configured language is not convertible to BCP47 -> getLocale will deliver an exception
			}
		},

		/**
		 * New implementation.
		 */
		retrieveNavigationTargets: function(sSemanticObjectDefault, aAdditionalSemanticObjects, sAppStateKey, oComponent, oSemanticAttributes, sMainNavigationId) {
			var oNavigationTargets = {
				mainNavigation: undefined,
				ownNavigation: undefined,
				availableActions: []
			};
			return new Promise(function(resolve) {
				var oXApplNavigation = Factory.getService("CrossApplicationNavigation");
				var oURLParsing = Factory.getService("URLParsing");
				if (!oXApplNavigation || !oURLParsing) {
					jQuery.sap.log.error("Service 'CrossApplicationNavigation' or 'URLParsing' could not be obtained");
					return resolve(oNavigationTargets);
				}
				var aSemanticObjects = [
					sSemanticObjectDefault
				].concat(aAdditionalSemanticObjects);
				var aParams = aSemanticObjects.map(function(sSemanticObject) {
					return [
						{
							semanticObject: sSemanticObject,
							params: oSemanticAttributes ? oSemanticAttributes[sSemanticObject] : undefined,
							appStateKey: sAppStateKey,
							ui5Component: oComponent,
							sortResultsBy: "text" // since 1.50
						}
					];
				});

				oXApplNavigation.getLinks(aParams).then(function(aLinks) {
					if (!aLinks || !aLinks.length) {
						return resolve(oNavigationTargets);
					}
					var sCurrentHash = oXApplNavigation.hrefForExternal();
					if (sCurrentHash && sCurrentHash.indexOf("?") !== -1) {
						// sCurrentHash can contain query string, cut it off!
						sCurrentHash = sCurrentHash.split("?")[0];
					}
					if (sCurrentHash) {
						// BCP 1770315035: we have to set the end-point '?' of action in order to avoid matching of "#SalesOrder-manage" in "#SalesOrder-manageFulfillment"
						sCurrentHash += "?";
					}

					aLinks[0][0].forEach(function(oLink) {
						var oShellHash = oURLParsing.parseShellHash(oLink.intent);
						var sKey = (oShellHash.semanticObject && oShellHash.action) ? oShellHash.semanticObject + "-" + oShellHash.action : undefined;
						var isSuperiorAction = (oLink.tags && oLink.tags.indexOf("superiorAction") > -1);

						if (oLink.intent.indexOf(sCurrentHash) === 0) {
							// Prevent current app from being listed
							// NOTE: If the navigation target exists in
							// multiple contexts (~XXXX in hash) they will all be skipped
							oNavigationTargets.ownNavigation = new LinkData({
								key: sKey,
								href: oLink.intent,
								text: oLink.text,
								visible: true,
								isSuperiorAction: isSuperiorAction
							});
							return;
						}
						// Check if a FactSheet exists for this SemanticObject (to skip the first one found)

						if (oShellHash.action && (oShellHash.action === 'displayFactSheet')) {
							// Prevent FactSheet from being listed in 'Related Apps' section. Requirement: Link with action 'displayFactSheet' should
							// be shown in the 'Main Link' Section
							oNavigationTargets.mainNavigation = new LinkData({
								key: sKey,
								href: oLink.intent,
								text: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_FACTSHEET"),
								visible: true,
								isSuperiorAction: isSuperiorAction
							});
							return;
						}
						oNavigationTargets.availableActions.push(new LinkData({
							key: sKey,
							href: oLink.intent,
							text: oLink.text,
							visible: true,
							isSuperiorAction: isSuperiorAction
						}));
					});

					// Main navigation could not be resolved, so only set link text as MainNavigation
					if (!oNavigationTargets.mainNavigation && typeof sMainNavigationId === "string") {
						oNavigationTargets.mainNavigation = new LinkData({
							text: sMainNavigationId,
							visible: true
						});
					}

					var aAvailableIntents = [];
					for (var i = 1; i < aSemanticObjects.length; i++) {
						aAvailableIntents = aAvailableIntents.concat(aLinks[i][0]);
					}
					aAvailableIntents.forEach(function(oLink) {
						var oShellHash = oURLParsing.parseShellHash(oLink.intent);
						oNavigationTargets.availableActions.push(new LinkData({
							key: (oShellHash.semanticObject && oShellHash.action) ? oShellHash.semanticObject + "-" + oShellHash.action : undefined,
							href: oLink.intent,
							text: oLink.text,
							visible: true,
							isSuperiorAction: (oLink.tags && oLink.tags.indexOf("superiorAction") > -1)
						}));
					});

					return resolve(oNavigationTargets);
				}, function() {
					jQuery.sap.log.error("'retrieveNavigationTargets' failed");
					return resolve(oNavigationTargets);
				});
			});
		},

		/**
		 * @param {string} sPropertyName
		 * @param {sap.ui.model.odata.ODataModel} oODataModel
		 * @param {string} sBindingPath Qualified name with namespace of current EntityType
		 * @returns {object || null}
		 * @private
		 */
		retrieveSemanticObjectMapping: function(sPropertyName, oODataModel, sBindingPath) {
			if (!sPropertyName) {
				return Promise.resolve(null);
			}
			// ODataModel returns MetaModel, JSONModel returns undefined
			if (!oODataModel || !oODataModel.getMetaModel()) {
				return Promise.resolve(null);
			}
			var that = this;
			var oMetaModel = oODataModel.getMetaModel();
			return new Promise(function(resolve) {
				oMetaModel.loaded().then(function() {
					var sOwnEntityType = that._getEntityTypeNameOfBindingContext(sBindingPath, oMetaModel);
					var oEntityType = oMetaModel.getODataEntityType(sOwnEntityType);
					if (!oEntityType) {
						return resolve(null);
					}
					var aProperties = oEntityType.property.filter(function(oProperty) {
						return oProperty.name === sPropertyName;
					});
					if (aProperties.length !== 1) {
						return resolve(null);
					}
					if (!aProperties[0]["com.sap.vocabularies.Common.v1.SemanticObjectMapping"]) {
						return resolve(null);
					}
					var oSemanticObjectQualifiers = that._getSemanticObjectMappingsOfProperty(aProperties[0], that._getSemanticObjectsOfProperty(aProperties[0]));
					var oSemanticObjects = {};
					for ( var sQualifier in oSemanticObjectQualifiers) {
						oSemanticObjects[oSemanticObjectQualifiers[sQualifier].name] = oSemanticObjectQualifiers[sQualifier].mapping;
					}

					return resolve(oSemanticObjects);
				});
			});
		},

		_getSemanticObjectsOfProperty: function(oProperty) {
			var oSemanticObjects = {};
			for ( var sAttr in oProperty) {
				var sAnnotationName = sAttr.split("#")[0];
				var sQualifierName = sAttr.split("#")[1] || ""; // as of specification the qualifier MUST have at least one character
				if (jQuery.sap.startsWith(sAnnotationName, "com.sap.vocabularies.Common.v1.SemanticObject") && jQuery.sap.endsWith(sAnnotationName, "com.sap.vocabularies.Common.v1.SemanticObject")) {
					oSemanticObjects[sQualifierName] = {
						name: oProperty[sAttr]["String"],
						mapping: undefined
					};
				}
			}
			return oSemanticObjects;
		},

		_getSemanticObjectMappingsOfProperty: function(oProperty, oSemanticObjects) {
			var fGetMapping = function(oSemanticObjectMappingAnnotation) {
				var oMapping = {};
				if (jQuery.isArray(oSemanticObjectMappingAnnotation)) {
					oSemanticObjectMappingAnnotation.forEach(function(oPair) {
						oMapping[oPair.LocalProperty.PropertyPath] = oPair.SemanticObjectProperty.String;
					});
				}
				return oMapping;
			};
			for ( var sAttr in oProperty) {
				var sAnnotationName = sAttr.split("#")[0];
				var sQualifierName = sAttr.split("#")[1] || ""; // as of specification the qualifier MUST have at least one character
				if (jQuery.sap.startsWith(sAnnotationName, "com.sap.vocabularies.Common.v1.SemanticObjectMapping") && jQuery.sap.endsWith(sAnnotationName, "com.sap.vocabularies.Common.v1.SemanticObjectMapping")) {
					if (oSemanticObjects[sQualifierName]) {
						oSemanticObjects[sQualifierName].mapping = fGetMapping(oProperty[sAttr]);
					}
				}
			}
			return oSemanticObjects;
		},

		/**
		 * @param {string} sBindingPath
		 * @param {sap.ui.model.odata.ODataMetaModel} oMetaModel
		 * @returns {string || null}
		 * @private
		 */
		_getEntityTypeNameOfBindingContext: function(sBindingPath, oMetaModel) {
			if (!sBindingPath || !oMetaModel) {
				return null;
			}
			var oMetaContext = oMetaModel.getMetaContext(sBindingPath);
			if (!oMetaContext) {
				return null;
			}
			var oObj = oMetaModel.getObject(oMetaContext.getPath());
			return oObj.namespace ? oObj.namespace + "." + oObj.name : oObj.name;
		},

		/**
		 * @param {sap.ui.model.odata.ODataModel} oODataModel
		 * @param {string} sBindingPath
		 * @param {string || ""} sCommunicationContactAnnotationPath NavigationProperty or foreign simple EntitySet with communication contact
		 *        annotation
		 * @returns {object}
		 * @private
		 */
		retrieveContactAnnotationData: function(oODataModel, sBindingPath, sCommunicationContactAnnotationPath) {
			var that = this;
			return new Promise(function(resolve) {
				// ODataModel returns MetaModel, JSONModel returns undefined
				if (!oODataModel || !oODataModel.getMetaModel() || sCommunicationContactAnnotationPath === undefined) {
					return resolve({
						entitySet: undefined,
						path: undefined,
						contactAnnotation: undefined
					});
				}
				var oMetaModel = oODataModel.getMetaModel();
				oMetaModel.loaded().then(function() {
					var sOwnEntityType = that._getEntityTypeNameOfBindingContext(sBindingPath, oMetaModel);
					var oEntityType = oMetaModel.getODataEntityType(sOwnEntityType);
					if (!oEntityType) {
						return resolve({
							entitySet: undefined,
							path: undefined,
							contactAnnotation: undefined
						});
					}

					// Check if 'sCommunicationContactAnnotationPath' is a navigationProperty or an entitySet
					var oEntitySet = oMetaModel.getODataEntitySet(sCommunicationContactAnnotationPath);
					if (oEntitySet) {
						// 'sCommunicationContactAnnotationPath' is an entitySet
						oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
						return resolve({
							entitySet: sCommunicationContactAnnotationPath,
							path: "",
							contactAnnotation: oEntityType["com.sap.vocabularies.Communication.v1.Contact"]
						});
					}

					// 'sCommunicationContactAnnotationPath' is a navigationProperty
					var aAssociationPaths = [];
					sCommunicationContactAnnotationPath.split("/").some(function(sNavigationProperty) {
						var oAssociation = oMetaModel.getODataAssociationEnd(oEntityType, sNavigationProperty);
						if (!oAssociation) {
							return false;
						}
						aAssociationPaths.push(sNavigationProperty);
						oEntityType = oMetaModel.getODataEntityType(oAssociation.type);
					});

					return resolve({
						entitySet: undefined,
						path: oEntityType["com.sap.vocabularies.Communication.v1.Contact"] ? aAssociationPaths.join("/") : undefined,
						contactAnnotation: oEntityType["com.sap.vocabularies.Communication.v1.Contact"]
					});
				});
			});
		},

		/**
		 * <code>
		 * 	group: {heading: "", elements: []}
		 *  element: {valuePath: "", label: "", value: "", url: "", target: "", emailSubject: "", type: sap.m.QuickViewGroupElementType}
		 * </code>
		 */
		parseContactAnnotation: function(oContactAnnotationData) {
			var oContactAnnotation = oContactAnnotationData.contactAnnotation;
			if (!oContactAnnotation || jQuery.isEmptyObject(oContactAnnotation)) {
				return {
					header: {},
					groups: [],
					expand: "",
					select: ""
				};
			}

			var sPath = oContactAnnotationData.path ? oContactAnnotationData.path + "/" : "";
			var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
			var aExpand = [
				oContactAnnotationData.path
			];
			var aSelects = [];
			var aGroups = [];

			// Contact Details -------------------------------------------------------
			var oGroup = {
				heading: oResourceBundle.getText("POPOVER_CONTACT_SECTION_TITLE"),
				elements: []
			};
			if (oContactAnnotation.photo) {
				aSelects.push(sPath + oContactAnnotation.photo.Path);
				oGroup.elements.push({
					valuePath: sPath + oContactAnnotation.photo.Path,
					label: "",
					type: "image"
				});
			}
			if (oContactAnnotation.fn) {
				aSelects.push(sPath + oContactAnnotation.fn.Path);
				oGroup.elements.push({
					valuePath: sPath + oContactAnnotation.fn.Path,
					label: oResourceBundle.getText("POPOVER_CONTACT_SECTION_NAME"),
					type: sap.m.QuickViewGroupElementType.text
				});
			}
			if (oContactAnnotation.role) {
				aSelects.push(sPath + oContactAnnotation.role.Path);
				oGroup.elements.push({
					valuePath: sPath + oContactAnnotation.role.Path,
					label: oResourceBundle.getText("POPOVER_CONTACT_SECTION_ROLE"),
					type: sap.m.QuickViewGroupElementType.text
				});
			}
			if (oContactAnnotation.title) {
				aSelects.push(sPath + oContactAnnotation.title.Path);
				oGroup.elements.push({
					valuePath: sPath + oContactAnnotation.title.Path,
					label: oResourceBundle.getText("POPOVER_CONTACT_SECTION_JOBTITLE"),
					type: sap.m.QuickViewGroupElementType.text
				});
			}
			if (oContactAnnotation.org) {
				aSelects.push(sPath + oContactAnnotation.org.Path);
				oGroup.elements.push({
					valuePath: sPath + oContactAnnotation.org.Path,
					label: oResourceBundle.getText("POPOVER_CONTACT_SECTION_DEPARTMENT"),
					type: sap.m.QuickViewGroupElementType.text
				});
			}
			if (oContactAnnotation.email) {
				oContactAnnotation.email.forEach(function(oEmail) {
					if (oEmail.type && oEmail.type.EnumMember.indexOf("com.sap.vocabularies.Communication.v1.ContactInformationType/work") > -1) {
						aSelects.push(sPath + oEmail.address.Path);
						oGroup.elements.push({
							valuePath: sPath + oEmail.address.Path,
							label: oResourceBundle.getText("POPOVER_CONTACT_SECTION_EMAIL"),
							type: sap.m.QuickViewGroupElementType.email
						});
					}
				});
			}
			// type: e.g. "com.sap.vocabularies.Communication.v1.PhoneType/fax Communication.v1.PhoneType/work" or
			// "com.sap.vocabularies.Communication.v1.PhoneType/work"
			if (oContactAnnotation.tel) {
				var oFax, oMobile, oPhone;
				oContactAnnotation.tel.forEach(function(oTel) {
					if (oTel.type && oTel.type.EnumMember.indexOf("com.sap.vocabularies.Communication.v1.PhoneType/fax") > -1) {
						aSelects.push(sPath + oTel.uri.Path);
						oFax = {
							valuePath: sPath + oTel.uri.Path,
							label: oResourceBundle.getText("POPOVER_CONTACT_SECTION_FAX"),
							type: sap.m.QuickViewGroupElementType.phone
						};
					} else if (oTel.type && oTel.type.EnumMember.indexOf("com.sap.vocabularies.Communication.v1.PhoneType/cell") > -1) {
						aSelects.push(sPath + oTel.uri.Path);
						oMobile = {
							valuePath: sPath + oTel.uri.Path,
							label: oResourceBundle.getText("POPOVER_CONTACT_SECTION_MOBILE"),
							type: sap.m.QuickViewGroupElementType.phone
						};
					} else if (oTel.type && oTel.type.EnumMember.indexOf("com.sap.vocabularies.Communication.v1.PhoneType/work") > -1) {
						aSelects.push(sPath + oTel.uri.Path);
						oPhone = {
							valuePath: sPath + oTel.uri.Path,
							label: oResourceBundle.getText("POPOVER_CONTACT_SECTION_PHONE"),
							type: sap.m.QuickViewGroupElementType.phone
						};
					}
				});
				if (oPhone) {
					oGroup.elements.push(oPhone);
				}
				if (oMobile) {
					oGroup.elements.push(oMobile);
				}
				if (oFax) {
					oGroup.elements.push(oFax);
				}
			}

			if (oGroup.elements.length) {
				aGroups.push(oGroup);
			}

			return {
				groups: aGroups,
				expand: aExpand.join(","),
				select: aSelects.join(",")
			};
		},

		/**
		 *
		 */
		createContactDetailForms: function(aGroups) {
			if (!aGroups.length) {
				return [];
			}

			var aForms = [];
			aGroups.forEach(function(oGroup) {
				if (!oGroup.elements.length) {
					return;
				}
				var oGroupForm = new SimpleForm({
					maxContainerCols: 1,
					editable: false,
					layout: SimpleFormLayout.ResponsiveGridLayout
				});

				oGroup.elements.forEach(function(oElement) {
					var oControl = Util._createControl(oElement);
					if (!oControl) {
						return;
					}

					if (oElement.label) {
						var oLabel = new Label({
							text: oElement.label,
							labelFor: oControl.getId()
						});
						oGroupForm.addContent(oLabel);
					}
					oGroupForm.addContent(oControl);
				});

				if (oGroupForm.getContent().length && oGroup.heading) {
					oGroupForm.insertContent(new CoreTitle({
						text: oGroup.heading,
						level: CoreTitleLevel.H2
					}), 0);
				}
				aForms.push(oGroupForm);
			});
			return aForms;
		},

		/**
		 *
		 */
		_createControl: function(oGroupElement) {
			switch (oGroupElement.type) {
				case "email":
					return new Link({
						href: {
							path: oGroupElement.valuePath,
							formatter: function(oValue) {
								if (!oValue) {
									return oValue;
								}
								return "mailto:" + oValue + (oGroupElement.emailSubject ? '?subject=' + oGroupElement.emailSubject : '');
							}
						},
						text: {
							path: oGroupElement.valuePath
						},
						visible: {
							path: oGroupElement.valuePath,
							formatter: function(oValue) {
								return !!oValue;
							}
						}
					});
				case "phone":
				case "mobile":
					return new Link({
						href: {
							path: oGroupElement.valuePath,
							formatter: function(oValue) {
								if (!oValue) {
									return oValue;
								}
								return "tel:" + oValue;
							}
						},
						text: {
							path: oGroupElement.valuePath
						},
						visible: {
							path: oGroupElement.valuePath,
							formatter: function(oValue) {
								return !!oValue;
							}
						}
					});
				case "image":
					var oImage = new Image({
						// width: "3rem",
						src: {
							path: oGroupElement.valuePath
						},
						visible: {
							path: oGroupElement.valuePath,
							formatter: function(oValue) {
								return !!oValue;
							}
						},
						decorative: false
					});
					oImage.addStyleClass("sapUiIcon");
					oImage.addStyleClass("navigationPopoverThumbnail");
					return oImage;
				default:
					return new Text({
						text: {
							path: oGroupElement.valuePath
						},
						visible: {
							path: oGroupElement.valuePath,
							formatter: function(oValue) {
								return !!oValue;
							}
						}
					});
			}
		}

	};
	return Util;
}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/Util.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelectorModelConverter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.odata.FieldSelectorModelConverter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelectorModelConverter",[
	'jquery.sap.global', './MetadataAnalyser'
], function(jQuery, MetadataAnalyser) {
	"use strict";

	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations
	 *
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel} oDataModel - odata model
	 * @public
	 * @author Markus Viol
	 */
	var FieldSelectorModelConverter = function(oDataModel) {

		this._oMetadataAnalyzer = new MetadataAnalyser(oDataModel);
		this._aEntityTypes = [];
		this.invisibleFields = {};
	};

	/**
	 * Returns the OData MetaData Analyzer
	 *
	 * @returns {sap.ui.comp.odata.MetadataAnalyser} - metadata analyzer instance
	 * @public
	 * @name FieldSelectorModelConverter#getMetaDataAnalyzer
	 * @function
	 */
	FieldSelectorModelConverter.prototype.getMetaDataAnalyzer = function() {

		return this._oMetadataAnalyzer;
	};

	/**
	 * Returns the converted inner model for the FieldSelector control
	 *
	 * @param {string/array} vEntityType - entity type
	 * @param {Array} aIgnoredFields - List of fields which should be ignored.
	 * @returns {object} Internal json map
	 * @public
	 * @name FieldSelectorModelConverter#getConvertedModel
	 * @function
	 */
	FieldSelectorModelConverter.prototype.getConvertedModel = function(vEntityType, aIgnoredFields) {

		var oConvertedData = {};
		this._aEntityTypes = this._getEntityTypes(vEntityType);
		for (var e = 0; e < this._aEntityTypes.length; e++) {
			var aFields = this._oMetadataAnalyzer.getFieldsByEntityTypeName(this._aEntityTypes[e].key);
			if (aFields) {
				oConvertedData[this._aEntityTypes[e].key] = this._updateAndFilterFields(aFields, aIgnoredFields, false, this._aEntityTypes[e].key);
			}
		}

		return oConvertedData;
	};

	/**
	 * Returns the entity type name and labels as an array of map
	 *
	 * @returns {array} - object of label and EntityType name
	 * @private
	 * @name FieldSelectorModelConverter#getEntitySets
	 * @function
	 */
	FieldSelectorModelConverter.prototype.getEntityTypes = function() {

		return this._aEntityTypes;
	};

	/**
	 * Get an array with all entity type names
	 * @returns {Array} Returns an array with all entity type names
	 */
	FieldSelectorModelConverter.prototype.getAllEntityTypeNames = function() {
		if (this._oMetadataAnalyzer) {
			return this._oMetadataAnalyzer.getAllEntityTypeNames();
		}
		return null;
	};

	/**
	 * @param {array} aFields - fields array
	 * @param {Array} aIgnoredFields - List of fields which should be ignored.
	 * @param {Boolean} bIsComplexType Set to true if fields are children of a complex type
	 * @returns {array} - object of fields which are visible	 *
	 * @private
	 * @name FieldSelectorModelConverter#_updateAndFilterFields
	 * @function
	 */
	FieldSelectorModelConverter.prototype._updateAndFilterFields = function(aFields, aIgnoredFields, bIsComplexType, sKey) {

		var aValidFields = [];
		for (var f = 0; f < aFields.length; f++) {
			var oCurrentField = aFields[f];
			if (oCurrentField.visible === false) {
				this.invisibleFields[sKey] = this.invisibleFields[sKey] || [];
				if (this.invisibleFields[sKey].indexOf(oCurrentField) === -1) {
					oCurrentField.isComplexType = bIsComplexType;
					this.invisibleFields[sKey].push(oCurrentField);
				}
				continue;
			}
			// TODO: check if the label is overridden in an annotation

			// only add fields which are not in ignored list
			var bIsFieldOnIgnoreList = this._isFieldOnIgnoreList(oCurrentField, aIgnoredFields, bIsComplexType);
			var bIsFieldBlacklisted = this._isFieldBlacklisted(oCurrentField);
			if (!bIsFieldOnIgnoreList && !bIsFieldBlacklisted) {
				if (this._isComplexType(oCurrentField) === true) {
					var aValidComplexTypeFields = this._resolveComplexTypeToFlatFieldList(oCurrentField, aIgnoredFields);
					if (aValidComplexTypeFields) {
						aValidFields = aValidFields.concat(aValidComplexTypeFields);
					}
				} else {
					aValidFields.push(oCurrentField);
				}
			}
		}
		return aValidFields;
	};

	/**
	 * Is field using a complex type
	 *
	 * @param {Object} oField Field from entityType
	 * @returns {Boolean} Returns true if field is using a complex type
	 */
	FieldSelectorModelConverter.prototype._isComplexType = function(oField) {
		if (oField && oField.type) {
			if (oField.type.toLowerCase().indexOf("edm") !== 0) {
				return true;
			}
		}
		return false;
	};

	/**
	 * Resolves a field from the entity type which is using a complex type into the underlying fields
	 *
	 * @param {Object} oComplexTypeField Field from entity type which is using the complex type
	 * @param {Array} aIgnoredFields Fields which should be ignored
	 * @returns {Array} Returns an array with all fields of the requested complex type
	 */
	FieldSelectorModelConverter.prototype._resolveComplexTypeToFlatFieldList = function(oComplexTypeField, aIgnoredFields) {
		var aResult = [];
		var oSchemaDefinition = this._oMetadataAnalyzer.getSchemaDefinition();

		if (oComplexTypeField && oComplexTypeField.type && oSchemaDefinition) {
			var sTypeName = this._getComplexTypeName(oComplexTypeField);
			if (sTypeName) {
				var aComplexTypes = oSchemaDefinition.complexType;
				var i = 0;
				for (i = 0; i < aComplexTypes.length; i++) {
					var oCurrentComplexType = aComplexTypes[i];
					if (oCurrentComplexType.name === sTypeName) {
						aResult = this._getFieldsFromComplexType(oCurrentComplexType, aIgnoredFields);
						break;
					}
				}
			}
		}
		return aResult;
	};

	/**
	 * Get all fields of a complex type
	 * @param {Object} oComplexType
	 * @param {Array} aIgnoredFields Fields which should be ignored
	 * @returns Returns an array with fields from the complex type
	 */
	FieldSelectorModelConverter.prototype._getFieldsFromComplexType = function(oComplexType, aIgnoredFields) {
		var aFields = this._oMetadataAnalyzer.getFieldsByComplexTypeName(oComplexType.name);
		if (aFields) {
			return this._updateAndFilterFields(aFields, aIgnoredFields, true, oComplexType.name);
		}
		return [];
	};

	/**
	 * Get the name of a complex type without the namespace
	 * @param {Object} oComplexType
	 * @returns Returns the name of the complex type without its namespace
	 */
	FieldSelectorModelConverter.prototype._getComplexTypeName = function(oComplexType) {
		var aTypeDescription = oComplexType.type.split(".");
		if (aTypeDescription.length === 2) {
			return aTypeDescription[1];
		}
		return null;
	};

	/**
	 * Check if a odata property is on the list of ignored fields
	 *
	 * @param {Object} oCurrentField Current property on entityset
	 * @param {Array} aIgnoredFields List of ignored fields
	 * @param {Boolean} bIsComplexType Set to true if fields are children of a complex type
	 * @returns {Boolean} Returns true if field was found on ignore list else false
	 */
	FieldSelectorModelConverter.prototype._isFieldOnIgnoreList = function(oCurrentField, aIgnoredFields, bIsComplexType) {
		if (aIgnoredFields) {
			var numberOfEntitySets = this._aEntityTypes.length;
			var sQualifiedName = oCurrentField.entityName + "." + oCurrentField.name;
			// If number of entity sets is only one or fields are NOT children of a complex type,
			// then full qualified name or shortname is possible
			if (numberOfEntitySets === 1 && !bIsComplexType) {
				if (aIgnoredFields.indexOf(oCurrentField.name) !== -1 || aIgnoredFields.indexOf(sQualifiedName) !== -1) {
					return true;
				}
				// else only full qualified name is valid
			} else if (aIgnoredFields.indexOf(sQualifiedName) !== -1) {
				return true;
			}
		}
		return false;
	};

	/**
	 * Check if odata property matches specific checks which identify the field as non-listable
	 *
	 * @param {object} oCurrentField Current property of entity set
	 * @returns {Boolean} Returns true if field is blacklisted and false if field can be added to list.
	 */
	FieldSelectorModelConverter.prototype._isFieldBlacklisted = function(oCurrentField) {
		if (oCurrentField) {
			if (oCurrentField.name.toLowerCase().indexOf("uxfc") === 0) {
				return true;
			} else if (oCurrentField.type.toLowerCase() === "edm.time") {
				return true;
			}
		}
		return false;
	};

	/**
	 * @param {string/array} vEntityTypes - entity types
	 * @param {string} sAnnotation - annotation
	 * @returns {array} - object of label and EntityType name of the entitySet
	 * @private
	 * @name FieldSelectorModelConverter#_getEntitySets
	 * @function
	 */
	FieldSelectorModelConverter.prototype._getEntityTypes = function(vEntityTypes, sAnnotation) {

		var aEntityTypes = [];
		var sLabel;
		var aEntityTypeNames;

		if (!this._oMetadataAnalyzer || !this._oMetadataAnalyzer._oSchemaDefinition) {
			return [];
		}

		var aAllEntityTypList = this._oMetadataAnalyzer._oSchemaDefinition.entityType;
		// TODO:
		// if (sAnnotation) {
		// aEntityTypeNames = this._oMetadataAnalyzer.getEntityTypeNameByAnnotation(sAnnotation);
		// }
		if (!vEntityTypes) {
			aEntityTypeNames = [];
			for (var t = 0; t < aAllEntityTypList.length; t++) {
				aEntityTypeNames.push(aAllEntityTypList[t].name);
			}
		}
		if (!aEntityTypeNames) {
			aEntityTypeNames = this._convertEntityTypesToArray(vEntityTypes);
		}

		for (var e = 0; e < aEntityTypeNames.length; e++) {
			sLabel = this._oMetadataAnalyzer.getEntityLabelByEntityTypeName(aEntityTypeNames[e]);
			aEntityTypes.push({
				key: aEntityTypeNames[e],
				label: sLabel || aEntityTypeNames[e]
			});
		}

		return aEntityTypes;
	};

	/**
	 * @param {string/array} vEntityTypes - entity types
	 * @returns {array} - entity types
	 * @private
	 * @name sap.ui.comp.odata.FieldSelector#_convertEntityTypesToArray
	 * @function
	 */
	FieldSelectorModelConverter.prototype._convertEntityTypesToArray = function(vEntityTypes) {

		if (typeof (vEntityTypes) === "string") {
			var sRawString = vEntityTypes.replace(/ /g, '');
			return sRawString.split(',');
		}

		if (jQuery.isArray(vEntityTypes)) {
			return vEntityTypes;
		}

		return undefined;
	};

	/**
	 * Destroys the inner references
	 *
	 * @public
	 * @name sap.ui.comp.odata.FieldSelector#destroy
	 * @function
	 */
	FieldSelectorModelConverter.prototype.destroy = function() {

		if (this._oMetadataAnalyzer && this._oMetadataAnalyzer.destroy) {
			this._oMetadataAnalyzer.destroy();
		}
		this._oMetadataAnalyzer = null;
		this._aEntityTypes = null;
	};

	return FieldSelectorModelConverter;

}, /* bExport= */true);

}; // end of sap/ui/comp/odata/FieldSelectorModelConverter.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.personalization.Controller') ) {
/* eslint-disable strict */

/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides Controller
jQuery.sap.declare('sap.ui.comp.personalization.Controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nDialog'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/personalization/Controller",[
	'jquery.sap.global', 'sap/ui/base/ManagedObject', './ColumnsController', './FilterController', './GroupController', './SortController', './DimeasureController', './SelectionController', './Util', 'sap/ui/comp/library', './ChartWrapper', './SelectionWrapper', './ColumnHelper', 'sap/ui/core/MessageType', 'sap/m/P13nDialog', './Validator'
], function(jQuery, ManagedObject, ColumnsController, FilterController, GroupController, SortController, DimeasureController, SelectionController, Util, CompLibrary, ChartWrapper, SelectionWrapper, ColumnHelper, MessageType, P13nDialog, Validator) {
	"use strict";

	/**
	 * The controller represents the central communication hub with respect to personalisation. It makes sure to present the right user interface, do
	 * the necessary communication with this user interface and to provide events with which the consumer can require additional information needed,
	 * e.g. when an additional column is chosen via the user interface. It also exposes methods to set personalisation data 'from outside' and to
	 * revert to a latest clean state (with different definitions of "clean"). It is important to notice that the controller in general exposes
	 * changes as delta to a "baseline state". The "baseline state" is first and foremost the state defined via the table instance used to instantiate
	 * the controller. (We use the phrase "first and foremost" since the controller also exposes json objects which represents deltas to the last
	 * personalisation data set 'from outside' - this can be used by the consumer to handle dirty state.) This table instance, and thus the "baseline
	 * state", cannot be changed at a later point in time. As a consequence, the consumer should instantiate the controller with exactly the table
	 * instance on which she wishes the deltas to be calculated.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The personalization Controller provides capabilities in order to orchestrate the P13nDialog.
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP SE
	 * @version 1.50.6
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @private
	 * @since 1.26.0
	 * @alias sap.ui.comp.personalization.Controller
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Controller = ManagedObject.extend("sap.ui.comp.personalization.Controller", /** @lends sap.ui.comp.personalization.Controller */
	{
		constructor: function(sId, mSettings) {
			ManagedObject.apply(this, arguments);
		},
		metadata: {
			publicMethods: [
				"setPersonalizationData"
			],
			properties: {

				/**
				 * For each panel type, the <code>setting</code> property can contain <code>visible</code>, <code>controller</code>,
				 * <code>payload</code> and <code>ignoreColumnKeys</code> attributes can be defined. The <code>setting</code> property is used
				 * in a black list, meaning that specific panels can be overwritten. In this example, the Group panel will not be shown, and for the
				 * Columns panel the <code>visibleItemsThreshold</code> is set to 10. The attribute <code>ignoreColumnKeys</code> provides an
				 * array of column keys which should be ignored in the Columns panel. Additionally, a new controller instance can be defined.
				 * <bold>Note</bold>: this property should be passed into constructor and is not allowed to be changed afterwards.
				 *
				 * <pre><code>
				 * {
				 * 	group: {
				 * 		visible: false,
				 * 		ignoreColumnKeys: []
				 * 	},
				 * 	columns: {
				 * 		visible: true,
				 * 		payload: {
				 * 			visibleItemsThreshold: 10
				 * 		},
				 * 		ignoreColumnKeys: [],
				 * 		controller: new sap.ui.comp.personalization.TestController(&quot;TestController&quot;)
				 * 	},
				 * 	dimeasure: {
				 * 		visible: true,
				 * 		payload: {
				 * 			availableChartTypes: [
				 * 				&quot;pie&quot;, &quot;column&quot;, &quot;line&quot;, &quot;donut&quot;
				 * 			]
				 * 		}
				 * 	},
				 * 	selection: {
				 * 		visible: true,
				 * 		payload: {
				 * 			callbackSaveChanges: function
				 * 		}
				 * 	}
				 * }
				 * </code></pre>
				 */
				setting: {
					type: "object",
					defaultValue: {}
				},
				/**
				 * The current state can be set back either to the state of initial table (ResetFull) or to the specific state of the table
				 * (ResetPartial) which has been set via <code>setPersonalizationData</code> method
				 */
				resetToInitialTableState: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Once the <code>columnKeys</code> is passed it must contain all possible column keys. The order of the column keys is taken into account.
				 * <bold>Note</bold>: this property should be passed into constructor and is not allowed to be changed afterwards.
				 */
				columnKeys: {
					type: "string[]",
					defaultValue: []
				}
			},
			associations: {
				/**
				 * Table on which the personalization will be performed. <bold>Note</bold>: this property is mandatory and should be passed into
				 * constructor and is not allowed to be changed afterwards.
				 */
				table: {
					type: "object",
					multiple: false
				}
			},
			events: {
				/**
				 * If a table is manipulated directly, such as column move, column resize etc., this event is raised <b>before</b> the action has
				 * been finished. However, that does not mean that the table is really changed. For example, the column touched could be moved to a
				 * new position or could also be dropped at the old position.
				 */
				beforePotentialTableChange: {},
				/**
				 * If a table is manipulated directly, such as column move, column resize etc., this event is raised <b>after</b> the action has been
				 * finished. However, that does not mean that the table is really changed. For example, the column touched could be moved to a new
				 * position or could also be dropped at the old position.
				 */
				afterPotentialTableChange: {},

				/**
				 * Event is fired if the personalization model data is changed
				 */
				afterP13nModelDataChange: {
					parameters: {
						/**
						 * Reason for change
						 */
						changeReason: {
							type: "sap.ui.comp.personalization.ResetType"
						},
						/**
						 * Fragment of model data in JSON format that is relevant for persistence.
						 */
						persistentData: {
							type: "object"
						},
						/**
						 * Fragment of model data in JSON format that has been changed since last <code>afterP13nModelDataChange</code> event was
						 * raised. Consumers of the personalization dialog have to react to it in order to sort or filter the table.
						 */
						changeData: {
							type: "object"
						},
						/**
						 * Information about what has been changed since last <code>afterP13nModelDataChange</code> event was raised. Consumers of
						 * the personalization dialog have to react to it in order to sort or filter the table.
						 */
						changeType: {
							type: "sap.ui.comp.personalization.ChangeType"
						},
						/**
						 * Information about what has been changed since last variant was set. Consumers of the personalization dialog have to react
						 * to it in order to show dirty flag.
						 */
						changeTypeVariant: {
							type: "sap.ui.comp.personalization.ChangeType"
						},
						/**
						 * Information about what has been changed with respect to the restore point. This "restore point" is dependent upon
						 * resetToInitialTableState; if "true" then this restore point is equal to initial state of the table
						 * (this._oPersistentDataRestore), if "false" then the restore point is equal to the current variant
						 * (this._oPersistentDataCurrentVariant).
						 */
						changeTypeRestore: {
							type: "sap.ui.comp.personalization.ChangeType"
						}
					}
				},
				/**
				 * Event is fired in order to request columns which were not passed together with table in constructor.
				 *
				 * @since 1.38.0
				 */
				requestColumns: {
					parameters: {
						columnKeys: {
							type: "string"
						}
					}
				},
				/**
				 * Event is fired after the dialog has been closed.
				 *
				 * @since 1.46.0
				 */
				dialogAfterClose: {},

				/**
				 * Event is fired after the Restore button has been pressed and, at the same time, after it has been confirmed by pressing the OK
				 * button in the dialog.
				 *
				 * @since 1.46.0
				 */
				dialogConfirmedReset: {}
			},
			library: "sap.ui.comp"
		}
	});

	// TODO: due to performance reason: avoid bypass of oTable in case that only JSON object is available
	Controller.prototype.setTable = function(oTable) {
		if (this._bInitCalled) {
			throw "The table instance should be passed only into constructor.";
		}
		this.setAssociation("table", oTable);
		return this;
	};

	Controller.prototype.setSetting = function(oSetting) {
		if (this._bInitCalled) {
			throw "The setting instance should be passed only into constructor.";
		}
		oSetting = this.validateProperty("setting", oSetting);
		this.setProperty("setting", oSetting, true); // no rerendering
		return this;
	};

	Controller.prototype.setColumnKeys = function(aColumnKeys) {
		if (this._bInitCalled) {
			throw "The columnKeys array should be passed only into constructor.";
		}
		aColumnKeys = this.validateProperty("columnKeys", aColumnKeys);
		this.setProperty("columnKeys", aColumnKeys, true); // no rerendering
		return this;
	};

	Controller.prototype.setResetToInitialTableState = function(bResetToInitialTableState) {
		if (this._bInitCalled) {
			throw "The resetToInitialTableState property should be passed only into constructor.";
		}
		bResetToInitialTableState = this.validateProperty("resetToInitialTableState", bResetToInitialTableState);
		this.setProperty("resetToInitialTableState", bResetToInitialTableState, true); // no rerendering
		return this;
	};

	Controller.prototype._mergeSettingCurrentBy = function(oSetting) {

		if (Util.getTableType(this.getTable()) === sap.ui.comp.personalization.TableType.ChartWrapper) {
			this._oSettingCurrent = Util.copy(this._oSettingOriginalChart);
		} else if (Util.getTableType(this.getTable()) === sap.ui.comp.personalization.TableType.SelectionWrapper) {
			this._oSettingCurrent = Util.copy(this._oSettingOriginalSelection);
		} else {
			this._oSettingCurrent = Util.copy(this._oSettingOriginalTable);
		}

		for ( var type in oSetting) {
			if (oSetting[type].visible === false) {
				delete this._oSettingCurrent[type];
				continue;
			}
			if (this._oSettingCurrent[type] && this._oSettingCurrent[type].visible === true) {
				// Take over well known panels
				this._oSettingCurrent[type].controller = oSetting[type].controller ? oSetting[type].controller : this._oSettingCurrent[type].controller;
				this._oSettingCurrent[type].payload = oSetting[type].payload ? oSetting[type].payload : undefined;
				this._oSettingCurrent[type].ignoreColumnKeys = oSetting[type].ignoreColumnKeys ? oSetting[type].ignoreColumnKeys : [];
				this._oSettingCurrent[type].triggerModelChangeOnColumnInvisible = oSetting[type].triggerModelChangeOnColumnInvisible ? oSetting[type].triggerModelChangeOnColumnInvisible : undefined;
			} else {
				// Take over custom panels
				this._oSettingCurrent[type] = {
					visible: oSetting[type].visible,
					controller: oSetting[type].controller ? oSetting[type].controller : undefined,
					payload: oSetting[type].payload ? oSetting[type].payload : undefined,
					ignoreColumnKeys: oSetting[type].ignoreColumnKeys ? oSetting[type].ignoreColumnKeys : [],
					triggerModelChangeOnColumnInvisible: oSetting[type].triggerModelChangeOnColumnInvisible ? oSetting[type].triggerModelChangeOnColumnInvisible : undefined
				};
			}
		}

		this._removeUnsupportedNamespaces();
	};

	Controller.prototype._mixSetting = function(oSettingGlobal, oSetting) {
		if (!oSetting) {
			return oSettingGlobal;
		}
		for ( var type in oSetting) {
			if (oSetting[type].visible && oSettingGlobal[type] && oSettingGlobal[type].visible) {
				// Enrich controller
				oSetting[type].controller = oSettingGlobal[type].controller;
				// Payload on oSetting has higher priority then payload on oSettingGlobal
				oSetting[type].payload = oSetting[type].payload ? oSetting[type].payload : oSettingGlobal[type].payload;
			}
		}
		return oSetting;
	};

	Controller.prototype.getTable = function() {
		var oTable = this.getAssociation("table");
		if (typeof oTable === "string") {
			oTable = sap.ui.getCore().byId(oTable);
		}
		return oTable;
	};

	Controller.prototype.getModel = function() {
		return this._oModel;
	};

	/**
	 * Adds all requested columns.
	 * @param {object} oColumnKey2ColumnMap Format: {<path>: oColumn}
	 */
	Controller.prototype.addColumns = function(oColumnKey2ColumnMap) {
		// TODO: shall we check the new columns with _checkIgnoredColumnKeys()?
		// TODO: in Filter, Sort, Group und Dimeasure: reiche neu hinzugekommenen
		// Columns (addColumns) in Restore Snapshot (_getTable2JsonRestore)
		this._oColumnHelper.addColumnMap(oColumnKey2ColumnMap);
	};

	Controller.prototype.applySettings = function(mSettings) {
		ManagedObject.prototype.applySettings.apply(this, arguments);
		this._initialize();
	};

	Controller.prototype._initialize = function() {

		// Process table
		var oTable = this.getTable();
		if (!oTable) {
			throw "The table instance should be passed into constructor.";
		}
		var aColumns = oTable.getColumns();
		if (!Util.isConsistent(aColumns)) {
			throw "The table instance provided contains some inconsistences (it could be a columnKey which is not provided or a duplicate columnKey).";
		}

		// 1. Init _oSettingCurrent
		this._mergeSettingCurrentBy(this.getSetting());

		// 2. Init _oColumnHelper with at this point of time known columns
		this._oColumnHelper.addColumnsToMap(aColumns);
		var aColumnKeys = this.getProperty("columnKeys");
		if (!aColumnKeys.length) {
			aColumnKeys = this._oColumnHelper.getColumnKeysOfMap();
		}
		this.setColumnKeys(aColumnKeys);

		// 3. Check ignored column keys
		this._checkIgnoredColumnKeys(oTable, this._oColumnHelper.getVisibleColumnKeys());

		this._masterSync(Controller.SyncReason.Initialize, null, null);

		this._bInitCalled = true;
	};

	/**
	 * Initializes the personalization Controller instance after creation.
	 *
	 * @protected
	 */
	Controller.prototype.init = function() {
		var that = this;
		this._oDialog = null;
		this._oPayload = null;
		this._oPersistentDataRestore = null;
		this._oPersistentDataCurrentVariant = null;
		this._oPersistentDataAlreadyKnown = null;
		this._oPersistentDataBeforeOpen = null;
		this._oModel = null;
		this._aColumnKeysOfDateType = [];
		this._aColumnKeysOfBooleanType = [];
		this._aColumnKeysOfTimeType = [];
		this._bIsDirty = false;
		this._bInitCalled = false;
		this._bSuspend = false;
		this._bUnconfirmedResetPressed = false;

		this._oColumnHelper = new ColumnHelper({
			callbackOnSetVisible: this._onSetVisible.bind(this),
			callbackOnSetSummed: this._onSetSummed.bind(this)
		});

		// default: all panels are set to visible

		// NOTE: instantiating the sub-Controllers only when opening the dialog is
		// too late since this data could be set before this and we expect
		// sub-Controllers to handle these data
		this._oSettingOriginalTable = {
			columns: {
				controller: new ColumnsController({
					columnHelper: this._oColumnHelper,
					afterColumnsModelDataChange: function() {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function() {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function() {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			sort: {
				controller: new SortController({
					columnHelper: this._oColumnHelper,
					afterSortModelDataChange: function() {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function() {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function() {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			filter: {
				controller: new FilterController({
					columnHelper: this._oColumnHelper,
					afterFilterModelDataChange: function() {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function() {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function() {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			group: {
				controller: new GroupController({
					columnHelper: this._oColumnHelper,
					afterGroupModelDataChange: function() {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function() {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function() {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			}
		};
		this._oSettingOriginalChart = {
			dimeasure: {
				controller: new DimeasureController({
					columnHelper: this._oColumnHelper,
					afterDimeasureModelDataChange: function() {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function() {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function() {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			sort: {
				controller: new SortController({
					columnHelper: this._oColumnHelper,
					afterSortModelDataChange: function() {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function() {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function() {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			},
			filter: {
				controller: new FilterController({
					columnHelper: this._oColumnHelper,
					afterFilterModelDataChange: function() {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function() {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function() {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			}
		};
		this._oSettingOriginalSelection = {
			selection: {
				controller: new SelectionController({
					columnHelper: this._oColumnHelper,
					afterSelectionModelDataChange: function() {
						that._fireChangeEvent();
					},
					beforePotentialTableChange: function() {
						that.fireBeforePotentialTableChange();
					},
					afterPotentialTableChange: function() {
						that.fireAfterPotentialTableChange();
					}
				}),
				visible: true
			}
		};
	};

	/**
	 * Opens the personalization dialog
	 *
	 * @param {object} oSettingsForOpen contains additional settings information for opening the dialog with its panels. Settings information is used
	 *        in the manner of white list, meaning that only specified panels are considered. Example for a dialog with sort and filter panels:
	 *
	 * <pre><code>
	 * {
	 * 	contentWidth: CSSSize,
	 * 	contentHeight: CSSSize,
	 * 	showReset: boolean,
	 * 	sort: {
	 * 		visible: true
	 * 	},
	 * 	filter: {
	 * 		visible: true
	 * 	},
	 * 	dimeasure: {
	 * 		visible: true,
	 * 		payload: {
	 * 			availableChartTypes: [
	 * 				new sap.ui.core.Item({
	 * 					key: sap.chart.ChartType.Column,
	 * 					text: 'Column'
	 * 				}), new sap.ui.core.Item({
	 * 					key: sap.chart.ChartType.Donut,
	 * 					text: 'Donut'
	 * 				})
	 * 			]
	 * 		}
	 * 	},
	 * 	selection: {
	 * 		visible: true
	 * 	}
	 * }
	 * </code></pre>
	 */
	Controller.prototype.openDialog = function(oSettingsForOpen) {

		this._suspendTable();

		var aMissingColumnKeys = this._determineMissingColumns(this.getColumnKeys());
		if (aMissingColumnKeys.length) {
			this.fireRequestColumns({
				columnKeys: aMissingColumnKeys
			});
			// We do it here and only here manually because in case of variant load, the _masterSync handles adding of columns into table anyway.
			// TODO: make just one masterSync instead of two (NewModelData + NewTableBinding)
			this._masterSync(Controller.SyncReason.NewModelData, this._getPersistentDataCopy(), null);
		}

		// we assume at this point that the binding is done !!
		this._masterSync(Controller.SyncReason.NewTableBinding, null, null);

		this._oDialog = new P13nDialog({
			stretch: sap.ui.Device.system.phone,
			showReset: (oSettingsForOpen && oSettingsForOpen.showReset !== undefined) ? oSettingsForOpen.showReset : true,
			showResetEnabled: this._bIsDirty,
			initialVisiblePanelType: this._oInitialVisiblePanelType,
			validationExecutor: this._handleDialogValidate.bind(this)
		});

		if (oSettingsForOpen && oSettingsForOpen.contentWidth) {
			this._oDialog.setContentWidth(oSettingsForOpen.contentWidth);
		}
		if (oSettingsForOpen && oSettingsForOpen.contentHeight) {
			this._oDialog.setContentHeight(oSettingsForOpen.contentHeight);
		}

		// Set compact style class if the table is compact too
		this._oDialog.toggleStyleClass("sapUiSizeCompact", !!jQuery(this.getTable().getDomRef()).closest(".sapUiSizeCompact").length);

		var oSettingForOpen = this._mixSetting(this._oSettingCurrent, oSettingsForOpen);

		var oPanels = this._callControllers(oSettingForOpen, "getPanel");
		for ( var type in oSettingForOpen) {
			if (oPanels[type]) {
				this._oDialog.addPanel(oPanels[type]);
			}
		}

		this._oPersistentDataBeforeOpen = this._getPersistentDataCopy();

		this._oDialog.attachOk(this._handleDialogOk, this);
		this._oDialog.attachCancel(this._handleDialogCancel, this);
		this._oDialog.attachReset(this._handleDialogReset, this);
		this._oDialog.attachAfterClose(this._handleDialogAfterClose, this);

		this._oDialog.open();
	};

	/**
	 * @private
	 */
	Controller.prototype._determineNeededColumnKeys = function(oPersistentData) {
		var oNeededColumnKeys = this._callControllers(this._oSettingCurrent, "determineNeededColumnKeys", oPersistentData);
		return Util.getUnionOfColumnKeys(oNeededColumnKeys);
	};

	/**
	 * @private
	 */
	Controller.prototype._determineMissingColumns = function(aNeededColumnKeys) {
		if (!aNeededColumnKeys.length) {
			return [];
		}
		var aMissingColumnKeys = [];
		var aTableColumnKeys = this._oColumnHelper.getColumnKeysOfMap();
		aNeededColumnKeys.forEach(function(sColumnKey) {
			if (aTableColumnKeys.indexOf(sColumnKey) < 0) {
				aMissingColumnKeys.push(sColumnKey);
			}
		});
		return aMissingColumnKeys;
	};

	/**
	 * @private
	 */
	Controller.prototype._getSettingOfPanels = function() {
		if (!this._oDialog || !this._oDialog.getPanels()) {
			return {};
		}
		var oSetting = {};
		this._oDialog.getPanels().forEach(function(oPanel) {
			var sType = oPanel.getType();
			oSetting[sType] = {
				controller: this._oSettingCurrent[sType].controller,
				visible: this._oSettingCurrent[sType].visible,
				payload: this._oSettingCurrent[sType].payload
			};
		}, this);
		return oSetting;
	};

	/**
	 * @private
	 */
	Controller.prototype._getPersistentDataCopy = function() {
		var oPersistentData = {};
		if (this.getModel() && this.getModel().getData().persistentData) {
			oPersistentData = Util.copy(this.getModel().getData().persistentData);
		}
		return oPersistentData;
	};

	/**
	 * Returns a current snapshot of persistent data in DataSuiteFormat.
	 * @returns {Object} DataSuiteFormat
	 */
	Controller.prototype.getDataSuiteFormatSnapshot = function() {
		var oDataSuiteFormat = {};
		this._callControllers(this._oSettingCurrent, "getDataSuiteFormatSnapshot", oDataSuiteFormat);
		return oDataSuiteFormat;
	};

	/**
	 * Replaces the current snapshot with the persistent data represented in Data Suite Format <code>oDataSuiteFormat</code>. The <code>oPersistentDataVariant</code> defines the base line of restore.
	 * @param {object} oDataSuiteFormat
	 * @param {object} oPersistentDataVariant
	 */
	Controller.prototype.setDataSuiteFormatSnapshot = function(oDataSuiteFormat, oPersistentDataVariant) {
		if (!this._sanityCheck(oPersistentDataVariant)) {
			return;
		}

		var oPersistentData = this._callControllers(this._oSettingCurrent, "_getDataSuiteFormat2Json", oDataSuiteFormat);
		var aMissingColumns1 = this._determineNeededColumnKeys(oPersistentData);
		var aMissingColumns2 = this._determineNeededColumnKeys(oPersistentDataVariant);
		var aMissingColumns = jQuery.extend(true, {}, aMissingColumns1, aMissingColumns2);
		aMissingColumns = Util.getUnionOfColumnKeys(aMissingColumns);

		var aMissingColumnKeys = this._determineMissingColumns(aMissingColumns);
		if (aMissingColumnKeys.length) {
			this.fireRequestColumns({
				columnKeys: aMissingColumnKeys
			});
		}

		this._suspendTable();
		this._masterSync(Controller.SyncReason.NewModelDataMixedWithVariant, oPersistentData, oPersistentDataVariant);
		this._fireChangeEvent();
		this._resumeTable(true);
	};

	/**
	 * Setter for personalization model. Note: for data of type Date the object instance is expected and not string representation.
	 *
	 * @param{object} oNewPersistentData Contains personalization data that is taken over into the model
	 */
	Controller.prototype.setPersonalizationData = function(oNewPersistentData) {
		if (!this._sanityCheck(oNewPersistentData)) {
			return;
		}

		var aMissingColumnKeys = this._determineMissingColumns(this._determineNeededColumnKeys(oNewPersistentData));
		if (aMissingColumnKeys.length) {
			this.fireRequestColumns({
				columnKeys: aMissingColumnKeys
			});
		}

		this._suspendTable();
		this._masterSync(Controller.SyncReason.NewModelDataVariant, oNewPersistentData, null);

		this._resumeTable(true);
		this._fireChangeEvent();

		// The variable "this._oPersistentDataAlreadyKnown" is already set up-to-date in _fireChangeEvent()
	};

	/**
	 * Notice that the dirty calculation and hence intrinsic restore handling is based exclusively on the property "resetToInitialTableState", the
	 * parameter sResetType is ignored !! TODO: not quite clear if there are use cases in which this (the above statement) is a problem --> maybe
	 * remove the parameter sResetType.
	 *
	 * @param {sap.ui.comp.personalization.ResetType} sResetType is optional.
	 */
	Controller.prototype.resetPersonalization = function(sResetType) {
		// TODO: compare with _handleDialogReset: make common method and parameter 'silent' 'isOpen'

		this._suspendTable();

		var bResetToInitialTableState = this.getResetToInitialTableState();
		if (sResetType === sap.ui.comp.personalization.ResetType.ResetFull || sResetType === sap.ui.comp.personalization.ResetType.ResetPartial) {
			bResetToInitialTableState = (sResetType === sap.ui.comp.personalization.ResetType.ResetFull);
		}

		if (bResetToInitialTableState) {
			this._masterSync(Controller.SyncReason.ResetModelData, null, null);
			this._fireChangeEvent(sap.ui.comp.personalization.ResetType.ResetFull);
		} else {
			this._masterSync(Controller.SyncReason.ResetModelDataVariant, null, null);
			this._fireChangeEvent(sap.ui.comp.personalization.ResetType.ResetPartial);
		}

		this._resumeTable(true);
		// The variable "this._oPersistentDataAlreadyKnown" is already set up-to-date in _fireChangeEvent()
	};

	/**
	 * Handles the dialog "reset" event.
	 *
	 * @param {object} oEvent is of type sap.ui.base.Event and contains information about source object where event was raised
	 */
	Controller.prototype._handleDialogReset = function(oEvent) {

		this._suspendTable();

		this._bUnconfirmedResetPressed = true;

		if (this.getResetToInitialTableState()) {
			this._masterSync(Controller.SyncReason.ResetModelData, null, null);
		} else {
			this._masterSync(Controller.SyncReason.ResetModelDataVariant, null, null);
		}

		var relevantControllers = this._getSettingOfPanels();
		this._callControllers(relevantControllers, "onAfterReset", oEvent.getParameter("payload"));

		this._resumeTable(true);
		// Note: do not fire event since triggering reset does not mean that this reset will be actually submitted.
		// Could even consider to hold back _masterSync
	};

	/**
	 * Handle the dialog "close" event
	 *
	 * @param {object} oEvent is of type sap.ui.base.Event and contains information about source object where event was raised
	 */
	Controller.prototype._handleDialogCancel = function(oEvent) {

		this._oDialog.detachCancel(this._handleDialogCancel, this);

		this._oDialog.close();
	};

	/**
	 * Handle the dialog "ok" event
	 *
	 * @param {object} oEvent is of type sap.ui.base.Event and contains information about source object where event was raised
	 */
	Controller.prototype._handleDialogOk = function(oEvent) {

		this._oDialog.detachOk(this._handleDialogOk, this);

		if (this._bUnconfirmedResetPressed) {
			this.fireDialogConfirmedReset();
		}

		// TODO: consider to improve this ! Perhaps better to transport payload as custom data on dialog though then we must potentially take more
		// care about life cycle of the dialog
		this._oPayload = {
			trigger: "ok",
			payload: oEvent.getParameter("payload")
		};

		this._oDialog.close();
	};

	Controller.prototype._handleDialogAfterClose = function() {
		var that = this;
		var _oPayload = this._oPayload;

		// Store the latest open panel
		this._oInitialVisiblePanelType = this._oDialog.getVisiblePanel() ? this._oDialog.getVisiblePanel().getType() : this._getInitialVisiblePanelType();

		// Initialize '_bUnconfirmedResetPressed'
		this._bUnconfirmedResetPressed = false;

		if (_oPayload && _oPayload.trigger === "ok") {
			setTimeout(function() {
				var oSettingOfVisiblePanels = that._getSettingOfPanels();
				if (that._oDialog) {
					that._oDialog.destroy();
					that._oDialog = null;
				}

				that._callControllers(oSettingOfVisiblePanels, "onAfterSubmit", that._oPayload.payload);
				that._oPayload = null;
				that._fireChangeEvent();
				that._oPersistentDataBeforeOpen = null;
				that._resumeTable(true);
				that.fireDialogAfterClose();
			}, 0);

		} else {
			setTimeout(function() {
				// cancel
				if (that._oDialog) {
					that._oDialog.destroy();
					that._oDialog = null;
				}
				// call _masterSync only after dialog has been closed and destroyed, otherwise changing the model will update the
				// dialog's bindings which causes performance issues
				that._masterSync(Controller.SyncReason.NewModelData, that._oPersistentDataBeforeOpen, null);
				that._oPersistentDataBeforeOpen = null;
				// TODO: check if OK to avoid invalidation ...
				that._resumeTable(false);
				that.fireDialogAfterClose();
			}, 0);
		}
	};

	/**
	 * Handles the Validate event of the dialog.
	 *
	 * @param {object} oPayload Payload of all panels
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution containing array of objects of format: {columnKey: <string>, panelTypes: <string[]>, messageType: <string>, messageText: <string>}
	 */
	Controller.prototype._handleDialogValidate = function(oPayload) {
		var aResult = [];
		var oTable = this.getTable();
		var oSetting = this._getSettingOfPanels();
		var oColumnKey2ColumnMap = this._oColumnHelper.getColumnMap();
		var oPersistentDataTotal = this._callControllers(oSetting, "getUnionData", Util.copy(this._oPersistentDataRestore), this._getPersistentDataCopy());

		return Validator.checkGroupAndColumns(Util.getTableType(oTable), oSetting, oPayload, oColumnKey2ColumnMap, oPersistentDataTotal, aResult).then(function(aResultTotal) {
			return Validator.checkSaveChanges(Util.getTableType(oTable), oSetting, oPayload, aResultTotal).then(function(aResultTotal) {
				return aResultTotal;
			});
		});
	};

	/**
	 * Get first property of current setting object
	 *
	 * @returns {string} that represents the panel type
	 */
	Controller.prototype._getInitialVisiblePanelType = function() {
		for ( var type in this._oSettingCurrent) {
			return type;
		}
	};

	Controller.prototype._suspendTable = function() {
		if (Util.getTableBaseType(this.getTable()) === sap.ui.comp.personalization.TableType.Table) {
			this._bSuspend = true;
		}
	};

	Controller.prototype._resumeTable = function(bInvalidate) {
		// default is to invalidate table
		bInvalidate = (bInvalidate === undefined) ? true : bInvalidate;
		var oTable = this.getTable();
		if (this._bSuspend) {
			if (oTable) {
				if (bInvalidate) {
					oTable.invalidate();
				}
			}
			this._bSuspend = false;
		}
	};

	/**
	 * setSetting can be called after setTable() is called. It is recommended to avoid communicating with MiniControllers in case MiniControllers are
	 * not final yet.
	 *
	 * @param {string} sUseCase For execution of masterSync
	 * @param {object} oNewPersistentData New persistent data
	 */
	Controller.prototype._masterSync = function(sUseCase, oNewPersistentData, oNewPersistentDataVariant) {
		var type;
		var oJson;
		var oPersistentDataTotal;
		var oPersistentDataNew;

		switch (sUseCase) {

			case Controller.SyncReason.NewTableBinding:

				// this.initializeModel();

				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");
				break;

			case Controller.SyncReason.Initialize:

				this.initializeModel();
				// e.g. set up event handlers based on table instance

				this._callControllers(this._oSettingCurrent, "setTable", this.getTable());
				// Set model binding size dependent of column length in model data.
				// This is necessary as otherwise the table does show maximum 100 items.
				// We assume that filter with more than 1000 conditions is unrealistic
				this._setSizeLimit(this.getTable());

				this._callControllers(this._oSettingCurrent, "setIgnoreColumnKeys");
				this._callControllers(this._oSettingCurrent, "setTriggerModelChangeOnColumnInvisible");

				// re-build transient data to reflect 'final' state of table (TODO: lazy optimization possible, i.e. move to
				// getPanel e.g.)
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				// take snapshot of table so that we can restore this state later
				this._callControllers(this._oSettingCurrent, "createTableRestoreJson", this.getColumnKeys());

				// no new persistent data was provided from outside - in this case the table instance represent the correct
				// state of persistent data which is why we update the persistent data from the table. There are limitations though,
				// since we cannot ask the table for filter and sort info e.g.
				this._callControllers(this._oSettingCurrent, "syncTable2PersistentModel");

				// Copy the current table state in order to put back in case that it is needed (aka standard variant).
				oJson = this._callControllers(this._oSettingCurrent, "getTableRestoreJson");
				this._oPersistentDataRestore = Util.copy(oJson);

				// TODO: should we check if _oPersistentDataCurrentVariant is existing first?
				this._oPersistentDataCurrentVariant = {};

				this._aColumnKeysOfDateType = [];
				this._aColumnKeysOfTimeType = [];
				this._aColumnKeysOfBooleanType = [];

				// Notice that _getPersistentDataCopy() is equal to <subController>._getTable2Json
				this._oPersistentDataAlreadyKnown = Util.copy(this._oPersistentDataRestore);

				// Reduce data to current setting in case that setSetting() is called after setTable()
				for (type in this._oPersistentDataRestore) {
					if (!this._oSettingCurrent[type]) {
						delete this._oPersistentDataRestore[type];
					}
				}
				// Reduce data to current setting in case that setSetting() is called after setTable()
				for (type in this._oPersistentDataAlreadyKnown) {
					if (!this._oSettingCurrent[type]) {
						delete this._oPersistentDataAlreadyKnown[type];
					}
				}
				// Reduce data to current setting in case that setSetting() is called after setTable()
				for (type in this._oPersistentDataCurrentVariant) {
					if (!this._oSettingCurrent[type]) {
						delete this._oPersistentDataCurrentVariant[type];
					}
				}
				break;

			case Controller.SyncReason.NewModelDataVariant:
				if (oNewPersistentData === null) {
					oNewPersistentData = {};
				}

				oPersistentDataTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(oNewPersistentData));
				this.initializeModel(oPersistentDataTotal);
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");
				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", oPersistentDataTotal);
				this._callControllers(this._oSettingCurrent, "reducePersistentModel");
				this._oPersistentDataCurrentVariant = Util.copy(oNewPersistentData);
				break;

			case Controller.SyncReason.NewModelData:
				if (oNewPersistentData === null) {
					oNewPersistentData = {};
				}
				oPersistentDataTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(oNewPersistentData));
				this.initializeModel(oPersistentDataTotal);
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");
				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", oPersistentDataTotal);
				this._callControllers(this._oSettingCurrent, "reducePersistentModel");
				break;

			case Controller.SyncReason.NewModelDataMixedWithVariant:
				if (oNewPersistentData === null) {
					oNewPersistentData = {};
				}
				if (oNewPersistentDataVariant === null) {
					oNewPersistentDataVariant = {};
				}

				oPersistentDataTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(oNewPersistentData));
				this.initializeModel(oPersistentDataTotal);
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");
				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", oPersistentDataTotal);
				this._callControllers(this._oSettingCurrent, "reducePersistentModel");
				this._oPersistentDataCurrentVariant = Util.copy(oNewPersistentDataVariant);
				break;

			case Controller.SyncReason.ResetModelData:

				oPersistentDataNew = this._projectRestoreData2PersistentModel4Panels(this._oPersistentDataRestore);
				this.initializeModel(oPersistentDataNew);

				// re-build transient data to reflect 'final' state of table (TODO: lazy optimization possible, i.e. move to
				// getPanel e.g.)
				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				// Note: persistentData to table is not enough since we must first revert table back to restore version - remember
				// oNewPersistentData is restore!
				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", Util.copy(oPersistentDataNew));

				this._callControllers(this._oSettingCurrent, "reducePersistentModel");

				// Note: since the consumer in this case also want the change events, we do *not* update the
				// _oPersistentDataAlreadyKnown here
				// this._oPersistentDataAlreadyKnown = this._getPersistentDataCopy();
				break;

			case Controller.SyncReason.ResetModelDataVariant:

				// Note: when calling syncJsonModel2Table we need to ensure that we enrich _oPersistentDataCurrentVariant with the
				// _oPersistentDataRestore (think of the example in which _oPersistentDataCurrentVariant is empty then the table wouldn't be
				// changed). This comment is similar to the one for "case Controller.SyncReason.ResetModelData:".
				oPersistentDataNew = this._projectRestoreData2PersistentModel4Panels(this._oPersistentDataCurrentVariant);
				var oPersistentDataCurrentVariantTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(oPersistentDataNew));
				this.initializeModel(oPersistentDataCurrentVariantTotal);

				this._callControllers(this._oSettingCurrent, "syncTable2TransientModel");

				this._callControllers(this._oSettingCurrent, "syncJsonModel2Table", oPersistentDataCurrentVariantTotal);

				this._callControllers(this._oSettingCurrent, "reducePersistentModel");

				// Note: since the consumer in this case also want the change events, we do *not* update the
				// _oPersistentDataAlreadyKnown here
				// this._oPersistentDataAlreadyKnown = this._getPersistentDataCopy();
				break;

			default:
		}
		this.getModel().refresh();
	};

	/**
	 * @param {object} oNewPersistentData for initializing the model
	 */
	Controller.prototype.initializeModel = function(oNewPersistentData) {
		if (!this.getModel()) {
			this._oModel = new sap.ui.model.json.JSONModel();
			this._oModel.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);
		}

		var oNewPersistentDataCopy = null;
		if (oNewPersistentData) {
			oNewPersistentDataCopy = Util.copy(oNewPersistentData);
		}

		var oCurrentPersistentData = oNewPersistentDataCopy || ((this.getModel().getData() && this.getModel().getData().persistentData) ? this.getModel().getData().persistentData : {});

		// Reduce persistent data to current setting
		for ( var type in oCurrentPersistentData) {
			if (!this._oSettingCurrent[type]) {
				delete oCurrentPersistentData[type];
			}
		}

		this.getModel().setData({
			transientData: {},
			persistentData: oCurrentPersistentData
		});

		this._callControllers(this._oSettingCurrent, "initializeModel", this.getModel());
	};

	/**
	 * Fire 'afterP13nModelDataChange' event with model data and change information.
	 *
	 * @param {sap.ui.comp.personalization.ResetType} sResetType is optional. Contains the reason why it has been changed
	 */
	Controller.prototype._fireChangeEvent = function(sResetType) {
		var oChangeInformation = {};
		// relevant change for consumer, delta : (restore + persistent) - oPersistentDataAlreadyKnown

		// oPersistentDataTotal : = restore + persistent, i.e. delta = oPersistentDataTotal - oPersistentDataAlreadyKnown
		var oPersistentDataTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), this._getPersistentDataCopy());

		var oPersistentDataAlreadyKnownCopy = Util.copy(this._oPersistentDataAlreadyKnown);
		// note that .changeType is really semantically .changeTypeAlreadyKnown
		oChangeInformation.changeType = this._callControllers(this._oSettingCurrent, "getChangeType", oPersistentDataTotal, oPersistentDataAlreadyKnownCopy);

		if (this.getResetToInitialTableState()) {
			// for resetToInitialTableState = true (note that _oPersistentDataRestore is already 'total' in the sense that it is not a delta)
			// note also that in this case oChangeInformation.changeTypeVariant is undefined !
			var oPersistentDataCurrentRestoreTotal = Util.copy(this._oPersistentDataRestore);
			oChangeInformation.changeTypeRestore = this._callControllers(this._oSettingCurrent, "getChangeType", oPersistentDataTotal, oPersistentDataCurrentRestoreTotal);
			this._bIsDirty = Util.hasChangedType(oChangeInformation.changeTypeRestore);
		} else {
			// for resetToInitialTableState = false
			var oPersistentDataCurrentVariantTotal = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataRestore), Util.copy(this._oPersistentDataCurrentVariant));
			oChangeInformation.changeTypeVariant = this._callControllers(this._oSettingCurrent, "getChangeType", oPersistentDataTotal, oPersistentDataCurrentVariantTotal);
			oChangeInformation.changeTypeRestore = oChangeInformation.changeTypeVariant;
			this._bIsDirty = Util.hasChangedType(oChangeInformation.changeTypeRestore);
		}

		if (!Util.hasChangedType(oChangeInformation.changeType)) {
			return;
		}

		this._aColumnKeysOfDateType = this._oColumnHelper.getColumnKeysOfType("date");
		this._aColumnKeysOfTimeType = this._oColumnHelper.getColumnKeysOfType("time");
		this._aColumnKeysOfBooleanType = this._oColumnHelper.getColumnKeysOfType("boolean");

		if (sResetType === sap.ui.comp.personalization.ResetType.ResetFull || sResetType === sap.ui.comp.personalization.ResetType.ResetPartial) {
			oChangeInformation.changeReason = sResetType;
		}

		var oChangeData = this._callControllers(this._oSettingCurrent, "getChangeData", oPersistentDataTotal, oPersistentDataAlreadyKnownCopy);
		oChangeInformation.changeData = Util.removeEmptyProperty(Util.copy(oChangeData));
		Util.recoverPersonalisationDateData(oChangeInformation.changeData, this._aColumnKeysOfDateType);
		Util.recoverPersonalisationTimeData(oChangeInformation.changeData, this._aColumnKeysOfTimeType);
		Util.recoverPersonalisationBooleanData(oChangeInformation.changeData, this._aColumnKeysOfBooleanType);

		var oPersistentDataRestoreCopy = Util.copy(this._oPersistentDataRestore);
		var oPersistentData = this._callControllers(this._oSettingCurrent, "getChangeData", oPersistentDataTotal, oPersistentDataRestoreCopy);
		oChangeInformation.persistentData = Util.removeEmptyProperty(oPersistentData);
		Util.recoverPersonalisationDateData(oChangeInformation.persistentData, this._aColumnKeysOfDateType);
		Util.recoverPersonalisationTimeData(oChangeInformation.persistentData, this._aColumnKeysOfTimeType);
		Util.recoverPersonalisationBooleanData(oChangeInformation.persistentData, this._aColumnKeysOfBooleanType);

		this.fireAfterP13nModelDataChange(oChangeInformation);

		// calculate new version of 'AlreadyKnown' by adding above calculated 'small' delta to 'AlreadyKnown'
		this._oPersistentDataAlreadyKnown = this._callControllers(this._oSettingCurrent, "getUnionData", Util.copy(this._oPersistentDataAlreadyKnown), oChangeData);
	};

	Controller.prototype._projectRestoreData2PersistentModel4Panels = function(oPersistentData) {
		if (!this._oDialog || jQuery.isEmptyObject(oPersistentData)) {
			return oPersistentData;
		}
		var oPersistentDataCopy = this._getPersistentDataCopy();
		var aPanels = this._oDialog.getPanels();
		aPanels.forEach(function(oPanel) {
			if (oPersistentData[oPanel.getType()]) {
				oPersistentDataCopy[oPanel.getType()] = Util.copy(oPersistentData[oPanel.getType()]);
			} else {
				delete oPersistentDataCopy[oPanel.getType()];
			}
		});
		return oPersistentDataCopy;
	};

	Controller.prototype._checkIgnoredColumnKeys = function(oTable, aVisibleColumnKeys) {
		if (Util.getTableType(oTable) === sap.ui.comp.personalization.TableType.ChartWrapper) {
			return;
		}
		var aIgnoredColumnKeys = Util.getUnionOfAttribute(this._oSettingCurrent, "ignoreColumnKeys");
		aIgnoredColumnKeys.some(function(sColumnKey) {
			if (aVisibleColumnKeys.indexOf(sColumnKey) > -1) {
				throw "The provided 'ignoreColumnKeys' are inconsistent. No columns specified as ignored is allowed to be visible.";
			}
		});
	};

	Controller.prototype._onSetVisible = function(bVisible, sColumnKey) {
		if (bVisible) {
			var aIgnoredColumnKeys = Util.getUnionOfAttribute(this._oSettingCurrent, "ignoreColumnKeys");
			if (aIgnoredColumnKeys.indexOf(sColumnKey) > -1) {
				throw "The provided 'ignoreColumnKeys' are inconsistent. No column specified as ignored is allowed to be visible. " + this;
			}
		}
	};

	Controller.prototype._onSetSummed = function(bIsSummed, oColumn) {
		this._oSettingCurrent.columns.controller._onColumnTotal({
			column: oColumn,
			isSummed: bIsSummed
		});
	};

	/**
	 * Special case for tables of type sap.ui.table.Table (with exception of AnalyticalTable). Currently sap.ui.table.Table does not support grouping
	 * feature as expected.
	 */
	Controller.prototype._removeUnsupportedNamespaces = function() {
		if (Util.getTableBaseType(this.getTable()) === sap.ui.comp.personalization.TableType.Table && Util.getTableType(this.getTable()) !== sap.ui.comp.personalization.TableType.AnalyticalTable) {
			delete this._oSettingCurrent.group;
		}
	};

	/**
	 * Gets arguments of corresponding type.
	 *
	 * @param {array} aArgs contains all arguments in which the search for type is done
	 * @param {string} sType is the type for which the search is done
	 * @returns {array} aResult contains the identified arguments
	 */
	Controller.prototype._getArgumentsByType = function(aArgs, sType) {
		var aResult = [], oObject = null;

		if (aArgs && aArgs.length && sType) {
			aArgs.forEach(function(oArg) {
				if (oArg && oArg[sType] && typeof oArg[sType] !== "function") {
					oObject = {};
					oObject[sType] = oArg[sType];
					aResult.push(oObject);
				} else {
					aResult.push(oArg);
				}
			});
		}

		return aResult;
	};

	/**
	 * Calls a method "sMethodName" of all controllers in generic way.
	 *
	 * @param {string} oSettings contains additional setting for execution of mini-controller methods
	 * @param {string} sMethodName that is executed in the mini-controller
	 * @returns {object} oResult contains the result of the called mini-controller method packaged into mini-controller specific namespace.
	 */
	Controller.prototype._callControllers = function(oSettings, sMethodName) {
		var type = null, oSetting = null, oController = null, aArgsPartially = null;
		var oResults = {}, aArgs = Array.prototype.slice.call(arguments, 2);

		for (type in oSettings) {
			oSetting = oController = aArgsPartially = null;

			oSetting = oSettings[type];
			oController = oSetting.controller;
			if (!oController || !oSetting.visible || !oController[sMethodName]) {
				continue;
			}
			aArgsPartially = this._getArgumentsByType(aArgs, type);
			if (sMethodName === "getPanel") {
				aArgsPartially.push(oSetting.payload);
			} else if (sMethodName === "setIgnoreColumnKeys") {
				aArgsPartially.push(oSetting.ignoreColumnKeys);
			} else if (sMethodName === "setTriggerModelChangeOnColumnInvisible") {
				aArgsPartially.push(oSetting.triggerModelChangeOnColumnInvisible);
			}
			var oResult = oController[sMethodName].apply(oController, aArgsPartially);
			if (oResult !== null && oResult !== undefined && oResult[type] !== undefined) {
				oResults[type] = oResult[type];
			} else {
				oResults[type] = oResult;
			}
		}
		return oResults;
	};

	Controller.prototype._setSizeLimit = function(oTable) {
		this.getModel().setSizeLimit(this.getTable().getColumns().length + 1000);
	};

	Controller.prototype._sanityCheck = function(oNewPersistentData) {
		// TODO: sanity check
		// Only allow the right format e.g. "sort.sortItems" but not "sort".
		// {} is also allowed i.e. all personalization data are deleted.
		// null is also allowed i.e. go back to restore
		return true;
	};

	/**
	 * Cleans up before destruction.
	 */
	Controller.prototype.exit = function() {
		var type;

		// if for some reason we exit when suspended we should put table back into resume mode
		this._resumeTable(false);

		// destroy dialog
		if (this._oDialog) {
			this._oDialog.destroy();
			this._oDialog = null;
		}

		// destroy controller
		this._callControllers(this._oSettingCurrent, "destroy");
		for (type in this._oSettingCurrent) {
			this._oSettingCurrent[type] = null;
		}
		this._oSettingCurrent = null;
		for (type in this._oSettingOriginalTable) {
			this._oSettingOriginalTable[type] = null;
		}
		this._oSettingOriginalTable = null;

		this._oSettingCurrent = null;
		for (type in this._oSettingOriginalChart) {
			this._oSettingOriginalChart[type] = null;
		}
		this._oSettingOriginalChart = null;

		// destroy model and its data
		if (this.getModel()) {
			this.getModel().destroy();
			this._oModel = null;
		}
		this._oPersistentDataRestore = null;
		this._oPersistentDataCurrentVariant = null;
		this._oPersistentDataAlreadyKnown = null;
		this._oPersistentDataBeforeOpen = null;
		this._oPayload = null;
		this._oColumnHelper = null;
	};

	Controller.SyncReason = {
		NewTable: 0,
		NewSetting: 1,
		NewTableBinding: 5,

		NewModelData: 6,
		NewModelDataVariant: 2,
		NewModelDataMixedWithVariant: 7,

		ResetModelData: 3,
		ResetModelDataVariant: 4
	};

	/* eslint-enable strict */

	return Controller;

}, /* bExport= */true);

}; // end of sap/ui/comp/personalization/Controller.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfilterbar.SmartFilterBar') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfilterbar.SmartFilterBar.
jQuery.sap.declare('sap.ui.comp.smartfilterbar.SmartFilterBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfilterbar/SmartFilterBar",[
	'jquery.sap.global', 'sap/m/MessageBox', 'sap/ui/comp/filterbar/FilterBar', 'sap/ui/comp/filterbar/FilterGroupItem', 'sap/ui/comp/filterbar/FilterItem', 'sap/ui/comp/library', './AdditionalConfigurationHelper', './ControlConfiguration', './FilterProvider', './GroupConfiguration', 'sap/ui/comp/smartvariants/PersonalizableInfo', 'sap/ui/comp/smartvariants/SmartVariantManagement', 'sap/ui/comp/odata/ODataModelUtil'
], function(jQuery, MessageBox, FilterBar, FilterGroupItem, FilterItem, library, AdditionalConfigurationHelper, ControlConfiguration, FilterProvider, GroupConfiguration, PersonalizableInfo, SmartVariantManagement, ODataModelUtil) {
	"use strict";

	/**
	 * Constructor for a new smartfilterbar/SmartFilterBar.
	 * @param {string} [sID] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartFilterBar control uses the OData metadata of an entity in order to create a FilterBar.<br>
	 *        Whether a field is visible on the FilterBar, supports type-ahead and value help, for example, is automatically determined. When you use
	 *        control configurations and group configurations it is possible to configure the FilterBar and adapt it according to your needs.<br>
	 *        <b><i>Note:</i></b><br>
	 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
	 * @extends sap.ui.comp.filterbar.FilterBar
	 * @author SAP
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfilterbar.SmartFilterBar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartFilterBar = FilterBar.extend("sap.ui.comp.smartfilterbar.SmartFilterBar", /** @lends sap.ui.comp.smartfilterbar.SmartFilterBar.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			designTime: true,
			properties: {

				/**
				 * The OData entity type whose metadata is used to create the SmartFilterBar. <b>Note:</b> Changing this value after the
				 * SmartFilterBar is initialized (<code>initialise</code> event was fired) has no effect.
				 * @deprecated Since 1.40. Use <code>entitySet</code> property instead of this one, to enable V4 annotation support
				 */
				entityType: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * The OData entity set whose metadata is used to create the SmartFilterBar. <b>Note:</b> Changing this value after the
				 * SmartFilterBar is initialized (<code>initialise</code> event was fired) has no effect.
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Optional. The OData service URL. If it is not specified, the service URL from the OData model (this.getModel()) will be used.
				 * <b>Note:</b> Changing this value after the SmartFilterBar is initialized (initialise event was fired) has no effect.
				 * @deprecated Since 1.29. Set an ODataModel as the main model on your control/view instead
				 */
				resourceUri: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Name of the field that is the focus of the basic search.
				 */
				basicSearchFieldName: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Enables the basic search field. The entered value can be accessed with
				 * {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getParameters}. <b>Note:</b> When the SmartFilterBar control is used with a
				 * {@link sap.ui.comp.smarttable.SmartTable} control the parameters are handled automatically. Therefore, this must only be enabled
				 * for OData service entities that support basic search.
				 */
				enableBasicSearch: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * If set the search will be automatically triggered, when a filter value was set via the <B>change</B> event.<br>
				 * <b>Note:</b> The liveMode only operates on non-mobile scenarios.<br>
				 * Additionally, if liveMode is set, the following applies:
				 * <ul>
				 * <li>The error messagebox is not displayed, and the <code>showMessages</code> property is ignored.</li>
				 * <li>The search is triggered after a variant has been selected.</li>
				 * <li>Execute on Select for <code>VariantManagement</code> is not shown and not taken into account</li>
				 * </ul>
				 * @since 1.40
				 */
				liveMode: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * If set to <code>false</code> eventual errors during the search, will not be displayed in a messagebox.
				 * @since 1.40
				 */
				showMessages: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Indicates if the analytical parameters (SelectionVariant) must be taken into consideration.
				 * @experimental since 1.42.0 This property is NOT stable yet. Use at your own risk.
				 * @since 1.42.0
				 */
				considerAnalyticalParameters: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * If set to <code>true</code> all date fields with filter restriction <code>interval</code> will be treated as
				 * <code>DateTimeRange</code> filters. <b>Note:</b> If this property is set to <code>true</code> and any date filters with filter
				 * restriction <code>interval</code> were stored as part of a variant, the values of these filters cannot be applied. If this
				 * property is set to <code>false</code>, any previously stored filters which were treated as type <code>DateTimeRange</code>
				 * based on the former setting, cannot be converted back to the standard date interval.
				 * @since 1.46.0
				 */
				useDateRangeType: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code> all search requests will be ignored. This functionality is only intended to be used internally to
				 * enable an optimal solution when the filter bar is controlled by the smart templates. NOTE: As long as this property is set to
				 * <code>true</code>, all search requests will be neglected.
				 * @experimental since 1.44.0 This property is NOT stable yet. Use at your own risk.
				 * @since 1.44.0
				 */
				suppressSelection: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Indicates if the annotation <code>com.sap.vocabularies.UI.v1.SelectionVariant</code> is taken into account.
				 * @since 1.48.0
				 */
				considerSelectionVariants: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Determines one specific variant that is based on the <code>com.sap.vocabularies.UI.v1.SelectionVariant</code> annotation, which
				 * is then used as the default variant.<br>
				 * This property is only relevant in case <code>considerSelectionVariants</code> is set to <code>true</code> and will only be
				 * applied if there is no user-defined default variant specified.
				 * @since 1.48.0
				 */
				defaultSelectionVariantName: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code>, only the navigation properties mentioned in property
				 * {@link sap.ui.comp.smartfilterbar.SmartFilterBarl#getNavigationProperties} are checked for further filters.
				 * @since 1.48
				 */
				useProvidedNavigationProperties: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * This property is only evaluated if the property
				 * {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getUseProvidedNavigationProperties} is set to <code>true</code>. It contains a
				 * comma-separated list of navigation property names which are checked for filters.<br>
				 * @since 1.48
				 */
				navigationProperties: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				}
			},

			associations: {
				/**
				 * Identifies the SmartVariant control which should be used for the personalization.
				 * @since 1.38
				 */
				smartVariant: {
					type: "sap.ui.comp.smartvariants.SmartVariantManagement",
					multiple: false
				}
			},

			aggregations: {

				/**
				 * Using control configurations you can add additional configuration to filter fields, for example set custom labels, change the order
				 * of fields, or change the filter field control type. <b>Note:</b> Changing the values here after the SmartFilter is initialized (<code>initialise</code>
				 * event was fired) has no effect.
				 */
				controlConfiguration: {
					type: "sap.ui.comp.smartfilterbar.ControlConfiguration",
					multiple: true,
					singularName: "controlConfiguration"
				},

				/**
				 * Provides the possibility to add additional configuration to groups. Groups are used to show fields in the advanced area of the
				 * SmartFilterBar. With additional configuration, you can for example set custom labels or change the order of groups. <b>Note:</b>
				 * Changing the values here after the SmartFilter is initialized (<code>initialise</code> event was fired) has no effect.
				 */
				groupConfiguration: {
					type: "sap.ui.comp.smartfilterbar.GroupConfiguration",
					multiple: true,
					singularName: "groupConfiguration"
				}
			},

			events: {

				/**
				 * This event is fired after the pending state of the <code>FilterBar</code> control changes.
				 * @since 1.36
				 */
				pendingChange: {
					/**
					 * The current pending value.
					 */
					pendingValue: {
						type: "boolean"
					}
				}
			}
		},

		renderer: function(oRm, oControl) {
			FilterBar.getMetadata().getRenderer().render(oRm, oControl);
		}

	});

	SmartFilterBar.LIVE_MODE_INTERVAL = 300;
	SmartFilterBar.SELECTION_VARIANT_KEY_PREFIX = "#";

	/**
	 * Retrieves the currently visible filters and the values for storing them as variants. The result will be passed on as a JSON object to the
	 * callee smart variant control.
	 * @name sap.ui.comp.smartfilterbar.SmartFilterBar#fetchVariant
	 * @function
	 * @type object
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * Applies the current variant as opposed to <code>fetchVariant</code>. The variant is retrieved via the flex layer.
	 * @name sap.ui.comp.smartfilterbar.SmartFilterBar#applyVariant
	 * @function
	 * @param {object} oVariant The variant that must be applied. oVariant must contain a valid JSON object.
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	SmartFilterBar.prototype.init = function() {
		this._aFilterBarViewMetadata = null;
		this.isRunningInValueHelpDialog = false;
		FilterBar.prototype.init.apply(this); // Call base class

		sap.ui.getCore().getMessageManager().registerObject(this, true);
	};

	/**
	 * Initialises the OData metadata necessary to create the filter bar
	 * @private
	 */
	SmartFilterBar.prototype._initializeMetadata = function() {
		if (!this.bIsInitialised) {
			ODataModelUtil.handleModelInit(this, this._onMetadataInitialised);
		}
	};

	/**
	 * Called once the necessary Model metadata is available
	 * @private
	 */
	SmartFilterBar.prototype._onMetadataInitialised = function() {
		this._bMetaModelLoadAttached = false;
		if (!this.bIsInitialised) {
			this._createFilterProvider();
			if (this._oFilterProvider) {
				this._aFilterBarViewMetadata = this._oFilterProvider.getFilterBarViewMetadata();
				if (this._aFilterBarViewMetadata) {
					this._attachAdditionalConfigurationChanged();
					// Indicates the control is initialised and can be used in the initialise event/otherwise!
					this.bIsInitialised = true;
					this.setModel(this._oFilterProvider.oModel, this._oFilterProvider.sFilterModelName);

					// required for the new UI-Design
					this.registerGetFiltersWithValues(this.getFiltersWithValues.bind(this));

					// Variant Handling - Registrations
					this.registerFetchData(this.getFilterDataAsString.bind(this, true));
					this.registerApplyData(function(sJson) {
						this.setFilterDataAsString(sJson, true);
					}.bind(this));

					this._initializeVariantManagement();
				}
			}
		}
	};

	/**
	 * Get the filterable fields.
	 * @returns {Array} array of filter view metadata containing filter fields
	 * @internal
	 */
	SmartFilterBar.prototype.getFilterBarViewMetadata = function() {
		return this._aFilterBarViewMetadata;
	};

	/**
	 * Get the analytical parameters
	 * @returns {Array} array of analytical parameter metadata
	 * @internal
	 */
	SmartFilterBar.prototype.getAnalyticalParameters = function() {
		return this._oFilterProvider ? this._oFilterProvider.getAnalyticParameters() : [];
	};

	/**
	 * Get selection variant annotation
	 * @returns {array} of selection variants. Key is the qualifier.
	 * @internal
	 */
	SmartFilterBar.prototype.getSelectionVariants = function() {
		var mSelectionVariants = null;
		if (this._oFilterProvider) {
			mSelectionVariants = this._oFilterProvider.getSelectionVariants();
			if (Object.keys(mSelectionVariants).length < 1) {
				mSelectionVariants = null;
			}
		}

		return mSelectionVariants;

	};

	/**
	 * Creates an instance of the filter provider
	 * @private
	 */
	SmartFilterBar.prototype._createFilterProvider = function() {
		var sResourceUri, oModel, sEntityTypeName, sEntitySet;
		oModel = this.getModel();
		sResourceUri = this.getResourceUri();
		sEntityTypeName = this.getEntityType();
		sEntitySet = this.getEntitySet();

		if ((oModel || sResourceUri) && (sEntityTypeName || sEntitySet)) {
			this._oFilterProvider = new sap.ui.comp.smartfilterbar.FilterProvider({
				basicSearchFieldName: this.getBasicSearchFieldName(),
				enableBasicSearch: this.getEnableBasicSearch(),
				entityType: sEntityTypeName,
				entitySet: sEntitySet,
				serviceUrl: sResourceUri,
				isRunningInValueHelpDialog: this.isRunningInValueHelpDialog,
				model: oModel,
				additionalConfiguration: this.getAdditionalConfiguration(),
				defaultDropDownDisplayBehaviour: this.data("defaultDropDownDisplayBehaviour"),
				defaultTokenDisplayBehaviour: this.data("defaultTokenDisplayBehaviour"),
				dateFormatSettings: this.data("dateFormatSettings"),
				useContainsAsDefaultFilter: this.data("useContainsAsDefaultFilter"),
				smartFilter: this,
				considerAnalyticalParameters: this.getConsiderAnalyticalParameters(),
				useDateRangeType: this.getUseDateRangeType(),
				considerSelectionVariants: this.getConsiderSelectionVariants(),
				considerNavigations: this.getUseProvidedNavigationProperties() ? this._createArrayFromString(this.getNavigationProperties()) : null
			});

			this._oFilterProvider.attachPendingChange(function(oEvent) {
				this.firePendingChange({
					pendingValue: oEvent.getParameter("pending")
				});
			}.bind(this));
		}
	};

	SmartFilterBar.prototype._createArrayFromString = function(sList) {
		if (!sList) {
			return [];
		}
		var aElements = [];
		var aRowElements = sList.split(",");
		aRowElements.forEach(function(sField) {
			if (sField !== "") {
				aElements.push(sField.trim());
			}
		});
		return aElements;
	};

	/**
	 * Attaches to events from the control configuration. For example the visibility of a filter field can be changed dynamically
	 * @private
	 */
	SmartFilterBar.prototype._attachAdditionalConfigurationChanged = function() {
		var aControlConfiguration, aGroupConfiguration, i, length;

		// Group Configuration
		aGroupConfiguration = this.getGroupConfiguration();
		length = aGroupConfiguration.length;
		for (i = 0; i < length; i++) {
			aGroupConfiguration[i].attachChange(this._handleGroupConfigurationChanged.bind(this));
		}

		// Control Configuration
		aControlConfiguration = this.getControlConfiguration();
		length = aControlConfiguration.length;
		for (i = 0; i < length; i++) {
			aControlConfiguration[i].attachChange(this._handleControlConfigurationChanged.bind(this));
		}
	};

	/**
	 * Event Handler for changed events from control configuration
	 * @private
	 * @param {Object} oEvent - then event object
	 */
	SmartFilterBar.prototype._handleControlConfigurationChanged = function(oEvent) {
		var sPropertyName, oControlConfiguration, oFilterItem, sKey, sValue;

		sPropertyName = oEvent.getParameter("propertyName");
		oControlConfiguration = oEvent.oSource;

		if (!oControlConfiguration) {
			return;
		}

		sKey = oControlConfiguration.getKey();
		oFilterItem = this._getFilterItemByName(sKey);
		if (!oFilterItem) {
			this._handleControlConfigurationChangedForDelayedFilterItems(sKey, oControlConfiguration, sPropertyName);
			return;
		}

		if (sPropertyName === "visible") {
			sValue = oControlConfiguration.getVisible();
			oFilterItem.setVisible(sValue);
		} else if (sPropertyName === "label") {
			sValue = oControlConfiguration.getLabel();
			oFilterItem.setLabel(sValue);
		} else if (sPropertyName === "visibleInAdvancedArea") {
			sValue = oControlConfiguration.getVisibleInAdvancedArea();
			if (oFilterItem.setVisibleInAdvancedArea) {
				oFilterItem.setVisibleInAdvancedArea(sValue);
			}
		}
	};

	SmartFilterBar.prototype._handleControlConfigurationChangedForDelayedFilterItems = function(sKey, oControlConfiguration, sPropertyName) {
		var sValue, oField = null;
		if (this._aFilterBarViewMetadata) {
			this._aFilterBarViewMetadata.some(function(oGroup) {
				oGroup.fields.some(function(oItem) {
					if (oItem.fieldName === sKey) {
						oField = oItem;
					}

					return oField ? true : false;
				});

				return oField ? true : false;
			});
		}

		if (oField) {
			if (sPropertyName === "visible") {
				sValue = oControlConfiguration.getVisible();
				oField.isVisible = sValue;
			} else if (sPropertyName === "label") {
				sValue = oControlConfiguration.getLabel();
				oField.label = sValue;
			} else if (sPropertyName === "visibleInAdvancedArea") {
				sValue = oControlConfiguration.getVisibleInAdvancedArea();
				oField.visibleInAdvancedArea = sValue;
			}
		}
	};

	/**
	 * Event Handler for changed events from control configuration
	 * @private
	 * @param {Object} oEvent - then event object
	 */
	SmartFilterBar.prototype._handleGroupConfigurationChanged = function(oEvent) {
		var sPropertyName, oGroupConfiguration;

		sPropertyName = oEvent.getParameter("propertyName");
		oGroupConfiguration = oEvent.oSource;
		if (sPropertyName === "label") {
			this._handleGroupConfigurationLabelChanged(oGroupConfiguration);
		}
	};

	/**
	 * Handle the event of a changed label of a group configuration. Find the corresponding FilterGroupItem and sets its label accordingly.
	 * @private
	 * @param {object} oGroupConfiguration - GroupConfiguration where the label as changed
	 */
	SmartFilterBar.prototype._handleGroupConfigurationLabelChanged = function(oGroupConfiguration) {
		var oFilterGroupItem, sKey, sLabel;

		if (!oGroupConfiguration) {
			return;
		}

		sLabel = oGroupConfiguration.getLabel();
		sKey = oGroupConfiguration.getKey();
		oFilterGroupItem = this._getFilterGroupItemByGroupName(sKey);
		if (oFilterGroupItem) {
			oFilterGroupItem.setGroupTitle(sLabel);
		} else {
			this._handleGroupConfigurationLabelChangedForDelayedFilterItems(sKey, sLabel);
		}
	};

	SmartFilterBar.prototype._handleGroupConfigurationLabelChangedForDelayedFilterItems = function(sKey, sLabel) {
		var oGroup = null;
		if (this._aFilterBarViewMetadata) {
			this._aFilterBarViewMetadata.some(function(oItem) {

				if (oItem.groupName === sKey) {
					oGroup = oItem;
				}

				return oGroup ? true : false;
			});
		}

		if (oGroup) {
			oGroup.groupLabel = sLabel;
		}
	};

	/**
	 * Returns a filter item or filter group item having the specified name. Returns undefined if there are no filter items or filter group items
	 * having the specified name.
	 * @private
	 * @param {string} sName of the filter
	 * @returns {object} the found filter item
	 */
	SmartFilterBar.prototype._getFilterItemByName = function(sName) {
		var aFilterItem, length, i;
		aFilterItem = this.getFilterItems();
		aFilterItem.push.apply(aFilterItem, this.getFilterGroupItems());

		length = aFilterItem.length;
		for (i = 0; i < length; i++) {
			if (aFilterItem[i].getName() === sName) {
				return aFilterItem[i];
			}
		}
	};

	/**
	 * Returns a filter group item having the specified group name. Returns undefined if there is no filter group items having the specified name.
	 * @private
	 * @param {string} sName filter group name
	 * @returns {object} the found group item
	 */
	SmartFilterBar.prototype._getFilterGroupItemByGroupName = function(sName) {
		var aFilterItem, length, i;
		aFilterItem = this.getFilterGroupItems();

		length = aFilterItem.length;
		for (i = 0; i < length; i++) {
			if (aFilterItem[i].getGroupName() === sName) {
				return aFilterItem[i];
			}
		}
	};

	/**
	 * Returns an Object containing all information from the additional configuration (controlConfiguration, groupConfiguration).
	 * @returns {object} the additional configuration
	 * @internal
	 */
	SmartFilterBar.prototype.getAdditionalConfiguration = function() {
		return new AdditionalConfigurationHelper(this.getControlConfiguration(), this.getGroupConfiguration());
	};

	SmartFilterBar.prototype.setEntityType = function(sEntityTypeName) {
		this.setProperty("entityType", sEntityTypeName);
		this._initializeMetadata();
		return this;
	};

	/**
	 * Uses the provided resource URI to fetch the OData metadata instead of using the default ODataModel (getModel()). You should only set this if
	 * you intend to get the metadata for the filter bar from elsewhere!
	 * @param {string} sResourceUri - The URI of the oData service from which the metadata would be read
	 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} <code>this</code> to allow method chaining
	 * @deprecated Since 1.29. Set an ODataModel as the main model on your control/view instead
	 * @public
	 */
	SmartFilterBar.prototype.setResourceUri = function(sResourceUri) {
		this.setProperty("resourceUri", sResourceUri);
		this._initializeMetadata();
		return this;
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the filter controls.
	 * @private
	 */
	SmartFilterBar.prototype.propagateProperties = function() {
		FilterBar.prototype.propagateProperties.apply(this, arguments);
		this._initializeMetadata();
	};

	/**
	 * Provides filter information for lazy instantiation (Overridden from FilterBar)
	 * @private
	 * @returns {array} of filter information
	 */
	SmartFilterBar.prototype._getFilterInformation = function() {
		var oFilterGroup, i, j, iLen = 0, iFieldLen = 0, aFilterFields, aFields = [], oField;
		if (this._aFilterBarViewMetadata) {
			iLen = this._aFilterBarViewMetadata.length;
			for (i = 0; i < iLen; i++) {
				oFilterGroup = this._aFilterBarViewMetadata[i];
				aFilterFields = oFilterGroup.fields;
				iFieldLen = aFilterFields.length;
				for (j = 0; j < iFieldLen; j++) {
					oField = aFilterFields[j];
					if (oField.name === FilterProvider.BASIC_SEARCH_FIELD_ID) {
						this.setBasicSearch(oField.control);
						this._attachToBasicSearch(oField.control);
						continue;
					} else if (oFilterGroup.groupName === FilterProvider.BASIC_FILTER_AREA_ID) {
						// this._createFieldInBasicArea(oField);
						this._createFieldInAdvancedArea({
							groupName: FilterBar.INTERNAL_GROUP,
							groupLabel: ""
						}, oField);

					} else {
						this._createFieldInAdvancedArea(oFilterGroup, oField);
					}
					aFields.push(oField);
				}
			}

			var aParameters = this.getAnalyticalParameters();
			iLen = aParameters.length;
			for (i = 0; i < iLen; i++) {
				oField = aParameters[i];
				this._createAnalyticParameter(oField);
				aFields.push(oField);
			}
		}
		return aFields;
	};

	/**
	 * Check if any controls are in error state or if search has to be prevented and return a flag, if search can continue
	 * @private
	 * @returns {Boolean} true when there are no errors or when search is not pending
	 */
	SmartFilterBar.prototype._validateState = function() {
		var aFilterItems = null, iLen, oControl, bInError = false;
		aFilterItems = this.getAllFilterItems(true);
		if (aFilterItems) {
			iLen = aFilterItems.length;
			while (iLen--) {
				oControl = this.determineControlByFilterItem(aFilterItems[iLen], true);
				if (oControl) {
					if (oControl.__bValidatingToken) {
						// If a token validation is pending hold back the search until validation is through
						this.bIsSearchPending = true;
						// Set dummy error flag to prevent search
						bInError = true;
						break;
					} else if (oControl.getValueState && oControl.getValueState() === sap.ui.core.ValueState.Error && !oControl.data("__mandatoryEmpty")) {
						bInError = true;
						break;
					}
				}
			}
		}
		if (this._oFilterProvider) {
			return !bInError && !this._oFilterProvider._validateConditionTypeFields();
		} else {
			return !bInError;
		}
	};

	SmartFilterBar.prototype._isDateRangeTypeFilter = function(sFilterName) {
		if (this._oFilterProvider && this._oFilterProvider._mConditionTypeFields[sFilterName]) {
			return true;
		}

		return false;
	};

	SmartFilterBar.prototype._specialControls = function(oControl, sFilterName) {
		if (oControl.setValue) {

			if (this._isDateRangeTypeFilter(sFilterName)) {
				return true;
			} else {
				jQuery.sap.require("sap.m.DatePicker");
				if (oControl instanceof sap.m.DatePicker) {
					return true;
				}
			}
		}

		return false;
	};

	/**
	 * For every control in error state, trigger <code>checkUpdate(true)</code>
	 * @private
	 */
	SmartFilterBar.prototype._clearErroneusControlValues = function() {
		var aFilterItems = null, iLen, oControl, oValueBinding;
		aFilterItems = this.getAllFilterItems(true);
		if (aFilterItems) {
			iLen = aFilterItems.length;
			while (iLen--) {
				oControl = this.determineControlByFilterItem(aFilterItems[iLen], true);
				if (oControl) {
					if (oControl.getValueState && oControl.getValueState() === sap.ui.core.ValueState.Error) {

						oValueBinding = oControl.getBinding("value");
						if (oValueBinding && !this._specialControls(oControl, aFilterItems[iLen].getName())) {
							oValueBinding.checkUpdate(true);
						} else if (oControl.setValue) {
							oControl.setValue("");
							oControl.setValueState(sap.ui.core.ValueState.None);
						}

					}
				}
			}
		}

	};

	/**
	 * Handling of change and search for Basic Search field (used in value helps)
	 * @private
	 * @param {Object} oBasicSearchControl the basic search control
	 */
	SmartFilterBar.prototype._attachToBasicSearch = function(oBasicSearchControl) {

		if (oBasicSearchControl) {
			oBasicSearchControl.attachSearch(function() {
				if (!this.isDialogOpen()) {
					this.search();
				}
			}.bind(this));

			// Basic search doesn't have a change event, so we attach to live change instead!
			oBasicSearchControl.attachLiveChange(this._onChange.bind(this));
		}
	};

	/**
	 * Called when change need to be triggered on the Smart Filter
	 * @private
	 * @param {Object} oEvent - then event object
	 */
	SmartFilterBar.prototype._onChange = function(oEvent) {
		var oControl = oEvent.getSource();
		// Clear mandatory empty error state and flag, when control value changes
		if (oControl.data("__mandatoryEmpty")) {
			oControl.data("__mandatoryEmpty", null);
			oControl.setValueState(sap.ui.core.ValueState.None);
		}
		// Clear validation error when no value is in the input
		if (oControl.data("__validationError") && !oControl.getValue()) {
			oControl.data("__validationError", null);
			oControl.setValueState(sap.ui.core.ValueState.None);
		}
		// Don't fire change event while the filter data is being created/updated!
		if (this._oFilterProvider._bUpdatingFilterData || this._oFilterProvider._bCreatingInitialModel) {
			return;
		}
		// If the token is being validated do not trigger the change event!
		if (!oControl || (oControl && !oControl.__bValidatingToken)) {
			this.fireFilterChange(oEvent);
			this._oFilterProvider._updateConditionTypeFields(oEvent.getParameter("filterChangeReason"));
		} else {
			this._filterSetInErrorState(oControl);
		}

		if (this.isLiveMode()) {
			this.search();
		}
	};

	/**
	 * Listen to the change event to set the search button state and raise an event
	 * @param {object} oControl - the control on which change would be triggered
	 * @private
	 */
	SmartFilterBar.prototype._handleChange = function(oControl) {
		if (oControl) {
			if (oControl.attachChange) {
				oControl.attachChange(this._onChange.bind(this));
			}
		}
	};

	/**
	 * Handles the enter event on the control to trigger Search
	 * @param {object} oControl - the control on which enter has to be handled
	 * @private
	 */
	SmartFilterBar.prototype._handleEnter = function(oControl) {

		/*
		 * do not trigger search in live mode, since it will be triggered via the change event
		 */
		if (this.isLiveMode()) {
			return;
		}

		/*
		 * @Hack: Search should not be triggered while a suggest is in progress (i.e. user presses enter key on the SuggestionList popup). Since the
		 * SuggestionPopup is always closed before the keyup event is raised and we cannot use the keydown event alone, we now listen to both key up
		 * and keydown events and set flags on the control to overcome the issue. Perhaps if sapUI5 provides a new event/does not propagate the keyUp
		 * event/sets a flag we can remove this hack TODO: Clarify this with sapUI5 colleagues.
		 */
		oControl.attachBrowserEvent("keydown", function(e) {
			if (e.which === 13) {
				oControl.__bSuggestInProgress = (oControl._oSuggestionPopup && oControl._oSuggestionPopup.isOpen());
			}
		});
		oControl.attachBrowserEvent("keyup", function(e) {
			if (e.which === 13 && !oControl.__bSuggestInProgress) {
				this.search();
			}
		}.bind(this));
	};

	/**
	 * Creates the control used in the filter item lazily
	 * @private
	 * @param {object} oField filter metadata
	 */
	SmartFilterBar.prototype._createFilterFieldControl = function(oField) {
		if (oField.conditionType) {
			oField.control = oField.conditionType.initializeFilterItem();
		} else if (!oField.control && oField.fCreateControl) {
			oField.fCreateControl(oField);
			delete oField.fCreateControl;
		}
		// The control might already be present e.g. for custom field - so also register for enter & change events!
		this._handleEnter(oField.control);
		this._handleChange(oField.control);
	};

	/**
	 * Creates a new paramater and adds it to the filter bar Basic Area, based on the metadata provided by the FilterProvider
	 * @private
	 * @param {object} oParameter filter metadata
	 * @returns {object} oField filter metadata
	 */
	SmartFilterBar.prototype._createAnalyticParameter = function(oParameter) {
		oParameter.factory = function() {

			this._createFilterFieldControl(oParameter);
			if (!oParameter.control) {
				return;
			}
			var oParamItem = new FilterGroupItem({
				labelTooltip: oParameter.quickInfo,
				// label: oParameter.label,
				name: oParameter.fieldName,
				mandatory: oParameter.isMandatory,
				visible: oParameter.isVisible,
				control: oParameter.control,
				hiddenFilter: false
			});

			this._setLabel(oParamItem, oParameter.label);

			this._addParameter(oParamItem);
		}.bind(this);

		// FilterBar needs this information
		oParameter.groupName = FilterBar.INTERNAL_GROUP;

		return oParameter;
	};

	/**
	 * Creates a new field and adds it to the filter bar into the AdvancedSearchArea, based on the metadata provided by the FilterProvider
	 * @private
	 * @param {object} oFilterGroup metadata
	 * @param {object} oField filter metadata
	 * @returns {object} oField filter metadata
	 */
	SmartFilterBar.prototype._createFieldInAdvancedArea = function(oFilterGroup, oField) {
		oField.factory = function() {

			this._createFilterFieldControl(oField);
			var oFilterGroupItem = new FilterGroupItem({
				labelTooltip: oField.quickInfo,
				// label: oField.label,
				name: oField.fieldName,
				groupName: oFilterGroup.groupName,
				groupTitle: oFilterGroup.groupLabel,
				mandatory: oField.isMandatory,
				visible: oField.isVisible,
				visibleInAdvancedArea: oField.visibleInAdvancedArea || (oFilterGroup.groupName === FilterBar.INTERNAL_GROUP),
				control: oField.control,
				hiddenFilter: oField.hiddenFilter
			});

			if (oField.isCustomFilterField) {
				oFilterGroupItem.data("isCustomField", true);
			}

			this._setLabel(oFilterGroupItem, oField.label);

			this.addFilterGroupItem(oFilterGroupItem);
		}.bind(this);

		// FilterBar needs this information
		oField.groupName = oFilterGroup.groupName;
		oField.groupTitle = oFilterGroup.groupLabel;

		return oField;
	};

	/**
	 * Creates a new field and adds it to the filter bar into the AdvancedSearchArea, based on the metadata provided by the FilterProvider
	 * @private
	 * @param {object} oFilterItem receiving the label text.
	 * @param {string} sLabel the new label text.
	 */
	SmartFilterBar.prototype._setLabel = function(oFilterItem, sLabel) {
		if (sLabel.match(/{@i18n>.+}/gi)) {
			oFilterItem.bindProperty("label", sLabel.substring(1, sLabel.length - 1));
		} else {
			oFilterItem.setLabel(sLabel);
		}
	};

	/**
	 * Ensure the associated ValueHelpProvider is loaded
	 * @param {string} sFieldName is the name of the property from the entity type which is associated with a Value Help.
	 * @public
	 */
	SmartFilterBar.prototype.ensureLoadedValueHelp = function(sFieldName) {

		if (this._oFilterProvider) {
			this._oFilterProvider.getAssociatedValueHelpProviders().some(function(oValueHelpProvider) {
				if (oValueHelpProvider.sFieldName === sFieldName) {
					if (!oValueHelpProvider.bInitialised) {
						oValueHelpProvider.loadAnnotation();
					}
					return true;
				}
			});
		}
	};

	SmartFilterBar.prototype.ensureLoadedValueList = function(sFieldName) {

		if (this._oFilterProvider) {
			this._oFilterProvider.getAssociatedValueListProviders().some(function(oValueListProvider) {
				if (oValueListProvider.sFieldName === sFieldName) {
					if (!oValueListProvider.bInitialised) {
						oValueListProvider.loadAnnotation();
					}
					return true;
				}
			});
		}
	};

	SmartFilterBar.prototype.ensureLoadedValueHelpList = function(sFieldName) {
		this.ensureLoadedValueHelp(sFieldName);
		this.ensureLoadedValueList(sFieldName);
	};

	/**
	 * Returns an array of filters (sap.ui.model.Filter instances), for visible fields, that can be used to restrict the query result from OData.<br>
	 * The result of this method can directly be used during aggregation binding or OData read.
	 * @param {string[]} [aFieldNames] optional array of field names that filters should be returned, if not given all visible filters are returned
	 * @returns {sap.ui.model.Filter[]} array of sap.ui.model.Filter or multi-filters
	 * @public
	 */
	SmartFilterBar.prototype.getFilters = function(aFieldNames) {
		if (!aFieldNames || !aFieldNames.length) {
			aFieldNames = this._getVisibleFieldNames(true);
		}

		return this._oFilterProvider ? this._oFilterProvider.getFilters(aFieldNames) : [];
	};

	/**
	 * Returns a parameter object that can be used to restrict the result of an OData service request if a basic search is performed. <caption>Example
	 * of a returned object:</caption>
	 * 
	 * <pre>
	 * {
	 * 	&quot;custom&quot;: {
	 * 		&quot;search-focus&quot;: &quot;MySearchFocusFieldName&quot;,
	 * 		&quot;search&quot;: &quot;MySearchString&quot;
	 * 	}
	 * }
	 * </pre>
	 * 
	 * These parameters can be handed over as custom parameters, for example, to the {@link sap.ui.model.odata.v2.ODataListBinding}.
	 * @returns {object} A parameter object containing OData query parameters
	 * @public
	 */
	SmartFilterBar.prototype.getParameters = function() {
		return this._oFilterProvider ? this._oFilterProvider.getParameters() : {};
	};

	/**
	 * Returns the binding paths for the analytic paramaters
	 * @experimental since 1.42.0 The API is NOT stable yet. Use at your own risk.
	 * @public
	 * @returns {string} Binding path of the analytical paramaters
	 */
	SmartFilterBar.prototype.getAnalyticBindingPath = function() {
		var sBindingPath = "";
		if (this._oFilterProvider && this.getConsiderAnalyticalParameters()) {
			sBindingPath = this._oFilterProvider.getAnalyticBindingPath();
		}

		return sBindingPath;
	};

	/**
	 * Returns the control (if any) with the specified key (Property name in OData entity). Use just the property name as the key when getting a
	 * control from the basic area. Example: "CompanyCode" & Use "EntityName/GroupName.FieldName" format to get controls from groups.
	 * Example:"Account.CompanyCode"
	 * @param {string} sKey The key as present in the OData property name/control configuration
	 * @returns {object|sap.ui.core.Control} The control in the filter bar, if any
	 * @public
	 */
	SmartFilterBar.prototype.getControlByKey = function(sKey) {
		return this.determineControlByName(sKey);
	};

	/**
	 * Returns an array of visible field names
	 * @private
	 * @param {bool} bIgnoreParameters indicationg if the analytic paramaters should be omitted
	 * @returns {Array} aFieldNames - array of field names
	 */
	SmartFilterBar.prototype._getVisibleFieldNames = function(bIgnoreParameters) {
		var aFieldNames = [], aVisibleFilterItems = this.getAllFilterItems(true), iLen = aVisibleFilterItems.length, oItem;
		iLen = aVisibleFilterItems.length;
		// loop through all the visible filter items and get their names
		while (iLen--) {
			oItem = aVisibleFilterItems[iLen];
			if (oItem) {
				if (bIgnoreParameters && oItem._isParameter()) {
					continue;
				}

				aFieldNames.push(oItem.getName());
			}
		}
		return aFieldNames;
	};

	/**
	 * Returns the data currently set in the filter data model.
	 * @param {boolean} bAllFilterData Also include empty/invisible fields filter data
	 * @returns {object} The JSON data in the filter bar
	 * @public
	 */
	SmartFilterBar.prototype.getFilterData = function(bAllFilterData) {
		var oData = null;
		if (this._oFilterProvider) {
			if (bAllFilterData) {
				oData = this._oFilterProvider.getFilterData();
			} else {
				oData = this._oFilterProvider.getFilledFilterData(this._getVisibleFieldNames());
			}
		}
		return oData;
	};

	/**
	 * checks the value of the custom data
	 * @private
	 * @param {Object} oCustomData custom data
	 * @returns {boolean} has value/or not
	 */
	SmartFilterBar.prototype._checkHasValueData = function(oCustomData) {
		if (oCustomData) {
			if (typeof oCustomData === "boolean") {
				return oCustomData;
			} else if (typeof oCustomData === "string") {
				if (oCustomData.toLowerCase() === "true") {
					return true;
				}
			}
		}

		return false;
	};

	/**
	 * checks if the current filter has a value
	 * @param {Object} oData data as returned by the oData-service
	 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem representing the filter
	 * @param {sap.ui.core.Control} oControl the control as described by the oFilterItem
	 * @returns {boolean} true if the filter item has a value
	 * @private
	 */
	SmartFilterBar.prototype._checkForValues = function(oData, oFilterItem, oControl) {
		var sValue = null;
		if (oData && oFilterItem && oControl) {
			if (!oFilterItem.data("isCustomField")) {
				// Check if Data exists in the filter model for internal fields
				sValue = oData[oFilterItem.getName()];
			} else {

				var oCustomData = oControl.data("hasValue");
				if ((oCustomData !== undefined) && (oCustomData != null)) {
					return this._checkHasValueData(oCustomData);
				} else {
					/* eslint-disable no-lonely-if */
					if (oControl.getValue) {
						// Check if getValue is present and filled
						sValue = oControl.getValue();
					} else if (oControl.getSelectedKey) { // new mechanism with 1.25. Has to be provided by the custom field
						// Check if getSelectedKey is set
						sValue = oControl.getSelectedKey();
					}
					/* eslint-enable no-lonely-if */
				}
			}
		}

		return sValue ? true : false;
	};

	/**
	 * Returns all filter items containing a value
	 * @returns {array} filter items containing a value
	 * @private
	 */
	SmartFilterBar.prototype.getFiltersWithValues = function() {
		var aFilterItemsWithValue = [];

		// logic from check _validateMandatoryFields
		var aFilterItems = this.getAllFilterItems(true), oFilterItem, oData = this.getFilterData(), iLen = 0, oControl;
		if (aFilterItems && oData) {
			iLen = aFilterItems.length;
			// Loop through the mandatory field names
			while (iLen--) {
				oFilterItem = aFilterItems[iLen];
				// Get the control from filter item name
				oControl = this.determineControlByFilterItem(oFilterItem, true);
				if (this._checkForValues(oData, oFilterItem, oControl)) {
					aFilterItemsWithValue.push(oFilterItem);
				}
			}
		}

		return aFilterItemsWithValue.reverse();
	};

	/**
	 * Returns the data currently set in the filter data model as string.
	 * @param {boolean} bAllFilterData Also include empty/invisible fields filter data
	 * @returns {string} The JSON data string
	 * @public
	 */
	SmartFilterBar.prototype.getFilterDataAsString = function(bAllFilterData) {
		var oData = null;
		if (this._oFilterProvider) {
			if (bAllFilterData) {
				oData = this._oFilterProvider.getFilterDataAsString();
			} else {
				oData = this._oFilterProvider.getFilledFilterDataAsString(this._getVisibleFieldNames());
			}
		}
		return oData;
	};

	/**
	 * Sets the data in the filter data model. The follow-on filterChange event is only triggered when none _CUSTOM data is set.
	 * @param {object} oJson The JSON data in the filter bar
	 * @param {boolean} bReplace Replace existing filter data
	 * @public
	 */
	SmartFilterBar.prototype.setFilterData = function(oJson, bReplace) {
		if (this._oFilterProvider) {
			this._oFilterProvider.setFilterData(oJson, bReplace);
		}

		if (oJson && (Object.keys(oJson).length === 1) && oJson._CUSTOM) {
			// in case only _CUSTOM information is available do not trigger filterChange-event
			return;
		}

		// The internal controls do not fire change event in this scenario
		// So, we fire it manually once here
		this.fireFilterChange({
			afterFilterDataUpdate: true
		});
	};

	/**
	 * Sets the data in the filter data model as string.
	 * @param {string} sJson The JSON data in the filter bar
	 * @param {boolean} bReplace Replace existing filter data
	 * @public
	 */
	SmartFilterBar.prototype.setFilterDataAsString = function(sJson, bReplace) {
		if (sJson) {
			this.setFilterData(JSON.parse(sJson), bReplace);
		}
	};

	/**
	 * Overwrites method from base class. Called when user clicks the clear button of the FilterBar. Clears all filter fields and fires clear event.
	 * @private
	 */
	SmartFilterBar.prototype.fireClear = function() {
		this._clearFilterFields();
		this.fireEvent("clear", arguments);
	};

	/**
	 * Clears the values of all filter fields. Applies default values if applicable.
	 * @private
	 */
	SmartFilterBar.prototype._clearFilterFields = function() {
		if (this._oFilterProvider) {
			this._oFilterProvider.clear();

			this._clearErroneusControlValues();
		}
		// The internal controls do not fire change event in this scenario
		// So, we fire it manually once here
		this.fireFilterChange({
			afterFilterDataUpdate: true
		});
	};

	/**
	 * Overwrites method from base class. Called when user clicks the reset button of the FilterBar. Clears all filter fields and fires reset event.
	 * @private
	 */
	SmartFilterBar.prototype.fireReset = function() {
		this._resetFilterFields();
		this.fireEvent("reset", arguments);
	};

	/**
	 * Clears the values of all filter fields. Applies default values if applicable.
	 * @private
	 */
	SmartFilterBar.prototype._resetFilterFields = function() {
		if (this._oFilterProvider) {
			this._oFilterProvider.reset();

			this._clearErroneusControlValues();
		}
		// The internal controls do not fire change event in this scenario
		// So, we fire it manually once here
		this.fireFilterChange({
			afterFilterDataUpdate: true
		});
	};

	/**
	 * Triggers a search with the specified timeout or simple in a 0 delayed call - so that, current execution stack is done before the search is
	 * executed
	 * @param {int} iDelay Delay time in milliseconds
	 * @private
	 */
	SmartFilterBar.prototype.triggerSearch = function(iDelay) {

		if (this.getSuppressSelection()) {
			return;
		}

		this._clearDelayedSearch();
		this._iDelayedSearchId = jQuery.sap.delayedCall(iDelay || 0, this, "_search");
	};

	/**
	 * Overwrites method from base class. Called when user clicks the search button of the FilterBar. The search is executed asynchronously per
	 * default, but can be forced to synchronously execution by providing the <code>bSync</code> set to <code>true</code>. Synchronous mode is
	 * only supported for non live mode scenarios. In the synchroneous mode a mandatory check prior to the search execution is made.
	 * @public
	 * @param {boolean} bSync Indicates if the search should be triggered synchronously
	 * @returns {boolean|undefined} Indicates if there are validation errors
	 */
	SmartFilterBar.prototype.search = function(bSync) {

		if (this.getSuppressSelection()) {
			return undefined;
		}

		var bLiveMode = this.isLiveMode();

		if (bSync && !bLiveMode) {
			return this._search();
		} else {
			this.triggerSearch(bLiveMode ? SmartFilterBar.LIVE_MODE_INTERVAL : 0);
		}
		return true;
	};

	/**
	 * Executes the search.
	 * @private
	 * @returns {boolean | undefined} <code>true</code> indicates that there are no validation problems.
	 */
	SmartFilterBar.prototype._search = function() {
		var parameter = [], oObj = {}, bContinue = true, bInValidationError = false, sErrorMessage;

		// First check for validation errors or if search should be prevented
		var oIsSearchAllowed = this.verifySearchAllowed();
		if (oIsSearchAllowed.hasOwnProperty("pending")) {
			// if search is pending.. do nothing
			return undefined;
		} else if (oIsSearchAllowed.hasOwnProperty("error")) {
			// validation errors exist
			bContinue = false;
			bInValidationError = true;
		} else if (oIsSearchAllowed.hasOwnProperty("mandatory")) {
			// empty mandatory filters
			bContinue = false;
		}

		if (this.isPending() && !this._bIsPendingChangeAttached) {
			var fnHandler = function(oEvent) {
				if (oEvent.getParameter("pendingValue") === false) {
					this.detachPendingChange(fnHandler);
					this._bIsPendingChangeAttached = false;
					this._search();
				}
			}.bind(this);
			this._bIsPendingChangeAttached = true;
			this.attachPendingChange(fnHandler);
			return undefined;
		}

		// clear eventual delayed search
		this._clearDelayedSearch();

		if (bContinue) {
			oObj.selectionSet = this._retrieveCurrentSelectionSet(false, true);
			parameter.push(oObj);
			this.fireSearch(parameter);
		} else {
			if (!this._oResourceBundle) {
				this._oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
			}

			if (!bInValidationError) {
				if (!this._sMandatoryErrorMessage) {
					this._sMandatoryErrorMessage = this._oResourceBundle.getText("EMPTY_MANDATORY_MESSAGE");
				}
				sErrorMessage = this._sMandatoryErrorMessage;
			} else {
				if (!this._sValidationErrorMessage) {
					this._sValidationErrorMessage = this._oResourceBundle.getText("VALIDATION_ERROR_MESSAGE");
				}
				sErrorMessage = this._sValidationErrorMessage;
			}

			if (this.getShowMessages() && !this.getLiveMode()) {
				try {

					this._activateMainContent();
					MessageBox.error(sErrorMessage, {
						styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : "",
						onClose: this._setFocusOnFirstErroneousField.bind(this)
					});
				} catch (x) {
					return undefined;
				}
			} else {
				this._setFocusOnFirstErroneousField();
				jQuery.sap.log.warning("search was not triggered. " + sErrorMessage);
			}

			// Opens the more area if error message is shown and if empty mandatory fields are present in the advanced filter area!
			if (this._bExpandAdvancedFilterArea && this.rerenderFilters) {
				this.rerenderFilters(true);
			}
		}
		return bContinue;
	};

	/**
	 * Verify if all mandatory filters or parameters have values.
	 * @public
	 * @returns {boolean} true indicates that all mandatory filters and parameters have values.
	 */
	SmartFilterBar.prototype.validateMandatoryFields = function() {
		return this._validateMandatoryFields();
	};

	/**
	 * Verifies if search is possible.
	 * @public
	 * @returns {object} an empty object indicates that all is fine and the search can be triggered. an object with the property mandatory indicates
	 *          that some mandatory filters or parameters are empty an object with the property pending indicates that a token validation is going on.
	 *          an object with the property error indicates that some filters or parameters are in error state.
	 */
	SmartFilterBar.prototype.verifySearchAllowed = function() {

		delete this.bIsSearchPending;
		// First check for validation errors or if search should be prevented
		if (this._validateState()) {
			if (this.validateMandatoryFields()) {
				return {};
			}

			return {
				mandatory: true
			};
		}
		if (this.bIsSearchPending) {
			return {
				pending: true
			};
		}

		return {
			error: true
		};

	};

	/**
	 * Sets focus on the first field having an error message
	 * @private
	 */
	SmartFilterBar.prototype._setFocusOnFirstErroneousField = function() {
		var aFilterItems = null, iLen, oControl, i;
		aFilterItems = this.getAllFilterItems(true);
		if (aFilterItems) {
			iLen = aFilterItems.length;
			for (i = 0; i < iLen; i++) {
				oControl = this.determineControlByFilterItem(aFilterItems[i], true);
				if (oControl && oControl.getValueState && oControl.getValueState() === sap.ui.core.ValueState.Error) {
					jQuery.sap.delayedCall(0, oControl, "focus");
					break;
				}
			}
		}
	};

	SmartFilterBar.prototype.setLiveMode = function(bFlag) {
		if (!this._isPhone()) {
			if (bFlag) {
				this.hideGoButton();
			} else {
				this.restoreGoButton();
			}
		}

		if (this._oSmartVariantManagement) {
			if (bFlag) {

				if (this._bShowShareState === undefined) {
					this._bShowShareState = this._oSmartVariantManagement.getShowExecuteOnSelection();
				}

				this._oSmartVariantManagement.setShowExecuteOnSelection(false);
			} else if (this._bShowShareState !== undefined) {
				this._oSmartVariantManagement.setShowExecuteOnSelection(this._bShowShareState);
			}
		}

		this.setProperty("liveMode", bFlag);
		return this;
	};

	SmartFilterBar.prototype.isLiveMode = function() {
		if (this._isPhone()) {
			return false;
		}

		return this.getLiveMode();
	};

	SmartFilterBar.prototype._clearDelayedSearch = function() {
		if (this._iDelayedSearchId) {
			jQuery.sap.clearDelayedCall(this._iDelayedSearchId);
			this._iDelayedSearchId = null;
		}
	};

	/**
	 * Checks the pending state of the FilterBar control
	 * @public
	 * @returns {boolean} true if at least one FilterItem element of the FilterBar control is pending
	 */
	SmartFilterBar.prototype.isPending = function() {
		if (!this._oFilterProvider) {
			return false;
		}
		return this._oFilterProvider.isPending();
	};

	/**
	 * Checks if the values of all mandatory filter fields are filled and returns true if they are; else returns false. If no fields and data exist
	 * true is returned! ErrorMessage/ErrorState is set on the fields accordingly.
	 * @private
	 * @returns {boolean} true when no errors exist
	 */
	SmartFilterBar.prototype._validateMandatoryFields = function() {
		var bFilled = true, aFilterItems = this.determineMandatoryFilterItems(), oFilterItem, oData = this.getFilterData(), iLen = 0, oControl;
		this._bExpandAdvancedFilterArea = false;
		if (aFilterItems && oData) {
			iLen = aFilterItems.length;
			// Loop through the mandatory field names
			while (iLen--) {
				oFilterItem = aFilterItems[iLen];

				// sField = oFilterItem.getName();
				// Get the control from filter item name
				oControl = this.determineControlByFilterItem(oFilterItem, true);
				if (oControl && oControl.setValueState) {

					if (this._checkForValues(oData, oFilterItem, oControl)) {
						// Clear error state only if it was set due to mandatory check
						if (oControl.data("__mandatoryEmpty")) {
							oControl.data("__mandatoryEmpty", null);
							oControl.setValueState(sap.ui.core.ValueState.None);
						}
					} else {
						bFilled = false;
						// If field has a value property and it is empty --> show error
						oControl.setValueState(sap.ui.core.ValueState.Error);
						// set flag if error state was set due to mandatory check
						oControl.data("__mandatoryEmpty", true);
						// GroupName method exists only on FilterGroupItem --> part of advanced filter area
						if (oFilterItem.getGroupName) {
							this._bExpandAdvancedFilterArea = true; // !!!! TODO: expand the filter area
						}
					}
				}
			}
		}
		return bFilled;
	};

	SmartFilterBar.prototype._setSmartVariant = function(sSmartVariant) {
		if (sSmartVariant) {
			var oSmartVariantControl = sap.ui.getCore().byId(sSmartVariant);
			if (oSmartVariantControl) {
				if (oSmartVariantControl instanceof SmartVariantManagement) {

					if (this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
						this._replaceVariantManagement(oSmartVariantControl);
						this._oSmartVariantManagement = oSmartVariantControl;
					}

				} else {
					jQuery.sap.log.error("Control with the id=" + sSmartVariant + " not of expected type");
				}
			} else {
				jQuery.sap.log.error("Control with the id=" + sSmartVariant + " not found");
			}
		}
	};

	SmartFilterBar.prototype.setSmartVariant = function(sSmartVariant) {

		if (this.getAdvancedMode()) {
			jQuery.sap.log.error("not supported for the advanced mode");
			return this;
		}

		this.setAssociation("smartVariant", sSmartVariant);
		this._setSmartVariant(sSmartVariant);

		return this;
	};

	SmartFilterBar.prototype.getSmartVariant = function() {

		if (this.getAdvancedMode()) {
			jQuery.sap.log.error("not supported for the advanced mode");
			return null;
		}

		var sSmartVariantId = this.getAssociation("smartVariant");
		if (sSmartVariantId) {
			return sap.ui.getCore().byId(sSmartVariantId);

		}

		return this._oSmartVariantManagement;
	};

	/**
	 * creates the smart variant-management control
	 * @private
	 * @returns {SmartVariantManagement} the newly created variant control
	 */
	SmartFilterBar.prototype._createVariantManagement = function() {

		this._oSmartVariantManagement = null;

		if (this.getAdvancedMode()) {
			return FilterBar.prototype._createVariantManagement.apply(this);
		}

		var sSmartVariant = this.getSmartVariant();
		this._setSmartVariant(sSmartVariant);

		if (!this._oSmartVariantManagement) {

			this._oSmartVariantManagement = new SmartVariantManagement(this.getId() + "-variant", {
				showExecuteOnSelection: true,
				showShare: true
			});
		}

		return this._oSmartVariantManagement;
	};

	/**
	 * initializes the variant management, when the prerequisites are full filled. In this case the initialise-event will be triggered lated, after
	 * the variant management initialization. Triggers the initialise-event immediately, in case the pre-requisits are not full filled
	 * @private
	 */
	SmartFilterBar.prototype._initializeVariantManagement = function() {
		// initialise SmartVariant stuff only if it is necessary! (Ex: has a persistencyKey)
		if (!this.isRunningInValueHelpDialog && this._oSmartVariantManagement && this.getPersistencyKey()) {
			var oPersInfo = new PersonalizableInfo({
				type: "filterBar",
				keyName: "persistencyKey",
				dataSource: this.getEntitySet() || this.getEntityType()
			});
			oPersInfo.setControl(this);

			this._oSmartVariantManagement.addPersonalizableControl(oPersInfo);

			var bValue = this._checkHasValueData(this.data("executeStandardVariantOnSelect"));
			if (bValue) {
				this._oSmartVariantManagement._executeOnSelectForStandardVariantByXML(bValue);
			}

			FilterBar.prototype._initializeVariantManagement.apply(this, arguments);

		} else {

			this.fireInitialise();
			this.fireInitialized();
		}
	};

	SmartFilterBar.prototype.setConsiderSelectionvariants = function(bValue) {
		this.setProperty("considerSelectionVariants", bValue);
	};

	/**
	 * Is called whenever the filter bar is fully initialized. Especially the variant managment control is initialized. Each odata metadata
	 * <code>com.sap.vocabularies.UI.v1.SelectionVariant</code> annotation will be added as a variant item to the <code>VariantManagement</code>
	 * control. The key is the qualifier and is prefixed with a dedicated constant.
	 * @private
	 */
	SmartFilterBar.prototype.fireInitialized = function() {

		if (!this.isRunningInValueHelpDialog && this.getPersistencyKey() && this.getConsiderSelectionVariants() && this._oSmartVariantManagement && this._oSmartVariantManagement.getEnabled()) {
			try {

				if (!this._oSmartVariantManagement.isPageVariant()) {
					this._prepareSelectionVariants();
				}
			} finally {
				//
			}
		}

		FilterBar.prototype.fireInitialized.apply(this, arguments);
	};

	SmartFilterBar.prototype._prepareSelectionVariants = function() {
		var aSelectionVariants, oVariantItem, sDefaultKey, sKeyPrefix = SmartFilterBar.SELECTION_VARIANT_KEY_PREFIX, bNewStandard = false, aVariantKeys = [];

		aSelectionVariants = this.getSelectionVariants();
		if (aSelectionVariants) {

			this._oSmartVariantManagement.registerSelectionVariantHandler({
				callback: this.getSelectionVariant,
				handler: this
			}, sKeyPrefix);

			sap.ui.require("sap.ui.comp.variants.VariantItem");
			aSelectionVariants.forEach(function(oSelectionVariant) {
				var sVariantKey = sKeyPrefix + oSelectionVariant.qualifier;
				if (oSelectionVariant.qualifier) {
					oVariantItem = new sap.ui.comp.variants.VariantItem({
						key: sVariantKey,
						text: oSelectionVariant.annotation.Text.String,
						global: true,
						executeOnSelection: false,
						lifecycleTransportId: "",
						lifecyclePackage: "",
						namespace: "",
						readOnly: true,
						labelReadOnly: true,
						author: ""
					});

					this._oSmartVariantManagement.insertVariantItem(oVariantItem, 0);

					aVariantKeys.push(sVariantKey);
				} else {
					bNewStandard = this._defaultSelectionVariantHandling(oSelectionVariant);
				}

			}.bind(this));

			if (!this._oSmartVariantManagement._getDefaultVariantKey()) {
				if (this.getDefaultSelectionVariantName()) {
					sDefaultKey = sKeyPrefix + this.getDefaultSelectionVariantName();
					this._oSmartVariantManagement.setInitialSelectionKey(sDefaultKey);
					this._oSmartVariantManagement.fireSelect({
						key: sDefaultKey
					});
				} else if (bNewStandard) {
					this._oSmartVariantManagement.fireSelect({
						key: this._oSmartVariantManagement.STANDARDVARIANTKEY
					});
				}
			}

			this._oSmartVariantManagement.applyDefaultFavorites(aVariantKeys, true);
		}
	};

	SmartFilterBar.prototype._defaultSelectionVariantHandling = function(oSelectionVariant) {
		var oVariantContent = null;

		if (!this._oSmartVariantManagement) {
			return false;
		}

		if (this._oSmartVariantManagement._sAppStandardVariantKey) {
			return false;
		}

		if (oSelectionVariant && oSelectionVariant.annotation) {
			oVariantContent = this.convertSelectionVariantToInternalVariant(oSelectionVariant.annotation);

			if (oVariantContent) {

				if (!this._oSmartVariantManagement.isPageVariant()) {
					oVariantContent.version = "V1";

					var oFilterData = JSON.parse(oVariantContent.filterBarVariant);

					if (this._oSmartVariantManagement._oStandardVariant) {

						var oStandardFilterData = JSON.parse(this._oSmartVariantManagement._oStandardVariant.filterBarVariant);

						if (oStandardFilterData._CUSTOM) {

							oFilterData._CUSTOM = oStandardFilterData._CUSTOM;
							// oFilterData._CUSTOM = [];
							// jQuery.extend(true, oFilterData._CUSTOM, oCustomdata);

							oVariantContent.filterBarVariant = JSON.stringify(oFilterData);
						}

						// oVariantContent.filterbar = this._adaptFilterVisibilityProperties(oFilterData);

					}

					this._oSmartVariantManagement._oStandardVariant = oVariantContent;

					return true;
				}
			}
		}

		return false;
	};

	SmartFilterBar.prototype._adaptFilterVisibilityProperties = function(oFilterData) {
		var bFound, sEntry = null, aFilters = [];

		if (this._oSmartVariantManagement && this._oSmartVariantManagement._oStandardVariant && this._oSmartVariantManagement._oStandardVariant.filterbar) {
			jQuery.extend(true, aFilters, this._oSmartVariantManagement._oStandardVariant.filterbar);
		}

		for (sEntry in oFilterData) {
			bFound = false;
			/* eslint-disable no-loop-func */
			aFilters.some(function(oFilter) {
				if (oFilter.name === sEntry) {
					bFound = true;
					oFilter.partOfCurrentVariant = true;
				}
				return bFound;
			});
			/* eslint-enable no-loop-func */
			if (!bFound) {
				aFilters.push({
					group: this._determineGroupNameByName(sEntry),
					name: sEntry,
					partOfCurrentVariant: true,
					visibleInFilterBar: false,
					visible: true
				});
			}
		}

		return aFilters;

	};

	/**
	 * Returns a selection variant, which is based on odata metadata <code>com.sap.vocabularies.UI.v1.SelectionVariant</code> annotation.
	 * @private
	 * @param {string} sKeyWithPrefix for the variant key.
	 * @param {string} sContext for late usage.
	 * @returns {object} the variant object.
	 */
	SmartFilterBar.prototype.getSelectionVariant = function(sKeyWithPrefix, sContext) {
		var oVariantContent = null, oSelectionVariant = null, sKey = sKeyWithPrefix.substring(SmartFilterBar.SELECTION_VARIANT_KEY_PREFIX.length);

		this.getSelectionVariants().some(function(oItem) {
			if (oItem.qualifier === sKey) {
				oSelectionVariant = oItem;
				return true;
			}

			return false;
		});

		if (oSelectionVariant) {
			if (oSelectionVariant.variantContent) {
				oVariantContent = oSelectionVariant.variantContent;
			} else {
				oVariantContent = this.convertSelectionVariantToInternalVariant(oSelectionVariant.annotation);
				oSelectionVariant.variantContent = oVariantContent;
			}
		}

		return oVariantContent;
	};

	/**
	 * Converts a specific <code>com.sap.vocabularies.UI.v1.SelectionVariant</code> annotation, to the internal variant format.
	 * @private
	 * @param {object} oSelectionVariant the content of a odata metadata selection variant.
	 * @returns {json} the internal variant content.
	 */
	SmartFilterBar.prototype.convertSelectionVariantToInternalVariant = function(oSelectionVariant) {

		sap.ui.require("sap.ui.model.odata.AnnotationHelper");
		sap.ui.require("sap.ui.model.Context");
		sap.ui.require("sap.ui.comp.filterbar.VariantConverterFrom");

		// Simple cloning the object
		var sSelectionVariant = JSON.stringify(oSelectionVariant), oContent = JSON.parse(sSelectionVariant), oVariantContent = {}, oPayload = {};
		var oDummyContext = new sap.ui.model.Context(null, "/"), oSelectOptions = oContent.SelectOptions, oParameters = oContent.Parameters, oConverter;

		if (oSelectOptions) {
			oSelectOptions.forEach(function(selectOption) {
				selectOption.PropertyName = selectOption.PropertyName.PropertyPath;
				selectOption.Ranges.forEach(function(range) {
					range.Sign = range.Sign.EnumMember.split("/")[1];
					range.Option = range.Option.EnumMember.split("/")[1];
					// AnnotationHelper can do the conversion
					range.Low = range.Low && sap.ui.model.odata.AnnotationHelper.format(oDummyContext, range.Low) || null;
					range.High = range.High && sap.ui.model.odata.AnnotationHelper.format(oDummyContext, range.High) || null;
				});
			});
		}

		if (oParameters) {
			oParameters.forEach(function(parameter) {
				parameter.PropertyName = parameter.PropertyName.PropertyPath.split("/")[1] || parameter.PropertyName.PropertyPath;
				parameter.PropertyValue = sap.ui.model.odata.AnnotationHelper.format(oDummyContext, parameter.PropertyValue) || null;
			});
		}

		oConverter = new sap.ui.comp.filterbar.VariantConverterFrom();
		oVariantContent = oConverter.convert(JSON.stringify(oContent), this);
		oPayload = JSON.parse(oVariantContent.payload);

		if (this._oSmartVariantManagement.isPageVariant()) {

			oVariantContent[this.getPersistencyKey()] = {
				"version": "V2", // V2 merges aka delta logic, V1 overwrites
				"filterbar": this._adaptFilterVisibilityProperties(oPayload),
				"filterBarVariant": JSON.stringify(oPayload)
			};
		} else {
			oVariantContent = {
				"version": "V2", // V2 merges aka delta logic, V1 overwrites
				"filterbar": this._adaptFilterVisibilityProperties(oPayload),
				"filterBarVariant": JSON.stringify(oPayload)
			};
		}

		return oVariantContent;
	};

	/**
	 * Returns an instance of the control for the basic search.
	 * @returns {object} Basic search control
	 * @public
	 */
	SmartFilterBar.prototype.getBasicSearchControl = function() {
		return sap.ui.getCore().byId(this.getBasicSearch());
	};

	/**
	 * Searches for the filter field having the specified OData key and adds this filter field to the advanced area. If there is no corresponding
	 * field in the OData metadata, this method has no effect.
	 * @param {string} sKey The key like specified in the OData metadata
	 * @public
	 */
	SmartFilterBar.prototype.addFieldToAdvancedArea = function(sKey) {
		var oFilterItem;
		oFilterItem = this._getFilterItemByName(sKey);
		if (oFilterItem && oFilterItem.setVisibleInAdvancedArea) {
			oFilterItem.setVisibleInAdvancedArea(true);
		}
	};

	SmartFilterBar.prototype.getConditionTypeByKey = function(sKey) {
		if (this._oFilterProvider._mConditionTypeFields[sKey]) {
			return this._oFilterProvider._mConditionTypeFields[sKey].conditionType;
		}
	};

	/**
	 * Checks whether the control is initialised
	 * @returns {boolean} returns whether control is already initialised
	 * @protected
	 */
	SmartFilterBar.prototype.isInitialised = function() {
		return !!this.bIsInitialised;
	};

	SmartFilterBar.prototype.destroy = function() {
		this._clearDelayedSearch();

		if (this._oSmartVariantManagement && this.getConsiderSelectionVariants()) {
			this._oSmartVariantManagement.unregisterSelectionVariantHandler(this);
		}

		FilterBar.prototype.destroy.apply(this, arguments);

		sap.ui.getCore().getMessageManager().unregisterObject(this);

		if (this._oFilterProvider && this._oFilterProvider.destroy) {
			this._oFilterProvider.destroy();
		}
		this._oFilterProvider = null;
		this._aFilterBarViewMetadata = null;
		this._bExpandAdvancedFilterArea = null;
		this._oResourceBundle = null;
		this._sMandatoryErrorMessage = null;
		this._sValidationErrorMessage = null;

		this._oSmartVariantManagement = null;
	};

	return SmartFilterBar;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfilterbar/SmartFilterBar.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.Group.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.smartform.Group control
jQuery.sap.declare('sap.ui.comp.smartform.Group.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/comp/smartform/Group.designtime",[
	"sap/ui/comp/smartform/GroupElement.designtime"
], function(GroupElementDesignTimeMetadata) {
	"use strict";

	return {
		name : {
			singular : "GROUP_CONTROL_NAME",
			plural : "GROUP_CONTROL_NAME_PLURAL"
		},
		aggregations: {
			title: {
				ignore: true
			},
			groupElements: {
				ignore: true
			},
			formElements: {
				domRef: ":sap-domref",
				childNames : {
					singular : "FIELD_CONTROL_NAME",
					plural : "FIELD_CONTROL_NAME_PLURAL"
				},
				actions: {
					move: {
						changeType : "moveControls"
					},
					addODataProperty: {
						changeType: "addFields",
						filter: function(oRelevantContainer, mODataProperty ) {
							var sIgnoredFields = oRelevantContainer.getMetadata().getName() === "sap.ui.comp.smartform.SmartForm" ? oRelevantContainer.getIgnoredFields() : "";
							return sIgnoredFields.indexOf(mODataProperty.name) === -1;
						},
						getLabel : function(oGroupElement){
							return oGroupElement.getParent().getLabelText();
						}
					}
				}
			}
		},
		actions: {
			rename: {
				changeType: "renameGroup",
				isEnabled: function(oGroup) {
					return !oGroup.getExpandable();
				},
				domRef: function(oControl) {
					var oTitle = oControl.getTitle && oControl.getTitle();
					// duck typing since core.title is not an instance of Control
					if (oTitle && oTitle.getDomRef) {
						return oTitle.getDomRef();
					} else {
						return jQuery.sap.domById(oControl.getId() + "--title");
					}
				}
			},
			remove: {
				changeType: "hideControl",
				getConfirmationText: function(oGroup) {
					var oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

					var aMandatoryFieldNames = [];
					oGroup.getGroupElements().forEach(function(oGroupElement) {
						if (oGroupElement.getVisible() && GroupElementDesignTimeMetadata.functions.hasMandatoryFields(oGroupElement)) {
							var sGroupElement = oGroupElement.getLabelText() || oGroupElement.getId();
							aMandatoryFieldNames.push(sGroupElement);
						}
					});

					if (aMandatoryFieldNames.length) {
						var sFormattingPrefix = "\n\u2003\u2003\u2022\u2004 "; // new line, two M whitespaces, bullet point, N whitespace
						var sMandatoryFields = "";
						aMandatoryFieldNames.forEach(function(oMandatoryFieldName) {
							sMandatoryFields += sFormattingPrefix + oMandatoryFieldName;
						});
						return oTextResources.getText("GROUP_DESIGN_TIME_REMOVE_GROUP_WITH_MANDATORY_FIELDS_MESSAGE", sMandatoryFields);
					}

				}
			}
		},
		properties: {
			useHorizontalLayout: {
				ignore: true
			},
			horizontalLayoutGroupElementMinWidth: {
				ignore: true
			},
			label: {
				ignore: false
			}
		}
	};

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/Group.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.FlexHandler') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.navpopover.FlexHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/FlexHandler",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/base/ManagedObject', 'sap/ui/comp/personalization/Util', './Util', './Factory', 'sap/ui/comp/personalization/Controller'
], function(jQuery, CompLibrary, ManagedObject, PersonalizationUtil, Util, Factory, Controller) {
	"use strict";

	/**
	 * Handler for communication with layered repository (LRep).
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class Communicates with the layered repository (LRep) and reacts on flexibility changes.
	 * @constructor
	 * @public
	 * @since 1.46.0
	 * @alias sap.ui.comp.navpopover.FlexHandler
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var FlexHandler = ManagedObject.extend("sap.ui.comp.navpopover.FlexHandler", /** @lends sap.ui.comp.navpopover.FlexHandler */
	{
		constructor: function(sId, mSettings) {
			ManagedObject.apply(this, arguments);
		},
		metadata: {
			properties: {
				/**
				 * Initial state of all available actions. After the initial state has been set it cannot be changed again.
				 */
				initialSnapshot: {
					type: "object",
					defaultValue: null
				},
				/**
				 * Changes made only for USER layer.
				 */
				snapshotOfUserLayer: {
					type: "object",
					defaultValue: null
				},
				/**
				 * Changes made for all layers except USER layer.
				 */
				snapshotOfLayersWithoutUser: {
					type: "object",
					defaultValue: null
				}
			}
		}
	});

	FlexHandler.prototype.applySettings = function(mSettings) {
		// Note: we have to initialize the properties 'snapshotOfUserLayer', 'snapshotOfLayersWithoutUser' and 'initialSnapshot' with an empty object
		// {} because the value of these properties still remains when new instance of FlexHandler is be created (reference of objects in
		// JavaScript).
		this.setInitialSnapshot({});
		this.setSnapshotOfUserLayer({});
		this.setSnapshotOfLayersWithoutUser({});

		ManagedObject.prototype.applySettings.apply(this, arguments);
	};

	FlexHandler.prototype.init = function() {
		if (JSON.parse(jQuery.sap.getUriParameters().get("sap-ui-smartlink"))) {
			Factory.getService("FlexConnector").activateApplyChangeStatistics();
		}
	};

	/**
	 *
	 * @param {object} oLinkData
	 * @param {string} sLayer
	 * @private
	 */
	FlexHandler.prototype.updateAvailableActionOfSnapshot = function(oLinkData, sLayer) {
		if (!oLinkData || !sLayer) {
			return;
		}
		var oSnapshot;
		switch (sLayer) {
			case "USER":
				// Update only 'USER' snapshot
				oSnapshot = this.getSnapshotOfUserLayer();
				oSnapshot[oLinkData.getKey()] = {
					key: oLinkData.getKey(),
					visible: oLinkData.getVisible()
				};
				this.setSnapshotOfUserLayer(oSnapshot);
				break;
			default:
				// Update all other snapshot
				oSnapshot = this.getSnapshotOfLayersWithoutUser();
				oSnapshot[oLinkData.getKey()] = {
					key: oLinkData.getKey(),
					visible: oLinkData.getVisible()
				};
				this.setSnapshotOfLayersWithoutUser(oSnapshot);
		}
	};

	/**
	 * @private
	 */
	FlexHandler.prototype.discardAvailableActionsOfSnapshot = function(sLayer) {
		if (sLayer !== "USER") {
			return;
		}
		this.setSnapshotOfUserLayer({});
	};

	/**
	 * Current snapshot of available actions.
	 *
	 * @private
	 */
	FlexHandler.prototype.determineSnapshotOfAvailableActions = function() {
		var oSnapshotOrigin = FlexHandler._getUnion(this.getInitialSnapshot(), this.getSnapshotOfLayersWithoutUser());
		return FlexHandler._getUnion(oSnapshotOrigin, this.getSnapshotOfUserLayer());
	};

	/**
	 * Difference between initial snapshot and current snapshot.
	 *
	 * @private
	 */
	FlexHandler.prototype.determineSnapshotOfChangedAvailableActions = function() {
		var oSnapshotTotal = this.determineSnapshotOfAvailableActions();
		return FlexHandler._getUnionCondensed(this.getInitialSnapshot(), oSnapshotTotal);
	};

	/**
	 * @private
	 */
	FlexHandler.prototype.openSelectionDialog = function(oSelectorControl, bForbidNavigation, bShowReset, fCallbackAfterClose, bIsEndUser) {
		var that = this;
		var oSnapshotKeyUserOld = jQuery.extend(true, {}, this.getSnapshotOfLayersWithoutUser());
		var oSnapshotUserOld = jQuery.extend(true, {}, this.getSnapshotOfUserLayer());
		var oSnapshotOrigin;
		var oSnapshotTotalOld;
		var oSelectionItems;

		if (bIsEndUser) {
			oSnapshotOrigin = FlexHandler._getUnion(this.getInitialSnapshot(), oSnapshotKeyUserOld);
			oSnapshotTotalOld = FlexHandler._getUnion(oSnapshotOrigin, oSnapshotUserOld);
			oSelectionItems = FlexHandler._convertSnapshotToSelectionItems(oSnapshotUserOld);
		} else {
			oSnapshotOrigin = this.getInitialSnapshot();
			oSnapshotTotalOld = FlexHandler._getUnion(oSnapshotOrigin, oSnapshotKeyUserOld);
			oSelectionItems = FlexHandler._convertSnapshotToSelectionItems(oSnapshotKeyUserOld);
		}

		return new Promise(function(resolve) {
			// due to performance reason - keep oController as member variable for the use-case that after OK (in Selection Dialog) the
			// Selection Dialog is opened again
			var bDialogConfirmedReset = false;
			var oController = new Controller({
				table: PersonalizationUtil.createSelectionWrapper(Util.getStorableAvailableActions(FlexHandler._convertSnapshotToObjectArray(oSnapshotOrigin)), bForbidNavigation),
				dialogConfirmedReset: function() {
					bDialogConfirmedReset = true;
				},
				setting: {
					selection: {
						visible: true,
						payload: {
							callbackSaveChanges: function(aSelectionItems) {
								var oSnapshotBase = bDialogConfirmedReset ? oSnapshotOrigin : oSnapshotTotalOld;
								var oSnapshotTotalNew = FlexHandler._getUnion(oSnapshotTotalOld, aSelectionItems ? FlexHandler.convertArrayToSnapshot("columnKey", aSelectionItems) : {});
								var aChanges = FlexHandler._convertSnapshotToChangeFormat(FlexHandler._getUnionCondensed(oSnapshotBase, oSnapshotTotalNew));

								if (fCallbackAfterClose) {
									fCallbackAfterClose(aChanges);
									return Promise.resolve(true);
								}
								if (bDialogConfirmedReset) {
									return that._discardChanges(oSelectorControl, bIsEndUser).then(function(bDiscarded) {
										if (!bDiscarded) {
											that._revertChanges(oSelectorControl, oSnapshotKeyUserOld, oSnapshotUserOld);
											return false;
										}
										return that._saveChanges(oSelectorControl, aChanges);
									}).then(function(bSaved) {
										if (!bSaved) {
											that._revertChanges(oSelectorControl, oSnapshotKeyUserOld, oSnapshotUserOld);
											return false;
										}
										return true;
									});
								}
								return that._saveChanges(oSelectorControl, aChanges).then(function(bSaved) {
									if (!bSaved) {
										that._revertChanges(oSelectorControl, oSnapshotKeyUserOld, oSnapshotUserOld);
										return false;
									}
									return true;
								});
							}
						}
					}
				},
				resetToInitialTableState: true,
				dialogAfterClose: function() {
					return resolve();
				}
			});

			// As variant we now set the changes of 'USER' layer
			oController.setPersonalizationData({
				selection: {
					selectionItems: oSelectionItems
				}
			});

			oController.openDialog({
				contentWidth: "25rem",
				contentHeight: "35rem",
				showReset: bShowReset,
				selection: {
					visible: true
				}
			});
		});
	};

	/**
	 * @private
	 */
	FlexHandler.prototype._discardChanges = function(oSelectorControl, bIsEndUser) {
		return Factory.getService("FlexConnector").discardChangesForControl(oSelectorControl, bIsEndUser).then(function() {
			return true;
		})['catch'](function(oError) {
			jQuery.sap.log.error("Changes could not be discarded in LRep: " + oError.status);
			return false;
		});
	};

	/**
	 *
	 * @param {sap.ui.comp.navpopover.NavigationContainer} oSelectorControl
	 * @param {object[]} aChanges - Format: {key: {string}, visible: {boolean}}
	 * @private
	 */
	FlexHandler.prototype._saveChanges = function(oSelectorControl, aChanges) {
		var aMAddedLinks = aChanges.filter(function(oMLink) {
			return oMLink.visible === true;
		});
		var aMRemovedLinks = aChanges.filter(function(oMLink) {
			return oMLink.visible === false;
		});

		return Factory.getService("FlexConnector").createAndSaveChangesForControl(aMAddedLinks, aMRemovedLinks, oSelectorControl).then(function() {
			return true;
		})['catch'](function(oError) {
			jQuery.sap.log.error("Changes could not be saved in LRep: " + oError.status);
			return false;
		});
	};

	/**
	 * @private
	 */
	FlexHandler.prototype._revertChanges = function(oSelectorControl, oSnapshotOfLayersWithoutUser, oSnapshotOfUserLayer) {
		this.setSnapshotOfLayersWithoutUser(oSnapshotOfLayersWithoutUser);
		this.setSnapshotOfUserLayer(oSnapshotOfUserLayer);
		oSelectorControl._syncAvailableActions();
	};

	/**
	 * Updates only the existing items of <code>oSnapshotBase</code> from <code>oSnapshotDelta</code>.
	 *
	 * @param {object} oSnapshotBase Object of format:
	 *
	 * <pre>
	 * {
	 * 	key, text, visible, href, target, description
	 * }
	 * </pre>
	 *
	 * @param {object} oSnapshotDelta Object of format:
	 *
	 * <pre>
	 * {
	 * 	key, text, visible, href, target, description
	 * }
	 * </pre>
	 *
	 * @private
	 */
	FlexHandler._getUnion = function(oSnapshotBase, oSnapshotDelta) {
		var oSnapshotBaseCopy = jQuery.extend(true, {}, oSnapshotBase);
		if (oSnapshotDelta) {
			for ( var sKey in oSnapshotBaseCopy) {
				if (oSnapshotDelta[sKey] && oSnapshotDelta[sKey].visible !== undefined) {
					oSnapshotBaseCopy[sKey].visible = oSnapshotDelta[sKey].visible;
				}
			}
		}
		return oSnapshotBaseCopy;
	};

	/**
	 * Similar to <code>_getUnion</code> method where equal items are not taken into account.
	 *
	 * @param {object} oSnapshotBase Object of format:
	 *
	 * <pre>
	 * {
	 * 	key, text, visible, href, target, description
	 * }
	 * </pre>
	 *
	 * @param {object} oSnapshotDelta Object of format:
	 *
	 * <pre>
	 * {
	 * 	key, text, visible, href, target, description
	 * }
	 * </pre>
	 *
	 * @private
	 */
	FlexHandler._getUnionCondensed = function(oSnapshotBase, oSnapshotDelta) {
		var oSnapshotBaseCondensed = FlexHandler._condense(oSnapshotBase, oSnapshotDelta);
		var oSnapshotDeltaCondensed = FlexHandler._condense(oSnapshotDelta, oSnapshotBase);
		return FlexHandler._getUnion(oSnapshotBaseCondensed, oSnapshotDeltaCondensed);
	};

	/**
	 * The result does not contain equal items.
	 *
	 * @private
	 */
	FlexHandler._condense = function(oSnapshotBase, oSnapshotDelta) {
		var oSnapshotBaseCondensed = {};
		for ( var sKey in oSnapshotBase) {
			if (!PersonalizationUtil.semanticEqual(oSnapshotBase[sKey], oSnapshotDelta[sKey])) {
				oSnapshotBaseCondensed[sKey] = oSnapshotBase[sKey];
			}
		}
		return oSnapshotBaseCondensed;
	};

	/**
	 * @private
	 */
	FlexHandler._convertSnapshotToChangeFormat = function(oSnapshot) {
		var aMLinks = FlexHandler._convertSnapshotToObjectArray(oSnapshot);
		return aMLinks.map(function(oMLink) {
			return {
				key: oMLink.key,
				visible: oMLink.visible
			};
		});
	};

	/**
	 * @private
	 */
	FlexHandler._convertSnapshotToSelectionItems = function(oSnapshot) {
		return FlexHandler._convertSnapshotToObjectArray(oSnapshot).map(function(oMLink) {
			return {
				columnKey: oMLink.key,
				visible: oMLink.visible
			};
		});
	};

	/**
	 * @private
	 */
	FlexHandler._convertSnapshotToObjectArray = function(oSnapshot) {
		return Object.keys(oSnapshot).map(function(sKey) {
			return oSnapshot[sKey];
		});
	};

	/**
	 * @private
	 */
	FlexHandler.convertArrayToSnapshot = function(sKey, aItems) {
		var oSnapshot = {};
		aItems.forEach(function(oItem) {
			if (oItem[sKey] === undefined) {
				return;
			}
			oSnapshot[oItem[sKey]] = oItem;
		});
		return oSnapshot;
	};

	/* eslint-enable strict */
	return FlexHandler;
},
/* bExport= */true);

}; // end of sap/ui/comp/navpopover/FlexHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.NavigationContainer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.NavigationContainer.
jQuery.sap.declare('sap.ui.comp.navpopover.NavigationContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.Image'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBoxRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TitleLevel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleFormLayout'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/NavigationContainer",[
	'sap/m/Link', 'sap/ui/core/Control', 'sap/m/VBox', 'sap/m/HBox', 'sap/m/Button', 'sap/m/Title', 'sap/m/Image', 'sap/m/Text', 'sap/ui/layout/form/SimpleForm', 'sap/m/VBoxRenderer', './Factory', './LinkData', 'sap/ui/model/json/JSONModel', './Util', 'sap/ui/core/TitleLevel', 'sap/ui/layout/HorizontalLayout', 'sap/ui/layout/VerticalLayout', 'sap/ui/layout/form/SimpleFormLayout', 'sap/ui/comp/personalization/Util', './FlexHandler'
], function(Link, Control, VBox, HBox, Button, Title, Image, Text, SimpleForm, VBoxRenderer, Factory, LinkData, JSONModel, Util, CoreTitleLevel, HorizontalLayout, VerticalLayout, SimpleFormLayout, PersonalizationUtil, FlexHandler) {
	"use strict";

	/**
	 * Constructor for a new navpopover/NavigationContainer.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The NavigationContainer...
	 * @extends sap.m.VBox
	 * @constructor
	 * @private
	 * @since 1.44.0
	 * @alias sap.ui.comp.navpopover.NavigationContainer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var NavigationContainer = VBox.extend("sap.ui.comp.navpopover.NavigationContainer", /** @lends sap.ui.comp.navpopover.NavigationContainer.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Sets the description of the main navigation link. If <code>mainNavigation</code> also contains an href description, then
				 * <code>mainNavigationId</code> is displayed. If <code>mainNavigationId</code> is set to an empty string <code>''</code>,
				 * neither description nor subtitle are displayed.
				 */
				mainNavigationId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Determines the text of personalization link. If this property is set to some string, choosing the personalization link will trigger
				 * the <code>availableActionsPersonalizationPress</code> event. If this property is not set, the personalization link is not shown.
				 */
				availableActionsPersonalizationText: {
					type: "string",
					defaultValue: undefined
				},

				/**
				 * Determines whether the personalization link is shown inside the NavigationPopover control.
				 *
				 * @since 1.46.0
				 */
				enableAvailableActionsPersonalization: {
					type: "boolean",
					defaultValue: true
				}
			},
			aggregations: {

				/**
				 * A list of available actions shown as links.
				 */
				availableActions: {
					type: "sap.ui.comp.navpopover.LinkData",
					multiple: true,
					singularName: "availableAction"
				},

				/**
				 * The main navigation link. If <code>mainNavigationId</code> is not set then <code>text</code> of <code>mainNavigation</code>
				 * is displayed. Otherwise the <code>mainNavigationId</code> is displayed.
				 */
				mainNavigation: {
					type: "sap.ui.comp.navpopover.LinkData",
					multiple: false
				},

				/**
				 * Handler for communication with layered repository (LRep).
				 *
				 * @since 1.46.0
				 */
				flexHandler: {
					type: "sap.ui.comp.navpopover.FlexHandler",
					visibility: "hidden",
					multiple: false

				}
			},
			associations: {

				/**
				 * In addition to main navigation link and available links some additional content can be displayed in the popover.
				 */
				extraContent: {
					type: "sap.ui.core.Control",
					multiple: false
				},
				/**
				 * The parent component. TODO: to be removed. Also method _convertToExternal() should be removed. The converting of links to external
				 * format should be done in NavigationPopoverHandler.
				 */
				component: {
					type: "sap.ui.core.Element",
					multiple: false
				}
			},
			events: {

				/**
				 * This event is fired when a link is chosen.
				 */
				navigate: {},

				/**
				 * This event is fired when personalization of <code>availableActions</code> is chosen.
				 */
				availableActionsPersonalizationPress: {}
			}
		},
		renderer: VBoxRenderer.render
	});

	NavigationContainer.prototype.init = function() {
		VBox.prototype.init.call(this);

		var oModel = new JSONModel({
			mainNavigationLink: {
				title: undefined,
				subtitle: undefined,
				href: undefined,
				target: undefined
			},
			availableActions: [],
			availableActionsPressMap: {},
			availableActionsPersonalizationText: undefined,
			extraContent: undefined
		});
		oModel.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);
		oModel.setSizeLimit(1000);
		this.setModel(oModel, "$sapuicompNavigationContainer");

		this.setAggregation("flexHandler", new FlexHandler());

		this._createContent();
	};

	// ----------------------- Public Methods -------------------------

	NavigationContainer.prototype.openSelectionDialog = function(bForbidNavigation, bShowReset, fCallbackAfterClose, bIsEndUser) {
		var that = this;
		return this._getFlexHandler().openSelectionDialog(this, bForbidNavigation, bShowReset, fCallbackAfterClose, bIsEndUser).then(function() {
			that._updateAvailableActionsPersonalizationText();
		});
	};

	/**
	 * Returns link for direct navigation if the NavigationPopover has only <code>mainNavigation</code> or one <code>availableAction</code> and no
	 * <code>extraContent</code>.
	 *
	 * @returns {sap.m.Link | null}
	 * @private
	 */
	NavigationContainer.prototype.getDirectLink = function() {
		var oModel = this.getModel("$sapuicompNavigationContainer");

		// Extra content should be shown always, no direct navigation possible
		if (oModel.getProperty('/extraContent')) {
			return null;
		}

		// If only main navigation link exists, direct navigation is possible
		if (oModel.getProperty('/mainNavigationLink/href') && !oModel.getProperty('/availableActions').length) {
			return this._oHeaderArea.getItems()[0];
		}

		// If only one availabel action exists (independent whether it is visible or not), direct navigation is possible
		if (oModel.getProperty('/availableActions').length === 1 && !oModel.getProperty('/mainNavigationLink/href')) {
			return this._oActionArea.getItems()[0].getItems()[0];
		}
		return null;
	};

	/**
	 * @private
	 */
	NavigationContainer.prototype.hasContent = function() {
		var oModel = this.getModel("$sapuicompNavigationContainer");
		return !!oModel.getProperty("/mainNavigationLink/href") || !!oModel.getProperty("/availableActions").length || !!oModel.getProperty('/extraContent');
	};

	// ----------------------- Overwrite Property Methods --------------------------

	NavigationContainer.prototype.setExtraContent = function(oControl) {
		var oModel = this.getModel("$sapuicompNavigationContainer");
		if (oModel.getProperty("/extraContent")) {
			this.removeItem(1);
		}
		// Note: 'extraContent' is an association of an control which is created by application in 'navigationTargetsObtained' event. Now we have to
		// add this control to the popover content aggregation. Doing so the NavigationContainer is responsible for life cycle of this control which
		// will be destroyed together with NavigationContainer.
		if (typeof oControl === "string") {
			oControl = sap.ui.getCore().byId(oControl);
		}

		this.insertItem(oControl, 1);

		this.setAssociation("extraContent", oControl);
		oModel.setProperty("/extraContent", oControl);
		return this;
	};

	NavigationContainer.prototype.setMainNavigationId = function(sMainNavigationId) {
		this.setProperty("mainNavigationId", sMainNavigationId, true);
		var oModel = this.getModel("$sapuicompNavigationContainer");
		if (typeof sMainNavigationId === "string") {
			oModel.setProperty("/mainNavigationLink/title", sMainNavigationId);
		}
		return this;
	};

	NavigationContainer.prototype.setMainNavigation = function(oLinkData) {
		this.setAggregation("mainNavigation", oLinkData, true);
		if (!oLinkData) {
			return this;
		}
		var oModel = this.getModel("$sapuicompNavigationContainer");
		if (oLinkData.getHref()) {
			oModel.setProperty("/mainNavigationLink/href", this._convertToExternal(oLinkData.getHref()));
			oModel.setProperty("/mainNavigationLink/target", oLinkData.getTarget());
			this._oHeaderArea.removeStyleClass("navpopoversmallheader");
		} else {
			// oModel.setProperty("/mainNavigationLink/href", null);
			// oModel.setProperty("/mainNavigationLink/target", null);
			this._oHeaderArea.addStyleClass("navpopoversmallheader");
		}
		// Priority for 'title':
		// 1. 'mainNavigationId' 2. oLinkData.getText()
		// Note: Empty string '' have to lead that both title and subtitle will not be displayed. So if title is equal to '' then do not take over the
		// text of link.
		if (!oModel.getProperty("/mainNavigationLink/title") && oModel.getProperty("/mainNavigationLink/title") !== '') {
			oModel.setProperty("/mainNavigationLink/title", oLinkData.getText());
		}
		oModel.setProperty("/mainNavigationLink/subtitle", oLinkData.getDescription());
		return this;
	};

	NavigationContainer.prototype.setAvailableActionsPersonalizationText = function(sAvailableActionsPersonalizationText) {
		this.setProperty("availableActionsPersonalizationText", sAvailableActionsPersonalizationText, true);
		var oModel = this.getModel("$sapuicompNavigationContainer");
		oModel.setProperty("/availableActionsPersonalizationText", sAvailableActionsPersonalizationText);
		return this;
	};

	NavigationContainer.prototype.setEnableAvailableActionsPersonalization = function(bEnableAvailableActionsPersonalization) {
		this.setProperty("enableAvailableActionsPersonalization", bEnableAvailableActionsPersonalization, true);
		this._updateAvailableActionsPersonalizationText();
		return this;
	};

	NavigationContainer.prototype.addAvailableAction = function(oLinkData) {
		this.addAggregation("availableActions", oLinkData);
		if (!oLinkData) {
			return this;
		}

		oLinkData.setHref(this._convertToExternal(oLinkData.getHref()));
		oLinkData.setPress(this._onLinkPress.bind(this));

		var oModel = this.getModel("$sapuicompNavigationContainer");
		var iIndex = oModel.getProperty("/availableActions").length;
		oModel.getData().availableActions.splice(iIndex, 0, oLinkData.getJson());
		// TODO ändern auf oModel.setProperty("/availableActions", sAvailableActions;
		oModel.getData().availableActionsPressMap[oLinkData.getText() + "---" + oLinkData.getHref()] = this._onLinkPress.bind(this);
		oModel.refresh(true);
		return this;
	};

	NavigationContainer.prototype.insertAvailableAction = function(oLinkData, iIndex) {
		this.insertAggregation("availableActions", oLinkData, iIndex);
		if (!oLinkData) {
			return this;
		}

		oLinkData.setHref(this._convertToExternal(oLinkData.getHref()));
		oLinkData.setPress(this._onLinkPress.bind(this));

		var oModel = this.getModel("$sapuicompNavigationContainer");
		oModel.getData().availableActions.splice(iIndex, 0, oLinkData.getJson());
		// TODO ändern auf oModel.setProperty("/availableActions", sAvailableActions;
		oModel.getData().availableActionsPressMap[oLinkData.getText() + "---" + oLinkData.getHref()] = this._onLinkPress.bind(this);
		oModel.refresh(true);
		return this;
	};

	NavigationContainer.prototype.removeAvailableAction = function(oLinkData) {
		var iIndex = this.indexOfAvailableAction(oLinkData);
		if (iIndex > -1) {
			// Remove item data from model
			var oModel = this.getModel("$sapuicompNavigationContainer");
			oModel.getData().availableActions.splice(iIndex, 1);
			oModel.refresh(true);
		}
		oLinkData = this.removeAggregation("availableActions", oLinkData);
		return oLinkData;
	};

	NavigationContainer.prototype.removeAllAvailableActions = function() {
		var aAvailableActions = this.removeAllAggregation("availableActions");
		// Remove items data from model
		var oModel = this.getModel("$sapuicompNavigationContainer");
		oModel.setProperty("/availableActions", []);
		oModel.refresh(true);
		return aAvailableActions;
	};

	NavigationContainer.prototype.exit = function(oControl) {
		// destroy model and its data
		if (this.getModel("$sapuicompNavigationContainer")) {
			this.getModel("$sapuicompNavigationContainer").destroy();
		}
	};

	NavigationContainer.prototype.onAfterRenderingActionForm = function() {
		var oModel = this.getModel("$sapuicompNavigationContainer");
		var $ContentContainer = oModel.getProperty("/extraContent") ? oModel.getProperty("/extraContent").$()[0] : undefined;

		if ($ContentContainer && $ContentContainer.scrollHeight > $ContentContainer.clientHeight) {
			// Change the default behavior for the case that all three sections can not fit the height of phone (e.g. the additionalContentSection is
			// larger then the spared place
			this.setFitContainer(false).setJustifyContent(sap.m.FlexJustifyContent.Start);
		}
	};

	// -------------------------- Private Methods ------------------------------------

	/**
	 * @private
	 */
	NavigationContainer.prototype._createContent = function() {
		var that = this;

		this.addStyleClass("navigationPopover");

		var oTitle = new Link({
			href: {
				path: '/mainNavigationLink/href'
			},
			text: {
				path: '/mainNavigationLink/title'
			},
			target: {
				path: '/mainNavigationLink/target'
			},
			visible: {
				path: '/mainNavigationLink/title',
				formatter: function(oTitle_) {
					return !!oTitle_;
				}
			},
			enabled: {
				path: '/mainNavigationLink/href',
				formatter: function(oValue) {
					return !!oValue;
				}
			},
			press: this._onLinkPress.bind(this)
		});
		oTitle.addStyleClass("navigationPopoverTitle");

		var oSubTitle = new Text({
			text: {
				path: '/mainNavigationLink/subtitle'
			},
			visible: {
				path: '/mainNavigationLink/subtitle',
				formatter: function(oValue) {
					return !!oValue;
				}
			}
		});

		this._oHeaderArea = new VBox({
			items: [
				oTitle, oSubTitle
			],
			visible: {
				path: '/mainNavigationLink/title',
				formatter: function(oTitle_) {
					return !!oTitle_;
				}
			}
		});
		this._oHeaderArea.addStyleClass("navigationPopoverTitleH1");
		this._oHeaderArea.addStyleClass("navigationPopoverHeader");
		this._oHeaderArea.setModel(this.getModel("$sapuicompNavigationContainer"));

		this._oActionArea = new VBox({
			visible: {
				parts: [
					{
						path: '/availableActions'
					}, {
						path: '/availableActionsPersonalizationText'
					}
				],
				formatter: function(aMAvailableActions, sAvailableActionsPersonalizationText) {
					var aMVisibleAvailableActions = aMAvailableActions.filter(function(oMAvailableAction) {
						return oMAvailableAction.visible === true;
					});
					return aMVisibleAvailableActions.length > 0 || !!sAvailableActionsPersonalizationText;
				}
			},
			items: [
				new VBox({
					items: {
						path: '/availableActions',
						templateShareable: false,
						template: new Link({
							text: "{text}",
							href: "{href}",
							target: "{target}",
							press: this._onLinkPress.bind(this),
							visible: "{visible}"
						})
					}
				})
			]
		});
		this._oActionArea.addEventDelegate({
			onAfterRendering: this.onAfterRenderingActionForm.bind(this)
		});
		this._oActionArea.addStyleClass("navigationPopoverAvailableLinks");
		this._oActionArea.setModel(this.getModel("$sapuicompNavigationContainer"));

		this._oPersonalizationButton = new HBox({
			justifyContent: "End",
			items: new Button({
				type: sap.m.ButtonType.Transparent,
				text: {
					path: '/availableActionsPersonalizationText'
				},
				visible: {
					parts: [
						{
							path: '/availableActions'
						}, {
							path: '/availableActionsPersonalizationText'
						}
					],
					formatter: function(aMAvailableActions, sAvailableActionsPersonalizationText) {
						return aMAvailableActions.length > 0 && !!sAvailableActionsPersonalizationText;
					}
				},
				press: function() {
					that.fireAvailableActionsPersonalizationPress();
				}
			})
		});
		this._oPersonalizationButton.setModel(this.getModel("$sapuicompNavigationContainer"));
		this._oPersonalizationButton.addStyleClass("navigationPopoverPersonalizationButton");

		var oSeparator = new VBox({
			visible: {
				parts: [
					{
						path: '/availableActions'
					}, {
						path: '/availableActionsPersonalizationText'
					}
				],
				formatter: function(aMAvailableActions, sAvailableActionsPersonalizationText) {
					var aMVisibleAvailableActions = aMAvailableActions.filter(function(oMAvailableAction) {
						return oMAvailableAction.visible === true;
					});
					return aMVisibleAvailableActions.length > 0 || !!sAvailableActionsPersonalizationText;
				}
			}
		});
		oSeparator.setModel(this.getModel("$sapuicompNavigationContainer"));
		oSeparator.addStyleClass("navigationPopoverSeparator");

		// Default behavior for the case that all three sections can fit the height of phone (e.g. only mainNavigationSection and
		// relatedAppsSection w/o additionalContentSection or mainNavigationSection, relatedAppsSection and small additionalContentSection)
		this.setFitContainer(true);
		this.setJustifyContent(sap.m.FlexJustifyContent.Start);
		this.addItem(this._oHeaderArea).addItem(oSeparator).addItem(this._oActionArea).addItem(this._oPersonalizationButton);
	};

	/**
	 * EventHandler for all link press on this popover
	 *
	 * @param {object} oEvent - the event parameters
	 * @private
	 */
	NavigationContainer.prototype._onLinkPress = function(oEvent) {
		this.fireNavigate({
			text: oEvent.getSource().getText(),
			href: oEvent.getSource().getHref()
		});
	};

	/**
	 * @private
	 */
	NavigationContainer.prototype._convertToExternal = function(sHref) {
		var oXApplNavigation = Factory.getService("CrossApplicationNavigation");
		if (!oXApplNavigation) {
			return sHref;
		}
		return oXApplNavigation.hrefForExternal({
			target: {
				shellHash: sHref
			}
		}, this._getComponent());
	};

	/**
	 * Returns the component object.
	 *
	 * @returns {object} the component
	 * @private
	 */
	NavigationContainer.prototype._getComponent = function() {
		var oComponent = this.getComponent();
		if (typeof oComponent === "string") {
			oComponent = sap.ui.getCore().getComponent(oComponent);
		}
		return oComponent;
	};

	/**
	 * @private
	 */
	NavigationContainer.prototype._getFlexHandler = function() {
		return this.getAggregation("flexHandler");
	};

	/**
	 * @private
	 */
	NavigationContainer.prototype._updateAvailableAction = function(oLinkData, sLayer) {
		this._getFlexHandler().updateAvailableActionOfSnapshot(oLinkData, sLayer);
		this._syncAvailableActions();
	};

	/**
	 * @private
	 */
	NavigationContainer.prototype._discardAvailableActions = function(sLayer) {
		this._getFlexHandler().discardAvailableActionsOfSnapshot(sLayer);
		this._syncAvailableActions();
	};

	/**
	 * @private
	 */
	NavigationContainer.prototype._syncAvailableActions = function() {
		var oSnapshot = this._getFlexHandler().determineSnapshotOfAvailableActions();
		var oModel = this.getModel("$sapuicompNavigationContainer");

		// Update the value of '/availableActions' model
		oModel.getProperty("/availableActions").forEach(function(oMAvailableAction, iIndex) {
			if (oSnapshot[oMAvailableAction.key] !== undefined) {
				oModel.setProperty("/availableActions/" + iIndex + "/visible", oSnapshot[oMAvailableAction.key].visible);
			}
		});
	};

	/**
	 * @private
	 */
	NavigationContainer.prototype._updateAvailableActionsPersonalizationText = function() {
		// Default text is "More Links"
		var sAvailableActionsPersonalizationText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_DEFINE_LINKS");
		// Set text only if the link personalization is enabled
		if (this.getEnableAvailableActionsPersonalization()) {
			this.setAvailableActionsPersonalizationText(sAvailableActionsPersonalizationText);
		}
	};

	return NavigationContainer;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/NavigationContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.NavigationPopoverHandler') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.NavigationPopoverHandler.
jQuery.sap.declare('sap.ui.comp.navpopover.NavigationPopoverHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/NavigationPopoverHandler",[
	'jquery.sap.global', 'sap/ui/comp/library', "sap/ui/base/ManagedObject", './SemanticObjectController', 'sap/ui/model/json/JSONModel', 'sap/ui/core/Control', './Factory', './NavigationPopover', './Util', 'sap/m/VBox', './LinkData', 'sap/m/MessageBox', 'sap/ui/comp/personalization/Controller', 'sap/ui/comp/personalization/Util', './FlexHandler', './NavigationContainer'
], function(jQuery, CompLibrary, ManagedObject, SemanticObjectController, JSONModel, Control, Factory, NavigationPopover, Util, VBox, LinkData, MessageBox, Controller, PersonalizationUtil, FlexHandler, NavigationContainer) {
	"use strict";

	/**
	 * Constructor for a new navpopover/NavigationPopoverHandler.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The NavigationPopoverHandler control determines navigation targets for a semantic object and shows them together with further information in a Popover.<br>
	 * <b>Note:</b> Navigation targets are determined using {@link sap.ushell.services.CrossApplicationNavigation CrossApplicationNavigation} of the unified shell service.
	 * @extends sap.ui.base.ManagedObject
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.NavigationPopoverHandler
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var NavigationPopoverHandler = ManagedObject.extend("sap.ui.comp.navpopover.NavigationPopoverHandler",
	/** @lends sap.ui.comp.navpopover.NavigationPopoverHandler.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Name of semantic object which is used to determine target navigations.
				 *
				 * @since 1.36.0
				 */
				semanticObject: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Names of additional semantic objects which are used to determine target navigations.
				 *
				 * @since 1.42.0
				 */
				additionalSemanticObjects: {
					type: "string[]",
					defaultValue: []
				},

				/**
				 * The semantic object controller controls events for several NavigationPopoverHandler controls. If the controller is not set
				 * manually, it tries to find a SemanticObjectController in its parent hierarchy.
				 *
				 * @since 1.36.0
				 */
				semanticObjectController: {
					type: "any",
					defaultValue: null
				},

				/**
				 * The metadata field name for this NavigationPopoverHandler control.
				 *
				 * @since 1.36.0
				 */
				fieldName: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Shown title of semantic object.
				 *
				 * @deprecated As of version 1.40.0 Title section with <code>semanticObjectLabel</code> has been removed due to new UI design
				 * @since 1.36.0
				 */
				semanticObjectLabel: {
					type: "string",
					defaultValue: null
				},

				/**
				 * If set to <code>false</code>, the NavigationPopoverHandler control will not replace its field name with the according
				 * <code>semanticObject</code> property during the calculation of the semantic attributes. This enables the usage of several
				 * NavigationPopoverHandler on the same semantic object. *
				 *
				 * @since 1.36.0
				 */
				mapFieldToSemanticObject: {
					type: "boolean",
					defaultValue: true
				},

				/**
				 * Internal map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
				 *
				 * @since 1.38.0
				 */
				semanticAttributes: {
					type: "object",
					visibility: "hidden",
					defaultValue: null
				},

				/**
				 * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
				 * annotation is defined, for example, <code>'to_Supplier'</code>. An empty string means that the related entity type is the
				 * current one.
				 *
				 * @since 1.40.0
				 */
				contactAnnotationPath: {
					type: "string",
					defaultValue: undefined
				},

				/**
				 * Determines whether the personalization link is shown inside the NavigationPopover control.
				 *
				 * @since 1.44.0
				 */
				enableAvailableActionsPersonalization: {
					type: "boolean",
					defaultValue: true
				}
			},
			associations: {
				/**
				 * The parent control.
				 *
				 * @since 1.36.0
				 */
				control: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {

				/**
				 * Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
				 * change the parameters used to retrieve the navigation targets. In case of NavigationPopoverHandler, the
				 * <code>beforePopoverOpens</code> is fired after the link has been clicked.
				 *
				 * @since 1.36.0
				 */
				beforePopoverOpens: {
					parameters: {
						/**
						 * The semantic object for which the navigation targets will be retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
						 *
						 * @deprecated Since 1.42.0. The parameter <code>semanticAttributes</code> is obsolete. Instead use the parameter
						 *             <code>semanticAttributesOfSemanticObjects</code>.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes calculated from
						 * the binding context. The semantic attributes will be used as parameters in order to retrieve the navigation targets.
						 *
						 * @since 1.42.0
						 */
						semanticAttributesOfSemanticObjects: {
							type: "object"
						},

						/**
						 * This callback function enables you to define a changed semantic attributes map. Signatures:
						 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
						 * <ul>
						 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes</li>
						 * <li>{string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs</li>
						 * </ul>
						 */
						setSemanticAttributes: {
							type: "function"
						},

						/**
						 * This callback function sets an application state key that is used over the cross-application navigation. Signatures:
						 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
						 * <ul>
						 * <li>{string} sAppStateKey</li>
						 * </ul>
						 */
						setAppStateKey: {
							type: "function"
						},

						/**
						 * The ID of the NavigationPopoverHandler.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
						 * Signatures: <code>open()</code> If the <code>beforePopoverOpens</code> has been registered, the <code>open</code>
						 * function has to be called manually in order to open the navigation popover.
						 */
						open: {
							type: "function"
						}
					}
				},

				/**
				 * After the navigation targets are retrieved, <code>navigationTargetsObtained</code> is fired and provides the possibility to
				 * change the targets.
				 *
				 * @since 1.36.0
				 */
				navigationTargetsObtained: {
					parameters: {
						/**
						 * The main navigation object.
						 */
						mainNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * Array of available navigation target objects.
						 */
						actions: {
							type: "sap.ui.comp.navpopover.LinkData[]"
						},

						/**
						 * The navigation object for the own application. This navigation option is by default not visible on the popover.
						 */
						ownNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * Array containing contact data.
						 */
						popoverForms: {
							type: "sap.ui.layout.form.SimpleForm[]"
						},

						/**
						 * The semantic object for which the navigation targets have been retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * The ID of the NavigationPopoverHandler.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
						 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
						 * <code>show()</code>
						 * <ul>
						 * <li><code>show(oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
						 * <ul>
						 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
						 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
						 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
						 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
						 * remain.</li>
						 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
						 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
						 * object still remains.</li>
						 * </ul>
						 * </li>
						 * <li><code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
						 * <ul>
						 * <li>{string | undefined} sMainNavigationId The visible description for the main navigation link. With <code>''</code>,
						 * both the description and subtitle will be removed. With <code>undefined</code>, the description is calculated using the
						 * binding context of a given source object (for example <code>SmartLink</code> control).</li>
						 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
						 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
						 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
						 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
						 * remain.</li>
						 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
						 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
						 * object still remains.</li>
						 * </ul>
						 * </li>
						 * </ul>
						 */
						show: {
							type: "function"
						}
					}
				},

				/**
				 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
				 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
				 *
				 * @since 1.36.0
				 */
				innerNavigate: {
					parameters: {
						/**
						 * The UI text shown in the clicked link.
						 */
						text: {
							type: "string"
						},

						/**
						 * The navigation target of the clicked link.
						 */
						href: {
							type: "string"
						},

						/**
						 * The semantic object used to retrieve this target.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes used to retrieve this target.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * The ID of the NavigationPopoverHandler.
						 */
						originalId: {
							type: "string"
						}
					}
				}
			}
		}
	});

	NavigationPopoverHandler.prototype.init = function() {
		this._oPopover = null;

		var oModel = new JSONModel({
			semanticObject: undefined,
			// 'semanticAttributes' of property 'semanticObject' which is default one
			semanticAttributes: undefined,
			appStateKey: undefined,
			mainNavigationId: undefined,
			contact: {
				exists: false,
				bindingPath: undefined,
				expand: undefined,
				select: undefined
			},
			navigationTarget: {
				mainNavigation: undefined,
				enableAvailableActionsPersonalization: undefined,
				availableActionsPersonalizationText: undefined,
				extraContent: undefined
			},
			// Store internally the available links returned from FLP and modified by application
			availableActions: []
		});
		oModel.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);
		oModel.setSizeLimit(1000);
		this.setModel(oModel, "$sapuicompNavigationPopoverHandler");
	};

	NavigationPopoverHandler.prototype.applySettings = function(mSettings) {
		ManagedObject.prototype.applySettings.apply(this, arguments);
		// Initialize 'semanticAttributes' after all properties in constructor have been set
		this.setSemanticAttributes(this._calculateSemanticAttributes(null));
	};

	// ----------------------- Public Methods --------------------------

	/**
	 * Opens the <code>Popover</code> with target navigations in an asynchronous manner.
	 * <b>Note:</b>If no content is to show, the <code>Popover</code> will not open.
	 *
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	NavigationPopoverHandler.prototype.openPopover = function(oDomRef) {
		var that = this;
		return this._getPopover().then(function(oPopover) {

			// Popover without content should not be opened.
			if (!oPopover.hasContent()) {
				that._showErrorDialog(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_DETAILS_NAV_NOT_POSSIBLE"), sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("POPOVER_MSG_NAV_NOT_POSSIBLE"), oPopover);
				// Destroy popover with StableID.
				that._destroyPopover();
				return;
			}

			// Popover with direct link should not be opened.
			var oLink = oPopover.getDirectLink();
			if (oLink) {
				that._fireInnerNavigate({
					text: oLink.getText(),
					href: oLink.getHref()
				});
				window.location.href = oLink.getHref();
				// Destroy popover with StableID.
				that._destroyPopover();
				return;
			}
			oPopover.show(oDomRef);
		});
	};

	/**
	 * Gets the current value assigned to the field with the NavigationPopoverHandler's semantic object name.
	 *
	 * @returns {object} The semantic object's value.
	 * @public
	 */
	NavigationPopoverHandler.prototype.getSemanticObjectValue = function() {
		var oSemanticAttributes = this.getSemanticAttributes();
		if (oSemanticAttributes) {
			return oSemanticAttributes[this.getSemanticObject()][this.getSemanticObject()];
		}
		return undefined;
	};

	/**
	 * Gets the stable ID, if <code>semanticObject</code> property and component are set.
	 *
	 * @returns {string | undefined} Stable ID
	 * @private
	 */
	NavigationPopoverHandler.prototype.getNavigationPopoverStableId = function() {
		var oAppComponent = this._getAppComponent();
		var sSemanticObjectDefault = this.getModel("$sapuicompNavigationPopoverHandler").getProperty("/semanticObject");
		if (!oAppComponent || !sSemanticObjectDefault) {
			return undefined;
		}
		var aSemanticObjects = [
			sSemanticObjectDefault
		].concat(this.getAdditionalSemanticObjects());
		Util.sortArrayAlphabetical(aSemanticObjects);
		var sSemanticObjects = aSemanticObjects.join("--");

		return oAppComponent.createId("sapuicompnavpopoverNavigationPopover---" + sSemanticObjects);
	};

	// ----------------------- Overwrite Methods --------------------------

	NavigationPopoverHandler.prototype.updateBindingContext = function() {
		Control.prototype.updateBindingContext.apply(this, arguments);

		// Update 'semanticAttributes' due to new 'semanticObject'
		this.setSemanticAttributes(this._calculateSemanticAttributes(null));

		this._destroyPopover();
	};

	NavigationPopoverHandler.prototype.setSemanticObject = function(sSemanticObject) {

		this._destroyPopover();

		this.setProperty("semanticObject", sSemanticObject);
		this.getModel("$sapuicompNavigationPopoverHandler").setProperty("/semanticObject", sSemanticObject);

		// Update 'semanticAttributes' due to new 'semanticObject'
		this.setSemanticAttributes(this._calculateSemanticAttributes(null));
		return this;
	};

	NavigationPopoverHandler.prototype.setSemanticAttributes = function(oSemanticAttributes) {
		this.setProperty("semanticAttributes", oSemanticAttributes);
		this.getModel("$sapuicompNavigationPopoverHandler").setProperty("/semanticAttributes", oSemanticAttributes);
		return this;
	};

	NavigationPopoverHandler.prototype.setEnableAvailableActionsPersonalization = function(bEnableAvailableActionsPersonalization) {
		this.setProperty("enableAvailableActionsPersonalization", bEnableAvailableActionsPersonalization);
		this.getModel("$sapuicompNavigationPopoverHandler").setProperty("/navigationTarget/enableAvailableActionsPersonalization", bEnableAvailableActionsPersonalization);
		return this;
	};

	NavigationPopoverHandler.prototype.setFieldName = function(sFieldName) {
		this.setProperty("fieldName", sFieldName);

		// Update 'semanticAttributes' due to new 'fieldName'
		this.setSemanticAttributes(this._calculateSemanticAttributes(null));

		return this;
	};

	NavigationPopoverHandler.prototype.setControl = function(oControl) {
		this.setAssociation("control", oControl);

		this.setModel(oControl.getModel());

		// TODO: SmartTable -> ControlProvider for each ObjectIdentifier there is only one NavigationPopoverHandler which gets set a new 'control'
		this._destroyPopover();

		this._updateSemanticObjectController();

		// Update 'semanticAttributes' due to new 'control'
		this.setSemanticAttributes(this._calculateSemanticAttributes(null));
		return this;
	};

	NavigationPopoverHandler.prototype.setMapFieldToSemanticObject = function(bMapFieldToSemanticObject) {
		this.setProperty("mapFieldToSemanticObject", bMapFieldToSemanticObject);

		// Update 'semanticAttributes' due to new 'mapFieldToSemanticObject'
		this.setSemanticAttributes(this._calculateSemanticAttributes(null));
		return this;
	};

	NavigationPopoverHandler.prototype.setSemanticObjectController = function(oSemanticObjectController) {
		this._updateSemanticObjectController(oSemanticObjectController);

		// Update 'semanticAttributes' due to new 'semanticObjectController'
		this.setSemanticAttributes(this._calculateSemanticAttributes(null));
		return this;
	};

	NavigationPopoverHandler.prototype.exit = function() {
		this._destroyPopover();

		// Disconnect from SemanticObjectController
		if (this.getSemanticObjectController()) {
			this.getSemanticObjectController().unregisterControl(this);
		}

		// destroy model and its data
		if (this.getModel("$sapuicompNavigationPopoverHandler")) {
			this.getModel("$sapuicompNavigationPopoverHandler").destroy();
		}
	};

	// -------------------------- Private Methods ------------------------------------

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._initModel = function() {
		var that = this;

		var oSemanticAttributes;
		var sSemanticObjectDefault = this.getSemanticObject();
		var aAdditionalSemanticObjects = this.getAdditionalSemanticObjects();

		// Priority rules: 1. own contact annotation path 2. contact annotation path of SemanticObjectController
		var sContactAssociationPath = this.getContactAnnotationPath();
		if (sContactAssociationPath === undefined && this.getSemanticObjectController() && this.getSemanticObjectController().getContactAnnotationPaths() && this.getSemanticObjectController().getContactAnnotationPaths()[this.getFieldName()] !== undefined) {
			sContactAssociationPath = this.getSemanticObjectController().getContactAnnotationPaths()[this.getFieldName()];
		}
		var oControl = sap.ui.getCore().byId(this.getControl());
		var sBindingPath = oControl && oControl.getBindingContext() ? oControl.getBindingContext().getPath() : null;
		var oODataModel = this.getModel();
		var oComponent = this._getComponent();

		var sId = oControl && oControl.getId();
		var sMainNavigationId, sSemanticObjectValue;
		var oContactForm;

		// 1. Read metadata in order to calculate the semanticAttributes
		return Util.retrieveSemanticObjectMapping(this.getFieldName(), oODataModel, sBindingPath).then(function(oSemanticObjects) {

			// Determine 'semanticAttributes' as it is the latest point in time before passing it to the applications
			that.setSemanticAttributes(that._calculateSemanticAttributes(oSemanticObjects));
			oSemanticAttributes = that.getSemanticAttributes();

			// 2. Fire 'beforePopoverOpens' event. Here 'semanticAttributes' can be changed and 'appStateKey' can be set by application.
			return that._fireBeforePopoverOpens(oSemanticAttributes, sSemanticObjectDefault, sId);
		}).then(function(oResultFromOpen) {

			oSemanticAttributes = oResultFromOpen.semanticAttributes;

			// Set the potentially modified semanticAttributes
			that.setSemanticAttributes(oSemanticAttributes);

			// Set depending on semanticAttributes 'sSemanticObjectValue'
			sSemanticObjectValue = that.getSemanticObjectValue();

			// Set depending on semanticAttributes 'sMainNavigationId'.
			// Note: if binding context does not contain attribute equals to semantic object (either because the mapping didn't taken place or
			// because no attribute equals to semantic object exists) we take the value of the field name. We do so in order to avoid standard text
			// 'Display Fact Sheet' and show instead of it the text of SmartLink which user can see.
			sMainNavigationId = (oControl && oControl._getTextOfDom && oControl._getTextOfDom()) || that.getSemanticObjectValue();

			that.getModel("$sapuicompNavigationPopoverHandler").setProperty("/appStateKey", oResultFromOpen.appStateKey);

			// 3. Create Form reading OData Metadata with BindingContext and get navigationTargets from UShell service
			return that._prepareFormsAndTargets(sSemanticObjectDefault, aAdditionalSemanticObjects, oResultFromOpen.appStateKey, oComponent, oSemanticAttributes, sMainNavigationId, oODataModel, sBindingPath, sContactAssociationPath, sSemanticObjectValue);
		}).then(function(aResultFormsAndTargets) {
			oContactForm = aResultFormsAndTargets[0];

			// 4. Fire 'navigationTargetsObtained' event. Here 'Form' and 'navigationTargets' can be changed by application.
			return that._fireNavigationTargetsObtained(sMainNavigationId, sSemanticObjectDefault, oSemanticAttributes, sId, oContactForm.forms, aResultFormsAndTargets[1]);
		}).then(function(oResultFromNavigationObtained) {

			var oModel = that.getModel("$sapuicompNavigationPopoverHandler");
			oModel.setProperty("/mainNavigationId", oResultFromNavigationObtained.mainNavigationId);
			oModel.setProperty("/navigationTarget/mainNavigation", oResultFromNavigationObtained.mainNavigation);
			oModel.setProperty("/navigationTarget/extraContent", oResultFromNavigationObtained.extraContent);
			oModel.setProperty("/contact/exists", !!oContactForm.forms.length);
			oModel.setProperty("/contact/bindingPath", oContactForm.bindingPath);
			oModel.setProperty("/contact/expand", oContactForm.expand);
			oModel.setProperty("/contact/select", oContactForm.select);
			oModel.setProperty("/availableActions", that._updateVisibilityOfAvailableActions(LinkData.convert2Json(oResultFromNavigationObtained.availableActions)));
			oModel.setProperty("/navigationTarget/enableAvailableActionsPersonalization", that._isAvailableActionsPersonalizationTextEnabled(oModel.getProperty("/availableActions")));
		});
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._initPopover = function() {
		var that = this;

		return this._initModel().then(function() {
			var oModel = that.getModel("$sapuicompNavigationPopoverHandler");

			var oPopover = that._createPopover();

			// JSONModel
			oPopover.setModel(oModel, "$sapuicompNavigationPopoverHandler");

			var oControl = sap.ui.getCore().byId(that.getControl());
			if (oControl) {
				oControl.addDependent(oPopover);
			}

			// Update the "Link Personalization" Text after "addDependent" is called and all changes are applied to NavigationContainer
			oPopover.getContent()[0]._updateAvailableActionsPersonalizationText();

			that._requestBindingContextForContact(oPopover, oModel.getProperty("/contact/exists"));

			return oPopover;
		});
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._initNavigationContainer = function() {
		var that = this;

		return this._initModel().then(function() {
			var oModel = that.getModel("$sapuicompNavigationPopoverHandler");

			var oNavigationContainer = that._createNavigationContainer();

			// JSONModel
			oNavigationContainer.setModel(oModel, "$sapuicompNavigationPopoverHandler");

			var oControl = sap.ui.getCore().byId(that.getControl());
			if (oControl) {
				oControl.addDependent(oNavigationContainer);
			}

			// Update the "Link Personalization" Text after "addDependent" is called and all changes are applied to NavigationContainer
			oNavigationContainer._updateAvailableActionsPersonalizationText();

			that._requestBindingContextForContact(oNavigationContainer, oModel.getProperty("/contact/exists"));

			return oNavigationContainer;
		});
	};

	NavigationPopoverHandler.prototype._requestBindingContextForContact = function(oNavigationControl, bIsContactExists) {
		// Read data only if needed
		if (!bIsContactExists) {
			return;
		}
		var oModel = this.getModel("$sapuicompNavigationPopoverHandler");
		var oControl = sap.ui.getCore().byId(this.getControl());
		var sBindingPath = oControl && oControl.getBindingContext() ? oControl.getBindingContext().getPath() : null;

		if (oModel.getProperty("/contact/bindingPath")) {
			oNavigationControl.bindContext({
				path: oModel.getProperty("/contact/bindingPath"),
				events: {
					change: function() {
						oNavigationControl.invalidate();
					}
				}
			});
		} else if (sBindingPath) {
			oNavigationControl.bindContext({
				path: sBindingPath,
				parameters: {
					expand: oModel.getProperty("/contact/expand"),
					select: oModel.getProperty("/contact/select")
				},
				events: {
					change: function() {
						oNavigationControl.invalidate();
					}
				}
			});
		}
	};

	/**
	 * The NavigationPopoverHandler is responsible for destroying of NavigationPopover instance. This is done whenever the NavigationPopover is
	 * closed.
	 *
	 * @private
	 */
	NavigationPopoverHandler.prototype._getPopover = function() {
		if (!this._oPopover) {
			return this._initPopover();
		} else {
			return Promise.resolve(this._oPopover);
		}
	};

	/**
	 * The NavigationPopoverHandler can not be responsible for destroying of NavigationContainer instance. This should be done by requester.
	 *
	 * @private
	 */
	NavigationPopoverHandler.prototype._getNavigationContainer = function() {
		return this._initNavigationContainer().then(function(oNavigationContainer) {
			return oNavigationContainer;
		});
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._destroyPopover = function() {
		if (this._oPopover) {
			this._oPopover.destroy();
			this._oPopover = null;
		}
	};

	/**
	 * Creates the <code>NavigationPopover</code>.
	 *
	 * @returns {sap.ui.comp.navpopover.NavigationPopover}
	 * @private
	 */
	NavigationPopoverHandler.prototype._createPopover = function() {
		if (this._oPopover) {
			return this._oPopover;
		}
		var oNavigationContainer = this._createNavigationContainer();

		oNavigationContainer.attachAvailableActionsPersonalizationPress(this._onAvailableActionsPersonalizationPress, this);

		// this._oTimestampStart = Date.now();

		this._oPopover = new NavigationPopover({
			customData: new sap.ui.core.CustomData({
				key: "useExternalContent"
			}),
			content: [
				oNavigationContainer
			],
			semanticObjectName: "{$sapuicompNavigationPopoverHandler>/semanticObject}", // DEPRECATED
			semanticAttributes: "{$sapuicompNavigationPopoverHandler>/semanticAttributes}", // DEPRECATED
			appStateKey: "{$sapuicompNavigationPopoverHandler>/appStateKey}", // DEPRECATED
			source: this.getControl(),
			// targetsObtained: jQuery.proxy(this._onTargetsObtained, this), // DEPRECATED
			afterClose: this._destroyPopover.bind(this)
		});

		return this._oPopover;
	};

	/**
	 * Creates the NavigationContainer. Note that registration for 'availableActionsPersonalizationPress' event should be done by the caller.
	 *
	 * @private
	 */
	NavigationPopoverHandler.prototype._createNavigationContainer = function() {

		if (!!sap.ui.getCore().byId(this.getNavigationPopoverStableId())) {
			jQuery.sap.log.error("Duplicate ID '" + this.getNavigationPopoverStableId() + "'. The instance of NavigationContainer should be destroyed first in order to avoid duplicate creation of NavigationContainer with stable ID.");
			throw "Duplicate ID";
		}

		var oModel = this.getModel("$sapuicompNavigationPopoverHandler");

		var oNavigationContainer = new NavigationContainer(this.getNavigationPopoverStableId(), {
			mainNavigationId: "{$sapuicompNavigationPopoverHandler>/mainNavigationId}",
			mainNavigation: oModel.getProperty("/navigationTarget/mainNavigation"),
			availableActions: {
				path: '$sapuicompNavigationPopoverHandler>/availableActions',
				templateShareable: false,
				template: new LinkData({
					key: "{$sapuicompNavigationPopoverHandler>key}",
					href: "{$sapuicompNavigationPopoverHandler>href}",
					text: "{$sapuicompNavigationPopoverHandler>text}",
					target: "{$sapuicompNavigationPopoverHandler>target}",
					description: "{$sapuicompNavigationPopoverHandler>description}",
					visible: "{$sapuicompNavigationPopoverHandler>visible}"
				})
			},
			extraContent: oModel.getProperty("/navigationTarget/extraContent") ? oModel.getProperty("/navigationTarget/extraContent").getId() : undefined,
			component: this._getComponent(),
			enableAvailableActionsPersonalization: "{$sapuicompNavigationPopoverHandler>/navigationTarget/enableAvailableActionsPersonalization}",
			availableActionsPersonalizationText: "{$sapuicompNavigationPopoverHandler>/navigationTarget/availableActionsPersonalizationText}",
			navigate: this._onNavigate.bind(this)
		});
		oNavigationContainer._getFlexHandler().setInitialSnapshot(FlexHandler.convertArrayToSnapshot("key", oModel.getProperty("/availableActions")));

		return oNavigationContainer;
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._prepareFormsAndTargets = function(sSemanticObjectDefault, aAdditionalSemanticObjects, sAppStateKey, oComponent, oSemanticAttributes, sMainNavigationId, oODataModel, sBindingPath, sContactAssociationPath, sSemanticObjectValue) {
		var oPromiseForm = Util.retrieveContactAnnotationData(oODataModel, sBindingPath, sContactAssociationPath).then(function(oContactAnnotationData) {
			var oParsedJson = Util.parseContactAnnotation(oContactAnnotationData);
			return {
				bindingPath: oContactAnnotationData.entitySet ? "/" + oContactAnnotationData.entitySet + "('" + sSemanticObjectValue + "')" : undefined,
				expand: oParsedJson.expand,
				select: oParsedJson.select,
				forms: Util.createContactDetailForms(oParsedJson.groups)
			};
		});
		var oPromiseNavigationTargets = Util.retrieveNavigationTargets(sSemanticObjectDefault, aAdditionalSemanticObjects, sAppStateKey, oComponent, oSemanticAttributes, sMainNavigationId);
		return Promise.all([
			oPromiseForm, oPromiseNavigationTargets
		]);
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._fireBeforePopoverOpens = function(oSemanticAttributes, sSemanticObjectDefault, sId) {
		var that = this;
		return new Promise(function(resolve) {
			var oResult = {
				semanticAttributes: oSemanticAttributes,
				appStateKey: undefined
			};
			if (!that.hasListeners("beforePopoverOpens")) {
				return resolve(oResult);
			}

			that.fireBeforePopoverOpens({
				originalId: sId,
				semanticObject: sSemanticObjectDefault,
				semanticAttributes: oSemanticAttributes ? oSemanticAttributes[sSemanticObjectDefault] : oSemanticAttributes,
				semanticAttributesOfSemanticObjects: oSemanticAttributes,
				setSemanticAttributes: function(aSemanticAttributes, sSemanticObject) {
					sSemanticObject = sSemanticObject || sSemanticObjectDefault;
					oResult.semanticAttributes = oResult.semanticAttributes || {};
					oResult.semanticAttributes[sSemanticObject] = aSemanticAttributes;
				},
				setAppStateKey: function(sAppStateKey) {
					oResult.appStateKey = sAppStateKey;
				},
				open: function() {
					return resolve(oResult);
				}
			});
		});
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._fireNavigationTargetsObtained = function(sMainNavigationId, sSemanticObjectDefault, oSemanticAttributes, sId, aForms, oNavigationTargets) {
		var that = this;

		return new Promise(function(resolve) {
			var oResult = {
				mainNavigationId: sMainNavigationId,
				mainNavigation: oNavigationTargets.mainNavigation,
				availableActions: oNavigationTargets.availableActions,
				ownNavigation: oNavigationTargets.ownNavigation,
				extraContent: aForms.length ? new VBox({
					items: aForms
				}) : undefined
			};
			if (!that.hasListeners("navigationTargetsObtained")) {
				return resolve(oResult);
			}

			that.fireNavigationTargetsObtained({
				mainNavigation: oNavigationTargets.mainNavigation,
				actions: oNavigationTargets.availableActions,
				ownNavigation: oNavigationTargets.ownNavigation,
				popoverForms: aForms,
				semanticObject: sSemanticObjectDefault,
				semanticAttributes: oSemanticAttributes ? oSemanticAttributes[sSemanticObjectDefault] : oSemanticAttributes,
				originalId: sId,
				show: function(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent) {
					// Due to backward compatibility we have to support the use-case where only 3 parameters can be passed. The meaning for these
					// parameters is: [oMainNavigation, aAvailableActions, oAdditionalContent]
					if (arguments.length > 0 && !(typeof sMainNavigationId === "string" || oMainNavigation instanceof sap.ui.comp.navpopover.LinkData || jQuery.isArray(aAvailableActions)) && oAdditionalContent === undefined) {
						oAdditionalContent = aAvailableActions;
						aAvailableActions = oMainNavigation;
						oMainNavigation = sMainNavigationId;
						sMainNavigationId = undefined;
					}

					// Empty string '' is allowed
					if (sMainNavigationId !== undefined && sMainNavigationId !== null) {
						oResult.mainNavigationId = sMainNavigationId;
					}
					if (oMainNavigation !== undefined) {
						oResult.mainNavigation = oMainNavigation;
					}
					if (aAvailableActions) {
						aAvailableActions.forEach(function(oAvailableAction) {
							// If 'key' is not provided by application, this link should be always shown in NavigationPopover (due to personalization
							// reasons - 1. the link can not be stored as change and therefore this link will not appear in selection dialog. 2. The
							// user is not able to set this link as visible in case that there are a lot of links and only 'Define Links' is
							// provided).
							if (oAvailableAction.getKey() === undefined) {
								jQuery.sap.log.error("'key' attribute of 'availableAction' '" + oAvailableAction.getText() + "' is undefined. Links without 'key' can not be persisted.");
								jQuery.sap.log.warning("The 'visible' attribute of 'availableAction' '" + oAvailableAction.getText() + "' is set to 'true'");
								oAvailableAction.setVisible(true);
							}
						});
						oResult.availableActions = aAvailableActions;
					}

					if (oAdditionalContent) {
						oResult.extraContent = oAdditionalContent;
					}
					return resolve(oResult);
				}
			});
		});
	};

	/**
	 * Eventhandler for NavigationPopover's navigate event, exposes event
	 *
	 * @param {object} oEvent The event parameters
	 * @private
	 */
	NavigationPopoverHandler.prototype._onNavigate = function(oEvent) {
		var aParameters = oEvent.getParameters();

		this._fireInnerNavigate({
			text: aParameters.text,
			href: aParameters.href
		});
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._onAvailableActionsPersonalizationPress = function(oEvent) {
		var that = this;
		var oNavigationContainer = oEvent.getSource();
		this._oPopover.setModal(true);
		oNavigationContainer.openSelectionDialog(false, true, undefined, true).then(function() {
			// Note: in the meantime the _oPopover could be closed outside of NavigationPopoverHandler, so we have to check if the instance still exists
			if (that._oPopover) {
				that._oPopover.setModal(false);
			}
		});
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._fireInnerNavigate = function(aParameters) {
		var oControl = sap.ui.getCore().byId(this.getControl());
		var sSemanticObjectDefault = this.getSemanticObject();
		var oSemanticAttributes = this.getSemanticAttributes();

		this.fireInnerNavigate({
			text: aParameters.text,
			href: aParameters.href,
			originalId: oControl ? oControl.getId() : undefined,
			semanticObject: sSemanticObjectDefault,
			semanticAttributes: oSemanticAttributes ? oSemanticAttributes[sSemanticObjectDefault] : oSemanticAttributes
		});
	};

	/**
	 * Finds the parental component.
	 *
	 * @private
	 * @returns {sap.ui.core.Component | null} the found parental component or null
	 */
	NavigationPopoverHandler.prototype._getComponent = function() {
		var oControl = sap.ui.getCore().byId(this.getControl());
		if (!oControl) {
			return null;
		}
		var oParent = oControl.getParent();
		while (oParent) {
			if (oParent instanceof sap.ui.core.Component) {
				// special case for SmartTemplating to reach the real appComponent
				if (oParent && oParent.getAppComponent) {
					oParent = oParent.getAppComponent();
				}
				return oParent;
			}
			oParent = oParent.getParent();
		}
		return null;
	};

	NavigationPopoverHandler.prototype._getAppComponent = function() {
		return Factory.getService("FlexConnector").getAppComponentForControl(sap.ui.getCore().byId(this.getControl()));
	};

	/**
	 * Gets the current binding context and creates a copied map where all empty and unnecessary data is deleted from.
	 *
	 * @param {object || null} oSemanticObjects Format: {/semanticObjectName/: {{/localProperty/: string},...}}
	 * @returns{object}
	 * @private
	 */
	NavigationPopoverHandler.prototype._calculateSemanticAttributes = function(oSemanticObjects) {
		var oControl = sap.ui.getCore().byId(this.getControl());
		var oBindingContext = this.getBindingContext() || (oControl && oControl.getBindingContext());
		if (!oBindingContext) {
			return null;
		}

		var that = this;
		var sCurrentField = this.getFieldName();
		var oContext = oBindingContext.getObject(oBindingContext.getPath());
		var aSemanticObjects = [
			"", this.getSemanticObject()
		].concat(this.getAdditionalSemanticObjects());
		var bMapFieldToSemanticObject = this.getMapFieldToSemanticObject();
		if (this.getSemanticObjectController() && this.getSemanticObjectController().getMapFieldToSemanticObject() !== undefined) {
			bMapFieldToSemanticObject = this.getSemanticObjectController().getMapFieldToSemanticObject();
		}
		var oResults = {};

		aSemanticObjects.forEach(function(sSemanticObject) {
			oResults[sSemanticObject] = {};

			for ( var sAttributeName in oContext) {
				// Ignore metadata
				if (sAttributeName === "__metadata") {
					continue;
				}
				// Ignore empty values
				if (!oContext[sAttributeName]) {
					continue;
				}

				// Priority: 1. mapping from SemanticObjectMapping annotation 2. mapFieldToSemanticObject
				var sAttributeNameMapped;
				if (oSemanticObjects) {
					sAttributeNameMapped = (oSemanticObjects[sSemanticObject] && oSemanticObjects[sSemanticObject][sAttributeName]) ? oSemanticObjects[sSemanticObject][sAttributeName] : sAttributeName;
				} else {
					// Map attribute name by semantic object name
					sAttributeNameMapped = sAttributeName;
					if (bMapFieldToSemanticObject) {
						sAttributeNameMapped = that._mapFieldToSemanticObject(sAttributeName);
					}
				}

				// If more then one attribute field maps to the same semantic object we take the value of the current binding path.
				var oAttributeValue = oContext[sAttributeName];
				if (oResults[sSemanticObject][sAttributeNameMapped]) {
					if (oContext[sCurrentField]) {
						// Take over the value of current field in case of clash. If other field has clash we have no clue which value is the right one. So write error log.
						// Keep in mind: we do not explicitly check whether we are in the 'mapping' use-case when calling _mapFieldToSemanticObject because in not 'mapping'
						// use-case we do not come in the clash situation at all.
						if (sAttributeNameMapped === that._mapFieldToSemanticObject(that.getFieldName())) {
							oAttributeValue = oContext[sCurrentField];
						} else {
							jQuery.sap.log.error("During the mapping of the attribute " + sAttributeName + " a clash situation is occurred. This can lead to wrong navigation later on.");
						}
					}
				}

				// Copy the value replacing the attribute name by semantic object name
				oResults[sSemanticObject][sAttributeNameMapped] = oAttributeValue;
			}
		});

		return oResults;
	};

	/**
	 * Maps the given field name to the corresponding semantic object.
	 *
	 * @param {string} sFieldName The field name which should be mapped to a semantic object
	 * @returns {string} Corresponding semantic object, or the original field name if semantic object is not available.
	 * @private
	 */
	NavigationPopoverHandler.prototype._mapFieldToSemanticObject = function(sFieldName) {
		// For own field return the semantic object if exists
		// Note: if the field is assigned to another semantic object in 'SemanticObject' annotation than in the 'semanticObject' property then the
		// property 'semanticObject' is preferred.
		if (this.getFieldName() === sFieldName && this.getSemanticObject()) {
			return this.getSemanticObject();
		}
		var oSOController = this.getSemanticObjectController();
		if (!oSOController) {
			return sFieldName;
		}
		var oMap = oSOController.getFieldSemanticObjectMap();
		if (!oMap) {
			return sFieldName;
		}
		return oMap[sFieldName] || sFieldName;
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._updateSemanticObjectController = function(oControllerNew) {
		// In case that 'semantiObjectController' has not been set, check if parent has a SemanticObjectController and take it as
		// 'semanticObjectController' property. This is especially needed when SmartLink is manually defined as column in view.xml and
		// SemanticObjectController is defined at the SmartTable. It is also needed in case of SmartField embedded into SmartForm which provides
		// 'semanticObjectController' aggregation.
		var oControllerOld = this.getProperty("semanticObjectController");
		var oControl = sap.ui.getCore().byId(this.getControl());
		oControllerNew = oControllerNew || this.getSemanticObjectController() || this._getSemanticObjectControllerOfControl(oControl);

		if (oControllerNew && oControl && oControllerNew.isControlRegistered(oControl)) {
			oControllerNew.unregisterControl(this);
		}

		if (oControllerNew !== oControllerOld && oControllerOld) {
			oControllerOld.unregisterControl(this);
		}

		this.setProperty("semanticObjectController", oControllerNew);

		// Register NavigationPopoverHandler if the SmartLink was not registered. In case of ObjectIdentifier the 'control' property is set later on.
		// In this case the 'control' is of type ObjectIdentifier.
		if (oControllerNew && !oControllerNew.isControlRegistered(oControl)) {
			oControllerNew.registerControl(this);
		}
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._getSemanticObjectControllerOfControl = function(oControl) {
		if (!oControl) {
			return undefined;
		}
		var oSemanticObjectController;
		var oParent = oControl.getParent();
		while (oParent) {
			if (oParent.getSemanticObjectController) {
				oSemanticObjectController = oParent.getSemanticObjectController();
				if (oSemanticObjectController) {
					this.setSemanticObjectController(oSemanticObjectController);
					break;
				}
			}
			oParent = oParent.getParent();
		}
		return oSemanticObjectController;
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._updateVisibilityOfAvailableActions = function(aMAvailableActions) {

		if (!this._getEnabledAvailableActionsPersonalizationTotal()) {
			return aMAvailableActions;
		}

		// Update the 'visible' attribute only for storable (i.e. links with filled 'key') availableActions.
		var aMValidAvailableActions = Util.getStorableAvailableActions(aMAvailableActions);
		var bHasSuperiorAction = aMValidAvailableActions.some(function(oMAvailableAction) {
			return !!oMAvailableAction.isSuperiorAction;
		});
		aMValidAvailableActions.forEach(function(oMAvailableAction) {
			// Do not show links as 'Related Apps' in case of many links. Exception: the links without 'key' which should be shown always.
			if (aMAvailableActions.length > 10) {
				oMAvailableAction.visible = false;
			}
			// If at least one superiorAction exists, do not show other links
			if (bHasSuperiorAction) {
				oMAvailableAction.visible = false;
			}
			// Show always superiorAction
			if (oMAvailableAction.isSuperiorAction) {
				oMAvailableAction.visible = true;
			}
		});
		return aMAvailableActions;
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._isAvailableActionsPersonalizationTextEnabled = function(aMAvailableActions) {

		// Do not show any text if there are no available actions
		var aMValidAvailableActions = Util.getStorableAvailableActions(aMAvailableActions);
		if (aMValidAvailableActions.length === 0) {
			return false;
		}

		return this._getEnabledAvailableActionsPersonalizationTotal();
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._getEnabledAvailableActionsPersonalizationTotal = function() {
		// Default: text is enabled
		var bEnableAvailableActionsPersonalization = this.getEnableAvailableActionsPersonalization();
		// Application can overwrite to disable the text (i.e. 'Define Links' link will not be shown)
		if (this.getSemanticObjectController() && this.getSemanticObjectController().getEnableAvailableActionsPersonalization() && this.getSemanticObjectController().getEnableAvailableActionsPersonalization()[this.getFieldName()] !== undefined) {
			bEnableAvailableActionsPersonalization = this.getSemanticObjectController().getEnableAvailableActionsPersonalization()[this.getFieldName()];
		}
		return bEnableAvailableActionsPersonalization;
	};

	/**
	 * @private
	 */
	NavigationPopoverHandler.prototype._showErrorDialog = function(sText, sTitle, oControl) {
		MessageBox.show(sText, {
			icon: MessageBox.Icon.ERROR,
			title: sTitle,
			actions: [
				sap.m.MessageBox.Action.CLOSE
			],
			styleClass: (oControl.$() && oControl.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact navigationPopoverErrorDialog" : "navigationPopoverErrorDialog"
		});
	};

	return NavigationPopoverHandler;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/NavigationPopoverHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.RTAHandler') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.navpopover.RTAHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/RTAHandler",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/comp/personalization/Controller', 'sap/ui/comp/personalization/Util', './Util', 'sap/ui/comp/navpopover/flexibility/changes/AddLink', 'sap/ui/comp/navpopover/flexibility/changes/RemoveLink', 'sap/ui/fl/changeHandler/JsControlTreeModifier', './Factory'
], function(jQuery, CompLibrary, Controller, PersonalizationUtil, Util, AddLink, RemoveLink, JsControlTreeModifier, Factory) {
	"use strict";

	/**
	 * Runtime adaptation handler.
	 *
	 * @constructor
	 * @private
	 * @since 1.44.0
	 * @alias sap.ui.comp.navpopover.RTAHandler
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var RTAHandler = {};

	RTAHandler.isSettingsAvailable = function() {
		return !!Factory.getService("CrossApplicationNavigation");
	};

	RTAHandler.getStableElements = function(oNavigationPopoverHandler) {
		if (!oNavigationPopoverHandler || !(oNavigationPopoverHandler instanceof sap.ui.comp.navpopover.NavigationPopoverHandler)) {
			return null;
		}
		var sStableID = oNavigationPopoverHandler.getNavigationPopoverStableId();
		if (!sStableID) {
			return null;
		}
		var oAppComponent = oNavigationPopoverHandler._getAppComponent();
		if (!oAppComponent) {
			return null;
		}
		return [
			{
				id: sStableID,
				appComponent: oAppComponent
			}
		];
	};

	RTAHandler.execute = function(oNavigationPopoverHandler, fGetUnsavedChanges) {
		return new Promise(function(resolve, reject) {
			if (!oNavigationPopoverHandler || !(oNavigationPopoverHandler instanceof sap.ui.comp.navpopover.NavigationPopoverHandler)) {
				return reject(new Error("oNavigationPopoverHandler is not of supported type sap.ui.comp.navpopover.NavigationPopoverHandler"));
			}
			if (!oNavigationPopoverHandler.getNavigationPopoverStableId()) {
				return reject(new Error("StableId is not defined. SemanticObject=" + oNavigationPopoverHandler.getSemanticObject()));
			}
			var oAppComponent = oNavigationPopoverHandler._getAppComponent();
			if (!oAppComponent) {
				return reject(new Error("AppComponent is not defined. oControl=" + oNavigationPopoverHandler.getControl()));
			}

			oNavigationPopoverHandler._getNavigationContainer().then(function(oNavigationContainer) {
				var aAddedLinks = [];
				var aRemovedLinks = [];
				var fCallbackAfterClose = function(aChanges) {
					var aChangesOfAddedLinks = aChanges.filter(function(oMLink) {
						return oMLink.visible === true;
					});
					var aChangesOfRemovedLinks = aChanges.filter(function(oMLink) {
						return oMLink.visible === false;
					});
					aAddedLinks = RTAHandler._prepareResult(aChangesOfAddedLinks, sap.ui.comp.navpopover.ChangeHandlerType.addLink, oNavigationContainer.getId(), oAppComponent);
					aRemovedLinks = RTAHandler._prepareResult(aChangesOfRemovedLinks, sap.ui.comp.navpopover.ChangeHandlerType.removeLink, oNavigationContainer.getId(), oAppComponent);
				};
				// Apply saved changes by creating NavigationContainer

				// Apply unsaved changes to NavigationContainer
				RTAHandler._applyUnsavedChanges(fGetUnsavedChanges, oNavigationContainer, oAppComponent);

				oNavigationContainer.openSelectionDialog(true, false, fCallbackAfterClose, false).then(function() {
					oNavigationContainer.destroy();
					resolve(aAddedLinks.concat(aRemovedLinks));
				});
			});
		});
	};

	/**
	 * @private
	 */
	RTAHandler._prepareResult = function(aMLinks, sChangeType, sStableID, oAppComponent) {
		return aMLinks.map(function(oMLink) {
			return {
				selectorControl: {
					id: sStableID,
					controlType: "sap.ui.comp.navpopover.NavigationContainer",
					appComponent: oAppComponent
				},
				changeSpecificData: {
					changeType: sChangeType,
					content: oMLink
				}
			};
		});
	};

	/**
	 * @private
	 */
	RTAHandler._applyUnsavedChanges = function(fGetUnsavedChanges, oNavigationContainer, oAppComponent) {
		var aChanges = fGetUnsavedChanges(oNavigationContainer.getId(), [
			sap.ui.comp.navpopover.ChangeHandlerType.addLink, sap.ui.comp.navpopover.ChangeHandlerType.removeLink
		]);
		aChanges.forEach(function(oChange) {
			switch (oChange.getChangeType()) {
				case sap.ui.comp.navpopover.ChangeHandlerType.addLink:
					AddLink.applyChange(oChange, oNavigationContainer, {
						modifier: JsControlTreeModifier,
						appComponent: oAppComponent
					});
					break;
				case sap.ui.comp.navpopover.ChangeHandlerType.removeLink:
					RemoveLink.applyChange(oChange, oNavigationContainer, {
						modifier: JsControlTreeModifier,
						appComponent: oAppComponent
					});
					break;
			}
		});
	};

	return RTAHandler;
},
/* bExport= */true);

}; // end of sap/ui/comp/navpopover/RTAHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.SmartLink.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides the Design Time Metadata for the sap.ui.comp.navpopover.SmartLink control.
jQuery.sap.declare('sap.ui.comp.navpopover.SmartLink.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/SmartLink.designtime",[
	'./RTAHandler', 'sap/m/ObjectIdentifier'
], function(RTAHandler, ObjectIdentifier) {
	"use strict";
	(function() {
		ObjectIdentifier.getMetadata().loadDesignTime().then(function(oDesignTime) {
			if (oDesignTime.registerSettingsHandler) {
				oDesignTime.registerSettingsHandler({
					getStableElements: function(oObjectIdentifier) {
						var oNavigationPopoverHandler;
						oObjectIdentifier.fireEvent("ObjectIdentifier.designtime", {
							caller: "ObjectIdentifier.designtime",
							registerNavigationPopoverHandler: function(oNavigationPopoverHandler_) {
								oNavigationPopoverHandler = oNavigationPopoverHandler_;
							}
						});
						return RTAHandler.getStableElements(oNavigationPopoverHandler);
					},
					isSettingsAvailable: function() {
						return RTAHandler.isSettingsAvailable();
					},
					execute: function(oObjectIdentifier, fGetUnsavedChanges) {
						var oNavigationPopoverHandler;
						oObjectIdentifier.fireEvent("ObjectIdentifier.designtime", {
							caller: "ObjectIdentifier.designtime",
							registerNavigationPopoverHandler: function(oNavigationPopoverHandler_) {
								oNavigationPopoverHandler = oNavigationPopoverHandler_;
							}
						});
						return RTAHandler.execute(oNavigationPopoverHandler, fGetUnsavedChanges);
					}
				});
			}
		});
	})();
	return {
		getStableElements: function(oSmartLink) {
			return RTAHandler.getStableElements(oSmartLink.getNavigationPopoverHandler());
		},
		actions: {
			settings: function() {
				if (!RTAHandler.isSettingsAvailable()) {
					jQuery.sap.log.error("sap.ui.comp.navpopover.SmartLink.designtime: 'settings' action is not available");
					return;
				}
				return {
					handler: function(oSmartLink, fGetUnsavedChanges) {
						if (arguments.length === 3) {
							return RTAHandler.execute(oSmartLink.getNavigationPopoverHandler(), arguments[2].getUnsavedChanges);
						}
						return RTAHandler.execute(oSmartLink.getNavigationPopoverHandler(), fGetUnsavedChanges);
					}
				};
			}
		},
		annotations: {
			/**
			 * Maps properties of the annotated <code>EntityType</code> or sibling properties of the annotated property to properties of the
			 * Semantic Object. The <code>SmartLink</code> control can be created from the XML view or from the OData metadata. <i>XML Example of
			 * OData V4 with SemanticObjectMapping on Product/Name</i>
			 *
			 * <pre>
			 *  &lt;Annotations Target=&quot;ProductCollection.Product/Name&quot; xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 * 		&lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.SemanticObject&quot; String=&quot;SemanticObjectName&quot; /&gt;
			 * 		&lt;Annotation Term=&quot;com.sap.vocabularies.Common.v1.SemanticObjectMapping&quot;&gt;
			 * 			&lt;Collection&gt;
			 * 				&lt;Record&gt;
			 * 					&lt;PropertyValue Property=&quot;LocalProperty&quot; PropertyPath=&quot;SupplierId&quot; /&gt;
			 * 					&lt;PropertyValue Property=&quot;SemanticObjectProperty&quot; String=&quot;SupplierIdOfSemanticObjectName&quot; /&gt;
			 * 				&lt;/Record&gt;
			 * 			&lt;/Collection&gt;
			 * 		&lt;/Annotation&gt;
			 * 	&lt;/Annotations&gt;
			 * </pre>
			 */
			semanticObjectMapping: {
				namespace: "com.sap.vocabularies.Common.v1",
				annotation: "SemanticObjectMapping",
				target: [
					"Property"
				],
				defaultValue: null,
				appliesTo: [
					"text"
				],
				group: [
					"Behavior"
				],
				since: "1.48.0"
			},

			/**
			 * Renders the contact information inside the <code>NavigationPopover</code> control. The Contact annotation contains various
			 * <code>ContactType</code> which can be used for providing additional information for distinguishing between the contact details. List
			 * of enumeration types supported is listed below:
			 * <ul>
			 * <li><code>com.sap.vocabularies.Communication.v1.PhoneType/fax</code>: This enumeration type can be used for defining a fax number.</li>
			 * <li><code>com.sap.vocabularies.Communication.v1.PhoneType/work</code>: This enumeration type can be used for defining a work phone
			 * number.</li>
			 * <li><code>com.sap.vocabularies.Communication.v1.PhoneType/cell</code>: This enumeration type can be used for defining a mobile
			 * number.</li>
			 * <li><code>com.sap.vocabularies.Communication.v1.ContactInformationType/work"</code>: This enumeration type can be used for defining
			 * a work email address.</li>
			 * </ul>
			 * <i>XML Example of OData V4 with Contact Annotation</i>
			 *
			 * <pre>
			 *    &lt;Annotations Target=&quot;EntityTypeName.Supplier&quot;
			 *      xmlns=&quot;http://docs.oasis-open.org/odata/ns/edm&quot;&gt;
			 *       &lt;Annotation Term=&quot;com.sap.vocabularies.Communication.v1.Contact&quot;&gt;
			 *         &lt;Record&gt;
			 *           &lt;PropertyValue Property=&quot;fn&quot; Path=&quot;FormattedName&quot; /&gt;
			 *           &lt;PropertyValue Property=&quot;title&quot; Path=&quot;Title&quot; /&gt;
			 *           &lt;PropertyValue Property=&quot;org&quot; Path=&quot;CompanyName&quot; /&gt;
			 *           &lt;PropertyValue Property=&quot;role&quot; Path=&quot;OrganizationRole&quot; /&gt;
			 *           &lt;PropertyValue Property=&quot;photo&quot; Path=&quot;Photo&quot; /&gt;
			 *           &lt;PropertyValue Property=&quot;tel&quot;&gt;
			 *             &lt;Collection&gt;
			 *               &lt;Record&gt;
			 *                 &lt;PropertyValue Property=&quot;type&quot;
			 *                   EnumMember=&quot;com.sap.vocabularies.Communication.v1.PhoneType/fax&quot; /&gt;
			 *                 &lt;PropertyValue Property=&quot;uri&quot; Path=&quot;FaxNumber&quot; /&gt;
			 *               &lt;/Record&gt;
			 *               &lt;Record&gt;
			 *                 &lt;PropertyValue Property=&quot;type&quot;
			 *                   EnumMember=&quot;com.sap.vocabularies.Communication.v1.PhoneType/work /&gt;
			 *                 &lt;PropertyValue Property=&quot;uri&quot; Path=&quot;PhoneNumber&quot; /&gt;
			 *               &lt;/Record&gt;
			 *               &lt;Record&gt;
			 *                 &lt;PropertyValue Property=&quot;type&quot;
			 *                   EnumMember=&quot;com.sap.vocabularies.Communication.v1.PhoneType/cell&quot; /&gt;
			 *                 &lt;PropertyValue Property=&quot;uri&quot; Path=&quot;MobileNumber&quot; /&gt;
			 *               &lt;/Record&gt;
			 *             &lt;/Collection&gt;
			 *           &lt;/PropertyValue&gt;
			 *           &lt;PropertyValue Property=&quot;email&quot;&gt;
			 *             &lt;Collection&gt;
			 *               &lt;Record&gt;
			 *                 &lt;PropertyValue Property=&quot;type&quot;
			 *                   EnumMember=&quot;com.sap.vocabularies.Communication.v1.ContactInformationType/work&quot; /&gt;
			 *                 &lt;PropertyValue Property=&quot;address&quot; Path=&quot;EmailAddress&quot; /&gt;
			 *               &lt;/Record&gt;
			 *             &lt;/Collection&gt;
			 *           &lt;/PropertyValue&gt;
			 *         &lt;/Record&gt;
			 *      &lt;/Annotation&gt;
			 *    &lt;/Annotations&gt;
			 * </pre>
			 */
			contact: {
				namespace: "com.sap.vocabularies.Communication.v1",
				annotation: "Contact",
				target: [
					"EntityType"
				],
				defaultValue: null,
				appliesTo: [
					"text", "label", "value"
				],
				group: [
					"Behavior"
				],
				since: "1.40.1"
			}
		},

		properties: {
			semanticObject: {
				ignore: true
			},
			additionalSemanticObjects: {
				ignore: true
			},
			semanticObjectController: {
				ignore: true
			},
			fieldName: {
				ignore: true
			},
			// deprecated as of version 1.40.0
			semanticObjectLabel: {
				ignore: true
			},
			createControlCallback: {
				ignore: true
			},
			mapFieldToSemanticObject: {
				ignore: true
			},
			// changed to <code>false</code> as of version 1.48.0
			contactAnnotationPath: {
				ignore: false
			},
			ignoreLinkRendering: {
				ignore: true
			},
			enableAvailableActionsPersonalization: {
				ignore: false
			},
			uom: {
				ignore: true
			},
			// changed to <code>false</code> as of version 1.48.0
			enabled: {
				ignore: false
			}
		},

		customData: {}
	};
}, /* bExport= */false);

}; // end of sap/ui/comp/navpopover/SmartLink.designtime.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.navpopover.SmartLink') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.navpopover.SmartLink.
jQuery.sap.declare('sap.ui.comp.navpopover.SmartLink'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/navpopover/SmartLink",[
	'jquery.sap.global', 'sap/ui/base/ManagedObject', 'sap/m/Link', './LinkData', 'sap/ui/core/Control', './SemanticObjectController', './NavigationPopoverHandler', 'sap/ui/model/json/JSONModel', 'sap/ui/comp/personalization/Util'
], function(jQuery, ManagedObject, Link, LinkData, Control, SemanticObjectController, NavigationPopoverHandler, JSONModel, PersonalizationUtil) {
	"use strict";

	/**
	 * @class The SmartLink control uses a semantic object to display {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover}
	 * for further navigation steps.<br>
	 * <b>Note:</b> Navigation targets are determined using {@link sap.ushell.services.CrossApplicationNavigation CrossApplicationNavigation} of the unified shell service.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control

	 * @extends sap.m.Link
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.navpopover.SmartLink
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartLink = Link.extend("sap.ui.comp.navpopover.SmartLink", /** @lends sap.ui.comp.navpopover.SmartLink.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			designTime: true,
			properties: {

				/**
				 * Name of semantic object which is used to fill the navigation popover. <b>Note</b>: Setting a value triggers an asynchronous
				 * determination, so the effect can be delayed.
				 *
				 * @since 1.28.0
				 */
				semanticObject: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Semantic object names which can be used additional to the default <code>semanticObject</code> property in order to get navigation
				 * targets links.
				 *
				 * @since 1.42.0
				 */
				additionalSemanticObjects: {
					type: "string[]",
					defaultValue: []
				},

				/**
				 * The semantic object controller controls events for several SmartLink controls. If the controller is not set manually, it tries to
				 * find a SemanticObjectController in its parent hierarchy.
				 *
				 * @since 1.28.0
				 */
				semanticObjectController: {
					type: "any",
					defaultValue: null
				},

				/**
				 * The metadata field name for this SmartLink control.
				 *
				 * @since 1.28.0
				 */
				fieldName: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Shown label of semantic object.
				 *
				 * @deprecated As of version 1.40.0 Title section with <code>semanticObjectLabel</code> has been removed due to new UI design
				 * @since 1.28.0
				 */
				semanticObjectLabel: {
					type: "string",
					defaultValue: null
				},

				/**
				 * Function that enables the SmartLink control to create an alternative control, which is displayed if no navigation targets are
				 * available. The function has no parameters and has to return an instance of sap.ui.core.Control.
				 *
				 * @since 1.28.0
				 */
				createControlCallback: {
					type: "object",
					defaultValue: null
				},

				/**
				 * If set to <code>false</code>, the SmartLink control will not replace its field name with the according
				 * <code>semanticObject</code> property during the calculation of the semantic attributes. This enables the usage of several
				 * SmartLink controls on the same semantic object.
				 */
				mapFieldToSemanticObject: {
					type: "boolean",
					defaultValue: true
				},

				/**
				 * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
				 * annotation is defined, for example, <code>'to_Supplier'</code>. An empty string means that the related entity type is the
				 * current one.
				 *
				 * @since 1.40.0
				 */
				contactAnnotationPath: {
					type: "string",
					defaultValue: undefined
				},

				/**
				 * If set to <code>true</code>, the SmartLink control will render the <code>innerControl</code> or the control provided by
				 * <code>createControlCallback</code> instead of the actual link. This is used for example by the SemanticObjectController if this
				 * SmartLink is listed in its <code>ignoredFields</code> or no navigation targets were found during prefetch.
				 *
				 * @since 1.28.0
				 */
				ignoreLinkRendering: {
					type: "boolean",
					defaultValue: false
				},

				/**
				 * Determines whether the personalization link is shown inside the NavigationPopover control.
				 *
				 * @since 1.44.0
				 */
				enableAvailableActionsPersonalization: {
					type: "boolean",
					defaultValue: true
				},

				/**
				 * Additionally to the <code>text</code> property the Unit of Measure can be displayed.
				 *
				 * @since 1.48.0
				 */
				uom: {
					type: "string",
					defaultValue: undefined
				}
			},
			aggregations: {

				/**
				 * Control that is displayed instead of SmartLink control, if the SmartLink is disabled (for example, if no navigation targets are
				 * available). If <code>innerControl</code> is not provided, the SmartLink control tries to create one with property
				 * <code>createControlCallback</code>.
				 *
				 * @since 1.28.0
				 */
				innerControl: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {

				/**
				 * Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
				 * change the parameters used to retrieve the navigation targets. In case of SmartLink control, the <code>beforePopoverOpens</code>
				 * is fired after the link has been clicked.
				 *
				 * @since 1.28.0
				 */
				beforePopoverOpens: {
					parameters: {
						/**
						 * The semantic object for which the navigation targets will be retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
						 *
						 * @deprecated Since 1.42.0. The parameter <code>semanticAttributes</code> is obsolete. Instead use the parameter
						 *             <code>semanticAttributesOfSemanticObjects</code>.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes calculated from
						 * the binding context. The semantic attributes will be used as parameters in order to retrieve the navigation targets.
						 *
						 * @since 1.42.0
						 */
						semanticAttributesOfSemanticObjects: {
							type: "object"
						},

						/**
						 * This callback function enables you to define a changed semantic attributes map. Signatures:
						 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
						 * <ul>
						 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes</li>
						 * <li>{string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs</li>
						 * </ul>
						 */
						setSemanticAttributes: {
							type: "function"
						},

						/**
						 * This callback function sets an application state key that is used over the cross-application navigation. Signatures:
						 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
						 * <ul>
						 * <li>{string} sAppStateKey</li>
						 * </ul>
						 */
						setAppStateKey: {
							type: "function"
						},

						/**
						 * The ID of the SmartLink control.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
						 * Signatures: <code>open()</code> If the <code>beforePopoverOpens</code> has been registered, the <code>open</code>
						 * function has to be called manually in order to open the navigation popover.
						 */
						open: {
							type: "function"
						}
					}
				},

				/**
				 * After the navigation targets are retrieved, <code>navigationTargetsObtained</code> is fired and provides the possibility to
				 * change the targets.
				 *
				 * @since 1.28.0
				 */
				navigationTargetsObtained: {
					parameters: {
						/**
						 * The main navigation object.
						 */
						mainNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * Array of available navigation target objects.
						 */
						actions: {
							type: "sap.ui.comp.navpopover.LinkData[]"
						},

						/**
						 * The navigation object for the own application. This navigation option is by default not visible on the popover.
						 */
						ownNavigation: {
							type: "sap.ui.comp.navpopover.LinkData"
						},

						/**
						 * Array containing contact data.
						 */
						popoverForms: {
							type: "sap.ui.layout.form.SimpleForm[]"
						},

						/**
						 * The semantic object for which the navigation targets have been retrieved.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * The ID of the SmartLink control.
						 */
						originalId: {
							type: "string"
						},

						/**
						 * This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
						 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
						 * <code>show()</code>
						 * <ul>
						 * <li><code>show(oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
						 * <ul>
						 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
						 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
						 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
						 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
						 * remain.</li>
						 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
						 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
						 * object still remains.</li>
						 * </ul>
						 * </li>
						 * <li><code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
						 * <ul>
						 * <li>{string | undefined} sMainNavigationId The visible description for the main navigation link. With <code>''</code>,
						 * both the description and subtitle will be removed. With <code>undefined</code>, the description is calculated using the
						 * binding context of a given source object (for example <code>SmartLink</code> control).</li>
						 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
						 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
						 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
						 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
						 * remain.</li>
						 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
						 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
						 * object still remains.</li>
						 * </ul>
						 * </li>
						 * </ul>
						 */
						show: {
							type: "function"
						}
					}
				},

				/**
				 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
				 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
				 *
				 * @since 1.28.0
				 */
				innerNavigate: {
					parameters: {
						/**
						 * The UI text shown in the clicked link.
						 */
						text: {
							type: "string"
						},

						/**
						 * The navigation target of the clicked link.
						 */
						href: {
							type: "string"
						},

						/**
						 * The semantic object used to retrieve this target.
						 */
						semanticObject: {
							type: "string"
						},

						/**
						 * Map containing the semantic attributes used to retrieve this target.
						 */
						semanticAttributes: {
							type: "object"
						},

						/**
						 * The ID of the SmartLink control.
						 */
						originalId: {
							type: "string"
						}
					}
				}
			}
		}
	});

	// ----------------------- Public Methods --------------------------

	/**
	 * Gets the inner control's value, if no inner control is available, the text of SmartLink control will be returned.
	 *
	 * @returns {object} the value
	 * @public
	 */
	SmartLink.prototype.getInnerControlValue = function() {
		if (this._isRenderingInnerControl()) {
			var oInnerControl = this._getInnerControl();

			if (oInnerControl) {
				if (oInnerControl.getText) {
					return oInnerControl.getText();
				}

				if (oInnerControl.getValue) {
					return oInnerControl.getValue();
				}
			}
		}

		return this.getText();
	};

	/**
	 * Gets the composition NavigationPopoverHandler
	 *
	 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler}
	 * @private
	 */
	SmartLink.prototype.getNavigationPopoverHandler = function() {
		return this._createNavigationPopoverHandler();
	};

	// ----------------------- Overwrite Methods --------------------------

	SmartLink.prototype.init = function() {
		// In order to consume available semanticObjects from FLP we have to instantiate SemanticObjectController object
		SemanticObjectController.prefetchDistinctSemanticObjects();

		this._oNavigationPopoverHandler = null;

		this.attachPress(this._onLinkPressed);
		this.addStyleClass("sapUiCompSmartLink");
	};

	SmartLink.prototype.applySettings = function(mSettings) {
		ManagedObject.prototype.applySettings.apply(this, arguments);
		this._updateEnabled();
	};

	SmartLink.prototype.updateBindingContext = function() {
		Control.prototype.updateBindingContext.apply(this, arguments);
		this.setHref(null);
		this.setTarget(null);
		if (this._oNavigationPopoverHandler) {
			this._oNavigationPopoverHandler.setBindingContext(this.getBindingContext());
		}
	};

	SmartLink.prototype._getTextOfDom = function() {
		if (this.$().find("span").length === 2) {
			return this.$().find("span")[0].textContent + this.$().find("span")[1].textContent;
		} else {
			return this.$()[0].textContent;
		}
	};

	SmartLink.prototype.setText = function(sText) {
		if (this._isRenderingInnerControl()) {
			// SmartLink renders inner control => overwrite base setText as it changes the DOM directly
			this.setProperty("text", sText, true);
		} else {
			Link.prototype.setText.call(this, sText);
		}
		return this;
	};

	SmartLink.prototype.setMapFieldToSemanticObject = function(bMapFieldToSemanticObject) {
		this.setProperty("mapFieldToSemanticObject", bMapFieldToSemanticObject);

		if (this._oNavigationPopoverHandler) {
			this._oNavigationPopoverHandler.setMapFieldToSemanticObject(bMapFieldToSemanticObject);
		}
		return this;
	};

	// BCP 1670108744: when semanticObjectController is set first then semanticObject is still not known in the step where ignoredState is
	// determined
	SmartLink.prototype.setSemanticObject = function(sSemanticObject) {
		this.setProperty("semanticObject", sSemanticObject);

		if (this._oNavigationPopoverHandler) {
			this._oNavigationPopoverHandler.setSemanticObject(sSemanticObject);
		}

		this._updateEnabled();
		return this;
	};

	SmartLink.prototype.setAdditionalSemanticObjects = function(aSemanticObjects) {
		this.setProperty("additionalSemanticObjects", aSemanticObjects);

		if (this._oNavigationPopoverHandler) {
			this._oNavigationPopoverHandler.setAdditionalSemanticObjects(aSemanticObjects);
		}

		// this._updateEnabled();
		return this;
	};

	SmartLink.prototype.setContactAnnotationPath = function(sContactAnnotationPath) {
		this.setProperty("contactAnnotationPath", sContactAnnotationPath);

		if (this._oNavigationPopoverHandler) {
			this._oNavigationPopoverHandler.setContactAnnotationPath(sContactAnnotationPath);
		}

		this._updateEnabled();
		return this;
	};

	SmartLink.prototype.setEnableAvailableActionsPersonalization = function(bEnableAvailableActionsPersonalization) {
		this.setProperty("enableAvailableActionsPersonalization", bEnableAvailableActionsPersonalization);

		if (this._oNavigationPopoverHandler) {
			this._oNavigationPopoverHandler.setEnableAvailableActionsPersonalization(bEnableAvailableActionsPersonalization);
		}

		return this;
	};

	SmartLink.prototype.setIgnoreLinkRendering = function(bIgnoreLinkRendering) {
		this.setProperty("ignoreLinkRendering", bIgnoreLinkRendering);

		// If link should not be rendered, but no inner control is available, deactivate SmartLink
		// ER: also if the inner control is available e.g. sap.m.Text, we have to deactivate SmartLink. Otherwise the sap.m.Text becomes capability to
		// be clicked.
		this._updateEnabled();
		return this;
	};

	SmartLink.prototype.setFieldName = function(sFieldName) {
		this.setProperty("fieldName", sFieldName);

		if (this._oNavigationPopoverHandler) {
			this._oNavigationPopoverHandler.setFieldName(sFieldName);
		}

		this._updateEnabled();
		return this;
	};

	SmartLink.prototype.setSemanticObjectController = function(oControllerNew) {
		if (oControllerNew && !(oControllerNew instanceof sap.ui.comp.navpopover.SemanticObjectController)) {
			jQuery.sap.log.warning("Warning: setSemanticObjectController() has to be an object of sap.ui.comp.navpopover.SemanticObjectController instances", this);
			return this;
		}
		var oControllerOld = this.getProperty("semanticObjectController");

		if (oControllerOld === oControllerNew) {
			return this;
		}
		if (oControllerOld) {
			oControllerOld.unregisterControl(this);
		}
		this.setProperty("semanticObjectController", oControllerNew, true);
		if (oControllerNew) {
			oControllerNew.registerControl(this);
		}

		if (this._oNavigationPopoverHandler) {
			this._oNavigationPopoverHandler.setSemanticObjectController(oControllerNew);
		}

		this._updateEnabled();
		return this;
	};

	SmartLink.prototype.onBeforeRendering = function() {
		Link.prototype.onBeforeRendering.apply(this, arguments);

		// In case that 'semantiObjectController' has not been set, check if parent has a SemanticObjectController and take it as
		// 'semanticObjectController' property. This is especially needed when SmartLink is manually defined as column in view.xml and
		// SemanticObjectController is defined at the SmartTable. It is also needed in case of SmartField embedded into SmartForm which provides
		// 'semanticObjectController' aggregation.
		if (!this.getSemanticObjectController()) {
			var oSOC = this._getSemanticObjectControllerOfParent();
			if (oSOC) {
				this.setSemanticObjectController(oSOC);
			}
		}
	};

	SmartLink.prototype.exit = function() {
		// Disconnect from SemanticObjectController
		if (this.getSemanticObjectController()) {
			this.getSemanticObjectController().unregisterControl(this);
		}
		if (this._oNavigationPopoverHandler) {
			this._oNavigationPopoverHandler.destroy();
			this._oNavigationPopoverHandler = null;
		}
	};

	// -------------------------- Private Methods ------------------------------------

	/**
	 * @private
	 */
	SmartLink.prototype._onLinkPressed = function(oEvent) {
		this._createNavigationPopoverHandler().openPopover();
	};

	/**
	 * @private
	 */
	SmartLink.prototype._createNavigationPopoverHandler = function() {
		if (!this._oNavigationPopoverHandler) {
			if (!this.getFieldName()) {
				var oBinding = this.getBinding("text");
				var sFieldName = oBinding && oBinding.getPath();
				if (!sFieldName && oBinding && oBinding.getBindings) {
					// The first binding part is about field name, the second binding path is about description (see
					// ControlProvider._createSmartLinkFieldTemplate())
					sFieldName = oBinding.getBindings()[0].getPath();
				}
				this.setFieldName(sFieldName);
			}
			this._oNavigationPopoverHandler = new NavigationPopoverHandler({
				semanticObject: this.getSemanticObject(),
				additionalSemanticObjects: this.getAdditionalSemanticObjects(),
				semanticObjectController: this.getSemanticObjectController(),
				fieldName: this.getFieldName(),
				mapFieldToSemanticObject: this.getMapFieldToSemanticObject(),
				contactAnnotationPath: this.getContactAnnotationPath(),
				enableAvailableActionsPersonalization: this.getEnableAvailableActionsPersonalization(),
				control: this,
				beforePopoverOpens: this._onBeforePopoverOpens.bind(this),
				navigationTargetsObtained: this._onNavigationTargetsObtained.bind(this),
				innerNavigate: this._onInnerNavigate.bind(this)
			});
			this._oNavigationPopoverHandler.setModel(this.getModel());
		}
		return this._oNavigationPopoverHandler;
	};

	/**
	 * @private
	 */
	SmartLink.prototype._onNavigationTargetsObtained = function(oEvent) {
		var oParameters = oEvent.getParameters();
		if (!this.hasListeners("navigationTargetsObtained")) {
			oParameters.show();
			return;
		}
		this.fireNavigationTargetsObtained({
			mainNavigation: oParameters.mainNavigation,
			actions: oParameters.actions,
			ownNavigation: oParameters.ownNavigation,
			popoverForms: oParameters.popoverForms,
			semanticObject: oParameters.semanticObject,
			semanticAttributes: oParameters.semanticAttributes,
			originalId: oParameters.originalId,
			show: oParameters.show
		});
	};

	/**
	 * @private
	 */
	SmartLink.prototype._onBeforePopoverOpens = function(oEvent) {
		var oParameters = oEvent.getParameters();
		if (!this.hasListeners("beforePopoverOpens")) {
			oParameters.open();
			return;
		}
		this.fireBeforePopoverOpens({
			originalId: oParameters.originalId,
			semanticObject: oParameters.semanticObject,
			semanticAttributes: oParameters.semanticAttributes,
			semanticAttributesOfSemanticObjects: oParameters.semanticAttributesOfSemanticObjects,
			setSemanticAttributes: oParameters.setSemanticAttributes,
			setAppStateKey: oParameters.setAppStateKey,
			open: oParameters.open
		});
	};

	/**
	 * @private
	 */
	SmartLink.prototype._onInnerNavigate = function(oEvent) {
		var oParameters = oEvent.getParameters();
		if (!this.hasListeners("innerNavigate")) {
			return;
		}
		this.fireInnerNavigate({
			text: oParameters.text,
			href: oParameters.href,
			originalId: oParameters.originalId,
			semanticObject: oParameters.semanticObject,
			semanticAttributes: oParameters.semanticAttributes
		});
	};

	SmartLink.prototype._isRenderingInnerControl = function() {
		return this.getIgnoreLinkRendering() && this._getInnerControl() !== null;
	};

	/**
	 * Gets the inner control which is provided by the CreateControlCallback
	 *
	 * @returns {sap.ui.core.Control} The control.
	 * @private
	 */
	SmartLink.prototype._getInnerControl = function() {
		var oInnerControl = this.getAggregation("innerControl");
		if (oInnerControl) {
			return oInnerControl;
		}

		var fCreate = this.getCreateControlCallback();
		if (fCreate) {
			oInnerControl = fCreate();
			this.setAggregation("innerControl", oInnerControl, true);
			return oInnerControl;
		}

		return null;
	};

	/**
	 * @private
	 */
	SmartLink.prototype._getSemanticObjectControllerOfParent = function() {
		var oSemanticObjectController;
		var oParent = this.getParent();
		while (oParent) {
			if (oParent.getSemanticObjectController) {
				oSemanticObjectController = oParent.getSemanticObjectController();
				if (oSemanticObjectController) {
					this.setSemanticObjectController(oSemanticObjectController);
					break;
				}
			}
			oParent = oParent.getParent();
		}
		return oSemanticObjectController;
	};

	/**
	 * @private
	 */
	SmartLink.prototype._updateEnabled = function() {
		var that = this;
		SemanticObjectController.getDistinctSemanticObjects().then(function(oSemanticObjects) {
			// Take the newest property values as in the meantime they could be changed
			var bIgnoreField = false;
			if (that.getSemanticObjectController()) {
				var aIgnoredFields = PersonalizationUtil.createArrayFromString(that.getSemanticObjectController().getIgnoredFields());
				bIgnoreField = aIgnoredFields.indexOf(that.getFieldName()) > -1;
			}
			var bIgnoreRendering = (that.getIgnoreLinkRendering() === false || that.getIgnoreLinkRendering() === true) ? that.getIgnoreLinkRendering() : false;
			var bHasContactAnnotationPath = !(that.getContactAnnotationPath() === undefined);

			that.setEnabled(!bIgnoreField && !bIgnoreRendering && (SemanticObjectController.hasDistinctSemanticObject(that.getSemanticObject(), oSemanticObjects) || bHasContactAnnotationPath));
		});
	};

	return SmartLink;

}, /* bExport= */true);

}; // end of sap/ui/comp/navpopover/SmartLink.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelectorController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.ui.comp.odata.FieldSelectorController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelectorController",["jquery.sap.global", "./FieldSelectorModelConverter"],
	function(jQuery, ModelConverter) {
	"use strict";


	/**
	 * Constructs a utility class to analyse the OData metadata document ($metadata), to resolve SAP-Annotations
	 *
	 * @constructor
	 * @public
	 * @author Niels Hebling
	 */
	var FieldSelectorController = function() {
		this._oModelConverter = null;
		this._oFields = {};
		this._aIgnoredFields = [];
	};

	/**
	 * Initialize the controller by providing a reference to the OData model and optionally a special entity set and/or a list of fields which should be ignored.
	 * @param {sap.ui.model.odata.ODataModel} oODataModel - OData model
	 * @param {string|array} [vEntityTypes] - Entity type name(s) separated by comma-character or array. If empty all available EntityTypes will be taken into account.
	 * @param {Array} [aIgnoredFields] - List of fields which should be ignored
	 * @param {Object.<bindingPath:string, fieldListElement:Object>} [mBindingPathToFieldListElement] - Map absolute odata binding paths to the field list elements
	 * @param {Object.<id:string, fieldListElement:Object>} [mIdToFieldListElement] - Map field list element ids to the field list elements
	 */
	FieldSelectorController.prototype.init = function(oODataModel, vEntityTypes, aIgnoredFields, mBindingPathToFieldListElement, mIdToFieldListElement){

		if (!oODataModel) {
			jQuery.sap.log.error("oModel has to be set otherwise nothing will be displayed");
		}

		this._oModelConverter = new ModelConverter(oODataModel);
		if (!vEntityTypes){
			vEntityTypes = this._oModelConverter.getAllEntityTypeNames();
		}

		if (!aIgnoredFields){
			aIgnoredFields = [];
		}

		var oConvertedModel = this._oModelConverter.getConvertedModel(vEntityTypes, aIgnoredFields);
		if (mBindingPathToFieldListElement && mIdToFieldListElement) {
			var aFieldsNotBoundToODataService = this._updateFieldLabelsAndDetermineFieldsNotBoundToODataService(oConvertedModel, mBindingPathToFieldListElement, mIdToFieldListElement);
			this._addFieldsNotBoundToODataService(oConvertedModel, aFieldsNotBoundToODataService);
		}
		this._sortFields(oConvertedModel);
	};

	/**
	 * Check each label of the field selector if it is in synch with the corresponding label of the field list.
	 * If a label of the field selector is not in synch, then set it to the label of the field list.
	 * @param {Object} oConvertedModel Model of the OData service converted into a simple list
	 * @param {Object.<bindingPath:string, fieldListElement:Object>} [mBindingPathToFieldListElement] - Map absolute odata binding paths to the field list elements
	 * @param {Object.<id:string, fieldListElement:Object>} [mIdToFieldListElement] - Map field list element ids to the field list elements
	 */
	FieldSelectorController.prototype._updateFieldLabelsAndDetermineFieldsNotBoundToODataService = function(oConvertedModel, mBindingPathToFieldListElement, mIdToFieldListElement) {
		var that = this;
		jQuery.each(oConvertedModel, function(key, aDataServiceFields) {
			jQuery.each(aDataServiceFields, function(index, oDataServiceField) {
				if (oDataServiceField.entityName && oDataServiceField.name) {
					if (key !== oDataServiceField.entityName) { // complex type case
						var oMetaDataAnalyzer = that.getMetaDataAnalyzer();
						var sPropertyNameOfCmplxField = oMetaDataAnalyzer._getNameOfPropertyUsingComplexType(key, oDataServiceField.entityName);
						if (sPropertyNameOfCmplxField){
							var oFieldListElement = mBindingPathToFieldListElement[key + "/" + sPropertyNameOfCmplxField + "/" + oDataServiceField.name];
							if (oFieldListElement) {
								oFieldListElement.isBoundToODataService = true;
								var sFieldListLabel = oFieldListElement.label;
								if (sFieldListLabel && (sFieldListLabel !== oDataServiceField.fieldLabel)) {
									oDataServiceField.fieldLabel = sFieldListLabel;
								}
								if (mIdToFieldListElement) {
									// reduce mIdToFieldListElement by removing all mBindingPathToFieldListElement[x].id, where x is a valid odata service binding path
									delete mIdToFieldListElement[oFieldListElement.id];
								}
							}
						} else {
							jQuery.sap.log.error("FieldSelector: Property of complex type " + oDataServiceField.name + " not found on entityType " + key);
						}
					} else { // non complex type case
						var oFieldListElement = mBindingPathToFieldListElement[oDataServiceField.entityName + '/' + oDataServiceField.name];
						if (oFieldListElement) {
							oFieldListElement.isBoundToODataService = true;
							var sFieldListLabel = oFieldListElement.label;
							if (sFieldListLabel && (sFieldListLabel !== oDataServiceField.fieldLabel)) {
								oDataServiceField.fieldLabel = sFieldListLabel;
							}
							if (mIdToFieldListElement) {
								// reduce mIdToFieldListElement by removing all mBindingPathToFieldListElement[x].id, where x is a valid odata service binding path
								delete mIdToFieldListElement[oFieldListElement.id];
							}
						}
					}
				}
			});
		});

		this._removeFieldsFromList(mIdToFieldListElement, mBindingPathToFieldListElement, this._oModelConverter.invisibleFields);

		var aFieldsNotBoundToODataService = [];
		jQuery.each(mIdToFieldListElement, function(key, oFieldListElement) {
			aFieldsNotBoundToODataService.push(oFieldListElement);
		});

		return aFieldsNotBoundToODataService;
	};

	FieldSelectorController.prototype._removeFieldsFromList = function (mFieldsList, mBindingPathToFieldListElement, mFieldsToRemove) {
		var that = this;

		if (!mFieldsList || !mFieldsToRemove) {
			return;
		}

		jQuery.each(mFieldsToRemove, function(key, oFields) {
			jQuery.each(oFields, function(index, oField) {
				if (oField.entityName && oField.name) {
					if (key !== oField.entityName) { // complex type case
						var oMetaDataAnalyzer = that.getMetaDataAnalyzer();
						var sPropertyNameOfCmplxField = oMetaDataAnalyzer._getNameOfPropertyUsingComplexType(key, oField.entityName);
						if (sPropertyNameOfCmplxField) {
							var oFieldListElement = mBindingPathToFieldListElement[key + "/" + sPropertyNameOfCmplxField + "/" + oField.name];
							if (oFieldListElement) {
								delete mFieldsList[oField.id];
							}
						} else {
							jQuery.sap.log.error("FieldSelector: Property of complex type " + oField.name + " not found on entityType " + key);
						}
					} else { // non complex type case
						var oFieldListElement = mBindingPathToFieldListElement[oField.entityName + '/' + oField.name];
						if (oFieldListElement) {
							delete mFieldsList[oField.id];
						}
					}
				}
			});
		});
	};

	FieldSelectorController.prototype._addFieldsNotBoundToODataService = function(oConvertedModel, aFieldsNotBoundToODataService) {
		var fnEntityTypePushConvertelModelElementToConvertedModel = function(oConvertedModelElement, oEntityType) {
			if (!oConvertedModel[oEntityType.key]) {
				oConvertedModel[oEntityType.key] = [];
			}
			oConvertedModel[oEntityType.key].push(oConvertedModelElement);
		};

		var fnAddFieldsToConvertedModel = function(oFieldListElement){
			oFieldListElement.isBoundToODataService = false;
			// id property is used in the converted model for identifying fields, which are not bound to odata service
			// fieldLabel property stores the label of the field, which is not bound to odata service
			var oConvertedModelElement = { id: oFieldListElement.id, fieldLabel: oFieldListElement.label };
			var aEntityTypes = this._oModelConverter.getEntityTypes();
			aEntityTypes.forEach(fnEntityTypePushConvertelModelElementToConvertedModel.bind(null, oConvertedModelElement));
		};

		aFieldsNotBoundToODataService.forEach(fnAddFieldsToConvertedModel.bind(this));
	};

	/**
	 * Sort all fields from the converted model into a map of fields arranged by entity sets.
	 * @param {Object} oConvertedModel Model of the OData service converted into a simple list.
	 */
	FieldSelectorController.prototype._sortFields = function(oConvertedModel){
		var that = this;
		jQuery.each(oConvertedModel, function(key, value) {
			that._oFields[key] = value;
			that.sortFieldsForEntity.call(that, key);
		});
	};

	/**
	 * Sort all fields of an entity.
	 * @param {string} sEntityName name of the entity.
	 */
	FieldSelectorController.prototype.sortFieldsForEntity = function(sEntityName){
		this._oFields[sEntityName] = this._oFields[sEntityName].sort(function(a, b) {
			if (a.fieldLabel > b.fieldLabel) {
				return 1;
			}
			if (a.fieldLabel < b.fieldLabel) {
				return -1;
			}
			// a must be equal to b
			return 0;
		});
	};

	/**
	 * Get all fields of the service sorted by entity set. The fields itself are sorted by the alphabet.
	 * @returns {Object} Returns all fields of the service ordered by entity set
	 * @example {
	 * 				"entitySet_1":{
	 * 					"Field_D",
	 * 					"Field_E"
	 * 				},
	 * 				"entitySet_2":{
	 * 					"Field_A",
	 * 					"Field_B"
	 * 				}
	 * 			}
	 */
	FieldSelectorController.prototype.getFields = function(){
		return this._oFields;
	};

	/**
	 * Get all entity types of the OData service
	 * @returns {Array} Returns the list of entity types of the OData service
	 */
	FieldSelectorController.prototype.getEntityTypes = function(){
		return this._oModelConverter.getEntityTypes();
	};

	/**
	 * Get the metadata analyzer
	 * @returns {Object} Returns a reference to the metadata analyzer of the current service
	 */
	FieldSelectorController.prototype.getMetaDataAnalyzer = function(){
		return this._oModelConverter.getMetaDataAnalyzer();
	};

	/**
	 * Get maximum number of rows in all entitysets returned in the table data.
	 * @returns {Number} Returns the maximum number of rows available in the largest EntitySet.
	 */
	FieldSelectorController.prototype.getMaxEntitySetSize = function(){
		var maxCount = 0;
		if (this._oFields){
			jQuery.each(this._oFields, function(key, value){
				if (value && value.length){
					if (value.length > maxCount){
						maxCount = value.length;
					}
				}
			});
		}
		return maxCount;
	};

	/**
	 * Destroy the current instance
	 */
	FieldSelectorController.prototype.destroy = function(){
		if (this._oModelConverter){
			this._oModelConverter.destroy();
		}
		this._oModelConverter = null;
		this._oFields = null;

	};

	return FieldSelectorController;
}, /* bExport= */ true);

}; // end of sap/ui/comp/odata/FieldSelectorController.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.ODataControlFactory') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Factory class to create controls that are hosted by <code>sap.ui.comp.smartfield.SmartField</code>.
 *
 * @name sap.ui.comp.smartfield.ODataControlFactory
 * @author SAP SE
 * @version 1.50.6
 * @private
 * @since 1.28.0
 * @return {sap.ui.comp.smartfield.ODataControlFactory} new control factory instance.
 */
jQuery.sap.declare('sap.ui.comp.smartfield.ODataControlFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.TextArea'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.DateTimePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexJustifyContent'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.InputType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectNumber'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectStatus'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.m.TimePicker'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/ODataControlFactory",[
	"jquery.sap.global",
	"sap/m/TextArea",
	"sap/m/Link",
	"sap/m/CheckBox",
	"sap/m/ComboBox",
	"sap/m/DatePicker",
	"sap/m/DateTimePicker",
	"sap/m/FlexItemData",
	"sap/m/FlexJustifyContent",
	"sap/m/HBox",
	"sap/m/Input",
	"sap/m/InputType",
	"sap/m/Select",
	"sap/m/Text",
	"sap/ui/core/Renderer",
	"sap/ui/core/TextAlign",
	"sap/ui/comp/navpopover/SmartLink",
	"./ControlFactoryBase",
	"./FieldControl",
	"./ODataControlSelector",
	"./ODataHelper",
	"./ODataTypes",
	"sap/m/ObjectNumber",
	"sap/m/ObjectIdentifier",
	"sap/m/ObjectStatus",
	"sap/ui/core/ValueState",
	"sap/m/TimePicker",
	"sap/ui/comp/navpopover/SemanticObjectController",
	"sap/ui/comp/util/FormatUtil",
	"sap/ui/comp/odata/MetadataAnalyser"
], function(jQuery, TextArea, Link, CheckBox, ComboBox, DatePicker, DateTimePicker, FlexItemData, FlexJustifyContent, HBox, Input, InputType, Select, Text, Renderer, TextAlign, SmartLink, ControlFactoryBase, FieldControl, ODataControlSelector, ODataHelper, ODataTypes, ObjectNumber, ObjectIdentifier, ObjectStatus, ValueState, TimePicker, SemanticObjectController, FormatUtil, MetadataAnalyser) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {sap.ui.model.odata.ODataModel} oModel the OData model currently used
	 * @param {sap.ui.core.Control} oParent the parent control
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {string} oMetaData.entitySet the name of the OData entity set
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 */
	var ODataControlFactory = ControlFactoryBase.extend("sap.ui.comp.smartfield.ODataControlFactory", {
		constructor: function(oModel, oParent, oMetaData) {
			ControlFactoryBase.apply(this, [
				oModel, oParent
			]);
			this.sName = "ODataControlFactory";
			this._oMetaData = {
				annotations: {}
			};

			this._oMeta = oMetaData;
			this._oHelper = new ODataHelper(oModel, this._oBinding);
			this._oFieldControl = new FieldControl(oParent, this._oHelper);
			this._oTypes = new ODataTypes(oParent);
			this._oSelector = new ODataControlSelector(this._oMetaData, oParent, this._oTypes);
			this._bInitialized = false;
			this.bPending = false;
		}
	});

	/**
	 * Initializes the meta data.
	 *
	 * @param {object} oMetaData the meta data used to initialize the factory
	 * @param {string} oMetaData.entitySet the name of the OData entity set
	 * @param {string} oMetaData.entityType the name of the OData entity type
	 * @param {string} oMetaData.property the name of the OData property
	 * @param {string} oMetaData.model the name of the model
	 * @param {string} oMetaData.path the path identifying the OData property
	 * @private
	 */
	ODataControlFactory.prototype._init = function(oMetaData) {

		// set the name of the model used, binding path of the property (complex or simple), entity set and entity type.
		this._oMetaData.model = oMetaData.model;
		this._oMetaData.path = oMetaData.path;
		this._oMetaData.entitySet = oMetaData.entitySetObject || this._oHelper.oMeta.getODataEntitySet(oMetaData.entitySet);
		this._oMetaData.entityType = oMetaData.entityType || this._oHelper.oMeta.getODataEntityType(this._oMetaData.entitySet.entityType);
		this._oMetaData.navigationPath = oMetaData.navigationPath || null;

		if (this._oModel) {

			// get the property, considering navigation properties and complex types.
			this._oHelper.checkNavigationProperty(this._oMetaData, this._oParent);
			this._oHelper.getProperty(this._oMetaData);

			// make sure that no exceptions occur, if the property is not valid
			// => necessary for extensibility use cases, if an extension field has been deleted and the UI has not yet been adapted.
			var oMetadataProperty = this.getEdmProperty();

			if (oMetadataProperty) {
				if (this._oParent && this._oParent.getExpandNavigationProperties()) {
					var oContext = this._oParent.getBindingContext();
					var bCreated = oContext.getObject().__metadata.created;

					if (!bCreated) {

						// only auto expand when entity is persited on the server
						var sAutoExpand = this._oHelper.getAutoExpandProperties(oMetadataProperty);

						if (sAutoExpand.length > 0) {
							this._oParent.bindElement({
								path: "",
								parameters: {
									expand: sAutoExpand,

									// select the data that is needed, not all properties of the entity which may have many
									select: sAutoExpand
								}
							});
						}
					}
				}

				// now get the remaining annotations, text, unit of measure and value list.
				this._oMetaData.annotations.text = this._oHelper.getTextProperty2(this._oMetaData);

				this._oMetaData.annotations.uom = this._oHelper.getUnitOfMeasure2(this._oMetaData);
				this._oHelper.getValueListData(this._oMetaData);

				this._oMetaData.annotations.lineitem = this._oHelper.getAnalyzer().getLineItemAnnotation(this._oMetaData.entitySet.entityType);
				this._oHelper.getUOMValueListAnnotationPath(this._oMetaData);
				this._oMetaData.annotations.semantic = MetadataAnalyser.getSemanticObjectsFromProperty(oMetadataProperty);
				this._oMetaData.annotations.semanticKeys = this._oHelper.getAnalyzer().getSemanticKeyAnnotation(this._oMetaData.entitySet.entityType);

				if (this._oMetaData.annotations.uom) {
					this._oMetaData.annotations.uom.annotations = {};
					this._oHelper.getValueListData(this._oMetaData.annotations.uom);
				}

				// check for a possibly existing text annotation for the unit in unit of measure.
				this._oHelper.getUOMTextAnnotation(this._oMetaData);
			} else {
				jQuery.sap.log.warning("SmartField: Property " + oMetaData.path + " does not exist", "SmartField: Property " + oMetaData.path + " does not exist", "sap.ui.comp.smartfield.ODataControlFactory");
			}
		} else {
			this._oMetaData.modelObject = oMetaData.modelObject;
			this._oMetaData.property = oMetaData.property;
			this._oMetaData.annotations.text = oMetaData.annotations.text;
			this._oMetaData.annotations.uom = oMetaData.annotations.uom;
			if (this._oMetaData.annotations.uom && !this._oMetaData.annotations.uom.annotations) {
				this._oMetaData.annotations.uom.annotations = {};
			}
			this._oMetaData.annotations.valuelist = oMetaData.annotations.valuelist;
			this._oMetaData.annotations.valuelistType = oMetaData.annotations.valuelistType;
			this._oMetaData.annotations.lineitem = oMetaData.annotations.lineitem;
			this._oMetaData.annotations.semantic = oMetaData.annotations.semantic;
			this._oMetaData.annotations.valuelistuom = oMetaData.annotations.valuelistuom;
		}
	};

	/**
	 * Creates a control instance based on OData meta data for display-only use cases.
	 *
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmDisplay = function() {
		var oConfig,
			oInnerControl,
			mAttributes,
			mOptions,
			bMasked,
			bDatePicker,
			bObjectIdentifier,
			oTextAnnotation,
			that = this,
			mNames = {
				width: true,
				textAlign: true
			},
			oMetadataProperty = this.getEdmProperty();

		// check for a text annotation.
		if (oMetadataProperty) {
			oTextAnnotation = this._oHelper.oAnnotation.getText(oMetadataProperty);
		}

		// optional call-back to layout the text as unit for unit of measure.
		oConfig = this._oParent.data("configdata");
		var bIgnoreComboBox = ((oConfig && (oConfig.isInnerControl !== true)) || this._oParent.isContextTable());

		// check for combo box.
		var oCheck = this._oSelector.checkComboBox(bIgnoreComboBox);

		if (oCheck && oCheck.combobox && (this._oParent.getFetchValueListReadOnly() || !oTextAnnotation)) {
			return this._createComboBox({
				annotation: oCheck.annotation,
				noDialog: true,
				noTypeAhead: true
			}, true);
		}

		// check for link
		if (this._checkLink() && !this._oSelector.useObjectIdentifier()) {
			return this._createLink();
		}

		// prepare the attributes.
		mAttributes = this.createAttributes(null, this._oMetaData.property, mNames);

		// check for date and format correctly.
		bDatePicker = this._oSelector.checkDatePicker();

		if (bDatePicker) {
			mOptions = this.getFormatSettings("dateFormatSettings");
			mAttributes.text = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property, mOptions, {
					displayFormat: "Date"
				})
			};
		} else {
			mAttributes.text = {
				model: this._oMetaData.model,
				path: this._oHelper.getEdmDisplayPath(this._oMetaData),
				type: this._oTypes.getType(this._oMetaData.property)
			};
		}

		if (oMetadataProperty) {

			// password handling
			bMasked = this._oHelper.oAnnotation.isMasked(oMetadataProperty);

			if (bMasked) {
				mAttributes.text.formatter = function(oText) {
					if (oText) {
						return oText.replace(new RegExp(".", "igm"), "*");
					}
					return oText;
				};
			}

			if (oTextAnnotation) {
				bObjectIdentifier = this._oSelector.useObjectIdentifier(bDatePicker, bMasked);

				if (bObjectIdentifier) {
					delete mAttributes.width;
					delete mAttributes.textAlign;
					mAttributes.text = {
						path: this._oMetaData.path
					};
					mAttributes.title = {
						path: this._oHelper.getEdmDisplayPath(this._oMetaData)
					};
					if (this._oParent.hasListeners("press")) {
						mAttributes.titleActive = true;
						mAttributes.titlePress = function(oEvent) {
							that._oParent.firePress(oEvent);
						};
					} else if (this._oMetaData.annotations.semantic && this._oMetaData.annotations.semantic.defaultSemanticObject) {
						var bTitleActive;
						var oLinkHandler;
						SemanticObjectController.getDistinctSemanticObjects().then(function(oSemanticObjects) {
							bTitleActive = SemanticObjectController.hasDistinctSemanticObject(that._oMetaData.annotations.semantic.defaultSemanticObject, oSemanticObjects);
							if (bTitleActive) {
								var oInfo = that._oParent.getBindingInfo("value");
								var sPath = oInfo.parts[0].path;
								var sLabel = that._oMetaData.property.property["sap:label"];
								if (that._oMetaData.annotations.lineitem && that._oMetaData.annotations.lineitem.labels && that._oMetaData.annotations.lineitem.labels[sPath]) {
									sLabel = that._oMetaData.annotations.lineitem.labels[sPath];
								}

								jQuery.sap.require("sap.ui.comp.navpopover.NavigationPopoverHandler");
								oLinkHandler = new sap.ui.comp.navpopover.NavigationPopoverHandler({
									semanticObject: that._oMetaData.annotations.semantic.defaultSemanticObject,
									additionalSemanticObjects: that._oMetaData.annotations.semantic.additionalSemanticObjects,
									semanticObjectLabel: sLabel,
									fieldName: sPath,
									navigationTargetsObtained: function(oEvent) {
										var oObjectIdentifier = sap.ui.getCore().byId(oEvent.getSource().getControl());
										var oMainNavigation = oEvent.getParameters().mainNavigation;

										// 'mainNavigation' might be undefined
										if (oMainNavigation) {
											oMainNavigation.setDescription(oObjectIdentifier.getText());
										}

										oEvent.getParameters().show(oObjectIdentifier.getTitle(), oMainNavigation, undefined, undefined);
									}
								});
							}
						});
						mAttributes.titleActive = {
							path: "$sapuicompsmartfield_distinctSO>/distinctSemanticObjects/" + this._oMetaData.annotations.semantic.defaultSemanticObject,
							formatter: function(oValue) {
								return !!oValue;
							}
						};
						mAttributes.titlePress = function(oEvent) {
							if (bTitleActive && oLinkHandler) {
								oLinkHandler.setControl(oEvent.getSource(oEvent.getParameter("domRef")));
								oLinkHandler.openPopover();
							}
						};
					}
				} else if (!(oConfig && (oConfig.isInnerControl === true))) {
					mAttributes.text = {};
					mAttributes.text.parts = [];
					mAttributes.text.parts.push(this._oMetaData.path);
					mAttributes.text.parts.push(this._oHelper.getEdmDisplayPath(this._oMetaData));
					mAttributes.text.formatter = function(sId, sDescription) {
						if (oCheck && oCheck.combobox) {
							return that._formatDisplayBehaviour("defaultComboBoxReadOnlyDisplayBehaviour", sId, sDescription);
						} else {
							return that._formatDisplayBehaviour("defaultInputFieldDisplayBehaviour", sId, sDescription);
						}
					};
				}
			} else if (this._oSelector.checkCheckBox()) {
				mAttributes.text.formatter = function(sValue) {
					return that._formatDisplayBehaviour("defaultCheckBoxDisplayBehaviour", sValue);
				};
			}
		}

		if (bObjectIdentifier) {
			oInnerControl = new ObjectIdentifier(this._oParent.getId() + "-objIdentifier", mAttributes);
			if (this._oMetaData.annotations.semantic) {
				oInnerControl.setModel(SemanticObjectController.getJSONModel(), "$sapuicompsmartfield_distinctSO");
			}
		} else {

			// do not wrap for dates. Incident ID : 1570841150
			if (mAttributes.text.type && (mAttributes.text.type instanceof sap.ui.comp.smartfield.type.DateTime) && mAttributes.text.type.oConstraints && mAttributes.text.type.oConstraints.isDateOnly) {
				mAttributes.wrapping = false;
			}

			if (this._oParent.isContextTable() && sap.ui.getCore().getConfiguration().getRTL()) {
				mAttributes.textDirection = "LTR";
			}

			oInnerControl = new Text(this._oParent.getId() + "-text", mAttributes);
		}

		// optional call-back to layout the text as unit for unit of measure.
		// moved to the beginning of this function
		// oConfig = this._oParent.data("configdata");
		if (!bObjectIdentifier && oConfig && oConfig.configdata && oConfig.configdata.onText) {
			oConfig.configdata.onText(oInnerControl);
		}

		// create a text box.
		return {
			control: oInnerControl,
			onCreate: "_onCreate",
			params: {
				noValidations: true
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data.
	 *
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmTime = function() {
		var mAttributes,
			oControl,
			mNames = {
				placeholder: true,
				valueState: true,
				valueStateText: true
			};

		// create the default control.
		mAttributes = this.createAttributes("value", this._oMetaData.property, mNames, {
			event: "change"
		});

		// BCP: 1580232741
		mAttributes.valueFormat = "HH:mm:ss";

		oControl = new TimePicker(this._oParent.getId() + "-timePicker", mAttributes);

		return {
			control: oControl,
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates a <code>sap.m.ObjectStatus</code> instance.
	 *
	 * @returns {sap.m.ObjectStatus} the new control instance
	 * @private
	 * @since 1.34.0
	 */
	ODataControlFactory.prototype._createObjectStatus = function() {
		var mAttributes,
			oTextAnnotation,
			oInnerControl;

		// prepare the attributes.
		mAttributes = this.createAttributes(null, this._oMetaData.property, null);

		// check for a text annotation.
		oTextAnnotation = this._oHelper.oAnnotation.getText(this.getEdmProperty());

		if (oTextAnnotation) {
			mAttributes.text = {
				parts: []
			};
			mAttributes.text.parts.push(this._oHelper.getEdmDisplayPath(this._oMetaData));
		} else {
			mAttributes.text = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property)
			};
		}

		this._addObjectStatusAttributes(mAttributes);
		oInnerControl = new ObjectStatus(this._oParent.getId() + "-objStatus", mAttributes);

		return {
			control: oInnerControl,
			onCreate: "_onCreate",
			params: {
				getValue: "getText",
				noValidation: true
			}
		};
	};

	/**
	 * Adds the attributes and properties for object status to the overall attributes for control construction.
	 *
	 * @param {map} mAttributes The overall attributes for control construction
	 * @private
	 */
	ODataControlFactory.prototype._addObjectStatusAttributes = function(mAttributes) {
		var oInfo,

			// check the state and place an icon, if necessary.
			oProposal = this._oParent.getControlProposal(),
			oStatus = oProposal.getObjectStatus();

		if (oStatus) {
			oInfo = oStatus.getBindingInfo("criticality");
		}

		var fCriticality = function(vCriticality) {
			var mStatesInt = {
				0: ValueState.None,
				1: ValueState.Error,
				2: ValueState.Warning,
				3: ValueState.Success
			};
			var mStatesString = {
				"com.sap.vocabularies.UI.v1.CriticalityType/Neutral": ValueState.Neutral,
				"com.sap.vocabularies.UI.v1.CriticalityType/Negative": ValueState.Warning,
				"com.sap.vocabularies.UI.v1.CriticalityType/Critical": ValueState.Error,
				"com.sap.vocabularies.UI.v1.CriticalityType/Positive": ValueState.Success
			};

			return mStatesString[vCriticality] || mStatesInt[vCriticality] || ValueState.None;
		};

		var fIcon = function() {
			var vCriticality,
				mIcons = {
				"Error": "sap-icon://status-negative",
				"Warning": "sap-icon://status-critical",
				"Success": "sap-icon://status-positive",
				"None": "sap-icon://status-inactive"
			};

			if (oInfo) {
				if (oInfo.formatter) {
					vCriticality = oInfo.formatter.apply(null, arguments);
				} else {
					vCriticality = arguments[0];
				}
			} else {
				vCriticality = oStatus.getCriticality();
			}

			if ((vCriticality === undefined) || (vCriticality === null)) {
				return null;
			}

			return mIcons[fCriticality(vCriticality)];
		};

		if (oInfo) {
			mAttributes.state = {
				formatter: function() {
					var oCriticality;

					if (oInfo.formatter) {
						oCriticality = oInfo.formatter.apply(null, arguments);
					} else {
						oCriticality = arguments[0];
					}

					return fCriticality(oCriticality);
				},
				parts: oInfo.parts
			};

			if (oStatus.getCriticalityRepresentationType() !== sap.ui.comp.smartfield.CriticalityRepresentationType.WithoutIcon) {
				mAttributes.icon = {
					formatter: fIcon,
					parts: oInfo.parts
				};
			}
		} else {

			if (oStatus) {
				mAttributes.state = fCriticality(oStatus.getCriticality());

				if (oStatus.getCriticalityRepresentationType() !== sap.ui.comp.smartfield.CriticalityRepresentationType.WithoutIcon) {
					mAttributes.icon = fIcon();
				}
			} else {
				mAttributes.icon = fIcon();
			}
		}
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property of type <code>Edm.String</code>.
	 * Either <code>sap.m.Input</code> is returned or <code>sap.m.Combobox</code> depending on configuration.
	 *
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmString = function() {
		var bMasked,
			bMultiLine,
			oConfig,
			mAttributes,
			oCheck,
			oControl,
			mNames = {
				width: true,
				textAlign: true,
				placeholder: true,
				tooltip: true,
				name: true,
				valueState: true,
				valueStateText: true
			};

		// check for check box.
		if (this._oSelector.checkCheckBox()) {
			return this._createCheckBox();
		}

		// check for selection.
		oCheck = this._oSelector.checkSelection();

		if (oCheck.selection) {
			return this._createSelect({
				annotation: oCheck.annotation,
				noDialog: true,
				noTypeAhead: true
			});
		}

		oCheck = this._oSelector.checkComboBox();

		if (oCheck.combobox) {
			return this._createComboBox({
				annotation: oCheck.annotation,
				noDialog: true,
				noTypeAhead: true
			});
		}

		var oMetadataProperty = this.getEdmProperty();

		if (oMetadataProperty) {

			// multi-line-text
			bMultiLine = this._oHelper.oAnnotation.isMultiLineText(oMetadataProperty);

			if (bMultiLine) {
				delete mNames["width"];
				return this._createMultiLineText(mNames);
			}
		}

		mAttributes = this.createAttributes("value", this._oMetaData.property, mNames);
		this._addMaxLength(mAttributes, oCheck.annotation);
		oControl = new Input(this._oParent.getId() + "-input", mAttributes);

		if (oMetadataProperty) {

			// password entry
			bMasked = this._oHelper.oAnnotation.isMasked(oMetadataProperty);

			if (bMasked) {
				oControl.setType(InputType.Password);
			}

			// add optional upper case conversion.
			this._handleEventingForEdmString(oControl, this._oMetaData.property);
		}

		// optional call-back to layout the text as unit for unit of measure.
		oConfig = this._oParent.data("configdata");

		if (oConfig && oConfig.configdata && oConfig.configdata.onInput) {
			oConfig.configdata.onInput(oControl);
		}

		return {
			control: oControl,
			onCreate: "_onCreate",
			params: {
				valuehelp: {
					annotation: oCheck.annotation,
					noDialog: !this._oParent.getShowValueHelp(),
					noTypeAhead: !this._oParent.getShowSuggestion(),
					aggregation: "suggestionRows"
				},
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Adds the maximum length to the attributes for construction call to create a new hosted control instance.
	 *
	 * @param {map} mAttributes attributes for construction call to create a new hosted control instance
	 * @param {object} oAnnotation the value list annotation
	 * @private
	 */
	ODataControlFactory.prototype._addMaxLength = function(mAttributes, oAnnotation) {
		var iMaxLength;

		// determine a possible max length.
		iMaxLength = this._getMaxLength();

		if (iMaxLength > 0) {

			// suppress the max length, if a value list annotation and type ahead are configured.
			if (!oAnnotation || !this._oParent.getShowSuggestion()) {
				mAttributes.maxLength = iMaxLength;
			}
		}
	};

	/**
	 * Gets the maximum length respecting type constraints and parent settings.
	 *
	 * @private
	 */
	ODataControlFactory.prototype._getMaxLength = function() {
		var oBind;

		// determine a possible max length.
		oBind = this._oParent.getBindingInfo("value");
		return this._oTypes.getMaxLength(this._oMetaData.property, oBind);
	};

	ODataControlFactory.prototype._addAriaLabelledBy = function(oControl) {
		var oInvisibleText,
			oTargetControl,
			oConfigData;

		if ((this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.None) || (this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.Form) || (this._oParent.getControlContext() === sap.ui.comp.smartfield.ControlContextType.SmartFormGrid)) {
			ControlFactoryBase.prototype._addAriaLabelledBy.apply(this, arguments);

			// only add label from meta data if we use SmartField inside SmartField
			oConfigData = this._oParent.data("configdata");

			if (oConfigData && oConfigData.configdata.isInnerControl && oConfigData.configdata.isUOM) {

				if (oControl) {
					oTargetControl = oControl.control;
					if (oTargetControl instanceof HBox) {
						if (oTargetControl.getItems().length > 0) {
							oTargetControl = oTargetControl.getItems()[0];
						}
					}
				}

				if (oTargetControl && oTargetControl.getAriaLabelledBy && oTargetControl.getAriaLabelledBy().length === 0) {
					var oEdmProperty = this.getEdmProperty();

					if (this._oHelper.oAnnotation.getLabel(oEdmProperty)) {
						jQuery.sap.require("sap.ui.core.InvisibleText");
						oInvisibleText = new sap.ui.core.InvisibleText({
							text: this._oHelper.oAnnotation.getLabel(oEdmProperty)
						});
						oTargetControl.addAriaLabelledBy(oInvisibleText);
						this._oParent.addAggregation("_ariaLabelInvisibleText", oInvisibleText);
					}
				}
			}
		}
	};

	/**
	 * Event handler for live changes/changes on the input control. The live-change event handler ensures the value is always in upper case
	 *
	 * @param {object} oControl attached either to liveChange or change event
	 * @param {object} oProperty the property for which to attach the events
	 * @private
	 */
	ODataControlFactory.prototype._handleEventingForEdmString = function(oControl, oProperty) {
		var bUpperCase,
			that = this;

		if (oControl) {
			bUpperCase = this._oHelper.oAnnotation.isUpperCase(oProperty.property);

			// handle change event
			oControl.attachChange(function(oEvent) {
				var oNewEvent = {};

				if (oEvent && oEvent.mParameters) {

					var sValue = oEvent.mParameters.value;
					if (bUpperCase && sValue) {
						sValue = sValue.toUpperCase();
						oControl.setValue(sValue);
					}

					oNewEvent.value = sValue;
					oNewEvent.newValue = sValue;

					if (oEvent.mParameters.validated) {
						oNewEvent.validated = oEvent.mParameters.validated;
					}

					if (oControl._oSuggestionPopup && oControl._oSuggestionPopup.isOpen()) {
						if (!oEvent.mParameters.validated) {
							if (oControl._iPopupListSelectedIndex >= 0) {
								return; // ignore that one; change via valuelistprovider will follow as next
							}
						}
					}

					try {
						that._oParent.fireChange(oNewEvent);
					} catch (ex) {
						jQuery.sap.log.warning(ex);
					}
				}
			});
		}
	};

	/**
	 * Creates an instance of <code>sap.m.Combobox</code> based on OData meta data.
	 *
	 * @param {object} oValueHelp the value help configuration
	 * @param {object} oValueHelp.annotation the value help annotation
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted
	 * @param {boolean} bDisplay if set, the combo box will be rendered as static text
	 * @return {sap.m.ComboBox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createComboBox = function(oValueHelp, bDisplay) {
		var oControl = null,
			oConfig,
			mAttributes,
			mNames = {
				width: true,
				textAlign: true,
				placeholder: true,
				tooltip: true,
				name: true
			};

		// optional call-back to layout the text as unit for unit of measure.
		oConfig = this._oParent.data("configdata");

		mAttributes = this.createAttributes("selectedKey", this._oMetaData.property, mNames);
		mAttributes.selectionChange = this._oHelper.getSelectionChangeHandler(this._oParent);
		mAttributes.change = function(oEvent) {

			if (oEvent.getParameter("itemPressed")) {
				return;
			}

			var sValue = oEvent.getSource().getSelectedKey();

			this._oParent.fireChange({
				value: sValue,
				newValue: sValue
			});
		}.bind(this);

		// ensure that combo box always takes maximum width.
		if (mAttributes.width === "") {
			mAttributes.width = "100%";
		}

		if (bDisplay) {
			oControl = this._createDisplayedComboBox(mAttributes);
		} else {
			oControl = new ComboBox(this._oParent.getId() + "-comboBoxEdit", mAttributes);
		}

		if (oConfig && oConfig.configdata && oConfig.configdata.onText) {
			oConfig.configdata.onText(oControl);
		}

		return {
			control: oControl,
			onCreate: "_onCreate",
			params: {
				valuehelp: {
					annotation: oValueHelp.annotation,
					aggregation: "items",
					noDialog: oValueHelp.noDialog,
					noTypeAhead: oValueHelp.noTypeAhead
				},
				getValue: "getSelectedKey",
				type: {
					type: mAttributes.selectedKey.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates an instance of <code>sap.m.ComboBox</code> but with a adapted <code>sap.m.Text</code> renderer.
	 * The rendered is basically taken over and adapted from <code>sap.m.TextRenderer</code>.
	 *
	 * @param {map} mAttributes control specific attributes
	 * @return {sap.m.Combobox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createDisplayedComboBox = function(mAttributes) {

		var DisplayComboBox = ComboBox.extend("sap.ui.comp.smartfield.DisplayComboBox", {
			metadata: {
				library: "sap.ui.comp"
			},
			renderer: function(oRm, oControl) {

				// coding adapted from sap.m.Text renderer
				var sWidth = oControl.getWidth(), sText = oControl.getValue(), sTextDir = oControl.getTextDirection(), sTextAlign = oControl.getTextAlign();

				sText.replace(/\r\n/g, "\n"); // normalize text

				// start writing html
				oRm.write("<span");
				oRm.writeControlData(oControl);
				oRm.addClass("sapMText");
				oRm.addClass("sapUiSelectable");

				// write style and attributes
				if (sWidth) {
					oRm.addStyle("width", sWidth);
				} else {
					oRm.addClass("sapMTextMaxWidth");
				}

				if (sTextDir !== sap.ui.core.TextDirection.Inherit) {
					oRm.writeAttribute("dir", sTextDir.toLowerCase());
				}

				if (sTextAlign) {
					sTextAlign = Renderer.getTextAlign(sTextAlign, sTextDir);
					if (sTextAlign) {
						oRm.addStyle("text-align", sTextAlign);
					}
				}

				// finish writing html
				oRm.writeClasses();
				oRm.writeStyles();
				oRm.write(">");

				oRm.writeEscaped(sText);

				// finalize
				oRm.write("</span>");
			},
			updateDomValue: function(sValue) {

				if (!this.isActive()) {
					return this;
				}

				// respect to max length
				sValue = this._getInputValue(sValue);

				// update the DOM value when necessary
				// otherwise cursor can goto end of text unnecessarily
				if (this.$().text() !== sValue) {
					this.$().text(sValue);

					// dom value updated other than value property
					this._bCheckDomValue = true;
				}

				return this;
			},
			getValue: function() {
				return this.getProperty("value");
			},
			getFocusDomRef: function() {
				return this.getDomRef();
			},
			getEditable: function() {
				return false;
			}
		});

		return new DisplayComboBox(this._oParent.getId() + "-comboBoxDisp", mAttributes);
	};

	/**
	 * Creates an instance of <code>sap.m.Select</code> based on OData meta data.
	 *
	 * @param {object} oValueHelp the value help configuration
	 * @param {object} oValueHelp.annotation the value help annotation
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted
	 * @return {sap.m.Select} the new control instance
	 * @private
	 */
	ODataControlFactory.prototype._createSelect = function(oValueHelp) {
		var mNames = {
			width: true,
			name: true
		},
		mAttributes = this.createAttributes("selectedKey", this._oMetaData.property, mNames);
		mAttributes.change = this._oHelper.getSelectionChangeHandler(this._oParent);

		// BCP: 1680012515
		mAttributes.forceSelection = false;

		if (mAttributes.width === "") {
			mAttributes.width = "100%";
		}

		return {
			control: new Select(this._oParent.getId() + "-select", mAttributes),
			onCreate: "_onCreate",
			params: {
				valuehelp: {
					annotation: oValueHelp.annotation,
					aggregation: "items",
					noDialog: oValueHelp.noDialog,
					noTypeAhead: oValueHelp.noTypeAhead
				},
				getValue: "getSelectedKey",
				type: {
					type: mAttributes.selectedKey.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates an instance of <code>sap.m.CheckBox</code> based on OData meta data. The Edm.Type of the property is <code>Edm.String</code> with
	 * <code>maxLength</code> <code>1</code>.
	 *
	 * @return {sap.m.CheckBox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createCheckBox = function() {
		var mAttributes = this.createAttributes("selected", null, {}, {
			event: "select",
			parameter: "selected"
		});
		mAttributes.editable = (this._oParent.getEditable() && this._oParent.getEnabled() && this._oParent.getContextEditable());
		mAttributes.selected.type = this._oTypes.getAbapBoolean();

		return {
			control: new CheckBox(this._oParent.getId() + "-cBox", mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getSelected"
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property of type <code>Edm.DateTime</code>. Either an instance of
	 * <code>sap.m.DateTimePicker</code> is returned or <code>sap.m.DatePicker</code>, if the attribute <code>display-format</code> of the
	 * OData property the control is bound to has the value <code>Date</code> or the control configuration is accordingly.
	 *
	 * @return {sap.ui.core.Control} The new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmDateTime = function() {
		var mNames = {
				width: true,
				textAlign: true,
				placeholder: true,
				name: true
			},
			mAttributes = this.createAttributes(null, this._oMetaData.property, mNames, {
				event: "change",
				parameter: "value"
			}),
			mOptions = this.getFormatSettings("dateFormatSettings");

		// check whether a date picker has been configured.
		if (this._oSelector.checkDatePicker()) {
			mAttributes.value = {
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property, mOptions, {
					displayFormat: "Date"
				}),
				model: this._oMetaData.model
			};

			// set display format to keep data type and date picker control "in sync".
			if (mOptions && mOptions.style) {
				mAttributes.displayFormat = mOptions.style;
			}

			return {
				control: new DatePicker(this._oParent.getId() + "-datePicker", mAttributes),
				onCreate: "_onCreate",
				params: {
					getValue: "getValue",
					type: {
						type: mAttributes.value.type,
						property: this._oMetaData.property
					}
				}
			};
		}

		// create the default control.
		mAttributes.value = {
			path: this._oMetaData.path,
			model: this._oMetaData.model,
			type: this._oTypes.getType(this._oMetaData.property, mOptions)
		};

		return {
			control: new DateTimePicker(this._oParent.getId() + "-input", mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property of type <code>Edm.DateTimeOffset</code>.
	 *
	 * @return {sap.m.DateTimePicker} The new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmDateTimeOffset = function() {
		var mOptions = this.getFormatSettings("dateFormatSettings");

		// The UTC format option of the DateTimeOffset data type class should always be set to false for properties
		// typed as Edm.DateTimeOffset, as the time zone should be always UTC.
		// If the UTC setting provided by the application through custom data is set to true, it should NOT be passed to
		// the DateTimeOffset data type class as format option, because the date should be parsed and formatted as local
		// time zone instead of UTC.
		if (mOptions) {
			mOptions.UTC = false;
		}

		var mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		};
		var mAttributes = this.createAttributes(null, this._oMetaData.property, mNames, {
			event: "change",
			parameter: "value"
		});
		mAttributes.value = {
			model: this._oMetaData.model,
			path: this._oMetaData.path,
			type: this._oTypes.getType(this._oMetaData.property, mOptions)
		};

		return {
			control: new DateTimePicker(this._oParent.getId() + "-input", mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property that is of a numeric <code>Edm type</code>.
	 *
	 * @return {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmNumeric = function() {
		var mNames = {
			width: true,
			textAlign: true,
			placeholder: true,
			name: true
		},
		mAttributes = this.createAttributes("value", this._oMetaData.property, mNames, {
			event: "change",
			parameter: "value"
		});

		if (this._oParent.isContextTable() && sap.ui.getCore().getConfiguration().getRTL()) {
			mAttributes.textDirection = "LTR";
		}

		return {
			control: new Input(this._oParent.getId() + "-input", mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getValue",
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				}
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property that represents a unit of measure.
	 *
	 * @return {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOM = function() {
		var sPath,
			oInput,
			oText,

			// create the input for the amount
			mAttributes = this._createEdmUOMAttributes(),
			oObject = this._oParent.getObjectBinding(this._oMetaData.model),
			mParams,
			oBox,
			oType,
			that = this;

		this.addObjectBinding(mAttributes, oObject);
		var bRTLInTable = false;

		if (this._oParent.isContextTable() && sap.ui.getCore().getConfiguration().getRTL()) {
			bRTLInTable = true;
		}

		if (bRTLInTable) {
			mAttributes.textDirection = "LTR";
		}

		oInput = new Input(this._oParent.getId() + "-input", mAttributes);

		// if the unit is not to be displayed, just return the input for the amount.
		if (this._oParent.data("suppressUnit") === "true") {
			mParams = {
				getValue: "getValue"
			};

			// if not currency-code, the type has to be completed.
			if (!this._oHelper.oAnnotation.isCurrency(this._oMetaData.annotations.uom.property.property)) {
				mParams.type = {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				};
			}

			return {
				control: oInput,
				onCreate: "_onCreate",
				params: mParams
			};
		}

		// if not currency-code, the type has to be completed.
		if (!this._oHelper.oAnnotation.isCurrency(this._oMetaData.annotations.uom.property.property)) {
			oType = {
				type: mAttributes.value.type,
				property: this._oMetaData.property
			};
		}

		// create the unit control as smart field.
		sPath = this._oHelper.getUOMPath(this._oMetaData);
		mAttributes = {
			value: {
				model: this._oMetaData.model,
				path: sPath
			},
			change: this._oHelper.getUOMChangeHandler(this._oParent, true),
			textAlign: this._getEdmUOMTextAlignment()
		};
		this.addObjectBinding(mAttributes, oObject);
		this.mapBindings(mAttributes, {
			"uomEditable": "editable",
			"uomEnabled": "enabled",
			"uomVisible": "visible",
			"mandatory": "mandatory",
			"contextEditable": "contextEditable"
		});

		if (this._oParent.getConfiguration()) {
			mAttributes.configuration = new sap.ui.comp.smartfield.Configuration({
				preventInitialDataFetchInValueHelpDialog: this._getPreventInitialDataFetchInVHDialog()
			});
		}

		oText = new sap.ui.comp.smartfield.SmartField(this._oParent.getId() + "-sfEdit", mAttributes);
		oText.data("configdata", {
			"configdata": {
				isInnerControl: true,
				isUOM: !this._oParent.data("configdata"),
				model: this._oMetaData.model,
				navigationPath: this._oMetaData.annotations.uom.navigationPath || null,
				path: sPath,
				entitySetObject: this._oMetaData.annotations.uom.entitySet,
				entityType: this._oMetaData.annotations.uom.entityType,
				property: this._oMetaData.annotations.uom.property,
				annotations: {
					valuelist: this._oMetaData.annotations.valuelistuom,
					valuelistType: this._oMetaData.annotations.uom.annotations.valuelistType,
					text: this._oMetaData.annotations.textuom
				},
				modelObject: this._oMetaData.modelObject || this._oModel,
				onText: function(oInnerControl) {
					oInput.setLayoutData(new FlexItemData({
						growFactor: 1
					}));
					oText.setLayoutData(new FlexItemData({
						shrinkFactor: 0
					}));

					// mark the unit.
					if (oInnerControl) {
						if (bRTLInTable && oInnerControl.setTextDirection) {
							oInnerControl.setTextDirection("LTR");
						}
						if ((that._oParent.getControlContext() !== "table") && (that._oParent.getControlContext() !== "responsiveTable")) {
							oInnerControl.addStyleClass("sapUiCompSmartFieldUnit");
						}
					}
				},
				onInput: function(oInnerControl) {
					oInput.setLayoutData(new FlexItemData({
						growFactor: 1
					}));
					oText.setLayoutData(new FlexItemData({
						growFactor: 0
					}));

					// mark the unit.
					if (oInnerControl) {
						if (bRTLInTable && oInnerControl.setTextDirection) {
							oInnerControl.setTextDirection("LTR");
						}
						if (that._oParent && (that._oParent.getControlContext() !== "table") && (that._oParent.getControlContext() !== "responsiveTable")) {
							oInnerControl.addStyleClass("sapUiCompSmartFieldUnit");
						}
					}
				}
			}
		});
		oText.data("errorCheck", "setComplexClientErrorSecondOperandNested");
		oInput.addAriaLabelledBy(oText);

		// return amount and unit in a horizontal box.
		oInput.addStyleClass("smartFieldPaddingRight");
		oInput.addStyleClass("sapUiCompSmartFieldValue");

		oBox = new HBox({
			justifyContent: FlexJustifyContent.End,
			items: [
				oInput, oText
			],
			fitContainer: true,
			width: this._oParent.getWidth()
		});

		// add style for nested smart field, especially display case (text box).
		oBox.addStyleClass("sapUiCompUOM");

		if (this._oParent.isContextTable()) {
			if (bRTLInTable) {
				oBox.addStyleClass("sapUiCompDirectionLTR");
			}
			oBox.addStyleClass("sapUiCompUOMInTable");
		}

		return {
			control: oBox,
			onCreate: "_onCreateUOM",
			params: {
				getValue: true,
				valuehelp: true,
				type: oType
			}
		};
	};

	/**
	 * Creates the arguments for construction call for the unit of measure.
	 *
	 * @return {map} the arguments for construction call for the unit of measure.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOMAttributes = function() {
		var mAttributes = {
			textAlign: this._getEdmUOMTextAlignment(),
			placeholder: this.getAttribute("placeholder"),
			name: this.getAttribute("name"),
			change: this._oHelper.getUOMChangeHandler(this._oParent)
		};

		if (this._oMetaData.annotations.uom && this._oHelper.oAnnotation.isCurrency(this._oMetaData.annotations.uom.property.property)) {
			mAttributes.value = {
				parts: [
					{
						path: this._oMetaData.path
					}, {
						path: this._oHelper.getUOMPath(this._oMetaData)
					}
				],
				model: this._oMetaData.model,
				type: this._oTypes.getCurrencyType(this._oMetaData.property)
			};
		} else {
			mAttributes.value = {
				model: this._oMetaData.model,
				path: this._oMetaData.path,
				type: this._oTypes.getType(this._oMetaData.property)
			};
		}

		return mAttributes;
	};

	/**
	 * Creates the <code>textAlignment</code> attribute value for unit of measure use cases.
	 *
	 * @returns {string} <code>textAlignment</code> attribute value for unit of measure use cases.
	 * @private
	 */
	ODataControlFactory.prototype._getEdmUOMTextAlignment = function() {
		var sAlignment = this.getAttribute("textAlign");

		if (!sAlignment) {
			sAlignment = TextAlign.Initial;
		}

		if (sAlignment === TextAlign.Initial) {
			if (this._oParent.isContextTable()) {
				return TextAlign.End;
			} else {
				return TextAlign.Begin;
			}
		}

		return sAlignment;
	};

	/**
	 * Creates a control instance based on OData meta data to display a model property that represents a unit of measure.
	 *
	 * @return {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOMDisplay = function() {
		var oValue,
			sPath = this._oHelper.getUOMPath(this._oMetaData),
			oObject,
			mAttributes,
			sAlign = this._getEdmUOMTextAlignment(), // check text alignment
			oBox,
			oText = null,
			oEdmProperty = this.getEdmProperty(),
			that = this,
			bRTLInTable = false;

		if (this._oParent.isContextTable() && sap.ui.getCore().getConfiguration().getRTL()) {
			bRTLInTable = true;
		}

		// create the text field for the amount
		mAttributes = {
			text: {
				parts: [
					{
						path: this._oMetaData.path,
						type: this._oTypes.getType(this._oMetaData.property)
					}, {
						path: sPath
					}
				],
				model: this._oMetaData.model,
				formatter: this._oTypes.getDisplayFormatter(oEdmProperty, this._oHelper.oAnnotation.isCurrency(oEdmProperty)),
				useRawValues: true
			},
			textAlign: sAlign
		};

		if (bRTLInTable) {
			mAttributes.textDirection = "LTR";
		}

		oObject = this._oParent.getObjectBinding(this._oMetaData.model);
		this.addObjectBinding(mAttributes, oObject);
		oValue = new Text(this._oParent.getId() + "-text", mAttributes);

		// create the unit control as smart field
		sPath = this._oHelper.getUOMPath(this._oMetaData);
		mAttributes = {
			value: {
				model: this._oMetaData.model,
				path: sPath
			},
			change: this._oHelper.getUOMChangeHandler(this._oParent, true),
			textAlign: this._getEdmUOMTextAlignment()
		};
		this.addObjectBinding(mAttributes, oObject);
		this.mapBindings(mAttributes, {
			"uomEditable": "editable",
			"uomEnabled": "enabled",
			"uomVisible": "visible",
			"mandatory": "mandatory",
			"contextEditable": "contextEditable"
		});

		// return amount and unit in a horizontal box.
		oValue.addStyleClass("smartFieldPaddingRight");
		oValue.addStyleClass("sapUiCompSmartFieldValue");

		if (!this._checkSuppressUnit()) {

			oText = new sap.ui.comp.smartfield.SmartField(this._oParent.getId() + "-sfDisp", mAttributes);
			oText.data("configdata", {
				"configdata": {
					isInnerControl: true,
					isUOM: !this._oParent.data("configdata"),
					model: this._oMetaData.model,
					navigationPath: this._oMetaData.annotations.uom.navigationPath || null,
					path: sPath,
					entitySetObject: this._oMetaData.annotations.uom.entitySet,
					entityType: this._oMetaData.annotations.uom.entityType,
					property: this._oMetaData.annotations.uom.property,
					annotations: {
						valuelist: this._oMetaData.annotations.valuelistuom,
						text: this._oMetaData.annotations.textuom
					},
					modelObject: this._oMetaData.modelObject || this._oModel,
					onText: function(oInnerControl) {

						// mark the unit.
						if (oInnerControl) {

							// do not wrap for UoM. Incident ID : 1570841150
							if (oInnerControl.setWrapping) {
								oInnerControl.setWrapping(false);
							}
							if (bRTLInTable && oInnerControl.setTextDirection) {
								oInnerControl.setTextDirection("LTR");
							}
							if (that._oParent && (that._oParent.getControlContext() !== "table") && (that._oParent.getControlContext() !== "responsiveTable")) {
								oInnerControl.addStyleClass("sapUiCompSmartFieldUnit");
							}
						}
					},
					onInput: function(oInnerControl) {
						oValue.setLayoutData(new FlexItemData({
							growFactor: 0
						}));
						oText.setLayoutData(new FlexItemData({
							growFactor: 0
						}));

						// mark the unit.
						if (oInnerControl) {
							if (bRTLInTable && oInnerControl.setTextDirection) {
								oInnerControl.setTextDirection("LTR");
							}
							if ((that._oParent.getControlContext() !== "table") && (that._oParent.getControlContext() !== "responsiveTable")) {
								oInnerControl.addStyleClass("sapUiCompSmartFieldUnit");
							}
						}
					},
					getContextEditable: function() {
						return that._oParent.getContextEditable();
					}
				}
			});
			oText.data("errorCheck", "setComplexClientErrorSecondOperandNested");

			oBox = new HBox({
				items: [
					oValue, oText
				],
				fitContainer: true,
				width: this._oParent.getWidth()
			});

			if (this._oParent.isContextTable()) {
				oBox.setJustifyContent("End");
				this._oParent.addStyleClass("sapUiCompUOMInTable");
				if (bRTLInTable) {
					oBox.addStyleClass("sapUiCompDirectionLTR");
				}
				oBox.addStyleClass("sapUiCompUOMInTable");
			}

			return {
				control: oBox
			};

		}

		return {
			control: oValue
		};

	};

	/**
	 * Checks whether the unit in unit of measure has to be suppressed in display.
	 *
	 * @returns {boolean} <code>true</code>, if the unit in unit of measure has to be suppressed in display, <code>false</code> otherwise
	 * @private
	 */
	ODataControlFactory.prototype._checkSuppressUnit = function() {

		if (this._oParent.data("suppressUnit") === "true") {
			return true;
		}

		var oInfo = this._oParent.getBindingInfo("uomVisible");
		return (!oInfo && !this._oParent.getUomVisible());
	};

	/**
	 * Creates a control instance based on OData meta data to display a model property that represents a unit of measure.
	 *
	 * @return {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOMObjectStatus = function() {
		var oObject,
			oObjectStatus,
			oEdmProperty = this.getEdmProperty(),

			// create the object status for the UOM.
			fFormat = this._oTypes.getDisplayFormatter(oEdmProperty, this._oHelper.oAnnotation.isCurrency(oEdmProperty)),
			sPath = this._oHelper.getUOMPath(this._oMetaData),
			mAttributes = {
				text: {
					parts: [
						{
							path: this._oMetaData.path,
							type: this._oTypes.getType(this._oMetaData.property)
						}, {
							path: sPath
						}
					],
					formatter: function() {
						var sResult = fFormat.apply(this, arguments);
						return sResult + arguments[1];
					},
					useRawValues: true
				}
			};

		this._addObjectStatusAttributes(mAttributes);

		oObject = this._oParent.getObjectBinding(this._oMetaData.model);
		this.addObjectBinding(mAttributes, oObject);
		oObjectStatus = new ObjectStatus(this._oParent.getId() + "-objStatus", mAttributes);

		// add style for nested smart field, especially display case (text box).
		oObjectStatus.addStyleClass("sapUiCompUOM");

		return {
			control: oObjectStatus
		};
	};

	/**
	 * Creates a control instance based on OData meta data to display a model property that represents a unit of measure.
	 *
	 * @return {sap.m.Input} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmUOMObjectNumber = function() {
		var mAttributes,
			oObject,
			oObjectNumber,

			// check text alignment
			sAlign = this._getEdmUOMTextAlignment();

		// create the attributes for the currency.
		if (this._oMetaData.annotations.uom && this._oHelper.oAnnotation.isCurrency(this._oMetaData.annotations.uom.property.property)) {
			mAttributes = {
				number: {
					parts: [
						{
							path: this._oMetaData.path
						}, {
							path: this._oHelper.getUOMPath(this._oMetaData)
						}
					],
					type: this._oTypes.getCurrencyType(this._oMetaData.property)
				},
				unit: {
					path: this._oHelper.getUOMPath(this._oMetaData)
				},
				model: this._oMetaData.model,
				textAlign: sAlign
			};
		} else {
			mAttributes = {
				model: this._oMetaData.model,
				number: {
					path: this._oMetaData.path,
					type: this._oTypes.getType(this._oMetaData.property)
				},
				unit: {
					path: this._oHelper.getUOMPath(this._oMetaData)
				},
				textAlign: sAlign
			};
		}

		oObject = this._oParent.getObjectBinding(this._oMetaData.model);
		this.addObjectBinding(mAttributes, oObject);

		// create the control.
		oObjectNumber = new ObjectNumber(this._oParent.getId() + "-objNumber", mAttributes);

		// add style for nested smart field, especially display case (text box).
		oObjectNumber.addStyleClass("sapUiCompUOM");

		return {
			control: oObjectNumber
		};
	};

	/**
	 * Creates a control instance based on OData meta data.
	 *
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmSemantic = function() {
		var mAttributes,
			oTextAnnotation,
			sUoMPath,
			that = this,
			oInfo = this._oParent.getBindingInfo("value"),
			sPath = oInfo.parts[0].path,
			oEdmProperty = this.getEdmProperty(),
			sLabel = oEdmProperty["sap:label"];

		if (this._oMetaData.annotations.lineitem && this._oMetaData.annotations.lineitem.labels && this._oMetaData.annotations.lineitem.labels[sPath]) {
			sLabel = this._oMetaData.annotations.lineitem.labels[sPath];
		}

		mAttributes = {
			semanticObject: this._oMetaData.annotations.semantic.defaultSemanticObject,
			additionalSemanticObjects: this._oMetaData.annotations.semantic.additionalSemanticObjects,
			semanticObjectLabel: sLabel,
			fieldName: sPath,
			width: this.getAttribute("width"),
			createControlCallback: function() {
				var oControl = this.createControl(true);

				if (oControl) {
					return oControl.control;
				}
				return null;
			}.bind(this)
		};

		oTextAnnotation = this._oHelper.oAnnotation.getText(oEdmProperty);

		if (oTextAnnotation) {
			mAttributes.text = {
				parts: [
					this._oMetaData.path, this._oHelper.getEdmDisplayPath(this._oMetaData)
				],
				model: this._oMetaData.model,
				formatter: function(sId, sDescription) {
					if (sId && sDescription) {
						return that._formatDisplayBehaviour("defaultInputFieldDisplayBehaviour", sId, sDescription);
					}

					return sId ? sId : "";
				}
			};
			mAttributes.navigationTargetsObtained = function(oEvent) {
				var oBinding = this.getBinding("text");

				if (!jQuery.isArray(oBinding.getValue())) {
					oEvent.getParameters().show();
					return;
				}

				var aValues = oBinding.getValue();
				var sDisplay = that._getDisplayBehaviourConfiguration("defaultInputFieldDisplayBehaviour") || "idOnly";
				var oTexts = FormatUtil.getTextsFromDisplayBehaviour(sDisplay, aValues[0], aValues[1]);
				var oMainNavigation = oEvent.getParameters().mainNavigation;

				// 'mainNavigation' might be undefined
				if (oMainNavigation) {
					oMainNavigation.setDescription(oTexts.secondText);
				}

				oEvent.getParameters().show(oTexts.firstText, oMainNavigation, undefined, undefined);
			};
		} else {
			sUoMPath = this._oHelper.getUOMPath(this._oMetaData);

			if (sUoMPath) {
				mAttributes.text = {
					parts: [
						{
							path: sPath
						}, {
							path: sUoMPath
						}
					],
					model: this._oMetaData.model,
					formatter: this._oHelper.oAnnotation.isCurrency(this._oMetaData.annotations.uom.property.property) ? FormatUtil.getAmountCurrencyFormatter() : FormatUtil.getMeasureUnitFormatter(),
					useRawValues: true
				};
				mAttributes.uom = {
					path: sUoMPath
				};
			} else {
				mAttributes.text = {
					path: sPath,
					model: this._oMetaData.model
				};
			}
		}

		return {
			control: new SmartLink(this._oParent.getId() + "-sl", mAttributes),
			onCreate: "_onCreate",
			params: {
				getValue: "getInnerControlValue"
			}
		};
	};

	/**
	 * Creates a control instance based on OData meta data.
	 *
	 * @param {map} mNames map of bind-able attributes
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createMultiLineText = function(mNames) {

		// create the default control.
		var mAttributes = this.createAttributes("value", this._oMetaData.property, mNames);
		var mOptions = this.getFormatSettings("multiLineSettings");
		mAttributes = jQuery.extend(true, mAttributes, mOptions);

		if (this._oParent.isContextTable()) {
			mAttributes.width = "100%";
		}

		var oControl = new TextArea(this._oParent.getId() + "-textArea", mAttributes);

		// add optional upper case conversion.
		this._handleEventingForEdmString(oControl, this._oMetaData.property);

		return {
			control: oControl,
			onCreate: "_onCreate",
			params: {
				type: {
					type: mAttributes.value.type,
					property: this._oMetaData.property
				},
				getValue: "getValue"
			}
		};

	};

	/*
	 * Gets the metadata property.
	 *
	 * @returns {object} The metadata property
	 * @protected
	 * @since 1.48
	 */
	ODataControlFactory.prototype.getEdmProperty = function() {
		var oHelper = this._oHelper;

		if (oHelper) {
			return oHelper.getEdmProperty(this._oMetaData);
		}

		return null;
	};

	/**
	 * Checks whether a link needs to be created.
	 *
	 * @returns {boolean} <code>true</code>, if a link needs to be created, <code>false</code> otherwise.
	 * @private
	 */
	ODataControlFactory.prototype._checkLink = function() {
		var oInfo = this._oParent.getBindingInfo("url"),
			oProperty = this.getEdmProperty();

		if (oInfo || this._oParent.getUrl() || ODataControlFactory.isSpecialLink(oProperty)) {
			return true;
		}

		return this._oParent.hasListeners("press");
	};

	/**
	 * Creates a control instance based on OData meta data.
	 *
	 * @return {sap.ui.core.Control} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createLink = function() {
		var that = this;
		var mAttributes = {
			text: "",
			href: ""
		},
		oParent = this._oParent,
		oBindingInfo = oParent.getBindingInfo("url");

		if (oBindingInfo) {
			mAttributes.href = this._oBinding.toBinding(oBindingInfo);
		} else {
			mAttributes.href = oParent.getUrl();
		}

		if (oParent.hasListeners("press")) {
			mAttributes.press = function(oEvent) {

				// block href default handling
				oEvent.preventDefault();
				oParent.firePress(oEvent);
			};
		}

		oBindingInfo = oParent.getBindingInfo("value");

		if (oBindingInfo) {
			var oMetaData = this._oMetaData, sPath = oMetaData.path, oProperty = oMetaData.property.property;

			// text may be Edm.String and may have a text annotation
			if (oMetaData.annotations.text && (oProperty.type === "Edm.String")) {
				mAttributes.text = {
					parts: [
						oMetaData.path,
						this._oHelper.getEdmDisplayPath(oMetaData)
					],
					formatter: this._formatText.bind(that)
				};
			} else if (ODataControlFactory.isSpecialLink(oProperty)) {
				var fnFormatter = ODataControlFactory[ODataControlFactory._getLinkFormatterFunctionName(oProperty)];

				mAttributes.text = {
					path: sPath
				};

				mAttributes.href = {
					path: sPath,
					formatter: null
				};

				if (typeof fnFormatter === "function") {
					mAttributes.href.formatter = fnFormatter;
				}
			} else {
				mAttributes.text = this._oBinding.toBinding(oBindingInfo);
			}
		} else {
			mAttributes.text = oParent.getValue();
		}

		return {
			control: new Link(oParent.getId() + "-link", mAttributes),
			onCreate: "_onCreate",
			params: {
				noValidation: true
			}
		};
	};

	ODataControlFactory.isSpecialLink = function(oProperty) {
		return MetadataAnalyser.isEmailAddress(oProperty) || MetadataAnalyser.isPhoneNumber(oProperty) || MetadataAnalyser.isURL(oProperty);
	};

	ODataControlFactory._getLinkFormatterFunctionName = function(oProperty) {
		return "_format" + MetadataAnalyser.getLinkDisplayFormat(oProperty);
	};

	ODataControlFactory._formatEmailAddress = function(sEmail) {
		return "mailto:" + sEmail;
	};

	ODataControlFactory._formatPhoneNumber = function(sPhone) {
		return "tel:" + sPhone;
	};

	ODataControlFactory._formatURL = function(sURL) {
		return jQuery.sap.validateUrl(sURL) ? sURL : "";
	};

	ODataControlFactory.prototype._formatText = function(sId, sDescription) {

		if (sId && sDescription) {
			return this._formatDisplayBehaviour("defaultInputFieldDisplayBehaviour", sId, sDescription);
		}

		return sId || "";
	};

	/**
	 * Creates a control instance based on OData meta data to edit a model property that is of type <code>Edm.Boolean</code>
	 *
	 * @return {sap.m.CheckBox} the new control instance.
	 * @private
	 */
	ODataControlFactory.prototype._createEdmBoolean = function() {
		var mAttributes,
			oCheck,
			oControl,
			that = this,
			params = null,
			bEditable = false;

		bEditable = this._oParent.getEditable() && this._oParent.getEnabled() && this._oParent.getContextEditable();

		oCheck = this._oSelector.checkComboBox();
		if (oCheck.combobox) {
			return this._createComboBox({
				annotation: oCheck.annotation,
				noDialog: true,
				noTypeAhead: true
			}, !bEditable);
		}

		if (bEditable) {

			mAttributes = this.createAttributes("selected", this._oMetaData.property, {}, {
				event: "select",
				parameter: "selected"
			});

			oControl = new CheckBox(this._oParent.getId() + "-cBoxBool", mAttributes);
			params = {
				getValue: "getSelected"
			};

		} else {
			mAttributes = this.createAttributes("text", this._oMetaData.property, {
				width: true,
				textAlign: true
			});

			mAttributes.text = {
				model: this._oMetaData.model,
				path: this._oMetaData.path
			};

			mAttributes.text.formatter = function(bValue) {
				return that._formatDisplayBehaviour("defaultCheckBoxDisplayBehaviour", bValue);
			};

			oControl = new Text(this._oParent.getId() + "-text", mAttributes);
		}

		return {
			control: oControl,
			onCreate: "_onCreate",
			params: params
		};
	};

	/**
	 * Returns the name of a method to create a control.
	 *
	 * @param {boolean} bBlockSmartLinkCreation if true, SmartLink will not be created
	 * @return {string} the name of the factory method to create the control.
	 * @private
	 */
	ODataControlFactory.prototype._getCreator = function(bBlockSmartLinkCreation) {

		// make sure that no exceptions occur, if the property is not valid
		// => necessary for extensibility use cases, if an extension field has been deleted and the UI has not yet been adapted.
		return this._oSelector.getCreator(bBlockSmartLinkCreation);
	};

	/**
	 * Event handler, that is invoked after successful creation of a nested control.
	 *
	 * @param {sap.ui.core.Control} oControl the new control
	 * @param {map} mParams parameters to further define the behavior of the event handler
	 * @param {function} mParams.getValue optional call-back to get the current value from the current control
	 * @param {boolean} mParams.valuehelp if set to <code>true</code> a possibly existing value help is attached to the new control
	 * @private
	 */
	ODataControlFactory.prototype._onCreate = function(oControl, mParams) {
		var sGetValue,
			fControl,
			bValidations = true,
			that = this;

		if (mParams) {

			// check for validation.
			if (mParams.noValidation) {
				bValidations = false;
			}

			// add optional value help.
			if (mParams.valuehelp) {
				this._getValueHelpDialogTitle(mParams.valuehelp);
				mParams.valuehelp["analyser"] = this._oHelper.getAnalyzer(this._oModel || this._oMetaData.modelObject);
				this.createValueHelp(oControl, this.getEdmProperty(), mParams.valuehelp, this._oModel || this._oMetaData.modelObject, function(oEvent) {
					that._oParent.fireValueListChanged({
						"changes": oEvent.mParameters.changes
					});
				});
			}

			// add optional getValue call-back.
			if (mParams.getValue) {
				sGetValue = mParams.getValue;
				mParams.getValue = function() {
					return oControl[sGetValue]();
				};
			}

			// complete the data: add field-control.
			if (mParams.type) {
				fControl = this._oFieldControl.getMandatoryCheck(mParams.type.property);

				if (fControl) {
					mParams.type.type.oFieldControl = fControl;
				}
			}
		}

		// add optional validations.
		if (bValidations) {

			// if the field is a unit in unit of measure, the error check configuration is set.
			// otherwise apply the default.
			this.addValidations(oControl, this._oParent.data("errorCheck") || "setSimpleClientError");

			// add static mandatory check
			if (this._oParent._getMode() !== "display") {
				oControl.attachValidationSuccess(function(oEvent) {
					if (!that._oParent.getValue()) {
						if (that._oMetaData.property && that._oMetaData.property.property && that._oHelper.oAnnotation.isStaticMandatory(that._oMetaData.property.property)) {
							if (oControl.setValueStateText) {
								oControl.setValueStateText(that._oRb.getText("VALUEHELPVALDLG_FIELDMESSAGE"));
								oControl.setValueState(sap.ui.core.ValueState.Error);
								that._oParent.setSimpleClientError(true);
							}
						}
					}
				});
			}
		}

		if (!this._checkUOM()) {
			oControl.addStyleClass("sapUiCompSmartFieldValue");
		}
	};

	/**
	 * Add type-ahead and value help on request.
	 *
	 * @private
	 */
	ODataControlFactory.prototype._createValueHelp = function() {
		var oControl = this._oParent.getAggregation("_content");

		if (!oControl) {
			return;
		}

		var oValueHelp = {
			annotation: this._oMetaData.annotations.valuelist,
			noDialog: !this._oParent.getShowValueHelp(),
			noTypeAhead: !this._oParent.getShowSuggestion(),
			aggregation: "suggestionRows"
		};

		this._getValueHelpDialogTitle(oValueHelp);
		oValueHelp["analyser"] = this._oHelper.getAnalyzer(this._oModel || this._oMetaData.modelObject);
		this.createValueHelp(oControl, this.getEdmProperty(), oValueHelp, this._oModel || this._oMetaData.modelObject, function(oEvent) {
			this._oParent.fireValueListChanged({
				"changes": oEvent.mParameters.changes
			});
		}.bind(this));
	};

	/**
	 * Checks whether the control was created as unit in unit of measure.
	 *
	 * @returns {boolean} <code>true</code>, if the control was created as unit in unit of measure, <code>false</code> otherwise.
	 * @private
	 */
	ODataControlFactory.prototype._checkUOM = function() {
		var oConfig = this._oParent.data("configdata");

		if (oConfig && oConfig.configdata) {
			if (oConfig.configdata.onInput || oConfig.configdata.onText) {
				return true;
			}
		}

		return false;
	};

	/**
	 * Calculates the title for the value help dialog.
	 *
	 * @param {object} oValueHelp the value help configuration
	 * @param {object} oValueHelp.annotation the value help annotation
	 * @param {string} oValueHelp.aggregation the aggregation to attach the value list to
	 * @param {boolean} oValueHelp.noDialog if set to <code>true</code> the creation of a value help dialog is omitted
	 * @param {boolean} oValueHelp.noTypeAhead if set to <code>true</code> the type ahead functionality is omitted
	 * @param {string} oValueHelp.dialogtitle title for the value help dialog
	 * @private
	 */
	ODataControlFactory.prototype._getValueHelpDialogTitle = function(oValueHelp) {
		oValueHelp.dialogtitle = this._oParent.getTextLabel();

		if (!oValueHelp.dialogtitle) {
			var oEdmProperty = this.getEdmProperty();
			oValueHelp.dialogtitle = this._oHelper.oAnnotation.getLabel(oEdmProperty) || oEdmProperty.name;
		}
	};

	/**
	 * Event handler, that is invoked after successful creation of a nested control.
	 *
	 * @param {sap.ui.core.Control} oControl the new control
	 * @param {map} mParams parameters to further define the behavior of the event handler
	 * @param {function} mParams.getValue optional call-back to get the current value from the current control
	 * @param {boolean} mParams.valuehelp if set to <code>true</code> a possibly existing value help is attached to the new control
	 * @private
	 */
	ODataControlFactory.prototype._onCreateUOM = function(oControl, mParams) {
		var aItems = oControl.getItems(),
			fControl,
			that = this;

		// add validation to amount only.
		this.addValidations(aItems[0], "setComplexClientErrorFirstOperand");

		// add static mandatory check
		if (this._oParent._getMode() !== "display") {
			aItems[0].attachValidationSuccess(function(oEvent) {
				if (!that._oParent.getValue()) {
					if (that._oMetaData.property && that._oMetaData.property.property && that._oHelper.oAnnotation.isStaticMandatory(that._oMetaData.property.property)) {
						if (aItems[0].setValueStateText) {
							aItems[0].setValueStateText(that._oRb.getText("VALUEHELPVALDLG_FIELDMESSAGE"));
							aItems[0].setValueState(sap.ui.core.ValueState.Error);
							that._oParent.setComplexClientErrorFirstOperand(true);
						}
					}
				}
			});
		}

		// add optional value call-back.
		if (mParams && mParams.getValue) {
			mParams.getValue = function() {
				return aItems[0].getValue();
			};
		}

		// add optional unit of measure call-back.
		mParams.uom = function() {
			return aItems[1].getValue();
		};

		mParams.uomset = function(sValue) {
			aItems[1].setValue(sValue);
		};

		// complete the data: add field-control.
		// mind that this is done explicitly only for non currency use-cases.
		if (mParams.type) {
			fControl = this._oFieldControl.getMandatoryCheck(mParams.type.property);

			if (fControl) {
				mParams.type.type.oFieldControl = fControl;
			}
		}
	};

	/**
	 * Binds the properties of the control to formatter functions.
	 *
	 * @public
	 */
	ODataControlFactory.prototype.bind = function() {
		var that = this,
			aNames,
			oConfig,
			fInit = function(oMetaData, aProperties) {
				try {
					that._init(oMetaData);
					that._setUOMEditState();
					that._bind(aProperties);
				} catch (ex) {
					jQuery.sap.log.warning(ex, null, "sap.ui.comp.smartfield.ODataControlFactory.bind.fInit");
				}
			};

		if (!this._bInitialized && !this.bPending) {
			this._bInitialized = true;
			aNames = this._oFieldControl.getBindableAttributes();
			oConfig = this._oParent.data("configdata");

			if (oConfig && oConfig.configdata) {
				fInit(this._oMeta, aNames);
			} else if (this._oModel) {
				this.bPending = true;
				this._oModel.getMetaModel().loaded().then(function() {
					that.bPending = false;
					fInit(that._oMeta, aNames);
				});
			}
		}
	};

	/**
	 * Replaces the given bindings by formatter functions.
	 *
	 * @param {array} aBindings current bindings on <code>SmartField</code>
	 * @private
	 */
	ODataControlFactory.prototype._bind = function(aBindings) {
		var mBind,

			// make sure that no exceptions occur, if the property is not valid
			// => necessary for extensibility use cases, if an extension field has been deleted and the UI has not yet been adapted.
			// and if the smart field's value property is not bound, but a URL has to be displayed.
			mFormatters = this._oFieldControl.getControlProperties(this._oMetaData, aBindings);

		for (var n in mFormatters) {
			mBind = this._oBinding.fromFormatter(this._oMetaData.model, mFormatters[n]);
			this._oParent.bindProperty(n, mBind);
		}

		// notify that the meta data is available.
		this._oParent.fireInitialise();
	};

	/**
	 * Rebinds properties on this smart field, if the entity instance the smart field is associated with changes its state from existing in main
	 * memory to persistent on data base.
	 *
	 * @private
	 */
	ODataControlFactory.prototype.rebindOnCreated = function() {
		var mBind,

			// make sure that no exceptions occur, if the property is not valid
			// => necessary for extensibility use cases, if an extension field has been deleted and the UI has not yet been adapted.
			// and if the smart field's value property is not bound, but a URL has to be displayed.
			mFormatters = this._oFieldControl.getControlProperties(this._oMetaData, [
				"editable"
			]);

		for (var n in mFormatters) {
			mBind = this._oBinding.fromFormatter(this._oMetaData.model, mFormatters[n]);
			this._oParent.bindProperty(n, mBind);
		}
	};

	/**
	 * Optionally sets a formatter for the uomEditState property.
	 *
	 * @private
	 */
	ODataControlFactory.prototype._setUOMEditState = function() {

		if (this._oFieldControl.hasUomEditState(this._oMetaData)) {
			var oFormatter = this._oFieldControl.getUOMEditState(this._oMetaData);

			if (oFormatter) {
				var mBind = this._oBinding.fromFormatter(this._oMetaData.model, oFormatter);
				this._oParent.bindProperty("uomEditState", mBind);
			}
		}
	};

	/**
	 * Returns the property of the oData
	 *
	 * @return {object} the oData property
	 * @public
	 */
	ODataControlFactory.prototype.getDataProperty = function() {
		return this._oMetaData.property;
	};

	/**
	 * Returns the currently available meta data.
	 *
	 * @returns {map} the currently available meta data
	 * @public
	 */
	ODataControlFactory.prototype.getMetaData = function() {
		return this._oMetaData;
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 *
	 * @public
	 */
	ODataControlFactory.prototype.destroy = function() {

		if (this._oFieldControl) {
			this._oFieldControl.destroy();
		}

		if (this._oSelector) {
			this._oSelector.destroy();
		}

		if (this._oTypes) {
			this._oTypes.destroy();
		}

		if (this._oHelper) {
			this._oHelper.destroy();
		}

		this._oHelper = null;
		this._oFieldControl = null;
		this._oTypes = null;
		this._oSelector = null;
		this._oMetaData = null;

		ControlFactoryBase.prototype.destroy.apply(this, arguments);
	};

	return ODataControlFactory;
}, true);

}; // end of sap/ui/comp/smartfield/ODataControlFactory.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SmartField') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartfield.SmartField.
jQuery.sap.declare('sap.ui.comp.smartfield.SmartField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ValidateException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SmartField",[
	"jquery.sap.global", "sap/ui/comp/library", "./JSONControlFactory", "./ODataControlFactory", "./BindingUtil", "./SideEffectUtil", "./ODataHelper", "sap/ui/core/Control", "sap/ui/model/ParseException", "sap/ui/model/ValidateException","sap/ui/model/json/JSONModel", "sap/ui/core/ValueState"
], function(jQuery, library, JSONControlFactory, ODataControlFactory, BindingUtil, SideEffectUtil, ODataHelper, Control, ParseException, ValidateException, JSONModel, ValueState) {
	"use strict";

	/**
	 * Constructor for a new <code>sap.ui.comp.smartfield.SmartField</code>.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The <code>SmartField</code> control is a wrapper for other controls. It interprets OData metadata to determine the control that has to
	 *        be instantiated. The OData entity is derived from the control's binding context. The OData entity's property that is changed or
	 *        displayed with the control is derived from the control's value property.
	 * @extends sap.ui.core.Control
	 * @implements sap.ui.core.IFormContent
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartfield.SmartField
	 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time meta model
	 */
	var SmartField = Control.extend("sap.ui.comp.smartfield.SmartField", /** @lends sap.ui.comp.smartfield.SmartField.prototype */
	{
		metadata: {
			interfaces : ["sap.ui.core.IFormContent"],
			library: "sap.ui.comp",
			designTime: true,
			properties: {
				/**
				 * The value property keeps the current value of the control. If a binding expression is configured, this is used to determine the
				 * property of an OData entity.
				 */
				value: {
					type: "any",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Indicates whether the user can interact with the control or not. <b>Note:</b> Disabled controls cannot be focused and they are out
				 * of the tab order.
				 */
				enabled: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The name of an entity set for which the control manages values. This is an optional property.
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * Sets the control into an editable mode or a display mode.
				 */
				editable: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Notifies the control whether controls using the <code>SmartField</code> control are editable.
				 *
				 * @since 1.32.0
				 */
				contextEditable: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Defines the width of the control.
				 */
				width: {
					type: "sap.ui.core.CSSSize",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * Horizontal alignment of the text.
				 */
				textAlign: {
					type: "sap.ui.core.TextAlign",
					group: "Misc",
					defaultValue: sap.ui.core.TextAlign.Initial
				},

				/**
				 * Text shown when no value available.
				 */
				placeholder: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * To be used in the HTML code (for example, for HTML forms that send data to the server via 'submit').
				 */
				name: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
				 */
				valueState: {
					type: "sap.ui.core.ValueState",
					group: "Appearance",
					defaultValue: ValueState.None
				},

				/**
				 * The text which is shown in the value state message popup.
				 */
				valueStateText: {
					type: "string",
					group: "Appearance",
					defaultValue: ""
				},

				/**
				 * Defines whether the value state message is shown or not.
				 */
				showValueStateMessage: {
					type: "boolean",
					group: "Appearance",
					defaultValue: true
				},

				/**
				 * Data types to be used, if the <code>SmartField</code> control is interacting with a JSON model. If the value property of the
				 * control is bound to a property of an OData entity set, this property is not taken into consideration.
				 *
				 * @deprecated Since 1.31.0
				 */
				jsontype: {
					type: "sap.ui.comp.smartfield.JSONType",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code>, a user input is required.
				 */
				mandatory: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Maximum number of characters. Value <code>0</code> means the feature is switched off.
				 */
				maxLength: {
					type: "int",
					group: "Misc",
					defaultValue: 0
				},

				/**
				 * If set to <code>true</code>, the suggestion feature for a hosted control is enabled, if the hosted control supports it.
				 */
				showSuggestion: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If set to <code>true</code>, a value help indicator will be displayed inside the hosted control, if the hosted control supports
				 * this.
				 */
				showValueHelp: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If set to <code>false</code> the label is not displayed.
				 */
				showLabel: {
					type: "boolean",
					group: "Appearance",
					defaultValue: true
				},

				/**
				 * This property contains the text of an associated <code>SmartLabel</code>.
				 */
				textLabel: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * This property contains the tool tip of the associated <code>SmartLabel</code> control.
				 */
				tooltipLabel: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * Visible state of the unit, if the <code>SmartField</code> control addresses unit of measure use cases, for example, an amount and
				 * its associated currency.
				 */
				uomVisible: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Editable state of the unit, if the <code>SmartField</code> control addresses unit of measure use cases, for example, an amount
				 * and its associated currency.
				 */
				uomEditable: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Enabled state of the unit, if the <code>SmartField</code> control addresses unit of measure use cases, for example, an amount and
				 * its associated currency.
				 */
				uomEnabled: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Contains a URL which is used to render a link. The link is rendered, if the OData property, to which the value property of the
				 * control is bound, is of type <code>Edm.String</code> and the <code>SmartField</code> is in display mode.
				 */
				url: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},

				/**
				 * This property is for internal use only.
				 *
				 * @since 1.32.0
				 */
				uomEditState: {
					type: "int",
					group: "Misc",
					defaultValue: -1
				},

				/**
				 * Defines the context in which the layout of the <code>SmartField</code> control has to be interpreted.
				 *
				 * @since 1.32.0
				 */
				controlContext: {
					type: "sap.ui.comp.smartfield.ControlContextType",
					group: "Misc",
					defaultValue: sap.ui.comp.smartfield.ControlContextType.None
				},

				/**
				 * Proposes a control to be rendered. The <code>SmartField</code> control can ignore the proposal.
				 *
				 * @deprecated Since 1.32.0
				 * @since 1.32.0
				 */
				proposedControl: {
					type: "sap.ui.comp.smartfield.ControlProposalType",
					group: "Misc",
					defaultValue: sap.ui.comp.smartfield.ControlProposalType.None
				},

				/**
				 * Indicates whether the control break lines (in display mode) to prevent overflow.
				 *
				 * @since 1.36.6
				 */
				wrapping: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Determines if the mandatory check happens on the client side <code>true</code> or on the server side <code>false</code>.
				 *
				 * @since 1.38.3
				 */
				clientSideMandatoryCheck: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Determines whether the <code>SmartField</code> control fetches its value list to display the description for a given key (<code>value</code>
				 * property) in read-only mode. If the value list is not fetched by the read-only <code>SmartField</code> control, the application
				 * has to make sure that the description is requested and made available, for example, by using $expand. In this case the
				 * <code>SmartField</code> control will display the description if the path to the description has been set using the
				 * <code>com.sap.vocabularies.Common.v1.Text</code> annotation.
				 *
				 * @since 1.42.0
				 */
				fetchValueListReadOnly: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Indicates if entities related to navigation properties inside the metadata are requested.
				 * If set to <code>true</code>, then these related entities are loaded with an $expand request.
				 *
				 * Annotations that can have navigation properties are the following:
				 * <ul>
				 * 	<li> <code>com.sap.vocabularies.Common.v1.Text</code> for text arrangements
				 * 	<li> <code>Org.OData.Measures.V1.Unit</code> and <code>Org.OData.Measures.V1.ISOCurrency</code> for units
				 * 	<li> <code>com.sap.vocabularies.Common.v1.FieldControl</code> for field control
				 * </ul>
				 *
				 * <b>Note:</b> Independent of the <code>fetchValueListReadOnly</code> value, setting this flag to <code>true</code>
				 * requests data from the backend.
				 *
				 * <b>Note:</b> The backend request to expand the navigation properties is sent only if the entity to which <code>SmartField</code> is bound is persisted.
				 * For transient entities, there is no backend request since no such data is available.
				 *
				 * @since 1.48
				 */
				expandNavigationProperties: {
					type: "boolean",
					group: "Behavior",
					defaultValue: false
				}
			},
			aggregations: {
				/**
				 * The content aggregation is used to hold the control that is hosted by the <code>SmartField</code> control.
				 */
				_content: {
					type: "sap.ui.core.Control",
					multiple: false,
					visibility: "hidden"
				},

				/**
				 * Optional configuration for <code>SmartField</code>.
				 */
				configuration: {
					type: "sap.ui.comp.smartfield.Configuration",
					multiple: false
				},

				/**
				 * Proposes a control to be rendered. The <code>SmartField</code> control can ignore the proposal.
				 *
				 * @since 1.32.0
				 * @deprecated Since 1.34.0
				 */
				controlProposal: {
					type: "sap.ui.comp.smartfield.ControlProposal",
					multiple: false
				},

				/**
				 * Collects the texts to be used for the ARIA labels.<br>
				 * The InvisibleText controls will be added to the DOM by the <code>SmartField</code> control.
				 *
				 * @since 1.34.2
				 */
				_ariaLabelInvisibleText: {
					type: "sap.ui.core.InvisibleText",
					multiple: true,
					visibility: "hidden"
				},

				/**
				 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
				 */
				semanticObjectController: {
					type: "sap.ui.comp.navpopover.SemanticObjectController",
					multiple: false
				}
			},
			associations: {
				/**
				 * Association to controls / IDs which label this control (see WAI-ARIA attribute <code>aria-labelledby</code>).
				 *
				 * @since 1.34.2
				 */
				ariaLabelledBy: {
					type: "sap.ui.core.Control",
					multiple: true,
					singularName: "ariaLabelledBy"
				}
			},
			events: {
				/**
				 * The OData entity set is either derived from the control's binding context or from control's entity set property, if a value for it
				 * is specified. In both cases this event is fired.
				 */
				entitySetFound: {
					parameters: {
						/**
						 * The path to the found entity set
						 */
						entitySet: {
							type: "string"
						}
					}
				},

				/**
				 * The event is fired after the text in the field has been changed and the focus leaves the field, or after the Enter key has been
				 * pressed.
				 *
				 */
				change: {
					parameters: {
						/**
						 * The current value inside the text field
						 */
						value: {
							type: "string"
						},
						/**
						 * The new value inside the text field
						 */
						newValue: {
							type: "string"
						}
					}
				},

				/**
				 * The event is fired after the smart field has calculated its metadata.
				 *
				 */
				initialise: {},

				/**
				 * The event is fired after the visibility of the control has changed.
				 */
				visibleChanged: {
					parameters: {
						/**
						 * If <code>true</code>, the control is visible
						 */
						visible: {
							type: "boolean"
						}
					}
				},

				/**
				 * The event is fired after the value of editable property of the control has changed.
				 *
				 * @since 1.30.0
				 */
				editableChanged: {
					parameters: {
						/**
						 * If <code>true</code>, the control is in edit mode
						 */
						editable: {
							type: "boolean"
						}
					}
				},

				/**
				 * The event is fired after the context editable property of the control has changed.
				 *
				 * @since 1.32.0
				 */
				contextEditableChanged: {
					parameters: {
						/**
						 * The value of the context editable property of the control
						 */
						editable: {
							type: "boolean"
						}
					}
				},

				/**
				 * The event is fired after the inner controls have been created. The created controls can be obtained via oControl.getInnerControls().
				 */
				innerControlsCreated: {},

				/**
				 * The event is fired when after selection of values with value help or auto-suggest, the model is updated with the selected data.
				 *
				 * @since 1.31.0
				 *
				 */
				valueListChanged: {
					parameters: {
						/**
						 * An array of selected values
						 */
						changes: {
							type: "sap.ui.core.Control[]"
						}
					}
				},

				/**
				 * Fires when the user triggers the link control or taps/clicks on an active title of the object identifier control.
				 *
				 *
				 * @since 1.36.0
				 */
				press: {}
			}
		},
		/**
		 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
		 *
		 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered.
		 * @private
		 * @since 1.34.0
		 */
		renderer: function(oRm, oControl) {
			oRm.write("<div ");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUiCompSmartField");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl.getAggregation("_content"));
			if (oControl.getAggregation("_ariaLabelInvisibleText")) {
				oControl.getAggregation("_ariaLabelInvisibleText").forEach(function(oInvisibleText) {
					oRm.renderControl(oInvisibleText);
				});
			}
			oRm.write("</div>");
		}
	});

	/**
	 * Returns the Edm data type of either the OData property to which the value property of the control is bound or the data type of the attribute in
	 * the JSON model used. If no model is available null is returned.
	 *
	 * @name sap.ui.comp.smartfield.SmartField#getDataType
	 * @function
	 * @type string
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * If the control's value property is bound to an OData property that semantically represents a unit of measure, the value of the current unit of
	 * measure is returned. Otherwise <code>null</code> is returned.
	 *
	 * @name sap.ui.comp.smartfield.SmartField#getUnitOfMeasure
	 * @function
	 * @type string
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	/**
	 * If the control's value property is bound to an OData property that semantically represents a unit of measure, the value of the current unit of
	 * measure can be changed.
	 *
	 * @name sap.ui.comp.smartfield.SmartField#setUnitOfMeasure
	 * @function
	 * @param {string} sSUnit The new unit of measure to be set.
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */

	SmartField.prototype.init = function() {
		this._bInDestroy = false;
		this._oSideEffects = new SideEffectUtil(this);
		this._oFactory = null;
		this._bValueHelpCreated = false;

		this._oControl = {
			display: null,
			"display_uom": null,
			edit: null,
			current: null
		};

		this._oValue = {
			display: null,
			edit: null,
			uom: null,
			uomset: null
		};

		this._oError = {
			bComplex: false,
			bFirst: false,
			bSecond: false
		};

		this._sBindingContextPath = "";
		this._oValueBind = null;
		this._oUtil = new BindingUtil();
		this._bSuppressToggleControl = false;

		this.attachEvent("innerControlsCreated",SmartField.prototype._setOnInnerControl,this);//inner controls not ready wait for creation
	};

	SmartField.prototype.setVisible = function(bVisible, bSuppressInvalidate) {
		var bOldVisible = this.getVisible();
		Control.prototype.setVisible.apply(this, arguments);
		bVisible = this.getVisible();

		if (bVisible !== bOldVisible) {
			this.fireVisibleChanged({
				visible: bVisible
			});
		}

		return this;
	};

	SmartField.prototype.setEditable = function(bEditable) {
		var bOldEditable = this.getEditable();
		this.setProperty("editable", bEditable, true);
		bEditable = this.getEditable();
		this._bPendingEditableState = false;
		this._toggleControl();

		if (bEditable !== bOldEditable) {
			this.fireEditableChanged({
				editable: bEditable
			});
		}

		return this;
	};

	SmartField.prototype.setContextEditable = function(bContextEditable) {
		var bOldContextEditable = this.getContextEditable();
		this.setProperty("contextEditable", bContextEditable, true);
		bContextEditable = this.getContextEditable();
		this._bPendingEditableState = false;
		this._toggleControl();

		if (bContextEditable !== bOldContextEditable) {
			this.fireContextEditableChanged({
				editable: bContextEditable
			});
		}

		return this;
	};

	SmartField.prototype.setMandatory = function(bMandatory) {
		this.setProperty("mandatory", bMandatory, false);
		this._setOnInnerControl();
		return this;
	};

	SmartField.prototype.setWidth = function(sWidth) {
		this.setProperty("width", sWidth, true);
		this._setOnInnerControl();
		return this;
	};

	SmartField.prototype.setWrapping = function(bWrapping) {
		this.setProperty("wrapping", bWrapping, true);
		this._setOnInnerControl();
		return this;
	};

	SmartField.prototype.setTextAlign = function(sTextAlign) {
		this.setProperty("textAlign", sTextAlign, true);
		this._setOnInnerControl();
		return this;
	};

	SmartField.prototype.setPlaceholder = function(sPlaceholder) {
		this.setProperty("placeholder", sPlaceholder, true);
		this._setOnInnerControl();
		return this;
	};

	SmartField.prototype.setName = function(sName) {
		this.setProperty("name", sName, true);
		this._setOnInnerControl();
		return this;
	};

	SmartField.prototype.setMaxLength = function(iMaxLength) {
		this.setProperty("maxLength", iMaxLength, true);
		this._setOnInnerControl();
		return this;
	};

	SmartField.prototype.setShowValueHelp = function(bShowValueHelp) {
		this.setProperty("showValueHelp", bShowValueHelp, true);

		if (bShowValueHelp && this._oFactory) {

			if (!this._bValueHelpCreated) {
				this._oFactory._createValueHelp();
				this._bValueHelpCreated = true;
			}
		}

		var oChild = this.getAggregation("_content");

		if (oChild && (typeof oChild.setShowValueHelp === "function")) {
			oChild.setShowValueHelp(bShowValueHelp);
		}

		return this;
	};

	SmartField.prototype.setShowSuggestion = function(bShowSuggestion) {
		this.setProperty("showSuggestion", bShowSuggestion, true);

		if (bShowSuggestion && this._oFactory) {

			if (!this._bValueHelpCreated) {
				this._oFactory._createValueHelp();
				this._bValueHelpCreated = true;
			}
		}

		var oChild = this.getAggregation("_content");

		if (oChild && (typeof oChild.setShowSuggestion === "function")) {
			oChild.setShowSuggestion(bShowSuggestion);
		}

		return this;
	};

	/**
	 * Sets the SmartField's width to the inner control
	 *
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @private
	 */
	SmartField.prototype._setOnInnerControl = function() {
		var oChild = this.getAggregation("_content"),
			sWidth;

		if (oChild) {

			if (typeof oChild.setWidth === "function") {
				sWidth = this.getWidth();

				// set the width if and only if a value other than the default is available (default is "")
				// the problem is that some controls (e.g. sap.m.Select and sap.m.ComboBox) have a width set during creation
				// we do not want to invalidate this.
				// if there are problems, always check these controls.
				if (sWidth) {
					oChild.setWidth(sWidth);
				}
			}

			if (typeof oChild.setWrapping === "function") {
				oChild.setWrapping(this._getWrappingForInnerControl(oChild));
			}

			if (typeof oChild.setName === "function") {
				oChild.setName(this.getName());
			}

			if (typeof oChild.setPlaceholder === "function") {
				oChild.setPlaceholder(this.getPlaceholder());
			}

			if (typeof oChild.setTextAlign === "function") {
				oChild.setTextAlign(this.getTextAlign());
			}

			if ((typeof oChild.setMaxLength === "function") && this._oFactory && this._oFactory._getMaxLength) {
				oChild.setMaxLength(this._oFactory._getMaxLength());
			}

			if (typeof oChild.setRequired === "function") {
				oChild.setRequired(this.getMandatory());
			}
		}

		return this;
	};

	/**
	 * Gets the wrapping value for the inner control aggregation.
	 *
	 * @param {sap.ui.core.Control} [oChild] Control to propagate the wrapping behavior
	 * @returns {boolean|string} The value depending on the <code>wrapping</code> property's type
	 * @private
	 * @since 1.46
	 */
	SmartField.prototype._getWrappingForInnerControl = function(oChild) {
		var bWrapping = this.getWrapping(),
			oProperty;

		oChild = oChild || this.getAggregation("_content");

		if (oChild) {
			oProperty = oChild.getMetadata().getProperty("wrapping");
		}

		if (oProperty) {

			switch (oProperty.type) {
				case "boolean":
					return bWrapping;

				case "sap.ui.core.Wrapping":
					var mWrappingMode = sap.ui.core.Wrapping;

					if (bWrapping) {
						return mWrappingMode.Soft;
					}

					return mWrappingMode.None;

				// no default
			}
		}

		return bWrapping;
	};

	/**
	 * Setter for property <code>url</code>. Default value is <code>null</code>.
	 *
	 * @param {string} sValue The new value for property <code>url</code>
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @since 1.29
	 * @public
	 */
	SmartField.prototype.setUrl = function(sValue) {
		this.setProperty("url", sValue, true);
		return this;
	};

	SmartField.prototype.setEntitySet = function(sValue) {
		this.setProperty("entitySet", sValue, true);
		this.fireEntitySetFound({
			entitySet: sValue
		});
		return this;
	};

	/*
	 * If set to <code>false</code>, creation of inner controls is suspended until editable or contextEditable is set. As the default for editable
	 * is <code>true</code> the edit control would be created even in display scenarios. The method is used by the SmartTable control for
	 * performance reasons.
	 */
	SmartField.prototype._setPendingEditState = function(bDisplayState) {
		this.data("pendingEditableState", !bDisplayState);
	};

	SmartField.prototype.applySettings = function(mSettings) {

		if (mSettings && mSettings.customData) {
			for (var i = 0; i < mSettings.customData.length; i++) {
				var oCustomData = mSettings.customData[i];

				if (oCustomData && oCustomData.mProperties && oCustomData.mProperties.key === "pendingEditableState") {
					this._bPendingEditableState = oCustomData.mProperties.value;
				}
			}
		}

		return Control.prototype.applySettings.apply(this, arguments);
	};

	SmartField.prototype.setEnabled = function(bValue) {
		this.setProperty("enabled", bValue, true);
		this._toggleControl();
		return this;
	};

	/*
	 * Gets the control factory object.
	 *
	 * @returns {sap.ui.comp.smartfield.ControlFactoryBase} The control factory object
	 * @protected
	 * @since 1.48
	 */
	SmartField.prototype.getControlFactory = function() {
		return this._oFactory;
	};

	SmartField.prototype.getValue = function() {

		// as two-way-binding cannot be assumed to be a prerequisite,
		// check for a call-back and return the current value.
		var fnProp = this.getInnerValueFunction();

		if (fnProp) {
			return fnProp();
		}

		// as fall-back return the property value.
		return this.getProperty("value");
	};

	SmartField.prototype.getInnerValueFunction = function() {

		if (this._oValue && (typeof this._oValue[this._getMode()] === "function")) {
			return this._oValue[this._getMode()];
		}

		return null;
	};

	SmartField.prototype.getValueState = function() {
		var aChildren = this.getInnerControls(),
			iIndex = this._getMaxSeverity(aChildren);

		if (iIndex > -1) {
			return aChildren[iIndex].getValueState();
		}

		return ValueState.None;
	};

	/**
	 * Setter for property <code>valueState</code>. Default value is <code>None</code>.
	 *
	 * @param {sap.ui.core.ValueState} sValueState The new value for property <code>valueState</code>
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @since 1.30.0
	 * @public
	 */
	SmartField.prototype.setValueState = function(sValueState) {
		var aChildren = this.getInnerControls(),
			oChild,
			sMethod = "setSimpleClientError";

		if (aChildren && aChildren.length) {
			oChild = aChildren[0];

			if (aChildren.length > 1) {
				sMethod = "setComplexClientErrorFirstOperand";
			}
		}

		// forward the value state to the child control.
		// in unit of measure use cases and generally, if more than one control is hosted,
		// set a possible error on the first child.
		if (oChild && oChild.setValueState) {
			oChild.setValueState(sValueState);
			this[sMethod](sValueState === ValueState.Error);
		}

		return this;
	};

	SmartField.prototype.getValueStateText = function() {
		var aChildren = this.getInnerControls(),
			iIndex = this._getMaxSeverity(aChildren);

		if (iIndex > -1) {
			return aChildren[iIndex].getValueStateText();
		}

		return this.getProperty("valueStateText");
	};

	/**
	 * Setter for property <code>valueStateText</code>. Default value is empty/<code>undefined</code>.
	 *
	 * @param {string} sText The new value for property <code>valueStateText</code>
	 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
	 * @since 1.29
	 * @public
	 */
	SmartField.prototype.setValueStateText = function(sText) {
		var aChildren = this.getInnerControls(),
			oChild;

		if (aChildren && aChildren.length) {
			oChild = aChildren[0];
		}

		// forward the value state to the child control.
		// in unit of measure use cases and generally, if more than one control is hosted,
		// set a possible error on the first child.
		if (oChild && oChild.setValueStateText) {
			oChild.setValueStateText(sText);
		}

		return this;
	};

	/**
	 * Calculates the index of the child control with the most severe message.
	 *
	 * @param {array} aChildren The currently available child controls
	 * @returns {int} The index of the child control with the most severe message, can be <code>-1</code>
	 * @private
	 */
	SmartField.prototype._getMaxSeverity = function(aChildren) {
		var oState,
			oChild,
			i,
			len,
			iState = 0,
			iIndex = -1,
			mState = {
				"Error": 3,
				"Warning": 2,
				"Success": 1,
				"None": 0
			};

		len = aChildren.length;

		for (i = 0; i < len; i++) {
			oChild = aChildren[i];

			if (oChild.getValueState) {
				oState = oChild.getValueState();

				if (oState && mState[oState] > iState) {
					iState = mState[oState];
					iIndex = i;
				}
			}
		}

		return iIndex;
	};

	/**
	 * Returns the DOM element that gets the focus.
	 *
	 * @returns {sap.ui.core.Element} The DOM element that should get the focus, can be <code>null</code>
	 * @public
	 */
	SmartField.prototype.getFocusDomRef = function() {
		var aChildren = this.getInnerControls(),
			oChild,
			len = aChildren.length;

		if (len > 0) {
			oChild = aChildren[0];
		}

		if (oChild && oChild.getFocusDomRef) {
			return oChild.getFocusDomRef();
		}

		return Control.prototype.getFocusDomRef.apply(this, arguments);
	};

	/**
	 * Returns the id of the inner control the label should point at
	 *
	 * @returns {string} The id of the inner control of the smart field the label should point at, by default the field itself
	 * @public
	 */
	SmartField.prototype.getIdForLabel = function() {
		var aChildren = this.getInnerControls(),
		oChild,
		len = aChildren.length;

		if (len > 0) {
			oChild = aChildren[0];
		}

		if (oChild && oChild.getIdForLabel) {
			return oChild.getIdForLabel();
		}

		return this.getId();
	};

	SmartField.prototype.updateBindingContext = function(bSkipLocal, sModelName, bUpdateAll) {

		if (this._bInDestroy) {
			return;
		}

		this._init(sModelName);

		if (this._oFactory) {

			if (this.getBindingContext()) {
				this._sBindingContextPath = this.getBindingContext().getPath();
			}

			if (this._oFactory.bind) {
				this._oFactory.bind();

				// also check for field group annotation.
				this._checkFieldGroups();
			} else {
				this._toggleControl();
			}
		}

		Control.prototype.updateBindingContext.apply(this, arguments);
	};

	/**
	 * Returns the current SmartField's edit mode
	 *
	 * @returns {string} Returns "edit" or "display" or "display_uom"
	 * @private
	 */
	SmartField.prototype._getMode = function() {
		var bEditable = this.getEditable(),
			bEnabled = this.getEnabled(),
			bContextEditable = this.getContextEditable();

		// check for configuration.
		if (this.getControlContext() === "responsiveTable" && this.data("suppressUnit") !== "true") {

			// somehow the control is disabled
			if (!bEditable || !bContextEditable || !bEnabled || (this.getUomEditState() === 0)) {
				return "display_uom";
			}
		}

		// context editable in smart form is on parent's parent in UOM for unit.
		if (bContextEditable && this.data("configdata") && this.data("configdata").configdata.isUOM && this.data("configdata").configdata.isInnerControl && this.data("configdata").configdata.getContextEditable) {
			bContextEditable = this.data("configdata").configdata.getContextEditable();
		}

		return bEditable && bEnabled && bContextEditable ? "edit" : "display";
	};

	/**
	 * Sets the current control, depending on <code>displayMode</code> and the binding of the <code>value</code> property of the current control.
	 * If necessary a control is created.
	 *
	 * @private
	 */
	SmartField.prototype._toggleControl = function() {
		var sMode,
			oValue,
			oConfig,
			bCreate = true;

		if (this._bPendingEditableState || this._bSuppressToggleControl) {
			return;
		}

		if (!this._oFactory || this._oFactory.bPending) {
			return;
		}

		sMode = this._getMode();

		if (sMode === "edit" || sMode === "display_uom") { // always create control if in edit mode

			// _createControl sets the current mode.
			this._createControl(sMode);
		} else {
			oValue = this.getProperty("value");

			// optimization for table use cases only.
			// if it is not a table, no configuration data set.
			oConfig = this.data("configdata");

			if (oConfig && oConfig.configdata && !oConfig.configdata.isUOM) {
				if (oValue === null || oValue === "") {
					bCreate = false;
				}
			}

			if (bCreate) { // in display mode, only create control if value is not empty

				// _createControl sets the current mode.
				this._createControl(sMode);
			} else {
				this.setAggregation("_content", null); // if value is empty, our content has to be null

				// better set the current mode, otherwise toggling gets out-of-sync.
				this._oControl.current = "display";
			}
		}

		this._setOnInnerControl();
	};

	SmartField.prototype.setValue = function(oValue) {
		this.setProperty("value", oValue, true);

		if (this._oFactory && !this._oFactory.bPending) {
			this._toggleControl();
		}

		return this;
	};

	/**
	 * Creates the actual control depending on the current edit mode and sets it to the SmartField's content
	 *
	 * @param {string} sMode The current edit mode, either "edit" or "display"
	 * @private
	 */
	SmartField.prototype._createControl = function(sMode) {
		var oControl;

		if (this._oFactory) {

			if ((sMode !== this._oControl.current) || !this._oControl[sMode]) {

				if (!this._oControl[sMode]) {

					// create the control and set it.
					oControl = this._oFactory.createControl();

					if (oControl) {
						this._oControl[sMode] = oControl.control;
						this._placeCallBacks(oControl, sMode);
					}
				}

				// set the content.
				this._oControl.current = sMode;
				this.setAggregation("_content", this._oControl[sMode]);
				this.fireInnerControlsCreated(this.getInnerControls());
			} else if (!this.getAggregation("_content")) {
				this.setAggregation("_content", this._oControl[sMode]);
			}
		}
	};

	/**
	 * Sets the available call-backs after successful control creation.
	 *
	 * @param {sap.ui.core.Control} oControl The given control
	 * @param {string} sMode The current mode, either "edit" or "display"
	 * @private
	 */
	SmartField.prototype._placeCallBacks = function(oControl, sMode) {

		// set the value call-back.
		if (oControl.params && oControl.params.getValue) {
			this._oValue[sMode] = oControl.params.getValue;
		}

		// set the unit-of-measure-get call-back.
		if (oControl.params && oControl.params.uom) {
			this._oValue.uom = oControl.params.uom;
		}

		// set the unit-of-measure-set call-back.
		if (oControl.params && oControl.params.uomset) {
			this._oValue.uomset = oControl.params.uomset;
		}
	};

	/**
	 * Initializes the control, if it has not already been initialized.
	 *
	 * @param {string} sModelName The name of the model currently used
	 * @private
	 */
	SmartField.prototype._init = function(sModelName) {
		var oModel,
			oBindingInfo,
			oConfig;

		// destroy factory if entity type changed
		if (this._oFactory && this._sBindingContextPath && this.getBindingContext() && (this._sBindingContextPath !== this.getBindingContext().getPath())) {
			this._destroyFactory();
		}

		if (!this._oFactory) {
			oConfig = this.data("configdata");

			if (!oConfig) {
				oModel = this.getModel(sModelName);
			}

			oBindingInfo = this._getBindingInfo(sModelName, "value");

			if (oBindingInfo) {

				if (oConfig || oModel) {
					this._oFactory = this._createFactory(sModelName, oModel, oBindingInfo, oConfig);
				}
			} else if (oModel && !(oModel instanceof JSONModel)) {

				if (this.getBindingInfo("url") || this.getUrl()) {

					if (oConfig || oModel) {
						this._oFactory = this._createFactory(sModelName, oModel, oBindingInfo, oConfig);
					}
				}
			}
		}
	};

	/**
	 * Destroys the control factory and the existing inner controls.
	 *
	 * @private
	 */
	SmartField.prototype._destroyFactory = function() {
		this._bSuppressToggleControl = true;
		this._bSideEffects = false;

		if (this._oFactory) {
			this._oFactory.destroy();
		}

		this._oFactory = null;
		this._bSuppressToggleControl = false;

		if (this._oControl["display"]) {
			this._oControl["display"].destroy();
		}

		if (this._oControl["display_uom"]) {
			this._oControl["display_uom"].destroy();
		}

		if (this._oControl["edit"]) {
			this._oControl["edit"].destroy();
		}

		this._oControl["display"] = null;
		this._oControl["display_uom"] = null;
		this._oControl["edit"] = null;
		this._oControl["current"] = null;
		this._oValue = {
			display: null,
			edit: null,
			uom: null,
			uomset: null
		};
		this.destroyAggregation("_content");
	};

	/**
	 * Creates the control factory and returns it. If the variable <code>oModel</code> is <code>null</code> or <code>undefined</code>,
	 * <code>null</code> is returned.
	 *
	 * @param {string} sModelName The name of the model currently used
	 * @param {sap.ui.model.Model} oModel The model currently used
	 * @param {object} oBindingInfo The binding information from the control for the <code>value</code> property
	 * @param {object} oConfig Optional control configuration
	 * @returns {sap.ui.comp.smartfield.ControlFactoryBase} the new control factory instance
	 * @private
	 */
	SmartField.prototype._createFactory = function(sModelName, oModel, oBindingInfo, oConfig) {
		var sEntitySet,
			oParam;

		// check whether JSONControlFactoryl can be created.
		if (oModel && oModel instanceof JSONModel) {
			return new JSONControlFactory(oModel, this, {
				model: sModelName,
				path: oBindingInfo.path
			});
		}

		// check whether ODataControlFactory can be created.
		if (!oConfig) {
			sEntitySet = this._getEntitySet(sModelName);
		}

		if (sEntitySet || oConfig) {
			if (oConfig) {
				oParam = oConfig.configdata;
			} else {
				oParam = {
					entitySet: sEntitySet,
					model: sModelName,
					path: (oBindingInfo && oBindingInfo.path) ? oBindingInfo.path : ""
				};
			}

			return new ODataControlFactory(oModel, this, oParam);
		}

		return null;
	};

	/**
	 * Calculates the <code>entitySet</code> that is interpreted by this control. The calculation uses either the <code>bindingContext</code> of
	 * this control or alternatively the property <code>entitySet</code>.
	 *
	 * @param {string} sModelName The name of the model currently used
	 * @returns {string} The <code>entitySet</code> that is interpreted by this control
	 * @private
	 */
	SmartField.prototype._getEntitySet = function(sModelName) {
		var sEntitySet = this.getEntitySet();

		if (sEntitySet && !sModelName) {
			return sEntitySet;
		}

		// take the entity set from the binding context.
		var oBindingContext = this.getBindingContext(sModelName);

		if (oBindingContext) {

			// check for a defective binding.
			if (!oBindingContext.sPath || (oBindingContext.sPath === "/undefined")) {
				return "";
			}

			sEntitySet = this._oUtil.correctPath(oBindingContext.sPath);
			this.fireEntitySetFound({
				entitySet: sEntitySet
			});

			return sEntitySet;
		}

		return "";
	};

	/**
	 * Returns the binding information for the given property or aggregation. The binding information contains information about path, binding object,
	 * format options, sorter, filter etc. for the property or aggregation.
	 *
	 * @param {string} sModel The optional name of a specific model to update
	 * @param {string} sName The name of the property or aggregation
	 * @returns {object} Binding information of the value binding of this control, if the model is the appropriate one, <code>null</code> otherwise
	 * @private
	 */
	SmartField.prototype._getBindingInfo = function(sModel, sName) {

		if (!this._oValueBind) {
			this._oValueBind = this.getBindingInfo(sName);

			try {
				this._oValueBind = this._oValueBind.parts[0];
			} catch (ex) {
				// ignore
			}
		}

		if (this._oValueBind) {

			if (!this._oValueBind.model && !sModel) {
				return this._oValueBind;
			}

			if (this._oValueBind.model === sModel) {
				return this._oValueBind;
			}
		}

		return null;
	};

	/**
	 * Returns the EDM data type of the OData property to which the value property of the control is bound to. If no model or no OData property is
	 * available <code>null</code> is returned.
	 *
	 * @returns {string} The data type to which the value property is bound.
	 * @public
	 */
	SmartField.prototype.getDataType = function() {
		var oProp;

		if (this._oFactory) {

			// only ODataControlFactory has the method getDataType.
			if (this._oFactory.getDataProperty) {
				oProp = this._oFactory.getDataProperty();

				if (oProp) {
					return oProp.property.type;
				}
			}

			return this.getJsonType();
		}

		return null;
	};

	/**
	 * Returns the OData property to which the <code>value</code> property of the control is bound.
	 *
	 * @returns {object} The OData property.
	 * @public
	 */
	SmartField.prototype.getDataProperty = function() {

		if (this._oFactory) {

			// only ODataControlFactory has the method getDataProperty.
			if (this._oFactory.getDataProperty) {
				return this._oFactory.getDataProperty();
			}

			return null;
		}

		return null;
	};

	/**
	 * If the OData property to which the control's value property is bound semantically represents a unit of measure, the value of the current unit
	 * of measure is returned. Otherwise <code>null</code> is returned.
	 *
	 * @returns {any} The current unit of measure is returned, which can be <code>null</code
	 * @public
	 */
	SmartField.prototype.getUnitOfMeasure = function() {

		if (this._oValue.uom) {
			return this._oValue.uom();
		}

		return null;
	};

	/**
	 * If the OData property the control's value property is bound to semantically represents a unit of measure, the value of the current unit of
	 * measure can be changed.
	 *
	 * @param {string} sUnit The new unit of measure to be set.
	 * @public
	 */
	SmartField.prototype.setUnitOfMeasure = function(sUnit) {
		if (sUnit && this._oValue.uomset) {
			this._oValue.uomset(sUnit);
		}
	};

	/**
	 * Marks the <code>SmartField</code> control as having a client error.
	 *
	 * @param {boolean} bError If set to <code>true</code> the field is marked as having an error
	 * @private
	 */
	SmartField.prototype.setSimpleClientError = function(bError) {
		this._oError.bFirst = bError;
	};

	/**
	 * Marks the <code>SmartField</code> control and the first inner control as having a client error.
	 *
	 * @param {boolean} bError If set to <code>true</code> the field is marked as having an error
	 * @private
	 */
	SmartField.prototype.setComplexClientErrorFirstOperand = function(bError) {
		this._oError.bComplex = true;
		this._oError.bFirst = bError;
	};

	/**
	 * Marks the <code>SmartField</code> control and the second inner control as having a client error.
	 *
	 * @param {boolean} bError If set to <code>true</code> the field is marked as having an error
	 * @private
	 */
	SmartField.prototype.setComplexClientErrorSecondOperand = function(bError) {
		this._oError.bComplex = true;
		this._oError.bSecond = bError;
	};

	/**
	 * Marks the hosting <code>SmartField</code> control as having a client error.
	 *
	 * @param {boolean} bError If set to <code>true</code> the field is marked as having an error
	 * @private
	 */
	SmartField.prototype.setComplexClientErrorSecondOperandNested = function(bError) {
		var oParent = this.getParent().getParent();
		oParent.setComplexClientErrorSecondOperand(bError);
	};

	/**
	 * Returns whether a client error has been detected.
	 *
	 * @returns {boolean} <code>true</code>, if a client error has been detected, <code>false</code> otherwise
	 * @private
	 */
	SmartField.prototype._hasClientError = function() {

		if (this._oError.bComplex) {
			return this._oError.bFirst || this._oError.bSecond;
		}

		return this._oError.bFirst;
	};

	/**
	 * Returns whether a client error has been detected. Additionally the error message is shown, if this is not the case already.
	 *
	 * @returns {boolean} <code>true</code>, if a client error has been detected, <code>false</code> otherwise
	 * @public
	 */
	SmartField.prototype.checkClientError = function() {
		var aChildren,
			len;

		// in display mode: no error.
		if (this._getMode() === "display") {
			return false;
		}

		// a client error has already been detected.
		if (this._hasClientError()) {
			return true;
		}

		// check again.
		aChildren = this.getInnerControls();
		len = aChildren.length;

		for (var i = 0; i < len; i++) {
			this._checkClientError(aChildren[i]);
		}

		// return a possibly detected error.
		return this._hasClientError();
	};

	/**
	 * Checks for a client error on the given control. Additionally the error message is shown, if this is not the case already.
	 *
	 * @param {sap.ui.core.Control} oControl The control to be checked
	 * @private
	 */
	SmartField.prototype._checkClientError = function(oControl) {
		var sValue = null,
			oType = null,
			oParsedValue = null,
			oBind,
			sMethod,
			sParam,
			mParameters = {
				"sap.m.Input": "value",
				"sap.m.DatePicker": "value",
				"sap.m.ComboBox": "selectedKey",
				"sap.m.TextArea": "value"
			};

		if (oControl) {
			sParam = mParameters[oControl.getMetadata()._sClassName];
		}

		if (sParam) {
			oBind = oControl.getBinding(sParam);
		}

		if (oBind) {

			try {
				sMethod = "get" + sParam.substring(0, 1).toUpperCase() + sParam.substring(1);
				sValue = oControl[sMethod]();
				oType = oBind.getType();

				if (oBind.sInternalType) {
					oParsedValue = oType.parseValue(sValue, oBind.sInternalType);
					oType.validateValue(oParsedValue);
				}
			} catch (ex) {

				if (ex instanceof ParseException) {
					oControl.fireParseError({
						exception: ex
					});
				}

				if (ex instanceof ValidateException) {
					oControl.fireValidationError({
						exception: ex
					});
				}
			}
		}
	};

	/*
	 * Returns whether the current control context points to a table.
	 *
	 * @returns {boolean} <code>true</code> if the current <code>SmartField</code> control is used inside a table, <code>false</code> otherwise
	 * @protected
	 */
	SmartField.prototype.isContextTable = function() {
		return (this.getControlContext() === "responsiveTable" || this.getControlContext() === "table");
	};

	/**
	 * Resolves the controls hosted currently by this <code>SmartField</code> control.
	 *
	 * @returns {array} The controls hosted currently by this <code>SmartField</code>
	 * @public
	 */
	SmartField.prototype.getInnerControls = function() {
		var oContent,
			fContent,
			mComplex = {
			"sap.m.HBox": function(oControl) {
				var oChild,
					aItems,
					len = 0;

				aItems = oControl.getItems();

				if (aItems) {
					len = aItems.length;
				}

				if (len === 0) {
					return [];
				}

				if (len === 1) {
					return [
						aItems[0]
					];
				}

				oChild = aItems[1].getAggregation("_content");

				if (oChild) {
					return [
						aItems[0], oChild
					];
				}

				return [
					aItems[0]
				];
			},
			"sap.ui.comp.navpopover.SmartLink": function(oControl) {
				var oItem = oControl.getAggregation("innerControl");

				if (oItem) {
					return [
						oItem
					];
				}

				return [
					oControl
				];
			}
		};

		oContent = this.getAggregation("_content");

		if (oContent) {
			fContent = mComplex[oContent.getMetadata()._sClassName];
		}

		if (fContent) {
			return fContent(oContent);
		}

		if (oContent) {
			return [
				oContent
			];
		}

		return [];
	};

	/**
	 * Resolves the controls hosted currently by this <code>SmartField</code>.
	 *
	 * @returns {array} The controls hosted currently by this <code>SmartField</code>
	 * @public
	 */
	SmartField.prototype._getEmbeddedSmartField = function() {
		var aContent = this.getAggregation("_content");

		if (aContent) {

			if (aContent instanceof sap.m.HBox) {
				var aHBoxContent = aContent.getItems();

				if (aHBoxContent) {

					for (var j = 0; j < aHBoxContent.length; j++) {

						if (aHBoxContent[j] instanceof SmartField) {
							return aHBoxContent[j];
						}
					}
				}
			}
		}

		return null;
	};

	/**
	 * The function is called when the rendering of the control is completed.
	 *
	 * @private
	 */
	SmartField.prototype.onAfterRendering = function() {

		if (Control.prototype.onAfterRendering) {
			Control.prototype.onAfterRendering.apply(this);
		}

		// also check for field group annotation.
		this._checkFieldGroups();
	};

	SmartField.prototype.onBeforeRendering = function() {
		var aFields = this.getInnerControls();
		var that = this;

		if (this.getAriaLabelledBy().length > 0) {
			aFields.forEach(function(oField) {

				if (oField.addAriaLabelledBy && oField.getAriaLabelledBy) {

					if (oField.getAriaLabelledBy().length === 0) {
						oField.addAriaLabelledBy(that.getAriaLabelledBy()[0]);
					}
				}
			});
		}
	};

	/**
	 * Checks whether field groups can be set.
	 *
	 * @private
	 */
	SmartField.prototype._checkFieldGroups = function() {
		var oView,
			oMetaData,
			sMode = this._getMode();

		if (this.getBindingContext() && this._oFactory && this._oFactory.getMetaData && (sMode === "edit") && !this._bSideEffects) {

			// check whether the meta data for the smart field has already been calculated.
			oMetaData = this._oFactory.getMetaData();

			if (oMetaData && !oMetaData.property || (oMetaData.property && !oMetaData.property.property)) {
				return;
			}

			// view should be available.
			oView = this._getView();

			// now set the field group ids.
			if (oView && oMetaData) {
				this._setFieldGroup(oMetaData, oView);
			}
		}
	};

	/**
	 * Sets the field group ID according to the side effects annotation.
	 *
	 * @param {object} oMetaData the meta data used to create the control
	 * @param {object} oMetaData.entitySet the OData entity set definition
	 * @param {object} oMetaData.entityType the OData entity type definition
	 * @param {object} oMetaData.property the OData property definition
	 * @param {string} oMetaData.path the binding path
	 * @param {sap.ui.core.mvc.View} oView the current view
	 * @private
	 */
	SmartField.prototype._setFieldGroup = function(oMetaData, oView) {
		var aControls,
			aIDs = this._oSideEffects.getFieldGroupIDs(oMetaData, oView);

		if (aIDs) {
			aControls = this.getInnerControls();

			if (aControls.length) {
				this._bSideEffects = true;
				aControls[0].setFieldGroupIds(aIDs);
			}
		}
	};

	/**
	 * Returns the current view instance.
	 *
	 * @returns {sap.ui.core.mvc.View} the current view instance or <code>null</code>
	 * @private
	 */
	SmartField.prototype._getView = function() {
		var oObj = this.getParent();

		while (oObj) {
			if (oObj instanceof sap.ui.core.mvc.View) {
				return oObj;
			}

			oObj = oObj.getParent();
		}

		return null;
	};

	/**
	 * Event handler for data state changes.
	 *
	 * @param {string} sName The name of the property
	 * @param {object} oDataState the new data state.
	 * @private
	 */
	SmartField.prototype.refreshDataState = function(sName, oDataState) {
		var oBindingContext,
			oObject;

		if (sName === "value") {

			if (oDataState.isLaundering()) {

				if (this.getEditable()) {
					oBindingContext = this.getBindingContext();

					if (oBindingContext && oBindingContext.getObject) {
						oObject = oBindingContext.getObject();

						if (oObject && oObject.__metadata && oObject.__metadata.created) {
							this._checkCreated = true;
							return;
						}
					}
				}
			}

			// server has accepted the new instance and it is persistent now.
			if (this._checkCreated && !oDataState.isLaundering() && !oDataState.isDirty()) {
				this._oFactory.rebindOnCreated();
				delete this._checkCreated;
			}
		}
	};

	/**
	 * Cleans up the resources associated with this element and all its children.
	 *
	 * @private
	 */
	SmartField.prototype.exit = function() {

		this._bInDestroy = true;
		var oInactiveInnerControl = null;

		if (this._oSideEffects) {
			this._oSideEffects.destroy();
		}

		if (this._oUtil) {
			this._oUtil.destroy();
		}

		if (this._oFactory) {
			this._oFactory.destroy();
			this._bValueHelpCreated = false;
		}

		var oControl = this._oControl;

		// destroy only inactive control
		// active control will be destroyed via content aggregation
		if (oControl) {

			if (oControl.current === "edit") {
				oInactiveInnerControl = oControl["display"] || oControl["display_uom"];
			} else {
				oInactiveInnerControl = oControl["edit"];
			}

			// content can be null for performance reasons => destroy control here
			if (oControl[oControl.current] && !oControl[oControl.current].getParent()) {
				oControl[oControl.current].destroy();
			}
		}

		if (oInactiveInnerControl && (typeof oInactiveInnerControl.destroy === "function")) {
			oInactiveInnerControl.destroy();
		}

		this._oUtil = null;
		this._oError = null;
		this._oValue = null;
		this._oFactory = null;
		this._oControl = null;
		this._oValueBind = null;
		this._oSideEffects = null;
		this._sBindingContextPath = "";

		this.detachEvent("innerControlsCreated",SmartField.prototype._setOnInnerControl,this);//inner controls not ready wait for creation
	};

	/**
	 * Calculates the paths to the annotations used by the <code>SmartField</code> control.
	 *
	 * @param {sap.ui.model.odata.ODataMetaModel} oMetaModel The given OData meta model
	 * @param {object} oEntitySet The given entity set
	 * @param {string} sValueBinding The path identifying the OData property to which the value property of the <code>SmartField</code> is bound
	 * @param {boolean} bNavigationPathsOnly If set to <code>true</code>, no properties are returned
	 * @returns {array} The resulting paths are returned
	 * @public
	 */
	SmartField.getSupportedAnnotationPaths = function(oMetaModel, oEntitySet, sValueBinding, bNavigationPathsOnly) {
		var oConfig,
			oUOM,
			aResult = [],
			oMetaData;

		if (oMetaModel && oEntitySet && sValueBinding) {

			// prepare the meta data.
			oMetaData = {
				entitySet: oEntitySet,
				entityType: oMetaModel.getODataEntityType(oEntitySet.entityType),
				path: sValueBinding
			};

			// get the config.
			oConfig = {
				helper: new ODataHelper(null, null, oMetaModel)
			};

			if (bNavigationPathsOnly) {
				oConfig.navigationPathOnly = bNavigationPathsOnly;
			}

			// complete the meta data.
			oConfig.helper.getProperty(oMetaData);

			// get the annotations from the entity set.
			SmartField._getFromEntitySet(aResult, oMetaData, oConfig);

			// get the annotations from the property.
			SmartField._getFromProperty(aResult, oMetaData, oConfig);

			// get the annotations from a unit of measure.
			oUOM = oConfig.helper.getUnitOfMeasure2(oMetaData);

			if (oUOM) {
				SmartField._getFromProperty(aResult, oUOM, oConfig);
			}

			// destroy the helper class.
			oConfig.helper.destroy();
		}

		return aResult;
	};

	/**
	 * Calculates the paths to the annotations on entity set.
	 *
	 * @param {array} aResult The resulting paths
	 * @param {object} oMetaData The given meta data
	 * @param {object} oMetaData.entitySet The OData entity set definition
	 * @param {object} oMetaData.entityType The OData entity type definition
	 * @param {object} oMetaData.property The OData property definition
	 * @param {object} oConfig The given configuration
	 * @param {sap.ui.comp.smartfield.ODataHelper} oConfig.helper The given helper
	 * @param {boolean} oConfig.navigationPathOnly If set to <code>true</code>, no properties will be returned
	 * @private
	 */
	SmartField._getFromEntitySet = function(aResult, oMetaData, oConfig) {
		var sPath;

		if (oMetaData.entitySet) {
			sPath = oConfig.helper.oAnnotation.getUpdateEntitySetPath(oMetaData.entitySet);
			SmartField._push(sPath, aResult, oMetaData, oConfig);
		}
	};

	/**
	 * Pushes a path, if it is not null.
	 *
	 * @param {string} sPath The given path
	 * @param {array} aResult The resulting paths
	 * @param {object} oMetaData The given meta data
	 * @param {object} oMetaData.entitySet The OData entity set definition
	 * @param {object} oMetaData.entityType The OData entity type definition
	 * @param {object} oMetaData.property The OData property definition
	 * @param {object} oConfig The given configuration
	 * @param {sap.ui.comp.smartfield.ODataHelper} oConfig.helper The given helper
	 * @param {boolean} oConfig.navigationPathOnly If set to <code>true</code>, no properties will be returned
	 * @private
	 */
	SmartField._push = function(sPath, aResult, oMetaData, oConfig) {
		var aPath,
			sPart,
			len,
			sOut,
			oResult = {};

		if (sPath) {
			if (oConfig.navigationPathOnly) {
				aPath = sPath.split("/");
				len = aPath.length;
				oResult.entityType = oMetaData.entityType;

				while (len--) {
					sPart = aPath.shift();

					if (sPart === "") {
						continue;
					}

					oResult = oConfig.helper.getNavigationProperty(oResult.entityType, sPart);

					if (!oResult.entitySet) {
						break;
					}

					if (sOut) {
						sOut = sOut + "/" + sPart;
					} else {
						sOut = sPart;
					}
				}
			} else {
				sOut = sPath;
			}
		}

		if (sOut) {

			if (oMetaData.navigationPath) {
				aResult.push(oMetaData.navigationPath + "/" + sOut);
			} else {
				aResult.push(sOut);
			}
		}
	};

	/**
	 * Calculates the paths to the annotations on property.
	 *
	 * @param {array} aResult The resulting path.
	 * @param {object} oMetaData The given meta data
	 * @param {object} oMetaData.entitySet The OData entity set definition
	 * @param {object} oMetaData.entityType The OData entity type definition
	 * @param {object} oMetaData.property The OData property definition
	 * @param {object} oConfig The given configuration
	 * @param {sap.ui.comp.smartfield.ODataHelper} oConfig.helper The given helper
	 * @param {boolean} oConfig.navigationPathOnly If set to <code>true</code>, no properties will be returned
	 * @private
	 */
	SmartField._getFromProperty = function(aResult, oMetaData, oConfig) {
		var sPath;

		if (oMetaData.property.property) {
			sPath = oConfig.helper.oAnnotation.getText(oMetaData.property.property);
			SmartField._push(sPath, aResult, oMetaData, oConfig);

			sPath = oConfig.helper.oAnnotation.getUnit(oMetaData.property.property);
			SmartField._push(sPath, aResult, oMetaData, oConfig);

			sPath = oConfig.helper.oAnnotation.getFieldControlPath(oMetaData.property.property);
			SmartField._push(sPath, aResult, oMetaData, oConfig);
		}
	};

	SmartField.prototype.addAssociation = function(sAssociationName, sId, bSuppressInvalidate) {

		if (sAssociationName === "ariaLabelledBy") {
			this.getInnerControls().forEach(function(oControl) {

				if (oControl.addAriaLabelledBy) {
					oControl.addAriaLabelledBy(sId);
				}
			});
		}

		return Control.prototype.addAssociation.apply(this, arguments);
	};

	SmartField.prototype.removeAssociation = function(sAssociationName, vObject, bSuppressInvalidate) {
		var sId = Control.prototype.removeAssociation.apply(this, arguments);

		if (sAssociationName === "ariaLabelledBy" && sId) {
			this.getInnerControls().forEach(function(oControl) {
				if (oControl.removeAriaLabelledBy) {
					oControl.removeAriaLabelledBy(sId);
				}
			});
		}

		return sId;
	};

	SmartField.prototype.getAccessibilityInfo = function() {
		var oControl = this.getAggregation("_content");
		return oControl && oControl.getAccessibilityInfo ? oControl.getAccessibilityInfo() : null;
	};

	/*
	 * If SmartFiels is inside of a Form use Forms aria logic for label
	 */
	SmartField.prototype.enhanceAccessibilityState = function(oElement, mAriaProps) {
		var oParent = this.getParent();

		if (oParent && oParent.enhanceAccessibilityState) {
			// use SmartField as control, but aria proprties of rendered inner control.
			oParent.enhanceAccessibilityState(this, mAriaProps);
		}
	};

	/**
	 * Returns the value of the <code>mandatory</code> property if the <code>SmartField</code> is editable.
	 *
	 * This function is needed as the "mandatory" feature is named "required" in a lot of other controls
	 * (like <code>Label</code> or <code>Form</code>).
	 * @returns {boolean} the true if the <code>SmartField</code> should be marked as required
	 * @since 1.48.0
	 * @protected
	 */
	SmartField.prototype.getRequired = function() {

		if (this.getContextEditable() && this.getEditable()) {
			return this.getMandatory();
		} else {
			return false;
		}
	};

	return SmartField;
}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/SmartField.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartfield.SmartLabel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartfield.SmartLabel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.LabelRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartfield/SmartLabel",[
	"jquery.sap.global",
	"sap/ui/core/Control",
	"sap/m/Label",
	"sap/m/LabelRenderer",
	"sap/ui/comp/library",
	"./BindingUtil",
	"./AnnotationHelper",
	"./SmartField"
], function(jQuery, Control, Label, LabelRenderer, library, BindingUtil, AnnotationHelper, SmartField) {
	"use strict";

	/**
	 * Constructor for a new smartfield/SmartLabel.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The SmartLabel control extends {@link sap.m.Label sap.m.Label} and displays the label for
	 *        {@link sap.ui.comp.smartfield.SmartField SmartField}. It uses the annotations <code>sap:label</code> or
	 *        <code>com.sap.vocabularies.Common.v1.Label</code> for the label text and <code>sap:quickinfo</code> or
	 *        <code>com.sap.vocabularies.Common.v1.QuickInfo</code> for the tooltip. The mandatory indicator is obtained from the SmartField
	 *        control. The association with a SmartField control is built using the setLabelFor method.
	 * @extends sap.m.Label
	 * @constructor
	 * @alias sap.ui.comp.smartfield.SmartLabel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartLabel = Label.extend("sap.ui.comp.smartfield.SmartLabel", /** @lends sap.ui.comp.smartfield.SmartLabel.prototype */
	{
		metadata: {

			library: "sap.ui.comp"
		},
		renderer: LabelRenderer.render
	});

	SmartLabel.prototype.init = function() {
		this._sSmartFieldId = null;
		this._bMetaDataApplied = false;
		this._fInnerControlsCreatedHandlers = null;
	};

	/**
	 * Binds the label properties.
	 *
	 * @private
	 */
	SmartLabel.prototype._bindProperties = function() {

		var oSmartField = this._getField();

		if (oSmartField) {
			var oBinding = new BindingUtil();
			var oInfo = null;
			this.setVisible(oSmartField.getVisible());

			// Label text shouldn't be overwritten if this has
			// already been explicitly set by a public method
			if (!this._bTextSetExplicitly) {
				oInfo = oSmartField.getBindingInfo("textLabel");

				if (oInfo) {
					this.bindProperty("text", oBinding.toBinding(oInfo));
				} else if (!this.getBindingInfo("text")) {
					this._setText(oSmartField.getTextLabel());
				}
			}

			oInfo = oSmartField.getBindingInfo("tooltipLabel");
			if (oInfo) {
				this.bindProperty("tooltip", oBinding.toBinding(oInfo));
			} else {
				this.setTooltip(oSmartField.getTooltipLabel());
			}
		}
	};

	SmartLabel.prototype.onFieldVisibilityChange = function(oControlEvent) {
		this.setVisible(oControlEvent.getSource().getVisible());
	};

	/**
	 * Triggers the obtainment of the meta data.
	 *
	 * @private
	 */
	SmartLabel.prototype.getLabelInfo = function() {

		var oMetaDataProperty, oLabelInfo;

		var oSmartField = this._getField();

		if (oSmartField) {

			this._bindProperties();
			oMetaDataProperty = oSmartField.getDataProperty();

			if (oMetaDataProperty) {
				oLabelInfo = this._getLabelInfo(oMetaDataProperty);

				if (oLabelInfo) {

					// Label text shouldn't be overwritten if this has
					// already been explicitly set by a public method
					if (oLabelInfo.text && !this._bTextSetExplicitly) {
						this._setProperty(this, "text", oLabelInfo.text);
					}

					if (oLabelInfo.quickinfo) {
						this._setProperty(this, "tooltip", oLabelInfo.quickinfo);
					}
				}
			}
		}
	};

	SmartLabel.prototype._setProperty = function(oObj, sProperty, sValue) {

		var sProp;

		if (oObj && sProperty) {

			if (sValue.match(/{@i18n>.+}/gi)) {
				oObj.bindProperty(sProperty, sValue.substring(1, sValue.length - 1));
			} else {
				sProp = sProperty.substring(0, 1).toUpperCase() + sProperty.substring(1);
				if (!oObj.getBindingInfo(sProperty) && (!oObj["get" + sProp]())) {
					oObj["set" + sProp](sValue);
				}
			}
		}
	};

	SmartLabel.prototype.setLabelFor = function(vSmartField) {

		var oCore = sap.ui.getCore();
		var oOldLabelForControl = this._getField();
		var sNewSmartFieldId = "";

		if (vSmartField) {
			if (typeof vSmartField === "string") {
				sNewSmartFieldId = vSmartField;
			} else if (vSmartField.getId) {
				sNewSmartFieldId = vSmartField.getId();
			}
		}

		if (sNewSmartFieldId.length > 0 && sNewSmartFieldId === this._sSmartFieldId) {
			//field not changed do nothing
			return this;
		}

		if (oOldLabelForControl) {
			if (this._fChange) {
				oOldLabelForControl.detachEvent("_change", this._fChange);
				this._fChange = null;
			}
			if (this._fInitialized) {
				oOldLabelForControl.detachInitialise(this._fInitialized);
				this._fInitialized = null;
			}
			this.detachFieldVisibilityChange(oOldLabelForControl);
			this._bMetaDataApplied = false;
		}

		if (sNewSmartFieldId.length > 0) {
			this._sSmartFieldId = sNewSmartFieldId;

			this._setLabelFor();
		} else {
			this._sSmartFieldId = null;
		}

		Label.prototype.setLabelFor.apply(this, arguments);
		var oLabelForControl = oCore.byId(this.getLabelFor()) || null;

		if (oLabelForControl && (typeof oLabelForControl.attachVisibleChanged === "function")) {
			oLabelForControl.attachVisibleChanged(this.onFieldVisibilityChange, this);
		}

		return this;
	};

	SmartLabel.prototype._getField = function() {

		if (this._sSmartFieldId) {
			return sap.ui.getCore().byId(this._sSmartFieldId);
		}

		return null;
	};

	SmartLabel.prototype._setLabelFor = function() {

		var oDataProperty,
			oSmartField = this._getField();

		if (oSmartField && !this._bMetaDataApplied) {
			this._bMetaDataApplied = true;

			if (oSmartField.getDataProperty) {
				oDataProperty = oSmartField.getDataProperty();

				if (oDataProperty) {
					this.getLabelInfo();
				} else {

					if (!this._fInitialized) {
						this._fInitialized = this.getLabelInfo.bind(this);
						oSmartField.attachInitialise(this._fInitialized);
					}

					if (!this._fChange) {
						this._fChange = function(oEvent) {

							if (oEvent.getParameter("name") === "textLabel") {
								this.getLabelInfo();
							} else if (oEvent.getParameter("name") === "mandatory") {
								this.invalidate(); // as Label gets the required information from field via isRequired of LabelEnablement
							}
						}.bind(this);

						oSmartField.attachEvent("_change", this._fChange);
					}
				}

				this._lateUpdateLabelFor(oSmartField);
			}
		}
	};

	SmartLabel.prototype.updateLabelFor = function(aControls) {
		var aInnerControls = aControls.slice(0);

		if (aInnerControls && aInnerControls.length > 0) {
			this.invalidate();//invalidate for rendering the labelFor is updated via smartfield itsself
			aInnerControls.splice(0, 1);
			this.updateAriaLabeledBy(aInnerControls);
		}
	};

	SmartLabel.prototype.updateAriaLabeledBy = function(aControls) {

		if (aControls) {

			for (var i = 0; i < aControls.length; i++) {

				if (aControls[i].addAriaLabelledBy) {
					aControls[i].addAriaLabelledBy(this);
				}
			}
		}
	};

	SmartLabel.prototype.setText = function(sValue) {
		this.setProperty("text", sValue);
		this._bTextSetExplicitly = true;
		return this;
	};

	SmartLabel.prototype._setText = function(sValue) {
		this.setProperty("text", sValue);
	};

	/**
	 * Retrieves all label related data from the OData property of a field
	 *
	 * @param {object} oProperty the definition of a property of an OData entity.
	 * @returns {object} describing label specific data
	 * @private
	 */
	SmartLabel.prototype._getLabelInfo = function(oProperty) {
		var oAnnotationHelper = new AnnotationHelper();

		if (oProperty && oProperty.property) {
			return {
				text: oAnnotationHelper.getLabel(oProperty.property),
				quickinfo: oAnnotationHelper.getQuickInfo(oProperty.property)
			};
		}
	};

	SmartLabel.prototype._delayUpdateLabelFor = function(oSmartField) {
		var that = this;

		if (oSmartField.attachInnerControlsCreated && !this._fInnerControlsCreatedHandlers) {
			this._fInnerControlsCreatedHandlers = function(oEvent) {
				that.updateLabelFor(oEvent.getParameters());
			};

			oSmartField.attachInnerControlsCreated(this._fInnerControlsCreatedHandlers);
		}
	};

	SmartLabel.prototype._lateUpdateLabelFor = function(oSmartField) {
		var aInnerControls;

		if (oSmartField && (oSmartField instanceof SmartField)) {
			aInnerControls = oSmartField.getInnerControls();

			if (aInnerControls && (aInnerControls.length > 0)) {
				this.updateLabelFor(aInnerControls);
			} else {
				this._delayUpdateLabelFor(oSmartField);
			}
		}
	};

	SmartLabel.prototype.onBeforeRendering = function() {

		if (this._sSmartFieldId) {
			var oSmartField = this._getField();

			if (!this._bMetaDataApplied) {
				this._setLabelFor();

				if (oSmartField.getId() === this.getLabelFor()) {
					this._lateUpdateLabelFor(oSmartField);
				}
			}
		}
	};

	SmartLabel.prototype.detachFieldVisibilityChange = function(oControl) {
		if (oControl && (typeof oControl.detachVisibleChanged === "function")) {
			oControl.detachVisibleChanged(this.onFieldVisibilityChange, this);
		}
	};

	/**
	 * Cleans up the resources associated with this element and all its children. After an element has been destroyed, it can no longer be used on the
	 * UI. Applications should call this method if they don't need the element any longer.
	 *
	 * @param {boolean} bSuppressInvalidate If set to <code>true</code>, UI element is not marked for redraw
	 * @public
	 */
	SmartLabel.prototype.destroy = function(bSuppressInvalidate) {
		var oSmartField = this._getField();
		delete this._bTextSetExplicitly;

		if (oSmartField) {

			if (this._fInnerControlsCreatedHandlers && oSmartField.detachInnerControlsCreated) {
				oSmartField.detachInnerControlsCreated(this._fInnerControlsCreatedHandlers);
				this._fInnerControlsCreatedHandlers = null;
			}

			if (this._fInitialized && oSmartField.detachInitialise) {
				oSmartField.detachInitialise(this._fInitialized);
				this._fInitialized = null;
			}

			if (this._fChange) {
				oSmartField.detachEvent("_change", this._fChange);
				this._fChange = null;
			}
		}

		this._sSmartFieldId = null;
		return Label.prototype.destroy.apply(this, arguments);
	};

	SmartLabel.prototype.exit = function() {
		Label.prototype.exit.apply(this, arguments);
		this.detachFieldVisibilityChange(sap.ui.getCore().byId(this.getLabelFor()));
	};

	return SmartLabel;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartfield/SmartLabel.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.GroupElement') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.GroupElement.
jQuery.sap.declare('sap.ui.comp.smartform.GroupElement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormElement'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.VariantLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/GroupElement",[
	'jquery.sap.global', 'sap/m/Label', "sap/m/VBox", "sap/m/HBox", 'sap/ui/comp/library', 'sap/ui/core/Element', 'sap/ui/layout/form/FormElement', 'sap/ui/comp/smartfield/SmartLabel', 'sap/ui/comp/smartfield/SmartField', 'sap/m/FlexItemData', 'sap/ui/core/VariantLayoutData', 'sap/ui/layout/GridData'
], function(jQuery, Label, VBox, HBox, library, Element, FormElement, SmartLabel, SmartField, FlexItemData, VariantLayoutData, GridData) {
	"use strict";

	// shortcut for sap.ui.comp.smartfield.ControlContextType
	var ControlContextType = library.smartfield.ControlContextType;

	/**
	 * Constructor for a new smartform/GroupElement.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class A GroupElement is a combination of one label and different controls associated to this label.
	 * @extends sap.ui.layout.form.FormElement
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.GroupElement
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GroupElement = FormElement.extend("sap.ui.comp.smartform.GroupElement", /** @lends sap.ui.comp.smartform.GroupElement.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			properties: {

				/**
				 * Specifies whether the groups shall be rendered in a <code>ResponsiveLayout</code> with label on top of the group element.
				 * Each group will be rendered in a new line.
				 *
				 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
				 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
				 */
				useHorizontalLayout: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
				 *
				 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
				 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
				 *
				 * @deprecated Since version 1.48.0, please do not use this property as it does not have any effect on the current layout of the <code>SmartForm</code> control.
				 */
				horizontalLayoutGroupElementMinWidth: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Index of element to be used for label determination
				 */
				elementForLabel: {
					type: "int",
					group: "Misc",
					defaultValue: 0
				}
			},
			defaultAggregation: "elements",
			aggregations: {

				/**
				 * Aggregation of controls to be displayed together with a label.
				 *
				 * <b>Note:</b> Do not put any layout controls in here. This could destroy the visual layout,
				 * keyboard support and screen-reader support.
				 */
				elements: {
					type: "sap.ui.core.Control",
					multiple: true,
					singularName: "element"
				}
			},
			events: {

				/**
				 * The event is fired after the visibility of the control has changed.
				 */
				visibleChanged: {}
			},
			designTime: true
		},
		_visibilityDerived: false,
		_bHorizontalLayoutUsed: false
	});

	GroupElement._myVBox = undefined;

	GroupElement.prototype._getFieldRelevantForLabel = function() {
		var aElements = this.getElements();
		var iIndex = this.getElementForLabel();

		if (aElements.length > iIndex && (aElements[iIndex] instanceof SmartField)) {
			return aElements[iIndex];
		}

		return null;
	};

	GroupElement.prototype._extractFields = function(aElements, bExcludeLabel) {
		var aFields = [];

		aElements.forEach(function(oElement) {
			if (oElement.getItems) {
				aFields = aFields.concat(oElement.getItems());
			} else {
				aFields.push(oElement);
			}
		});

		if (aFields.some(function(oElement) {
			return oElement.getItems;
		})) {
			aFields = this._extractFields(aFields);
		}

		if (bExcludeLabel) {
			aFields = aFields.filter(function(oField) {
				return !(oField instanceof sap.m.Label);
			});
		}

		return aFields;
	};

	GroupElement.prototype.setTooltip = function(vTooltip) {

		FormElement.prototype.setTooltip.apply(this, [vTooltip]);

		var oRelevantField = this._getFieldRelevantForLabel();
		var oLabel = this._getLabel();
		_setTooltipToLabel.call(this, oLabel, oRelevantField);

		return this;

	};

	/*
	 * If a <code>Label</code> control is assigned to the <code>GroupElement</code> and this
	 * <code>Label</code> control has a tooltip, use this tooltip. (As also the text of the given
	 * <code>Label</code> control is used.)
	 * Otherwise use the tooltip of the <code>GroupElement</code>
	 */
	function _setTooltipToLabel(oLabel, oRelevantField) {

		if (oLabel == this._oSetLabel) {
			return;  // don't change label set from outside
		}

		var sTooltip;

		if (this._oSetLabel && this._oSetLabel instanceof sap.ui.core.Control) {
			sTooltip = _getTooltipString.call(this._oSetLabel);
		}

		if (!sTooltip) {
			sTooltip = _getTooltipString.call(this);
		}

		if (sTooltip) {
			if (oLabel instanceof SmartLabel) {
				if (oRelevantField && oRelevantField.setTooltipLabel) {
					oRelevantField.setTooltipLabel(sTooltip);
				}
			} else {
				oLabel.setTooltip(sTooltip);
			}
		}

	}

	GroupElement.prototype.setLabel = function(oLabel) {

		if (!oLabel && this._bMoveLabelToVBox) {
			// Label is just removed as moved to VBox -> only update aggregation
			return this.setAggregation("label", oLabel);
		}

		if (this._oSetLabel && (typeof this._oSetLabel !== "string")) {
			this._oSetLabel.detachEvent("_change", _handleLabelChanged, this);
		}

		var oOldLabel;
		var sOldLabel;
		var oSmartField;

		if (typeof oLabel === "string") {
			// label is stored in this._oLabel
			oOldLabel = this._getLabel();
			if (oOldLabel) {
				sOldLabel = oOldLabel.getText();
			}
		} else if (!oLabel && this._oSetLabel) {
			sOldLabel = this.getLabelText();
		}

		// use standard logic
		FormElement.prototype.setLabel.apply(this, [oLabel]);

		// just store given Label to access it easily
		this._oSetLabel = oLabel;
		_setLabelToVBox.call(this);

		if (typeof oLabel === "string") {
			// label is stored in this._oLabel
			if (this._oLabel instanceof SmartLabel && oLabel != sOldLabel && (oLabel.length > 0 || sOldLabel.length > 0)) {
				oSmartField = this._getFieldRelevantForLabel();
				if (oSmartField && oLabel != null) {
					if (oSmartField.getTextLabel) {
						if (!oSmartField._oTextLabelSetByGroupElement) {
							oSmartField._oTextLabelSetByGroupElement = {oldText: oSmartField.getTextLabel()};
						}
						oSmartField.setTextLabel(oLabel);
					}
				}
			}
			if (!this._bHorizontalLayoutUsed) {
				this.setAggregation("_label", this._oLabel, true); // use Aggregation to allow model inheritance
			}
			this._oLabel.isRequired = _labelIsRequired; // use GroupElements logic
		} else {
			if (oLabel) {
				if (oLabel.isRequired) {
					oLabel.isRequired = _labelIsRequired; // use GroupElements logic
				}
				oLabel.attachEvent("_change", _handleLabelChanged, this);
			} else {
				oSmartField = this._getFieldRelevantForLabel();
				if (oSmartField) {
					_restoreTextLabel.call(this, oSmartField, sOldLabel);
				}
			}
			this.updateLabelOfFormElement(); // maybe new SmartLabel needs to be created
		}

		return this;

	};

	GroupElement.prototype.destroyLabel = function() {

		var sOldLabel = this.getLabelText();

		// use standard logic
		FormElement.prototype.destroyLabel.apply(this);

		delete this._oSetLabel;
		_setLabelToVBox.call(this);

		var oSmartField = this._getFieldRelevantForLabel();
		if (oSmartField) {
			_restoreTextLabel.call(this, oSmartField, sOldLabel);
		}

		this.updateLabelOfFormElement(); // maybe new SmartLabel needs to be created

		return this;

	};

	function _handleLabelChanged(oEvent) {

		if (oEvent.getParameter("name") == "text") {
			var oLabel = oEvent.oSource;
			var sText = oLabel.getText();

			if (this._oLabel) {
				this._oLabel.setText(sText);
			}

			var oSmartField = this._getFieldRelevantForLabel();
			if (oSmartField && oSmartField.getTextLabel) {
					if (!oSmartField._oTextLabelSetByGroupElement) {
						oSmartField._oTextLabelSetByGroupElement = {oldText: oSmartField.getTextLabel()};
					}
					oSmartField.setTextLabel(sText);
			}
		}

	}

	function _setLabelToVBox() {

		if (!this._bHorizontalLayoutUsed) {
			return;
		}

		var aFields = this.getFields();
		var oOldLabel;

		if (aFields.length > 0) {
			var oVBox = this.getFields()[0];
			if (oVBox instanceof VBox) {
				var aItems = oVBox.getItems();
				var oNewLabel = this._getLabel();
				if (aItems.length > 0 && aItems[0] instanceof Label) {
					oOldLabel = aItems[0];
				}

				this._bMoveLabelToVBox = true;

				if (oOldLabel && oOldLabel != oNewLabel) {
					oVBox.removeItem(0);
					if (oOldLabel._bCreatedByGroupElement) {
						// own Label
						this.setAggregation("_label", oOldLabel, true); // use Aggregation to allow model inheritance
					} else {
						// Label set from outside -> back to aggregation
						this.setAggregation("label", oOldLabel);
					}
				}
				if (oNewLabel && oOldLabel != oNewLabel) {
					oVBox.insertItem(oNewLabel, 0);
				}

				this._bMoveLabelToVBox = false;
				_updateLabelFor.call(this);
			}
		}

	}

	function _labelIsRequired(){

		if (this.getRequired && this.getRequired()) {
			return true;
		}

		var oGroupElement = this.getParent();
		if (oGroupElement instanceof sap.m.VBox) {
			oGroupElement = oGroupElement.getParent();
		}

		var aFields = oGroupElement.getElements();

		for ( var i = 0; i < aFields.length; i++) {
			var oField = aFields[i];
			if (oField.getRequired && oField.getRequired() === true &&
					(!oField.getEditable || oField.getEditable()) &&
					(!oField.getContextEditable || oField.getContextEditable())) {
				return true;
			}
		}

		return false;

	}

	// overwrite for case VBox is used
	function _updateLabelFor(){

		var oField = this._getFieldRelevantForLabel();

		if (oField) {
			if (this._oLabel) {
				this._oLabel.setLabelFor(oField); // as Label is internal of FormElement, we can use original labelFor
			}
			return; // use SmartField logic
		}

		var aFields = this.getFields();
		oField = aFields.length > 0 ? aFields[0] : null;

		if (oField instanceof VBox) {
			var aItems = oField.getItems();
			if (aItems[1] instanceof HBox) {
				oField = aItems[1].getItems()[0];
			} else {
				oField = aItems[1];
			}
		}

		var oLabel = this._oLabel;
		if (oLabel) {
			oLabel.setLabelFor(oField); // as Label is internal of FormElement, we can use original labelFor
		} else {
			oLabel = this.getLabel();
			if (oLabel instanceof sap.ui.core.Control /*might also be a string*/) {
				oLabel.setAlternativeLabelFor(oField);
			}
		}

	}

	GroupElement.prototype.getLabel = function() {

		return this._oSetLabel;

	};

	/**
	 * Returns the internal Label independent whether it comes direct from <code>GroupElement</code> or from internal used <code>VBox</code>
	 *
	 * @return {object} which represents the internal Label
	 * @private
	 */
	GroupElement.prototype._getLabel = function() {

		if (this._oLabel) {
			return this._oLabel;
		} else {
			return this._oSetLabel;
		}

	};

	// this function is used to get the rendered Label. If Label is in VBox it should not be rendered by Form
	GroupElement.prototype.getLabelControl = function() {

		if (this._bHorizontalLayoutUsed) {
			return null;
		} else {
			return this._getLabel();
		}

	};

	/**
	 * Returns the text of the label.
	 *
	 * @return {string} text of the label.
	 * @public
	 */
	GroupElement.prototype.getLabelText = function() {
		var sLabel = "";

		var oLabel = this._getLabel();
		if (oLabel) {
			sLabel = oLabel.getText();
		}

		return sLabel;
	};

	GroupElement.prototype.setElementForLabel = function(iIndex) {

		this.setProperty("elementForLabel", iIndex);

		this.updateLabelOfFormElement();

		return this;

	};

	GroupElement.prototype._createLabel = function(sLabel) {
		var oLabel = null;
		var oField = this._getFieldRelevantForLabel();

		if (oField) {
			if (oField.getShowLabel && oField.getShowLabel()) {
				oLabel = new SmartLabel(oField.getId() + '-label');
				if (sLabel) {
					if (!oField._oTextLabelSetByGroupElement) {
						oField._oTextLabelSetByGroupElement = {oldText: oField.getTextLabel()};
					}
					oField.setTextLabel(sLabel);
					oLabel.setText(sLabel);
				}
				oLabel.setLabelFor(oField);
			}
		} else {
			// create label with empty text too
			oLabel = new Label();
			oLabel.setText(sLabel);
		}

		if (oLabel) {
			oLabel._bCreatedByGroupElement = true;
			oLabel.isRequired = _labelIsRequired;
			this._oLabel = oLabel;
			if (!this.getUseHorizontalLayout()) {
				// if in VBox not needed to set parent here
				this.setAggregation("_label", oLabel, true); // use Aggregation to allow model inheritance
			}
			if (this._oSetLabel && typeof this._oSetLabel !== "string") {
				// remove assignment of unused label to field
				this._oSetLabel.setAlternativeLabelFor(null);
			}
		}

		return oLabel;
	};

	/*
	 * If there is a SmartField used to determine a Label create an internal SmartLabel.
	 * Otherwise use provided Label
	 * If no label is provided at all create empty label - so there is always a label
	 * If a Label was provided always use it's text, only if no Label provided use Label text of SmartField
	 */
	GroupElement.prototype.updateLabelOfFormElement = function() {
		var bCreated = false, sOldText = null;
		var aElements = this.getElements();

		var oRelevantField = this._getFieldRelevantForLabel();
		var oLabel = this._getLabel();
		var bDestroy = false;

		if (oLabel && oLabel._bCreatedByGroupElement) {
			// check if Label is still valid
			if (oLabel instanceof SmartLabel) {
				// check if Label fits to SmartField
				if (!oRelevantField || (oLabel._sSmartFieldId && oLabel._sSmartFieldId != oRelevantField.getId())) {
					bDestroy = true;
				}
			} else if (oRelevantField){
				// SmartLabel needed
				bDestroy = true;
			}

			if (bDestroy) {
				oLabel.destroy();
				delete this._oLabel;
				oLabel = null;
				if (this._oSetLabel && !oRelevantField) {
					// original Label exist and no SmartLabel needed -> go back to original Label
					// go back to original Label
					if (typeof this._oSetLabel === "string") {
						FormElement.prototype.setLabel.apply(this, [this._oSetLabel]);
						oLabel = this._oLabel;
						this._oLabel.isRequired = _labelIsRequired; // use GroupElements logic
					} else {
						oLabel = this._oSetLabel;
					}
					_setLabelToVBox.call(this);
				}
			}
		} else if (oLabel && oRelevantField) {
			// Label set from outside but SmartLabel needed
			if (oLabel == this._oLabel) {
				// destroy internal Label
				oLabel.destroy();
				delete this._oLabel;
			}
			oLabel = null; // don't use set Label
		}

		if (!oLabel) {
			if (this._oSetLabel) {
				// Label destroyed -> get text of original Label
				if (typeof this._oSetLabel === "string") {
					sOldText = this._oSetLabel;
				} else {
					sOldText = this._oSetLabel.getText();
				}
			} else {
				sOldText = "";
			}
		}

		if (!oLabel && aElements.length > 0) {
			// new Label needed
			oLabel = this._createLabel(sOldText);
			bCreated = true;
		}

		if (oLabel) {
			if (oLabel instanceof SmartLabel) {
				if (oRelevantField && oRelevantField.setTextLabel && oRelevantField.getTextLabel()) {
					// if the label was implicitly created and the SF has a textLabel -> set the same a label text
					oLabel.setText(oRelevantField.getTextLabel());
				}
			}

			_setTooltipToLabel.call(this, oLabel, oRelevantField);

		}

		if (bCreated) {
			_setLabelToVBox.call(this);

			if (oLabel && oLabel.setLabelFor && !(oLabel instanceof SmartLabel) && !oRelevantField && (aElements.length > 0)) {
				oLabel.setLabelFor(aElements[0]);
			}

		}

	};

	/**
	 * Setter for property editable of all smart fields in children hierarchy.
	 *
	 * @param {boolean} bEditMode new value for editable property of smart fields.
	 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.setEditMode = function(bEditMode) {

		var aElement = this.getElements();

		aElement.forEach(function(oElement) {
			if (oElement instanceof SmartField) {
				if (!(oElement.data("editable") === false)) {
					oElement.setContextEditable(bEditMode);
				}
			}
		});

		return this;
	};

	/**
	 * Checks whether at least one field is visible
	 *
	 * @param {array} aFields contains all that fields that shall be checked
	 * @param {boolean} bIgnoreSmartLabels defines whether SmartLabels shall be considered for visibility determination (in VBox = false)
	 * @returns {boolean} flag if a visible field was found
	 * @private
	 */
	GroupElement.prototype._getVisibilityOfFields = function(aFields, bIgnoreSmartLabels) {
		var bResult = false;
		var i = 0, iLength = 0, oField = null;

		if (aFields && aFields.length) {
			iLength = aFields.length;
			for (i = 0; i < iLength; i++) {
				oField = aFields[i];
				if (oField) {

					// this case shall ignore SmartLabels if they come from VBox
					if (bIgnoreSmartLabels && oField instanceof SmartLabel) {
						continue;
					}

					if (oField instanceof VBox) {
						bResult = this._getVisibilityOfFields(this._extractFields([
							oField
						]), true);
					} else {
						bResult = oField.getVisible();
					}
				}

				// break if at least one field is visible
				if (bResult) {
					break;
				}
			}
		}

		return bResult;
	};

	/**
	 * Updates the visibility of the <code>FormElement</code>
	 *
	 * @private
	 */
	GroupElement.prototype._updateFormElementVisibility = function() {
		var bActualVisible = this.getVisible();
		var bVisible = false, aFields = null;

		if (bActualVisible === false && this._visibilityDerived === false) {
			return;
		}

		aFields = this.getElements();
		if (aFields && aFields.length) {
			bVisible = this._getVisibilityOfFields(aFields);
		}

		if (bActualVisible !== bVisible) {
			this._visibilityDerived = true;
			FormElement.prototype.setVisible.apply(this, [bVisible]);
			this.fireVisibleChanged({
				visible: bVisible
			});
			if (this.getParent()) {
				this.getParent()._updateLineBreaks();
			}
		}
	};

	GroupElement.prototype._updateLayout = function() {

		var oVBox = null;
		var oHBox = null;
		var aFields = [];
		var aElements = [];
		var oLayoutData = null;
		var bUseHorizontalLayout = this.getUseHorizontalLayout();
		var aVBoxContent;
		var iIndex = 0;
		var oField;

		if (bUseHorizontalLayout == this._bHorizontalLayoutUsed) {
			// layout has not changed
			return;
		}

		// get Fields corresponding to old layout
		if (this._bHorizontalLayoutUsed) {
			aElements = this.getFields();
			aFields = this._extractFields(aElements, true);
		} else {
			aFields = this.getFields();
		}
		var oLabel = this._getLabel();

		if (bUseHorizontalLayout) {
			// insert internal layouts
			// keep layout data
			if (aFields.length > 0 && aFields[0].getLayoutData()) {
				oLayoutData = aFields[0].getLayoutData();
			}
			this.removeAllFields();
			if (aFields.length > 0) {

				if (aFields.length > 1) {
					// HBox needed
					for (iIndex = 0; iIndex < aFields.length; iIndex++) {
						oField = aFields[iIndex];

						if (iIndex > 0) {
							_addLayoutDataToField.call(this, oField);
						}
					}
					oHBox = _createHBox.call(this, aFields.slice(0));
				}

				if (oHBox) {
					aVBoxContent = [oHBox];
				} else {
					aVBoxContent = aFields.slice(0);
				}

				oVBox = _createVBox.call(this, aVBoxContent, oLabel, oLayoutData);
				this.addField(oVBox);

				if (oLabel) {
					_updateLabelFor.call(this); // as FormElement.addField sets Label to VBox
				}
			}
		} else {
			// remove internal layouts
			if (aElements[0] instanceof VBox) {
				oVBox = aElements[0];
				aVBoxContent = oVBox.getItems();
				if (aFields.length > 1 && aVBoxContent.length > 0) {
					if (oLabel) {
						if (aVBoxContent.length > 1 && aVBoxContent[1] instanceof HBox) {
							oHBox = aVBoxContent[1];
						}
					} else if (aVBoxContent[0] instanceof HBox) {
						oHBox = aVBoxContent[0];
					}
					if (oHBox) {
						oHBox.removeAllItems();
						oHBox.destroy();
					}
				}
				oVBox.removeAllItems();
				oVBox.destroy();
			}
			this.removeAllFields();
			for (iIndex = 0; iIndex < aFields.length; iIndex++) {
				oField = aFields[iIndex];
				_removeLayoutDataFromField.call(this, oField);
				this.addField(oField);
			}
			if (oLabel) {
				if (oLabel == this._oLabel) {
					this.setAggregation("_label", oLabel, true); // use Aggregation to allow model inheritance
				} else {
					this.setAggregation("label", oLabel);
				}
			}
		}

		this._bHorizontalLayoutUsed = bUseHorizontalLayout;

	};

	function _addLayoutDataToField(oField) {

		var oLayoutData = oField.getLayoutData();
		if (oLayoutData) {
			if (oLayoutData.getStyleClass && !oLayoutData.getStyleClass()) {
				oLayoutData.setStyleClass("sapUiCompGroupElementHBoxPadding");
			}
		} else {
			oLayoutData = new sap.m.FlexItemData({
				styleClass: "sapUiCompGroupElementHBoxPadding"
			});
			oLayoutData._bCreatedByGroupElement = true;
			oField.setLayoutData(oLayoutData);
		}

	}

	function _removeLayoutDataFromField(oField) {

		var oLayoutData = oField.getLayoutData();
		if (oLayoutData) {
			if (oLayoutData._bCreatedByGroupElement) {
				oLayoutData.destroy();
			} else if (oLayoutData.getStyleClass && oLayoutData.getStyleClass() == "sapUiCompGroupElementHBoxPadding") {
				oLayoutData.setStyleClass();
			}
		}

	}

	function _createVBox(aFields, oLabel, oLayoutData) {

		if (!GroupElement._myVBox) {
			// use own VBox to have a valid Form content
			GroupElement._myVBox = VBox.extend("SmartFormVBox", {
				metadata: {
					interfaces : ["sap.ui.core.IFormContent"]
				},
				enhanceAccessibilityState: _enhanceAccessibilityStateVBox,
				renderer: "sap.m.VBoxRenderer"
			});
		}

		this._bMoveLabelToVBox = true;

		var aContent = aFields.slice(0);
		if (oLabel) {
			aContent.splice(0, 0, oLabel);
		}

		var oVBox = new GroupElement._myVBox( this.getId() + "--VBox", {
			"items": aContent
		});

		this._bMoveLabelToVBox = false;

		oVBox.addStyleClass("sapUiCompGroupElementVBox");
		oVBox._oGroupElement = this;

		if (oLayoutData &&
				(oLayoutData instanceof GridData || oLayoutData instanceof VariantLayoutData ||
				 oLayoutData.getMetadata().getName() == "sap.ui.layout.ResponsiveFlowLayoutData")) {
			// clone original LayoutData and don't remove them from Field
			// only clone LayoutData relevant for Form
			oVBox.setLayoutData(oLayoutData.clone());
		}

		_updateVBoxGridDataSpan.call(this, oVBox); // get Spans from SmartForms Layout

		return oVBox;

	}

	function _createHBox(aContent) {

		var oHBox = new HBox( this.getId() + "--HBox", {
			"items": aContent
		});

		oHBox._oGroupElement = this;
		oHBox.enhanceAccessibilityState = _enhanceAccessibilityStateVBox;

		return oHBox;

	}

	function _enhanceAccessibilityStateVBox(oElement, mAriaProps) {

		var oLabel = this._oGroupElement._getLabel();
		if (oLabel && oLabel != oElement && !(oElement instanceof HBox)) {

			var sLabelledBy = mAriaProps["labelledby"];
			if (!sLabelledBy) {
				sLabelledBy = oLabel.getId();
			} else {
				var aLabels = sLabelledBy.split(" ");
				if (jQuery.inArray(oLabel.getId(), aLabels) < 0) {
					aLabels.splice(0, 0, oLabel.getId());
					sLabelledBy = aLabels.join(" ");
				}
			}
			mAriaProps["labelledby"] = sLabelledBy;

		}

		return mAriaProps;

	}

	/*
	 * gets the Span data from the SmartForm to create and update the gridData of the VBox
	 */
	GroupElement.prototype._updateGridDataSpan = function() {

		if (!this.getUseHorizontalLayout()) {
			return;
		}

		var aFields = this.getFields();
		if (aFields.length > 0) {
			var oVBox = aFields[0];
			if (oVBox instanceof VBox) {
				_updateVBoxGridDataSpan.call(this, oVBox);
			}
		}

	};

	function _updateVBoxGridDataSpan(oVBox) {

		var oGroup = this.getParent();
		if (!oGroup || !oGroup.addGroupElement) {
			return;
		}

		var oSmartForm = oGroup.getParent();
		while (oSmartForm && !oSmartForm.addGroup && oSmartForm.getParent) {
			// could be Form and Panel
			oSmartForm = oSmartForm.getParent();
		}

		if (!oSmartForm) {
			return;
		}

		var sSpan = "";
		var oLayout = oSmartForm.getLayout();

		if (oLayout) {
			sSpan = oLayout.getGridDataSpan();
		}

		var oLayoutData = oVBox.getLayoutData();
		var oNewLayoutData;

		if (oLayoutData) {
			if (!(oLayoutData instanceof GridData) && !(oLayoutData instanceof VariantLayoutData) && sSpan) {
				oNewLayoutData = new GridData({
					span: sSpan
				});
				oNewLayoutData._bFromGroupElement = true;
				var oVariantLayout = new VariantLayoutData({
					multipleLayoutData: [oLayoutData, oNewLayoutData]
				});
				oVariantLayout._bFromGroupElement = true;
				oVBox.setLayoutData(oVariantLayout);
			} else if (oLayoutData instanceof GridData) {
				if (oLayoutData._bFromGroupElement) {
					// only update own GridData
					if (!sSpan) {
						oLayoutData.destroy();
					} else {
						oLayoutData.setSpan(sSpan);
					}
				}
			} else if (oLayoutData instanceof VariantLayoutData) {
				var bFound = false;
				oLayoutData.getMultipleLayoutData().forEach(function(oLayoutData) {
					if (oLayoutData instanceof GridData) {
						bFound = true;
						if (oLayoutData._bFromGroupElement) {
							// only update own GridData
							if (!sSpan) {
								oLayoutData.destroy();
							} else {
								oLayoutData.setSpan(sSpan);
							}
						}
					}
				});
				if (!bFound && sSpan) {
					oNewLayoutData = new GridData({
						span: sSpan
					});
					oNewLayoutData._bFromGroupElement = true;
					oLayoutData.addMultipleLayoutData(oNewLayoutData);
				}
				if (oLayoutData._bFromGroupElement && oLayoutData.getMultipleLayoutData().length == 1) {
					oNewLayoutData = oLayoutData.getMultipleLayoutData()[0];
					oVBox.setLayoutData(oNewLayoutData);
					oLayoutData.destroy();
				}
			}
		} else if (sSpan) {
			oNewLayoutData = new GridData({
				span: sSpan
			});
			oNewLayoutData._bFromGroupElement = true;
			oVBox.setLayoutData(oNewLayoutData);
		}

		var aElements = this.getElements();
		for (var i = 0; i < aElements.length; i++) {
			var oElement = aElements[i];
			if (oElement && oElement.setControlContext) {
				if (sSpan) {
					oElement.setControlContext(ControlContextType.SmartFormGrid);
				} else {
					oElement.setControlContext(ControlContextType.Form);
				}
			}
		}

	}

	GroupElement.prototype._setLinebreak = function(bLineBreakXL, bLineBreakL, bLineBreakM, bLineBreakS) {

		if (!this.getUseHorizontalLayout()) {
			return;
		}

		var aFields = this.getFields();
		if (aFields.length > 0) {
			var oVBox = aFields[0];
			if (!(oVBox instanceof VBox)) {
				return;
			}

			var oLayoutData = oVBox.getLayoutData();

			if (oLayoutData) {
				// LayoutData must be created by _updateVBoxGridDataSpan
				if (oLayoutData instanceof VariantLayoutData) {
					var aLayoutData = oLayoutData.getMultipleLayoutData();
					for (var i = 0; i < aLayoutData.length; i++) {
						oLayoutData = aLayoutData[i];
						if (oLayoutData instanceof GridData) {
							oLayoutData.setLinebreakXL(bLineBreakXL);
							oLayoutData.setLinebreakL(bLineBreakL);
							oLayoutData.setLinebreakM(bLineBreakM);
							oLayoutData.setLinebreakS(bLineBreakS);
						}
					}
				} else {
					oLayoutData.setLinebreakXL(bLineBreakXL);
					oLayoutData.setLinebreakL(bLineBreakL);
					oLayoutData.setLinebreakM(bLineBreakM);
					oLayoutData.setLinebreakS(bLineBreakS);
				}
			}
		}

	};

	GroupElement.prototype.setVisible = function(bVisible) {
		var bActualVisible, bLastVisible = this.getVisible();
		this._visibilityDerived = false;
		FormElement.prototype.setVisible.apply(this, arguments);

		if (bVisible) {
			this._updateFormElementVisibility();
		}

		bActualVisible = this.getVisible();

		if (!bVisible || bActualVisible) {
			if (bLastVisible != bActualVisible) {
				this.fireVisibleChanged({
					visible: bActualVisible
				});
			}
		}

		return this;
	};

	GroupElement.prototype.setUseHorizontalLayout = function(bValue) {

		var bOldValue = this.getUseHorizontalLayout();
		if (bOldValue == bValue) {
			return this;
		}

		this.setProperty("useHorizontalLayout", bValue);

		this._updateLayout();

		return this;
	};

	GroupElement.prototype.setHorizontalLayoutGroupElementMinWidth = function(nValue) {

		var nOldValue = this.getHorizontalLayoutGroupElementMinWidth();
		if (nOldValue == nValue) {
			return this;
		}

		jQuery.sap.log.error("HorizontalLayoutGroupElementMinWidth is deprecated", this);

		this.setProperty("horizontalLayoutGroupElementMinWidth", nValue);

		this._updateLayout();

		return this;
	};

	/**
	 * Returns the from element.
	 *
	 * @return {sap.ui.layout.form.FormElement} the form element.
	 * @public
	 */
	GroupElement.prototype.getFormElement = function() {
		return this;
	};

	GroupElement.prototype.addElement = function(oElement) {

		if (!oElement) {
			return this;
		}

		// as "elements" aggregation is not used, at least validate it
		oElement = this.validateAggregation("elements", oElement, /* multiple */ true);

		_enhanceField.call(this, oElement);

		var sLabelSmartFieldId;
		if (this._oLabel && this._oLabel._bCreatedByGroupElement && this._oLabel._sSmartFieldId) {
			sLabelSmartFieldId = this._oLabel._sSmartFieldId;
		}

		if (this.getUseHorizontalLayout()) {
			_addInsertFieldToVBox.call(this, oElement, undefined, true);
		} else {
			this.addField(oElement);
		}

		if (sLabelSmartFieldId && sLabelSmartFieldId != this._oLabel._sSmartFieldId) {
			// as FormElement always assigns first field to Label, restore old assignment and use GroupElements logic
			this._oLabel.setLabelFor(sLabelSmartFieldId);
		}

		this.updateLabelOfFormElement();

		return this;
	};

	GroupElement.prototype.insertElement = function(oElement, iIndex) {

		if (!oElement) {
			return this;
		}

		// as "elements" aggregation is not used, at least validate it
		oElement = this.validateAggregation("elements", oElement, /* multiple */ true);

		_enhanceField.call(this, oElement);

		var sLabelSmartFieldId;
		if (this._oLabel && this._oLabel._bCreatedByGroupElement && this._oLabel._sSmartFieldId) {
			sLabelSmartFieldId = this._oLabel._sSmartFieldId;
		}

		if (this.getUseHorizontalLayout()) {
			_addInsertFieldToVBox.call(this, oElement, iIndex, false);
		} else {
			this.insertField(oElement, iIndex);
		}

		if (sLabelSmartFieldId && sLabelSmartFieldId != this._oLabel._sSmartFieldId) {
			// as FormElement always assigns first field to Label, restore old assignment and use GroupElements logic
			this._oLabel.setLabelFor(sLabelSmartFieldId);
		}

		this.updateLabelOfFormElement();

		return this;

	};

	GroupElement.prototype.getElements = function() {

		var aElements;
		var aFields;

		if (this.getUseHorizontalLayout()) {
			aElements = this.getFields();
			aFields = this._extractFields(aElements, true);
		} else {
			aFields = this.getFields();
		}

		return aFields;

	};

	GroupElement.prototype.indexOfElement = function(oElement) {

		var iIndex = -1;

		if (this.getUseHorizontalLayout()) {
			var aElements = this.getElements();
			for (var i = 0; i < aElements.length; i++) {
				if (oElement == aElements[i]) {
					iIndex = i;
					break;
				}
			}
		} else {
			iIndex = this.indexOfField(oElement);
		}

		return iIndex;

	};

	GroupElement.prototype.removeElement = function(vElement) {

		var oResult;

		var sLabelSmartFieldId;
		if (this._oLabel && this._oLabel._bCreatedByGroupElement && this._oLabel._sSmartFieldId) {
			sLabelSmartFieldId = this._oLabel._sSmartFieldId;
		}

		if (this.getUseHorizontalLayout()) {
			oResult = _removeFieldsFromVBox.call(this, vElement, false);
		} else {
			oResult = this.removeField(vElement);
		}

		if (oResult) {
			_cleanUpField.call(this, oResult);
		}

		if (sLabelSmartFieldId && sLabelSmartFieldId != this._oLabel._sSmartFieldId) {
			// as FormElement always assigns first field to Label, restore old assignment and use GroupElements logic
			this._oLabel.setLabelFor(sLabelSmartFieldId);
		}

		this.updateLabelOfFormElement();

		return oResult;

	};

	GroupElement.prototype.removeAllElements = function() {

		var aResult;

		if (this.getUseHorizontalLayout()) {
			aResult = _removeFieldsFromVBox.call(this, undefined, true);
		} else {
			aResult = this.removeAllFields();
		}

		if (aResult && Array.isArray(aResult)) {
			for (var i = 0; i < aResult.length; i++) {
				_cleanUpField.call(this, aResult[i]);
			}
		}

		this.updateLabelOfFormElement();

		return aResult;

	};

	GroupElement.prototype.destroyElements = function() {

		if (this.getUseHorizontalLayout()) {
			var aFields = this.getFields();
			if (aFields.length > 0) {
				var oLabel = this._getLabel();
				if (oLabel) {
					aFields[0].removeItem(oLabel);
					if (oLabel == this._oLabel) {
						this.setAggregation("_label", oLabel, true); // use Aggregation to allow model inheritance
					} else {
						this.setAggregation("label", oLabel);
					}
				}
				this.destroyFields();
			}
		} else {
			this.destroyFields();
		}

		this.updateLabelOfFormElement();

		return this;

	};

	function _addInsertFieldToVBox(oField, iIndex, bAdd) {

		var oLabel = this._getLabel();
		var aFields = this.getFields();
		var oVBox;
		var oHBox;
		var aItems;

		if (aFields.length > 0) {
			oVBox = aFields[0];
		} else {
			// is first field
			aItems = [oField];

			// keep LayoutData of first field
			var oLayoutData = oField.getLayoutData();
			oVBox = _createVBox.call(this, aItems, oLabel, oLayoutData);
			this.addField(oVBox);
			if (oLabel) {
				_updateLabelFor.call(this); // as FormElement.addField sets Label to VBox
			}
			return;
		}

		if (!(oVBox instanceof VBox)) {
			return;
		}

		aItems = oVBox.getItems();

		if (oLabel) {
			if (aItems.length > 1) {
				oHBox = aItems[1];
			}
		} else if (aItems.length > 0) {
			oHBox = aItems[0];
		}

		if (oHBox instanceof HBox) {
			// insert field to existing HBox
			aItems = oHBox.getItems();
			if ((bAdd || iIndex > 0) && aItems.length > 0) {
				_addLayoutDataToField.call(this, oField);
			}
			if (bAdd) {
				oHBox.addItem(oField);
			} else {
				if (iIndex == 0 && aItems.length > 0) {
					_addLayoutDataToField.call(this, aItems[0]);
				}
				oHBox.insertItem(oField, iIndex);
			}
		} else {
			var oFirstField = oHBox;
			aItems = [];
			if (oFirstField) {
				// create new HBox and add field
				oVBox.removeItem(oFirstField);
				if (bAdd || iIndex > 0) {
					aItems.push(oFirstField);
					aItems.push(oField);
					_addLayoutDataToField.call(this, oField);
				} else {
					aItems.push(oField);
					aItems.push(oFirstField);
					_addLayoutDataToField.call(this, oFirstField);
				}
				oHBox = _createHBox.call(this, aItems);
				oVBox.addItem(oHBox);
			} else {
				// just add field to VBox
				oVBox.addItem(oField);
			}
			if (oLabel) {
				_updateLabelFor.call(this);
			}
		}

	}

	function _enhanceField(oField) {

		if (oField.getEditable) {
			if (!oField.getEditable()) {
				oField.data("editable", false);
			}
		}

		if (oField.attachVisibleChanged) {
			oField.attachVisibleChanged(this._updateFormElementVisibility, this);
		}
		if (oField.attachInnerControlsCreated) {
			oField.attachInnerControlsCreated(this._updateFormElementLabel, this);
		}
		if (oField.setControlContext) {
			oField.setControlContext(ControlContextType.Form);
		}
		if (oField.getMetadata().getProperty("mandatory")) {
			oField.attachEvent("_change", _handleControlChange, this);
		}

		_inheritCustomData.call(this, oField);

	}

	function _inheritCustomData(oField) {

		if (oField instanceof SmartField) {
			var aCustomData = this.getCustomData();

			for (var i = 0; i < aCustomData.length; i++) {
				_addCustomDataToField.call(this, oField, aCustomData[i]);
			}
		}

	}

	function _addCustomDataToField(oField, oCustomData) {

		if (oField instanceof SmartField && sap.ui.comp.smartform.inheritCostomDataToFields(oCustomData)) {
			var oNewCustomData = oCustomData.clone();
			oNewCustomData._bFromGroupElement = true;
			oNewCustomData._sOriginalId = oCustomData.getId();
			oField.addCustomData(oNewCustomData);
		}

	}

	function _handleControlChange(oEvent) {

		if (oEvent.getParameter("name") == "mandatory") {
			var oLabel = this._getLabel();
			if (oLabel) {
				oLabel.invalidate();
			}
		}

	}

	function _removeFieldsFromVBox(vField, bAll) {

		var oLabel = this._getLabel();
		var aFields = this.getFields();
		var oVBox;
		var oHBox;
		var aItems;
		var vResult;
		var bNoFieldLeft = false;
		var oField;

		if (aFields.length > 0) {
			oVBox = aFields[0];
		}

		if (!(oVBox instanceof VBox)) {
			return null;
		}

		aItems = oVBox.getItems();

		if (oLabel) {
			if (aItems.length > 1) {
				oHBox = aItems[1];
			}
		} else if (aItems.length > 0) {
			oHBox = aItems[0];
		}

		if (oHBox instanceof HBox) {
			// remove from HBox
			if (bAll) {
				vResult = oHBox.removeAllItems();
				bNoFieldLeft = true;
			} else {
				vResult = oHBox.removeItem(vField);
				aItems = oHBox.getItems();
				if (aItems.length > 0) {
					// remove layoutData from first field (happens if first field was removed)
					_removeLayoutDataFromField.call(this, aItems[0]);
					if (aItems.length == 1) {
						// only 1 field feft -> remove HBox
						oField = aItems[0];
						oHBox.removeAllItems();
						oVBox.removeItem(oHBox);
						oHBox.destroy();
						oVBox.addItem(oField);
					}
				}
			}
		} else {
			// remove from VBox (only 1 Field exist)
			if (bAll) {
				vResult = oVBox.removeAllItems();
			} else {
				vResult = oVBox.removeItem(vField);
			}

			if (vResult) {
				bNoFieldLeft = true;
			}
		}

		if (bNoFieldLeft) {
			// remove VBox
			if (oLabel) {
				oVBox.removeItem(oLabel);
				if (oLabel == this._oLabel) {
					this.setAggregation("_label", oLabel, true); // use Aggregation to allow model inheritance
				} else {
					this.setAggregation("label", oLabel);
				}
			}
			this.removeField(oVBox);
			oVBox.destroy();
		}

		if (vResult) {
			if (Array.isArray(vResult)) {
				for (var i = 0; i < vResult.length; i++) {
					oField = vResult[i];
					_removeLayoutDataFromField.call(this, oField);
				}
			} else {
				_removeLayoutDataFromField.call(this, vResult);
			}
		}

		return vResult;

	}

	function _cleanUpField(oField) {

	// how to remove ????
//			if (oField.getEditable) {
//				if (!oField.getEditable()) {
//					oField.data("editable", false);
//				}
//			}

		if (oField.detachVisibleChanged) {
			oField.detachVisibleChanged(this._updateFormElementVisibility, this);
		}
		if (oField.detachInnerControlsCreated) {
			oField.detachInnerControlsCreated(this._updateFormElementLabel, this);
		}
		if (oField.setControlContext) {
			oField.setControlContext(ControlContextType.None);
		}
		if (oField.getMetadata().getProperty("mandatory")) {
			oField.detachEvent("_change", _handleControlChange, this);
		}

		_removeInheritedCustomData.call(this, oField);
		_restoreTextLabel.call(this, oField, this.getLabelText());

	}

	function _restoreTextLabel(oField, sLabelText) {

		if (oField._oTextLabelSetByGroupElement) {
			if (oField.getTextLabel() == sLabelText) {
				// if not changed from outside
				oField.setTextLabel(oField._oTextLabelSetByGroupElement.oldText);
			}
			delete oField._oTextLabelSetByGroupElement;
		}

	}

	function _removeInheritedCustomData(oField, sOriginalId) {

		if (oField instanceof SmartField) {
			var aCustomData = oField.getCustomData();
			for (var i = 0; i < aCustomData.length; i++) {
				var oCustomData = aCustomData[i];
				if (oCustomData._bFromGroupElement && (!sOriginalId || sOriginalId == oCustomData._sOriginalId)) {
					oField.removeCustomData(oCustomData);
					oCustomData.destroy();
				}
			}
		}

	}

	GroupElement.prototype._updateFormElementLabel = function(oEvent) {

		var oRelevantField = this._getFieldRelevantForLabel();
		var oLabel = this._getLabel();
		var oSmartField = oEvent.oSource;
		var aInnerElements = oEvent.getParameters();

		if (oLabel instanceof SmartLabel && oSmartField && aInnerElements && oSmartField === oRelevantField) {
			oLabel.updateLabelFor(aInnerElements);
		}

	};

	/**
	 * Adds some customData into the aggregation <code>customData</code>.
	 *
	 * <b>Note:</b> <code>customData</code> that is used by the <code>SmartField</code> control itself
	 * is also added to the <code>SmartField</code> controls in the children hierarchy.
	 * Additional <code>customData</code> that is not used by the <code>SmartField</code> control
	 * internally might not be added.
	 *
	 * @param {sap.ui.core.CustomData} oCustomData the customData to add; if empty, nothing is added
	 * @return {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.addCustomData = function(oCustomData) {

		if (!oCustomData) {
			return this;
		}

		FormElement.prototype.addCustomData.apply(this, arguments);

		var aElements = this.getElements();

		for (var i = 0; i < aElements.length; i++) {
			_addCustomDataToField.call(this, aElements[i], oCustomData);
		}

		return this;

	};

	/**
	 * Inserts some customData into the aggregation <code>customData</code>.
	 *
	 * <b>Note:</b> <code>customData</code> that is used by the <code>SmartField</code> control itself
	 * is also added to the <code>SmartField</code> controls in the children hierarchy.
	 * Additional <code>customData</code> that is not used by the <code>SmartField</code> control
	 * internally might not be added.
	 *
	 * @param {sap.ui.core.CustomData} oCustomData the customData to insert; if empty, nothing is inserted
	 * @param {int} iIndex the 0-based index the customData should be inserted at; for a negative value of iIndex, the customData is inserted at position 0; for a value greater than the current size of the aggregation, the customData is inserted at the last position
	 * @return {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> to allow method chaining.
	 * @public
	 */
	GroupElement.prototype.insertCustomData = function(oCustomData, iIndex) {

		if (!oCustomData) {
			return this;
		}

		FormElement.prototype.insertCustomData.apply(this, arguments);

		var aElements = this.getElements();

		for (var i = 0; i < aElements.length; i++) {
			// order doesn't matter
			_addCustomDataToField.call(this, aElements[i], oCustomData);
		}

		return this;

	};

	GroupElement.prototype.removeCustomData = function(vCustomData) {

		var oCustomData = FormElement.prototype.removeCustomData.apply(this, arguments);

		if (oCustomData) {
			var aElements = this.getElements();
			for (var i = 0; i < aElements.length; i++) {
				_removeInheritedCustomData.call(this, aElements[i], oCustomData.getId());
			}
		}

		return oCustomData;

	};

	GroupElement.prototype.removeAllCustomData = function() {

		var aCustomData = FormElement.prototype.removeAllCustomData.apply(this, arguments);

		if (aCustomData.length > 0) {
			var aElements = this.getElements();
			for (var i = 0; i < aElements.length; i++) {
				_removeInheritedCustomData.call(this, aElements[i]);
			}
		}

		return aCustomData;

	};

	GroupElement.prototype.destroyCustomData = function() {

		FormElement.prototype.destroyCustomData.apply(this, arguments);

		var aElements = this.getElements();
		for (var i = 0; i < aElements.length; i++) {
			_removeInheritedCustomData.call(this, aElements[i]);
		}

		return this;

	};

	/**
	 * Determines the visibility of a <code>GroupElement</code> based on elements
	 *
	 * @returns {boolean} Returns true, in case one element of the group element is visible
	 * @public
	 */
	GroupElement.prototype.getVisibleBasedOnElements = function() {
		var isVisible = true;

		var aElements = this.getElements();
		if (aElements && aElements.length > 0) {
			isVisible = aElements.some(function(oElement) {
				return oElement.getVisible();
			});
		}

		return isVisible;
	};

	function _getTooltipString() {

		var oTooltip = this.getTooltip();
		if (!oTooltip || typeof oTooltip === "string" || oTooltip instanceof String ) {
			return oTooltip;
		} else {
			return oTooltip.getText();
		}
	}

	/*
	 * to have the right event handlers attached to the elements and all internal label,
	 * VBox, HBoy, LayoutData and CustomData settings we need to remove all element before
	 * cloning, add them again afterwards and clone them manually.
	 */
	GroupElement.prototype.clone = function(sIdSuffix, aLocalIds){

		var aElements = this.removeAllElements();

		var oClone = FormElement.prototype.clone.apply(this, arguments);

		for (var i = 0; i < aElements.length; i++) {
			var oElement = aElements[i];
			var oElementClone = oElement.clone(sIdSuffix, aLocalIds);
			this.addElement(oElement);
			oClone.addElement(oElementClone);
		}

		return oClone;

	};

	// remove "internal" FormElement functionality from API documentation

	/**
	 * Adds some field to the aggregation <code>fields</code>.
	 *
	 * Do not use the <code>fields</code> aggregation, use the <code>elements</code> aggregation instead.
	 *
	 * @param {sap.ui.core.Control} oField Field to be added
	 * @return {sap.ui.comp.snartform.GroupElement} Reference to <code>this</code> to allow method chaining
	 * @private
	 * @name sap.ui.comp.smartform.GroupElement#addField
	 * @function
	 */

	/**
	 * Inserts a field to the aggregation <code>fields</code>.
	 *
	 * Do not use the <code>fields</code> aggregation, use the <code>elements</code> aggregation instead.
	 *
	 * @param {sap.ui.core.Control} oField Field to be added
	 * @param {int} iIndex the 0-based index the field should be inserted at; for a negative value of iIndex, the field is inserted at position 0; for a value greater than the current size of the aggregation, the field is inserted at the last position
	 * @return {sap.ui.comp.snartform.GroupElement} Reference to <code>this</code> to allow method chaining
	 * @private
	 * @name sap.ui.comp.smartform.GroupElement#insertField
	 * @function
	 */

	/**
	 * Gets content of aggregation <code>fields</code>.
	 *
	 * Do not use the <code>fields</code> aggregation, use the <code>elements</code> aggregation instead.
	 *
	 * @return {sap.ui.core.Control[]} array of fields
	 * @private
	 * @name sap.ui.comp.smartform.GroupElement#getFields
	 * @function
	 */

	/**
	 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>fields</code>.
	 * and returns its index if found or -1 otherwise.
	 *
	 * Do not use the <code>fields</code> aggregation, use the <code>elements</code> aggregation instead.
	 *
	 * @param {sap.ui.core.Control} oField The field whose index is looked for
	 * @return {int} The index of the provided control in the aggregation if found, or -1 otherwise
	 * @private
	 * @name sap.ui.comp.smartform.GroupElement#indexOfField
	 * @function
	 */

	/**
	 * Removes a field from the aggregation <code>fields</code>.
	 *
	 * Do not use the <code>fields</code> aggregation, use the <code>elements</code> aggregation instead.
	 *
	 * @param {int|string|sap.ui.core.Control} vField The field to remove or its index or id
	 * @return {sap.ui.core.Control} The removed field or null
	 * @private
	 * @name sap.ui.comp.smartform.GroupElement#removeField
	 * @function
	 */

	/**
	 * Removes all the controls from the aggregation <code>fields</code>.
	 *
	 * Do not use the <code>fields</code> aggregation, use the <code>elements</code> aggregation instead.
	 *
	 * @return {sap.ui.core.Control[]} An array of the removed elements (might be empty)
	 * @private
	 * @name sap.ui.comp.smartform.GroupElement#removeAllFields
	 * @function
	 */

	/**
	 * Destroys all the fields in the aggregation <code>fields</code>.
	 *
	 * Do not use the <code>fields</code> aggregation, use the <code>elements</code> aggregation instead.
	 *
	 * @return {sap.ui.comp.snartform.GroupElement} Reference to <code>this</code> to allow method chaining
	 * @private
	 * @name sap.ui.comp.smartform.GroupElement#destroyFields
	 * @function
	 */

	return GroupElement;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/GroupElement.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.odata.FieldSelector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.odata.FieldSelector.
jQuery.sap.declare('sap.ui.comp.odata.FieldSelector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/odata/FieldSelector",['jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Control', './FieldSelectorController'],
	function(jQuery, library, Control, FieldController) {
	"use strict";



/**
 * Constructor for a new odata/FieldSelector.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Reuse control which displays the properties of OData entity sets.
 * @extends sap.ui.core.Control
 *
 * @constructor
 * @public
	 * @alias sap.ui.comp.odata.FieldSelector
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
	var FieldSelector = Control.extend("sap.ui.comp.odata.FieldSelector", /** @lends sap.ui.comp.odata.FieldSelector.prototype */ { metadata : {

	library : "sap.ui.comp",
	properties : {

		/**
		 * Indicates to show a search bar for property names inside a selected entity set.
		 */
		showSearchBar : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {

		/**
		 * Content of the control itself
		 */
		content : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {

		/**
		 * User selected a different field.
		 */
		fieldSelectionChanged : {}
	}
}});

	FieldSelector._tooltipBinding = {
		parts: [
			{path: "com.sap.vocabularies.Common.v1.QuickInfo"},
			{path: "com.sap.vocabularies.Common.v1.Label"}
		],
		formatter: function tooltipFormatter(oQuickInfo, oLabel){
			if (oQuickInfo && oQuickInfo.String){
				return oQuickInfo.String;
			}

			if (oLabel && oLabel.String){
				return oLabel.String;
			}

			return '';
		}
	};


/**
 * Returns a map with the name of the entity set and the key of the selected field.
 *
 * @name sap.ui.comp.odata.FieldSelector#getSelectedField
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

	FieldSelector.prototype.init = function() {


	// do something for initialization...
	jQuery.sap.require("sap.m.HBox");
	jQuery.sap.require("sap.m.VBox");
	jQuery.sap.require("sap.m.FlexItemData");
	jQuery.sap.require("sap.m.FlexDirection");
	jQuery.sap.require("sap.m.FlexAlignSelf");
	jQuery.sap.require("sap.m.FlexAlignItems");
	jQuery.sap.require("sap.ui.core.ResizeHandler");
	jQuery.sap.require("sap.ui.comp.odata.FieldSelectorModelConverter");
	jQuery.sap.require("sap.m.Label");
	jQuery.sap.require("sap.ui.fl.fieldExt.Access");

	this._fieldNameText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_NAME");
	this._fieldTypeText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_TYPE");
	this._fieldLabelText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_LABEL");
	this._entityTypeText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_FIELD_SEL_HEADER");
	this._createNewFieldText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("ODATA_CREATE_NEW_FIELD");

	this._oFieldController = new FieldController();
	this._sSelectedKey = undefined;
	this._oTable = undefined;
	this._oSearchField = undefined;
	this._oConverter = undefined;
	this._oCreateButton = undefined;
	this._bDisplayFieldExtButton = undefined;
	this._oCurrentFieldExtInfo = undefined;
	this._oScrollView = new sap.m.ScrollContainer();
	this._oTable = new sap.m.Table();
	this._oHeaderLayout = undefined;

	var smartFormDialog = sap.ui.getCore().byId("smartFormPersDialog");
	if (smartFormDialog) {
		this._oResizeDialogHandlerId = sap.ui.core.ResizeHandler.register(smartFormDialog, this._handleResizeDialog.bind(this));
	}
	if (this._oScrollView) {
		this._oResizeScrollViewHandlerId = sap.ui.core.ResizeHandler.register(this._oScrollView, this._handleResizeTable.bind(this));
	}

};

	FieldSelector.prototype._handleResizeDialog = function() {
	if (this._oScrollView) {
		var height = jQuery("#smartFormPersDialog-cont").height();
		var headerHeight = jQuery("#smartFormPersDialogFieldSelectorHeader").height();
		var headerSearchHeight = jQuery("#sapUiCompFieldSelectorHeaderSearch").height();
		var tableHeaderHeight = jQuery("#sapUiCompFieldSelectorTable-tblHeader").height();
		this._oScrollView.setHeight(height - headerHeight - headerSearchHeight - tableHeaderHeight + "px");
	}
};

	FieldSelector.prototype._handleResizeTable = function() {
	if (this._oScrollView) {
		var width = this._oScrollView.$("scroll").innerWidth();
		this._oTable.setWidth(width + "px");
	}
};

/**
 * Set the model for the entity and fields of an odata service
 *
 * @param {sap.ui.model.odata.ODataModel} oModel - odata model
 * @param {string} sEntityTypes - entity type name(s) separated by comma character or array
 * @param {boolean} bShowExtFieldButton - indicates if the create new field button will be displayed or not
 * @param {Array} aIgnoredFields - List of fields which should be ignored
 * @param {Object.<bindingPath:string, fieldListElement:Object>} mBindingPathToFieldListElement - Map absolute odata binding paths to the field list elements
 * @param {Object.<id:string, fieldListElement:Object>} mIdToFieldListElement - Map field list element ids to the field list elements
 * @public
 */
	FieldSelector.prototype.setModel = function(oModel, sEntityTypes, bShowExtFieldButton, aIgnoredFields, mBindingPathToFieldListElement, mIdToFieldListElement) {

	this._bDisplayFieldExtButton = bShowExtFieldButton;

	if (!oModel) {
		jQuery.sap.log.error("oModel has to be set otherwise nothing will be displayed");
	}
	if (!sEntityTypes) {
		jQuery.sap.log.error("sEntityTypes has to be set otherwise nothing will be displayed");
	}
	this._oFieldController.init(oModel, sEntityTypes, aIgnoredFields, mBindingPathToFieldListElement, mIdToFieldListElement);
	this._constructLayout();
	this._updateCreateButtonState();
};

/**
 * Returns a map with the name of the entity set and the key of the selected field.
 *
 * @public
 * @returns {object} map of the name of the entity set having the selected field as kex
 */
FieldSelector.prototype.getSelectedField = function() {

	var oResult = {
		entityType: this._sSelectedKey
	};
	var oSelectedRow = this._oTable.getSelectedItem();
	if (oSelectedRow) {
		var oSelectedRowBindingContext = oSelectedRow.getBindingContext();
		if (oSelectedRowBindingContext){
			var oRowData = oSelectedRowBindingContext.getProperty();
			if (oRowData){
				oResult.field = oRowData.fieldLabel;
				oResult.name = oRowData.name;
				oResult.entityName = oRowData.entityName;
				oResult.entitySet = this._oFieldController.getMetaDataAnalyzer().getEntitySetNameFromEntityTypeName(oResult.entityType);
				oResult.path = oRowData.name;
				oResult.isBoundToODataService = oRowData.id === undefined;
				if (!oResult.isBoundToODataService) {
					oResult.id = oRowData.id;
				} else {
					// a complextype can be identified, if the entitytype of the fieldselector dropdown (oResult.entityType)
					// does not match with the entityName of the user selected OData-field (oRowData).
					if (oResult.entityType !== oRowData.entityName){
						var sPropertyNameOfCmplxField = this._oFieldController.getMetaDataAnalyzer()._getNameOfPropertyUsingComplexType(oResult.entityType, oRowData.entityName);
						if (sPropertyNameOfCmplxField){
							oResult.path = sPropertyNameOfCmplxField + "/" + oRowData.name;
						} else {
							jQuery.sap.log.error("FieldSelector: Property of complex type " + oRowData.name + " not found on entityType " + oResult.entityType);
						}
					}
				}
			}
		}
	}
	return oResult;
};

/**
 * Based on the renamed label contained in the field list,
 * the label contained in the field selector will be updated.
 *
 * @param {Object} oFieldListElement - Field list element containing all relevant properties needed for the update
 * @public
 */
FieldSelector.prototype.updateFieldLabel = function(oFieldListElement) {
	var that = this;
	var oFields = this._oFieldController.getFields();
	var bIsBoundToODataService = oFieldListElement.isBoundToODataService;
	var sNewLabel = oFieldListElement.label;

	if (bIsBoundToODataService === true) {
		var aBindingPaths = oFieldListElement.bindingPaths;
		jQuery.each(aBindingPaths, function(nBindingPathsIndex, oBindingPath) {
			var sBindingPath = oBindingPath.path;
			var nFirstSlashIndex = sBindingPath.indexOf('/');
			var sReferenceEntityName = sBindingPath.slice(0, nFirstSlashIndex);
			var sReferenceName = sBindingPath.slice(nFirstSlashIndex + 1);
			var oEntityFields = oFields[sReferenceEntityName];
			jQuery.each(oEntityFields, function(sEntityFieldsKey, oEntityField){
				if (oEntityField.name && oEntityField.name === sReferenceName) {
					oEntityField.fieldLabel = sNewLabel;
					that._oFieldController.sortFieldsForEntity(sReferenceEntityName);
					that._updateTableData();
					return; // apply label change only for corresponding entity type
				}
			});
		});
	} else if (bIsBoundToODataService === false) { // do not change in !bIsBoundToODataService, because in case of undefined logic should not be executed !
		jQuery.each(oFields, function(sFieldsKey, oEntityFields) { // apply label change for each entity type
			jQuery.each(oEntityFields, function(sEntityFieldsKey, oEntityField) {
				if (oEntityField.id && oEntityField.id === oFieldListElement.id) {
					oEntityField.fieldLabel = sNewLabel;
					that._oFieldController.sortFieldsForEntity(sFieldsKey);
				}
			});
		});
		this._updateTableData();
	}
};

/**
 * @private
 */
	FieldSelector.prototype._constructLayout = function() {
	var that = this;
	var oLayout = new sap.m.VBox({
		direction: sap.m.FlexDirection.Column
	});

	this._oHeaderLayout = new sap.m.HBox("smartFormPersDialogFieldSelectorHeader", {
		direction: sap.m.FlexDirection.Row
	});
	this._oHeaderLayout.addStyleClass("sapUiCompFieldSelectorHeader");

	this._oHeaderLayoutSearch = new sap.m.HBox({
		direction:sap.m.FlexDirection.Row
	});
	this._oHeaderLayoutSearch.addStyleClass("sapUiCompFieldSelectorHeaderSearch");

	this._oResizeHeaderHandlerId = sap.ui.core.ResizeHandler.register(this._oHeaderLayout, this._handleResizeDialog.bind(this));

	var oEntitySelectionLayout = new sap.m.HBox({
		direction: sap.m.FlexDirection.Row,
		alignItems: sap.m.FlexAlignItems.Start,
		layoutData: new sap.m.FlexItemData({
			growFactor: 2
		})
	});
	oEntitySelectionLayout.addStyleClass("sapUiCompFieldSelectorHeaderEntitySelection");

	var oHeader = new sap.m.Label({
		text: this._entityTypeText,
		layoutData: new sap.m.FlexItemData({
			order: 1,
			growFactor: 1
		})
	});
	// oHeader.addStyleClass("sapUiCompFieldSelectorHeaderText");

	var oDropDown = this._getEntityTypesRow();
	oDropDown.setLayoutData(new sap.m.FlexItemData({
		order: 2,
		growFactor: 1
	}));
	oDropDown.addStyleClass("sapUiCompFieldSelectorComboBox");

	oHeader.setLabelFor(oDropDown);
	oHeader.setVisible(oDropDown.getVisible());
	oEntitySelectionLayout.addItem(oHeader);
	oEntitySelectionLayout.addItem(oDropDown);
	this._oHeaderLayout.addItem(oEntitySelectionLayout);

	// Search field
	var oSearchField = this._getSearchRow();
	oSearchField.setLayoutData(new sap.m.FlexItemData({
		growFactor: 1
	}));
	oSearchField.addStyleClass("sapUiCompFieldSelectorHeader");
	this._oHeaderLayoutSearch.addItem(oSearchField);

	// New field button
	this._oCreateButton = new sap.m.Button({
		text: this._createNewFieldText,
		press: function(oEvent) {
			if (that._oCurrentFieldExtInfo) {
				// open field ext ui
				var oCrossAppNav = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
				var sHrefForFieldExtensionUi = (oCrossAppNav && oCrossAppNav.hrefForExternal({
					target: {
						semanticObject: "CustomField",
						action: "develop"
					},
					params: {
						businessContexts: that._oCurrentFieldExtInfo.BusinessContexts,
						serviceName: that._oCurrentFieldExtInfo.ServiceName,
						serviceVersion: that._oCurrentFieldExtInfo.ServiceVersion
					}
				}));

				window.open(sHrefForFieldExtensionUi, "_blank");
			}
		}
	});
	this._oCreateButton.addStyleClass("sapUiCompFieldSelectorCreateButton");
	this._oHeaderLayout.addItem(this._oCreateButton);

	oLayout.addItem(this._oHeaderLayout);
	oLayout.addItem(this._oHeaderLayoutSearch);
	oLayout.addItem(this._getFieldsRow());

	this.setContent(oLayout);
};

/**
 * @private
 * @returns {sap.m.ComboBox} combobox instance
 */
	FieldSelector.prototype._getEntityTypesRow = function() {

	var that = this;
	var oDropDown = new sap.m.ComboBox({
		// placeholder: this._entitySetPlaceHolderText,
		selectionChange: function(oEvent) {
			that._oSearchField.setValue("");
			that._sSelectedKey = oEvent.mParameters.selectedItem.getKey();
			that._updateTableData();
			that._updateCreateButtonState();
		},
		layoutData: new sap.m.FlexItemData({
			growFactor: 1
		})
	});

	var aEntityTypes = this._oFieldController.getEntityTypes();
	for (var i = 0; i < aEntityTypes.length; i++) {
		oDropDown.addItem(new sap.ui.core.Item({
			text: aEntityTypes[i].label,
			key: aEntityTypes[i].key
		}));
	}

	if (aEntityTypes.length > 0) {
		this._sSelectedKey = aEntityTypes[0].key;
		oDropDown.setSelectedKey(this._sSelectedKey);
	}

	if (aEntityTypes.length === 1) {
		oDropDown.setVisible(false);
	}

	return oDropDown;
};

/**
 * @returns {sap.m.SearchField} search field instance
 */
	FieldSelector.prototype._getSearchRow = function() {

	var iLiveChangeTimer = 0;
	var that = this;
	var sValue;
	this._oSearchField = new sap.m.SearchField({
		visible: this.getShowSearchBar(),
		liveChange: function(oEvent) {
			sValue = oEvent.getSource().getValue();
			var iDelay = (sValue ? 300 : 0); // no delay if value is empty

			// execute search after user stops typing for 300ms
			clearTimeout(iLiveChangeTimer);
			if (iDelay) {
				iLiveChangeTimer = setTimeout(function() {
					that._executeSearch(sValue);
				}, iDelay);
			} else {
				that._executeSearch(sValue);
			}
		},
		// execute the standard search
		search: function(oEvent) {
			sValue = oEvent.getSource().getValue();
			that._executeSearch(sValue);
		},
		layoutData: new sap.m.FlexItemData({
			growFactor: 2
		})

	});

	return this._oSearchField;
};

/**
 * @param {string} sValue : value to be search
 * @private
 */
	FieldSelector.prototype._executeSearch = function(sValue) {

	var aFilters = [];
	// search for label, search for quick info
	var oFieldLabel = new sap.ui.model.Filter("fieldLabel", sap.ui.model.FilterOperator.Contains, sValue);
	var oQuickInfoFilter = new sap.ui.model.Filter("quickInfo", sap.ui.model.FilterOperator.Contains, sValue);
	var oFilter = new sap.ui.model.Filter([
		oFieldLabel, oQuickInfoFilter
	], false);

	aFilters.push(oFilter);
	var itemsBinding = this._oTable.getBinding("items");
	itemsBinding.filter(aFilters, "Application");
};

/**
 * @private
 * @returns {sap.m.Table} table instance
 */
	FieldSelector.prototype._getFieldsRow = function() {
	// this._oScrollView.setWidth("100%");
	this._oScrollView.setVertical(true);
	this._oScrollView.addStyleClass("sapUiCompFieldSelectorScrollContainer");


	var aColumns = [
		new sap.m.Column({
			header: new sap.m.Label({
				text: this._fieldLabelText
			})
		})
	];

	this._oTable = new sap.m.Table("sapUiCompFieldSelectorTable", {
		mode: "SingleSelectMaster",
		columns: aColumns,
		selectionChange: function(e) {
			var oSelection = this.getSelectedField();
			this.fireFieldSelectionChanged(oSelection);
		}.bind(this)
	});
	this._oTable.setFixedLayout(false);

	this._updateTableData();

	this._oScrollView.addContent(this._oTable);
	this._handleResizeDialog();

	return this._oScrollView;
};

/**
 * @private
 */
FieldSelector.prototype._updateTableData = function() {

	var oModel = new sap.ui.model.json.JSONModel();
	oModel.setData({
		modelData: this._oFieldController.getFields()
	});

	var oTemplate = new sap.m.ColumnListItem({
		cells: [
			new sap.m.Text({
				text: "{fieldLabel}",
				tooltip: FieldSelector._tooltipBinding,
				wrapping: false
			})
		],
		visible: {
			path: "fieldLabel",
			formatter: function (sFieldLabel) {
				return !!sFieldLabel;
			}
		}
	});

	this._oTable.setModel(oModel);
	this._oTable.getModel().setSizeLimit(this._oFieldController.getMaxEntitySetSize() + 5);
	this._oTable.bindItems("/modelData/" + this._sSelectedKey, oTemplate);
};

/**
 * Checks the support for ext fields and sets the enabled state for the create new field button
 *
 * @private
 */
	FieldSelector.prototype._updateCreateButtonState = function() {

	if (!this._bDisplayFieldExtButton) {
		this._oCreateButton.setVisible(false);
	} else {
		var that = this;
		var oMDA = this._oFieldController.getMetaDataAnalyzer();
		that._oCreateButton.setEnabled(false); // disabled by default
		try {
			var oPromise = sap.ui.fl.fieldExt.Access.getBusinessContexts(oMDA.oModel.sServiceUrl, this._sSelectedKey);
			oPromise.done(function(oResult) {
				if (oResult) {
					if (oResult.BusinessContexts) {
						if (oResult.BusinessContexts.length > 0) {
							that._oCurrentFieldExtInfo = oResult;
							that._oCreateButton.setEnabled(true);
						}
					}
				}

			});
			oPromise.fail(function(oError) {
				that._oCreateButton.setEnabled(false);
				if (oError) {
					if (jQuery.isArray(oError.errorMessages)) {
						for (var i = 0; i < oError.errorMessages.length; i++) {
							jQuery.sap.log.error(oError.errorMessages[i].text);
						}
					}
				}
			});
		} catch (oError) {
			that._oCreateButton.setEnabled(false);
			jQuery.sap.log.error("exception occured in sap.ui.fl.fieldExt.Access.getBusinessContexts");
		}
	}

};

/**
 * Cleans up the control
 *
 * @public
 */
	FieldSelector.prototype.exit = function() {

	if (this._oResizeDialogHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._oResizeDialogHandlerId);
	}
	if (this._oResizeHeaderHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._oResizeHeaderHandlerId);
	}
	if (this._oResizeScrollViewHandlerId) {
		sap.ui.core.ResizeHandler.deregister(this._oResizeScrollViewHandlerId);
	}
	this.destroyAggregation("content");
	this._oFieldController.destroy();
	this._sSelectedKey = null;
	this._oTable = null;
	this._oScrollView = null;
	this._oSearchField = null;
	this._oHeaderLayout = null;
	if (this._oConverter && this._oConverter.destroy) {
		this._oConverter.destroy();
	}
	this._oConverter = null;
	if (this._oCreateButton) {
		if (this._oCreateButton.destroy) {
			this._oCreateButton.destroy();
		}
	}
	this._oCreateButton = null;
	this._oCurrentFieldExtInfo = null;
};


	return FieldSelector;

}, /* bExport= */ true);

}; // end of sap/ui/comp/odata/FieldSelector.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ControlProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// -------------------------------------------------------------------------------
// Generates the view metadata required for a field using SAP-Annotations metadata
// -------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ControlProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.TimePicker'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectStatus'); // unlisted dependency retained
jQuery.sap.require('sap.m.Image'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ControlProvider",[
	'jquery.sap.global', 'sap/m/CheckBox', 'sap/m/ComboBox', 'sap/m/DatePicker', 'sap/m/TimePicker', 'sap/m/HBox', 'sap/m/Input', 'sap/m/Text', 'sap/m/ObjectIdentifier', 'sap/m/ObjectStatus', 'sap/m/Image', 'sap/m/Link', 'sap/m/VBox', 'sap/ui/comp/navpopover/SmartLink', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/smartfield/ODataHelper', 'sap/ui/comp/smartfield/SmartField', 'sap/ui/comp/odata/ODataType', 'sap/ui/comp/odata/CriticalityMetadata', 'sap/ui/comp/util/FormatUtil', 'sap/ui/core/Control', 'sap/ui/comp/navpopover/SemanticObjectController'
], function(jQuery, CheckBox, ComboBox, DatePicker, TimePicker, HBox, Input, Text, ObjectIdentifier, ObjectStatus, Image, Link, VBox, SmartLink, MetadataAnalyser, ODataHelper, SmartField, ODataType, CriticalityMetadata, FormatUtil, Control, SemanticObjectController) {
	"use strict";

	var SmartToggle;

	/**
	 * Constructs a class to generate the view/data model metadata for the controls - that can be used in table/forms etc.
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mPropertyBag - PropertyBag having members model, entitySet
	 * @author SAP SE
	 */
	var ControlProvider = function(mPropertyBag) {
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this._oMetadataAnalyser = mPropertyBag.metadataAnalyser;
			this._aODataFieldMetadata = mPropertyBag.fieldsMetadata;
			this._oLineItemAnnotation = mPropertyBag.lineItemAnnotation;
			this._oSemanticKeyAnnotation = mPropertyBag.semanticKeyAnnotation;
			this._smartTableId = mPropertyBag.smartTableId;
			this._isAnalyticalTable = mPropertyBag.isAnalyticalTable;
			this._isMobileTable = mPropertyBag.isMobileTable;
			this._oDateFormatSettings = mPropertyBag.dateFormatSettings;
			this._bEnableDescriptions = mPropertyBag.enableDescriptions;
			this._oCurrencyFormatSettings = mPropertyBag.currencyFormatSettings;
			this._oDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour || "descriptionAndId";
			this.useSmartField = mPropertyBag.useSmartField === "true";
			this.useSmartToggle = mPropertyBag.useSmartToggle === "true";
			this._sEntitySet = mPropertyBag.entitySet;
			this._oSemanticKeyAdditionalControl = mPropertyBag._semanticKeyAdditionalControl;
			this._oSemanticObjectController = mPropertyBag.semanticObjectController;
		}

		if (!this._oMetadataAnalyser && this._oParentODataModel) {
			this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel);
			this._intialiseMetadata();
		}

		this._mSmartField = {};
		this._oHelper = new ODataHelper(this._oMetadataAnalyser.oModel);

		this._aValueListProvider = [];
		this._aValueHelpProvider = [];
		this._aLinkHandlers = [];
	};

	/**
	 * Initialises the necessary metadata
	 * 
	 * @private
	 */
	ControlProvider.prototype._intialiseMetadata = function() {
		if (!this._aODataFieldMetadata) {
			this._aODataFieldMetadata = this._oMetadataAnalyser.getFieldsByEntitySetName(this.sEntity);
		}
	};

	/**
	 * Get the field metadata
	 * 
	 * @param {object} oFieldODataMetadata - OData metadata for the field
	 * @param {boolean} isEditable - specifies if the control shall be editable
	 * @returns {Object} the field view metadata object
	 * @public
	 */
	ControlProvider.prototype.getFieldViewMetadata = function(oFieldODataMetadata, isEditable) {
		var oFieldViewMetadata = this._createFieldMetadata(oFieldODataMetadata);
		// Create and set the template
		this._createFieldTemplate(oFieldViewMetadata, isEditable);
		return oFieldViewMetadata;
	};

	/**
	 * Creates and extends the field view with a template for the UI content
	 * 
	 * @param {object} oViewField - the view field metadata
	 * @param {boolean} isEditable - specifies if the control shall be editable
	 * @private
	 */
	ControlProvider.prototype._createFieldTemplate = function(oViewField, isEditable) {
		// Create SmartField template - if useSmartField is set
		if (this.useSmartField) {
			oViewField.template = new SmartField({
				value: {
					path: oViewField.name
				},
				entitySet: this._sEntitySet,
				contextEditable: {
					path: "sm4rtM0d3l>/editable",
					mode: "OneWay"
				},
				controlContext: this._isMobileTable ? "responsiveTable" : "table",
				wrapping: this._isMobileTable
			});

			if (ODataType.isNumeric(oViewField.type) || ODataType.isDateOrTime(oViewField.type)) {
				oViewField.template.setTextAlign("Right");
				oViewField.template.setWidth("100%");
			}
			this._completeSmartField(oViewField);

			oViewField.template._setPendingEditState(isEditable);
		}
		// Check if SmartToggle is set - if so, create both display and edit controls (use SmartField for edit if useSmartField is set)
		if (this.useSmartToggle) {
			oViewField.template = new SmartToggle({
				editable: {
					path: "sm4rtM0d3l>/editable",
					mode: "OneWay"
				},
				edit: this.useSmartField ? oViewField.template : this._createEditableTemplate(oViewField),
				display: this._createDisplayOnlyTemplate(oViewField)
			});
		} else if (!this.useSmartField) {
			// create controls as before
			oViewField.template = isEditable ? this._createEditableTemplate(oViewField) : this._createDisplayOnlyTemplate(oViewField);
		}
	};

	/**
	 * Completes the Smart Field template, adds especially meta data.
	 * 
	 * @param {object} oViewField The current meta data
	 * @private
	 */
	ControlProvider.prototype._completeSmartField = function(oViewField) {
		var oData = {
			annotations: {},
			path: oViewField.name
		};

		if (!this._mSmartField.entitySetObject) {
			this._mSmartField.entitySetObject = this._oHelper.oMeta.getODataEntitySet(this._sEntitySet);
			this._mSmartField.entityType = this._oHelper.oMeta.getODataEntityType(this._mSmartField.entitySetObject.entityType);
		}

		oData.modelObject = this._oParentODataModel;
		oData.entitySetObject = this._mSmartField.entitySetObject;
		// ODataHelper expects entitySet and not entitySetObject!
		oData.entitySet = this._mSmartField.entitySetObject;
		oData.entityType = this._mSmartField.entityType;
		this._oHelper.getProperty(oData);

		oViewField.fieldControlProperty = this._oHelper.oAnnotation.getFieldControlPath(oData.property.property);
		if (oViewField.fieldControlProperty && oViewField.parentPropertyName) {
			oViewField.fieldControlProperty = oViewField.parentPropertyName + "/" + oViewField.fieldControlProperty;
		}

		oData.annotations.uom = this._oHelper.getUnitOfMeasure2(oData);
		oData.annotations.text = this._oHelper.getTextProperty2(oData);
		oData.annotations.lineitem = this._oLineItemAnnotation;
		oData.annotations.semantic = MetadataAnalyser.getSemanticObjectsFromProperty(oData.property.property);
		this._oHelper.getUOMTextAnnotation(oData);
		if (oData.property.property["sap:value-list"] || oData.property.property["com.sap.vocabularies.Common.v1.ValueList"]) {
			oData.annotations.valuelist = this._oHelper.getValueListAnnotationPath(oData);
			if (oData.property.property["sap:value-list"]) {
				oData.annotations.valuelistType = oData.property.property["sap:value-list"];
			} else {
				oData.annotations.valuelistType = this._oMetadataAnalyser.getValueListSemantics(oData.property.property["com.sap.vocabularies.Common.v1.ValueList"]);
			}
		}
		this._oHelper.getUOMValueListAnnotationPath(oData);
		delete oData.entitySet;
		oViewField.template.data("configdata", {
			"configdata": oData
		});

		oViewField.template.data("dateFormatSettings", this._oDateFormatSettings);
		oViewField.template.data("currencyFormatSettings", this._oCurrencyFormatSettings);
		oViewField.template.data("defaultDropDownDisplayBehaviour", this._oDefaultDropDownDisplayBehaviour);

		if (oData.annotations.uom || ODataType.isNumeric(oViewField.type) || ODataType.isDateOrTime(oViewField.type)) {
			var sAlign = oViewField.template.getTextAlign();

			if (sAlign === "Initial") {
				sAlign = "Right";
			}
			oViewField.align = sAlign;
		}
	};

	/**
	 * Creates and extends the field view with a template for editable UI content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {boolean} bBlockSmartLinkCreation - if true, no SmartLink is created independent of the semanitcObject notation
	 * @returns {sap.ui.core.Control} the template control
	 * @private
	 */
	ControlProvider.prototype._createEditableTemplate = function(oViewField, bBlockSmartLinkCreation) {
		var oTemplate = null, oFormatOptions, oConstraints, oType;
		if (oViewField.type === "Edm.DateTime" || oViewField.type === "Edm.DateTimeOffset") {
			// Create DatePicker for Date display fields
			if (oViewField.displayFormat === "Date") {
				oFormatOptions = this._oDateFormatSettings;
				oConstraints = {
					displayFormat: "Date"
				};
				oTemplate = new DatePicker({
					dateValue: {
						path: oViewField.name
					}
				});
			}
		} else if (oViewField.type === "Edm.Boolean") {
			oTemplate = new CheckBox({
				selected: {
					path: oViewField.name
				}
			});
		} else if (oViewField.type === "Edm.Decimal") {
			oConstraints = {
				precision: oViewField.precision,
				scale: oViewField.scale
			};
		} else if (oViewField.type === "Edm.String") {
			oConstraints = {
				isDigitSequence: oViewField.isDigitSequence
			};
		}

		oType = ODataType.getType(oViewField.type, oFormatOptions, oConstraints);

		// semantic link
		if (oViewField.semanticObjects && (!bBlockSmartLinkCreation)) {
			oTemplate = this._createSmartLinkFieldTemplate(oViewField, oType, function() {
				return this._createEditableTemplate(oViewField, true);
			}.bind(this));
		}

		// TODO: ComboBox handling!

		// Default ==> sap.m.Input
		if (!oTemplate) {
			if (oViewField.type === "Edm.Time") {
				oTemplate = new TimePicker({
					value: {
						path: oViewField.name,
						type: oType
					}
				});
			} else {
				oTemplate = new Input({
					value: {
						path: oViewField.name,
						type: oType
					}
				});

				if (oViewField.unit) {
					oTemplate.bindProperty("description", {
						path: oViewField.unit
					});
					oTemplate.setTextAlign("Right");
					oTemplate.setTextDirection("LTR");
					oTemplate.setFieldWidth("80%");
				} else if (this._bEnableDescriptions && oViewField.description) {
					oTemplate.bindProperty("description", {
						path: oViewField.description
					});
				} else if (ODataType.isNumeric(oViewField.type) || ODataType.isDateOrTime(oViewField.type)) {
					oTemplate.setTextAlign("Right");
					oTemplate.setTextDirection("LTR");
				}

				if (oViewField.hasValueListAnnotation) {
					this._associateValueHelpAndSuggest(oTemplate, oViewField);
				}
			}
		}
		return oTemplate;
	};

	/**
	 * Associates the control with a ValueHelp Dialog and suggest using the details retrieved from the metadata (annotation)
	 * 
	 * @param {object} oControl - The control
	 * @param {object} oFieldViewMetadata - The metadata merged from OData metadata and additional control configuration
	 * @private
	 */
	ControlProvider.prototype._associateValueHelpAndSuggest = function(oControl, oFieldViewMetadata) {
		// F4 Help with selection list
		oControl.setShowValueHelp(true);
		this._aValueHelpProvider.push(new sap.ui.comp.providers.ValueHelpProvider({
			loadAnnotation: true,
			fullyQualifiedFieldName: oFieldViewMetadata.fullName,
			metadataAnalyser: this._oMetadataAnalyser,
			control: oControl,
			model: this._oParentODataModel,
			preventInitialDataFetchInValueHelpDialog: true,
			dateFormatSettings: this._oDateFormatSettings,
			takeOverInputValue: false,
			fieldName: oFieldViewMetadata.fieldName,
			type: oFieldViewMetadata.type,
			maxLength: oFieldViewMetadata.maxLength,
			displayFormat: oFieldViewMetadata.displayFormat,
			displayBehaviour: oFieldViewMetadata.displayBehaviour,
			title: oFieldViewMetadata.label
		}));

		oControl.setShowSuggestion(true);
		oControl.setFilterSuggests(false);
		this._aValueListProvider.push(new sap.ui.comp.providers.ValueListProvider({
			loadAnnotation: true,
			fullyQualifiedFieldName: oFieldViewMetadata.fullName,
			metadataAnalyser: this._oMetadataAnalyser,
			control: oControl,
			model: this._oParentODataModel,
			dateFormatSettings: this._oDateFormatSettings,
			typeAheadEnabled: true,
			aggregation: "suggestionRows",
			displayFormat: oFieldViewMetadata.displayFormat,
			displayBehaviour: oFieldViewMetadata.displayBehaviour
		}));
	};

	/**
	 * Creates and extends the field view with a template for display only UI content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {boolean} bBlockSmartLinkCreation - if true, no SmartLink is created independent of the semanitcObject notation
	 * @returns {sap.ui.core.Control} the template control
	 * @private
	 */
	ControlProvider.prototype._createDisplayOnlyTemplate = function(oViewField, bBlockSmartLinkCreation) {
		var oTemplate = null, oType = null, oFormatOptions, oConstraints, sAlign, oBindingInfo;

		// Create Date type for Date display fields
		if (oViewField.displayFormat === "Date") {
			oFormatOptions = this._oDateFormatSettings;
			oConstraints = {
				displayFormat: "Date"
			};
		} else if (oViewField.type === "Edm.Decimal") {
			oConstraints = {
				precision: oViewField.precision,
				scale: oViewField.scale
			};
		} else if (oViewField.type === "Edm.String") {
			oConstraints = {
				isDigitSequence: oViewField.isDigitSequence
			};
		}

		oType = ODataType.getType(oViewField.type, oFormatOptions, oConstraints);

		if (ODataType.isNumeric(oViewField.type) || ODataType.isDateOrTime(oViewField.type)) {
			sAlign = "Right";
		}

		// Only relevant for ResponsiveTable use case
		if (this._isMobileTable) {
			if (oViewField.isImageURL) {
				oTemplate = new Image({
					src: {
						path: oViewField.name
					},
					width: "3em",
					height: "3em"
				});
			} else if (this._oLineItemAnnotation && this._oLineItemAnnotation.urlInfo && this._oLineItemAnnotation.urlInfo[oViewField.name]) {
				oTemplate = this._createLink(oViewField, oType, this._oLineItemAnnotation.urlInfo[oViewField.name]);
			} else if (this._oLineItemAnnotation && this._oLineItemAnnotation.criticality && this._oLineItemAnnotation.criticality[oViewField.name]) {
				oTemplate = this._createObjectStatusTemplate(oViewField, oType, this._oLineItemAnnotation.criticality[oViewField.name]);
			} else if (this._oSemanticKeyAnnotation && this._oSemanticKeyAnnotation.semanticKeyFields && this._oSemanticKeyAnnotation.semanticKeyFields.indexOf(oViewField.name) > -1) {
				oTemplate = this._createObjectIdentifierTemplate(oViewField, oType, this._oSemanticKeyAnnotation.semanticKeyFields.indexOf(oViewField.name) === 0);
			}
		}
		if (!oTemplate) {
			if (oViewField.semanticObjects && (!bBlockSmartLinkCreation)) {
				oTemplate = this._createSmartLinkFieldTemplate(oViewField, oType, function() {
					return this._createDisplayOnlyTemplate(oViewField, true);
				}.bind(this));
			} else if (oViewField.unit) {
				oTemplate = this._createMeasureFieldTemplate(oViewField, oType);
			} else {
				oBindingInfo = this._getDefaultBindingInfo(oViewField, oType);
				oTemplate = new Text({
					wrapping: this._isMobileTable,
					textAlign: sAlign,
					text: oBindingInfo
				});
			}
		}
		oViewField.align = sAlign;
		return oTemplate;
	};

	/**
	 * Returns the default binding info object
	 * 
	 * @param {object} oViewField - the view field
	 * @param {object} oType - the odata binding data type
	 * @private
	 * @returns {Object} the default binding info that considers description
	 */
	ControlProvider.prototype._getDefaultBindingInfo = function(oViewField, oType) {
		var oBindingInfo = {
			path: oViewField.name,
			type: oType
		};
		if (this._bEnableDescriptions && oViewField.description) {
			oBindingInfo = {
				parts: [
					{
						path: oViewField.name,
						type: oType
					}, {
						path: oViewField.description
					}
				],
				formatter: function(sId, sDescription) {
					return FormatUtil.getFormattedExpressionFromDisplayBehaviour(oViewField.displayBehaviour, sId, sDescription);
				}
			};
		}
		return oBindingInfo;
	};

	/**
	 * Creates and extends the field view with a template for Link
	 * 
	 * @param {object} oViewField - the view field
	 * @param {object} oType - the odata binding data type
	 * @param {Object} oLinkInfo - contains Apply part of the DataFieldWithUrl annotation
	 * @private
	 * @returns {Object} the template
	 */
	ControlProvider.prototype._createLink = function(oViewField, oType, oLinkInfo) {
		var mHrefInfo = null;
		// add link properties to view field so that this can be added to additionalProperties for $select
		oViewField.linkProperties = oLinkInfo.parameters || oLinkInfo.urlPath;
		// create link binding info - if needed
		if (oLinkInfo.urlPath) {
			mHrefInfo = {
				path: oLinkInfo.urlPath
			};
		} else if (oLinkInfo.urlTarget) {
			mHrefInfo = oLinkInfo.urlTarget;
		}

		// Create link from link info
		return new Link({
			text: this._getDefaultBindingInfo(oViewField, oType),
			wrapping: this._isMobileTable,
			href: mHrefInfo
		});
	};
	/**
	 * Creates and extends the field view with a template for ObjectIdentifier
	 * 
	 * @param {object} oViewField - the view field
	 * @param {object} oType - the odata binding data type
	 * @param {boolean} bFirstKeyField - specifies whether this is the first Key field (optional)
	 * @private
	 * @returns {Object} the template
	 */
	ControlProvider.prototype._createObjectIdentifierTemplate = function(oViewField, oType, bFirstKeyField) {
		var oObjectIdentifier, sTitle, sText, oText, oTitle, oLinkHandler;
		var bTitleActive;
		var that = this;
		if (oViewField.semanticObjects) {
			SemanticObjectController.getDistinctSemanticObjects().then(function(oSemanticObjects) {
				bTitleActive = SemanticObjectController.hasDistinctSemanticObject(oViewField.semanticObjects.defaultSemanticObject, oSemanticObjects);
				if (bTitleActive) {
					jQuery.sap.require("sap.ui.comp.navpopover.NavigationPopoverHandler");
					oLinkHandler = new sap.ui.comp.navpopover.NavigationPopoverHandler({
						semanticObject: oViewField.semanticObjects.defaultSemanticObject,
						additionalSemanticObjects: oViewField.semanticObjects.additionalSemanticObjects,
						semanticObjectLabel: oViewField.label,
						fieldName: oViewField.name,
						semanticObjectController: that._oSemanticObjectController,
						navigationTargetsObtained: function(oEvent) {
							var oObjectIdentifier = sap.ui.getCore().byId(oEvent.getSource().getControl());
							var oMainNavigation = oEvent.getParameters().mainNavigation;
							// 'mainNavigation' might be undefined
							if (oMainNavigation) {
								oMainNavigation.setDescription(oObjectIdentifier.getText());
							}
							oEvent.getParameters().show(oObjectIdentifier.getTitle(), oMainNavigation, undefined, undefined);
						}
					});
					that._aLinkHandlers.push(oLinkHandler);
				}
			});
		}
		// Show title and text based on TextArrangement or displayBehaviour
		if (oViewField.description) {
			switch (oViewField.displayBehaviour) {
				case "descriptionAndId":
					sTitle = oViewField.description;
					sText = oViewField.name;
					oText = oType;
					break;
				case "idAndDescription":
					sTitle = oViewField.name;
					sText = oViewField.description;
					oTitle = oType;
					break;
				case "idOnly":
					sTitle = oViewField.name;
					oText = oType;
					break;
				default:
					sTitle = oViewField.description;
					break;

			}
		} else {
			// fallback to idOnly when there is no description field (Text annotation)
			sTitle = oViewField.name;
			oTitle = oType;
		}
		oObjectIdentifier = new ObjectIdentifier({
			title: sTitle ? {
				path: sTitle,
				type: oTitle
			} : undefined,
			text: sText ? {
				path: sText,
				type: oText
			} : undefined,
			titleActive: oViewField.semanticObjects ? {
				path: "$sapuicompcontrolprovider_distinctSO>/distinctSemanticObjects/" + oViewField.semanticObjects.defaultSemanticObject,
				formatter: function(oValue) {
					return !!oValue;
				}
			} : false,
			titlePress: function(oEvent) {
				if (bTitleActive && oLinkHandler) {
					oLinkHandler.setControl(oEvent.getSource());
					oLinkHandler.openPopover(oEvent.getParameter("domRef"));
				}
			}
		});
		oObjectIdentifier.attachEvent("ObjectIdentifier.designtime", function(oEvent) {
			if (oLinkHandler) {
				oLinkHandler.setControl(oEvent.getSource());
				oEvent.getParameters().registerNavigationPopoverHandler(oLinkHandler);
			}
		});
		oObjectIdentifier.setModel(SemanticObjectController.getJSONModel(), "$sapuicompcontrolprovider_distinctSO");
		if (this._oSemanticKeyAdditionalControl && bFirstKeyField) {
			this._bSemanticKeyAdditionalControlUsed = true;
			return new VBox({
				renderType: "Bare",
				items: [
					oObjectIdentifier, this._oSemanticKeyAdditionalControl
				]
			}).addStyleClass("sapMTableContentMargin");
		}
		return oObjectIdentifier;
	};

	/**
	 * Creates and extends the field view with a template for ObjectStatus
	 * 
	 * @param {object} oViewField - the view field
	 * @param {object} oType - the odata binding data type
	 * @param {object} oCriticalityInfo - the criticality metadata
	 * @private
	 * @returns {Object} the template
	 */
	ControlProvider.prototype._createObjectStatusTemplate = function(oViewField, oType, oCriticalityInfo) {
		var oStateBinding, oStateIconBinding, bShowIcon, oBindingInfo;
		bShowIcon = CriticalityMetadata.getShowCriticalityIcon(oCriticalityInfo.criticalityRepresentationType);
		// add criticality path to view field so that this can be added to additionalProperties for $select
		if (oCriticalityInfo.path) {
			oViewField.criticality = oCriticalityInfo.path;
			oStateBinding = {
				path: oCriticalityInfo.path,
				formatter: CriticalityMetadata.getCriticalityState
			};
			if (bShowIcon) {
				oStateIconBinding = {
					path: oCriticalityInfo.path,
					formatter: CriticalityMetadata.getCriticalityIcon
				};
			}
		} else {
			oStateBinding = CriticalityMetadata.getCriticalityState(oCriticalityInfo.criticalityType);
			if (bShowIcon) {
				oStateIconBinding = CriticalityMetadata.getCriticalityIcon(oCriticalityInfo.criticalityType);
			}
		}
		if (oViewField.unit) {
			oBindingInfo = {
				parts: [
					{
						path: oViewField.name,
						type: oType
					}, {
						path: oViewField.unit
					}
				],
				formatter: oViewField.isCurrencyField ? FormatUtil.getInlineAmountFormatter() : FormatUtil.getInlineMeasureUnitFormatter(),
				useRawValues: oViewField.isCurrencyField
			};
		} else if (oViewField.description) {
			oBindingInfo = {
				path: oViewField.description
			};
		} else {
			oBindingInfo = {
				path: oViewField.name,
				type: oType
			};
		}
		return new ObjectStatus({
			text: oBindingInfo,
			state: oStateBinding,
			icon: oStateIconBinding
		});
	};

	/**
	 * Creates and extends the field view with a template for currency (display only) content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {object} oType - the binding data type
	 * @param {function} fCreateControl - callback function which creates the control which would have been created instead of the SmartLink
	 * @returns {Object} the template
	 * @private
	 */
	ControlProvider.prototype._createSmartLinkFieldTemplate = function(oViewField, oType, fCreateControl) {
		// semantic link
		var oBindingInfo = oViewField.unit ? {
			parts: [
				{
					path: oViewField.name,
					type: oType
				}, {
					path: oViewField.unit
				}
			],
			formatter: oViewField.isCurrencyField ? FormatUtil.getAmountCurrencyFormatter() : FormatUtil.getMeasureUnitFormatter(),
			useRawValues: true
		} : this._getDefaultBindingInfo(oViewField, oType);
		var oTemplate = new SmartLink({
			semanticObject: oViewField.semanticObjects.defaultSemanticObject,
			additionalSemanticObjects: oViewField.semanticObjects.additionalSemanticObjects,
			semanticObjectLabel: oViewField.label,
			fieldName: oViewField.name,
			text: oBindingInfo,
			uom: oViewField.unit ? {
				path: oViewField.unit
			} : undefined,
			wrapping: this._isMobileTable,
			semanticObjectController: this._oSemanticObjectController,
			navigationTargetsObtained: function(oEvent) {
				var oBinding = this.getBinding("text");
				if (!jQuery.isArray(oBinding.getValue()) || oViewField.unit) {
					oEvent.getParameters().show();
					return;
				}
				var aValues = oBinding.getValue();
				var oTexts = FormatUtil.getTextsFromDisplayBehaviour(oViewField.displayBehaviour, aValues[0], aValues[1]);
				var oMainNavigation = oEvent.getParameters().mainNavigation;
				// 'mainNavigation' might be undefined
				if (oMainNavigation) {
					oMainNavigation.setDescription(oTexts.secondText);
				}
				oEvent.getParameters().show(oTexts.firstText, oMainNavigation, undefined, undefined);
			}
		});

		oTemplate.setCreateControlCallback(fCreateControl);

		return oTemplate;
	};

	/**
	 * Creates and extends the field view with a template for currency (display only) content
	 * 
	 * @param {object} oViewField - the view field
	 * @param {object} oType - the odata binding data type
	 * @private
	 * @returns {Object} the template
	 */
	ControlProvider.prototype._createMeasureFieldTemplate = function(oViewField, oType) {
		var oTemplate, oAnalyticalMultiUnitLink, oAnalyticalMultiUnitCurrency, oValueText, oUnitText, bEnableCurrencySymbol = false;

		bEnableCurrencySymbol = !!(oViewField.isCurrencyField && this._oCurrencyFormatSettings && this._oCurrencyFormatSettings.showCurrencySymbol);

		oValueText = new Text({
			layoutData: new sap.m.FlexItemData({
				growFactor: 1,
				baseSize: "0%"
			}),
			textDirection: "LTR",
			wrapping: false,
			textAlign: "End",
			text: {
				parts: [
					{
						path: oViewField.name,
						type: oType
					}, {
						path: oViewField.unit
					}
				],
				formatter: oViewField.isCurrencyField ? FormatUtil.getAmountCurrencyFormatter() : FormatUtil.getMeasureUnitFormatter(),
				useRawValues: oViewField.isCurrencyField
			}
		});
		oUnitText = new Text({
			layoutData: new sap.m.FlexItemData({
				shrinkFactor: 0
			}),
			textDirection: "LTR",
			wrapping: false,
			textAlign: "Begin",
			width: "2.5em",
			text: {
				path: oViewField.unit,
				formatter: bEnableCurrencySymbol ? FormatUtil.getCurrencySymbolFormatter() : undefined
			}
		});

		// Create measure format using HBox --> we need to 2 controls to properly align the value and unit part
		oTemplate = new HBox({
			renderType: "Bare",
			justifyContent: "End",
			items: [
				oValueText, oUnitText
			]
		});

		oTemplate.addStyleClass("sapUiCompDirectionLTR");

		if (oViewField.isCurrencyField && this._isAnalyticalTable) {
			if (!this._oMultiCurrencyUtil) {
				jQuery.sap.require("sap.ui.comp.util.MultiCurrencyUtil");
				this._oMultiCurrencyUtil = sap.ui.comp.util.MultiCurrencyUtil;
			}
			oAnalyticalMultiUnitLink = new Link({
				text: sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_MULTI_LINK_TEXT") || "Show Details",
				visible: {
					path: oViewField.unit,
					formatter: this._oMultiCurrencyUtil.isMultiCurrency
				},
				press: function(oEvt) {
					this._oMultiCurrencyUtil.openMultiCurrencyPopover(oEvt, {
						currency: oViewField.name,
						unit: oViewField.unit,
						additionalParent: this.useSmartToggle,
						smartTableId: this._smartTableId,
						template: oAnalyticalMultiUnitCurrency
					});
				}.bind(this)
			});
			oAnalyticalMultiUnitCurrency = oTemplate;
			oAnalyticalMultiUnitCurrency.bindProperty("visible", {
				path: oViewField.unit,
				formatter: function(sCurrency) {
					return !this._oMultiCurrencyUtil.isMultiCurrency(sCurrency);
				}.bind(this)
			});
			oTemplate = new VBox({
				renderType: "Bare",
				items: [
					oAnalyticalMultiUnitLink, oAnalyticalMultiUnitCurrency
				]
			});
		}

		return oTemplate;
	};

	/**
	 * Calculates and sets additional flags and attributes for a field
	 * 
	 * @param {object} oFieldODataMetadata - OData metadata for the field
	 * @returns {object} the field view metadata
	 * @private
	 */
	ControlProvider.prototype._createFieldMetadata = function(oFieldODataMetadata) {
		var oFieldViewMetadata = jQuery.extend({}, oFieldODataMetadata);

		oFieldViewMetadata.label = oFieldODataMetadata.fieldLabel || oFieldODataMetadata.name;
		oFieldViewMetadata.quickInfo = oFieldODataMetadata.quickInfo || oFieldViewMetadata.label;
		oFieldViewMetadata.displayBehaviour = oFieldViewMetadata.displayBehaviour || this._oDefaultDropDownDisplayBehaviour;
		oFieldViewMetadata.filterType = this._getFilterType(oFieldODataMetadata);
		this._updateValueListMetadata(oFieldViewMetadata);
		this._setAnnotationMetadata(oFieldViewMetadata);
		return oFieldViewMetadata;
	};

	/**
	 * Update the metadata for ValueList annotation
	 * 
	 * @param {Object} oFieldViewMetadata - view metadata for the field
	 * @private
	 */
	ControlProvider.prototype._updateValueListMetadata = function(oFieldViewMetadata) {
		// First check for "sap:value-list" annotation
		oFieldViewMetadata.hasValueListAnnotation = oFieldViewMetadata["sap:value-list"] !== undefined;
		if (oFieldViewMetadata.hasValueListAnnotation) {
			oFieldViewMetadata.hasFixedValues = oFieldViewMetadata["sap:value-list"] === "fixed-values";
		} else if (oFieldViewMetadata["com.sap.vocabularies.Common.v1.ValueList"]) {
			// Then check for "com.sap.vocabularies.Common.v1.ValueList", and retrieve the semantics
			oFieldViewMetadata.hasValueListAnnotation = true;
			oFieldViewMetadata.hasFixedValues = this._oMetadataAnalyser.getValueListSemantics(oFieldViewMetadata["com.sap.vocabularies.Common.v1.ValueList"]) === "fixed-values";
		}
	};

	/**
	 * Set any annotation(s) metadata on the control
	 * 
	 * @param {Object} oFieldViewMetadata - the field view metadata
	 * @private
	 */
	ControlProvider.prototype._setAnnotationMetadata = function(oFieldViewMetadata) {
		if (oFieldViewMetadata && oFieldViewMetadata.fullName) {
			oFieldViewMetadata.semanticObjects = this._oMetadataAnalyser.getSemanticObjectsFromAnnotation(oFieldViewMetadata.fullName);
		}
	};
	/**
	 * Returns the filterType of the field based on metadata, else undefined
	 * 
	 * @param {object} oField - OData metadata for the field
	 * @returns {string} the filter type for the field
	 * @private
	 */
	ControlProvider.prototype._getFilterType = function(oField) {
		if (ODataType.isNumeric(oField.type)) {
			return "numeric";
		} else if (oField.type === "Edm.DateTime" && oField.displayFormat === "Date") {
			return "date";
		} else if (oField.type === "Edm.String") {
			return "string";
		} else if (oField.type === "Edm.Boolean") {
			return "boolean";
		} else if (oField.type === "Edm.Time") {
			return "time";
		}
		return undefined;
	};

	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	ControlProvider.prototype.destroy = function() {
		var fDestroy = function(aArray) {
			var i;
			if (aArray) {
				i = aArray.length;
				while (i--) {
					aArray[i].destroy();
				}
			}
		};

		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;

		if (!this._bSemanticKeyAdditionalControlUsed && this._oSemanticKeyAdditionalControl && this._oSemanticKeyAdditionalControl.destroy) {
			this._oSemanticKeyAdditionalControl.destroy();
		}

		fDestroy(this._aValueHelpProvider);
		this._aValueHelpProvider = null;

		fDestroy(this._aValueListProvider);
		this._aValueListProvider = null;

		fDestroy(this._aLinkHandlers);
		this._aLinkHandlers = null;

		if (this._oHelper) {
			this._oHelper.destroy();
		}

		this._oHelper = null;
		this._mSmartField = null;
		this._aODataFieldMetadata = null;
		this._oDateFormatSettings = null;
		this._oCurrencyFormatSettings = null;
		this._oDefaultDropDownDisplayBehaviour = null;
		this._oLineItemAnnotation = null;
		this._oSemanticKeyAnnotation = null;
		this._oParentODataModel = null;
		this.bIsDestroyed = true;
	};

	SmartToggle = Control.extend("sap.ui.comp.SmartToggle", {
		metadata: {
			library: "sap.ui.comp",
			properties: {
				editable: {
					type: "boolean",
					defaultValue: false
				}
			},
			aggregations: {
				edit: {
					type: "sap.ui.core.Control",
					multiple: false
				},
				display: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			associations: {
				ariaLabelledBy: {
					type: "sap.ui.core.Control",
					multiple: true,
					singularName: "ariaLabelledBy"
				}
			}
		},
		renderer: function(rm, oControl) {
			rm.write("<span ");
			rm.writeControlData(oControl);
			rm.addClass("sapUiCompSmartToggle");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(oControl.getEditable() ? oControl.getEdit() : oControl.getDisplay());
			rm.write("</span>");
		}
	});

	/**
	 * @see sap.ui.core.Element#getFocusDomRef
	 * @protected
	 * @return {Element} Returns the DOM Element that should get the focus
	 */
	SmartToggle.prototype.getFocusDomRef = function() {
		// get and return the accessibility info of the control that is rendered currently
		var oControl = this.getEditable() ? this.getEdit() : this.getDisplay();
		if (oControl) {
			return oControl.getFocusDomRef();
		}
		return Control.prototype.getFocusDomRef.call(this);
	};

	/**
	 * @see sap.ui.core.Control#getAccessibilityInfo
	 * @protected
	 * @returns {Object} Accessibility Info
	 */
	SmartToggle.prototype.getAccessibilityInfo = function() {
		// get and return the accessibility info of the control that is rendered currently
		var oControl = this.getEditable() ? this.getEdit() : this.getDisplay();
		if (oControl && oControl.getAccessibilityInfo) {
			return oControl.getAccessibilityInfo();
		}

		return null;
	};

	/**
	 * @see sap.ui.base.ManagedObject#addAssociation
	 * @protected
	 * @returns {Object} Forwards the association of the inner control to the <code>SmartToggle</code> control for adding association.
	 */
	SmartToggle.prototype.addAssociation = function(sAssociationName, sId, bSuppressInvalidate) {
		if (sAssociationName === "ariaLabelledBy") {
			// get both, edit and display controls
			var oEditControl = this.getEdit(), oDisplayControl = this.getDisplay();
			// forward the ariaLabelledBy association of the inner control to the SmartToggle control
			oEditControl && oEditControl.addAssociation(sAssociationName, sId, bSuppressInvalidate);
			oDisplayControl && oDisplayControl.addAssociation(sAssociationName, sId, bSuppressInvalidate);
		}
		return Control.prototype.addAssociation.apply(this, arguments);
	};

	/**
	 * @see sap.ui.base.ManagedObject#removeAssociation
	 * @protected
	 * @returns {Object} Forwards the association of the inner control to the <code>SmartToggle</code> control for removing the specified
	 *          association.
	 */
	SmartToggle.prototype.removeAssociation = function(sAssociationName, vObject, bSuppressInvalidate) {
		if (sAssociationName === "ariaLabelledBy") {
			// get both, edit and display controls
			var oEditControl = this.getEdit(), oDisplayControl = this.getDisplay();
			// forward the ariaLabelledBy association of the inner control to the SmartToggle control
			oEditControl && oEditControl.removeAssociation(sAssociationName, vObject, bSuppressInvalidate);
			oDisplayControl && oDisplayControl.removeAssociation(sAssociationName, vObject, bSuppressInvalidate);
		}
		return Control.prototype.removeAssociation.apply(this, arguments);
	};

	/**
	 * @see sap.ui.base.ManagedObject#removeAllAssociation
	 * @protected
	 * @returns {Object} Forwards the association of the inner control to the <code>SmartToggle</code> control for removing all association.
	 */
	SmartToggle.prototype.removeAllAssociation = function(sAssociationName, bSuppressInvalidate) {
		if (sAssociationName === "ariaLabelledBy") {
			// get both, edit and display controls
			var oEditControl = this.getEdit(), oDisplayControl = this.getDisplay();
			// forward the ariaLabelledBy association of the inner control to the SmartToggle control
			oEditControl && oEditControl.removeAllAssociation(sAssociationName, bSuppressInvalidate);
			oDisplayControl && oDisplayControl.removeAllAssociation(sAssociationName, bSuppressInvalidate);
		}
		return Control.prototype.removeAllAssociation.apply(this, arguments);
	};

	return ControlProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/ControlProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.TableProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// -----------------------------------------------------------------------------
// Generates the view metadata required for SmartTable using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.TableProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/TableProvider",[
	'jquery.sap.global', 'sap/ui/comp/odata/MetadataAnalyser', './ControlProvider', 'sap/ui/comp/util/FormatUtil'
], function(jQuery, MetadataAnalyser, ControlProvider, FormatUtil) {
	"use strict";

	/**
	 * Constructs a class to generate the view/data model metadata for the SmartTable from the SAP-Annotations metadata
	 * 
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mPropertyBag - PropertyBag having members model, entitySet
	 * @author SAP SE
	 */
	var TableProvider = function(mPropertyBag) {
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this.sEntitySet = mPropertyBag.entitySet;
			this._sIgnoredFields = mPropertyBag.ignoredFields;
			this._sInitiallyVisibleFields = mPropertyBag.initiallyVisibleFields;
			this.isEditableTable = mPropertyBag.isEditableTable;
			this._smartTableId = mPropertyBag.smartTableId;
			this._isAnalyticalTable = mPropertyBag.isAnalyticalTable;
			this._isMobileTable = mPropertyBag.isMobileTable;
			this.useSmartField = mPropertyBag.useSmartField;
			this.useSmartToggle = mPropertyBag.useSmartToggle;
			this._bSkipAnnotationParse = mPropertyBag.skipAnnotationParse === "true";
			this._sLineItemQualifier = mPropertyBag.lineItemQualifier;
			this._sPresentationVariantQualifier = mPropertyBag.presentationVariantQualifier;
			this.enableInResultForLineItem = mPropertyBag.enableInResultForLineItem === "true";
			this._oSemanticKeyAdditionalControl = mPropertyBag._semanticKeyAdditionalControl;
			try {
				this._oDateFormatSettings = mPropertyBag.dateFormatSettings ? JSON.parse(mPropertyBag.dateFormatSettings) : undefined;
				this._oCurrencyFormatSettings = mPropertyBag.currencyFormatSettings ? JSON.parse(mPropertyBag.currencyFormatSettings) : undefined;
				this._oDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour;
			} catch (ex) {
				// Invalid dateformat provided!
			}
		}
		if (!this._oDateFormatSettings) {
			this._oDateFormatSettings = {};
		}
		// Default to UTC true if nothing is provided --> as sap:display-format="Date" should be used without a timezone
		if (!this._oDateFormatSettings.hasOwnProperty("UTC")) {
			this._oDateFormatSettings["UTC"] = true;
		}
		this._aODataFieldMetadata = [];
		this._aTableViewMetadata = [];
		this._aIgnoredFields = [];
		this._aInitiallyVisibleFields = [];
		this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel);
		this._oSemanticObjectController = mPropertyBag.semanticObjectController;
		this._intialiseMetadata();
	};

	/**
	 * Initialises the necessary table metadata
	 * 
	 * @private
	 */
	TableProvider.prototype._intialiseMetadata = function() {
		var aTableViewMetadata = [], i, iLen, oField, oTableViewField, fSorter, sSupportedFormats, sFullyQualifiedEntityTypeName;
		this._aODataFieldMetadata = this._oMetadataAnalyser.getFieldsByEntitySetName(this.sEntitySet);
		sFullyQualifiedEntityTypeName = this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(this.sEntitySet);
		if (!this._bSkipAnnotationParse) {
			this._oPresentationVariant = this._oMetadataAnalyser.getPresentationVariantAnnotation(sFullyQualifiedEntityTypeName, this._sPresentationVariantQualifier);
			if (this._oPresentationVariant) {
				this._oLineItemAnnotation = this._oPresentationVariant.lineItemAnnotation;
			}
			if (!this._oLineItemAnnotation) {
				this._oLineItemAnnotation = this._oMetadataAnalyser.getLineItemAnnotation(sFullyQualifiedEntityTypeName, this._sLineItemQualifier);
			}
		}
		// for ResponsiveTable - also get SemanticKey and add navigationProperty fields from LineItem annotation to metadata
		if (this._isMobileTable) {
			this._oSemanticKeyAnnotation = this._oMetadataAnalyser.getSemanticKeyAnnotation(sFullyQualifiedEntityTypeName);
			this._addLineItemNavigationFields(sFullyQualifiedEntityTypeName);
		}
		sSupportedFormats = this._oMetadataAnalyser.getEntityContainerAttribute("supported-formats");
		if (sSupportedFormats) {
			this._bSupportsExcelExport = sSupportedFormats.indexOf("xlsx") > -1;
		}
		if (!this._oDefaultDropDownDisplayBehaviour) {
			this._oDefaultDropDownDisplayBehaviour = this._oMetadataAnalyser.getTextArrangementValue(sFullyQualifiedEntityTypeName);
		}

		this._generateArrays();

		this._oControlProvider = new ControlProvider({
			metadataAnalyser: this._oMetadataAnalyser,
			model: this._oParentODataModel,
			fieldsMetadata: this._aODataFieldMetadata,
			lineItemAnnotation: this._oLineItemAnnotation,
			semanticKeyAnnotation: this._oSemanticKeyAnnotation,
			_semanticKeyAdditionalControl: this._oSemanticKeyAdditionalControl,
			isMobileTable: this._isMobileTable,
			isAnalyticalTable: this._isAnalyticalTable,
			smartTableId: this._smartTableId,
			dateFormatSettings: this._oDateFormatSettings,
			currencyFormatSettings: this._oCurrencyFormatSettings,
			defaultDropDownDisplayBehaviour: this._oDefaultDropDownDisplayBehaviour,
			useSmartField: this.useSmartField,
			useSmartToggle: this.useSmartToggle,
			enableDescriptions: !this._isAnalyticalTable,
			entitySet: this.sEntitySet,
			semanticObjectController: this._oSemanticObjectController
		});

		this._oFieldSemanticObjectMap = {};

		if (this._aODataFieldMetadata) {
			iLen = this._aODataFieldMetadata.length;
		}
		for (i = 0; i < iLen; i++) {
			oField = this._aODataFieldMetadata[i];
			// Ignore the fields in the ignored list -or- the one marked with visible="false" in annotation -or- "hidden"-annotated fields that not be
			// rendered on the UI
			if (this._aIgnoredFields.indexOf(oField.name) > -1 || !oField.visible || oField.hidden) {
				continue;
			}

			// Check if field is not a Primitive type --> only generate metadata for primitive/simple type fields
			if (oField.type.indexOf("Edm.") === 0) {
				oTableViewField = this._oControlProvider.getFieldViewMetadata(oField, this.isEditableTable);
				this._enrichWithTableViewMetadata(oTableViewField);
				aTableViewMetadata.push(oTableViewField);
				if (oTableViewField.semanticObject) {
					this._oFieldSemanticObjectMap[oTableViewField.name] = oTableViewField.semanticObject;
				}
			}
		}

		// Sorter function for sorting based on index (undefined has lower prio)
		fSorter = function(field1, field2) {
			if (field1.index || field1.index === 0) {
				if (field2.index || field2.index === 0) {
					// both fields have an index --> return the difference
					return field1.index - field2.index;
				}
				// Only field1 has an index --> it should be shown before field2
				return -1;
			}
			if (field2.index || field2.index === 0) {
				// Only field2 has an index --> field1 should be shown after field2
				return 1;
			}
			// both are equal (in our case no index present) --> keep the existing order
			return 0;
		};
		// Sort the array based on LineItem annotation order
		this._aTableViewMetadata = aTableViewMetadata.sort(fSorter);
	};

	/**
	 * Adds the navigationProperty fields from LineItem annotation to the OData Field array
	 * 
	 * @param {String} sFullyQualifiedEntityTypeName the full path of the entity type (including the namespace)
	 * @private
	 */
	TableProvider.prototype._addLineItemNavigationFields = function(sFullyQualifiedEntityTypeName) {
		var aFields, iLen, sField, oField;
		if (this._aODataFieldMetadata && this._oLineItemAnnotation) {
			aFields = this._oLineItemAnnotation.fields;
			if (aFields) {
				iLen = aFields.length;
			}
			// Check if any LineItem DataField contains a "/" (assumed to be navigationProperty path)
			while (iLen--) {
				sField = aFields[iLen];
				if (sField && sField.indexOf("/") >= 0) {
					oField = this._oMetadataAnalyser.extractNavigationPropertyField(sField, this.sEntitySet);
					// If a navigationProperty field is present - append the path so that binding and other checks work correctly!
					if (oField) {
						oField.name = oField.parentPropertyName + "/" + oField.name;
						if (oField.description) {
							oField.description = oField.parentPropertyName + "/" + oField.description;
						}
						if (oField.unit) {
							oField.unit = oField.parentPropertyName + "/" + oField.unit;
						}
						// Add the navigationProperty data field to the list of fields from the entity
						this._aODataFieldMetadata.push(oField);
					}
				}
			}
		}
	};

	/**
	 * Get the field semantic object map.
	 * 
	 * @returns {object} the semantic object map
	 * @public
	 */
	TableProvider.prototype.getFieldSemanticObjectMap = function() {
		return this._oFieldSemanticObjectMap;
	};

	/**
	 * Get the fields that can be added as Columns
	 * 
	 * @returns {Array} the table view metadata
	 * @public
	 */
	TableProvider.prototype.getTableViewMetadata = function() {
		return this._aTableViewMetadata;
	};

	/**
	 * Returns a flag indicating whether excel export is supported by this table (OData service).
	 * 
	 * @returns {boolean} whether excel export is supported
	 * @public
	 */
	TableProvider.prototype.getSupportsExcelExport = function() {
		return this._bSupportsExcelExport;
	};

	/**
	 * Returns a flag indicating whether date handling with UTC is enabled for the table.
	 * 
	 * @returns {boolean} whether UTC date handling is enabled
	 * @public
	 */
	TableProvider.prototype.getIsUTCDateHandlingEnabled = function() {
		return this._oDateFormatSettings ? this._oDateFormatSettings.UTC : false;
	};

	/**
	 * Get the fields that has to be always requested via $select
	 * 
	 * @returns {Array} the table view metadata
	 * @public
	 */
	TableProvider.prototype.getRequestAtLeastFields = function() {

		return (this._oPresentationVariant && this._oPresentationVariant.requestAtLeastFields) ? this._oPresentationVariant.requestAtLeastFields : [];

	};

	/**
	 * Generate an array of fields that need to be ignored and initially made visible in the SmartTable (if any)
	 * 
	 * @private
	 */
	TableProvider.prototype._generateArrays = function() {
		if (this._sIgnoredFields) {
			this._aIgnoredFields = this._sIgnoredFields.split(",");
		}
		if (this._sInitiallyVisibleFields) {
			this._aInitiallyVisibleFields = this._sInitiallyVisibleFields.split(",");
		}
	};

	/**
	 * Calculates additional flags and attributes for a field e.g. whether TypeAhead is switched on
	 * 
	 * @param {object} oFieldViewMetadata - the table view field
	 * @private
	 */
	TableProvider.prototype._enrichWithTableViewMetadata = function(oFieldViewMetadata) {
		var aAdditionalProperty = [], aNavigationProperty = [], sPath, iLength;
		var fExtractNavigationProperty = function(sProperty) {
			var sNavigationPath, aTemp;
			if (sProperty && sProperty.indexOf("/") > -1) {
				aTemp = sProperty.split("/");
				// Remove the Property part
				aTemp.pop();
				// Extract only the navigationPath
				sNavigationPath = aTemp.join("/");
			}
			return sNavigationPath;
		};
		// Label is already set and can be updated if present in the LineItem annotation
		this._updateLabel(oFieldViewMetadata);
		oFieldViewMetadata.isInitiallyVisible = this._isInitiallyVisible(oFieldViewMetadata);
		oFieldViewMetadata.index = this._getIndex(oFieldViewMetadata);
		oFieldViewMetadata.width = FormatUtil.getWidth(oFieldViewMetadata);

		// additional property handling for table
		if (oFieldViewMetadata.isMeasureField && oFieldViewMetadata.unit) {
			aAdditionalProperty.push(oFieldViewMetadata.unit);
		} else if (oFieldViewMetadata.description) {
			aAdditionalProperty.push(oFieldViewMetadata.description);
		}
		// Include criticality if it exists as field metadata
		if (oFieldViewMetadata.criticality) {
			aAdditionalProperty.push(oFieldViewMetadata.criticality);
		}

		// Include link Properties
		if (oFieldViewMetadata.linkProperties && oFieldViewMetadata.linkProperties.length) {
			aAdditionalProperty = aAdditionalProperty.concat(oFieldViewMetadata.linkProperties);
		}

		// Include field control Properties
		if (oFieldViewMetadata.fieldControlProperty) {
			aAdditionalProperty.push(oFieldViewMetadata.fieldControlProperty);
		}

		iLength = aAdditionalProperty.length;
		if (iLength) {
			oFieldViewMetadata.additionalProperty = aAdditionalProperty.join(",");
			while (iLength--) {
				sPath = fExtractNavigationProperty(aAdditionalProperty[iLength]);
				// add the navigationPath, if it exists, to the array
				if (sPath) {
					aNavigationProperty.push(sPath);
				}
			}
		}
		// add the parentProperty (navigationProperty name to the array if it exists
		if (oFieldViewMetadata.parentPropertyName) {
			aNavigationProperty.push(oFieldViewMetadata.parentPropertyName);
		}
		oFieldViewMetadata.navigationProperty = aNavigationProperty.join(",");

		// set the sortOrder from metadata
		this._setSortOrder(oFieldViewMetadata);

		// below properties are only relevant for analytical table
		if (this._isAnalyticalTable) {
			// aggregation-role= "measure" --> columns shall be summed on the UI (analytical table)
			oFieldViewMetadata.summed = oFieldViewMetadata.aggregationRole === "measure";
			// set the inResult from metadata
			this._setInResult(oFieldViewMetadata);
			// set the groupBy from metadata
			this._setGroupBy(oFieldViewMetadata);
		}
	};

	/**
	 * Returns a flag indicating whether the field should be initially visible on the UI *
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @returns {boolean} if the field should be initially visible
	 * @private
	 */
	TableProvider.prototype._isInitiallyVisible = function(oField) {
		var bInitiallyVisible = false;
		// Check if field exists in LineItem annotation (based on prio)
		if (this._oLineItemAnnotation && this._oLineItemAnnotation.fields) {
			bInitiallyVisible = this._oLineItemAnnotation.fields.indexOf(oField.name) > -1;

			if (bInitiallyVisible && !sap.ui.Device.system.desktop) {
				var sImportance = this._getFieldImportance(oField);
				if (sImportance) {
					if (sap.ui.Device.system.tablet) {
						bInitiallyVisible = sImportance === "High" || sImportance === "Medium"; // on tablets only show initially importance
						// high/medium columns
					} else if (sap.ui.Device.system.phone) {
						bInitiallyVisible = sImportance === "High"; // on phones only show initially importance high columns
					}
				}
			}
		}
		// Also check if field is part of SmartTable configuration
		if (!bInitiallyVisible && this._aInitiallyVisibleFields) {
			bInitiallyVisible = this._aInitiallyVisibleFields.indexOf(oField.name) > -1;
		}
		return bInitiallyVisible;
	};

	/**
	 * Sets inResult on the field metadata if the field exists in the RequestAtLeast of PresentationVariant annotation (or when
	 * enableInResultForLineItem is set, from LineItem annotation)
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @private
	 */
	TableProvider.prototype._setInResult = function(oField) {
		// first check if field is part of PresentationVariant-->RequestAtLeastFields
		if (this._oPresentationVariant) {
			if (this._oPresentationVariant.requestAtLeastFields && this._oPresentationVariant.requestAtLeastFields.indexOf(oField.name) > -1) {
				oField.inResult = true;
			}
		} else if (this.enableInResultForLineItem) {
			// else set inResult based on LineItem (mainly relevant for AnalyticalTable) only in non PresentationVariant use case
			if (this._oLineItemAnnotation && this._oLineItemAnnotation.fields && this._oLineItemAnnotation.fields.indexOf(oField.name) > -1) {
				oField.inResult = true;
			}
		}
	};

	/**
	 * Sets sorting realted info (sorted and sortOrder) on the field metadata if the field exists in the SortOrder of PresentationVariant annotation
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @private
	 */
	TableProvider.prototype._setSortOrder = function(oField) {
		var iLen;
		// first check if field is part of PresentationVariant-->SortOrder
		if (this._oPresentationVariant && this._oPresentationVariant.sortOrderFields) {
			iLen = this._oPresentationVariant.sortOrderFields.length;
			for (var i = 0; i < iLen; i++) {
				if (this._oPresentationVariant.sortOrderFields[i].name === oField.name) {
					oField.sorted = true;
					oField.sortOrder = this._oPresentationVariant.sortOrderFields[i].descending ? "Descending" : "Ascending";
					break;
				}
			}
		}
	};

	/**
	 * Sets grouping realted info (grouped) on the field metadata if the field exists in the GroupBy of PresentationVariant annotation
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @private
	 */
	TableProvider.prototype._setGroupBy = function(oField) {
		// first check if field is part of PresentationVariant-->GroupBy
		if (this._oPresentationVariant && this._oPresentationVariant.groupByFields && this._oPresentationVariant.groupByFields.indexOf(oField.name) >= 0) {
			oField.grouped = true;
		}
	};

	/**
	 * Returns the important annotation for the given field or null
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @returns {string} the important annotation
	 * @private
	 */
	TableProvider.prototype._getFieldImportance = function(oField) {
		var sReturnValue = null;

		if (this._oLineItemAnnotation && this._oLineItemAnnotation.importance) {
			sReturnValue = this._oLineItemAnnotation.importance[oField.name];
		}

		return sReturnValue;
	};

	/**
	 * Returns the index if the field from LineItem annotation, if it was found
	 * 
	 * @param {object} oField - OData metadata for the table field
	 * @returns {string} the index of the field (or undefined)
	 * @private
	 */
	TableProvider.prototype._getIndex = function(oField) {
		var iIndex = -1, iLength = 0;
		// Get the field order from LineItem annotation
		if (this._oLineItemAnnotation && this._oLineItemAnnotation.fields) {
			iLength = this._oLineItemAnnotation.fields.length;
			iIndex = this._oLineItemAnnotation.fields.indexOf(oField.name);
		}
		// If LineItem exists try to make configuration fields appear at the end
		if (iIndex < 0 && this._aInitiallyVisibleFields) {
			iIndex = this._aInitiallyVisibleFields.indexOf(oField.name);
			// set index only if field is part of configuration
			if (iIndex > -1) {
				iIndex += iLength;
			}
		}
		if (iIndex > -1) {
			return iIndex;
		}
		return undefined;
	};

	/**
	 * Updated the label from LineItem annotation metadata (if it exists)
	 * 
	 * @param {object} oField - OData view metadata of the field
	 * @private
	 */
	TableProvider.prototype._updateLabel = function(oField) {
		var sLabel;
		if (this._oLineItemAnnotation && this._oLineItemAnnotation.labels) {
			sLabel = this._oLineItemAnnotation.labels[oField.name];
		}
		if (sLabel) {
			oField.label = sLabel;

			if (oField.template && oField.template.setSemanticObjectLabel) { // SmartLink needs to know the overwritten name, as it is displayed in
				// the
				// navigation popover
				oField.template.setSemanticObjectLabel(oField.label);
			}
		}
	};

	/**
	 * Destroys the object
	 * 
	 * @public
	 */
	TableProvider.prototype.destroy = function() {
		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;
		if (this._oControlProvider && this._oControlProvider.destroy) {
			this._oControlProvider.destroy();
		}
		this._oControlProvider = null;
		this._aODataFieldMetadata = null;
		this._aTableViewMetadata = null;
		this._aIgnoredFields = null;
		this._aInitiallyVisibleFields = null;
		this._sIgnoredFields = null;
		this._sInitiallyVisibleFields = null;
		this.bIsDestroyed = true;
	};

	return TableProvider;

}, /* bExport= */true);

}; // end of sap/ui/comp/providers/TableProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartform.Group') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartform.Group.
jQuery.sap.declare('sap.ui.comp.smartform.Group'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.FormContainer'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartform/Group",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Element', 'sap/ui/layout/ResponsiveFlowLayoutData', 'sap/ui/layout/form/FormContainer', './GroupElement'
], function(jQuery, library, Element, ResponsiveFlowLayoutData, FormContainer, GroupElement) {
	"use strict";

	/**
	 * Constructor for a new smartform/Group.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Groups are used to group group elements.
	 * @extends sap.ui.layout.form.FormContainer
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartform.Group
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Group = FormContainer.extend("sap.ui.comp.smartform.Group", /** @lends sap.ui.comp.smartform.Group.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			designTime: true,
			properties: {
				/**
				 * Specifies whether the groups are rendered in a <code>ResponsiveLayout</code> with label on top of the group element. Each group will be
				 * rendered in a new line.
				 *
				 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
				 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
				 */
				useHorizontalLayout: {
					type: "boolean",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
				 *
				 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
				 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
				 *
				 * @deprecated Since version 1.48.0, please do not use this property as it does not have any effect on the current layout of the <code>SmartForm</code> control.
				 */
				horizontalLayoutGroupElementMinWidth: {
					type: "int",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Label for the group.
				 */
				label: {
					type: "string",
					group: "Misc",
					defaultValue: null
				}

			},
			defaultAggregation: "groupElements",
			aggregations: {

				/**
				 * A <code>GroupElement</code> is a combination of one label and different controls associated to this label.
				 */
				groupElements: {
					type: "sap.ui.comp.smartform.GroupElement",
					multiple: true,
					singularName: "groupElement"
				},

				/**
				 * Layout to specify how the group shall be rendered (e.g. span and line-break)
				 *
				 * <b>Note:</b> Do not use <code>layout</code> and <code>layoutData</code> aggregations combined.
				 *
				 * @deprecated Since version 1.48.0, please use <code>layoutData</code> aggregation instead.
				 */
				layout: {
					type: "sap.ui.layout.GridData",
					multiple: false
				}
			},
			_visibilityDerived: false
		}
	});

	Group.prototype.setUseHorizontalLayout = function(bValue) {

		var bOldValue = this.getUseHorizontalLayout();
		if (bOldValue == bValue) {
			return this;
		}

		this.setProperty("useHorizontalLayout", bValue);

		// update all GroupElements
		var aGroupElements = this.getGroupElements();
		for (var i = 0; i < aGroupElements.length; i++) {
			aGroupElements[i].setUseHorizontalLayout(bValue);
		}

		this._updateLayoutData();

		return this;

	};

	Group.prototype._updateLayoutData = function() {

		if (this.getUseHorizontalLayout()) {
			// only needed if ResponsiveLayout used in Form
			var oSmartForm = this.getParent();
			while (oSmartForm && !oSmartForm.addGroup && oSmartForm.getParent) {
				// could be Form and Panel
				oSmartForm = oSmartForm.getParent();
			}
			if (!oSmartForm || !oSmartForm.getLayout() || !oSmartForm.getLayout().getGridDataSpan()) {
				if (!this.getLayoutData()) { // don't overwrite LayoutData set from outside
					if (!this._oResponsiveLayout) {
						this._oResponsiveLayout = new ResponsiveFlowLayoutData({
							"linebreak": true,
							"linebreakable": true
						});
						this._oResponsiveLayout._bCreatedByGroup = true;
					}

					this.setLayoutData(this._oResponsiveLayout);
				}
			} else {
				this._updateLineBreaks();
			}
		} else if (this._oResponsiveLayout && this.getLayoutData() == this._oResponsiveLayout) {
			this.setLayoutData();
			this._oResponsiveLayout.setParent(this);
		}

	};

	Group.prototype.setHorizontalLayoutGroupElementMinWidth = function(nValue) {

		var nOldValue = this.getHorizontalLayoutGroupElementMinWidth();
		if (nOldValue == nValue) {
			return this;
		}

		jQuery.sap.log.error("HorizontalLayoutGroupElementMinWidth is deprecated", this);

		this.setProperty("horizontalLayoutGroupElementMinWidth", nValue);

		var aGroupElements = this.getGroupElements();
		for (var i = 0; i < aGroupElements.length; i++) {
			aGroupElements[i].setHorizontalLayoutGroupElementMinWidth(nValue);
		}

		return this;

	};

	/**
	 * Setter for property <code>editable</code> of all smart fields in children hierarchy.
	 *
	 * @param {boolean} bEditMode new value for editable property of smart fields.
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.setEditMode = function(bEditMode) {

		var aGroupElements = this.getGroupElements();
		for (var i = 0; i < aGroupElements.length; i++) {
				aGroupElements[i].setEditMode(bEditMode);
		}
		return this;

	};

	/**
	 * Delegates edit mode from parent( like SmartForm ) to the given group element
	 *
	 * @private
	 * @param {object} oGroupElement on which the edit mode shall be set
	 */
	Group.prototype._delegateEditModeFromParent = function(oGroupElement) {
		var oParent = null;
		var bEditable = false;

		if (oGroupElement) {
			oParent = this.getParent();
			if (oParent && oParent.getEditable) {
				bEditable = oParent.getEditable();
				oGroupElement.setEditMode(bEditable);
			}
		}
	};

	/**
	 * Updates line breaks of group elements
	 *
	 * @private
	 */
	Group.prototype._updateLineBreaks = function() {

		if (!this.getUseHorizontalLayout()) {
			return;
		}

		var oSmartForm = this.getParent();

		if (!oSmartForm) {
			return;
		}

		while (oSmartForm && !oSmartForm._getGridDataSpanNumbers && oSmartForm.getParent) {
			// could be Form and Panel
			oSmartForm = oSmartForm.getParent();
		}

		if (!oSmartForm._getGridDataSpanNumbers) {
			return;
		}

		var oSpan = oSmartForm._getGridDataSpanNumbers();

		if (!oSpan) {
			return;
		}

		var aElements = this.getGroupElements();

		aElements = aElements.filter(function(oElement) {
			return oElement.getVisible();
		});

		var iCountXL = 0;
		var iCountL = 0;
		var iCountM = 0;
		var iCountS = 0;
		var bLinebreakXL = false;
		var bLinebreakL = false;
		var bLinebreakM = false;
		var bLinebreakS = false;

		for (var i = 0; i < aElements.length; i++) {
			var oElement = aElements[i];
			iCountXL++;
			iCountL++;
			iCountM++;
			iCountS++;
			if (oSpan.XL * iCountXL > 12) {
				bLinebreakXL = true;
				iCountXL = 1;
			} else {
				bLinebreakXL = false;
			}

			if (oSpan.L * iCountL > 12) {
				bLinebreakL = true;
				iCountL = 1;
			} else {
				bLinebreakL = false;
			}

			if (oSpan.M * iCountM > 12) {
				bLinebreakM = true;
				iCountM = 1;
			} else {
				bLinebreakM = false;
			}

			if (oSpan.S * iCountS > 12) {
				bLinebreakS = true;
				iCountS = 1;
			} else {
				bLinebreakS = false;
			}

			oElement._setLinebreak(bLinebreakXL, bLinebreakL, bLinebreakM, bLinebreakS);
		}

	};

	/*
	 * triggers the data span update of the assigned GroupElements
	 */
	Group.prototype._updateGridDataSpan = function() {

		if (!this.getUseHorizontalLayout()) {
			return;
		}

		var aGroupElements = this.getGroupElements();
		for (var i = 0; i < aGroupElements.length; i++) {
			aGroupElements[i]._updateGridDataSpan();
		}

	};

	Group.prototype._updateFormContainerVisibility = function() {
		var bActualVisible = this.getVisible();

		if (bActualVisible === false && this._visibilityDerived === false) {
			return;
		}

		var aGroupElements = this.getGroupElements();

		var bVisible = false;
		bVisible = aGroupElements.some(function(oGroupElement) {
			return oGroupElement.getVisible();
		});

		if (bActualVisible !== bVisible) {
			this._visibilityDerived = true;
			FormContainer.prototype.setVisible.apply(this, [bVisible]);
			this.fireEvent("_visibleChanged");
		}
	};

	Group.prototype.setLabel = function(sLabel) {

		this.setProperty("label", sLabel);

		var sTitle = this.getTitle();

		if (sTitle && (typeof sTitle !== "string")) {
			// Title property must not be used, only Label must be used.
			jQuery.sap.log.error("Title already set, Label can not be set", this);
		} else {
			this.setTitle(sLabel);
		}

		return this;

	};

	/**
	 * Sets a new value for property <code>visible</code>. If set to <code>false</code>, the <code>Group</code> is not rendered.
	 * Default value is true.
	 *
	 * @param {boolean} bVisible New value for property <code>visible</code>
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.setVisible = function(bVisible) {

		FormContainer.prototype.setVisible.apply(this, arguments);

		this._visibilityDerived = false;
//		this._updateFormContainerVisibility();	no inheritance here to be compatible :(

		this.fireEvent("_visibleChanged");
		return this;

	};

	Group.prototype.addGroupElement = function(oGroupElement) {
		return this.addFormElement(oGroupElement);
	};

	Group.prototype.insertGroupElement = function(oGroupElement, iIndex) {
		return this.insertFormElement(oGroupElement, iIndex);
	};

	Group.prototype.getGroupElements = function() {
		return this.getFormElements();
	};

	Group.prototype.indexOfGroupElement = function(oGroupElement) {
		return this.indexOfFormElement(oGroupElement);
	};

	Group.prototype.removeGroupElement = function(vGroupElement) {
		return this.removeFormElement(vGroupElement);
	};

	Group.prototype.removeAllGroupElements = function() {
		return this.removeAllFormElements();
	};

	Group.prototype.destroyGroupElements = function() {
		return this.destroyFormElements();
	};

	Group.prototype.addFormElement = function(oGroupElement) {

		if (!oGroupElement) {
			return this;
		}

		// as "groupElementss" aggregation is not used, at least validate it
		oGroupElement = this.validateAggregation("groupElements", oGroupElement, /* multiple */ true);

		// before addFormElement to prevent GridDataSpan update executed twice
		oGroupElement.setUseHorizontalLayout(this.getUseHorizontalLayout());
		oGroupElement.setHorizontalLayoutGroupElementMinWidth(this.getHorizontalLayoutGroupElementMinWidth());
		oGroupElement.attachVisibleChanged(this._updateFormContainerVisibility, this);
		_inheritCustomData.call(this, oGroupElement);

		FormContainer.prototype.addFormElement.apply(this, arguments);

		this._delegateEditModeFromParent(oGroupElement);
		this._updateFormContainerVisibility();
		if (this.getUseHorizontalLayout()) {
			oGroupElement._updateGridDataSpan();
			this._updateLineBreaks();
		}

		return this;

	};

	Group.prototype.insertFormElement = function(oGroupElement, iIndex) {

		if (!oGroupElement) {
			return this;
		}

		// as "groupElementss" aggregation is not used, at least validate it
		oGroupElement = this.validateAggregation("groupElements", oGroupElement, /* multiple */ true);

		// before insertFormElement to prevent GridDataSpan update executed twice
		oGroupElement.setUseHorizontalLayout(this.getUseHorizontalLayout());
		oGroupElement.setHorizontalLayoutGroupElementMinWidth(this.getHorizontalLayoutGroupElementMinWidth());
		oGroupElement.attachVisibleChanged(this._updateFormContainerVisibility, this);
		_inheritCustomData.call(this, oGroupElement);

		FormContainer.prototype.insertFormElement.apply(this, arguments);

		this._delegateEditModeFromParent(oGroupElement);
		this._updateFormContainerVisibility();
		if (this.getUseHorizontalLayout()) {
			oGroupElement._updateGridDataSpan();
			this._updateLineBreaks();
		}

		return this;
	};

	Group.prototype.removeFormElement = function(vGroupElement) {

		var oGroupElement = FormContainer.prototype.removeFormElement.apply(this, arguments);

		if (oGroupElement) {
			oGroupElement.detachVisibleChanged(this._updateFormContainerVisibility, this);
			_removeCustomData.call(this, oGroupElement);

			if (this.getGroupElements().length > 0) {
				this._updateFormContainerVisibility();
				this._updateLineBreaks();
			}
		}

		return oGroupElement;

	};

	Group.prototype.removeAllFormElements = function() {

		var aGroupElements = FormContainer.prototype.removeAllFormElements.apply(this, arguments);

		for (var i = 0; i < aGroupElements.length; i++) {
			var oGroupElement = aGroupElements[i];
			oGroupElement.detachVisibleChanged(this._updateFormContainerVisibility, this);
			_removeCustomData.call(this, oGroupElement);
		}

		return aGroupElements;

	};

	Group.prototype.setLayout = function(oLayout) {
		oLayout = this.validateAggregation("layout", oLayout, /* multiple */ false);
		return this.setLayoutData(oLayout);
	};

	Group.prototype.getLayout = function() {
		return this.getLayoutData();
	};

	Group.prototype.destroyLayout = function(oLayout) {
		return this.destroyLayoutData();
	};

	/**
	 * Adds some CustomData into the aggregation <code>customData</code>.
	 *
	 * <b>Note:</b> <code>customData</code> that is used by the <code>SmartField</code> control itself
	 * is also added to the <code>GroupElement</code> elements and the <code>SmartField</code> controls in the children hierarchy.
	 * Additional <code>customData</code> that is not used by the <code>SmartField</code> control
	 * internally might not be added.
	 *
	 * @param {sap.ui.core.CustomData} oCustomData the customData to add; if empty, nothing is added
	 * @return {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.addCustomData = function(oCustomData) {

		if (!oCustomData) {
			return this;
		}

		FormContainer.prototype.addCustomData.apply(this, arguments);

		var aGroupElements = this.getGroupElements();
		for (var i = 0; i < aGroupElements.length; i++) {
			_addCustomDataToGroupElement.call(this, aGroupElements[i], oCustomData);
		}

		return this;

	};

	/**
	 * Inserts some customData into the aggregation <code>customData</code>.
	 *
	 * <b>Note:</b> <code>customData</code> that is used by the <code>SmartField</code> control itself
	 * is also added to the <code>GroupElement</code> elements and the <code>SmartField</code> controls in the children hierarchy.
	 * Additional <code>customData</code> that is not used by the <code>SmartField</code> control
	 * internally might not be added.
	 *
	 * @param {sap.ui.core.CustomData} oCustomData the customData to insert; if empty, nothing is inserted
	 * @param {int} iIndex the 0-based index the customData should be inserted at; for a negative value of iIndex, the customData is inserted at position 0; for a value greater than the current size of the aggregation, the customData is inserted at the last position
	 * @return {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> to allow method chaining.
	 * @public
	 */
	Group.prototype.insertCustomData = function(oCustomData, iIndex) {

		if (!oCustomData) {
			return this;
		}

		FormContainer.prototype.insertCustomData.apply(this, arguments);

		var aGroupElements = this.getGroupElements();
		for (var i = 0; i < aGroupElements.length; i++) {
		// order doesn't matter
			_addCustomDataToGroupElement.call(this, aGroupElements[i], oCustomData);
		}

		return this;

	};

	Group.prototype.removeCustomData = function(vCustomData) {

		var oCustomData = FormContainer.prototype.removeCustomData.apply(this, arguments);

		if (oCustomData) {
			var aGroupElements = this.getGroupElements();
			for (var i = 0; i < aGroupElements.length; i++) {
				_removeCustomData.call(this, aGroupElements[i], oCustomData.getId());
			}
		}

		return oCustomData;

	};

	Group.prototype.removeAllCustomData = function() {

		var aCustomData = FormContainer.prototype.removeAllCustomData.apply(this, arguments);

		if (aCustomData.length > 0) {
			var aGroupElements = this.getGroupElements();
			for (var i = 0; i < aGroupElements.length; i++) {
				_removeCustomData.call(this, aGroupElements[i]);
			}
		}

		return aCustomData;

	};

	Group.prototype.destroyCustomData = function() {

		FormContainer.prototype.destroyCustomData.apply(this, arguments);

		var aGroupElements = this.getGroupElements();
		for (var i = 0; i < aGroupElements.length; i++) {
			_removeCustomData.call(this, aGroupElements[i]);
		}

		return this;

	};

	function _inheritCustomData(oGroupElement) {

		var aCustomData = this.getCustomData();

		for (var i = 0; i < aCustomData.length; i++) {
			_addCustomDataToGroupElement.call(this, oGroupElement, aCustomData[i]);
		}

	}

	function _addCustomDataToGroupElement(oGroupElement, oCustomData) {

		if (sap.ui.comp.smartform.inheritCostomDataToFields(oCustomData)) {
			var oNewCustomData = oCustomData.clone();
			oNewCustomData._bFromGroup = true;
			oNewCustomData._sOriginalId = oCustomData.getId();
			oGroupElement.addCustomData(oNewCustomData);
		}

	}

	function _removeCustomData(oGroupElement, sOriginalId) {

		var aCustomData = oGroupElement.getCustomData();

		for (var i = 0; i < aCustomData.length; i++) {
			var oCustomData = aCustomData[i];
			if (oCustomData._bFromGroup && (!sOriginalId || sOriginalId == oCustomData._sOriginalId)) {
				oGroupElement.removeCustomData(oCustomData);
			}
		}

	}

	/*
	 * to have the right event handlers attached to the GroupElements and CustomData settings we need
	 * to remove all GroupElement before cloning, add them again afterwards and clone them manually.
	 */
	Group.prototype.clone = function(sIdSuffix, aLocalIds){

		var aGroupElements = this.removeAllGroupElements();

		var oClone = FormContainer.prototype.clone.apply(this, arguments);

		for (var i = 0; i < aGroupElements.length; i++) {
			var oGroupElement = aGroupElements[i];
			var oGroupElementClone = oGroupElement.clone(sIdSuffix, aLocalIds);
			this.addGroupElement(oGroupElement);
			oClone.addGroupElement(oGroupElementClone);
		}

		return oClone;

	};

	// remove "internal" FormContainer functionality from API documentation

	/**
	 * Sets the aggregated <code>title</code>.
	 *
	 * Do not use the <code>title</code> aggregation, use the <code>label</code> property instead.
	 *
	 * @param {sap.ui.core.Title|string} vTitle The title to set
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining
	 * @private
	 * @name sap.ui.comp.smartform.Group#setTitle
	 * @function
	 */

	/**
	 * Gets content of aggregation <code>title</code>.
	 *
	 * Do not use the <code>title</code> aggregation, use the <code>label</code> property instead.
	 *
	 * @return {sap.ui.core.Title|string} Title
	 * @private
	 * @name sap.ui.comp.smartform.Group#getTitle
	 * @function
	 */

	/**
	 * Destroys the title in the aggregation <code>title</code>.
	 *
	 * Do not use the <code>title</code> aggregation, use the <code>label</code> property instead.
	 *
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining
	 * @private
	 * @name sap.ui.comp.smartform.Group#destroyTitle
	 * @function
	 */

	/**
	 * Adds some <code>formElement</code> to the aggregation <code>formElements</code>.
	 *
	 * Do not use the <code>formElements</code> aggregation, use the <code>groupElements</code> aggregation instead.
	 *
	 * @param {sap.ui.layout.form.FormElement} oFormElement the <code>formElement</code> to add; if empty, nothing is inserted
	 * @return {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
	 * @private
	 * @name sap.ui.comp.smartform.Group#addFormElement
	 */

	/**
	 * Inserts a <code>formElement</code> into the aggregation <code>formElements</code>.
	 *
	 * Do not use the <code>formElements</code> aggregation, use the <code>groupElements</code> aggregation instead.
	 *
	 * @param {sap.ui.layout.form.FormElement} oFormElement the <code>formElement</code> to insert; if empty, nothing is inserted
	 * @param {int} iIndex the 0-based index the <code>formElement</code> should be inserted at; for a negative value of iIndex, the <code>formElement</code> is inserted at position 0; for a value greater than the current size of the aggregation, the <code>formElement</code> is inserted at the last position
	 * @return {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
	 * @private
	 * @name sap.ui.comp.smartform.Group#insertFormElement
	 */

	/**
	 * Gets content of aggregation <code>formElements</code>.
	 *
	 * Do not use the <code>formElements</code> aggregation, use the <code>groupElements</code> aggregation instead.
	 *
	 * @return {sap.ui.layout.form.FormElement[]} The <code>formElements</code>
	 * @private
	 * @name sap.ui.comp.smartform.Group#getFormElements
	 */

	/**
	 * Checks for the provided <code>sap.ui.layout.form.FormElement</code> in the aggregation <code>groupElements</code>. and returns its index if found or -1 otherwise.
	 *
	 * Do not use the <code>formElements</code> aggregation, use the <code>groupElements</code> aggregation instead.
	 *
	 * @param {sap.ui.layout.form.FormElement} oFormElement the <code>formElement</code> whose index is looked for
	 * @return {int} The index of the provided control in the aggregation if found, or -1 otherwise
	 * @private
	 * @name sap.ui.comp.smartform.Group#indexOfFormElement
	 */

	/**
	 * Removes a <code>formElement</code> from the aggregation <code>formElements</code>.
	 *
	 * Do not use the <code>formElements</code> aggregation, use the <code>groupElements</code> aggregation instead.
	 *
	 * @param {int|string|sap.ui.layout.form.FormElement} vFormElement The <code>formElement</code> to remove or its index or id
	 * @return {sap.ui.layout.form.FormElement} The removed <code>formElement</code> or null
	 * @private
	 * @name sap.ui.comp.smartform.Group#removeFormElement
	 */

	/**
	 * Removes all the controls from the aggregation <code>formElements</code>.
	 *
	 * Do not use the <code>formElements</code> aggregation, use the <code>groupElements</code> aggregation instead.
	 *
	 * @return {sap.ui.layout.form.FormElement[]} An array of the removed elements (might be empty)
	 * @private
	 * @name sap.ui.comp.smartform.Group#removeAllFormElements
	 */

	/**
	 * Destroys all the <code>formElements</code> in the aggregation <code>formElements</code>.
	 *
	 * Do not use the <code>formElements</code> aggregation, use the <code>groupElements</code> aggregation instead.
	 *
	 * @return {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
	 * @private
	 * @name sap.ui.comp.smartform.Group#destroyFormElements
	 */

	/**
	 * Sets the aggregated <code>toolbar</code>.
	 *
	 * The <code>toolbar</code> is not supported in <code>sap.ui.comp.smartform.Group</code>.
	 *
	 * @param {sap.ui.core.Toolbar} vToolbar The toolbar to set
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining
	 * @private
	 * @name sap.ui.comp.smartform.Group#setToolbar
	 * @function
	 */

	/**
	 * Gets content of aggregation <code>toolbar</code>.
	 *
	 * The <code>toolbar</code> is not supported in <code>sap.ui.comp.smartform.Group</code>.
	 *
	 * @return {sap.ui.core.Toolbar} Toolbar
	 * @private
	 * @name sap.ui.comp.smartform.Group#getToolbar
	 * @function
	 */

	/**
	 * Destroys the toolbar in the aggregation <code>toolbar</code>.
	 *
	 * The <code>toolbar</code> is not supported in <code>sap.ui.comp.smartform.Group</code>.
	 *
	 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining
	 * @private
	 * @name sap.ui.comp.smartform.Group#destroyToolbar
	 * @function
	 */

	return Group;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartform/Group.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smarttable.SmartTable') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smarttable.SmartTable.
jQuery.sap.declare('sap.ui.comp.smarttable.SmartTable'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBoxRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Column'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSeparator'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalColumn'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Column'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smarttable/SmartTable",[
	'jquery.sap.global', 'sap/m/VBoxRenderer', 'sap/m/Column', 'sap/m/Label', 'sap/m/MessageBox', 'sap/m/Table', 'sap/m/Text', 'sap/m/Title', 'sap/m/OverflowToolbar', 'sap/m/ToolbarDesign', 'sap/m/OverflowToolbarButton', 'sap/m/ToolbarSeparator', 'sap/m/VBox', 'sap/ui/comp/library', 'sap/ui/comp/providers/TableProvider', 'sap/ui/comp/smartfilterbar/FilterProvider', 'sap/ui/comp/smartvariants/SmartVariantManagement', 'sap/ui/model/FilterOperator', 'sap/ui/model/json/JSONModel', 'sap/ui/table/AnalyticalColumn', 'sap/ui/table/AnalyticalTable', 'sap/ui/table/Column', 'sap/ui/table/Table', 'sap/ui/table/TreeTable', 'sap/ui/comp/personalization/Util', 'sap/ui/comp/util/FormatUtil', 'sap/ui/comp/odata/ODataModelUtil', 'sap/ui/comp/odata/ODataType'
], function(jQuery, VBoxRenderer, Column1, Label, MessageBox, ResponsiveTable, Text, Title, OverflowToolbar, ToolbarDesign, OverflowToolbarButton, ToolbarSeparator, VBox, library, TableProvider, FilterProvider, SmartVariantManagement, FilterOperator, JSONModel, AnalyticalColumn, AnalyticalTable, Column, Table, TreeTable, PersonalizationUtil, FormatUtil, ODataModelUtil, ODataType) {
	"use strict";

	/**
	 * Constructor for a new smarttable/SmartTable.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartTable control creates a table based on OData metadata and the configuration specified. The entitySet attribute must be
	 *        specified to use the control. This attribute is used to fetch fields from OData metadata, from which columns will be generated; it can
	 *        also be used to fetch the actual table data.<br>
	 *        Based on the tableType property, this control will render a standard, analytical, tree, or responsive table.<br>
	 *        <b><i>Note:</i></b><br>
	 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
	 * @extends sap.m.VBox
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smarttable.SmartTable
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartTable = VBox.extend("sap.ui.comp.smarttable.SmartTable", /** @lends sap.ui.comp.smarttable.SmartTable.prototype */
	{
		metadata: {

			library: "sap.ui.comp",

			designTime: true,

			properties: {

				/**
				 * The entity set name from which to fetch data and generate the columns. Note that this is not a dynamic UI5 property
				 * 
				 * @since 1.26.0
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * ID of the corresponding SmartFilter control; When specified, the SmartTable searches for the SmartFilter (also in the closest
				 * parent View) and attaches to the relevant events of the SmartFilter; to fetch data, show overlay etc.
				 * 
				 * @since 1.26.0
				 */
				smartFilterId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be ignored in the OData metadata by the SmartTable control.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 * 
				 * @since 1.26.0
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be shown initially in the SmartTable as visible columns and in the order specified.<br>
				 * This property is mainly meant to be used when no LineItem annotation exists.<br>
				 * If you have fields in the XMLView they are always shown first; then, the columns are added based on the LineItem annotation and
				 * finally based on this property.<br>
				 * <i>Note:</i><br>
				 * If both this property and the LineItem annotation exist, the order of fields cannot be guaranteed to be as mentioned here.<br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 * 
				 * @since 1.32.0
				 */
				initiallyVisibleFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be always requested from the backend<br>
				 * This property is mainly meant to be used when there is no PresentationVariant annotation.<br>
				 * If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
				 * of both.<br>
				 * <i>Note:</i><br>
				 * This property has no effect when AnalyticalTable is used.<br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 * 
				 * @since 1.32.0
				 */
				requestAtLeastFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that is not shown in the personalization dialog.<br>
				 * <i>Note:</i><br>
				 * No validation is done. Please ensure that you do not add spaces or special characters.
				 * 
				 * @since 1.32.0
				 */
				ignoreFromPersonalisation: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the type of table to be created in the SmartTable control.<br>
				 * <i>Note:</i><br>
				 * If you add a table to the content of the SmartTable in the view, this property has no effect.
				 * 
				 * @since 1.26.0
				 */
				tableType: {
					type: "sap.ui.comp.smarttable.TableType",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The useVariantManagement attribute can be set to true or false depending on whether you want to use variants. As a prerequisite you
				 * need to specify the persistencyKey property.
				 * 
				 * @since 1.26.0
				 */
				useVariantManagement: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The showVariantManagement attribute can be set to true or false for controlling the visibility of VariantManagement button.
				 * 
				 * @since 1.38.0
				 */
				showVariantManagement: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Can be set to true or false depending on whether you want to export data to a spreadsheet application, for example Microsoft Excel.<br>
				 * <i>Note:</i><br>
				 * Any $expand parameters are removed when sending the request to generate the spreadsheet. (only valid when <code>exportType</code>
				 * is <code>sap.ui.comp.smarttable.ExportType.GW</code>)
				 * 
				 * @since 1.26.0
				 */
				useExportToExcel: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Specifies the type of export to be used in the <code>SmartTable</code> control.
				 * 
				 * @since 1.50.0
				 * @experimental since 1.50.0. The default value will be changed to <code>sap.ui.comp.smarttable.ExportType.UI5Client</code> in the
				 *               next release.
				 */
				exportType: {
					type: "sap.ui.comp.smarttable.ExportType",
					group: "Misc",
					defaultValue: "GW"
				},

				/**
				 * The useTablePersonalisation attribute can be set to true or false depending on whether you want to define personalized table
				 * settings. If you want to persist the table personalization, you need to specify the persistencyKey property.
				 * 
				 * @since 1.26.0
				 */
				useTablePersonalisation: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * The showTablePersonalisation attribute can be set to true or false for controlling the visibility of the TablePersonalisation
				 * button.
				 * 
				 * @since 1.38.0
				 */
				showTablePersonalisation: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If set to <code>true</code> (default), the number of rows is shown along with the header text.<br>
				 * If set to <code>false</code>, the number of rows will not be shown on the user interface.<br>
				 * <i>Note:</i><br>
				 * To avoid sending dedicated OData requests in order to improve your application's performance, you must configure the binding of the
				 * table as required.
				 * 
				 * @since 1.26.0
				 */
				showRowCount: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Specifies header text that is shown in table
				 * 
				 * @since 1.26.0
				 */
				header: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * A style class which is defined for the toolbar of the table.
				 * 
				 * @since 1.26.0
				 */
				toolbarStyleClass: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Can be used to override the filter behavior. If set to true (default), instead of the filter input box a button is rendered. When
				 * pressing this button, the SmartTable control opens the filter panel directly in the table personalization dialog.
				 * 
				 * @deprecated Since 1.40.0. After personalization dialog has been introduced in SmartTable the property
				 *             <code>enableCustomFilter</code> does not make sense. When setting the property to <code>false</code>, the entered
				 *             custom filter value will not be shown in personalization dialog and will also not be persisted in variant management.
				 *             The custom filter will also be overwritten when rebindTable is called on the SmartTable.
				 * @since 1.26.0
				 */
				enableCustomFilter: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Key used to access personalization data.
				 * 
				 * @since 1.26.0
				 */
				persistencyKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to true, the standard toolbar and custom toolbar will be merged into one toolbar. The combined toolbar will have a solid
				 * style.
				 * 
				 * @since 1.26.0
				 * @deprecated Since 1.29. This property has no effect
				 */
				useOnlyOneSolidToolbar: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Retrieves or sets the current variant.
				 * 
				 * @since 1.28.0
				 */
				currentVariantId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * This attribute can be used to specify if the controls created by the SmartTable control are editable. (The automatic toggle of
				 * controls works only for the SmartField/SmartToggle scenario)
				 * 
				 * @since 1.28.0
				 */
				editable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * When set to true, this enables automatic binding of the table using the tableBindingPath (if it exists) or entitySet property. This
				 * happens just after the <code>initialise</code> event has been fired.
				 * 
				 * @since 1.28.0
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * This attribute can be used to specify the path that is used during the binding of the table. If not specified, the entitySet
				 * attribute is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)
				 * 
				 * @since 1.28.0
				 */
				tableBindingPath: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies whether the editable property can be toggled via a button on the toolbar. (The automatic toggle of controls works only
				 * for the SmartField/SmartToggle scenario)
				 * 
				 * @since 1.28.0
				 */
				editTogglable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * The demandPopin attribute can be set to true or false depending on whether you want to display columns as popins on the responsive
				 * table
				 * 
				 * @since 1.30.0
				 */
				demandPopin: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Controls the visibility of the FullScreen button.
				 * 
				 * @since 1.38
				 */
				showFullScreenButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			associations: {
				/**
				 * Identifies the SmartVariant control which should be used for the personalization. Will be ignored if the advanced mode is set.
				 * 
				 * @since 1.38
				 */
				smartVariant: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			aggregations: {

				/**
				 * A toolbar that can be added by the user to define their own custom buttons, icons, etc. If this is specified, the SmartTable
				 * control does not create an additional toolbar, but makes use of this one.
				 * 
				 * @since 1.26.0
				 */
				customToolbar: {
					type: "sap.m.Toolbar",
					multiple: false
				},

				/**
				 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
				 * 
				 * @since 1.28.0
				 */
				semanticObjectController: {
					type: "sap.ui.comp.navpopover.SemanticObjectController",
					multiple: false
				},

				/**
				 * The value for the noData aggregation can be either a string value or a control instance.<br>
				 * The control is shown, in case there is no data for the Table available. In case of a string value this will simply replace the no
				 * data text.<br>
				 * Currently the Responsive Table only supports string values.
				 * 
				 * @since 1.32.0
				 */
				noData: {
					type: "sap.ui.core.Control",
					altTypes: [
						"string"
					],
					multiple: false
				},
				/**
				 * Allows users to specify an additional control that will be added to a VBox for the first semantic key field.<br>
				 * <i>Note:</i><br>
				 * This property is not meant for public use.
				 * 
				 * @since 1.38.0
				 */
				semanticKeyAdditionalControl: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {

				/**
				 * This event is fired once the control has been initialized.
				 * 
				 * @since 1.26.0
				 */
				initialise: {},

				/**
				 * This event is fired just before the binding is being done.
				 * 
				 * @name sap.ui.comp.smarttable.SmartTable#beforeRebindTable
				 * @event
				 * @param {sap.ui.base.Event} oControlEvent
				 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
				 * @param {object} oControlEvent.getParameters
				 * @param {object} oControlEvent.getParameters.bindingParams The bindingParams object contains filters, sorters and other binding
				 *        related information for the table.
				 * @param {boolean} oControlEvent.getParameters.bindingParams.preventTableBind If set to <code>true</code> by the listener, binding
				 *        is prevented
				 * @param {sap.ui.model.Filter[]} oControlEvent.getParameters.bindingParams.filters The combined filter array containing a set of
				 *        sap.ui.model.Filter instances of the SmartTable and SmartFilter controls; can be modified by users to influence filtering
				 * @param {sap.ui.model.Sorter[]} oControlEvent.getParameters.bindingParams.sorter An array containing a set of sap.ui.model.Sorter
				 *        instances of the SmartTable control (personalization); can be modified by users to influence sorting
				 * @since 1.26.0
				 * @public
				 */
				beforeRebindTable: {},

				/**
				 * This event is fired when display/edit button is clicked.
				 * 
				 * @since 1.28.0
				 */
				editToggled: {},

				/**
				 * This event is fired when data is received after binding. The event is fired if the binding for the table is done by the SmartTable
				 * itself.
				 * 
				 * @since 1.28.0
				 */
				dataReceived: {},

				/**
				 * This event is fired after variant management in the SmartTable has been initialized.
				 * 
				 * @since 1.28.0
				 */
				afterVariantInitialise: {},

				/**
				 * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
				 * 
				 * @since 1.28.0
				 */
				afterVariantSave: {
					parameters: {
						/**
						 * ID of the currently selected variant
						 */
						currentVariantId: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired after a variant has been applied.
				 * 
				 * @since 1.28.0
				 */
				afterVariantApply: {
					parameters: {
						/**
						 * ID of the currently selected variant
						 */
						currentVariantId: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired just before the overlay is being shown.
				 * 
				 * @name sap.ui.comp.smarttable.SmartTable#showOverlay
				 * @event
				 * @param {sap.ui.base.Event} oControlEvent
				 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
				 * @param {object} oControlEvent.getParameters
				 * @param {object} oControlEvent.getParameters.overlay The overlay object contains information related to the table's overlay
				 * @param {boolean} oControlEvent.getParameters.overlay.show If set to <code>false</code> by the listener, overlay is not shown
				 * @since 1.32.0
				 * @public
				 */
				showOverlay: {},

				/**
				 * This event is fired when an editable field, created internally by the SmartTable control, is changed.
				 * 
				 * @since 1.34.0
				 */
				fieldChange: {},

				/**
				 * This event is fired right after the full screen mode of the SmartTable control has been changed.
				 * 
				 * @since 1.46
				 */
				fullScreenToggled: {
					parameters: {
						/**
						 * If <code>true</code>, control is in full screen mode
						 */
						fullScreen: {
							type: "boolean"
						}
					}
				},
				/**
				 * This event is fired just before export is triggered.
				 * 
				 * @since 1.50
				 * @public
				 * @experimental since 1.50.0.
				 */
				beforeExport: {
					parameters: {
						/**
						 * Contains workbook.columns, dataSource and other export-related information
						 */
						exportSettings: {
							type: "object"
						}
					}
				}
			}
		},
		renderer: VBoxRenderer.render,
		constructor: function() {
			VBox.apply(this, arguments);
			this._aExistingColumns = [];
			this._aAlwaysSelect = [];
			this._oTemplate = null;
			this._createToolbar();
			// Check and parse the p13nDialog settings custom data
			this._oP13nDialogSettings = this.data("p13nDialogSettings");
			if (typeof this._oP13nDialogSettings === "string") {
				try {
					this._oP13nDialogSettings = JSON.parse(this._oP13nDialogSettings);
				} catch (e) {
					this._oP13nDialogSettings = null;
					// Invalid JSON!
				}
			}
			this._bIsFilterPanelEnabled = (this._oP13nDialogSettings && this._oP13nDialogSettings.filter) ? this._oP13nDialogSettings.filter.visible !== false : true;
			this._createTable();
		}
	});

	// **
	// * This file defines behaviour for the control,
	// */
	SmartTable.prototype.init = function() {
		sap.m.FlexBox.prototype.init.call(this);
		this.addStyleClass("sapUiCompSmartTable");
		this.setFitContainer(true);
		this._aColumnKeys = [];
		this._mLazyColumnMap = {};
	};

	SmartTable.prototype._getVariantManagementControl = function(oSmartVariantId) {
		var oSmartVariantControl = null;
		if (oSmartVariantId) {
			if (typeof oSmartVariantId === 'string') {
				oSmartVariantControl = sap.ui.getCore().byId(oSmartVariantId);
			} else {
				oSmartVariantControl = oSmartVariantId;
			}

			if (oSmartVariantControl) {
				if (!(oSmartVariantControl instanceof SmartVariantManagement)) {
					jQuery.sap.log.error("Control with the id=" + oSmartVariantId.getId ? oSmartVariantId.getId() : oSmartVariantId + " not of expected type");
					return null;
				}
			}
		}

		return oSmartVariantControl;
	};

	/**
	 * instantiates the SmartVariantManagementControl
	 * 
	 * @private
	 */
	SmartTable.prototype._createVariantManagementControl = function() {

		// Do not create variant management when it is not needed!
		if (this._oVariantManagement || (!this.getUseVariantManagement() && !this.getUseTablePersonalisation()) || !this.getPersistencyKey()) {
			return;
		}

		// always create VariantManagementControl, in case it is not used, it will take care of persisting the personalisation
		// without visualization

		var oPersInfo = new sap.ui.comp.smartvariants.PersonalizableInfo({
			type: "table",
			keyName: "persistencyKey",
			dataSource: "TODO"
		});

		oPersInfo.setControl(this);

		var sSmartVariantId = this.getSmartVariant();
		if (sSmartVariantId) {
			this._oVariantManagement = this._getVariantManagementControl(sSmartVariantId);
		} else if (this._oSmartFilter && this._oSmartFilter.data("pageVariantPersistencyKey")) {
			sSmartVariantId = this._oSmartFilter.getSmartVariant();
			if (sSmartVariantId) {
				this._oVariantManagement = this._getVariantManagementControl(sSmartVariantId);
			}
		} else {
			this._oVariantManagement = new SmartVariantManagement(this.getId() + "-variant", {
				showShare: true
			});
		}

		if (this._oVariantManagement) {
			this._oVariantManagement.addPersonalizableControl(oPersInfo);

			// Current variant could have been set already (before initialise) by the SmartVariant, in case of GLO/Industry specific variant
			// handling
			this._oVariantManagement.attachSave(this._variantSaved, this);
			this._oVariantManagement.attachAfterSave(this._variantAfterSave, this);

			this._oVariantManagement.initialise(this._variantInitialised, this);
		}

	};

	SmartTable.prototype._variantInitialised = function() {
		if (!this._oCurrentVariant) {
			this._oCurrentVariant = "STANDARD";
		}
		this.fireAfterVariantInitialise();
		/*
		 * If VariantManagement is disabled (no LRep connectivity) trigger the binding
		 */
		if (this._oVariantManagement && !this._oVariantManagement.getEnabled()) {
			this._checkAndTriggerBinding();
		}
	};

	SmartTable.prototype._variantSaved = function() {
		if (this._oPersController) {
			this._oPersController.setPersonalizationData(this._oCurrentVariant);
		}
	};

	SmartTable.prototype._variantAfterSave = function() {
		this.fireAfterVariantSave({
			currentVariantId: this.getCurrentVariantId()
		});
	};

	SmartTable.prototype.setUseExportToExcel = function(bUseExportToExcel) {
		if (bUseExportToExcel === this.getUseExportToExcel()) {
			return;
		}
		this.setProperty("useExportToExcel", bUseExportToExcel, true);
		if (this.bIsInitialised && this._oToolbar) {
			this._createToolbarContent();
		}
	};

	SmartTable.prototype.setExportType = function(sExportType) {
		if (sExportType === this.getExportType()) {
			return;
		}
		this.setProperty("exportType", sExportType, true);
		if (this.bIsInitialised && this._oToolbar) {
			this._createToolbarContent();
		}
	};

	SmartTable.prototype.setUseTablePersonalisation = function(bUseTablePersonalisation) {
		this.setProperty("useTablePersonalisation", bUseTablePersonalisation, true);
	};

	SmartTable.prototype.setShowTablePersonalisation = function(bShowTablePersonalisation) {
		this.setProperty("showTablePersonalisation", bShowTablePersonalisation, true);
		if (this._oTablePersonalisationButton) {
			this._oTablePersonalisationButton.setVisible(bShowTablePersonalisation);
		}
	};

	SmartTable.prototype.setUseVariantManagement = function(bUseVariantManagement) {
		this.setProperty("useVariantManagement", bUseVariantManagement, true);
		if (this._oPersController) {
			this._oPersController.setResetToInitialTableState(!bUseVariantManagement);
		}
	};

	SmartTable.prototype.setShowVariantManagement = function(bShowVariantManagement) {
		this.setProperty("showVariantManagement", bShowVariantManagement, true);
		if (this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
			this._oVariantManagement.setVisible(bShowVariantManagement);
			// Hide ToolbarSeparator if VariantManagement button is hidden.
			if (this._oSeparator) {
				this._oSeparator.setVisible(bShowVariantManagement);
			}
		}
	};

	SmartTable.prototype.setToolbarStyleClass = function(sStyleClass) {
		this.setProperty("toolbarStyleClass", sStyleClass, true);
	};

	SmartTable.prototype.setCustomToolbar = function(oCustomToolbar) {
		if (this._oCustomToolbar) {
			this.removeItem(this._oCustomToolbar);
		}

		this._oCustomToolbar = oCustomToolbar;
	};

	SmartTable.prototype.getCustomToolbar = function() {
		return this._oCustomToolbar;
	};

	SmartTable.prototype.setHeader = function(sText) {
		var sOldText = this.getProperty("header"), bPreventUpdateContent;
		this.setProperty("header", sText, true);
		if (this.bIsInitialised && this._oToolbar) {
			// Update Toolbar content to show/hide separator only if text changes from empty to some value -or- from some value to empty
			// else there could be a re-render triggered on the inner table!
			bPreventUpdateContent = (!sOldText === !sText);
			if (!bPreventUpdateContent) {
				this._createToolbarContent();
			} else {
				this._refreshHeaderText();
			}
		}
	};

	SmartTable.prototype.setShowRowCount = function(bShow) {
		this.setProperty("showRowCount", bShow, true);
		this._refreshHeaderText();
	};

	SmartTable.prototype.setShowFullScreenButton = function(bShowFullScreenButton) {
		this.setProperty("showFullScreenButton", bShowFullScreenButton, true);
		if (this._oFullScreenButton) {
			this._oFullScreenButton.setVisible(bShowFullScreenButton);
		}
	};

	SmartTable.prototype.setEditTogglable = function(bEditTogglable) {
		this.setProperty("editTogglable", bEditTogglable, true);
		if (this._oEditButton) {
			this._oEditButton.setVisible(bEditTogglable);
		}
	};

	SmartTable.prototype.setEditable = function(bEdit) {
		this.setProperty("editable", bEdit, true);
		// Update local EditModel's property
		if (this._oEditModel) {
			this._oEditModel.setProperty("/editable", bEdit);
		}
		if (this._oEditButton) {
			this._oEditButton.setIcon(bEdit ? "sap-icon://display" : "sap-icon://edit");
		}
		// update keyboard handling for sap.m.Table
		if (this._isMobileTable && this._oTable.setKeyboardMode) {
			this._oTable.setKeyboardMode(bEdit ? "Edit" : "Navigation");
		}
	};

	SmartTable.prototype.setDemandPopin = function(bDemandPopin) {
		var bOldValue = this.getDemandPopin();
		if (bOldValue === bDemandPopin) {
			return;
		}

		this.setProperty("demandPopin", bDemandPopin, true);

		if (this.bIsInitialised) {
			if (bDemandPopin) {
				this._updateColumnsPopinFeature();
			} else {
				this._deactivateColumnsPopinFeature();
			}
		}
	};

	/**
	 * sets the header text
	 * 
	 * @private
	 */
	SmartTable.prototype._refreshHeaderText = function() {
		if (!this._headerText) {
			return;
		}

		var sText = this.getHeader();
		this._headerText.setVisible(!!sText);
		if (this.getShowRowCount()) {
			var iRowCount = parseInt(this._getRowCount(true), 10);
			jQuery.sap.require("sap.ui.core.format.NumberFormat");
			var sValue = sap.ui.core.format.NumberFormat.getFloatInstance().format(iRowCount);

			sText += " (" + sValue + ")";
		}

		this._headerText.setText(sText);
	};

	/**
	 * creates the fullscreen button and adds it into toolbar
	 */
	SmartTable.prototype._addFullScreenButton = function() {
		// always remove content first
		if (this._oFullScreenButton) {
			this._oToolbar.removeContent(this._oFullScreenButton);
		}
		if (this.getShowFullScreenButton()) {
			if (!this._oFullScreenButton) {
				this._oFullScreenButton = new OverflowToolbarButton(this.getId() + "-btnFullScreen", {
					press: function() {
						this._toggleFullScreen(!this.bFullScreen);
					}.bind(this)
				});
			}
			this._renderFullScreenButton();
			this._oToolbar.addContent(this._oFullScreenButton);
		}
	};
	/**
	 * creates the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._createToolbar = function() {
		var oCustomToolbar = null;
		if (!this._oToolbar) {
			oCustomToolbar = this.getCustomToolbar();
			if (oCustomToolbar) {
				this._oToolbar = oCustomToolbar;
			} else {
				this._oToolbar = new OverflowToolbar({
					design: sap.m.ToolbarDesign.Transparent
				});
				this._oToolbar.addStyleClass("sapUiCompSmartTableToolbar");
				if (this.getToolbarStyleClass()) {
					this._oToolbar.addStyleClass(this.getToolbarStyleClass());
				}
			}
			this._oToolbar.setLayoutData(new sap.m.FlexItemData({
				shrinkFactor: 0
			}));
		}
	};
	/**
	 * Toggles between fullscreen and normal view mode
	 * 
	 * @param {boolean} bValue - the new value of FullScreen
	 * @param {boolean} bForced - whether setting FullScreen is forced
	 * @private
	 */
	SmartTable.prototype._toggleFullScreen = function(bValue, bForced) {
		if (!this._oFullScreenButton || (bValue === this.bFullScreen && !bForced)) {
			return;
		}

		this.bFullScreen = bValue;

		if (!this._oFullScreenUtil) {
			this._oFullScreenUtil = sap.ui.requireSync("sap/ui/comp/util/FullScreenUtil");
		}
		this._oFullScreenUtil.toggleFullScreen(this, this.bFullScreen, this._oFullScreenButton, this._toggleFullScreen.bind(this, false));

		this._renderFullScreenButton();
		// Fire the fullScreen Event
		this.fireFullScreenToggled({
			fullScreen: bValue
		});
	};

	/**
	 * Renders the look and feel of the full screen button
	 */
	SmartTable.prototype._renderFullScreenButton = function() {
		var resourceB = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp"), sText;

		sText = this.bFullScreen ? resourceB.getText("CHART_MINIMIZEBTN_TOOLTIP") : resourceB.getText("CHART_MAXIMIZEBTN_TOOLTIP");
		this._oFullScreenButton.setTooltip(sText);
		this._oFullScreenButton.setText(sText);
		this._oFullScreenButton.setIcon(this.bFullScreen ? "sap-icon://exit-full-screen" : "sap-icon://full-screen");
	};

	/**
	 * creates the toolbar content
	 * 
	 * @private
	 */
	SmartTable.prototype._createToolbarContent = function() {
		if (!this._oToolbar) {
			this._createToolbar();
		}
		// insert the items in the custom toolbar in reverse order => insert always at position 0
		this._addVariantManagementToToolbar();
		this._addSeparatorToToolbar();
		this._addHeaderToToolbar();

		// add spacer to toolbar
		this._addSpacerToToolbar();

		// First show Display/Edit icon, then Personalisation and finally Excel Export
		this._addEditTogglableToToolbar();
		this._addTablePersonalisationToToolbar();
		this._addExportToExcelToToolbar();
		this._addFullScreenButton();

		this._bToolbarInsertedIntoItems = true;
		this.insertItem(this._oToolbar, 0);
	};

	/**
	 * Adds the button to change between edit and read only mode
	 * 
	 * @private
	 */
	SmartTable.prototype._addEditTogglableToToolbar = function() {
		var sButtonLabel;
		// always remove content first
		if (this._oEditButton) {
			this._oToolbar.removeContent(this._oEditButton);
		}
		if (this.getEditTogglable()) {
			if (!this._oEditButton) {
				sButtonLabel = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("TABLE_EDITTOGGLE_TOOLTIP");
				this._oEditButton = new sap.m.OverflowToolbarButton(this.getId() + "-btnEditToggle", {
					icon: this.getEditable() ? "sap-icon://display" : "sap-icon://edit",
					text: sButtonLabel,
					tooltip: sButtonLabel,
					press: function() {
						var bEditable = this.getEditable();
						// toggle property editable and set it on the smart table
						bEditable = !bEditable;
						this.setEditable(bEditable, true);
						// notify any listeners
						this.fireEditToggled({
							editable: bEditable
						});
					}.bind(this)
				});
			}
			this._oToolbar.addContent(this._oEditButton);
		}
	};

	/**
	 * adds the header line to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addHeaderToToolbar = function() {
		// always remove content first
		if (this._headerText) {
			this._oToolbar.removeContent(this._headerText);
		}

		if (!this._headerText) {
			this._headerText = new Title(this.getId() + "-header");
			this._headerText.addStyleClass("sapMH4Style");
			this._headerText.addStyleClass("sapUiCompSmartTableHeader");
		}

		this._refreshHeaderText();
		this._oToolbar.insertContent(this._headerText, 0);
	};

	/**
	 * adds a separator between header and variantmanagement to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addSeparatorToToolbar = function() {
		// always remove content first
		if (this._oSeparator) {
			this._oToolbar.removeContent(this._oSeparator);
		}
		if (this.getHeader() && this.getUseVariantManagement() && this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
			if (!this._oSeparator) {
				this._oSeparator = new ToolbarSeparator(this.getId() + "-toolbarSeperator");
				// Hide ToolbarSeparator if VariantManagement button is hidden
				if (!this.getShowVariantManagement()) {
					this._oSeparator.setVisible(false);
				}
			}
			this._oToolbar.insertContent(this._oSeparator, 0);
			// Also set the height to 3rem (via css) when no height is explicitly specified
			if (!this._oToolbar.getHeight()) {
				this._oToolbar.addStyleClass("sapUiCompSmartTableToolbarHeight");
			}
		}
	};

	/**
	 * adds the VarientManagement to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addVariantManagementToToolbar = function() {
		if (this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
			// always remove content first
			this._oToolbar.removeContent(this._oVariantManagement);
			if (this.getUseVariantManagement()) {
				this._oToolbar.insertContent(this._oVariantManagement, 0);
				if (!this._oVariantManagement.isPageVariant()) {
					this._oVariantManagement.setVisible(this.getShowVariantManagement());
				}
			}
		}
	};

	/**
	 * adds a spacer to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addSpacerToToolbar = function() {
		var bFoundSpacer = false, aItems = this._oToolbar.getContent(), i, iLength;
		if (aItems) {
			iLength = aItems.length;
			i = 0;
			for (i; i < iLength; i++) {
				if (aItems[i] instanceof sap.m.ToolbarSpacer) {
					bFoundSpacer = true;
					break;
				}
			}
		}

		if (!bFoundSpacer) {
			this._oToolbar.addContent(new sap.m.ToolbarSpacer(this.getId() + "-toolbarSpacer"));
		}
	};

	/**
	 * adds the Table Personalisation button to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addTablePersonalisationToToolbar = function() {
		var sButtonLabel;
		// always remove content first
		if (this._oTablePersonalisationButton) {
			this._oToolbar.removeContent(this._oTablePersonalisationButton);
		}
		if (this.getUseTablePersonalisation()) {
			if (!this._oTablePersonalisationButton) {
				sButtonLabel = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("TABLE_PERSOBTN_TOOLTIP");
				this._oTablePersonalisationButton = new sap.m.OverflowToolbarButton(this.getId() + "-btnPersonalisation", {
					icon: "sap-icon://action-settings",
					text: sButtonLabel,
					tooltip: sButtonLabel,
					press: function(oEvent) {
						this._oPersController.openDialog();
					}.bind(this)
				});
				this._oTablePersonalisationButton.setVisible(this.getShowTablePersonalisation());
			}
			this._oToolbar.addContent(this._oTablePersonalisationButton);
		}
	};

	/**
	 * adds the Export to Excel button to the toolbar
	 * 
	 * @private
	 */
	SmartTable.prototype._addExportToExcelToToolbar = function() {
		// always remove content first
		if (this._oUseExportToExcel) {
			this._oToolbar.removeContent(this._oUseExportToExcel);
		}
		if (this.getUseExportToExcel() && (this._bTableSupportsExcelExport || this.getExportType() === "UI5Client")) {
			var sButtonLabel;
			if (!this._oUseExportToExcel) {
				sButtonLabel = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("TABLE_EXPORT_TEXT");
				this._oUseExportToExcel = new sap.m.OverflowToolbarButton(this.getId() + "-btnExcelExport", {
					icon: "sap-icon://excel-attachment",
					text: sButtonLabel,
					tooltip: sButtonLabel,
					press: function(oEvent) {
						if (this.getExportType() === "UI5Client") {
							this._triggerUI5ClientExport();
							return;
						}
						var fDownloadXls = function() {
							var oRowBinding = this._getRowBinding();
							var sUrl = oRowBinding.getDownloadUrl("xlsx");
							sUrl = this._removeExpandParameter(sUrl);
							// check for length of URL -> URLs longer than 2048 chars aren't supported in some browsers (e.g. Internet Explorer)
							if (sUrl && sUrl.length > 2048 && sap.ui.Device.browser.msie) {
								// thrown info to user!
								MessageBox.error(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("DOWNLOAD_TOO_COMPLEX_TEXT"));
								return;
							}
							var mExportSettings = {
								url: sUrl
							};
							// Fire event to enable export url manipulation
							this.fireBeforeExport({
								exportSettings: mExportSettings
							});
							window.open(mExportSettings.url);
						}.bind(this);

						var iRowCount = this._getRowCount();

						if (iRowCount > 10000) {
							MessageBox.confirm(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("DOWNLOAD_CONFIRMATION_TEXT", iRowCount), {
								actions: [
									MessageBox.Action.YES, MessageBox.Action.NO
								],
								onClose: function(oAction) {
									if (oAction === MessageBox.Action.YES) {
										fDownloadXls();
									}
								}
							});
						} else {
							fDownloadXls();
						}
					}.bind(this)
				});
				this._setExcelExportEnableState();
			}
			this._oToolbar.addContent(this._oUseExportToExcel);
		}
	};

	/**
	 * Triggers export via "sap.ui.export"/"Document Export Services" export functionality
	 * 
	 * @private
	 */
	SmartTable.prototype._triggerUI5ClientExport = function() {
		var oExportLibLoadPromise = sap.ui.getCore().loadLibrary("sap.ui.export", true);
		oExportLibLoadPromise.then(function() {
			var aColumns = this._oTable.getColumns(), i, iLen = aColumns.length, oColumn, oColumnData, oLabel, sPath, nWidth, sType, aSheetColumns = [];
			if (this._isMobileTable && aColumns.length) {
				aColumns = aColumns.sort(function(oCol1, oCol2) {
					return oCol1.getOrder() - oCol2.getOrder();
				});
			}
			for (i = 0; i < iLen; i++) {
				sPath = null;
				oColumn = aColumns[i];
				if (oColumn.getVisible()) {
					if (oColumn.getLeadingProperty) {
						sPath = oColumn.getLeadingProperty();
					}
					oColumnData = oColumn.data("p13nData");
					if (oColumnData) {
						if (!sPath) {
							sPath = oColumnData["leadingProperty"];
						}
					}
					if (sPath) {
						if (oColumn.getLabel) {
							oLabel = oColumn.getLabel();
						} else if (oColumn.getHeader) {
							oLabel = oColumn.getHeader();
						}
						nWidth = oColumn.getWidth().toLowerCase() || oColumnData.width || "";
						if (nWidth.indexOf("em") > 0) {
							nWidth = Math.round(parseFloat(nWidth));
						} else if (nWidth.indexOf("px") > 0) {
							nWidth = Math.round(parseInt(nWidth, 10) / 16);
						}
						sType = oColumnData.type === "numeric" ? "number" : oColumnData.type;
						if (oColumnData.isCurrency) {
							sType = "currency";
						} else if (sType != "date" && ODataType.isDateOrTime(oColumnData.edmType)) {
							// set type as expected by excel for OData specific Date/Time fields
							sType = ODataType.getDefaultValueTypeName(oColumnData.edmType);
							if (sType === "DateTimeOffset") {
								sType = "DateTime";
							}
						}
						aSheetColumns.push({
							columnId: oColumn.getId(),
							property: sPath,
							width: nWidth,
							label: (oLabel && oLabel.getText) ? oLabel.getText() : sPath,
							textAlign: oColumn.getHAlign(),
							type: sType,
							unitProperty: sType === "currency" ? oColumnData.unit : null,
							displayUnit: sType === "currency",
							precision: oColumnData.precision,
							scale: oColumnData.scale
						});
					}
				}
			}
			var oRowBinding = this._getRowBinding();
			var oModel = this.getModel();
			var sFileName = this.getHeader();
			var iCount = this._getRowCount();
			var mExportSettings = {
				workbook: {
					columns: aSheetColumns
				},
				dataSource: {
					type: "odata",
					dataUrl: oRowBinding.getDownloadUrl && oRowBinding.getDownloadUrl("json"),
					serviceUrl: oModel.sServiceUrl,
					headers: oModel.getHeaders(),
					count: iCount,
					useBatch: oModel.bUseBatch
				},
				fileName: sFileName
			};
			// Event to enable user modification of excel settings
			this.fireBeforeExport({
				exportSettings: mExportSettings
			});
			sap.ui.require([
				"sap/ui/export/Spreadsheet"
			], function(Spreadsheet) {
				new Spreadsheet(mExportSettings).build();
			});
		}.bind(this));
	};

	/**
	 * removes the given Url's expand parameter
	 * 
	 * @param {string} sUrl the original url
	 * @private
	 * @returns {string} the resolved url string
	 */
	SmartTable.prototype._removeExpandParameter = function(sUrl) {
		var sFinalUrl = sUrl.replace(new RegExp("([\\?&]\\$expand=[^&]+)(&?)"), function(result, match1, match2) {
			return match2 ? match1.substring(0, 1) : "";
		});
		return sFinalUrl;
	};

	/**
	 * gets table's row count
	 * 
	 * @param {Boolean} bConsiderTotal whether to consider total
	 * @private
	 * @returns {int} the row count
	 */
	SmartTable.prototype._getRowCount = function(bConsiderTotal) {
		var oRowBinding = this._getRowBinding();

		if (!oRowBinding) {
			return 0;
		}

		var iRowCount = 0;
		if (bConsiderTotal && oRowBinding.getTotalSize) {
			iRowCount = oRowBinding.getTotalSize();
		} else {
			iRowCount = oRowBinding.getLength();
		}

		if (iRowCount < 0 || iRowCount === "0") {
			iRowCount = 0;
		}

		return iRowCount;
	};

	/**
	 * disables the export to excel button if no data is present, otherwise enables it
	 * 
	 * @private
	 */
	SmartTable.prototype._setExcelExportEnableState = function() {
		if (this._oUseExportToExcel) {
			var iRowCount = this._getRowCount();
			this._oUseExportToExcel.setEnabled(iRowCount > 0);
		}
	};

	/**
	 * creates the personalization controller if not yet done
	 * 
	 * @private
	 */
	SmartTable.prototype._createPersonalizationController = function() {
		if (this._oPersController || !this.getUseTablePersonalisation()) {
			return;
		}

		var oSettings = this._oP13nDialogSettings;

		oSettings = this._setIgnoreFromPersonalisationToSettings(oSettings);

		jQuery.sap.require("sap.ui.comp.personalization.Controller");
		this._oPersController = new sap.ui.comp.personalization.Controller({
			table: this._oTable,
			columnKeys: this._aColumnKeys,
			setting: oSettings,
			resetToInitialTableState: !this.getUseVariantManagement(),
			beforePotentialTableChange: this._beforePersonalisationModelDataChange.bind(this),
			afterPotentialTableChange: this._afterPersonalisationModelDataChange.bind(this),
			afterP13nModelDataChange: this._personalisationModelDataChange.bind(this),
			requestColumns: this._personalisationRequestColumns.bind(this)
		});
	};

	/**
	 * adds the ignoreFromPersonalisation fields to the given setting
	 * 
	 * @param {object} oSettings the former settings object
	 * @private
	 * @returns {object} the changed settings object
	 */
	SmartTable.prototype._setIgnoreFromPersonalisationToSettings = function(oSettings) {
		var aIgnoreFields = PersonalizationUtil.createArrayFromString(this.getIgnoreFromPersonalisation());
		if (aIgnoreFields.length) {
			if (!oSettings) {
				oSettings = {};
			}

			var fSetArray = function(sSubName) {
				if (!oSettings[sSubName]) {
					oSettings[sSubName] = {};
				}
				oSettings[sSubName].ignoreColumnKeys = aIgnoreFields;
			};

			fSetArray("filter");
			fSetArray("sort");
			fSetArray("group");
			fSetArray("columns");
		}
		return oSettings;
	};

	/**
	 * returns the row/items binding of the currently used internal table
	 * 
	 * @private
	 * @returns {sap.ui.model.Binding} the row/items binding
	 */
	SmartTable.prototype._getRowBinding = function() {
		if (this._oTable) {
			return this._oTable.getBinding(this._sAggregation);
		}
	};

	/**
	 * The entity set name from OData metadata, with which the table should be bound to
	 * 
	 * @param {string} sEntitySetName The entity set
	 * @public
	 */
	SmartTable.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
		this._initialiseMetadata();
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the table controls.
	 * 
	 * @private
	 */
	SmartTable.prototype.propagateProperties = function() {
		VBox.prototype.propagateProperties.apply(this, arguments);
		this._initialiseMetadata();
	};
	/**
	 * Initialises the OData metadata necessary to create the table
	 * 
	 * @private
	 */
	SmartTable.prototype._initialiseMetadata = function() {
		if (!this.bIsInitialised) {
			ODataModelUtil.handleModelInit(this, this._onMetadataInitialised);
		}
	};

	/**
	 * Called once the necessary Model metadata is available
	 * 
	 * @private
	 */
	SmartTable.prototype._onMetadataInitialised = function() {
		this._bMetaModelLoadAttached = false;
		if (!this.bIsInitialised) {
			this._createTableProvider();
			if (this._oTableProvider) {
				this._aTableViewMetadata = this._oTableProvider.getTableViewMetadata();
				if (this._aTableViewMetadata) {
					if (!this._isMobileTable && this.getDemandPopin()) {
						this.setDemandPopin(false);
						jQuery.sap.log.error("use SmartTable property 'demandPopin' only  with responsive table, property has been set to false");
					}

					// Indicates the control is initialised and can be used in the initialise event/otherwise!
					this.bIsInitialised = true;
					this._bTableSupportsExcelExport = this._oTableProvider.getSupportsExcelExport();
					this._listenToSmartFilter();
					this._createVariantManagementControl(); // creates VariantMngmntCtrl if useVariantManagement OR useTablePersonalisation is true.
					// Control is only added to toolbar if useVariantManagement is set otherwise it acts as
					// hidden persistance helper
					this._createToolbarContent();
					this._aAlwaysSelect = this._oTableProvider.getRequestAtLeastFields();
					this._createContent();
					this._createPersonalizationController();
					// Create a local JSONModel to handle editable switch
					this._oEditModel = new JSONModel({
						editable: this.getEditable()
					});
					// Set the local model on the SmartTable
					this.setModel(this._oEditModel, "sm4rtM0d3l");

					this.fireInitialise();
					// Trigger initial binding if no Variant exists -or- if it is already initialised
					if (!this._oVariantManagement || (this._oVariantManagement && this._bVariantInitialised)) {
						this._checkAndTriggerBinding();
					}
				}
			}
		}
	};

	/**
	 * Check if control needs to be bound and trigger binding accordingly.
	 * 
	 * @private
	 */
	SmartTable.prototype._checkAndTriggerBinding = function() {
		if (!this._bAutoBindingTriggered) {
			this._bAutoBindingTriggered = true;
			if (this.getEnableAutoBinding()) {
				if (this._oSmartFilter) {
					this._oSmartFilter.search();
				} else {
					this._reBindTable();
				}
			}
		}
	};

	/**
	 * Creates an instance of the table provider
	 * 
	 * @private
	 */
	SmartTable.prototype._createTableProvider = function() {
		var oModel, sEntitySetName, sIgnoredFields;
		sEntitySetName = this.getEntitySet();
		sIgnoredFields = this.getIgnoredFields();
		oModel = this.getModel();

		if (oModel && sEntitySetName) {
			if (this._aExistingColumns.length) {
				if (sIgnoredFields) {
					sIgnoredFields += "," + this._aExistingColumns.toString();
				} else {
					sIgnoredFields = this._aExistingColumns.toString();
				}
			}
			this._oTableProvider = new TableProvider({
				entitySet: sEntitySetName,
				ignoredFields: sIgnoredFields,
				initiallyVisibleFields: this.getInitiallyVisibleFields(),
				isEditableTable: this.getEditable(),
				smartTableId: this.getId(),
				isAnalyticalTable: !!this._isAnalyticalTable,
				isMobileTable: !!this._isMobileTable,
				dateFormatSettings: this.data("dateFormatSettings"),
				currencyFormatSettings: this.data("currencyFormatSettings"),
				defaultDropDownDisplayBehaviour: this.data("defaultDropDownDisplayBehaviour"),
				useSmartField: this.data("useSmartField"),
				useSmartToggle: this.data("useSmartToggle"),
				skipAnnotationParse: this.data("skipAnnotationParse"),
				lineItemQualifier: this.data("lineItemQualifier"),
				presentationVariantQualifier: this.data("presentationVariantQualifier"),
				enableInResultForLineItem: this.data("enableInResultForLineItem"),
				_semanticKeyAdditionalControl: this.getAggregation("semanticKeyAdditionalControl"),
				model: oModel,
				semanticObjectController: this.getSemanticObjectController()
			});
		}
	};

	/**
	 * Listen to changes on the corresponding SmartFilter (if any)
	 * 
	 * @private
	 */
	SmartTable.prototype._listenToSmartFilter = function() {
		var sSmartFilterId = null;
		// Register for SmartFilter Search
		sSmartFilterId = this.getSmartFilterId();

		this._oSmartFilter = this._findControl(sSmartFilterId);

		if (this._oSmartFilter) {
			this._oSmartFilter.attachSearch(this._reBindTable, this);
			this._oSmartFilter.attachFilterChange(this._filterChangeEvent, this);

			// Set initial empty text only if a valid SmartFilter is found
			this._setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_DATA"));
		}
	};

	SmartTable.prototype._filterChangeEvent = function() {
		if (this._isTableBound() && this._oSmartFilter && !this._oSmartFilter.getLiveMode() && !this._oSmartFilter.isDialogOpen()) {
			this._showOverlay(true);
		}
	};

	/**
	 * sets the ShowOverlay property on the inner table, fires the ShowOverlay event
	 * 
	 * @param {boolean} bShow true to display the overlay, otherwise false
	 * @private
	 */
	SmartTable.prototype._showOverlay = function(bShow) {
		if (bShow) {
			var oOverlay = {
				show: true
			};
			this.fireShowOverlay({
				overlay: oOverlay
			});
			bShow = oOverlay.show;
		}

		this._oTable.setShowOverlay(bShow);
	};

	/**
	 * searches for a certain control by its ID
	 * 
	 * @param {string} sId the control's ID
	 * @returns {sap.ui.core.Control} The control found by the given Id
	 * @private
	 */
	SmartTable.prototype._findControl = function(sId) {
		var oResultControl, oView;
		if (sId) {
			// Try to get SmartFilter from Id
			oResultControl = sap.ui.getCore().byId(sId);

			// Try to get SmartFilter from parent View!
			if (!oResultControl) {
				oView = this._getView();

				if (oView) {
					oResultControl = oView.byId(sId);
				}
			}
		}

		return oResultControl;
	};

	/**
	 * searches for the controls view
	 * 
	 * @returns {sap.ui.core.mvc.View} The found parental View
	 * @private
	 */
	SmartTable.prototype._getView = function() {
		if (!this._oView) {
			var oObj = this.getParent();
			while (oObj) {
				if (oObj instanceof sap.ui.core.mvc.View) {
					this._oView = oObj;
					break;
				}
				oObj = oObj.getParent();
			}
		}
		return this._oView;
	};

	/**
	 * This can be used to trigger binding on the table used in the SmartTable
	 * 
	 * @param {boolean} bForceRebind - force bind call to be triggered on the inner table
	 * @protected
	 */
	SmartTable.prototype.rebindTable = function(bForceRebind) {
		this._reBindTable(null, bForceRebind);
	};

	/**
	 * Re-binds the table
	 * 
	 * @param {object} mEventParams - the event parameters
	 * @param {boolean} bForceRebind - force bind call to be triggered on the table
	 * @private
	 */
	SmartTable.prototype._reBindTable = function(mEventParams, bForceRebind) {
		var oTableBinding, sTableBindingPath, mTablePersonalisationData, i, iLen, aSmartFilters, aProcessedFilters = [], aFilters, oExcludeFilters, sRequestAtLeastFields, aAlwaysSelect, aSelect, mSelectExpand, aExpand, aSorters, mParameters = {}, mBindingParams = {
			preventTableBind: false
		};

		mTablePersonalisationData = this._getTablePersonalisationData() || {};
		aFilters = mTablePersonalisationData.filters;
		oExcludeFilters = mTablePersonalisationData.excludeFilters;
		aSorters = mTablePersonalisationData.sorters;

		// Get Filters and parameters from SmartFilter
		if (this._oSmartFilter) {
			aSmartFilters = this._oSmartFilter.getFilters();
			mParameters = this._oSmartFilter.getParameters() || {};
		}

		// If filters from SmartFilter exist --> process them first with SmartTable exclude filters
		// since we need to manually AND multiple multi filters!
		if (aSmartFilters && aSmartFilters.length) {
			if (oExcludeFilters) {
				aProcessedFilters = [
					new sap.ui.model.Filter([
						aSmartFilters[0], oExcludeFilters
					], true)
				];
			} else {
				aProcessedFilters = aSmartFilters;
			}
		} else if (oExcludeFilters) {
			aProcessedFilters = [
				oExcludeFilters
			];
		}
		// Combine the resulting processed filters with SmartTable include filters
		if (aFilters) {
			aFilters = aProcessedFilters.concat(aFilters);
		} else {
			aFilters = aProcessedFilters;
		}

		sRequestAtLeastFields = this.getRequestAtLeastFields();
		if (sRequestAtLeastFields) {
			aAlwaysSelect = sRequestAtLeastFields.split(",");
		} else {
			aAlwaysSelect = [];
		}
		aAlwaysSelect = aAlwaysSelect.concat(this._aAlwaysSelect);
		mSelectExpand = this._getVisibleColumnPaths();
		aSelect = mSelectExpand["select"];
		// handle fields that shall always be selected
		if (!aSelect || !aSelect.length) {
			aSelect = aAlwaysSelect;
		} else {
			iLen = aAlwaysSelect.length;
			for (i = 0; i < iLen; i++) {
				if (aSelect.indexOf(aAlwaysSelect[i]) < 0) {
					aSelect.push(aAlwaysSelect[i]);
				}
			}
		}
		if (this._sSelectForGroup && aSelect.indexOf(this._sSelectForGroup) < 0) {
			aSelect.push(this._sSelectForGroup);
		}
		if (aSelect.length) {
			mParameters["select"] = aSelect.toString();

			// Expand handling for navigationProperties
			aExpand = mSelectExpand["expand"];
			if (aExpand.length) {
				mParameters["expand"] = aExpand.join(",");
			}
		}

		// Enable batch requests (used by AnalyticalTable)
		mParameters["useBatchRequests"] = true;

		if (!aSorters) {
			aSorters = [];
		}

		mBindingParams.filters = aFilters;
		mBindingParams.sorter = aSorters;
		mBindingParams.parameters = mParameters;
		mBindingParams.length = undefined;
		mBindingParams.startIndex = undefined;
		// fire event to enable user modification of certain binding options (Ex: Filters)
		this.fireBeforeRebindTable({
			bindingParams: mBindingParams
		});

		if (!mBindingParams.preventTableBind) {
			aSorters = mBindingParams.sorter;
			aFilters = mBindingParams.filters;
			mParameters = mBindingParams.parameters;
			aSelect = mBindingParams.parameters["select"];
			if (!aSelect || !aSelect.length) {
				MessageBox.error(sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_COLS"), {
					styleClass: (this.$() && this.$().closest(".sapUiSizeCompact").length) ? "sapUiSizeCompact" : ""
				});
				return;
			}
			sTableBindingPath = this.getTableBindingPath() || ("/" + this.getEntitySet());

			// Reset Suppress refresh
			if (this._oTable.resumeUpdateAnalyticalInfo) {
				// resumeUpdateAnalyticalInfo forces binding change if not explicitly set to false
				this._oTable.resumeUpdateAnalyticalInfo(true, false);
			}
			this._bDataLoadPending = true;
			this._bIgnoreChange = false; // if a 2nd request is sent while the 1st one is in progress the dataReceived event may not be fired!
			// Check if table has to be forcefully bound again!
			if (this._bForceTableUpdate) {
				bForceRebind = true;
				// Reset force update
				this._bForceTableUpdate = false;
			}
			// Only check if binding exists, if table is not being forcefully rebound
			if (!bForceRebind) {
				oTableBinding = this._oTable.getBinding(this._sAggregation);
				if (oTableBinding && oTableBinding.mParameters) {
					// Check if binding needs to be redone!
					// Evaluate to true if:
					// binding parameters change -or- custom binding parameters change -or- if length, startIndex or tableBindingPath change!
					bForceRebind = !(jQuery.sap.equal(mParameters, oTableBinding.mParameters, true) && jQuery.sap.equal(mParameters.custom, oTableBinding.mParameters.custom) && !mBindingParams.length && !mBindingParams.startIndex && sTableBindingPath === oTableBinding.getPath());
				}
			}
			// Update No data text (once), just before triggering the binding!
			if (!this._bNoDataUpdated) {
				this._bNoDataUpdated = true;
				this._setNoDataText();
			}

			// do the binding if no binding is already present or if it is being forced!
			if (!oTableBinding || !this._bIsTableBound || bForceRebind) {
				this._oTable.bindRows({
					path: sTableBindingPath,
					filters: aFilters,
					sorter: aSorters,
					parameters: mParameters,
					length: mBindingParams.length,
					startIndex: mBindingParams.startIndex,
					template: this._oTemplate,
					events: {
						dataRequested: function() {
							this._bIgnoreChange = true;
						}.bind(this),
						dataReceived: function(mEventParams) {
							// AnalyticalBinding fires dataReceived too often/early
							if (mEventParams && mEventParams.getParameter && mEventParams.getParameter("__simulateAsyncAnalyticalBinding")) {
								return;
							}
							this._bIgnoreChange = false;
							this._onDataLoadComplete(mEventParams, true);
							// notify any listeners about dataReceived
							this.fireDataReceived(mEventParams);
						}.bind(this),
						change: function(mEventParams) {
							if (this._bIgnoreChange) {
								return;
							}
							var sReason, bForceUpdate = false;
							sReason = (mEventParams && mEventParams.getParameter) ? mEventParams.getParameter("reason") : undefined;
							// Force update state if reason for binding change is "context" or "filter" -or- not defined
							if (!sReason || sReason === "filter" || sReason === "context") {
								bForceUpdate = true;
							}
							if (sReason === "change" || bForceUpdate) {
								this._onDataLoadComplete(mEventParams, bForceUpdate);
							}
						}.bind(this)
					}
				});
				// Flag to indicate if table was bound (data fetch triggered) at least once
				this._bIsTableBound = true;
			} else {
				oTableBinding.sort(aSorters);
				oTableBinding.filter(aFilters, "Application");
			}
			this._showOverlay(false);
		}
	};

	/**
	 * Called once data is loaded in the binding (i.e. either backend fetch or once change event is fired)
	 * 
	 * @param {object} mEventParams - the event parameters
	 * @param {boolean} bForceUpdate - force update
	 * @private
	 */
	SmartTable.prototype._onDataLoadComplete = function(mEventParams, bForceUpdate) {
		if (this._bDataLoadPending || bForceUpdate) {
			this._bDataLoadPending = false;
			this.updateTableHeaderState();
		}
	};

	/**
	 * Returns true if the inner UI5 table was bound at least once by the SmartTable -or- if binding was done by the app.
	 * 
	 * @returns {Boolean} whether the inner UI5 table is bound
	 * @private
	 */
	SmartTable.prototype._isTableBound = function() {
		if (this._bIsTableBound) {
			return true;
		}
		if (this._oTable) {
			return this._oTable.isBound(this._sAggregation);
		}
		return false;
	};

	SmartTable.prototype.setNoData = function(oNoData) {
		// overwrite the original aggregation setter, otherwise parent relationship will be destroyed when a control is set to the inner table's
		// noData aggregation
		this._oNoData = oNoData;
	};

	SmartTable.prototype.getNoData = function() {
		return this._oNoData;
	};

	/**
	 * Sets the no data text to the internal table
	 * 
	 * @param {string} sOverwriteText - optional text to set on the table
	 * @private
	 */
	SmartTable.prototype._setNoDataText = function(sOverwriteText) {
		var fSetFunction = this._oTable.setNoData;
		if (!fSetFunction) {
			fSetFunction = this._oTable.setNoDataText;
		}

		if (!fSetFunction) {
			return;
		}

		var oNoData = sOverwriteText;
		if (!oNoData) {
			oNoData = this.getNoData();
		}

		if (!oNoData) {
			oNoData = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp").getText("SMARTTABLE_NO_RESULTS");
		}

		fSetFunction.call(this._oTable, oNoData, true);
	};

	/**
	 * This can be called once data is received to update table header (count) and toolbar buttons(e.g. Excel Export) enabled state
	 * 
	 * @public
	 */
	SmartTable.prototype.updateTableHeaderState = function() {
		this._refreshHeaderText();
		this._setExcelExportEnableState();
	};

	/**
	 * Creates the content based on the metadata/configuration
	 * 
	 * @private
	 */
	SmartTable.prototype._createContent = function() {
		var i, iLen = 0, oField, aIndexedColumns, oColumn, aRemainingColumnKeys = [];

		// Sync the current table columns with the _aColumnKeys array
		if (this._aExistingColumns && this._aExistingColumns.length) {
			this._aColumnKeys = [].concat(this._aExistingColumns.reverse());
		}

		aIndexedColumns = this._parseIndexedColumns();

		iLen = this._aTableViewMetadata.length;
		for (i = 0; i < iLen; i++) {
			oField = this._aTableViewMetadata[i];
			// Fill only inititally visible columns coming from metadata
			if (oField.isInitiallyVisible) {
				this._aColumnKeys.push(oField.name);
			} else {
				aRemainingColumnKeys.push(oField.name);
			}

			// Store the non-relevant columns in a map
			if (!(oField.isInitiallyVisible || oField.inResult)) {
				this._mLazyColumnMap[oField.name] = oField;
			} else {
				oColumn = this._createColumnForField(oField);
				// Add the column to the table
				this._oTable.addColumn(oColumn);
			}
		}

		this._insertIndexedColumns(aIndexedColumns);

		// Fill remaining columns from metadata into the column keys array
		this._aColumnKeys = this._aColumnKeys.concat(aRemainingColumnKeys);

		this._updateColumnsPopinFeature();

		this._storeInitialColumnSettings();
	};

	/**
	 * Creates the column from the field metadata and returns it
	 * 
	 * @param {object} oField - the field metadata from which we create the columns
	 * @returns {object} the created column
	 * @private
	 */
	SmartTable.prototype._createColumnForField = function(oField) {
		var oColumn, sId;
		// Replace invalid chars in name (e.g: "/") with "_"
		sId = this.getId() + "-" + oField.name.replace(/[^A-Za-z0-9_.:-]+/g, "_");
		oColumn = this._createColumn(oField, sId);
		// Mark field as created
		oField.isColumnCreated = true;
		// Set the persoData - relevant for personalisation
		oColumn.data("p13nData", {
			columnKey: oField.name,
			leadingProperty: oField.name, // used to fetch data, by adding this to $select param of OData request
			additionalProperty: oField.additionalProperty, // additional data to fetch in $select
			navigationProperty: oField.navigationProperty, // navigationProperty that has to be expanded in $expand
			sortProperty: oField.sortable ? oField.name : undefined,
			filterProperty: oField.filterable ? oField.name : undefined,
			fullName: oField.hasValueListAnnotation ? oField.fullName : null,
			type: oField.filterType,
			maxLength: oField.maxLength,
			precision: oField.precision,
			scale: oField.scale,
			align: oField.align,
			edmType: oField.type,
			isCurrency: oField.isCurrencyField,
			unit: oField.unit,
			width: oField.width,
			aggregationRole: oField.aggregationRole
		});

		if (oField.filterable && oColumn.setFilterProperty) {
			oColumn.setFilterProperty(oField.name);
		}

		if (oField.sortable && oColumn.setSortProperty) {
			oColumn.setSortProperty(oField.name);
		}

		this._registerContentTemplateEvents(oField.template);

		return oColumn;
	};

	/**
	 * searches for columns which contains a columnIndex custom data property. Removes those columns from the table and returns them
	 * 
	 * @returns {array} the found columns together with their index
	 * @private
	 */
	SmartTable.prototype._parseIndexedColumns = function() {
		var i, iLength, oColumn, aIndexedColumns, oCustomData, sIndex, sColumnKey, iIndex, oTemplateCell;
		var aColumns = this._oTable.getColumns();
		var aCells = null;
		if (this._oTemplate && this._oTemplate.getCells) {
			aCells = this._oTemplate.getCells();
		}

		if (!aColumns) {
			return null;
		}

		aIndexedColumns = [];
		iLength = aColumns.length;

		for (i = 0; i < iLength; i++) {
			oColumn = aColumns[i];
			oCustomData = oColumn.data("p13nData");
			sIndex = null;
			sColumnKey = null;
			if (oCustomData) {
				sIndex = oCustomData.columnIndex;
				sColumnKey = oCustomData.columnKey;
			}
			iIndex = -1;
			if (sIndex !== null && sIndex !== undefined) {
				iIndex = parseInt(sIndex, 10);
			}
			if (!isNaN(iIndex) && iIndex > -1) {
				if (aCells) {
					oTemplateCell = aCells[i];
					this._oTemplate.removeCell(oTemplateCell);
				} else {
					oTemplateCell = null;
				}
				// Keep in sync with table - remove the columns from existing column array
				this._aColumnKeys.splice(i - aIndexedColumns.length, 1);

				aIndexedColumns.push({
					index: iIndex,
					columnKey: sColumnKey,
					column: oColumn,
					template: oTemplateCell
				});

				this._oTable.removeColumn(oColumn);
			}
		}

		aIndexedColumns.sort(function(col1, col2) {
			return col1.index - col2.index;
		});

		return aIndexedColumns;
	};

	/**
	 * inserts columns containing an index back to the table
	 * 
	 * @param {Array} aIndexedColumns - an array containing objects with index and columns
	 * @private
	 */
	SmartTable.prototype._insertIndexedColumns = function(aIndexedColumns) {
		var i, iLength, oColumn;

		if (!aIndexedColumns) {
			return;
		}

		iLength = aIndexedColumns.length;
		for (i = 0; i < iLength; i++) {
			oColumn = aIndexedColumns[i];
			// Keep in sync with table - add column at the specified location
			this._aColumnKeys.splice(oColumn.index, 0, oColumn.columnKey);
			// we keep also invisible columns in order not to loose information on the index within the table
			this._oTable.insertColumn(oColumn.column, oColumn.index);
			if (oColumn.template) {
				this._oTemplate.insertCell(oColumn.template, oColumn.index);
			}
		}
	};

	/**
	 * on sap.m.Table, this function activates the popin feature for the visible columns
	 * 
	 * @private
	 */
	SmartTable.prototype._updateColumnsPopinFeature = function() {
		if (!this._isMobileTable || !this.getDemandPopin()) { // popin only available on mobile table
			return;
		}

		var aColumns = this._oTable.getColumns();
		if (!aColumns) {
			return;
		}

		// get only visible columns
		aColumns = aColumns.filter(function(col) {
			return col.getVisible();
		});

		// sort columns according to their order property
		aColumns.sort(function(col1, col2) {
			return col1.getOrder() - col2.getOrder();
		});

		var oColumn, iLength = aColumns.length;

		for (var i = 0; i < iLength; i++) {
			oColumn = aColumns[i];
			if (i < 2) { // ensure always two columns
				oColumn.setDemandPopin(false);
				oColumn.setMinScreenWidth("1px");
			} else {
				oColumn.setDemandPopin(true);
				if (oColumn.getPopinDisplay() != "WithoutHeader") {
					oColumn.setPopinDisplay(sap.m.PopinDisplay.Inline);
				}
				oColumn.setMinScreenWidth((i + 1) * 10 + "rem");
			}
		}
	};

	/**
	 * stores the initial column settings
	 * 
	 * @private
	 */
	SmartTable.prototype._storeInitialColumnSettings = function() {
		this._aInitialSorters = [];
		PersonalizationUtil.createSort2Json(this._oTable, this._aInitialSorters, PersonalizationUtil.createArrayFromString(this.getIgnoreFromPersonalisation()));
	};

	/**
	 * on sap.m.Table, this function deactivates the popin feature for all columns
	 * 
	 * @private
	 */
	SmartTable.prototype._deactivateColumnsPopinFeature = function() {
		if (!this._isMobileTable) { // popin only available on mobile table
			return;
		}

		var aColumns = this._oTable.getColumns();
		if (!aColumns) {
			return;
		}

		var oColumn, iLength = aColumns.length;

		for (var i = 0; i < iLength; i++) {
			oColumn = aColumns[i];
			oColumn.setDemandPopin(false);
			oColumn.setMinScreenWidth("1px");
		}
	};

	/**
	 * registers events on the template controls which are exposed by the SmartTable
	 * 
	 * @param {sap.ui.core.Control} oTemplateControl - the control on which to register the events
	 * @private
	 */
	SmartTable.prototype._registerContentTemplateEvents = function(oTemplateControl) {
		if (oTemplateControl && oTemplateControl.attachChange) {
			oTemplateControl.attachChange(function(oEventParams) {
				this.fireFieldChange({
					changeEvent: oEventParams
				});
			}.bind(this));
		}
	};

	/**
	 * stores a list of initially created columns (if any)
	 * 
	 * @private
	 */
	SmartTable.prototype._updateInitialColumns = function() {
		var aColumns = this._oTable.getColumns(), iLen = aColumns ? aColumns.length : 0, oColumn, oColumnData, sColumnKey;
		while (iLen--) {
			sColumnKey = null;
			oColumn = aColumns[iLen];
			// Retrieve path from the property
			if (oColumn) {
				oColumnData = oColumn.data("p13nData");
				if (typeof oColumnData === "string") {
					try {
						oColumnData = JSON.parse(oColumnData);
					} catch (e) {
						// Invalid JSON
					}
					// Set back the object for faster access later
					if (oColumnData) {
						oColumn.data("p13nData", oColumnData);
					}
				}
				if (oColumnData) {
					sColumnKey = oColumnData["columnKey"];
				}
				if (sColumnKey) {
					this._aExistingColumns.push(sColumnKey);
				}
			}
		}
	};

	/**
	 * gets the array of visible column path that is used to create the select query
	 * 
	 * @private
	 * @returns {object} Map containing array of column paths to be selected and expanded
	 */
	SmartTable.prototype._getVisibleColumnPaths = function() {
		var mResult = {}, aSelect = [], aExpand = [], aColumns = this._oTable.getColumns(), i, iLen = aColumns ? aColumns.length : 0, oColumn, oColumnData, sPath, sAdditionalPath, sExpandPath;

		var fExtractAndInsertPathToArray = function(sPath, aArray) {
			var iPathLen, aPath;
			if (sPath) {
				aPath = sPath.split(",");
				iPathLen = aPath.length;
				// extract and add the additional paths if they don't already exist
				while (iPathLen--) {
					sPath = aPath[iPathLen];
					if (sPath && aArray.indexOf(sPath) < 0) {
						aArray.push(sPath);
					}
				}
			}
		};

		for (i = 0; i < iLen; i++) {
			oColumn = aColumns[i];
			sPath = null;
			if (oColumn.getVisible()) {
				if (oColumn.getLeadingProperty) {
					sPath = oColumn.getLeadingProperty();
				}

				oColumnData = oColumn.data("p13nData");
				if (oColumnData) {
					if (!sPath) {
						sPath = oColumnData["leadingProperty"];
					}
					sAdditionalPath = oColumnData["additionalProperty"];
					sExpandPath = oColumnData["navigationProperty"];
				}

				if (sPath && aSelect.indexOf(sPath) < 0) {
					aSelect.push(sPath);
				}
				// Check if additionalPath contains an array of fields
				fExtractAndInsertPathToArray(sAdditionalPath, aSelect);

				// Check if additionalPath contains an array of fields
				fExtractAndInsertPathToArray(sExpandPath, aExpand);
			}
		}
		mResult["select"] = aSelect;
		mResult["expand"] = aExpand;
		return mResult;
	};

	/**
	 * Creates a table based on the configuration, if necessary. This also prepares the methods to be used based on the table type.
	 * 
	 * @private
	 */
	SmartTable.prototype._createTable = function() {
		var aContent = this.getItems(), iLen = aContent ? aContent.length : 0, oTable, sId;
		this._sAggregation = "rows";
		// Check if a Table already exists in the content (Ex: from view.xml)
		while (iLen--) {
			oTable = aContent[iLen];
			if (oTable instanceof Table || oTable instanceof ResponsiveTable) {
				break;
			}
			oTable = null;
		}

		// If a Table exists determine its type else create one based on the tableType property!
		if (oTable) {
			this._oTable = oTable;
			if (oTable instanceof AnalyticalTable) {
				this._isAnalyticalTable = true;
			} else if (oTable instanceof ResponsiveTable) {
				this._isMobileTable = true;
				// get the item template from the view
				this._oTemplate = (oTable.getItems() && oTable.getItems().length > 0) ? oTable.getItems()[0] : new sap.m.ColumnListItem();
				oTable.removeAllItems();
			} else if (oTable instanceof TreeTable) {
				this._isTreeTable = true;
			}
			// If a table already exists --> get the list of columns to ignore
			this._updateInitialColumns();
		} else {
			sId = this.getId() + "-ui5table";
			// Create table based on tableType
			if (this.getTableType() === "AnalyticalTable") {
				this._isAnalyticalTable = true;
				this._oTable = new AnalyticalTable(sId, {
					enableCustomFilter: true
				});
			} else if (this.getTableType() === "ResponsiveTable") {
				this._isMobileTable = true;
				this._oTable = new ResponsiveTable(sId, {
					growing: true
				});
				this._oTemplate = new sap.m.ColumnListItem();
			} else if (this.getTableType() === "TreeTable") {
				this._isTreeTable = true;
				this._oTable = new TreeTable(sId, {
					selectionMode: sap.ui.table.SelectionMode.MultiToggle
				});
			} else {
				this._oTable = new Table(sId, {
					selectionMode: sap.ui.table.SelectionMode.MultiToggle
				});
			}

			if (this._oTable.setVisibleRowCountMode) {
				this._oTable.setVisibleRowCountMode(sap.ui.table.VisibleRowCountMode.Auto);
			}

			this.insertItem(this._oTable, 2);
		}
		if (!this._oTable.getLayoutData()) {
			// Checking if Table is of type sap.m.Table and visibleRowCountMode is not set to Auto
			// Then baseSize is set to auto. This check is to ensure corrent rendering of SmartTable in IE and Safari
			if (this._oTable instanceof sap.m.Table || (this._oTable.getVisibleRowCountMode && this._oTable.getVisibleRowCountMode() !== sap.ui.table.VisibleRowCountMode.Auto)) {
				this._oTable.setLayoutData(new sap.m.FlexItemData({
					growFactor: 1,
					baseSize: "auto"
				}));
			} else {
				// baseSize="0%" for tables that are not of type sap.m.Table
				this._oTable.setLayoutData(new sap.m.FlexItemData({
					growFactor: 1,
					baseSize: "0%"
				}));
			}
		}
		// Set ariaLabelledBy on the inner UI5 table
		if (this._oTable.addAriaLabelledBy) {
			this._oTable.addAriaLabelledBy(this.getId() + "-header");
		}
		this._oTable.addStyleClass("sapUiCompSmartTableInnerTable");

		this._oTable.setEnableBusyIndicator(true);
		this._oTable.setBusyIndicatorDelay(100);

		if (this._oTable.setEnableCustomFilter) {
			this._oTable.setEnableCustomFilter(this.getEnableCustomFilter());
		}

		// Always disable Column Visiblilty menu item
		if (this._oTable.setShowColumnVisibilityMenu) {
			this._oTable.setShowColumnVisibilityMenu(false);
		}

		if (this._oTable.getEnableCustomFilter && this._oTable.getEnableCustomFilter() && this._bIsFilterPanelEnabled) {
			// disable the cell filter if custom filter is enabled
			if (this._oTable.setEnableCellFilter) {
				this._oTable.setEnableCellFilter(false);
			}
			if (this._oTable.attachCustomFilter) {
				this._oTable.attachCustomFilter(this._showTableFilterDialog.bind(this));
			}
		}

		// Replace the prototype methods to suit the table being used!
		if (this._isAnalyticalTable) {
			this._createColumn = this._createAnalyticalColumn;
		} else if (this._isMobileTable) {
			this._sAggregation = "items";
			this._createColumn = this._createMobileColumn;
			// map bindItems to bindRows for Mobile Table to enable reuse of rebind mechanism
			this._oTable.bindRows = this._oTable.bindItems;
		}

		if (!this._isMobileTable) {
			this._oTable.attachEvent("_rowsUpdated", function() {
				this._setExcelExportEnableState();
			}, this);
		}
		// Always enable the better scroll behaviour - so that scroll/data request only happens once scrollbar is released
		if (this._oTable._setLargeDataScrolling) {
			this._oTable._setLargeDataScrolling(true);
		}
	};

	/**
	 * returns the internally used table object
	 * 
	 * @public
	 * @returns {object} the table
	 */
	SmartTable.prototype.getTable = function() {
		return this._oTable;
	};

	/**
	 * Shows the filter dialog via the Personalisation controller
	 * 
	 * @param {object} oEvent The event parameters
	 * @private
	 */
	SmartTable.prototype._showTableFilterDialog = function(oEvent) {
		if (this._oPersController) {
			this._oPersController.openDialog({
				filter: {
					visible: true,
					payload: {
						column: oEvent.getParameter("column")
					}
				}
			});
		}
	};

	/**
	 * Creates and returns a Column that can be added to the table, based on the metadata provided by the TableProvider
	 * 
	 * @param {object} oField The column's metadata
	 * @param {string} sId The id to be set on the column
	 * @private
	 * @returns {object} the column that is created
	 */
	SmartTable.prototype._createColumn = function(oField, sId) {
		var oColumn;
		oColumn = new Column(sId, {
			autoResizable: true,
			hAlign: oField.align,
			width: oField.width,
			visible: oField.isInitiallyVisible,
			label: new Label(sId + "-header", {
				textAlign: oField.align,
				text: oField.label
			}),
			sorted: oField.sorted,
			sortOrder: oField.sortOrder,
			tooltip: oField.quickInfo,
			showSortMenuEntry: oField.sortable,
			showFilterMenuEntry: oField.filterable && this._bIsFilterPanelEnabled,
			name: oField.fieldName,
			template: oField.template
		});
		return oColumn;
	};

	/**
	 * Creates and returns an AnalyticalColumn that can be added to the AnalyticalTable, based on the metadata provided by the TableProvider
	 * 
	 * @param {object} oField The column's metadata
	 * @param {string} sId The id to be set on the column
	 * @private
	 * @returns {object} the column that is created
	 */
	SmartTable.prototype._createAnalyticalColumn = function(oField, sId) {
		var oColumn;
		// Add a special style class to make currency fields bold in sum/total row
		if (oField.isCurrencyField && oField.template.addStyleClass) {
			oField.template.addStyleClass("sapUiCompCurrencyBold");
		}
		oColumn = new AnalyticalColumn(sId, {
			autoResizable: true,
			hAlign: oField.align,
			width: oField.width,
			visible: oField.isInitiallyVisible,
			inResult: oField.inResult,
			label: new Label(sId + "-header", {
				textAlign: oField.align,
				text: oField.label
			}),
			tooltip: oField.quickInfo,
			sorted: oField.sorted,
			sortOrder: oField.sortOrder,
			grouped: oField.grouped,
			showIfGrouped: oField.grouped,
			showSortMenuEntry: oField.sortable,
			showFilterMenuEntry: oField.filterable && this._bIsFilterPanelEnabled,
			summed: oField.summed,
			leadingProperty: oField.name,
			template: oField.template
		});
		return oColumn;
	};

	/**
	 * Creates and returns a MobileColumn that can be added to the mobile table, based on the metadata provided by the TableProvider
	 * 
	 * @param {object} oField The column's metadata
	 * @param {string} sId The id to be set on the column
	 * @private
	 * @returns {object} the column that is created
	 */
	SmartTable.prototype._createMobileColumn = function(oField, sId) {
		var oColumn;
		oColumn = new Column1(sId, {
			hAlign: oField.align,
			visible: oField.isInitiallyVisible,
			header: new Text(sId + "-header", {
				textAlign: oField.align,
				text: oField.label,
				tooltip: oField.quickInfo
			}),
			tooltip: oField.quickInfo,
			width: oField.isImageURL ? "3em" : undefined
		});

		if (this._oTemplate) {
			this._oTemplate.addCell(oField.template);
		}
		return oColumn;
	};

	/**
	 * Interface function for SmartVariantManagement control, returns the current used variant data
	 * 
	 * @public
	 * @returns {object} The currently set variant
	 */
	SmartTable.prototype.fetchVariant = function() {
		if (this._oCurrentVariant === "STANDARD" || this._oCurrentVariant === null) {
			return {};
		}

		return this._oCurrentVariant;
	};

	/**
	 * Interface function for SmartVariantManagement control, sets the current variant. <b>Note:</b> If an application default variant exists, then
	 * all other variants are extended from this application default variant.
	 * 
	 * @param {object} oVariantJSON The variants json
	 * @param {string} sContext Describes the context in which the apply was executed
	 * @public
	 */
	SmartTable.prototype.applyVariant = function(oVariantJSON, sContext) {

		this._oCurrentVariant = oVariantJSON;
		if (this._oCurrentVariant === "STANDARD") {
			this._oCurrentVariant = null;
		}

		PersonalizationUtil.recoverPersonalisationDateData(this._oCurrentVariant, this._oTable);

		// Context STANDARD here specifies that this is a custom application variant for Globalisation/Industry!
		// This would be called just once in the beginning!
		if (sContext === "STANDARD") {
			this._oApplicationDefaultVariant = this._oCurrentVariant;
		}
		// if an application default variant exists --> extend all the other variants based on this!
		// Changes to the industry should be taken over --> but first we only take over non conflicting changes
		// if the user already has some changes --> just use those
		if (this._oApplicationDefaultVariant && !sContext) {
			this._oCurrentVariant = jQuery.extend(true, {}, this._oApplicationDefaultVariant, oVariantJSON);
		}

		// Set instance flag to indicate that we are currently in the process of applying the changes
		this._bApplyingVariant = true;
		// Suppress refresh to prevent backend roundtrips
		if (this._oTable._setSuppressRefresh) {
			this._oTable._setSuppressRefresh(true);
		}

		if (this._oPersController) {
			if (this._oCurrentVariant === null || jQuery.isEmptyObject(this._oCurrentVariant)) {
				this._oPersController.resetPersonalization(sap.ui.comp.personalization.ResetType.ResetFull);
			} else {
				this._oPersController.setPersonalizationData(this._oCurrentVariant);
			}
		}
		// Clear apply variant flag!
		this._bApplyingVariant = false;

		this.fireAfterVariantApply({
			currentVariantId: this.getCurrentVariantId()
		});
	};

	/**
	 * Interface function for SmartVariantManagement control. It indicates, that the variant management is fully initialized.
	 * 
	 * @internal
	 */
	SmartTable.prototype.variantsInitialized = function() {
		this._bVariantInitialised = true;
		this._checkAndTriggerBinding();
	};

	/**
	 * Event handler fired when a column is requested by Personalisation/VariantManagement
	 * 
	 * @param {object} oEvent The event parameter
	 */
	SmartTable.prototype._personalisationRequestColumns = function(oEvent) {
		var aColumnKeys = oEvent.getParameter("columnKeys"), sColumnKey, i, iLength, oField, oColumn, oColumnKey2ColumnMap = {};

		iLength = aColumnKeys.length;
		for (i = 0; i < iLength; i++) {
			sColumnKey = aColumnKeys[i];
			oField = this._mLazyColumnMap[sColumnKey];
			if (oField) {
				oColumn = this._createColumnForField(oField);
				if (this._isMobileTable) {
					// Add the column to the table
					this._oTable.addColumn(oColumn);
				}
				oColumnKey2ColumnMap[oField.name] = oColumn;
			}
		}

		this._oPersController.addColumns(oColumnKey2ColumnMap);
	};

	/**
	 * eventhandler fired before personalisation changes are applied to the table
	 * 
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartTable.prototype._beforePersonalisationModelDataChange = function(oEvent) {
		// Suppress refresh to prevent backend roundtrips
		if (this._oTable.suspendUpdateAnalyticalInfo) {
			this._oTable.suspendUpdateAnalyticalInfo();
		}
	};

	/**
	 * eventhandler fired after personalisation changes are potentially applied to the table. Event will be fired before the event
	 * "afterP13nModelDataChange"
	 * 
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartTable.prototype._afterPersonalisationModelDataChange = function(oEvent) {
		this._updateColumnsPopinFeature();
	};

	/**
	 * eventhandler for personalisation changed
	 * 
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartTable.prototype._personalisationModelDataChange = function(oEvent) {
		this._oCurrentVariant = oEvent.getParameter("persistentData");
		var oChangeInfo = oEvent.getParameter("changeType");
		var changeStatus = this._getChangeStatus(oChangeInfo);

		if (changeStatus === sap.ui.comp.personalization.ChangeType.Unchanged) {
			return;
		}

		if (!this._bApplyingVariant) {
			if (!this.getUseVariantManagement()) {
				this._persistPersonalisation();
			} else if (this._oVariantManagement) {
				this._oVariantManagement.currentVariantSetModified(true);
			}
		}

		if (changeStatus === sap.ui.comp.personalization.ChangeType.ModelChanged && this._isTableBound()) {
			if (oChangeInfo && oChangeInfo.columns === sap.ui.comp.personalization.ChangeType.ModelChanged) {
				this._bForceTableUpdate = true;
			}
			// if table was bound already -and:
			// If a SmartFilter is associated with SmartTable - trigger search on the SmartFilter
			if (this._oSmartFilter) {
				this._oSmartFilter.search();
			} else {
				// Rebind Table only if data was set on it once or no smartFilter is attached!
				this._reBindTable(null);
			}
		}
	};

	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 * 
	 * @private
	 * @param {object} oChangeInfo The change info given by the personalization controller
	 * @returns {sap.ui.comp.personalization.ChangeType} the merged change status
	 */
	SmartTable.prototype._getChangeStatus = function(oChangeInfo) {
		if (!oChangeInfo) {
			// change info not provided return ModelChanged to indicate that we need to update everything internally
			return sap.ui.comp.personalization.ChangeType.ModelChanged;
		}

		if (oChangeInfo.sort === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.filter === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.columns === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.group === sap.ui.comp.personalization.ChangeType.ModelChanged) {
			// model has changed and was not applied to table
			return sap.ui.comp.personalization.ChangeType.ModelChanged;
		}

		if (oChangeInfo.sort === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.filter === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.columns === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.group === sap.ui.comp.personalization.ChangeType.TableChanged) {
			// change was already applied to table
			return sap.ui.comp.personalization.ChangeType.TableChanged;
		}

		return sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 * 
	 * @private
	 * @returns {object} current variant's filter and sorting options
	 */
	SmartTable.prototype._getTablePersonalisationData = function() {
		if (!this._oCurrentVariant) {
			return null;
		}

		var aSorters = [], aFilters = [], aExcludeFilters = [], oExcludeFilters, oGroupItem, oGroupSorter, aSortData, oColumn, oColumnData, sGroupPath, sPath, sColumnsText = "", bIsTimeField;
		// Clear the fields that are part of $select due to grouping (sap.m.Table)
		this._sSelectForGroup = null;
		// group handling
		if (this._isMobileTable && this._oCurrentVariant.group && this._oCurrentVariant.group.groupItems) {
			oGroupItem = this._oCurrentVariant.group.groupItems[0];
			oColumn = this._getColumnByKey(oGroupItem.columnKey);
			if (oColumn) {
				sColumnsText = oColumn.getHeader().getText();
			}
			sPath = this._getPathFromColumnKeyAndProperty(oGroupItem.columnKey, "sortProperty");
			// Path can be null if the variant data is invalid/contains only invalid information
			if (sPath) {
				// Initialise the GroupPath to a new variable as it is being used in the formatter function
				sGroupPath = sPath;
				oGroupSorter = new sap.ui.model.Sorter(sGroupPath, oGroupItem.operation === "GroupDescending", function(oContext) {
					var sKey = oContext.getProperty(sGroupPath);
					return {
						key: sKey,
						text: sColumnsText ? sColumnsText + " : " + sKey : sKey
					};
				});
				// Set the group field to select path so that it can be added to $select
				this._sSelectForGroup = sGroupPath;
				aSorters.push(oGroupSorter);
			}
		}

		// sort handling
		if (this._oCurrentVariant.sort) {
			aSortData = this._oCurrentVariant.sort.sortItems;
		} else {
			aSortData = this._aInitialSorters;
		}

		if (aSortData) {
			aSortData.forEach(function(oModelItem) {
				var bDescending = oModelItem.operation === "Descending";
				sPath = this._getPathFromColumnKeyAndProperty(oModelItem.columnKey, "sortProperty");
				// Path can be null if the variant data is invalid/contains only invalid information
				if (sPath) {
					if (oGroupSorter && oGroupSorter.sPath === sPath) {
						oGroupSorter.bDescending = bDescending;
					} else {
						aSorters.push(new sap.ui.model.Sorter(sPath, bDescending));
					}
				}
			}, this);
		}

		// Filter Handling
		if (this._oCurrentVariant.filter) {
			this._oCurrentVariant.filter.filterItems.forEach(function(oModelItem) {
				var oValue1 = oModelItem.value1, oValue2 = oModelItem.value2;
				// Filter path has be re-calculated below
				sPath = null;
				bIsTimeField = false;
				oColumn = this._getColumnByKey(oModelItem.columnKey);
				if (oColumn) {
					if (oColumn.getFilterProperty) {
						sPath = oColumn.getFilterProperty();
					}
					oColumnData = oColumn.data("p13nData");
					if (oColumnData) {
						bIsTimeField = oColumnData.type === "time";
						if (!sPath) {
							sPath = oColumnData["filterProperty"];
						}
					}
				}
				// Path can be null if the variant data is invalid/contains only invalid information
				if (sPath) {
					if (bIsTimeField) {
						if (oValue1 instanceof Date) {
							oValue1 = FormatUtil.getEdmTimeFromDate(oValue1);
						}
						if (oValue2 instanceof Date) {
							oValue2 = FormatUtil.getEdmTimeFromDate(oValue2);
						}
					} else if (oValue1 instanceof Date && this._oTableProvider && this._oTableProvider.getIsUTCDateHandlingEnabled()) {
						oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
						oValue2 = oValue2 ? FilterProvider.getDateInUTCOffset(oValue2) : oValue2;
					}
					if (oModelItem.exclude) {
						aExcludeFilters.push(new sap.ui.model.Filter(sPath, FilterOperator.NE, oValue1));
					} else {
						aFilters.push(new sap.ui.model.Filter(sPath, oModelItem.operation, oValue1, oValue2));
					}
				}
			}, this);

			if (aExcludeFilters.length) {
				oExcludeFilters = new sap.ui.model.Filter(aExcludeFilters, true);
			}
		}

		return {
			filters: aFilters,
			excludeFilters: oExcludeFilters,
			sorters: aSorters
		};
	};

	/**
	 * Returns the column for the given column key
	 * 
	 * @param {string} sColumnKey - the column key for the required column
	 * @returns {object} The found column or null
	 * @private
	 */
	SmartTable.prototype._getColumnByKey = function(sColumnKey) {
		var aColumns, oColumn, iLength, i, oCustomData;
		if (this._oTable) {
			aColumns = this._oTable.getColumns();
			iLength = aColumns.length;
			for (i = 0; i < iLength; i++) {
				oColumn = aColumns[i];
				oCustomData = oColumn.data("p13nData");
				if (oCustomData && oCustomData.columnKey === sColumnKey) {
					return oColumn;
				}
			}
		}

		return null;
	};

	/**
	 * Retrieves the path for the specified property and column key from the array of table columns
	 * 
	 * @param {string} sColumnKey - the column key specified on the table
	 * @param {string} sProperty - the property path that needs to be retrieved from the column
	 * @returns {string} The path that can be used by sorters, filters etc.
	 * @private
	 */
	SmartTable.prototype._getPathFromColumnKeyAndProperty = function(sColumnKey, sProperty) {
		var sPath = null, oColumn, oColumnData;
		oColumn = this._getColumnByKey(sColumnKey);

		// Retrieve path from the property
		if (oColumn) {
			if (sProperty == "sortProperty" && oColumn.getSortProperty) {
				sPath = oColumn.getSortProperty();
			} else if (sProperty == "filterProperty" && oColumn.getFilterProperty) {
				sPath = oColumn.getFilterProperty();
			} else if (sProperty == "leadingProperty" && oColumn.getLeadingProperty) {
				sPath = oColumn.getLeadingProperty();
			}

			if (!sPath) {
				oColumnData = oColumn.data("p13nData");
				if (oColumnData) {
					sPath = oColumnData[sProperty];
				}
			}
		}

		return sPath;
	};

	/**
	 * triggers (hidden) VariantManagementControl to persist personalisation this function is called in case no VariantManagementControl is used
	 * 
	 * @private
	 */
	SmartTable.prototype._persistPersonalisation = function() {
		if (this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
			this._oVariantManagement.getVariantsInfo(function(aVariants) {
				var bOverwrite, sPersonalisationVariantKey = null;
				if (aVariants && aVariants.length > 0) {
					sPersonalisationVariantKey = aVariants[0].key;
				}
				bOverwrite = sPersonalisationVariantKey !== null;
				this._oVariantManagement.fireSave({
					name: "Personalisation",
					global: false,
					overwrite: bOverwrite,
					key: sPersonalisationVariantKey,
					def: true
				});
			}.bind(this));
		}
	};

	/**
	 * returns the id of the currently selected variant.
	 * 
	 * @public
	 * @returns {string} id of the currently selected variant
	 */
	SmartTable.prototype.getCurrentVariantId = function() {
		return this._oVariantManagement ? this._oVariantManagement.getCurrentVariantId() : "";
	};

	/**
	 * Set the current variant according to the sVariantId. In case an empty string or null or undefined was passed the STANDARD will be set. STANDARD
	 * will also be set, in case the passed sVariantId could not be found. In case neither a flexibility variant, nor the content for the standard
	 * variant could not be obtained, nor the personalisable control obtained nothing will be executed/changed
	 * 
	 * @public
	 * @param {string} sVariantId id of the currently selected variant
	 */
	SmartTable.prototype.setCurrentVariantId = function(sVariantId) {
		if (this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
			this._oVariantManagement.setCurrentVariantId(sVariantId);
		} else {
			jQuery.sap.log.error("sap.ui.comp.smarttable.SmartTable.prototype.setCurrentVariantId: VariantManagement does not exist, or is a page variant");
		}
	};

	/**
	 * Checks whether the control is initialised
	 * 
	 * @returns {boolean} returns whether control is already initialised
	 * @protected
	 */
	SmartTable.prototype.isInitialised = function() {
		return !!this.bIsInitialised;
	};

	SmartTable.prototype._aAvailablePanels = [
		"Columns", "Sort", "Filter", "Group"
	];

	/**
	 * Opens the desired panel of the personalization dialog.<br>
	 * <i>Note:</i> Calling this for panels that are globally hidden (E.g. manually by the application, or due to unavailability of functionality)
	 * leads to an empty dialog being shown.
	 * 
	 * @param {string} sPanel The desired panel; the value is either "Columns", "Sort", "Filter" or "Group"
	 * @public
	 * @since 1.48.0
	 */
	SmartTable.prototype.openPersonalisationDialog = function(sPanel) {
		if (!sPanel || this._aAvailablePanels.indexOf(sPanel) < 0) {
			jQuery.sap.log.warning("sap.ui.comp.smarttable.SmartTable.prototype.openPersonalisationDialog: " + sPanel + " is not a valid panel!");
			return;
		}
		if (this._oPersController) {
			var oPanel = {};
			oPanel[sPanel.toLowerCase()] = {
				visible: true
			};
			this._oPersController.openDialog(oPanel);
		}
	};

	/**
	 * Cleans up the control
	 * 
	 * @protected
	 */
	SmartTable.prototype.exit = function() {
		var i, oField;
		// Cleanup smartFilter events as it can be used again stand-alone without being destroyed!
		if (this._oSmartFilter) {
			this._oSmartFilter.detachSearch(this._reBindTable, this);
			this._oSmartFilter.detachFilterChange(this._filterChangeEvent, this);
			this._oSmartFilter = null;
		}
		if (this._oTableProvider && this._oTableProvider.destroy) {
			this._oTableProvider.destroy();
		}
		this._oTableProvider = null;
		if (this._oPersController && this._oPersController.destroy) {
			this._oPersController.destroy();
		}
		this._oPersController = null;
		if (this._oVariantManagement) {
			this._oVariantManagement.detachSave(this._variantSaved, this);
			this._oVariantManagement.detachAfterSave(this._variantAfterSave, this);
			if (!this._oVariantManagement.isPageVariant() && this._oVariantManagement.destroy) {
				this._oVariantManagement.destroy();
			}
		}
		if (this._oFullScreenUtil) {
			this._oFullScreenUtil.cleanUpFullScreen(this);
			this._oFullScreenUtil = null;
		}
		if (this._oEditModel) {
			this._oEditModel.destroy();
		}

		if (this._oNoData && this._oNoData.destroy) {
			this._oNoData.destroy();
		}
		this.oNoData = null;

		// Destroy template controls for fields that have not been added as columns
		if (this._aTableViewMetadata) {
			i = this._aTableViewMetadata.length;
			while (i--) {
				oField = this._aTableViewMetadata[i];
				if (oField && !oField.isColumnCreated && oField.template) {
					oField.template.destroy();
				}
			}
		}
		this._aTableViewMetadata = null;

		this._oEditModel = null;
		this._oVariantManagement = null;
		this._oCurrentVariant = null;
		this._oApplicationDefaultVariant = null;
		this._aExistingColumns = null;
		this._mLazyColumnMap = null;
		this._aColumnKeys = null;
		this._aAlwaysSelect = null;
		this._oCustomToolbar = null;
		// Destroy the toolbar if it is not already inserted into items; else it will automatically be destroyed
		if (this._oToolbar && !this._bToolbarInsertedIntoItems) {
			this._oToolbar.destroy();
		}
		this._oToolbar = null;
		if (this._oUseExportToExcel && !this.getUseExportToExcel()) {
			this._oUseExportToExcel.destroy();
		}
		this._oUseExportToExcel = null;
		this._oTablePersonalisationButton = null;
		this._oP13nDialogSettings = null;
		// Destroy the template always as templateShareable=true (default =1)!
		if (this._oTemplate) {
			this._oTemplate.destroy();
		}
		this._oTemplate = null;
		this._oView = null;
		this._oTable = null;
	};

	return SmartTable;

}, /* bExport= */true);

}; // end of sap/ui/comp/smarttable/SmartTable.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.providers.ChartProvider') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// -----------------------------------------------------------------------------
// Generates the view metadata required for SmartTable using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.comp.providers.ChartProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/providers/ChartProvider",[
	'jquery.sap.global', 'sap/ui/comp/odata/MetadataAnalyser', 'sap/ui/comp/odata/ChartMetadata', 'sap/ui/comp/odata/ODataType', './ControlProvider', 'sap/ui/core/format/DateFormat'
], function(jQuery, MetadataAnalyser, ChartMetadata, ODataType, ControlProvider, DateFormat) {
	"use strict";

	/**
	 * Constructs a class to generate the view/data model metadata for the SmartChart from the SAP-Annotations metadata
	 *
	 * @constructor
	 * @experimental This module is only for internal/experimental use!
	 * @public
	 * @param {object} mPropertyBag - PropertyBag having members model, entitySet
	 */
	var ChartProvider = function(mPropertyBag) {
		if (mPropertyBag) {
			this._oParentODataModel = mPropertyBag.model;
			this.sEntitySet = mPropertyBag.entitySet;
			this._sIgnoredFields = mPropertyBag.ignoredFields;
			this._bSkipAnnotationParse = mPropertyBag.skipAnnotationParse === "true";
			this._sChartQualifier = mPropertyBag.chartQualifier;
			this._sPresentationVariantQualifier = mPropertyBag.presentationVariantQualifier;
			this._oDefaultDropDownDisplayBehaviour = mPropertyBag.defaultDropDownDisplayBehaviour;
			try {
				this._oDateFormatSettings = mPropertyBag.dateFormatSettings ? JSON.parse(mPropertyBag.dateFormatSettings) : undefined;
			} catch (ex) {
				// Invalid JSON provided!
			}

			if (mPropertyBag.chartLibrary) {
				ChartMetadata.feedWithChartLibrary(mPropertyBag.chartLibrary);
			}
		}

		this._aODataFieldMetadata = [];
		this._oChartViewMetadata = null;
		this._oChartDataPointMetadata = null;
		this._aIgnoredFields = [];
		this._oMetadataAnalyser = new MetadataAnalyser(this._oParentODataModel);
		this._intialiseMetadata();
	};

	/**
	 * Initializes the necessary chart metadata
	 *
	 * @private
	 */
	ChartProvider.prototype._intialiseMetadata = function() {
		var oChartViewField, aChartViewMetadata = [], oField, i, iLen = 0;
		this._aODataFieldMetadata = this._oMetadataAnalyser.getFieldsByEntitySetName(this.sEntitySet);
		this._sFullyQualifiedEntityTypeName = this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(this.sEntitySet);

		if (!this._bSkipAnnotationParse) {
			this._oPresentationVariant = this._oMetadataAnalyser.getPresentationVariantAnnotation(this._sFullyQualifiedEntityTypeName, this._sPresentationVariantQualifier);
			if (this._oPresentationVariant && this._oPresentationVariant.chartAnnotation) {
				this._oChartAnnotation = this._oPresentationVariant.chartAnnotation;
			} else {
				this._oChartAnnotation = this._oMetadataAnalyser.getChartAnnotation(this._sFullyQualifiedEntityTypeName, this._sChartQualifier);
			}
		}
		if (!this._oDefaultDropDownDisplayBehaviour) {
			this._oDefaultDropDownDisplayBehaviour = this._oMetadataAnalyser.getTextArrangementValue(this._sFullyQualifiedEntityTypeName);
		}

		this._generateIgnoredFieldsArray();

		this._oControlProvider = new ControlProvider({
			metadataAnalyser: this._oMetadataAnalyser,
			model: this._oParentODataModel,
			fieldsMetadata: this._aODataFieldMetadata,
			dateFormatSettings: this._oDateFormatSettings,
			defaultDropDownDisplayBehaviour: this._oDefaultDropDownDisplayBehaviour,
			enableDescriptions: false,
			entitySet: this.sEntitySet
		});

		if (this._aODataFieldMetadata) {
			iLen = this._aODataFieldMetadata.length;
		}

		for (i = 0; i < iLen; i++) {
			oField = this._aODataFieldMetadata[i];
			// Ignore the fields in the ignored list -or- the one marked with visible="false" in annotation
			if (this._aIgnoredFields.indexOf(oField.name) > -1 || !oField.visible) {
				continue;
			}

			// Check if field is not a Primitive type --> only generate metadata for primitive/simple type fields
			if (oField.type.indexOf("Edm.") === 0) {
				oChartViewField = this._getFieldViewMetadata(oField);
				this._enrichWithChartViewMetadata(oField, oChartViewField);
				aChartViewMetadata.push(oField);
			}
		}

		if (this._oChartAnnotation) {
			this._oChartViewMetadata = jQuery.extend({}, this._oChartAnnotation);
			// Convert chart type to UI5 format
			this._oChartViewMetadata.chartType = ChartMetadata.getChartType(this._oChartViewMetadata.chartType);
			this._oChartViewMetadata.fields = aChartViewMetadata;
		}
	};

	ChartProvider.prototype._setAnnotationMetadata = function(oFieldViewMetadata) {
		if (oFieldViewMetadata && oFieldViewMetadata.fullName) {
			var oSemanticObjects = this._oMetadataAnalyser.getSemanticObjectsFromAnnotation(oFieldViewMetadata.fullName);
			if (oSemanticObjects) {
				oFieldViewMetadata.semanticObjects = oSemanticObjects;
			}
		}
	};

	ChartProvider.prototype._getFieldViewMetadata = function(oField) {
		var oChartViewField = this._oControlProvider.getFieldViewMetadata(oField, false);
		this._setAnnotationMetadata(oChartViewField);

		return oChartViewField;
	};

	/**
	 * Generate an array of fields that need to be ignored in the SmartChart (if any)
	 *
	 * @private
	 */
	ChartProvider.prototype._generateIgnoredFieldsArray = function() {
		if (this._sIgnoredFields) {
			this._aIgnoredFields = this._sIgnoredFields.split(",");
		}
	};

	/**
	 * Calculates additional attributes for a field
	 *
	 * @param {object} oField - OData metadata for the chart field
	 * @param {object} oViewField - view metadata for the chart field
	 * @private
	 */
	ChartProvider.prototype._enrichWithChartViewMetadata = function(oField, oViewField) {

		oField.isMeasure = oField.aggregationRole && oField.aggregationRole === "measure";
		oField.isDimension = oField.aggregationRole && oField.aggregationRole === "dimension";

		oField.dateFormatter = this._getDateFormatter(oField);

		oField.role = this._getRole(oField);

		oField.dataPoint = this._getDataPoint(oField);

		oField.filterType = oViewField.filterType;
		if (oViewField.template) {
			oField.template = oViewField.template;
		}

		if (oField.isDimension) {
			oField.displayBehaviour = oViewField.displayBehaviour;
		}

		oField.isSemanticObject = (oViewField.semanticObjects) ? true : false;

		// set the inResult from metadata
		this._setInResult(oField);
		// set the sortOrder from metadata
		this._setSortOrder(oField);
	};

	/*************************************************************************************************************************************************
	 * Determines a custom formatter from the field depending on this._oDateFormatSettings
	 *
	 * @param {object} oField - OData metadata for the entity field
	 * @return {object} a text formatter
	 * @private
	 */
	ChartProvider.prototype._getDateFormatter = function(oField) {
		var fnCustomFormatter, fnDateFormatter;

		switch (oField.type) {
			case "Edm.Date":
				fnDateFormatter = DateFormat.getDateInstance(this.oDateFormatSettings);
				break;
			case "Edm.Time":
				fnDateFormatter = DateFormat.getTimeInstance(this.oDateFormatSettings);
				break;
			case "Edm.DateTimeOffset":
			case "Edm.DateTime":
				if (oField.displayFormat == "Date") {
					fnDateFormatter = DateFormat.getDateInstance(this.oDateFormatSettings);
				} else {
					fnDateFormatter = DateFormat.getDateTimeInstance(this.oDateFormatSettings);
				}
				break;
			default:
				break;

		}

		if (fnDateFormatter) {
			fnCustomFormatter = function(timestamp) {
				var date = new Date(timestamp);
				return fnDateFormatter.format(date);
			};
		}

		return fnCustomFormatter;
	};

	/**
	 * Sets inResult on the field metadata if the field exists in the RequestAtLeast of PresentationVariant annotation
	 *
	 * @param {object} oField - OData metadata for the table field
	 * @private
	 */
	ChartProvider.prototype._setInResult = function(oField) {
		// first check if field is part of PresentationVariant-->RequestAtLeastFields
		if (this._oPresentationVariant) {
			if (this._oPresentationVariant.requestAtLeastFields && this._oPresentationVariant.requestAtLeastFields.indexOf(oField.name) > -1) {
				oField.inResult = true;
			}
		}
	};

	/**
	 * Sets sorting realted info (sorted and sortOrder) on the field metadata if the field exists in the SortOrder of PresentationVariant annotation
	 *
	 * @param {object} oField - OData metadata for the table field
	 * @private
	 */
	ChartProvider.prototype._setSortOrder = function(oField) {
		// initialize the sort Order
		oField.sorted = false;
		oField.sortOrder = "Ascending";

		var iLen;
		// first check if field is part of PresentationVariant-->SortOrder
		if (this._oPresentationVariant && this._oPresentationVariant.sortOrderFields) {
			iLen = this._oPresentationVariant.sortOrderFields.length;
			for (var i = 0; i < iLen; i++) {
				if (this._oPresentationVariant.sortOrderFields[i].name === oField.name) {
					oField.sorted = true;
					oField.sortOrder = this._oPresentationVariant.sortOrderFields[i].descending ? "Descending" : "Ascending";
					break;
				}
			}
		}
	};

	ChartProvider.prototype._unmarkTextDimensions = function(aFields, aTextDimensionNames) {
		var i, oField;

		for (i = 0; i < aFields.length; i++) {
			oField = aFields[i];

			if (oField.isDimension) {
				if (aTextDimensionNames.indexOf(oField.name) > -1) {
					oField.isDimension = false;
				}
			}
		}
	};

	/**
	 * @param {object} oField - OData metadata for the chart field
	 * @returns {string} the role
	 */
	ChartProvider.prototype._getRole = function(oField) {

		if (this._oChartAnnotation) {
			if (oField.isDimension && this._oChartAnnotation.dimensionAttributes[oField.name]) {
				return ChartMetadata.getDimensionRole(this._oChartAnnotation.dimensionAttributes[oField.name].role);
			} else if (oField.isMeasure && this._oChartAnnotation.measureAttributes[oField.name]) {
				return ChartMetadata.getMeasureRole(this._oChartAnnotation.measureAttributes[oField.name].role);
			}
		}
	};

	/**
	 * Retrieve the UI.DataPoint annotation for the chart measure.
	 *
	 * @param {oField} The metadata for the chart field
	 * @returns {string} the dataPoint
	 * @private
	 */
	ChartProvider.prototype._getDataPoint = function(oField) {
		if (this._oChartAnnotation && oField.isMeasure && this._oChartAnnotation.measureAttributes[oField.name] && this._oChartAnnotation.measureAttributes[oField.name].dataPoint) {
			var sDataPointPath = this._oChartAnnotation.measureAttributes[oField.name].dataPoint;
			var aDataPointInformation = sDataPointPath.split("#");
			var sQualifier = aDataPointInformation.length === 2 ? aDataPointInformation[1] : "";

			return this._getMeasureDataPoint(sQualifier, oField.name);
		}

		return null;
	};

	/**
	 * Gets the fields that can be added as columns.
	 *
	 * @returns {array} the table view metadata
	 * @public
	 */
	ChartProvider.prototype.getChartViewMetadata = function() {
		return this._oChartViewMetadata;
	};

	/**
	 * Get the Chart DataPoint metadata
	 *
	 * @returns {Object} the DataPoint annotation object
	 * @public
	 */
	ChartProvider.prototype.getChartDataPointMetadata = function() {
		if (!this._oChartDataPointMetadata && this._sFullyQualifiedEntityTypeName) {
			this._oChartDataPointMetadata = this._oMetadataAnalyser.getDataPointAnnotation(this._sFullyQualifiedEntityTypeName);
		}
		return this._oChartDataPointMetadata;
	};

	/**
	 * Returns the UI.DataPoint annotation of for a given qualifier
	 *
	 * @param {string} the value of the qualifier
	 * @param {string} the name of the measure field for consistency check
	 * @returns {Object} the DataPoint annotation object
	 * @private
	 */
	ChartProvider.prototype._getMeasureDataPoint = function(sQualifier, sMeasure) {
		var oChartDataPointMetadata = this.getChartDataPointMetadata();

		if (oChartDataPointMetadata) {
			var oDataPoint = null;

			// filter the correct data point
			if (sQualifier) {
				if (oChartDataPointMetadata.additionalAnnotations) {
					oDataPoint = oChartDataPointMetadata.additionalAnnotations[sQualifier];
				}
			} else {
				if (oChartDataPointMetadata.primaryAnnotation) {
					oDataPoint = oChartDataPointMetadata.primaryAnnotation;
				}
			}

			// consistency check that measure value and field
			if (oDataPoint != null && oDataPoint.Value && oDataPoint.Value.Path == sMeasure) {
				return oDataPoint;
			}

		}

		return null;
	};

	/**
	 * Returns a flag indicating whether date handling with UTC is enabled for the table.
	 *
	 * @returns {boolean} whether UTC date handling is enabled
	 * @public
	 */
	ChartProvider.prototype.getIsUTCDateHandlingEnabled = function() {
		return this._oDateFormatSettings ? this._oDateFormatSettings.UTC : false;
	};

	/**
	 * Destroys the object
	 *
	 * @public
	 */
	ChartProvider.prototype.destroy = function() {
		if (this._oMetadataAnalyser && this._oMetadataAnalyser.destroy) {
			this._oMetadataAnalyser.destroy();
		}
		this._oMetadataAnalyser = null;
		if (this._oControlProvider && this._oControlProvider.destroy) {
			this._oControlProvider.destroy();
		}
		this._oControlProvider = null;
		this._aODataFieldMetadata = null;
		this._oChartViewMetadata = null;
		this._oChartDataPointMetadata = null;
		this._sIgnoredFields = null;
		this.bIsDestroyed = true;
	};

	/**
	 * Provides the semantic coloring for the chart measure based on the UI.DataPoint annotation.
	 *
	 * @see sap.chart.ColoringType.Criticality
	 * @param {object} The UI.DataPoint annotation
	 * @return {sap.chart.ColoringType.Criticality} The semantic coloring for the chart measure
	 * @public
	 */
	ChartProvider.prototype.provideSemanticColoring = function(oDataPoint) {
		var oCriticality = {};
		if (oDataPoint.Criticality) {

			if (oDataPoint.Criticality.Path) {
				oCriticality = {
					Calculated: oDataPoint.Criticality.Path
				};
			} else {
				oCriticality = {
					Static: ChartMetadata.getCriticalityType(oDataPoint.Criticality.EnumMember)
				};
			}

		} else {
			var oThresholds = {};
			var bConstant = this._buildThresholds(oThresholds, oDataPoint.CriticalityCalculation);

			if (bConstant) {
				oCriticality = {
					ConstantThresholds: oThresholds
				};
			} else {
				oCriticality = {
					DynamicThresholds: oThresholds
				};
			}

		}

		return oCriticality;
	};

	/**
	 * Checks whether the thresholds are dynamic or constant.
	 *
	 * @param {object} the threshold skeleton
	 * @param {object} the UI.DataPoint.CriticalityCalculation annotation
	 * @returns {boolean} <code>true</code> if the threshold should be supplied as ConstantThresholds, <code>false</code> if the threshold should
	 *          be supplied as DynamicThresholds
	 * @private
	 */
	ChartProvider.prototype._buildThresholds = function(oThresholds, oCriticalityCalculation) {
		var bConstant = true;

		oThresholds.ImprovementDirection = ChartMetadata.getImprovementDirectionType(oCriticalityCalculation.ImprovementDirection.EnumMember);

		var aValidThresholds = ChartMetadata.getCriticalityThresholds();
		var iLen = aValidThresholds.length;

		var oDynamicThresholds = {
			oneSupplied: false
		// combination to check whether at least one is supplied
		};
		var oConstantThresholds = {
			oneSupplied: false
		// combination to check whether at least one is supplied
		};

		for (var i = 0; i < iLen; i++) {
			oDynamicThresholds[aValidThresholds[i]] = oCriticalityCalculation[aValidThresholds[i]] ? oCriticalityCalculation[aValidThresholds[i]].Path : undefined;
			oDynamicThresholds.oneSupplied = oDynamicThresholds.oneSupplied || oDynamicThresholds[aValidThresholds[i]];

			if (!oDynamicThresholds.oneSupplied) {
				// only consider in case no dynamic threshold is supplied
				oConstantThresholds[aValidThresholds[i]] = ChartMetadata.calculateConstantValue(oCriticalityCalculation[aValidThresholds[i]]);
				oConstantThresholds.oneSupplied = oConstantThresholds.oneSupplied || oConstantThresholds[aValidThresholds[i]];
			}
		}

		// dynamic definition shall overrule constant definition
		if (oDynamicThresholds.oneSupplied) {
			bConstant = false;

			for (var i = 0; i < iLen; i++) {
				if (oDynamicThresholds[aValidThresholds[i]]) {
					oThresholds[aValidThresholds[i]] = oDynamicThresholds[aValidThresholds[i]];
				}
			}

		} else {
			var oAggregationLevel;
			oThresholds.AggregationLevels = [];

			// check if at least one static value is supplied
			if (oConstantThresholds.oneSupplied) {

				// add one entry in the aggregation level
				oAggregationLevel = {
					VisibleDimensions: null
				};

				for (var i = 0; i < iLen; i++) {
					if (oConstantThresholds[aValidThresholds[i]]) {
						oAggregationLevel[aValidThresholds[i]] = oConstantThresholds[aValidThresholds[i]];
					}
				}

				oThresholds.AggregationLevels.push(oAggregationLevel);

			}

			// further check for ConstantThresholds
			if (oCriticalityCalculation.ConstantThresholds && oCriticalityCalculation.ConstantThresholds.length > 0) {
				for (var i = 0; i < oCriticalityCalculation.ConstantThresholds.length; i++) {
					var oAggregationLevelInfo = oCriticalityCalculation.ConstantThresholds[i];

					var aVisibleDimensions = oAggregationLevelInfo.AggregationLevel ? [] : null;

					if (oAggregationLevelInfo.AggregationLevel && oAggregationLevelInfo.AggregationLevel.length > 0) {
						for (var j = 0; j < oAggregationLevelInfo.AggregationLevel.length; j++) {
							aVisibleDimensions.push(oAggregationLevelInfo.AggregationLevel[j].PropertyPath);
						}
					}

					oAggregationLevel = {
						VisibleDimensions: aVisibleDimensions
					};

					for (var j = 0; j < iLen; j++) {
						var nValue = ChartMetadata.calculateConstantValue(oAggregationLevelInfo[aValidThresholds[j]]);
						if (nValue) {
							oAggregationLevel[aValidThresholds[j]] = nValue;
						}
					}

					oThresholds.AggregationLevels.push(oAggregationLevel);
				}
			}
		}

		return bConstant;
	};

	/**
	 * Gets the maxItems property of the UI.PresentationVariant annotation.
	 *
	 * <b>Note</b> If this property is set, the chart displays 100 items at most.
	 */
	ChartProvider.prototype.getMaxItems = function() {
		var iMaxItems = -1;

		if (this._oPresentationVariant && this._oPresentationVariant.maxItems) {
		  iMaxItems = Math.min(this._oPresentationVariant.maxItems,100);
		}

		return iMaxItems;
	};

	return ChartProvider;
}, /* bExport= */true);

}; // end of sap/ui/comp/providers/ChartProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartchart.SmartChart') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartchart.SmartChart.
jQuery.sap.declare('sap.ui.comp.smartchart.SmartChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.chart.Chart'); // unlisted dependency retained
jQuery.sap.require('sap.chart.library'); // unlisted dependency retained
jQuery.sap.require('sap.chart.data.Dimension'); // unlisted dependency retained
jQuery.sap.require('sap.chart.data.Measure'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSeparator'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBoxRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.P13nFilterItem'); // unlisted dependency retained
jQuery.sap.require('sap.viz.ui5.controls.VizTooltip'); // unlisted dependency retained
jQuery.sap.require('sap.m.SelectionDetails'); // unlisted dependency retained
jQuery.sap.require('sap.m.SelectionDetailsItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.SelectionDetailsItemLine'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartchart/SmartChart",[
	'jquery.sap.global', 'sap/ui/comp/library', 'sap/chart/Chart', 'sap/chart/library', 'sap/chart/data/Dimension', 'sap/chart/data/Measure', 'sap/m/SegmentedButton', 'sap/m/Button', 'sap/m/Text', 'sap/m/FlexItemData', 'sap/ui/core/Item', 'sap/m/OverflowToolbar', 'sap/m/OverflowToolbarButton', 'sap/m/ToolbarSeparator', 'sap/m/ToolbarDesign', 'sap/m/ToolbarSpacer', 'sap/m/VBox', 'sap/m/VBoxRenderer', 'sap/ui/comp/providers/ChartProvider', 'sap/ui/comp/smartfilterbar/FilterProvider', 'sap/ui/comp/smartvariants/SmartVariantManagement', 'sap/ui/model/Filter', 'sap/ui/model/FilterOperator', 'sap/ui/comp/personalization/Util', 'sap/ui/Device', 'sap/ui/comp/odata/ODataModelUtil', 'sap/ui/comp/odata/MetadataAnalyser', "sap/m/P13nFilterItem", "sap/viz/ui5/controls/VizTooltip", "sap/ui/comp/state/UIState", "sap/m/SelectionDetails", "sap/m/SelectionDetailsItem", "sap/m/SelectionDetailsItemLine", "sap/m/Title"
], function(jQuery, library, Chart, ChartLibrary, Dimension, Measure, SegmentedButton, Button, Text, FlexItemData, Item, OverflowToolbar, OverflowToolbarButton, ToolbarSeparator, ToolbarDesign, ToolbarSpacer, VBox, VBoxRenderer, ChartProvider, FilterProvider, SmartVariantManagement, Filter, FilterOperator, PersoUtil, Device, ODataModelUtil, MetadataAnalyser, P13nFilterItem, VizTooltip, UIState, SelectionDetails, SelectionDetailsItem, SelectionDetailsItemLine, Title) {
	"use strict";

	/**
	 * Constructor for a new smartchart/SmartChart.
	 *
	 * @param {string} [sId] ID for the new control that is generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The SmartChart control creates a chart based on OData metadata and the configuration specified. The entitySet property must be specified
	 *        to use the control. This property is used to fetch fields from OData metadata, from which the chart UI will be generated. It can also be
	 *        used to fetch the actual chart data.<br>
	 *        Based on the chartType property, this control will render the corresponding chart.<br>
	 *        <b>Note:</b> Most of the attributes are not dynamic and cannot be changed once the control has been initialized.
	 * @extends sap.m.VBox
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartchart.SmartChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartChart = VBox.extend("sap.ui.comp.smartchart.SmartChart", /** @lends sap.ui.comp.smartchart.SmartChart.prototype */
	{
		metadata: {

			library: "sap.ui.comp",
			designTime: true,
			properties: {

				/**
				 * The entity set name from which to fetch data and generate the columns.<br>
				 * <b>Note</b> This is not a dynamic property.
				 */
				entitySet: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * ID of the corresponding SmartFilter control. If specified, the SmartChart control searches for the SmartFilter control (also in the
				 * closest parent view) and attaches to the relevant events of the SmartFilter control to fetch data, show overlay etc.
				 */
				smartFilterId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be ignored in the OData metadata by the SmartChart control.<br>
				 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoredFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that must be always requested by the backend system.<br>
				 * This property is mainly meant to be used if there is no PresentationVariant annotation.<br>
				 * If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
				 * of both.<br>
				 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters. Also, setting this property
				 * during runtime, will delete the current drill-stack and lead to a loss of the drill history.
				 */
				requestAtLeastFields: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that is not shown in the personalization dialog.<br>
				 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoreFromPersonalisation: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Specifies the type of chart to be created by the SmartChart control.
				 */
				chartType: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * CSV of fields that is not shown in the list of available chart types.<br>
				 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
				 */
				ignoredChartTypes: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code>, variants are used. As a prerequisite, you need to specify the persistencyKey property.
				 */
				useVariantManagement: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * If set to <code>true</code>, personalized chart settings are defined. If you want to persist the chart personalization, you need
				 * to specify the persistencyKey property.
				 */
				useChartPersonalisation: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Specifies header text that is shown in the chart.
				 */
				header: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Key used to access personalization data.
				 */
				persistencyKey: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Retrieves or applies the current variant.
				 */
				currentVariantId: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
				 * property. This happens right after the <code>initialise</code> event has been fired.
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Specifies the path that is used during the binding of the chart. If not specified, the entitySet property is used instead. (used
				 * only if binding is established internally/automatically - See enableAutoBinding)
				 */
				chartBindingPath: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Controls the visibility of the Drill Up and Drill Down buttons.
				 */
				showDrillButtons: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Controls the visibility of the Zoom In and Zoom Out buttons.
				 *
				 * @since 1.36
				 */
				showZoomButtons: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Controls the visibility of the Navigation button
				 *
				 * @since 1.36
				 */
				showSemanticNavigationButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				// false
				},
				/**
				 * Controls the visibility of the Variant Management.
				 *
				 * @since 1.38
				 */
				showVariantManagement: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls the visibility of the chart print button.
				 *
				 * @since 1.39
				 */
				/*
				 * showPrintButton: { type: "boolean", group: "Misc", defaultValue: true // false },
				 */
				/**
				 * Controls the visibility of the chart download button.
				 *
				 * @since 1.39
				 */
				showDownloadButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},
				/**
				 * Controls the visibility of the Details button. If set to <code>true</code>, the datapoint tooltip will be disabled as the
				 * information of selected datapoints will be found in the details popover. This will also set the drill-down button to invisible.
				 *
				 * @since 1.38
				 */
				showDetailsButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Controls the visibility of the Breadcrumbs control for drilling up within the visible dimensions. If set to <code>true</code>,
				 * the toolbar header will be replaced by the Breadcrumbs control. This will also set the drill-up button to invisible.
				 *
				 * @since 1.38
				 */
				showDrillBreadcrumbs: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},
				/**
				 * Controls the visibility of the chart tooltip. If set to <code>true </code>, an instance of sap.viz.ui5.controls.VizTooltip will
				 * be created and shown when hovering over a data point.
				 *
				 * @since 1.38
				 */
				showChartTooltip: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				// false
				},
				/**
				 * Controls the visibility of the Navigation button
				 *
				 * @since 1.36
				 */
				showLegendButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Set chart's legend properties.
				 *
				 * @since 1.36
				 */
				legendVisible: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Chart selection mode. Supported values are {@link sap.chart.SelectionMode.Single} or {@link sap.chart.SelectionMode.Multi}, case
				 * insensitive, always return in upper case. Unsupported values will be ignored.
				 *
				 * @since 1.36
				 */
				selectionMode: {
					type: "sap.chart.SelectionMode",
					group: "Misc",
					defaultValue: sap.chart.SelectionMode.Multi
				},

				/**
				 * Controls the visibility of the FullScreen button.
				 *
				 * @since 1.36
				 */
				showFullScreenButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Controls the usage either of an instance of sap.viz.ui5.controls.VizTooltip or sap.viz.ui5.controls.Popover. If set to
				 * <code>true</code>, the tooltip will be displayed, the popover otherwise.
				 *
				 * @since 1.36
				 */
				useTooltip: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * Controls the visualization for chart type selection. If set to <code>true</code>, the list of available chart types will be
				 * displayed. If set to <code>false</code> and there are three or fewer available chart types, the chart types will be displayed as
				 * separate buttons in the toolbar. If there are more than three chart types, a list will be shown.
				 *
				 * @deprecated As of version 1.48.0. Setting the property to <code>false</code> will have no effect on the visualization of chart
				 *             type selection anymore. <code>SmartChart</code> will always show a list of chart types, regardless of how many are
				 *             available.
				 * @since 1.38
				 */
				useListForChartTypeSelection: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls the visibility of the chart type selection button.
				 *
				 * @since 1.48
				 */
				showChartTypeSelectionButton: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Defines the custom text that will be displayed in case no data is found for the current binding.
				 *
				 * @since 1.46
				 */
				noData: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				}
			},
			associations: {
				/**
				 * Identifies the SmartVariant control which should be used for the personalization. Will be ignored if the advanced mode is set.
				 *
				 * @since 1.38
				 */
				smartVariant: {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			aggregations: {

				/**
				 * A custom toolbar that can be specified by the user to define their own buttons, icons, etc. If this is added, the SmartChart
				 * control does not create its own toolbar, but uses this one instead. However, if default actions, such as showSemanticNavigation,
				 * showFullScreenButton etc. are set, these actions are added at the left-hand side of the toolbar.
				 */
				toolbar: {
					type: "sap.m.Toolbar",
					multiple: false
				},

				/**
				 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
				 *
				 * @since 1.36
				 */
				semanticObjectController: {
					type: "sap.ui.comp.navpopover.SemanticObjectController",
					multiple: false
				},
				/**
				 * Actions on item level which can be specified for the selection details popover.
				 *
				 * @experimental Since 1.48 since 1.48
				 */
				selectionDetailsItemActions: {
					type: "sap.ui.core.Item",
					multiple: true
				},
				/**
				 * Actions on footer level which can be specified for the selection details popover.
				 *
				 * @experimental Since 1.48 since 1.48
				 */
				selectionDetailsActions: {
					type: "sap.ui.core.Item",
					multiple: true
				},
				/**
				 * Actions on group level which can be specified for the selection details popover.
				 *
				 * @experimental Since 1.48 since 1.48
				 */
				selectionDetailsActionGroups: {
					type: "sap.ui.core.Item",
					multiple: true
				}
			},
			events: {
				/**
				 * This event is fired once the control has been initialized.
				 */
				initialise: {},

				/**
				 * This event is fired right before the <code>SmartChart</code> control triggers the binding / rebinding of the inner chart.<br>
				 * <b>Note:</b> In certain cases the inner chart triggers a rebinding by itself. In these cases, the event is not fired.
				 *
				 * @name sap.ui.comp.smartchart.SmartChart#beforeRebindChart
				 * @event
				 * @param {sap.ui.base.Event} oControlEvent
				 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
				 * @param {object} oControlEvent.getParameters
				 * @param {JSON} oControlEvent.getParameters.bindingParams The bindingParams object contains filters, sorters, and other
				 *        binding-related information for the chart
				 * @param {boolean} oControlEvent.getParameters.bindingParams.preventChartBind If set to <code>true</code> by the listener, binding
				 *        is prevented
				 * @param {sap.ui.model.Filter[]} oControlEvent.getParameters.bindingParams.filters The combined filter array containing a set of
				 *        sap.ui.model.Filter instances of the SmartChart and SmartFilter controls; can be modified by users to influence filtering
				 * @param {sap.ui.model.Sorter[]} oControlEvent.getParameters.bindingParams.sorter An array containing a set of sap.ui.model.Sorter
				 *        instances of the SmartChart control (personalization); can be modified by users to influence sorting
				 * @param {Number} oControlEvent.getParameters.bindingParams.length The maximal number of items that is displayed for the
				 *        <code>SmartChart</code> control
				 * @public
				 */
				beforeRebindChart: {

				},

				/**
				 * This event is fired when data is received after binding. This event is fired if the binding for the chart is done by the SmartChart
				 * control itself.
				 */
				dataReceived: {},

				/**
				 * This event is fired after the variant management in the SmartChart control has been initialized.
				 */
				afterVariantInitialise: {},

				/**
				 * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
				 */
				afterVariantSave: {
					parameters: {
						/**
						 * ID of the currently selected variant
						 */
						currentVariantId: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired after a variant has been applied.
				 */
				afterVariantApply: {
					parameters: {
						/**
						 * ID of the currently selected variant
						 */
						currentVariantId: {
							type: "string"
						}
					}
				},

				/**
				 * This event is fired right before the overlay is shown.
				 *
				 * @event
				 * @param {sap.ui.base.Event} oControlEvent
				 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
				 * @param {object} oControlEvent.getParameters
				 * @param {object} oControlEvent.getParameters.overlay Overlay object that contains information related to the overlay of the chart
				 * @param {boolean} oControlEvent.getParameters.overlay.show If set to code>false</code> by the listener, overlay is not shown
				 * @public
				 */
				showOverlay: {},

				/**
				 * This event is fired right after the full screen mode of the SmartChart control has been changed.
				 *
				 * @since 1.46
				 */
				fullScreenToggled: {
					parameters: {
						/**
						 * If <code>true</code> the control is in full screen mode
						 */
						fullScreen: {
							type: "boolean"
						}
					}
				},
				/**
				 * This event is fired when any action in the selection details popover is pressed.
				 *
				 * @experimental Since 1.48
				 * @since 1.48
				 */
				selectionDetailsActionPress: {
					parameters: {

						/**
						 * The action that has to be processed once the action has been pressed
						 */
						action: {
							type: "sap.ui.core.Item"
						},
						/**
						 * If the action is pressed on one of the {@link sap.m.SelectionDetailsItem items}, the parameter contains the
						 * {@link sap.ui.model.Context context} of the pressed {@link sap.m.SelectionDetailsItem item}. If a custom action or action
						 * group of the SelectionDetails popover is pressed, this parameter contains all {@link sap.ui.model.Context contexts} of the
						 * {@link sap.m.SelectionDetailsItem items}.
						 */
						itemContexts: {
							type: "sap.ui.model.Context"
						},
						/**
						 * The action level of action buttons. The available levels are Item, List and Group
						 */
						level: {
							type: "sap.m.SelectionDetailsActionLevel"
						}
					}
				},
				/**
				 * This event is fired when <code>SmartChart</code> control data changes, due to changes in the personalization dialog or drill operations.<br>
				 * The data can be changed via sorters, filters or drill-ups/drill-downs.
				 *
				 */
				chartDataChanged: {
					parameters: {
						/**
						 * Object which contains a boolean flag for dimeasure, filter, sort. If set to <code>true</code>, it has been changed.
						 */
						changeTypes: {
							type: "object"
						}
					}

				}
			}
		},

		renderer: VBoxRenderer.render
	});

	SmartChart.prototype.init = function() {
		sap.m.FlexBox.prototype.init.call(this);
		this.addStyleClass("sapUiCompSmartChart");
		this.setFitContainer(true);
		this._bUpdateToolbar = true;
		this._oChartTypeModel = null;

		this.setHeight("100%");

		var oModel = new sap.ui.model.json.JSONModel({
			items: []
		});
		this.setModel(oModel, "$smartChartTypes");

		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

		this._processResizeHandler(true);

		if (!this.getLayoutData()) {
			this.setLayoutData(new sap.m.FlexItemData({
				growFactor: 1,
				baseSize: "50em"
			}));
		}
	};

	SmartChart.prototype._getVariantManagementControl = function(oSmartVariantId) {
		var oSmartVariantControl = null;
		if (oSmartVariantId) {
			if (typeof oSmartVariantId === 'string') {
				oSmartVariantControl = sap.ui.getCore().byId(oSmartVariantId);
			} else {
				oSmartVariantControl = oSmartVariantId;
			}

			if (oSmartVariantControl) {
				if (!(oSmartVariantControl instanceof SmartVariantManagement)) {
					jQuery.sap.log.error("Control with the id=" + typeof oSmartVariantId.getId == "function" ? oSmartVariantId.getId() : oSmartVariantId + " not of expected type");
					return null;
				}
			}
		}

		return oSmartVariantControl;
	};

	/**
	 * instantiates the SmartVariantManagementControl
	 *
	 * @private
	 */
	SmartChart.prototype._createVariantManagementControl = function() {

		// Do not create variant management when it is not needed!
		if (this._oVariantManagement || (!this.getUseVariantManagement() && !this.getUseChartPersonalisation()) || !this.getPersistencyKey()) {
			return;
		}

		// always create VariantManagementControl, in case it is not used, it will take care of persisting the personalisation
		// without visualization
		var oPersInfo = new sap.ui.comp.smartvariants.PersonalizableInfo({
			type: "chart",
			keyName: "persistencyKey",
			dataSource: this.getEntitySet()
		});

		oPersInfo.setControl(this);

		var sSmartVariantId = this.getSmartVariant();
		if (sSmartVariantId) {
			this._oVariantManagement = this._getVariantManagementControl(sSmartVariantId);
		} else if (this._oSmartFilter && this._oSmartFilter.data("pageVariantPersistencyKey")) {
			sSmartVariantId = this._oSmartFilter.getSmartVariant();
			if (sSmartVariantId) {
				this._oVariantManagement = this._getVariantManagementControl(sSmartVariantId);
			}
		} else {
			this._oVariantManagement = new SmartVariantManagement(this.getId() + "-variant", {
				showShare: true
			});
		}

		if (this._oVariantManagement) {

			if (!this._oVariantManagement.isPageVariant()) {
				this._oVariantManagement.setVisible(this.getShowVariantManagement());
			}

			this._oVariantManagement.addPersonalizableControl(oPersInfo);

			// Current variant could have been set already (before initialise) by the SmartVariant, in case of GLO/Industry specific variant
			// handling
			this._oVariantManagement.attachSave(this._variantSaved, this);
			this._oVariantManagement.attachAfterSave(this._variantAfterSave, this);

			this._oVariantManagement.initialise(this._variantInitialised, this);
		}
	};

	/**
	 * event handler for variantmanagement save event
	 *
	 * @private
	 */
	SmartChart.prototype._variantInitialised = function() {
		if (!this._oCurrentVariant) {
			this._oCurrentVariant = "STANDARD";
		}
		this.fireAfterVariantInitialise();
		/*
		 * If VariantManagement is disabled (no LRep connectivity) trigger the binding
		 */
		if (this._oVariantManagement && !this._oVariantManagement.getEnabled()) {
			this._checkAndTriggerBinding();
		}
	};

	SmartChart.prototype._variantSaved = function() {
		if (this._oPersController) {
			this._oPersController.setPersonalizationData(this._oCurrentVariant);
		}
	};

	SmartChart.prototype._variantAfterSave = function() {
		this.fireAfterVariantSave({
			currentVariantId: this.getCurrentVariantId()
		});
	};

	SmartChart.prototype.setUseChartPersonalisation = function(bUseChartPersonalisation) {
		this.setProperty("useChartPersonalisation", bUseChartPersonalisation, true);
		this._bUpdateToolbar = true;
	};

	SmartChart.prototype.setUseTooltip = function(bUseTooltip) {
		this.setProperty("useTooltip", bUseTooltip, true);
		this._createTooltipOrPopover();
	};

	SmartChart.prototype._createTooltipOrPopover = function() {
		// only show tooltip, when enabled via showChartTooltip
		if (this.getUseTooltip() && this.getShowChartTooltip()) {
			// this._createTooltip();
			this._toggleChartTooltipVisibility(true);
		} else {
			this._createPopover();
		}
	};

	SmartChart.prototype._createPopover = function() {
		if (this._oChart) {
			if (!this._oPopover) {
				// assign Popover to chart
				jQuery.sap.require("sap.viz.ui5.controls.Popover");
				this._oPopover = new sap.viz.ui5.controls.Popover({});
			}
			// Make this dynamic for the setter call
			this._oPopover.connect(this._oChart.getVizUid());
		}
	};

	SmartChart.prototype._destroyPopover = function() {
		if (this._oPopover) {
			this._oPopover.destroy();
			this._oPopover = null;
		}
	};

	SmartChart.prototype.setUseVariantManagement = function(bUseVariantManagement) {
		this.setProperty("useVariantManagement", bUseVariantManagement, true);
		if (this._oPersController) {
			this._oPersController.setResetToInitialTableState(!bUseVariantManagement);
		}
		this._bUpdateToolbar = true;
	};

	SmartChart.prototype.setToolbar = function(oToolbar) {
		if (this._oToolbar) {
			this.removeItem(this._oToolbar);
		}
		this._oToolbar = oToolbar;
		this._bUpdateToolbar = true;
	};

	SmartChart.prototype.getToolbar = function() {
		return this._oToolbar;
	};

	SmartChart.prototype.setHeader = function(sText) {
		this.setProperty("header", sText, true);
		this._refreshHeaderText();
	};

	/**
	 * sets the header text
	 *
	 * @private
	 */
	SmartChart.prototype._refreshHeaderText = function() {
		if (!this._headerText) {
			this._bUpdateToolbar = true;
			return;
		}
		var sText = this.getHeader();
		this._headerText.setText(sText);
	};

	/**
	 * creates the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._createToolbar = function() {
		// If no toolbar exists --> create one
		if (!this._oToolbar) {
			this._oToolbar = new OverflowToolbar({
				design: ToolbarDesign.Transparent,
				height: "auto"
			});
			this._oToolbar.addStyleClass("sapUiCompSmartChartToolbar");
		}
		this._oToolbar.setLayoutData(new sap.m.FlexItemData({
			shrinkFactor: 0
		}));
		this.insertItem(this._oToolbar, 0);
	};

	/**
	 * creates the toolbar content
	 *
	 * @private
	 */
	SmartChart.prototype._createToolbarContent = function() {
		// insert the items in the custom toolbar in reverse order => insert always at position 0
		this._addVariantManagementToToolbar();
		this._addSeparatorToToolbar();
		this._addHeaderToToolbar();

		// this._addDrillBreadcrumbs();

		// add spacer to toolbar
		this._addSpacerToToolbar();

		this._addSemanticNavigationButton();

		this._addDetailsButton();

		// Add Drill buttons
		this._addDrillUpDownButtons();

		// Add Legend button
		this._addLegendButton();

		// Add Zoom buttons
		this._addZoomInOutButtons();

		// this._addPrintButton();

		this._addDownloadButton();

		// Add Personalisation Icon
		this._addPersonalisationToToolbar();

		// Add Fullscreen Button
		this._addFullScreenButton();

		// Add Chart Type Button
		this._addChartTypeToToolbar();

		// Seems like toolbar only contains spacer and is actually not needed - remove it
		if (this._oToolbar && (this._oToolbar.getContent().length === 0 || (this._oToolbar.getContent().length === 1 && this._oToolbar.getContent()[0] instanceof ToolbarSpacer))) {
			this.removeItem(this._oToolbar);
			this._oToolbar.destroy();
			this._oToolbar = null;
		}
	};

	SmartChart.prototype.setShowVariantManagement = function(bFlag) {
		this.setProperty("showVariantManagement", bFlag);

		if (this._oVariantManagement && this._oVariantManagement.isPageVariant()) {
			this._oVariantManagement.setVisible(bFlag);
		}
	};

	SmartChart.prototype.setShowDetailsButton = function(bFlag) {

		this.setProperty("showDetailsButton", bFlag);

		// Handle visibility of details button and chart tooltips
		if (this._oSelectionDetails) {
			this._oSelectionDetails.setVisible(bFlag);
			// Btn only exists together with selectionDetails control
			if (this._oDrillDownTextButton) {
				this._oDrillDownTextButton.setVisible(bFlag);
			}
			this._setBehaviorTypeForDataSelection();
		}
		// Handle visibility of drill up button
		if (this._oDrillDownButton) {
			this._oDrillDownButton.setVisible(!bFlag);
		}
	};

	SmartChart.prototype.setShowChartTypeSelectionButton = function(bFlag) {
		this.setProperty("showChartTypeSelectionButton", bFlag);

		if (this._oChartTypeButton) {
			this._oChartTypeButton.setVisible(bFlag);
		}
	};

	SmartChart.prototype.setShowDownloadButton = function(bFlag) {
		this.setProperty("showDownloadButton", bFlag);
		// Handle the visibility of the download button
		if (this._oDownloadButton) {
			this._oDownloadButton.setVisible(bFlag);
		}

	};

	SmartChart.prototype.setShowDrillBreadcrumbs = function(bFlag) {

		this.setProperty("showDrillBreadcrumbs", bFlag);

		// Handle visibility of breadcrumbs
		if (this._oDrillBreadcrumbs) {
			this._oDrillBreadcrumbs.setVisible(bFlag);
		}
		// Handle visibility of drill up button
		if (this._oDrillUpButton) {
			this._oDrillUpButton.setVisible(!bFlag);
		}
	};

	SmartChart.prototype.setShowChartTooltip = function(bFlag) {
		this.setProperty("showChartTooltip", bFlag);
		this._toggleChartTooltipVisibility(bFlag);
	};

	SmartChart.prototype._setBehaviorTypeForDataSelection = function() {
		//Currently this property can only be set once during init time and is not dynamic.
		if (this.getShowDetailsButton()) {
			//If we use details button, noHoverBehavior has to be set in order to enable details event
			this._oChart.setVizProperties({
				"interaction": {
					"behaviorType": "noHoverBehavior"
				}
			});
		} else {
			//If we don't use details button, behaviorType has to be deleted again
			if (this._oChart.getVizProperties().interaction.behaviorType) {
				//Get current interaction vizProperties and delete behaviorType
				var oInteractionProps = this._oChart.getVizProperties().interaction;
				delete oInteractionProps.behaviorType;
				//Set modified interaction props on inner chart
				this._oChart.setVizProperties({
					"interaction": oInteractionProps
				});
			}
		}
	};

	/**
	 * adds breadcrumbs to the toolbar for drilling up in the selected dimensions
	 *
	 * @private
	 */
	SmartChart.prototype._addDrillBreadcrumbs = function() {

		if (!this._oDrillBreadcrumbs) {
			jQuery.sap.require("sap.m.Breadcrumbs");
			jQuery.sap.require("sap.m.Link");

			this._oDrillBreadcrumbs = new sap.m.Breadcrumbs(this.getId() + "-drillBreadcrumbs", {
				visible: this.getShowDrillBreadcrumbs()
			}).addStyleClass("sapUiCompSmartChartBreadcrumbs");

			this.insertItem(this._oDrillBreadcrumbs, 1);
			this._updateDrillBreadcrumbs();

			// Attach to the drill events in order to update the breadcrumbs
			this._oChart.attachDrilledUp(function(oEvent) {
				this._updateDrillBreadcrumbs();
				// Drill-Stack filters are not part of filter panel any more
				// this._updatePersFilters();
			}.bind(this));

			this._oChart.attachDrilledDown(function(oEvent) {
				this._updateDrillBreadcrumbs();
				// Drill-Stack filters are not part of filter panel any more
				// this._updatePersFilters();
			}.bind(this));
		}
	};
	/**
	 * updates selection filters for usage within filter panel of settings dialog
	 *
	 * @private
	 */
	/*
	 * SmartChart.prototype._updatePersFilters = function() { if (this._oPersController) { // Set filters extracted from drill-stack on ChartWrapper
	 * this._oPersController.getTable().setExternalFilters(this._extractDrillStackFilters()); } };
	 */
	/**
	 * extracts all selection filters from current drill-stack and processes them for personalization controller.
	 *
	 * @returns {Array} An array of P13nFilterItems
	 * @private
	 */
	/*
	 * SmartChart.prototype._extractDrillStackFilters = function() { var aDrillStack = this.getChart().getDrillStack(); var aStackFilters = []; var
	 * fTakeFilters = function(oFilter) { if (!oFilter) { return; } if (oFilter && oFilter.sPath && oFilter.sOperator) { var oFilterItem = new
	 * P13nFilterItem({ operation: oFilter.sOperator, value1: oFilter.oValue1, value2: oFilter.oValue2, columnKey: oFilter.sPath });
	 * aStackFilters.push(oFilterItem); } // check for nested filters if (oFilter.aFilters) { oFilter.aFilters.forEach(function(oFilter_) {
	 * fTakeFilters(oFilter_); }); } }; // Create a sap.m.P13nFilterItem for each filter inside the drillstack;
	 * aDrillStack.forEach(function(oStackEntry, index, aDrillStack) { fTakeFilters(oStackEntry.filter); }); return aStackFilters; };
	 */

	/**
	 * returns all selection filters of current drill-stack
	 *
	 * @returns {sap.ui.model.Filter[]} An array of drill-stack filters
	 */
	SmartChart.prototype.getDrillStackFilters = function() {

		var aDrillStack = this.getChart().getDrillStack();
		var aStackFilters = [];

		var fTakeFilters = function(oFilter) {
			if (!oFilter) {
				return;
			}
			if (oFilter && oFilter.sPath && oFilter.sOperator) {

				aStackFilters.push(oFilter);
			}
			// check for nested filters
			if (oFilter.aFilters) {
				oFilter.aFilters.forEach(function(oFilter_) {
					fTakeFilters(oFilter_);
				});
			}
		};

		aDrillStack.forEach(function(oStackEntry) {
			fTakeFilters(oStackEntry.filter);
		});

		return aStackFilters;
	};
	/**
	 * returns all currently applied dimensions which are part of the chart's stack.
	 * @returns {String[]} array of drill-stack dimensions
	 *
	 * @private
	 */
	SmartChart.prototype._getDrillStackDimensions = function() {
		var aDrillStack = this.getChart().getDrillStack();
		var aStackDimensions = [];

		aDrillStack.forEach(function(oStackEntry) {
			//loop over nested dimension arrays
			oStackEntry.dimension.forEach(function(sDimension) {
				if (sDimension != null && sDimension != "" && aStackDimensions.indexOf(sDimension) == -1) {
					aStackDimensions.push(sDimension);
				}
			});
		});

		return aStackDimensions;
	};
	/**
	 * updates the breadcrumbs control when drilled up or down within the dimensions
	 *
	 * @private
	 */
	SmartChart.prototype._updateDrillBreadcrumbs = function() {

		// Get access to drill history
		var aVisibleDimensionsRev = this._oChart.getDrillStack();

		// Clear aggregation before we rebuild it
		if (this._oDrillBreadcrumbs && this._oDrillBreadcrumbs.getLinks()) {
			this._oDrillBreadcrumbs.removeAllLinks();
		}
		//When chart is bound to non-aggregated entity there is no drill-stack existing
		if (aVisibleDimensionsRev) {
			// Reverse array to display right order of crumbs
			aVisibleDimensionsRev.reverse();
			aVisibleDimensionsRev.forEach(function(dim, index, array) {

				// Check if stack entry has dimension names and if a dimension is existing for this name
				if (dim.dimension.length > 0 && typeof this._oChart.getDimensionByName(dim.dimension[dim.dimension.length - 1]) != 'undefined') {

					// use the last entry of each drill-stack entry to built up the drill-path
					var sDimLabel = this._oChart.getDimensionByName(dim.dimension[dim.dimension.length - 1]).getLabel();

					// Set current drill position in breadcrumb control
					if (index == 0) {

						this._oDrillBreadcrumbs.setCurrentLocationText(sDimLabel);
					} else {

						var oCrumb = new sap.m.Link({
							text: sDimLabel,
							press: function(oEvent) {
								var iLinkIndex = this._oDrillBreadcrumbs.indexOfLink(oEvent.getSource());
								this._oChart.drillUp(iLinkIndex + 1); // plus the position before this link regarding the visualization in bread crumb
								// get rid of entries in the details model
								this._oChart.fireDeselectData(oEvent);
								// don't forget to update the bread crumbs control itself
								this._updateDrillBreadcrumbs();

							}.bind(this)
						});

						this._oDrillBreadcrumbs.insertLink(oCrumb);
					}
				}
			}.bind(this));
		}

	};

	/**
	 * adds the details button to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addDetailsButton = function() {

		this._oSelectionDetails = new SelectionDetails(this.getId() + "-selectionDetails", {
			visible: this.getShowDetailsButton()
		});
		this._oSelectionDetails.registerSelectionDetailsItemFactory([

		], function(aDisplayData, aData, oContext, oData) {
			var aLines = [];
			for (var i = 0; i < aDisplayData.length; i++) {
				aLines.push(new SelectionDetailsItemLine({
					label: aDisplayData[i].label,
					value: aDisplayData[i].value,
					unit: aDisplayData[i].unit
				}));
			}
			return new SelectionDetailsItem({
				enableNav: (function() {
					// Check if we have semantic objects before enabling navigation
					if (this._determineSemanticObjectsforDetailsPopover(aData, oContext).length > 0) {
						return true;
					} else {
						return false;
					}
				}.bind(this)()),
				lines: aLines
			}).setBindingContext(oContext);
		}.bind(this));

		// Attach to navigation event of selectionDetails
		// for semantic object navigation
		this._oSelectionDetails.attachNavigate(function(oEvent) {
			// Destroy content on navBack of selectionDetails
			// This either is the semanticNavContainer or the semanticNavItemList
			if (oEvent.getParameter("direction") === "back") {
				oEvent.getParameter("content").destroy();
			} else {
				// Forward navigation to semantic objects
				this._navigateToSemanticObjectDetails(oEvent);
			}

		}.bind(this));

		this._oSelectionDetails.attachActionPress(function(oEvent) {
			// extract binding information of each item
			var aItemContexts = [];
			oEvent.getParameter("items").forEach(function(oItem) {
				aItemContexts.push(oItem.getBindingContext());
			});
			// Re-arrange event object and navigate to outer press handler
			this.fireSelectionDetailsActionPress({
				id: oEvent.getParameter("id"),
				action: oEvent.getParameter("action"),
				itemContexts: aItemContexts,
				level: oEvent.getParameter("level")
			});
		}.bind(this));

		// Attach to sap.chart.Charts private _selectionDetails event
		this._oSelectionDetails.attachSelectionHandler("_selectionDetails", this._oChart);

		// Update of selectionDetails action aggregations
		this._oSelectionDetails.attachBeforeOpen(function(oEvent) {

			// Update item actions
			var aSelectionItems = this._oSelectionDetails.getItems();

			aSelectionItems.forEach(function(oItem) {
				var oActionClones = this._getDetailsActionsClones();
				oActionClones.selectionDetailsItemActions.forEach(function(oAction) {
					oItem.addAction(oAction);
				});
			}.bind(this));

			// Update list actions
			var oActionClones = this._getDetailsActionsClones().selectionDetailsActions;
			this._oSelectionDetails.removeAllActions();
			oActionClones.forEach(function(oAction) {
				this._oSelectionDetails.addAction(oAction);
			}.bind(this));

			// Update group actions
			var oGroupActionClones = this._getDetailsActionsClones().selectionDetailsActionGroups;
			this._oSelectionDetails.removeAllActionGroups();
			oGroupActionClones.forEach(function(oActionGroup) {
				this._oSelectionDetails.addActionGroup(oActionGroup);
			}.bind(this));

		}.bind(this));

		this._oSelectionDetails.attachBeforeClose(function(oEvent) {
			// Needs to be destroyed to re-navigate later.
			if (this._oNavigationContainer) {
				this._oNavigationContainer.destroy();
			}

		}.bind(this));

		// Add to SmartChart toolbar
		this._oToolbar.addContent(this._oSelectionDetails);

		// Add drill down text button as well
		this._addDrillDownTextButton();
	};
	/**
	 * Creates clones of each outer aggregation for selectionDetails control delegation of actions.
	 *
	 * @returns {{selectionDetailsItemActions: Array, selectionDetailsActions: Array, selectionDetailsActionGroups: Array}}
	 * @private
	 */
	SmartChart.prototype._getDetailsActionsClones = function() {

		var oDetailsActions = {
			selectionDetailsItemActions: [],
			selectionDetailsActions: [],
			selectionDetailsActionGroups: []
		};

		// Clone itemActions
		this.getSelectionDetailsItemActions().forEach(function(oItem) {
			oDetailsActions.selectionDetailsItemActions.push(oItem.clone());
		});

		// Clone actions
		this.getSelectionDetailsActions().forEach(function(oItem) {
			oDetailsActions.selectionDetailsActions.push(oItem.clone());
		});

		// Clone itemActions
		this.getSelectionDetailsActionGroups().forEach(function(oItem) {
			oDetailsActions.selectionDetailsActionGroups.push(oItem.clone());
		});

		return oDetailsActions;
	};
	/**
	 * adds a print button to the toolbar
	 */
	/*
	 * SmartChart.prototype._addPrintButton = function() { if (!this._oPrintButton && this.getShowPrintButton()) { this._oPrintButton = new
	 * Button(this.getId() + "-btnPrint", { type: "Transparent", tooltip: "Print Chart", icon: "sap-icon://print", layoutData: new
	 * sap.m.OverflowToolbarLayoutData({ priority: sap.m.OverflowToolbarPriority.NeverOverflow }), enabled: true, press: function(oEvent) {
	 * this._printChart(oEvent); }.bind(this) }); this._oToolbar.addContent(this._oPrintButton); } };
	 */

	/**
	 * adds a download button to the toolbar
	 */
	SmartChart.prototype._addDownloadButton = function() {
		if (!this._oDownloadButton) {
			this._oDownloadButton = new OverflowToolbarButton(this.getId() + "btnDownload", {
				type: "Transparent",
				text: this._oRb.getText("CHART_DOWNLOADBTN_TEXT"),
				tooltip: this._oRb.getText("CHART_DOWNLOADBTN_TOOLTIP"),
				icon: "sap-icon://download",
				visible: this.getShowDownloadButton(),
				press: function(oEvent) {
					// Check for browser
					if (window.navigator && window.navigator.msSaveOrOpenBlob) {
						// Handle IE, User can either open or save the svg
						// Create a blob object containing the chart svg data
						var svgBlob = new window.Blob([
							this._getVizFrame().exportToSVGString()
						], {
							'type': "image/svg+xml"
						});
						window.navigator.msSaveOrOpenBlob(svgBlob);
					} else {

						this._downloadChartPNG();
					}
				}.bind(this)
			});
			this._oToolbar.addContent(this._oDownloadButton);
		}
	};

	/**
	 * opens an image of the currently displayed chart in a new tab and show browsers print dialog
	 */
	/*
	 * SmartChart.prototype._printChart = function() { // Create a blob object containing the chart svg data var svgBlob = new window.Blob([
	 * this._getVizFrame().exportToSVGString() ], { 'type': "image/svg+xml" }); // Check for browser if (window.navigator &&
	 * window.navigator.msSaveOrOpenBlob) { // Handle IE, User can either open or save the svg window.navigator.msSaveOrOpenBlob(svgBlob); } else { //
	 * Firefox, Chrome // Create a local url for the blob in order to have same origin. var url = window.URL.createObjectURL(svgBlob); // Open new
	 * window showing the svg image var svgWindow = window.open(url, "svg_win"); // We need to use own var as window.onfocus is not working correctly
	 * after print dialog is closed var tabIsFocused = false; // check if print is finished or cancelled setInterval(function() { if (tabIsFocused ===
	 * true) { svgWindow.close(); } }, 1); // Do the print svgWindow.onload = function() { // TODO: Should work on all Apple devices, but wee need to
	 * handle Android separately if (sap.ui.Device.os.name === "Android") { // do something } else { svgWindow.print(); // Print was done or cancelled
	 * tabIsFocused = true; } }; } };
	 */

	/**
	 * downloads a svg file of the currently displayed chart
	 */
	SmartChart.prototype._downloadChartSVG = function() {
		// Download a file
		var fileName = this.getHeader();
		var dl = document.createElement('a');
		dl.setAttribute('href', 'data:image/svg+xml,' + encodeURIComponent(this._getVizFrame().exportToSVGString()));
		dl.setAttribute('download', fileName ? fileName : 'Chart' + '.svg');
		dl.click();
	};

	/**
	 * downloads the chart as png file
	 */
	SmartChart.prototype._downloadChartPNG = function() {
		// Not working for IE, in this case we create a blob and call the IE notification bar for downloading the SVG
		// Create Image and then download (Chrome)
		var fileName = this.getHeader();
		var chartSVG = this._getVizFrame().exportToSVGString();
		var canvas = document.createElement('canvas'); // Not shown on page
		var context = canvas.getContext('2d');
		var loader = new Image(); // Not shown on page

		// getId() because vizFrame content changes id when selecting another chart type
		loader.width = canvas.width = document.getElementById(this._oChart.getId()).offsetWidth;
		loader.height = canvas.height = document.getElementById(this._oChart.getId()).offsetHeight;

		loader.onload = function() {
			context.drawImage(loader, 0, 0);

			var dl = document.createElement('a');
			dl.setAttribute('href', canvas.toDataURL());
			dl.setAttribute('download', fileName ? fileName : 'Chart' + '.png');
			dl.click();
		};
		loader.setAttribute('crossOrigin', 'anonymous');
		loader.src = 'data:image/svg+xml,' + encodeURIComponent(chartSVG);
	};

	/**
	 * adds the full-screen button to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addFullScreenButton = function() {
		var oFullScreenButton;
		if (this.getShowFullScreenButton()) {
			oFullScreenButton = new OverflowToolbarButton(this.getId() + "-btnFullScreen", {
				type: "Transparent",
				press: function() {
					this._toggleFullScreen(!this.bFullScreen);
				}.bind(this)
			});
			this.oFullScreenButton = oFullScreenButton;
			this._renderFullScreenButton();
			this._oToolbar.addContent(oFullScreenButton);
		}
	};

	/**
	 * adds the zoom-in / zoom-out buttons to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addZoomInOutButtons = function() {

		var that = this;
		this._oZoomInButton = new OverflowToolbarButton(this.getId() + "-btnZoomIn", {
			type: "Transparent",
			text: this._oRb.getText("CHART_ZOOMINBTN_TEXT"),
			tooltip: this._oRb.getText("CHART_ZOOMINBTN_TOOLTIP"),
			icon: "sap-icon://zoom-in",
			press: function() {
				if (that._oChart) {
					that._oChart.zoom({
						direction: "in"
					});
				}
			},
			visible: this.getShowZoomButtons()
		});

		this._oZoomOutButton = new OverflowToolbarButton(this.getId() + "-btnZoomOut", {
			type: "Transparent",
			text: this._oRb.getText("CHART_ZOOMOUTBTN_TEXT"),
			tooltip: this._oRb.getText("CHART_ZOOMOUTBTN_TOOLTIP"),
			icon: "sap-icon://zoom-out",
			press: function() {
				if (that._oChart) {
					that._oChart.zoom({
						direction: "out"
					});
				}
			},
			visible: this.getShowZoomButtons()
		});

		this._oToolbar.addContent(this._oZoomInButton);
		this._oToolbar.addContent(this._oZoomOutButton);
	};

	/**
	 * Sets the zoom-in / zoom-out buttons visibility state.
	 *
	 * @param {boolean} bFlag true to display the zoom-in / zoom-out buttons
	 */
	SmartChart.prototype.setShowZoomButtons = function(bFlag) {

		this.setProperty("showZoomButtons", bFlag);

		if (this._oZoomInButton) {
			this._oZoomInButton.setVisible(bFlag);
		}
		if (this._oZoomOutButton) {
			this._oZoomOutButton.setVisible(bFlag);
		}
	};

	/**
	 * Sets the full screen button visibility state.
	 *
	 * @param {boolean} bFlag true to display the fullscreen button
	 */
	SmartChart.prototype.setShowFullScreenButton = function(bFlag) {
		this.setProperty("showFullScreenButton", bFlag);
		if (this.oFullScreenButton) {
			this.oFullScreenButton.setVisible(bFlag);
		}
	};
	/**
	 * Sets the chart legend visibility state.
	 *
	 * @param {boolean} bFlag true to display the chart legend
	 */
	SmartChart.prototype.setLegendVisible = function(bFlag) {

		this.setProperty("legendVisible", bFlag);

		this._setLegendVisible(bFlag);
	};

	/**
	 * Sets the chart legend visibility state.
	 *
	 * @param {boolean} bFlag true to display the chart legend
	 * @private
	 */
	SmartChart.prototype._setLegendVisible = function(bFlag) {

		var oVizFrame = this._getVizFrame();
		if (oVizFrame) {
			oVizFrame.setLegendVisible(bFlag);
		}

	};

	/**
	 * Returns the charts _vizFrame aggregation.
	 *
	 * @returns {object} charts _vizFrame aggregation object
	 * @private
	 */
	SmartChart.prototype._getVizFrame = function() {

		var oVizFrame = null;
		if (this._oChart) {
			oVizFrame = this._oChart.getAggregation("_vizFrame");
		}

		return oVizFrame;
	};

	/**
	 * adds the legend button to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addLegendButton = function() {

		var that = this;
		this._oLegendButton = new OverflowToolbarButton(this.getId() + "-btnLegend", {
			type: "Transparent",
			text: this._oRb.getText("CHART_LEGENDBTN_TEXT"),
			tooltip: this._oRb.getText("CHART_LEGENDBTN_TOOLTIP"),
			icon: "sap-icon://legend",
			press: function() {
				that.setLegendVisible(!that.getLegendVisible());
			},
			visible: this.getShowLegendButton()
		});

		this._oToolbar.addContent(this._oLegendButton);
	};

	/**
	 * Sets the legend button visibility state.
	 *
	 * @param {boolean} bFlag true to display the legend button
	 */
	SmartChart.prototype.setShowLegendButton = function(bFlag) {

		this.setProperty("showLegendButton", bFlag);

		if (this._oLegendButton) {
			this._oLegendButton.setVisible(bFlag);
		}
	};

	/**
	 * Sets the semantic navigation button visibility state.
	 *
	 * @param {boolean} bFlag true to display the semantic navigation button
	 */
	SmartChart.prototype.setShowSemanticNavigationButton = function(bFlag) {

		this.setProperty("showSemanticNavigationButton", bFlag);

		if (this._oSemanticalNavButton) {
			this._oSemanticalNavButton.setVisible(bFlag);
		} else {
			/* eslint-disable no-lonely-if */
			if (bFlag) {
				this._addSemanticNavigationButton();
			}
			/* eslint-enable no-lonely-if */
		}
	};

	/**
	 * adds the semantical navigation button to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addSemanticNavigationButton = function() {
		var that = this, aSemanticObjects;

		if (!this._oSemanticalNavButton && this.getShowSemanticNavigationButton() && this._oToolbar) {
			this._oSemanticalNavButton = new Button(this.getId() + "-btnNavigation", {
				type: "Transparent",
				text: this._oRb.getText("CHART_SEMNAVBTN"),
				tooltip: this._oRb.getText("CHART_SEMNAVBTN_TOOLTIP"),
				visible: this.getShowSemanticNavigationButton(),
				enabled: false
			});

			jQuery.sap.require("sap.ui.comp.navpopover.NavigationPopoverHandler");

			var oNavHandler = new sap.ui.comp.navpopover.NavigationPopoverHandler({
				control: this._oSemanticalNavButton
			});

			var oSemanticObjectController = this.getSemanticObjectController();
			if (oSemanticObjectController) {
				oNavHandler.setSemanticObjectController(oSemanticObjectController);
			}

			this._oSemanticalNavButton.attachPress(function(oEvent) {

				if (aSemanticObjects && (aSemanticObjects.length > 0)) {

					if (aSemanticObjects.length === 1) {
						var oSemanticObjects = MetadataAnalyser.getSemanticObjectsFromProperty(aSemanticObjects[0]);
						if (oSemanticObjects) {
							oNavHandler.setFieldName(aSemanticObjects[0].name);
							oNavHandler.setSemanticObject(oSemanticObjects.defaultSemanticObject);
							oNavHandler.setAdditionalSemanticObjects(oSemanticObjects.additionalSemanticObjects);
							oNavHandler.openPopover();
						}
					} else {
						that._semanticObjectList(aSemanticObjects, oNavHandler);
					}
				}
			});
			if (this._oChart) {

				this._oChart.attachDeselectData(function() {
					aSemanticObjects = that._setSelectionDataPointHandling(oNavHandler);
				});

				this._oChart.attachSelectData(function() {
					aSemanticObjects = that._setSelectionDataPointHandling(oNavHandler);
				});
			}

			var iSpacerIdx = this._indexOfSpacerOnToolbar();
			this._oToolbar.insertContent(this._oSemanticalNavButton, iSpacerIdx + 1);
		}
	};
	/**
	 * sets the selectionMode for datapoint selection.
	 *
	 * @param {sap.chart.SelectionMode} selectionMode SINGLE, MULTI or NONE
	 */
	SmartChart.prototype.setSelectionMode = function(selectionMode) {
		this.setProperty("selectionMode", selectionMode);
		if (this._oChart) {
			this._oChart.setSelectionMode(selectionMode);
		}
	};

	/**
	 * Sets the handling of selected data points in order to resolve a semantical object when semantic navigation button is pressed
	 *
	 * @param {sap.ui.comp.navpopover.NavigationPopoverHandler} oNavHandler The navigation handler for the semantical object navigation
	 * @returns {array} The semantic objects for selected data points
	 * @private
	 */
	SmartChart.prototype._setSelectionDataPointHandling = function(oNavHandler) {
		var aSemanticObjects = this._setSelectionDataPoint(oNavHandler);
		if (aSemanticObjects && aSemanticObjects.length > 0) {
			this._oSemanticalNavButton.setEnabled(true);
		} else {
			this._oSemanticalNavButton.setEnabled(false);
		}

		return aSemanticObjects;
	};

	/**
	 * Sets the semantical object context for each selected data point when details button is used
	 *
	 * @param {object} oEvent The event arguments
	 * @returns {array} The semantic objects for selected data points
	 * @private
	 */
	SmartChart.prototype._setSemanticObjectsContext = function(oEvent) {
		var oDataContext, oData, aSemanticObjects = null;

		// Get binding context
		// selectionDetails implementation
		oDataContext = oEvent.getParameter("item").getBindingContext();

		if (oDataContext) {
			// Get data object from context
			oData = oDataContext.getObject();
			if (oData) {
				// Retrieve semantical objects
				aSemanticObjects = this._determineSemanticObjectsforDetailsPopover(oData, oDataContext);
			}
		}
		return aSemanticObjects;
	};

	/**
	 * Sets the semantical object context for each selected data point when semantical nav button is used
	 *
	 * @param {sap.ui.comp.navpopover.NavigationPopoverHandler} oNavHandler The navigation handler for the semantical object navigation
	 * @returns {array} The semantic objects for selected data points
	 * @private
	 */
	SmartChart.prototype._setSelectionDataPoint = function(oNavHandler) {
		var oDataContext, oData, aSemanticObjects = null, aDataContext;

		var aSelectedDataPoints = this._oChart.getSelectedDataPoints();

		if (!aSelectedDataPoints || !aSelectedDataPoints.dataPoints || (aSelectedDataPoints.dataPoints.length === 0)) {
			return aSemanticObjects;
		}

		if (aSelectedDataPoints.dataPoints.length === 1) {
			oDataContext = aSelectedDataPoints.dataPoints[0].context;
			if (oDataContext) {
				oData = oDataContext.getObject();

				if (oData) {
					aSemanticObjects = this._determineSemanticObjects(oData, oDataContext);
					if (aSemanticObjects && (aSemanticObjects.length > 0)) {
						oNavHandler.setBindingContext(oDataContext);
					}
				}
			}

			return aSemanticObjects;
		}

		aDataContext = [];
		for (var i = 0; i < aSelectedDataPoints.dataPoints.length; i++) {
			oDataContext = aSelectedDataPoints.dataPoints[i].context;
			if (oDataContext) {
				oData = oDataContext.getObject();

				if (oData) {
					aDataContext.push(oData);
				}
			}
		}

		if (aDataContext && aDataContext.length > 0) {
			aSemanticObjects = this._condensBasedOnSameValue(aDataContext);
			if (aSemanticObjects && aSemanticObjects.length > 0) {
				oNavHandler.setBindingContext(aSelectedDataPoints.dataPoints[aSelectedDataPoints.dataPoints.length - 1].context);
			}
		}

		return aSemanticObjects;
	};

	/**
	 * Condenses data point contexts which are based on same values.
	 *
	 * @param {array} aData The data contexts of selected data points
	 * @returns {array} The semantic objects for selected data points
	 * @private
	 */
	SmartChart.prototype._condensBasedOnSameValue = function(aData) {

		var aSemObj = null, aResultSemObj, oSemObj, sName;

		// expectation: all datapoint have the same semantical objects
		aSemObj = this._determineSemanticObjects(aData[0]);

		if (aSemObj && aSemObj.length > 0) {
			for (var i = 0; i < aSemObj.length; i++) {
				oSemObj = aSemObj[i];
				sName = oSemObj.name;

				if (this._bAllValuesAreEqual(aData, sName)) {
					if (!aResultSemObj) {
						aResultSemObj = [];
					}

					aResultSemObj.push(oSemObj);
				}
			}
			aSemObj = aResultSemObj;
		}
		return aSemObj;
	};
	/**
	 * Checks if all values of a data point context are equal.
	 *
	 * @param {array} aData The data contexts of selected data points
	 * @param {string} sFieldName The field name against whose value should be checked
	 * @returns {boolean} True if all values are equals, false otherwise
	 * @private
	 */
	SmartChart.prototype._bAllValuesAreEqual = function(aData, sFieldName) {
		var oData, sValue;
		for (var i = 0; i < aData.length; i++) {
			oData = aData[i];

			if (i === 0) {
				sValue = oData[sFieldName];
				continue;
			}
			if (sValue != oData[sFieldName]) {
				return false;
			}
		}
		return true;
	};

	/**
	 * Creates a semantical object list for selected data points which resolve in more than one semantical object when semantical nav button is used.
	 *
	 * @param {array} aSemanticObjects The semantical objects for a selected data point
	 * @param {sap.ui.comp.navpopover.NavigationPopoverHandler} oNavHandler The navigation handler for the semantical object navigation
	 * @private
	 */
	SmartChart.prototype._semanticObjectList = function(aSemanticObjects, oNavHandler) {

		var oPopover, oList, oListItem, oSemanticObject;

		if (this._oChart) {

			oList = new sap.m.List({
				mode: sap.m.ListMode.SingleSelectMaster,
				selectionChange: function(oEvent) {
					if (oEvent && oEvent.mParameters && oEvent.mParameters.listItem) {
						var oSemanticObjects = oEvent.mParameters.listItem.data("semObj");
						if (oSemanticObjects) {
							oNavHandler.setFieldName(oEvent.mParameters.listItem.data("fieldName"));
							oNavHandler.setSemanticObject(oSemanticObjects.defaultSemanticObject);
							oNavHandler.setAdditionalSemanticObjects(oSemanticObjects.additionalSemanticObjects);
							// control is set to this._oSemanticalNavButton
							oNavHandler.openPopover();
						}
					}
					oPopover.close();
				}
			});

			for (var i = 0; i < aSemanticObjects.length; i++) {
				oSemanticObject = aSemanticObjects[i];
				oListItem = new sap.m.StandardListItem({
					title: oSemanticObject.fieldLabel,
					type: sap.m.ListType.Active
				});

				oListItem.data("semObj", MetadataAnalyser.getSemanticObjectsFromProperty(oSemanticObject));
				oListItem.data("fieldName", oSemanticObject.name);
				oList.addItem(oListItem);
			}

			oPopover = new sap.m.ResponsivePopover({
				title: this._oRb.getText("CHART_SEMNAVBTN"),
				showHeader: false,
				contentWidth: "12rem",
				placement: sap.m.PlacementType.Left
			});

			oPopover.addContent(oList);
			oPopover.openBy(this._oSemanticalNavButton);
		}
	};

	/**
	 * Creates a semantical object list for selected data points which resolve in more than one semantical object when details button is used.
	 *
	 * @param {array} aSemanticObjects The semantical objects for a selected data point
	 * @param {object} oContext The binding context of the pressed list item
	 * @returns {sap.m.List} list containing items for the semantical objects for a selected data point
	 * @private
	 */
	SmartChart.prototype._semanticObjectListForDetails = function(aSemanticObjects, oContext) {

		var oList, oListItem, oSemanticObject;
		var that = this;

		if (this._oChart) {

			oList = new sap.m.List({
				mode: sap.m.ListMode.SingleSelectMaster,
				rememberSelections: false,
				itemPress: function(oEvent) {
					if (oEvent && oEvent.mParameters && oEvent.mParameters.listItem) {
						var oSemanticObjects = oEvent.mParameters.listItem.data("semObj");
						if (oSemanticObjects) {
							// TODO: Provide own function for this and also use it in _navigateToSemanticObjectDetails
							var oNavigationHandler = new sap.ui.comp.navpopover.NavigationPopoverHandler({
								fieldName: oEvent.mParameters.listItem.data("fieldName"),
								control: oEvent.mParameters.listItem,
								semanticObject: oSemanticObjects.defaultSemanticObject,
								additionalSemanticObjects: oSemanticObjects.additionalSemanticObjects
							});

							oNavigationHandler._getNavigationContainer().then(function(oNavigationContainer) {

								that._oNavigationContainer = oNavigationContainer;
								oNavigationContainer.attachAvailableActionsPersonalizationPress(that._onAvailableActionsPersonalizationPress, that);
								this._oSelectionDetails.navTo("", oNavigationContainer);

							}.bind(this), function(oError) {
								jQuery.sap.log.error("NavigationContainer could not be determined");
							});
						}
					}
				}.bind(this)
			});

			//Get semantic objects and only create list item when navigation targets are available.
			sap.ui.comp.navpopover.SemanticObjectController.getDistinctSemanticObjects().then(function(oSemanticObjects) {
				for (var i = 0; i < aSemanticObjects.length; i++) {
					oSemanticObject = aSemanticObjects[i];
					if (sap.ui.comp.navpopover.SemanticObjectController.hasDistinctSemanticObject(oSemanticObject["com.sap.vocabularies.Common.v1.SemanticObject"].String, oSemanticObjects)) {

						oListItem = new sap.m.StandardListItem({
							title: oSemanticObject.fieldLabel,
							type: sap.m.ListType.Navigation
						});

						oListItem.setBindingContext(oContext);
						oListItem.data("semObj", MetadataAnalyser.getSemanticObjectsFromProperty(oSemanticObject));
						oListItem.data("fieldName", oSemanticObject.name);
						oList.addItem(oListItem);
					}
				}
			});

			return oList;
		}
	};

	SmartChart.prototype._onAvailableActionsPersonalizationPress = function(oEvent) {
		var oNavigationContainer = oEvent.getSource();
		// set modal to keep selectionDetails popover open during link personalization
		this._oSelectionDetails.setPopoverModal(true);

		oNavigationContainer.openSelectionDialog(false, true, undefined, true).then(function() {
			this._oSelectionDetails.setPopoverModal(false);
		}.bind(this));
	};

	/**
	 * Determines the semantical object for a given context of a selected data point.
	 *
	 * @param{object} mData data of a selected data point object
	 * @param{object} oDataContext binding context of a selected data point
	 * @returns {array} semantical objects
	 */
	SmartChart.prototype._determineSemanticObjects = function(mData, oDataContext) {
		var n, oField, aSematicObjects = [];
		if (mData) {
			for (n in mData) {
				if (n) {
					oField = this._getField(n);
					if (oField && oField.isDimension && oField.isSemanticObject) {
						aSematicObjects.push(oField);
					}
				}
			}
		}
		if (aSematicObjects) {
			aSematicObjects.sort(function(a, b) {
				return a.fieldLabel.localeCompare(b.fieldLabel);
			});
		}
		return aSematicObjects;
	};
	/**
	 * Determines the semantical object for a given context of a selected data point.
	 *
	 * @param{object} mData data of a selected data point object
	 * @param{object} oDataContext binding context of a selected data point
	 * @returns {array} semantical objects
	 */
	SmartChart.prototype._determineSemanticObjectsforDetailsPopover = function(mData, oDataContext) {

		var n, oField, aSematicObjects = [];
		if (mData) {
			for (n in mData) {
				if (n) {
					oField = this._getField(n);
					if (oField && oField.isDimension && oField.isSemanticObject) {
						aSematicObjects.push(oField);
					}
				}
			}
		}
		if (aSematicObjects) {
			aSematicObjects.sort(function(a, b) {
				return a.fieldLabel.localeCompare(b.fieldLabel);
			});
		}
		return aSematicObjects;
	};

	/**
	 * Adds the drill-up and drill-down button to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addDrillUpDownButtons = function() {

		if (this.getShowDrillButtons()) {

			var that = this;

			this._oDrillUpButton = new OverflowToolbarButton(this.getId() + "-btnDrillUp", {
				type: "Transparent",
				tooltip: this._oRb.getText("CHART_DRILLUPBTN_TOOLTIP"),
				text: this._oRb.getText("CHART_DRILLUPBTN_TEXT"),
				icon: "sap-icon://drill-up",
				press: function() {
					if (that._oChart) {
						that._oChart.drillUp();
					}
				},
				visible: !this.getShowDrillBreadcrumbs()
			});

			this._oDrillDownButton = new OverflowToolbarButton(this.getId() + "-btnDrillDown", {
				type: "Transparent",
				tooltip: this._oRb.getText("CHART_DRILLDOWNBTN_TOOLTIP"),
				text: this._oRb.getText("CHART_DRILLDOWNBTN_TEXT"),
				icon: "sap-icon://drill-down",
				press: function(oEvent) {
					that._drillDown(oEvent);
				},
				visible: !this.getShowDetailsButton()

			});
			this._oToolbar.addContent(this._oDrillUpButton);
			this._oToolbar.addContent(this._oDrillDownButton);
		}
	};
	/**
	 * Adds the drill-down text button to the toolbar This button only is visible together with selectionDetails control.
	 *
	 * @private
	 */
	SmartChart.prototype._addDrillDownTextButton = function() {

		this._oDrillDownTextButton = new Button(this.getId() + "-btnDrillDownText", {
			type: "Transparent",
			text: this._oRb.getText("CHART_DRILLDOWNBTN_TEXT"),
			tooltip: this._oRb.getText("CHART_DRILLDOWNBTN_TOOLTIP"),
			layoutData: new sap.m.OverflowToolbarLayoutData({
				priority: sap.m.OverflowToolbarPriority.NeverOverflow
			}),
			enabled: true,
			visible: this.getShowDetailsButton(),// show only when selectionDetails is used
			press: function(oEvent) {
				this._drillDown(oEvent);
			}.bind(this)
		});

		this._oToolbar.addContent(this._oDrillDownTextButton);
	};

	/**
	 * Sets the drill-up button and drill-down button visibility state
	 *
	 * @param {boolean} bFlag true to display the drill-up and drill-down buttons, false otherwise
	 */
	SmartChart.prototype.setShowDrillButtons = function(bFlag) {

		this.setProperty("showDrillButtons", bFlag);

		if (this._oDrillUpButton) {
			this._oDrillUpButton.setVisible(bFlag);
		}
		if (this._oDrillDownButton) {
			this._oDrillDownButton.setVisible(bFlag);
		}
	};

	/**
	 * Triggers a search in the drill-down popover
	 *
	 * @param {object} oEvent The event arguments
	 * @param {sap.m.List} oList The list to search in
	 * @private
	 */
	SmartChart.prototype._triggerSearchInPopover = function(oEvent, oList) {

		var parameters, i, sTitle, sTooltip, sValue, aItems;

		if (!oEvent || !oList) {
			return;
		}

		parameters = oEvent.getParameters();
		if (!parameters) {
			return;
		}

		sValue = parameters.newValue ? parameters.newValue.toLowerCase() : "";

		if (this._oChart) {
			aItems = oList.getItems();
			for (i = 0; i < aItems.length; i++) {

				sTooltip = aItems[i].getTooltip();
				sTitle = aItems[i].getTitle();

				if ((sTitle && (sTitle.toLowerCase().indexOf(sValue) > -1)) || (sTooltip && (sTooltip.toLowerCase().indexOf(sValue) > -1))) {
					aItems[i].setVisible(true);
				} else {
					aItems[i].setVisible(false);
				}
			}
		}
	};

	/**
	 * Opens the drill-down popover and shows a list of available dimensions for drilling in.
	 *
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartChart.prototype._drillDown = function(oEvent) {

		var that = this, oPopover, aIgnoreDimensions, aDimensions, oDimension, oListItem, oList, oSubHeader, oSearchField, i, sTooltip;

		if (this._oChart) {

			oList = new sap.m.List({
				mode: sap.m.ListMode.SingleSelectMaster,
				selectionChange: function(oEvent) {
					if (oEvent && oEvent.mParameters && oEvent.mParameters.listItem) {

						if (oEvent.mParameters.listItem.getType() === sap.m.ListType.Inactive) {
							return;
						}

						var oDimension = oEvent.mParameters.listItem.data("dim");
						if (oDimension) {
							that._oChart.drillDown(oDimension);
						}
					}

					oPopover.close();
				}
			});

			oSubHeader = new sap.m.Bar();
			oSearchField = new sap.m.SearchField({
				placeholder: this._oRb.getText("CHART_DRILLDOWN_SEARCH")
			});
			oSearchField.attachLiveChange(function(oEvent) {
				that._triggerSearchInPopover(oEvent, oList);
			});
			oSubHeader.addContentRight(oSearchField);

			oPopover = new sap.m.ResponsivePopover({
				title: this._oRb.getText("CHART_DRILLDOWN_TITLE"),
				contentWidth: "25rem",
				contentHeight: "20rem",
				placement: sap.m.PlacementType.Bottom,
				subHeader: oSubHeader
			});

			oPopover.addContent(oList);

			//Get currently applied dimensions from drill-stack
			aIgnoreDimensions = this._getDrillStackDimensions();
			aDimensions = this._getSortedDimensions();

			if (aDimensions.length < 7) {
				oSubHeader.setVisible(false);
			}

			for (i = 0; i < aDimensions.length; i++) {

				if (aIgnoreDimensions.indexOf(aDimensions[i].getName()) > -1) {
					continue;
				}

				oDimension = aDimensions[i];
				oListItem = new sap.m.StandardListItem({
					title: oDimension.getLabel(),
					type: sap.m.ListType.Active
				});

				oListItem.data("dim", oDimension);

				sTooltip = this._getFieldTooltip(oDimension.name);
				if (sTooltip) {
					oListItem.setTooltip(sTooltip);
				}

				if (aIgnoreDimensions.indexOf(aDimensions[i].getName()) > -1) {
					oListItem.setType(sap.m.ListType.Inactive);
				}

				oList.addItem(oListItem);
			}
			oPopover.openBy(oEvent.getSource());
		}
	};

	/**
	 * Navigates to the semantic object directly or to a list of available semantic objects of one details entry within the details popover
	 *
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartChart.prototype._navigateToSemanticObjectDetails = function(oEvent) {

		// update semantic objects based on details item press
		var aSemanticObjects = this._setSemanticObjectsContext(oEvent);

		if (aSemanticObjects && (aSemanticObjects.length > 0)) {

			if (aSemanticObjects.length === 1) {
				var oSemanticObjects = MetadataAnalyser.getSemanticObjectsFromProperty(aSemanticObjects[0]);
				if (oSemanticObjects) {

					var oNavigationHandler = new sap.ui.comp.navpopover.NavigationPopoverHandler({
						fieldName: aSemanticObjects[0].name,
						control: oEvent.getParameter("item"), //Pass pressed item to use its binding context
						semanticObject: oSemanticObjects.defaultSemanticObject,
						additionalSemanticObjects: oSemanticObjects.additionalSemanticObjects
					});

					oNavigationHandler._getNavigationContainer().then(function(oNavigationContainer) {
						this._oNavigationContainer = oNavigationContainer;

						// Attach link personalization handling
						oNavigationContainer.attachAvailableActionsPersonalizationPress(this._onAvailableActionsPersonalizationPress, this);

						// Navigate to semantic details page
						this._oSelectionDetails.navTo("", oNavigationContainer);

					}.bind(this), function(oError) {
						jQuery.sap.log.error("NavigationContainer could not be determined");
					});
				}
			} else {
				var oContext = oEvent.getParameter("item").getBindingContext();
				// Call this function if we use the details section instead of the button for semantic navigation
				var oList = this._semanticObjectListForDetails(aSemanticObjects, oContext);
				this._oSelectionDetails.navTo(this._oRb.getText("CHART_SEMNAVBTN"), oList);
			}
		}

	};

	/**
	 * adds the header line to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addHeaderToToolbar = function() {

		if (this.getHeader() && this._oToolbar) {
			if (!this._headerText) {
				this._headerText = new Title({});
				this._headerText.addStyleClass("sapMH4Style");
				this._headerText.addStyleClass("sapUiCompSmartChartHeader");
			}
			this._refreshHeaderText();
			this._oToolbar.insertContent(this._headerText, 0);
		} else if (this._headerText && this._oToolbar) {
			this._oToolbar.removeContent(this._headerText);
		}
	};

	/**
	 * adds a separator between header and variantmanagement to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addSeparatorToToolbar = function() {

		if (this.getHeader() && this.getUseVariantManagement() && this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
			this._oSeparator = new ToolbarSeparator();
			this._oToolbar.insertContent(this._oSeparator, 0);
			// Also set the height to 3rem when no height is explicitly specified
			if (!this._oToolbar.getHeight()) {
				this._oToolbar.setHeight("auto");
			}
		} else if (this._oSeparator) {
			this._oToolbar.removeContent(this._oSeparator);
		}
	};

	/**
	 * adds the VarientManagement to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addVariantManagementToToolbar = function() {

		if (this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {

			if (this.getUseVariantManagement()) {
				this._oToolbar.insertContent(this._oVariantManagement, 0);
			} else if (this._oVariantManagement) {
				this._oToolbar.removeContent(this._oVariantManagement);
			}
		}
	};

	/**
	 * adds a spacer to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addSpacerToToolbar = function() {
		if (this._indexOfSpacerOnToolbar() === -1) {
			this._oToolbar.addContent(new ToolbarSpacer());
		}
	};

	SmartChart.prototype._indexOfSpacerOnToolbar = function() {
		var aItems = this._oToolbar.getContent(), i, iLength;
		if (aItems) {
			iLength = aItems.length;
			i = 0;
			for (i; i < iLength; i++) {
				if (aItems[i] instanceof ToolbarSpacer) {
					return i;
				}
			}
		}
		return -1;
	};

	/**
	 * adds the Personalisation button to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addPersonalisationToToolbar = function() {
		if (this.getUseChartPersonalisation()) {
			if (!this._oChartPersonalisationButton) {
				this._oChartPersonalisationButton = new OverflowToolbarButton(this.getId() + "-btnPersonalisation", {
					type: "Transparent",
					icon: "sap-icon://action-settings",
					text: this._oRb.getText("CHART_PERSOBTN_TEXT"),
					tooltip: this._oRb.getText("CHART_PERSOBTN_TOOLTIP"),
					press: function(oEvent) {
						this._oPersController.openDialog({
							dimeasure: {
								visible: true,
								payload: {
									availableChartTypes: this._getAvailableChartTypes()
								}
							},
							sort: {
								visible: true
							},
							filter: {
								visible: true
							}
						});
					}.bind(this)
				});
			}
			this._oToolbar.addContent(this._oChartPersonalisationButton);
		} else if (this._oChartPersonalisationButton) {
			this._oToolbar.removeContent(this._oChartPersonalisationButton);
		}
	};

	/**
	 * Adds the chart type button to the toolbar
	 *
	 * @private
	 */
	SmartChart.prototype._addChartTypeToToolbar = function() {
		// Use a OverflowToolbarButton regarding new UX re-design
		this._oChartTypeButton = this._createChartTypeButton();
		this._oToolbar.addContent(this._oChartTypeButton);
	};

	/**
	 * Creates a OverflowToolbarButton for selecting a specific chart type.
	 *
	 * @returns {sap.m.SegementedButton} The segmented button for chart type selection
	 * @private
	 */
	SmartChart.prototype._createChartTypeButton = function() {
		// Create a button for selecting chart types
		var oChartTypeButton = new OverflowToolbarButton(this.getId() + "-btnChartType", {
			visible: this.getShowChartTypeSelectionButton(),
			type: "Transparent",
			layoutData: new sap.m.OverflowToolbarLayoutData({
				priority: sap.m.OverflowToolbarPriority.NeverOverflow
			}),
			press: function(oEvent) {
				this._displayChartTypes(oEvent);
			}.bind(this)
		});
		// Initial enrichment of button
		this._enrichPassedButton(oChartTypeButton, this._oChart.getChartType());

		return oChartTypeButton;
	};

	/**
	 * Displays a popover which shows all available chart types
	 *
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartChart.prototype._displayChartTypes = function(oEvent) {

		var that = this, oPopover, oList, oSubHeader, oSearchField, bDoNotUpdate = false;

		if (this._bAvailableChartListIsOpen) {
			return;
		}

		if (this._oChart && oEvent) {
			var oButton = oEvent.getSource();

			var oItemTemplate = new sap.m.StandardListItem({
				title: "{$smartChartTypes>text}",
				icon: "{$smartChartTypes>icon}",
				selected: "{$smartChartTypes>selected}"
			});

			oList = new sap.m.List({
				mode: sap.m.ListMode.SingleSelectMaster,
				items: {
					path: "$smartChartTypes>/items",
					template: oItemTemplate
				},
				selectionChange: function(oEvent) {
					if (oEvent && oEvent.mParameters && oEvent.mParameters.listItem) {
						var oBinding = oEvent.mParameters.listItem.getBinding("title");
						if (oBinding) {
							var oCtx = oBinding.getContext();
							if (oCtx) {
								var oObj = oCtx.getObject();
								if (oObj && oObj.key) {
									// Set the chart type on the inner chart
									that._setChartType(oObj.key);
									// update the chart type buttons icon and tooltip
									that._enrichPassedButton(that._oChartTypeButton, that._oChart.getChartType());
								}
							}
						}
					}
					bDoNotUpdate = true;
					oPopover.close();
				}
			});

			oSubHeader = new sap.m.Bar();
			oSearchField = new sap.m.SearchField({
				placeholder: this._oRb.getText("CHART_TYPE_SEARCH")
			});
			oSearchField.attachLiveChange(function(oEvent) {
				that._triggerSearchInPopover(oEvent, oList);
			});
			oSubHeader.addContentRight(oSearchField);

			oPopover = new sap.m.ResponsivePopover({
				placement: sap.m.PlacementType.Bottom,
				subHeader: oSubHeader,
				showHeader: false,
				contentWidth: "25rem"
			});

			oPopover.attachAfterClose(function(oEvent) {
				if (!bDoNotUpdate) {
					// that._updateVisibilityOfChartTypes(that._oChartTypeButton);
				}
				that._bAvailableChartListIsOpen = false;
			});

			oPopover.setModel(this.getModel("$smartChartTypes"), "$smartChartTypes");

			oPopover.addContent(oList);

			if (oList.getItems().length < 7) {
				oSubHeader.setVisible(false);
			}

			this._bAvailableChartListIsOpen = true;
			oPopover.openBy(oButton);
		}
	};

	var mMatchingIcon = {
		"bar": "sap-icon://horizontal-bar-chart",
		"bullet": "sap-icon://horizontal-bullet-chart",
		"bubble": "sap-icon://bubble-chart",
		"column": "sap-icon://vertical-bar-chart",
		"combination": "sap-icon://business-objects-experience",
		"dual_bar": "sap-icon://horizontal-bar-chart",
		"dual_column": "sap-icon://vertical-bar-chart",
		"dual_combination": "sap-icon://business-objects-experience",
		"dual_horizontal_combination": "sap-icon://business-objects-experience",
		"dual_horizontal_stacked_combination": "sap-icon://business-objects-experience",
		"dual_line": "sap-icon://line-chart",
		"dual_stacked_bar": "sap-icon://full-stacked-chart",
		"dual_stacked_column": "sap-icon://vertical-stacked-chart",
		"dual_stacked_combination": "sap-icon://business-objects-experience",
		"donut": "sap-icon://donut-chart",
		"heatmap": "sap-icon://heatmap-chart",
		"horizontal_stacked_combination": "sap-icon://business-objects-experience",
		"line": "sap-icon://line-chart",
		"pie": "sap-icon://pie-chart",
		"scatter": "sap-icon://scatter-chart",
		"stacked_bar": "sap-icon://full-stacked-chart",
		"stacked_column": "sap-icon://vertical-stacked-chart",
		"stacked_combination": "sap-icon://business-objects-experience",
		"treemap": "sap-icon://Chart-Tree-Map", // probably has to change
		"vertical_bullet": "sap-icon://vertical-bullet-chart",
		"100_dual_stacked_bar": "sap-icon://full-stacked-chart",
		"100_dual_stacked_column": "sap-icon://vertical-stacked-chart",
		"100_stacked_bar": "sap-icon://full-stacked-chart",
		"100_stacked_column": "sap-icon://full-stacked-column-chart",
		"waterfall": "sap-icon://vertical-waterfall-chart",
		"horizontal_waterfall": "sap-icon://horizontal-waterfall-chart"
	};

	/**
	 * Returns a matching icon for a specific chart type
	 *
	 * @param {string} sCharType The chart type
	 * @returns{string} sIcon The icon url
	 * @private
	 */
	SmartChart.prototype._getMatchingIcon = function(sCharType) {
		var sIcon = mMatchingIcon[sCharType];
		if (!sIcon) {
			sIcon = "";
		}

		return sIcon;
	};

	/**
	 * Enriches a passed button with the needed information of the selcted chart type
	 *
	 * @param {sap.m.OverflowToolbarButton} oButton The button which shall be enriched
	 * @param {string} sKey The key of an available chart type
	 * @param {string} sText The text of an available chart type
	 * @private
	 */
	SmartChart.prototype._enrichPassedButton = function(oButton, sKey, sText) {

		if (!oButton) {
			return;
		}

		if (sText === undefined) {

			sText = sKey;
			var oKey = this._retrieveChartTypeDescription(sKey);
			if (oKey && oKey.text) {
				sText = oKey.text;
			}
		}

		oButton.data("chartType", sKey);

		var sSelectedChartTypeIcon = this._getMatchingIcon(sKey);
		oButton.setIcon(sSelectedChartTypeIcon ? sSelectedChartTypeIcon : "sap-icon://vertical-bar-chart");

		var sTextKey = (this._oChart.getChartType() === sKey) ? "CHART_TYPE_TOOLTIP" : "CHART_TYPE_UNSEL_TOOLTIP";
		oButton.setTooltip(this._oRb.getText(sTextKey, [
			sText
		]));
	};

	/**
	 * Updates the available chart types model
	 *
	 * @private
	 */
	SmartChart.prototype._updateAvailableChartType = function() {
		var that = this, oModel, mData, aItems = [];

		oModel = this.getModel("$smartChartTypes");
		if (!oModel) {
			return;
		}

		mData = {
			items: aItems
		};

		var sSelectedChartType = this._oChart.getChartType();

		this._getAvailableChartTypes().forEach(function(chartType) {

			var oItem = {
				key: chartType.key,
				text: chartType.text,
				icon: that._getMatchingIcon(chartType.key),
				selected: sSelectedChartType === chartType.key
			};
			aItems.push(oItem);
		});

		oModel.setData(mData);

		if (this._oSegmentedButton) {
			this._updateVisibilityOfChartTypes(this._oSegmentedButton);
		}
	};

	/**
	 * creates the personalization controller if not yet done
	 *
	 * @private
	 */
	SmartChart.prototype._createPersonalizationController = function() {
		if (this._oPersController) {
			return;
		}

		var oSettings = this.data("p13nDialogSettings");
		if (typeof oSettings === "string") {
			try {
				oSettings = JSON.parse(oSettings);
			} catch (e) {
				oSettings = null;
				// Invalid JSON!
			}
		}

		oSettings = this._setIgnoreFromPersonalisationToSettings(oSettings);

		oSettings = oSettings || {};

		jQuery.sap.require("sap.ui.comp.personalization.Controller");
		var oChartWrapper = PersoUtil.createChartWrapper(this._oChart, this._oChart.data("p13nData"), this._aColumnKeysOrdered);
		if (this.$() && this.$().closest(".sapUiSizeCompact").length > 0) {
			this._oChart.addStyleClass("sapUiSizeCompact");
		}

		this._oPersController = new sap.ui.comp.personalization.Controller({
			table: oChartWrapper,
			setting: oSettings,
			resetToInitialTableState: !this.getUseVariantManagement(),
			afterP13nModelDataChange: this._personalisationModelDataChange.bind(this)
		});

		this._oPersController.attachDialogConfirmedReset(function() {
			if (this._oDrillBreadcrumbs) {
				this._updateDrillBreadcrumbs();
			}
			// Update the chartTypeButton
			var oChartTypeButton = sap.ui.getCore().byId(this.getId() + "-btnChartType");
			if (oChartTypeButton) {
				this._enrichPassedButton(oChartTypeButton, this._oChart.getChartType());
			}
		}.bind(this));
	};

	/**
	 * adds the ignoreFromPersonalisation fields to the given setting
	 *
	 * @param {object} oSettings the former settings object
	 * @private
	 * @returns {object} the changed settings object
	 */
	SmartChart.prototype._setIgnoreFromPersonalisationToSettings = function(oSettings) {
		var aIgnoreFields = PersoUtil.createArrayFromString(this.getIgnoreFromPersonalisation());
		if (aIgnoreFields.length) {
			if (!oSettings) {
				oSettings = {};
			}

			var fSetArray = function(sSubName) {
				if (!oSettings[sSubName]) {
					oSettings[sSubName] = {};
				}
				oSettings[sSubName].ignoreColumnKeys = aIgnoreFields;
			};

			fSetArray("dimeasure");
			fSetArray("filter");
			fSetArray("sort");
		}
		return oSettings;
	};

	/**
	 * eventhandler for personalisation changed
	 *
	 * @param {object} oEvent The event arguments
	 * @private
	 */
	SmartChart.prototype._personalisationModelDataChange = function(oEvent) {
		this._oCurrentVariant = oEvent.getParameter("persistentData");
		var oChangeInfo = oEvent.getParameter("changeType");
		var changeStatus = this._getChangeStatus(oChangeInfo);

		if (changeStatus === sap.ui.comp.personalization.ChangeType.Unchanged) {
			return;
		}

		//Only fire chartDataChanged when type as not Unchanged
		this._fireChartDataChanged(oChangeInfo);

		if (!this._bApplyingVariant) {
			if (!this.getUseVariantManagement()) {
				this._persistPersonalisation();
			} else if (this._oVariantManagement) {
				this._oVariantManagement.currentVariantSetModified(true);
			}
		}

		if (changeStatus === sap.ui.comp.personalization.ChangeType.TableChanged) {
			if (this._oCurrentVariant.dimeasure && this._oCurrentVariant.dimeasure.chartTypeKey) {
				this._updateAvailableChartType();
				// Update chartType button when type was changed in P13n
				if (this._oChartTypeButton) {
					this._enrichPassedButton(this._oChartTypeButton, this._oChart.getChartType());
				}
			}
			if (this._oSemanticalNavButton) {
				this._oSemanticalNavButton.setEnabled(false);
			}
		} else if (changeStatus === sap.ui.comp.personalization.ChangeType.ModelChanged && this._bIsChartBound) {
			// Check if chart was bound already &&:
			// If a SmartFilter is associated with SmartChart - trigger search on the SmartFilter
			if (this._oSmartFilter) {
				this._oSmartFilter.search();
			} else {
				// Rebind Chart only if data was set on it once or no smartFilter is attached!
				this._reBindChart();
			}
		}
		// Reflect changes from the Personalization Controller to the Breadcrumbs control
		if (this._oDrillBreadcrumbs) {
			this._updateDrillBreadcrumbs();
		}
	};

	SmartChart.prototype._fireChartDataChanged = function(oChangeStatus) {
		var oChangeTypes = {
			dimeasure: false,
			filter: false,
			sort: false
		};
		//Map changeStatus to change types and then fire public event
		for ( var sChangeType in oChangeStatus) {
			if (oChangeStatus[sChangeType] !== "Unchanged") {
				oChangeTypes[sChangeType] = true;
			}
		}

		this.fireChartDataChanged({
			changeTypes: oChangeTypes
		});
	};

	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 *
	 * @private
	 * @param {object} oChangeInfo The change info given by the personalization controller
	 * @returns {sap.ui.comp.personalization.ChangeType} the merged change status
	 */
	SmartChart.prototype._getChangeStatus = function(oChangeInfo) {
		if (!oChangeInfo) {
			// change info not provided return ModelChanged to indicate that we need to update everything internally
			return sap.ui.comp.personalization.ChangeType.ModelChanged;
		}

		if (oChangeInfo.sort === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.filter === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.dimeasure === sap.ui.comp.personalization.ChangeType.ModelChanged || oChangeInfo.group === sap.ui.comp.personalization.ChangeType.ModelChanged) {
			// model has changed and was not applied to table
			return sap.ui.comp.personalization.ChangeType.ModelChanged;
		}

		if (oChangeInfo.sort === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.filter === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.dimeasure === sap.ui.comp.personalization.ChangeType.TableChanged || oChangeInfo.group === sap.ui.comp.personalization.ChangeType.TableChanged) {
			// change was already applied to table
			return sap.ui.comp.personalization.ChangeType.TableChanged;
		}

		return sap.ui.comp.personalization.ChangeType.Unchanged;
	};

	/**
	 * The entity set name in the OData metadata against which the chart must be bound.
	 *
	 * @param {string} sEntitySetName The entity set
	 * @public
	 */
	SmartChart.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
		this._initialiseMetadata();
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the chart controls.
	 *
	 * @private
	 */
	SmartChart.prototype.propagateProperties = function() {
		VBox.prototype.propagateProperties.apply(this, arguments);
		this._initialiseMetadata();
	};

	/**
	 * Initialises the OData metadata necessary to create the chart
	 *
	 * @private
	 */
	SmartChart.prototype._initialiseMetadata = function() {
		if (!this.bIsInitialised) {
			ODataModelUtil.handleModelInit(this, this._onMetadataInitialised);
		}
	};

	/**
	 * Called once the necessary Model metadata is available
	 *
	 * @private
	 */
	SmartChart.prototype._onMetadataInitialised = function() {
		this._bMetaModelLoadAttached = false;
		if (!this.bIsInitialised) {
			this._createChartProvider();
			if (this._oChartProvider) {
				this._oChartViewMetadata = this._oChartProvider.getChartViewMetadata();
				if (this._oChartViewMetadata) {

					// Indicates the control is initialised and can be used in the initialise event/otherwise!
					this.bIsInitialised = true;
					this._listenToSmartFilter();
					this._createVariantManagementControl(); // creates VariantMngmntCtrl if useVariantManagement OR useChartPersonalisation is true.
					// Control is only added to toolbar if useVariantManagement is set otherwise it acts as
					// hidden persistance helper
					this._assignData();

					this._createContent();

					this._createToolbarContent();

					this._createPersonalizationController();

					this.fireInitialise();
					// Trigger initial binding if no Variant exists -or- if it is already initialised
					if (!this._oVariantManagement || (this._oVariantManagement && this._bVariantInitialised)) {
						this._checkAndTriggerBinding();
					}
				}
			}
		}
	};

	/**
	 * Check if control needs to be bound and trigger binding accordingly.
	 *
	 * @private
	 */
	SmartChart.prototype._checkAndTriggerBinding = function() {
		if (!this._bAutoBindingTriggered) {
			this._bAutoBindingTriggered = true;
			if (this.getEnableAutoBinding()) {
				if (this._oSmartFilter) {
					this._oSmartFilter.search();
				} else {
					this._reBindChart();
				}
			}
		}
	};

	/**
	 * Creates an instance of the chart provider
	 *
	 * @private
	 */
	SmartChart.prototype._createChartProvider = function() {
		var oModel, sEntitySetName;
		sEntitySetName = this.getEntitySet();
		oModel = this.getModel();

		// The SmartChart might also needs to work for non ODataModel models; hence we now create the chart independent
		// of ODataModel.
		if (oModel && !this._bChartCreated) {
			this._aAlwaysSelect = [];
			this._aInitialSorters = [];
			this._createToolbar();
			this._createChart();
			this._addDrillBreadcrumbs();
			this._bChartCreated = true;
		}
		if (oModel && sEntitySetName) {
			this._oChartProvider = new ChartProvider({
				entitySet: sEntitySetName,
				ignoredFields: this.getIgnoredFields(),
				dateFormatSettings: this.data("dateFormatSettings"),
				defaultDropDownDisplayBehaviour: this.data("defaultDimensionDisplayBehaviour"),
				skipAnnotationParse: this.data("skipAnnotationParse"),
				chartQualifier: this.data("chartQualifier"),
				presentationVariantQualifier: this.data("presentationVariantQualifier"),
				model: oModel,
				chartLibrary: ChartLibrary
			});
		}
	};

	/**
	 * Listen to changes on the corresponding SmartFilter (if any)
	 *
	 * @private
	 */
	SmartChart.prototype._listenToSmartFilter = function() {
		var sSmartFilterId = null;
		// Register for SmartFilter Search
		sSmartFilterId = this.getSmartFilterId();

		this._oSmartFilter = this._findControl(sSmartFilterId);

		if (this._oSmartFilter) {
			this._oSmartFilter.attachSearch(this._reBindChart, this);
			this._oSmartFilter.attachFilterChange(this._filterChangeEvent, this);
		}
	};

	SmartChart.prototype._filterChangeEvent = function() {
		if (this._bIsChartBound && this._oSmartFilter && !this._oSmartFilter.getLiveMode() && !this._oSmartFilter.isDialogOpen()) {
			this._showOverlay(true);
		}
	};

	SmartChart.prototype._renderOverlay = function(bShow) {

		if (this._oChart) {

			var $this = this._oChart.$(), $overlay = $this.find(".sapUiCompSmartChartOverlay");
			if (bShow && $overlay.length === 0) {
				$overlay = jQuery("<div>").addClass("sapUiOverlay sapUiCompSmartChartOverlay").css("z-index", "1");
				$this.append($overlay);
			} else if (!bShow) {
				$overlay.remove();
			}
		}
	};
	/**
	 * sets the ShowOverlay property on the inner chart, fires the ShowOverlay event
	 *
	 * @param {boolean} bShow true to display the overlay, otherwise false
	 */
	SmartChart.prototype.showOverlay = function(bShow) {
		this._showOverlay(bShow);
	};

	/**
	 * sets the ShowOverlay property on the inner chart, fires the ShowOverlay event
	 *
	 * @param {boolean} bShow true to display the overlay, otherwise false
	 * @private
	 */
	SmartChart.prototype._showOverlay = function(bShow) {
		if (bShow) {
			var oOverlay = {
				show: true
			};
			this.fireShowOverlay({
				overlay: oOverlay
			});
			bShow = oOverlay.show;
		}
		// Flag is used in adjustHeight because setHeight call on inner chart lets overlay disappear.
		this._hasOverlay = bShow;
		this._renderOverlay(bShow);
	};

	/**
	 * searches for a certain control by its ID
	 *
	 * @param {string} sId the control's ID
	 * @returns {sap.ui.core.Control} The control found by the given Id
	 * @private
	 */
	SmartChart.prototype._findControl = function(sId) {
		var oResultControl, oView;
		if (sId) {
			// Try to get SmartFilter from Id
			oResultControl = sap.ui.getCore().byId(sId);

			// Try to get SmartFilter from parent View!
			if (!oResultControl) {
				oView = this._getView();

				if (oView) {
					oResultControl = oView.byId(sId);
				}
			}
		}

		return oResultControl;
	};

	/**
	 * searches for the controls view
	 *
	 * @returns {sap.ui.core.mvc.View} The found parental View
	 * @private
	 */
	SmartChart.prototype._getView = function() {
		if (!this._oView) {
			var oObj = this.getParent();
			while (oObj) {
				if (oObj instanceof sap.ui.core.mvc.View) {
					this._oView = oObj;
					break;
				}
				oObj = oObj.getParent();
			}
		}
		return this._oView;
	};
	/**
	 * updates the inResultDimension property on inner sap.chart.Chart. A concatenation of inResultDimension, requestAtLeast and PresentationVariant
	 * is created. called via _rebindChart and setRequestAtLeastFields.
	 *
	 * @private
	 */
	SmartChart.prototype._updateInResultDimensions = function() {
		var aUniqueInResultDimensions = this._getInResultDimensionTotal();

		// make sure that we only set inResultDims when they have changed to previous setting
		var fnCompareWithCurrentInResult = function(aNewInResult) {
			var aCurrentInResult = this.getChart().getInResultDimensions();

			// compare length first to save up some time
			if (aCurrentInResult.length != aNewInResult.length){
				return false;
			}
			for (var i = 0, l = aCurrentInResult.length; i < l; i++) {

				if (aCurrentInResult[i] != aNewInResult[i]) {
					// Only comparing strings here, not working for objects
					return false;
				}
			}
			//True when both arrays contain the same strings
			return true;
		}.bind(this);

		// if the new InResult array has values and is different then the one already set
		if (aUniqueInResultDimensions.length > 0 && !fnCompareWithCurrentInResult(aUniqueInResultDimensions)) {
			this.getChart().setInResultDimensions(aUniqueInResultDimensions);
		}
	};

	/**
	 * This can be used to trigger binding on the chart used in the SmartChart
	 *
	 * @protected
	 */
	SmartChart.prototype.rebindChart = function() {
		this._reBindChart();
	};

	/**
	 * Re-binds the chart
	 *
	 * @private
	 */
	SmartChart.prototype._reBindChart = function() {
		var mChartPersonalisationData, aSmartFilters, aProcessedFilters = [], aFilters, oExcludeFilters, aSorters, mParameters = {}, mBindingParams = {
			preventChartBind: false
		};

		mChartPersonalisationData = this._getChartPersonalisationData() || {};

		aFilters = mChartPersonalisationData.filters;
		oExcludeFilters = mChartPersonalisationData.excludeFilters;
		aSorters = mChartPersonalisationData.sorters;

		// Get Filters and parameters from SmartFilter
		if (this._oSmartFilter) {
			aSmartFilters = this._oSmartFilter.getFilters();
			mParameters = this._oSmartFilter.getParameters() || {};
		}

		// If filters from SmartFilter exist --> process them first with SmartChart exclude filters
		// since we need to manually AND multiple multi filters!
		if (aSmartFilters && aSmartFilters.length) {
			if (oExcludeFilters) {
				aProcessedFilters = [
					new sap.ui.model.Filter([
						aSmartFilters[0], oExcludeFilters
					], true)
				];
			} else {
				aProcessedFilters = aSmartFilters;
			}
		} else if (oExcludeFilters) {
			aProcessedFilters = [
				oExcludeFilters
			];
		}
		// Combine the resulting processed filters with SmartChart include filters
		if (aFilters) {
			aFilters = aProcessedFilters.concat(aFilters);
		} else {
			aFilters = aProcessedFilters;
		}

		// updateInResultDimensions before re-binding the chart
		this._updateInResultDimensions();

		// Enable some default parameters
		mParameters["entitySet"] = this.getEntitySet();
		if (!aSorters) {
			aSorters = [];
		}

		mBindingParams.filters = aFilters;
		mBindingParams.sorter = aSorters;
		mBindingParams.parameters = mParameters;

		// fire event to enable user modification of certain binding options (Ex: Filters)
		this.fireBeforeRebindChart({
			bindingParams: mBindingParams
		});

		if (!mBindingParams.preventChartBind) {
			aSorters = mBindingParams.sorter;
			aFilters = mBindingParams.filters;
			mParameters = mBindingParams.parameters;
			this._oChart.setBusy(true);

			this._bDataLoadPending = true;

			var oData = {
				path: this.getChartBindingPath() || ("/" + this.getEntitySet()),
				parameters: mParameters,
				filters: aFilters,
				sorter: aSorters,
				events: {
					dataReceived: function(mEventParams) {

						// AnalyticalBinding fires dataReceived too early
						if (mEventParams && mEventParams.getParameter && mEventParams.getParameter("__simulateAsyncAnalyticalBinding")) {
							return;
						}

						this._onDataLoadComplete(mEventParams, true);
						// notify any listeners
						this.fireDataReceived(mEventParams);
					}.bind(this),
					change: this._onDataLoadComplete.bind(this)
				}
			};

			if (mBindingParams.length) {
				oData.length = Math.min(mBindingParams.length, 100);
			} else {
				var iMaxItems = this._oChartProvider.getMaxItems();

				if (iMaxItems > 0) {
					oData.length = iMaxItems;
				}
			}

			this._oChart.bindData(oData);

			this._showOverlay(false);

			// Flag to indicate if Chart was bound (data fetch triggered) at least once
			this._bIsChartBound = true;
		}
	};

	SmartChart.prototype._onDataLoadComplete = function(mEventParams, bForceUpdate) {

		if (this._oSemanticalNavButton) {
			this._oSemanticalNavButton.setEnabled(false);
		}

		if (this._bDataLoadPending || bForceUpdate) {
			this._bDataLoadPending = false;

			this._updateAvailableChartType();
			this._oChart.setBusy(false);
		}
	};

	SmartChart.prototype._assignData = function() {
		if (this._oChartViewMetadata && this._oChart) {
			if (this._oChartViewMetadata.measureFields && (this._oChartViewMetadata.measureFields.length > 0)) {
				this._oChart.setVisibleMeasures(this._oChartViewMetadata.measureFields);
			}

			if (this._oChartViewMetadata.dimensionFields && (this._oChartViewMetadata.dimensionFields.length > 0)) {
				this._oChart.setVisibleDimensions(this._oChartViewMetadata.dimensionFields);
			}

			if (!this.getChartType() && this._oChartViewMetadata.chartType) {
				this._setChartType(this._oChartViewMetadata.chartType);
			}
		}
	};

	SmartChart.prototype._createP13nObject = function(oField) {

		// add to initial sorters
		if (oField.sortable && oField.sorted) {
			var oSortItem = {
				columnKey: oField.name,
				operation: oField.sortOrder
			};

			// rebind to apply initial sorting
			this._aInitialSorters.push(oSortItem);
		}

		return {
			columnKey: oField.name,
			leadingProperty: oField.name, // used to fetch data, by adding this to $select param of OData request
			additionalProperty: oField.additionalProperty, // additional data to fetch in $select
			sortProperty: oField.sortable ? oField.name : undefined,
			filterProperty: oField.filterable ? oField.name : undefined,
			type: oField.filterType,
			maxLength: oField.maxLength,
			precision: oField.precision,
			scale: oField.scale,
			isMeasure: oField.isMeasure,
			isDimension: oField.isDimension,
			aggregationRole: oField.aggregationRole,
			label: oField.fieldLabel,
			tooltip: oField.quickInfo,
			sorted: oField.sorted,
			sortOrder: oField.sortOrder
		};

	};

	/**
	 * Creates the content based on the metadata/configuration
	 *
	 * @private
	 */
	SmartChart.prototype._createContent = function() {

		jQuery.sap.require("sap.ui.comp.util.FormatUtil");

		var i, iLen = 0, oField, oChartObject, mProperties, aSortFilterableItems = [], oP13nDataObj, that = this;
		var aDataPoints = [];
		this._aColumnKeysOrdered = [];

		//chart annotation overrules the entity type ordering
		jQuery.extend(this._aColumnKeysOrdered, this._oChartViewMetadata.dimensionFields);
		this._aColumnKeysOrdered = this._aColumnKeysOrdered.concat(this._oChartViewMetadata.measureFields);

		iLen = this._oChartViewMetadata.fields.length;
		for (i = 0; i < iLen; i++) {

			oChartObject = null;

			oField = this._oChartViewMetadata.fields[i];

			if (this._aColumnKeysOrdered.indexOf(oField.name) === -1) {
				this._aColumnKeysOrdered.push(oField.name);
			}

			// Only create P13n data when there is no dimension/measure existing for this field
			// Custom dimensions/measures have to provide their own P13n data as JSON
			if (this.getChart().getDimensionByName(oField.name) === undefined && this.getChart().getMeasureByName(oField.name) === undefined) {
				oP13nDataObj = this._createP13nObject(oField);

				mProperties = {
					name: oField.name,
					label: oField.fieldLabel
				};
			}
			// Check if should always be in Result of query
			if (oField.inResult) {
				this._aAlwaysSelect.push(oField.name);
			}

			if (oField.isDimension) {
				// Check if dimension was already set from outside
				if (this.getChart().getDimensionByName(oField.name) === undefined) {
					oChartObject = new Dimension(mProperties);
					this._oChart.addDimension(oChartObject);

					if (oField.description) {
						oChartObject.setTextProperty(oField.description);

						/* eslint-disable no-loop-func */
						oChartObject.setTextFormatter(function(sKey, sText) {
							var sName = this.getIdentity();
							var sDisplayBehaviour = that._getDisplayBehaviour(sName);
							return sap.ui.comp.util.FormatUtil.getFormattedExpressionFromDisplayBehaviour(sDisplayBehaviour, sKey, sText);
						});
						/* eslint-enable no-loop-func */
					} else if (oField.dateFormatter) {
						oChartObject.setTextFormatter(oField.dateFormatter);
					}
				} else {
					// If dimension was existing already, then parse the p13n JSON to object.
					var oP13nData = this.getChart().getDimensionByName(oField.name).data("p13nData");
					if (oP13nData) {
						// Check if p13nData is a String (defined in XML view ) or already an object (defined in JavaScript)
						this.getChart().getDimensionByName(oField.name).data("p13nData", typeof oP13nData === "string" ? JSON.parse(oP13nData) : oP13nData);
					}
				}

			} else if (oField.isMeasure) {
				// Check if measure was already set from outside
				if (this.getChart().getMeasureByName(oField.name) === undefined) {
					oChartObject = new Measure(mProperties);
					this._oChart.addMeasure(oChartObject);

					if (oField.dataPoint) {
						// remember data point to for semantics
						aDataPoints.push({
							dataPoint: oField.dataPoint,
							measure: oChartObject
						});
					}

					if (oField.unit) {
						oChartObject.setUnitBinding(oField.unit);
					}
				} else {
					// If measure was existing already, then parse the p13n JSON to object.
					var oP13nData = this.getChart().getMeasureByName(oField.name).data("p13nData");
					if (oP13nData) {
						// Check if p13nData is a String (defined in XML view ) or already an object (defined in JavaScript)
						this.getChart().getMeasureByName(oField.name).data("p13nData", typeof oP13nData === "string" ? JSON.parse(oP13nData) : oP13nData);
					}
				}

			} else if (oField.sortable || oField.filterable) {
				aSortFilterableItems.push(oP13nDataObj);
			}

			if (oChartObject) {
				if (oField.role) {
					oChartObject.setRole(oField.role);
				}
				oChartObject.data("p13nData", oP13nDataObj);
			}
		}

		if (this._oChart) {
			this._oChart.data("p13nData", aSortFilterableItems);
		}

		// enrich from data points when all measures are there
		if (aDataPoints.length > 0) {
			this._enrichFromDataPoints(aDataPoints);
		}
	};

	SmartChart.prototype._getDisplayBehaviour = function(sName) {

		var oField = this._getField(sName);
		if (oField) {
			return oField.displayBehaviour;
		}

		return "";
	};

	SmartChart.prototype._getField = function(sName) {
		var oField, i, iLen;

		if (sName && this._oChartViewMetadata && this._oChartViewMetadata.fields) {
			iLen = this._oChartViewMetadata.fields.length;
			for (i = 0; i < iLen; i++) {
				oField = this._oChartViewMetadata.fields[i];
				if (oField.name === sName) {
					return oField;
				}
			}
		}

		return null;
	};
	/**
	 * Creates a Chart based on the configuration, if necessary. This also prepares the methods to be used based on the chart type.
	 *
	 * @private
	 */
	SmartChart.prototype._createChart = function() {
		var aContent = this.getItems(), iLen = aContent ? aContent.length : 0, oChart;
		// Check if a Chart already exists in the content (Ex: from view.xml)
		while (iLen--) {
			oChart = aContent[iLen];
			if (oChart instanceof Chart) {
				break;
			}
			oChart = null;
		}
		// If a Chart exists use it, else create one!
		if (oChart) {
			this._oChart = oChart;
		} else {
			this._oChart = new Chart({
				uiConfig: {
					applicationSet: 'fiori'
				},
				// Needs to be set in order to visualize busy indicator when binding happens very fast
				busyIndicatorDelay: 0,
				vizProperties: {
					title: {
						text: ''
					},
					plotArea: {
						dataLabel: {
							// visible: true,
							hideWhenOverlap: false
						}
					},
					general: {
						groupData: false
					},
					categoryAxis: {
						layout: {
							autoHeight: true,
							autoWidth: true
						}
					}
				},
				selectionMode: this.getSelectionMode(),
				width: "100%"
			});
			this._toggleChartTooltipVisibility(this.getShowChartTooltip());
			this._setBehaviorTypeForDataSelection();
			this.insertItem(this._oChart, 2);
		}

		if (!this._oChart.getLayoutData()) {
			var oFlexItemData = {
				growFactor: 1
			};

			var oLayoutData = this.getLayoutData();
			var sSmartChartBaseSize = null;
			if (oLayoutData && oLayoutData.getBaseSize) {
				sSmartChartBaseSize = oLayoutData.getBaseSize();
			}

			if (sSmartChartBaseSize) {
				oFlexItemData.baseSize = "100%";
			}

			this._oChart.setLayoutData(new sap.m.FlexItemData(oFlexItemData));
		}
		if (this.getChartType()) {
			this._setChartType(this.getChartType());
		}
		// Attach in order to re-set overlay when framework fires rerender events (like VariantManagement when saving a variant)
		this._oChart.attachRenderComplete(function() {
			// If overlay is active, it need to be set again because of setHeight on oChart
			if (this._hasOverlay) {
				setTimeout(function() {
					this._showOverlay(true);
				}.bind(this), 0);
			}
		}.bind(this));

		this._createTooltipOrPopover();
	};

	SmartChart.prototype._toggleChartTooltipVisibility = function(bFlag) {

		if (this._oChart) {
			if (bFlag) {
				if (!this._vizTooltip) {
					this._vizTooltip = new VizTooltip();
				}
				// Make this dynamic for setter calls
				this._vizTooltip.connect(this.getChart().getVizUid());
			} else {
				if (this._vizTooltip) {
					this._vizTooltip.destroy();
				}
			}
		}
	};

	/**
	 * updates the formatter of vizPopover / vizTooltip based on current chartType PERCENT formatter for all 100% chartTypes STANDARDFLOAT formatter
	 * otherwise.
	 *
	 * @private
	 */
	SmartChart.prototype._updateVizTooltipFormatter = function() {
		// Needs to be called when tooltip gets enabled and when chartType changes!
		if (this._vizTooltip) {
			if (this.getChart().getChartType().match(/100/) !== null) {
				this._vizTooltip.setFormatString(sap.viz.ui5.format.ChartFormatter.DefaultPattern.PERCENT);
			} else {
				this._vizTooltip.setFormatString(sap.viz.ui5.format.ChartFormatter.DefaultPattern.STANDARDFLOAT);
			}
		}
	};

	/**
	 * Returns the chart object used internally.<br>
	 * <b>Note:</b> Direct changes made to the inner {@link sap.chart.Chart chart} object or its
	 * {@link sap.viz.ui5.controls.VizFrame vizFrame} might lead to inconsistencies and side effects during runtime, as the <code>SmartChart</code>
	 * control doesn't listen to all changes made to the inner {@link sap.chart.Chart chart} instance. To avoid this, please use the API provided by
	 * the <code>SmartChart</code> control itself.
	 *
	 * @returns {object} The inner chart object
	 * @public
	 */
	SmartChart.prototype.getChart = function() {
		return this._oChart;
	};

	SmartChart.prototype._getChartTypes = function() {
		var mChartTypes;
		try {
			mChartTypes = sap.chart.api.getChartTypes();
		} catch (ex) {
			mChartTypes = {};
			jQuery.sap.log.error("sap.chart.api..getChartTypes throws an exception.\n" + ex.toString());
		}

		return mChartTypes;
	};

	SmartChart.prototype._getAvailableChartTypes = function() {
		var i, sKey, aAvailableChartTypes = [], aChartTypes, mChartTypes = {}, aIgnoredChartTypes;

		if (this._oChart) {

			aIgnoredChartTypes = PersoUtil.createArrayFromString(this.getIgnoredChartTypes());

			mChartTypes = this._getChartTypes();
			aChartTypes = this._oChart.getAvailableChartTypes().available;
			if (aChartTypes) {
				for (i = 0; i < aChartTypes.length; i++) {
					sKey = aChartTypes[i].chart;
					if (aIgnoredChartTypes.indexOf(sKey) < 0) {
						aAvailableChartTypes.push({
							key: sKey,
							text: mChartTypes[sKey]
						});
					}
				}
			}
		}

		return aAvailableChartTypes;
	};

	SmartChart.prototype._getAllChartTypes = function() {
		var sKey, aAllChartTypes = [], mChartTypes, aIgnoredChartTypes;

		aIgnoredChartTypes = PersoUtil.createArrayFromString(this.getIgnoredChartTypes());

		mChartTypes = this._getChartTypes();

		for (sKey in mChartTypes) {
			if (sKey) {
				if (aIgnoredChartTypes.indexOf(sKey) < 0) {
					aAllChartTypes.push({
						key: sKey,
						text: mChartTypes[sKey]
					});
				}
			}
		}

		return aAllChartTypes;
	};

	SmartChart.prototype._retrieveChartTypeDescription = function(sCharType) {
		var mChartTypes = this._getChartTypes();
		return ({
			key: sCharType,
			text: mChartTypes[sCharType]
		});
	};

	SmartChart.prototype._setChartType = function(sChartType) {

		if (this._oChart) {
			var sHeight = this._oChart.getHeight();
			this._oChart.setChartType(sChartType);

			// clear selected detail entries
			this._aDetailsEntries = [];
			this._updateVizTooltipFormatter();

			//toggle the unit bindings of each measure based on chart type
			this._toggleMeasureUnitBinding(sChartType, this._oChart.getMeasures());
			//to be save set the Height again as it sometimes shrinked
			this._oChart.setHeight(sHeight);
		}
	};

	SmartChart.prototype._toggleMeasureUnitBinding = function(sChartType, aMeasures) {

		if (typeof aMeasures != 'undefined' && aMeasures instanceof Array) {

			if (sChartType.substring(0, 4) === "100_") {
				// Delete all unit bindings when chartType is percentage type
				aMeasures.forEach(function(oMeasure) {
					oMeasure.setUnitBinding();
				});
			} else {

				if (this._oChartProvider) {
					// Bring back the unit bindings for each measure from the metadata fields.
					var aFieldMetadata = this._oChartProvider._aODataFieldMetadata;

					aMeasures.forEach(function(oMeasure) {
						//Run until we found the correct field
						for (var i = aFieldMetadata.length - 1; i >= 0; i--) {
							if (aFieldMetadata[i].name == oMeasure.getName()) {
								if (aFieldMetadata[i]["Org.OData.Measures.V1.ISOCurrency"] && aFieldMetadata[i]["Org.OData.Measures.V1.ISOCurrency"].Path) {
									oMeasure.setUnitBinding(aFieldMetadata[i]["Org.OData.Measures.V1.ISOCurrency"].Path);
								}
								break;
							}
						}
					});
				}
			}
		}
	};

	SmartChart.prototype._getDimensions = function() {
		var aDimensions = [];

		if (this._oChart) {
			aDimensions = this._oChart.getDimensions();
		}

		return aDimensions;
	};

	SmartChart.prototype._getVisibleDimensions = function() {
		var aVisibleDimensions = [];

		if (this._oChart) {
			aVisibleDimensions = this._oChart.getVisibleDimensions();
		}

		return aVisibleDimensions;
	};

	SmartChart.prototype._getMeasures = function() {
		var aMeasures = [];

		if (this._oChart) {
			aMeasures = this._oChart.getMeasures();
		}

		return aMeasures;
	};

	SmartChart.prototype._getVisibleMeasures = function() {
		var aVisibleMeasures = [];

		if (this._oChart) {
			aVisibleMeasures = this._oChart.getVisibleMeasures();
		}

		return aVisibleMeasures;
	};

	SmartChart.prototype._getSortedDimensions = function() {
		var aDimensions = [];
		if (this._oChart) {
			aDimensions = this._oChart.getDimensions();
			if (aDimensions) {
				aDimensions.sort(function(a, b) {
					if (a.getLabel() && b.getLabel()) {
						return a.getLabel().localeCompare(b.getLabel());
					}
				});
			}
		}
		return aDimensions;
	};

	/**
	 * Interface function for the SmartVariantManagement control that returns the currently used variant data.
	 *
	 * @public
	 * @returns {json} The currently used variant
	 */
	SmartChart.prototype.fetchVariant = function() {
		if (this._oCurrentVariant === "STANDARD" || this._oCurrentVariant === null) {
			return {};
		}

		return this._oCurrentVariant;
	};

	/**
	 * Interface function for SmartVariantManagement control that applies the current variant.
	 *
	 * @param {Object} oVariantJSON The variant JSON
	 * @param {string} sContext Describes the context in which the variant has been applied
	 * @public
	 */
	SmartChart.prototype.applyVariant = function(oVariantJSON, sContext) {
		this._oCurrentVariant = oVariantJSON;
		if (this._oCurrentVariant === "STANDARD") {
			this._oCurrentVariant = null;
		}

		// Context STANDARD here specifies that this is a custom application variant for Globalisation/Industry!
		// This would be called just once in the beginning!
		if (sContext === "STANDARD") {
			this._oApplicationDefaultVariant = this._oCurrentVariant;
		}
		// if an application default variant exists --> extend all the other variants based on this!
		// Changes to the industry should be taken over --> but first we only take over non conflicting changes
		// if the user already has some changes --> just use those
		if (this._oApplicationDefaultVariant && !sContext) {
			this._oCurrentVariant = jQuery.extend(true, {}, this._oApplicationDefaultVariant, oVariantJSON);
		}

		// Set instance flag to indicate that we are currently in the process of applying the changes
		this._bApplyingVariant = true;

		if (this._oPersController) {
			if (this._oCurrentVariant === null || jQuery.isEmptyObject(this._oCurrentVariant)) {
				this._oPersController.resetPersonalization(sap.ui.comp.personalization.ResetType.ResetFull);
			} else {
				this._oPersController.setPersonalizationData(this._oCurrentVariant);
			}
		}

		// Clear apply variant flag!
		this._bApplyingVariant = false;

		this.fireAfterVariantApply({
			currentVariantId: this.getCurrentVariantId()
		});
	};

	/**
	 * Interface function for SmartVariantManagment control. It indicates, that the variant management is fully initialized.
	 *
	 * @internal
	 */
	SmartChart.prototype.variantsInitialized = function() {
		this._bVariantInitialised = true;
		this._checkAndTriggerBinding();
	};

	/**
	 * The method returns the current UI state of SmartChart control.
	 *
	 * @returns {sap.ui.comp.state.UIState} Current UI state
	 * @public
	 */
	SmartChart.prototype.getUiState = function() {
		var oUIStateP13n = this._oPersController ? this._oPersController.getDataSuiteFormatSnapshot() : null;
		return new UIState({
			presentationVariant: {
				// PresentationVariantID: jQuery.sap.uid(),
				ContextUrl: "", // TODO
				MaxItems: this._oChartProvider.getMaxItems(),
				SortOrder: oUIStateP13n ? oUIStateP13n.SortOrder : [],
				GroupBy: oUIStateP13n ? oUIStateP13n.GroupBy : [],
				Total: oUIStateP13n ? oUIStateP13n.Total : [],
				RequestAtLeast: this._getInResultDimensionTotal(),
				Visualizations: oUIStateP13n ? oUIStateP13n.Visualizations : []
			},
			selectionVariant: {
				SelectOptions: oUIStateP13n ? oUIStateP13n.SelectOptions : []
			},
			variantName: this.getCurrentVariantId()
		});
	};

	/**
	 * The method replaces the current UI state of SmartChart control with
	 * the data represented in <code>uiState</code>.
	 *
	 * @param {sap.ui.comp.state.UIState} oUIState the new representation of UI state
	 * @public
	 */
	SmartChart.prototype.setUiState = function(oUIState) {
		if (!oUIState.getPresentationVariant() && !oUIState.getPresentationVariant().Visualizations.some(function(oVisualization) {
			return oVisualization.Type === "Chart";
		})) {
			jQuery.sap.log.error("sap.ui.comp.smartchart.SmartChart.prototype.setDataSuiteFormatSnapshot: 'Visualizations' array should contain at least one 'Chart' entry");
			return;
		}
		if (this._oPersController) {
			var oPersistentDataVariant = (this._oVariantManagement && oUIState.getVariantName()) ? this._oVariantManagement.getVariantContent(this, oUIState.getVariantName()) : {};
			this._oPersController.setDataSuiteFormatSnapshot(jQuery.extend(true, {}, oUIState.getPresentationVariant(), oUIState.getSelectionVariant()), oPersistentDataVariant);
		}

		// TODO what is about MaxItems? How should it be set into oChart? Do we need a rebind for it?
		// TODO Do we need a rebind after 'InResult' is set?
		if (oUIState.getPresentationVariant()) {
			this._oChart.setInResultDimensions(oUIState.getPresentationVariant().RequestAtLeast);
		}
	};

	SmartChart.prototype.setRequestAtLeastFields = function(sRequestAtLeastFields) {
		this.setProperty("requestAtLeastFields", sRequestAtLeastFields);
		if (this._oChart) {
			this._updateInResultDimensions();
		}
	};

	SmartChart.prototype._getInResultDimensionTotal = function() {
		var aInResultDimensions = [];

		// From requestAtLeast property
		if (this.getRequestAtLeastFields()) {
			aInResultDimensions = this.getRequestAtLeastFields().split(",");
		}
		// From presentationVariant
		aInResultDimensions = aInResultDimensions.concat(this._aAlwaysSelect);
		// From inner chart inResultDimension property
		aInResultDimensions = aInResultDimensions.concat(this.getChart().getInResultDimensions());
		// Get rid of double entries
		return aInResultDimensions.filter(function(elem, index, self) {
			return index == self.indexOf(elem);
		});
	};

	SmartChart.prototype._getFieldTooltip = function(sKey) {
		var oField = this._getFieldByKey(sKey);
		if (oField) {
			return oField.quickInfo;
		}

		return "";
	};
	SmartChart.prototype._getFieldByKey = function(sKey) {

		var i, oField = null;

		if (this._oChartViewMetadata && this._oChartViewMetadata.fields) {
			for (i = 0; i < this._oChartViewMetadata.fields.length; i++) {

				oField = this._oChartViewMetadata.fields[i];
				if (sKey === oField.name) {
					return oField;
				}
			}

			return null;
		}
	};

	/**
	 * Returns the column for the given column key
	 *
	 * @param {array} aArray list of chart objects
	 * @param {string} sKey - the column key for the required column
	 * @returns {object} The found column or null
	 * @private
	 */
	SmartChart.prototype._getByKey = function(aArray, sKey) {
		var i, iLength, oCharObj, oCustomData;

		if (aArray) {
			iLength = aArray.length;
			for (i = 0; i < iLength; i++) {
				oCharObj = aArray[i];
				oCustomData = oCharObj.data("p13nData");
				if (oCustomData && oCustomData.columnKey === sKey) {
					return oCharObj;
				}
			}
		}

		return null;
	};

	SmartChart.prototype._getDimensionByKey = function(sKey) {
		if (this._oChart) {
			return this._getByKey(this._oChart.getDimensions(), sKey);
		}

		return null;
	};

	SmartChart.prototype._getMeasureByKey = function(sKey) {
		if (this._oChart) {
			return this._getByKey(this._oChart.getMeasures(), sKey);
		}

		return null;
	};

	SmartChart.prototype._getChartObjByKey = function(sKey) {
		var oChartObj = this._getDimensionByKey(sKey);
		if (!oChartObj) {
			oChartObj = this._getMeasureByKey(sKey);
		}

		return oChartObj;
	};

	/**
	 * Retrieves the path for the specified property and column key from the array of table columns
	 *
	 * @param {string} sColumnKey - the column key specified on the table
	 * @param {string} sProperty - the property path that needs to be retrieved from the column
	 * @returns {string} The path that can be used by sorters, filters etc.
	 * @private
	 */
	SmartChart.prototype._getPathFromColumnKeyAndProperty = function(sColumnKey, sProperty) {
		var sPath = null, oChartObj, oCustomData;
		oChartObj = this._getChartObjByKey(sColumnKey);

		// Retrieve path from the property
		if (oChartObj) {
			oCustomData = oChartObj.data("p13nData");
			if (oCustomData) {
				sPath = oCustomData[sProperty];
			}
		}

		return sPath;
	};

	/**
	 * returns the current filter and sorting options from the table personalisation/variants
	 *
	 * @private
	 * @returns {object} current variant's filter and sorting options
	 */
	SmartChart.prototype._getChartPersonalisationData = function() {
		if (!this._oCurrentVariant) {
			return null;
		}
		var aSorters = [], aFilters = [], aExcludeFilters = [], oExcludeFilters, aSortData, sPath;

		// Sort handling
		if (this._oCurrentVariant.sort) {
			aSortData = this._oCurrentVariant.sort.sortItems;
		} else {
			aSortData = this._aInitialSorters;
		}

		if (aSortData) {
			aSortData.forEach(function(oModelItem) {
				var bDescending = oModelItem.operation === "Descending";
				sPath = oModelItem.columnKey;
				aSorters.push(new sap.ui.model.Sorter(sPath, bDescending));

			}, this);
		}

		// Filter Handling
		if (this._oCurrentVariant.filter) {
			this._oCurrentVariant.filter.filterItems.forEach(function(oModelItem) {
				var oValue1 = oModelItem.value1, oValue2 = oModelItem.value2;
				// Filter path has be re-calculated below
				sPath = oModelItem.columnKey;

				if (oValue1 instanceof Date && this._oChartProvider && this._oChartProvider.getIsUTCDateHandlingEnabled()) {
					oValue1 = FilterProvider.getDateInUTCOffset(oValue1);
					oValue2 = oValue2 ? FilterProvider.getDateInUTCOffset(oValue2) : oValue2;
				}
				if (oModelItem.exclude) {
					aExcludeFilters.push(new Filter(sPath, FilterOperator.NE, oValue1));
				} else {
					aFilters.push(new Filter(sPath, oModelItem.operation, oValue1, oValue2));
				}
			}, this);

			if (aExcludeFilters.length) {
				oExcludeFilters = new Filter(aExcludeFilters, true);
			}
		}

		return {
			filters: aFilters,
			excludeFilters: oExcludeFilters,
			sorters: aSorters
		};
	};

	/**
	 * triggers (hidden) VariantManagementControl to persist personalisation this function is called in case no VariantManagementControl is used
	 *
	 * @private
	 */
	SmartChart.prototype._persistPersonalisation = function() {
		var that = this;
		if (this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
			this._oVariantManagement.getVariantsInfo(function(aVariants) {
				var sPersonalisationVariantKey = null;
				if (aVariants && aVariants.length > 0) {
					sPersonalisationVariantKey = aVariants[0].key;
				}

				var bOverwrite = sPersonalisationVariantKey !== null;

				var oParams = {
					name: "Personalisation",
					global: false,
					overwrite: bOverwrite,
					key: sPersonalisationVariantKey,
					def: true
				};
				that._oVariantManagement.fireSave(oParams);
			});
		}
	};

	/**
	 * Returns the ID of the currently selected variant.
	 *
	 * @public
	 * @returns {string} ID of the currently selected variant
	 */
	SmartChart.prototype.getCurrentVariantId = function() {
		var sKey = "";

		if (this._oVariantManagement) {
			sKey = this._oVariantManagement.getCurrentVariantId();
		}

		return sKey;
	};

	/**
	 * Applies the current variant based on the sVariantId parameter. If an empty string or null or undefined have been passed, the standard variant
	 * will be used. The standard variant will also be used if the passed sVariantId cannot be found. If the flexibility variant, the content for the
	 * standard variant, or the personalizable control cannot be obtained, no changes will be made.
	 *
	 * @public
	 * @param {string} sVariantId ID of the currently selected variant
	 */
	SmartChart.prototype.setCurrentVariantId = function(sVariantId) {
		if (this._oVariantManagement && !this._oVariantManagement.isPageVariant()) {
			this._oVariantManagement.setCurrentVariantId(sVariantId);
		} else {
			jQuery.sap.log.error("sap.ui.comp.smartchart.SmartChart.prototype.setCurrentVariantId: VariantManagement does not exist or is a page variant");
		}
	};

	SmartChart.prototype._adjustHeight = function() {
		// only if chart is not in full screen
		if (this._oChart && !this.bFullScreen) {
			var iToolbarHeight = 0, iBreadCrumbsHeight = 0;
			// Only save height when not in full-screen mode
			var iHeight = this.getDomRef() ? this.getDomRef().offsetHeight : 0;

			if (iHeight === 0) {
				return;
			}

			if (this._oToolbar && this._oToolbar.getDomRef()) {
				iToolbarHeight = this._oToolbar.getDomRef().offsetHeight;
			}

			if (this._oDrillBreadcrumbs && this._oDrillBreadcrumbs.getDomRef()) {
				//breadcrumbs are rendered inside a div and have margins
				var oBreadcrumbsNode = this._oDrillBreadcrumbs.getDomRef().parentNode ? this._oDrillBreadcrumbs.getDomRef().parentNode : this._oDrillBreadcrumbs.getDomRef();
				iBreadCrumbsHeight = oBreadcrumbsNode.offsetHeight;
			}

			// store old chart Height
			this._iChartHeight = iHeight - iToolbarHeight - iBreadCrumbsHeight;
			this._oChart.setHeight(this._iChartHeight + "px");
			// update breadcrumbs in order to react on size changes of the window
			// TODO: Evaluate for a more lightweight solution in the future.
			this._updateDrillBreadcrumbs();
			// If overlay is active, it need to be set again because of setHeight on oChart
			if (this._hasOverlay) {
				setTimeout(function() {
					this._showOverlay(true);
				}.bind(this), 0);
			}
		}
	};

	SmartChart.prototype._toggleFullScreen = function(bValue, bForced) {
		if (!this.oFullScreenButton || (bValue === this.bFullScreen && !bForced)) {
			return;
		}

		this.bFullScreen = bValue;
		if (!this._oFullScreenUtil) {
			this._oFullScreenUtil = sap.ui.requireSync("sap/ui/comp/util/FullScreenUtil");
		}
		this._oFullScreenUtil.toggleFullScreen(this, this.bFullScreen, this.oFullScreenButton, this._toggleFullScreen.bind(this, false));

		this._renderFullScreenButton();
		// Fire the fullScreen Event
		this.fireFullScreenToggled({
			fullScreen: bValue
		});

		if (this._oChart) {
			var sHeight = this.bFullScreen ? "100%" : (this._iChartHeight + "px");
			this._oChart.setHeight(sHeight);

			// only process height adjustment when chart is not in full screen mode
			// otherwise the 100% does the adjustment
			this._processResizeHandler(!this.bFullScreen);
		}
	};

	/**
	 * Renders the look and feel of the full screen button
	 */
	SmartChart.prototype._renderFullScreenButton = function() {
		this.oFullScreenButton.setTooltip(this.bFullScreen ? this._oRb.getText("CHART_MINIMIZEBTN_TOOLTIP") : this._oRb.getText("CHART_MAXIMIZEBTN_TOOLTIP"));
		this.oFullScreenButton.setText(this.bFullScreen ? this._oRb.getText("CHART_MINIMIZEBTN_TEXT") : this._oRb.getText("CHART_MAXIMIZEBTN_TEXT"));
		this.oFullScreenButton.setIcon(this.bFullScreen ? "sap-icon://exit-full-screen" : "sap-icon://full-screen");
	};

	/**
	 * Enriches the chart with data point information.
	 *
	 * @param {array} aDataPoints collection of data points and measures
	 * @private
	 */
	SmartChart.prototype._enrichFromDataPoints = function(aDataPoints) {
		var iLen = aDataPoints.length;

		var aColoringMeasures = [];

		var oMeasureValues = {};

		for (var i = 0; i < iLen; i++) {
			this._interpretDataPoint(aDataPoints[i].dataPoint, aDataPoints[i].measure, oMeasureValues, aColoringMeasures);
		}

		// switch the coloring
		if (aColoringMeasures.length > 0) {
			this._oChart.setActiveColoring({
				coloring: sap.chart.ColoringType.Criticality,
				parameters: {
					measure: aColoringMeasures
				}
			});

			this._oChart.setColorings({
				Criticality: {
					MeasureValues: oMeasureValues
				}
			});
		}
	};

	/**
	 * Interprets the data point information to patterns, boundaries and coloring.
	 *
	 * @param {object} oDataPoint UI.DataPoint annotation
	 * @param {object} oMeasure current measure
	 * @param {object} oMeasureValues current criticality measure values to enhance
	 * @param {array} aColoringMeasures array containing all measures for which coloring should be updated
	 * @returns {boolean} <code>true</code> if coloring for the current measure is set
	 * @private
	 */
	SmartChart.prototype._interpretDataPoint = function(oDataPoint, oMeasure, oMeasureValues, aColoringMeasures) {
		this._setSemanticPatterns(oDataPoint, oMeasure);

		if (oMeasure.setBoundaryValues) {
			this._setBoundaryValues(oDataPoint, oMeasure);
		}

		// semantic coloring
		if (oDataPoint.Criticality || oDataPoint.CriticalityCalculation) {
			oMeasureValues[oDataPoint.Value.Path] = this._oChartProvider.provideSemanticColoring(oDataPoint);
			aColoringMeasures.push(oDataPoint.Value.Path);
		}

	};

	/**
	 * Sets the semantic patterns for the UI.DataPoint annotation
	 *
	 * @param {object} oDataPoint UI.DataPoint annotation
	 * @Param {object} oMeasure current measure
	 * @private
	 */
	SmartChart.prototype._setSemanticPatterns = function(oDataPoint, oMeasure) {
		// semantic patterns
		var sReferenceMeasureName = oDataPoint.TargetValue ? oDataPoint.TargetValue.Path : null;
		var sProjectedMeasureName = oDataPoint.ForecastValue ? oDataPoint.ForecastValue.Path : null;

		oMeasure.setSemantics(sap.chart.data.MeasureSemantics.Actual);

		if (sReferenceMeasureName != null) {
			var oReferenceMeasure = this._oChart.getMeasureByName(sReferenceMeasureName);
			if (oReferenceMeasure) {
				oReferenceMeasure.setSemantics(sap.chart.data.MeasureSemantics.Reference);
			} else {
				jQuery.sap.log.error("sap.ui.comp.SmartChart: " + oDataPoint.TargetValue.Path + " is not a valid measure");
			}
		}
		if (sProjectedMeasureName) {
			var oProjectionMeasure = this._oChart.getMeasureByName(sProjectedMeasureName);
			if (oProjectionMeasure) {
				oProjectionMeasure.setSemantics(sap.chart.data.MeasureSemantics.Projected);
			} else {
				jQuery.sap.log.error("sap.ui.comp.SmartChart: " + oDataPoint.ForecastValue.Path + " is not a valid measure");
			}
		}

		oMeasure.setSemanticallyRelatedMeasures({
			referenceValueMeasure: sReferenceMeasureName,
			projectedValueMeasure: sProjectedMeasureName
		});

	};

	/**
	 * Sets the boundary values for the UI.DataPoint annotation.
	 *
	 * @param {object} oDataPoint UI.DataPoint annotation
	 * @Param {object} oMeasure current measure
	 * @private
	 */
	SmartChart.prototype._setBoundaryValues = function(oDataPoint, oMeasure) {
		var oBoundaryValues = {};

		if (oDataPoint.MinimumValue) {
			oBoundaryValues.minimum = oDataPoint.MinimumValue;
		}
		if (oDataPoint.MaximumValue) {
			oBoundaryValues.maximum = oDataPoint.MaximumValue;
		}

		if (oBoundaryValues.minimum || oBoundaryValues.maximum) {
			oMeasure.setBoundaryValues(oBoundaryValues);
		}
	};

	/**
	 * Checks whether the control is initialized.
	 *
	 * @returns {boolean} returns whether the control is already initialized
	 * @protected
	 */
	SmartChart.prototype.isInitialised = function() {
		return !!this.bIsInitialised;
	};

	/**
	 * Cleans up the control.
	 *
	 * @protected
	 */
	SmartChart.prototype.exit = function() {

		this._oRb = null;

		if (this._oSmartFilter) {
			this._oSmartFilter.detachSearch(this._reBindChart, this);
			this._oSmartFilter.detachFilterChange(this._filterChangeEvent, this);
		}

		if (this._oChartProvider && this._oChartProvider.destroy) {
			this._oChartProvider.destroy();
		}
		this._oChartProvider = null;

		if (this._oPersController && this._oPersController.destroy) {
			this._oPersController.destroy();
		}

		if (this._oSegmentedButton) {
			this._oSegmentedButton.removeAllButtons();
			this._oButtonChart1.destroy();
			this._oButtonChart2.destroy();
			this._oButtonChart3.destroy();
			this._oButtonChart4.destroy();
			this._oButtonChart5.destroy();

			this._oButtonChart1 = null;
			this._oButtonChart2 = null;
			this._oButtonChart3 = null;
			this._oButtonChart4 = null;
			this._oButtonChart5 = null;
		}

		this._oPersController = null;
		if (this._oVariantManagement) {

			this._oVariantManagement.detachSave(this._variantSaved, this);
			this._oVariantManagement.detachAfterSave(this._variantAfterSave, this);

			if (!this._oVariantManagement.isPageVariant() && this._oVariantManagement.destroy) {
				this._oVariantManagement.destroy();
			}
		}
		this._oVariantManagement = null;

		this._destroyPopover();

		if (this._oFullScreenUtil) {
			this._oFullScreenUtil.cleanUpFullScreen(this);
			this._oFullScreenUtil = null;
		}

		if (this._oDetailsPopover) {
			this._oDetailsPopover.destroy();
			// This is not part of the popover until we have several semantic objects resolved for
			// a selected data point
			if (this._oRelatedAppsMasterList) {
				this._oRelatedAppsMasterList.destroy();
			}
		}

		this._processResizeHandler(false);

		this._oCurrentVariant = null;
		this._oApplicationDefaultVariant = null;
		this._oChartViewMetadata = null;
		this._aAlwaysSelect = null;
		this._aInitialSorters = null;
		this._oSmartFilter = null;
		this._oToolbar = null;
		this._oChartPersonalisationButton = null;
		this._oView = null;
		this._oChart = null;
	};

	/**
	 * Process the attaching of the resize handler to the smart chart
	 *
	 * @param {boolen} bAttach If set to <code>true</code> the resize handler is attached, if set to <code>false</code> if is detached
	 * @private
	 */
	SmartChart.prototype._processResizeHandler = function(bAttach) {
		if (bAttach) {
			this.sResizeListenerId = null;
			if (Device.system.desktop) {
				this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this, this._adjustHeight.bind(this));
			} else {
				Device.orientation.attachHandler(this._adjustHeight, this);
				Device.resize.attachHandler(this._adjustHeight, this);
			}
		} else {
			if (Device.system.desktop && this.sResizeListenerId) {
				sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
				this.sResizeListenerId = null;
			} else {
				Device.orientation.detachHandler(this._adjustHeight, this);
				Device.resize.detachHandler(this._adjustHeight, this);
			}
		}
	};

	return SmartChart;

}, /* bExport= */true);

}; // end of sap/ui/comp/smartchart/SmartChart.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartMicroChart') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartmicrochart.SmartAreaMicroChart.
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartmicrochart/SmartMicroChart",[ 'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Control', 'sap/ui/comp/providers/ChartProvider', 'sap/suite/ui/microchart/library', 'sap/ui/core/CustomData' ],
	function(jQuery, CompLibrary, Control, ChartProvider, MicroChartLibrary, CustomData) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.comp.smartmicrochart/SmartMicroChart.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartMicroChart control creates a chart based on OData metadata and the configuration specified by <code>mSettings</code>.
	 * The entitySet property must be specified in order to use the control. This property is used to fetch metadata and
	 * annotation information from the given default OData model. Depending on the UI/ChartType annotation, the control
	 * creates a corresponding <code>SmartAreaMicroChart</code>, <code>SmartBulletMicroChart</code> or <code>SmartRadialMicroChart</code> instance and delegates to the internal control.
	 *        <br>
	 * <b><i>Note:</i></b> Most of the attributes are not dynamic and cannot be changed once the control has been initialized.
	 * @extends sap.ui.core.Control
	 * @version 1.50.6
	 * @since 1.38
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartmicrochart.SmartMicroChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartMicroChart = Control.extend("sap.ui.comp.smartmicrochart.SmartMicroChart", /** @lends sap.ui.comp.smartmicrochart.SmartMicroChart.prototype */ {
		metadata : {

			library : "sap.ui.comp",
			designTime: true,
			properties : {

				/**
				 * The entity set name to fetch data and create the internal chart representation from.
				 * Note that this is not a dynamic UI5 property.
				 */
				entitySet : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Determines if any label is shown or not
				 */
				showLabel: {
					type: "boolean",
					group : "Appearance",
					defaultValue: true
				},

				/**
				 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
				 * property.
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * This attribute can be used to specify the path that
				 * is used during the binding of the chart. If not
				 * specified, the entitySet attribute is used instead and also stored in this property.
				 * Calling <code>bindElement</code> binds the control and sets this property.
				 */
				chartBindingPath : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Specifies the type of chart. Note that this property is read-only.
				 */
				chartType : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Defines the width.
				 */
				width : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : "164px"},

				/**
				 * Defines the height.
				 */
				height : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : "74px"},

				/**
	 			 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed.
	 			 * <code>width</code> and <code>height</code> properties are ignored in such case.
				 */
				isResponsive: {type: "boolean", group: "Appearance", defaultValue: false}
			},
			defaultAggregation : "_chart",
			aggregations : {
				/**
				 * This private aggregation is used for the internal instance of Smart<*>MicroChart.
				 */
				_chart : {
					type : "sap.ui.core.Control",
					multiple : false,
					visibility : "hidden"
				}
			},
			associations : {
				/**
				 * If the associated control is provided, its <code>text</code> property is set to the Title property of the Chart annotation.
				 * Title property of the DataPoint annotation is ignored.
				 */
				chartTitle : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				},
				/**
				 * If the associated control is provided, its <code>text</code> property is set to the Description property of the Chart annotation.
				 * Description property of the DataPoint annotation is ignored.
				 */
				chartDescription : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				},
				/**
				 * If the associated control is provided, its <code>text</code> property is set to the Unit of Measure. The Value property of the DataPoint annotation should be annotated with this Unit of Measure. It can be either ISOCurrency or Unit from the OData Measures annotations.
				 */
				unitOfMeasure : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				},

				/**
				 * If the associated control is provided, its <code>text</code> property is set to the free text provided by annotations.
				 * The Value property of the DataPoint annotation should be annotated with this free text.
				 * As of 1.42.0, this association is only available for chart type 'Donut'.
				 *
				 * @since 1.42.0
				 */
				freeText : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				}
			},
			events : {

				/**
				 * Event fired once the control has been initialized.
				 */
				initialize : {}
			}
		}
	});

	SmartMicroChart.prototype.init = function() {
		this._bIsinitialized = false;
		this._bMetaModelLoadAttached = false;
	};

	/**
	 * @private
	 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Returns <code>this</code> to allow method chaining
	 */
	SmartMicroChart.prototype.setChartType = function() {
		return this;
	};

	SmartMicroChart.prototype.getChartType = function() {
		return this.getAggregation("_chart").getChartType();
	};

	SmartMicroChart.prototype.propagateProperties = function() {
		if (Control.prototype.propagateProperties) {
			Control.prototype.propagateProperties.apply(this, arguments);
		}
		this._initializeMetadata();
	};

	SmartMicroChart.prototype.onBeforeRendering = function() {
		var oChart = this.getAggregation("_chart");
		if (oChart) {
			if (oChart.getMetadata().hasProperty("height")) {
				oChart.setProperty("height", this.getHeight(), true);
			}
			if (oChart.getMetadata().hasProperty("width")) {
				oChart.setProperty("width", this.getWidth(), true);
			}
			if (oChart.getMetadata().hasProperty("isResponsive")) {
				oChart.setProperty("isResponsive", this.getIsResponsive(), true);
				MicroChartLibrary._passParentContextToChild(this, oChart);
			}
			if (oChart.getMetadata().hasProperty("showLabel")) {
				oChart.setProperty("showLabel", this.getShowLabel(), true);
			}
			if (oChart.getMetadata().hasAssociation("chartTitle")) {
				oChart.setAssociation("chartTitle", this.getChartTitle(), true);
			}
			if (oChart.getMetadata().hasAssociation("chartDescription")) {
				oChart.setAssociation("chartDescription", this.getChartDescription(), true);
			}
			if (oChart.getMetadata().hasAssociation("unitOfMeasure")) {
				oChart.setAssociation("unitOfMeasure", this.getUnitOfMeasure(), true);
			}
			if (oChart.getMetadata().hasAssociation("freeText")) {
				oChart.setAssociation("freeText", this.getFreeText(), true);
			}
		}
	};

	/**
	 * Initializes the OData metadata necessary to create the chart.
	 * @private
	 */
	SmartMicroChart.prototype._initializeMetadata = function() {
		if (!this._bIsinitialized) {
			var oModel = this.getModel();
			if (oModel && (oModel.getMetadata().getName() === "sap.ui.model.odata.v2.ODataModel" || oModel.getMetadata().getName() === "sap.ui.model.odata.ODataModel") ) {
				if (!this._bMetaModelLoadAttached) {
					oModel.getMetaModel().loaded().then(this._onMetadataInitialized.bind(this));
					this._bMetaModelLoadAttached = true;
				}
			} else if (oModel) {
				// Could be a non-ODataModel or a synchronous ODataModel --> just create the necessary helpers
				this._onMetadataInitialized();
			}
		}
	};

	/**
	 * Creates an instance of the chart provider
	 * @private
	 */
	SmartMicroChart.prototype._createChartProvider = function() {
		var sEntitySetName = this.getEntitySet(), oModel = this.getModel();
		// The SmartAreaMicroChart might also needs to work for non ODataModel models; hence we now create the chart
		// independent of ODataModel.
		if (oModel && sEntitySetName) {
			this._oChartProvider = new ChartProvider({
				entitySet : sEntitySetName,
				model : oModel,
				chartQualifier : this.data("chartQualifier")
			});
		}
	};

	/**
	 * Called once the necessary Model metadata is available
	 * @private
	 */
	SmartMicroChart.prototype._onMetadataInitialized = function() {
		this._bMetaModelLoadAttached = false;
		if (!this._bIsinitialized) {
			this._createChartProvider();
			if (this._oChartProvider) {
				this._oChartViewMetadata = this._oChartProvider.getChartViewMetadata();
				if (this._oChartViewMetadata) {
					this._bIsinitialized = true;
					this._createInnerChart();
					this.invalidate();
				}
			}
		}
	};

	/**
	 * Determines which type of chart should be created depending on the ChartType annotation and creates required chart, e.g. SmartBulletChart or SmartAreaChart.
	 * @private
	 */
	SmartMicroChart.prototype._createInnerChart = function() {
		if (!this._checkChartMetadata()) {
			jQuery.sap.log.error("Created annotations not valid. Please review the annotations and metadata.");
			return;
		}

		var sChartType = this._oChartViewMetadata.chartType;
		switch (sChartType) {
			case "line" :
			case "area" :
				var sType = this._oChartViewMetadata.annotation.ChartType.EnumMember.split("/").pop().toLowerCase();
				if (sType === "area" || sType === "line") {
					this._buildSmartAreaMicroChart();
				} else {
					jQuery.sap.log.error("Not supported chart type used.");
				}
				break;
			case "bullet" :
				this._buildSmartBulletMicroChart();
				break;
			case "donut" :
				this._buildSmartRadialMicroChart();
				break;
			default :
				jQuery.sap.log.error("Not supported chart type used.");
				break;
		}
	};

	/**
	 * Constructs an instance of SmartAreaMicroChart and sets it in _chart aggregation.
	 * @private
	 */
	SmartMicroChart.prototype._buildSmartAreaMicroChart = function () {
		this.setAggregation("_chart", new CompLibrary.smartmicrochart.SmartAreaMicroChart({
			entitySet : this.getEntitySet(),
			chartBindingPath : this.getChartBindingPath(),
			enableAutoBinding : this.getEnableAutoBinding(),
			showLabel : this.getShowLabel(),
			initialize : [this._onChartInitialized, this],
			customData : [new CustomData({
				key : "chartQualifier",
				value : this.data("chartQualifier")
			})]
		}), true);
	};

	/**
	 * Constructs an instance of SmartBulletMicroChart and sets it in _chart aggregation.
	 * @private
	 */
	SmartMicroChart.prototype._buildSmartBulletMicroChart = function () {
		this.setAggregation("_chart", new CompLibrary.smartmicrochart.SmartBulletMicroChart({
			entitySet : this.getEntitySet(),
			chartBindingPath : this.getChartBindingPath(),
			enableAutoBinding : this.getEnableAutoBinding(),
			showLabel : this.getShowLabel(),
			initialize : [this._onChartInitialized, this],
			customData : [new CustomData({
				key : "chartQualifier",
				value : this.data("chartQualifier")
			})]
		}), true);
	};

	/**
	 * Constructs an instance of SmartRadialMicroChart and sets it in _chart aggregation.
	 * @private
	 */
	SmartMicroChart.prototype._buildSmartRadialMicroChart = function () {
		this.setAggregation("_chart", new CompLibrary.smartmicrochart.SmartRadialMicroChart({
			entitySet : this.getEntitySet(),
			chartBindingPath : this.getChartBindingPath(),
			enableAutoBinding : this.getEnableAutoBinding(),
			initialize : [this._onChartInitialized, this],
			customData : [new CustomData({
				key : "chartQualifier",
				value : this.data("chartQualifier")
			})]
		}), true);
	};

	/**
	 * Fires the initialize event once the chart has been initialized.
	 * @private
	 * @returns {void}
	 */
	SmartMicroChart.prototype._onChartInitialized = function() {
		this.fireInitialize();
	};

	/**
	 * Executes a validity check of the metadata of the chart, necessary to create the inner chart.
	 * In particular, checks if the chart type annotation is available in the proper format.
	 * @returns {boolean} True if the metadata of the chart is valid, otherwise false.
	 * @private
	 */
	SmartMicroChart.prototype._checkChartMetadata = function() {
			if (this._oChartViewMetadata.chartType && this._oChartViewMetadata.annotation &&
					this._oChartViewMetadata.annotation.ChartType &&
					this._oChartViewMetadata.annotation.ChartType.EnumMember &&
					this._oChartViewMetadata.annotation.ChartType.EnumMember.length > 0) {
			return true;
		} else {
			return false;
		}
	};

	return SmartMicroChart;
});

}; // end of sap/ui/comp/smartmicrochart/SmartMicroChart.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartMicroChartCommons') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartMicroChartCommons'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define('sap/ui/comp/smartmicrochart/SmartMicroChartCommons',
	[ 'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/comp/providers/ChartProvider', 'sap/m/ValueColor', 'sap/ui/core/format/NumberFormat', 'sap/ui/core/format/DateFormat', 'sap/ui/model/type/Date' ],
	function(jQuery, library, ChartProvider, ValueColor, NumberFormat, DateFormat, DateType) {
	"use strict";
	var Commons = {};

	Commons._MINIMIZE = "com.sap.vocabularies.UI.v1.ImprovementDirectionType/Minimize";
	Commons._MAXIMIZE = "com.sap.vocabularies.UI.v1.ImprovementDirectionType/Maximize";
	Commons._TARGET = "com.sap.vocabularies.UI.v1.ImprovementDirectionType/Target";

	/**
	 * Initializes the OData metadata necessary to create the chart.
	 * @private
	 */
	Commons._initializeMetadata = function() {
		if (!this._bIsInitialized) {
			var oModel = this.getModel();
			if (oModel && (oModel.getMetadata().getName() === "sap.ui.model.odata.v2.ODataModel" || oModel.getMetadata().getName() === "sap.ui.model.odata.ODataModel") ) {
				if (!this._bMetaModelLoadAttached) {
					oModel.getMetaModel().loaded().then(Commons._onMetadataInitialized.bind(this));
					this._bMetaModelLoadAttached = true;
				}
			} else if (oModel) {
				// Could be a non-ODataModel or a synchronous ODataModel --> just create the necessary helpers
				Commons._onMetadataInitialized.call(this);
			}
		}
	};

	/**
	 * Called once the necessary model metadata are available.
	 * @private
	 */
	Commons._onMetadataInitialized = function() {
		this._bMetaModelLoadAttached = false; //reset variable
		if (this._bIsInitialized) { //nothing to do if already initialized
			return;
		}

		Commons._createChartProvider.call(this);
		this._oChartViewMetadata = this._oChartProvider.getChartViewMetadata();
		this._oDataPointMetadata = this._oChartProvider.getChartDataPointMetadata();
		this._bIsInitialized = true; // Indicates the control is initialized and can be used
		this.fireInitialize();

		if (this.getEnableAutoBinding()) {
			if (this.getChartBindingPath()) {
				this.bindElement(this.getChartBindingPath());
			} else {
				jQuery.sap.log.error("The property chartBindingPath needs to be set in order for property enableAutoBinding to be applied.");
			}
		}

		if (Commons._checkChartMetadata.call(this)) {
			var sQualifier = Commons._getDataPointQualifier.call(this);
			// finds the DataPoint annotation in additionalAnnotations if the qualifier exists, otherwise point to the primaryAnnotation
			if (sQualifier) {
				this._oDataPointAnnotations = this._oDataPointMetadata.additionalAnnotations[sQualifier];
			} else {
				this._oDataPointAnnotations = this._oDataPointMetadata.primaryAnnotation;
			}

			if (Commons._checkDataPointAnnotation(this._oDataPointAnnotations)) {
				this._createAndBindInnerChart(); //only bind the chart if metadata and annotations are complete
			}
		} else {
			jQuery.sap.log.error("Created annotations not valid. Please review the annotations and metadata.");
		}
	};

	/**
	 * Cleans up instances that were created
	 * @private
	 */
	Commons._cleanup = function() {
		if (this._oDateType) { // Destroy the sap.ui.model.type.Date instance which is used to format values
			this._oDateType.destroy();
			this._oDateType = null;
		}
	};

	/**
	 * Creates an instance of the ChartProvider.
	 * @private
	 */
	Commons._createChartProvider = function() {
		var oModel, sEntitySetName;
		sEntitySetName = this.getEntitySet();
		oModel = this.getModel();

		// The SmartMicroChart might also need to work for non ODataModel models, so we now create the chart independent of ODataModel.
		if (oModel && sEntitySetName) {
			this._oChartProvider = new ChartProvider({
				entitySet : sEntitySetName,
				model : oModel,
				chartQualifier : this.data("chartQualifier")
			});
		} else {
			jQuery.sap.log.error("Property entitySet is not set or no model has been attached to the control.");
		}
	};

	/**
	 * Checks the validity of the Chart annotation.
	 * @private
	 * @returns {boolean} True if the metadata check was successful, otherwise false.
	 */
	Commons._checkChartMetadata = function() {
		if (jQuery.isEmptyObject(this._oChartViewMetadata) && jQuery.isEmptyObject(this._oDataPointMetadata)) {
			jQuery.sap.log.error("The Chart or DataPoint annotation is empty.");
			return false;
		}
		if (!this._oChartViewMetadata.fields || this._oChartViewMetadata.fields.length === 0) {
			jQuery.sap.log.error("No fields exist in the metadata.");
			return false;
		}
		if (Commons._hasMember(this, "_oChartViewMetadata.annotation.ChartType")) {
			return Commons._checkChartType.call(this);
		} else {
			jQuery.sap.log.error("The Chart annotation is invalid.");
			return false;
		}
	};

	/**
	 * Checks the validity of the ChartType in Chart annotation.
	 * @private
	 *
	 * @returns {boolean} True if the ChartType in Chart annotation is supported, otherwise false.
	 */
	Commons._checkChartType = function() {
		var aTypes = this._getSupportedChartTypes();
		for (var i = 0; i < aTypes.length; i++) {
			if (this._oChartViewMetadata.annotation.ChartType.EnumMember === "com.sap.vocabularies.UI.v1.ChartType/" + aTypes[i]) {
				return true;
			}
		}
		jQuery.sap.log.error("The ChartType property in the Chart annotation is not part of the list of valid types: \"" + aTypes.toString() + "\".");
		return false;
	};

	/**
	 * Gets the qualifier of DataPoint in Chart annotation
	 * @returns {string} If there are annotations with a valid DataPoint qualifier, the qualifier is
	 *                   returned. If no valid qualifier or no annotations are found, this function
	 *                   returns an empty string.
	 * @private
	 */
	Commons._getDataPointQualifier = function() {
		var oMeasureAttribute;

		if (!Commons._hasMember(this, "_oChartViewMetadata.annotation.MeasureAttributes.length") ||
			!this._oChartViewMetadata.annotation.MeasureAttributes.length) {
			return "";
		}

		oMeasureAttribute = this._oChartViewMetadata.annotation.MeasureAttributes[0];
		if (Commons._hasMember(oMeasureAttribute, "DataPoint.AnnotationPath")) {
			return (oMeasureAttribute.DataPoint.AnnotationPath.match(/\#([^\#]*)$/) || [])[1] || "";
		}
	};

	/**
	 * Checks the validity of the DataPoint annotation.
	 * @param {object} oDataPointAnnotations The DataPoint annotations as an object.
	 * @returns {boolean} True if the annotation check was successful, otherwise false.
	 * @private
	 */
	Commons._checkDataPointAnnotation = function(oDataPointAnnotations) {
		if (jQuery.isEmptyObject(oDataPointAnnotations)) {
			jQuery.sap.log.error("The DataPoint annotation is empty. Please check it!");
			return false;
		}
		// when the Value property does not exist in the DataPoint annotation object, return false
		if (Commons._hasMember(oDataPointAnnotations, "Value.Path")) {
			if (jQuery.isEmptyObject(oDataPointAnnotations.Criticality)) { //only check criticality calculation if no criticality is given directly
				Commons._checkCriticalityMetadata(oDataPointAnnotations.CriticalityCalculation);
			}
			return true; //return true even if no criticality was detected
		} else {
			jQuery.sap.log.error("The Value property does not exist in the DataPoint annotation. This property is essential for creating the smart chart.");
			return false;
		}
	};

	/**
	 * Checks the validity of the CriticalityCalculation annotation.
	 * @param {object} oCriticality The CriticalityCalculation annotation data.
	 * @returns {boolean} Returns true if the metadata check was successful, false otherwise.
	 * @private
	 */
	Commons._checkCriticalityMetadata = function(oCriticality) {
		if (jQuery.isEmptyObject(oCriticality)) {
			jQuery.sap.log.warning("The CriticalityCalculation property in DataPoint annotation is not provided.");
			return false;
		}
		if (Commons._hasMember(oCriticality, "ImprovementDirection.EnumMember")) {
			var sImprovementDirection = oCriticality.ImprovementDirection.EnumMember;

			switch (sImprovementDirection) {
			case Commons._MINIMIZE:
				return Commons._checkCriticalityMetadataForMinimize(oCriticality);
			case Commons._MAXIMIZE:
				return Commons._checkCriticalityMetadataForMaximize(oCriticality);
			case Commons._TARGET:
				return Commons._checkCriticalityMetadataForTarget(oCriticality);
			default:
				jQuery.sap.log.warning("The improvement direction in DataPoint annotation must be either Minimize, Maximize or Target.");
			}
		} else {
			jQuery.sap.log.warning("The ImprovementDirection property in DataPoint annotation is not provided.");
		}
		return false;
	};

	/**
	 * Checks the validity of the CriticalityCalculation annotation for Minimize improvement direction.
	 * @param {object} oCriticality
	 * @returns {boolean} Returns true if the metadata check was successful, false otherwise.
	 * @private
	 */
	Commons._checkCriticalityMetadataForMinimize = function(oCriticality) {
		if (!Commons._hasMember(oCriticality, "ToleranceRangeHighValue.Path")) {
			jQuery.sap.log.warning("The ToleranceRangeHighValue property in DataPoint annotation is missing for Minimize improvement direction.");
			return false;
		}
		if (!Commons._hasMember(oCriticality, "DeviationRangeHighValue.Path")) {
			jQuery.sap.log.warning("The DeviationRangeHighValue property in DataPoint annotation is missing for Minimize improvement direction.");
			return false;
		}
		return true;
	};

	/**
	 * Checks the validity of the CriticalityCalculation annotation for Maximize improvement direction.
	 * @param {object} oCriticality
	 * @returns {boolean} Returns true if the metadata check was successful, false otherwise.
	 * @private
	 */
	Commons._checkCriticalityMetadataForMaximize = function(oCriticality) {
		if (!Commons._hasMember(oCriticality, "ToleranceRangeLowValue.Path")) {
			jQuery.sap.log.warning("The ToleranceRangeLowValue property in DataPoint annotation is missing for Minimize improvement direction.");
			return false;
		}
		if (!Commons._hasMember(oCriticality, "DeviationRangeLowValue.Path")) {
			jQuery.sap.log.warning("The DeviationRangeLowValue property in DataPoint annotation is missing for Minimize improvement direction.");
			return false;
		}
		return true;
	};

	/**
	 * Checks the validity of the CriticalityCalculation annotation for Target improvement direction.
	 * @param {object} oCriticality
	 * @returns {boolean} Returns true if the metadata check was successful, false otherwise.
	 * @private
	 */
	Commons._checkCriticalityMetadataForTarget = function(oCriticality) {
		if (!Commons._hasMember(oCriticality, "ToleranceRangeLowValue.Path")) {
			jQuery.sap.log.warning("The DeviationRangeLowValue property in DataPoint annotation is missing for Target improvement direction.");
			return false;
		}
		if (!Commons._hasMember(oCriticality, "ToleranceRangeHighValue.Path")) {
			jQuery.sap.log.warning("The ToleranceRangeHighValue property in DataPoint annotation is missing for Target improvement direction.");
			return false;
		}
		if (!Commons._hasMember(oCriticality, "DeviationRangeLowValue.Path")) {
			jQuery.sap.log.warning("The ToleranceRangeLowValue property in DataPoint annotation is missing for Target improvement direction.");
			return false;
		}
		if (!Commons._hasMember(oCriticality, "DeviationRangeHighValue.Path")) {
			jQuery.sap.log.warning("The DeviationRangeHighValue property in DataPoint annotation is missing for Target improvement direction.");
			return false;
		}
		return true;
	};

	/**
	 * Retrieve the color for the respective criticality type.
	 * @param {string} type The full criticality type as defined in the vocabulary or just the EnumMember's name
	 * @return {sap.m.ValueColor} The color that is associated with the criticality type
	 * @private
	 */
	Commons._mapCriticalityTypeWithColor = function(type) {
		var sType;
		if (!type) {
			return ValueColor.Neutral;
		} else {
			sType = type.toString();
		}
		sType = (sType.match(/(?:CriticalityType\/)?([^\/]*)$/) || [])[1] || "";
		switch (sType) {
		case 'Negative':
		case '1':
			return ValueColor.Error;
		case 'Critical':
		case '2':
			return ValueColor.Critical;
		case 'Positive':
		case '3':
			return ValueColor.Good;
		default:
			return ValueColor.Neutral;
		}
	};

	/**
	 * Compile all criticality thresholds and decide for each case whether to use the binding path "Path"
	 * or set a number directly via "Decimal".
	 * @param {Object} oCC The criticality calculation data object from the annotations.
	 * @returns {Object} An object containing the parsed criticality thresholds.
	 * @private
	 */
	Commons._getThresholdValues = function(oCC) {
		var oThresholds = {},
				oContext = this.getBindingContext();

		for (var k in oCC) {
			if (oCC.hasOwnProperty(k) && k !== "ImprovementDirection") {
				oThresholds[k] = oCC[k].Path && oContext && oContext.getProperty(oCC[k].Path) || oCC[k].Decimal || 0;
			}
		}
		return oThresholds;
	};

	/**
	 * Determine the circle color for the 'Minimize' value of the ImprovementDirection of the DataPoint annotation
	 * @private
	 * @param {int} iValue The current value to be categorized.
	 * @param {int} iToleranceHigh The ToleranceHighValue from the annotations.
	 * @param {int} iDeviationHigh The DeviationHighValue from the annotations.
	 * @returns {sap.m.ValueColor} The ValueColor associated with the identified criticality
	 */
	Commons._getValueColorForMinimize = function(iValue, iToleranceHigh, iDeviationHigh) {
		if (iValue <= iToleranceHigh) {
			return Commons._mapCriticalityTypeWithColor("Positive");
		} else if (iValue > iToleranceHigh && iValue <= iDeviationHigh) {
			return Commons._mapCriticalityTypeWithColor("Critical");
		} else if (iValue > iDeviationHigh) {
			return Commons._mapCriticalityTypeWithColor("Negative");
		}
	};

	/**
	 * Determine and set the bar color for the 'Maximize' value of the ImprovementDirection of the DataPoint annotation
	 * @private
	 * @param {int} iValue The current value to be categorized.
	 * @param {int} iToleranceLow The ToleranceLowValue from the annotations.
	 * @param {int} iDeviationLow The DeviationLowValue from the annotations.
	 * @returns {sap.m.ValueColor} The ValueColor associated with the identified criticality
	 */
	Commons._getValueColorForMaximize = function(iValue, iToleranceLow, iDeviationLow) {
		if (iValue >= iToleranceLow) {
			return Commons._mapCriticalityTypeWithColor("Positive");
		} else if (iValue < iToleranceLow && iValue >= iDeviationLow) {
			return Commons._mapCriticalityTypeWithColor("Critical");
		} else if (iValue < iDeviationLow) {
			return Commons._mapCriticalityTypeWithColor("Negative");
		}
	};

	/**
	 * Determine and set the bar color for the 'Maximize' value of the ImprovementDirection of the DataPoint annotation
	 * @private
	 * @param {int} iValue The current value to be categorized.
	 * @param {int} iToleranceLow The ToleranceLowValue from the annotations.
	 * @param {int} iDeviationLow The DeviationLowValue from the annotations.
	 * @param {int} iToleranceHigh The ToleranceHighValue from the annotations.
	 * @param {int} iDeviationHigh The DeviationHighValue from the annotations.
	 * @returns {sap.m.ValueColor} The ValueColor associated with the identified criticality
	 */
	Commons._getValueColorForTarget = function(iValue, iToleranceLow, iDeviationLow, iToleranceHigh, iDeviationHigh) {
		if (iValue >= iToleranceLow && iValue <= iToleranceHigh) {
			return Commons._mapCriticalityTypeWithColor("Positive");
		} else if ((iValue >= iDeviationLow && iValue < iToleranceLow) || (iValue > iToleranceHigh && iValue <= iDeviationHigh)) {
			return Commons._mapCriticalityTypeWithColor("Critical");
		} else if (iValue < iDeviationLow || iValue > iDeviationHigh) {
			return Commons._mapCriticalityTypeWithColor("Negative");
		}
	};

	/**
	 * ValueColor formatter function. This function uses the current model value and (optionally) the
	 * directly set criticality to determine the color of the chart it is called on.
	 * @param {float} iValue The current value in the model data.
	 * @param {string} sCriticality The directly set criticality string in the model data.
	 * @returns {sap.m.ValueColor} The corresponding ValueColor for the specified criticality.
	 * 								If no direct criticality is passed, Criticality Calculation is assumed to be required.
	 * 								Defaults to "Neutral" for invalid parameters.
	 * @private
	 */
	Commons._getValueColor = function(iValue, sCriticality) {
		var oCC = this._oDataPointAnnotations.CriticalityCalculation,
			oThresholds,
			sColor;

		iValue = parseFloat(iValue) || 0;

		if (typeof sCriticality === "string") { //directly set criticality has priority
			sColor = Commons._mapCriticalityTypeWithColor(sCriticality);
		} else if (oCC && typeof iValue !== "undefined" && iValue !== null) {
			oThresholds = Commons._getThresholdValues.call(this, oCC);
			sColor = Commons._criticalityCalculation(iValue, oCC.ImprovementDirection.EnumMember, oThresholds);
		}
		return sColor || Commons._mapCriticalityTypeWithColor();
	};

	/**
	 * Uses the current value and criticality thresholds to determine the color of top labels of the chart.
	 * @param {float} value The current value in the model data
	 * @param {object} data A data object to be used for getting criticality threshold values
	 * @returns {sap.m.ValueColor} The corresponding ValueColor for the specified criticality and ImprovementDirection.
	 * @private
	 */
	Commons._getTopLabelColor = function(value, data) {
		var oCC = this._oDataPointAnnotations.CriticalityCalculation,
			iValue = parseFloat(value) || 0,
			oThresholds = {},
			sColor;

		for (var k in oCC) {
			if (oCC.hasOwnProperty(k) && k !== "ImprovementDirection") {
				oThresholds[k] = data[oCC[k].Path];
			}
		}
		if (oCC && typeof iValue !== "undefined" && iValue !== null) {
			sColor = Commons._criticalityCalculation(iValue, oCC.ImprovementDirection.EnumMember, oThresholds);
		}
		return sColor;
	};

	/**
	 * Determines and returns the semantic color based on ImprovementDirection and criticality thresholds of the DataPoint annotation
	 * @param {float} value The current value to be categorized
	 * @param {string} improvementDirection The improvementDirection from the annotations
	 * @param {object} thresholds The threshold values for calculation
	 * @returns {sap.m.ValueColor} The ValueColor associated with the identified criticality
	 * @private
	 */
	Commons._criticalityCalculation = function(value, improvementDirection, thresholds) {
		var sColor;
		switch (improvementDirection) {
			case Commons._MINIMIZE:
				sColor = Commons._getValueColorForMinimize(value, thresholds.ToleranceRangeHighValue, thresholds.DeviationRangeHighValue);
				break;
			case Commons._MAXIMIZE:
				sColor = Commons._getValueColorForMaximize(value, thresholds.ToleranceRangeLowValue, thresholds.DeviationRangeLowValue);
				break;
			case Commons._TARGET:
				sColor = Commons._getValueColorForTarget(value, thresholds.ToleranceRangeLowValue, thresholds.DeviationRangeLowValue,
						thresholds.ToleranceRangeHighValue, thresholds.DeviationRangeHighValue);
				break;
			default:
				jQuery.sap.log.warning("The improvement direction in DataPoint annotation must be either Minimize, Maximize or Target.");
		}
		return sColor;
	};

	Commons._ASSOCIATIONS = [ "chartTitle", "chartDescription", "unitOfMeasure", "freeText" ];
	Commons._ASSOCIATIONS_ANNOTATIONS_MAP = {
		"chartDescription": "Description",
		"chartTitle": "Title",
		"unitOfMeasure": {
			propertyAnnotationPath: "Value",
			propertyAnnotationProperties: [ "ISOCurrency", "Unit" ]
		},
		"freeText": {
			propertyAnnotationPath: "Value",
			propertyAnnotationProperties: [ "Label" ]
		}
	};

	/**
	 * Get the annotation for a specified association.
	 * @param {string} association The association the annotations should be retrieved for.
	 *                             This association has to be mapped in _ASSOC_ANNOT_MAP.
	 * @returns {object} Returns an object containing the annotation for the specified association.
	 *                   If invalid data is encountered, an empty object is returned.
	 * @private
	 */
	Commons._getAnnotation = function(association) {
		var oAnnotation = Commons._ASSOCIATIONS_ANNOTATIONS_MAP[association];
		if (!oAnnotation) {
			jQuery.sap.log.warning("No annotation connected to association \"" + association + "\".");
			return {};
		}

		if (!jQuery.isEmptyObject(this._oChartViewMetadata) && typeof oAnnotation === "string") {
			return this._oChartViewMetadata.annotation[oAnnotation];
		}
		if (!jQuery.isEmptyObject(this._oDataPointAnnotations) &&
				Commons._hasMember(oAnnotation, "propertyAnnotationPath") &&
				Commons._hasMember(oAnnotation, "propertyAnnotationProperties")) {
			var oPropertyAnnotation;
			if (Commons._hasMember(this._oDataPointAnnotations, oAnnotation.propertyAnnotationPath + ".Path")) {
				oPropertyAnnotation = Commons._getPropertyAnnotation.call(this, this._oDataPointAnnotations[oAnnotation.propertyAnnotationPath].Path);
			}
			if (oPropertyAnnotation) {
				return Commons._getValueFromPropertyAnnotation(oPropertyAnnotation, oAnnotation.propertyAnnotationProperties);
			}
		}
		return {};
	};

	/**
	 * Retrieve the first value in the property annotation of a previously determined annotation
	 * term (e.g. ISOCurrency/Label/Unit).
	 * @param {object} oPropertyAnnotation The property annotation object with all annotation terms.
	 * @param {string[]} aProperties An array of all possible terms.
	 * @returns {object} Returns an object containing the annotation binding information (or a String),
	 *                   or an empty object if oPropertyAnnotation does not contain any terms.
	 * @private
	 */
	Commons._getValueFromPropertyAnnotation = function(oPropertyAnnotation, aProperties) {
		for (var sProp in oPropertyAnnotation) {
			for (var i = 0; i < aProperties.length; i++) {
				if (sProp.indexOf(aProperties[i]) > -1) {
					return oPropertyAnnotation[sProp];
				}
			}
		}
		return {};
	};

	/**
	 * Update a specified association on a control bound to this function's context using annotation
	 * data from Chart or DataPoint annotations. This includes re-binding or directly setting the
	 * associated control's text property.
	 * @param {string} associationName The name of the association to be updated.
	 * @param {object} data A data object to be used for setting association texts directly.
	 * @private
	 */
	Commons._updateAssociation = function (associationName, data) {
		var oAssociation, oAnnotation;

		if (this.getMetadata().hasAssociation(associationName)) {
			oAssociation = sap.ui.getCore().byId(this.getAssociation(associationName));
			if (oAssociation && oAssociation.getMetadata().hasProperty("text")) {
				oAnnotation = Commons._getAnnotation.call(this, associationName);
				Commons._setAssociationText(oAssociation, oAnnotation, data);
			}
		}
	};

	/**
	 * Update all of the control's special associations.
	 * @param {object} data A data object to be used for setting association texts directly.
	 * @private
	 */
	Commons._updateAssociations = function (data) {
		var n = Commons._ASSOCIATIONS.length;
		for (var i = 0; i < n; i++) {
			Commons._updateAssociation.call(this, Commons._ASSOCIATIONS[i], data);
		}
	};


	/**
	 * Update all of the chart labels.
	 * @param {object} data A data object to be used for setting label texts directly
	 * @param {string} position A string used to identify the first or last bound points
	 * @private
	 */
	Commons._updateChartLabels = function (data, position) {
		switch (position) {
			case "first":
				Commons._updateTopLabel.call(this, this._getLabelsMap()["leftTop"], data);
				Commons._updateBottomLabel.call(this, this._getLabelsMap()["leftBottom"], data);
				break;
			case "last":
				Commons._updateTopLabel.call(this, this._getLabelsMap()["rightTop"], data);
				Commons._updateBottomLabel.call(this, this._getLabelsMap()["rightBottom"], data);
				break;
		}
	};

	/**
	 * Update the top labels of chart.
	 * @param {string} aggregationName The name of the aggregation to be updated.
	 * @param {object} data A data object to be used for setting label texts directly.
	 * @private
	 */
	Commons._updateTopLabel = function (aggregationName, data) {
		var oLabel = this.getAggregation("_chart").getAggregation(aggregationName),
			iValue = data[this._oDataPointAnnotations.Value.Path],
			sColor = Commons._getTopLabelColor.call(this, iValue, data),
			oFormatter = Commons._getLabelNumberFormatter.call(this, this._oDataPointAnnotations.Value.Path),
			sFormattedValue;

		sFormattedValue = oFormatter.format(iValue);
		oLabel.setProperty("label", sFormattedValue, true);
		oLabel.setProperty("color", sColor, true);
	};

	/**
	 * Update the bottom labels of chart.
	 * @param {string} aggregationName The name of the aggregation to be updated
	 * @param {object} data A data object to be used for setting label texts directly
	 * @private
	 */
	Commons._updateBottomLabel = function (aggregationName, data) {
		var oAnnotation, oDimensionAnnotation, oLabel, sValue, sFormattedValue;

		oAnnotation = this._oChartViewMetadata.dimensionFields[0];
		if (oAnnotation) {
			sValue = data[oAnnotation];
			oLabel = this.getAggregation("_chart").getAggregation(aggregationName);

			oDimensionAnnotation = Commons._getPropertyAnnotation.call(this, this._oChartViewMetadata.dimensionFields[0]);
			if (oDimensionAnnotation.hasOwnProperty("sap:text") || oDimensionAnnotation.hasOwnProperty("com.sap.vocabularies.Common.v1.Text")) {
				var sPropertyName = oDimensionAnnotation["sap:text"] || oDimensionAnnotation["com.sap.vocabularies.Common.v1.Text"].Path;
				sFormattedValue = data[sPropertyName];
			} else {
				sFormattedValue = Commons._formatBottomLabel.call(this, sValue, oDimensionAnnotation);
			}

			if (sFormattedValue) {
				oLabel.setProperty("label", sFormattedValue, true);
			}
		}
	};

	/**
	 * Format values for bottom label.
	 * @param {string|number|Date} value The value needs to be formatted
	 * @returns {string} The formatted string or null
	 * @private
	 */
	Commons._formatBottomLabel = function(value, annotation) {
		var sPattern = Commons._getSemanticsPattern.call(this, annotation);
		if (sPattern) { // If semantic pattern exists then use it to format value
			return Commons._formatSemanticsValue.call(this, value, sPattern);
		}

		sPattern = Commons._getCalendarPattern.call(this, annotation);
		if (sPattern) { // If Calendar annotation exists then use it to format value
			return Commons._formatSemanticsValue.call(this, value, sPattern);
		}

		// If no pattern is available then format the value according to its type
		return Commons._formatDateAndNumberValue.call(this, value);
	};

	/**
	 * Formats the given value using the provided sap:semantics pattern.
	 * @param {string} value The value which needs to be formatted
	 * @param {string} pattern The pattern which is used to parse the value
	 * @returns {string} The formatted string or null
	 * @private
	 */
	Commons._formatSemanticsValue = function(value, pattern) {
		if (pattern) {
			if (this._oDateType) {
				this._oDateType.setFormatOptions({
					style: "short",
					source: {
						pattern: pattern
					}
				});
			} else {
				this._oDateType = new DateType({
					style: "short",
					source: {
						pattern: pattern
					}
				});
			}
			return this._oDateType.formatValue(value, "string");
		}
		return null;
	};

	/**
	 * Format values when they are date type or number type.
	 * @param {(string|number|Date)} value The value which needs to be formatted
	 * @returns {string} The formatted string or null
	 * @private
	 */
	Commons._formatDateAndNumberValue = function(value) {
		if (value instanceof Date) {
			return Commons._getLabelDateFormatter.call(this).format(value);
		} else if (!isNaN(value)) {
			return Commons._getLabelNumberFormatter.call(this, this._oChartViewMetadata.dimensionFields[0]).format(value);
		} else {
			return null;
		}
	};

	/**
	 * Checks if the annotation of the given property contains sap:semantics, and returns the semantic pattern to parse the value
	 * @param {object} annotation The annotation of a property
	 * @returns {string} The pattern which is used for parsing the string or null
	 * @private
	 */
	Commons._getSemanticsPattern = function (annotation) {
		if (annotation.hasOwnProperty("sap:semantics")) {
			switch (annotation['sap:semantics']) {
			case "yearmonthday":
				return "yyyyMMdd";
			case "yearmonth":
				return "yyyyMM";
			case "year":
				return "yyyy";
			default:
				return null;
			}
		}
		return null;
	};

	Commons._CALENDAR_TERMS_PATTERNS = {
		"com.sap.vocabularies.Common.v1.IsCalendarYear": "yyyy",
		"com.sap.vocabularies.Common.v1.IsCalendarQuarter": "Q",
		"com.sap.vocabularies.Common.v1.IsCalendarMonth": "MM",
		"com.sap.vocabularies.Common.v1.IsCalendarWeek": "ww",
		"com.sap.vocabularies.Common.v1.IsCalendarDate": "yyyyMMdd",
		"com.sap.vocabularies.Common.v1.IsCalendarYearMonth": "yyyyMM"
	};

	/**
	 * Checks if the annotation of the given property contains calendar annotation terms, and returns the semantic pattern to parse the value.
	 * @param {object} annotation The annotation of a property
	 * @returns {string} The pattern which is used for parsing the string or null
	 * @private
	 */
	Commons._getCalendarPattern = function (annotation) {
		for (var sCalendarTerm in Commons._CALENDAR_TERMS_PATTERNS) {
			if (annotation.hasOwnProperty(sCalendarTerm)) {
				return Commons._CALENDAR_TERMS_PATTERNS[sCalendarTerm];
			}
		}
		return null;
	};

	/**
	 * Creates the number formatter instance with annotation data.
	 * @param {string} path The annotation path.
	 * @returns {sap.ui.core.format.NumberFormat} Formatter to display numbers uniformly.
	 * @private
	 */
	Commons._getLabelNumberFormatter = function (path) {
		var iPrecision = Commons._getPropertyAnnotation.call(this, path).precision || null;

		return NumberFormat.getInstance({
			style: "short",
			showScale: true,
			precision: iPrecision
		});
	};

	/**
	 * Creates a date formatter instance.
	 * @returns {sap.ui.core.format.DateFormat} Formatter to display dates uniformly.
	 * @private
	 */
	Commons._getLabelDateFormatter = function () {
		return DateFormat.getInstance({
			style: "short"
		});
	};

	/**
	 * Bind or set directly the association's text property depending on the given oAnnotation object.
	 * @param {sap.ui.core.Control} association The associated control.
	 * @param {object} annotation The annotation used to set the new binding path or text property.
	 * @param {object} data A data object to be used for setting association texts directly.
	 * @private
	 */
	Commons._setAssociationText = function (association, annotation, data) {
		if (!annotation) {
			return;
		}

		if (annotation.Path && data) {
			association.setProperty("text", data[annotation.Path], false);
		} else if (annotation.Path) {
			association.bindProperty("text", {
				path : annotation.Path
			});
			association.invalidate();
		} else if (annotation.String) {
			if (annotation.String.indexOf("{") === 0) {
				var aParts = annotation.String.split(">");
				association.bindProperty("text", {
					path : aParts[1].substr(0, aParts[1].length - 1),
					model : aParts[0].substr(1)
				});
				association.invalidate();
			} else {
				association.setProperty("text", annotation.String, false);
			}
		}
	};

	/**
	 * Get all annotations for the entityType property
	 * @param {string} propertyName The name of the property in the entity type the annotations are to be retrieved for.
	 * @returns {Object} oPropertyAnnotation The annotations of the specified property
	 * @private
	 */
	Commons._getPropertyAnnotation = function(propertyName) {
		var oMetaModel, sEntityTypeName, oEntityType, oPropertyAnnotation;
		oMetaModel = this.getModel().getMetaModel();
		sEntityTypeName = this._oChartProvider._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(this.getEntitySet()); //get entity type from entity set name
		oEntityType = oMetaModel.getODataEntityType(sEntityTypeName); //use entity type's name to get detailed information about entity type
		oPropertyAnnotation = oMetaModel.getODataProperty(oEntityType, propertyName); //get annotation for property from entity type object
		return oPropertyAnnotation;
	};

	/**
	 * This method checks whether obj contains members specified by the path following the pattern "a.b.c".
	 *
	 * @param {object} obj The object to be tested for the members.
	 * @param {string} path The string containing the path obj is to be tested for.
	 * @private
	 */
	Commons._hasMember = function(obj, path) {
		var sDelim = ".", aParts = path.split(sDelim), sMember = aParts.shift();
		return !!obj && ((aParts.length > 0) ? Commons._hasMember(obj[sMember], aParts.join(sDelim)) : obj.hasOwnProperty(sMember));
	};

	return Commons;
}, true);

}; // end of sap/ui/comp/smartmicrochart/SmartMicroChartCommons.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartRadialMicroChart') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides sap.ui.comp.smartmicrochart.SmartRadialMicroChart control
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartRadialMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartmicrochart/SmartRadialMicroChart",[ 'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Control', 'sap/suite/ui/microchart/library', 'sap/ui/comp/smartmicrochart/SmartMicroChartCommons', 'sap/m/library' ],
	function(jQuery, library, Control, MicroChartLibrary, SmartMicroChartCommons, MobileLibrary) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.comp.smartmicrochart/SmartRadialMicroChart.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartRadialMicroChart control creates a <code>sap.suite.ui.microchart.RadialMicroChart</code>
	 * based on OData metadata and the configuration specified by <code>mSettings</code>.
	 * The entitySet attribute must be specified to use the control. This attribute is used to fetch metadata and
	 * annotation information from the given default OData model. Based on this, the RadialMicroChart UI
	 * is created.
	 * <br>
	 * <b><i>Note:</i></b><br>
	 * Most of the attributes/properties are not dynamic and cannot be changed once the control has been
	 * initialized.
	 * @extends sap.ui.core.Control
	 * @version 1.50.6
	 * @constructor
	 * @public
	 * @since 1.42.0
	 * @alias sap.ui.comp.smartmicrochart.SmartRadialMicroChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartRadialMicroChart = Control.extend("sap.ui.comp.smartmicrochart.SmartRadialMicroChart", /** @lends sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype */ {
		metadata : {

			library : "sap.ui.comp",
			designTime : true,
			properties : {

				/**
				 * The entity set name from where the data is fetched and the internal RadialMicroChart representation is created.
				 * Note that this is not a dynamic UI5 property.
				 */
				entitySet : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Specifies the chart type. Note that this property is read-only.
				 */
				chartType : {
					type : "string",
					group : "Misc",
					defaultValue : "Donut"
				},

				/**
				 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists)
				 * property.
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * This attribute can be used to specify the relative path ( without '/') to an entity ( not an entitySet) that
				 * is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path
				 */
				chartBindingPath : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * If this property set to true, width and height of the control are determined by the width and height of the container in which the control is placed. The size is no longer determined based on the device.
				 * @since 1.44.4
				 */
				isResponsive: {type: "boolean", group: "Appearance", defaultValue: false}
			},
			defaultAggregation: "_chart",
			aggregations: {

				/**
				 * This private aggregation is used for the internal binding of the sap.suite.ui.microchart.RadialMicroChart
				 */
				_chart : {
					type : "sap.suite.ui.microchart.RadialMicroChart",
					multiple : false,
					visibility : "hidden"
				}
			},

			associations : {

				/**
				 * If the associated control is provided, its <code>text</code> property is set to
				 * the Title property of the Chart annotation. Title property of the DataPoint
				 * annotation is ignored.
				 */
				chartTitle : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				},

				/**
				 * If the associated control is provided, its <code>text</code> property is set to
				 * the Description property of the Chart annotation. Description property of the
				 * DataPoint annotation is ignored.
				 */
				chartDescription : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				},

				/**
				 * If the associated control is provided, its <code>text</code> property is set to
				 * the Unit of Measure. The Value property of the DataPoint annotation should be
				 * annotated with this Unit of Measure. It can be either ISOCurrency or Unit from the
				 * OData Measures annotations.
				 */
				unitOfMeasure : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				},

				/**
				 * If the associated control is provided, its <code>text</code> property is set to
				 * the free text provided by annotations. The Value property of the DataPoint
				 * annotation should be annotated with this free text. The Label annotation from the
				 * OData Common vocabulary can be used.
				 */
				freeText : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				}
			},

			events : {

				/**
				 * Event fired once the control has been initialized.
				 */
				initialize : {}
			}
		}
	});

	SmartRadialMicroChart._CHART_TYPE = ["Donut"];

	SmartRadialMicroChart.prototype.init = function() {
		this._bIsInitialized = false;
		this._bMetaModelLoadAttached = false;
		this.setAggregation("_chart", new MicroChartLibrary.RadialMicroChart(), true);
	};

	SmartRadialMicroChart.prototype.onBeforeRendering = function () {
		var oChart = this.getAggregation("_chart");
		if (this.getIsResponsive()) {
			oChart.setProperty("size", MobileLibrary.Size.Responsive, true);
		} else {
			oChart.setProperty("size", MobileLibrary.Size.Auto, true);
		}
		MicroChartLibrary._passParentContextToChild(this, oChart);
	};

	SmartRadialMicroChart.prototype.destroy = function() {
		SmartMicroChartCommons._cleanup.call(this); // Clean up the instances which were created in SmartMicroChartCommons
		Control.prototype.destroy.apply(this, arguments);
	};

	/**
	 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to 'this' in order to allow method chaining.
	 * @private
	 */
	SmartRadialMicroChart.prototype.setChartType = function () {
		return this;
	};

	SmartRadialMicroChart.prototype.setEntitySet = function(entitySetName) {
		if (this.getProperty("entitySet") !== entitySetName) {
			this.setProperty("entitySet", entitySetName, true);
			SmartMicroChartCommons._initializeMetadata.call(this);
		}
		return this;
	};

	SmartRadialMicroChart.prototype.propagateProperties = function() {
		if (Control.prototype.propagateProperties) {
			Control.prototype.propagateProperties.apply(this, arguments);
		}
		SmartMicroChartCommons._initializeMetadata.call(this);
	};

	/**
	 * Creates and binds the inner chart once the metadata is loaded.
	 * @private
	 */
	SmartRadialMicroChart.prototype._createAndBindInnerChart = function() {
		this._bindProperties();
		SmartMicroChartCommons._updateAssociations.call(this); //set all associations
	};

	/**
	 * Binds control properties to the entity type properties
	 * @private
	 */
	SmartRadialMicroChart.prototype._bindProperties = function() {
		var oInnerChart = this.getAggregation("_chart");
		if (this._oDataPointAnnotations.Value && !this._oDataPointAnnotations.TargetValue) {
			if (SmartMicroChartCommons._hasMember(this._oDataPointAnnotations.Value, "Path")) {
				oInnerChart.bindProperty("percentage", {
					path : this._oDataPointAnnotations.Value.Path,
					type : "sap.ui.model.odata.type.Decimal"
				});
			}
		} else if (SmartMicroChartCommons._hasMember(this, "_oDataPointAnnotations.TargetValue.Path") &&
					SmartMicroChartCommons._hasMember(this, "_oDataPointAnnotations.Value.Path")) {
			oInnerChart.bindProperty("total", {
				path : this._oDataPointAnnotations.TargetValue.Path,
				type : "sap.ui.model.odata.type.Decimal"
			});
			oInnerChart.bindProperty("fraction", {
				path : this._oDataPointAnnotations.Value.Path,
				type : "sap.ui.model.odata.type.Decimal"
			});
		}

		oInnerChart.bindProperty("valueColor", {
			parts: [
				this._oDataPointAnnotations.Value && this._oDataPointAnnotations.Value.Path || "",
				this._oDataPointAnnotations.Criticality && this._oDataPointAnnotations.Criticality.Path || ""
			],
			formatter: SmartMicroChartCommons._getValueColor.bind(this)
		});
	};

	SmartRadialMicroChart.prototype.setAssociation = function (sAssociationName, sId, bSuppressInvalidate) {
		if (Control.prototype.setAssociation) {
			Control.prototype.setAssociation.apply(this, arguments);
		}
		SmartMicroChartCommons._updateAssociation.call(this, sAssociationName);
		return this;
	};

	/**
	 * Gets the supported types of ChartType in Chart annotation.
	 * @returns {array} Chart types
	 * @private
	 */
	SmartRadialMicroChart.prototype._getSupportedChartTypes = function() {
		return SmartRadialMicroChart._CHART_TYPE;
	};

	return SmartRadialMicroChart;
});

}; // end of sap/ui/comp/smartmicrochart/SmartRadialMicroChart.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartAreaMicroChart') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.ui.comp.smartmicrochart.SmartAreaMicroChart.
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartAreaMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.ValueColor'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.CountMode'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartmicrochart/SmartAreaMicroChart",[ 'jquery.sap.global', 'sap/ui/comp/library', 'sap/suite/ui/microchart/library', 'sap/ui/core/Control', 'sap/m/ValueColor', 'sap/ui/model/odata/CountMode', 'sap/ui/comp/smartmicrochart/SmartMicroChartCommons', 'sap/ui/core/format/DateFormat' ],
	function(jQuery, CompLibrary, MicroChartLibrary, Control, ValueColor, CountMode, SmartMicroChartCommons, DateFormat) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.comp.smartmicrochart/SmartAreaMicroChart.
	 *
	 * @param {string}
	 *          [sId] id for the new control, generated automatically if no id is given
	 * @param {object}
	 *          [mSettings] initial settings for the new control
	 * @class The SmartAreaMicroChart control creates a AreaMicroChart based on OData metadata and the configuration
	 *        specified. The entitySet attribute must be specified to use the control. This attribute is used to fetch
	 *        fields from OData metadata, from which Micro Area Chart UI will be generated; it can also be used to fetch
	 *        the actual chart data.<br>
	 *        <b><i>Note:</i></b><br>
	 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been
	 *        initialised.
	 * @extends sap.ui.core.Control
	 * @version 1.50.6
	 * @since 1.38
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartmicrochart.SmartAreaMicroChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartAreaMicroChart = Control.extend("sap.ui.comp.smartmicrochart.SmartAreaMicroChart", /** @lends sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype */ {
		metadata : {

			library : "sap.ui.comp",
			designTime : true,
			properties : {

				/**
				 * The entity set name from where the data is fetched and the internal AreaMicroChart representation is created. Note that this is not a dynamic UI5
				 * property
				 */
				entitySet : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Determines if the target value and actual value
				 * are displayed or not
				 */
				showLabel: {
					type: "boolean",
					group : "Appearance",
					defaultValue: true
				},

				/**
				 * Specifies the type of Chart. Note that this property is read-only.
				 */
				chartType : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Only <code>true</code> value is supported: the chart will be bound to the chartBindingPath or to the entitySet
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},

				/**
				 * This attribute can be used to specify the relative path ( without '/') to an entitySet ( not a single entity)
				 * that is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path.
				 * If not specified, the entitySet attribute is used instead.
				 */
				chartBindingPath : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Defines the width.
				 */
				width : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : "164px"},

				/**
				 * Defines the height.
				 */
				height : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : "74px"},

				/**
				 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed. Height and width properties are ignored.
				 */
				isResponsive: {type: "boolean", group: "Appearance", defaultValue: false}
			},
			defaultAggregation: "_chart",
			aggregations : {
				/**
				 * This private aggregation is used for the internal binding of the sap.suite.ui.microchart.AreaMicroChart
				 */
				_chart : {
					type : "sap.suite.ui.microchart.AreaMicroChart",
					multiple : false,
					visibility : "hidden"
				},
				/**
				 * This private aggregation is used for the internal binding of the chart text, description and unit of measure values in case the value is provided via ODataModel
				 */
				_chartTexts : {
					type : "sap.m.ListBase",
					multiple : false,
					visibility : "hidden"
				}
			},
			associations : {
				/**
				 * If the associated control is provided, its Text property is set to the Title property of the Chart annotation.
				 * Title property of the DataPoint annotation is ignored.
				 * since version 1.38
				 */
				chartTitle : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				},
				/**
				 * If the associated control is provided, its Text property is set to the Description property of the Chart annotation.
				 * Description property of the DataPoint annotation is ignored.
				 * since version 1.38
				 */
				chartDescription : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				},
				/**
				 * If the associated control is provided, its Text property is set to the Unit of Measure. The Value property of the DataPoint annotation should be annotated with this Unit of Measure. It can be either ISOCurrency or Unit from the OData Measures annotations.
				 * @since 1.38
				 */
				unitOfMeasure : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				}
			},
			events : {

				/**
				 * Event fired once the control has been initialized.
				 */
				initialize : {}
			}
		}
	});

	SmartAreaMicroChart._CHART_TYPE = ["Area", "Line"];

	SmartAreaMicroChart.prototype.init = function() {
		this._bIsInitialized = false;
		this._bMetaModelLoadAttached = false;
		this.setProperty("chartType", "Area", true);
		this.setAggregation("_chart", new MicroChartLibrary.AreaMicroChart(), true);
	};

	SmartAreaMicroChart.prototype.onBeforeRendering = function() {
		var oChart = this.getAggregation("_chart");
		oChart.setProperty("width", this.getWidth(), true);
		oChart.setProperty("height", this.getHeight(), true);
		oChart.setProperty("isResponsive", this.getIsResponsive(), true);
		MicroChartLibrary._passParentContextToChild(this, oChart);
	};

	SmartAreaMicroChart.prototype.destroy = function() {
		SmartMicroChartCommons._cleanup.call(this); // Clean up the instances which were created in SmartMicroChartCommons
		Control.prototype.destroy.apply(this, arguments);
	};

	SmartAreaMicroChart.prototype.setEntitySet = function(sEntitySetName) {
		if (this.getProperty("entitySet") !== sEntitySetName) {
			this.setProperty("entitySet", sEntitySetName, true);
			SmartMicroChartCommons._initializeMetadata.call(this);
		}
		return this;
	};

	SmartAreaMicroChart.prototype.setShowLabel = function(bShowLabel) {
		if (this.getShowLabel() !== bShowLabel) {
			this.setProperty("showLabel", bShowLabel, true);
			this.getAggregation("_chart").setProperty("showLabel", bShowLabel, true);
			this.invalidate();
		}
		return this;
	};

	/**
	 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to 'this' in order to allow method chaining.
	 * @private
	 */
	SmartAreaMicroChart.prototype.setEnableAutoBinding = function() {
		return this.setProperty("enableAutoBinding", true, true);
	};

	/**
	 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to 'this' in order to allow method chaining.
	 * @private
	 */
	SmartAreaMicroChart.prototype.setChartType = function() {
		return this;
	};

	/**
	 * Calls propagateProperties of Control and initializes the metadata afterwards.
	 * @private
	 */
	SmartAreaMicroChart.prototype.propagateProperties = function() {
		if (Control.prototype.propagateProperties) {
			Control.prototype.propagateProperties.apply(this, arguments);
		}
		SmartMicroChartCommons._initializeMetadata.call(this);
	};

	/**
	 * Determines the chart's binding path used directly in the bindings for data points and thresholds.
	 * @returns {string} If the chartBindingPath property is set, it is returned. If no chartBindingPath is set,
	 *                   the path is constructed absolute from the entitySet property.
	 * @private
	 */
	SmartAreaMicroChart.prototype._getBindingPath = function() {
		if (this.getChartBindingPath()) {
			return this.getChartBindingPath();
		} else if (this.getEntitySet()) {
			return '/' + this.getEntitySet();
		} else {
			return "";
		}
	};

	/**
	 * The control itself may not be bound.
	 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to 'this' in order to allow method chaining.
	 * @private
	 */
	SmartAreaMicroChart.prototype.bindElement = function() {
		return this;
	};

	/**
	 * Checks if the medatada is correct and fills the aggregations of the contained AreaMicroChart.
	 * @private
	 */
	SmartAreaMicroChart.prototype._createAndBindInnerChart = function() {
		this._createChartLabels();
		this._createChartItem("chart", this._oDataPointAnnotations.Value.Path);
		this._createChartItem("target", this._oDataPointAnnotations.TargetValue.Path);
		this._buildThreshold();
	};

	/**
	 * The method is responsible for filling all the thresholds of the contained AreaMicroChart.
	 * @private
	 */
	SmartAreaMicroChart.prototype._buildThreshold = function() {
		var oCriticality = this._oDataPointAnnotations.CriticalityCalculation;

		if (SmartMicroChartCommons._hasMember(oCriticality, "ImprovementDirection.EnumMember")) {
			switch (oCriticality.ImprovementDirection.EnumMember) {
				case SmartMicroChartCommons._MINIMIZE:
					this._createChartItem("minThreshold", oCriticality.ToleranceRangeHighValue.Path, ValueColor.Good);
					this._createChartItem("maxThreshold", oCriticality.DeviationRangeHighValue.Path, ValueColor.Error);
					break;
				case SmartMicroChartCommons._MAXIMIZE:
					this._createChartItem("minThreshold", oCriticality.DeviationRangeLowValue.Path, ValueColor.Error);
					this._createChartItem("maxThreshold", oCriticality.ToleranceRangeLowValue.Path, ValueColor.Good);
					break;
				case SmartMicroChartCommons._TARGET:
					this._createChartItem("minThreshold", oCriticality.DeviationRangeLowValue.Path, ValueColor.Error);
					this._createChartItem("maxThreshold", oCriticality.DeviationRangeHighValue.Path, ValueColor.Error);
					this._createChartItem("innerMinThreshold", oCriticality.ToleranceRangeLowValue.Path, ValueColor.Good);
					this._createChartItem("innerMaxThreshold", oCriticality.ToleranceRangeHighValue.Path, ValueColor.Good);
					break;
				default:
					break;
			}
		}
	};

	/**
	 * Creates four AreaMicroChartLabels (firstXLabel, firstYLabel, lastXLabel, lastYLabel).
	 * @private
	 */
	SmartAreaMicroChart.prototype._createChartLabels = function() {
		var oLabel, oMap = this._getLabelsMap();
		for (var k in oMap) {
			oLabel = new MicroChartLibrary.AreaMicroChartLabel();
			this.getAggregation("_chart").setAggregation(oMap[k], oLabel, true);
		}
	};

	/**
	 * Formats the given dimension value.
	 * @param {object} fValue The unformatted value for the dimension
	 * @returns {float} The time stamp value or zero
	 * @private
	 */
	SmartAreaMicroChart.prototype._formatDimension = function(fValue) {
		if (typeof fValue === "string") {
			var oAnnotation = SmartMicroChartCommons._getPropertyAnnotation.call(this, this._oChartViewMetadata.dimensionFields[0]),
				sPattern = SmartMicroChartCommons._getSemanticsPattern.call(this, oAnnotation);
			if (sPattern) {
				fValue = DateFormat.getInstance({pattern: sPattern}).parse(fValue);
			}
		}
		if (fValue instanceof Date) {
			return parseFloat(fValue.getTime());
		} else if (!isNaN(fValue)) {
			return parseFloat(fValue);
		} else {
			this.getAggregation("_chart").enableXIndexing(true);
			return 0;
		}
	};

	/**
	 * Creates AreaMicroChartItem for the given aggregation name and based on the given path and sets its
	 * color property.
	 * Only the data binding paths are prepared. Actual data will be filled once the the binding occurs.
	 *
	 * @param {string} aggregationName The name of the aggregation to be set
	 * @param {string} path The path to the y value of the point
	 * @param {sap.m.ValueColor} color The color of the threshold
	 * @private
	 */
	SmartAreaMicroChart.prototype._createChartItem = function(aggregationName, path, color) {
		var oPointTemplate, oItem;
		oPointTemplate = new MicroChartLibrary.AreaMicroChartPoint({
			x : {
				path : this._oChartViewMetadata.dimensionFields[0],
				formatter : this._formatDimension.bind(this)
			},
			y : {
				path : path,
				type : "sap.ui.model.odata.type.Decimal"
			}
		});

		oItem = new MicroChartLibrary.AreaMicroChartItem({
			points : {
				path : this._getBindingPath(),
				template : oPointTemplate,
				parameters : {
					countMode : CountMode.None
				},
				events: {
					change: this._onBindingDataChange.bind(this)
				}
			},
			color : color
		});

		this.getAggregation("_chart").setAggregation(aggregationName, oItem, true);
	};

	/**
	 * Updates the associations and chart labels when binding data changed.
	 * @private
	 */
	SmartAreaMicroChart.prototype._onBindingDataChange = function() {
		var oPointsBinding = this.getAggregation("_chart").getAggregation("chart").getBinding("points");
		this._updateAssociations(oPointsBinding);
		this._updateChartLabels(oPointsBinding);
	};

	/**
	 * Updates all associations based on the data of the first bound entity.
	 * @param {object} pointsBinding The binding info of the points
	 * @private
	 */
	SmartAreaMicroChart.prototype._updateAssociations = function(pointsBinding) {
		var oContext = pointsBinding.getContexts(0, 1)[0],
			oData = oContext && oContext.getObject();

		SmartMicroChartCommons._updateAssociations.call(this, oData);
	};

	/**
	 * Updates all chart labels based on the data of the first and last bound points.
	 * @param {object} pointsBinding The binding info of the points
	 * @private
	 */
	SmartAreaMicroChart.prototype._updateChartLabels = function(pointsBinding) {
		var oContexts,
			iLength,
			oFirstContext,
			oLastContext,
			oFirstData,
			oLastData;

		oContexts = pointsBinding.getContexts();
		iLength = oContexts.length;

		if (iLength > 0) {
			oFirstContext = oContexts[0];
			oLastContext = oContexts[iLength - 1];

			oFirstData = oFirstContext && oFirstContext.getObject();
			oLastData = oLastContext && oLastContext.getObject();

			SmartMicroChartCommons._updateChartLabels.call(this, oFirstData, "first");
			SmartMicroChartCommons._updateChartLabels.call(this, oLastData, "last");
		}
	};

	/**
	 * Gets the supported types of ChartType in Chart annotation.
	 * @returns {array} Chart types
	 * @private
	 */
	SmartAreaMicroChart.prototype._getSupportedChartTypes = function() {
		return SmartAreaMicroChart._CHART_TYPE;
	};

	/**
	 * Gets the mapping of the chart labels.
	 * @returns {object} Mapping of the chart labels
	 * @private
	 */
	SmartAreaMicroChart.prototype._getLabelsMap = function() {
		return {
			"leftTop" : "firstYLabel",
			"rightTop" : "lastYLabel",
			"leftBottom" : "firstXLabel",
			"rightBottom" : "lastXLabel"
		};
	};

	return SmartAreaMicroChart;
});

}; // end of sap/ui/comp/smartmicrochart/SmartAreaMicroChart.js
if ( !jQuery.sap.isDeclared('sap.ui.comp.smartmicrochart.SmartBulletMicroChart') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides sap.ui.comp.smartmicrochart.SmartBulletMicroChart control
jQuery.sap.declare('sap.ui.comp.smartmicrochart.SmartBulletMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.ValueColor'); // unlisted dependency retained
sap.ui.define("sap/ui/comp/smartmicrochart/SmartBulletMicroChart",[ 'jquery.sap.global', 'sap/ui/comp/library', 'sap/ui/core/Control', 'sap/suite/ui/microchart/library', 'sap/m/ValueColor', 'sap/ui/comp/smartmicrochart/SmartMicroChartCommons' ],
	function(jQuery, library, Control, MicroChartLibrary, ValueColor, SmartMicroChartCommons) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.comp.smartmicrochart/SmartBulletMicroChart.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The SmartBulletMicroChart control creates a <code>sap.suite.ui.microchart.BulletMicroChart</code>
	 * based on OData metadata and the configuration specified by <code>mSettings</code>.
	 * The entitySet attribute must be specified to use the control. This attribute is used to fetch metadata and
	 * annotation information from the given default OData model. Based on this, the BulletMicroChart UI
	 * is created.
	 * <br>
	 * <b><i>Note:</i></b><br>
	 * Most of the attributes/properties are not dynamic and cannot be changed once the control has been
	 * initialized.
	 * @extends sap.ui.core.Control
	 * @version 1.50.6
	 * @since 1.38
	 * @constructor
	 * @public
	 * @alias sap.ui.comp.smartmicrochart.SmartBulletMicroChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var SmartBulletMicroChart = Control.extend("sap.ui.comp.smartmicrochart.SmartBulletMicroChart", /** @lends sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype */ {
		metadata : {

			library : "sap.ui.comp",
			designTime: true,
			properties : {

				/**
				 * The entity set name from where the data is fetched and the internal BulletMicroChart representation is created.
				 * Note that this is not a dynamic UI5 property.
				 */
				entitySet : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Determines if any label is shown or not
				 */
				showLabel: {
					type: "boolean",
					group : "Appearance",
					defaultValue: true
				},

				/**
				 * Specifies the chart type. Note that this property is read-only.
				 */
				chartType : {
					type : "string",
					group : "Misc",
					defaultValue : "Bullet"
				},

				/**
				 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists)
				 * property.
				 */
				enableAutoBinding: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * This attribute can be used to specify the relative path ( without '/') to an entity ( not an entitySet) that
				 * is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path
				 */
				chartBindingPath : {
					type : "string",
					group : "Misc",
					defaultValue : null
				},

				/**
				 * Defines the width.
				 */
				width : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : "164px"},

				/**
	 			 * If this is set to true, width and height of the control are determined by the width and height of the container in which the control is placed.
	 			 * <code>width</code> property is ignored.
				 */
				isResponsive: {type: "boolean", group: "Appearance", defaultValue: false}

			},
			defaultAggregation: "_chart",
			aggregations: {
				/**
				 * This private aggregation is used for the internal binding of the DataPoint/CriticalityCalculation values used for calculation of the bar color
				 */
				_criticalityThresholds : {
					type : "sap.ui.core.CustomData",
					multiple : true,
					visibility : "hidden"
				},

				/**
				 * This private aggregation is used for the internal binding of the sap.suite.ui.microchart.BulletMicroChart
				 */
				_chart : {
					type : "sap.suite.ui.microchart.BulletMicroChart",
					multiple : false,
					visibility : "hidden"
				}
			},

			associations : {
				/**
				 * If the associated control is provided, its <code>text</code> property is set to the Title property of the Chart annotation.
				 * Title property of the DataPoint annotation is ignored.
				 * @since 1.38.0
				 */
				chartTitle : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				},
				/**
				 * If the associated control is provided, its <code>text</code> property is set to the Description property of the Chart annotation.
				 * Description property of the DataPoint annotation is ignored.
				 * @since 1.38.0
				 */
				chartDescription : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				},
				/**
				 * If the associated control is provided, its <code>text</code> property is set to the Unit of Measure. The Value property of the DataPoint annotation should be annotated with this Unit of Measure. It can be either ISOCurrency or Unit from the OData Measures annotations.
				 * @since 1.38.0
				 */
				unitOfMeasure : {
					type : "sap.m.Label",
					group : "Misc",
					multiple : false
				}
			},

			events : {

				/**
				 * Event fired once the control has been initialized.
				 */
				initialize : {}
			}
		}
	});

	SmartBulletMicroChart._CRITICAL_COLOR = ValueColor.Critical;
	SmartBulletMicroChart._ERROR_COLOR = ValueColor.Error;
	SmartBulletMicroChart._CHART_TYPE = ["Bullet"];

	SmartBulletMicroChart.prototype.init = function() {
		this._bIsInitialized = false;
		this._bMetaModelLoadAttached = false;
		this._bBarColorSet = false;
		this.setProperty("chartType", "Bullet", true);
		this.setAggregation("_chart", new MicroChartLibrary.BulletMicroChart({ "showValueMarker" : true }), true);
	};

	/**
	 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to 'this' in order to allow method chaining.
	 * @private
	 */
	SmartBulletMicroChart.prototype.setChartType = function () {
		return this;
	};

	SmartBulletMicroChart.prototype.setEntitySet = function(entitySetName) {
		if (this.getProperty("entitySet") !== entitySetName) {
			this.setProperty("entitySet", entitySetName, true);
			SmartMicroChartCommons._initializeMetadata.call(this);
		}
		return this;
	};

	SmartBulletMicroChart.prototype.setShowLabel = function(bShowLabel) {
		if (this.getShowLabel() !== bShowLabel) {
			this.setProperty("showLabel", bShowLabel, true);
			var oChart = this.getAggregation("_chart");
			oChart.setProperty("showActualValue", bShowLabel, true);
			oChart.setProperty("showTargetValue", bShowLabel, true);
			oChart.setProperty("showDeltaValue", bShowLabel, true);
			oChart.setProperty("showValueMarker", bShowLabel, true);
			this.invalidate();
		}
		return this;
	};

	SmartBulletMicroChart.prototype.propagateProperties = function() {
		if (Control.prototype.propagateProperties) {
			Control.prototype.propagateProperties.apply(this, arguments);
		}
		SmartMicroChartCommons._initializeMetadata.call(this);
	};

	SmartBulletMicroChart.prototype.onBeforeRendering = function() {
		var oChart = this.getAggregation("_chart");
		oChart.setProperty("width", this.getWidth(), true);
		oChart.setProperty("isResponsive", this.getIsResponsive(), true);
		MicroChartLibrary._passParentContextToChild(this, oChart);
	};

	SmartBulletMicroChart.prototype.destroy = function() {
		SmartMicroChartCommons._cleanup.call(this); // Clean up the instances which were created in SmartMicroChartCommons
		Control.prototype.destroy.apply(this, arguments);
	};

	SmartBulletMicroChart.prototype._createAndBindInnerChart = function() {
		this._bindValueProperties();
		this._bindActualValue();
		this._bindChartThresholds();
		SmartMicroChartCommons._updateAssociations.call(this); //set all associations
	};

	/**
	 * Binds control properties to the entity type properties
	 * @private
	 */
	SmartBulletMicroChart.prototype._bindValueProperties = function() {
		var fMaxValue, fMinValue, oInnerChart = this.getAggregation("_chart");

		if (SmartMicroChartCommons._hasMember(this, "_oDataPointAnnotations.TargetValue.Path")) {
			oInnerChart.bindProperty("targetValue", {
				path : this._oDataPointAnnotations.TargetValue.Path,
				type : "sap.ui.model.odata.type.Decimal"
			});

			var oFormatter = SmartMicroChartCommons._getLabelNumberFormatter.call(this, this._oDataPointAnnotations.TargetValue.Path);

			oInnerChart.bindProperty("targetValueLabel", {
				path: this._oDataPointAnnotations.TargetValue.Path,
				formatter : oFormatter.format.bind(oFormatter)
			});
		}

		if (SmartMicroChartCommons._hasMember(this, "_oDataPointAnnotations.ForecastValue.Path")) {
			oInnerChart.bindProperty("forecastValue", {
				path : this._oDataPointAnnotations.ForecastValue.Path,
				type : "sap.ui.model.odata.type.Decimal"
			});
		}

		if (this._oDataPointAnnotations.MaximumValue) {
			if (this._oDataPointAnnotations.MaximumValue.hasOwnProperty("Path")) { // for compatibility reasons we have to support Path as well
				oInnerChart.bindProperty("maxValue", {
					path : this._oDataPointAnnotations.MaximumValue.Path,
					type : "sap.ui.model.odata.type.Decimal"
				});
			} else if (this._oDataPointAnnotations.MaximumValue.hasOwnProperty("Decimal")) {
				fMaxValue = parseFloat(this._oDataPointAnnotations.MaximumValue.Decimal);
				oInnerChart.setMaxValue(fMaxValue, true);
			}
		}

		if (this._oDataPointAnnotations.MinimumValue) {
			if (this._oDataPointAnnotations.MinimumValue.hasOwnProperty("Path")) { // for compatibility reasons we have to support Path as well
				oInnerChart.bindProperty("minValue", {
					path : this._oDataPointAnnotations.MinimumValue.Path,
					type : "sap.ui.model.odata.type.Decimal"
				});
			} else if (this._oDataPointAnnotations.MinimumValue.hasOwnProperty("Decimal")) {
				fMinValue = parseFloat(this._oDataPointAnnotations.MinimumValue.Decimal);
				oInnerChart.setMinValue(fMinValue, true);
			}
		}
	};


	/**
	 * Binds control aggregation 'actual' of the BulletMicroChart
	 * @private
	 */
	SmartBulletMicroChart.prototype._bindActualValue = function() {
		var oInnerChart = this.getAggregation("_chart"),
			oFormatter = SmartMicroChartCommons._getLabelNumberFormatter.call(this, this._oDataPointAnnotations.Value.Path);

		var oChartData = new MicroChartLibrary.BulletMicroChartData({
			value : {
				path : this._oDataPointAnnotations.Value.Path,
				type : "sap.ui.model.odata.type.Decimal"
			},
			color : {
				parts: [
					this._oDataPointAnnotations.Value && this._oDataPointAnnotations.Value.Path || "",
					this._oDataPointAnnotations.Criticality && this._oDataPointAnnotations.Criticality.Path || ""
				],
				formatter : SmartMicroChartCommons._getValueColor.bind(this)
			}
		});

		oInnerChart.setAggregation("actual", oChartData, true);

		oInnerChart.bindProperty("actualValueLabel", {
			path: this._oDataPointAnnotations.Value.Path,
			formatter : oFormatter.format.bind(oFormatter)
		});
	};

	/**
	 * Binds the criticality calculation properties to the thresholds of SmartBulletMicroChart according to different direction
	 * @private
	 */
	SmartBulletMicroChart.prototype._bindChartThresholds = function() {
		var sDirection, oCriticality;
		if (SmartMicroChartCommons._hasMember(this._oDataPointAnnotations, "CriticalityCalculation.ImprovementDirection.EnumMember")) {
			oCriticality = this._oDataPointAnnotations.CriticalityCalculation;
			sDirection = oCriticality.ImprovementDirection.EnumMember;
			if (sDirection !== SmartMicroChartCommons._MINIMIZE && oCriticality.DeviationRangeLowValue && oCriticality.DeviationRangeLowValue.Path) {
				this._bindThresholdAggregation(oCriticality.DeviationRangeLowValue.Path, SmartBulletMicroChart._ERROR_COLOR);
			}
			if (sDirection !== SmartMicroChartCommons._MINIMIZE && oCriticality.ToleranceRangeLowValue && oCriticality.ToleranceRangeLowValue.Path) {
				this._bindThresholdAggregation(oCriticality.ToleranceRangeLowValue.Path, SmartBulletMicroChart._CRITICAL_COLOR);
			}
			if (sDirection !== SmartMicroChartCommons._MAXIMIZE && oCriticality.ToleranceRangeHighValue && oCriticality.ToleranceRangeHighValue.Path) {
				this._bindThresholdAggregation(oCriticality.ToleranceRangeHighValue.Path, SmartBulletMicroChart._CRITICAL_COLOR);
			}
			if (sDirection !== SmartMicroChartCommons._MAXIMIZE && oCriticality.DeviationRangeHighValue && oCriticality.DeviationRangeHighValue.Path) {
				this._bindThresholdAggregation(oCriticality.DeviationRangeHighValue.Path, SmartBulletMicroChart._ERROR_COLOR);
			}
		}
	};

	/**
	 * Adds aggregation for the SmartBulletMicroChart
	 * @param {string} sPath Which is the value path from the OData metadata
	 * @param {string} sColor Which is the semantic color of the value
	 * @private
	 */
	SmartBulletMicroChart.prototype._bindThresholdAggregation = function (sPath, sColor) {
		var oThreshold = new MicroChartLibrary.BulletMicroChartData({
			value: {
				path : sPath,
				type : "sap.ui.model.odata.type.Decimal"
			},
			color: sColor
		});
		this.getAggregation("_chart").addAggregation("thresholds", oThreshold, true);
	};

	SmartBulletMicroChart.prototype.setAssociation = function (sAssociationName, sId, bSuppressInvalidate) {
		if (Control.prototype.setAssociation) {
			Control.prototype.setAssociation.apply(this, arguments);
		}
		SmartMicroChartCommons._updateAssociation.call(this, sAssociationName);
		return this;
	};

	/**
	 * Gets the supported types of ChartType in Chart annotation.
	 * @returns {array} Chart types
	 * @private
	 */
	SmartBulletMicroChart.prototype._getSupportedChartTypes = function() {
		return SmartBulletMicroChart._CHART_TYPE;
	};

	return SmartBulletMicroChart;
});

}; // end of sap/ui/comp/smartmicrochart/SmartBulletMicroChart.js
