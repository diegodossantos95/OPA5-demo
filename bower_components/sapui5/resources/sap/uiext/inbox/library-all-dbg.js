// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
sap.ui.base.Object.extend("sap.uiext.inbox.TCMMetadata",{ 
			
			    constructor : function() {
			
			       sap.ui.base.Object.apply(this);
			       this.oServiceMetadata= null;
			       this.serviceSupportsFilterOption=false;
			       this.oSubstitutionConstants = sap.uiext.inbox.SubstitutionRulesManagerConstants;
			       this.oInboxConstants = sap.uiext.inbox.InboxConstants;
			    }
			
});
	
sap.uiext.inbox.TCMMetadata.prototype.setServiceMetadata= function(oServiceMetadata){
	if(oServiceMetadata)
	this.oServiceMetadata= oServiceMetadata;
	this.serviceSupportsFilterOption = this._isPropertyAvailable(this.oInboxConstants.ENTITY_NAME_TASK_COLLECTION, this.oInboxConstants.PROPERTY_NAME_CUSTOM_STATUS);
};

sap.uiext.inbox.TCMMetadata.prototype.getServiceMetadata= function(){
	return this.oServiceMetadata;
};

sap.uiext.inbox.TCMMetadata.prototype._isPropertyAvailable = function(sEntityType, sProperty){
	var isPropertyAvailable = this._getProperty(sEntityType, sProperty) ?  true :  false;
	return isPropertyAvailable;
};

sap.uiext.inbox.TCMMetadata.prototype._getPropertyType = function (sEntityType, sProperty) {

	var oProperty = this._getProperty(sEntityType, sProperty);
	if (oProperty)
		return oProperty.type;
	else 
		return null;
};

sap.uiext.inbox.TCMMetadata.prototype._getProperty = function (sEntityType, sProperty) {
	var oProperty = null;
	
	if (this.getServiceMetadata() != null){
		var aEntityTypes= this.getServiceMetadata().dataServices.schema[0].entityType;
		var aTaskProperties=null;
		jQuery.each(aEntityTypes,function(index,entity){
			if(entity.name === sEntityType){
				aTaskProperties=entity.property;
				jQuery.each(aTaskProperties,function(index,prop){
					if(prop.name===sProperty){
						oProperty = prop;
						return false;
					} 
				});
				return false;
			}
		});
	}
	return oProperty;
};

sap.uiext.inbox.TCMMetadata.prototype._isEntitySet = function(sEntityName, sEntityType){
	var bEntitySet = false;
	
	if (this.getServiceMetadata() != null){
		var aEntitySets= this.getServiceMetadata().dataServices.schema[0].entityContainer[0].entitySet;
		jQuery.each(aEntitySets,function(index,entity){
			if(entity.name === sEntityName && entity.entityType === sEntityType){
				bEntitySet = true;
				return false;
			}
		});
	}
	return bEntitySet;
};

sap.uiext.inbox.TCMMetadata.prototype._isFunctionImport = function(sFunctnImportName){
	var isFunctnImport = this._getFunctionImport(sFunctnImportName) ?  true :  false;
	return isFunctnImport;
};

sap.uiext.inbox.TCMMetadata.prototype.getParameterTypeForFunctionImport = function (sFunctnImportName, sParameter) {

	var sParameterType = null;
	var oFunctionImport = this._getFunctionImport(sFunctnImportName);
	if (oFunctionImport) {
		var aParameters = oFunctionImport.parameter;
		jQuery.each(aParameters, function (index, parameter) {
			if (parameter.name === sParameter) {
				sParameterType = parameter.type;
				return false;
			} 
		});
	}
	return sParameterType;
};

sap.uiext.inbox.TCMMetadata.prototype._getFunctionImport = function(sFunctnImportName){
	var oFunctionImport = null;
	var aFimports= this.getServiceMetadata().dataServices.schema[0].entityContainer[0].functionImport;
	jQuery.each(aFimports,function(index,fimport){
		if(fimport.name===sFunctnImportName){
			oFunctionImport = fimport;
			return false;
		}
	});
	return oFunctionImport;
};
jQuery.sap.declare('sap.uiext.inbox.library-all');
jQuery.sap.declare('sap.uiext.inbox.TCMMetadata'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxConfiguration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// Provides a filter for list bindings
	jQuery.sap.declare("sap.uiext.inbox.InboxConfiguration");
	
	/**
	 * Constructor for InboxConfiguration
	 *
	 * @class
	 * Configuration for Inbox
	 * 
	 *  @public
	 *  @name sap.uiext.inbox.InboxConfiguration
	 */
	
	sap.ui.base.Object.extend("sap.uiext.inbox.InboxConfiguration",{
			
			    constructor : function() {
			
			        sap.ui.base.Object.apply(this);
			        this.iSearchUsersMaxLimit = 100;
			    }
			
		});
	
	/**
	 * 
	 * Setter for Max Limit for user search in Inbox
	 * 
	 * @name sap.uiext.inbox.InboxConfiguration.prototype.setSearchUersMaxLimit
	 * @function
	 * @param {number} 
	 *         iMaxLimit
	 *         
	 * @public
	 * 
	 */
	sap.uiext.inbox.InboxConfiguration.prototype.setSearchUsersMaxLimit = function(iMaxLimit){
		if(typeof iMaxLimit === "number"){
			this.iSearchUsersMaxLimit = iMaxLimit;
		}
	};
	
	/**
	 * 
	 * Getter for Max Limit for user search in Inbox
	 * 
	 *  @name sap.uiext.inbox.InboxFilters.prototype.getSearchUersMaxLimit
	 * 	@function
	 * 	  
	 *  @type number
	 *  @public
	 */
	sap.uiext.inbox.InboxFilters.prototype.getSearchUsersMaxLimit = function(){
		return this.iSearchUsersMaxLimit;
	};
}; // end of sap/uiext/inbox/InboxConfiguration.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxConstants') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.InboxConstants");
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.uiext.inbox.InboxConstants = function(){
};

sap.uiext.inbox.InboxConstants.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

sap.uiext.inbox.InboxConstants.mEntities = {
		taskMetadata: { 
			propertiesLabel: ["INBOX_TASK_TITLE","INBOX_START_DATE","INBOX_CREATED_BY_NAME","INBOX_DUE_DATE","INBOX_STATUS","INBOX_PRIORITY"],
			properties: ["TaskTitle","CreatedOn","CreatedByName","CompletionDeadLine","Status","Priority"],
			customAttributes: []
		},
		todoMetadata: { 
			propertiesLabel: ["INBOX_TASK_TITLE","INBOX_START_DATE","INBOX_CREATED_BY_NAME","INBOX_STATUS","INBOX_PRIORITY"],
			properties: ["TaskTitle","CreatedOn","CreatedByName","Status","Priority"],
			customAttributes: []
		},
		alertMetadata: { 
			propertiesLabel: ["INBOX_TASK_TITLE","INBOX_START_DATE","INBOX_CREATED_BY_NAME","INBOX_STATUS","INBOX_PRIORITY"],
			properties: ["TaskTitle","CreatedOn","CreatedByName","Status","Priority"],
			customAttributes: []
		},
		notificationMetadata: { 
			propertiesLabel: ["INBOX_TASK_TITLE","INBOX_START_DATE","INBOX_CREATED_BY_NAME","INBOX_STATUS","INBOX_PRIORITY"],
			properties: ["TaskTitle","CreatedOn","CreatedByName","Status","Priority"],
			customAttributes: []
		}
		
};

sap.uiext.inbox.InboxConstants.TABLE_VIEW_TECH_NAMES = {
		INBOX_TABLE_VIEW_TASK_TITLE:"TaskTitle",
		INBOX_TABLE_VIEW_CREATION_DATE:"CreatedOn",
		INBOX_CREATED_BY_NAME:"CreatedByName",
		INBOX_TABLE_VIEW_DUE_DATE:"CompletionDeadLine",
		INBOX_TABLE_VIEW_STATUS:"Status",
		INBOX_TABLE_VIEW_PRIORITY:"Priority"
};

sap.uiext.inbox.InboxConstants.iconPool = sap.ui.core.IconPool;
sap.uiext.inbox.InboxConstants.tableViewImageSelected = sap.ui.core.IconPool.getIconURI("table-view");
sap.uiext.inbox.InboxConstants.rrViewImageSelected = sap.ui.core.IconPool.getIconURI("list");
sap.uiext.inbox.InboxConstants.filterViewImage = sap.ui.core.IconPool.getIconURI("filter");
sap.uiext.inbox.InboxConstants.nxtBtnImage = "next.png";
sap.uiext.inbox.InboxConstants.prevBtnImage = "previous.png";
sap.uiext.inbox.InboxConstants.refreshImage = sap.ui.core.IconPool.getIconURI("refresh");
sap.uiext.inbox.InboxConstants.loaderImage = "loader_ani.gif";
sap.uiext.inbox.InboxConstants.completeImage = "complete_action.png";
sap.uiext.inbox.InboxConstants.claimImage = "claim_action.png";
sap.uiext.inbox.InboxConstants.releaseImage = "release_action.png";
sap.uiext.inbox.InboxConstants.forwardTaskImage = "forwardTask.png"
sap.uiext.inbox.InboxConstants.settingsImage = "settings_button_regular.png";
sap.uiext.inbox.InboxConstants.settingsImageHover = "settings_button_hover.png";
sap.uiext.inbox.InboxConstants.sapLogo = "sap_logo.gif";
sap.uiext.inbox.InboxConstants.taskInitiatorDefaultImage = "taskInitiator_default.png";
sap.uiext.inbox.InboxConstants.attachmentsImage = "attachment.png";
sap.uiext.inbox.InboxConstants.commentsImage = sap.ui.core.IconPool.getIconURI("comment");
sap.uiext.inbox.InboxConstants.customAttributesImage = "custom_attributes.png";
sap.uiext.inbox.InboxConstants.COLON = ":";
sap.uiext.inbox.InboxConstants.DOT = String.fromCharCode(183);//ASCII Character Middle DOT "Â·".
sap.uiext.inbox.InboxConstants.WHITESPACE = String.fromCharCode(0);
sap.uiext.inbox.InboxConstants.LESS_THAN = String.fromCharCode(60); //ASCII Character for "<"
sap.uiext.inbox.InboxConstants.GREATER_THAN = String.fromCharCode(62); //ASCII Character for ">"
sap.uiext.inbox.InboxConstants.sortAscImage = sap.ui.core.IconPool.getIconURI("up");
sap.uiext.inbox.InboxConstants.sortDescImage = sap.ui.core.IconPool.getIconURI("down");
sap.uiext.inbox.InboxConstants.SPACE = " ";
sap.uiext.inbox.InboxConstants.EQUALS = "=";
sap.uiext.inbox.InboxConstants.taskCategoryImage = "task.png";
sap.uiext.inbox.InboxConstants.alertCategoryImage = "alert.png";
sap.uiext.inbox.InboxConstants.notificationCategoryImage = "notification.png";
sap.uiext.inbox.InboxConstants.rrViewAlertCategoryImage = "rr_view_alert.png";
sap.uiext.inbox.InboxConstants.rrViewNotificationCategoryImage = "rr_view_notification.png";
sap.uiext.inbox.InboxConstants.todoCategoryImage = "todo.png";
sap.uiext.inbox.InboxConstants.rrViewTodoCategoryImage = "rr_view_todo.png";

sap.uiext.inbox.InboxConstants.defaultView_URLParameter = "sap-ui-inbox-defaultView";
sap.uiext.inbox.InboxConstants.tableViewRowCount_URLParameter = "sap-ui-inbox-tableViewRowCount";
sap.uiext.inbox.InboxConstants.rrViewRowCount_URLParameter = "sap-ui-inbox-rrViewRowCount";
sap.uiext.inbox.InboxConstants.async_URLParameter = "async";

sap.uiext.inbox.InboxConstants.statusTooltip = {COMPLETED: "INBOX_FILTER_STATUS_COMPLETED",
   	READY: "INBOX_FILTER_STATUS_READY",
   	RESERVED: "INBOX_FILTER_STATUS_RESERVED",
   	IN_PROGRESS: "INBOX_FILTER_STATUS_IN_PROGRESS",
   	SELECTED: "INBOX_FILTER_STATUS_RESERVED",
   	STARTED: "INBOX_FILTER_STATUS_IN_PROGRESS",
   	COMMITTED : "INBOX_FILTER_STATUS_COMPLETED"
   	};

sap.uiext.inbox.InboxConstants.prioTooltip = {VERY_HIGH: "INBOX_FILTER_PRIORITY_VERY_HIGH",
		HIGH: "INBOX_FILTER_PRIORITY_HIGH",
		MEDIUM: "INBOX_FILTER_PRIORITY_MEDIUM",
		LOW: "INBOX_FILTER_PRIORITY_LOW",
		1: "INBOX_FILTER_PRIORITY_VERY_HIGH",
		2: "INBOX_FILTER_PRIORITY_VERY_HIGH",
		3: "INBOX_FILTER_PRIORITY_HIGH",
		4: "INBOX_FILTER_PRIORITY_HIGH",
		5: "INBOX_FILTER_PRIORITY_MEDIUM",
		6: "INBOX_FILTER_PRIORITY_LOW",
		7: "INBOX_FILTER_PRIORITY_LOW",
		8: "INBOX_FILTER_PRIORITY_LOW",
		9: "INBOX_FILTER_PRIORITY_LOW"};

sap.uiext.inbox.InboxConstants.statusImages = {COMPLETED: "completed_status.png",
			   	READY: "ready_status.png",
			   	RESERVED: "reserved_status.png",
			   	IN_PROGRESS: "inprocess_status.png",
			   	SELECTED: "reserved_status.png",
			   	STARTED: "inprocess_status.png",
			   	COMMITTED : "completed_status.png"};

sap.uiext.inbox.InboxConstants.prioImages = {VERY_HIGH: "very_high_priority.png",
   				HIGH: "high_priority.png",
   				MEDIUM: "medium_priority.png",
   				LOW: "low_priority.png",
   				1: "very_high_priority.png",
   				2: "very_high_priority.png",
   				3: "high_priority.png",
   				4: "high_priority.png",
   				5: "medium_priority.png",
   				6: "low_priority.png",
   				7: "low_priority.png",
   				8: "low_priority.png",
   				9: "low_priority.png"};

sap.uiext.inbox.InboxConstants.taskCategoryImages = {TASK: sap.ui.core.IconPool.getIconURI("task"), 
	
		ALERT: sap.ui.core.IconPool.getIconURI("alert"),
	    NOTIFICATION: sap.ui.core.IconPool.getIconURI("notification-2"),
	    TODO: sap.ui.core.IconPool.getIconURI("activity-2")
};

sap.uiext.inbox.InboxConstants.taskCategoryToolTip = {TASK: "INBOX_TASK_CATEGORY",
	ALERT: "INBOX_ALERT_CATEGORY",
	NOTIFICATION: "INBOX_NOTIFICATION_CATEGORY",
	TODO: "INBOX_TODO_CATEGORY"
};

sap.uiext.inbox.InboxConstants.messageTypeIcons = { error: sap.ui.core.IconPool.getIconURI("alert"),

	warning: sap.ui.core.IconPool.getIconURI("warning"),	
	success: sap.ui.core.IconPool.getIconURI("sys-enter-2"),
    info: sap.ui.core.IconPool.getIconURI("hint")
	};
sap.uiext.inbox.InboxConstants.statusMap={
		COMPLETED: "INBOX_FILTER_STATUS_COMPLETED",
	   	READY: "INBOX_FILTER_STATUS_READY",
	   	RESERVED: "INBOX_FILTER_STATUS_RESERVED",
	   	IN_PROGRESS: "INBOX_FILTER_STATUS_IN_PROGRESS"
		
};

sap.uiext.inbox.InboxConstants.messageTypeToolTip = {error: "INBOX_MSG_STATUS_ERROR",
		warning: "INBOX_MSG_STATUS_WARN",
		success: "INBOX_MSG_STATUS_SUCCESS",
		info: "INBOX_MSG_STATUS_INFO"
		};

sap.uiext.inbox.InboxConstants.mRRSortMap = {li_creationDate: "sortByStartDate",
		li_status: "sortByStatus",
		li_taskTitle : "sortByTaskTitle"
		};

sap.uiext.inbox.InboxConstants.closeImg= sap.ui.core.IconPool.getIconURI("decline");
sap.uiext.inbox.InboxConstants.closeHovImg= "close_hover.png";

sap.uiext.inbox.InboxConstants.filterKeysMetaMap = {
		INBOX_FILTER_PRIORITY : ["lowPrio","medPrio","hiPrio","veryhiPrio"],
		INBOX_FILTER_STATUS : ["resStat","readyStat","InProStat"],
		INBOX_FILTER_CREATION_DATE : ["today","last30","last15","last7"],
		INBOX_FILTER_DUE_DATETIME : ["dueDateToday","dueDatenext30","dueDatenext15","dueDatenext7"],
		INBOX_FILTER_CATEGORY : ["taskCategory", "todoCategory", "alertCategory", "notificationCategory"]
};

sap.uiext.inbox.InboxConstants.filterKeysMetaMapWithNoDueDate = {
		INBOX_FILTER_PRIORITY : ["lowPrio","medPrio","hiPrio","veryhiPrio"],
		INBOX_FILTER_STATUS : ["resStat","readyStat","InProStat"],
		INBOX_FILTER_CREATION_DATE : ["today","last30","last15","last7"],
		INBOX_FILTER_DUE_DATETIME : ["dueDateToday","dueDatenext30","dueDatenext15","dueDatenext7", "noDueDate"],
		INBOX_FILTER_CATEGORY : ["taskCategory", "todoCategory", "alertCategory", "notificationCategory"]
};

sap.uiext.inbox.InboxConstants.aFilterMetaData = [
		{name: "INBOX_FILTER_TASK_TYPE", attributes: []},
		{name: "INBOX_FILTER_PRIORITY", attributes: ["INBOX_FILTER_PRIORITY_LOW","INBOX_FILTER_PRIORITY_MEDIUM","INBOX_FILTER_PRIORITY_HIGH","INBOX_FILTER_PRIORITY_VERY_HIGH"]},
		{name: "INBOX_FILTER_STATUS", attributes: ["INBOX_FILTER_STATUS_READY","INBOX_FILTER_STATUS_RESERVED","INBOX_FILTER_STATUS_IN_PROGRESS"]},
		{name: "INBOX_FILTER_CREATION_DATE", attributes: ["INBOX_FILTER_DATETIME_TODAY","INBOX_FILTER_DATETIME_WEEK","INBOX_FILTER_DATETIME_15DAYS","INBOX_FILTER_DATETIME_MONTH"]},
		{name: "INBOX_FILTER_DUE_DATETIME", attributes: ["INBOX_FILTER_DUE_DATETIME_TODAY","INBOX_FILTER_DUE_DATETIME_WEEK","INBOX_FILTER_DUE_DATETIME_15DAYS","INBOX_FILTER_DUE_DATETIME_MONTH"]}
];

sap.uiext.inbox.InboxConstants.aFilterMetaDataWithNoDueDate = [
		{name: "INBOX_FILTER_TASK_TYPE", attributes: []},
		{name: "INBOX_FILTER_PRIORITY", attributes: ["INBOX_FILTER_PRIORITY_LOW","INBOX_FILTER_PRIORITY_MEDIUM","INBOX_FILTER_PRIORITY_HIGH","INBOX_FILTER_PRIORITY_VERY_HIGH"]},
		{name: "INBOX_FILTER_STATUS", attributes: ["INBOX_FILTER_STATUS_READY","INBOX_FILTER_STATUS_RESERVED","INBOX_FILTER_STATUS_IN_PROGRESS"]},
		{name: "INBOX_FILTER_CREATION_DATE", attributes: ["INBOX_FILTER_DATETIME_TODAY","INBOX_FILTER_DATETIME_WEEK","INBOX_FILTER_DATETIME_15DAYS","INBOX_FILTER_DATETIME_MONTH"]},
		{name: "INBOX_FILTER_DUE_DATETIME", attributes: ["INBOX_FILTER_DUE_DATETIME_TODAY","INBOX_FILTER_DUE_DATETIME_WEEK","INBOX_FILTER_DUE_DATETIME_15DAYS","INBOX_FILTER_DUE_DATETIME_MONTH", "INBOX_FILTER_NO_DUE_DATETIME"]}
];
				
sap.uiext.inbox.InboxConstants.aDrillDownFilterMetadata  = [
		{name: "INBOX_FILTER_CATEGORY", attributes: ["INBOX_FILTER_CATEGORY_TASKS", "INBOX_FILTER_CATEGORY_TODO", "INBOX_FILTER_CATEGORY_ALERT", "INBOX_FILTER_CATEGORY_NOTIFICATION"]},
		{name: "INBOX_FILTER_TASK_TYPE", attributes: []},
		{name: "INBOX_FILTER_PRIORITY", attributes: ["INBOX_FILTER_PRIORITY_LOW","INBOX_FILTER_PRIORITY_MEDIUM","INBOX_FILTER_PRIORITY_HIGH","INBOX_FILTER_PRIORITY_VERY_HIGH"]},
		{name: "INBOX_FILTER_STATUS", attributes: ["INBOX_FILTER_STATUS_READY","INBOX_FILTER_STATUS_RESERVED","INBOX_FILTER_STATUS_IN_PROGRESS"]},
		{name: "INBOX_FILTER_CREATION_DATE", attributes: ["INBOX_FILTER_DATETIME_TODAY","INBOX_FILTER_DATETIME_WEEK","INBOX_FILTER_DATETIME_15DAYS","INBOX_FILTER_DATETIME_MONTH"]},
		{name: "INBOX_FILTER_DUE_DATETIME", attributes: ["INBOX_FILTER_DUE_DATETIME_TODAY","INBOX_FILTER_DUE_DATETIME_WEEK","INBOX_FILTER_DUE_DATETIME_15DAYS","INBOX_FILTER_DUE_DATETIME_MONTH"]}
];

sap.uiext.inbox.InboxConstants.aDependentDrillDownFiltersBasedOnCategory  = {
		aFilterMetadataForCategoryTask: [
		        "INBOX_FILTER_CATEGORY", "INBOX_FILTER_TASK_TYPE", "INBOX_FILTER_PRIORITY", "INBOX_FILTER_STATUS", "INBOX_FILTER_CREATION_DATE", "INBOX_FILTER_DUE_DATETIME"
		        ],
		aFilterMetadataForCategoryTodo: [
		        "INBOX_FILTER_CATEGORY", "INBOX_FILTER_TASK_TYPE", "INBOX_FILTER_STATUS", "INBOX_FILTER_CREATION_DATE"
		        ],
		aFilterMetadataForCategoryAlert: [
		        "INBOX_FILTER_CATEGORY", "INBOX_FILTER_TASK_TYPE", "INBOX_FILTER_PRIORITY", "INBOX_FILTER_STATUS", "INBOX_FILTER_CREATION_DATE"
		        ],
		aFilterMetadataForCategoryNotification: [
		        "INBOX_FILTER_CATEGORY", "INBOX_FILTER_TASK_TYPE", "INBOX_FILTER_PRIORITY", "INBOX_FILTER_STATUS", "INBOX_FILTER_CREATION_DATE"
				],
		aFilterMetadataDefault: [
		        "INBOX_FILTER_TASK_TYPE", "INBOX_FILTER_PRIORITY", "INBOX_FILTER_STATUS", "INBOX_FILTER_CREATION_DATE", "INBOX_FILTER_DUE_DATETIME"
				]
};

sap.uiext.inbox.InboxConstants.rightAlignedTypes = ["java.lang.Integer", "java.math.BigDecimal", "java.lang.Long", "java.lang.Float"];
sap.uiext.inbox.InboxConstants.decisionOptionsFunctionImport = "DecisionOptions";
sap.uiext.inbox.InboxConstants.decisionExecutionFunctionImport = "Decision";
sap.uiext.inbox.InboxConstants.claimFunctionImport = "Claim";
sap.uiext.inbox.InboxConstants.releaseFunctionImport = "Release";
sap.uiext.inbox.InboxConstants.addCommentFunctionImport = "AddComment";

sap.uiext.inbox.InboxConstants.tableView = 'sap_inbox_list';
sap.uiext.inbox.InboxConstants.rowRepeaterView = 'sap_inbox_stream';
sap.uiext.inbox.InboxConstants.inboxViews = [sap.uiext.inbox.InboxConstants.tableView, sap.uiext.inbox.InboxConstants.rowRepeaterView];

sap.uiext.inbox.InboxConstants.customAction = "customAction";
sap.uiext.inbox.InboxConstants.sapOrigin = "SAP__Origin";
sap.uiext.inbox.InboxConstants.InstanceID = "InstanceID";

sap.uiext.inbox.InboxConstants.taskDefinitionDecisionOptionsMap = {};
sap.uiext.inbox.InboxConstants.oTaskDefinitionCustomAttributesMap = {};
sap.uiext.inbox.InboxConstants.oTaskInstanceCustomAttributeValuesMap = {};
sap.uiext.inbox.InboxConstants.taskInstanceDecisionOptionsMap = {};
sap.uiext.inbox.InboxConstants.taskDescriptionsMap = {};

sap.uiext.inbox.InboxConstants.forwardSlash = "/";
sap.uiext.inbox.InboxConstants.amperSand = "&";
sap.uiext.inbox.InboxConstants.query = "?";
sap.uiext.inbox.InboxConstants.formatJSONURLParam = "$format=json";
sap.uiext.inbox.InboxConstants.acceptHeaderforJSON = "application/json";
sap.uiext.inbox.InboxConstants.REFRESH_ON_DATE_PATTERN = "MMM dd, HH:mm";
sap.uiext.inbox.InboxConstants.FORWARD = "Forward";


sap.uiext.inbox.InboxConstants.customAttributeNavigationParam = "CustomAttributeData";
sap.uiext.inbox.InboxConstants.taskDefinitionNavigationParam = "TaskDefinitionData";


sap.uiext.inbox.InboxConstants.UserInfoCollection = "UserInfoCollection";

sap.uiext.inbox.InboxConstants.TaskDefinitionCollection = {
		entityName : "TaskDefinitionCollection",
	  	navParam : {
	  				customAttrDefn : "CustomAttributeDefinitionData"										   
	  				
		},
		properties : {
			taskDefnID : "TaskDefinitionID"
		}
};

sap.uiext.inbox.InboxConstants.TaskCollection = {
		entityName :"TaskCollection",
		navParam : {
			   
				customAttrValues : "CustomAttributeData",
				comments		 : "Comments",
  				taskDescription  : "Description",
  				taskDefinition	 : "TaskDefinitionData"
		},
		properties : {
				instanceID : "InstanceID"
		}
};

sap.uiext.inbox.InboxConstants.mEntitiesToElements = {
		taskMetadata: { 
			sap_inbox_list : {
				columnsMap : {
					TaskTitle : "TaskTitle",
					CreatedOn : "CreatedOn",
					CompletionDeadLine : "CompletionDeadLine",
					Status : "Status",
					Priority : "Priority"
				}
			},
			sap_inbox_stream: {
				sorterMap : {
					CreatedOn : "li_creationDate",
					TaskTitle : "li_taskTitle",
					Status	  : "li_status"
				}
			},
		}
	};
sap.uiext.inbox.InboxConstants.ENTITY_NAME_TASK_COLLECTION= "Task";
sap.uiext.inbox.InboxConstants.PROPERTY_NAME_CUSTOM_STATUS= "StatusText";

sap.uiext.inbox.InboxConstants.PROPERTY_NAME_TASK_TITLE = "TaskTitle";
sap.uiext.inbox.InboxConstants.PROPERTY_NAME_PRIORITY = "Priority";
sap.uiext.inbox.InboxConstants.PROPERTY_NAME_TASK_DEFINITION_NAME = "TaskDefinitionName";


sap.uiext.inbox.InboxConstants.mTooltipforActionButtonsinRR = {
		show : {
			customAttributesSegBtn :"INBOX_SHOW_CUSTOM_ATTRIBUTES",
			commentsSegBtn :"INBOX_SHOW_COMMENTS",
			attachmentsSegBtn : "INBOX_SHOW_ATTACHMENTS"
		},
		hide : {
			customAttributesSegBtn :"INBOX_HIDE_CUSTOM_ATTRIBUTES",
			commentsSegBtn :"INBOX_HIDE_COMMENTS",
			attachmentsSegBtn : "INBOX_HIDE_ATTACHMENTS"
		}
};

sap.uiext.inbox.InboxConstants.NAVIGATION_DESCRIPTION="Description";
sap.uiext.inbox.InboxConstants.NAVIGATION_TASKDEFINITION="TaskDefinitionData";

sap.uiext.inbox.InboxConstants.TABLE_COLUMN = {TASK_TITLE: 0,
   	CREATED_ON: 1,
   	CREATED_BY: 2,
   	COMPLETION_DEADLINE: 3,
   	STATUS: 4,
   	PRIORITY: 5,
};

sap.uiext.inbox.InboxConstants.SystemInfoCollection = {
		entityType : "TASKPROCESSING.SystemInfo",
	  	name : "SystemInfoCollection"
};

sap.uiext.inbox.InboxConstants.attachmentCollection = {
		entityName :"AttachmentCollection",
		navParam : {
				attachment : "Attachments",
				value : "$value"
		},
		properties : {
			id : "ID"
		}
};

sap.uiext.inbox.InboxConstants.SubstitutionProfileCollection = {
		entityType : "TASKPROCESSING.SubstitutionProfile",
	  	name : "SubstitutionProfileCollection"
};

}; // end of sap/uiext/inbox/InboxConstants.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxDataManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// Data Manager to support different oData model versions in Inbox

jQuery.sap.declare("sap.uiext.inbox.InboxDataManager");

sap.uiext.inbox.InboxDataManager = function() {
};

sap.uiext.inbox.InboxDataManager.setModel = function(oModel) {
	this._oModel = oModel;
	if (this._oModel instanceof sap.ui.model.odata.ODataModel) {
		this._sModelType = "v1"
	} else if (this._oModel instanceof sap.ui.model.odata.v2.ODataModel) {
		this._sModelType = "v2"
	}
};

sap.uiext.inbox.InboxDataManager.fireBatchRequest = function(mParameters) {
	
	if (this._sModelType == "v1") {
		
		this._oModel.clearBatch();
		this._addOperationsToBatchV1(mParameters);
	    this._oModel.submitBatch(function(oData,response) {
    		if (mParameters.fnSuccess) {
    			mParameters.fnSuccess(oData,response);
    		}
		}, function(oError) {
			if (mParameters.fnError) {
    			mParameters.fnError(oError);
    		}
	    });
		
	} else if (this._sModelType == "v2") {
		
    	this._oModel.setUseBatch(true);
    	this._oModel.setDeferredBatchGroups([mParameters.sBatchGroupId]);
    	this._addOperationsToBatchV2(mParameters);
    	
    	
    	var fnSuccess = jQuery.proxy(function(oData,response) {
    		this._oModel.setUseBatch(false);
    		if (mParameters.fnSuccess) {
    			mParameters.fnSuccess(oData,response);
    		}
		}, this);
		
		var fnError = jQuery.proxy(function(oError) {
			this._oModel.setUseBatch(false);
			if (mParameters.fnError) {
    			mParameters.fnError(oError);
    		}
	    }, this);
	    
	    this._oModel.submitChanges({batchGroupId : mParameters.sBatchGroupId, success : fnSuccess , error : fnError });
    	
	}
};

sap.uiext.inbox.InboxDataManager._addOperationsToBatchV1 = function(mParameters) {
	
	var sPath, oBatchOperation;
	
	for (var i = 0; i < mParameters.numberOfRequests; i++) {
		
		if (mParameters.sPath) {
			sPath = mParameters.sPath
		} else if (mParameters.aPaths) {
			sPath = mParameters.aPaths[i]
		}
		
		if (mParameters.aUrlParameters) {
			sPath = this._createRequestUrl(sPath, mParameters.aUrlParameters[i]);
		}
		
		if (mParameters.aProperties) {
			oBatchOperation = this._oModel.createBatchOperation(sPath, mParameters.sMethod, mParameters.aProperties[i]);
		} else {
			oBatchOperation = this._oModel.createBatchOperation(sPath, mParameters.sMethod);
		}
		
		if (mParameters.sMethod === "GET") {
			this._oModel.addBatchReadOperations([oBatchOperation]);
		} else if (mParameters.sMethod === "POST") {
			this._oModel.addBatchChangeOperations([oBatchOperation]);
		}
	}
	
};

sap.uiext.inbox.InboxDataManager._addOperationsToBatchV2 = function(mParameters) {
	
	var sPath;
	var oEntry = {
    	batchGroupId : mParameters.sBatchGroupId
    };
	
	for (var i = 0; i < mParameters.numberOfRequests; i++) {
		if (mParameters.aUrlParameters) {
			oEntry.urlParameters = mParameters.aUrlParameters[i];
		}
		if (mParameters.aProperties) {
			oEntry.properties = mParameters.aProperties[i];
		}
		if (mParameters.sPath) {
			sPath = mParameters.sPath
		} else if (mParameters.aPaths) {
			sPath = mParameters.aPaths[i]
		}
		if (!jQuery.sap.startsWith(sPath, "/")) {
			sPath = "/" + sPath;
		}
		if (mParameters.sMethod == "GET") {
			this._oModel.read(sPath, oEntry);
		} else if (mParameters.sMethod == "POST") {
			oEntry.changeSetId = "changeSetId" + i;
			this._oModel.createEntry(sPath, oEntry);
		}
	}
	
};

sap.uiext.inbox.InboxDataManager.callFunctionImport = function(sPath, mParameters, bAsync) {
	
	if (this._oModel instanceof sap.ui.model.odata.ODataModel) {
		if (bAsync != undefined) {
			mParameters.async = bAsync
		}
	}
	
	if (!jQuery.sap.startsWith(sPath, "/")) {
		sPath = "/" + sPath;
	}
	
	this._oModel.callFunction(sPath, mParameters);
};

sap.uiext.inbox.InboxDataManager.readData = function(sPath, mParameters, bAsync) {
	
	if (this._oModel instanceof sap.ui.model.odata.ODataModel) {
		if (bAsync != undefined) {
			mParameters.async = bAsync
		}
	}
	
	if (!jQuery.sap.startsWith(sPath, "/")) {
		sPath = "/" + sPath;
	}
	
	if(!(this._oModel instanceof sap.ui.model.json.JSONModel)){
		this._oModel.read(sPath, mParameters);
	}
	
};

sap.uiext.inbox.InboxDataManager._createRequestUrl = function(sPath, mUrlParameters) {
	
	var aUrlParams = [];
	var sUrl = sPath;
	
	jQuery.each(mUrlParameters, function (sName, oValue) {
		aUrlParams.push(sName + "=" + oValue);
	});
	
	if (aUrlParams && aUrlParams.length > 0) {
		sUrl += "?" + aUrlParams.join("&");
	}
	return sUrl;
};

sap.uiext.inbox.InboxDataManager.removeData = function(sPath, mParameters, bAsync) {
	
	if (this._oModel instanceof sap.ui.model.odata.ODataModel) {
		if (bAsync != undefined) {
			mParameters.async = bAsync
		}
	}
	
	if (!jQuery.sap.startsWith(sPath, "/")) {
		sPath = "/" + sPath;
	}
	
	this._oModel.remove(sPath, mParameters);
};

}; // end of sap/uiext/inbox/InboxDataManager.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxFormattedTextView') ) {
 /*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.InboxFormattedTextView");

sap.ui.commons.FormattedTextView.extend("sap.uiext.inbox.InboxFormattedTextView", {
    metadata: {
        properties: {
            wrapping: {type: "boolean",defaultValue: true},
            maxLines: {type: "int",defaultValue: 1}
        }
    },
    renderer: function(oRm, oControl) {
        sap.ui.commons.FormattedTextViewRenderer.render.apply(this, arguments);
    }
});

sap.uiext.inbox.InboxFormattedTextView.prototype.applyStylingToFormattedTextDiv = function(oFormattedTextViewDiv) {
    
    if (oFormattedTextViewDiv) {
        if (this.getWrapping() && this.getMaxLines() > 0) {
            if (!this.canUseNativeLineClamp()) {
                this.clampHeight();
                jQuery(oFormattedTextViewDiv).css({"text-overflow": "ellipsis","overflow": "hidden","max-width": "100%"});
            } else {
                jQuery(oFormattedTextViewDiv).css({"display": "-webkit-box","-webkit-box-orient": "vertical","overflow": "hidden","-webkit-line-clamp": this.getMaxLines() + ""});
            }
        } else if (!this.getWrapping()) {
            jQuery(oFormattedTextViewDiv).css({"text-overflow": "ellipsis","overflow": "hidden","max-width": "100%","whitespace": "nowrap"});
        }
    }
   
};


sap.uiext.inbox.InboxFormattedTextView.prototype.setMaxLines = function(value) {
    this.setProperty('maxLines', value);
    var oFormattedTextViewDiv = this.getTextDomRef();
    this.applyStylingToFormattedTextDiv(oFormattedTextViewDiv);
    return this;
};

sap.uiext.inbox.InboxFormattedTextView.prototype.onAfterRendering = function() {
	var oTaskDescriptionDiv = this.getTextDomRef();
	this.applyStylingToFormattedTextDiv(oTaskDescriptionDiv);
	
};



sap.uiext.inbox.InboxFormattedTextView.hasNativeLineClamp = (function() {
    return (typeof document.documentElement.style.webkitLineClamp != 'undefined');
});


sap.uiext.inbox.InboxFormattedTextView.prototype.canUseNativeLineClamp = function() {
    if (!sap.uiext.inbox.InboxFormattedTextView.hasNativeLineClamp()) {
        return false;
    }
    return true;
};

sap.uiext.inbox.InboxFormattedTextView.prototype.getClampHeight = function(d) {
    var oTaskDescriptionDiv = d|| this.getTextDomRef();
    return (this.getMaxLines() * this.getLineHeight(oTaskDescriptionDiv));
};

sap.uiext.inbox.InboxFormattedTextView.prototype.setHtmlText = function(sText) {
	if(sap.ui.commons.FormattedTextView.prototype.setHtmlText) {
		sap.ui.commons.FormattedTextView.prototype.setHtmlText.apply(this,arguments);
	} else {
		this.setProperty("htmlText", sText);
	}
	//Display the Link only if the taskdescription is present and if it is more than one line
	if( this.isClamped()) {
			this.getParent().getAggregation("taskDescriptionLink").setVisible(true);
	}
};
sap.uiext.inbox.InboxFormattedTextView.prototype.clampHeight = function(d) {
	var oTaskDescriptionDiv = d || this.getTextDomRef();
    if (!oTaskDescriptionDiv) {
        return 0;
    }
    var iClampHeight = this.getClampHeight(oTaskDescriptionDiv);
    oTaskDescriptionDiv.style.maxHeight = iClampHeight + 'px';
    return iClampHeight;
};

sap.uiext.inbox.InboxFormattedTextView.prototype.getTextDomRef = function() {
 
	var oTaskDescriptionDiv = this.getDomRef();
    return oTaskDescriptionDiv && (oTaskDescriptionDiv.firstElementChild || oTaskDescriptionDiv);
};


sap.uiext.inbox.InboxFormattedTextView.prototype.getLineHeight = function(d) {
    var oTaskDescriptionDiv = d || this.getTextDomRef();
    var iLineHeightValue, oStyleObject;
    if (!oTaskDescriptionDiv) {
        return ;
    }
    if (window.getComputedStyle !== undefined) {
    	  oStyleObject = window.getComputedStyle(oTaskDescriptionDiv);
    } else {
    	oStyleObject = {};
    	oStyleObject.lineHeight = document.getElementById(oTaskDescriptionDiv.id).currentStyle.lineHeight;
    	oStyleObject.fontSize = document.getElementById(oTaskDescriptionDiv.id).currentStyle.fontSize;
    }
    iLineHeightValue = parseFloat(oStyleObject.lineHeight);
    if (!iLineHeightValue) {
        iLineHeightValue = parseFloat(oStyleObject.fontSize) * this.normalLineHeight;
    }
    var iLineHeight = Math.floor(iLineHeightValue);
    return iLineHeight;
};
sap.uiext.inbox.InboxFormattedTextView.prototype.isClamped = function(d,e) {
    var oTaskDescriptionDiv = d || this.getTextDomRef();
    if (!oTaskDescriptionDiv) {
        return ;
    }
    var sTaskDescriptionText = this.getHtmlText(true);
    var iClampHeight = this.getClampHeight(oTaskDescriptionDiv);
    var iTextLength = e || sTaskDescriptionText.length;
    oTaskDescriptionDiv.textContent = sTaskDescriptionText.slice(0, iTextLength);
    if (oTaskDescriptionDiv.scrollHeight > iClampHeight) {
        return true;
    }
    return false;
};

sap.uiext.inbox.InboxFormattedTextView.prototype.removeClamp = function(d) {

    var oTaskDescriptionDiv = d || this.getTextDomRef();
    if (!oTaskDescriptionDiv) {
        return
    }
    jQuery(oTaskDescriptionDiv).css("-webkit-line-clamp", '');
    jQuery(oTaskDescriptionDiv).css("max-height", '');
    jQuery(oTaskDescriptionDiv).css("height", 'auto');

};


sap.ui.core.Control.extend("sap.uiext.inbox.InboxTaskDetails", {
    metadata: {
        properties: {
			showMore : {type: "string",defaultValue: 'auto'
				
			}
		},
        
        aggregations: {
            fTV: {
                type: "sap.ui.commons.FormattedTextView",
                multiple: false,
                visibility: "public"
            },
            taskDescriptionLink: {
                type: "sap.ui.commons.Link",
                multiple: false,
                visibility: "hidden"
            }
        },
        events: {
            showMoreClick: {enablePreventDefault: true}
        }
    },
    
    init: function() {
    	var that = this;
    	this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
        this.setAggregation('taskDescriptionLink', new sap.ui.commons.Link({ text:  that._oBundle.getText("INBOX_SHOW_MORE_TEXT"), tooltip: that._oBundle.getText("INBOX_SHOW_MORE_LINK_TOOLTIP"),visible: false}).attachPress(jQuery.proxy(this.showMoreClick, this)));
    },
    
    renderer: {
        render: function(oRm, oControl) {
            
            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.addClass("inboxTaskDetails");
            oRm.writeClasses();
            oRm.write(">");
            
            oRm.write("<div");
            oRm.addClass("fTV");
            oRm.writeClasses();
            oRm.writeStyles();
            oRm.write(">");
            oRm.renderControl(oControl.getAggregation("fTV"));
            oRm.write("</div>");
            
            if (oControl.getAggregation('taskDescriptionLink').getVisible()) {
                oRm.write("<div");
                oRm.addClass("taskDescriptionLink");
                oRm.writeClasses();
                oRm.writeStyles();
                oRm.write(">");
                oRm.renderControl(oControl.getAggregation("taskDescriptionLink"));
                oRm.write("</div>");
            }
            
            oRm.write("</div>");
        }
    
    },
    
    onAfterRendering: function() {
        var oFTV = this.getAggregation('fTV');
        if (this.getShowMore() === 'true' ||(oFTV.isClamped() && this.getShowMore() === 'auto')) {
            this.getAggregation('taskDescriptionLink').setVisible(true);
        
        } 
    },
    
    showMoreClick: function(oEvent) {
    	var _oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
    	var sShowMoreLinkText = _oBundle.getText("INBOX_SHOW_MORE_TEXT");
    	var sShowLessLinkText = _oBundle.getText("INBOX_SHOW_LESS_TEXT");
    	
        if (oEvent.getSource().getText() ===  sShowMoreLinkText) {
            oEvent.getSource().setText(_oBundle.getText("INBOX_SHOW_LESS_TEXT"));
            oEvent.getSource().setTooltip(_oBundle.getText("INBOX_SHOW_LESS_LINK_TOOLTIP"))
            this.fireShowMoreClick({text: sShowMoreLinkText});
        } else {
            oEvent.getSource().setText(sShowMoreLinkText);
            oEvent.getSource().setTooltip(_oBundle.getText("INBOX_SHOW_MORE_LINK_TOOLTIP"));
            this.fireShowMoreClick({text: sShowLessLinkText});
        }
    
    }

});



}; // end of sap/uiext/inbox/InboxFormattedTextView.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxLaunchPadRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.InboxLaunchPadRenderer");

/**
 * @class InboxLaunchPad renderer. 
 * @static
 */
sap.uiext.inbox.InboxLaunchPadRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.InboxLaunchPadRenderer.render = function(oRm, oControl){ 
    // write the HTML into the render manager
	 oRm.write("<div style=\"height:100%; width:100%;\"");
	 oRm.writeControlData(oControl);
	 oRm.addClass("sapUiextInboxInboxLaunchPadRfct");
	 oRm.writeClasses();
	 oRm.write(">");// span element	
	 oRm.renderControl(oControl.getAggregation("launchPadHeader"));
	 
	 //write Tile Container
	 oRm.write("<div style=\"height:90%; width:100%;\""); //
	 oRm.addClass("sapUiextInboxTileContainer");
	 oRm.writeClasses();
	 oRm.write(">");// span element
	 oRm.renderControl(oControl.getAggregation("launchPadTileContainer"));
	 oRm.write("</div>");
	 
	 oRm.write("</div>");
};

}; // end of sap/uiext/inbox/InboxLaunchPadRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxLink') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
 
 jQuery.sap.declare("sap.uiext.inbox.InboxLink");
 
 
 sap.ui.commons.Link.extend("sap.uiext.inbox.InboxLink", {
	init: function(){
		if (sap.ui.commons.Link.prototype.init) { 
		      sap.ui.commons.Link.prototype.init.apply(this, arguments); 
		    }
		this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	}, 
	
	metadata : {                             
		properties : {
        "overdue" : {type : "boolean", defaultValue : false}                
		}
	},
	
	setOverdue: function(value){
		this.setProperty('overdue',value);
		if(value){
			this.addStyleClass("sapUiExtInboxRedColor");
			//this.setText("! "+this.getText());
		}else{
			this.removeStyleClass("sapUiExtInboxRedColor");
		}
		return this;
	},
	
    onclick : function(oEvent) {
			 if (this.getEnabled()) {
				 if (!this.firePress({windowEvent:oEvent})) {
					oEvent.preventDefault();
				}
			} else {
				oEvent.preventDefault();
			}
		},
	setText: function(value) {
			if(value !== undefined)
			 {
			 	var sValue = value ? value.replace(/^\s+|\s+$/g,'') : value;
			 	var lessThanSymbol =  sap.uiext.inbox.InboxConstants.LESS_THAN;
			 	var greaterThanSymbol = sap.uiext.inbox.InboxConstants.GREATER_THAN;
			 	if(!sValue) {
					value = lessThanSymbol + this._oBundle.getText("INBOX_TASK_TITLE_NOTAVAILABLE_MSG") + greaterThanSymbol;
			 	}
			}
	    sap.ui.commons.Link.prototype.setText.call(this,[value]);
	},

	setTooltip : function(value) {
		    
		    var sValue = value ? value.replace(/^\s+|\s+$/g,'') : value;
			if(!sValue) {
				value = this._oBundle.getText("INBOX_TASK_TITLE_NOTAVAILABLE_MSG");
			}
			else {
			value = sValue+"\n"+this._oBundle.getText("INBOX_CURRENT_TASKTITLE_TOOLTIP");
			}
			 sap.ui.commons.Link.prototype.setTooltip.call(this,value);
	},
	
	renderer: function(oRenderManager, oLink) {
	var rm = oRenderManager,
		r = sap.ui.commons.LinkRenderer;

	// Return immediately if control is invisible
	if (!oLink.getVisible()) {
		return;
	}

	// Link is rendered as a "<Link>" element
	rm.write("<a");
	rm.writeControlData(oLink);

	rm.writeAccessibilityState(oLink);

	if (!oLink.getEnabled()) {
		rm.addClass("sapUiLnkDsbl");
		rm.writeAttribute("disabled", "true");
	} else {
		rm.addClass("sapUiLnk");
	}
	rm.writeClasses();

	if (oLink.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oLink.getTooltip_AsString());
	}

	if (oLink.getHref()) {
		rm.writeAttributeEscaped("href", oLink.getHref());
	}	else {
		rm.writeAttribute("href", "javascript:void(0);");
	}

	if (oLink.getTarget()) {
		rm.writeAttributeEscaped("target", oLink.getTarget());
	}

	if (!oLink.getEnabled()) {
		rm.writeAttribute("tabIndex", "-1");
	} else {
		rm.writeAttribute("tabIndex", "0");
	}

	if (oLink.getWidth()) {
		rm.addStyle("width", oLink.getWidth());
	}
	rm.writeStyles();

	// Close the starting tag
	rm.write(">");

	// Write the Link label
	if (oLink.getText()) {
		var text = oLink.getText();
		if(oLink.getOverdue()){
			text = "! "+text;
		}
		rm.writeEscaped(text);
	}

	// Close all tags
	rm.write("</a>");

}

});
}; // end of sap/uiext/inbox/InboxLink.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxPrimaryFilterEnum') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
	jQuery.sap.declare("sap.uiext.inbox.InboxPrimaryFilterEnum");
	
	/**
	 *  @class
	 * 	Enumeration for Primary Filters
	 *  This value will be applied for the DropDown Filter in Inbox
	 *  
	 * @static
	 * @public
	 */
	sap.uiext.inbox.InboxPrimaryFilterEnum = {
			/**
			 * Primary Filter for Open Tasks
			 * @public
			 */
			OPEN: {key: "li_openTasks", value: "open"},
			/**
			 * Primary Filter for Completed Tasks
			 * @public
			 */
			COMPLETED: {key: "li_completedTasks" ,value : "completed"},
			/**
			 * Primary Filter for Escalated Tasks
			 * @public
			 */
			ESCALATED: {key: "li_escalatedTasks" , value : "escalated"},
			/**
			 * Primary Filter for Overdue Tasks
			 * @public
			 */
			OVERDUE: {key: "li_overdueTasks" , value: "overdue"}
	};
}; // end of sap/uiext/inbox/InboxPrimaryFilterEnum.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.InboxRenderer");

/**
 * @class Inbox renderer. 
 * @static
 */
sap.uiext.inbox.InboxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.InboxRenderer.render = function(rm, oControl){ 
	// write the HTML into the render manager
    rm.write("<div");
    rm.writeControlData(oControl);
    rm.writeAttribute("class","sapUiExtInbox"); 
    rm.write(">"); // SPAN element
    rm.renderControl(oControl.vLayout);
    rm.write("</div>");
};

}; // end of sap/uiext/inbox/InboxRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxSecondaryFilterValuesEnum') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
	jQuery.sap.declare("sap.uiext.inbox.InboxSecondaryFilterValuesEnum");
	
	sap.uiext.inbox.InboxSecondaryFilterValuesEnum = function(){
		throw new Error();
	};
	
	
	/**
	 * 	@class
	 * 	Enumeration for Secondary Filter Values
	 *    
	 * 	@static
	 * 	@public
	 */
	sap.uiext.inbox.InboxSecondaryFilterValuesEnum = {
		/**
		 * Enum Values displayed by the Status Secondary Filter dropdown are
			 *<br><i> Ready </i>      :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.READY </br>
			 *<br><i>Reserved </i>    :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.RESERVED  </br>
			 *<br><i>InProgress </i>  :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.INPROGRESS  </br>
		 * @public
		 */
		Status : {
			/**
			 * Enum Value for Ready Status Secondary Filter
			 * @public
			 */
			READY: {
						//TODO: change to use _getfilters from inboxUtils instead of creating here..
						key: "READY",
						uiKey: "INBOX_FILTER_STATUS_READY" ,
						filterKey: "readyStat"/*,
						filter: new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "READY")*/
			},
			/**
			 * Enum Values for Reserved Status Secondary Filter
			 * @public
			 */
			RESERVED: {
						key: "RESERVED",
						uiKey: "INBOX_FILTER_STATUS_RESERVED" , 
						filterKey: "resStat"/*,
						filter: new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "RESERVED")*/
			},
			/**
			 * Enum Values for In Progress Status Secondary Filter
			 * @public
			 */
			INPROGRESS: {
						key: "IN_PROGRESS",
						uiKey: "INBOX_FILTER_STATUS_IN_PROGRESS", 
						filterKey: "InProStat"/*,
						filter: new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "IN_PROGRESS")*/
			}
		},
	
		/**
		 * 
		 *  Enum Values displayed by Priority Secondary Filter dropdown are
		 * <br> <i> Low </i>     : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.LOW </br>
		 * <br> <i> Medium</i>   : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.MEDIUM </br>
		 * <br> <i> High </i>    : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.HIGH</br>
		 * <br> <i> Very High</i>: sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.VERYHIGH</br> 
		 * @public
		 */
		Priority : {
			/**
			 * Enum Values for Low Priority Secondary Filter
			 * @public
			 */
			LOW: {
						key: "LOW",
						uiKey: "INBOX_FILTER_PRIORITY_LOW" ,
						filterKey: "lowPrio"/*,
						filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "LOW")*/
			},
			/**
			 * Enum Values for Medium Priority Secondary Filter
			 * @public
			 */
			MEDIUM: {
						key: "MEDIUM",
						uiKey: "INBOX_FILTER_PRIORITY_MEDIUM" ,
						filterKey: "medPrio"/*,
						filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "MEDIUM")*/
			},
			/**
			 * Enum Values for High Priority Secondary Filter
			 * @public
			 */
			HIGH: {
						key: "HIGH",
						uiKey: "INBOX_FILTER_PRIORITY_HIGH" ,
						filterKey: "hiPrio"/*,
						filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "HIGH")*/
			},
			/**
			 * Enum Values for Very High Priority Secondary Filter
			 * @public
			 */
			VERYHIGH: {
						key: "VERY_HIGH",
						uiKey: "INBOX_FILTER_PRIORITY_VERY_HIGH" ,
						filterKey: "veryhiPrio"/*,
						filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "VERY_HIGH")*/
			}
		},
	
		/**
		 * 
		 * Enum Values displayed by the StartDate Secondary Filter are
		     * <br> <i> Today </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.TODAY  </br>
			 * <br> <i> Last7Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.LAST7DAYS </br>
			 * <br> <i>Last15Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.LAST15DAYS </br>
			 * <br> <i>Last30Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.LAST30DAYS </br>
		 * @public
		 * 
		 */
		StartDate : {
			/**
			 * Enum Values for Today StartDate Secondary Filter
			 * @public
			 */
			TODAY: {
						key: "Today",
						uiKey: "INBOX_FILTER_DATETIME_TODAY" ,
						filterKey: "today"/*,
						filter: new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, "")*/
			},
			/**
			 * Enum Values for Last 7 Days StartDate Secondary Filter
			 * @public
			 */
			LAST7DAYS: {
						key: "Last_7_days",
						uiKey: "INBOX_FILTER_DATETIME_WEEK" ,
						filterKey: "last7"/*,
						filter: new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, "")*/
			},
			/**
			 * Enum Values for Last 15 Days StartDate Secondary Filter
			 * @public
			 */
			LAST15DAYS: {
						key: "Last_15_days",
						uiKey: "INBOX_FILTER_DATETIME_15DAYS" ,
						filterKey: "last15"/*,
						filter: new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, "")*/
			},
			/**
			 * Enum Values for Last 30 Days StartDate Secondary Filter
			 * @public
			 */
			LAST30DAYS: {
						key: "Last_30_days",
						uiKey: "INBOX_FILTER_DATETIME_MONTH" ,
						filterKey: "last30"/*,
						filter: new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, "")*/
			}
		},
	
		/**
		 * Enum Values displayed by DueDate Secondary Filter dropdown are 
		 * <br><i> Today    </i> : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.TODAY </br>
		 * <br><i> Next7Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NEXT7DAYS  </br>
		 * <br><i> Next15Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NEXT15DAYS  </br>
		 * <br><i> Next30Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NEXT30DAYS  </br>
		 * <br><i> NoDueDate </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NODUEDATE  </br>
		 * @public
		 * 
		 */
		DueDate : {
			/**
			 * Enum Values for Today Due Date Secondary Filter
			 * @public
			 */
			TODAY: {
				key: "Today",
				uiKey: "INBOX_FILTER_DUE_DATETIME_TODAY" ,
				filterKey: "dueDateToday"/*,
				filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff(0, false))*/
			},
			/**
			 * Enum Values for Next 7 Days Due Date Secondary Filter
			 * @public
			 */
			NEXT7DAYS: {
				key: "Next_7_days",
				uiKey: "INBOX_FILTER_DUE_DATETIME_WEEK" ,
				filterKey: "dueDatenext7"/*,
				filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff(0, false))*/
			},
			/**
			 * Enum Values for Next 15 Days Due Date Secondary Filter
			 * @public
			 */
			NEXT15DAYS: {
				key: "Next_15_days",
				uiKey: "INBOX_FILTER_DUE_DATETIME_15DAYS" ,
				filterKey: "dueDatenext15"/*,
				filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff(0, false))*/
			},
			/**
			 * Enum Values for Next 30 Days Due Date Secondary Filter
			 * @public
			 */
			NEXT30DAYS: {
				key: "Next_30_days",
				uiKey: "INBOX_FILTER_DUE_DATETIME_MONTH" ,
				filterKey: "dueDatenext30"/*,
				filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff(0, false))*/
			},
			/**
			 * Enum Values for No Due Date Secondary Filter
			 * @public
			 */
			NODUEDATE: {
				key: "No_Due_Date",
				uiKey: "INBOX_FILTER_NO_DUE_DATETIME" ,
				filterKey: "noDueDate"/*,
				filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff(0, false))*/
			}
		}
};
}; // end of sap/uiext/inbox/InboxSecondaryFilterValuesEnum.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxSplitAppRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.InboxSplitAppRenderer");

/**
 * @class InboxSplitApp renderer. 
 * @static
 */
sap.uiext.inbox.InboxSplitAppRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.InboxSplitAppRenderer.render = function(oRm, oControl){ 
    // write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.writeAttribute("class","sapuiextinbox-inboxSplitApp"); 
	oRm.write(">"); // SPAN element
	oRm.renderControl(oControl.getAggregation("splitAppl"));
	oRm.write("</div>");
};

}; // end of sap/uiext/inbox/InboxSplitAppRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxTaskCategoryFilterList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
 
 jQuery.sap.declare("sap.uiext.inbox.InboxTaskCategoryFilterList");
 
 sap.ui.ux3.FacetFilterList.extend("sap.uiext.inbox.InboxTaskCategoryFilterList",  {
		init: function(){
			if (sap.ui.ux3.FacetFilterList.prototype.init) { 
			  sap.ui.ux3.FacetFilterList.prototype.init.apply(this, arguments); 
			}
			this._oListBox.removeItem(this._oItemAll);
			this._oItemAll = undefined;
		},
		renderer : function(oRm, oControl) {
			sap.ui.ux3.FacetFilterListRenderer.render.apply(this, arguments);
		},
		removeAllItems : function() {
			this._oListBox.removeAllItems();
		},
		destroyItems : function() {
			this._oListBox.destroyItems();
		},
		updateText4All : function() {
		},
		onBeforeRendering : function() {
			if (this.bFullHeight) {
			} else {
				this._oListBox.setVisibleItems(5)
			}
			var k = this.getSelectedKeys();
			if (k && k.length > 0) {
				this._oListBox.setSelectedKeys(k);
				this._bAllOnly = false
			}
		},updateItems : function() {
			this.updateAggregation('items');
			var s = this._oListBox.getSelectedKeys();

		},onSelect : function(f, e) {
			var s = this._oListBox.getSelectedKeys();
			this._bAllOnly = false
			this.setProperty('selectedKeys', s, true);
			var S = [];
			var a = [];
			var A = this._oListBox.getSelectedItems();
			if (!this._bAllOnly) {
				for (var i = 0; i < A.length; i++) {
					if (A[i] != this._oItemAll) {
						S.push(this.indexOfItem(A[i]));
						a.push(A[i])
					}
				}
			}
			this.fireSelect({id: f.getId(),all: this._bAllOnly,selectedIndices: S,selectedItems: a})
			}
});
}; // end of sap/uiext/inbox/InboxTaskCategoryFilterList.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
 
 jQuery.sap.declare("sap.uiext.inbox.InboxTile");
 
 sap.m.StandardTile.extend("sap.uiext.inbox.InboxTile", {
	init: function(){
		if (sap.m.StandardTile.prototype.init) { 
			sap.m.StandardTile.prototype.init.apply(this, arguments); 
		    }
		this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	}, 
	
	metadata : {                             
		properties : {}
	},
	renderer : {}
});
}; // end of sap/uiext/inbox/InboxTile.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxToggleTextView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
 
jQuery.sap.declare("sap.uiext.inbox.InboxToggleTextView");
sap.ui.core.Control.extend("sap.uiext.inbox.InboxToggleTextView", {
    metadata: {
        properties: {
			showMore : {type: "string",defaultValue: 'auto'
				
			}
		},
        
        aggregations: {
            fTV: {
                type: "sap.ui.commons.FormattedTextView",
                multiple: false,
                visibility: "public"
            },
            taskDescriptionLink: {
                type: "sap.ui.commons.Link",
                multiple: false,
                visibility: "hidden"
            }
        },
        events: {
            showMoreClick: {enablePreventDefault: true}
        }
    },
    
    init: function() {
    	var that = this;
    	this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
        this.setAggregation('taskDescriptionLink', new sap.ui.commons.Link({ text:  that._oBundle.getText("INBOX_SHOW_MORE_TEXT"), tooltip: that._oBundle.getText("INBOX_SHOW_MORE_LINK_TOOLTIP"),visible: false}).attachPress(jQuery.proxy(this.showMoreClick, this)));
    },
    
    renderer: {
        render: function(oRm, oControl) {
            
            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.addClass("InboxToggleTextView");
            oRm.writeClasses();
            oRm.write(">");
            
            oRm.write("<div");
            oRm.addClass("fTV");
            oRm.writeClasses();
            oRm.writeStyles();
            oRm.write(">");
            oRm.renderControl(oControl.getAggregation("fTV"));
            oRm.write("</div>");
            
            if (oControl.getAggregation('taskDescriptionLink').getVisible()) {
                oRm.write("<div");
                oRm.addClass("taskDescriptionLink");
                oRm.writeClasses();
                oRm.writeStyles();
                oRm.write(">");
                oRm.renderControl(oControl.getAggregation("taskDescriptionLink"));
                oRm.write("</div>");
            }
            
            oRm.write("</div>");
        }
    
    },
    
    onAfterRendering: function() {
        var oFTV = this.getAggregation('fTV');
        if (this.getShowMore() === 'true' ||(oFTV.isClamped() && this.getShowMore() === 'auto')) {
            this.getAggregation('taskDescriptionLink').setVisible(true);
        
        } 
    },
    
    showMoreClick: function(oEvent) {
    	var _oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
    	var sShowMoreLinkText = _oBundle.getText("INBOX_SHOW_MORE_TEXT");
    	var sShowLessLinkText = _oBundle.getText("INBOX_SHOW_LESS_TEXT");
    	
        if (oEvent.getSource().getText() ===  sShowMoreLinkText) {
            oEvent.getSource().setText(_oBundle.getText("INBOX_SHOW_LESS_TEXT"));
            oEvent.getSource().setTooltip(_oBundle.getText("INBOX_SHOW_LESS_LINK_TOOLTIP"))
            this.fireShowMoreClick({text: sShowMoreLinkText});
        } else {
            oEvent.getSource().setText(sShowMoreLinkText);
            oEvent.getSource().setTooltip(_oBundle.getText("INBOX_SHOW_MORE_LINK_TOOLTIP"));
            this.fireShowMoreClick({text: sShowLessLinkText});
        }
    
    }

});

}; // end of sap/uiext/inbox/InboxToggleTextView.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// Utility functions for Inbox
/*global URI */// declare unusual global vars for JSLint/SAPUI5 validation
jQuery.sap.declare("sap.uiext.inbox.InboxUtils");

jQuery.sap.require('sap.ui.model.odata.Filter'); // unlisted dependency retained




sap.uiext.inbox.InboxUtils = function(){
	throw new Error();
};

sap.uiext.inbox.InboxUtils._getCategoryFilter = function(sValue) {
	return new sap.ui.model.Filter("TaskDefinitionData/Category", sap.ui.model.FilterOperator.EQ, sValue);
};

sap.uiext.inbox.InboxUtils._getStatusFilters = function(sValue) {
	return new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, sValue);
};


sap.uiext.inbox.InboxUtils._getPriorityFilters = function(sValue) {
	return new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, sValue);
};


sap.uiext.inbox.InboxUtils._getDueDateFilters = function(sValue) {
		var fromDate = new Date(0);
		var formD = undefined;
		switch(sValue){
			case "Today":
				formD = this._getFormattedDueDateTimeOff(1);
				break;
			case "Next_7_days":
				formD = this._getFormattedDueDateTimeOff(7);
				break;
			case "Next_15_days":
				formD = this._getFormattedDueDateTimeOff(15);
				break;
			case "Next_30_days":
				formD = this._getFormattedDueDateTimeOff(30);
				break;
			case "No_Due_Date":
				return new sap.ui.model.Filter("CompletionDeadLine", sap.ui.model.FilterOperator.EQ, null);
		}
		return new sap.ui.model.odata.Filter("CompletionDeadLine", [{operator:sap.ui.model.FilterOperator.LE, value1: formD.toUTCString()},{operator:sap.ui.model.FilterOperator.GE, value1:fromDate.toUTCString()}], true);
};

sap.uiext.inbox.InboxUtils._getDateTimeFilters = function(sValue) {
	var formD = undefined;
	switch(sValue){
		case "Today":
			formD = this._getFormattedDateTimeOff(0, false);
			break;
		case "Last_7_days":
			formD = this._getFormattedDateTimeOff(7, false);
			break;
		case "Last_15_days":
			formD = this._getFormattedDateTimeOff(15, false);
			break;
		case "Last_30_days":
			formD = this._getFormattedDateTimeOff(30, false);
			break;
	}
	return new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, formD.toUTCString());
};


//TODO: Inbox should use these utility methods.
sap.uiext.inbox.InboxUtils._getFormattedDueDateTimeOff = function(subT) {
  var myDate = new Date();
  myDate.setDate(myDate.getDate() + subT);
  myDate.setMinutes(0);
  myDate.setHours(0);
  myDate.setSeconds(0);
  return myDate;
};


sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff = function(subT, isNow) {
	var myDate = new Date();
	myDate.setDate(myDate.getDate() - subT);
	if(!isNow){
		myDate.setMinutes(0);
		myDate.setHours(0);
		myDate.setSeconds(0);
	}
	return myDate;
};

sap.uiext.inbox.InboxUtils.inArray = function (key, mapArray){
	var index = -1;
	jQuery.each(mapArray, function(i, map) {
		if(map[key] === key){
			index = i; 
			return false;
		}
	});
	return index;
};

sap.uiext.inbox.InboxUtils._dateFormat = function(dateValue) {
	if (dateValue != undefined && typeof (dateValue) == 'string' && dateValue != "") {
		var date;
		if (dateValue.indexOf('Date') != -1) {
			date = new Date();
			date.setTime(dateValue.substring((dateValue.indexOf("(") + 1), dateValue.indexOf(")")));
		} else {
			date = new Date(dateValue.substring((dateValue.indexOf("'") + 1), dateValue.length - 1));
		}
		dateValue = date;
	}

	if (dateValue != undefined && dateValue != "") {
		var ins = sap.ui.core.format.DateFormat.getDateInstance({
			style : "medium"
		});
		return ins.format(dateValue);
	}
		//FOR Time Zone Support, do not forget to add timeoffset property in inbox control.
		/*var utc = Date.UTC(dateValue.getUTCFullYear(),dateValue.getUTCMonth(),dateValue.getUTCDate(),dateValue.getUTCHours(),dateValue.getUTCMinutes(),dateValue.getUTCSeconds(),dateValue.getUTCMilliseconds())
		var inboxInstance = this;
		while(inboxInstance != undefined && !(inboxInstance instanceof sap.uiext.inbox.Inbox))
		{
			inboxInstance = inboxInstance.getParent();
		}
		var localTime =  utc + inboxInstance.getTimezoneOffset() + (new Date().getTimezoneOffset()*60*1000);
		var ins = sap.ui.core.format.DateFormat.getDateTimeInstance({
			style : "medium"
		});
		return ins.format(new Date(localTime));*/
	return "";
};


sap.uiext.inbox.InboxUtils.scrub = function(data) {
	data = decodeURIComponent(data);
	data = data.replace(/[-:.\/]/g, "");
	data = data.replace(/-/g, "--");
	data = data.replace(/\s+/g, "-");
	if(!(/^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(data)))
	{
		if( /^[^A-Za-z_]/.test(data)){
			data = data.replace(/^[^A-Za-z_]/, "_");
		}
		data.replace(/[^-\w_.:]/g, "_");
	}
	return data;
};

sap.uiext.inbox.InboxUtils.setCookieValue = function(cookieName, value, expireInYears) {
	var sExpires ="";
	if(expireInYears && expireInYears > 0){
		var oExpireDate = new Date();
		oExpireDate.setTime(oExpireDate.getTime() + (3600 * 1000 * 24 * 365 * expireInYears));
		sExpires = "expires=" + oExpireDate.toGMTString();
	}
    document.cookie = cookieName + "=" + escape(value) + "; " + sExpires;
};

sap.uiext.inbox.InboxUtils.getCookieValue = function(cookieName) {
    var i, x, y, aCookies = document.cookie.split(";");
    for (i = 0; i < aCookies.length; i++) {
                    x = aCookies[i].substr(0, aCookies[i].indexOf("="));
                    y = aCookies[i].substr(aCookies[i].indexOf("=") + 1);
                    x = x.replace(/^\s+|\s+$/g, "");
                    if (x == (cookieName)) {
                                    return unescape(y);
                    }
    }
};

sap.uiext.inbox.InboxUtils.deleteCookie = function(cookieName) {
    var d = new Date();
    document.cookie = cookieName + "=" + ";expires=Thu, 01-Jan-1970 00:00:01 GMT";
};

sap.uiext.inbox.InboxUtils.reselectRowsinTable = function(reselectIndices,tableElement){
	var iMin = reselectIndices[0];
	for ( var i = 0; i < reselectIndices.length; i++) {
		tableElement.addSelectionInterval(reselectIndices[i],reselectIndices[i]);
		iMin = Math.min(reselectIndices[i], iMin);
	}
	if(iMin){
		var iFocusRow = Math.floor(iMin/10) * 10;
		tableElement.setFirstVisibleRow(iFocusRow);
	}
};

sap.uiext.inbox.InboxUtils.deSelectOtherActionButtonsinStreamView = function(oToggleButtonElem){
	var oToggleButtonParentRow = oToggleButtonElem.getParent().getParent();
	if(oToggleButtonParentRow){
		var oParentRowCells = oToggleButtonParentRow.getCells();
		var iNumberOfCells = oParentRowCells.length;
		 for(var i=0; i < iNumberOfCells; i++){
			 var oActionToggleButton = oParentRowCells[i].getContent()[0];
			 if(oActionToggleButton && oActionToggleButton !== oToggleButtonElem && oActionToggleButton instanceof sap.ui.commons.ToggleButton){
				 if(oActionToggleButton.getVisible() && oActionToggleButton.getPressed()){
					 oActionToggleButton.setPressed(false);
					 oActionToggleButton.firePress(false);
				 }
			 }
		 }
	}
};

sap.uiext.inbox.InboxUtils._getDefaultFilter = function(){
	return new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, 'COMPLETED');
};

sap.uiext.inbox.InboxUtils._hasFilter = function(aFilters, sPath, sOperator, oValue1, oValue2) {
	var bFilterPathFound = false;
	if(aFilters && aFilters.length > 0){
		//group filters by path
		jQuery.each(aFilters, function(j, oFilter) {
			if (oFilter.sPath === sPath && oFilter.sOperator === sOperator && oFilter.oValue1 === oValue1 && oFilter.oValue2 === oValue2) {
				bFilterPathFound = true;
				return false;
			} 
		});
	}
	return bFilterPathFound;
};


sap.uiext.inbox.InboxUtils.tooltipFormatForDateTime = function(dateValue) {
    if (dateValue != undefined && typeof (dateValue) == 'string' && dateValue != "") {
        var date;
        if (dateValue.indexOf('Date') != -1) {
            date = new Date();
            date.setTime(dateValue.substring((dateValue.indexOf("(") + 1), dateValue.indexOf(")")));
        } else {
            date = new Date(dateValue.substring((dateValue.indexOf("'") + 1), dateValue.length - 1));
        }
        dateValue = date;
    }

    if (dateValue != undefined && dateValue != "") {
        var ins = sap.ui.core.format.DateFormat.getDateTimeInstance({
            style : "full"
        });
        return ins.format(dateValue);
    }       
    return "";

};

sap.uiext.inbox.InboxUtils.dateTimeFormat = function(dateValue, bShowOnlyDate) {
    if (dateValue != undefined && typeof (dateValue) == 'string' && dateValue != "") {
        var date;
        if (dateValue.indexOf('Date') != -1) {
            date = new Date();
            date.setTime(dateValue.substring((dateValue.indexOf("(") + 1), dateValue.indexOf(")")));
        } else {
            date = new Date(dateValue.substring((dateValue.indexOf("'") + 1), dateValue.length - 1));
        }
        dateValue = date;
    }

    if (dateValue != undefined && dateValue != "") {
        var ins = sap.ui.core.format.DateFormat.getDateInstance({
            style : "medium"
        });
        var ins2 = sap.ui.core.format.DateFormat.getTimeInstance({
            style : "short"
        });
        
        if (bShowOnlyDate && bShowOnlyDate === true)
        	return ins.format(dateValue);
        else
        	return ins.format(dateValue) + " " + ins2.format(dateValue);
    }       
    return "";

};

sap.uiext.inbox.InboxUtils._isOverDue = function(value) { //TODO: Remove Duplication already exists in Inbox
	//need to be overrriddedn in app for different timezones
	if(value === undefined || value === null || value === "")
		return false;
	
	var now = new Date().getTime();
	var bOverdue;
	
	if ( typeof (value) === 'string' ) {
		 var sCreationdate = value.substring(value.indexOf("(")+1, value.indexOf(")")-1);
		
		 bOverdue = (parseInt(sCreationdate) - now) < 0 ? true : false;
	}
	else {
		 bOverdue = (value.getTime() - now) < 0 ? true : false;
	}
	return bOverdue;
};

sap.uiext.inbox.InboxUtils.getUserMediaResourceURL = function(bpmSvcUrl, sapOrigin, user) {
	return bpmSvcUrl +"/"+ sap.uiext.inbox.InboxConstants.UserInfoCollection+ "("+sap.uiext.inbox.InboxConstants.sapOrigin+"='"+sapOrigin+"',UniqueName='"+user+"')/$value";
};


/* this function below takes a list of multiple arrays as input and returns an array after intersection.
 * the arrays that need to be intersected, must be put in to an another array aLists
 */
sap.uiext.inbox.InboxUtils._getUniqueArray = function(aLists) {
	
	function intersection(aArray1, aArray2) {
		var results = [];
		var i, j;
		var arr1Length = aArray1.length;
		var arr2Length = aArray2.length;

		for (i = 0; i < arr1Length; i++) {
			for (j = 0; j < arr2Length; j++) {
				if (aArray1[i] === aArray2[j]) {
					results.push(aArray1[i]);
				}
			}
		}
		return results;
	}
	
	if (aLists.length == 0) return [];
	else if (aLists.length == 1) return aLists[0];
	var aIntersection = aLists[0];
	for (var i = 1; i < aLists.length; i++){
	    aIntersection = intersection(aIntersection, aLists[i]);
	}
	return aIntersection;
};

sap.uiext.inbox.InboxUtils._getFileTypeIcon = function(sFileType) {
	var sIcon;
	switch (sFileType)
	  {
	  case "text/plain":
	    sIcon="attachment-text-file";
	    break;
	  case "image/jpeg":
	  case "image/png":
	  case "image/gif":
	  case "image/x-icon":
		sIcon="attachment-photo";
	    break;
	  case "application/pdf":
		sIcon="pdf-attachment";
	    break;
	  case "application/mspowerpoint":
	  case "application/vnd.ms-powerpoint":
	  case "application/powerpoint":
	  case "application/x-mspowerpoint":
		sIcon="ppt-attachment";
	    break;
	  case "application/excel":
	  case "application/x-excel":
	  case "application/x-msexcel":
	  case "application/vnd.ms-excel":
		sIcon="excel-attachment";
	    break;
	  case "application/msword":
		sIcon="doc-attachment";
	    break;
	  case "application/zip":
		sIcon="attachment-zip-file";
	    break;
	  default:
		sIcon="document";
	  }
	return sap.ui.core.IconPool.getIconURI(sIcon);
};

sap.uiext.inbox.InboxUtils._getFileSize = function(iBytes) {
	if(iBytes) {
		
		var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
		if (iBytes == 0) return '0 Byte';
		var i = parseInt(Math.floor(Math.log(iBytes) / Math.log(1024)));
		var iSize;
		if (i>1) {
			iSize = (iBytes / Math.pow(1024, i)).toFixed(2);
		} else {
			iSize = Math.round(iBytes / Math.pow(1024, i), 2); 
		}
		var sSize = iSize.toString() + ' ' + sizes[i];
		   
		return sSize;
		   
	}
};


sap.uiext.inbox.InboxUtils.appendThemingParameters = function(windowURL,sTaskExecutionThemeURL) {
	var oURI = new URI(windowURL);
	var sWindowURLParams = oURI.search();
	oURI.search( (!sWindowURLParams ? "?" : (sWindowURLParams + "&")) + sTaskExecutionThemeURL.replace (/^(\?|&)/, ''));
	return oURI.toString();
	
};

//We can segregate Util functions into different files based on what they provide Utility functions for. 
sap.uiext.inbox.InboxUtils.calculateLengthofAssociativeArray = function(oAssociativeArray) {
	var iLength = 0, key;
    for (key in oAssociativeArray) {
        if (oAssociativeArray.hasOwnProperty(key)) iLength++;
    }
    return iLength;
};

sap.uiext.inbox.InboxUtils.getErrorMessageFromODataErrorObject = function(oError) {
	var sMessage = "";
	var sBodyValue = "";
	if(oError.hasOwnProperty("response")) {
		try{
			sBodyValue = JSON.parse(oError.response.body)
		} 
		catch(err){
			sMessage=err.name + " : " + err.message;
			console.log(err.stack);
			return sMessage;
		}
		sMessage = sBodyValue.error.message.value+"\n";
	}
	return sMessage;
}
}; // end of sap/uiext/inbox/InboxUtils.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.SubstitutionRulesManagerConstants') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.SubstitutionRulesManagerConstants");
sap.uiext.inbox.SubstitutionRulesManagerConstants = function(){
};

sap.uiext.inbox.SubstitutionRulesManagerConstants.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);


sap.uiext.inbox.SubstitutionRulesManagerConstants.deleteSubstRule = "delete.png";
sap.uiext.inbox.SubstitutionRulesManagerConstants.updateRuleExecutionFunctionImport = "EnableSubstitutionRule";
sap.uiext.inbox.SubstitutionRulesManagerConstants.deleteRuleExecutionFunctionImport = "DeleteSubstitutionRule";
sap.uiext.inbox.SubstitutionRulesManagerConstants.SubstitutionRuleCollection = "SubstitutionRuleCollection";
sap.uiext.inbox.SubstitutionRulesManagerConstants.SubstitutesRuleCollection = "SubstitutesRuleCollection";
sap.uiext.inbox.SubstitutionRulesManagerConstants.CREATE_SUBSTITUTION_RULE= "CreateSubstitutionRule";
sap.uiext.inbox.SubstitutionRulesManagerConstants.MODE_RECEIVE_TASKS= "RECEIVE_TASKS"; // Is it RECEIVE_MY_TASKS or RECEIVE_TASKS ? confirm
sap.uiext.inbox.SubstitutionRulesManagerConstants.MODE_TAKE_OVER= "TAKE_OVER";

}; // end of sap/uiext/inbox/SubstitutionRulesManagerConstants.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.SubstitutionRulesManagerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.SubstitutionRulesManagerRenderer");

/**
 * @class SubstitutionRulesManager renderer. 
 * @static
 */
sap.uiext.inbox.SubstitutionRulesManagerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.SubstitutionRulesManagerRenderer.render = function(oRenderManager, oControl){ 
    // convenience variable
	var rm = oRenderManager;
	
	// write the HTML into the render manager
	 rm.write("<div");
   rm.writeControlData(oControl);
   rm.writeAttribute("class","sapuiextinbox-SubstitutionRulesManager"); 
   rm.write(">"); // SPAN element
   rm.renderControl(oControl.vLayout);
   rm.write("</div>");
};

}; // end of sap/uiext/inbox/SubstitutionRulesManagerRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.SubstitutionRulesManagerUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// Utility functions for Substitution Rules Manager
jQuery.sap.declare("sap.uiext.inbox.SubstitutionRulesManagerUtils");

sap.uiext.inbox.SubstitutionRulesManagerUtils = function() {
	throw new Error();
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getText = function(value, isSubstitutedUserRules, isActiveSubstRule,
		bIsRecieveTasks, beginDate, endDate) {

	var bIsOutDated = this._isOutDated(endDate);
	var bInCurrentDateRange = (!this._isFutureDate(beginDate) && !bIsOutDated);

	var _oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	// Eliminate out dated tasks
	if (bIsOutDated) {
		return "";
	} else {
		if (isSubstitutedUserRules) { // For My substitute rules
			if (isActiveSubstRule) { // If the rule is enabled
				if (bInCurrentDateRange) {
					return value + " " + _oBundle.getText("SUBSTIUTION_RULE_CURRENTLY_RECEIVING_TASKS");
				} else {// End
					return value + " " + _oBundle.getText("SUBSTIUTION_RULE_WILL_RECEIVE_TASKS_FROM") + " "
							+ this._getFormattedDate(beginDate);
				}
			} else {
				if (bIsRecieveTasks) {
					if (bInCurrentDateRange) {
						return _oBundle.getText("SUBSTITUTION_RULE_ENABLE_FOR") + " " + value + " "
								+ _oBundle.getText("SUBSTITUTION_RULE_TO_RECIEVE_TASKS");
					} else {
						return _oBundle.getText("SUBSTITUTION_RULE_ENABLE_FOR") + " " + value + " "
								+ _oBundle.getText("SUBSTITUTION_RULE_TO_RECIEVE_TASKS") + " "
								+ _oBundle.getText("SUBSTITUTION_RULE_FROM_TXT") + " " + this._getFormattedDate(beginDate);
					}
				} else {
					return value + " " + _oBundle.getText("SUBSTIUTION_RULE_HAS_NOT_ACTIVATED_YOUR");
				}
			}
		} else {// For I am substituting rules
			if (isActiveSubstRule) {
				if (bInCurrentDateRange) {
					return _oBundle.getText("SUBSTIUTION_RULE_CURRENTLY_RECEIVING_TASKS_FROM") + " " + value;
				} else {
					return _oBundle.getText("SUBSTIUTION_RULE_YOU_WILL_RECEIVE_TASKS_FROM") + " " + value + " "
							+ _oBundle.getText("SUBSTITUTION_RULE_FROM_TXT") + " " + this._getFormattedDate(beginDate);
				}
			} else {
				if (bIsRecieveTasks) {
					if (bInCurrentDateRange) {
						return _oBundle.getText("SUBSTIUTION_RULE_TURN_ON_TO_RECEIVE_TASKS_FROM") + " " + value;
					} else {
						return _oBundle.getText("SUBSTIUTION_RULE_TURN_ON_TO_RECEIVE_TASKS_FROM") + " " + value + " "
								+ _oBundle.getText("SUBSTITUTION_RULE_FROM_TXT") + " " + this._getFormattedDate(beginDate);
					}
				} else {
					if(bInCurrentDateRange){
						return _oBundle.getText("SUBSTIUTION_RULE_IS_CURRENTLY_DISABLED_BY") + " " + value;
					}else{
						return _oBundle.getText("SUBSTIUTION_RULE_YOU_WILL_RECEIVE_TASKS_FROM") + " " + value + " "
								+ _oBundle.getText("SUBSTITUTION_RULE_FROM_TXT") + " " + this._getFormattedDate(beginDate);
					}
				}
			}
		}
	}
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._isOutDated = function(date) {
	if (date !== null && date !== '') {
		if (this._getTimeDiff(date) < 0) {
			return true;
		}
	}
	return false;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._isFutureDate = function(oDate) {
	if (oDate !== null && oDate !== '') {
		if (this._getTimeDiff(oDate) > 0 && !this._isCurrentDate(oDate)) {
			return true;
		}
	}
	return false;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._isCurrentDate = function(oDate) {
	if (oDate !== null && oDate !== '') {
		var oCurrentDate = new Date();
		if ((oCurrentDate.getDate() == oDate.getDate()) && (oCurrentDate.getMonth() == oDate.getMonth())
				&& (oCurrentDate.getYear() == oDate.getYear())) {
			return true;
		}
	}
	return false;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getStatus = function(isSubstitutedUserRules, isActiveSubstRule, beginDate, endDate) {
	
	var bIsOutDated = this._isOutDated(endDate);
	var bInCurrentDateRange = (!this._isFutureDate(beginDate) && !bIsOutDated );

	var _oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");

	if (endDate == "")
		return "";
		
	if (bIsOutDated) // If the rule is outdated
		return _oBundle.getText("SUBSTITUTION_OUT_OF_DATE_RANGE");
	else {
		if (isActiveSubstRule) { // If the rule is enabled
			var sText = bInCurrentDateRange ? "SUBSTITUTION_RULE_ACTIVE_FOR_LABEL" : "SUBSTITUTION_RULE_ACTIVE_IN_LABEL";
			return _oBundle.getText(sText) + " " + this._getNoOfDays(bInCurrentDateRange, beginDate, endDate);
		} else  // If the rule is disabled
			return _oBundle.getText("SUBSTITUTION_DISABLED_STATUS");
	}
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getNoOfDays = function(bInCurrentDateRange, startDate, endDate) {
	var _oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	var timeInDaysTxt = ''; // TODO Use Service.
	
	if (endDate !== null && endDate !== '') {
		var timeDiff = this._getTimeDiff(bInCurrentDateRange ? endDate : startDate) / (1000 * 60 * 60 * 24);
		if (timeDiff > 1) {
			var sNoOfDays = Math.floor(timeDiff);
			if (sNoOfDays === 1) {
				return sNoOfDays + " " + _oBundle.getText("SUBSTIUTION_RULE_IN_DAY");
			} else {
				return sNoOfDays + " " + _oBundle.getText("SUBSTIUTION_RULE_IN_MORE_DAYS");
			}
		} else if (timeDiff > 0) {
			return Math.ceil(timeDiff) + " " + _oBundle.getText("SUBSTIUTION_RULE_IN_DAY");
		}
	}
	return "";
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getFormattedDate = function(dateValue) {
	var ins = sap.ui.core.format.DateFormat.getDateInstance({
		style : "medium"
	});
	if (dateValue != undefined && dateValue != "") {
		return ins.format(dateValue);
	}
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getTodaysDateinYYYYMMDD = function() {
	var oDate = new Date();
	var sToday = String(oDate.getFullYear());
	if (oDate.getMonth() < 9) {
		sToday = sToday + "0";
	}
	sToday = sToday + String(oDate.getMonth() + 1);
	if (oDate.getDate() < 9) {
		sToday = sToday + "0";
	}
	sToday = sToday + String(oDate.getDate());
	return sToday;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getTodaysDate = function() {
	var oDate = new Date();
	return oDate;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getTimeDiff = function(endDate) {
	var today = new Date();
	var offset = today.getTimezoneOffset() * 60 * 1000;
	var deadline = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate(), 24, 00, 00);
	var diff = deadline.getTime() - (today.getTime());
	return diff;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getTimeZoneOffset = function() {
	return undefined;
};

}; // end of sap/uiext/inbox/SubstitutionRulesManagerUtils.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.TaskInitialFilters') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// Provides a filter for list bindings
	jQuery.sap.declare("sap.uiext.inbox.TaskInitialFilters");
	
		
	/**
	 * Constructor for TaskInitialFilters
	 *
	 * @class
	 * PreDefined Filters for Inbox
	 *
	 *
	 * @param {Array} aStatusFilters array of Status Filters to be applied
	 * @param {Array} aPriorityFilters array of Priority Filters to be applied
	 * @param {String} sDateTimeFilter DateTime Filter to be applied. Values : Today, Last_7_days, Last_15_days, Last_30_days
	 * @param {Array} aTaskTypeFilters array of TaskType Filters to be applied
	 * @param {String} sDueDateTimeFilter DueDate Filter to be applied. Values : Today, Next_7_days, Next_15_days, Next_30_days
	 * @public
	 */
	
	sap.ui.base.Object.extend("sap.uiext.inbox.TaskInitialFilters",{
			
			    constructor : function(aStatusFilters, aPriorityFilters, sDateTimeFilter, aTaskTypeFilters, sDueDateTimeFilter) {
			
			        sap.ui.base.Object.apply(this);
			
			        this.aStatusFilters = aStatusFilters ? aStatusFilters : [];
			  	    this.aPriorityFilters = aPriorityFilters ? aPriorityFilters : [];
			  	    this.sDateTimeFilter = sDateTimeFilter;
			  	    this.aTaskTypeFilters = aTaskTypeFilters ? aTaskTypeFilters : [];
			  	    this.sDueDateTimeFilter = sDueDateTimeFilter;
			  	    this.aFiltersTobeApplied = [];
			  	    this.inboxUtils = sap.uiext.inbox.InboxUtils;
			    }
			
		});
	
	
	sap.uiext.inbox.TaskInitialFilters.prototype.getFilterObjects = function(){
		var filtersToApplymap = sap.uiext.inbox.TaskInitialFilters.FILTERSTOAPPLYMAP;
		
		var oInitialFiltersAppliedMap = {};
		var aStatusFilterObjects = [], aPriorityFilterObjects = [], aTaskTypeFilterObjects = [], dateFilter, dueDateFilter;
		var filters = undefined, allFilters = [];
		for(var i=0;i<this.aStatusFilters.length;i++){
			var filterStatus = filtersToApplymap.filters.filterStatus;
			if(filterStatus[this.aStatusFilters[i]] !== undefined){
				var statFilter = this.inboxUtils._getStatusFilters(this.aStatusFilters[i]);
				oInitialFiltersAppliedMap[filterStatus[this.aStatusFilters[i]]] = statFilter;
				aStatusFilterObjects.push(statFilter);
			}
		}
		allFilters = allFilters.concat(aStatusFilterObjects);
		
		for(var i=0;i<this.aPriorityFilters.length;i++){
			var filterPrio = filtersToApplymap.filters.filterPriority;
			if(filterPrio[this.aPriorityFilters[i]]){
				var prioFilter = this.inboxUtils._getPriorityFilters(this.aPriorityFilters[i]);
				oInitialFiltersAppliedMap[filterPrio[this.aPriorityFilters[i]]] = prioFilter;
				aPriorityFilterObjects.push(prioFilter);
			}
		}
		
		allFilters = allFilters.concat(aPriorityFilterObjects);
		if(this.sDateTimeFilter !== null && this.sDateTimeFilter !== undefined){
			//logic for sDateTimeFilter
			var filterDateTime = filtersToApplymap.filters.filterDateTime;
			if(filterDateTime[this.sDateTimeFilter]){
				var dateFilter = this.inboxUtils._getDateTimeFilters(this.sDateTimeFilter);
				oInitialFiltersAppliedMap[filterDateTime[this.sDateTimeFilter]] = dateFilter;
			}
		}

		if(dateFilter !== undefined){
			allFilters.push(dateFilter);
		}

		for(var i=0;i<this.aTaskTypeFilters.length;i++){
			var taskTypeFilter = new sap.ui.model.Filter("TaskDefinitionID", sap.ui.model.FilterOperator.EQ, this.aTaskTypeFilters[i]);
			oInitialFiltersAppliedMap[this.aTaskTypeFilters[i]] = taskTypeFilter;
			aTaskTypeFilterObjects.push(taskTypeFilter);
		}
		
		allFilters = allFilters.concat(aTaskTypeFilterObjects);
		
		if(this.sDueDateTimeFilter !== null && this.sDueDateTimeFilter !== undefined){
			//logic for sDateTimeFilter
			var filterDueDateTime = filtersToApplymap.filters.filterDueDateTime;
			if(filterDueDateTime[this.sDueDateTimeFilter]){
				var dueDateFilter = this.inboxUtils._getDueDateFilters(this.sDueDateTimeFilter);
				oInitialFiltersAppliedMap[filterDueDateTime[this.sDueDateTimeFilter]] = dueDateFilter;
			}
		}

		if(dueDateFilter !== undefined){
			allFilters.push(dueDateFilter);
		}
		
		if(allFilters.length > 0 ){
			filters = {DueDate : dueDateFilter, TaskType : aTaskTypeFilterObjects, CreatedDate : dateFilter, Priority : aPriorityFilterObjects, Status : aStatusFilterObjects};
		}
		
		return { filterOperatorMap: filters, filtersAppliedMap : oInitialFiltersAppliedMap };
	};
	
	sap.uiext.inbox.TaskInitialFilters.prototype.getFilterUIKeys = function(){
		var filtermap = sap.uiext.inbox.TaskInitialFilters.FILTERMAP;
		var aStatusAttToSelect = [];
		var aPrioAttToSelect = [];
		var aDateAttToSelect = [];
		var aTaskTypeAttToSelect = [];
		var aDueDateAttToSelect = [];
	
		for(var i=0;i<this.aStatusFilters.length;i++){
			var filterStatus = filtermap.filters.filterStatus;
			if(filterStatus[this.aStatusFilters[i]])
				aStatusAttToSelect.push(filterStatus[this.aStatusFilters[i]]);
		}
	
		for(var i=0;i<this.aPriorityFilters.length;i++){
			var filterPrio = filtermap.filters.filterPriority;
			if(filterPrio[this.aPriorityFilters[i]])
				aPrioAttToSelect.push(filterPrio[this.aPriorityFilters[i]]);
		}
	
	
		if(this.sDateTimeFilter !== null && this.sDateTimeFilter !== undefined)
		{
			var filterDateTime = filtermap.filters.filterDateTime;
			if(filterDateTime[this.sDateTimeFilter])
				aDateAttToSelect.push(filterDateTime[this.sDateTimeFilter]);
		}

	
		for(var i=0;i<this.aTaskTypeFilters.length;i++){
			var taskTypeID = this.aTaskTypeFilters[i];
			if(taskTypeID){
				//TODO: TaskType IDs need to handle special characters
				taskTypeID = taskTypeID.replace(/-/g, "--");
				taskTypeID = taskTypeID.replace(/\s+/g, "-");
				if(!(/^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(taskTypeID)))
				{
					if( /^[^A-Za-z_]/.test(taskTypeID)){
						taskTypeID = taskTypeID.replace(/^[^A-Za-z_]/, "_");
					}
					taskTypeID.replace(/[^-\w_.:]/g, "_");
				}
				aTaskTypeAttToSelect.push(taskTypeID);
			}
		}
		
		if(this.sDueDateTimeFilter !== null && this.sDueDateTimeFilter !== undefined)
		{
			var filterDueDateTime = filtermap.filters.filterDueDateTime;
			if(filterDueDateTime[this.sDueDateTimeFilter])
				aDueDateAttToSelect.push(filterDueDateTime[this.sDueDateTimeFilter]);
		}

		return {Status : aStatusAttToSelect, Priority: aPrioAttToSelect, StartDate : aDateAttToSelect, TaskType : aTaskTypeAttToSelect, DueDate :aDueDateAttToSelect};
	};
	
	sap.uiext.inbox.TaskInitialFilters.FILTERMAP = {
			filters: { 
				filterStatus: {
					READY:"INBOX_FILTER_STATUS_READY",
					RESERVED:"INBOX_FILTER_STATUS_RESERVED",
					IN_PROGRESS:"INBOX_FILTER_STATUS_IN_PROGRESS"
				},
				filterPriority: {
					LOW:"INBOX_FILTER_PRIORITY_LOW",
					MEDIUM:"INBOX_FILTER_PRIORITY_MEDIUM",
					HIGH:"INBOX_FILTER_PRIORITY_HIGH",
					VERY_HIGH:"INBOX_FILTER_PRIORITY_VERY_HIGH"
				},
				filterDateTime: {
					Today:"INBOX_FILTER_DATETIME_TODAY",
					Last_7_days: "INBOX_FILTER_DATETIME_WEEK",
					Last_15_days: "INBOX_FILTER_DATETIME_15DAYS",
					Last_30_days: "INBOX_FILTER_DATETIME_MONTH"
				},
				filterDueDateTime: {
					Today:"INBOX_FILTER_DUE_DATETIME_TODAY",
					Next_7_days: "INBOX_FILTER_DUE_DATETIME_WEEK",
					Next_15_days: "INBOX_FILTER_DUE_DATETIME_15DAYS",
					Next_30_days: "INBOX_FILTER_DUE_DATETIME_MONTH",
					No_Due_Date: "INBOX_FILTER_NO_DUE_DATETIME"
					
				}
			}
	};
	
	sap.uiext.inbox.TaskInitialFilters.FILTERSTOAPPLYMAP = {
			filters: { 
				filterStatus: {
					READY:"readyStat",
					RESERVED:"resStat",
					IN_PROGRESS:"InProStat"
				},
				filterPriority: {
					LOW:"lowPrio",
					MEDIUM:"medPrio",
					HIGH:"hiPrio",
					VERY_HIGH:"veryhiPrio"
				},
				filterDateTime: {
					Today:"today",
					Last_7_days: "last7",
					Last_15_days: "last15",
					Last_30_days: "last30"
				},
				filterDueDateTime: {
					Today:"dueDateToday",
					Next_7_days: "dueDatenext7",
					Next_15_days: "dueDatenext15",
					Next_30_days: "dueDatenext30",
					No_Due_Date: "noDueDate"
				}
			}
};
	
	
	
	
}; // end of sap/uiext/inbox/TaskInitialFilters.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxAddAttachmentTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.composite.InboxAddAttachmentTileRenderer");

/**
 * @class InboxAddAttachmentTile renderer. 
 * @static
 */
sap.uiext.inbox.composite.InboxAddAttachmentTileRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.composite.InboxAddAttachmentTileRenderer.render = function(oRm, oControl){
	oRm.write("<span");
	oRm.writeControlData(oControl);  
	oRm.addClass("sapUiExtInboxAddAttachmentTileLayout");
	oRm.writeClasses();
	oRm.write(">");
	
		oRm.write("<span>");
		var aClasses = [];
		var mAttributes = {};
		aClasses.push("sapUiExtInboxAttachmentIcon");
		oRm.writeIcon(sap.ui.core.IconPool.getIconURI("add"), aClasses);
		oRm.write("</span>");
		
		oRm.write("<span"); 
		oRm.addClass("sapUiExtInboxAddAttachmentText");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write('<a'); // starts link
		oRm.addClass("sapUiExtInboxAttachmentAddLink");
		oRm.writeClasses();
		oRm.writeAttribute('id', oControl.getId() + "_textAddAttachment");
		oRm.writeAttribute('title', oControl._oBundle.getText("INBOX_ADD_ATTACHMENT_TOOLTIP"));
		oRm.writeAttribute('href', 'javascript:void(0);');
		oRm.write('>');
		oRm.writeEscaped(oControl._oBundle.getText("INBOX_ADD_ATTACHMENT"));
		oRm.write('</a> '); // ends link
		oRm.write("</span>");
		
	oRm.write("</span>");
};

}; // end of sap/uiext/inbox/composite/InboxAddAttachmentTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxAttachmentFileUploader') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.composite.InboxAttachmentFileUploader");

sap.ui.commons.FileUploader.extend("sap.uiext.inbox.composite.InboxAttachmentFileUploader", {
	metadata: {},
	renderer : {}
});

sap.uiext.inbox.composite.InboxAttachmentFileUploader.prototype.upload = function() {

	var uploadForm = this.getDomRef("fu_form");

	try {
		if (uploadForm) {
			this._bUploading = true;
			if (this.getSendXHR() && window.File) {
				var oFiles = jQuery.sap.domById(this.getId() + "-fu").files;
				if (oFiles.length > 0) {
					var xhr = new window.XMLHttpRequest();
					xhr.open("POST", this.getUploadUrl(), true);
					if (this.getHeaderParameters()) {
						var oHeaderParams = this.getHeaderParameters();
						for (var i = 0; i < oHeaderParams.length; i++) {
							var sHeader = oHeaderParams[i].getName();
							var sValue = oHeaderParams[i].getValue();
							xhr.setRequestHeader(sHeader, sValue);
						}
					}
					
					xhr.send(oFiles[0]);
					var that = this;
					xhr.onreadystatechange = function() {
						if (xhr.readyState == 4) {
							that.fireUploadComplete({
								"response": xhr.response, 
								"status": xhr.status, 
								"x-csrf-token": xhr.getResponseHeader("x-csrf-token"),
								"headerParameters": that.getHeaderParameters()
							});
							that._bUploading = false;
						}
					}
					this._bUploading = false;
				}
			} else {
				uploadForm.submit();
			}
			jQuery.sap.log.info("File uploading to " + this.getUploadUrl());
		}
	} catch(oException) {
		jQuery.sap.log.error("File upload failed:\n" + oException.message);
	}
};

}; // end of sap/uiext/inbox/composite/InboxAttachmentFileUploader.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxAttachmentTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.composite.InboxAttachmentTileRenderer");

/**
 * @class InboxAttachmentTile renderer. 
 * @static
 */
sap.uiext.inbox.composite.InboxAttachmentTileRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.composite.InboxAttachmentTileRenderer.render = function(oRm, oControl){ 
	 oRm.write("<span"); // outer container starts
     oRm.writeControlData(oControl);  
     oRm.addClass("sapUiExtInboxAttachmentTileLayout");
	 oRm.writeClasses();
	 oRm.write(">");
		oRm.write("<span>"); // fileType icon span starts
		var aClasses = [];
		var mAttributes = {};
		mAttributes["id"] = oControl.getId() + "-fileTypeIcon";
		aClasses.push("sapUiExtInboxAttachmentIcon");
		oRm.writeIcon(oControl.getFileTypeIcon(), aClasses, mAttributes);
		oRm.write("</span>"); // fileType icon span ends
		
		oRm.write("<span"); //starts info column
		oRm.addClass("sapUiExtInboxAttachmentDetails");
		oRm.writeClasses();
		oRm.write(">");
			oRm.write("<div"); // starts first row for fileTitle and fileSize
			oRm.addClass("sapUiExtInboxInlineFlexRow");
			oRm.writeClasses();
			oRm.write(">");
			
			oRm.write("<span"); // starts file name and file size column
			oRm.addClass("sapUiExtInboxAttachmentTitle");
			oRm.writeClasses();
			oRm.write(">");
				
				oRm.write("<span"); // starts file name span
				oRm.addClass("sapUiExtInboxAttachmentInline");
				oRm.writeClasses();
				oRm.write(">");
				oRm.write('<a'); // starts file name link 
				oRm.addClass("sapUiExtInboxAttachmentFileLink");
				oRm.writeClasses();
				oRm.writeAttribute('id', oControl.getId() + "_downloadLink");
				oRm.writeAttributeEscaped('title', oControl._oBundle.getText("INBOX_ATTACHMENT_DOWNLOAD_TOOLTIP", [oControl.getFileName()] ));
				oRm.writeAttributeEscaped('href', oControl.getDownloadUrl());
				oRm.write('>');
				oRm.writeEscaped(oControl.getFileName());
				oRm.write('</a> '); // ends file name link  
				oRm.write("</span>"); // ends file name span
				
				oRm.write("<span"); // starts file size span
				oRm.addClass("sapUiExtInboxAttachmentFileSize");
				oRm.writeClasses();
				oRm.writeAttributeEscaped('title', oControl.getFileSize());
				oRm.write(">");
				oRm.writeEscaped(oControl.getFileSize());
				oRm.write("</span>"); // ends file size span
				
			oRm.write("</div>"); // ends first row for fileTitle and fileSize
				
			oRm.write("<div"); // starts second row for createdBy, createdAt and delete button
			oRm.addClass("sapUiExtInboxInlineFlexRow");
			oRm.writeClasses();
			oRm.write(">");
				oRm.write("<span");
				oRm.addClass("sapUiExtInboxAttachmentCreatedBy");
				oRm.writeClasses();
				oRm.writeAttributeEscaped('title', oControl._oBundle.getText("INBOX_ATTACHMENT_CREATED_BY_TOOLTIP", [oControl.getCreatedBy()] ));
				oRm.write(">");
				oRm.writeEscaped(oControl.getCreatedBy());
				oRm.write("</span>");
		
				oRm.write("<span");
				oRm.addClass("sapUiExtInboxAttachmentDate");
				oRm.writeClasses();
				oRm.writeAttributeEscaped('title', oControl._oBundle.getText("INBOX_ATTACHMENT_CREATION_DATE_TOOLTIP", [oControl.getCreationDate()] ));
				oRm.write(">");
				oRm.writeEscaped(oControl.getCreationDate());
				oRm.write("</span>");
				
				if (oControl.getShowDeleteButton())
					this.renderDeleteButton(oRm, oControl);
				
			oRm.write("</div>"); // ends second row for fileDisplayName, createdAt and delete button
		oRm.write("</span>"); // ends info column
	oRm.write("</span>"); // outer container ends
};

sap.uiext.inbox.composite.InboxAttachmentTileRenderer.renderDeleteButton = function(oRm, oControl) {
	oRm.write("<span");
	oRm.addClass("sapUiExtInboxAttachmentDeleteBtn");
	oRm.writeClasses();
	oRm.write(">");
	var oDeleteButton = new sap.ui.commons.Button({
			tooltip : oControl._oBundle.getText("INBOX_ATTACHMENT_DELETE_TOOLTIP"),
			icon :  sap.ui.core.IconPool.getIconURI("delete"),
			lite : true
	}).attachPress(function(oEvent) {
		oControl.fireDeleteAttachment();
	});
	oRm.renderControl(oDeleteButton);
	oRm.write("</span>");
};

}; // end of sap/uiext/inbox/composite/InboxAttachmentTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxAttachmentsTileContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.composite.InboxAttachmentsTileContainerRenderer");

/**
 * @class InboxAttachmentsTileContainer renderer. 
 * @static
 */
sap.uiext.inbox.composite.InboxAttachmentsTileContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.composite.InboxAttachmentsTileContainerRenderer.render = function(oRm, oControl){
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.write(">");
		if (oControl.getShowAddTile())
			oRm.renderControl(oControl.getAggregation("firstTile"));
		for (var i = 0; i < oControl.getAttachments().length; i++) {
			oRm.renderControl(oControl.getAttachments()[i]);
		}
		oRm.write("<div"); 
		oRm.addClass("sapUiExtInboxAttachmentHidden");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.oFileUploader);
		oRm.write("</div>");
	oRm.write("</div>");
};
}; // end of sap/uiext/inbox/composite/InboxAttachmentsTileContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxBusyIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.composite.InboxBusyIndicatorRenderer");

/**
 * @class InboxBusyIndicator renderer. 
 * @static
 */
sap.uiext.inbox.composite.InboxBusyIndicatorRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.composite.InboxBusyIndicatorRenderer.render = function(oRm, oControl){ 
	oRm.write("<div ");
	oRm.writeControlData(oControl);
	oRm.addClass('sapUiextBusyContainer');
	oRm.writeClasses();
	oRm.write('>');
    oRm.write("</div>");
};

}; // end of sap/uiext/inbox/composite/InboxBusyIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxCommentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */



jQuery.sap.declare("sap.uiext.inbox.composite.InboxCommentRenderer");

/**
 * @class InboxComment renderer. 
 * @static
 */
sap.uiext.inbox.composite.InboxCommentRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.composite.InboxCommentRenderer.render = function(oRenderManager, oControl){ 
	// convenience variable
	var rm = oRenderManager;
	var oChunk = oControl;
	
	var sMyId = oChunk.getId();

	rm.write('<ARTICLE');
    rm.writeControlData(oChunk);
	rm.addClass('sapuiextInboxCommentChunk');
	rm.addClass('sapuiextInboxComment');
	
	rm.writeClasses();
    rm.write('>');

    // thumbnail
	rm.write('<img id=' + sMyId + '-thumb');
	var sThumbnail = sap.uiext.inbox.InboxUtils.getUserMediaResourceURL(sap.uiext.inbox.composite.InboxComment.bpmSvcUrl, oChunk.getSapOrigin(), oChunk.getCreatedBy());//oChunk.getThumbnailSrc();
	if(!sThumbnail){
		sThumbnail = jQuery.sap.getModulePath("sap.uiext.inbox", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/comments/person_placeholder_grey_512.png";
	}
	rm.writeAttributeEscaped('src', sThumbnail);
	//rm.writeAttributeEscaped('alt', oChunk.getSender());
	rm.writeClasses();
	rm.write('>');

    // text (starting with sender)
    rm.write('<DIV class= "sapuiextInboxCommentText" >');
	rm.write('<SPAN id=' + sMyId + '-sender class= "sapuiextInboxCommentSenderText"');
	rm.write('>');
	rm.writeEscaped(oChunk.getSender());
	rm.write('</SPAN> ');
	
	this.renderText(rm, oChunk);
	rm.write('</DIV>');
	
	// date
    rm.write('<SPAN class= "sapuiextInboxCommentChunkByline" >');
	rm.writeEscaped(oChunk.getTimestamp());
	rm.write('</SPAN>');
	
	rm.write('</ARTICLE>');
};

/*
 *	Render text with @References
 */
sap.uiext.inbox.composite.InboxCommentRenderer.renderText = function(rm, oChunk){

	//var sText = jQuery.sap._sanitizeHTML(oChunk.getText());
	var sText = oChunk.getText();
	var i = 0;

	do{
		var iPos = sText.search(/\s/);
		var sSpace = "",
			sWord = "";

		if(iPos < 0){
			// only 1 word
			sWord = sText;
		}else{
			sWord = sText.slice(0, iPos);
			sSpace = sText.slice(iPos, iPos + 1);
			sText = sText.slice(iPos + 1);
		}

		// check for special strings - will keep them as in FeedChunk for now.
		if (/^@/.test(sWord)) {
			// @-reference
			rm.write('<a id=' + oChunk.getId() + '-Ref' + i);
			rm.writeAttribute('href', 'javascript:void(0);');
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>', sSpace);
			i++;
		}else if (/^(https?|ftp):\/\//i.test(sWord) && jQuery.sap.validateUrl(sWord)) {
			// web link - valid URL
			rm.write('<a');
			rm.writeAttribute('href', jQuery.sap.encodeHTML(sWord));
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>',sSpace);
		}else if (/^(www\.)/i.test(sWord) && jQuery.sap.validateUrl("http://"+sWord)) {
			// web link without protocol -> use HTTP - valid URL
			rm.write('<a');
			rm.writeAttribute('href', jQuery.sap.encodeHTML("http://"+sWord));
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>',sSpace);
		}else if (/^[\w\.=-]+@[\w\.-]+\.[\w]{2,5}$/.test(sWord)) {
			//email - not 100% validity check and validation missing
			rm.write('<a');
			rm.writeAttribute('href', "mailto:"+jQuery.sap.encodeHTML(sWord));
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>',sSpace);
		}else{
			// normal word
			rm.writeEscaped(sWord + sSpace, true);
		}
	}while(iPos >= 0);

};

}; // end of sap/uiext/inbox/composite/InboxCommentRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxTaskCommentsRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.composite.InboxTaskCommentsRenderer");

/**
 * @class InboxTaskComments renderer. 
 * @static
 */
sap.uiext.inbox.composite.InboxTaskCommentsRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.composite.InboxTaskCommentsRenderer.render = function(oRenderManager, oControl){ 
	// convenience variable
	var rm = oRenderManager;
	var oChunk = oControl;
	
	var sMyId = oChunk.getId();

	rm.write('<ARTICLE');
    rm.writeControlData(oChunk);
	rm.addClass('sapuiextInboxTaskCommentsChunk');
	rm.writeClasses();
    rm.write('>');
    
    // busy indicator
    if(oChunk.getAggregation('busyIndicator'))
    	rm.renderControl(oChunk.getAggregation('busyIndicator'));
    
    // comments
    if(oChunk.getComments().length > 0  || oChunk.showCommentFeeder){
		rm.write("<SECTION>");
		this.renderComments(rm, oChunk);
		rm.write("</SECTION>");
    }
    
    rm.write('</ARTICLE>');
    
};

/*
 *	Render comment section content
 */
sap.uiext.inbox.composite.InboxTaskCommentsRenderer.renderComments = function(rm, oChunk){

	var oComments = oChunk.getComments();
	var iLength = oComments.length;

	// number of comments
	if (oChunk.getShowHeader()) {
		rm.write('<HEADER class= "sapuiextInboxTaskComments" >');
		if(oChunk.rb) {
			rm.write(oChunk.rb.getText('INBOX_TASK_NO_COMMENTS', [iLength]));
			
			if (iLength > oChunk.maxComments){
				rm.write('<a id=' + oChunk.getId() + '-all ');
				rm.writeAttribute('href', 'javascript:void(0);');
				rm.write('>');
				if (!oChunk.allComments) {
					rm.write(oChunk.rb.getText('INBOX_TASK_ALL_COMMENTS'));
				} else {
					rm.write(oChunk.rb.getText('INBOX_TASK_MAX_COMMENTS'));
				}
				rm.write('</a>');
			}
		}
		rm.write("</HEADER>");
	}

	// comments are sorted from old to new. Newest comment is on the bottom
	var iNumberChunks = iLength;
	if (!oChunk.allComments && oChunk.maxComments < iNumberChunks) {
		iNumberChunks = oChunk.maxComments;
	}

	for ( var i = 0; i < iNumberChunks; i++) {
		rm.renderControl(oComments[iLength - iNumberChunks + i]);
	}

	// comment feeder
	if(oChunk.getShowFeeder())
	{	
		if (oChunk.oCommentFeeder)
		{
			rm.renderControl(oChunk.oCommentFeeder);
		}
	}

};

}; // end of sap/uiext/inbox/composite/InboxTaskCommentsRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxTaskTitleControlRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.composite.InboxTaskTitleControlRenderer");

/**
 * @class InboxTaskTitleControl renderer. 
 * @static
 */
sap.uiext.inbox.composite.InboxTaskTitleControlRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.composite.InboxTaskTitleControlRenderer.render = function(oRenderManager, oControl){ 
    // convenience variable
	var oRm = oRenderManager;
	
	// write the HTML into the render manager
	oRm.write("<div"); 
	oRm.writeControlData(oControl);  // writes the Control ID and enables event handling - important!
	oRm.writeStyles();
	oRm.addClass("sapUiExtInboxTaskTitle");        // add a CSS class for styles common to all control instances
	oRm.writeClasses();              // this call writes the above class plus enables support for Square.addStyleClass(...)
	oRm.write(">");
	
	//render TaskCategory Image
	if(oControl.getCategoryIconURI() && sap.ui.core.IconPool.isIconURI(oControl.getCategoryIconURI())){
		this.renderTaskCategoryIcon(oRm, oControl);
	}
	
	//render TaskTitle Link
	
	/*oRm.write("<div");
	oRm.addClass("sapUiExtInboxTaskTitleLink");
	oRm.writeClasses();
	oRm.writeStyles();
	oRm.write(">");*/
	var oLink = oControl.getAggregation("titleLink");
	oLink.addStyleClass("sapUiExtInboxTaskTitleLink");
	oRm.renderControl(oLink);
	/*oRm.write("</div>");*/
	
	//render Attachment icon
	if(oControl.getHasAttachments()){
		this.renderAttachmentIcon(oRm, oControl);
	}
	
	//render comments icon
	if(oControl.getHasComments()){
		this.renderCommentsIcon(oRm, oControl);
	}
		
	oRm.write("</div>");
};

sap.uiext.inbox.composite.InboxTaskTitleControlRenderer.renderTaskCategoryIcon = function(oRm, oControl){ 
	var oIconInfo = sap.ui.core.IconPool.getIconInfo(oControl.getCategoryIconURI());
	if(oIconInfo){
		this.renderIcon(oRm, oControl.getId() + "-categoryIcon", "sapUiExtInboxTaskTitleCategIcon", oControl.getCategoryIconURI());
	}
};

sap.uiext.inbox.composite.InboxTaskTitleControlRenderer.renderAttachmentIcon = function(oRm, oControl){ 
	this.renderIcon(oRm, oControl.getId() + "-attachmentIcon", "sapUiExtInboxTaskTitleAttachIcon", sap.ui.core.IconPool.getIconURI("attachment"));
};

sap.uiext.inbox.composite.InboxTaskTitleControlRenderer.renderCommentsIcon = function(oRm, oControl){ 
	this.renderIcon(oRm, oControl.getId() + "-commentIcon", "sapUiExtInboxTaskTitleCommIcon", sap.ui.core.IconPool.getIconURI("comment"));
};

sap.uiext.inbox.composite.InboxTaskTitleControlRenderer.renderIcon = function(oRm, id, styleClass, icon){ 
	var aClasses = [];
	var mAttributes = {};
	
	mAttributes["id"] = id;
	aClasses.push("sapUiExtInboxTaskTitleIcon");
	oRm.writeIcon(icon, aClasses, mAttributes);
};
}; // end of sap/uiext/inbox/composite/InboxTaskTitleControlRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxUploadAttachmentTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.composite.InboxUploadAttachmentTileRenderer");

/**
 * @class InboxUploadAttachmentTile renderer. 
 * @static
 */
sap.uiext.inbox.composite.InboxUploadAttachmentTileRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.composite.InboxUploadAttachmentTileRenderer.render = function(oRm, oControl){ 
	oRm.write("<span"); // outer control starts
    oRm.writeControlData(oControl);  
    oRm.addClass("sapUiExtInboxAttachmentTileLayout");
	oRm.writeClasses();
	oRm.write(">");
	
		oRm.write("<span>"); // span for file type icon starts
		var aClasses = [];
		var mAttributes = {};
		aClasses.push("sapUiExtInboxAttachmentIcon");
		oRm.writeIcon(oControl.getFileTypeIcon(), aClasses);
		oRm.write("</span>"); // span for file type icon ends
		
		oRm.write("<span");
		oRm.addClass("sapUiExtInboxAttachmentDetails");
		oRm.writeClasses();
		oRm.write(">");
		
			oRm.write("<div"); // starts first row
			oRm.addClass("sapUiExtInboxAttachmentName");
			oRm.writeClasses();
			oRm.writeAttributeEscaped('title', oControl.getFileName());
			oRm.write(">");
			oRm.writeEscaped(oControl.getFileName());
			oRm.write("</div>"); // ends first row
				
			oRm.write("<div"); // starts second row
			oRm.addClass("sapUiExtInboxAttachmentUplodBtns");
			oRm.writeClasses();
			oRm.write(">");
			
				//this.renderTextField(oRm, oControl); // rendering TextField to enter description
				this.renderUploadButton(oRm, oControl); // rendering upload button 
				this.renderCancelButton(oRm, oControl); // rendering cancel button 
		
			oRm.write("</div>"); // second row ends
		oRm.write("</span>");
	oRm.write("</span>"); // outer control ends
};

/*sap.uiext.inbox.composite.InboxUploadAttachmentTileRenderer.renderTextField = function(oRm, oControl) {
	oRm.write("<span>");
	oRm.renderControl(oControl.getTextField());
	oRm.write("</span>");
};*/

sap.uiext.inbox.composite.InboxUploadAttachmentTileRenderer.renderUploadButton = function(oRm, oControl) {
	oRm.write("<span>");
	oRm.renderControl(oControl.getUploadButton());
	oRm.write("</span>");
};

sap.uiext.inbox.composite.InboxUploadAttachmentTileRenderer.renderCancelButton = function(oRm, oControl) {
	oRm.write("<span");
	oRm.addClass("sapUiExtInboxAttachmentCancelBtn");
	oRm.writeClasses();
	oRm.write(">");
	oRm.renderControl(oControl.getCancelButton());
	oRm.write("</span>");
};

}; // end of sap/uiext/inbox/composite/InboxUploadAttachmentTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.controller.InboxController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.controller.InboxController");

sap.ui.base.Object.extend("sap.uiext.inbox.controller.InboxController",{
	
    constructor : function() {
    	sap.ui.base.Object.apply(this);
    	this.oView = null;
    	this.oModel = null;
    },
    
    setModel : function(oModel){
    	this.oModel = oModel;
    },
    
    getModel : function(oModel){
    	return this.oModel;
    },
    
    getExpandParameters : function(){
    	
    	var sExpandParams = "";
    	var oView = this.getView();
    	var isCurrentViewRowRepeater = (oView.currentView === oView.constants.rowRepeaterView) ? true :false;
    	var oTaskTypeFilterList = oView._getComponent("INBOX_FILTER_TASK_TYPE");
    	var bInitialFilterAppliedforTaskType = oTaskTypeFilterList ? oView._isInitialFilterAppliedforTaskType(oTaskTypeFilterList) : false;

    	if(oView.showTaskCategory/* && !this.clientUpdate*/){
    		sExpandParams = "TaskDefinitionData";
    	}
    	if((oView.showTaskDescription) && isCurrentViewRowRepeater){
    		if(sExpandParams.length > 0){
    			sExpandParams = sExpandParams + ",";
    	    }
    		sExpandParams = sExpandParams + "Description";
    	}
    	if(bInitialFilterAppliedforTaskType && oView.isCustomAttributesEnabled){
    		if(sExpandParams.length > 0){
    			sExpandParams = sExpandParams + ",";
    	    }
    		sExpandParams = sExpandParams + "CustomAttributeData";
    	}
    		/*if(this.isCustomAttributesEnabled && isCurrentViewRowRepeater){
    		if(expand.length > 0){
    			expand = expand + ",";
    	    }
    		expand = expand + "CustomAttributeData";
    	}*/
    	return sExpandParams;
    },
    
    setView : function(oView){
    	this.oView = oView;
    },
    
    getView : function(){
    	return this.oView;
    },
    
    getTaskInitiatorIconParts : function(){
    	return [{path: "CreatedBy"}];
    },
    
    getTaskInitiatorIconFormatter : function(that){
    return function(createdBy){
			var oContext = this.getBindingContext();
			var categoryValue;
			if (oContext) {
				categoryValue = oContext.getProperty("TaskDefinitionData/Category");
			}
			var iconURL;
			if (categoryValue !== null && categoryValue !== "" && categoryValue !== undefined) {
				categoryValue=categoryValue.toUpperCase();
				if(categoryValue === that._oBundle.getText("ALERT"))
					iconURL = that.constants.iconPool.getIconURI("alert");
				else if(categoryValue === that._oBundle.getText("NOTIFICATION"))
				   iconURL = that.constants.iconPool.getIconURI("notification-2");
				else if(categoryValue === that._oBundle.getText("TODO"))
				   iconURL = that.constants.iconPool.getIconURI("activity-2");
				else if(categoryValue === that._oBundle.getText("TASK"))
				   iconURL = that.constants.iconPool.getIconURI("task");//person-placeholder,employee-rejections
			}
			if(!createdBy){
	    		return iconURL;
	    	}else{
	    		this.setVisible(false);
	    	}
		};
    },
    
    getExpandTaskDescriptionLinkParts : function(){
    	return [{path: "Description"}];
    },
    
    getExpandTaskDescriptionLinkFormatter : function(that){
    	return function(sDescriptionValue){
			if (sDescriptionValue) {
				   // var that = this;
					var oModel = that.getCoreModel();
					var oContext = this.getBindingContext();
					var sTaskDescription = that.getModel().getProperty(that.constants.NAVIGATION_DESCRIPTION, oContext);
					var bIsDescriptionAsHtmlPresent = that.oTcmMetadata._isPropertyAvailable("TaskDescription", "DescriptionAsHtml");
				   
					if (!bIsDescriptionAsHtmlPresent) {
						if ( sTaskDescription.Description && sTaskDescription.Description !== '') {
					
							if ( ((sTaskDescription.Description).search((/(<([^>]+)>)/ig)) !== -1)) {
								return 'true';
							}
						}
					} else {
						if ( sTaskDescription.DescriptionAsHtml && sTaskDescription.DescriptionAsHtml !== '') {
							 if ( (sTaskDescription.DescriptionAsHtml).search((/(<([^>]+)>)/ig)) !== -1) {
								 return 'true';
							 }
						}
					}
				}
				return 'auto';
			};
    },
    
    isFilterOnCustomAttributesSupported : function(){
    	return true;
    },
    
    isSortOnCustomAttributesSupported : function(){
    	return true;
    },
    
    getCustomAttributeColumnParts : function(sName){
    	return [{path: "CustomAttributeData"}];
    },
    
    getCustomAttributeColumnFormatter : function(that){
	    return 	function(value){
	    	var oModel = that.getCoreModel();
	    	var NAME = "name";
        	var path = that.sCollectionPath.replace(/^\//,"")+"('"+this.data(NAME)+"')";
        	var returnValue = "";
            if(value !== undefined && value !== "" && value !== null){
            	var sTaskInstanceId = this.getModel().getProperty('InstanceID',this.getBindingContext());
            	var oCustomAttributeValuesMap = that.constants.oTaskInstanceCustomAttributeValuesMap;
            	for(var i=0;i<value.length;i++){
            		//refine this
            		var oCustomAttribute = oModel.oData[value[i]] === undefined ? oModel._original_data[value[i]] : oModel.oData[value[i]];
            		//TODO due to search oModel.oData values are getting replaced. So adding a workaround here. Needs to be properly investigated.
            		if(oCustomAttribute.Name === this.data(NAME)){
            			
            			var sAttributeName = oCustomAttribute.Name;
            			var oCustomAttributesValues = oCustomAttributeValuesMap[sTaskInstanceId];
            			
            			// caching custom attribute data for each task
            			if(!oCustomAttributesValues) {
            				var oCustomAttributesValues = {};
            				oCustomAttributesValues[oCustomAttribute.Name] = oCustomAttribute.Value;
            				oCustomAttributeValuesMap[sTaskInstanceId] = oCustomAttributesValues;
            			} else {
            				var oCustomAttributesValuesName = oCustomAttributesValues.sAttributeName;
            				if (!oCustomAttributesValuesName) {
            					oCustomAttributeValuesMap[sTaskInstanceId][sAttributeName] = oCustomAttribute.Value;
            					
            				}
            			}
            			
            			returnValue = oCustomAttribute.Value;
            			break;
                    }
            	}
            }
            return returnValue;
	    };
    },
    
    getTaskDetailsParts : function(){
    	return [{path: "Description"}];
    },
    
    getTaskDetailsFormatter : function(that){
    	return function(desc){
 	    	if(desc !== null && desc !== undefined){
 	    		var oModel = that.getCoreModel();
 	    		var isDescriptnAsHtmlPropPresent = that.oTcmMetadata._isPropertyAvailable("TaskDescription","DescriptionAsHtml");
 	    		var oContext = this.getBindingContext();
 	    		var descEntry = desc[0];
 	    		var descVal = oModel.oData[descEntry];
 	    		var sRegularExpToStripHtmlTags = /(<([^>]+)>)/ig;
 	    		var description;
 	    		if(descVal){
 	    			
 	    			if (isDescriptnAsHtmlPropPresent &&  descVal.DescriptionAsHtml !== "") {
 	    				description = descVal.DescriptionAsHtml;
 	    			}
 	    			else {
 	    				description = descVal.Description;
 	    			}
 	    			
 	    		} else {
	    			        	if (isDescriptnAsHtmlPropPresent &&  desc.DescriptionAsHtml !== "") {
	    			        		description = desc.DescriptionAsHtml ; 
	    			        	}
	    			        	else {
	    			        		description = desc.Description;
	    			        	}
 	    		}
 	    		if(description !== null && description !== undefined && description !== "") {
 	    			
 	    				this.data('showMore',description);
 	    				this.data('showLess', description.replace(sRegularExpToStripHtmlTags,""));
 	    				
 	    				return description.replace(sRegularExpToStripHtmlTags,"");
 	    		
 	    			
 	    		}
 	    	}
 	    	return "";
 	    };
   },
   
   /*getCategoryIconURIParts : function(){
	   return [{path: "TaskDefinitionData"}];
   },
   
   getCategoryIconURIFormatter : function(that){
	   return function(taskDefinitionData){
			if(taskDefinitionData != null && taskDefinitionData !== ""){
				var oModel = that.getCoreModel();
				var oContext = this.getBindingContext();
				var categoryEntry = taskDefinitionData[0];
				var taskDefEntry = oModel.oData[categoryEntry];
				var categoryValue;
				if(taskDefEntry){
					categoryValue = taskDefEntry.Category;
					//this.setVisible(true);
				}else{
					categoryValue = taskDefinitionData.Category;
					//this.setVisible(true);
				}
				
				categoryValue=categoryValue.toUpperCase();
				
				if (categoryValue == "TASK" || categoryValue == "NOTIFICATION" || categoryValue == "TODO" || categoryValue == "ALERT") {
				   	this.setTooltip(that._oBundle.getText(that.constants.taskCategoryToolTip[categoryValue]));
					return that.constants.taskCategoryImages[categoryValue];
				}
			}
			return  that.constants.taskCategoryImages["TASK"];
		};
   },*/
   
   getHtmlTextParts : function(){
	   return [{path: "Description"}];
   },
   
   getHtmlTextFormatter : function(that){
	   return function(oTaskDescriptn){
		   var isDescriptnAsHtmlPropPresent = that.oTcmMetadata._isPropertyAvailable("TaskDescription", "DescriptionAsHtml");
			  if (isDescriptnAsHtmlPropPresent) {				
					if(oTaskDescriptn.DescriptionAsHtml){
						return oTaskDescriptn.DescriptionAsHtml;
					}
			  }
			  return oTaskDescriptn.Description;
	   };
   }
    
});

}; // end of sap/uiext/inbox/controller/InboxController.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.controller.InboxControllerAsync') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.controller.InboxControllerAsync");

jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained


sap.uiext.inbox.controller.InboxController.extend("sap.uiext.inbox.controller.InboxControllerAsync",{
	
	constructor : function() {
		
		if (sap.uiext.inbox.controller.InboxController.prototype.constructor) { 
			sap.uiext.inbox.controller.InboxController.prototype.constructor.apply(this, arguments); 
		}
		
		this.oTaskDefinitionModel = new sap.ui.model.json.JSONModel();
		this.oTaskDefinitionModel.setData({"TaskDefinitionCollection":[]});
		this.oTaskDescriptionModel = new sap.ui.model.json.JSONModel();
		this.oTaskDescriptionModel.setData({"TaskDescriptionCollection":[]});
		this.oCustomAttributeDataModel = new sap.ui.model.json.JSONModel();
		this.oCustomAttributeDataModel.setData({"CustomAttributeDataCollection":[]});
		this.oUtilityModelTaskDescription;
		this.oUtilityModelTaskDefinition;
		this.oUtilityModelCustomAttributeData;
		
		this.aFetchedTaskDefinitions = [];
		this.aBatchedTaskDefinitions = [];
		this.aFetchedTaskDescriptions = [];
		this.aBatchedTaskDescriptions = [];
		this.aFetchedCustomAttributes = [];
		this.aBatchedCustomAttributes = [];
		this.oBatchTimer;
		this.sLoadingText;
		//TODO : Following threshold values needs to be optimized.
		this.iBatchThreshold = 50;
		this.iTimerThreshold = 1000;
    },
    
    setModel : function(oModel){
    	if (sap.uiext.inbox.controller.InboxController.prototype.setModel) { 
			sap.uiext.inbox.controller.InboxController.prototype.setModel.apply(this, arguments); 
		}
    	if(oModel instanceof sap.ui.model.odata.ODataModel || oModel instanceof sap.ui.model.odata.v2.ODataModel)
    	{
    		this.oUtilityModelTaskDescription = new sap.ui.model.odata.ODataModel(oModel.sServiceUrl);
        	this.oUtilityModelCustomAttributeData = new sap.ui.model.odata.ODataModel(oModel.sServiceUrl);
        	this.oUtilityModelTaskDefinition = new sap.ui.model.odata.ODataModel(oModel.sServiceUrl);
        	this.getView()._getComponent('tasksRowRepeater').setModel(this.oTaskDefinitionModel,"TaskDefinitionModel").setModel(this.oTaskDescriptionModel,"TaskDescriptionModel");
        	this.getView()._getComponent('listViewTable').setModel(this.oTaskDefinitionModel,"TaskDefinitionModel").setModel(this.oCustomAttributeDataModel,"CustomAttributeDataModel");
        	//this.getView()._getComponent('listViewTable').setModel(this.oCustomAttributeDataModel,"CustomAttributeDataModel");    	
        	//this.getView()._getComponent('tasksRowRepeater').setModel(this.oTaskDescriptionModel,"TaskDescriptionModel");

    	}
    },
    
    setView : function(oView){
    	if (sap.uiext.inbox.controller.InboxController.prototype.setView) { 
			sap.uiext.inbox.controller.InboxController.prototype.setView.apply(this, arguments); 
		}
    	this.sLoadingText = oView._oBundle.getText("INBOX_LP_LOADING");
    },
    
    
    getExpandParameters : function(){
    	return "";
    },
    
    addReadTaskDefinitionToBatch : function(sTaskInstanceId, sTaskDefinitionID, sSapOriginID){
    	if(this.aFetchedTaskDefinitions.indexOf(sTaskDefinitionID+sSapOriginID) === -1 && this.aBatchedTaskDefinitions.indexOf(sTaskDefinitionID+sSapOriginID) === -1)
    	{
    			if(this.oBatchTimer === undefined){
    				this._startBatchTimer();
    			}
    			var sRequestURI = this._getRequestURLTaskDefinitionData(sTaskInstanceId, sSapOriginID);    	
    			var batchOperation = this.oUtilityModelTaskDefinition.createBatchOperation(sRequestURI,"GET");
    			this.oUtilityModelTaskDefinition.addBatchReadOperations([batchOperation]);
    			this.aBatchedTaskDefinitions.push(sTaskDefinitionID+sSapOriginID);
    			if(this.aBatchedTaskDefinitions.length === this.iBatchThreshold){
    				this._submitBatchTaskDefinitions(this.oUtilityModelTaskDefinition);
    				this.aBatchedTaskDefinitions = [];
    			}
    	}
    	return "";
    },
    
    _getRequestURLTaskDefinitionData : function(sTaskInstanceId, sSapOriginID){
    	var constants = this.getView().constants;
    	var oTaskCollectionTCMMetadata = constants.TaskCollection;
    	var sURIPart = constants.forwardSlash 
    	+ oTaskCollectionTCMMetadata.entityName 
    			+ "(" 
    				+ oTaskCollectionTCMMetadata.properties.instanceID
    						+ "='"
    								+ sTaskInstanceId + 
    									"',"
    										+ constants.sapOrigin 
    											+ "='" 
    												+ sSapOriginID 
    														+ "')" 
    															+ constants.forwardSlash
    																+ oTaskCollectionTCMMetadata.navParam.taskDefinition;
    	return sURIPart;
    	
    	
    },    

    _submitBatchTaskDefinitions : function(oModel){
		var that = this;
		oModel.submitBatch(function(data,response){
			//Process custom attribute definition response
			that._processTaskDefinitionsResponse(data.__batchResponses);
			//that.oSplitAppObj._oLaunchPad._hideBusyLoader();
		},function(error){
			var errorBody = jQuery.parseJSON(error.response.body);
		},true);
	},

	_processTaskDefinitionsResponse : function(taskDefinitionsResponses){
		var taskDefinitionResponse , sSapOrigin, sTaskDefinitionID, sCategory, results, taskDefinitionData = [], oValue ={};
		function oKey(sTaskDefinitionID,sSapOrigin){
			this.sSapOrigin = sSapOrigin;
			this.sTaskDefinitionID=sTaskDefinitionID;
		};
		oKey.prototype.toString = function(){
			return this.sTaskDefinitionID+this.sSapOrigin;
		}
		
		for(var index=0; index < taskDefinitionsResponses.length; index++){	
			taskDefinitionResponse = taskDefinitionsResponses[index];
			if(taskDefinitionResponse && taskDefinitionResponse.statusCode && taskDefinitionResponse.statusCode == 200){
				results = taskDefinitionResponse.data				
				sSapOrigin = results.SAP__Origin;
				sTaskDefinitionID = results.TaskDefinitionID;
				sCategory = results.Category;
				taskDefinitionData[new oKey(sTaskDefinitionID, sSapOrigin)] = {Category : sCategory};
				this.aFetchedTaskDefinitions.push(sTaskDefinitionID+sSapOrigin);
			}else {
				this.aBatchedTaskDefinitions = [];
			}			
		}
		this.oTaskDefinitionModel.setData({"TaskDefinitionCollection":taskDefinitionData},true);
		taskDefinitionData = [];
	},
	
	addReadTaskDescriptionToBatch : function(sTaskInstanceId, sSapOriginID){
		if(this.aFetchedTaskDescriptions.indexOf(sTaskInstanceId+sSapOriginID) === -1 && this.aBatchedTaskDescriptions.indexOf(sTaskInstanceId+sSapOriginID) === -1)
    	{
    			if(this.oBatchTimer === undefined){
    				this._startBatchTimer();
    			}
    			var sRequestURI = this._getRequestURLTaskDescriptionData(sTaskInstanceId, sSapOriginID);    	
    			var batchOperation = this.oUtilityModelTaskDescription.createBatchOperation(sRequestURI,"GET");
    			this.oUtilityModelTaskDescription.addBatchReadOperations([batchOperation]);
    			this.aBatchedTaskDescriptions.push(sTaskInstanceId+sSapOriginID);
    			if(this.aBatchedTaskDescriptions.length === this.iBatchThreshold){
    				this.aBatchedTaskDescriptions = [];
    				this._submitBatchTaskDescriptions(this.oUtilityModelTaskDescription);    				
    			}
    	}
    			return this.sLoadingText;
		
	},
	
	_submitBatchTaskDescriptions : function(oModel){
			var that = this;
			oModel.submitBatch(function(data,response){
				that._processTaskDescriptionResponse(data.__batchResponses);
			},function(error){
				var errorBody = jQuery.parseJSON(error.response.body);
			},true);		
	},
	
	_processTaskDescriptionResponse : function(taskDescriptionResponses){
		var taskDescriptionResponse , sSapOrigin, sTaskInstanceID, sDescription,sDescriptionAsHtml, results, taskDescriptionData = {}, oValue ={};
		function oKey(sTaskInstanceID,sSapOrigin){
			this.sSapOrigin = sSapOrigin;
			this.sTaskInstanceID=sTaskInstanceID;
		};
		oKey.prototype.toString = function(){
			return this.sTaskInstanceID+this.sSapOrigin;
		}
		
		for(var index=0; index < taskDescriptionResponses.length; index++){	
			taskDescriptionResponse = taskDescriptionResponses[index];
			if(taskDescriptionResponse && taskDescriptionResponse.statusCode && taskDescriptionResponse.statusCode == 200){
				results = taskDescriptionResponse.data				
				sSapOrigin = results.SAP__Origin;
				sTaskInstanceID = results.InstanceID;
				sDescription = results.Description;
				sDescriptionAsHtml = results.DescriptionAsHtml
				taskDescriptionData[new oKey(sTaskInstanceID, sSapOrigin)] = {Description : sDescription, DescriptionAsHtml : sDescriptionAsHtml};
				this.aFetchedTaskDescriptions.push(sTaskInstanceID+sSapOrigin);
			}else {
				this.aBatchedTaskDescriptions = [];
			}			
		}
		this.oTaskDescriptionModel.setData({"TaskDescriptionCollection":taskDescriptionData},true);
	},
	
	_getRequestURLTaskDescriptionData : function(sTaskInstanceId, sSapOriginID){
		var constants = this.getView().constants;
    	var oTaskCollectionTCMMetadata = constants.TaskCollection;
    	var sURIPart = constants.forwardSlash 
    	+ oTaskCollectionTCMMetadata.entityName 
    			+ "(" 
    				+ oTaskCollectionTCMMetadata.properties.instanceID
    						+ "='"
    								+ sTaskInstanceId + 
    									"',"
    										+ constants.sapOrigin 
    											+ "='" 
    												+ sSapOriginID 
    														+ "')" 
    															+ constants.forwardSlash
    																+ oTaskCollectionTCMMetadata.navParam.taskDescription;
    	return sURIPart;
	},
	
	addReadCustomAttributeDataToBatch : function(sTaskInstanceId,sSapOriginID){
		
		if(this.aFetchedCustomAttributes.indexOf(sTaskInstanceId + sSapOriginID) === -1 && this.aBatchedCustomAttributes.indexOf(sTaskInstanceId + sSapOriginID) === -1)
    	{
    			if(this.oBatchTimer === undefined){
    				this._startBatchTimer();
    			}
    			var sRequestURI = this.getRequestURLCustomAttributeData(sTaskInstanceId, sSapOriginID);    	
    			var batchOperation = this.oUtilityModelCustomAttributeData.createBatchOperation(sRequestURI,"GET");
    			this.oUtilityModelCustomAttributeData.addBatchReadOperations([batchOperation]);
    			this.aBatchedCustomAttributes.push(sTaskInstanceId + sSapOriginID);
    			if(this.aBatchedCustomAttributes.length === this.iBatchThreshold){
    				this.aBatchedCustomAttributes = [];
    				this._submitBatchCustomAttributeData(this.oUtilityModelCustomAttributeData);    				
    			}
    	}
    			return this.sLoadingText;
		
	},
	
	getRequestURLCustomAttributeData : function(sTaskInstanceID, sSapOriginID){
			var constants = this.getView().constants;
			var oTaskCollectionTCMMetadata = constants.TaskCollection;
			var sURIPart = constants.forwardSlash 
			+ oTaskCollectionTCMMetadata.entityName 
					+ "(" 
						+ oTaskCollectionTCMMetadata.properties.instanceID
								+ "='"
										+ sTaskInstanceID + 
											"',"
												+ constants.sapOrigin 
													+ "='" 
														+ sSapOriginID 
																+ "')" 
																	+ constants.forwardSlash
																		+ oTaskCollectionTCMMetadata.navParam.customAttrValues;
			return sURIPart;
	},
	
	_submitBatchCustomAttributeData : function(oModel){
		var that = this;
		oModel.submitBatch(function(data,response){
			for(var index=0; index < data.__batchResponses.length; index++){
				that._processCustomAttributeDataResponse(data.__batchResponses[index]);
			}
		},function(error){
			var errorBody = jQuery.parseJSON(error.response.body);
		},true);		
	},
	
	_processCustomAttributeDataResponse : function(customAttributeDataResponse){
		var customAttributeData , sSapOrigin, sTaskInstanceID, results, CustomAttributeData = {}, oValue ={};
		function Key(sTaskInstanceID,sSapOrigin){
			this.sSapOrigin = sSapOrigin;
			this.sTaskInstanceID=sTaskInstanceID;
		};
		Key.prototype.toString = function(){
			return this.sTaskInstanceID+this.sSapOrigin;
		}
		if(customAttributeDataResponse && customAttributeDataResponse.statusCode && customAttributeDataResponse.statusCode == 200){
			var oKey;			
			for(var index=0; index < customAttributeDataResponse.data.results.length; index++){	
				customAttributeData = customAttributeDataResponse.data.results[index];
				if(index === 0){
					oKey = new Key(customAttributeData.InstanceID, customAttributeData.SAP__Origin);
					this.aFetchedCustomAttributes.push(customAttributeData.InstanceID + customAttributeData.SAP__Origin);
				}
				oValue[customAttributeData.Name] = customAttributeData.Value;							
			}
			CustomAttributeData[oKey] = oValue;
			
		}else {
			//TODO - remove only the current entry.
			this.aBatchedCustomAttributes = [];
		}
		//if(taskDescriptionData.length>0)
		this.oCustomAttributeDataModel.setData({"CustomAttributeDataCollection":CustomAttributeData},true);
		//taskDescriptionData = [];
	},
	
	_fireSubmitBatch : function(){
		if(this.aBatchedTaskDefinitions !== undefined && this.aBatchedTaskDefinitions.length > 0){
			this.aBatchedTaskDefinitions = [];
			this._submitBatchTaskDefinitions(this.oUtilityModelTaskDefinition);
			
		}
		if(this.aBatchedTaskDescriptions !== undefined && this.aBatchedTaskDescriptions.length > 0){
			this.aBatchedTaskDescriptions = [];
			this._submitBatchTaskDescriptions(this.oUtilityModelTaskDescription);			
		}
		if(this.aBatchedCustomAttributes !== undefined && this.aBatchedCustomAttributes.length > 0){
			this.aBatchedCustomAttributes = [];
			this._submitBatchCustomAttributeData(this.oUtilityModelCustomAttributeData);			
		}
		
		this._stopBatchTimer();
	},
	
	_startBatchTimer : function(){
		var that = this;
		this.oBatchTimer = window.setInterval(function(){that._fireSubmitBatch();},this.iTimerThreshold);
	},
	
	_stopBatchTimer : function(){
		window.clearInterval(this.oBatchTimer);
		this.oBatchTimer = undefined;
	},
	
	getTaskInitiatorIconParts : function(){
    	return [{path: "InstanceID"},
    			{path: "TaskDefinitionID"},
    			{path: "SAP__Origin"},
    			{path: "CreatedBy"},
    			{path: ("TaskDefinitionModel>Category")}
    		   ];
    },
    
    getTaskInitiatorIconFormatter : function(that){
    	return function(sInstanceID, sTaskDefinitionID, sSAPOrigin, sCreatedBy, sCategory ){
				if(!sCreatedBy){
					if(sInstanceID && sTaskDefinitionID && sSAPOrigin){
						var iconURL;
						if(sCategory === null){
							this.bindElement("TaskDefinitionModel>/TaskDefinitionCollection/"+ sTaskDefinitionID + sSAPOrigin + "/");
							return "";
						}
						if(sCategory != null){			
							this.setVisible(true);
							var categoryValue = sCategory.toUpperCase();							
							if(categoryValue === that._oBundle.getText("ALERT"))
								iconURL = that.constants.iconPool.getIconURI("alert");
							else if(categoryValue === that._oBundle.getText("NOTIFICATION"))
							   iconURL = that.constants.iconPool.getIconURI("notification-2");
							else if(categoryValue === that._oBundle.getText("TODO"))
							   iconURL = that.constants.iconPool.getIconURI("activity-2");
							else if(categoryValue === that._oBundle.getText("TASK"))
							   iconURL = that.constants.iconPool.getIconURI("task");
							return iconURL;
						}else if(this.getBindingContext()){
							that.oController.addReadTaskDefinitionToBatch(sInstanceID, sTaskDefinitionID, sSAPOrigin);
						}
					}
				}else /*if(sCreatedBy)*/{
					this.setVisible(false);
				}
									
		};
    },
    
    getExpandTaskDescriptionLinkParts : function(){
    	return [
				{path: "InstanceID"},
				{path: "SAP__Origin"},
				{path: ("TaskDescriptionModel>Description")},
				{path: ("TaskDescriptionModel>DescriptionAsHtml")}
		       ];
    },
    
    getExpandTaskDescriptionLinkFormatter : function(that){
    	return function(sInstanceID, sSAPOrigin, sDescription, sDescriptionAsHtml ){
				if(sInstanceID && sSAPOrigin){
					this.bindElement("TaskDescriptionModel>/TaskDescriptionCollection/"+ sInstanceID + sSAPOrigin + "/");							
					if (sDescription) {
						   var bIsDescriptionAsHtmlPresent = that.oTcmMetadata._isPropertyAvailable("TaskDescription","DescriptionAsHtml");
						   
							if (!bIsDescriptionAsHtmlPresent) {
								if ( sDescription && sDescription !== '') {
							
									if ( ((sDescription).search((/(<([^>]+)>)/ig)) !== -1)) {
										return 'true';
									}
								}
							} else {
								if ( sDescriptionAsHtml && sDescriptionAsHtml !== '') {
									 if ( (sDescriptionAsHtml).search((/(<([^>]+)>)/ig)) !== -1) {
										 return 'true';
									 }
								}
							}
						}
						return 'auto';
				   }														
		};
    },
    
    isFilterOnCustomAttributesSupported : function(){
    	return false;
    },
    
    isSortOnCustomAttributesSupported : function(){
    	return false;
    },
    
    getCustomAttributeColumnParts : function(sName){
    	return [{path: "InstanceID"},
				{path: "SAP__Origin"},
				{path: ("CustomAttributeDataModel>"+sName)}
			   ];
    },
    
    getCustomAttributeColumnFormatter : function(that){
	    return 	function(sInstanceID, sSAPOrigin, sCustomAttributeValue ){
				if(sInstanceID && sSAPOrigin){
					this.bindElement("CustomAttributeDataModel>/CustomAttributeDataCollection/"+ sInstanceID + sSAPOrigin + "/");							
					var oContext = this.getBindingContext();
					if(sCustomAttributeValue != null){			
							return sCustomAttributeValue;
					}else if(oContext){
						return that.oController.addReadCustomAttributeDataToBatch(sInstanceID, sSAPOrigin);
					}
				}
									
		};
    },
    
    getTaskDetailsParts : function(){
    	return [
			{path: "InstanceID"},
			{path: "SAP__Origin"},
			{path: ("TaskDescriptionModel>Description")},
			{path: ("TaskDescriptionModel>DescriptionAsHtml")}
	   ];
    },
    
    getTaskDetailsFormatter : function(that){
	    	return function(sInstanceID, sSAPOrigin, sDescription, sDescriptionAsHtml ){
				if(sInstanceID && sSAPOrigin){
					this.bindElement("TaskDescriptionModel>/TaskDescriptionCollection/"+ sInstanceID + sSAPOrigin + "/");							
					var oContext = this.getBindingContext();
					if(sDescription != null){			
						var isDescriptnAsHtmlPropPresent = that.oTcmMetadata._isPropertyAvailable("TaskDescription","DescriptionAsHtml");
		 	    		var sRegularExpToStripHtmlTags = /(<([^>]+)>)/ig;
		 	    		var description;
		 	    		if(sDescription){
		 	    			
		 	    			if (isDescriptnAsHtmlPropPresent &&  sDescriptionAsHtml !== "") {
		 	    				description = sDescriptionAsHtml;
		 	    			}
		 	    			else {
		 	    				description = sDescription;
		 	    			}
		 	    			
		 	    		}
		 	    		if(description !== null && description !== undefined && description !== "") {
		 	    			this.data('showMore',description);
	 	    				this.data('showLess', description.replace(sRegularExpToStripHtmlTags,""));
		 	    			return description.replace(sRegularExpToStripHtmlTags,"");
		 	    		} else {
		 	    			return "";
		 	    		}
					}else if(oContext){
						return that.oController.addReadTaskDescriptionToBatch(sInstanceID, sSAPOrigin);
					}
				}														
		};
    }/*,
    
    getCategoryIconURIParts : function(){
 	   return [
 				{path: "InstanceID"},
 				{path: "TaskDefinitionID"},
 				{path: "SAP__Origin"},
 				{path: ("TaskDefinitionModel>Category")}
 		   ];
    },
    
    getCategoryIconURIFormatter : function(that){
    	return function(sInstanceID, sTaskDefinitionID, sSAPOrigin, sCategory ){
			if(sInstanceID !== null && sTaskDefinitionID !== null && sSAPOrigin !== null){
				this.bindElement("TaskDefinitionModel>/TaskDefinitionCollection/"+ sTaskDefinitionID + sSAPOrigin + "/");							
				var oContext = this.getBindingContext();
				if(sCategory != null){			
					var categoryValue = sCategory.toUpperCase();
					if (categoryValue == "TASK" || categoryValue == "NOTIFICATION" || categoryValue == "TODO" || categoryValue == "ALERT") {
					   	this.setTooltip(that._oBundle.getText(that.constants.taskCategoryToolTip[categoryValue]));
						return that.constants.taskCategoryImages[categoryValue];
					}else{
						that.constants.taskCategoryImages["TASK"];
					}
				}else if(oContext){
					that.oController.addReadTaskDefinitionToBatch(sInstanceID, sTaskDefinitionID, sSAPOrigin);
				}
			}
								
		};
    }*/
    
    
    
    
	
});


}; // end of sap/uiext/inbox/controller/InboxControllerAsync.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.controller.InboxControllerFactory') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.controller.InboxControllerFactory");



sap.ui.base.Object.extend("sap.uiext.inbox.controller.InboxControllerFactory",{
	
    constructor : function(oConfig) {
    	sap.ui.base.Object.apply(this);
    	this._bAsync = oConfig.bAsyncValue;
    	this._oController = null;    	
    }
});

sap.uiext.inbox.controller.InboxControllerFactory.prototype.getController = function(){
	if(this._oController === null)
	{
		if(this._bAsync === true){
			this._oController = new sap.uiext.inbox.controller.InboxControllerAsync();
		}else if(this._bAsync === false){
			this._oController = new sap.uiext.inbox.controller.InboxController();
		}else{
			if(window.console){
				console.error("Invalid argument specified in constructor. Please pass a boolean value - true/false.");
			}
			this._oController = null;
		}
	}
	return this._oController;
};
}; // end of sap/uiext/inbox/controller/InboxControllerFactory.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.uiext.inbox (1.50.6)
 */
jQuery.sap.declare("sap.uiext.inbox.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * The Unified Inbox control
 *
 * @namespace
 * @name sap.uiext.inbox
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.uiext.inbox",
	dependencies : ["sap.ui.core","sap.ui.commons","sap.ui.ux3"],
	types: [],
	interfaces: [],
	controls: [
		"sap.uiext.inbox.Inbox",
		"sap.uiext.inbox.InboxLaunchPad",
		"sap.uiext.inbox.InboxSplitApp",
		"sap.uiext.inbox.SubstitutionRulesManager",
		"sap.uiext.inbox.composite.InboxAddAttachmentTile",
		"sap.uiext.inbox.composite.InboxAttachmentTile",
		"sap.uiext.inbox.composite.InboxAttachmentsTileContainer",
		"sap.uiext.inbox.composite.InboxBusyIndicator",
		"sap.uiext.inbox.composite.InboxComment",
		"sap.uiext.inbox.composite.InboxTaskComments",
		"sap.uiext.inbox.composite.InboxTaskTitleControl",
		"sap.uiext.inbox.composite.InboxUploadAttachmentTile"
	],
	elements: [],
	version: "1.50.6"
});


}; // end of sap/uiext/inbox/library.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.splitapp.DetailViewPage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.splitapp.DetailViewPage");
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained

jQuery.sap.require('sap.m.SelectDialog'); // unlisted dependency retained




/*global OData */// declare unusual global vars for JSLint/SAPUI5 validation
sap.ui.base.Object.extend("sap.uiext.inbox.splitapp.DetailViewPage",{
	
    constructor : function(Id) {
        sap.ui.base.Object.apply(this);
        this.oCore = sap.ui.getCore();
        this.Id =Id;
        this.constants = sap.uiext.inbox.InboxConstants;
        this._oBundle = this.oCore.getLibraryResourceBundle("sap.uiext.inbox");
		this.utils = sap.uiext.inbox.InboxUtils;
        this.useBatch = false;
        this.isCommentsSupported = false;
        this.bPhoneDevice = jQuery.device.is.phone;
		this.detailViewPage = this._create();
    }

});

sap.uiext.inbox.splitapp.DetailViewPage.prototype._create = function() {
	var oDetailPage = this.oCore.byId(this.Id + "-detailPage");
	if(!oDetailPage){
		
		var that = this;
		var aStandardButtons = new Array();
		
		var oClaimBtn = new sap.m.Button(this.Id + "-claimBtn",{text:this._oBundle.getText("INBOX_ACTION_BUTTON_CLAIM"), icon:"sap-icon://locked", enabled:"{SupportsClaim}"});
		oClaimBtn.attachPress(this, this._handleClaim);
		aStandardButtons.push(oClaimBtn);
		
		var oReleaseBtn = new sap.m.Button(this.Id + "-releaseBtn",{text:this._oBundle.getText("INBOX_ACTION_BUTTON_RELEASE"), icon:"sap-icon://unlocked", enabled:"{SupportsRelease}"});
		oReleaseBtn.attachPress(this, this._handleRelease);
		aStandardButtons.push(oReleaseBtn);
		
		/*var oForwardBtn = new sap.m.Button(this.parentId + "frwdBtn",{text:"Forward", icon:"sap-icon://forward", enabled:true});
	oForwardBtn.attachPress(this, this._handleRelease);
	aStandardButtons.push(oForwardBtn);*/
		
		var oBar = new sap.m.Bar(this.Id + "-actionsBar", {
			contentMiddle: aStandardButtons,
		});
		
		
		
		oDetailPage = new sap.m.Page(this.Id + "-detailPage",{
			title : "{"+this.constants.PROPERTY_NAME_TASK_DEFINITION_NAME+"}",
			footer: oBar,
			showNavButton : jQuery.device.is.phone
			/*navButtonPress: function(){
			that.oSplitAppObj.app.backToTopDetail();
			}*/

		}).attachNavButtonPress(function(oEvent){
			sap.ui.getCore().getEventBus().publish('sap.uiext.inbox', "detailPageNavButtonTapped");
			
			
		});
		
		var oObjectHeader = new sap.m.ObjectHeader(this.Id + "-objHeader",{ 
			title : "{"+this.constants.PROPERTY_NAME_TASK_TITLE+"}",
			attributes: [
			              new sap.m.ObjectAttribute(this.Id + "-objDesc",{text:"{Description/Description}"}), 
			              new sap.m.ObjectAttribute().bindProperty("text", this.constants.PROPERTY_NAME_PRIORITY, function(_sPriorityValue) {
			            	  if (_sPriorityValue) {
		      						var _sPriorityTranslated = that._oBundle.getText(that.constants.prioTooltip[_sPriorityValue]);
		      						_sPriorityTranslated = (_sPriorityTranslated == "") ?  _sPriorityValue : _sPriorityTranslated;
		      						_sPriorityTranslated = that._oBundle.getText("INBOX_PRIORITY") + " : " + _sPriorityTranslated;
		      						this.setTooltip(_sPriorityTranslated);
		      						return _sPriorityTranslated ;//TODO Is this the right approach to add ":" or ASCII ?
		      					}
		      					return "";
		      			  }),
			              new sap.m.ObjectAttribute().bindProperty("text", "CompletionDeadLine", function(value){
			            	  	if(value!=null && value!= ""){
			            	  		var _sDueDate = that._oBundle.getText("INBOX_DUE_DATE") + " : " + that.utils._dateFormat(value);
			            	  		this.setTooltip(_sDueDate);
			            	  		return _sDueDate;
			            	  	}
			    		  })
						]
			/*statuses : [new sap.m.ObjectStatus({
								icon : sap.ui.core.IconPool.getIconURI("pending"),
								state : sap.ui.core.ValueState.Error
						    })
						] */
		}).setTitleActive(true);
		
		oObjectHeader.attachTitlePress(this, this._handleTaskTitlePress);
		oDetailPage.addContent(oObjectHeader);
		
		var oIconTabBar = new sap.m.IconTabBar(this.Id + "-iconTabBar", {
			items: [
			        new sap.m.IconTabFilter(this.Id + "-custAttrTab",{
			        	icon: "sap-icon://hint",
			        	iconColor: sap.ui.core.IconColor.Default,
			        	key: "customAttr"
			        })
			        	/*,
										
										new sap.m.IconTabFilter({
											icon: "sap-icon://attachment",
											iconColor: sap.ui.core.IconColor.Default,
											key: "attachments",
											content: [
												new sap.m.Label({
													text: "Attachments Section Is UnderCounstruction"
												}),
											]
										})*/
			        
			        ]
		});
		/*if(this.isCommentsSupported){
			oIconTabBar.addItem(new sap.m.IconTabFilter({
										icon: "sap-icon://collaborate",
											iconColor: sap.ui.core.IconColor.Default,
												key: "comments"
										}));
		}*/
		
		oIconTabBar.attachSelect(this,this._handleSelectIconTabFilter);
		oDetailPage.addContent(oIconTabBar);
		oDetailPage.addDelegate({
			onAfterRendering:function() {
				/*that._renderCustomActions();
				var oIconTabBar = this.oCore.byId(that.Id + '-iconTabBar');
				if(oIconTabBar.getSelectedKey() === 'customAttr'){
					oIconTabBar.getItems()[0].addContent(that._createCustomAttributes());
				}*/
			}
		});
	}
	return oDetailPage;
}

sap.uiext.inbox.splitapp.DetailViewPage.prototype._setTcmServiceURL = function(sValue) {
	this.tcmServiceURL = sValue;
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._setTcmConfiguration = function(oTCMConfiguration) {
	//TODO if string value is provided handle it.
	this.useBatch  = oTCMConfiguration.useBatch ? oTCMConfiguration.useBatch : false;  
	this.isCommentsSupported  = oTCMConfiguration.isCommentsSupported ? oTCMConfiguration.isCommentsSupported : false;
	this._createCommentsView();
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._createCommentsView = function() {
	var oIconTabBar = this.oCore.byId(this.Id + '-iconTabBar');
	if(this.isCommentsSupported){
		oIconTabBar.addItem(new sap.m.IconTabFilter(this.Id + "-commentsTab",{
									icon: "sap-icon://collaborate",
										iconColor: sap.ui.core.IconColor.Default,
											key: "comments"
									}));
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._getOModel = function() {
	if(!this.oTCMModel){
		this.oTCMModel = this.detailViewPage.getModel('inboxTCMModel');
	}
	return this.oTCMModel;
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._getPageModel = function() {
	if(!this.model){
		this.model = this.detailViewPage.getModel();
	}
	return this.model;
}

sap.uiext.inbox.splitapp.DetailViewPage.prototype.getPage = function() {
	return this.detailViewPage;
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._handleClaim = function(oEvent, that) {
	that.executeActionOnTask('Claim');
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._handleRelease = function(oEvent, that) {
	that.executeActionOnTask('Release');
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._handleForward = function(oEvent, that) {
	that.executeActionOnTask('Forward');
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._handleTaskTitlePress = function(oEvent, that) {
	that.oCore.getEventBus().publish('sap.uiext.inbox', "detailPageTaskTitleSelected", {context:that.detailViewPage.getBindingContext()})
};

/*sap.uiext.inbox.splitapp.DetailViewPage.prototype._handleOpenTaskExecutionUI = function(oEvent, that) {
	var oTaskExecutionUIPageObj = that.oSplitAppObj._oTaskExecutionUIPageObj;
	if(!oTaskExecutionUIPageObj){
		jQuery.sap.require("sap.uiext.inbox.splitapp.TaskExecutionUIPage");
		oTaskExecutionUIPageObj = new sap.uiext.inbox.splitapp.TaskExecutionUIPage(that.oSplitAppObj.getId() + "-exUi"); 
		that.oSplitAppObj.app.addPage(oTaskExecutionUIPageObj.oTaskExecutionUIPage);
		oTaskExecutionUIPageObj._oParentSplitAppObj = that.oSplitAppObj; 
		that.oSplitAppObj._oTaskExecutionUIPageObj = oTaskExecutionUIPageObj;
	}
	oTaskExecutionUIPageObj.oTaskExecutionUIPage.setBindingContext(that.detailViewPage.getBindingContext());
	oTaskExecutionUIPageObj.open();
};*/

sap.uiext.inbox.splitapp.DetailViewPage.prototype.executeActionOnTask = function(action, forwardTo) {
	//this.oSplitAppObj._oLaunchPad._showBusyLoader();
	var isForwardAction = (action === 'Forward') ? true : false;
	var forwardTo = isForwardAction ? forwardTo : '';
	
    var selectedIDs = [], selectedContexts = [],selectedSAPOrigins = [], selectedForwardToUsers = [];
    var selectedStatus = [];
    var concatSelectedIDs = "'", concatSelectedSAPOrigins = "'", concatForwardToUsers = "'";
    var selectedID, selectedSAPOrigin;
    
    var oContext = this.detailViewPage.getBindingContext();
    selectedID = this._getPageModel().getProperty("InstanceID", oContext);
    selectedSAPOrigin = this._getPageModel().getProperty("SAP__Origin", oContext);
    
    selectedContexts.push(oContext);
    selectedIDs.push(selectedID);
    selectedSAPOrigins.push(selectedSAPOrigin);
    
    concatSelectedIDs = concatSelectedIDs + selectedID +"'";
	   concatSelectedSAPOrigins = concatSelectedSAPOrigins + selectedSAPOrigin +"'";
	   if(isForwardAction){
	  	 concatForwardToUsers = "'" + forwardTo + "'";
	   }
    
    if (selectedIDs != null || selectedIDs.length > 0) {
        var IDURIPart, requestURI, requestOptions, status;
        if (action === "Complete") {
            action = "Complete";
        }
        if (action === "Claim") {
            action = "Claim";
        }
        if (action === "Release") {
            action = "Release";
        }if(isForwardAction){
        	action = "Forward";
        }
        
        this.defaultActionHandler(action, concatSelectedIDs, concatSelectedSAPOrigins, selectedIDs, selectedSAPOrigins, selectedContexts, concatForwardToUsers);
  }
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype.defaultActionHandler = function(action, concatSelectedIDs, concatSelectedSAPOrigins, selectedIDs, selectedSAPOrigins, selectedContexts, concatForwardToUsers) {
   // var concatSelectedIDs = selectedIDs;
    var IDURIPart, requestURI, requestOptions, status;
    //var concatSAPOrigins = selectedSAPOrigins;
    var isForwardAction = (action === 'Forward') ? true : false;
    var aSelectedContextsList = selectedContexts;
    var that = this;
    var selectedIDListLength = selectedIDs.length;
    var sTaskTitle = that._getPageModel().getProperty("TaskTitle", selectedContexts[0]);
    	
    IDURIPart = '/' + action + "?InstanceID=" + concatSelectedIDs + "&SAP__Origin=" + concatSelectedSAPOrigins + "&$format=json";
    
    if (action === "Release") {
		action = that._oBundle.getText("INBOX_ACTION_BUTTON_RELEASE");
	} else if (action === "Claim") {
		action = that._oBundle.getText("INBOX_ACTION_BUTTON_CLAIM");
	} else if ( action === "Forward") {
		action = that._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD");
		
	}
    
    var errorHandler = function(error){
    	//that.oSplitAppObj._oLaunchPad._hideBusyLoader();
    	sap.m.MessageToast.show(that._oBundle.getText("INBOX_MSG_ACTION_FAILED", [action,sTaskTitle]));//TODO  send Task Title
    };
    
    if(isForwardAction){
    	IDURIPart = IDURIPart + "&ForwardTo=" + concatForwardToUsers;
    }
    requestURI = this.tcmServiceURL + IDURIPart;
 
  var sSecurityToken = this._getOModel().oHeaders["x-csrf-token"];
  if(!sSecurityToken){
	  this._getOModel().refreshSecurityToken(null, null, false);
	  sSecurityToken = this._getOModel().oHeaders["x-csrf-token"];
  }
  requestOptions = {
		         async:true,
		         requestUri : requestURI,
		         method : 'POST',
		         headers : {
		                Accept : "application/json",
		                "x-csrf-token" : sSecurityToken
		         }
		  };

        OData.request(requestOptions, function(data, request) {
        	that._handleActionCompleted(data);
        	//that.oSplitAppObj._oLaunchPad._hideBusyLoader();
        	sap.m.MessageToast.show(that._oBundle.getText("INBOX_MSG_ACTION_SUCCESS", [action, data.TaskTitle]));
        }, errorHandler);
};


sap.uiext.inbox.splitapp.DetailViewPage.prototype._renderCustomActions = function() {
	var aCustomActionArray = [];
	if(this.detailViewPage.getBindingContext()){
		var oContext = this.detailViewPage.getBindingContext();
		var sInstanceID = this._getPageModel().getProperty("InstanceID", oContext);
		var sapOrigin = this._getPageModel().getProperty("SAP__Origin", oContext);
		var that = this;
		this._getOModel().read(this.constants.decisionOptionsFunctionImport,null,["InstanceID='"+sInstanceID+"'&SAP__Origin='"+sapOrigin+"'",this.constants.formatJSONURLParam],true,function(oData, response){
			aCustomActionArray = oData.results;
			that._createCustomActions(aCustomActionArray);
		},function(error){
			var errorBody = jQuery.parseJSON(error.response.body);
			sap.m.MessageToast.show(that._oBundle.getText("INBOX_LP_MSG_ERROR_WHILE_FETCHING_CUSTOM_ACTIONS"),{
										width: "55em",
										autoClose: false
										}
									);
		});
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._createCustomActions = function(customActionsDefinition) {
	var that = this;
	var actionButtonsToolBar = this.oCore.byId(this.Id + "-actionsBar");
	this._deleteCustomActions(customActionsDefinition, actionButtonsToolBar);
	var noOfCustomActions = customActionsDefinition.length;
	var index = 3, aRenderedCustomActions, aCustomActionsTobeRendered, bShowMore;
	if(this.bPhoneDevice){
		var showMaxCustomActions = 0;
	}else{
		var showMaxCustomActions = 7;
	}
	if(noOfCustomActions > showMaxCustomActions){
		aRenderedCustomActions = customActionsDefinition.slice(0,showMaxCustomActions+1);
		aCustomActionsTobeRendered = customActionsDefinition.slice(showMaxCustomActions,noOfCustomActions);;
		noOfCustomActions = showMaxCustomActions;
		bShowMore = true;
	}
	for(var i=0; i < noOfCustomActions; i++){
		var action = customActionsDefinition[i];
		var oCustomActionButton = that._createCustomActionButton(action);
		/*var sDecisionButtonText = !action.DecisionText? action.DecisionKey: action.DecisionText;
		var customActionButton = new sap.m.Button(this.Id + '--' + action.DecisionKey+'button', {
					icon:"sap-icon://complete",
		            text : sDecisionButtonText,
		            tooltip :  action.Description
		        }).data("type",that.constants.customAction).data("key",action.DecisionKey);
		customActionButton.attachPress(that, that._handleCustomAction);*/
		actionButtonsToolBar.insertContentMiddle(oCustomActionButton,index);
		index++;
	}
	if(bShowMore){
		var oCustomActionMoreButton = this.oCore.byId(this.Id + '--' + 'customActionMoreButton');
		if(!oCustomActionMoreButton){
			oCustomActionMoreButton = new sap.m.Button(this.Id + '--' + 'customActionMoreButton', {
				icon:"sap-icon://open-command-field"
	        }).data("type",this.constants.customAction
	        		).attachPress({"that" : that, "aCustomActionsTobeRendered" : aCustomActionsTobeRendered}, that._openCustomActionSheet);
		}
		actionButtonsToolBar.insertContentMiddle(oCustomActionMoreButton,index);
	}
	//actionButtonsToolBar.rerender();
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._openCustomActionSheet = function(oEvent, oInfo){
	var that = oInfo.that;
	var aCustomActionsTobeRendered = oInfo.aCustomActionsTobeRendered;
	var oCustomActionSheet = that.oCore.byId(that.Id + '--' + 'customActionSheet');
	if(!oCustomActionSheet){
		oCustomActionSheet = new sap.m.ActionSheet(that.Id + '--' + 'customActionSheet',{
								title: "Custom Action",
								showCancelButton: true,
								placement: sap.m.PlacementType.Top
							});
	}
	jQuery.each(aCustomActionsTobeRendered, function(i, action) {
		var oCustomActionButton = that._createCustomActionButton(action);
		oCustomActionButton.data('source','actionSheet');
		oCustomActionSheet.addButton(that._createCustomActionButton(action));
    });
	oCustomActionSheet.openBy(oEvent.getSource());
	
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._createCustomActionButton = function(action){
	var oCustomActionButton = this.oCore.byId(this.Id + '--' + action.DecisionKey+'button');
	if(!oCustomActionButton){
		var sDecisionButtonText = (action.DecisionText !== undefined && action.DecisionText !== "")? action.DecisionText: action.DecisionKey;
		var oCustomActionButton = new sap.m.Button(this.Id + '--' + action.DecisionKey+'button', {
					icon:"sap-icon://complete",
		            text : sDecisionButtonText,
		            tooltip :  action.Description
		        }).data("type",this.constants.customAction).data("key",action.DecisionKey).data("text", sDecisionButtonText);
		oCustomActionButton.attachPress(this, this._handleCustomAction);
	}
	return oCustomActionButton;
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._deleteCustomActions = function(customActionsDefinition, oActionButtonsToolBar) {
	var that = this;
	//Get All ToolBar Iems
	var oToolBarItems = oActionButtonsToolBar.getContentMiddle();
	for(var i=0; i< oToolBarItems.length; i++){
		var oToolBarItem = oToolBarItems[i];
		if(oToolBarItem instanceof sap.m.Button &&  oToolBarItem.data("type") === that.constants.customAction){
			oActionButtonsToolBar.removeContentMiddle(oToolBarItem);
			oToolBarItem.destroy();
		}
	}
	var oCustomActionSheet = that.oCore.byId(that.Id + '--' + 'customActionSheet');
	if(oCustomActionSheet){
		oCustomActionSheet.destroy();
	}
};


sap.uiext.inbox.splitapp.DetailViewPage.prototype._getPropertyValue = function(sPropertyName){
	var oContext = this.detailViewPage.getBindingContext();
	if(oContext){
		return this._getPageModel().getProperty(sPropertyName, oContext);
	}
	return null;
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._handleCustomAction = function(oEvent, that) {
	var oCustomActionSourceButton = oEvent.getSource();
	var sCustomActionKey = oCustomActionSourceButton.data('key');
	
	var oCustomActionCompleteButtoninPopup = that.oCore.byId(that.Id + '--' + sCustomActionKey +'cAinPopUp');
	if(!oCustomActionCompleteButtoninPopup){
		oCustomActionCompleteButtoninPopup = new sap.m.Button(that.Id + '--' + sCustomActionKey+'cAinPopUp',{
												text: oCustomActionSourceButton.data('text'),
												press: function (oEvent) {
													var sComment = that.oCore.byId(that.Id + '--' + 'addCommentsInputBtn').getValue();
													that._executeCustomAction(sComment,sCustomActionKey);
													that.oCore.byId(that.Id + '--' + 'customActionWithComments').close();
												}
											}).data('key',sCustomActionKey);
	}
	
	var oCustomActionWithCommentsPopOver = that.oCore.byId(that.Id + '--' + 'customActionWithComments');
	if(!oCustomActionWithCommentsPopOver){
		oCustomActionWithCommentsPopOver = new sap.m.ResponsivePopover(that.Id + '--' + 'customActionWithComments',{
			placement: sap.m.PlacementType.Top,
			content: new sap.m.TextArea(that.Id + '--' + 'addCommentsInputBtn',{
	        	placeholder: that._oBundle.getText("INBOX_LP_ADD_COMMENT"),
	        	maxLength: 500,
	        	width: '100%'
	        })
		});
	if (that.bPhoneDevice) {
		oCustomActionWithCommentsPopOver.setTitle( that._getPageModel().getProperty ("TaskTitle", that.detailViewPage.getBindingContext() ) );
		oCustomActionWithCommentsPopOver.setShowHeader(that.bPhoneDevice);
	}
	}
	oCustomActionWithCommentsPopOver.setBeginButton(oCustomActionCompleteButtoninPopup);
	var oCommentsInputforCAinPopOver = that.oCore.byId(that.Id + '--' + 'addCommentsInputBtn');
	if(oCommentsInputforCAinPopOver){
		oCommentsInputforCAinPopOver.setValue('');
	}
	
	if(oCustomActionSourceButton.data('source') === 'actionSheet'){
		oCustomActionWithCommentsPopOver.openBy(that.oCore.byId(that.Id + '--' + 'customActionMoreButton'));
	}else{
		oCustomActionWithCommentsPopOver.openBy(oCustomActionSourceButton);
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._executeCustomAction = function(sComment, decisionKey) {
	//this.oSplitAppObj._oLaunchPad._showBusyLoader();
	var selectedIDs = [], selectedContexts = [], selectedSAPOrigins = [];
    var selectedStatus = [];
    var concatSelectedIDs = "'", concatSelectedSAPOrigins = "'";
    var comments = [];
    var selectedID, selectedSAPOrigin;
    var that = this;
    var oContext = this.detailViewPage.getBindingContext();
    var sTaskTitle = this._getPageModel().getProperty("TaskTitle", oContext);
    selectedID = this._getPageModel().getProperty("InstanceID", oContext);
    selectedSAPOrigin = this._getPageModel().getProperty("SAP__Origin", oContext);
    
    selectedContexts.push(oContext);
    selectedIDs.push(selectedID);
    selectedSAPOrigins.push(selectedSAPOrigin);

    concatSelectedIDs = concatSelectedIDs + selectedID +"'";
	concatSelectedSAPOrigins = concatSelectedSAPOrigins + selectedSAPOrigin +"'";
    
    var IDURIPart, requestURI, requestOptions, status, selectedIDLength;
    
    selectedIDLength = selectedIDs.length;
    
	    IDURIPart = this.constants.forwardSlash + this.constants.decisionExecutionFunctionImport + this.constants.query + "InstanceID=" + concatSelectedIDs + this.constants.amperSand + "SAP__Origin=" + concatSelectedSAPOrigins + this.constants.amperSand + "DecisionKey='"+ decisionKey + "'" 
	    				+ this.constants.amperSand + this.constants.formatJSONURLParam;
	    if(sComment)
	    	IDURIPart = IDURIPart + "&Comments='"+sComment+"'";
	    requestURI = this.tcmServiceURL + IDURIPart;
	    
	    var sSecurityToken = this._getOModel().oHeaders["x-csrf-token"];
	    if(!sSecurityToken){
	  	  this._getOModel().refreshSecurityToken(null, null, false);
	  	  sSecurityToken = this._getOModel().oHeaders["x-csrf-token"];
	    }
	    requestOptions = {
	         async:true,
	         requestUri : requestURI,
	         method : 'POST',
	         headers : {
	                Accept : this.constants.acceptHeaderforJSON,
	                "x-csrf-token" : sSecurityToken
	         }
	    };
	
	    OData.request(requestOptions, function(data, request) {
	    	that._handleActionCompleted(data);
	    	//that.oSplitAppObj._oLaunchPad._hideBusyLoader();
	    	sap.m.MessageToast.show(that._oBundle.getText("INBOX_MSG_ACTION_SUCCESS", [decisionKey, data.TaskTitle]));
	    }, function(error) {
	    	//that.oSplitAppObj._oLaunchPad._hideBusyLoader();
	    	sap.m.MessageToast.show(that._oBundle.getText("INBOX_MSG_ACTION_FAILED", [decisionKey, sTaskTitle]));//TODO: Task Title to be sent
	    });
    };
    
sap.uiext.inbox.splitapp.DetailViewPage.prototype._createCustomAttributes = function() {
	if(this.detailViewPage.getBindingContext()){
		var sSelectedTaskDefinition = this._getPropertyValue('TaskDefinitionID');
		var sSapOrigin = this._getPropertyValue('SAP__Origin');
		
		var sSelectedTaskInstance = this._getPropertyValue('InstanceID'); 
		this._getCustomAttributeMetaData(sSelectedTaskDefinition,sSapOrigin, sSelectedTaskInstance);
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._getCustomAttributeMetaData = function(sTaskDefinitionID, sSapOriginID, sTaskInstanceID){
	var that = this;
	var constants = this.constants;
	var oTaskDefinitionTCMMetadata = constants.TaskDefinitionCollection;
	var aCustomAttributeMetaDataArray = constants.oTaskDefinitionCustomAttributesMap[sTaskDefinitionID];
    
    
	if(!aCustomAttributeMetaDataArray){
		var sURIPart = this._getRequestURLCustomAttributeMetaData(oTaskDefinitionTCMMetadata, sTaskDefinitionID, sSapOriginID);
		var sRequestURI = this.tcmServiceURL + sURIPart;
	    var oRequestOptions = {
	        async:true,
	        requestUri : sRequestURI,
	        method : "GET",
	        headers : {
	            Accept : constants.acceptHeaderforJSON
	        }
	    };
    
	    OData.request(oRequestOptions, function(data, request) {
            constants.oTaskDefinitionCustomAttributesMap[sTaskDefinitionID] = data.results;
            that.showHideIconTabFilters(sTaskInstanceID, sSapOriginID, data.results);
	    }, function(error) {
	    	var errorBody = jQuery.parseJSON(error.response.body);
			sap.m.MessageToast.show(that._oBundle.getText("INBOX_LP_MSG_ERROR_WHILE_FETCHING_CUSTOM_ATTR"),{
				width: "55em",
				autoClose: false
				}
			);
	    });
	} else {
		that.showHideIconTabFilters(sTaskInstanceID, sSapOriginID, aCustomAttributeMetaDataArray);
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype.showHideIconTabFilters = function(sTaskInstanceID, sSapOriginID, aCustomAttributesMetadataArray){
	var oIconTabBar = sap.ui.getCore().byId(this.Id + '-iconTabBar');
	var aIconTabBarItems = oIconTabBar.getItems(); 
	var sSelectedTabKey = oIconTabBar.getSelectedKey();
	if (aCustomAttributesMetadataArray.length > 0) {
		aIconTabBarItems[0].setVisible(true);
    	if (sSelectedTabKey === "customAttr" && oIconTabBar.getExpanded() === true) {
    		this._addBusyIndicatorForTaskDetails(aIconTabBarItems[0]);
    		this._getCustomAttributeData(sTaskInstanceID, sSapOriginID, aCustomAttributesMetadataArray);
    	} else if (sSelectedTabKey === "comments" && oIconTabBar.getExpanded() === true) {
    		this._handleSelectComments(aIconTabBarItems[1]);
    	}
	} else {
		aIconTabBarItems[0].setVisible(false);
		if (!(sSelectedTabKey === "comments")){
			oIconTabBar.setSelectedKey("comments");
		}
    	if (oIconTabBar.getExpanded() === true) {
    		this._handleSelectComments(aIconTabBarItems[1]);
    	}
	}
}

sap.uiext.inbox.splitapp.DetailViewPage.prototype._getCustomAttributeData = function(sTaskInstanceID, sSapOriginID, customAttributeDefArray){
	var that = this;
	var constants = this.constants;
	var oTaskCollectionTCMMetadata = constants.TaskCollection;
    var oCustomAttributeValuesMap = constants.oTaskInstanceCustomAttributeValuesMap;
	var oCustomAttributesValues = oCustomAttributeValuesMap[sTaskInstanceID];
	var oIconTabBar = sap.ui.getCore().byId(that.Id + '-iconTabBar');
	
	if(!oCustomAttributesValues){
		var sURIPart = this._getRequestURLCustomAttributeData(oTaskCollectionTCMMetadata, sTaskInstanceID, sSapOriginID);
		var sRequestURI = this._getOModel().sServiceUrl + sURIPart;
	    var oRequestOptions = {
	        async:true,
	        requestUri : sRequestURI,
	        method : "GET",
	        headers : {
	            Accept : constants.acceptHeaderforJSON
	        }
	    };
    
	    OData.request(oRequestOptions, function(data, request) {
			var customAttributeArray = that._transformCustomAttributeJsonToArray(data.results);
		    constants.oTaskInstanceCustomAttributeValuesMap[sTaskInstanceID] = customAttributeArray;
	    	oIconTabBar.getItems()[0].addContent(that._renderCustomAttributes(customAttributeDefArray, customAttributeArray));
    	}, function(error) {
	    	sap.m.MessageToast.show(that._oBundle.getText("INBOX_MSG_FETCH_CUSTOM_ATTRIBUTES_FAILS")); //TODO: Use Text created by Neelaja
	    });
	} else {
		oIconTabBar.getItems()[0].addContent(that._renderCustomAttributes(customAttributeDefArray, oCustomAttributesValues));
		}

};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._handleSelectIconTabFilter = function(oEvent, that) {
	var oIconTabBar = that.oCore.byId(that.Id + '-iconTabBar');
	var oIconTabBarItems = oIconTabBar.getItems();
	if(oIconTabBar.getSelectedKey() === 'customAttr'){
    	that._createCustomAttributes();
    } else if(oIconTabBar.getSelectedKey() === 'comments' && oIconTabBar.getExpanded() === true){
    	//Comments Icon is explicitly selected, so call Comments handler
    	that._handleSelectComments(oIconTabBarItems[1]);
    }
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._createCustomAttributesLayout = function(aCustomAttributeDefinitionArray,aCustomAttributeValueArray) {
	var _oIconTabBar = this.oCore.byId(this.Id + '-iconTabBar');
	
	var _oCustomAttrTab = this.oCore.byId(this.Id + '-custAttrTab');
	_oCustomAttrTab.removeAllContent();
	
	var numberOfCustomAttrValues = aCustomAttributeDefinitionArray.length;
	
	if(numberOfCustomAttrValues > 0){
		
		var scrollCont = this.oCore.byId(this.Id + "-custAttrScrollCont");
		if(!scrollCont){
			scrollCont = new sap.m.ScrollContainer(this.Id + "-custAttrScrollCont",{
				vertical: true,
				width: "auto",
			}).addStyleClass('inbox_split_app_scrollContainer');
		}
		scrollCont.removeAllContent();
	
		var formLayout = this.oCore.byId(this.Id + "-custAttForm");
		if(!formLayout){
			formLayout = new sap.ui.layout.form.SimpleForm(this.Id + "-custAttForm", {
				//minWidth:1024,
			});
		}
		formLayout.removeAllContent();
	
	
			
			for(var counter = 0; counter< numberOfCustomAttrValues; counter++){
				formLayout.addContent(new sap.m.Label({text: aCustomAttributeDefinitionArray[counter].Label}));
				formLayout.addContent(new sap.m.Text({text: aCustomAttributeValueArray[aCustomAttributeDefinitionArray[counter].Name]}));
			}
			
			scrollCont.addContent(formLayout);
			return scrollCont;
	}
};


sap.uiext.inbox.splitapp.DetailViewPage.prototype._handleActionCompleted = function(task){
	this.oCore.getEventBus().publish('sap.uiext.inbox', "taskActionCompleted", {taskData:task})
	//this.oInboxMasterPage._rerenderTask(task);
	//var node = this._getPageModel().getProperty(this.detailViewPage.getBindingContext().getPath(), this.detailViewPage.getBindingContext());
	//node = task;
	//this._getPageModel().checkUpdate(false);
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._rerenderTaskDescription = function(description){
    var node = this._getPageModel().getProperty(this.detailViewPage.getBindingContext().getPath(), this.detailViewPage.getBindingContext());
    if(node.Description){
           node.Description.Description = description;
    }else{
           node.Description = {"Description":description};
    }
    this._getPageModel().checkUpdate(false);
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype.renderDetailsPage = function(onUpdate){
	if(this.useBatch){
		this._renderDetailsPageBatchProcessing();
	}else{
		this._renderDetailsPageNonBatchProcessing(onUpdate);
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._renderDetailsPageBatchProcessing = function(){
	var that = this;
	var customAttributeDefinitionFlag = this._addReadCustomAttributeMetaDatatoBatch();
	var customAttributeFlag = this._addReadCustomAttributeDataToBatch();
	var taskDescriptionFlag = this._addReadTaskDescriptiontoBatch();
	var customActionFlag = this._addReadCustomActionstoBatch();
	if(customActionFlag || customAttributeDefinitionFlag || customAttributeFlag){
		this._getOModel().submitBatch(function(data,response){
			  
			  var oContext = that.detailViewPage.getBindingContext();
			  var sTaskDefinitionID = that._getPageModel().getProperty("TaskDefinitionID", oContext);
	  		  var sTaskInstanceID = that._getPageModel().getProperty("InstanceID", oContext);
	  		  var index = 0;
	  		  var errMsgTskDesc, errMsgCusAcn, errMsgCusAttDef, errMsgCustAtt, errorMessage;
	  		  if(customAttributeDefinitionFlag){
	  			  //Process custom attribute definition response
	  			  errMsgCusAttDef = that._processCustomAttributeDefinitionResponse(that, data.__batchResponses[index++], sTaskDefinitionID);
	  		  }
	  		  if(customAttributeFlag){
	  			  //Process custom attribute response
	  			  errMsgCustAtt = that._processCustomAttributeResponse(that, data.__batchResponses[index++], sTaskDefinitionID, sTaskInstanceID);
	  		  }
	  		  if(taskDescriptionFlag){
		  		  //Process task description response
	  			errMsgTskDesc = that._processTaskDescriptionResponse(that, data.__batchResponses[index++], sTaskInstanceID);
	  		  }
	  		  if(customActionFlag){
		  		  //Process custom action response
	  			errMsgCusAcn = that._processCustomActionResponse(that, data.__batchResponses[index++], sTaskDefinitionID);
	  		  }
	  		  if(errMsgTskDesc){
	  			errorMessage = errMsgTskDesc; 
	  		  }
	  		  if(errMsgCusAcn){
		  			errorMessage = errorMessage?errorMessage+errMsgCusAcn:errMsgCusAcn; 
		  		  }
	  		  if(errMsgCusAttDef){
		  			errorMessage = errorMessage?errorMessage+errMsgCusAttDef:errMsgCusAttDef; 
		  		  }
	  		  if(errMsgCustAtt){
		  			errorMessage = errorMessage?errorMessage+errMsgCustAtt:errMsgCustAtt; 
		  		  }
			  if(errorMessage){
				  sap.m.MessageToast.show(errorMessage, { width: "55em", autoClose: false});
			  }
			  //that.oSplitAppObj._oLaunchPad._hideBusyLoader();
		},function(error){
			var errorBody = jQuery.parseJSON(error.response.body);
			sap.m.MessageToast.show(that._oBundle.getText("INBOX_LP_MSG_ERROR_WHILE_LOADING_DETAIL_PAGE"),{
										width: "55em",
										autoClose: false
										}
									);
			//that.oSplitAppObj._oLaunchPad._hideBusyLoader();
		},true);
	}else{
		  //that.oSplitAppObj._oLaunchPad._hideBusyLoader();
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._processTaskDescriptionResponse = function(that, taskDescriptionResponse, sTaskInstanceID){
	if(taskDescriptionResponse && taskDescriptionResponse.statusCode && taskDescriptionResponse.statusCode == 200){
		 that.constants.taskDescriptionsMap[sTaskInstanceID] = taskDescriptionResponse.data.Description;
	     that._rerenderTaskDescription(taskDescriptionResponse.data.Description);
	}else{
		  if(taskDescriptionResponse){
			  var errorBodyMessageValue;
			  if(taskDescriptionResponse.response){
				  errorBodyMessageValue = jQuery.parseJSON(taskDescriptionResponse.response.body).error.message.value;
			  }
			
			  var errorMessage = that._oBundle.getText("INBOX_LP_MSG_ERROR_WHILE_FETCHING_TASK_DESC");
			  return errorMessage;
			  //TODO Log in the browser console. (Log more details about error)
		  }
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._processCustomActionResponse = function(that, customActionResponse, sTaskDefinitionID){
	if(customActionResponse && customActionResponse.statusCode && customActionResponse.statusCode == 200){
		   that.constants.taskDefinitionDecisionOptionsMap[sTaskDefinitionID] = customActionResponse.data.results;
	     that._createCustomActions(customActionResponse.data.results);
	}else{
		  if(customActionResponse){
			  var errorBodyMessageValue;
			  if(customActionResponse.response){
				  errorBodyMessageValue = jQuery.parseJSON(customActionResponse.response.body).error.message.value;
			  }
			  var errorMessage = that._oBundle.getText("INBOX_LP_MSG_ERROR_WHILE_FETCHING_CUSTOM_ACTIONS");
			  return errorMessage;
			  //TODO Log in the browser console. (Log more details about error)
		  }
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._processCustomAttributeDefinitionResponse = function(that, customAAttributeDefinitionResponse, sTaskDefinitionID){
	  if(customAAttributeDefinitionResponse && customAAttributeDefinitionResponse.statusCode && customAAttributeDefinitionResponse.statusCode == 200){
			that.constants.oTaskDefinitionCustomAttributesMap[sTaskDefinitionID] = customAAttributeDefinitionResponse.data.results;
	  }else{
		  if(customAAttributeDefinitionResponse && !customAAttributeDefinitionResponse.statusCode){
			  var errorBodyMessageValue;
			  if(customAAttributeDefinitionResponse.response){
				  errorBodyMessageValue = jQuery.parseJSON(customAAttributeDefinitionResponse.response.body).errorBody.error.message.value;
			  }
			  var errorMessage = that._oBundle.getText("INBOX_LP_MSG_ERROR_WHILE_FETCHING_CUSTOM_ATTR");
			  return errorMessage;
		  }
	  }
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._processCustomAttributeResponse = function(that, customAttributeResponse, sTaskDefinitionID, sTaskInstanceID){
	  if(customAttributeResponse && customAttributeResponse.statusCode && customAttributeResponse.statusCode == 200){
			var oIconTabBar = that.oCore.byId(that.Id + '-iconTabBar');
			if(oIconTabBar.getSelectedKey() === 'customAttr'){
				var customAttributeArray = that._transformCustomAttributeJsonToArray(customAttributeResponse.data.results);
			    that.constants.oTaskInstanceCustomAttributeValuesMap[sTaskInstanceID] = customAttributeArray;
				oIconTabBar.getItems()[0].addContent(that._renderCustomAttributes(that.constants.oTaskDefinitionCustomAttributesMap[sTaskDefinitionID], customAttributeArray));
			}
	  }else{
		  if(customAttributeResponse && !customAttributeResponse.statusCode){
			  var errorBodyMessageValue;
			  if(customAttributeResponse.response){
				  errorBodyMessageValue = jQuery.parseJSON(customAttributeResponse.response.body).errorBody.error.message.value;
			  }
			  var errorMessage = that._oBundle.getText("INBOX_LP_MSG_ERROR_WHILE_FETCHING_CUSTOM_ATTR");
			  return errorMessage;
		  }
		  //TODO Log in the browser console. (Log more details about error)
	  }
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._addReadTaskDescriptiontoBatch = function(){
	if(this.detailViewPage.getBindingContext()){
		var oContext = this.detailViewPage.getBindingContext();
		var sInstanceID = this._getPageModel().getProperty("InstanceID", oContext);
		var sSapOriginID = this._getPageModel().getProperty("SAP__Origin", oContext);
		var constants = this.constants;
		var oTaskCollectionTCMMetadata = constants.TaskCollection;
		var taskDescription = constants.taskDescriptionsMap[sInstanceID];
		if(taskDescription){
			this._rerenderTaskDescription(taskDescription);
			return false;
		}else{
			var sRequestURI = this._getRequestURLTaskDescription(oTaskCollectionTCMMetadata, sInstanceID, sSapOriginID);
			var batchOperation = this._getOModel().createBatchOperation(sRequestURI,"GET",null);
			this._getOModel().addBatchReadOperations([batchOperation]);
			return true;
		}
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._getRequestURLTaskDescription = function(oTaskCollectionTCMMetadata, sInstanceID, sSapOriginID){
	var constants = this.constants;
	var sRequestURI = constants.forwardSlash 
	+ oTaskCollectionTCMMetadata.entityName 
		+ "(" 
			+ oTaskCollectionTCMMetadata.properties.instanceID 
					+"='" 
						+ sInstanceID + "'," 
							+ constants.sapOrigin + 
									"='" + sSapOriginID + 
											"')" +
													constants.forwardSlash 
													+  oTaskCollectionTCMMetadata.navParam.taskDescription;
	return sRequestURI;
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._addReadCustomActionstoBatch = function() {
	if(this.detailViewPage.getBindingContext()){
		var oContext = this.detailViewPage.getBindingContext();
		var sInstanceID = this._getPageModel().getProperty("InstanceID", oContext);
		var sapOrigin = this._getPageModel().getProperty("SAP__Origin", oContext);
		var sTaskDefinitionID = this._getPageModel().getProperty("TaskDefinitionID", oContext);
		var constants = this.constants;
		var oCustomActionMap = constants.taskDefinitionDecisionOptionsMap;
		var oCustomActions = oCustomActionMap[sTaskDefinitionID];
		if(oCustomActions){
			 this._createCustomActions(oCustomActions);
			 return false;
		}else{
			var sPath = this.constants.decisionOptionsFunctionImport + this.constants.query + "InstanceID='"+sInstanceID+"'&SAP__Origin='"+sapOrigin+"'"; 
			var batchOperation = this._getOModel().createBatchOperation(sPath,"GET");
			this._getOModel().addBatchReadOperations([batchOperation]);
			return true;
		}
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._addReadCustomAttributeMetaDatatoBatch = function(){
	if(this.detailViewPage.getBindingContext()){
		var oContext = this.detailViewPage.getBindingContext();
		var sTaskDefinitionID = this._getPageModel().getProperty("TaskDefinitionID", oContext);
		var sSapOriginID = this._getPageModel().getProperty("SAP__Origin", oContext);
		var constants = this.constants;
		var oTaskDefinitionTCMMetadata = constants.TaskDefinitionCollection;
		var oCustomAttributeMetaDataArrayMap = constants.oTaskDefinitionCustomAttributesMap;
		var aCustomAttributeMetaDataArray = oCustomAttributeMetaDataArrayMap[sTaskDefinitionID];
		if(!aCustomAttributeMetaDataArray){
			var sRequestURI = this._getRequestURLCustomAttributeMetaData(oTaskDefinitionTCMMetadata, sTaskDefinitionID, sSapOriginID);
			var batchOperation = this._getOModel().createBatchOperation(sRequestURI,"GET");
			this._getOModel().addBatchReadOperations([batchOperation]);
			return true;
		}else{
			return false;
		}
	}
};



sap.uiext.inbox.splitapp.DetailViewPage.prototype._getRequestURLCustomAttributeMetaData = function(oTaskDefinitionTCMMetadata, sTaskDefinitionID, sSapOriginID){
	var constants = this.constants;
	var sRequestURI = constants.forwardSlash 
	+ oTaskDefinitionTCMMetadata.entityName 
		+ "(" 
			+ oTaskDefinitionTCMMetadata.properties.taskDefnID 
					+"='" 
						+ sTaskDefinitionID + "'," 
							+ constants.sapOrigin + 
									"='" + sSapOriginID + 
											"')" +
													constants.forwardSlash 
													+  oTaskDefinitionTCMMetadata.navParam.customAttrDefn;
	return sRequestURI;
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._addReadCustomAttributeDataToBatch = function(){
	if(this.detailViewPage.getBindingContext()){
		var oContext = this.detailViewPage.getBindingContext();
		var sTaskDefinitionID = this._getPageModel().getProperty("TaskDefinitionID", oContext);
		var sTaskInstanceID = this._getPageModel().getProperty("InstanceID", oContext);
		var sSapOriginID = this._getPageModel().getProperty("SAP__Origin", oContext);
		var constants = this.constants;
		var oTaskCollectionTCMMetadata = constants.TaskCollection;
	    var oCustomAttributeValuesMap = constants.oTaskInstanceCustomAttributeValuesMap;
		var oCustomAttributesValues = oCustomAttributeValuesMap[sTaskInstanceID];
		if(oCustomAttributesValues){
			var oIconTabBar = this.oCore.byId(this.Id + '-iconTabBar');
			if(oIconTabBar.getSelectedKey() === 'customAttr'){
				var oCustomAttributeMetaDataArrayMap = constants.oTaskDefinitionCustomAttributesMap;
				var aCustomAttributeMetaDataArray = oCustomAttributeMetaDataArrayMap[sTaskDefinitionID];
				oIconTabBar.getItems()[0].addContent(this._renderCustomAttributes(aCustomAttributeMetaDataArray, oCustomAttributesValues));
			}
			return false;
		}else{
			var sRequestURI = this._getRequestURLCustomAttributeData(oTaskCollectionTCMMetadata, sTaskInstanceID, sSapOriginID);
			var batchOperation = this._getOModel().createBatchOperation(sRequestURI,"GET");
			this._getOModel().addBatchReadOperations([batchOperation]);
			return true;
		}
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._getRequestURLCustomAttributeData = function(oTaskCollectionTCMMetadata, sTaskInstanceID, sSapOriginID){
	var constants = this.constants;
		var sURIPart = constants.forwardSlash 
		+ oTaskCollectionTCMMetadata.entityName 
				+ "(" 
					+ oTaskCollectionTCMMetadata.properties.instanceID
							+ "='"
									+ sTaskInstanceID + 
										"',"
											+ constants.sapOrigin 
												+ "='" 
													+ sSapOriginID 
															+ "')" 
																+ constants.forwardSlash
																	+ oTaskCollectionTCMMetadata.navParam.customAttrValues;
		return sURIPart;
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._renderCustomAttributes = function(aCustomAttributeDefinitionArray, aCustomAttributeValueArray) {
	var _oCustomAttrTab = this.oCore.byId(this.Id + '-iconTabBar');
	return this._createCustomAttributesLayout(aCustomAttributeDefinitionArray,aCustomAttributeValueArray);
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._transformCustomAttributeJsonToArray = function(aCustomAttributeData){
	// TO-DO : make this generic
	var oContext = this.detailViewPage.getBindingContext();
	var oCustomAttributeValuesMap = this.constants.oTaskInstanceCustomAttributeValuesMap;
	var sTaskInstanceID = this._getPageModel().getProperty("InstanceID", oContext);

	var oCustomAttributesValues = {};
	var oCustomAttributesValues;
	for(var i=0;i<aCustomAttributeData.length;i++){
		oCustomAttributesValues[aCustomAttributeData[i].Name] = aCustomAttributeData[i].Value;
		oCustomAttributeValuesMap[sTaskInstanceID] = oCustomAttributesValues;
	}
    return oCustomAttributesValues;
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._renderDetailsPageNonBatchProcessing = function(onUpdate){
	this._renderTaskDescription();
	this._renderCustomActions();
	this._createCustomAttributes();
	/*if(onUpdate){
		this.detailViewPage.getContent()[1].setSelectedKey("customAttr");
		this._createCustomAttributes();

	}else {	
		if (this.detailViewPage.getContent()[1].getSelectedKey() === "customAttr"){
			this._createCustomAttributes();
		}else{
			//TODO
			//this.oSplitAppObj._oLaunchPad._hideBusyLoader();
		}
	}*/
	};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._renderTaskDescription = function(){
	var that = this;
	var constants = this.constants;
	var oTaskCollectionTCMMetadata = constants.TaskCollection;
	var oContext = this.detailViewPage.getBindingContext();
	var sTaskInstanceID = this._getPageModel().getProperty("InstanceID", oContext);
	var sSapOriginID = this._getPageModel().getProperty("SAP__Origin", oContext);
	var taskDescription = constants.taskDescriptionsMap[sTaskInstanceID];
	if(taskDescription){
		this._rerenderTaskDescription(taskDescription);
	}else{
		var sURIPart = this._getRequestURLTaskDescription(oTaskCollectionTCMMetadata, sTaskInstanceID, sSapOriginID);
		var sRequestURI = this.tcmServiceURL + sURIPart;
	    var oRequestOptions = {
	        async:true,
	        requestUri : sRequestURI,
	        method : "GET",
	        headers : {
	            Accept : constants.acceptHeaderforJSON
	        }
	    };
    
	    OData.request(oRequestOptions, function(data, request) {
			 constants.taskDescriptionsMap[sTaskInstanceID] = data.Description;
		     that._rerenderTaskDescription(data.Description);
	    }, function(error) {
	    	var errorBody = jQuery.parseJSON(error.response.body);
	    	sap.m.MessageToast.show(that._oBundle.getText("INBOX_LP_MSG_ERROR_WHILE_FETCHING_TASK_DESC"),{
					width: "55em",
					autoClose: false
					}
				);
	    });
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._handleSelectComments = function(oIconTabBarCommentItem){
	//remove All content from the IconTab Bar for comments
	oIconTabBarCommentItem.removeAllContent(); 
	
	//create scroll container if not created
	var oCommentsScrollCont = this.oCore.byId(this.Id + "-commentsScrollCont");
	if(!oCommentsScrollCont){
		oCommentsScrollCont = new sap.m.ScrollContainer(this.Id + "-commentsScrollCont",{
			vertical: true,
			width: "100%",
		});
	}
	oCommentsScrollCont.removeAllContent(); //remove All content from the Scroll Container for comments
	
	
	//create Busy Indicator for Notes if not Created Yet
	var oCommentsBusyIndicator = this.oCore.byId('commentsBI');
	if(!oCommentsBusyIndicator){
		oCommentsBusyIndicator = new sap.m.BusyIndicator('commentsBI',{
										text: this._oBundle.getText("INBOX_LP_LOADING")
									});
	}
	
	oCommentsScrollCont.addContent(oCommentsBusyIndicator);
	
	//create Add Comment Container if not Created Yet
	var oAddCommentContainer = this.oCore.byId('addCommentContainer');
	if(!oAddCommentContainer){
		oAddCommentContainer = new sap.m.FlexBox("addCommentContainer",{
			width: "100%",
			items: [
				        new sap.m.TextArea('addCommentsInput',{
				        	type : sap.m.InputType.Text,
				        	placeholder : this._oBundle.getText("INBOX_LP_ADD_COMMENT"),
				        	maxLength: 500,
				        	rows : 3,
				        }).addStyleClass('inbox_split_app_addCommentInput'),
				        new sap.m.Button('addCommentsButton',{
				        	text: this._oBundle.getText("INBOX_LP_ADD_BUTTON_TEXT")
	//						        	layoutData: new sap.m.FlexItemData({growFactor: 1})
				        }).attachPress(this, this._handleCommentAdded).addStyleClass('inbox_split_app_addCommentBtn')
			        ],
			        fitContainer : true
		}).addStyleClass('inbox_split_app_addCommentContainer');
	} else {
		var oTextArea = oAddCommentContainer.getItems()[0];
		if (oTextArea) {
			oTextArea.setValue("");
		}
	}
	oCommentsScrollCont.addContent(oAddCommentContainer);
	
	//Add ScrollContainer to Comments Icon Bar 
	oIconTabBarCommentItem.addContent(oCommentsScrollCont);
	
	//Load Comments from Server
    this._getComments();
}

sap.uiext.inbox.splitapp.DetailViewPage.prototype._getComments = function(){
	if(this.detailViewPage.getBindingContext()){
		var oContext = this.detailViewPage.getBindingContext();
		var sTaskInstanceID = this._getPageModel().getProperty("InstanceID", oContext);
		var sSapOriginID = this._getPageModel().getProperty("SAP__Origin", oContext);
		var aComments = this._loadCommentsFromServer(sTaskInstanceID, sSapOriginID);
		return true;
	}
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._handleCommentAdded = function(oEvent, that){
	var sCommentText = jQuery.sap._sanitizeHTML(that.oCore.byId('addCommentsInput').getValue());
	if(that.detailViewPage.getBindingContext() && sCommentText){
		var oContext = that.detailViewPage.getBindingContext();
		var sTaskInstanceID = that._getPageModel().getProperty("InstanceID", oContext);
		var sSapOriginID = that._getPageModel().getProperty("SAP__Origin", oContext);
		var oModel = that._getOModel();
		var sRequestURI =  that.tcmServiceURL + "/AddComment?InstanceID='"+sTaskInstanceID+"'&SAP__Origin='"+sSapOriginID+"'&Text='"+encodeURIComponent(sCommentText)+"'&$format=json";
		var sSecurityToken = oModel.oHeaders["x-csrf-token"];
		if(!sSecurityToken){
		  that._getOModel().refreshSecurityToken(null, null, false);
		  sSecurityToken = oModel.oHeaders["x-csrf-token"];
		}
		var requestOptions = {
	     async:false,
	     requestUri : sRequestURI,
	     method : "POST",
	     headers : {
	         "Accept" : that.constants.acceptHeaderforJSON,
	         "x-csrf-token" : sSecurityToken
	     }
		};

		OData.request(requestOptions, function(data, request) {
			
			
			var oCommentsList = that.oCore.byId(that.Id + "--commentsList");
			that._loadCommentsFromServer(sTaskInstanceID, sSapOriginID);
			sap.m.MessageToast.show(that._oBundle.getText("INBOX_MSG_COMMENT_ADD_SUCCESS"));//TODO
			that.oCore.byId('addCommentsInput').setValue();
		}, function(error) {
		//TODO: use enums for messageType.
			sap.m.MessageToast.show(that._oBundle.getText("INBOX_MSG_COMMENT_ADD_ERROR"));//TODO
			
		});
	}
	
}

sap.uiext.inbox.splitapp.DetailViewPage.prototype._loadCommentsFromServer = function(sTaskInstanceID,sSapOriginID){
    var that = this;
    var constants = this.constants;
    var oTaskCollectionTCMMetadata = constants.TaskCollection;

	
	var sURIPart = constants.forwardSlash 
								+ oTaskCollectionTCMMetadata.entityName 
										+ "(" 
											+ oTaskCollectionTCMMetadata.properties.instanceID
													+ "='"
															+ sTaskInstanceID + 
																"',"
																	+ constants.sapOrigin 
																		+ "='" 
																			+ sSapOriginID 
																					+ "')" 
																						+ constants.forwardSlash
																							+ oTaskCollectionTCMMetadata.navParam.comments;
    
	var sRequestURI = this.tcmServiceURL + sURIPart;
	var aComments = [];
	
    var oRequestOptions = {
        async:true,
        requestUri : sRequestURI,
        method : "GET",
        headers : {
            Accept : constants.acceptHeaderforJSON
        }
    };

    OData.request(oRequestOptions, function(data, request) {
    	that._displayComments(data.results);
    }, function(error) {
    	sap.m.MessageToast.show(that._oBundle.getText("INBOX_MSG_FETCH_COMMENTS_FAILS"));//TODO
    });
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._displayComments = function(aCommentsData) {
	var that = this;
	var bAdd = aCommentsData && aCommentsData.length > 0 ; 
	var oCommentsScrollContainer = this.oCore.byId(this.Id + '-commentsScrollCont');
	var oCommentsBusyIndicator = this.oCore.byId('commentsBI');
	
	if(bAdd){
		var oCommentsList = this.oCore.byId(this.Id + "--commentsList");
		var oCommentsModel;
		if(!oCommentsList){
			var oCommentsList = new sap.m.List(this.Id+"--"+"commentsList").addStyleClass('inbox_split_app_CommentsList');
			oCommentsList.setShowSeparators(sap.m.ListSeparators.All);
			oCommentsModel = new sap.ui.model.json.JSONModel();
			oCommentsList.setModel(oCommentsModel);
		}else{
			oCommentsModel = oCommentsList.getModel();
		}
		oCommentsModel.setData(aCommentsData);
		var oCommentTemplate = new sap.m.FeedListItem({
			sender: "{CreatedByName}",
			text: "{Text}",
		});
		oCommentTemplate.bindProperty("timestamp","CreatedAt",this.utils.dateTimeFormat)
		oCommentTemplate.bindProperty("icon", "CreatedBy", function(value){
			if(this.getBindingContext()){
				return that.utils.getUserMediaResourceURL(that.tcmServiceURL, this.getBindingContext().getProperty("SAP__Origin"), value);
			}else{
				return "sap-icon://person-placeholder";
			}
		});
		oCommentsList.bindAggregation("items",{path:"/",template: oCommentTemplate});

		oCommentsScrollContainer.removeContent(oCommentsBusyIndicator);
		oCommentsScrollContainer.insertContent(oCommentsList,0);
	}else{
		oCommentsScrollContainer.removeContent(oCommentsBusyIndicator);
	}
	//oIconTabBar.getItems()[1].removeAllContent();
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype._displayCommentsIfCommentsSelectedinIconBar = function(){
	var oIconTabBar = this.oCore.byId(this.Id + '-iconTabBar');
    if(oIconTabBar.getSelectedKey() === 'comments' && oIconTabBar.getExpanded() === true){
    	this._handleSelectComments(oIconTabBar.getItems()[1]);
    }
};


sap.uiext.inbox.splitapp.DetailViewPage.prototype._addBusyIndicatorForTaskDetails = function(oCustomAttributesTab){
	var oCustomAttributesScrollCont = this.oCore.byId(this.Id + "-custAttrScrollCont");
	if(!oCustomAttributesScrollCont){
		oCustomAttributesScrollCont = new sap.m.ScrollContainer(this.Id + "-custAttrScrollCont",{
			vertical: true,
			width: "auto",
		}).addStyleClass('inbox_split_app_scrollContainer');
	}
	oCustomAttributesScrollCont.removeAllContent();
	
	var oCustomAttributesBusyIndicator = this.oCore.byId('customAttrBI');
	if(!oCustomAttributesBusyIndicator){
		oCustomAttributesBusyIndicator = new sap.m.BusyIndicator('customAttrBI',{
										text: this._oBundle.getText("INBOX_LP_LOADING")
									});
	}	
	oCustomAttributesScrollCont.addContent(oCustomAttributesBusyIndicator);
	oCustomAttributesTab.addContent(oCustomAttributesScrollCont);
};

sap.uiext.inbox.splitapp.DetailViewPage.prototype.updateTaskDataInModel = function(task){
	
	var bTaskCompleted = task.Status == "COMPLETED"?true:false;	
	var sPath = this.detailViewPage.getBindingContext().getPath();
	var aParts = sPath.split("/");
	if(bTaskCompleted){
		//Delete from model
		this.detailViewPage.getModel().oData.TaskCollection.splice(aParts[2], 1);
	}else{
		//Update Model
		this.detailViewPage.getModel().oData.TaskCollection[aParts[2]] = task;
	}
	this.detailViewPage.getModel().checkUpdate(false);
};
}; // end of sap/uiext/inbox/splitapp/DetailViewPage.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.splitapp.MasterPage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

	jQuery.sap.declare("sap.uiext.inbox.splitapp.MasterPage");
	
	//jQuery.sap.require("sap.uiext.splitapp.MasterPageController");
	
	sap.ui.base.Object.extend("sap.uiext.inbox.splitapp.MasterPage",{
			
			    constructor : function(Id) {
			        sap.ui.base.Object.apply(this);
			        this.oCore = sap.ui.getCore();
			        this.Id = Id;
			        this.utils = sap.uiext.inbox.InboxUtils;
			        this._oBundle = this.oCore.getLibraryResourceBundle("sap.uiext.inbox");
			        this.bPhoneDevice = jQuery.device.is.phone;
					this.masterPage = this._create();	
					//this.controller = new sap.uiext.splitapp.MasterPageController;
			    }
		});
	
	sap.uiext.inbox.splitapp.MasterPage.prototype.getPage = function(){
		return this.masterPage;
	};
	
	sap.uiext.inbox.splitapp.MasterPage.prototype.setShowNavButton = function(bValue){
		this.masterPage.setShowNavButton(bValue);
		return this;
	};
	
	sap.uiext.inbox.splitapp.MasterPage.prototype._setTcmServiceURL = function(sValue) {
		this.tcmServiceURL = sValue;
	};

	sap.uiext.inbox.splitapp.MasterPage.prototype._create = function() {
		var masterPage = this.oCore.byId(this.Id + "-masterPage");
		if(!masterPage){
			var that = this;
			var oSearchField = new sap.m.SearchField(that.Id + "-searchFld",{
				showRefreshButton : false,
				placeholder: that._oBundle.getText("INBOX_LP_SEARCH_LABEL"),
				tooltip: that._oBundle.getText("INBOX_LP_SEARCH_LABEL_TOOLTIP"),
				width:"100%"						
			})
			oSearchField.attachSearch(that, that.handleSearch);
			oSearchField.attachLiveChange(that, function(oEvent, that) {
		        if (oEvent.getParameter("newValue") === "") {
		            that._resetSearch();
		        }
		    });
			masterPage = new sap.m.Page(that.Id + "-masterPage",{
				title: that._oBundle.getText("INBOX_LP_TASKS_AND_COUNT",[""]),// TODO: Update Count
				showNavButton: true,
				showFooter: false, // TODO to be enabled after substitution rule screen is made responsive !this.bPhoneDevice,
				footer: new sap.m.Bar(that.Id + 'fooBar',{
							contentLeft : [ new sap.m.Button(this.Id + "-mangSubstBtn",{
												tooltip: that._oBundle.getText("INBOX_MANAGE_SUBSTITUTION_RULES_TOOLTIP"),
												icon:"sap-icon://visits"
												//enabled: that.LaunchPad._isSubstitutionEnabled  //TODO
												}).attachPress(that, that._openManageSubstitutionOverlay)
										  ]
						}),
				subHeader: new sap.m.Bar(that.Id + "-searchBar",{
					contentMiddle: [oSearchField],
					contentRight: [new sap.m.Button(that.Id + "-refreshBtn", {
						tooltip:that._oBundle.getText("INBOX_LP_REFRESH_BUTTON_TOOLTIP"), //TODO: Replace it with default Refresh.
						icon:"sap-icon://synchronize"
						}).attachPress(that, that._refreshTasks)]
					
				})
			}).attachNavButtonTap(function(oEvent){
				sap.ui.getCore().getEventBus().publish('sap.uiext.inbox', "masterPageNavButtonTapped");
					/*if(that.oSplitAppObj._oLaunchPad){
						
						that.oSplitAppObj._oLaunchPad.oApp.back()
						//TODO is this required?
						var _oIconTabBar = this.oCore.byId(that.oSplitAppObj.oInboxDetailPage.Id + "-iconTabBar"); 
						_oIconTabBar.setVisible(true);
						_oIconTabBar.setExpanded(false);
					}*/
				});
			
			
			//	var oPullToRefresh = new sap.m.PullToRefresh(parentId + "-pullToRefresh",{
			//							visible:false,
			//refresh:this.handleListSelect
			//						});
			
			//	masterPage.addContent(oPullToRefresh);
			
			var oList = new sap.m.List(that.Id + "-list",{
				growing:true,
				growingThreshold:7,//TODO: Responsive
				visible:true,
				mode: sap.m.ListMode.SingleSelectMaster,//TODO: IPhone compatibility
				threshhold:50,
				noDataText: that._oBundle.getText("INBOX_LP_NO_MATCHING_TASKS"),
			}).attachSelect(this, this.handleListSelect);
			
			
			 oList.addEventDelegate({
				        ontap : function(e) {
				        	var oSelected = oList.getSelectedItem();
				        	if (oSelected && oSelected.getDomRef().contains(e.target)) {
				        		if (jQuery.device.is.phone)
				        			oList.setSelectedItem(oSelected, false );
				             }
				          }
				 	});
			
			this.oList = oList;
			
			var aObjectAttributes = new Array();
			aObjectAttributes.push(new sap.m.ObjectAttribute({text:"{CreatedByName}"}));
			aObjectAttributes.push(new sap.m.ObjectAttribute().bindProperty("text", "CreatedOn", function(value){
				return that.utils._dateFormat(value);
			}));
			
			var oObjectListItem = new sap.m.ObjectListItem(that.Id + "-objLstItm",{
				type:"Active",
				title: "{TaskTitle}",
				icon: "sap-icon://person-placeholder",
				attributes: aObjectAttributes,
				firstStatus: new sap.m.ObjectStatus({
									icon:
										{
											path: "CompletionDeadLine",
											formatter: function (value) {
												if(that.utils._isOverDue(value)) {
													return "sap-icon://pending";
												}
											 }
										},
									state : sap.ui.core.ValueState.Error
							 }),
				secondStatus: new sap.m.ObjectStatus(that.Id + "-objStatus").bindProperty("text", {
					        	        parts: [
					        	            {path: "Status", type: new sap.ui.model.type.String()},
					        	            {path: "StatusText", type: new sap.ui.model.type.String()}
					        	            ],
					        	        formatter: function(_sStatus, _sStatusText){ 
					        	        	if(_sStatus !=null && _sStatusText){
					        	        		return _sStatusText;
					        	        	}else if(_sStatus !=null && _sStatus != ""){
					        	        		var _sTranslatedStatusText = that._oBundle.getText(sap.uiext.inbox.InboxConstants.statusMap[_sStatus]);
					        	        		return (_sTranslatedStatusText == "") ? _sStatus : _sTranslatedStatusText;
					        	        	}
					        	        	else{
					        	        		return "";//Empty String or any default text ?
					        	        	}
					        	        },
					        	        useRawValues : true
	        						})
								}).addStyleClass("inbox_split_app_wordBreak");
			
			oObjectListItem.bindProperty("icon", "CreatedBy", function(value){
				if(this.getBindingContext()){
					return that.utils.getUserMediaResourceURL(that.tcmServiceURL, this.getBindingContext().getProperty("SAP__Origin"), value);
				}else{
					return "sap-icon://person-placeholder";
				}
			});
			
			this.oListTemplate = oObjectListItem;
			//oList.setModel(this.oCore.getModel());
			// bind Aggregation
			//oList.bindAggregation("items", "/TaskCollection", oObjectListItem, undefined, aFilters);
			oList.attachUpdateFinished(function(oEvent){
					if (that.bPhoneDevice) {
						var oMasterPageList = that.oCore.byId(that.Id + "-list");
						var _iNoOfTasksInList = oMasterPageList.mBindingInfos.items.binding.iLength //TODO: Find a clean way and not use interbal variables
						that.masterPage.setTitle(that._oBundle.getText("INBOX_LP_TASKS_AND_COUNT",[_iNoOfTasksInList]));
					} else {
						var items = this.getItems();
						if(items.length > 0){
							//this.setSelectedItem(items[0], true);
							this.fireSelect({'listItem': items[0], 'selected' : true});
						}
					}
				});
			
			//this.masterPageList = oList;
			masterPage.addContent(oList);
			
		}
		
		return masterPage;
	}

	/*sap.uiext.inbox.splitapp.MasterPage.prototype._dateFormat = function(dateValue) {
		if (dateValue != undefined && typeof (dateValue) == 'string' && dateValue != "") {
			var date;
			if (dateValue.indexOf('Date') != -1) {
				date = new Date();
				date.setTime(dateValue.substring((dateValue.indexOf("(") + 1), dateValue.indexOf(")")));
			} else {
				date = new Date(dateValue.substring((dateValue.indexOf("'") + 1), dateValue.length - 1));
			}
			dateValue = date;
		}

		if (dateValue != undefined && dateValue != "") {
			var ins = sap.ui.core.format.DateFormat.getDateInstance({
				style : "medium"
			});
			return ins.format(dateValue);
		}
		return "";
	};*/
	/**
	 * Initially selects the first item (excluding for phones)
	 */
	sap.uiext.inbox.splitapp.MasterPage.prototype._selectDetail = function () {
		var list = this.oCore.byId(this.Id + "-list");
		var items = list.getItems();
		if (!jQuery.device.is.phone && items.length > 0 && !list.getSelectedItem()) {
			list.setSelectedItem(items[0], true);
			this._showDetail(items[0]);
		}
	}
	
/*	sap.uiext.inbox.splitapp.MasterPage.prototype.handleRefresh = function (evt) {
		var that = this;
			// trigger search again and hide pullToRefresh when data ready
			var list = this.oCore.byId(that.Id  + "-list");
			var binding = list.getBinding("items");
			var handler = function() {
				that.getView().byId("pullToRefresh").hide();
				binding.detachDataReceived(handler);
			};
			binding.attachDataReceived(handler);
			that._updateList();
	}
	*/
	sap.uiext.inbox.splitapp.MasterPage.prototype.handleSearch = function (evt, masterPage) {
		masterPage._updateList();
	}
	
	sap.uiext.inbox.splitapp.MasterPage.prototype._updateList = function () {
		
		var that = this;
		var filters = new Array();
		
		// add filter for search
		var searchString = that.oCore.byId(that.Id + "-searchFld").getValue();
		if (searchString && searchString.length > 0) {
			var sInProgress = "in progress";
			var bInProgress = (searchString.indexOf(' ') >= 0 && sInProgress.indexOf(searchString.toLowerCase()) != -1) ? true : false; 
			var aTokens = searchString.split(" ");
			var oFilter = [];
			
			jQuery.each(aTokens, function(i, sToken) {
				var searchStatus = bInProgress ? "IN_PROGRESS" : sToken;
				var oFilter1 = new sap.ui.model.Filter("TaskTitle", sap.ui.model.FilterOperator.Contains, sToken);
				var oFilter2 = new sap.ui.model.Filter("CreatedByName", sap.ui.model.FilterOperator.Contains, sToken);
				var oFilter3 = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.Contains, searchStatus);
				oFilter[i] = new sap.ui.model.Filter({aFilters: [ oFilter1 ,  oFilter2, oFilter3 ], bAnd: false});
			});
			
			filters.push(new sap.ui.model.Filter({aFilters: oFilter, bAnd: true}));
			if(this.aFilters){
				filters = filters.concat(that.aFilters);
			}
			
			
			// update list binding
			var list = that.oCore.byId(that.Id + "-list");
			var oSelectedItem = list.getSelectedItem();
			var binding = list.getBinding("items");
			binding.filter(filters);
			if(filters.length == 0){ //filter length == 0 means its a normal refresh and not a search.
				list.setSelectedItem(oSelectedItem, true);
			}
		}
		
	}
	
	sap.uiext.inbox.splitapp.MasterPage.prototype.handleListSelect = function (evt, that) {
		var onUpdate = evt.getParameter('onUpdate');
		//that.oSplitAppObj._oLaunchPad._showBusyLoader();
		//this._showDetail(evt.getParameter("listItem"));
		//TODO: TO BE REMOVED FROM HERE
		var oMasterPageList = that.oCore.byId(that.Id + "-list");
		var _iNoOfTasksInList = oMasterPageList.mBindingInfos.items.binding.iLength //TODO: Find a clean way and not use interbal variables
		that.masterPage.setTitle(that._oBundle.getText("INBOX_LP_TASKS_AND_COUNT",[_iNoOfTasksInList]));
		
		var items = oMasterPageList.getItems();
		if (items.length > 0 && !oMasterPageList.getSelectedItem()) {
			oMasterPageList.setSelectedItem(items[0], true);
		}
		var selectedItem = oMasterPageList.getSelectedItem();
		var context = selectedItem.getBindingContext();
		
		/*var oDetailPage = that.oSplitAppObj.oInboxDetailPage.detailViewPage;
		oDetailPage.setBindingContext(context);*/
		//oDetailPage.rerender();//AVIOD RERENDER

		//var oApp = that.oSplitAppObj.app;
		/*if(oDetailPage.getId() == oApp.getCurrentPage().getId()){
			that.oSplitAppObj.oInboxDetailPage.renderDetailsPage();
			if (that.oSplitAppObj.oInboxDetailPage.isCommentsSupported === true){
				that.oSplitAppObj.oInboxDetailPage._displayCommentsIfCommentsSelectedinIconBar();
			}
		}else{
			var oTaskExecutionUIPageObj = that.oSplitAppObj._oTaskExecutionUIPageObj;
			if(!oTaskExecutionUIPageObj){
				jQuery.sap.require("sap.uiext.inbox.splitapp.TaskExecutionUIPage");
				oTaskExecutionUIPageObj = new sap.uiext.inbox.splitapp.TaskExecutionUIPage(that.oSplitAppObj.getId() + "-exUi"); //TODO: Add Id and optimize
				that.oSplitAppObj.app.addPage(oTaskExecutionUIPageObj.oTaskExecutionUIPage);
				oTaskExecutionUIPageObj._oParentSplitAppObj = that.oSplitAppObj; 
				that.oSplitAppObj._oTaskExecutionUIPageObj = oTaskExecutionUIPageObj;
			}
			oTaskExecutionUIPageObj.oTaskExecutionUIPage.setBindingContext(context);
			oTaskExecutionUIPageObj.open();
		}*/
		that.oCore.getEventBus().publish('sap.uiext.inbox', "masterPageListSelected", {context:context , onUpdate:onUpdate});
		//UNTIL UNTIL HERE
	}
	
	sap.uiext.inbox.splitapp.MasterPage.prototype.bindService = function (aFilters) {
		this.aFilters = aFilters;
		this.oList.bindItems({path: "/TaskCollection",template: this.oListTemplate,filters:aFilters});//parameters: {expand: "Description"}
	}
	sap.uiext.inbox.splitapp.MasterPage.prototype._openManageSubstitutionOverlay = function (oEvent, that) {
         var substitutionRulesManager  = that.oCore.byId(that.Id + '--' + 'substitutionRulesManager');
         if(substitutionRulesManager === undefined){
        	 	 jQuery.sap.require("sap.uiext.inbox.SubstitutionRulesManager");
                 substitutionRulesManager = new sap.uiext.inbox.SubstitutionRulesManager(that.Id + '--' + 'substitutionRulesManager');
				 //TODO: test while substitution                 
				 //substitutionRulesManager.setParent(that.oSplitAppObj._oLaunchPad);
         }
         if(substitutionRulesManager.getModel() === undefined){
        	var oModel = that.oCore.getModel();
        	var newModel = new sap.ui.model.odata.ODataModel(that.tcmServiceURL,true);
         	//newModel.oHeaders["x-csrf-token"] = oModel.oHeaders["x-csrf-token"];
         	substitutionRulesManager.setModel(newModel);
         }
         jQuery.sap.require("sap.uiext.inbox.tcm.TCMModel");
         substitutionRulesManager.oTCMModel = new sap.uiext.inbox.tcm.TCMModel();
        // substitutionRulesManager.oConfiguration = that.oConfiguration;
        // substitutionRulesManager.isSubstitutionRuleCreationSupported=that.isSubstitutionRuleCreationSupported;
         //substitutionRulesManager.bindSubstitutionRules(that._substitutionPath);
         substitutionRulesManager.open();
	}

	sap.uiext.inbox.splitapp.MasterPage.prototype._refreshTasks = function(oEvt, that){
		that.addBusyIndicatorOnRefresh();
		that.oCoreModel = that.masterPage.getModel('inboxTCMModel');
		that.oCoreModel.read("/TaskCollection?$filter=Status ne 'COMPLETED'&$orderby=CreatedOn desc",null, null , true, function(oData,oResponse){
		that.oTaskData = oData.results; //TODO: Use Constants
		that._updateModel(that);
		},function(oError){
			sap.m.MessageToast.show(that._oBundle.getText("INBOX_LP_MSG_FAILED_TO_READ_SERVICE_WHILE_REFRESH"));
		});
	};

	sap.uiext.inbox.splitapp.MasterPage.prototype._updateModel = function(that){
		
		var oJSONModel = that.masterPage.getModel();
		var jsonData = {"TaskCollection":that.oTaskData};
		oJSONModel.setData(jsonData);//that.getModel()
		//that.oSplitAppObj._setModel(oJSONModel,that.oSplitAppObj.filters);
		that.bindService(that.aFilters);
		var oBusyIndicator = this.oCore.byId('refreshBI');
		if (oBusyIndicator && (this.masterPage.indexOfContent(oBusyIndicator) >= 0) ) {
			this.masterPage.removeContent(oBusyIndicator);
		}
		
	};
	
	/*sap.uiext.inbox.splitapp.MasterPage.prototype._isOverDue = function(value) { //TODO: Remove Duplication already exists in Inbox
		//need to be overrriddedn in app for different timezones
		if(value === undefined || value === null || value === "")
			return false;
		
		var now = new Date().getTime();
		var bOverdue;
		
		if ( typeof (value) === 'string' ) {
			 var sCreationdate = value.substring(value.indexOf("(")+1, value.indexOf(")")-1);
			
			 bOverdue = (parseInt(sCreationdate) - now) < 0 ? true : false;
		}
		else {
			 bOverdue = (value.getTime() - now) < 0 ? true : false;
		}
		return bOverdue;
	};*/
	
	sap.uiext.inbox.splitapp.MasterPage.prototype.rerenderTask = function(task){
		
		var taskCompleted = task.Status == "COMPLETED"?true:false; 
		
		var oMasterPageList = this.oCore.byId(this.Id + "-list");
		var selectedItem = oMasterPageList.getSelectedItem();
		//1 possible solution to update model and UI
		/*var node = this.masterPage.getModel().getProperty(selectedItem.getBindingContext().getPath(), selectedItem.getBindingContext());
		node.Status = task.Status;
		node.StatusText = task.StatusText;
		node.SupportsClaim = task.SupportsClaim;
		node.SupportsRelease = task.SupportsRelease;
		*/
		//2 possible solution to update model and UI
		var sPath = selectedItem.getBindingContext().getPath();
		var aParts = sPath.split("/");
		if(taskCompleted){
			//Delete from model
			this.masterPage.getModel().oData.TaskCollection.splice(aParts[2], 1);
		}else{
			//Update Model
			this.masterPage.getModel().oData.TaskCollection[aParts[2]] = task;
		}
		this.masterPage.getModel().checkUpdate(false);
	};
	
	sap.uiext.inbox.splitapp.MasterPage.prototype.resetSearchCriteria = function() {
		var oSearchField = this.oCore.byId(this.Id + "-searchFld");
		if (oSearchField) {
			oSearchField.setValue("");
			this._resetSearch();
		}
	}
	
	sap.uiext.inbox.splitapp.MasterPage.prototype.addBusyIndicatorOnRefresh = function() {
		var oBusyIndicatorOnRefresh = this.oCore.byId('refreshBI');
		if(!oBusyIndicatorOnRefresh){
			oBusyIndicatorOnRefresh = new sap.m.BusyIndicator('refreshBI',{
											text: this._oBundle.getText("INBOX_LP_LOADING")
										});
		}
		this.masterPage.insertContent(oBusyIndicatorOnRefresh, 0);
	}
	
	
	sap.uiext.inbox.splitapp.MasterPage.prototype._resetSearch = function() {
		
		var list = this.oCore.byId(this.Id + "-list");
		if (list) {
			var oSelectedItem = list.getSelectedItem();
			var binding = list.getBinding("items");
		}
		if (binding) {
			binding.filter(this.aFilters);
		}
		if(oSelectedItem && this.aFilters.length == 0){ //filter length == 0 means its a normal refresh and not a search.
			list.setSelectedItem(oSelectedItem, true);
		}
			
	};
	

}; // end of sap/uiext/inbox/splitapp/MasterPage.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.splitapp.MasterPageController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

	jQuery.sap.declare("sap.uiext.inbox.splitapp.MasterPageController");
	sap.ui.base.Object.extend("sap.uiext.inbox.splitapp.MasterPageController",{
			
			    constructor : function() {
			        sap.ui.base.Object.apply(this);
			    }
		});

	/**
	 * Initially selects the first item (excluding for phones)
	 */
	sap.uiext.inbox.splitapp.MasterPageController.prototype._selectDetail = function () {
		var list = sap.ui.getCore().byId(this.Id + "-list");
		var items = list.getItems();
		if (!jQuery.device.is.phone && items.length > 0 && !list.getSelectedItem()) {
			list.setSelectedItem(items[0], true);
			this._showDetail(items[0]);
		}
	}
	
	sap.uiext.inbox.splitapp.MasterPageController.prototype.handleSearch = function (evt, masterPage) {
		masterPage._updateList();
	}
	
	sap.uiext.inbox.splitapp.MasterPageController.prototype._updateList = function () {
		
		var that = this;
		
		var filters = new Array();
		
		// add filter for search
		var searchString = sap.ui.getCore().byId(that.Id + "-searchFld").getValue();
		if (searchString && searchString.length > 0) {
			filters.push(new sap.ui.model.Filter("TaskTitle", sap.ui.model.FilterOperator.Contains, searchString));
		}
		
		filters = filters.concat(that.oSplitAppObj.filters);
		
		// update list binding
		var list = sap.ui.getCore().byId(that.Id + "-list");
		var oSelectedItem = list.getSelectedItem();
		var binding = list.getBinding("items");
		binding.filter(filters);
		if(filters.length == 0){ //filter length == 0 means its a normal refresh and not a search.
			list.setSelectedItem(oSelectedItem, true);
		}
	}
	
	sap.uiext.inbox.splitapp.MasterPageController.prototype.handleListSelect = function (evt, that) {
		//that.oSplitAppObj._oLaunchPad._showBusyLoader();
		//this._showDetail(evt.getParameter("listItem"));
		//TODO: TO BE REMOVED FROM HERE
		var oMasterPageList = sap.ui.getCore().byId(that.Id + "-list");
		var _iNoOfTasksInList = oMasterPageList.mBindingInfos.items.binding.iLength //TODO: Find a clean way and not use interbal variables
		that.masterPage.setTitle(that._oBundle.getText("INBOX_LP_TASKS_AND_COUNT",[_iNoOfTasksInList]));
		
		var items = oMasterPageList.getItems();
		if (items.length > 0 && !oMasterPageList.getSelectedItem()) {
			oMasterPageList.setSelectedItem(items[0], true);
		}
		var selectedItem = oMasterPageList.getSelectedItem();
		var context = selectedItem.getBindingContext();
		
		var oDetailPage = that.oSplitAppObj.oInboxDetailPage.detailViewPage;
		oDetailPage.setBindingContext(context);
		//oDetailPage.rerender();//AVIOD RERENDER

		//var oApp = that.oSplitAppObj.app;
		var oApp = that.oSplitAppObj.getAggregation('splitAppl');
		if(oDetailPage.getId() == oApp.getCurrentPage().getId()){
			that.oSplitAppObj.oInboxDetailPage.renderDetailsPage();
		}else{
			var oTaskExecutionUIPageObj = that.oSplitAppObj._oTaskExecutionUIPageObj;
			if(!oTaskExecutionUIPageObj){
				jQuery.sap.require("sap.uiext.inbox.splitapp.TaskExecutionUIPage");
				oTaskExecutionUIPageObj = new sap.uiext.inbox.splitapp.TaskExecutionUIPage(that.oSplitAppObj.getId() + "-exUi"); //TODO: Add Id and optimize
				that.oSplitAppObj.app.addPage(oTaskExecutionUIPageObj.oTaskExecutionUIPage);
				oTaskExecutionUIPageObj._oParentSplitAppObj = that.oSplitAppObj; 
				that.oSplitAppObj._oTaskExecutionUIPageObj = oTaskExecutionUIPageObj;
			}
			oTaskExecutionUIPageObj.oTaskExecutionUIPage.setBindingContext(context);
			oTaskExecutionUIPageObj.open();
		}
		//UNTIL UNTIL HERE
	}
	
	sap.uiext.inbox.splitapp.MasterPageController.prototype._openManageSubstitutionOverlay = function (oEvent, that) {
         var substitutionRulesManager  = sap.ui.getCore().byId(that.Id + '--' + 'substitutionRulesManager');
         if(substitutionRulesManager === undefined){
        	 	 jQuery.sap.require("sap.uiext.inbox.SubstitutionRulesManager");
                 substitutionRulesManager = new sap.uiext.inbox.SubstitutionRulesManager(that.Id + '--' + 'substitutionRulesManager');
                 substitutionRulesManager.setParent(that.oSplitAppObj._oLaunchPad);
         }
         if(substitutionRulesManager.getModel() === undefined){
        	var oModel = sap.ui.getCore().getModel();
        	var newModel = new sap.ui.model.odata.ODataModel(oModel.sServiceUrl,true);
         	newModel.oHeaders["x-csrf-token"] = oModel.oHeaders["x-csrf-token"];
         	substitutionRulesManager.setModel(newModel);
         }
         jQuery.sap.require("sap.uiext.inbox.tcm.TCMModel");
         substitutionRulesManager.oTCMModel = new sap.uiext.inbox.tcm.TCMModel();
        // substitutionRulesManager.oConfiguration = that.oConfiguration;
        // substitutionRulesManager.isSubstitutionRuleCreationSupported=that.isSubstitutionRuleCreationSupported;
         //substitutionRulesManager.bindSubstitutionRules(that._substitutionPath);
         substitutionRulesManager.open();
	}

	sap.uiext.inbox.splitapp.MasterPageController.prototype._refreshTasks = function(oEvt, that){
		//that.oSplitAppObj._oLaunchPad._showBusyLoader();
		if(!that.oTaskData){
			that.oCoreModel = sap.ui.getCore().getModel();
			that.oCoreModel.read("/TaskCollection?$filter=Status ne 'COMPLETED'&$orderby=CreatedOn desc",null, null , true, function(oData,oResponse){
				 that.oTaskData = oData.results; //TODO: Use Constants
				 that._updateModel(that);
			},function(oError){
				sap.m.MessageToast.show(that._oBundle.getText("INBOX_LP_MSG_FAILED_TO_READ_SERVICE_WHILE_REFRESH"));
		    });
		}
	};

	sap.uiext.inbox.splitapp.MasterPageController.prototype._updateModel = function(that){
		var oJSONModel = that.masterPage.getModel();
		var jsonData = {"TaskCollection":that.oTaskData};
		oJSONModel.setData(jsonData);//that.getModel()
		that.oSplitAppObj._setModel(oJSONModel,that.oSplitAppObj.filters);
		//that.oSplitAppObj._oLaunchPad._hideBusyLoader();
	};
	
	sap.uiext.inbox.splitapp.MasterPageController.prototype._rerenderTask = function(task){
		
		var taskCompleted = task.Status == "COMPLETED"?true:false; 
		
		var oMasterPageList = sap.ui.getCore().byId(this.Id + "-list");
		var selectedItem = oMasterPageList.getSelectedItem();
		//1 possible solution to update model and UI
		/*var node = this.masterPage.getModel().getProperty(selectedItem.getBindingContext().getPath(), selectedItem.getBindingContext());
		node.Status = task.Status;
		node.StatusText = task.StatusText;
		node.SupportsClaim = task.SupportsClaim;
		node.SupportsRelease = task.SupportsRelease;
		*/
		//2 possible solution to update model and UI
		var sPath = selectedItem.getBindingContext().getPath()
		var aParts = sPath.split("/");
		if(taskCompleted){
			//Delete from model
			this.masterPage.getModel().oData.TaskCollection.splice(aParts[2], 1);
		}else{
			//Update Model
			this.masterPage.getModel().oData.TaskCollection[aParts[2]] = task;
		}
		this.masterPage.getModel().checkUpdate(false);
	};
	
	

}; // end of sap/uiext/inbox/splitapp/MasterPageController.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.splitapp.TaskExecutionUIPage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.splitapp.TaskExecutionUIPage");
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


/*global OData */// declare unusual global vars for JSLint/SAPUI5 validation
sap.ui.base.Object.extend("sap.uiext.inbox.splitapp.TaskExecutionUIPage",{
	
    constructor : function(Id) {
        sap.ui.base.Object.apply(this);
        this.Id = Id;
        this._oCore = sap.ui.getCore();
        this._oBundle = this._oCore.getLibraryResourceBundle("sap.uiext.inbox");
		this.oTaskExecutionUIPage = this._createTaskExecutionUIPage();
		//this.oModel = sap.ui.getCore().getModel();
    }

});

sap.uiext.inbox.splitapp.TaskExecutionUIPage.prototype._createTaskExecutionUIPage = function() {
	var that = this;
	var oTaskExecutionUIPage = that._oCore.byId(this.Id + "-taskExecUIPage");
	if(!oTaskExecutionUIPage){
		oTaskExecutionUIPage = new sap.m.Page(this.Id + "-taskExecUIPage",	{
									showNavButton: true,
									navButtonPress: function(){ 
										//_oParentSplitAppObj is set while its creation in Detail View Page
									    // when pressed, the back button should navigate back up to page 1
										//that._oParentSplitAppObj.app.backToTopDetail(); 
										that.handleNavButtonPress();
									},
		});
	}
	return oTaskExecutionUIPage;
};

sap.uiext.inbox.splitapp.TaskExecutionUIPage.prototype.getPage = function() {
	return this.oTaskExecutionUIPage;
};

sap.uiext.inbox.splitapp.TaskExecutionUIPage.prototype.handleNavButtonPress = function() {
	sap.ui.getCore().getEventBus().publish('sap.uiext.inbox','taskExecUIPageNavButtonPressed');
};

sap.uiext.inbox.splitapp.TaskExecutionUIPage.prototype.open = function() {
	var that = this;
	var oContext = that.oTaskExecutionUIPage.getBindingContext();

	if(!that.oModel){
		that.oModel = that.oTaskExecutionUIPage.getModel("inboxTCMModel");
	}
	var detailPageJSONModel = that.oTaskExecutionUIPage.getModel();
	var sTaskTitle = detailPageJSONModel.getProperty("TaskTitle", oContext);
	var sInstanceID = detailPageJSONModel.getProperty("InstanceID", oContext);
	var sSAPOrigin = detailPageJSONModel.getProperty("SAP__Origin", oContext);
	var sExecURL = that._getTaskExecutionURLCallBack(sInstanceID,sSAPOrigin);
	
	if(jQuery.device.is.android_tablet || jQuery.device.is.ipad || jQuery.device.is.desktop) {
		
		var oTaskExecWindow = window.open(sExecURL); //TODO: Can be used for open in new tab
		oTaskExecWindow.document.title = sTaskTitle;
		oTaskExecWindow.focus();
		
	} else if (jQuery.device.is.phone){
    	
    	var oHTMLContent = sap.ui.getCore().byId('tsk' + '--' + "execURLFrame");
        if(!oHTMLContent){
        	oHTMLContent = new sap.ui.core.HTML('tsk' + '--' + "execURLFrame");
        }
        var sContent = "<iframe name='myframe' src='" + sExecURL + "' scrolling='auto' id = '"+ 'tsk' + '--' + "execURLFrame"
        + "' style='position: absolute;height: 100%;width: 100%; border: none;'></iframe>" ;
           
        oHTMLContent.setContent(sContent);
        that.oTaskExecutionUIPage.setTitle(sTaskTitle);
        that.oTaskExecutionUIPage.addContent(oHTMLContent);
    }
};

sap.uiext.inbox.splitapp.TaskExecutionUIPage.prototype._getTaskExecutionURLCallBack= function(id,sapOriginId) {
    // var IDURIPart = "getTaskExecutionUrl"+"?ID='"+ id +"'&$format=json";
    var IDURIPart = '/TaskCollection' + "(InstanceID='" + id + "',SAP__Origin='" + sapOriginId + "')/UIExecutionLink?$format=json";
    var requestURI = this.oTaskExecutionUIPage.getModel("inboxTCMModel").sServiceUrl + IDURIPart;
    var url = "";
    var that = this;
    var requestOptions = {
        async:false,
        requestUri : requestURI,
        method : "GET",
        headers : {
            Accept : "application/json"
        } 
    };
    OData.request(requestOptions, function(data, request) {
        url = data.GUI_Link;
        //that._oParentSplitAppObj._oLaunchPad._hideBusyLoader();
        // that._oParentSplitAppObj.oInboxMasterPage._rerenderTask(data); //TODO: Refresh Tasks in Master Page after completing task 
    }, function(error) {
        if(error.response.statusCode == 205){
            //var eventParams = {statusCode : error.response.statusCode, statusText : error.response.statusText};
            //oModel.fireRequestFailed(eventParams);
        }else{
        //TODO: use enums for messageType.
        	//sap.m.MessageToast.show("Failed while performing action on Task");
        }
        //that._oParentSplitAppObj._oLaunchPad._hideBusyLoader();
        sap.m.MessageToast.show(that._oBundle.getText("INBOX_MSG_ACTION_FAILED", [url,""]));//TODO  send Task Title
    });
    return url;
};
}; // end of sap/uiext/inbox/splitapp/TaskExecutionUIPage.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.tcm.fI.TCMFunctionImportMetaData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.tcm.fI.TCMFunctionImportMetaData");
	

sap.uiext.inbox.tcm.fI.TCMFunctionImportMetaData = {
			/**
			 * Function Import for SearchUsers
			 * 
			 * name: Name of the Function Import
			 * params: The Parameters of the function Import defined in the format : 
			 * eg: {name:"SAP__Origin", type: "Edm.String", Mode: "In", nullable: true} where nullable defines whether the parmater is optional while executing the Function Import.
			 * httpMethod: GET/POST , the method to be used while executing the Function Import. 
			 * 
			 */
			SEARCHUSERS: {name:"SearchUsers", 
							params: [
							         	{name:"SAP__Origin", type: "Edm.String", Mode: "In"},
							         	{name:"SearchPattern", type: "Edm.String", Mode: "In", nullable: true},
							         	{name:"MaxResults", type: "Edm.Int16", Mode: "In", nullable: true}
							         ],
							httpMethod: "GET"
						  }
};
}; // end of sap/uiext/inbox/tcm/fI/TCMFunctionImportMetaData.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxLaunchPad') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.InboxLaunchPad.
jQuery.sap.declare("sap.uiext.inbox.InboxLaunchPad");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new InboxLaunchPad.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string (default: 'Inbox Launch Pad Title')</li>
 * <li>{@link #getLogoSrc logoSrc} : string</li>
 * <li>{@link #getShowLogoutButton showLogoutButton} : boolean (default: true)</li>
 * <li>{@link #getShowUserName showUserName} : boolean (default: true)</li>
 * <li>{@link #getUserName userName} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uiext.inbox.InboxLaunchPad#event:tileSelected tileSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.InboxLaunchPad#event:logout logout} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * InboxLaunchPad Documentation to be updated later
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @experimental Since version 1.7.0. 
 * API is not yet finished and might change completely
 * @name sap.uiext.inbox.InboxLaunchPad
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.InboxLaunchPad", { metadata : {

	deprecated : true,
	library : "sap.uiext.inbox",
	properties : {

		/**
		 * The title text appearing in Inbox LaunchPad header bar.
		 */
		"title" : {type : "string", group : "", defaultValue : 'Inbox Launch Pad Title'},

		/**
		 * Path (src) to the logo icon to be displayed in the Inbox LaunchPad header.
		 */
		"logoSrc" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * Property to indicate whether the Logoff button in the header should be displayed or not. Default value is true.
		 */
		"showLogoutButton" : {type : "boolean", group : "Misc", defaultValue : true},

		/**
		 * Property to indicate whether loggod on User's Name in the header should be displayed or not. Default value is true.
		 */
		"showUserName" : {type : "boolean", group : "Misc", defaultValue : true},

		/**
		 * User name to be shown in the header.
		 */
		"userName" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {

		/**
		 * Hidden aggregation to contain the Inbox LaunchPad header.
		 */
		"launchPadHeader" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 

		/**
		 * Hidden aggregation to contain the Inbox LaunchPad tile container.
		 */
		"launchPadTileContainer" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	events : {

		/**
		 * Fires an event when a tile is selected in Inbox LaunchPad.
		 */
		"tileSelected" : {}, 

		/**
		 * Fired when the user clicks the "Log-off" button.
		 */
		"logout" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.InboxLaunchPad with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.InboxLaunchPad.extend
 * @function
 */

sap.uiext.inbox.InboxLaunchPad.M_EVENTS = {'tileSelected':'tileSelected','logout':'logout'};


/**
 * Getter for property <code>title</code>.
 * The title text appearing in Inbox LaunchPad header bar.
 *
 * Default value is <code>Inbox Launch Pad Title</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is <code>Inbox Launch Pad Title</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#setTitle
 * @function
 */


/**
 * Getter for property <code>logoSrc</code>.
 * Path (src) to the logo icon to be displayed in the Inbox LaunchPad header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>logoSrc</code>
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#getLogoSrc
 * @function
 */

/**
 * Setter for property <code>logoSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLogoSrc  new value for property <code>logoSrc</code>
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#setLogoSrc
 * @function
 */


/**
 * Getter for property <code>showLogoutButton</code>.
 * Property to indicate whether the Logoff button in the header should be displayed or not. Default value is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLogoutButton</code>
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#getShowLogoutButton
 * @function
 */

/**
 * Setter for property <code>showLogoutButton</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLogoutButton  new value for property <code>showLogoutButton</code>
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#setShowLogoutButton
 * @function
 */


/**
 * Getter for property <code>showUserName</code>.
 * Property to indicate whether loggod on User's Name in the header should be displayed or not. Default value is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showUserName</code>
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#getShowUserName
 * @function
 */

/**
 * Setter for property <code>showUserName</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowUserName  new value for property <code>showUserName</code>
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#setShowUserName
 * @function
 */


/**
 * Getter for property <code>userName</code>.
 * User name to be shown in the header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>userName</code>
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#getUserName
 * @function
 */

/**
 * Setter for property <code>userName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUserName  new value for property <code>userName</code>
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#setUserName
 * @function
 */


/**
 * Fires an event when a tile is selected in Inbox LaunchPad.
 *
 * @name sap.uiext.inbox.InboxLaunchPad#tileSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileSelected' event of this <code>sap.uiext.inbox.InboxLaunchPad</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.InboxLaunchPad</code>.<br/> itself. 
 *  
 * Fires an event when a tile is selected in Inbox LaunchPad.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.InboxLaunchPad</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#attachTileSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileSelected' event of this <code>sap.uiext.inbox.InboxLaunchPad</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#detachTileSelected
 * @function
 */

/**
 * Fire event tileSelected to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.InboxLaunchPad#fireTileSelected
 * @function
 */


/**
 * Fired when the user clicks the "Log-off" button.
 *
 * @name sap.uiext.inbox.InboxLaunchPad#logout
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'logout' event of this <code>sap.uiext.inbox.InboxLaunchPad</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.InboxLaunchPad</code>.<br/> itself. 
 *  
 * Fired when the user clicks the "Log-off" button.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.InboxLaunchPad</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#attachLogout
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'logout' event of this <code>sap.uiext.inbox.InboxLaunchPad</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxLaunchPad#detachLogout
 * @function
 */

/**
 * Fire event logout to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.InboxLaunchPad} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.InboxLaunchPad#fireLogout
 * @function
 */

// Start of sap/uiext/inbox/InboxLaunchPad.js
/*!
 * @copyright@
 * @deprecated Since version 1.38.0
 */

/*global OData */// declare unusual global vars for JSLint/SAPUI5 validation
///**
//* This file defines behavior for the control,
//*/
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained



sap.uiext.inbox.InboxLaunchPad.prototype.init = function() {
	var that = this;
	this.oCore = sap.ui.getCore();
	this._oBundle = this.oCore.getLibraryResourceBundle("sap.uiext.inbox");
	this.setAggregation("launchPadHeader", new sap.m.Bar("mbar", {
		contentMiddle : [ new sap.m.Label({
			text : this.getTitle()
		}) ],
		contentRight : [ new sap.m.Button({
			icon : sap.ui.core.IconPool.getIconURI("person-placeholder"),
			tooltip : this.getUserName(),
			type : sap.m.ButtonType.Transparent 
		}),new sap.m.Button({
			tooltip : that._oBundle.getText("INBOX_LP_LOGOFF_TOOLTIP"),
			icon : sap.ui.core.IconPool.getIconURI("log"),
			type : sap.m.ButtonType.Default
		}).attachPress(function() {
			that.fireLogout();
		})],
		contentLeft : [ new sap.m.Image({
			src : this.getLogoSrc()
		}).addStyleClass("logo") ]})
	);
	var tileTemplate = new sap.uiext.inbox.InboxTile({
		icon : "sap-icon://task",
		title : "{name}",
		number : "{numberOfTasks}"
	}).data("defID", "{defID}").attachPress(function(oEvent) {
		that.fireTileSelected({
			"defID" : this.data("defID")
		});
	});

	this.setAggregation("launchPadTileContainer", new sap.m.TileContainer({
		editable : false,
		allowAdd : false,
		tiles : {
			path : "/Tasks",
			template : tileTemplate
		}
	}));
};

sap.uiext.inbox.InboxLaunchPad.prototype.setTitle = function(sTitle) {
	this.setProperty("title", sTitle, true);
	this.getAggregation("launchPadHeader").destroyContentMiddle()
			.addContentMiddle(new sap.m.Label({
				text : this.getTitle()
			}));
	return this;
};

sap.uiext.inbox.InboxLaunchPad.prototype.setUserName = function(sUserName) {
	if (sUserName !== undefined) {
		this.getAggregation("launchPadHeader").getContentRight()[0].setTooltip(sUserName);
	}
	return this;
};

sap.uiext.inbox.InboxLaunchPad.prototype.setShowUserName = function(bShow) {
	if (bShow === true) {
		this.getAggregation("launchPadHeader").getContentRight()[0]
				.setVisible(true);
	} else {
		this.getAggregation("launchPadHeader").getContentRight()[0]
				.setVisible(false);
	}
	return this;
};

sap.uiext.inbox.InboxLaunchPad.prototype.setShowLogoutButton = function(bShow) {
	if (bShow === true) {
		this.getAggregation("launchPadHeader").getContentRight()[1]
				.setVisible(true);
	} else {
		this.getAggregation("launchPadHeader").getContentRight()[1]
				.setVisible(false);
	}
	return this;
};

sap.uiext.inbox.InboxLaunchPad.prototype.setLogoSrc = function(sLogoSrc) {
	this.setProperty("logoSrc", sLogoSrc, true);
	this.getAggregation("launchPadHeader").destroyContentLeft().addContentLeft(
			new sap.m.Image({
				src : this.getLogoSrc()
			}).addStyleClass("logo"));
	return this;
};

}; // end of sap/uiext/inbox/InboxLaunchPad.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxPrimaryFilters') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// Provides a filter for list bindings
	jQuery.sap.declare("sap.uiext.inbox.InboxPrimaryFilters");
	
	
	
		

	
	/**
	 * Constructor for InboxPrimaryFilters
	 *
	 * @class
	 * Primary Filters for Inbox
	 *
	 *  
	 * @public
	 * @name sap.uiext.inbox.InboxPrimaryFilters
	 */
	
	sap.ui.base.Object.extend("sap.uiext.inbox.InboxPrimaryFilters",{
			
			    constructor : function() {
			
			        sap.ui.base.Object.apply(this);
			
			        this.oFilter = undefined;
			  	    this.inboxUtils = sap.uiext.inbox.InboxUtils;
			  	    this.oPrimaryFilterEnum = sap.uiext.inbox.InboxPrimaryFilterEnum;
			    }
			
		});
	
	/**
	 * set Primary filter
	 * 
	 * @name sap.uiext.inbox.InboxPrimaryFilters.prototype.setFilter
	 * @function
	 * 
	 * @param {sap.uiext.inbox.InboxPrimaryFilterEnum} oFilter
	 * 
	 * @public
	 * 
	 */
	sap.uiext.inbox.InboxPrimaryFilters.prototype.setFilter = function(oFilter){
			if(oFilter && oFilter.hasOwnProperty('key') && oFilter.hasOwnProperty('value')){
				this.oFilter = oFilter;
			}
	};
	
	/**
	 * get Primary filter
	 * 
	 *  @type sap.uiext.inbox.InboxPrimaryFilters
	 *   
	 */
	sap.uiext.inbox.InboxPrimaryFilters.prototype.getFilter = function(){
		return this.oFilter;
	};
}; // end of sap/uiext/inbox/InboxPrimaryFilters.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxSecondaryFilterPathEnum') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
	jQuery.sap.declare("sap.uiext.inbox.InboxSecondaryFilterPathEnum");
	
	
	
	/**
	 * 	@class
	 * 	Enumeration for Secondary Filter Paths
	 *    
	 * 	@static
	 * 	@public
	 */
	sap.uiext.inbox.InboxSecondaryFilterPathEnum = {
			/**
			 * Path for Status Secondary Filter 
			 * @public
			 */
			STATUS: {
						key:"Status", 
						allowedKeyValues : ["INBOX_FILTER_STATUS_READY", "INBOX_FILTER_STATUS_RESERVED", "INBOX_FILTER_STATUS_IN_PROGRESS"]
					},
			/**
			 * Path for Priority Secondary Filter
			 * @public
			 */
			PRIORITY:{
						key: "Priority",
						allowedKeyValues : ["INBOX_FILTER_PRIORITY_LOW", "INBOX_FILTER_PRIORITY_MEDIUM", "INBOX_FILTER_PRIORITY_HIGH","INBOX_FILTER_PRIORITY_VERY_HIGH"]
					},			
			/**
			 * Path for DueDate Secondary Filter
			 * @public
			 */
			DUEDATE: {
						key: "DueDate",
						allowedKeyValues : ["INBOX_FILTER_DUE_DATETIME_TODAY", "INBOX_FILTER_DUE_DATETIME_MONTH", "INBOX_FILTER_DUE_DATETIME_WEEK", "INBOX_FILTER_DUE_DATETIME_15DAYS", "INBOX_FILTER_NO_DUE_DATETIME"]
					},
			/**
			 * Path for StartDate Secondary Filter
			 * @public
			 */
			STARTDATE: {
						key: "StartDate",
						allowedKeyValues : ["INBOX_FILTER_DATETIME_TODAY", "INBOX_FILTER_DATETIME_MONTH", "INBOX_FILTER_DATETIME_WEEK","INBOX_FILTER_DATETIME_15DAYS"]
					},
			/**
			 * Path for TaskType Secondary Filter
			 * @public
			 */
			TASKTYPE: {
						key: "TaskType",
						allowedKeyValues : []
				}
	};
}; // end of sap/uiext/inbox/InboxSecondaryFilterPathEnum.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxSecondaryFilters') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// Provides a filter for list bindings
	jQuery.sap.declare("sap.uiext.inbox.InboxSecondaryFilters");
	
	
	
		
		
	
	/**
	 * Constructor for InboxSecondaryFilters
	 *
	 * @class
	 * Secondary Filters for Inbox
	 * 
	 * 
	 * @public
	 * @name sap.uiext.inbox.InboxSecondaryFilters
	 */
	
	sap.ui.base.Object.extend("sap.uiext.inbox.InboxSecondaryFilters",{
			
			    constructor : function() {
			
			        sap.ui.base.Object.apply(this);
			        this.inboxUtils = sap.uiext.inbox.InboxUtils;
			        this.mFiltersToApplyMap = {};
			        this.mFilterObjects;
			        this.mSelectUIKeysMap = {};
			  	    this.filter = undefined;
			  	    this.aFilterObjects = undefined;
			  	    this.oPathEnum = sap.uiext.inbox.InboxSecondaryFilterPathEnum;
			  	    this.oValuesEnum = sap.uiext.inbox.InboxSecondaryFilterValuesEnum;
			    }
			
		});
	
	
	/**
	* Set Secondary Filters
	*
	* @name sap.uiext.inbox.InboxSecondaryFilters.prototype.setStandardFilters
	* @function
	* @param {Array} 
	*        aFilterObjects
	*         Array of secondary Filter Objects
	* eg. : {sPath : sap.uiext.inbox.InboxSecondaryFilterPathEnum.Priority, values : [sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.LOW, sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.HIGH]}
	* sPath : {sap.uiext.inbox.InboxSecondaryFilterPathEnum}
	* values : {Array} Array of SecondaryFilterValuesEnums  of {sap.uiext.inbox.InboxSecondaryFilterValuesEnum}
	* @public
	*/
	sap.uiext.inbox.InboxSecondaryFilters.prototype.setStandardFilters = function(aFilterObjects){
		if(aFilterObjects instanceof sap.uiext.inbox.TaskInitialFilters || aFilterObjects instanceof Array){
			this.aFilterObjects = aFilterObjects;
			this._parseFilterObjects(aFilterObjects);
		}
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype.getStandardFilters = function(aFilterObjects){
		return this.aFilterObjects;
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._parseFilterObjects = function(aFilterObjects){
		if(aFilterObjects instanceof sap.uiext.inbox.TaskInitialFilters){
			this.filter = aFilterObjects; 
		}else{
			var oFilterObject;
			for(var i = 0; i < aFilterObjects.length; i++){
				oFilterObject = aFilterObjects[i];
				this._createFilters(oFilterObject);
			}
		}
	};
	
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._createFilters = function(oFilterObject){
		
		var sFilterPath = oFilterObject.sPath, sFilterPathKey = sFilterPath.key, aFilterValues = oFilterObject.values;
		
		if(sFilterPath && aFilterValues){
			var dateTimeFilterKeys = [this.oPathEnum.DUEDATE.key, this.oPathEnum.STARTDATE.key];
			aFilterValues = (jQuery.inArray(sFilterPathKey,dateTimeFilterKeys) === -1) ? aFilterValues : [aFilterValues[0]];
			
			
			var aFilterValuesLength = aFilterValues.length, i=0, aFilterAttributeUIKeys = [], aCoreFilterObjects = [];
			//TODO: If else , lot of repetitive code, needs to be refactored
			if(sFilterPath.key === "TaskType"){
				for(; i < aFilterValuesLength; i++){
					var oFilterValue = aFilterValues[i];
					if(oFilterValue){
						var oFilter = new sap.ui.model.Filter("TaskDefinitionID", sap.ui.model.FilterOperator.EQ, decodeURIComponent(aFilterValues[i]));
						aCoreFilterObjects.push(oFilter);
					
						aFilterAttributeUIKeys.push(encodeURIComponent(aFilterValues[i]));
					
						this.mFiltersToApplyMap[aFilterValues[i]] = oFilter;
					}
				}	
			}else{
				for(; i < aFilterValuesLength; i++){
					var oAllowedFilterValues = sFilterPath.allowedKeyValues;
					var oFilterValue = aFilterValues[i];
					if(oFilterValue && jQuery.inArray(oFilterValue.uiKey,oAllowedFilterValues) !== -1){
						var oFilterKey = oFilterValue.key; 
						var oFilter = this["_get"+sFilterPathKey+"Filter"](oFilterKey);
						aCoreFilterObjects.push(oFilter);
						
						aFilterAttributeUIKeys.push(oFilterValue.uiKey);
						
						this.mFiltersToApplyMap[oFilterValue.filterKey] = oFilter;
					}
				}
			}
			if(!this.mFilterObjects){
				this.mFilterObjects = {};
			}
			this.mSelectUIKeysMap[sFilterPathKey] = aFilterAttributeUIKeys;
			this.mFilterObjects[sFilterPathKey] = aCoreFilterObjects;
		}
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._getStatusFilter = function(sFilterKey){
		return this.inboxUtils._getStatusFilters(sFilterKey);
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._getPriorityFilter = function(sFilterKey){
		return this.inboxUtils._getPriorityFilters(sFilterKey);
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._getDueDateFilter = function(sFilterKey){
		return this.inboxUtils._getDueDateFilters(sFilterKey);
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._getStartDateFilter = function(sFilterKey){
		return this.inboxUtils._getDateTimeFilters(sFilterKey);
	};

	sap.uiext.inbox.InboxSecondaryFilters.prototype.getFilterObjects = function(){
		return {filterOperatorMap: this.mFilterObjects, filtersAppliedMap : this.mFiltersToApplyMap };
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype.getFilterUIKeys = function(){
		return this.mSelectUIKeysMap;
	};
	
	
}; // end of sap/uiext/inbox/InboxSecondaryFilters.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxSplitApp') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.InboxSplitApp.
jQuery.sap.declare("sap.uiext.inbox.InboxSplitApp");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new InboxSplitApp.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowMasterPageNavBtn showMasterPageNavBtn} : boolean</li>
 * <li>{@link #getTcmServiceURL tcmServiceURL} : string</li>
 * <li>{@link #getFilters filters} : object[]</li>
 * <li>{@link #getTcmConfiguration tcmConfiguration} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSplitAppl splitAppl} : sap.m.SplitApp</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uiext.inbox.InboxSplitApp#event:navButtonPressed navButtonPressed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Inbox Split App
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @experimental Since version 1.7.0. 
 * API is not yet finished and might change completely
 * @name sap.uiext.inbox.InboxSplitApp
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.InboxSplitApp", { metadata : {

	deprecated : true,
	publicMethods : [
		// methods
		"bindTasks", "resetSearchCriteria"
	],
	library : "sap.uiext.inbox",
	properties : {

		/**
		 * Show/Hide the Navigation Button for the Master Page
		 */
		"showMasterPageNavBtn" : {type : "boolean", group : "Appearance", defaultValue : null},

		/**
		 * TCM service URL
		 */
		"tcmServiceURL" : {type : "string", group : "", defaultValue : null},

		/**
		 * Filters to be applied on the data shown in the MasterPage
		 */
		"filters" : {type : "object[]", group : "Misc", defaultValue : null},

		/**
		 * TCM Configuration object for control initialization.
		 */
		"tcmConfiguration" : {type : "object", group : "Misc", defaultValue : null}
	},
	aggregations : {

		/**
		 * This is the splitApp that is created inside the control
		 */
		"splitAppl" : {type : "sap.m.SplitApp", multiple : false}
	},
	events : {

		/**
		 * Navigation Button of the Master Page is pressed, if visible.
		 */
		"navButtonPressed" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.InboxSplitApp with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.InboxSplitApp.extend
 * @function
 */

sap.uiext.inbox.InboxSplitApp.M_EVENTS = {'navButtonPressed':'navButtonPressed'};


/**
 * Getter for property <code>showMasterPageNavBtn</code>.
 * Show/Hide the Navigation Button for the Master Page
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>showMasterPageNavBtn</code>
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#getShowMasterPageNavBtn
 * @function
 */

/**
 * Setter for property <code>showMasterPageNavBtn</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bShowMasterPageNavBtn  new value for property <code>showMasterPageNavBtn</code>
 * @return {sap.uiext.inbox.InboxSplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#setShowMasterPageNavBtn
 * @function
 */


/**
 * Getter for property <code>tcmServiceURL</code>.
 * TCM service URL
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>tcmServiceURL</code>
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#getTcmServiceURL
 * @function
 */

/**
 * Setter for property <code>tcmServiceURL</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTcmServiceURL  new value for property <code>tcmServiceURL</code>
 * @return {sap.uiext.inbox.InboxSplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#setTcmServiceURL
 * @function
 */


/**
 * Getter for property <code>filters</code>.
 * Filters to be applied on the data shown in the MasterPage
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object[]} the value of property <code>filters</code>
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#getFilters
 * @function
 */

/**
 * Setter for property <code>filters</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object[]} aFilters  new value for property <code>filters</code>
 * @return {sap.uiext.inbox.InboxSplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#setFilters
 * @function
 */


/**
 * Getter for property <code>tcmConfiguration</code>.
 * TCM Configuration object for control initialization.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>tcmConfiguration</code>
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#getTcmConfiguration
 * @function
 */

/**
 * Setter for property <code>tcmConfiguration</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oTcmConfiguration  new value for property <code>tcmConfiguration</code>
 * @return {sap.uiext.inbox.InboxSplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#setTcmConfiguration
 * @function
 */


/**
 * Getter for aggregation <code>splitAppl</code>.<br/>
 * This is the splitApp that is created inside the control
 * 
 * @return {sap.m.SplitApp}
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#getSplitAppl
 * @function
 */


/**
 * Setter for the aggregated <code>splitAppl</code>.
 * @param {sap.m.SplitApp} oSplitAppl
 * @return {sap.uiext.inbox.InboxSplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#setSplitAppl
 * @function
 */
	

/**
 * Destroys the splitAppl in the aggregation 
 * named <code>splitAppl</code>.
 * @return {sap.uiext.inbox.InboxSplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#destroySplitAppl
 * @function
 */


/**
 * Navigation Button of the Master Page is pressed, if visible.
 *
 * @name sap.uiext.inbox.InboxSplitApp#navButtonPressed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navButtonPressed' event of this <code>sap.uiext.inbox.InboxSplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.InboxSplitApp</code>.<br/> itself. 
 *  
 * Navigation Button of the Master Page is pressed, if visible.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.InboxSplitApp</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.InboxSplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#attachNavButtonPressed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'navButtonPressed' event of this <code>sap.uiext.inbox.InboxSplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.InboxSplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.InboxSplitApp#detachNavButtonPressed
 * @function
 */

/**
 * Fire event navButtonPressed to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.InboxSplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.InboxSplitApp#fireNavButtonPressed
 * @function
 */


/**
 * Call this method to display data in the InboxSplitApp
 *
 * @name sap.uiext.inbox.InboxSplitApp#bindTasks
 * @function
 * @param {object[]} aAFilters
 * @type sap.uiext.inbox.InboxSplitApp
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Call this method to reset the search criteria.
 *
 * @name sap.uiext.inbox.InboxSplitApp#resetSearchCriteria
 * @function
 * @type sap.uiext.inbox.InboxSplitApp
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/uiext/inbox/InboxSplitApp.js
/*!
 * @copyright@
 * @deprecated Since version 1.38.0
 */
 
 
 /*global OData */// declare unusual global vars for JSLint/SAPUI5 validation
///**
//* This file defines behavior for the control,
//*/
sap.uiext.inbox.InboxSplitApp.prototype.init = function() {
	this.oCore = sap.ui.getCore();
	
	this.bPhoneDevice = jQuery.device.is.phone;

	this.setAggregation("splitAppl", new sap.m.SplitApp({mode: this.bPhoneDevice ? sap.m.SplitAppMode.HideMode : sap.m.SplitAppMode.StretchCompressMode}));
	this.oSplitApp = this.getAggregation("splitAppl");
	
    this.oInboxMasterPage = new sap.uiext.inbox.splitapp.MasterPage(this.getId() + "-mp");
	this.oSplitApp.addMasterPage(this.oInboxMasterPage.getPage());
	
	this.oInboxDetailPage = new sap.uiext.inbox.splitapp.DetailViewPage(this.getId() + "-dp");
	this.oSplitApp.addDetailPage(this.oInboxDetailPage.getPage());
	
	var fnHandleListSelect = jQuery.proxy(this._handleListSelect, this);
	this.oCore.getEventBus().subscribe('sap.uiext.inbox', "masterPageListSelected", fnHandleListSelect);
	
	var fnNavButtonTapHandler = jQuery.proxy(this._handleNavButtonTapped, this);
	this.oCore.getEventBus().subscribe('sap.uiext.inbox', "masterPageNavButtonTapped", fnNavButtonTapHandler);
	
	var fnNavButtonPressDetailPageHandler = jQuery.proxy(this._handleNavButtonPressDetailPage, this);
	this.oCore.getEventBus().subscribe('sap.uiext.inbox', "detailPageNavButtonTapped", fnNavButtonPressDetailPageHandler);
	
	var fnTaskTitleHandler = jQuery.proxy(this._handleOpenTaskExecutionUI, this);
	this.oCore.getEventBus().subscribe('sap.uiext.inbox', "detailPageTaskTitleSelected", fnTaskTitleHandler);
	
	var fnHandleTaskActionCompleted = jQuery.proxy(this._handleTaskActionCompleted, this);
	this.oCore.getEventBus().subscribe('sap.uiext.inbox', "taskActionCompleted",fnHandleTaskActionCompleted);
};

sap.uiext.inbox.InboxSplitApp.prototype.setTcmServiceURL = function(sValue){
    this.setProperty("tcmServiceURL", sValue, true);
    
    var oTCMModel = new sap.ui.model.odata.ODataModel(sValue,true);
	oTCMModel.setCountSupported(false);
	this.setModel(oTCMModel,"inboxTCMModel");
	
    this.oInboxDetailPage._setTcmServiceURL(sValue);
    this.oInboxMasterPage._setTcmServiceURL(sValue);
    return this;
};


sap.uiext.inbox.InboxSplitApp.prototype.setTcmConfiguration = function(oTCMConfiguration){
	this.setProperty("tcmConfiguration", oTCMConfiguration, true);
	var oTcmConfiguration = this.getProperty("tcmConfiguration");
	
	this.oInboxDetailPage._setTcmConfiguration(oTcmConfiguration);
	return this;
};

sap.uiext.inbox.InboxSplitApp.prototype.setShowMasterPageNavBtn = function(bValue){
    this.setProperty("showMasterPageNavBtn", bValue, true);
    this.oInboxMasterPage.setShowNavButton(bValue);
    return this;
};

sap.uiext.inbox.InboxSplitApp.prototype._handleNavButtonTapped = function(sChannel, sEvent, oParams){
    this.fireNavButtonPressed();
};

sap.uiext.inbox.InboxSplitApp.prototype._handleNavButtonPressDetailPage = function (sChannel, sEvent) {
	this.oSplitApp.toMaster(this.oInboxMasterPage.getPage().getId());
}

sap.uiext.inbox.InboxSplitApp.prototype.bindTasks = function(aFilters) {
	this.oInboxMasterPage.bindService(aFilters);
	return this;
};

sap.uiext.inbox.InboxSplitApp.prototype.resetSearchCriteria = function() {
	if (this.oInboxMasterPage) {
		this.oInboxMasterPage.resetSearchCriteria();
	}
	return this;
};

sap.uiext.inbox.InboxSplitApp.prototype._handleOpenTaskExecutionUI = function( sChannel, sEvent, oTaskSelection) {
    if(!this.oTaskExecutionUIPageObj){
    	this._createTaskExecutionUIPage();
    }
    this.oTaskExecutionUIPageObj.getPage().setBindingContext(oTaskSelection.context);
    this.oTaskExecutionUIPageObj.open();
    if (jQuery.device.is.phone){
    	this.oSplitApp.to(this.oTaskExecutionUIPageObj.getPage().getId());
    }
};

sap.uiext.inbox.InboxSplitApp.prototype._createTaskExecutionUIPage = function() {
	jQuery.sap.require("sap.uiext.inbox.splitapp.TaskExecutionUIPage");
	
	this.oTaskExecutionUIPageObj = new sap.uiext.inbox.splitapp.TaskExecutionUIPage(this.getId() + "-exUi");  
	
	this.oSplitApp.addPage(this.oTaskExecutionUIPageObj.getPage());
	
	var fnCloseTaskExecUI = jQuery.proxy(this._handleTaskExecUIPageNavButtonPressed, this);
	this.oCore.getEventBus().subscribe('sap.uiext.inbox', "taskExecUIPageNavButtonPressed", fnCloseTaskExecUI);

};

sap.uiext.inbox.InboxSplitApp.prototype._handleTaskExecUIPageNavButtonPressed = function( sChannel, sEvent, oParams) {
	this.oSplitApp.backToTopDetail(); 
	this.oInboxMasterPage._refreshTasks(null, this.oInboxMasterPage);
	this.oInboxDetailPage.renderDetailsPage();
};

sap.uiext.inbox.InboxSplitApp.prototype._handleListSelect = function( sChannel, sEvent, oListSelected) {
	this.oInboxDetailPage.getPage().setBindingContext(oListSelected.context);
	if (this.bPhoneDevice) {
		this.oSplitApp.toDetail(this.oInboxDetailPage.getPage().getId());
	}
	if(this.oInboxDetailPage.getPage().getId() == this.oSplitApp.getCurrentPage().getId()){
		this.oInboxDetailPage.renderDetailsPage(oListSelected.onUpdate);
		/*if (this.oInboxDetailPage.isCommentsSupported === true){

			this.oInboxDetailPage._displayCommentsIfCommentsSelectedinIconBar();

		}*/
	}else{
		this._handleOpenTaskExecutionUI(null, null, oListSelected);
	}
};

sap.uiext.inbox.InboxSplitApp.prototype._handleTaskActionCompleted = function( sChannel, sEvent, oTaskData) {
	if (!this.bPhoneDevice) {
		this.oInboxMasterPage.rerenderTask(oTaskData.taskData);
	}else{
		this.oInboxDetailPage.updateTaskDataInModel(oTaskData.taskData);
		if(oTaskData.taskData.Status != "COMPLETED") {
			this.oInboxDetailPage.renderDetailsPage();
		}else {
			this.oSplitApp.toMaster(this.oInboxMasterPage.getPage().getId());
		}
	}	
};


}; // end of sap/uiext/inbox/InboxSplitApp.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.SubstitutionRulesManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.SubstitutionRulesManager.
jQuery.sap.declare("sap.uiext.inbox.SubstitutionRulesManager");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new SubstitutionRulesManager.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The SubstitutionRulesManager
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @experimental Since version 1.7.0. 
 * API is not yet finished and might change completely
 * @name sap.uiext.inbox.SubstitutionRulesManager
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.SubstitutionRulesManager", { metadata : {

	deprecated : true,
	publicMethods : [
		// methods
		"bindSubstitutionRules"
	],
	library : "sap.uiext.inbox"
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.SubstitutionRulesManager with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.SubstitutionRulesManager.extend
 * @function
 */


/**
 * Binds the Substitution Rules to the given path.
 *
 * @name sap.uiext.inbox.SubstitutionRulesManager#bindSubstitutionRules
 * @function
 * @param {string} sPath
 *         The path
 * @type sap.uiext.inbox.SubstitutionRulesManager
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/uiext/inbox/SubstitutionRulesManager.js
/*!
 * @copyright@
 * @deprecated Since version 1.38.0
 */






jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

/*global OData */// declare unusual global vars for JSLint/SAPUI5 validation
/**
 * This file defines behavior for the control,
 */
sap.uiext.inbox.SubstitutionRulesManager.prototype.init = function(){
//	this.setParent(oInbox);
	var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
	this._imgResourcePath = sap.ui.resource('sap.uiext.inbox', 'themes/' + sCurrentTheme + '/img/');
	this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	this.sUrl = "";
	this.sPath = "/SubstitutionRuleCollection"	//TODO: sPath should not be hard coded.
	this.inboxUtils = sap.uiext.inbox.InboxUtils;
	this.substitutionRulesManagerUtils = sap.uiext.inbox.SubstitutionRulesManagerUtils;
	this.inboxConstants = sap.uiext.inbox.InboxConstants;
	this.substitutionConstants = sap.uiext.inbox.SubstitutionRulesManagerConstants;
	this.substitutionRuleCollection = this.substitutionConstants.SubstitutionRuleCollection;
	this.substitutesRuleCollection = this.substitutionConstants.SubstitutesRuleCollection;
	this.oTcmMetadata= new sap.uiext.inbox.TCMMetadata();
	this.constants = sap.uiext.inbox.InboxConstants;
	this.bUseBatch = false;
	this.oPendingSearchRequestInSubstitution = undefined;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.exit = function() {
	this.vLayout.destroy();
	this.vLayout = null;

	function remove(id) {
		  var oItem = sap.ui.getCore().byId(id);
		  oItem && oItem.destroy();
	}
	this._oBundle = undefined;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.getSubstitutionRulesData = function(oModel) {
	if (this.bUseBatch) {
		// fetching SubstitutionRulesCollection if batch is supported
		this._fetchSubstitutionRuleCollectionData();
	} else {
		/*
		 * fetching enabled and disabled SubstitutionRulesCollection separately
		 * if querying navigation property is only supported with filters applied.
		 */
		this.data.substitutionRulesCollection = [];
		this._fetchEnabledSubstitutionRuleCollection(oModel);
		this._fetchDisabledSubstitutionRuleCollection(oModel);
	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._getSubstitutesRulesData = function(oModel) {
	if (this.bUseBatch) {
		// fetching SubstitutesRulesCollection if batch is supported
		this._fetchSubstitutesRuleCollectionData();
	} else {
		/*
		 * fetching enabled and disabled SubstitutesRulesCollection separately
		 * if querying navigation property is only supported with filters applied.
		 */
		this.data.substitutesRulesCollection = [];
		this._fetchEnabledSubstitutesRuleCollection(oModel);
		this._fetchDisabledSubstitutesRuleCollection(oModel);
	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._handleAuthenticationResponse = function(oData,oResponse) {
	if(oResponse.statusCode === 200 && oData === undefined){
		window.location.reload(true);
	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._fetchSubstitutionRuleCollectionData = function() {

	var aPaths = new Array();
	aPaths[0] = "/SubstitutionRuleCollection";
	if(this.oTcmMetadata._isEntitySet(this.constants.SystemInfoCollection.name, this.constants.SystemInfoCollection.entityType)){
		aPaths[1] = "/" + this.constants.SystemInfoCollection.name;
	}

    this.oDataManager.fireBatchRequest({
    	aPaths : aPaths,
    	sMethod : "GET",
    	sBatchGroupId : "fetchInitialSubstitutionData",
    	numberOfRequests : aPaths.length,
    	fnSuccess : jQuery.proxy(this.processSubstitutionData, this),
    	fnError : jQuery.proxy(this.showSubstitutionErrorMessage, this)
    });

};

sap.uiext.inbox.SubstitutionRulesManager.prototype._fetchSubstitutesRuleCollectionData = function() {

	var that = this;
	that.oDataManager.readData("/SubstitutesRuleCollection", {
		success : function(oData,oResponse) {
			that.oSubstitutesRuleCollectionModel.setData({SubstitutesRuleCollection:oData.results});
		},
		error : function(error) {
			that.showSubstitutionErrorMessage();
	    }
	});

};

sap.uiext.inbox.SubstitutionRulesManager.prototype.processSubstitutionData = function(data, response) {
	var batchResponses = data.__batchResponses;
	var bSuccess = true;

	if(this.oTcmMetadata._isEntitySet(this.constants.SystemInfoCollection.name, this.constants.SystemInfoCollection.entityType)){
		var oSystemInfoResponse = batchResponses[1];
		if (oSystemInfoResponse && oSystemInfoResponse.statusCode && oSystemInfoResponse.statusCode == 200) {
			this.oSystemInfoData = oSystemInfoResponse.data.results;
		} else {
			bSuccess = false;
		}
	}

	var oSubstitutionDataResponse = batchResponses[0];
	if (oSubstitutionDataResponse && oSubstitutionDataResponse.statusCode && oSubstitutionDataResponse.statusCode == 200) {
		this._getSubstitutionRuleCollectionModel().setData({SubstitutionRuleCollection:oSubstitutionDataResponse.data.results});
	} else {
		bSuccess = false;
	}

	if (!bSuccess) {
		this.showSubstitutionErrorMessage();
	}
}

sap.uiext.inbox.SubstitutionRulesManager.prototype._fetchEnabledSubstitutionRuleCollection = function(oModel) {
	var that = this;

	oModel.read("/SubstitutionRuleCollection?$filter=IsEnabled%20eq%20true", null, null, true, function(oData,oResponse) {
		that._handleAuthenticationResponse(oData,oResponse);
    	that.data.substitutionRulesCollection = that.data.substitutionRulesCollection.concat(oData.results);
    	that._getSubstitutionRuleCollectionModel().setData({SubstitutionRuleCollection:that.data.substitutionRulesCollection});
    }, function(error) {
	   	that.showSubstitutionErrorMessage();
	});
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._fetchDisabledSubstitutionRuleCollection = function(oModel) {
	var that = this;

	oModel.read("/SubstitutionRuleCollection?$filter=IsEnabled%20eq%20false", null, null, true, function(oData,oResponse) {
		that._handleAuthenticationResponse(oData,oResponse);
		that.data.substitutionRulesCollection = that.data.substitutionRulesCollection.concat(oData.results);
		that._getSubstitutionRuleCollectionModel().setData({SubstitutionRuleCollection:that.data.substitutionRulesCollection});
	}, function(error) {
		that.showSubstitutionErrorMessage();
    });
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._fetchEnabledSubstitutesRuleCollection = function(oModel) {
	var that = this;

	oModel.read("/SubstitutesRuleCollection?$filter=IsEnabled%20eq%20true", null, null, true, function(oData,oResponse) {
		that._handleAuthenticationResponse(oData,oResponse);
		that.data.substitutesRulesCollection = that.data.substitutesRulesCollection.concat(oData.results);
		that.oSubstitutesRuleCollectionModel.setData({SubstitutesRuleCollection:that.data.substitutesRulesCollection});
	}, function(error) {
		that.showSubstitutionErrorMessage();
    });
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._fetchDisabledSubstitutesRuleCollection = function(oModel) {
	var that = this;

	oModel.read("/SubstitutesRuleCollection?$filter=IsEnabled%20eq%20false", null, null, true, function(oData,oResponse) {
		that._handleAuthenticationResponse(oData,oResponse);
		that.data.substitutesRulesCollection = that.data.substitutesRulesCollection.concat(oData.results);
		that.oSubstitutesRuleCollectionModel.setData({SubstitutesRuleCollection:that.data.substitutesRulesCollection});
	}, function(error) {
		that.showSubstitutionErrorMessage();
    });
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.showSubstitutionErrorMessage = function() {
	this.showMessage("error", this._oBundle.getText("INBOX_MSG_FETCH_SUBSTITUTION_FAILED"));
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.open = function() {

	// setting TCM service metadata
	var oModel = this.getModel();
	if(oModel instanceof sap.ui.model.odata.ODataModel){
    	var oServiceMetadata = oModel.getServiceMetadata();
    	if(oModel.sServiceUrl && oServiceMetadata){
    		this.oTcmMetadata.setServiceMetadata(oServiceMetadata);
    	}
    }

	this.overlayContainer = this.populateOverlayContainer();
	this.overlayContainer.open();
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.populateOverlayContainer = function() {
	var that = this;
	var dynamicId = this.getId() + '--';
	// Creating the Overlay Container once a user selects Manage Substitution.
	var oSRMOverlayContainer = sap.ui.getCore().byId(dynamicId + 'substitutionOverlayContainer');
	if (oSRMOverlayContainer === undefined) {
		oSRMOverlayContainer = new sap.ui.ux3.OverlayContainer(dynamicId + "substitutionOverlayContainer");
		//oSRMOverlayContainer.setParent(this);
		//oSRMOverlayContainer.setModel(that.getModel());
		oSRMOverlayContainer.setOpenButtonVisible(false);

		oSRMOverlayContainer.attachClose(function(oEvent) {
			that.closeNotificationBar1();

			// bSubstituteDataRefreshed is a boolean variable which indicates whether SubstituteRules Data is refreshed or not
			if (that.bSubstituteDataRefreshed) {
				that.bSubstituteDataRefreshed = false;
			}

        });
		// The complete Overlay Container will have a main Vertical Layout as content
		var overlayVLayout = sap.ui.getCore().byId(dynamicId + 'substitutionVLayout');
		if (overlayVLayout === undefined) {
			overlayVLayout = new sap.ui.commons.layout.VerticalLayout(dynamicId + "substitutionVLayout");
		}
		overlayVLayout.setWidth("95%");
		overlayVLayout.addStyleClass("verticalLayoutStyle");

		// First Row is an empty Label for spacing, //TODO: Need to check if padding can be use, so that we avoid creation
		// of controls which are heavy weights.
		var emptyLabel0 = sap.ui.getCore().byId(dynamicId + 'substDummyLabel0')
		if (emptyLabel0 === undefined) {
			emptyLabel0 = new sap.ui.commons.Label(this.getId() + '--' + "substDummyLabel0", {
				text : ""
			});
		}

		// Third Row is for the Creation of 'New' link for Create Substitution Rule.
		var newSubstitutionLink = sap.ui.getCore().byId(dynamicId + 'newSubstitutionLink');
		if (newSubstitutionLink === undefined) {
			newSubstitutionLink = new sap.ui.commons.Link(dynamicId + 'newSubstitutionLink', {
				text : this._oBundle.getText("SUBSTITUTION_RULE_CREATE_NEW_BUTTON"),
				tooltip : this._oBundle.getText("SUBSTITUTION_RULE_CREATE_TOOLTIP")
			});
		}
		newSubstitutionLink.attachPress(that, that.openCreateSubstRulePopup);
		newSubstitutionLink.addStyleClass("newSubstitutionLink");
		// Second Row for Creating Navigation Bar with item "My Substitutes" and "I am Substituting".
		var oNavigationBar = sap.ui.getCore().byId(dynamicId + 'subsNavBar');
		if (oNavigationBar === undefined) {
			oNavigationBar = new sap.ui.ux3.NavigationBar(dynamicId + "subsNavBar", {
				items : [new sap.ui.ux3.NavigationItem(dynamicId + "mySubstitutes", {
					key : dynamicId + "mySubstitutes",
					text : this._oBundle.getText("SUBSTITUTION_MY_SUBSTITUTES_TAB_TITLE"),
					tooltip : this._oBundle.getText("SUBSTITUTION_MY_SUBSTITUTES_TAB_TITLE")
				}), new sap.ui.ux3.NavigationItem(dynamicId + "iamSubstituting", {
					key : dynamicId + "iamSubstituting",
					text : this._oBundle.getText("SUBSTITUTION_I_AM_SUBSTITUTING_TAB_TITLE"),
					tooltip : this._oBundle.getText("SUBSTITUTION_I_AM_SUBSTITUTING_TAB_TITLE")
				})]
			});
		}
		oNavigationBar.setSelectedItem(dynamicId + "mySubstitutes");
		oNavigationBar.addStyleClass("navigationBarMargin");
		oNavigationBar.addStyleClass("sapUiExtInboxSubstitutionNavigationBar");

		// Fourth is an empty Label for spacing, //TODO: Need to check if padding can be use, so that we avoid creation of
		// controls which are heavy weights.
		var emptyLabel = sap.ui.getCore().byId(dynamicId + 'substDummyLabel')
		if (emptyLabel === undefined) {
			emptyLabel = new sap.ui.commons.Label(this.getId() + '--' + "substDummyLabel", {
				text : ""
			});
		}

		// Inserting Empty Row in the zeroth index. FIXME: Use Padding instead. TODO: Research on this.
		// FIXME: VERY IMPORTANT, get Rid of counters instead add indexes in a constants file.
		var verticalLayoutContentIndex = 0;
		overlayVLayout.insertContent(emptyLabel0, verticalLayoutContentIndex);
		if (sap.ui.getCore().byId(dynamicId + 'notificationBar1') === undefined) {
		overlayVLayout.insertContent(this.populateNotificationBar(), ++verticalLayoutContentIndex);
		}
		// Inserting Navigation Bar in the second index.
		overlayVLayout.insertContent(oNavigationBar, ++verticalLayoutContentIndex);
		// Inserting 'New' link in the third index.
		overlayVLayout.insertContent(newSubstitutionLink, ++verticalLayoutContentIndex);
		// Inserting Empty Label in the fourth index.
		overlayVLayout.insertContent(emptyLabel, ++verticalLayoutContentIndex);

		var activeAndinactiveRulesVLayout = sap.ui.getCore().byId(dynamicId + 'activeAndinactiveRulesVLayout');
		if (activeAndinactiveRulesVLayout === undefined) {
			activeAndinactiveRulesVLayout = new sap.ui.commons.layout.VerticalLayout(dynamicId
					+ "activeAndinactiveRulesVLayout");
			activeAndinactiveRulesVLayout.setWidth("100%");
			// TODO: Add dynamic ID's VERY IMPORTANT.
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : that._oBundle.getText("SUBSTITUTION_ACTIVE_SUBSTITUTION_RULE"),
				design : sap.ui.commons.LabelDesign.Bold
			}).addStyleClass("activeLabelFontSize"), 0);// TODO:Externalize
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 1);
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 2);// Dummy will be replaced by the active rules content.
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 3);
			/*activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 4);
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 5);*/
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : that._oBundle.getText("SUBSTITUTION_INACTIVE_SUBSTITUTION_RULE"),
				design : sap.ui.commons.LabelDesign.Bold
			}).addStyleClass("activeLabelFontSize"), 4);// TODO:Externalize
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 5);
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 6);// Dummy will be replaced by the inactive rules content.

		}
		var mySubstitutesVerticalLayoutContentIndex = ++verticalLayoutContentIndex;
		overlayVLayout.insertContent(that.getOverlayContent(dynamicId + "mySubstitutes", activeAndinactiveRulesVLayout),
				mySubstitutesVerticalLayoutContentIndex);
		oSRMOverlayContainer.addContent(overlayVLayout);

		oNavigationBar.attachSelect(function(oEvent) {
			var itemKey = oEvent.getParameter("item").getKey();
			// remove all content
			overlayVLayout.removeContent(mySubstitutesVerticalLayoutContentIndex);
			overlayVLayout.insertContent(that.getOverlayContent(itemKey, activeAndinactiveRulesVLayout),
					mySubstitutesVerticalLayoutContentIndex);
			//oSRMOverlayContainer.rerender();
		});
	} else {
		var oNavigationBar = sap.ui.getCore().byId(dynamicId + 'subsNavBar');
		oNavigationBar.setSelectedItem(dynamicId + "mySubstitutes");
		var activeAndinactiveRulesVLayout = sap.ui.getCore().byId(dynamicId + 'activeAndinactiveRulesVLayout');
		var overlayVLayout = sap.ui.getCore().byId(dynamicId + 'substitutionVLayout');
		overlayVLayout.insertContent(that.getOverlayContent(dynamicId + "mySubstitutes", activeAndinactiveRulesVLayout),
				mySubstitutesVerticalLayoutContentIndex);
		oSRMOverlayContainer.addContent(overlayVLayout);
	}
	return oSRMOverlayContainer;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.getOverlayContent = function(itemKey, activeAndinactiveRulesVLayout) {
	var dynamicId = this.getId() + '--';
	var that = this;
	var subsContent = {};
	var oSRMOverlayContainer = sap.ui.getCore().byId(dynamicId + 'substitutionOverlayContainer');
	var newSubstitutionLink = sap.ui.getCore().byId(dynamicId + 'newSubstitutionLink');
	var overlayVLayout = sap.ui.getCore().byId(dynamicId + 'substitutionVLayout');

	if (subsContent[itemKey])
		return subsContent[itemKey];
	if (itemKey === dynamicId + "mySubstitutes") {
		// Enabling 'New' link for creation of new substitution rule.
		newSubstitutionLink.setVisible(that.isSubstitutionRuleCreationSupported);
		//newSubstitutionLink.setVisible(true);
		activeAndinactiveRulesVLayout.removeContent(2);
		// your code for content creation goes here
		activeAndinactiveRulesVLayout.insertContent(that.createSubtRuleRowReapterContent(itemKey, true), 2);
		activeAndinactiveRulesVLayout.removeContent(6);
		activeAndinactiveRulesVLayout.insertContent(that.createSubtRuleRowReapterContent(itemKey, false), 8);

		subsContent[itemKey] = activeAndinactiveRulesVLayout
	} else if (itemKey === dynamicId + "iamSubstituting") {
		// Disabling 'New' link for creation of new substitution rule.
		newSubstitutionLink.setVisible(false);
		// your code for content creation goes here
		activeAndinactiveRulesVLayout.removeContent(2);
		activeAndinactiveRulesVLayout.insertContent(that.createSubtRuleRowReapterContent(itemKey, true), 2);
		activeAndinactiveRulesVLayout.removeContent(6);
		activeAndinactiveRulesVLayout.insertContent(that.createSubtRuleRowReapterContent(itemKey, false), 8);

		subsContent[itemKey] = activeAndinactiveRulesVLayout;
	}
	return subsContent[itemKey];
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.openCreateSubstRulePopup = function(oEvent, oSubtRuleManager) {

	var that = this;
	var dynamicId = oSubtRuleManager.getId() + '--';
	var newSubstitutionLink = sap.ui.getCore().byId(dynamicId + 'newSubstitutionLink');
	var createSubsRulePopup = sap.ui.getCore().byId(dynamicId + 'createSubsRulePopup');
	if (createSubsRulePopup === undefined) {
		createSubsRulePopup = new sap.ui.ux3.ToolPopup(dynamicId + 'createSubsRulePopup', {
			modal : true
		});
		var popupMainMatrix = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'popupMainMatrix', {
			layoutFixed : false,
			width : '300px',
			columns : 2,
			widths : ["25%", "75%"]
		});
		// popupMainMatrix.setWidths('100px', '200px');

		var popupMainMatrixCell1 = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'popupMainMatrixCell1', {
			colSpan : 2
		});

		var popupMainMatrixCellMsgBar = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'popupMainMatrixCellMsgBar',
				{
					colSpan : 2
				});

		popupMainMatrixCell1.addContent(new sap.ui.commons.TextView(dynamicId + 'popupCreateSubstRuleTxt', {
			text : oSubtRuleManager._oBundle.getText("CREATE_SUBSTITUTION_RULE"), /* 'Create Substitution Rule', */
			design : sap.ui.commons.TextViewDesign.H3
		}));
		popupMainMatrix.createRow(popupMainMatrixCell1);
		popupMainMatrix.createRow(popupMainMatrixCellMsgBar);

		oSubtRuleManager.populateNotificationBar(oSubtRuleManager);

		// End Msg Bar

		var popupMainMatrixCell2 = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'popupMainMatrixCell2', {
			colSpan : 2
		});
		popupMainMatrixCell2.addContent(new sap.ui.commons.HorizontalDivider(dynamicId + 'popHorzDivdr1'));
		popupMainMatrix.createRow(popupMainMatrixCell2);

		var popupSubstLbl = new sap.ui.commons.Label(dynamicId + 'popupSubstLbl', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_RULE_SUBSTITUTE_LABEL")
		});

		var popupValueHelp = new sap.ui.commons.ValueHelpField(dynamicId + 'popupValueHelp', {
			width : '100%',
		});

		popupValueHelp.addDelegate({
	        onAfterRendering:function() {
	        	popupValueHelp.$("input").prop("maxLength", 0);
	        	popupValueHelp.$("input").prop("readonly", "readonly");
	        }
	    });
		popupValueHelp.attachValueHelpRequest(oSubtRuleManager, oSubtRuleManager.openUsersDialog);
		popupValueHelp.setRequired(true);
		popupValueHelp.setTooltip(oSubtRuleManager._oBundle.getText("SUBSTITUTION_RULE_SUBSTITUTE_TOOLTIP"));

		popupSubstLbl.setLabelFor(popupValueHelp);
		popupMainMatrix.createRow(popupSubstLbl, popupValueHelp);

		var popupAutoFwdtLbl = new sap.ui.commons.Label(dynamicId + 'popupAutoFwdtLbl', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_LABEL")
		/* 'Automatic Forwarding:' */
		});
		var popupSegBtn = new sap.ui.commons.SegmentedButton(dynamicId + 'popupSegBtn', {
			buttons : [new sap.ui.commons.Button(dynamicId + 'popupSegBtnON', {
				text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_ON_STATE_TEXT"),// "ON"
				tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_ON_STATE")
			}), new sap.ui.commons.Button(dynamicId + 'popupSegBtnOFF', {
				text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_OFF_STATE_TEXT"), // "OFF"
				tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_OFF_STATE")
			})]
		});

		popupSegBtn.attachSelect(function(oEvent) {
			if (sap.ui.getCore().byId

			(oEvent.getParameters().selectedButtonId).getText() == oSubtRuleManager._oBundle
					.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_ON_STATE_TEXT")) {

				// make the label and DatePicket visible. QuickFix. TODO: Create Rows and add or remove Rows.
				sap.ui.getCore().byId(dynamicId +'popupFromDatePicker').setProperty("visible", true);
				sap.ui.getCore().byId(dynamicId +'popupToDatePicker').setProperty("visible", true);
				sap.ui.getCore().byId(dynamicId +'popupFromLbl').setProperty("visible", true);
				sap.ui.getCore().byId(dynamicId +'popupToLbl').setProperty("visible", true);

				// reset the required property to true
				sap.ui.getCore().byId(dynamicId +'popupFromDatePicker').setProperty("required", true);
				sap.ui.getCore().byId(dynamicId +'popupToDatePicker').setProperty("required", true);

			} else {

				// make the label and DatePicker Field invisible. QuickFix. TODO: Create Rows and add or remove Rows.
				sap.ui.getCore().byId(dynamicId +'popupFromDatePicker').setProperty("visible", false);
				sap.ui.getCore().byId(dynamicId +'popupToDatePicker').setProperty("visible", false);
				sap.ui.getCore().byId(dynamicId +'popupFromLbl').setProperty("visible", false);
				sap.ui.getCore().byId(dynamicId +'popupToLbl').setProperty("visible", false);

				// set the required property to false
				sap.ui.getCore().byId(dynamicId +'popupFromDatePicker').setProperty("required", false);
				sap.ui.getCore().byId(dynamicId +'popupToDatePicker').setProperty("required", false);

			}

			popupMainMatrix.rerender();
		});
		popupSegBtn.setSelectedButton(dynamicId + "popupSegBtnON");
		popupAutoFwdtLbl.setLabelFor(popupSegBtn);
		popupAutoFwdtLbl.setWrapping(true);
		popupMainMatrix.createRow(popupAutoFwdtLbl, popupSegBtn);

		// creating label and valueHelpField for selecting a substitution profile
		if (oSubtRuleManager.bSubstitutionProfileAvailable) {
			var oSubstProfileLbl = new sap.ui.commons.Label(dynamicId + 'substProfileLbl', {
				text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_RULE_SUBSTITUTION_PROFILE"),
				wrapping : true
			});

			var oSubstProfileValueHelp = new sap.ui.commons.ValueHelpField(dynamicId + 'substProfileValueHelp', {
				width : '100%',
			}).addDelegate({
				onAfterRendering:function() {
					oSubstProfileValueHelp.$("input").prop("maxLength", 0);
					oSubstProfileValueHelp.$("input").prop("readonly", "readonly");
				}
			}).attachValueHelpRequest(oSubtRuleManager, oSubtRuleManager.openSubstProfileDialog).setRequired(false).setTooltip(oSubtRuleManager._oBundle.getText("SUBSTITUTION_RULE_SUBSTITUTION_PROFILE_TOOLTIP"));

			oSubstProfileLbl.setLabelFor(oSubstProfileValueHelp);
			popupMainMatrix.createRow(oSubstProfileLbl, oSubstProfileValueHelp);
		}

		var popupFromLbl = new sap.ui.commons.Label(dynamicId + 'popupFromLbl', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTION_FROM_DATE_LABEL")
		/* 'From:' */
		});
		var popupFromDatePicker = new sap.ui.commons.DatePicker(dynamicId + 'popupFromDatePicker', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTION_FROM_DATE_LABEL"),/* 'fromDate', */
			width : '100%',
			tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_CREATE_FROM_DATE_TOOLTIP")
		});
		popupFromDatePicker.setRequired(true);
		popupFromDatePicker.setYyyymmdd(oSubtRuleManager.substitutionRulesManagerUtils._getTodaysDateinYYYYMMDD());
		// popupFromDatePicker.setLocale("en-US");//TODO: Donot hard code
		// Locale, should automatically pick from sap.ui.getCore().getLocale().
		popupFromLbl.setLabelFor(popupFromDatePicker);

		popupMainMatrix.createRow(popupFromLbl, popupFromDatePicker);

		var popupToLbl = new sap.ui.commons.Label(dynamicId + 'popupToLbl', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTION_TO_DATE_LABEL")
		/* 'To:' */
		});
		var popupToDatePicker = new sap.ui.commons.DatePicker(dynamicId + 'popupToDatePicker', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTION_TO_DATE_LABEL"),
			width : '100%',
			tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_CREATE_TO_DATE_TOOLTIP")
		});
		popupToDatePicker.setRequired(true);
		// popupToDatePicker.setLocale("en-US");//TODO: Donot Hard Code Locale,
		// should automatically pick from sap.ui.getCore().getLocale().
		popupToLbl.setLabelFor(popupToDatePicker);
		popupMainMatrix.createRow(popupToLbl, popupToDatePicker);

		// CheckBox for Activation of Substitution Rule

		var oActivateCheckBoxLbl = new sap.ui.commons.Label(dynamicId + 'activateCheckBoxLbl', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_RULE_ACTIVATE")
		});

		var oActivateCheckBox = new sap.ui.commons.CheckBox(dynamicId + 'activateCheckBox', {
			tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_RULE_ACTIVATE_TOOLTIP"),
			checked : true
		});

		oActivateCheckBoxLbl.setLabelFor(oActivateCheckBox);
		popupMainMatrix.createRow(oActivateCheckBoxLbl, oActivateCheckBox);

		var popupMainMatrixCell3 = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'popupMainMatrixCell3', {
			colSpan : 2
		});
		popupMainMatrixCell3.addContent(new sap.ui.commons.HorizontalDivider(dynamicId + 'popHorzDivdr2'));
		popupMainMatrix.createRow(popupMainMatrixCell3);

		// var popupMainMatrixCell4 = new
		// sap.ui.commons.layout.MatrixLayoutCell(dynamicId +
		// 'popupMainMatrixCell4',{colSpan : 2});
		var popupCreateBtn = new sap.ui.commons.Button(dynamicId + 'popupCreateBtn', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTIN_RULE_CREATE_BUTTON"),/* 'Create' */
			tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_CREATE_BUTTON_TOOLTIP")
		});
		popupCreateBtn.attachPress(oSubtRuleManager, oSubtRuleManager.createSubstitutionRule);
		// popupCreateBtn.addStyleClass("customMargin");
		// popupMainMatrixCell4.addContent(popupCreateBtn);
		var popupCancelBtn = new sap.ui.commons.Button(dynamicId + 'popupCancelBtn', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTIN_RULE_CANCEL_BUTTON"),/* 'Cancel' */
			tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_CANCEL_BUTTON_TOOLTIP"),
			press : function() {

				// oSubtRuleManager.resetSubstRulePopup(oSubtRuleManager);
				createSubsRulePopup.close();
				createSubsRulePopup.destroy();
			}
		});
		// popupMainMatrixCell4.addContent(popupCancelBtn);
		popupMainMatrix.createRow(popupCreateBtn, popupCancelBtn);

		createSubsRulePopup.addContent(popupMainMatrix);
	}
	oSubtRuleManager.deleteMessage();
	createSubsRulePopup.setPosition(sap.ui.core.Popup.Dock.EndTop, sap.ui.core.Popup.Dock.BeginTop, newSubstitutionLink
			.getDomRef(), "-10 -10", "fit");
	createSubsRulePopup.setInitialFocus(oSubtRuleManager.getId() + '--popupValueHelp-input');
	createSubsRulePopup.open();
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.createSubtRuleRowReapterContent = function(itemKey,
		isActiveSubstRule) {
	var isSubstitutedUserRules = (itemKey === this.getId() + '--' + 'mySubstitutes') ? true : false;
	var dynamicId = itemKey;

	if (isActiveSubstRule) {
		dynamicId = dynamicId + 'active' + '--';
	} else {
		dynamicId = dynamicId + 'inactive' + '--';
	}

	var that = this;
	var oSubstRuleRowRepater = sap.ui.getCore().byId(dynamicId + 'subsRowRepeater');
	if (oSubstRuleRowRepater === undefined) {
		oSubstRuleRowRepater = new sap.ui.commons.RowRepeater(dynamicId + 'subsRowRepeater', {
		});
		oSubstRuleRowRepater.attachPage(that, that.deleteMessage);
		oSubstRuleRowRepater.setDesign(sap.ui.commons.RowRepeaterDesign.Transparent);
		that.setNoOfRules(dynamicId);
        jQuery(window).resize(function(oEvent) {
        	that.setNoOfRules(dynamicId);
            oSubstRuleRowRepater.rerender();
        });
		oSubstRuleRowRepater.setNoData(new sap.ui.commons.TextView({
			text : that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_NO_SUBSTITUTION_RULES_FOUND")
		}));

		// main matrix
		var rowRepMainMatrix = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'rowRepMainMatrix', {
			layoutFixed : true,
		});

		if (that.bSubstitutionProfileAvailable) {
			rowRepMainMatrix.setWidths(['2%', '30%', '18%', '18%', '17%', '12%', '3%']);
			rowRepMainMatrix.setColumns(7);
		} else {
			rowRepMainMatrix.setWidths(['2%', '37%', '24%', '21%', '12%', '3%']);
			rowRepMainMatrix.setColumns(6);
		}

		if (isActiveSubstRule) {
			rowRepMainMatrix.addStyleClass('borderFillColorGray');
			rowRepMainMatrix.addStyleClass('shadowEffectGray');
			rowRepMainMatrix.addStyleClass('mySapUiMltPadRight');

		} else {
			rowRepMainMatrix.addStyleClass('borderFillColorGray');
			rowRepMainMatrix.addStyleClass('shadowEffectGray');
		}

		// var rowRepGreyCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepGreyCell');
		// //rowRepGreyCell.addStyleClass("greyFillColor");
		// if(isActiveSubstRule){
		// rowRepGreyCell.addStyleClass("shadowEffectGreen");
		// }

		var rowRepEmptyCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepEmptyCell');
		var rowRepEmpltyTxt = new sap.ui.commons.TextView(dynamicId + 'substitutionID');
		rowRepEmpltyTxt.setVisible(false);
		rowRepEmpltyTxt.bindProperty("text", "SubstitutionRuleID");
		rowRepEmptyCell.addContent(rowRepEmpltyTxt);

		var rowRepSubsDetailMatLyt = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'rowRepSubsDetailMatLyt', {
			columns : 1,
			layoutFixed : true
		});

		// Creating Empty Row above Substitute Name.
		var rowRepEmptyRow1 = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepEmptyRow1');
		var rowRepEmpltyTxt1 = new sap.ui.commons.TextView(dynamicId + 'rowRepEmpltyTxt1', {
			text : ""
		});
		var rowRepEmpltyCell1 = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepEmpltyCell1', {
			backgroundDesign : sap.ui.commons.layout.BackgroundDesign.Transparent
		});
		rowRepEmpltyCell1.addContent(rowRepEmpltyTxt1);
		rowRepEmptyRow1.addCell(rowRepEmpltyCell1);
		// rowRepSubsDetailMatLyt.addRow(rowRepEmptyRow1);

		// Creating Row for Substitute(d) User Name
		var rowRepSubstNameRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepSubstNameRow');
		var rowRepSubstNameTxtView;
		rowRepSubstNameTxtView = new sap.ui.commons.TextView(dynamicId + 'rowRepSubstNameTxtView');
		rowRepSubstNameTxtView.bindProperty("text", "FullName", function(value) {
			if (value !== null && value !== "") {
				// var indexOfComma = value.indexOf(",");
				// var lastName = value.substring(indexOfComma + 1);
				// if(lastName === " ")value = value.substring(0, indexOfComma);//Removing comma in case there is no last name
				// for a user.
				// TODO: Uncommented Code to remove commas, as decided will fetch last name and first name from the service,
				// decision on this still pending.
				return value;
			}
		});
		rowRepSubstNameTxtView.addStyleClass('blueFontColor');
		rowRepSubstNameTxtView.addStyleClass('boldFontWeight');
		rowRepSubstNameTxtView.addStyleClass('sapUiExtSubstitutionPadding');

		var rowRepSubstNameCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepSubstNameCell', {
			backgroundDesign : sap.ui.commons.layout.BackgroundDesign.Transparent
		});
		rowRepSubstNameCell.addContent(rowRepSubstNameTxtView);
		rowRepSubstNameRow.addCell(rowRepSubstNameCell);
		rowRepSubsDetailMatLyt.addRow(rowRepSubstNameRow);

		// Creating Row for User Friendly Text below the Substitute(d) User Name
		var rowRepUsrFriendlyRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepUsrFriendlyRow');
		var rowRepUsrFriendlyTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepUsrFriendlyTxt');
		rowRepUsrFriendlyTxt.addStyleClass('blackFontColor');

		rowRepUsrFriendlyTxt.bindProperty("text", "FullName", function(value) {
			if (value !== null && value !== "" && value) {
				var oModel = this.getModel();
				return that.substitutionRulesManagerUtils._getText(value, isSubstitutedUserRules, oModel
						.getProperty('IsEnabled', this.getBindingContext(), false), oModel.getProperty(
						'SupportsEnableSubstitutionRule', this.getBindingContext(), false), oModel.getProperty('BeginDate', this
						.getBindingContext(), false), oModel.getProperty('EndDate', this.getBindingContext(), false));
			}
		});

		var rowRepUsrFriendlyCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepUsrFriendly');
		rowRepUsrFriendlyCell.addContent(rowRepUsrFriendlyTxt);
		rowRepUsrFriendlyRow.addCell(rowRepUsrFriendlyCell);
		rowRepSubsDetailMatLyt.addRow(rowRepUsrFriendlyRow);


		// column for system alis and substitution profile information
		if (that.bSubstitutionProfileAvailable) {

			var rowRepSubstProfileMatLyt = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'rowRepSubstProfileMatLyt', {
				columns : 1,
				layoutFixed : true
			});

			// Text View control to display system alias name for a substitution rule
			var rowRepSystemInfoTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepSystemInfoTxt').bindText({
				path: "SAP__Origin",
			    formatter: function(sSapOrigin){
			    	var sSystemAlias = "";
			    	if (sSapOrigin && that.oSystemInfoData) {
			    		jQuery.each(that.oSystemInfoData, function(i, oSystemInfo) {
			    			if (oSystemInfo.SAP__Origin === sSapOrigin) {
			    				sSystemAlias = that._oBundle.getText("SUBSTITUTION_RULE_SYSTEM_ALIAS") + " : " + oSystemInfo.SystemAlias;
			    				return false;
			    			}
			    		});
			        }
			    	return sSystemAlias;
			    }
			}).addStyleClass('grayFontColor').addStyleClass('sapUiExtSubstitutionPadding');

			var rowRepSystemInfoCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepSystemInfoCell');
			var rowRepSystemInfoRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepSystemInfoRow');
			rowRepSystemInfoCell.addContent(rowRepSystemInfoTxt);
			rowRepSystemInfoRow.addCell(rowRepSystemInfoCell);
			rowRepSubstProfileMatLyt.addRow(rowRepSystemInfoRow);

			// Text View control to display SubstitutionProfile for a substitution rule
			var rowRepSubstProfileTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepSubstProfileTxt').bindText({
				parts: [
			            {path: "ProfileText", type: new sap.ui.model.type.String()},
			            {path: "Profile", type: new sap.ui.model.type.String()}
			            ],
			    formatter: function(sProfileText, sProfile){
			    	if (sProfileText && sProfile) {
			    		return that._oBundle.getText("SUBSTITUTION_RULE_SUBSTITUTION_PROFILE") + " : " + sProfileText + " (" + sProfile + ")";
			        } else {
			        	return "";
			        }
			    }
			}).addStyleClass('grayFontColor');

			var rowRepSubstProfileCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepSubstProfileCell');
			var rowRepSubstProfileRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepSubstProfileRow');
			rowRepSubstProfileCell.addContent(rowRepSubstProfileTxt);
			rowRepSubstProfileRow.addCell(rowRepSubstProfileCell);
			rowRepSubstProfileMatLyt.addRow(rowRepSubstProfileRow);

		}

		// Second column for since and until dates.
		var rowRepSinceUntilMatLyt = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'rowRepSinceUntilMatLyt', {
			columns : 1,
			layoutFixed : true
		});

		// Second Column Since Date Row
		var rowRepSinceDateRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepSinceDateRow');
		var rowRepSinceDateTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepSinceDateTxt');
		rowRepSinceDateTxt.addStyleClass('grayFontColor');
		rowRepSinceDateTxt.addStyleClass('sapUiExtSubstitutionPadding');
		var sinceNFromTxt = that._oBundle.getText("SUBSTITUTION_RULE_SINCE_LABEL");// "Since : ";
		if (!isActiveSubstRule) {
			sinceNFromTxt = that._oBundle.getText("SUBSTITUTION_SUBSTITUTION_FROM_DATE_LABEL");// "From : ";
		}

		rowRepSinceDateTxt.bindText({
			parts: [
		            {path: "BeginDate"},
		            {path: "Mode"}
		            ],
		    formatter: function(beginDate, mode){
		    	if (mode && mode === that.substitutionConstants.MODE_RECEIVE_TASKS){
		    		return sinceNFromTxt + " : " + that.substitutionRulesManagerUtils._getFormattedDate(beginDate);
		    	}
		    }
		});

		var rowRepSinceDateCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepSinceDate');
		rowRepSinceDateCell.addContent(rowRepSinceDateTxt);
		rowRepSinceDateRow.addCell(rowRepSinceDateCell);
		rowRepSinceUntilMatLyt.addRow(rowRepSinceDateRow);

		// Second Column Until Date Row
		var rowRepUntilDateRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepUntilDateRow');
		var rowRepUntilDateTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepUntilDateTxt');// , {text : "Until : " +
																																														// "05/02/2012"});//TODO
																																														// From Service
		rowRepUntilDateTxt.addStyleClass('grayFontColor');

		rowRepUntilDateTxt.bindText({
			parts: [
		            {path: "EndDate"},
		            {path: "Mode"}
		            ],
		    formatter: function(endDate, mode){
		    	// do not display UntilDate when Mode of the Substitution Rule is TAKE_OVER
		    	if (mode && mode === that.substitutionConstants.MODE_RECEIVE_TASKS)	{
		    		return that._oBundle.getText("SUBSTITUTION_RULE_UNTIL_LABEL") + " : " + that.substitutionRulesManagerUtils._getFormattedDate(endDate);// "Until : "
		    	}
		    }
		});

		var rowRepUntilDateCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepUntilDateCell');
		rowRepUntilDateCell.addContent(rowRepUntilDateTxt);
		rowRepUntilDateRow.addCell(rowRepUntilDateCell);
		rowRepSinceUntilMatLyt.addRow(rowRepUntilDateRow);

		/*
		 * matrixSubRow = new sap.ui.commons.layout.MatrixLayoutRow(); control = new sap.ui.commons.TextView({ text : "" });
		 * matrixCell = new sap.ui.commons.layout.MatrixLayoutCell({ backgroundDesign :
		 * sap.ui.commons.layout.BackgroundDesign.Transparent }); matrixCell.addContent(control);
		 * matrixSubRow.addCell(matrixCell);
		 */
		// rowRepSinceUntilMatLyt.addRow(rowRepEmptyRow1);

		// Third column for Active For/In Time.
		var rowRepActiveTimeMatLyt = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'rowRepActiveTimeMatLyt', {
			columns : 1,
			layoutFixed : true
		});

		// sub matrix row
		/*
		 * matrixSubRow = new sap.ui.commons.layout.MatrixLayoutRow(); control = new sap.ui.commons.TextView({ text : "" });
		 * matrixCell = new sap.ui.commons.layout.MatrixLayoutCell({ backgroundDesign :
		 * sap.ui.commons.layout.BackgroundDesign.Transparent }); matrixCell.addContent(control);
		 * matrixSubRow.addCell(matrixCell);
		 */

		// TODO: Different controls have to be created and added for the empty space. Same control cannot be added at
		// multiple places. Else try with padding through CSS.
		// rowRepActiveTimeMatLyt.addRow(rowRepEmptyRow1);
		// Third column row for Text Active For/In
		var rowRepActiveRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepActiveRow');
		var rowRepActiveTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepActiveTxt');
		rowRepActiveTxt.addStyleClass('grayFontColor');
		rowRepActiveTxt.addStyleClass('boldFontWeight');
        rowRepActiveTxt.addStyleClass('sapUiExtSubstitutionPadding');
		// TODO: externalize and modify for/In according to active or inactive.
		// From utils

		rowRepActiveTxt.bindText({
			parts: [
		            {path: "Mode"},
		            {path: "IsEnabled"},
		            {path: "BeginDate"},
		            {path: "EndDate"}
		            ],
		    formatter: function(mode, isEnabled, beginDate, endDate){
		    	if (mode && mode === that.substitutionConstants.MODE_RECEIVE_TASKS) {
					return that.substitutionRulesManagerUtils._getStatus(isSubstitutedUserRules, isEnabled, beginDate, endDate);
				}
		    }
		});

		var rowRepActiveCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepActiveCell', {
			backgroundDesign : sap.ui.commons.layout.BackgroundDesign.Transparent
		});
		rowRepActiveCell.addContent(rowRepActiveTxt);
		rowRepActiveRow.addCell(rowRepActiveCell);
		rowRepActiveTimeMatLyt.addRow(rowRepActiveRow);


		/*
		 * matrixSubRow = new sap.ui.commons.layout.MatrixLayoutRow(); control = new sap.ui.commons.TextView({ text : "" });
		 * matrixCell = new sap.ui.commons.layout.MatrixLayoutCell({ backgroundDesign :
		 * sap.ui.commons.layout.BackgroundDesign.Transparent }); matrixCell.addContent(control);
		 * matrixSubRow.addCell(matrixCell);
		 */

		// Fouth Column On Off Segemented Button
		var rowRepOnOffSegBtn = new sap.ui.commons.SegmentedButton(dynamicId + 'rowRepOnOffSegBtn', {
			visible : false,
			buttons : [new sap.ui.commons.Button(dynamicId + 'rowRepOnSegBtn', {
				text : that._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_ON_STATE_TEXT"),
				tooltip : that._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_ON_STATE_TEXT")
			}),// "ON"
			new sap.ui.commons.Button(dynamicId + 'rowRepOffSegBtn', {
				text : that._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_OFF_STATE_TEXT"),
				tooltip : that._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_OFF_STATE_TEXT")
			})// "OFF"
			]
		});

		// We use this variable to enable/disable the Segmented Button.
		// We disable it when the Mode is "RECIEVE_TASKS" and view is I Am Substituting and if Mode is null, true in all
		// other cases.
		/* var enableSegBtn = true; */

		//rowRepOnOffSegBtn.bindProperty("visible", "SupportsEnableSubstitutionRule");

		rowRepOnOffSegBtn.bindProperty("visible",{
			parts: [
		            {path: "Mode"},
		            {path: "SupportsEnableSubstitutionRule"}
		           ],
		    formatter: function(mode, supportsEnableSubstitutionRule){
		    	if (!isSubstitutedUserRules)
		    		return supportsEnableSubstitutionRule;
		    	else
		    		return (mode && mode === that.substitutionConstants.MODE_RECEIVE_TASKS && supportsEnableSubstitutionRule);
		     }
		});

		rowRepOnOffSegBtn.bindProperty("enabled", "IsEnabled", function(value) {
			if (value != null && value !== "") {
				if (value) {
					this.setSelectedButton(this.getButtons()[0].getId());
				} else {
					this.setSelectedButton(this.getButtons()[1].getId());
				}
			}
			return true;
		});
		rowRepOnOffSegBtn.attachSelect(this, function(oEvent, that) {
				var bEnable = true;
				if((oEvent.mParameters.selectedButtonId.indexOf("rowRepOnSegBtn")) == -1){
					bEnable = false;
				}
				that.updateSubstitutionRule(oEvent, that, bEnable);
		});

		// Fifth Row Delete Image.
		if (isSubstitutedUserRules) {
			var rowRepDeleteButton = new sap.ui.commons.Button(dynamicId + 'rowRepDeleteImg', {
			    tooltip : this._oBundle.getText("SUBSTITUTION_RULE_DELETE"),
			    icon :  this.constants.iconPool.getIconURI("delete"),
			    lite : true
			  });

			rowRepDeleteButton.bindProperty("visible", "SupportsDeleteSubstitutionRule", function(value) {
				return value;
			});
			rowRepDeleteButton.attachPress(this, this.deleteSubstitutionRule);
			// UX FEEDBACK CODE
			if (that.bSubstitutionProfileAvailable) {
				rowRepMainMatrix.createRow(rowRepEmptyCell, rowRepSubsDetailMatLyt, rowRepSubstProfileMatLyt, rowRepSinceUntilMatLyt,
						rowRepActiveTimeMatLyt, rowRepOnOffSegBtn, rowRepDeleteButton);
			} else {
				rowRepMainMatrix.createRow(rowRepEmptyCell, rowRepSubsDetailMatLyt, rowRepSinceUntilMatLyt,
						rowRepActiveTimeMatLyt, rowRepOnOffSegBtn, rowRepDeleteButton);
			}

		} else {
			// UX FEEDBACK CODE
			if (that.bSubstitutionProfileAvailable) {
				rowRepMainMatrix.createRow(rowRepEmptyCell, rowRepSubsDetailMatLyt, rowRepSubstProfileMatLyt, rowRepSinceUntilMatLyt,
						rowRepActiveTimeMatLyt, rowRepOnOffSegBtn);
			} else {
				rowRepMainMatrix.createRow(rowRepEmptyCell, rowRepSubsDetailMatLyt, rowRepSinceUntilMatLyt,
						rowRepActiveTimeMatLyt, rowRepOnOffSegBtn);
			}
		}

		var rowRepMainMatrixWapperMatrix = new sap.ui.commons.layout.MatrixLayout(dynamicId
				+ 'rowRepMainMatrixWapperMatrix', {
			layoutFixed : true
		});
		rowRepMainMatrixWapperMatrix.createRow(rowRepMainMatrix);
		rowRepMainMatrixWapperMatrix.createRow(new sap.ui.commons.TextView(dynamicId + 'rowRepWapperMatEmptyTxt', {
			text : ""
		}));

		var collectionPath;
		if(itemKey === (this.getId() + '--iamSubstituting')){
			collectionPath = this.substitutesRuleCollection;
			oSubstRuleRowRepater.setModel(this._getSubstitutesRuleCollectionModel());
		}else{
			collectionPath = this.substitutionRuleCollection;
			oSubstRuleRowRepater.setModel(this._getSubstitutionRuleCollectionModel());
		}

		oSubstRuleRowRepater.bindRows("/" + collectionPath, rowRepMainMatrixWapperMatrix, null, this._getFilters(isActiveSubstRule));
	} else {
		this._refreshBindings(itemKey, isActiveSubstRule);
	}

	return oSubstRuleRowRepater;

};

// TODO: Need to reuse this function instead of duplicating the code in methods above, had some issue so not not this
// try this.
// The same needs to be done for user friendly text.
// Can remove this peice of code, it not being used anywhere.
sap.uiext.inbox.SubstitutionRulesManager.prototype.formatUserName = function(value) {
	if (value !== null && value !== "") {
		var indexOfComma = value.indexOf(",");
		var lastName = value.substring(indexOfComma + 1);
		if (lastName === " ")
			value = value.substring(0, indexOfComma);
		return value;// Removing comma in case there is no last name for a user.
	}
}

sap.uiext.inbox.SubstitutionRulesManager.prototype.setNoOfRules = function(dynamicId) {
	var oSubstRuleRowRepater = sap.ui.getCore().byId(dynamicId + 'subsRowRepeater');
	var windowHeight = jQuery(window).height();
	//var windowHeight = window.innerHeight;
	/*if (windowHeight < 410){
		window.resizeTo(500, 410);
		windowHeight = 410;
	}*/
    var possibleNumberOfRows = Math.floor((windowHeight-230)/180);
    if (possibleNumberOfRows > 0){
    	oSubstRuleRowRepater.setNumberOfRows(possibleNumberOfRows);
    }
}

sap.uiext.inbox.SubstitutionRulesManager.prototype.bindSubstitutionRules = function(path) {
	/*
	 * var oFilter = []; var filter = new sap.ui.model.Filter("IsSubstituted", sap.ui.model.FilterOperator.EQ,
	 * isSubstituted); oFilter.push(filter); filter = new sap.ui.model.Filter("Active", sap.ui.model.FilterOperator.EQ,
	 * isActiveSubstRule?"true":"false"); oFilter.push(filter); var oSubstRuleRowRepater =
	 * this._getComponent("subsRowRepeater"); var rowRepMainMatrixWapperMatrix =
	 * this._getComponent("rowRepMainMatrixWapperMatrix"); oSubstRuleRowRepater.bindRows(this.sPath,
	 * rowRepMainMatrixWapperMatrix, null, oFilter);
	 */};

sap.uiext.inbox.SubstitutionRulesManager.prototype.deleteMessage = function(oEvent, subRulesMgr) {
	if (subRulesMgr === undefined)
		subRulesMgr = this;
     var oNotificationBar = sap.ui.getCore().byId(subRulesMgr.getId() + '--' + 'notificationBar1');
     var sDefault = sap.ui.ux3.NotificationBarStatus.Default;
	if (oNotificationBar != undefined && oNotificationBar.hasItems()) {
		oNotificationBar.setVisibleStatus(sDefault);

	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.closeNotificationBar1 = function() {
    var oNotificationBar = sap.ui.getCore().byId(this.getId() + '--' + 'notificationBar1');
    var sNone = sap.ui.ux3.NotificationBarStatus.None;
	if (oNotificationBar != undefined)
		oNotificationBar.setVisibleStatus(sNone);
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.showMessage = function(messageType, messageText) {

	var oNotificationBar = sap.ui.getCore().byId(this.getId() + '--' + 'notificationBar1');
	var oMessageNotifier = sap.ui.getCore().byId(this.getId() + '--' + 'messageNotifier1');
	var sNone = sap.ui.ux3.NotificationBarStatus.None;
	if(oNotificationBar === undefined) {
		this.populateNotificationBar();
	}

	if (oNotificationBar != undefined) {

       oNotificationBar.setVisibleStatus(sNone);
       var now = new Date();
       var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({style : "medium"});
	   var formattedDateTime = oDateFormat.format(now);

    	var oMessage = new sap.ui.core.Message({
    			text : messageText,
    			timestamp : formattedDateTime
    		});
		 if (messageType === "success")
	        	{
			 oMessage.setLevel(sap.ui.core.MessageType.Success);
	        	}
	       	else if (messageType === "info")
	        	{
	       		oMessage.setLevel(sap.ui.core.MessageType.Information);
	        	}
	        		 else if (messageType === "error")
	        			{
	        			 oMessage.setLevel(sap.ui.core.MessageType.Error); }
	        		 else if (messageType === "warning") {
	        			 oMessage.setLevel(sap.ui.core.MessageType.Warning);
	        		 }

		    oMessageNotifier.addMessage(oMessage);
	    	oNotificationBar.setMessageNotifier(oMessageNotifier);

	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._getComponent = function(sComponentName) {
	return sap.ui.getCore().byId(this.getId() + '--' + sComponentName);
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.deleteSubstitutionRule = function(oEvent, that) {
	var oModel = oEvent.getSource().getModel();
	var oContext = oEvent.getSource().getBindingContext();
	var ruleID = oModel.getProperty("SubstitutionRuleID", oContext);
	var sapOrigin = oModel.getProperty("SAP__Origin", oContext);

	var oDeleteEntry = {};
	oDeleteEntry.SubstitutionRuleID = decodeURIComponent(ruleID);
	oDeleteEntry.SAP__Origin = sapOrigin;

	that.oDataManager.callFunctionImport(that.substitutionConstants.deleteRuleExecutionFunctionImport, {
		method : "POST",
		success : function(data, request) {
			var sPath = oContext.getPath();
			var aParts = sPath.split("/");
			oModel.oData[aParts[1]].splice(aParts[2], 1);
			oModel.checkUpdate(false);

			that.showMessage("success", that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_DELETED_SUCCESSFULLY"));
			},
		error : function(error) {
			if (error.response === undefined || error.response.statusCode != 205) {
				that.showMessage("error", that._oBundle
						.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_DELETION_FAILURE_CONTACT_ADMIN"));
			} else if (error.response.statusCode == 205) {
					var eventParams = {
					statusCode : error.response.statusCode,
					statusText : error.response.statusText
					};
				oModel.fireRequestFailed(eventParams);
			}
		},
		urlParameters : oDeleteEntry
    }, true);

};

sap.uiext.inbox.SubstitutionRulesManager.prototype.updateSubstitutionRule = function(oEvent, that, bEnable) {
	var oModel = oEvent.getSource().getModel();
	var oContext = oEvent.getSource().getBindingContext();
	var ruleID = oModel.getProperty("SubstitutionRuleID", oContext);
	var sapOrigin = oModel.getProperty("SAP__Origin", oContext);

	var oUpdateEntry = {};
	oUpdateEntry.SubstitutionRuleID = decodeURIComponent(ruleID);
	oUpdateEntry.SAP__Origin = sapOrigin;
	oUpdateEntry.Enabled = bEnable;

	that.oDataManager.callFunctionImport(that.substitutionConstants.updateRuleExecutionFunctionImport, {
		method : "POST",
		success : function(data, request) {
			var oNavigationBar = sap.ui.getCore().byId(that.getId() + '--subsNavBar');
			var selectedNavItemID = oNavigationBar.getSelectedItem();
			var sPath = oContext.getPath();
			var aParts = sPath.split("/");
			oModel.oData[aParts[1]][aParts[2]].IsEnabled = data.IsEnabled;
			oModel.checkUpdate(true);
			that.showMessage("success", that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_UPDATED_SUCCESSFULLY"));
		},
		error : function(error) {
			if (error.response === undefined || error.response.statusCode != 205) {
				that.showMessage("error", that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_UPDATION_FAILURE_CONTACT_ADMIN"));
			} else if (error.response.statusCode == 205) {
				var eventParams = {
					statusCode : error.response.statusCode,
					statusText : error.response.statusText
				};
				oModel.fireRequestFailed(eventParams);
			}
		},
		urlParameters : oUpdateEntry
	}, true);

};

sap.uiext.inbox.SubstitutionRulesManager.prototype.isSubstitutionDatesDateTimeType = function() {

	var sBeginDateType, sEndDateType;
	var bTypeOfDateIsDateTime = false ;


	sBeginDateType = this.oTcmMetadata.getParameterTypeForFunctionImport(this.substitutionConstants.CREATE_SUBSTITUTION_RULE, "BeginDate");
	if (sBeginDateType === "Edm.DateTime") {
			bTypeOfDateIsDateTime = true;
		}
	return bTypeOfDateIsDateTime;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.createSubstitutionRule = function(oEvent, oSubRuleMgr) {
	var error = oSubRuleMgr.validate(oSubRuleMgr);
	if (error === false) {

		var oModel = oSubRuleMgr.getModel();
		/*SAPUI5 by default makes it DataServiceVersion 2.0 as oData 1.0 does not support skip/top etc:
		oModel.oHeaders["DataServiceVersion"] = "1.0"*/

		var oEntry = {};
		var bEdmTypeDateTime = oSubRuleMgr.isSubstitutionDatesDateTimeType();

		var oFormat = sap.ui.core.format.DateFormat.getDateInstance({
			pattern : "yyyyMMdd"
		});
		var startDate;
		var endDate;
		var endDateInputValue = oSubRuleMgr._getComponent('popupToDatePicker').getYyyymmdd();

		if (endDateInputValue != undefined && endDateInputValue !== "") {
			var endDateYear = endDateInputValue.substr(0, 4);
			var endDateMonth = endDateInputValue.substr(4, 2);
			var endDateDate = endDateInputValue.substr(6, 8);
			// endDate = oFormat.parse(endDateInputValue);
			var offset = oSubRuleMgr.substitutionRulesManagerUtils._getTimeZoneOffset();
			if (offset !== undefined) {
				offset = offset / (60 * 1000);
				endDate = new Date(Date.UTC(endDateYear, endDateMonth - 1, endDateDate, 23, 59 - offset, 59, 59))
			} else {
				endDate = oFormat.parse(endDateInputValue);
				endDate.setHours(23, 59, 59, 59);
			}
		} else {
			endDate = null;
		}

		var startDateInputValue = oSubRuleMgr._getComponent('popupFromDatePicker').getYyyymmdd();

		if (startDateInputValue != undefined && startDateInputValue !== "") {
			var startDateYear = startDateInputValue.substr(0, 4);
			var startDateMonth = startDateInputValue.substr(4, 2);
			var startDateDate = startDateInputValue.substr(6, 8);
			var offset = oSubRuleMgr.substitutionRulesManagerUtils._getTimeZoneOffset();
			if (offset !== undefined) {
				offset = offset / (60 * 1000);
				startDate = new Date(Date.UTC(startDateYear, startDateMonth - 1, startDateDate, 0, -offset, 0, 0))
			} else {
				startDate = oFormat.parse(startDateInputValue);
			}
		} else {
			startDate = new Date();
			startDate.setHours(0, 0, 0, 0);
		}

		bEdmTypeDateTime ? oEntry.BeginDate = startDate.getTime() : oEntry.BeginDate = "\/Date(" + startDate.getTime() + ")\/";

		var popupValueHelp = oSubRuleMgr._getComponent('popupValueHelp');
		oEntry.FullName = popupValueHelp.getValue();
		oEntry.User = popupValueHelp.data("uniqueName");

		var forwardSegmentButton = oSubRuleMgr._getComponent('popupSegBtn');
		var forwardSegmentSelectedButton = forwardSegmentButton.getSelectedButton();

		// setting mode
		if (forwardSegmentSelectedButton.indexOf("popupSegBtnON") >= 0) {
			oEntry.Mode = oSubRuleMgr.substitutionConstants.MODE_RECEIVE_TASKS;
			bEdmTypeDateTime ? oEntry.EndDate = endDate.getTime() : oEntry.EndDate = "\/Date(" + endDate.getTime() + ")\/";
		} else {
			oEntry.Mode = oSubRuleMgr.substitutionConstants.MODE_TAKE_OVER;
			// TODO check if endDate is nullable. If not, send a dummy date else send empty, null or nothing at all
			var dEndDate = new Date (9999, 11, 31);
			bEdmTypeDateTime ? oEntry.EndDate = dEndDate.getTime() : oEntry.EndDate = "\/Date(" + dEndDate.getTime() + ")\/";
		}

		// setting IsEnabled
		var oCheckBox = oSubRuleMgr._getComponent('activateCheckBox');
		oEntry.IsEnabled = oCheckBox.getChecked();


		// setting substitutionProfile
		if (oSubRuleMgr.bSubstitutionProfileAvailable) {
			var oProfileValueHelp = oSubRuleMgr._getComponent('substProfileValueHelp');
			if (oProfileValueHelp != undefined) {
				oEntry.Profile = oProfileValueHelp.data("Profile");
				oEntry.ProfileText = oProfileValueHelp.data("ProfileText");
			}
			oSubRuleMgr._sendCreateRuleRequestWithProfile(oSubRuleMgr,oEntry);
		} else {
			oSubRuleMgr._sendCreateRuleRequest(oSubRuleMgr,oEntry);
		}

		var createSubsRulePopup = sap.ui.getCore().byId(oSubRuleMgr.getId() + '--createSubsRulePopup');
		createSubsRulePopup.close();
		createSubsRulePopup.destroy();
	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.openUsersDialog = function(oEvent, oSubRuleMgr){
	var dynamicId = oSubRuleMgr.getId() + '--';
	var usersDialog = sap.ui.getCore().byId(dynamicId + "usersDialog");
	var oTable = sap.ui.getCore().byId(dynamicId + "userTable");
	if(usersDialog===undefined){
		var dLayout = new sap.ui.commons.layout.MatrixLayout({
			id : dynamicId + 'dLayout',
			layoutFixed : true,
			width : '100%'
			});


		var oSearch = new sap.ui.commons.SearchField({
			id : dynamicId + 'oSearch',
	        enableListSuggest: false,
	        startSuggestion : 0,
	        tooltip : oSubRuleMgr._oBundle.getText("SUBSTIUTION_RULE_SEARCH_FOR_USERS"),//"Search For Users",
	        //value: oSubRuleMgr._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_SEARCH_LABEL"),//"Search",
			editable : true,
	        width: '100%'});

		oSearch.addDelegate({
			onAfterRendering : function() {
				var oTextField = sap.ui.getCore().byId(dynamicId + 'oSearch-tf');
				oTextField.prop('placeholder', oSubRuleMgr._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_SEARCH_LABEL"));
			}
		});


		//TODO: When SearchUsers is changed to composite this can be removed and not necessary to have code in two places
		oSearch.attachSearch(oSubRuleMgr,function(oEvent,oSubRuleMgr){
			oTable.setBusy(true);
	        oSubRuleMgr._handleSearchUsersClickforCreateSubstitution(oEvent);
		});

		 oSearch.attachSuggest(oSubRuleMgr,function(oEvent,oSubRuleMgr){
			 if (oEvent.getParameter("value") === "") {
				 oTable.clearSelection();
				 oTable.bindRows("");
		        }
		    });

		dLayout.createRow(oSearch);
		var users = {
				collection: "UserInfoCollection", //fetch from configration, not to be hardcoded.
				propertiesLabel: [oSubRuleMgr._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_LOGONID"),
				                  oSubRuleMgr._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_NAME")],
				properties: ["UniqueName", "DisplayName"]
		};
		if (oTable === undefined) {
			oTable = new sap.ui.table.Table(dynamicId + "userTable", {
				selectionMode : sap.ui.table.SelectionMode.Single
			});
		}
		oTable.setModel(oSubRuleMgr.getModel());
		// oTable.setTitle( "User Table");
		oTable.setVisibleRowCount(5);

		oTable.attachRowSelectionChange(function(){
			if(oTable.getSelectedIndices().length !== 0){
				sap.ui.getCore().byId(dynamicId + "usersDialogOKBtn").setEnabled(true);
			}else{
				sap.ui.getCore().byId(dynamicId + "usersDialogOKBtn").setEnabled(false);
			}
		});

		oTable.bDynamic = true;
		for ( var i = 0; i <= users.properties.length - 1; i++) {
			oTable.addColumn(new sap.ui.table.Column().setLabel(new sap.ui.commons.Label({
				text : users.propertiesLabel[i],
				design : sap.ui.commons.LabelDesign.Bold
			})).setTemplate(new sap.ui.commons.TextField({
				editable : false,
				value : {
					path : users.properties[i]
				}
			})));
		}

		var dLayoutCont = new sap.ui.commons.layout.VerticalLayout(dynamicId + "userDialogVLayout", {
			width : "100%"
		});
		dLayoutCont.insertContent(dLayout, 0);
		dLayoutCont.insertContent(oTable, 1);
		usersDialog = new sap.ui.commons.Dialog(dynamicId + "usersDialog", {
			modal : true,
			title : oSubRuleMgr._oBundle.getText("SUBSTIUTION_RULE_SEARCH_FOR_USERS"),// "Search For Users",
			content : [dLayoutCont],
			buttons : [new sap.ui.commons.Button(dynamicId + "usersDialogOKBtn", {
				enabled: false,
				text : oSubRuleMgr._oBundle.getText("INBOX_BUTTON_OK_TEXT"),
				tooltip : oSubRuleMgr._oBundle.getText("SUBSTITUTE_SEARCH_USERS_OK_BUTTON_TOOLTIP"),
				press : function() {
					var table = sap.ui.getCore().byId(dynamicId + "userTable");
					var selIndex = table.getSelectedIndex();
					var rowContext = table.getContextByIndex(selIndex);
					var tabModel = sap.ui.getCore().byId(dynamicId + 'userTable').getModel();
					var selUsesDisplayName = tabModel.getProperty("DisplayName", rowContext);
					if (selUsesDisplayName === null)
						selUsesDisplayName = "";
					var selUserUniqueName = tabModel.getProperty("UniqueName", rowContext);
					var popupValueHelp = oSubRuleMgr._getComponent('popupValueHelp');
					popupValueHelp.setValue(selUsesDisplayName);
					popupValueHelp.data("uniqueName", selUserUniqueName);
					usersDialog.close();
				}
			})]
		});
	}
	usersDialog.setWidth("400px");
	usersDialog.open();
	usersDialog.attachClosed( oSubRuleMgr, function(oEvent,oSubRuleMgr){
		usersDialog.destroy();
	});
	usersDialog.setInitialFocus(oSearch);

};
sap.uiext.inbox.SubstitutionRulesManager.prototype.validate = function(oSubRuleMgr) {

	var that = this;
	var validationError = false;
	var reason = "";
	var toDate, frmDate;
	var oFormat = sap.ui.core.format.DateFormat.getDateInstance({
		pattern : "yyyyMMdd"
	});

	var endDateInputValue = oSubRuleMgr._getComponent('popupToDatePicker').getYyyymmdd();
	var startDateInputValue = oSubRuleMgr._getComponent('popupFromDatePicker').getYyyymmdd();

	if (endDateInputValue != undefined && endDateInputValue !== "") {
		var endDateYear = endDateInputValue.substr(0, 4);
		var endDateMonth = endDateInputValue.substr(4, 2);
		var endDateDate = endDateInputValue.substr(6, 8);
		// endDate = oFormat.parse(endDateInputValue);
		var offset = oSubRuleMgr.substitutionRulesManagerUtils._getTimeZoneOffset();
		if (offset !== undefined) {
			offset = offset / (60 * 1000);
			toDate = new Date(Date.UTC(endDateYear, endDateMonth - 1, endDateDate, 23, 59 - offset, 59, 59))
		} else {
			toDate = oFormat.parse(endDateInputValue);
			toDate.setHours(23, 59, 59, 59);
		}
	}

	if (startDateInputValue != undefined && startDateInputValue !== "") {
		var startDateYear = startDateInputValue.substr(0, 4);
		var startDateMonth = startDateInputValue.substr(4, 2);
		var startDateDate = startDateInputValue.substr(6, 8);
		var offset = oSubRuleMgr.substitutionRulesManagerUtils._getTimeZoneOffset();
		if (offset !== undefined) {
			offset = offset / (60 * 1000);
			frmDate = new Date(Date.UTC(startDateYear, startDateMonth - 1, startDateDate, 0, -offset, 0, 0))
		} else {
			frmDate = oFormat.parse(startDateInputValue);
		}
	}

	var substituteUser = oSubRuleMgr._getComponent('popupValueHelp').getValue();

	var prop = oSubRuleMgr._getComponent('popupFromDatePicker').getProperty("required");

	if (substituteUser === null || substituteUser === "") {
		validationError = true;
		reason = oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SELECT_SUBSTITUTE");

	}
	if (validationError != true && prop === true) {
		if (toDate === null || frmDate === null || toDate === "" || frmDate === "" || isNaN(toDate) || isNaN(frmDate)) {
			validationError = true;
			reason = oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_ENTER_VALID_DATE_RANGE");
		}
		if (validationError != true) {
			if (toDate < frmDate) {
				validationError = true;
				reason = oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_FROM_DATE_AFTER_TODATE");
			}
		}
	}
	if (validationError != true && prop != true) {
		if (toDate != null && frmDate != null) {

			if (validationError != true && toDate < frmDate) {
				validationError = true;
				reason = oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_FROM_DATE_AFTER_TODATE");
			}

		}
	}

	if (validationError === true) {

		oSubRuleMgr.showMessage("error", reason);

	}
	return validationError;

};

sap.uiext.inbox.SubstitutionRulesManager.prototype.populateNotificationBar = function() {

	  var notificationBar = sap.ui.getCore().byId(this.getId() +'--' + "notificationBar1");
	if (notificationBar === undefined) {

		var oNotificationBar = new sap.ui.ux3.NotificationBar({
			id: this.getId() + '--' + "notificationBar1",
			visibleStatus: "None"
		});

		oNotificationBar.attachDisplay(function(oEvent) {
			var sStatus = oNotificationBar.getVisibleStatus();
			var sNone = sap.ui.ux3.NotificationBarStatus.None;
			var sDefault = sap.ui.ux3.NotificationBarStatus.Default;
			if(sStatus === sNone) {
				oNotificationBar.setVisibleStatus(sDefault);
			} else {
				oNotificationBar.setVisibleStatus(sNone);
			}
	    });

	    var oMessageNotifier = new sap.ui.ux3.Notifier ({
			id: this.getId() + '--' + "messageNotifier1",
			title: this._oBundle.getText("INBOX_NOTIFICATIONS"),

		});

		oNotificationBar.setMessageNotifier(oMessageNotifier);
		oNotificationBar.addStyleClass("sapUiExtInboxNotificationBar");
		return oNotificationBar;

		var cell = this._getComponent('popupMainMatrixCellMsgBar');
		cell.addContent(oNotificationBar);
	}

};


sap.uiext.inbox.SubstitutionRulesManager.prototype._refreshBindings = function(itemKey, isActiveRule) {
	var dynamicId = itemKey;
	var collectionPath = (itemKey === (this.getId() + '--iamSubstituting'))
			? this.substitutesRuleCollection
			: this.substitutionRuleCollection; // TODO: Constants

	if (collectionPath === this.substitutesRuleCollection && !this.bSubstituteDataRefreshed) {
		this._getSubstitutesRulesData(this.getModel());
		this.bSubstituteDataRefreshed = true;
	}

	/*Here in JavaScript isActiveRule can be undefined, true or false.
	It will be undefined in all the case where it is being called with just one parameter(itemKey)*/

	// For example in case of deleteSubtitutionRule and createSubtitution we do not pass 'isActiveRule' param.
	if (isActiveRule === undefined) {
		this._refreshBindings(itemKey, true);
		this._refreshBindings(itemKey, false);
	}

	else if (isActiveRule) {		// Bind Rows for Active RowRepeater
		var wrapperTemp1 = sap.ui.getCore().byId(dynamicId + 'active' + '--' + 'rowRepMainMatrixWapperMatrix');
		var oSubstRuleRowRepaterActive = sap.ui.getCore().byId(dynamicId + 'active' + '--' + 'subsRowRepeater');
		oSubstRuleRowRepaterActive.bindRows("/" + collectionPath, wrapperTemp1, null, this._getFilters(isActiveRule));

	} else {		// Bind Rows for InActive RowRepater
		var wrapperTemp2 = sap.ui.getCore().byId(dynamicId + 'inactive' + '--' + 'rowRepMainMatrixWapperMatrix');
		var oSubstRuleRowRepaterInActive = sap.ui.getCore().byId(dynamicId + 'inactive' + '--' + 'subsRowRepeater');
		oSubstRuleRowRepaterInActive.bindRows("/" + collectionPath, wrapperTemp2, null, this._getFilters(isActiveRule));
	}

};

sap.uiext.inbox.SubstitutionRulesManager.prototype.getSubstitutionRulesManagerUtils = function() {
	return this.substitutionRulesManagerUtils;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._searchUsers = function(oSearchInput) {
	var that = this;
	var oFunctionImport = this.oTCMModel.getFunctionImportHandler();
	var dynamicId = that.getId() + '--';
	var oTable = sap.ui.getCore().byId(dynamicId + "userTable");
	oFunctionImport.setServiceURL(this.sUrl);
	oFunctionImport.setHeaders({
		Accept : this.inboxConstants.acceptHeaderforJSON,
		"x-csrf-token" : this.getModel().oHeaders["x-csrf-token"]
	});

	var sSearchTerm = oSearchInput.sSearchTerm;
	var iMaxResults = oSearchInput.iMaxResults;
	var sSAPOrigin = oSearchInput.sSAPOrigin;
	var oResultData;

	this.oPendingSearchRequestInSubstitution = oFunctionImport.callSearchUsers({
		SearchPattern : jQuery.sap.encodeURL(sSearchTerm),
		MaxResults : iMaxResults,
		SAP__Origin : sSAPOrigin
	}, function(oData, response) {
		oTable.setBusy(false);
		oResultData = oData;
		that.displaySubstitesSearchResults(oResultData, oTable, iMaxResults);
		that.oPendingSearchRequestInSubstitution = undefined;
	}, function(error) {
			oTable.setBusy(true);
				if(error.response !== undefined){
					that.showMessage("error", that._oBundle.getText("INBOX_MSG_NO_USER_FOUND",[sSearchTerm]));
					oTable.setBusy(false);
				}
			that.oPendingSearchRequestInSubstitution = undefined;
	});

};

sap.uiext.inbox.SubstitutionRulesManager.prototype.displaySubstitesSearchResults = function(oResultData, oTable, iMaxResults) {
	if (oResultData) {
		var oModel = new sap.ui.model.json.JSONModel();
	    oModel.setData(oResultData);
	    oTable.clearSelection();
	    oTable.setModel(oModel);
		oTable.bindRows("/results");

	    if(oResultData.results.length > 0) {
	    	oTable.setSelectedIndex(0);
	    }
	}
	if(oResultData.results.length === iMaxResults) {
		this.showMessage("warning", this._oBundle.getText("INBOX_TOP_MAX_USER", [iMaxResults]));
	}
	if(oResultData.results.length === 0) {
		this.showMessage("error", this._oBundle.getText("INBOX_MSG_FOR_NO_DATA"));
	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._handleSearchUsersClickforCreateSubstitution = function(oEvent){

	var iMaxResults = this.oConfiguration ? this.oConfiguration.getSearchUersMaxLimit() : 100;
	var sSAPOrigin = "";
	var sSearchText = oEvent.getParameter("query").trim();

	if (this.bSystemInfoAvailable === undefined) {
		var oSystemInfoCollectionConstant = this.constants.SystemInfoCollection;
		this.bSystemInfoAvailable = this.oTcmMetadata._isEntitySet(oSystemInfoCollectionConstant.name, oSystemInfoCollectionConstant.entityType);
	}

	// sending one SAP__Origin in case of multi providers
	if (this.bSystemInfoAvailable) {
		sSAPOrigin = this.oSystemInfoData[0].SAP__Origin;
	}

	if(this.oPendingSearchRequestInSubstitution !== undefined) {
		this.oPendingSearchRequestInSubstitution.abort();
	}

	this._searchUsers({
		sSearchTerm: sSearchText,
		iMaxResults:iMaxResults,
		sSAPOrigin: sSAPOrigin
	});

};

sap.uiext.inbox.SubstitutionRulesManager.prototype._sendCreateRuleRequestWithProfile= function(oSubRuleMgr,oEntry){

	var fnCreateSubRuleRequest = jQuery.proxy(function(aSelectedProviders) {
		if (aSelectedProviders.length == 0) {
			this._sendCreateRuleRequest(oSubRuleMgr,oEntry);
		}
		else{
			//Request will be send with JSON payload, reformat dates
			oEntry.BeginDate = "/Date(" + oEntry.BeginDate + ")/";
			oEntry.EndDate = "/Date(" + oEntry.EndDate + ")/";
			if (aSelectedProviders.length === 1) { // if substitution rule needs to be created for only one provider
				this._createSubRuleWithProfile(oEntry, aSelectedProviders[0]);
			} else if (aSelectedProviders.length > 1) { // if substitution rule needs to be created for more than one providers
				this._createSubRuleWithProfileBatch(oEntry, aSelectedProviders);
			}
		}
	}, this);

	// getting providers for which substitution rule needs to be created
	this._getProvidersForCreateSubstitution(oEntry, fnCreateSubRuleRequest);

};

sap.uiext.inbox.SubstitutionRulesManager.prototype._sendCreateRuleRequest= function(oSubRuleMgr,oEntry){
	//Check for empty profile key Profile=null in URL causes HTTP 500
	var profKey = "Profile";
	if(!oEntry[profKey]){
		delete oEntry[profKey];
	}

	var oModel = this.getModel();
	var oSubstitutionModel = this._getSubstitutionRuleCollectionModel();

	if(this.oTcmMetadata._isFunctionImport(this.substitutionConstants.CREATE_SUBSTITUTION_RULE)){

		oModel.callFunction("CreateSubstitutionRule", "POST", oEntry, null, function(data, request) {
			oSubRuleMgr.showMessage("success", oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATED_SUCCESSFULLY"));
			oSubstitutionModel.oData.SubstitutionRuleCollection.push(data);
			oSubstitutionModel.checkUpdate(false);
		},  function(error){
				oSubRuleMgr.showMessage("error", oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATION_FAILURE_CONTACT_ADMIN"));
		});
	}
	else{
		oModel.create(oSubRuleMgr.sPath,oEntry,null,
				function(oData, response){
			oSubRuleMgr.showMessage("success", oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATED_SUCCESSFULLY"));
			oSubstitutionModel.oData.SubstitutionRuleCollection.push(oData);
			oSubstitutionModel.checkUpdate(false);
			oModel.oHeaders["DataServiceVersion"] = "2.0";
		},
		function(error){
				oSubRuleMgr.showMessage("error", oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATION_FAILURE_CONTACT_ADMIN"));
		});
	}

};

sap.uiext.inbox.SubstitutionRulesManager.prototype._getSubstitutionRuleCollectionModel = function(){
	if(!this.oSubstitutionRuleCollectionModel)
		this.oSubstitutionRuleCollectionModel = new sap.ui.model.json.JSONModel();
	return this.oSubstitutionRuleCollectionModel;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._getSubstitutesRuleCollectionModel = function(){
	// var bSubstituteDataRefreshed indicates whether the SubstituteRulesCollection data is refreshed or not
	if(!this.bSubstituteDataRefreshed){
		if (!this.oSubstitutesRuleCollectionModel)
			this.oSubstitutesRuleCollectionModel = new sap.ui.model.json.JSONModel();
		this._getSubstitutesRulesData(this.getModel());
		// setting bSubstituteDataRefreshed to true as SubstituteRulesCollection is refreshed
		this.bSubstituteDataRefreshed = true;
	}
	return this.oSubstitutesRuleCollectionModel;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.openSubstProfileDialog = function(oEvent, oSubRuleMgr){

	var dynamicId = oSubRuleMgr.getId() + '--';

	var fnOpenProfileSelectionDialogue = function(oSubProfileData) {

		// merging items in SubstitutionProfile data those have equal value for Profile and ProfileText
		var aDataUnique = {};
		jQuery.each(oSubProfileData.results, function(i, item) {
			var oItem = {};
			oItem.Profile = item.Profile;
			oItem.ProfileText = item.ProfileText;
			aDataUnique[ item.Profile + " - " + item.ProfileText ] = oItem;
		});

		var aProfileDataUnique = [];
		var k=0;
		jQuery.each(aDataUnique, function(j, item) {
			aProfileDataUnique[k++] = item;
		});

		var oDataUnique = {};
		oDataUnique.results = aProfileDataUnique;

		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData(oDataUnique);

		var oTable = sap.ui.getCore().byId(dynamicId + "substProfileTable");
		if (oTable === undefined) {
			oTable = new sap.ui.table.Table(dynamicId + "substProfileTable", {
				selectionMode : sap.ui.table.SelectionMode.Single
			});
		}

		oTable.clearSelection();
		oTable.setModel(oModel);
		oTable.bindRows("/results");
		oTable.setVisibleRowCount(5);
		oTable.bDynamic = true;

		oTable.addColumn(new sap.ui.table.Column().setLabel(new sap.ui.commons.Label({
			text : oSubRuleMgr._oBundle.getText("SUBSTITUTION_RULE_SUBSTITUTION_PROFILE"), //"Substitution Profile"
			design : sap.ui.commons.LabelDesign.Bold
		})).setTemplate(new sap.ui.commons.TextField({
			editable : false,
		}).bindValue({
			parts: [
			        {path: "ProfileText", type: new sap.ui.model.type.String()},
			        {path: "Profile", type: new sap.ui.model.type.String()}
			        ],
			        formatter: function(sProfileText, sProfile){
			        	if (sProfileText && sProfile) {
			        		return sProfileText + " (" + sProfile + ")";
			        	} else {
			        		return null;
			        	}
			        }
		})));

		var oSubstProfileDialog = sap.ui.getCore().byId(dynamicId + "substProfileDialog");
		if(oSubstProfileDialog===undefined){
			var dLayout = new sap.ui.commons.layout.MatrixLayout({
				id : dynamicId + 'searchSubstProfileLayout',
				layoutFixed : true,
				width : '100%'
			});


			var oSearch = new sap.ui.commons.SearchField({
				id : dynamicId + 'substProfileSearch',
				enableListSuggest: false,
				startSuggestion : 0,
				tooltip : oSubRuleMgr._oBundle.getText("SUBSTIUTION_RULE_SEARCH_FOR_SUBSTITUTION_PROFILE"),//"Search For Substitution Profile"
				editable : true,
				width: '100%'
			});

			// adding a placeholder for searchField
			oSearch.addDelegate({
				onAfterRendering : function() {
					var oTextField = sap.ui.getCore().byId(dynamicId + 'substProfileSearch-tf');
					oTextField.prop('placeholder', oSubRuleMgr._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_SEARCH_LABEL")); // "Search"
				}
			});

			// Live search
			oSearch.attachSuggest(function(oEvent) {
				var sValue = oEvent.getParameter("value");
				var aFilters = [];
				aFilters.push(new sap.ui.model.Filter("ProfileText", sap.ui.model.FilterOperator.Contains, sValue));
				aFilters.push(new sap.ui.model.Filter("Profile", sap.ui.model.FilterOperator.Contains, sValue));
				var oFilter = new sap.ui.model.Filter(aFilters, false);
				oTable.getBinding("rows").filter(oFilter, sap.ui.model.FilterType.Application);
			});

			dLayout.createRow(oSearch);

			var dLayoutCont = new sap.ui.commons.layout.VerticalLayout(dynamicId + "substProfileDialogVLayout", {
				width : "100%"
			});
			dLayoutCont.insertContent(dLayout, 0);
			dLayoutCont.insertContent(oTable, 1);
			oSubstProfileDialog = new sap.ui.commons.Dialog(dynamicId + "substProfileDialog", {
				width : '400px',
				modal : true,
				title : oSubRuleMgr._oBundle.getText("SUBSTIUTION_RULE_SEARCH_FOR_SUBSTITUTION_PROFILE"),// "Search For Substitution Profile",
				content : [dLayoutCont],
				buttons : [new sap.ui.commons.Button(dynamicId + "substProfileDialogOKBtn", {
					text : oSubRuleMgr._oBundle.getText("INBOX_BUTTON_OK_TEXT"),
					tooltip : oSubRuleMgr._oBundle.getText("SUBSTIUTION_RULE_SEARCH_SUBSTITUTION_PROFILE_OK_BUTTON_TOOLTIP"), // "Assign a Substitution Profile"
					press : function() {
						var table = sap.ui.getCore().byId(dynamicId + "substProfileTable");
						var selIndex = table.getSelectedIndex();
						var rowContext = table.getContextByIndex(selIndex);
						var tabModel = table.getModel();
						var selectedProfileText = tabModel.getProperty("ProfileText", rowContext);
						var selectedProfileNumber = tabModel.getProperty("Profile", rowContext);
						var oSubstProfileValueHelp = oSubRuleMgr._getComponent('substProfileValueHelp');
						oSubstProfileValueHelp.setValue(selectedProfileText);
						oSubstProfileValueHelp.data("Profile", selectedProfileNumber);
						oSubstProfileValueHelp.data("ProfileText", selectedProfileText);

						oSubstProfileDialog.close();
					}
				})]
			});
		}
		oSubstProfileDialog.open();
		oSubstProfileDialog.attachClosed( oSubRuleMgr, function(oEvent,oSubRuleMgr){
			oSubstProfileDialog.destroy();
		});
		oSubstProfileDialog.setInitialFocus(oSearch);
	}

	oSubRuleMgr._getSubstProfileData(fnOpenProfileSelectionDialogue);

};

sap.uiext.inbox.SubstitutionRulesManager.prototype._getSubstProfileData = function(fnOpenProfileSelectionDialogue){
	if (!oModel) {
		var oModel = this.getModel();
	}
	var that = this;
	if (!this.oSubstitutionProfileData) {

		this.oDataManager.readData("/SubstitutionProfileCollection", {
			success : function(oData,oResponse) {
				that.oSubstitutionProfileData = oData;
				fnOpenProfileSelectionDialogue(that.oSubstitutionProfileData);
			},
			error : function(error) {
				that.showMessage("error", that._oBundle.getText("INBOX_MSG_FETCH_SUBSTITUTION_PROFILE_FAILED"));
			}
		});
	} else {
		fnOpenProfileSelectionDialogue(this.oSubstitutionProfileData);
	}

};

// this function returns an array of providers for which substitution rule needs to be created
sap.uiext.inbox.SubstitutionRulesManager.prototype._getProvidersForCreateSubstitution = function(oEntry, fnCreateSubRuleRequest){

	var aSelectedProviders = [];
	var sProfileValueHelp = this._getComponent('substProfileValueHelp').getValue();
	if (sProfileValueHelp != null && sProfileValueHelp !== "") {

		/* If user selects a SubstitutionProfile, loop though SubstitutionProfileCollection and check which provider has the same Profile and ProfileText
		 * pushing the matching provider in to the array  */

		jQuery.each(this.oSubstitutionProfileData.results, function(i, item) {
			if (item.Profile === oEntry.Profile && item.ProfileText === oEntry.ProfileText) {
				aSelectedProviders.push(item.SAP__Origin);
			}
		});
	}
	else {

		/* If user does not select any SubstitutionProfile, loop through systemInfoCollection and select every provider in the system */

		var oSystemInfoCollectionData = this.oSystemInfoData;
		for (var elem in oSystemInfoCollectionData) {
			aSelectedProviders.push(oSystemInfoCollectionData[elem].SAP__Origin);
		};
	}

	fnCreateSubRuleRequest(aSelectedProviders);
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._createSubRuleWithProfile = function(oEntry, sProvider){

	var oModel = this.getModel();
	var oSubstitutionModel = this._getSubstitutionRuleCollectionModel();
	var bFetchAgain = oSubstitutionModel.oData.SubstitutionRuleCollection.length > 0;
	var that = this;
	var oTempEntry = {};
	oTempEntry = jQuery.extend(true, {}, oEntry);
	oTempEntry.SAP__Origin = sProvider;

	oModel.create(this.sPath, oTempEntry, {
		success : function(oData, response){
			that.showMessage("success", that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATED_SUCCESSFULLY"));
			if (bFetchAgain)
				that._fetchSubstitutionRuleCollectionData();
			else
				oSubstitutionModel.oData.SubstitutionRuleCollection.push(oData);
			oSubstitutionModel.checkUpdate(false);
		},
		error : function(error){
			if(error.response === undefined || error.response.statusCode != 205){
				that.showMessage("error", that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATION_FAILURE_CONTACT_ADMIN"));
			}else if(error.response.statusCode == 205){
				var eventParams = {statusCode : error.response.statusCode, statusText : error.response.statusText};
				oModel.fireRequestFailed(eventParams);
			}
		}
	});
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._createSubRuleWithProfileBatch = function(oEntry, aSelectedProviders) {

	var oSubstitutionModel = this._getSubstitutionRuleCollectionModel();
	var bFetchAgain = oSubstitutionModel.oData.SubstitutionRuleCollection.length > 0;
	var that = this;
	var aEntries = [];

	jQuery.each(aSelectedProviders, function(i, item) {
		var oTempEntry = {};
		oTempEntry = jQuery.extend(true, {}, oEntry);
		oTempEntry.SAP__Origin = item;
		aEntries.push(oTempEntry);
	});

	this.oDataManager.fireBatchRequest({
		sPath : that.sPath,
		sMethod : "POST",
		aProperties : aEntries,
		numberOfRequests : aSelectedProviders.length,
		sBatchGroupId : "createSubRule",
		fnSuccess : function(data, response) {
			var aBatchResponses = data.__batchResponses;
			var aErrors = [], aSuccess = [];
			jQuery.each(aBatchResponses, function(i, oSubstitutionRule) {
				var aChangeResponses = oSubstitutionRule.__changeResponses;
				if (aChangeResponses) {
					if (aChangeResponses[0].statusCode === "201" && aChangeResponses[0].statusText === "Created") {
						if (!bFetchAgain)
							oSubstitutionModel.oData.SubstitutionRuleCollection.push(aChangeResponses[0].data);
						aSuccess.push(i);
					} else {
						aErrors.push(i);
					}
				} else {
					aErrors.push(i);
				}
			});
			if (bFetchAgain)
				that._fetchSubstitutionRuleCollectionData();
			if(aErrors.length > 0){
				if (aSuccess.length < 1) {
					that.showMessage("error", that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATION_FAILURE_CONTACT_ADMIN"));
				} else {
					that.showMessage("warning", that._oBundle.getText("INBOX_MSG_CREATE_SUBSTITUTION_SUCCESS_AND_ERROR", [aSuccess.length, aSelectedProviders.length]));
				}
			}else{
				that.showMessage("success", that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATED_SUCCESSFULLY"));
			}

			oSubstitutionModel.checkUpdate(false);

		},
		fnError : function(oError) {
			that.showMessage("error", that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATION_FAILURE_CONTACT_ADMIN"));
		}
	});

};


sap.uiext.inbox.SubstitutionRulesManager.prototype._getFilters = function(isActiveSubstRule) {

	var oToday = this.substitutionRulesManagerUtils._getTodaysDate();
	var oTodayBegin = Date.UTC(oToday.getFullYear(), oToday.getMonth(), oToday.getDate(), 0, 0, 0, 0);
	var oTodayEnd = Date.UTC(oToday.getFullYear(), oToday.getMonth(), oToday.getDate(), 23, 59, 59, 59);
	var oFilter1, oFilter2, oFilter3;
	var bEnd = isActiveSubstRule;

	if (isActiveSubstRule) {

		oFilter1 = new sap.ui.model.Filter("IsEnabled", sap.ui.model.FilterOperator.EQ, true);
		oFilter2 = new sap.ui.model.Filter("BeginDate", sap.ui.model.FilterOperator.LE, oTodayEnd);
		oFilter3 = new sap.ui.model.Filter("EndDate", sap.ui.model.FilterOperator.GE, oTodayBegin);

	} else {

		oFilter1 = new sap.ui.model.Filter("IsEnabled", sap.ui.model.FilterOperator.EQ, false);
		oFilter2 = new sap.ui.model.Filter("BeginDate", sap.ui.model.FilterOperator.GT, oTodayEnd);
		oFilter3 = new sap.ui.model.Filter("EndDate", sap.ui.model.FilterOperator.LT, oTodayBegin);

	}

	var aFilters = [oFilter1, oFilter2, oFilter3];
	var oFilterFinal = new sap.ui.model.Filter(aFilters, bEnd);
	var aFilterFinal = [oFilterFinal];
	return aFilterFinal;

};
}; // end of sap/uiext/inbox/SubstitutionRulesManager.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxAddAttachmentTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.composite.InboxAddAttachmentTile.
jQuery.sap.declare("sap.uiext.inbox.composite.InboxAddAttachmentTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new composite/InboxAddAttachmentTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * InboxAddAttachmentTile
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @name sap.uiext.inbox.composite.InboxAddAttachmentTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.composite.InboxAddAttachmentTile", { metadata : {

	library : "sap.uiext.inbox"
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.composite.InboxAddAttachmentTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.composite.InboxAddAttachmentTile.extend
 * @function
 */

// Start of sap/uiext/inbox/composite/InboxAddAttachmentTile.js
/*!
 * @copyright@
 */

sap.uiext.inbox.composite.InboxAddAttachmentTile.prototype.init = function() {
	this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
};

}; // end of sap/uiext/inbox/composite/InboxAddAttachmentTile.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxAttachmentTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.composite.InboxAttachmentTile.
jQuery.sap.declare("sap.uiext.inbox.composite.InboxAttachmentTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new composite/InboxAttachmentTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFileName fileName} : string</li>
 * <li>{@link #getFileSize fileSize} : string</li>
 * <li>{@link #getFileDescription fileDescription} : string</li>
 * <li>{@link #getFileTypeIcon fileTypeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCreationDate creationDate} : string</li>
 * <li>{@link #getDownloadUrl downloadUrl} : string</li>
 * <li>{@link #getCreatedBy createdBy} : string</li>
 * <li>{@link #getShowDeleteButton showDeleteButton} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uiext.inbox.composite.InboxAttachmentTile#event:deleteAttachment deleteAttachment} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * InboxAttachmentTile
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.composite.InboxAttachmentTile", { metadata : {

	library : "sap.uiext.inbox",
	properties : {

		/**
		 * Name of the attachment
		 */
		"fileName" : {type : "string", group : "", defaultValue : null},

		/**
		 * size of the attachment
		 */
		"fileSize" : {type : "string", group : "", defaultValue : null},

		/**
		 * description of the attachment
		 */
		"fileDescription" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * Icon URI of the file type
		 */
		"fileTypeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},

		/**
		 * creation date of the attachment
		 */
		"creationDate" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * URL for attachment title link to download the attachment.
		 */
		"downloadUrl" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * name of the user who has uploaded attachment
		 */
		"createdBy" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * boolean value to indicate whether to show delete button
		 */
		"showDeleteButton" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {

		/**
		 * fire this event to delete the attachment
		 */
		"deleteAttachment" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.composite.InboxAttachmentTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.composite.InboxAttachmentTile.extend
 * @function
 */

sap.uiext.inbox.composite.InboxAttachmentTile.M_EVENTS = {'deleteAttachment':'deleteAttachment'};


/**
 * Getter for property <code>fileName</code>.
 * Name of the attachment
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>fileName</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#getFileName
 * @function
 */

/**
 * Setter for property <code>fileName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFileName  new value for property <code>fileName</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#setFileName
 * @function
 */


/**
 * Getter for property <code>fileSize</code>.
 * size of the attachment
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>fileSize</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#getFileSize
 * @function
 */

/**
 * Setter for property <code>fileSize</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFileSize  new value for property <code>fileSize</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#setFileSize
 * @function
 */


/**
 * Getter for property <code>fileDescription</code>.
 * description of the attachment
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>fileDescription</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#getFileDescription
 * @function
 */

/**
 * Setter for property <code>fileDescription</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFileDescription  new value for property <code>fileDescription</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#setFileDescription
 * @function
 */


/**
 * Getter for property <code>fileTypeIcon</code>.
 * Icon URI of the file type
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>fileTypeIcon</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#getFileTypeIcon
 * @function
 */

/**
 * Setter for property <code>fileTypeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sFileTypeIcon  new value for property <code>fileTypeIcon</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#setFileTypeIcon
 * @function
 */


/**
 * Getter for property <code>creationDate</code>.
 * creation date of the attachment
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>creationDate</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#getCreationDate
 * @function
 */

/**
 * Setter for property <code>creationDate</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCreationDate  new value for property <code>creationDate</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#setCreationDate
 * @function
 */


/**
 * Getter for property <code>downloadUrl</code>.
 * URL for attachment title link to download the attachment.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>downloadUrl</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#getDownloadUrl
 * @function
 */

/**
 * Setter for property <code>downloadUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDownloadUrl  new value for property <code>downloadUrl</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#setDownloadUrl
 * @function
 */


/**
 * Getter for property <code>createdBy</code>.
 * name of the user who has uploaded attachment
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>createdBy</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#getCreatedBy
 * @function
 */

/**
 * Setter for property <code>createdBy</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCreatedBy  new value for property <code>createdBy</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#setCreatedBy
 * @function
 */


/**
 * Getter for property <code>showDeleteButton</code>.
 * boolean value to indicate whether to show delete button
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showDeleteButton</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#getShowDeleteButton
 * @function
 */

/**
 * Setter for property <code>showDeleteButton</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowDeleteButton  new value for property <code>showDeleteButton</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#setShowDeleteButton
 * @function
 */


/**
 * fire this event to delete the attachment
 *
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#deleteAttachment
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deleteAttachment' event of this <code>sap.uiext.inbox.composite.InboxAttachmentTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.composite.InboxAttachmentTile</code>.<br/> itself. 
 *  
 * fire this event to delete the attachment
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.composite.InboxAttachmentTile</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#attachDeleteAttachment
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deleteAttachment' event of this <code>sap.uiext.inbox.composite.InboxAttachmentTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#detachDeleteAttachment
 * @function
 */

/**
 * Fire event deleteAttachment to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.composite.InboxAttachmentTile#fireDeleteAttachment
 * @function
 */

// Start of sap/uiext/inbox/composite/InboxAttachmentTile.js
/*!
 * @copyright@
 */
 
sap.uiext.inbox.composite.InboxAttachmentTile.prototype.init = function(){
	this.oCore = sap.ui.getCore();
	this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
};

sap.uiext.inbox.composite.InboxAttachmentTile.prototype.onclick = function(oEvent){
	var sTargetId = oEvent.target.getAttribute( 'ID' );

};

}; // end of sap/uiext/inbox/composite/InboxAttachmentTile.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxAttachmentsTileContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.composite.InboxAttachmentsTileContainer.
jQuery.sap.declare("sap.uiext.inbox.composite.InboxAttachmentsTileContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new composite/InboxAttachmentsTileContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getUploadUrl uploadUrl} : string</li>
 * <li>{@link #getFileName fileName} : string</li>
 * <li>{@link #getFileType fileType} : string</li>
 * <li>{@link #getIsFileSelected isFileSelected} : boolean</li>
 * <li>{@link #getEnteredDescription enteredDescription} : string</li>
 * <li>{@link #getShowAddTile showAddTile} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttachments attachments} : sap.uiext.inbox.composite.InboxAttachmentTile[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uiext.inbox.composite.InboxAttachmentsTileContainer#event:uploadButtonPress uploadButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.composite.InboxAttachmentsTileContainer#event:uploadSuccess uploadSuccess} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.composite.InboxAttachmentsTileContainer#event:uploadFailed uploadFailed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * InboxAttachmentsTileContainer
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.composite.InboxAttachmentsTileContainer", { metadata : {

	publicMethods : [
		// methods
		"addUploadHeader", "removeUploadHeader"
	],
	library : "sap.uiext.inbox",
	properties : {

		/**
		 * URL to upload the selected file
		 */
		"uploadUrl" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * name of the selected file for uploading
		 */
		"fileName" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * type of the selected file for uploading
		 */
		"fileType" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * boolean property to indicate if user has selected a file to upload
		 */
		"isFileSelected" : {type : "boolean", group : "Misc", defaultValue : null},

		/**
		 * description string entered by user while uploading a file
		 */
		"enteredDescription" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * boolean value to indicate whether to show Add Attachment tile
		 */
		"showAddTile" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {

		/**
		 * aggregation for attachments tile
		 */
		"attachments" : {type : "sap.uiext.inbox.composite.InboxAttachmentTile", multiple : true, singularName : "attachment"}, 

		/**
		 * aggregation for the first tile in tile container
		 */
		"firstTile" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	events : {

		/**
		 * event is fired to add all the header parameters just before uploading a file
		 */
		"uploadButtonPress" : {}, 

		/**
		 * event is fired when uploading a file is completed successfully
		 */
		"uploadSuccess" : {}, 

		/**
		 * event is fired when uploading a file has failed
		 */
		"uploadFailed" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.composite.InboxAttachmentsTileContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer.extend
 * @function
 */

sap.uiext.inbox.composite.InboxAttachmentsTileContainer.M_EVENTS = {'uploadButtonPress':'uploadButtonPress','uploadSuccess':'uploadSuccess','uploadFailed':'uploadFailed'};


/**
 * Getter for property <code>uploadUrl</code>.
 * URL to upload the selected file
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uploadUrl</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#getUploadUrl
 * @function
 */

/**
 * Setter for property <code>uploadUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUploadUrl  new value for property <code>uploadUrl</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#setUploadUrl
 * @function
 */


/**
 * Getter for property <code>fileName</code>.
 * name of the selected file for uploading
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>fileName</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#getFileName
 * @function
 */

/**
 * Setter for property <code>fileName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFileName  new value for property <code>fileName</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#setFileName
 * @function
 */


/**
 * Getter for property <code>fileType</code>.
 * type of the selected file for uploading
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>fileType</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#getFileType
 * @function
 */

/**
 * Setter for property <code>fileType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFileType  new value for property <code>fileType</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#setFileType
 * @function
 */


/**
 * Getter for property <code>isFileSelected</code>.
 * boolean property to indicate if user has selected a file to upload
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>isFileSelected</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#getIsFileSelected
 * @function
 */

/**
 * Setter for property <code>isFileSelected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bIsFileSelected  new value for property <code>isFileSelected</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#setIsFileSelected
 * @function
 */


/**
 * Getter for property <code>enteredDescription</code>.
 * description string entered by user while uploading a file
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>enteredDescription</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#getEnteredDescription
 * @function
 */

/**
 * Setter for property <code>enteredDescription</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sEnteredDescription  new value for property <code>enteredDescription</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#setEnteredDescription
 * @function
 */


/**
 * Getter for property <code>showAddTile</code>.
 * boolean value to indicate whether to show Add Attachment tile
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showAddTile</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#getShowAddTile
 * @function
 */

/**
 * Setter for property <code>showAddTile</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowAddTile  new value for property <code>showAddTile</code>
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#setShowAddTile
 * @function
 */


/**
 * Getter for aggregation <code>attachments</code>.<br/>
 * aggregation for attachments tile
 * 
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile[]}
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#getAttachments
 * @function
 */


/**
 * Inserts a attachment into the aggregation named <code>attachments</code>.
 *
 * @param {sap.uiext.inbox.composite.InboxAttachmentTile}
 *          oAttachment the attachment to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attachment should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attachment is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attachment is inserted at 
 *             the last position        
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#insertAttachment
 * @function
 */

/**
 * Adds some attachment <code>oAttachment</code> 
 * to the aggregation named <code>attachments</code>.
 *
 * @param {sap.uiext.inbox.composite.InboxAttachmentTile}
 *            oAttachment the attachment to add; if empty, nothing is inserted
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#addAttachment
 * @function
 */

/**
 * Removes an attachment from the aggregation named <code>attachments</code>.
 *
 * @param {int | string | sap.uiext.inbox.composite.InboxAttachmentTile} vAttachment the attachment to remove or its index or id
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile} the removed attachment or null
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#removeAttachment
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>attachments</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.uiext.inbox.composite.InboxAttachmentTile[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#removeAllAttachments
 * @function
 */

/**
 * Checks for the provided <code>sap.uiext.inbox.composite.InboxAttachmentTile</code> in the aggregation named <code>attachments</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.uiext.inbox.composite.InboxAttachmentTile}
 *            oAttachment the attachment whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#indexOfAttachment
 * @function
 */
	

/**
 * Destroys all the attachments in the aggregation 
 * named <code>attachments</code>.
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#destroyAttachments
 * @function
 */


/**
 * event is fired to add all the header parameters just before uploading a file
 *
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#uploadButtonPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'uploadButtonPress' event of this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/> itself. 
 *  
 * event is fired to add all the header parameters just before uploading a file
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#attachUploadButtonPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'uploadButtonPress' event of this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#detachUploadButtonPress
 * @function
 */

/**
 * Fire event uploadButtonPress to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#fireUploadButtonPress
 * @function
 */


/**
 * event is fired when uploading a file is completed successfully
 *
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#uploadSuccess
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'uploadSuccess' event of this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/> itself. 
 *  
 * event is fired when uploading a file is completed successfully
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#attachUploadSuccess
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'uploadSuccess' event of this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#detachUploadSuccess
 * @function
 */

/**
 * Fire event uploadSuccess to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#fireUploadSuccess
 * @function
 */


/**
 * event is fired when uploading a file has failed
 *
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#uploadFailed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'uploadFailed' event of this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/> itself. 
 *  
 * event is fired when uploading a file has failed
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#attachUploadFailed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'uploadFailed' event of this <code>sap.uiext.inbox.composite.InboxAttachmentsTileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#detachUploadFailed
 * @function
 */

/**
 * Fire event uploadFailed to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.composite.InboxAttachmentsTileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#fireUploadFailed
 * @function
 */


/**
 * method to add a header parameter while uploading a file. This method takes header name and header value as input.
 *
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#addUploadHeader
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * method to remove a headerParameter of fileUploader
 *
 * @name sap.uiext.inbox.composite.InboxAttachmentsTileContainer#removeUploadHeader
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/uiext/inbox/composite/InboxAttachmentsTileContainer.js
/*!
 * @copyright@
 */



jQuery.sap.require('sap.ui.commons.MessageBox'); // unlisted dependency retained


sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.init = function(){

	var that = this;
	this.oUtils = sap.uiext.inbox.InboxUtils;
	this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	
	this.oAddAttachmentTile = new sap.uiext.inbox.composite.InboxAddAttachmentTile();
	this.setAggregation("firstTile", this.oAddAttachmentTile);

	this.oUploadAttachmentTile = new sap.uiext.inbox.composite.InboxUploadAttachmentTile();
	
	this.oUploadAttachmentTile.getUploadButton().attachPress(function(oEvent) {
		that.getAggregation("firstTile").setBusy(true);
		that.fireUploadButtonPress();
	});
	
	this.oUploadAttachmentTile.getCancelButton().attachPress(function(oEvent) {
		that.resetFileUploader();
		that.resetFirstTile();
	});
	
	this.oFileUploader = new sap.uiext.inbox.composite.InboxAttachmentFileUploader({
		sendXHR : true,
		
		change : jQuery.proxy(function(oEvent) {
			this.oFileUploader.setUploadUrl(this.getUploadUrl());
			var oFile = this.oFileUploader.oFileUpload.files[0];
			if(oFile && oFile.size === 0){
				this.oFileUploader.setValue("");
				sap.ui.commons.MessageBox.alert(that._oBundle.getText("SIZE_ZERO_ATTACHMENT_ALERT"));
			}
			else{
				this.oUploadAttachmentTile.setFileName(oFile.name).setFileTypeIcon(this.oUtils._getFileTypeIcon(oFile.type));
				this.setAggregation("firstTile", this.oUploadAttachmentTile);
			}
			
		}, this),
		
		uploadComplete : function(oEvent) {
			var statusCode = oEvent.getParameter("status");
			if (statusCode && statusCode == 201) {
				that.fireUploadSuccess({
					"attachmentResponse": oEvent.getParameter("response"), 
					"statusCode": statusCode, 
					"headerParameters": oEvent.getParameter("headerParameters")
				});
			} else {
				that.fireUploadFailed({
					"attachmentResponse": oEvent.getParameter("response"),
					"statusCode": statusCode,
					"securityToken": oEvent.getParameter("x-csrf-token"),
					"headerParameters": oEvent.getParameter("headerParameters")
				});
			}
			that.resetFileUploader();
			that.resetFirstTile();
		}
		
	});
	
};

sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.onclick = function(oEvent){
	if (oEvent.target.id === this.getAggregation("firstTile").getId() + "_textAddAttachment") {
			jQuery.sap.byId(this.oFileUploader.getId() + "-fu").trigger("click");
		}
};

sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.getFileName = function() {
	if (this.getIsFileSelected()) {
		return this.oFileUploader.oFileUpload.files[0].name;
	}
};

sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.getFileType = function() {
	if (this.getIsFileSelected()) {
		return this.oFileUploader.oFileUpload.files[0].type;
	}
};

sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.addUploadHeader = function(sHeaderName, sHeaderValue) {
	this.oFileUploader.addHeaderParameter(new sap.ui.commons.FileUploaderParameter({name: sHeaderName, value: sHeaderValue}));
};

sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.getIsFileSelected = function() {
	return this.oFileUploader.oFileUpload.files.length>0;
};

sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.resetFileUploader = function() {
	this.oFileUploader.setValue("").destroyHeaderParameters();
};

sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.resetFirstTile = function() {
	this.getAggregation("firstTile").setBusy(false);
	this.setAggregation("firstTile", this.oAddAttachmentTile);
};

sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.triggerUpload = function(oEvent){
	this.oFileUploader.upload();
};

sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.removeUploadHeader = function(sHeaderParameter) {
	var that = this;
	jQuery.each(this.oFileUploader.getHeaderParameters(), function(i, oHeader) {
		if (oHeader.getName() === sHeaderParameter)
			that.oFileUploader.removeHeaderParameter(oHeader);
	});
};

/*sap.uiext.inbox.composite.InboxAttachmentsTileContainer.prototype.getEnteredDescription = function() {
	return this.oUploadAttachmentTile.getTextField().getLiveValue();
};
*/
}; // end of sap/uiext/inbox/composite/InboxAttachmentsTileContainer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxBusyIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.composite.InboxBusyIndicator.
jQuery.sap.declare("sap.uiext.inbox.composite.InboxBusyIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new composite/InboxBusyIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * InboxBusyIndicator
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @name sap.uiext.inbox.composite.InboxBusyIndicator
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.composite.InboxBusyIndicator", { metadata : {

	library : "sap.uiext.inbox"
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.composite.InboxBusyIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.composite.InboxBusyIndicator.extend
 * @function
 */

// Start of sap/uiext/inbox/composite/InboxBusyIndicator.js
///**
// * This file defines behavior for the control,
// */
//sap.uiext.inbox.InboxBusyIndicator.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/uiext/inbox/composite/InboxBusyIndicator.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxComment') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.composite.InboxComment.
jQuery.sap.declare("sap.uiext.inbox.composite.InboxComment");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new composite/InboxComment.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSender sender} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getThumbnailSrc thumbnailSrc} : sap.ui.core.URI</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getCreatedBy createdBy} : string</li>
 * <li>{@link #getSapOrigin sapOrigin} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * fsgg
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @name sap.uiext.inbox.composite.InboxComment
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.composite.InboxComment", { metadata : {

	library : "sap.uiext.inbox",
	properties : {

		/**
		 * Sender of the comment chunk
		 */
		"sender" : {type : "string", group : "Data", defaultValue : null},

		/**
		 * Format is ISO 8601 YYYY-MM-DDThh:mm:ss.sZ, Z meaning the time is in UTC time zone
		 */
		"timestamp" : {type : "string", group : "Data", defaultValue : null},

		/**
		 * URL to the thumbnail image.
		 */
		"thumbnailSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},

		/**
		 * The FeedChunk text
		 */
		"text" : {type : "string", group : "Data", defaultValue : null},

		/**
		 * Unique username of the user responsible for adding comment
		 */
		"createdBy" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * Represent system origin in case of multi origin scenario
		 */
		"sapOrigin" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.composite.InboxComment with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.composite.InboxComment.extend
 * @function
 */


/**
 * Getter for property <code>sender</code>.
 * Sender of the comment chunk
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sender</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#getSender
 * @function
 */

/**
 * Setter for property <code>sender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSender  new value for property <code>sender</code>
 * @return {sap.uiext.inbox.composite.InboxComment} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#setSender
 * @function
 */


/**
 * Getter for property <code>timestamp</code>.
 * Format is ISO 8601 YYYY-MM-DDThh:mm:ss.sZ, Z meaning the time is in UTC time zone
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>timestamp</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#getTimestamp
 * @function
 */

/**
 * Setter for property <code>timestamp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTimestamp  new value for property <code>timestamp</code>
 * @return {sap.uiext.inbox.composite.InboxComment} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#setTimestamp
 * @function
 */


/**
 * Getter for property <code>thumbnailSrc</code>.
 * URL to the thumbnail image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>thumbnailSrc</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#getThumbnailSrc
 * @function
 */

/**
 * Setter for property <code>thumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sThumbnailSrc  new value for property <code>thumbnailSrc</code>
 * @return {sap.uiext.inbox.composite.InboxComment} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#setThumbnailSrc
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The FeedChunk text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.uiext.inbox.composite.InboxComment} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#setText
 * @function
 */


/**
 * Getter for property <code>createdBy</code>.
 * Unique username of the user responsible for adding comment
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>createdBy</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#getCreatedBy
 * @function
 */

/**
 * Setter for property <code>createdBy</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCreatedBy  new value for property <code>createdBy</code>
 * @return {sap.uiext.inbox.composite.InboxComment} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#setCreatedBy
 * @function
 */


/**
 * Getter for property <code>sapOrigin</code>.
 * Represent system origin in case of multi origin scenario
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sapOrigin</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#getSapOrigin
 * @function
 */

/**
 * Setter for property <code>sapOrigin</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSapOrigin  new value for property <code>sapOrigin</code>
 * @return {sap.uiext.inbox.composite.InboxComment} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#setSapOrigin
 * @function
 */

// Start of sap/uiext/inbox/composite/InboxComment.js
/**
 * This file defines behavior for the control,
 */
sap.uiext.inbox.composite.InboxComment.prototype.init = function(){
    this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
};

}; // end of sap/uiext/inbox/composite/InboxComment.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxTaskComments') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.composite.InboxTaskComments.
jQuery.sap.declare("sap.uiext.inbox.composite.InboxTaskComments");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new composite/InboxTaskComments.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFeederSender feederSender} : string</li>
 * <li>{@link #getFeederThumbnailSrc feederThumbnailSrc} : sap.ui.core.URI</li>
 * <li>{@link #getShowFeeder showFeeder} : boolean (default: true)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getComments comments} : sap.uiext.inbox.composite.InboxComment[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uiext.inbox.composite.InboxTaskComments#event:commentSubmit commentSubmit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * InboxTaskComments
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.composite.InboxTaskComments", { metadata : {

	library : "sap.uiext.inbox",
	properties : {

		/**
		 * Sender for the comment feeder
		 */
		"feederSender" : {type : "string", group : "Data", defaultValue : null},

		/**
		 * URL to the thumbnail image for the comment feeder.
		 */
		"feederThumbnailSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},

		/**
		 * Boolean value for visibilty of comment feeder
		 */
		"showFeeder" : {type : "boolean", group : "Data", defaultValue : true},

		/**
		 * Boolean value for visibility of header
		 */
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {

		/**
		 * URL to the thumbnail image.
		 */
		"comments" : {type : "sap.uiext.inbox.composite.InboxComment", multiple : true, singularName : "comment"}, 

		/**
		 * aggregation for busy indicator
		 */
		"busyIndicator" : {type : "sap.uiext.inbox.composite.InboxBusyIndicator", multiple : false, visibility : "hidden"}
	},
	events : {

		/**
		 * Event is raised when submit on the feeder is pressed.
		 */
		"commentSubmit" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.composite.InboxTaskComments with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.composite.InboxTaskComments.extend
 * @function
 */

sap.uiext.inbox.composite.InboxTaskComments.M_EVENTS = {'commentSubmit':'commentSubmit'};


/**
 * Getter for property <code>feederSender</code>.
 * Sender for the comment feeder
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>feederSender</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#getFeederSender
 * @function
 */

/**
 * Setter for property <code>feederSender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFeederSender  new value for property <code>feederSender</code>
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#setFeederSender
 * @function
 */


/**
 * Getter for property <code>feederThumbnailSrc</code>.
 * URL to the thumbnail image for the comment feeder.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>feederThumbnailSrc</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#getFeederThumbnailSrc
 * @function
 */

/**
 * Setter for property <code>feederThumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sFeederThumbnailSrc  new value for property <code>feederThumbnailSrc</code>
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#setFeederThumbnailSrc
 * @function
 */


/**
 * Getter for property <code>showFeeder</code>.
 * Boolean value for visibilty of comment feeder
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showFeeder</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#getShowFeeder
 * @function
 */

/**
 * Setter for property <code>showFeeder</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowFeeder  new value for property <code>showFeeder</code>
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#setShowFeeder
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * Boolean value for visibility of header
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#setShowHeader
 * @function
 */


/**
 * Getter for aggregation <code>comments</code>.<br/>
 * URL to the thumbnail image.
 * 
 * @return {sap.uiext.inbox.composite.InboxComment[]}
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#getComments
 * @function
 */


/**
 * Inserts a comment into the aggregation named <code>comments</code>.
 *
 * @param {sap.uiext.inbox.composite.InboxComment}
 *          oComment the comment to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the comment should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the comment is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the comment is inserted at 
 *             the last position        
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#insertComment
 * @function
 */

/**
 * Adds some comment <code>oComment</code> 
 * to the aggregation named <code>comments</code>.
 *
 * @param {sap.uiext.inbox.composite.InboxComment}
 *            oComment the comment to add; if empty, nothing is inserted
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#addComment
 * @function
 */

/**
 * Removes an comment from the aggregation named <code>comments</code>.
 *
 * @param {int | string | sap.uiext.inbox.composite.InboxComment} vComment the comment to remove or its index or id
 * @return {sap.uiext.inbox.composite.InboxComment} the removed comment or null
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#removeComment
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>comments</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.uiext.inbox.composite.InboxComment[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#removeAllComments
 * @function
 */

/**
 * Checks for the provided <code>sap.uiext.inbox.composite.InboxComment</code> in the aggregation named <code>comments</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.uiext.inbox.composite.InboxComment}
 *            oComment the comment whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#indexOfComment
 * @function
 */
	

/**
 * Destroys all the comments in the aggregation 
 * named <code>comments</code>.
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#destroyComments
 * @function
 */


/**
 * Event is raised when submit on the feeder is pressed.
 *
 * @name sap.uiext.inbox.composite.InboxTaskComments#commentSubmit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'commentSubmit' event of this <code>sap.uiext.inbox.composite.InboxTaskComments</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.composite.InboxTaskComments</code>.<br/> itself. 
 *  
 * Event is raised when submit on the feeder is pressed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.composite.InboxTaskComments</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#attachCommentSubmit
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'commentSubmit' event of this <code>sap.uiext.inbox.composite.InboxTaskComments</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#detachCommentSubmit
 * @function
 */

/**
 * Fire event commentSubmit to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.composite.InboxTaskComments#fireCommentSubmit
 * @function
 */

// Start of sap/uiext/inbox/composite/InboxTaskComments.js
/*!
 * @copyright@
 */
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.Feeder'); // unlisted dependency retained



/**
 * This file defines behavior for the control,
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.init = function(){
	this.maxComments = 2; // max. number of comments displayed initially
	this.allComments = false; // initially render only maxComments
	this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	this.initCommentFeeder();
};

sap.uiext.inbox.composite.InboxTaskComments.prototype.initCommentFeeder = function(){
	// create comment feeder if needed
	if (!this.oCommentFeeder) {
		this.oCommentFeeder = new sap.ui.ux3.Feeder( this.getId()+'-InboxTaskCommentFeeder', {
			type: sap.ui.ux3.FeederType.Comment, thumbnailSrc: this.getFeederThumbnailSrc()
		}).setParent(this);
		this.oCommentFeeder.attachEvent('submit', this.handleCommentFeederSubmit, this); // attach event this way to have the right this-reference in handler
		this.showCommentFeeder = true;
	}
};

sap.uiext.inbox.composite.InboxTaskComments.prototype.exit = function(){
	if (this.oCommentFeeder) {
		this.oCommentFeeder.destroy();
		delete this.oCommentFeeder;
	}
	this.rb = undefined;
	this.showCommentFeeder = undefined;
	this.oText = undefined;
};

/**
 * handler for click event
 *
 * @private
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.onclick = function(oEvent){
	var sTargetId = oEvent.target.getAttribute( 'ID' );

	if(sTargetId){
		switch ( sTargetId ){
		case ( this.getId() + '-all' ):
			// Click on sender
			this.showAllComments();
		break;
		}
	}
	oEvent.stopPropagation(); //to prevent comment chunks to propagate event to parentChunk
};

/**
 * After rendering, bind the keyupHandler to the input field of feeder
 * 
 *
 * @private
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.onAfterRendering = function () {
	
	jQuery.sap.byId(this.getId()+'-InboxTaskCommentFeeder'+"-input").bind("keyup",this, this.keyupHandler);
	
};


/**
 * handler for keyup
 *
 * Restrict the number of characters to 500 in a comment
 * @private
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.keyupHandler = function(oEvent){
	var that = oEvent.data;
	var sInputId = that.getId()+'-InboxTaskCommentFeeder'+"-input";
	var sInputText = jQuery.sap.byId(sInputId).text();
	var MAX_CHARACTER_LENGTH_FOR_COMMENTS=500;
	
	if(sInputText.length > MAX_CHARACTER_LENGTH_FOR_COMMENTS)
	{		
		jQuery.sap.byId(sInputId).text(sInputText.slice(0,MAX_CHARACTER_LENGTH_FOR_COMMENTS));		
		that.placeCaretAtEnd(document.getElementById(sInputId));
	}
		
}



	
sap.uiext.inbox.composite.InboxTaskComments.prototype.placeCaretAtEnd = function(commentTextElement) {   //Place cursor at end after the entered text is sliced 
	
	commentTextElement.focus();
	if (typeof window.getSelection != "undefined"
	&& typeof document.createRange != "undefined") 
	{
	var range = document.createRange();
	range.selectNodeContents(commentTextElement);
	range.collapse(false);
	var sel = window.getSelection();
	sel.removeAllRanges();
	sel.addRange(range);
	} 
	
	else if (typeof document.body.createTextRange != "undefined")
	{
	var textRange = document.body.createTextRange();
	textRange.moveToElementText(commentTextElement);
	textRange.collapse(false);
	textRange.select();
	} 
	
};


/**
 * show all comments
 * rerender comment section
 *
 * @private
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.showAllComments = function(){

	this.allComments = !this.allComments;

	var $commentSection = jQuery.sap.byId(this.getId() + " > section"); // use sap function instead of jQuery child selector because of escaping ID
	if ($commentSection.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		this.getRenderer().renderComments(rm, this);
		rm.flush($commentSection[0]);
		rm.destroy();
	}

};

/**
 * Handler for Comment feeder submit event
 *
 * @private
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.handleCommentFeederSubmit = function(oEvent){
	var sSanitizedText = this._sanitizeText(oEvent.getParameter('text'));
	//this behavior is different from the actual Feedchunk, because we need to add the comment first before displaying the comment.
	this.fireCommentSubmit({text: sSanitizedText});
};

/*
 * Overwrite standard getter for feeder thumbnail source:
 * If not set and feedChunk is child of a Feed or FeedChunk use the thumbnailsource of the parent
 * So it must not be set manual for each sub-control and is always synchron
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.setFeederThumbnailSrc = function(value) {
	this.setProperty("feederThumbnailSrc", value);

	if (this.oCommentFeeder) {
		this.oCommentFeeder.setThumbnailSrc(value);
	}
};


/*
 * Overwrite generated function
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.insertComment = function(oComment, iIndex) {

	this.insertAggregation("comments", oComment, iIndex);
	this.initCommentFeeder();
	return this;

};

sap.uiext.inbox.composite.InboxTaskComments.prototype.addComment = function(oComment) {

	this.addAggregation("comments", oComment);
	this.initCommentFeeder();
	return this;

};

sap.uiext.inbox.composite.InboxTaskComments.prototype._sanitizeText = function(sText) {
	//sText = jQuery.trim(sText);
	
	var sSanitizedText = jQuery.sap._sanitizeHTML(sText);
	return sSanitizedText.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
		
};

sap.uiext.inbox.composite.InboxTaskComments.prototype.showBusy = function(bShowBusy) {
	if(bShowBusy) {
		var oBusyIndicator =  new sap.uiext.inbox.composite.InboxBusyIndicator();
		oBusyIndicator.setBusy(true);
		this.setAggregation('busyIndicator',oBusyIndicator);
	} else {
		this.destroyAggregation('busyIndicator');
	}
};
}; // end of sap/uiext/inbox/composite/InboxTaskComments.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxTaskTitleControl') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.composite.InboxTaskTitleControl.
jQuery.sap.declare("sap.uiext.inbox.composite.InboxTaskTitleControl");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new composite/InboxTaskTitleControl.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTaskTitle taskTitle} : string</li>
 * <li>{@link #getCategoryIconURI categoryIconURI} : sap.ui.core.URI (default: 'hasCategory')</li>
 * <li>{@link #getHasAttachments hasAttachments} : boolean</li>
 * <li>{@link #getHasComments hasComments} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTitleLink titleLink} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * InboxTaskTitleControl
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.composite.InboxTaskTitleControl", { metadata : {

	library : "sap.uiext.inbox",
	properties : {

		/**
		 * The Task Title of the Task
		 */
		"taskTitle" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * Category icon
		 */
		"categoryIconURI" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : 'hasCategory'},

		/**
		 * has Attachments
		 */
		"hasAttachments" : {type : "boolean", group : "Misc", defaultValue : null},

		/**
		 * has Comments
		 */
		"hasComments" : {type : "boolean", group : "Misc", defaultValue : null}
	},
	aggregations : {

		/**
		 * Internal aggregation to hold the inner Task Title Link
		 */
		"titleLink" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.composite.InboxTaskTitleControl with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl.extend
 * @function
 */


/**
 * Getter for property <code>taskTitle</code>.
 * The Task Title of the Task
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>taskTitle</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#getTaskTitle
 * @function
 */

/**
 * Setter for property <code>taskTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTaskTitle  new value for property <code>taskTitle</code>
 * @return {sap.uiext.inbox.composite.InboxTaskTitleControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#setTaskTitle
 * @function
 */


/**
 * Getter for property <code>categoryIconURI</code>.
 * Category icon
 *
 * Default value is <code>hasCategory</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>categoryIconURI</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#getCategoryIconURI
 * @function
 */

/**
 * Setter for property <code>categoryIconURI</code>.
 *
 * Default value is <code>hasCategory</code> 
 *
 * @param {sap.ui.core.URI} sCategoryIconURI  new value for property <code>categoryIconURI</code>
 * @return {sap.uiext.inbox.composite.InboxTaskTitleControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#setCategoryIconURI
 * @function
 */


/**
 * Getter for property <code>hasAttachments</code>.
 * has Attachments
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>hasAttachments</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#getHasAttachments
 * @function
 */

/**
 * Setter for property <code>hasAttachments</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bHasAttachments  new value for property <code>hasAttachments</code>
 * @return {sap.uiext.inbox.composite.InboxTaskTitleControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#setHasAttachments
 * @function
 */


/**
 * Getter for property <code>hasComments</code>.
 * has Comments
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>hasComments</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#getHasComments
 * @function
 */

/**
 * Setter for property <code>hasComments</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bHasComments  new value for property <code>hasComments</code>
 * @return {sap.uiext.inbox.composite.InboxTaskTitleControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#setHasComments
 * @function
 */


/**
 * Getter for aggregation <code>titleLink</code>.<br/>
 * Internal aggregation to hold the inner Task Title Link
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#getTitleLink
 * @function
 */


/**
 * Setter for the aggregated <code>titleLink</code>.
 * @param {sap.ui.core.Control} oTitleLink
 * @return {sap.uiext.inbox.composite.InboxTaskTitleControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#setTitleLink
 * @function
 */
	

/**
 * Destroys the titleLink in the aggregation 
 * named <code>titleLink</code>.
 * @return {sap.uiext.inbox.composite.InboxTaskTitleControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskTitleControl#destroyTitleLink
 * @function
 */

// Start of sap/uiext/inbox/composite/InboxTaskTitleControl.js
/*!
 * @copyright@
 */

///**
// * This file defines behavior for the control,
// */
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.uiext.inbox.composite.InboxTaskTitleControl.prototype.init = function(){
	//var that = this;
	//this.setAggregation("titleLink", new sap.ui.commons.Link());
};


sap.uiext.inbox.composite.InboxTaskTitleControl.prototype.setTaskTitle = function(sValue){
    this.setProperty("taskTitle", sValue, true /*no re-rendering of whole search field needed*/);
    this.getAggregation("titleLink").setText(sValue); // Note: this triggers re-rendering of text field!
};

sap.uiext.inbox.composite.InboxTaskTitleControl.prototype.setTooltip = function(sValue){
    this.setProperty("taskTitle", sValue, true /*no re-rendering of whole search field needed*/);
    this.getAggregation("titleLink").setTooltip(sValue); // Note: this triggers re-rendering of text field!
};
}; // end of sap/uiext/inbox/composite/InboxTaskTitleControl.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxUploadAttachmentTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.composite.InboxUploadAttachmentTile.
jQuery.sap.declare("sap.uiext.inbox.composite.InboxUploadAttachmentTile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new composite/InboxUploadAttachmentTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFileName fileName} : string</li>
 * <li>{@link #getFileTypeIcon fileTypeIcon} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uiext.inbox.composite.InboxUploadAttachmentTile#event:uploadSelectedFile uploadSelectedFile} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * InboxUploadAttachmentTile
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @name sap.uiext.inbox.composite.InboxUploadAttachmentTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.composite.InboxUploadAttachmentTile", { metadata : {

	library : "sap.uiext.inbox",
	properties : {

		/**
		 * name of the selected file
		 */
		"fileName" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * icon URI of the selected file type
		 */
		"fileTypeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null}
	},
	events : {

		/**
		 * event is fired when upload for selected file is requested
		 */
		"uploadSelectedFile" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.composite.InboxUploadAttachmentTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.composite.InboxUploadAttachmentTile.extend
 * @function
 */

sap.uiext.inbox.composite.InboxUploadAttachmentTile.M_EVENTS = {'uploadSelectedFile':'uploadSelectedFile'};


/**
 * Getter for property <code>fileName</code>.
 * name of the selected file
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>fileName</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxUploadAttachmentTile#getFileName
 * @function
 */

/**
 * Setter for property <code>fileName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFileName  new value for property <code>fileName</code>
 * @return {sap.uiext.inbox.composite.InboxUploadAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxUploadAttachmentTile#setFileName
 * @function
 */


/**
 * Getter for property <code>fileTypeIcon</code>.
 * icon URI of the selected file type
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>fileTypeIcon</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxUploadAttachmentTile#getFileTypeIcon
 * @function
 */

/**
 * Setter for property <code>fileTypeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sFileTypeIcon  new value for property <code>fileTypeIcon</code>
 * @return {sap.uiext.inbox.composite.InboxUploadAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxUploadAttachmentTile#setFileTypeIcon
 * @function
 */


/**
 * event is fired when upload for selected file is requested
 *
 * @name sap.uiext.inbox.composite.InboxUploadAttachmentTile#uploadSelectedFile
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'uploadSelectedFile' event of this <code>sap.uiext.inbox.composite.InboxUploadAttachmentTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.composite.InboxUploadAttachmentTile</code>.<br/> itself. 
 *  
 * event is fired when upload for selected file is requested
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.composite.InboxUploadAttachmentTile</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.composite.InboxUploadAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxUploadAttachmentTile#attachUploadSelectedFile
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'uploadSelectedFile' event of this <code>sap.uiext.inbox.composite.InboxUploadAttachmentTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.composite.InboxUploadAttachmentTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxUploadAttachmentTile#detachUploadSelectedFile
 * @function
 */

/**
 * Fire event uploadSelectedFile to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.composite.InboxUploadAttachmentTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.composite.InboxUploadAttachmentTile#fireUploadSelectedFile
 * @function
 */

// Start of sap/uiext/inbox/composite/InboxUploadAttachmentTile.js
/*!
 * @copyright@
 */

sap.uiext.inbox.composite.InboxUploadAttachmentTile.prototype.init = function(){
	var that = this;
	this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	
	this.oUploadButton = new sap.ui.commons.Button({
		tooltip : that._oBundle.getText("INBOX_UPLOAD_ATTACHMENT"),
		text : that._oBundle.getText("INBOX_UPLOAD_ATTACHMENT_TOOLTIP")
	});
	
	/*this.oTextField = new sap.ui.commons.TextField({
		tooltip : that._oBundle.getText("INBOX_ATTACHMENT_DESCRIPTION"),
		placeholder : that._oBundle.getText("INBOX_ATTACHMENT_DESCRIPTION_TOOLTIP"),
		width : "160px"
	});*/
	
	this.oCancelButton = new sap.ui.commons.Button({
		text : that._oBundle.getText("INBOX_CANCEL_TEXT"),
		tooltip : that._oBundle.getText("INBOX_CANCEL_TEXT"),
	});
};

sap.uiext.inbox.composite.InboxUploadAttachmentTile.prototype.onAfterRendering = function(){
	var oFocusRef = this.oUploadButton.getFocusDomRef();
	if (oFocusRef) {
		jQuery.sap.focus(oFocusRef);
	}
};

sap.uiext.inbox.composite.InboxUploadAttachmentTile.prototype.getUploadButton = function(){
	return this.oUploadButton;
};

sap.uiext.inbox.composite.InboxUploadAttachmentTile.prototype.getCancelButton = function(){
	return this.oCancelButton;
};

/*sap.uiext.inbox.composite.InboxUploadAttachmentTile.prototype.getTextField = function(){
	return this.oTextField;
};*/
}; // end of sap/uiext/inbox/composite/InboxUploadAttachmentTile.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.tcm.fI.TCMFunctionImport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// Utility functions for TCMFunctionImport calls
jQuery.sap.declare("sap.uiext.inbox.tcm.fI.TCMFunctionImport");



/*global OData */// declare unusual global vars for JSLint/SAPUI5 validation
sap.ui.base.Object.extend("sap.uiext.inbox.tcm.fI.TCMFunctionImport",{ 
	
    constructor : function() {
      
       sap.ui.base.Object.apply(this);
       this.sTcmServiceURL= undefined;
       this.oHeaders = {};
       this.ofIMetadata =  sap.uiext.inbox.tcm.fI.TCMFunctionImportMetaData;
    }

});

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype.setHeaders = function(mHeaders) {
	this.oHeaders = mHeaders;
};

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype.getHeaders = function() {
    return this.oHeaders;
};

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype.setServiceURL = function(sServiceURL) {
	this.sTcmServiceURL = sServiceURL;
};

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype.getServiceURL = function() {
    return this.sTcmServiceURL;
};

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype.callSearchUsers = function(params, fnSuccess, fnError){
	var oSearchUsersFIMetadata = this.ofIMetadata.SEARCHUSERS;
	var aUrlParams = this._createURLParamsArray(params, oSearchUsersFIMetadata);
	var request = this._createRequest(oSearchUsersFIMetadata.name, aUrlParams, true, oSearchUsersFIMetadata.httpMethod);
	return OData.request(request, fnSuccess, fnError);
};


sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype._createURLParamsArray = function(params, oFIMetadata){
	var that = this;
	var oFIParamsMetaData = oFIMetadata.params, aURLParams = [], sUrlParam;
	var sFIParamName, sFIParamType, vParamValue;
	jQuery.each(oFIParamsMetaData,function(index,oFIParamMetaData){
		sFIParamName = oFIParamMetaData.name;
		sFIParamType = oFIParamMetaData.type;
		vParamValue = params[sFIParamName];
		if(vParamValue){
			sUrlParam = sFIParamName + "=" + that._formatParamValue(vParamValue,sFIParamType);
			aURLParams.push(sUrlParam);
		}else{
			if(oFIParamMetaData.nullable){
				jQuery.sap.log.warning('No parameter Value provided for a non nullable input paramater for function Import:' + oFIMetadata.name);
			}
		}
	});
	return aURLParams;
};

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype._createRequest = function(sPath, aUrlParams, bAsync, httpMethod) {

    // create the url for the service
    var sUrl = this.sTcmServiceURL;
    if (sPath) {
        if (!jQuery.sap.startsWith(sPath, "/")) {
            sUrl += "/";
        }
        sUrl += sPath;
    }
    
    if (aUrlParams && aUrlParams.length > 0) {
        sUrl += "?" + aUrlParams.join("&");
    }

    // create a request object for the url, url params and async option
    return {
        requestUri: sUrl,
        headers: this.oHeaders,
        method: httpMethod,
        async: bAsync,
        user: this.sUser,
        password: this.sPassword
    };

};

/**
 * Format a JavaScript value according to the given EDM type
 * http://www.odata.org/documentation/overview#AbstractTypeSystem
 * 
 * @param {any} vValue the value to format
 * @param {string} sType the EDM type (e.g. Edm.Decimal)
 * @return {string} the formatted value
 */
sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype._formatParamValue = function(vParamValue,sFIParamType) {
	// Lazy creation of format objects
	if (!this.oDateTimeFormat) {
		this.oDateTimeFormat = sap.ui.core.format.DateFormat.getDateInstance({
			pattern: "'datetime'''yyyy-MM-dd'T'HH:mm:ss''"
		});
		this.oDateTimeOffsetFormat = sap.ui.core.format.DateFormat.getDateInstance({
			pattern: "'datetimeoffset'''yyyy-MM-dd'T'HH:mm:ss'Z'''"
		});
		this.oTimeFormat = sap.ui.core.format.DateFormat.getTimeInstance({
			pattern: "'time'''HH:mm:ss''"
		});
	}

	// Format according to the given type
	var sFormattedParamValue;
	switch(sFIParamType) {
		case "Edm.String":
			// quote
			sFormattedParamValue = "'" + String(vParamValue).replace(/'/g, "''") + "'";
			break;
		case "Edm.Time":
			sFormattedParamValue = "time'" + vParamValue + "'";
			break;			
		case "Edm.DateTime":
			sFormattedParamValue = this.oDateTimeFormat.format(new Date(vParamValue), true);
			break;
		case "Edm.DateTimeOffset":
			sFormattedParamValue = this.oDateTimeOffsetFormat.format(new Date(vParamValue), true);
			break;
		case "Edm.Guid":
			sFormattedParamValue = "guid'" + vParamValue + "'";
			break;
		case "Edm.Decimal":
			sFormattedParamValue = vParamValue + "M";
			break;
		case "Edm.Int64":
			sFormattedParamValue = vParamValue + "L";
			break;
		case "Edm.Single":
			sFormattedParamValue = vParamValue + "f";
			break;				
		case "Edm.Binary":
			sFormattedParamValue = "binary'" + vParamValue + "'";
			break;
		default: 
			sFormattedParamValue = new String(vParamValue);
			break;
	}
	return sFormattedParamValue;
};
}; // end of sap/uiext/inbox/tcm/fI/TCMFunctionImport.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxFilters') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
// Provides a filter for list bindings
	jQuery.sap.declare("sap.uiext.inbox.InboxFilters");
	
	
	
		
	/**
	 * Constructor for InboxFilters
	 *
	 * @class
	 * PreDefined Filters for Inbox
	 * 
	 *  @public
	 *  @name sap.uiext.inbox.InboxFilters
	 */
	
	sap.ui.base.Object.extend("sap.uiext.inbox.InboxFilters",{
			
			    constructor : function() {
			
			        sap.ui.base.Object.apply(this);
			
			        this.oPrimaryFilter = undefined;
			        this.oSecondaryFilter = undefined;
			        this.inboxUtils = sap.uiext.inbox.InboxUtils;
			    }
			
		});
	
	/**
	 * 
	 * Setter for the Primary filters to be applied
	 * 
	 * @name sap.uiext.inbox.InboxFilters.prototype.setPrimaryFilter
	 * @function
	 * @param {sap.uiext.inbox.InboxPrimaryFilters} 
	 *         oPrimaryFilter
	 *         
	 * @public
	 * 
	 */
	sap.uiext.inbox.InboxFilters.prototype.setPrimaryFilter = function(oPrimaryFilter){
		//TODO: add type checking..
		if(oPrimaryFilter instanceof  sap.uiext.inbox.InboxPrimaryFilters){
			this.oPrimaryFilter = oPrimaryFilter;
		}
	};
	
	/**
	 * 
	 * Setter for Secondary filters to be applied
	 * 
	 *  @name sap.uiext.inbox.InboxFilters.prototype.setSecondaryFilter
	 * 	@function
	 * 	@param {sap.uiext.inbox.InboxSecondaryFilters} 
	 *         oSecondaryFilter
	 *         
	 *  @public
	 */
	sap.uiext.inbox.InboxFilters.prototype.setSecondaryFilter = function(oSecondaryFilter){
		if(oSecondaryFilter instanceof  sap.uiext.inbox.InboxSecondaryFilters || oSecondaryFilter instanceof  sap.uiext.inbox.TaskInitialFilters){
			this.oSecondaryFilter = oSecondaryFilter;
		}
	};
	
	/**
	 * 
	 * Getter for Primary filters
	 * 
	 *  @name sap.uiext.inbox.InboxFilters.prototype.getPrimaryFilterr
	 * 	@function
	 * 	  
	 *  @type sap.uiext.inbox.InboxPrimaryFilters
	 *  @public
	 */
	sap.uiext.inbox.InboxFilters.prototype.getPrimaryFilter = function(oPrimaryFilter){
		return this.oPrimaryFilter;
	};
	
	/**
	 * 
	 * Getter for Secondary filters
	 * 
	 *  @name sap.uiext.inbox.InboxFilters.prototype.getSecondaryFilter
	 * 	@function
	 * 	
	 *  @type sap.uiext.inbox.InboxSecondaryFilters       
	 *  @public
	 */
	sap.uiext.inbox.InboxFilters.prototype.getSecondaryFilter = function(oSecondaryFilter){
		return this.oSecondaryFilter;
	};
}; // end of sap/uiext/inbox/InboxFilters.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.tcm.TCMModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.tcm.TCMModel");



//TODO: Enhance this , so that the oDataModel can be set from outside.
//We can then use the ODataModel.create method, so that we do not need to bother about CSRF token.

sap.ui.base.Object.extend("sap.uiext.inbox.tcm.TCMModel",{ 
	
    constructor : function() {
      
       sap.ui.base.Object.apply(this);
       this.oFunctionImport = undefined;
    }

});

sap.uiext.inbox.tcm.TCMModel.prototype.getFunctionImportHandler = function() {
	//TODO: make it singleton
	if(!this.oFunctionImport){
		this.oFunctionImport = new sap.uiext.inbox.tcm.fI.TCMFunctionImport();
	}
	return this.oFunctionImport;
};
}; // end of sap/uiext/inbox/tcm/TCMModel.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.Inbox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.Inbox.
jQuery.sap.declare("sap.uiext.inbox.Inbox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Inbox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTaskExecutionURLThemeValue taskExecutionURLThemeValue} : string</li>
 * <li>{@link #getHandleBindings handleBindings} : boolean (default: true)</li>
 * <li>{@link #getOpenCompletedTasks openCompletedTasks} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uiext.inbox.Inbox#event:oDataRequestCompleted oDataRequestCompleted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.Inbox#event:refresh refresh} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.Inbox#event:taskAction taskAction} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.Inbox#event:taskSelectionChange taskSelectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A comprehensive UI design approach with graphical and functional elements for search tasks, filter tasks, and take actions on the tasks
 * ("Inbox Pattern").
 * @extends sap.ui.core.Control
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @experimental Since version 1.5.2. 
 * API is not yet finished and might change completely
 * @name sap.uiext.inbox.Inbox
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uiext.inbox.Inbox", { metadata : {

	deprecated : true,
	publicMethods : [
		// methods
		"clearDrillDownFilter", "clearRowSettings", "bindTaskTable", "getTaskTableBinding", "bindTaskExecutionURL", "bindTaskTypeDynamicFilter", "bindSearch", "setSubstitutionEnabled", "getSubstitutionEnabled", "bindTasks", "setConfiguration", "setOpenTaskUIInNewTab", "addAction", "refresh"
	],
	library : "sap.uiext.inbox",
	properties : {

		/**
		 * set the theme URL parameter string to be appended to the task Execution URL. In case of a function callback set for Task Execution PopUp, this string will not be appended.
		 */
		"taskExecutionURLThemeValue" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * set this as true for oData Model. If set as false, the user will need to handle task Actions, search and Task Execution URL population. See function call back methods.
		 */
		"handleBindings" : {type : "boolean", group : "Misc", defaultValue : true},

		/**
		 * set this to true to enable opening of completed tasks.
		 */
		"openCompletedTasks" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {

		/**
		 * If handleBindings property is set to true , the control assumes an oData model is set and handles the complete logic within. In this case once the oData request is complete, this event is fired with additional parameters.
		 */
		"oDataRequestCompleted" : {}, 

		/**
		 * this event is fires to handle refresh Action, when the handleBindings property is set to false.
		 */
		"refresh" : {}, 

		/**
		 * this event is fires to handle task Actions - Claim, Release, when the handleBindings property is set to false.
		 */
		"taskAction" : {}, 

		/**
		 * This event is fired when table row selection is changed in the list view of Inbox control
		 */
		"taskSelectionChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.Inbox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.Inbox.extend
 * @function
 */

sap.uiext.inbox.Inbox.M_EVENTS = {'oDataRequestCompleted':'oDataRequestCompleted','refresh':'refresh','taskAction':'taskAction','taskSelectionChange':'taskSelectionChange'};


/**
 * Getter for property <code>taskExecutionURLThemeValue</code>.
 * set the theme URL parameter string to be appended to the task Execution URL. In case of a function callback set for Task Execution PopUp, this string will not be appended.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>taskExecutionURLThemeValue</code>
 * @public
 * @name sap.uiext.inbox.Inbox#getTaskExecutionURLThemeValue
 * @function
 */

/**
 * Setter for property <code>taskExecutionURLThemeValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTaskExecutionURLThemeValue  new value for property <code>taskExecutionURLThemeValue</code>
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#setTaskExecutionURLThemeValue
 * @function
 */


/**
 * Getter for property <code>handleBindings</code>.
 * set this as true for oData Model. If set as false, the user will need to handle task Actions, search and Task Execution URL population. See function call back methods.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>handleBindings</code>
 * @public
 * @name sap.uiext.inbox.Inbox#getHandleBindings
 * @function
 */

/**
 * Setter for property <code>handleBindings</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHandleBindings  new value for property <code>handleBindings</code>
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#setHandleBindings
 * @function
 */


/**
 * Getter for property <code>openCompletedTasks</code>.
 * set this to true to enable opening of completed tasks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>openCompletedTasks</code>
 * @public
 * @name sap.uiext.inbox.Inbox#getOpenCompletedTasks
 * @function
 */

/**
 * Setter for property <code>openCompletedTasks</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bOpenCompletedTasks  new value for property <code>openCompletedTasks</code>
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#setOpenCompletedTasks
 * @function
 */


/**
 * If handleBindings property is set to true , the control assumes an oData model is set and handles the complete logic within. In this case once the oData request is complete, this event is fired with additional parameters.
 *
 * @name sap.uiext.inbox.Inbox#oDataRequestCompleted
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'oDataRequestCompleted' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself. 
 *  
 * If handleBindings property is set to true , the control assumes an oData model is set and handles the complete logic within. In this case once the oData request is complete, this event is fired with additional parameters.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#attachODataRequestCompleted
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'oDataRequestCompleted' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#detachODataRequestCompleted
 * @function
 */

/**
 * Fire event oDataRequestCompleted to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.Inbox#fireODataRequestCompleted
 * @function
 */


/**
 * this event is fires to handle refresh Action, when the handleBindings property is set to false.
 *
 * @name sap.uiext.inbox.Inbox#refresh
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself. 
 *  
 * this event is fires to handle refresh Action, when the handleBindings property is set to false.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#attachRefresh
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#detachRefresh
 * @function
 */

/**
 * Fire event refresh to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.Inbox#fireRefresh
 * @function
 */


/**
 * this event is fires to handle task Actions - Claim, Release, when the handleBindings property is set to false.
 *
 * @name sap.uiext.inbox.Inbox#taskAction
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'taskAction' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself. 
 *  
 * this event is fires to handle task Actions - Claim, Release, when the handleBindings property is set to false.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#attachTaskAction
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'taskAction' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#detachTaskAction
 * @function
 */

/**
 * Fire event taskAction to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.Inbox#fireTaskAction
 * @function
 */


/**
 * This event is fired when table row selection is changed in the list view of Inbox control
 *
 * @name sap.uiext.inbox.Inbox#taskSelectionChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'taskSelectionChange' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself. 
 *  
 * This event is fired when table row selection is changed in the list view of Inbox control
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#attachTaskSelectionChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'taskSelectionChange' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#detachTaskSelectionChange
 * @function
 */

/**
 * Fire event taskSelectionChange to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.Inbox#fireTaskSelectionChange
 * @function
 */


/**
 * Clears all the filters applied in Drill Down. (Status, Priority, Date/Time and TaskType).
 *
 * @name sap.uiext.inbox.Inbox#clearDrillDownFilter
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Row Settings applied using the Settings button shall be cleared. <TO be Implemented>
 *
 * @name sap.uiext.inbox.Inbox#clearRowSettings
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Binds the Task Table Rows to the given path.
 *
 * @name sap.uiext.inbox.Inbox#bindTaskTable
 * @function
 * @param {string} sPath
 *         Binding path for the rows of the Task Table
 * @param {object} oTaskFilters
 *         Predefined filter for the Task Table (sap.uiext.inbox.TaskInitialFilters)
 * @type sap.uiext.inbox.Inbox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * returns the binding for the Task Table
 *
 * @name sap.uiext.inbox.Inbox#getTaskTableBinding
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Registers a callback function to be invoked to populate the Task Execution PopUp.
 *
 * @name sap.uiext.inbox.Inbox#bindTaskExecutionURL
 * @function
 * @param {object} oId
 *         callback function for getting the execution URL, will be supplied with the task ID and should return the URL to be displayed with the Task Execution PopUp.
 * @param {object} oStatus
 *         callback function for getting the status of the task, will be supplied with the task ID and should return the Task Status.
 * @type sap.uiext.inbox.Inbox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Registers a callback function to be invoked to populate the TaskType Drill Down.
 * This should return the array of Values to be populated in the Task Type Drill Down.
 *
 * @name sap.uiext.inbox.Inbox#bindTaskTypeDynamicFilter
 * @function
 * @type sap.uiext.inbox.Inbox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Registers a callback function to be invoked to search on the Task Table.
 *
 * @name sap.uiext.inbox.Inbox#bindSearch
 * @function
 * @type sap.uiext.inbox.Inbox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Setter for property isSubstitutionEnabled.
 * 
 * Boolean property to enable the sap.uiext.inbox.SubstitutionRulesManager control (default is false). If set to true, 'Manage Substitution Rules' is visible in settings button, else if set to false the option will not be visible under settings.
 * 
 * Default value is false
 *
 * @name sap.uiext.inbox.Inbox#setSubstitutionEnabled
 * @function
 * @param {boolean} bIsSubstitutionEnabled
 *         isSubstitutionEnabled
 * @param {string} sPath
 *         the path
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Getter for property isSubstitutionEnabled.
 * 
 * Boolean property to enable the sap.uiext.inbox.SubstitutionRulesManager control (default is false). If is true, 'Manage Substitution Rules' is visible in settings button, else if it is false the option will not be visible under settings.
 * 
 * Default value is false
 *
 * @name sap.uiext.inbox.Inbox#getSubstitutionEnabled
 * @function
 * @type boolean
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Bind the Inbox Task Collection
 *
 * @name sap.uiext.inbox.Inbox#bindTasks
 * @function
 * @param {string} sPath
 *         Binding path for the element displaying the tasks within the Inbox. This path is the Task Collection according to the TCM (Task Consumption Model)
 * @param {object} oOFilter
 *         Predefined filter that is applied to the Task Collection before displaying the tasks in the Inbox. (sap.uiext.inbox.InboxFilters)
 * @param {object} oOSorter
 *         {sap.ui.model.Sorter}Predefined sorter that is applied to the Task Collection before displaying the tasks in the Inbox. By default the tasks are sorted on 'CreatedOn' , descending, according to TCM.
 * 
 *         The sorter is not validated for the path being a valid TCM Entity Property. The sorter passed will be applied to the oData service as is. In case the entity Property in the path is a sortable property on the UI, the sorter indicator for that property will be visible.
 * @type sap.uiext.inbox.Inbox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Set configuration on Inbox. See APIs in InboxConfiguration
 *
 * @name sap.uiext.inbox.Inbox#setConfiguration
 * @function
 * @param {object} oOConfiguration
 *         Configuration object to set the configuration on Inbox. See APIs in InboxConfiguration
 * @type sap.uiext.inbox.Inbox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Setter for property bOpenTaskUIInNewTab.
 * If set to true, Task UI will opene in a new tab.
 * Default value is false.
 *
 * @name sap.uiext.inbox.Inbox#setOpenTaskUIInNewTab
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Adds an additional action to inbox
 *
 * @name sap.uiext.inbox.Inbox#addAction
 * @function
 * @param {string} sSActionID
 *         ID of the new action.
 * @param {string} sSActionLabel
 *         The Label Text for the new action.
 * @param {string} sSToolTip
 *         Tooltip for the added action.
 * @param {object} oFnActionHandler
 *         Function to be called when the action is executed
 * @param {boolean} bBMassEnabled
 *         Flag indicating if the action is mass enabled.Default value is true.
 * @type sap.uiext.inbox.Inbox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Inbox is refreshed if task is completed
 *
 * @name sap.uiext.inbox.Inbox#refresh
 * @function
 * @param {object[]} aATaskUniqueIdentifiers
 *         Array of Json objects containing TaskInstanceID and SAP__Origin
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/uiext/inbox/Inbox.js
/*!
 * @copyright@
 */

/**
 * Constructor for a new Inbox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTaskExecutionURLThemeValue taskExecutionURLThemeValue} : string</li>
 * <li>{@link #getHandleBindings handleBindings} : boolean (default: true)</li>
 * <li>{@link #getOpenCompletedTasks openCompletedTasks} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uiext.inbox.Inbox#event:oDataRequestCompleted oDataRequestCompleted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.Inbox#event:refresh refresh} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.Inbox#event:taskAction taskAction} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.Inbox#event:taskSelectionChange taskSelectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A comprehensive UI design approach with graphical and functional elements for search tasks, filter tasks, and take actions on the tasks
 * ("Inbox Pattern").
 * @extends sap.ui.core.Control
 * @version 1.41.0-SNAPSHOT
 *
 * @constructor
 * @public
 * @experimental Since version 1.5.2. 
 * API is not yet finished and might change completely
 * @deprecated Since version 1.38.0
 * @name sap.uiext.inbox.Inbox
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */













jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


jQuery.sap.require('sap.ui.commons.layout.MatrixLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Image'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.ToggleButton'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.DropdownBox'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.SearchField'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Toolbar'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.TextView'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.ToolbarSeparator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Link'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.TextField'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.layout.BorderLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.layout.HorizontalLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.layout.VerticalLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.RadioButtonGroup'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Dialog'); // unlisted dependency retained




jQuery.sap.require('sap.ui.ux3.FacetFilter'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.FacetFilterList'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.OverlayContainer'); // unlisted dependency retained


jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained


jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained

jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained


/*global OData */// declare unusual global vars for JSLint/SAPUI5 validation
// /**
// * This file defines behavior for the control,
// */
sap.uiext.inbox.Inbox.prototype.init = function() {
	//initialize inboxUtils, inboxConstants, resource bundle and other bootstrapping
	this.oTcmMetadata= new sap.uiext.inbox.TCMMetadata();
	this.oTCMModel = new sap.uiext.inbox.tcm.TCMModel();
	this.inboxUtils = sap.uiext.inbox.InboxUtils;
	this.constants = sap.uiext.inbox.InboxConstants;
	this.oDataManager = sap.uiext.inbox.InboxDataManager;
	this.oCore = sap.ui.getCore();
	this._oBundle = this.oCore.getLibraryResourceBundle("sap.uiext.inbox");
	
	var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
	this._imgResourcePath = sap.ui.resource('sap.uiext.inbox', 'themes/' + sCurrentTheme + '/img/');
	
	//check for URL Parameter for the defaultView rendering.
	var oUriParams = jQuery.sap.getUriParameters();
	var defaultView_URLParam = this.constants.defaultView_URLParameter;
	var sURLViewValue = oUriParams.get(defaultView_URLParam);
    if(sURLViewValue === null){
    	var cookieValue = this.inboxUtils.getCookieValue(defaultView_URLParam);
        this.defaultView  =  cookieValue !== undefined ? cookieValue : this.constants.tableView;
    }else{
    	this.defaultView = jQuery.inArray(sURLViewValue, this.constants.inboxViews) === -1 ? this.constants.tableView : sURLViewValue;
    	this.inboxUtils.setCookieValue (defaultView_URLParam,this.defaultView,1);
    }
    var oConfig = {};
    oConfig.bAsyncValue = (oUriParams.get(this.constants.async_URLParameter) === "true") ? true : false;
    this.oController = new sap.uiext.inbox.controller.InboxControllerFactory(oConfig).getController();
    this.oController.setView(this);
    
    var sClientUpdateValue = oUriParams.get("sap-ui-inbox-clientUpdate");
    if (sClientUpdateValue) {
    	sClientUpdateValue = sClientUpdateValue.toLowerCase();
	}
    if(sClientUpdateValue && sClientUpdateValue === 'true'){
        this.clientUpdate = true;
    }

    //TODO: this does not seem to be required anymore, as the status and priority mappings on GW side are in place. Remove and Test.
    this.sProviderHost = "";
    
    this.bRefreshTaskTypes = true;
    this.selectedContexts = [];
    
    //Model binding related stuff
    this.sTypeOfModel = "";
    this.bpmSvcUrl = "";
    
   // Url Parameters
    var tableViewRowCount_URLParam = this.constants.tableViewRowCount_URLParameter;
    this.tableViewRowCountValue = oUriParams.get(tableViewRowCount_URLParam);
    var rrViewRowCount_URLParam = this.constants.rrViewRowCount_URLParameter;
    this.rrViewRowCountValue = oUriParams.get(rrViewRowCount_URLParam);
   
    //enable/Disable some features in Inbox
    this.applyTaskCategoryFilter = false; // flag to enable category facet filter
    this.isSubstitutionEnabled = false;
    this.isSubstitutionRuleCreationSupported=false;
    this.isCustomAttributesEnabled = false;
    this.isCustomActionsEnabled = false;
    this.showTaskDescription = false;
    this.showTaskCategory = true;//TODO: Make it false and later handle in Inbox
    this.isBatchOperationSupported = true;
    this.isForwardActionEnabled = false;
    this.isCommentsEnabled = false;
    this.bOpenTaskUIInNewTab = true;// If false open Task Execution UI in overlay container else if its true opens in new browser tab.
    this.bUseBatch  = false;
    this.bAllowCustomAttributeSort = true;
    
    /* Set the following flag to true if filtering for tasks with null values for due date is supported. 
     * Setting it to true will add one more option in the due date filter "No Due Date".
     * */
    this.bShowNoDueDateFilter = false;
    
    this.loggedInUserName;
    this.loggedInUserDisplayName;
    //this.initialLoad = true;
    this._substitutionPath = "";
    // default value
    this.sCollectionPath = "TaskCollection";
    this.filtersToApply = {};
    this.filterState = {};
    
    this.resetMessages = true;
    //this.attachTaskAction(this, this.defaultActionHandler);
    this.httpMethodForAction = 'POST';
    this.currentView = this.defaultView;
    this.bRefreshStartFlag = false;
    
    //flag to check Search User request is fired.
    
    this.oPendingSearchRequest = undefined; 
    
    //default callbacks 
    this.getDefaultTaskExecutionURLCallBack = function(id,sapOriginId) {
        // var IDURIPart = "getTaskExecutionUrl"+"?ID='"+ id +"'&$format=json";
        var IDURIPart = this.sCollectionPath + "(InstanceID='" + id + "',SAP__Origin='" + sapOriginId + "')/UIExecutionLink?$format=json";
        var requestURI = this.bpmSvcUrl + IDURIPart;
        var url = "";
        var oModel = this.getCoreModel();
        var that = this;
        var requestOptions = {
            async:false,
            requestUri : requestURI,
            method : "GET",
            headers : {
                Accept : "application/json",
                "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
            }
        };
        OData.request(requestOptions, function(data, request) {
            // TO-DO : make this generic
            url = data.GUI_Link;
        }, function(error) {
            if(error.response.statusCode == 205){
                var eventParams = {statusCode : error.response.statusCode, statusText : error.response.statusText};
                oModel.fireRequestFailed(eventParams);
            }else{
            //TODO: use enums for messageType.
            	var sMessage = that.inboxUtils.getErrorMessageFromODataErrorObject(error);
            	that.showMessage("error", that._oBundle.getText("INBOX_MSG_ERR_EXUI") +" "+ id +"; "+sMessage);
            }
        });
        if (url.search("HRMSS_LR_APPR_G") != -1){
	        var lang = sap.ui.getCore().getConfiguration().getLanguage();
	        url = url + "&sap-language=" + lang;
        }
        return url;
    };

    this.getTaskExecURLStatusCallBack = function(id,sapOriginId) {
        var status = "";
        var requrl = this.bpmSvcUrl + this.sCollectionPath + "(InstanceID='" + id + "',SAP__Origin='" + sapOriginId + "')?$format=json";
        var oModel = this.getCoreModel();
        var that = this;
        var requestOptions = {
            async:false,
            requestUri : requrl,
            method : "GET",
            headers : {
                Accept : "application/json",
                "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
            }
        };
        OData.request(requestOptions, function(data, request) {
            // TO-DO : make this generic
            status = data.Status;
        }, function(error) {
            if(error.response.statusCode == 205){
                var eventParams = {statusCode : error.response.statusCode, statusText : error.response.statusText};
                oModel.fireRequestFailed(eventParams);
            }else{
            //TODO: use enums for messageType.
            	
                that.showMessage("error", that._oBundle.getText("INBOX_MSG_ERR_EXUI") +" "+ id);
            }
        });
        return status;
    };
    this.searchCallBack = "";
    this.dynamicTaskTypeFilterCallBack = "";
    this.getTaskExecutionURLCallBack = this.getDefaultTaskExecutionURLCallBack;
    
    this.lastRefreshedOnDateTime = new Date();
    
    //Inbox creation starts
    this.vLayout = this.createInboxUI();
    this.vLayout.setParent(this);
    this.addAndRemoveSubstDropDowns();
    this.constants = sap.uiext.inbox.InboxConstants;
    this.lastRefreshedOnDateTime = new Date();
    this.bCustomAttributesVisible= false;
};

sap.uiext.inbox.Inbox.prototype.exit = function() {
	this.vLayout.destroy();
	this.vLayout = null;
	
	function remove(id) {
		  var oItem = sap.ui.getCore().byId(id);
		  oItem && oItem.destroy();
	}
	remove(this.getId() + '--' + "dropdownCell1");
	remove(this.getId() + '--' + "dropdownCell2");
	remove(this.getId() + '--' + "dropdownCell3");
	remove(this.getId() + '--' + "manageSubstitutionMI");
	remove(this.getId() + '--' + "rrMainMatrixLayout");
	remove(this.getId() + '--' + "separatorRRViewCell");
	if(this.oCustomActionToolPopup){
		remove(this.oCustomActionToolPopup.getId());
	}
	if(this.oCustomActionToolPopupCommentsMand){
		remove(this.oCustomActionToolPopupCommentsMand.getId());
	}
	
	this._oBundle = undefined;
	delete this.oCustomActionToolPopup;
	delete this.oCustomActionToolPopupCommentsMand;
};

sap.uiext.inbox.Inbox.prototype.createAttributes = function(oAttData, oParent) {
    var that = this;
    if (oAttData.name === "INBOX_FILTER_CATEGORY") {
    	var oAtt = new sap.uiext.inbox.InboxTaskCategoryFilterList(this.getId()+'--'+oAttData.name);
    	oAtt.setSelectedKeys(["INBOX_FILTER_CATEGORY_TASKS"]);
    } else {
    	var oAtt = new sap.ui.ux3.FacetFilterList(this.getId()+'--'+oAttData.name);
    }
    
    oAtt.setTitle(this._oBundle.getText(oAttData.name));
    // oAtt.setAdditionalData({data: (oAttData.name+" (ID: "+oAtt.getId()+")")});
    for(var idx = 0; idx < oAttData.attributes.length; idx++){
        if(typeof oAttData.attributes[idx] == "string" || oAttData.attributes[idx].key != undefined){
            var attributeID;
            var oAttribute;
            if(oAttData.attributes[idx].key != undefined){
            	var attributeMetaData = oAttData.attributes[idx];
                attributeID = that.inboxUtils.scrub(attributeMetaData.key);
                oAttribute = new sap.ui.core.ListItem(this.getId() +'--'+ attributeID, {text : oAttData.attributes[idx].value, key:oAttData.attributes[idx].key});
                if(attributeMetaData.sap__Origin){
                	oAttribute.data("SAP__Origin",attributeMetaData.sap__Origin);
                }
                if(attributeMetaData.instanceID){
                	oAttribute.data("InstanceID",attributeMetaData.instanceID);
                }

            }else{
                attributeID = that.inboxUtils.scrub(oAttData.attributes[idx]);
                oAttribute = new sap.ui.core.ListItem(this.getId() +'--'+ attributeID, {text : this._oBundle.getText(oAttData.attributes[idx]), key:attributeID});

            }
            oAtt.addItem(oAttribute);
        }else{
            that.createAttributes(oAttData.attributes[idx], oAtt);
        }
    }
    oParent.addList(oAtt);

};

sap.uiext.inbox.Inbox.prototype.toggleFilterView = function(oEvent, oInbox) {
    var that = oInbox;
    var oFacet = sap.ui.getCore().byId(that.getId()+'--'+"filterFacet");
    that.showBusyLoader();
    if(oFacet === undefined){
        oFacet = new sap.ui.ux3.FacetFilter(that.getId()+'--'+"filterFacet"); 
        
        var aFilterLists = that.applyTaskCategoryFilter ? that.constants.aDrillDownFilterMetadata : 
        	that.bShowNoDueDateFilter ? that.constants.aFilterMetaDataWithNoDueDate : that.constants.aFilterMetaData;

        for(var idx=0;idx < aFilterLists.length; idx++){
        		that.createAttributes(aFilterLists[idx], oFacet);
        }
        var verticalLayout = sap.ui.getCore().byId(that.getId()+'--'+"verticalLayoutContainer");
        verticalLayout.insertContent(oFacet, 1);
        var list = oFacet.getLists();
        for(var i=0; i<list.length; i++) {
            if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_PRIORITY"){
                list[i].attachSelect(that,that.applyDrillDownFilterForPriority);
            } else if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_STATUS") {
                list[i].attachSelect(that,that.applyDrillDownFilterForStatus);
            } else if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_CREATION_DATE"){
                list[i].setMultiSelect(false);
                list[i].attachSelect(that,that.applyDrillDownFilterForDateTime);
            } else if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_TASK_TYPE"){
                list[i].attachSelect(that,that.applyDrillDownFilterForTaskType);
            } else if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_DUE_DATETIME"){
                list[i].setMultiSelect(false);
                list[i].attachSelect(that,that.applyDrillDownFilterForDueDate);
            } else if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_CATEGORY"){
                list[i].setMultiSelect(false);
                list[i].attachSelect(that,that.applyDrillDownFilterForTaskCategory);
            }
    }
    }

    var statusAttr = sap.ui.getCore().byId(that.getId()+'--'+"INBOX_FILTER_STATUS");            
    if(sap.ui.getCore().byId(that.getId()+'--'+"filterComboBox2").getSelectedItemId() === that.getId()+'--'+"li_completedTasks"){
        if(statusAttr != undefined ){
            oFacet.removeList(statusAttr);
        }
    if (oFilterDateTime !== undefined) {
      oFacet.removeList(oFilterDateTime);
    }

    }
    var oFilterDateTime = sap.ui.getCore().byId(that.getId()+'--'+"INBOX_FILTER_CREATION_DATE");
    var oFilterDueDateTime = sap.ui.getCore().byId(that.getId()+'--'+"INBOX_FILTER_DUE_DATETIME");
    var sSelectedItemId = sap.ui.getCore().byId(that.getId()+'--'+"filterComboBox2").getSelectedItemId();
    if(sSelectedItemId === that.getId()+'--'+"li_overdueTasks" || sSelectedItemId === that.getId()+'--'+"li_escalatedTasks" ){
        if(oFilterDateTime !== undefined && oFacet.indexOfList(oFilterDateTime) !== -1 ){
            oFacet.removeList(oFilterDateTime);
        }
        if(oFilterDueDateTime !== undefined && oFacet.indexOfList(oFilterDueDateTime) !== -1){
            oFacet.removeList(oFilterDueDateTime);
     }

    }
    
    /*
     * if (sSelectedItemId === that.getId() + '--' + "li_overdueTasks" || sSelectedItemId === that.getId() + '--' +
     * "li_escalatedTasks") { if (oFilterDateTime != undefined && oFilterDateTime.getSelected() === true) {
     * oFilterDateTime.setSelected(false); } }
     */

    var oFilterToggleBtn = that._getComponent("filterViewButton");
    oFacet.setVisible(oFilterToggleBtn.getPressed());
    //}
    /*if(filterImg.getIcon() === that._imgResourcePath+sap.uiext.inbox.InboxConstants.filterViewImageUnSelected){
        // filterImg.setStyle(sap.ui.commons.ButtonStyle.Emph);
        filterImg.setIcon(that._imgResourcePath+sap.uiext.inbox.InboxConstants.filterViewImageSelected);
        oFacet.setVisible(true);
    }else{
        filterImg.setIcon(that._imgResourcePath+sap.uiext.inbox.InboxConstants.filterViewImageUnSelected);
        // filterImg.setStyle(sap.ui.commons.ButtonStyle.Default);
        oFacet.setVisible(false);
        // oController.resetFilterView();
    }*/
    //that.resetSearchCriteria();
    that.hideBusyLoader();
};

sap.uiext.inbox.Inbox.prototype.populateFilterButtonContainer = function(filterButtonContainer) {
    var filterViewCell = new sap.ui.commons.layout.MatrixLayoutCell({
        id : this.getId() + '--' + "filterButtonCell"
    });
    var selected = false;

    var filterViewButton = new sap.ui.commons.ToggleButton(this.getId() + '--' + "filterViewButton", {
        icon : sap.uiext.inbox.InboxConstants.filterViewImage,
        pressed : false,
        tooltip : this._oBundle.getText("INBOX_BUTTON_FILTER_VIEW_TOOLTIP")
    });
    filterViewButton.attachPress(this, this.toggleFilterView);
    filterViewButton.addStyleClass("sapUiExtInboxToolBarContainerHeight");
    filterViewCell.addContent(filterViewButton);
    filterViewCell.setPadding(sap.ui.commons.layout.Padding.None);
    filterButtonContainer.createRow(filterViewCell);
};
/*
sap.uiext.inbox.Inbox.prototype.populateDropDownContainer = function(dropDownContainer) {
    var dropdownCell = new sap.ui.commons.layout.MatrixLayoutCell(this.getId() + '--' + "dropdownCell2");
    dropdownCell.setPadding(sap.ui.commons.layout.Padding.None);
    var dropdownComboBox = new sap.ui.commons.DropdownBox(this.getId() + '--' + "filterComboBox2", {
        tooltip : this._oBundle.getText("INBOX_TASKS_FILTER_DROPDOWN_TOOLTIP"),
        items : [new sap.ui.core.ListItem(this.getId() + '--' + "li_openTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_MY_OPEN_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_completedTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_MY_COMPLETED_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_overdueTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_MY_OVERDUE_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_escalatedTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_MY_ESCALATED_TASKS")
        })]
    });
    dropdownComboBox.attachChange(this, this.applyDropDownFilter);
    dropdownComboBox.setValue(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_MY_OPEN_TASKS"));
    dropdownComboBox.addStyleClass("sapUiExtInboxToolBarContainerHeight");
    dropdownComboBox.addStyleClass("sapUiExtInboxComboBox");
    dropdownCell.addContent(dropdownComboBox);
    dropDownContainer.createRow(dropdownCell);
};*/

sap.uiext.inbox.Inbox.prototype.addAndRemoveSubstDropDowns = function() {
	var dropDownRow = sap.ui.getCore().byId(this.getId() + '--' + "dropdownRow");
	var dropdowncell1 = sap.ui.getCore().byId(this.getId() + '--' + "dropdownCell1");
	var dropdowncell2 = sap.ui.getCore().byId(this.getId() + '--' + "dropdownCell2");
	var dropdowncell3 = sap.ui.getCore().byId(this.getId() + '--' + "dropdownCell3");
	var oManageSubstMenuItemInTable = sap.ui.getCore().byId(this.getId() + '--' + "manageSubstitutionMI");
	var oManageSubstMenuItemInStream = sap.ui.getCore().byId(this.getId() + '--' + "rrManageSubstitutionMI");

	if(this.getSubstitutionEnabled()) { //Do not add this combo box if substitution is disabled 
			dropDownRow.addCell(dropdowncell1);
			dropDownRow.addCell(dropdowncell2);
			dropDownRow.addCell(dropdowncell3);

		} else {
			if(dropDownRow != undefined) {
			dropDownRow.removeCell(dropdowncell1);
			dropDownRow.removeCell(dropdowncell3);
			}
		
		}
	var rrSettingsButton = sap.ui.getCore().byId(this.getId() + '--' + "rrSettingsButton");
	var tableSettingsButton = sap.ui.getCore().byId(this.getId() + '--' + "settingsButton");
	this._manageVisibilityOfSettingsButton(rrSettingsButton);
	this._manageVisibilityOfSettingsButton(tableSettingsButton);
};

sap.uiext.inbox.Inbox.prototype.populateDropDownContainer = function(dropDownContainer) {
    var dropdownRow = new sap.ui.commons.layout.MatrixLayoutRow(this.getId() + '--' + "dropdownRow");
    
    var dropdownCell1 = new sap.ui.commons.layout.MatrixLayoutCell(this.getId() + '--' + "dropdownCell1");
    dropdownCell1.setPadding(sap.ui.commons.layout.Padding.None);
    //if(this.getSubstitutionEnabled()) { //Do not add this combo box if substitution is disabled 
    var dropdownComboBox1 = new sap.ui.commons.DropdownBox(this.getId() + '--' + "filterComboBox1", {
        tooltip : this._oBundle.getText("INBOX_TASKS_FILTER_DROPDOWN_TOOLTIP"),
        items : [new sap.ui.core.ListItem(this.getId() + '--' + "li_allTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_myTasks", {
            text : this._oBundle.getText("INBOX_MY_TASKS_TEXT")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_substitutedTasks", {
            text : this._oBundle.getText("SUBSTITUTION_INBOX_DROP_DOWN_VALUE_TASKS_ASSIGNED_TO_ME")
        })]
    });
    dropdownComboBox1.attachChange(this, this.applyDropDownFilter1);
    dropdownComboBox1.setValue(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_TASKS"));
    dropdownComboBox1.addStyleClass("sapUiExtInboxToolBarContainerHeight");
    dropdownComboBox1.addStyleClass("sapUiExtInboxComboBox");
    
    dropdownCell1.addContent(dropdownComboBox1);
    dropdownRow.addCell(dropdownCell1);
    //}
    /***/
    var dropdownCell2 = new sap.ui.commons.layout.MatrixLayoutCell(this.getId() + '--' + "dropdownCell2");
    dropdownCell2.setPadding(sap.ui.commons.layout.Padding.None);
    var dropdownComboBox2 = new sap.ui.commons.DropdownBox(this.getId() + '--' + "filterComboBox2", {
        tooltip : this._oBundle.getText("INBOX_TASKS_FILTER_DROPDOWN_TOOLTIP"),
        items : [new sap.ui.core.ListItem(this.getId() + '--' + "li_openTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_OPEN_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_completedTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_COMPLETED_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_overdueTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_OVERDUE_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_escalatedTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ESCALATED_TASKS")
        })]
    });
    dropdownComboBox2.attachChange(this, this.applyDropDownFilter);
    dropdownComboBox2.setValue(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_OPEN_TASKS"));
    dropdownComboBox2.addStyleClass("sapUiExtInboxToolBarContainerHeight");
    dropdownComboBox2.addStyleClass("sapUiExtInboxComboBox");
    dropdownCell2.addContent(dropdownComboBox2);
    dropdownRow.addCell(dropdownCell2);
    /***/
    //if(this.getSubstitutionEnabled()) {   //Do not add this combo box if substitution is disabled
    var dropdownCell3 = new sap.ui.commons.layout.MatrixLayoutCell(this.getId() + '--' + "dropdownCell3");
    dropdownCell3.setPadding(sap.ui.commons.layout.Padding.None);
    var dropdownComboBox3 = new sap.ui.commons.DropdownBox(this.getId() + '--' + "filterComboBox3",{maxPopupItems:10});/*, {
        tooltip : this._oBundle.getText("INBOX_TASKS_FILTER_DROPDOWN_TOOLTIP"),
        items : [new sap.ui.core.ListItem(this.getId() + '--' + "li_allUsers", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS")
        })]

    });*/
    
    var onBehalfOf = '';
    if(sap.ui.getCore().byId(this.getId() + '--' + 'onBehalfOfListItem') === undefined) {
        var onBehalfOf = new sap.ui.core.ListItem(this.getId() + '--' + 'onBehalfOfListItem');
    }
    onBehalfOf.setText(this._oBundle.getText("SUBSTITUTION_INBOX_FILTER_ON_BEHALF_OF"));
    onBehalfOf.setKey("onBehalfOf");
    
    dropdownComboBox3.addItem(onBehalfOf);

    var allUsers = '';
    if(sap.ui.getCore().byId(this.getId() + '--' + 'li_allUsers') === undefined) {
        allUsers = new sap.ui.core.ListItem(this.getId() + '--' + 'li_allUsers');
    }   
    allUsers.setText(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS"));
    allUsers.setKey("allUsers");
    
    dropdownComboBox3.addItem(allUsers);

    dropdownComboBox3.attachChange(this, this.applyDropDownFilter3);
    dropdownComboBox3.setValue(this._oBundle.getText("SUBSTITUTION_INBOX_FILTER_ON_BEHALF_OF"));
    dropdownComboBox3.addStyleClass("sapUiExtInboxToolBarContainerHeight");
    dropdownComboBox3.addStyleClass("sapUiExtInboxComboBox");
    dropdownComboBox3.setEnabled(false);
    dropdownCell3.addContent(dropdownComboBox3);
    dropdownRow.addCell(dropdownCell3);
    //}

    dropDownContainer.addRow(dropdownRow);
    this.addAndRemoveSubstDropDowns();
};

// Populating the Search Bar.
sap.uiext.inbox.Inbox.prototype.populateSearchFieldContainer = function(searchFieldContainer) {

    var searchBoxCell = new sap.ui.commons.layout.MatrixLayoutCell(this.getId() + '--' + "searchBoxCell");
    searchBoxCell.setPadding(sap.ui.commons.layout.Padding.None);
    // create a simple SearchField
    var searchField = new sap.ui.commons.SearchField(this.getId() + '--' + "searchField", {
        enableListSuggest : false,
        enableClear : true,
        startSuggestion : 0,
        tooltip : this._oBundle.getText("INBOX_SEARCH_TEXT")
    });
    searchField.addStyleClass("sapUiExtInboxSearchField");
    searchField.attachSuggest(this, function(oEvent, that) {
        if (oEvent.getParameter("value") === "") {
            that.resetSearchCriteria();
            that.applyFilterOnResponse(null);
        }
    });
    searchField.attachSearch(this, this.localSearch);
    searchBoxCell.addContent(searchField);
    searchFieldContainer.createRow(searchBoxCell);
};

sap.uiext.inbox.Inbox.prototype.populateNotificationBar = function() {
	
	
	var oNotificationBar = new sap.ui.ux3.NotificationBar({
		id: this.getId() + '--' + "notificationBar",
		visibleStatus: "None"
	});
	
    var oMessageNotifier = new sap.ui.ux3.Notifier ({
		id: this.getId() + '--' + "messageNotifier",
		title: this._oBundle.getText("INBOX_NOTIFICATIONS"),

    	// This workaround is added, because NotificationBar does not support auto focus for accessability (1/2)
    	// For more details check Internal Incident 1580169447: ACC 264 : NW750_SP00_I/O_BPM : Text : Notification text not being read out
		messageSelected: function onMessageSelected(event) {

		}
		
	});
	
	oNotificationBar.setMessageNotifier(oMessageNotifier);
	oNotificationBar.addStyleClass("sapUiExtInboxNotificationBar");
	return oNotificationBar;
};

sap.uiext.inbox.Inbox.prototype.populateToolBar = function() {
    var toolBarContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "toolbarContainer", {
        layoutFixed : false,
        width : "100%",
        columns : 6,
        // other widths except empty label does not matter, rest of the space will be now filled with empty Label snippix #293
        //older %'s are: ["2%","10%","1%","12%","50%", "11%"] (not good in big screen) 
        widths : ["1px","1px","1px","1px","100%", "1px"] 
    });
   
    var viewButtonsContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "viewButtonsContainer", {
      layoutFixed : false
    });
    
    var filterButtonContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "filterButtonContainer", {
        layoutFixed : false
    });
    
    var refreshButtonContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "refreshButtonContainer", {
      layoutFixed : false
    });
    
    var dropDownContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "dropDownContainer", {
        layoutFixed : false
    });
    var emptyLabel = new sap.ui.commons.Label(this.getId() + '--' + "emptyLabel", {
        text : ""
    });
    var searchFieldContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "searchFieldContainer", {
        layoutFixed : false
    });

    toolBarContainer.createRow(viewButtonsContainer, dropDownContainer, filterButtonContainer, refreshButtonContainer, emptyLabel, searchFieldContainer);

    this.populateViewButtonsContainer(viewButtonsContainer);
    this.populateDropDownContainer(dropDownContainer);
    this.populateFilterButtonContainer(filterButtonContainer);
    this.populateRefreshButtonContainer(refreshButtonContainer);
    this.populateSearchFieldContainer(searchFieldContainer);

    return toolBarContainer;
};

sap.uiext.inbox.Inbox.prototype.populateViews = function() {
    var that = this;
    var verticalLayout = sap.ui.getCore().byId(this.getId() + '--' + 'verticalLayoutContainer');
    var actionButtonsToolBar = new sap.ui.commons.Toolbar(this.getId() + '--' + "actionButtonsToolbarContainer");
    actionButtonsToolBar.setDesign(sap.ui.commons.ToolbarDesign.Standard);
    actionButtonsToolBar.addStyleClass("sapUiExtInboxActionButtonsToolbarContainer");

    if (sap.ui.getCore().byId(this.getId() + '--' + 'openActionButton') === undefined) {
        var completeButton = new sap.ui.commons.Button(this.getId() + '--' + "openActionButton", {
            icon : this.constants.iconPool.getIconURI("open-folder"),
            text : this._oBundle.getText("INBOX_ACTION_BUTTON_OPEN"),
            enabled : false,
            tooltip : this._oBundle.getText("INBOX_ACTION_BUTTON_OPEN")
        });
        completeButton.attachPress(this, function(oEvent, view) {
            that.showBusyLoader();
            that.populateTaskExecutionContent();
            that.hideBusyLoader();
        });
        actionButtonsToolBar.addItem(completeButton);
    }
    if (sap.ui.getCore().byId(this.getId() + '--' + 'claimActionButton') === undefined) {
        var claimButton = new sap.ui.commons.Button(this.getId() + '--' + "claimActionButton", {
            icon : this.constants.iconPool.getIconURI("locked"),
            text : this._oBundle.getText("INBOX_ACTION_BUTTON_CLAIM"),
            enabled : false,
            tooltip : this._oBundle.getText("INBOX_ACTION_BUTTON_CLAIM"),
            visible : false
        });
        claimButton.attachPress({inbox:that,view:that.constants.tableView,action:"Claim"}, that.executeActionOnTask);
        claimButton.setVisible(false);
        actionButtonsToolBar.addItem(claimButton);
    }
    if (sap.ui.getCore().byId(this.getId() + '--' + 'releaseActionButton') === undefined) {
        var releaseButton = new sap.ui.commons.Button(this.getId() + '--' + "releaseActionButton", {
            icon : this.constants.iconPool.getIconURI("unlocked"),
            text : this._oBundle.getText("INBOX_ACTION_BUTTON_RELEASE"),
            enabled : false,
            tooltip : this._oBundle.getText("INBOX_ACTION_BUTTON_RELEASE"),
            visible : false
        });
        releaseButton.attachPress({inbox:that,view:that.constants.tableView,action:"Release"}, that.executeActionOnTask);
        releaseButton.setVisible(false);
        actionButtonsToolBar.addItem(releaseButton);
    }
    if (sap.ui.getCore().byId(this.getId() + '--' + 'forwardActionButton') === undefined) {
    	var forwardButton = new sap.ui.commons.Button(this.getId() + '--' + "forwardActionButton", {
            icon : this.constants.iconPool.getIconURI("open-command-field"),
    		text : this._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD"),
    		enabled : false,
    		tooltip : this._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD"),
    		visible : false //TODO: Do we show it or hide it ? 
    	});
    	forwardButton.attachPress({inbox:that,view:that.constants.tableView,action:"Forward"}, that._executeForwardAction);
    	actionButtonsToolBar.addItem(forwardButton);
    }
 /*   if (sap.ui.getCore().byId(this.getId() + '--' + 'refreshButton') === undefined) {
        var seprtr = new sap.ui.commons.ToolbarSeparator();
        actionButtonsToolBar.addItem(seprtr);

        var refreshButton = new sap.ui.commons.Image(this.getId() + '--' + "refreshButton", {
            tooltip : this._oBundle.getText("INBOX_REFRESH_BUTTON_TOOLTIP"),
            decorative : false
        });
        refreshButton.setSrc(this._imgResourcePath + sap.uiext.inbox.InboxConstants.refreshImage);
        refreshButton.attachPress(that, that.refreshTaskList);
        refreshButton.addStyleClass("sapUiExtInboxRefreshButtonHeight");
        actionButtonsToolBar.addItem(refreshButton);

        var refreshLink = new sap.ui.commons.Link(this.getId() + '--' + "refreshLink", {
            text : this._oBundle.getText("INBOX_REFRESH_TEXT"),
            tooltip : this._oBundle.getText("INBOX_REFRESH_BUTTON_TOOLTIP")
        });
        refreshLink.attachPress(that, that.refreshTaskList);
        actionButtonsToolBar.addItem(refreshLink);

    }*/
    if (sap.ui.getCore().byId(this.getId() + '--' + 'settingsButton') === undefined) {
        var settingsButton = new sap.ui.commons.Button(this.getId() + '--' + "settingsButton", {
            tooltip : this._oBundle.getText("INBOX_MANAGE_SUBSTITUTION_RULES_TOOLTIP"),
            icon : this.constants.iconPool.getIconURI("workflow-tasks"),
            iconHovered: this._imgResourcePath + sap.uiext.inbox.InboxConstants.settingsImageHover,
            iconSelected: this._imgResourcePath + sap.uiext.inbox.InboxConstants.settingsImageHover,	
            lite : true
        });
        settingsButton.addStyleClass("sapUiExtInboxToolbarRight");
        settingsButton.addStyleClass("sapUiExtInboxSettingsButton");
        settingsButton.attachPress(that, that.onSubstitutionButtonPress);
        actionButtonsToolBar.addItem(settingsButton);
    }
    verticalLayout.addContent(actionButtonsToolBar);

    // START TABLE
    if (that._getComponent('listViewTable') === undefined) {
        var oTable = new sap.ui.table.Table(that.getId() + '--' + "listViewTable",{
        	//navigationMode : sap.ui.table.NavigationMode.Paginator
        });
    oTable.attachFilter( function(oEvent) {
    	oEvent.preventDefault(); // preventing oData call for filtering
    	var oColumn = oEvent.getParameter("column");
    	var sValue = oEvent.getParameter("value");
    	that._applyFilterOnTableColumns(oColumn, sValue); 

    	//Preserve sorting (custom attributes)
       	that._preserveTableSort();
    });
    
    	oTable.setThreshold(10000);
        oTable.addStyleClass("sapUiExtInboxCustomTable");
       // oTable.setThreshold(10000);
        oTable.setEditable(false);
        oTable.bDynamic = true;
        oTable.setBusyIndicatorDelay(0);
        var inboxCategoryMetadata = that._getCategoryMetadata();
        var entitiesLength = inboxCategoryMetadata.properties.length;
        
        
        for ( var index = 0; index < entitiesLength; index++) {
        	that._createTableColumnContent(index, inboxCategoryMetadata);
        }
        
        // code to capture sort event and reset search
        /*
         * oTable.addDelegate({ onAfterRendering : function() { var oTable$ = oTable.$(); var cols =
         * oTable$.find(".sapUiTableCol").get(); for ( var i = 0; i < cols.length; i++) { if
         * (cols[i].attributes['aria-sort']) { var sortValue = cols[i].attributes['aria-sort'].value; if (sortValue ===
         * "ascending" || sortValue === "descending") that.resetSearchCriteria(); } } } });
         */
        that.bSorted = false;
        oTable.attachSort(function(oEvent) {
        	var oColumn = oEvent.getParameter("column");
        	if(that._isCustomAttribute(oColumn)){
        		//preventing oData call for sorting
        		oEvent.preventDefault();

        		//Get meta data
     			var attributeName = oColumn.data("customAttrName");
     			var attributeType = null;
     			var sortDirection = null;

        		//Custom attributes meta data
     			var constants = that.constants;
        		var oCustomAttributeMetaDataArrayMap = constants.oTaskDefinitionCustomAttributesMap;

        		//Selected attribute type
        		var oTaskTypefilterList = that._getComponent("INBOX_FILTER_TASK_TYPE");
        	   	var aSelectedKeys = oTaskTypefilterList.getSelectedKeys();
        		if(aSelectedKeys){
        			var key = aSelectedKeys[0];
        			var taskTypeMeta = oCustomAttributeMetaDataArrayMap[key];
        			if(taskTypeMeta){
        				for(var i=0; i<taskTypeMeta.length; i++){
            				var attributeMeta = taskTypeMeta[i];
            				if(attributeMeta.Name == attributeName){
            					var attributeType = attributeMeta.Type;
            					break;
            				}
        				}
        			}
        		}

        		//Sort direction
        		if(attributeType){
        			sortDirection = oEvent.getParameter("sortOrder"); //Descending, Ascending
        		}

        		that._applySortOnTableColumn(oColumn, attributeName, attributeType, sortDirection);
        	}
        	else{
	        	//need to reset the length of listBinding if sorting has to work with column filters
	        	var currentViewElement = that._currentViewElement();
	        	if (currentViewElement._originalKeys) {
	        		var oListBinding = currentViewElement.getBinding('rows');
	        		oListBinding.iLength = currentViewElement._originalKeys.length;
	        	}
	        	// this variable below will be used to change _originalKeys of table in oData's requestCompleted event handler
	        	that.bSorted = true;
	        	that.resetSearchCriteria();
        	}

        });
        oTable.attachRowSelectionChange(function(oEvent) {
        	that._handleTableRowSelect(oEvent);
        	});
        oTable.clearSelection();
    }
    verticalLayout.addContent(oTable);
    verticalLayout.addContent(that.createTableRowSettingsContent());
   //Creating but will be hidden.
  	that.createRowRepeaterView();
  	
};

sap.uiext.inbox.Inbox.prototype.addAction = function(sActionID, sDisplayText, sToolTip, fnActionHandler,  bMassEnabled){
    var iTotalArgumentsRequired = 4;
	if(bMassEnabled === undefined){
            bMassEnabled = true;
    }     

    if(sActionID && sDisplayText && fnActionHandler  && sToolTip){        

            var oActionButtonsToolBar = this._getActionButtonToolBarForTableView();
            
            var oActionButton = new sap.ui.commons.Button(this.getId() + '--' + sActionID , {

                        text : sDisplayText,

                        enabled : true,

                        tooltip :  sToolTip

                    }).attachPress(fnActionHandler);

            oActionButtonsToolBar.insertItem(oActionButton,100);
            
    } else {
    	 if (arguments.length < iTotalArgumentsRequired) {
    		 console.error("Add Action failed: missing parameters");
    	 }
    }

    return this;

};

sap.uiext.inbox.Inbox.prototype._handleTableRowSelect = function(oEvent) {
    var oDataModel = this.getCoreModel();
    var that = this;
    var selectedStatus = [], aSelectedSAPOrigin = [];
    var selectedTaskDefinitionID = [];
    var selectedInstanceID = [];
    var oListTable = this._getComponent('listViewTable');
    var selectedIndices = oListTable.getSelectedIndices();
    var mParameters = oEvent.getParameters();
				var oSupportsAction = {
    		aSupportsClaim:[],
    		aSupportsRelease:[],
    		aSupportsForward:[]
    };
    jQuery.each(selectedIndices, function(i, selIndex) {
        var rowContext = oListTable.getContextByIndex(selIndex);
        selectedStatus.push(oDataModel.getProperty("Status", rowContext));
        var taskDefnID = oDataModel.getProperty(that.constants.TaskDefinitionCollection.properties.taskDefnID, rowContext);
        var sSapOrigin = oDataModel.getProperty(that.constants.sapOrigin, rowContext);
        if(jQuery.inArray(taskDefnID,selectedTaskDefinitionID) === -1){
        	selectedTaskDefinitionID.push(oDataModel.getProperty(that.constants.TaskDefinitionCollection.properties.taskDefnID, rowContext));
        }
        if(jQuery.inArray(sSapOrigin,aSelectedSAPOrigin) === -1){
        	aSelectedSAPOrigin.push(sSapOrigin);
        }
        selectedInstanceID.push(oDataModel.getProperty(that.constants.InstanceID, rowContext));
        oSupportsAction.aSupportsClaim.push(oDataModel.getProperty("SupportsClaim", rowContext));
        oSupportsAction.aSupportsRelease.push(oDataModel.getProperty("SupportsRelease", rowContext));
        if(that.isForwardActionEnabled){
        	oSupportsAction.aSupportsForward.push(oDataModel.getProperty("SupportsForward", rowContext));
    	}
    });
    this.disableActionButtonsOnMultiStatus(selectedStatus, oSupportsAction, aSelectedSAPOrigin);
    if(this.isCustomActionsEnabled){
    	this._deleteCustomActionsForTableView();
    	var isCompletedTasksSelectedinDD =  this._isCompletedTasksSelected();
    	if(selectedTaskDefinitionID && selectedTaskDefinitionID.length === 1 && !isCompletedTasksSelectedinDD){
    		this._createCustomActionsOnTableRowSelect(selectedInstanceID, aSelectedSAPOrigin);
    	}
    }
    this._handleForwardButtonVisibilityOnRowSelection(aSelectedSAPOrigin, oSupportsAction);  
    
    //TODO : Can be moved to the jQuery.each above?
    var aTaskUniqueIdentifiers = [];
    jQuery.each(selectedIndices, function(i, selIndex) {
    	var rowContext = oListTable.getContextByIndex(selIndex);
    	var sTaskInstanceID = oDataModel.getProperty(that.constants.InstanceID, rowContext);
    	var sSap__Origin = oDataModel.getProperty(that.constants.sapOrigin, rowContext);
    	var oTaskUniqueIdentifier = {};
    	oTaskUniqueIdentifier["InstanceID"] = sTaskInstanceID;
    	oTaskUniqueIdentifier["SAP__Origin"] = sSap__Origin;
    	aTaskUniqueIdentifiers.push(oTaskUniqueIdentifier);
    });
	
	
	this.fireTaskSelectionChange({"taskUniqueIdentifiers" : aTaskUniqueIdentifiers});    
};

sap.uiext.inbox.Inbox.prototype._createCustomActionsOnTableRowSelect = function(selectedInstanceIDs, aSelectedSAPOrigin) {
	this._getCustomActionsDefinitionOnMultiSelect(selectedInstanceIDs, aSelectedSAPOrigin[0]);
};

sap.uiext.inbox.Inbox.prototype._getCustomActionsDefinitionOnMultiSelect = function(selectedInstanceIDs, sSelectedSAPOrigin) {
	var aCustomActionArrayMap = sap.uiext.inbox.InboxConstants.taskInstanceDecisionOptionsMap;
	var selectedInstanceLength = selectedInstanceIDs.length;
	var aAvailableCustomActionArrayList = [], aCustomActions, aFetchCustomActionsFor = [];
	for (var i=0; i<selectedInstanceLength ;i++){
		aCustomActions = aCustomActionArrayMap[selectedInstanceIDs[i]];
		if(aCustomActions){
			aAvailableCustomActionArrayList.push(aCustomActions);
		}else{
			aFetchCustomActionsFor.push(selectedInstanceIDs[i]);
		}
	}
	var iFetchCustomActionsFor = aFetchCustomActionsFor.length;
	if(iFetchCustomActionsFor <= 1){
		this._getCustomActionsDefinition(aFetchCustomActionsFor[0], sSelectedSAPOrigin, aAvailableCustomActionArrayList);
	}else{
		this._fetchCustomActionsOnMultiSelect(aAvailableCustomActionArrayList, aFetchCustomActionsFor, sSelectedSAPOrigin);
	}
};

sap.uiext.inbox.Inbox.prototype._fetchCustomActionsOnMultiSelect = function(aAvailableCustomActionArrayList, aFetchCustomActionsFor, sSelectedSAPOrigin) {
	if(this.bUseBatch){
		this._fetchCustomActionsUsingBatch(aAvailableCustomActionArrayList, aFetchCustomActionsFor, sSelectedSAPOrigin);
	}else{
		this._fetchCustomActionsUsingAsyncCall(aFetchCustomActionsFor, sSelectedSAPOrigin, aAvailableCustomActionArrayList);
	}
};

sap.uiext.inbox.Inbox.prototype._fetchCustomActionsUsingBatch = function(aAvailableCustomActionArrayList, aFetchCustomActionsFor, sSelectedSAPOrigin) {
	
	var aUrlParameters = [];
	jQuery.each(aFetchCustomActionsFor, function(i, sInstanceID) {
		var mUrlParams = {};
		mUrlParams.InstanceID = "'" + sInstanceID + "'";
		mUrlParams.SAP__Origin = "'" + sSelectedSAPOrigin  + "'";
		aUrlParameters.push(mUrlParams);
	});
	
    this.oDataManager.fireBatchRequest({
    	sPath : this.constants.decisionOptionsFunctionImport,
    	sMethod : "GET",
    	sBatchGroupId : "fetchDecisionOptions",
    	aUrlParameters : aUrlParameters,
    	numberOfRequests : aFetchCustomActionsFor.length,
    	fnSuccess : jQuery.proxy(this._processCustomActionsBatchResponse, {oInbox: this, 
    		aAvailableCustomActionArrayList: aAvailableCustomActionArrayList, 
    		aFetchCustomActionsFor: aFetchCustomActionsFor }),
    	fnError : jQuery.proxy(this._handleErrorOnBatchRequests, this)
    });
	
};

sap.uiext.inbox.Inbox.prototype._processCustomActionsBatchResponse = function(data, response) {
	
	var batchResponses = data.__batchResponses;
	
	var index = 0;
	jQuery.each(batchResponses, jQuery.proxy(function(i, customActionResponse) {
		if(customActionResponse && customActionResponse.statusCode && customActionResponse.statusCode == 200){
			this.oInbox.constants.taskInstanceDecisionOptionsMap[this.aFetchCustomActionsFor[index++]] = customActionResponse.data.results;
			this.aAvailableCustomActionArrayList.push(customActionResponse.data.results);
		}
	}, this));
	
	this.oInbox._displayCustomActions([], this.aAvailableCustomActionArrayList);
};

sap.uiext.inbox.Inbox.prototype._createTableColumnContent = function(index, inboxCategoryMetadata) {
	var that = this;
	var oTable = this._getComponent('listViewTable');
	if (inboxCategoryMetadata.properties[index] == "TaskTitle") {
  		var oFirstColHorLay = that._getFirstColumnContentTemplate();
  	
  		var oTaskTitleColumn = that._createTableColumn(index, inboxCategoryMetadata, "INBOX_TASK_TITLE_TOOLTIP", oFirstColHorLay)
			     //fixing the Task Title Column width, width cannot be in '%' as setFlexible will not work otherwise. TaskTitle","CreatedOn","CreatedByName","CompletionDeadLine","Status","Priority"
			     oTaskTitleColumn.setWidth("330px");		
			     oTaskTitleColumn.setFlexible(false);
			     oTable.insertColumn(oTaskTitleColumn, index);
  } else if (inboxCategoryMetadata.properties[index] == "CreatedOn") {
  			var oCreatedOnTextView = new sap.ui.commons.TextView({text : {formatter : that.inboxUtils.dateTimeFormat, path : inboxCategoryMetadata.properties[index]} });
  			oCreatedOnTextView.bindProperty("tooltip", inboxCategoryMetadata.properties[index], that.tooltipFormatForDateTime);
									
  			var oCreatedOnColumn = that._createTableColumn(index, inboxCategoryMetadata, "INBOX_START_DATE_TOOLTIP", oCreatedOnTextView);
  			oCreatedOnColumn.setFlexible(true); 
  			oTable.insertColumn(oCreatedOnColumn, index);
	} else if (inboxCategoryMetadata.properties[index] == "CreatedByName") {
				var oCreatedByTextView = new sap.ui.commons.TextView({text : {path : inboxCategoryMetadata.properties[index]}	})
				oCreatedByTextView.bindProperty("tooltip", inboxCategoryMetadata.properties[index]);
		
				var oCreatedByColumn = that._createTableColumn(index, inboxCategoryMetadata, "INBOX_CREATED_BY_NAME_TOOLTIP", oCreatedByTextView);
				oCreatedByColumn.setFlexible(true); 
				oTable.insertColumn(oCreatedByColumn, index);
				
		} else if (inboxCategoryMetadata.properties[index] == "CompletionDeadLine") {
					var oCompletionDealineTextView = new sap.ui.commons.TextView({text : {formatter : that.inboxUtils.dateTimeFormat, path : inboxCategoryMetadata.properties[index]} });
					oCompletionDealineTextView.bindProperty("tooltip", inboxCategoryMetadata.properties[index],	that.tooltipFormatForDateTime);

					var oCompletionDeadlineColumn = that._createTableColumn(index, inboxCategoryMetadata, "INBOX_DUE_DATE_TOOLTIP", oCompletionDealineTextView);
					oCompletionDeadlineColumn.setFlexible(true); 
					oTable.insertColumn(oCompletionDeadlineColumn, index);
		} else if (inboxCategoryMetadata.properties[index] == "Status") {
				var oStatusTextView = new sap.ui.commons.TextView();
    				oStatusTextView.bindText({
    	        parts: [
    	            {path: "Status", type: new sap.ui.model.type.String()},
    	            {path: "StatusText", type: new sap.ui.model.type.String()}
    	            ],
    	        formatter: function(Status, StatusText){ // string, string, float, float
    	        	return that._getTaskStatus(Status, StatusText);
    	        },
    	        useRawValues : true
    				});
				
				var oStatusColumn = that._createTableColumn(index, inboxCategoryMetadata, "INBOX_STATUS_TOOLTIP", oStatusTextView);
				oStatusColumn.setFlexible(true); 
					oTable.insertColumn(oStatusColumn, index);	
		} else if (inboxCategoryMetadata.properties[index] == "Priority") {
				var oPriorityTextView = new sap.ui.commons.TextView();
  				oPriorityTextView.bindProperty("text", "Priority", function(value) {
  					if (value != null && value != "" && value != undefined) {
  						return that._oBundle.getText(that.constants.prioTooltip[value]);
  					}
  					return "";
  				});

				var oPriorityColumn = that._createTableColumn(index, inboxCategoryMetadata, "INBOX_PRIORITY_TOOLTIP", oPriorityTextView);
				oPriorityColumn.setFlexible(true); 
				oTable.insertColumn(oPriorityColumn, index);	
		}
};

sap.uiext.inbox.Inbox.prototype._createTableColumn = function(columnIndex, inboxCategoryMetadata, columnLabelTooltip, columnContent){

	var mProperty = inboxCategoryMetadata.properties[columnIndex];
	var oTableColumn = new sap.ui.table.Column({id : this.getId() + '--' + mProperty}).setLabel(new sap.ui.commons.Label({
																											text : this._oBundle.getText(inboxCategoryMetadata.propertiesLabel[columnIndex]),
																											tooltip : this._oBundle.getText(columnLabelTooltip),
																											design : sap.ui.commons.LabelDesign.Bold})
																											).setTemplate(columnContent)
																												.setSortProperty(mProperty)
																													.data("ColumnType", "StandardAttribute");
	
	// adding filter property to column; status and priority columns are not filterable as we already have them in facet filter list
	var oColumnsProperties = this.constants.TABLE_VIEW_TECH_NAMES;
	if (mProperty !== oColumnsProperties.INBOX_TABLE_VIEW_STATUS && mProperty !== oColumnsProperties.INBOX_TABLE_VIEW_PRIORITY)
		oTableColumn.setFilterProperty(mProperty);
	return oTableColumn;
};

sap.uiext.inbox.Inbox.prototype.createTableRowSettingsContent = function() {
	var that = this;
	var tableRowSettingMatLayout = new sap.ui.commons.layout.MatrixLayout(that.getId() + '--'+ 'tableRowSettingLayoutContainer');

	//Table Row Settings.
	var oSegmentedButtonIconLite = new sap.ui.commons.SegmentedButton({id:that.getId() + '--' + 'tableRowSettingsSegBtn',
			buttons:[new sap.ui.commons.Button({id: that.getId() + '--' + 'table10RowsSegBtn',lite:true,text:'10',
													tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_TEN")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent"),
			         new sap.ui.commons.Button({id: that.getId() + '--' + 'table25RowsSegBtn',lite:true,text:'25',
			        	 					tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_TWENTYFIVE")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent"),
		           new sap.ui.commons.Button({id: that.getId() + '--' + 'table50RowsSegBtn',lite:true,text:'50',
		          	 					tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_FIFTY")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent")
	    ]});		
		oSegmentedButtonIconLite.attachSelect(function(oEvent) {
				var rowSettingValue = parseInt(sap.ui.getCore().byId(oEvent.getParameters().selectedButtonId).getText());
				var aButtons = this.getButtons();
				var sSelectedButtonId = oEvent.getParameters().selectedButtonId;
				for (var i = 0; i < aButtons.length; i++) {
					var oButton =  aButtons[i];
					if(sSelectedButtonId !== oButton.getId()){
						oButton.addStyleClass("sapUiExtInboxSegmentedButtonTransparent");
						oButton.removeStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
					}else{
						oButton.removeStyleClass("sapUiExtInboxSegmentedButtonTransparent");
						oButton.addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
					}
				}
				
				
	            that.setNoOfRowsOnTable(rowSettingValue);
		 
		});
		
		// check for URL Parameter for the number of rows in list view
		if (that.tableViewRowCountValue != null && that.tableViewRowCountValue != undefined){
        if (parseInt(that.tableViewRowCountValue) === 10 || parseInt(that.tableViewRowCountValue) === 25 || parseInt(that.tableViewRowCountValue) === 50){
        	oSegmentedButtonIconLite.fireSelect({selectedButtonId:that.getId() + '--' + 'table' + parseInt(that.tableViewRowCountValue) + 'RowsSegBtn'});
        	oSegmentedButtonIconLite.setSelectedButton(that.getId() + '--' + 'table' + parseInt(that.tableViewRowCountValue) + 'RowsSegBtn');
    		sap.ui.getCore().byId(oSegmentedButtonIconLite.getSelectedButton()).addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
        }
        	
        else {
        	that.setNoOfRowsOnTable(parseInt(that.tableViewRowCountValue));
        	}
        }
        
        else{
        	oSegmentedButtonIconLite.setSelectedButton(that.getId() + '--' + 'table10RowsSegBtn');
        	sap.ui.getCore().byId(oSegmentedButtonIconLite.getSelectedButton()).addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
        }
        var oBorderLayout2 = new sap.ui.commons.layout.BorderLayout(that.getId() + '--'+ 'tableBorderLayout', {width: "100%", height: "40px"});
		oBorderLayout2.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.end, oSegmentedButtonIconLite);
		oBorderLayout2.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.end, {
			size : "45%",
			contentAlign : "right",
			visible : true
		});
		tableRowSettingMatLayout.createRow(new sap.ui.commons.TextView({text : ' '}));//Fix For Footer scrollbar issue in IE8
		tableRowSettingMatLayout.createRow(oBorderLayout2);
		return tableRowSettingMatLayout;
	
};

sap.uiext.inbox.Inbox.prototype.createRowRepeaterView = function (){
	var that = this;
	var verticalLayout = sap.ui.getCore().byId(that.getId() + '--' + 'verticalLayoutContainer');
	var oTasksRowRepeater = sap.ui.getCore().byId(that.getId() + '--'+'tasksRowRepeater');
	
	//RowRepeater Creation --Start--
 	if(!oTasksRowRepeater){
 		
 		//This is the Main Matix Layout which is the template for Row Repeater.
			var rrMainMatrixLayout = new sap.ui.commons.layout.MatrixLayout({
				id : that.getId() + '--' + "rrMainMatrixLayout",
				layoutFixed : true,
	 			columns : 3,
	 			width : '100%',
	 			widths : ['9%', '73%', '18%'] });
			
		// 1.First Row (Initiator Image, Task Title, Created On Date)
			var firstRow = new sap.ui.commons.layout.MatrixLayoutRow({
				id :  that.getId() + '--' + 'rrFirstRow'});

			rrMainMatrixLayout.addRow(firstRow);

			//Cell For Initiator Image
			var oTaskInitiatorImageCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id :  that.getId() + '--' +  'taskInitiatorImageCell',
				rowSpan: 2 ,colSpan: 1,
				hAlign: sap.ui.commons.layout.HAlign.Center,
				vAlign: sap.ui.commons.layout.VAlign.Middle
			    });
			oTaskInitiatorImageCell.addStyleClass("sapUiExtInboxRRFirstRowStyle");
			var oTaskInitiatorImg = new sap.ui.commons.Image(that.getId() + '--' + "taskInitiatorImg");
			oTaskInitiatorImg.setWidth("52px");
			oTaskInitiatorImg.setHeight("52px");
			oTaskInitiatorImg.addStyleClass("sapUiExtInboxRowRepTaskInitiatorColor")
			oTaskInitiatorImg.bindProperty("tooltip","CreatedByName");
			oTaskInitiatorImg.bindProperty("src", "CreatedBy", function(createdBy){
    			var oContext = this.getBindingContext();
				if(createdBy){
					return that.inboxUtils.getUserMediaResourceURL(that.bpmSvcUrl, oContext.getProperty("SAP__Origin"), oContext.getProperty("CreatedBy"));
		    	}else{
					this.setVisible(false);
		    	}
			});
			oTaskInitiatorImageCell.addContent(oTaskInitiatorImg);
			
			var oTaskInitiatorIcn = that._getComponent("taskInitiatorIcn");
			if(!oTaskInitiatorIcn){
				oTaskInitiatorIcn = new sap.ui.core.Icon({
					id : (that.getId() + '--' + "taskInitiatorIcn"),
					decorative : false,
					src : {
						parts: this.oController.getTaskInitiatorIconParts(that),					  
						formatter: this.oController.getTaskInitiatorIconFormatter(that)
			 		}
				});				
			}
			oTaskInitiatorIcn.setSize("52px")
			.addStyleClass("sapUiExtInboxRowRepTaskInitiatorColor")
			.bindProperty("tooltip","CreatedByName");
			oTaskInitiatorImageCell.addContent(oTaskInitiatorIcn);
			firstRow.addCell(oTaskInitiatorImageCell);

			//Cell For Task Title
			var taskTitleCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' + 'taskTitleCell',
				padding: sap.ui.commons.layout.Padding.Bottom
			});
			taskTitleCell.addStyleClass("sapUiExtInboxRRFirstRowStyle");
			
			
			//taskTitleCell.addContent(category_img);

		// 1.Row : Task Title and Date
			/*var otaskStatusImage = new sap.ui.commons.Image({
			         id : that.getId() + '--' + "rrViewTaskTitleImage",
			         text : "",
			         decorative : false,
			         visible: false
//			         tooltip : this._oBundle.getText("INBOX_MSGBAR_CLOSE_TOOLTIP")
			     });
			otaskStatusImage.bindProperty("src","",function(value){
				return "";
			});*/
			
			var taskName = new sap.uiext.inbox.InboxLink(that.getId() + '--' + "rrViewTaskTitle");
			taskName.addStyleClass('sapUiExtInboxfontBold');
			taskName.addDelegate({
	            onAfterRendering : function() {
	                if (this.data("overDue") === true) {
	                    this.addStyleClass('sapUiExtInboxRedColor');
	                }
	            }
	        });
			//taskName.addStyleClass("sapUiExtInboxNoUnderline");
	 	    taskName.bindProperty("text","TaskTitle",function(value){
	 			if(this.getBindingContext() ===  undefined)
	 			   return undefined;
	 			else
	 				return value;
	 		});
	 	    taskName.bindProperty("overdue","CompletionDeadLine", function(value){
				return that._isOverDue(value);
			});
	 	    taskName.bindProperty("tooltip","TaskTitle");
	 	    taskName.bindProperty("enabled", "Status", function(value) {
	 	    	if (value === "COMMITTED") {
	 	    		this.addStyleClass("sapUiExtInboxLnkDsbl");
	 	    		return false;
	 	    	} else if (that.getOpenCompletedTasks() === false && value == "COMPLETED") {
	 	    		this.addStyleClass("sapUiExtInboxLnkDsbl");
	 	    		return false;
	 	    	}
	 	    	this.removeStyleClass("sapUiExtInboxLnkDsbl");
	 	    	return true;

	        });
	        taskName.attachPress(this, function(oEvent, view) {
	        	//TODO: Refactor so that need not be done at two places for the different Views
	            that.showBusyLoader();
	            var oRow = oEvent.getSource().getParent();
	            var oContext = oEvent.getSource().getBindingContext();
	            var oModel = that.getCoreModel();
	            var oSelectedRow = oEvent.getSource().getParent().getParent().getParent();

	            // var oTaskExecMeta = {};
	            var aTaskExecutionURLs = [];
	            var aTaskExecIDs = [];
	            var aTaskExecTitles = [];
	            var aTaskExecSAPOrigins = [];

	            aTaskExecIDs.push(oModel.getProperty("InstanceID", oContext));
	            aTaskExecTitles.push(oModel.getProperty("TaskTitle", oContext));
	            aTaskExecSAPOrigins.push(oModel.getProperty("SAP__Origin", oContext));

	            if (that.getTaskExecutionURLCallBack != "" && that.getTaskExecutionURLCallBack != undefined && that.getTaskExecutionURLCallBack !== null){
	            	var taskUiURL = that.getTaskExecutionURLCallBack(aTaskExecIDs[0],aTaskExecSAPOrigins[0]);
	            		if(taskUiURL !== null && taskUiURL.replace(/\s/g, "").length > 0) {
	            			aTaskExecutionURLs.push(taskUiURL);
	            		}
	            }else{
	            			aTaskExecutionURLs.push("");
	            }

	            var evt = oEvent.getParameter("windowEvent");
	            if(!evt.ctrlKey && !(evt.button==1) && !evt.shiftKey && !that.bOpenTaskUIInNewTab){	            	
                    view.populateTaskExecutionContent({
                    	aSelectedContexts: [oContext],
                        arrayURLs : aTaskExecutionURLs,
                        arrayIDs : aTaskExecIDs,
                        arrayTitles : aTaskExecTitles,
                        aTaskSAPOrigins : aTaskExecSAPOrigins,
                        oRow : oSelectedRow
                    });
                    that.hideBusyLoader();
    			}else{
    				that.hideBusyLoader();
    				var taskUiURL = aTaskExecutionURLs[0]
    				if(taskUiURL !== null && taskUiURL.replace(/\s/g, "").length > 0) {
    					var taskExecWindow = window.open(taskUiURL);
        				taskExecWindow.focus();
        				oEvent.preventDefault();
    				}
    				
    			}
	            
	        });

			taskTitleCell.addContent(taskName);
			firstRow.addCell(taskTitleCell);
				
			//Cell For Created On Date
			var createdOnCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' + 'createdOnCell',
				padding: sap.ui.commons.layout.Padding.Both,
				hAlign: sap.ui.commons.layout.HAlign.End
			});

			createdOnCell.addStyleClass("sapUiExtInboxRRFirstRowStyle");
			createdOnCell.addStyleClass("sapUiExtInboxRRPaddingRight");
			var createdOnDate = new sap.ui.commons.TextView(that.getId() + '--' + "rrViewCreatedOnDate");
			createdOnDate.addStyleClass("sapUIExtInboxRRTextColourStyle");
			createdOnDate.bindProperty("tooltip", "CreatedOn",that.tooltipFormatForDateTime);
			createdOnDate.bindProperty("text", "CreatedOn", function(value) {
				if (value !== null && value !== "") {
					return that.inboxUtils.dateTimeFormat(value);
				}
		  });

			createdOnCell.addContent(createdOnDate);
			firstRow.addCell(createdOnCell);	

			// 2. Second Row ((1st cell occupied by colSpan of Image), Task Description, Status)
			var secondRow = new sap.ui.commons.layout.MatrixLayoutRow({
				id : that.getId() + '--' + 'secondRow'});

			rrMainMatrixLayout.addRow(secondRow);
			
			var taskDescriptnMatxLyt = new sap.ui.commons.layout.MatrixLayout({
				id : that.getId() + '--' + "taskDescriptnMatxLyt",
				layoutFixed : false
				});
			
		
			var oTaskDetails = new sap.uiext.inbox.InboxFormattedTextView({
	   			htmlText : {
	   				parts: this.oController.getTaskDetailsParts(),
	   				formatter: this.oController.getTaskDetailsFormatter(that)
	   			},
	   			maxLines : 1
	   			
	   		});
				var oTaskdescriptionContent = new sap.uiext.inbox.InboxToggleTextView({showMore : {
					parts: this.oController.getExpandTaskDescriptionLinkParts(),					  
					formatter: this.oController.getExpandTaskDescriptionLinkFormatter(that)
		 		
		     }}).setFTV(oTaskDetails).attachShowMoreClick(function (oEvent) {
		    	 var oTaskDesc = this.getAggregation('fTV');
		   		if(oEvent.getParameter('text') === that._oBundle.getText("INBOX_SHOW_MORE_TEXT")){
		   		
		   			oTaskDesc.setHtmlText(oTaskDesc.data("showMore"));
		   			oTaskDesc.removeClamp();
		   			oTaskDesc.data('clamped','false');
				}else{
					oTaskDesc.setMaxLines(1);
					oTaskDesc.setHtmlText(oTaskDesc.data("showLess"));
					
				}
		   	});
		   
			var oTaskDescriptionCell = new sap.ui.commons.layout.MatrixLayoutCell({
	 	    	id : that.getId() + '--' + 'taskDesCell',
	 	    	hAlign: sap.ui.commons.layout.HAlign.Left,
	 	    	colSpan : 1 });
			
			oTaskDescriptionCell.addContent(oTaskdescriptionContent);
		
			taskDescriptnMatxLyt.createRow( oTaskDescriptionCell);
			 var oTaskDescriptionMatxCell = new sap.ui.commons.layout.MatrixLayoutCell({
					id :  that.getId() + '--' +  'taskDescriptionCell',
					padding: sap.ui.commons.layout.Padding.None,
					colSpan : 1 });
			
			 oTaskDescriptionMatxCell.addContent(taskDescriptnMatxLyt);
			 secondRow.addCell(oTaskDescriptionMatxCell);	

			//Cell For Status
			var statusCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' +  'statusCell',
				padding: sap.ui.commons.layout.Padding.End,
				hAlign: sap.ui.commons.layout.HAlign.End,
				vAlign: sap.ui.commons.layout.VAlign.Top
			});
			statusCell.addStyleClass("sapUiExtInboxRRPaddingRight");
			
		  var statusText = new sap.ui.commons.TextView(that.getId() + '--' + "rrViewStatus");
 	    statusText.addStyleClass("sapUIExtInboxRRTextColourStyle");
 	    statusText.bindProperty("text","Status", function(value) {
 	    	var oModel= that.getModel();
 	    	var statusLabel= oModel.getProperty(sap.uiext.inbox.InboxConstants.PROPERTY_NAME_CUSTOM_STATUS,this.getBindingContext(),false);
 	    	return that._getTaskStatus(value,statusLabel);
				
 	    	
 	    });

			statusCell.addContent(statusText);
			secondRow.addCell(statusCell);

			// 3.Row (Task Initiaor Name, Claim, ".", Release, SegmentedButtons(Attachments, Comments, CustomAttributes)
			var thirdRow = new sap.ui.commons.layout.MatrixLayoutRow({
				id : that.getId() + '--' + 'thirdRow'});

			rrMainMatrixLayout.addRow(thirdRow);

			//Cell for Task Initiator Name.	
			var taskInitiatorNameCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' + 'taskInitiatorNameCell',
				hAlign: sap.ui.commons.layout.HAlign.Center,
				vAlign: sap.ui.commons.layout.VAlign.Top,
				colSpan : 1,
				rowSpan : 2
				});

		   var taskInitiatorName = new sap.ui.commons.TextView(that.getId() + '--' + "taskInitiatorName",{design : sap.ui.commons.TextViewDesign.Small, wrapping : false,
				width : '90%'});
		   taskInitiatorName.setTextAlign(sap.ui.core.TextAlign.Center);
		   taskInitiatorName.setDesign(sap.ui.commons.TextViewDesign.Bold);
		   //taskInitiatorName.setWrapping(true);
	 	    taskInitiatorName.bindProperty("text","CreatedByName");
	 	   // taskInitiatorVLayout.insertContent(taskInitiatorName, 1);

			taskInitiatorNameCell.addContent(taskInitiatorName);
			thirdRow.addCell(taskInitiatorNameCell);
				
				
			//Cell for Task Action Links.	
			var taskActionLayoutCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id :  that.getId() + '--' +  'actionLinksCell',
				padding: sap.ui.commons.layout.Padding.None,
				colSpan : 1 });

			//TODO: This would be a actions specific layout inside the main Layout.
			//We should try to improve it in future.
	 	   var taskActionInnerMatLayt = new sap.ui.commons.layout.MatrixLayout({
				id : that.getId() + '--' + "taskActionMatrixLayout",
				layoutFixed : false
				});
	 	    
	 	   var claimActionCell = new sap.ui.commons.layout.MatrixLayoutCell({
	 	  	 id : that.getId() + '--' + 'claimActionCell',
	 	  	 hAlign: sap.ui.commons.layout.HAlign.Left,
	 	  	 vAlign: sap.ui.commons.layout.VAlign.Bottom,
	 	  	 colSpan : 1 });
	 	   
	 	   var claimActionLink = new sap.ui.commons.Link(that.getId() + '--' + "rrViewClaimAction",{
	 	    	tooltip:that._oBundle.getText("INBOX_ACTION_BUTTON_CLAIM"),
	 	    	visible:false,
	 	    	enabled:false
	 	    	});
	 	   claimActionLink.addStyleClass("sapUiExtInboxLnkNoUnderline");
	 	    
	 	    //DOT Seperator b/w Claim and Release Action Links
	 	   var dotLabel = new sap.ui.commons.Label({
	 		   id:that.getId() + '--' + "dotSeparator", 
	 		   text:sap.uiext.inbox.InboxConstants.DOT,
	 		   visible:false
	 		   });
	 	   dotLabel.addStyleClass("sapUIExtInboxDotSeperatorStyle"); 
	 	   
	 	   	claimActionLink.setText(that._oBundle.getText("INBOX_ACTION_BUTTON_CLAIM"));
	 	    claimActionLink.attachPress({inbox:that,view:that.constants.rowRepeaterView,action:"Claim"}, that.executeActionOnTask);
	 	    claimActionCell.addContent(claimActionLink);

	 	    var releaseActionCell = new sap.ui.commons.layout.MatrixLayoutCell({
	 	    	id : that.getId() + '--' + 'releaseActionCell',
	 	    	hAlign: sap.ui.commons.layout.HAlign.Left,
	 	    	vAlign: sap.ui.commons.layout.VAlign.Bottom,
	 	    	colSpan : 1 });
	 	    
	 	    var releaseActionLink = new sap.ui.commons.Link(that.getId() + '--' + "rrViewReleaseAction",{
	 	    	tooltip:that._oBundle.getText("INBOX_ACTION_BUTTON_RELEASE"),
	 	    	visible:false,
	 	    	enabled:false
	 	    	});
	 	    releaseActionLink.addStyleClass("sapUiExtInboxLnkNoUnderline");
	 	    releaseActionLink.setText(that._oBundle.getText("INBOX_ACTION_BUTTON_RELEASE"));
	 	    releaseActionLink.attachPress({inbox:that,view:that.constants.rowRepeaterView,action:"Release"}, that.executeActionOnTask);
	 	    releaseActionCell.addContent(releaseActionLink);
	 	    
	 	    //DOT Seperator b/w Release and Forward Action Links
	 	    var dotLabel2 = new sap.ui.commons.Label({id:that.getId() + '--' + "dotSeparator2", visible:false, text:sap.uiext.inbox.InboxConstants.DOT});
	 	    dotLabel2.addStyleClass("sapUIExtInboxDotSeperatorStyle");
	 	    var forwardActionCell = that._createForwardActionLinkCell();
	 	   
	 	    var customActionCell = new sap.ui.commons.layout.MatrixLayoutCell({
	 	   	id : that.getId() + '--' + 'customActionCell',
	 	   	hAlign: sap.ui.commons.layout.HAlign.Left,
	 	   	vAlign: sap.ui.commons.layout.VAlign.Top,
	 	   	padding: sap.ui.commons.layout.Padding.None,
	 	   	colSpan : 1});
	 	
	 	 var oHorizontalLayout = new sap.ui.layout.HorizontalLayout(that.getId()+ '--' + "hrLayoutForCustomActions");
	 	 oHorizontalLayout.setVisible(false);
	 	 customActionCell.addContent(oHorizontalLayout);
	 	 oHorizontalLayout.bindProperty("visible", "InstanceID", function(sValue) {
	 		 if (!that._isCompletedTasksSelected()) {   // not creating custom actions in case completed tasks are selected in stream view
	 			if(sValue){
		 			if(this.getContent()[0]){
		 				this.getContent()[0].setVisible(true);
		 			}
		 			var oModel = that.getCoreModel();
		 	        var oContext = this.getBindingContext();
		 	        var _sSapOrigin = oModel.getProperty("SAP__Origin", oContext);
		 	        var aCustomActionArray;
		 	        var horLayout=this;
		 	       
		 	        function _createCustomActionsLinks(aCustomActionArray){
			 	        if(aCustomActionArray && aCustomActionArray.length > 0){
			 	        	//horLayout.destroyContent();
			 	        	if(horLayout.getContent()[0])
			 	        		horLayout.getContent()[0].setVisible(false);
			 	        	for(var action in aCustomActionArray){
			 	        		(function(act){
			 	        			var link= new sap.ui.commons.Link();
			 	        			var oCustomAction = aCustomActionArray[act];
			 	        			link.data('key',oCustomAction.DecisionKey);
									link.data('text',oCustomAction.DecisionText);
									link.data('commentsMandatory',oCustomAction.CommentMandatory)
			 	        			var sCustomActionLinkText = !oCustomAction.DecisionText? oCustomAction.DecisionKey: oCustomAction.DecisionText;
			 	        			link.setText(sCustomActionLinkText);
			 	        			link.attachPress({inbox:that,view:that.constants.rowRepeaterView}, jQuery.proxy(that._handleCustomActionClick,that));
			 	        			link.addStyleClass("sapUiExtInboxLnkNoUnderline");
			 	        			link.addStyleClass("sapUiExtInboxCustomActionLinkPadding");
			 	        			var dotLabel = new sap.ui.commons.Label({
			 	        				text:sap.uiext.inbox.InboxConstants.DOT,
			 	        				visible:true
			 	        			});
			 	        			dotLabel.addStyleClass("sapUiExtInboxCustomActionLinkPadding");
			 	        			dotLabel.addStyleClass("sapUIExtInboxDotSeperatorStyle");
			 	        			horLayout.addContent(dotLabel);
			 	        			horLayout.addContent(link);
			 	        			
			 	        		}(action));
			 	        	}	
			 	        }else{
			 	        	if(horLayout.getContent()[0])
			 	        		horLayout.getContent()[0].setVisible(false);
			 	        	horLayout.setVisible(false);
			 	        }
		 	        }
		 	       aCustomActionArray= that._getCustomActionsDefinition(sValue,_sSapOrigin, null, _createCustomActionsLinks);
		 	    }else{
			 		this.destroyContent();
			 		var localRefreshImg = new sap.ui.core.Icon();
		 			localRefreshImg.setSrc(that.constants.iconPool.getIconURI("refresh"));
			 		this.addContent(localRefreshImg);
			 		return true;
		 		}
	 		 }
	 	});
	 	    

	 	 taskActionInnerMatLayt.createRow(claimActionCell, dotLabel, releaseActionCell, dotLabel2, forwardActionCell,customActionCell);

	 	 taskActionLayoutCell.addContent(taskActionInnerMatLayt);
		 thirdRow.addCell(taskActionLayoutCell);	
				
			//Cell for Other Actions Segmented Buttons.	
			var segmentedButtonsCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' + 'segmentedButtonsCell',
				padding: sap.ui.commons.layout.Padding.None,
				hAlign: sap.ui.commons.layout.HAlign.End,
				colSpan : 1 });

			 var icons = that.createOtherActions(that);
			 segmentedButtonsCell.addContent(icons);
			 thirdRow.addCell(segmentedButtonsCell);	
 	    
			 rrMainMatrixLayout.addStyleClass("sapUiExtInboxRowRepeaterLayoutBorder");
		
	 	                         
 	    var oTasksRowRepeater = new sap.ui.commons.RowRepeater(that.getId() + '--'+'tasksRowRepeater',{numberOfRows : 5});	
 	    oTasksRowRepeater.setBusyIndicatorDelay(0);
 	    oTasksRowRepeater.setThreshold(10000);
 	    oTasksRowRepeater.setDesign(sap.ui.commons.RowRepeaterDesign.BareShell);
 	    oTasksRowRepeater.addStyleClass("sapUiExtInboxBackgroundColour");
 	    oTasksRowRepeater.addStyleClass("sapUiExtInboxRowRepeaterBorder");
 	   
	 	}

 	
	//Adding Sorting Buttons Refresh Button and Settings
 	var rowRepeaterToolBar = that.createRowRepeaterToolBar(that);
 	rowRepeaterToolBar.setVisible(false);
 	verticalLayout.addContent(rowRepeaterToolBar);
 	
 	//This is based on the defaultView, after we introduce the concept of default view, we need to use that parameter and set visibility.
 	//If RR View is default then RR View visibilty will be true and List View Table will be false at the time of creation.
 	oTasksRowRepeater.setVisible(false);
 	verticalLayout.addContent(oTasksRowRepeater);
	 	
 	//Adding paginator and page settings(below rowrepeater).
 	var rowRepeaterToolsContent = that.createRowRepeaterToolsContent(that);
 	rowRepeaterToolsContent.setVisible(false);
 	verticalLayout.addContent(rowRepeaterToolsContent);
};

sap.uiext.inbox.Inbox.prototype.onSubstitutionButtonPress = function (oEvent, oInbox){
    var that = oInbox;
    var substitutionRulesManager    = sap.ui.getCore().byId(that.getId() + '--' + 'substitutionRulesManager');
    var oModel = that.getCoreModel();
    if(substitutionRulesManager === undefined){
    	substitutionRulesManager = new sap.uiext.inbox.SubstitutionRulesManager(that.getId() + '--' + 'substitutionRulesManager');
    	substitutionRulesManager.setParent(that);
        substitutionRulesManager.sUrl = oModel.sServiceUrl;
        substitutionRulesManager.bUseBatch = that.bUseBatch;
        substitutionRulesManager.oTCMModel = that.oTCMModel;
        substitutionRulesManager.oTcmMetadata = that.oTcmMetadata;
        substitutionRulesManager.oConfiguration = that.oConfiguration;
        substitutionRulesManager.isSubstitutionRuleCreationSupported=that.isSubstitutionRuleCreationSupported;
        substitutionRulesManager.oDataManager=that.oDataManager;
        
    	var oProfileCollectionConstant = that.constants.SubstitutionProfileCollection;
    	substitutionRulesManager.bSubstitutionProfileAvailable = that.oTcmMetadata._isEntitySet(oProfileCollectionConstant.name, oProfileCollectionConstant.entityType);
    	
    }
    substitutionRulesManager.getSubstitutionRulesData(oModel);
    
    substitutionRulesManager.open();
};

sap.uiext.inbox.Inbox.prototype.populateTaskExecutionContent = function(oTaskExecMeta) {
    var that = this;
    var bSingleTaskSelected = false, iTotalNumberOfTasks = 0;
    
    this.showBusyLoader();

    var sTaskExecutionThemeURL = "";

    if (this.getTaskExecutionURLThemeValue() !== undefined && this.getTaskExecutionURLThemeValue() !== null
            && this.getTaskExecutionURLCallBack === this.getDefaultTaskExecutionURLCallBack) {
        sTaskExecutionThemeURL = this.getTaskExecutionURLThemeValue();
    }

    var executionUI = sap.ui.getCore().byId(this.getId() + '--' + 'taskExecUI');
    if (executionUI != undefined) {
        executionUI.destroy();
    }
  
    var i = 0;
    var urls, ids, titles, taskExecMeta,sapOrigins, aSelectedContexts, deleteRecordContexts = [], aChangeContextValues = [], aWorkingContexts, oRRSelectedRow;
    if (oTaskExecMeta === undefined || oTaskExecMeta === null)
        oTaskExecMeta = this.getnavigateTaskExecMetadata();

    if (oTaskExecMeta != undefined) {
        urls = oTaskExecMeta.arrayURLs;
        ids = oTaskExecMeta.arrayIDs;
        iTotalNumberOfTasks = ids.length;
        titles = oTaskExecMeta.arrayTitles;
        sapOrigins = oTaskExecMeta.aTaskSAPOrigins;
        aSelectedContexts = oTaskExecMeta.aSelectedContexts;
        aWorkingContexts = aSelectedContexts;
        if(this.clientUpdate){
        	oRRSelectedRow = oTaskExecMeta.oRow
        }
    }

    executionUI = new sap.ui.ux3.OverlayContainer(this.getId() + '--' + "taskExecUI");
    executionUI.setOpenButtonVisible(false);
    
    //get the selected Contexts and set it to selectedContexts in the Inbox
    if(this.currentView === this.constants.tableView && aSelectedContexts){
        this.selectedContexts = aSelectedContexts;
    }
    executionUI.attachClose({inBox:this, completedTaskContexts: deleteRecordContexts, changeContextValues : aChangeContextValues, rrSelectedRow : oRRSelectedRow}, function(oEvent, oInboxandCompletedStatusContexts) {
        var inBox = oInboxandCompletedStatusContexts.inBox, completedTaskContexts =  oInboxandCompletedStatusContexts.completedTaskContexts, changeContextValues = oInboxandCompletedStatusContexts.changeContextValues;
        jQuery.sap.byId(that.getId() + '--' + "execURLFrame").attr('src', "");
        inBox.resetSearchCriteria();
        if(inBox.clientUpdate){
        	var rrSelectedRow = oInboxandCompletedStatusContexts.rrSelectedRow;
            if (inBox.getTaskExecURLStatusCallBack !== "" && inBox.getTaskExecURLStatusCallBack !== undefined && inBox.getTaskExecURLStatusCallBack !== null){ 
                var status = inBox.getTaskExecURLStatusCallBack(ids[i],sapOrigins[i]);
                if(status === 'COMPLETED'){
                	if(oRRSelectedRow){
                		completedTaskContexts.push({orow: oRRSelectedRow, context: aWorkingContexts[i]});
                	}else{
                		completedTaskContexts.push(aWorkingContexts[i]);
                	}
                }else{
                	if(oRRSelectedRow){
                		changeContextValues.push({row: oRRSelectedRow, context: aWorkingContexts[i], keys : [{key: 'Status', value: status}]});
                	}else{
                		changeContextValues.push({context: aWorkingContexts[i], keys : [{key: 'Status', value: status}]});
                	}
                }
            }
            inBox._refreshLocal(completedTaskContexts, changeContextValues);
        }else{
            //TODO: refactor required. Needs to be explicitly passed and the value is again reset back to the same property.one more
            inBox.applyFilterOnResponse(inBox.selectedContexts);
        }
    });
    
    if (iTotalNumberOfTasks == 1)
    	{ bSingleTaskSelected = true; }
    
   var nxtBtnContainer =  sap.ui.getCore().byId(this.getId() + '--' + 'nxtBtnContainer');
   if ( nxtBtnContainer === undefined && !bSingleTaskSelected) {
	 nxtBtnContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "nxtBtnContainer", {
	        layoutFixed : false,
	        height : "95%",
	        width:"100%"
	    });
  }
    
    var prevIcon = sap.ui.getCore().byId(this.getId() + '--' + 'prevIcon');
    if (prevIcon === undefined && !bSingleTaskSelected) {
    	    prevIcon=  new sap.ui.core.Icon({id:this.getId() + '--' + "prevIcon",
    		src: sap.ui.core.IconPool.getIconURI("navigation-left-arrow"),
    		size: "32px",
    		color: "rgb(51,51,51)",
    		//activeColor: "white",
    		activeBackgroundColor: "white",
    		hoverColor: "rgb(238,238,238)",
    		hoverBackgroundColor: "rgb(102,102,102)",
    		width: "90%"
    	}).addStyleClass("sapUiExtInboxNextPrevBtnDisabled");
    	    
    	
     	    prevIcon.setSrc(sap.ui.core.IconPool.getIconURI("navigation-left-arrow"));
     	    
     	    prevIcon.setColor("#eeeeee").setHoverBackgroundColor("white");
    	    
    	    prevIcon.attachPress(function(oEvent) {
    	    	if(prevIcon.getColor()!=="#eeeeee"){
    	        // var status = that.getPropertyforTaskID("Status",ids[i]);

    	        //disable the next and prev buttons till the next one is loaded
    	    	prevIcon.setColor("#eeeeee").setHoverBackgroundColor("white");
    	    	nextIcon.setColor("#eeeeee").setHoverBackgroundColor("white");
    	        
    	        var status = "";
    	        if (that.getTaskExecURLStatusCallBack !== "" && that.getTaskExecURLStatusCallBack !== undefined && that.getTaskExecURLStatusCallBack !== null){
    	            status = that.getTaskExecURLStatusCallBack(ids[i],sapOrigins[i]);
    	        }
    	        if (status === "COMPLETED") {
    	            if(that.clientUpdate){
    	                deleteRecordContexts.push(aSelectedContexts[i]);
    	            }
    	            urls.splice(i, 1);
    	            ids.splice(i, 1);
    	            aWorkingContexts.splice(i, 1);
    	        }else{
    	            if(that.clientUpdate){
    	                aChangeContextValues.push({context: aSelectedContexts[i], keys : [{key: 'Status', value: status}]});
    	            }
    	        }

    	        i = i - 1;

    	        if (urls[i] === undefined){
    	            urls[i] = "";
    	            if (that.getTaskExecutionURLCallBack !== "" && that.getTaskExecutionURLCallBack !== undefined && that.getTaskExecutionURLCallBack !== null){
    	                // urls[i] = that.getTaskExecutionURL(ids[i]);
    	                urls[i] = that.getTaskExecutionURLCallBack(ids[i],sapOrigins[i]);
    	            }
    	        }
    	        if(urls[i] !== null && urls[i].replace(/\s/g, "").length > 0) {
    	        	jQuery.sap.byId(that.getId() + '--' + "execURLFrame").attr('src', that.inboxUtils.appendThemingParameters(urls[i], sTaskExecutionThemeURL)+"&sap-inbox-overlay=true");
    	        }
    	    }
    	    	else{
    	    		oEvent.preventDefault();
    	    	}

    	    }); 
    }
    
    var nextIcon = sap.ui.getCore().byId(this.getId() + '--' + 'nextIcon');
    if (nextIcon === undefined && !bSingleTaskSelected) {
    	var nextIcon=  new sap.ui.core.Icon({id:this.getId() + '--' + "nextIcon",
    		src: sap.ui.core.IconPool.getIconURI("navigation-right-arrow"),
    		size: "32px",
    		color: "rgb(51,51,51)",
    		//activeColor: "white",
    		activeBackgroundColor: "white",
    		hoverColor: "rgb(238,238,238)",
    		hoverBackgroundColor: "rgb(102,102,102)",
    		width: "90%"
    	}).addStyleClass("sapUiExtInboxNextPrevBtnDisabled");
    	
    	nextIcon.setSrc(sap.ui.core.IconPool.getIconURI("navigation-right-arrow"));
 	    
 	   if(ids.length > 1){
	    	nextIcon.setColor("#333333").setHoverBackgroundColor("rgb(102,102,102)");
	    }else{
	    	nextIcon.setColor("#eeeeee").setHoverBackgroundColor("white");
	    }
 	    
    	nextIcon.attachPress(function(oEvent) {
        	if(nextIcon.getColor()!=="#eeeeee"){
            // callBack
            
            //disable the next and prev buttons till the next one is loaded
        	prevIcon.setColor("#eeeeee").setHoverBackgroundColor("white");
        	nextIcon.setColor("#eeeeee").setHoverBackgroundColor("white");
            
            var status = "";
            if (that.getTaskExecURLStatusCallBack !== "" && that.getTaskExecURLStatusCallBack !== undefined && that.getTaskExecURLStatusCallBack !== null){ 
                status = that.getTaskExecURLStatusCallBack(ids[i],sapOrigins[i]);
            }
            if (status === "COMPLETED") {
                if(that.clientUpdate){
                    deleteRecordContexts.push(aSelectedContexts[i]);
                }
                urls.splice(i, 1);
                ids.splice(i, 1);
                aWorkingContexts.splice(i, 1);
            } else {
                if(that.clientUpdate){
                    aChangeContextValues.push({context: aSelectedContexts[i], keys : [{key: 'Status', value: status}]});
                }
                i = i + 1;
            }

            if (urls[i] === undefined){
                // urls[i] = that.getTaskExecutionURL(ids[i]);
                urls[i] = ""; 
                if (that.getTaskExecutionURLCallBack !== "" && that.getTaskExecutionURLCallBack !== undefined && that.getTaskExecutionURLCallBack !== null){
                    urls[i] = that.getTaskExecutionURLCallBack(ids[i],sapOrigins[i]);
                }
            }
            if(urls[i] !== null && urls[i].replace(/\s/g, "").length > 0) {
            	jQuery.sap.byId(that.getId() + '--' + "execURLFrame").attr('src', that.inboxUtils.appendThemingParameters(urls[i], sTaskExecutionThemeURL)+"&sap-inbox-overlay=true");
            }
        	}
        	else{
        		oEvent.preventDefault();
        	}
            
        });
    }

    
    var prevBtnContainer =  sap.ui.getCore().byId(this.getId() + '--' + 'prevBtnContainer');
   if ( prevBtnContainer === undefined && !bSingleTaskSelected) {
	        prevBtnContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "prevBtnContainer", {
	        layoutFixed : false,
	        height : "95%",
	        width:"100%"
	    });
   }
    
     var content = new sap.ui.core.HTML(this.getId() + '--' + "execURLFrame", {
        content : "<iframe name='myframe' src='" + urls[i] + sTaskExecutionThemeURL +"&sap-inbox-overlay=true"+ "' scrolling='auto' id = '"
                + this.getId() + '--' + "execURLFrame"
                + "' style='position: absolute;height: 100%;width: 100%; border: none;'></iframe>"
    });

       var oBorderLayout = new sap.ui.commons.layout.BorderLayout(this.getId() + '--' + "taskExecBorderLayout", {
        width : "100%",
        height : "100%",
        top : new sap.ui.commons.layout.BorderLayoutArea({
            size : "20%",
            contentAlign : "center",
            visible : false,
            content : [new sap.ui.commons.TextView({
                text : 'Task:' + titles[i],
                design : sap.ui.commons.TextViewDesign.Bold
            })]
        }),
        center : new sap.ui.commons.layout.BorderLayoutArea({
            contentAlign : "left",
            visible : true,
            content : [content]
        })
    });
      
       if (!bSingleTaskSelected) {
    	   
    	   var label = sap.ui.getCore().byId(this.getId() + '--' + "traverseLabel");
    		if (!label) {
    				label = new sap.ui.commons.Label(this.getId() + '--' + "traverseLabel");
    		}
    	   var dummyLabel = sap.ui.getCore().byId(this.getId() + '--' + "dummyLabel");
    	   if (!dummyLabel) {
    		       dummyLabel = new sap.ui.commons.Label({
    		    	id: this.getId() + '--' + "dummyLabel",
    		    	visible:false
    		    	});
    	   }
    	    
    	   nxtBtnContainer.createRow(nextIcon); 
    	   prevBtnContainer.createRow(prevIcon); 
    	   var oBorderLayout = sap.ui.getCore().byId(this.getId() + '--' + "taskExecBorderLayout");
    	   
    	   oBorderLayout.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.begin, {
    			size : "2%",
    			contentAlign : "right",
    			visible : true,
    			content : [prevBtnContainer, label]
    		});

    	   oBorderLayout.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.end, {
    			size : "2%",
    			contentAlign : "right",
    			visible : true,
    			content : [nxtBtnContainer, dummyLabel]
    		});

       }  
    executionUI.addContent(oBorderLayout);
    
    content.attachAfterRendering(function(){
        jQuery.sap.byId(that.getId() + '--' + "execURLFrame").bind('load', function(event) {
            
            var idsArrayLength = ids.length;
            if (nextIcon) {
            	if(i !== idsArrayLength - 1)
                	nextIcon.setColor("#333333").setHoverBackgroundColor("rgb(102,102,102)");
                	
                else
                	nextIcon.setColor("#eeeeee").setHoverBackgroundColor("white");
            }
            
            if (prevIcon) {
                if(i===0  )
                	prevIcon.setColor("#eeeeee").setHoverBackgroundColor("white");
                else
                	prevIcon.setColor("#333333").setHoverBackgroundColor("rgb(102,102,102)");

            }
            
            if (label) {
            	 label.setDesign(sap.ui.commons.LabelDesign.Bold);
                 label.setWidth("85%");
                 label.setText((i+1)+"/"+ids.length);
            }
           
            if(dummyLabel) {
            	 dummyLabel.setDesign(sap.ui.commons.LabelDesign.Bold);
                 dummyLabel.setWidth("60%");
            }
           
        });
    });
  
    if(bSingleTaskSelected && urls !== null && !urls[0]) {
    	this.hideBusyLoader();
    } else {
    	executionUI.open();
    }
  
    function respondToSizingMessage  (oEvent) {
    	
  	  var oEventParameter ;
  	  var taskExecutionUI = jQuery.sap.byId(that.getId() + '--' + "taskExecUI");
  	  if (jQuery.browser.msie == true && parseInt(jQuery.browser.version) < 10 ){
  		  var oEdata = jQuery.parseJSON(oEvent.data);
  	  } else {
  		  oEdata = oEvent.data;
  	  }
  	  
  	  if (jQuery.isArray(oEdata)) {
  		   
  		   jQuery.each(oEdata, function (key, value) {
  				
  			   oEventParameter = oEdata[key];
  				if(oEventParameter.command === "resize")
  				 
  				{	taskExecutionUI.css({"margin" : "auto"});
  				
  					if (!oEventParameter.data.height){
  					
  						taskExecutionUI.animate({"width" : oEventParameter.data.width}, "slow");
  					
  				  }
  				else if (!oEventParameter.data.width ) {
  					taskExecutionUI.animate({"height" : oEventParameter.data.height}, "slow");
  				}
  				else
  					taskExecutionUI.animate({"height" : oEventParameter.data.height, "width" : oEventParameter.data.width}, "slow"); 
  				
  				}
  			})
  	   }
  	   
  	      	
      } 
      if(window.addEventListener){
      	window.addEventListener('message',respondToSizingMessage, false);
      } else if (window.attachEvent){
      	window.attachEvent('onmessage',respondToSizingMessage);
      }
};

sap.uiext.inbox.Inbox.prototype.createInboxUI = function() {
    
	//Basic View: This view would be common for any view ex: Table View, Row Repeater View or Feed View
	var verticalLayout = new sap.ui.commons.layout.VerticalLayout(this.getId() + '--' + "verticalLayoutContainer");
   
    if (sap.ui.getCore().byId(this.getId() + '--' + 'toolbarContainer') === undefined) {
        verticalLayout.insertContent(this.populateToolBar(), 0);
    }
    
    this.populateViews();
    if (sap.ui.getCore().byId(this.getId() + '--' + 'notificationBar') === undefined) {
        verticalLayout.addContent(this.populateNotificationBar());
    }
    return verticalLayout;
};

sap.uiext.inbox.Inbox.prototype.openToolPopUp = function(inBox) {
    var that = inBox;
    //var rowSettingValue = that.getRowSettingsCookieValue();
    var rowSettingValue;
    var noOfrowsRBG = sap.ui.getCore().byId(that.getId() + '--' + "rowSettingsRBG");;
    var settingsPopUp = sap.ui.getCore().byId(that.getId() + '--' + "sPopup");
    if (settingsPopUp === undefined) {
        noOfrowsRBG = new sap.ui.commons.RadioButtonGroup(that.getId() + '--' + "rowSettingsRBG", {
            tooltip : "Select number of rows to be displayed on the Table",
            columns : 3
        // select: function() {oController.setRowSettingsCookieValue(this.getSelectedItem().getText(),1);}
        });
        var oItem = new sap.ui.core.Item({
            text : "10",
            key : "rows10"
        });
        noOfrowsRBG.addItem(oItem);
        oItem = new sap.ui.core.Item({
            text : "25",
            key : "rows25"
        });
        noOfrowsRBG.addItem(oItem);
        oItem = new sap.ui.core.Item({
            text : "50",
            key : "rows50"
        });
        noOfrowsRBG.addItem(oItem);
        settingsPopUp = new sap.ui.commons.Dialog(that.getId() + '--' + "sPopup", {
            title : inBox._oBundle.getText("INBOX_TABLE_SETTINGS_POPUP_TITLE"),
            content : [noOfrowsRBG],
            buttons : [new sap.ui.commons.Button({
                text : inBox._oBundle.getText("INBOX_BUTTON_OK_TEXT"),
                press : function() {
//                  that.setRowSettingsCookieValue(sap.ui.getCore().byId(that.getId() + '--' + 'rowSettingsRBG')
//                          .getSelectedItem().getText(), 1);
                    that.setNoOfRowsOnTable(sap.ui.getCore().byId(that.getId() + '--' + 'rowSettingsRBG')
                            .getSelectedItem().getText());
                    settingsPopUp.close();
                }
            })]
        });
        settingsPopUp.setWidth("231px");
        settingsPopUp.setHeight("137px");

    }
    if (rowSettingValue === undefined) {
        rowSettingValue = sap.ui.getCore().byId(that.getId() + '--' + 'listViewTable').getVisibleRowCount() + "";
    }
    if (rowSettingValue != undefined && noOfrowsRBG != undefined) {
        switch (rowSettingValue) {
            case "10" :
                noOfrowsRBG.setSelectedIndex(0);
                break;
            case "25" :
                noOfrowsRBG.setSelectedIndex(1);
                break;
            case "50" :
                noOfrowsRBG.setSelectedIndex(2);
                break;
        }
    }
    settingsPopUp.open();
};

sap.uiext.inbox.Inbox.prototype.setSubstitutionEnabled = function(isSubstitutionEnabled, path) {
    if(this.isSubstitutionEnabled != isSubstitutionEnabled) {
        this.isSubstitutionEnabled = isSubstitutionEnabled; 
        this._substitutionPath = path;
        this.addAndRemoveSubstDropDowns();
    }
    //TODO: Might need this code later point of time.
    //var settingsButton = sap.ui.getCore().byId(this.getId() + '--' + "settingsButton");
    //if(settingsButton != undefined){
    //  settingsButton.rerender();
    //}
};

sap.uiext.inbox.Inbox.prototype._setColumnVisibility = function(colList) {
	if(colList !== undefined && colList !== null){
		var that=this;
		var isTaskTitleVisible=false;
		var consts= sap.uiext.inbox.InboxConstants;
		var oTable= sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
		var invisibleCols= this.getInvisibleCols(colList);
		var cols= oTable.getColumns();
		jQuery.each(cols,function(index,column){
			jQuery.each(invisibleCols,function(index,field){
				if(that.absId(column.getId())===sap.uiext.inbox.InboxConstants.TABLE_VIEW_TECH_NAMES[field])
					column.setVisible(false);
				
			});
		});
		this.resizeColumns();
	}
};

sap.uiext.inbox.Inbox.prototype.absId= function(string){
	return string.split("--")[1].replace(/^\s+|\s+$/g,'');
	
};
sap.uiext.inbox.Inbox.prototype.getInvisibleCols= function(colList){
	var invisibleCols= [];
	jQuery.each(colList.columns,function(index,col){
		if(col.visibility===false)
			invisibleCols.push(col.field);
		
	});
	return invisibleCols;
	
};
sap.uiext.inbox.Inbox.prototype.getColumnVisibility = function() {
	return this.colList;
};

sap.uiext.inbox.Inbox.prototype.getSubstitutionEnabled = function() {
    return this.isSubstitutionEnabled
};

sap.uiext.inbox.Inbox.prototype.clearDrillDownFilter = function(){
    this.resetFilterView(true);
}

sap.uiext.inbox.Inbox.prototype.getTaskTableBinding = function() {
    var oListTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    return oListTable.getBinding('rows');
};

sap.uiext.inbox.Inbox.prototype.bindTaskExecutionURL = function(taskExecURLfnCallBack, taskExecURLStatusCallBack) {
    this.getTaskExecutionURLCallBack = taskExecURLfnCallBack;
    this.getTaskExecURLStatusCallBack = taskExecURLStatusCallBack;
    return this;
};

sap.uiext.inbox.Inbox.prototype.bindTaskTypeDynamicFilter = function(taskTypeDynamicFilterCallBack) {
    this.dynamicTaskTypeFilterCallBack = taskTypeDynamicFilterCallBack;
    return this;
};

sap.uiext.inbox.Inbox.prototype.bindSearch = function(searchCallBack) {
    this.searchCallBack = searchCallBack;
    return this;
};

sap.uiext.inbox.Inbox.prototype.bindSubstitutedUsers = function(sPath){
    var dropdownComboBox3 = sap.ui.getCore().byId(this.getId() + '--' + 'filterComboBox3');
    var sSeletedKey = dropdownComboBox3.getSelectedKey();
    var sSelectedUser = dropdownComboBox3.getValue();    
    var onBehalfOf = sap.ui.getCore().byId(this.getId() + '--' + 'onBehalfOfListItem');
    if(onBehalfOf === undefined) {
        onBehalfOf = new sap.ui.core.ListItem(this.getId() + '--' + 'onBehalfOfListItem');
    }
    onBehalfOf.setText(this._oBundle.getText("SUBSTITUTION_INBOX_FILTER_ON_BEHALF_OF"));
    onBehalfOf.setKey("onBehalfOf");
    onBehalfOf.setEnabled(false);
    
    var allUsers = sap.ui.getCore().byId(this.getId() + '--' + 'li_allUsers');
    if(allUsers === undefined) {
        allUsers = new sap.ui.core.ListItem(this.getId() + '--' + 'li_allUsers');
    }   
    allUsers.setText(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS"));
    allUsers.setKey("allUsers");

//  var onBehalfOf = '';
//    if(sap.ui.getCore().byId(this.getId() + '--' + 'onBehalfOfListItem') === undefined) {
//      var onBehalfOf = new sap.ui.core.ListItem(this.getId() + '--' + 'onBehalfOfListItem');
//    }
//    onBehalfOf.setText(this._oBundle.getText("SUBSTITUTION_INBOX_FILTER_ON_BEHALF_OF"));
//    onBehalfOf.setKey("onBehalfOf");
//    onBehalfOf.setEnabled(false);
//    
//    dropdownComboBox3.addItem(onBehalfOf);
//
//    var allUsers = '';
//    if(sap.ui.getCore().byId(this.getId() + '--' + 'li_allUsers') === undefined) {
//      allUsers = new sap.ui.core.ListItem(this.getId() + '--' + 'li_allUsers');
//    } 
//    allUsers.setText(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS"));
//  allUsers.setKey("allUsers");
//  
//  dropdownComboBox3.addItem(allUsers);

   /* var IDURIPart = sPath+"?$format=json&$skip=0&$top=100&$filter=((SubstitutedUsers eq true))&$inlinecount=allpages";*/
    var IDURIPart = sPath+"?$format=json&$skip=0&$top=100&$inlinecount=allpages";
    var requestURI = this.bpmSvcUrl + IDURIPart;
    var substitutes = "";
    var oModel = this.getCoreModel();
    var that = this;
    /****************/
    var requestOptions = {
        async:false,
        requestUri : requestURI,
        method : "GET",
        headers : {
            Accept : "application/json",
            "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
        }
    };
    OData.request(requestOptions, function(data, request) {
        // TO-DO : make this generic
        //substitutes = data.DisplayName;
        //dropdownComboBox3
        
        if(data.results.length > 0) {
            if(dropdownComboBox3.getEnabled() === false) {
                dropdownComboBox3.setEnabled(true);
            }

        dropdownComboBox3.removeAllItems();
        dropdownComboBox3.addItem(onBehalfOf);
        dropdownComboBox3.addItem(allUsers);
        
        for (var i = 0; i < data.results.length; i++) {
            substitutes +=data.results[i].DisplayName;
            //if(that.doesThisItemExistInComboBox(listOfItems, data.results[i].UniqueName) === false) {
                var listItem = new sap.ui.core.ListItem();
                listItem.setKey(data.results[i].UniqueName);
                listItem.setText(data.results[i].DisplayName);
                dropdownComboBox3.addItem(listItem);
            //}
          }
        
        // on refresh resetting dropdownfilter3 to the previously selected user
        if (that.bRefreshStartFlag && that.filtersToApply.dropDownFilter3){
        	var bUserExists = false;
        	for (var i = 0; i < data.results.length; i++) {
        		if (data.results[i].UniqueName == sSeletedKey) {
        			bUserExists = true;
        			dropdownComboBox3.setSelectedKey(sSeletedKey);
        		}
        	}
        	// if user is no longer receiving tasks from previously selected user 
        	if (!bUserExists) {
        		delete that.filtersToApply.dropDownFilter3;
        		that.showMessage("error", that._oBundle.getText("INBOX_MSG_ERR_SUBSTITUTION_DELETED", [sSelectedUser]));
        	}
        	bUserExists = false;
        }
        } else {
            dropdownComboBox3.setEnabled(false);
        }
    }, function(error) {
        if(error.response.statusCode == 205){
            var eventParams = {statusCode : error.response.statusCode, statusText : error.response.statusText};
            oModel.fireRequestFailed(eventParams);
        }else{
        //TODO: use enums for messageType.
            that.showMessage("error", that._oBundle.getText("INBOX_MSG_ERR_EXUI") + this.id);
        }
    });
    
//  var newOModel = new sap.ui.model.odata.ODataModel(this.oModel.sServiceUrl,true);
//  dropdownComboBox3.setModel(newOModel);
//  
//  var oItemTemplate1 = new sap.ui.core.ListItem();
//  oItemTemplate1.bindProperty("text", "DisplayName");
//  oItemTemplate1.bindProperty("key", "UniqueName");
//  var oFilter = [];
//  var filter = new sap.ui.model.Filter("SubstitutedUsers", sap.ui.model.FilterOperator.EQ, "true");
//  oFilter.push(filter);
//  dropdownComboBox3.bindItems(sPath, oItemTemplate1, null, oFilter); 
    
    //var oModel = this.getCoreModel();
    //oModel.oData["UserInfoCollection('USER.PRIVATE_DATASOURCE.un:allUsers')"] = {"DisplayName":"All Users", "UniqueID":"USER.PRIVATE_DATASOURCE.un:allUsers","__metadata":{"type":"Inbox.UserInfo","uri":""}};
    
    /*var allUsers = new sap.ui.core.ListItem(this.getId() + '--' + "li_allUsers");
    allUsers.bindProperty("text",this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS"));
    allUsers.bindProperty("key","allUsers");
    dropdownComboBox3.addItem(allUsers);
    */
};

sap.uiext.inbox.Inbox.prototype.bindTaskTable = function(sPath, oTaskFilters) {
	var oInboxFilter = new sap.uiext.inbox.InboxFilters();
	var oInboxSecondaryFilter = new sap.uiext.inbox.InboxSecondaryFilters();
	oInboxFilter.setSecondaryFilter(oTaskFilters);
	this.bindTasks(sPath, oInboxFilter);
};

/**
* Bind the Inbox Task Collection
*
* @name sap.uiext.inbox.Inbox.prototype.bindTasks
* @function
* @param {string} 
 *         sPath
*         Binding path for the element displaying the tasks within the Inbox. This path is the Task Collection according to the TCM (Task Consumption Model)
* @param {object} 
 *         oOFilter
*         Predefined filter that is applied to the Task Collection before displaying the tasks in the Inbox. (sap.uiext.inbox.InboxFilters)
* @param {object} 
 *         oOSorter
*         {sap.ui.model.Sorter}Predefined sorter that is applied to the Task Collection before displaying the tasks in the Inbox. By default the tasks are sorted on 'CreatedOn' , descending, according to TCM.
* 
 * The sorter is not validated for the path being a valid TCM Entity Property. The sorter passed will be applied to the oData service as is. In case the entity Property in the path is a sortable property on the UI, the sorter indicator for that property will be visible.

* @type sap.uiext.inbox.Inbox
* @public
*/

sap.uiext.inbox.Inbox.prototype.bindTasks = function(sPath, oFilter, oSorter) {
	var oPrimaryFilter, oSecondaryFilter, oTaskFilters;
	
	// get the Primary (value in DropDown) and Secondary (Values in the Drill Down) filters
	if(oFilter){
		oPrimaryFilter = oFilter.getPrimaryFilter();
		oSecondaryFilter = oFilter.getSecondaryFilter();
    };
	
	//flag variable initialized and required for search.
	this.modelRefreshed = true;

	this.oModel = this.getModel();
	
	this.oController.setModel(this.oModel);
	
	//Task Categories in the Table will be visible only on a flag. Change the visibility based on this flag.
    this._handleTaskCategoryVisibility();
    
    this._setCommentsVisibility();
	
	this._initFlagsByModel();
	
	// setting model to oDataManager which takes care of supporting Inbox for different versions of oDataModel 
	this.oDataManager.setModel(this.oModel);
	
	if(this.typeOfModel === "OData"){
		this._initODataModel();
	} else {
		this._bindTaskActions();
	}
    
    //Model related settings
    this.sCollectionPath = sPath;
    // Check for '/' in the path  (if any)
    if(!(/^\//).test(this.sCollectionPath))
        this.sCollectionPath = "/"+ this.sCollectionPath;
    
    this.oModel.attachRequestSent(this, function(oEvent, inBox) {
    	var oCurrentViewElement = inBox._currentViewElement();
    	oCurrentViewElement.setBusy(true);
    	inBox._handleRequestSent(oEvent);
    });

    this.oModel.attachRequestCompleted(this, function(oEvent, inBox) {
    	
    	var oCurrentViewElement = inBox._currentViewElement();
    	oCurrentViewElement.setBusy(false);
    	
    	/* TODO We need to call _handleRequestCompleted only if the call is about task collection.
    	 * Need to discuss the approach.
    	 * currently writing some temporary fix
    	*/
    	
    	var sURL = oEvent.getParameter("url");
    	if (sURL && sURL.indexOf("TaskCollection") > 0) {
    		inBox._handleRequestCompleted(oEvent);
    	}
    	
    });
    
    this.oModel.attachRequestFailed(this, function(oEvent, inBox) {
    	var oCurrentViewElement = inBox._currentViewElement();
    	oCurrentViewElement.setBusy(false);
    	inBox._handleRequestFailed(oEvent);
    });
    
    //initialize Table View
    var table = this._initTableView();
    
    //Initialize rowrepeaterView
    var oTasksRowRepeater = this._initRowRepeaterView();
    var oRowRepeaterTemplate = this._getComponent('rrMainMatrixLayout');
    
    // Define default Initial Sort and Filter for Table Binding
    var initialSort = oSorter ? oSorter : new sap.ui.model.Sorter("CreatedOn", true);
    this._applySortOnView(initialSort);
    

    // Reset Drill Down Filters if already applied
    this.resetFilterView(false);
    
    // select drop down filter values and create filters to be aaplied for the selection
    this._selectInitialValueinDropDown(oPrimaryFilter);
    
    
    //Display Row Repeater View if the default is RowRepeater View
    if (this.defaultView === this.constants.rowRepeaterView) {
    	//change this to get the RR button for segmented button
    	var viewButtonsSegBtns = sap.ui.getCore().byId(this.getId() + '--' + 'viewSelectionSegBtn');
    	if(viewButtonsSegBtns !== undefined){
    		var rrSegmentedButtonID = this.getId() + '--' + 'rrViewSelectionButton';
    		viewButtonsSegBtns.setSelectedButton(rrSegmentedButtonID);
    		var rrViewSelectionButton = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewSelectionButton');
    		viewButtonsSegBtns.fireSelect({selectedButtonId: rrSegmentedButtonID,triggeredFrom : 'initialView'});
    	}
    } 
    
    //initialize required variables for applying filters
    var toggleButton = sap.ui.getCore().byId(this.getId() + '--' + "filterViewButton");
    var $toggleButton = toggleButton.$();
    
    var aFiltersTobeApplied = [], mTempFilters;
    var oDefaultInitialDDFilter = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, "COMPLETED");
    
    //temporary storage for the dropDwon filter applied
    var oInitialDDFilter = this.filtersToApply.dropDownFilter;
    if(oInitialDDFilter === undefined){
    	oInitialDDFilter = oDefaultInitialDDFilter;
    }
    
    if (this.applyTaskCategoryFilter) {
    	if (this.filterOperatorCategoryTask === undefined ){
    		var filterOperatorCategoryTask = this.inboxUtils._getCategoryFilter("TASK");
    	}
    	
    this.filtersToApply.taskCategory = filterOperatorCategoryTask;
    aFiltersTobeApplied = this._addFilterToFilterMetadata(filterOperatorCategoryTask, aFiltersTobeApplied);
    }
    
    // storing filtersToApply.neCompleted filter in a local variable
    var oNeComepletedFilter = this.filtersToApply.neCompleted;
    
    if (oSecondaryFilter != null) {
    	
        // rendering change
        var oTaskFiltersTobeApplied = oSecondaryFilter.getFilterObjects();
        mTempFilters = oTaskFiltersTobeApplied.filterOperatorMap;
        
        var toggleOnFilter = mTempFilters ?  !toggleButton.getPressed() : toggleButton.getPressed();
        if(toggleOnFilter){
        	toggleButton.setPressed(!toggleButton.getPressed());
        	toggleButton.firePress();
        }
        
        
        if(mTempFilters){
        	
        	this.filtersToApply = oTaskFiltersTobeApplied.filtersAppliedMap;
        	aFiltersTobeApplied = this._selectFilterValuesinFacetFilterView(oSecondaryFilter, mTempFilters, oInitialDDFilter);

        }else{
        	//no Initial filters, so apply the computed DropDown Filter.
        	aFiltersTobeApplied = this._addFilterToFilterMetadata(oInitialDDFilter, aFiltersTobeApplied);
            this.filtersToApply.dropDownFilter = oInitialDDFilter;
        }
        
        // if tasks with status completed needs to be eliminated
        if (oNeComepletedFilter) {
        	var oSecondaryFilterKeys = oSecondaryFilter.getFilterUIKeys();
        	if (!(oSecondaryFilterKeys.Status && oSecondaryFilterKeys.Status.length > 0)) {
        		aFiltersTobeApplied = this._addFilterToFilterMetadata(oNeComepletedFilter, aFiltersTobeApplied);
        	}
        } 
        
    } else {
        if(toggleButton.getPressed()){
        	//call the event Handler method explicitly if the toggle Button is not visible, because the control does not fire the event in this case.
        	/*if(!$toggleButton.is(":visible")){
        		this.toggleFilterView(null , this);
        	}*/
            toggleButton.setPressed(!toggleButton.getPressed());
            toggleButton.firePress();
        }
        this.filtersToApply.dropDownFilter = oInitialDDFilter;
        aFiltersTobeApplied = this._addFilterToFilterMetadata(oInitialDDFilter, aFiltersTobeApplied);
        
        // if tasks with status completed needs to be eliminated
        if (oNeComepletedFilter) {
        	aFiltersTobeApplied = this._addFilterToFilterMetadata(oNeComepletedFilter, aFiltersTobeApplied);
        }
        
    }
    
    var oParams = this._getBindingParameters();
    
    //bind RowRepeater .. binding should not be here. introduce a concept of default Views, where the binding happens on the fly
    if (this.defaultView === this.constants.rowRepeaterView){
    		oTasksRowRepeater.bindRows({path: this.sCollectionPath,template: oRowRepeaterTemplate, parameters: oParams,sorter:initialSort,filters:aFiltersTobeApplied});
    }
    
	//bind Table
    //TODO: store the table class level and access using getTable maybe
    table.bindRows({path: this.sCollectionPath,parameters: oParams,sorter:initialSort,filters:aFiltersTobeApplied});
    
    //if CustomAttributes flag is true then show Toggle custom attribute Button in Stream View
    this.setToggleCustomAttributeBtnVisibilityStreamView(this.isCustomAttributesEnabled);
    //this.initialLoad = false;
    return this;
    /* Do we need this? */
    // return this.bindAggregation("inBox", sPath, undefined, undefined, aFilters);
};
sap.uiext.inbox.Inbox.prototype.setToggleCustomAttributeBtnVisibilityStreamView = function(bCustomAttributesEnabled) {
	var oToggleCustomAttributeBtn = this._getComponent("toggleCustomAttributes");
	if (bCustomAttributesEnabled) {
		oToggleCustomAttributeBtn.setVisible(true);
	} 
};

sap.uiext.inbox.Inbox.prototype.localSearch = function(oEvent, inBox) {
	
   if (inBox.searchCallBack !== "" && inBox.searchCallBack !== undefined) {
        inBox.searchCallBack();
        return;
    }
    var oModel = inBox.getCoreModel();
    var srchText = jQuery.trim(oEvent.getParameter("query").toLowerCase());
    var currentViewElement = inBox._currentViewElement();
    var aFilteredKeys = [];
    inBox._resetStateBeforeSearch(); // resetting state before search
    
    // getting search results keys for the current searched text
    aFilteredKeys.push(inBox._getBindingKeysOnLocalSearch(srchText, oModel._original_data, currentViewElement._originalKeys));
    
    // getting result keys in case any column is filtered in Table already
	if (inBox.currentView === inBox.constants.tableView && inBox._isTableFiltered()) {
		aFilteredKeys.push(inBox._getCurrentBindingKeysForTableColumnFilters(oModel._original_data, currentViewElement._originalKeys));
	}
	
	// intersecting both the above results
	var aResultKeys = inBox.inboxUtils._getUniqueArray(aFilteredKeys);
    var result = {};
    var vVal;
    
    for (var i in aResultKeys) {
		vVal = oModel._original_data[aResultKeys[i]];
		result[aResultKeys[i]] = vVal;
		
		if(vVal.Description){
			var descEntry, descDataEntry;
    		var oDescription = vVal.Description;
    		if(oDescription && oDescription.__list instanceof Array){ //It is array in case of BPM OData service.
    			descEntry = oDescription.__list[0];
    			descDataEntry = oModel.oData[descEntry];
    			if(descDataEntry)
    				result[descEntry] = descDataEntry;
    		}
    		else{ //To support description as Object 
    			var oDescriptionObject= oDescription.__ref;
    			if(oDescription && oDescriptionObject){
    				descDataEntry = oModel.oData[oDescriptionObject];
        			if(descDataEntry)
        				result[oDescriptionObject] = descDataEntry;
    			}
    		}
    	}
    	//add the task definition data
    	if(vVal.TaskDefinitionData){
    		var defEntry, defData;
    		var oTaskDefinitionData = vVal.TaskDefinitionData;
    		if(oTaskDefinitionData && oTaskDefinitionData.__list instanceof Array){ //It is array in case of BPM OData service.
    			defEntry = vVal.TaskDefinitionData.__list[0];
    			defData = oModel.oData[defEntry];
    			if(defData)
    				result[defEntry] = defData;
    		}
    		else{ //To support definition as Object 
    			var oDefinitionObject= oTaskDefinitionData.__ref;
    			if(oTaskDefinitionData && oDefinitionObject){
    				defData = oModel.oData[oDefinitionObject];
    				if(defData)
    				result[oDefinitionObject]= defData;
    			}
    		}
    	}
	}

    oModel.oData = result;
    // update the bookkeeping in each affected binding, here only for the Table.rows

    var oBindingInfo = currentViewElement.mBindingInfos["rows"];
    
    if (oBindingInfo && oBindingInfo.binding) {
        oBindingInfo.binding.iLength = aResultKeys.length; // update the length information
        oBindingInfo.binding.aKeys = aResultKeys; // update the key information for the filtered result
        // oBindingInfo.binding.checkUpdate();
        inBox.currentView === inBox.constants.tableView ? currentViewElement.rerender():currentViewElement.updateRows(false);
        currentViewElement._updateBindingContexts(undefined, undefined, "change");
    }
    var iResultLength = currentViewElement.getBinding('rows').iLength;
    inBox._updatePaginator(iResultLength);
    if (iResultLength <= 0)
    //TODO: use enums for messageType.
        inBox.showMessage("info", inBox._oBundle.getText("INBOX_MSG_FOR_NO_DATA"));
    else
        inBox.deleteMessage();
    inBox.fireODataRequestCompleted({bindingLength:iResultLength,appliedFilter:inBox._oBundle.getText("INBOX_SEARCH_RESULTS_TEXT")});
};

/* this function below will search a text on the data that has been provided and return the result keys */
sap.uiext.inbox.Inbox.prototype._getBindingKeysOnLocalSearch = function(srchText, oSearchData, oSearchKeys) {
	
	var aKeys = [];
	// check over the model's odata
    for ( var j in oSearchData) {
        var val = oSearchData[j];
        var valuePresent = false;
        var fieldValue;
        var taskMetadataProperty;
        // check over the table's row bindings
        for ( var l in oSearchKeys) {
            if (j == oSearchKeys[l]) {
                
            	// Check for each field value of the row
                for ( var k = 0; k < this._getCategoryMetadata().properties.length; k++) {
                	 taskMetadataProperty = this._getCategoryMetadata().properties[k];
                     fieldValue = val[taskMetadataProperty];
                     if (!fieldValue  && taskMetadataProperty  === "TaskTitle") {
                	   fieldValue =  this._oBundle.getText("INBOX_TASK_TITLE_NOTAVAILABLE_MSG") ;
                   }
                   if (fieldValue != null) {
                    	//search on formatted value of dates
                        if (jQuery.type(fieldValue) === "date") {
                            fieldValue = (this.inboxUtils.dateTimeFormat(fieldValue));// .toLowerCase();
                        }
                        
                        //search on translated values of Priority & Status
                        if (taskMetadataProperty === "Priority" || taskMetadataProperty === "Status") {
                            //special case handling for translated tooltips
                            if(fieldValue == "VERY_HIGH")
                                fieldValue = this._oBundle.getText("INBOX_FILTER_PRIORITY_VERY_HIGH");
                            if(fieldValue == "HIGH")
                                fieldValue = this._oBundle.getText("INBOX_FILTER_PRIORITY_HIGH");
                            if(fieldValue == "MEDIUM")
                                fieldValue = this._oBundle.getText("INBOX_FILTER_PRIORITY_MEDIUM");
                            if(fieldValue == "LOW")
                                fieldValue = this._oBundle.getText("INBOX_FILTER_PRIORITY_LOW");
                            if(fieldValue == "READY")
                                fieldValue = this._oBundle.getText("INBOX_FILTER_STATUS_READY");
                            if(fieldValue == "RESERVED")
                                fieldValue = this._oBundle.getText("INBOX_FILTER_STATUS_RESERVED");
                            if(fieldValue == "IN_PROGRESS")
                                fieldValue = this._oBundle.getText("INBOX_FILTER_STATUS_IN_PROGRESS");

                        }
                        fieldValue = fieldValue.toLowerCase();
                        if (fieldValue.indexOf(srchText) >= 0) {
                        	valuePresent = true;
                        	break;
                        }
                    }
                }
                
                //Check within navigation properties
                //Under Description
                if(!valuePresent){
                	if(val.Description){
                		//TODO: Time Being not supporting search on description for Gateway Services.
                		var oDescription = val.Description;
                		valuePresent= this._getValuePresent(oSearchData,oDescription,sap.uiext.inbox.InboxConstants.NAVIGATION_DESCRIPTION,srchText);
                	}
                } 
                //Under Task Definition Data
            	if(!valuePresent){
            		if(val.TaskDefinitionData){
            			//TODO: Time Being not supporting search on TaskDefinitionData for Gateway Services same reason as above.
            			var oTaskDefinitionData = val.TaskDefinitionData;
            			valuePresent= this._getValuePresent(oSearchData,oTaskDefinitionData,sap.uiext.inbox.InboxConstants.NAVIGATION_TASKDEFINITION,srchText);
            			}            		
            	}
            	
            	//For Custom Attributes
                if(!valuePresent){
                    if(val.CustomAttributeData){
                        var aCustomAttributeKeys = val.CustomAttributeData.__list;
                        if(aCustomAttributeKeys !== undefined){
                            for(var i = 0; i < aCustomAttributeKeys.length; i++ ){
                                var customAttributeKey = aCustomAttributeKeys[i];
                                var fieldValue = oSearchData[customAttributeKey].Value;
                                //TODO: in two places... refactor
                                if (fieldValue != null || fieldValue != undefined) {
                                    fieldValue = fieldValue.toLowerCase();
                                    if (fieldValue.indexOf(srchText) >= 0) {
                                    	valuePresent = true;
                                    	break;
                                    }
                                }
                            }
                        }
                    }
                }
                // If the value is present, maintain the row's id
                if (valuePresent) {
                	var key = j;
                	aKeys.push(key); 
                }
            }
        }
    }
    
    return aKeys;
};

sap.uiext.inbox.Inbox.prototype.refresh = function(aTaskUniqueIdentifiers) {
	this.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype.applyFilterOnResponse = function(selectedContextsbeforeReq, rebind) {
 // TODO utility method - duplicate code..
    // var oModel = sap.ui.getCore().getModel();
    var oModel = this.getCoreModel();
    var that = this;
    this.showBusyLoader();
    var oListBinding;
    var currentViewElement;
    //BEGIN Delete notification messages from notification bar
    var oNotificationBar = sap.ui.getCore().byId(this.getId() + '--' + 'notificationBar');
    var oMessageNotifier = sap.ui.getCore().byId(this.getId() + '--' + 'messageNotifier');
    if(oNotificationBar != undefined){
    	oMessageNotifier.destroyMessages();
    	oNotificationBar.setVisibleStatus(sap.ui.ux3.NotificationBarStatus.Min);
    }
    //END Delete notification messages from notification bar
    if(that.currentView === that.constants.tableView){
    	currentViewElement = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    	if (currentViewElement !== undefined) {
            if (selectedContextsbeforeReq != undefined && selectedContextsbeforeReq != null) {
                that.selectedContexts = selectedContextsbeforeReq;
            } else {
                that.selectedContexts = [];
            }
            oListBinding = currentViewElement.getBinding('rows');
    	}
    }else if(this.currentView === that.constants.rowRepeaterView){
    	currentViewElement = sap.ui.getCore().byId(this.getId() + '--'+'tasksRowRepeater');
    	if (currentViewElement !== undefined) {
    		currentViewElement.gotoPage(1);
    		var rowRepeaterPaginator = this._getComponent('rowRepeaterPaginator');
    		if(rowRepeaterPaginator){
    			rowRepeaterPaginator.destroy();
    		}
            oListBinding = currentViewElement.getBinding('rows');
    	}
    }
    
    var oFilter = [];
    if (oListBinding != null && oListBinding != undefined) {
    	// HACK:this is the hack applied by modifiying the internal variables of SAPUI5 - to remove the predefined filter
    	oListBinding.aApplicationFilters = [];
    	for ( var item in that.filtersToApply) {
    		var filter = that.filtersToApply[item];
    		if(jQuery.isArray(filter)){
    			oFilter = oFilter.concat(filter)
    		}else
    			oFilter.push(filter);
    	}
    	if(this.currentView === that.constants.rowRepeaterView && rebind){
    		var oSorter = oListBinding.oSorter;
    		var oRowRepeaterSortCombobox = that._getComponent('sortByFilterComboBox');
    		var sRRSelectedItemID = oRowRepeaterSortCombobox.getSelectedItemId();
    		if(sRRSelectedItemID){
    			var sSorterID = that.constants.mRRSortMap[that._removeParentID(sRRSelectedItemID)];
    			oSorter = sSorterID?that._getComponent(sSorterID).getSorter():oSorter;
    		}
    		
    		var oTemplate = that._getComponent("rrMainMatrixLayout");
    		var oParams = that._getBindingParameters();
    		
    		if(this.clientUpdate === undefined){
    			currentViewElement.unbindRows();
    			currentViewElement.bindRows({path: that.sCollectionPath, template: oTemplate, parameters: oParams, sorter: oSorter, filters: oFilter});
    			currentViewElement.bRowsRebinded = true;
    		}else{
    			oListBinding.filter(oFilter);
    			currentViewElement.updateRows(false);
    		}
    		
    	}else{
    		oListBinding.filter(oFilter);
    	}
    }
    
    // variables maintained for search
    that.modelRefreshed = true;
    if(oListBinding){
    	currentViewElement._originalKeys = oListBinding.aKeys;
    }
    this.hideBusyLoader();
};

sap.uiext.inbox.Inbox.prototype.refreshTaskList = function(oEvent, inBox) {
	inBox.bRefreshStartFlag = true;
	// FIXME:this causes a [problem to reset the gif in case of json/xml
    if (!inBox.getHandleBindings()) {
        inBox.fireRefresh(oEvent);
    } else {
        /*var refreshButton = sap.ui.getCore().byId(inBox.getId() + '--' + 'refreshButton');
        refreshButton.setSrc(inBox._imgResourcePath + sap.uiext.inbox.InboxConstants.refreshImageGif);*/
    }
    var oModel = inBox.getCoreModel();
    var oTable = sap.ui.getCore().byId(inBox.getId() + '--' + 'listViewTable');
    var oRowRepeater = sap.ui.getCore().byId(inBox.getId() + '--' + 'tasksRowRepeater');

    var oListBinding;
    var rowContext;
    var selectedIndices = inBox.getlistTableSelectedIndices();
    var selectedTasks = [];

    jQuery.each(selectedIndices, function(i, selIndex) {
        rowContext = oTable.getContextByIndex(selIndex);
        selectedTasks.push(rowContext);
    });
    
    var currentViewElement;
    if(inBox.currentView === sap.uiext.inbox.InboxConstants.tableView){
    	currentViewElement = oTable;
    }else if(inBox.currentView === sap.uiext.inbox.InboxConstants.rowRepeaterView){
    	currentViewElement = oRowRepeater;
    }

    if (currentViewElement != undefined) {
        if (selectedTasks != undefined && selectedTasks != null) {
            inBox.selectedContexts = selectedTasks;
        } else {
            inBox.selectedContexts = [];
        }

        if (inBox.clientUpdate){
        	currentViewElement.getModel().refresh();
        	inBox.modelRefreshed = true;
        } else {
        	
        	var dropdownComboBox3 = sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3');
            if(dropdownComboBox3 != undefined && dropdownComboBox3.getEnabled() === true) {
            	inBox.bindSubstitutedUsers("/SubstitutedUsersCollection");
            }
        oListBinding = currentViewElement.getBinding('rows');

        var oFilter = [];

        if (oListBinding != null) {
        	oListBinding.aApplicationFilters = [];
            for ( var item in inBox.filtersToApply) {
                var filter = inBox.filtersToApply[item];
                if(jQuery.isArray(filter)){
                    oFilter = oFilter.concat(filter)
                }else
                    oFilter.push(filter);
            }
            oListBinding.filter(oFilter);
        }
       }   
    }
    // variables maintained for search
    inBox.modelRefreshed = true;
    currentViewElement._originalKeys = currentViewElement.getBinding('rows').aKeys;
    inBox.resetSearchCriteria();
    
    var refreshedOnText = sap.ui.getCore().byId(inBox.getId() + '--' + "refreshOnText");
    if(refreshedOnText){
    	 inBox.lastRefreshedOnDateTime = new Date();
    	 var refreshedTime = inBox._getFormattedRefreshOnDateTime();
    	 refreshedOnText.setText(inBox._oBundle.getText("INBOX_TEXT_ON") + sap.uiext.inbox.InboxConstants.SPACE + refreshedTime);
    	 refreshedOnText.setTooltip(inBox._getFormattedTooltipForLastRefreshedTime());
    }
};

sap.uiext.inbox.Inbox.prototype.applyDropDownFilter1 = function(oEvent, inBox) {
    var listItemID = oEvent.getSource().getSelectedItemId();
    
    if (listItemID === inBox.getId() + '--' + "li_substitutedTasks") {
        sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3').setEnabled(false);
        inBox.filtersToApply.dropDownFilter1 = new sap.ui.model.Filter("IsSubstituted", sap.ui.model.FilterOperator.EQ, true);
        inBox.bindSubstitutedUsers("/SubstitutedUsersCollection");
        sap.ui.getCore().byId(inBox.getId() + '--' + 'onBehalfOfListItem').setEnabled(false);
        
    }else{
        //sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3').setValue(inBox._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS"));
        sap.ui.getCore().byId(inBox.getId() + '--' + 'onBehalfOfListItem').setEnabled(true);
        sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3').setSelectedItemId(inBox.getId() + '--' + 'onBehalfOfListItem');
        sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3').setEnabled(false);
        delete inBox.filtersToApply.dropDownFilter3;
        
        if (listItemID === inBox.getId() + '--' + "li_allTasks") {
            delete inBox.filtersToApply.dropDownFilter1;
        }else if (listItemID === inBox.getId() + '--' + "li_myTasks") {
            inBox.filtersToApply.dropDownFilter1 = new sap.ui.model.Filter("IsSubstituted", sap.ui.model.FilterOperator.EQ, false);         
        }
    }
    inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype.applyDropDownFilter3 = function(oEvent, inBox) {
    var listItemID = oEvent.getSource().getSelectedItemId();
    
    if (listItemID === inBox.getId() + '--' + "li_allUsers") {
        delete inBox.filtersToApply.dropDownFilter3;
    }else{
        inBox.filtersToApply.dropDownFilter3 = new sap.ui.model.Filter("SubstitutedUser", sap.ui.model.FilterOperator.EQ, sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3').getSelectedKey());
    }
    inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype.applyDropDownFilter = function(oEvent, inBox) {
    var isCompTasksSelectedinDD = false;
    var listItemID = oEvent.getSource().getSelectedItemId();
    var statusAttr = sap.ui.getCore().byId(inBox.getId() + '--' + "INBOX_FILTER_STATUS");
    var oFilterDateTime = sap.ui.getCore().byId(inBox.getId() + '--' + "INBOX_FILTER_CREATION_DATE");
    var oFilterDueDateTime = sap.ui.getCore().byId(inBox.getId() + '--' + "INBOX_FILTER_DUE_DATETIME");
    var oFacet = sap.ui.getCore().byId(inBox.getId()+'--'+"filterFacet");

    // clear search text for every new filter select
    inBox.resetSearchCriteria();

    if (listItemID === inBox.getId() + '--' + "li_completedTasks") {
    	isCompTasksSelectedinDD = true;
        inBox._deleteCustomActions();
        if (statusAttr !== undefined) {
        	 inBox.storeFilterState( "INBOX_FILTER_STATUS");
        	// statusAttr.setSelected(false);
            oFacet.removeList(statusAttr);
            
        }
    
        if (oFilterDateTime !== undefined) {
        	 inBox.storeFilterState("INBOX_FILTER_CREATION_DATE");
            oFacet.removeList(oFilterDateTime);
        }
        if (oFilterDueDateTime !== undefined) {
        	inBox.storeFilterState("INBOX_FILTER_DUE_DATETIME");
            oFacet.removeList(oFilterDueDateTime);
        }

        
        delete inBox.filtersToApply.resStat;
        delete inBox.filtersToApply.readyStat;
        delete inBox.filtersToApply.InProStat;
        delete inBox.filtersToApply.neCompleted;
        
        delete inBox.filtersToApply.today;
        delete inBox.filtersToApply.last30;
        delete inBox.filtersToApply.last15;
        delete inBox.filtersToApply.last7;
        
        inBox.clearFiltersForDueDate();
        
        //if(inBox.sProviderHost !== "ODATA4J")// has to be oData4j
            inBox.filtersToApply.dropDownFilter = [new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "COMPLETED")];
        //else
        //  inBox.filtersToApply.dropDownFilter = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "COMPLETED");
    }
    if (listItemID === inBox.getId() + '--' + "li_openTasks") {
        if (statusAttr != undefined) {
            // statusAttr.setSelected(true);
        	oFacet.addList(statusAttr);
            inBox.retrieveFilterState("INBOX_FILTER_STATUS");
        }
        if (oFilterDateTime != undefined && oFacet.indexOfList(oFilterDateTime) === -1) {
        	
        	oFacet.addList(oFilterDateTime);
        	inBox.retrieveFilterState("INBOX_FILTER_CREATION_DATE");
        }
        if (oFilterDueDateTime !== undefined && oFacet.indexOfList(oFilterDueDateTime) === -1) {
        	
        	oFacet.addList(oFilterDueDateTime);
        	inBox.retrieveFilterState("INBOX_FILTER_DUE_DATETIME");
    }

        // this.filtersToApply['dropDownFilter'] would be anyways update with 'ne' completed filter
        delete inBox.filtersToApply.neCompleted;
        if ((inBox.filtersToApply.resStat === undefined) && (inBox.filtersToApply.readyStat === undefined)
                && (inBox.filtersToApply.InProStat === undefined)) {
            inBox.filtersToApply.dropDownFilter = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE,
                    "COMPLETED");
        } else {
            delete inBox.filtersToApply.dropDownFilter;
        }
        // this.filtersToApply['dropDownFilter'] = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE,
        // "COMPLETED");
    }
    if (listItemID === inBox.getId() + '--' + "li_overdueTasks") {
        if (statusAttr != undefined) {
            // statusAttr.setSelected(true);
        	oFacet.addList(statusAttr);
        	 inBox.retrieveFilterState( "INBOX_FILTER_STATUS");
        }
        
        if (oFilterDateTime != undefined && oFacet.indexOfList(oFilterDateTime) !== -1) {
        	inBox.storeFilterState("INBOX_FILTER_CREATION_DATE");
            oFacet.removeList(oFilterDateTime);
        }
        if (oFilterDueDateTime !== undefined && oFacet.indexOfList(oFilterDueDateTime) !== -1) {
        	inBox.storeFilterState("INBOX_FILTER_DUE_DATETIME");
        oFacet.removeList(oFilterDueDateTime);
    }
        
        inBox.clearFiltersForDueDate();
        
        delete inBox.filtersToApply.today;
        delete inBox.filtersToApply.last30;
        delete inBox.filtersToApply.last15;
        delete inBox.filtersToApply.last7;
        var formD = inBox.getFormattedDateTimeOff(0, true);
        inBox.filtersToApply.dropDownFilter = new sap.ui.model.Filter("CompletionDeadLine", sap.ui.model.FilterOperator.LT,
                formD);
        if ((inBox.filtersToApply.resStat === undefined) && (inBox.filtersToApply.readyStat === undefined)
                && (inBox.filtersToApply.InProStat === undefined) && (inBox.filtersToApply.neCompleted === undefined) ) {       
            inBox.filtersToApply.neCompleted = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, "COMPLETED");
        }
    }
    if (listItemID === inBox.getId() + '--' + "li_escalatedTasks") {
        if (statusAttr != undefined) {
            // statusAttr.setSelected(true);
        	 oFacet.addList(statusAttr);
        	 inBox.retrieveFilterState( "INBOX_FILTER_STATUS"); 
        }
        if (oFilterDateTime != undefined && oFacet.indexOfList(oFilterDateTime) != -1) {
        	inBox.storeFilterState("INBOX_FILTER_CREATION_DATE");
            oFacet.removeList(oFilterDateTime);
        }
        if (oFilterDueDateTime !== undefined && oFacet.indexOfList(oFilterDueDateTime) !== -1) {
        	inBox.storeFilterState("INBOX_FILTER_DUE_DATETIME");
        oFacet.removeList(oFilterDueDateTime);
    }
        
        inBox.clearFiltersForDueDate();
        
        delete inBox.filtersToApply.today;
        delete inBox.filtersToApply.last30;
        delete inBox.filtersToApply.last15;
        delete inBox.filtersToApply.last7;
        inBox.filtersToApply.dropDownFilter = new sap.ui.model.Filter("IsEscalated", sap.ui.model.FilterOperator.EQ, true);
        if ((inBox.filtersToApply.resStat === undefined) && (inBox.filtersToApply.readyStat === undefined)
                && (inBox.filtersToApply.InProStat === undefined) && (inBox.filtersToApply.neCompleted === undefined) ) {       
            inBox.filtersToApply.neCompleted = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, "COMPLETED");
        }
    }

    // hide standard action Buttons and Links if Completed Tasks are selected in DropdownBox  
    if (isCompTasksSelectedinDD == true){
    	inBox.hideAllActionButtonsandLinks();
    } else {
    	inBox.showAllActionButtonsandLinks();
    }
    
    var taskDefinitionFilter = inBox._isDrillDownFilterSelected('TaskDefinitionID');
    inBox._deleteCustomActions(null);
    if(!isCompTasksSelectedinDD && taskDefinitionFilter){
    	
    	/*var oTaskTypefilterList = inBox._getComponent("INBOX_FILTER_TASK_TYPE");
	    var aSelectedKeys = oTaskTypefilterList.getSelectedKeys();
		if(aSelectedKeys && aSelectedKeys.length === 1){
			//need to check if with the key we can store an object. This is too much of an overhead.
			var aItems = oTaskTypefilterList.getItems();
			var key = aSelectedKeys[0];
    		var sapOrigin;
			
	    	for (var j = 0; j < aItems.length; j++) {
		    	if (key === aItems[j].getKey()) {
			    	sapOrigin = aItems[j].data("SAP__Origin"); 
				}
			}
    		var aCustomActionsDefinitionArray = inBox._getCustomActionsDefinition(null,aSelectedKeys[0],sapOrigin);
	    	//create Columns
		    if(aCustomActionsDefinitionArray && aCustomActionsDefinitionArray.length>0)
		    	inBox._createCustomActionButtons(aCustomActionsDefinitionArray, false);
		
     }*/
    	inBox.applyFilterOnResponse(null,true);
	 }else{
		 inBox.applyFilterOnResponse(null);
	 }
};

sap.uiext.inbox.Inbox.prototype.clearFiltersForCategory = function() {
    delete this.filtersToApply.taskCategory;
    delete this.filtersToApply.todoCategory;
    delete this.filtersToApply.alertCategory;
    delete this.filtersToApply.notificationCategory;
};

sap.uiext.inbox.Inbox.prototype.clearFiltersForPriority = function() {
    delete this.filtersToApply.lowPrio;
    delete this.filtersToApply.medPrio;
    delete this.filtersToApply.hiPrio;
    delete this.filtersToApply.veryhiPrio;
};

sap.uiext.inbox.Inbox.prototype.clearFiltersForStatus = function() {
    delete this.filtersToApply.resStat;
    delete this.filtersToApply.readyStat;
    delete this.filtersToApply.InProStat;
    delete this.filtersToApply.neCompleted;
    // delete this.filtersToApply.openTasks;
    if (this.filtersToApply.dropDownFilter != undefined) {
    if ((this.filtersToApply["dropDownFilter"].sPath === "Status")
            && (this.filtersToApply["dropDownFilter"].sOperator === "NE")) {
        delete this.filtersToApply.dropDownFilter;
        }
    }
};

sap.uiext.inbox.Inbox.prototype.clearFiltersForDueDate = function() {
  delete this.filtersToApply.dueDateToday;
  delete this.filtersToApply.dueDatenext30;
  delete this.filtersToApply.dueDatenext15;
  delete this.filtersToApply.dueDatenext7;
  delete this.filtersToApply.noDueDate;
};

sap.uiext.inbox.Inbox.prototype.clearFiltersForDateTime = function() {
    delete this.filtersToApply.today;
    delete this.filtersToApply.last30;
    delete this.filtersToApply.last15;
    delete this.filtersToApply.last7;
};


sap.uiext.inbox.Inbox.prototype.clearFiltersForTaskType = function() {
    for ( var item in this.filtersToApply ){ 
        if(this.filtersToApply[item].sPath === 'TaskDefinitionID') {
            delete this.filtersToApply[item];
        }
    }
};

sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForTaskCategory = function(oEvent, inBox) {
    var filterOperatorCategoryTask, filterOperatorCategoryTodo, filterOperatorCategoryAlert, filterOperatorCategoryNotification;
    var oFacetFilter = sap.ui.getCore().byId(inBox.getId()+'--'+'filterFacet');
    var attributeChanged = oEvent.getParameter("selectedItems");
    inBox.resetSearchCriteria();
    inBox.clearFiltersForCategory();
    inBox._modifyTableColumnsOnFilterCategory();                    // removing or creating attributes in table
    inBox._modifyFacetFilterOnFilterCategory();                     // removing or adding facet filter lists
    inBox.changeToolbarOnFilterCategory();           				// enabling or disabling items in toolbar
    
    for(var i=0; i<attributeChanged.length; i++) {
    switch(attributeChanged[i].getId()){
    case inBox.getId()+'--'+"INBOX_FILTER_CATEGORY_TASKS":
    	filterOperatorCategoryTask = inBox.inboxUtils._getCategoryFilter("TASK",inBox.sProviderHost);
    	inBox.filtersToApply['taskCategory']=filterOperatorCategoryTask;
        break;
    case inBox.getId()+'--'+"INBOX_FILTER_CATEGORY_TODO":
    	filterOperatorCategoryTodo = inBox.inboxUtils._getCategoryFilter("Todo",inBox.sProviderHost);
    	inBox.filtersToApply['todoCategory']=filterOperatorCategoryTodo;
        break;
    case inBox.getId()+'--'+"INBOX_FILTER_CATEGORY_ALERT":
    	filterOperatorCategoryAlert = inBox.inboxUtils._getCategoryFilter("Alert",inBox.sProviderHost);
        inBox.filtersToApply['alertCategory']=filterOperatorCategoryAlert;
        break;
    case inBox.getId()+'--'+"INBOX_FILTER_CATEGORY_NOTIFICATION":
    	filterOperatorCategoryNotification = inBox.inboxUtils._getCategoryFilter("Notification",inBox.sProviderHost);
        inBox.filtersToApply['notificationCategory']=filterOperatorCategoryNotification;
        break;    
    };
    }
    inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype._modifyFacetFilterOnFilterCategory = function(bRRView){
	if (bRRView) {
		var aCategoryFilterMetadata = this.constants.aDependentDrillDownFiltersBasedOnCategory.aFilterMetadataDefault;
	} else {
		var aCategoryFilterMetadata = this._getCategoryFilterMetadata();
	}
	var oFacet = sap.ui.getCore().byId(this.getId()+'--'+"filterFacet");
	if(oFacet != undefined){
		var aFacetFilterLists = oFacet.getLists();
		var aFacetFilterListsId = [];
		
		// removing a filter list from the table if it's not in the category filter metadata but exists in the facet filter
		for (var i=0; i<aFacetFilterLists.length; i++){
			var oFilterList = aFacetFilterLists[i];
			var sFilterListId = this._removeParentID(oFilterList.getId());
			aFacetFilterListsId.push(sFilterListId);
			if(jQuery.inArray(sFilterListId,aCategoryFilterMetadata)===-1){
				this.storeFilterState(sFilterListId);
				oFacet.removeList(oFilterList);
				this._deleteRemovedFilter(sFilterListId);
			}
		}
		
		// adding a column into the table if it's there in the category metadata but not in the table
		for (var i=0; i<aCategoryFilterMetadata.length; i++){
			if(jQuery.inArray(aCategoryFilterMetadata[i],aFacetFilterListsId)===-1){
				var oFilterToBeAdded = sap.ui.getCore().byId(this.getId()+'--'+aCategoryFilterMetadata[i]);
				if (oFilterToBeAdded != undefined && oFacet.indexOfList(oFilterToBeAdded) === -1) {
					oFacet.insertList(oFilterToBeAdded, i);
					this.retrieveFilterState(aCategoryFilterMetadata[i]);
				}
			}
		}
	}
};

sap.uiext.inbox.Inbox.prototype._deleteRemovedFilter = function(sFilterListId){
	switch(sFilterListId) {
	case "INBOX_FILTER_CATEGORY" :
		this.clearFiltersForCategory();
		break;
	case "INBOX_FILTER_TASK_TYPE" :
		this.clearFiltersForTaskType();
		break;
	case "INBOX_FILTER_PRIORITY" :
		this.clearFiltersForPriority();
		break;
	case "INBOX_FILTER_STATUS" :
		this.clearFiltersForStatus();
		break;
	case "INBOX_FILTER_CREATION_DATE" :
		this.clearFiltersForDateTime();
		break;
	case "INBOX_FILTER_DUE_DATETIME" :
		this.clearFiltersForDueDate();
		break;
	};
	
};

sap.uiext.inbox.Inbox.prototype._modifyTableColumnsOnFilterCategory = function(){
	var oTable = this._getComponent('listViewTable');
	var aTableColumns = oTable.getColumns();
	var inboxCategoryMetadata = this._getCategoryMetadata();
	var aTableColumnsId = [];
	
	// removing a column from the table if it's not in the category metadata but exists in the table
	for (var i=0; i<aTableColumns.length; i++){
        var oColumn = aTableColumns[i];
        var sColumnId = this._removeParentID(oColumn.getId());
        aTableColumnsId.push(sColumnId);
        if(jQuery.inArray(sColumnId,inboxCategoryMetadata.properties)===-1){
            oColumn.destroy();
        }
    }
	
	// adding a column into the table if it's there in the category metadata but not in the table
	for (var i=0; i<inboxCategoryMetadata.properties.length; i++){
        if(jQuery.inArray(inboxCategoryMetadata.properties[i],aTableColumnsId)===-1){
        	this._createTableColumnContent(i,inboxCategoryMetadata);
        }
    }
	//this.resizeColumns();
};

sap.uiext.inbox.Inbox.prototype._getSelectedCategory = function(){
	var oFilterCategory = this._getComponent("INBOX_FILTER_CATEGORY");
	if (oFilterCategory != null && oFilterCategory.getSelectedKeys()!= null) {
		return oFilterCategory.getSelectedKeys()[0];
	}
};

sap.uiext.inbox.Inbox.prototype._getCategoryMetadata = function(){
	if (this.applyTaskCategoryFilter) {
		var sSelectedCategory = this._getSelectedCategory();
		switch (sSelectedCategory) {
		case "INBOX_FILTER_CATEGORY_TASKS" :
			return this.constants.mEntities.taskMetadata;
			break;
		case "INBOX_FILTER_CATEGORY_TODO" :
			return this.constants.mEntities.todoMetadata;
			break;
		case "INBOX_FILTER_CATEGORY_ALERT" :
			return this.constants.mEntities.alertMetadata;
			break;	
		case "INBOX_FILTER_CATEGORY_NOTIFICATION" :	
			return this.constants.mEntities.notificationMetadata;
			break;
		default :
			return this.constants.mEntities.taskMetadata;
		};
	} else {
		return this.constants.mEntities.taskMetadata;
	}
};

sap.uiext.inbox.Inbox.prototype._getCategoryFilterMetadata = function(){
	var sSelectedCategory = this._getSelectedCategory();
	var aDrillDownFilterMetadata = this.constants.aDependentDrillDownFiltersBasedOnCategory;
	switch (sSelectedCategory) {
	case "INBOX_FILTER_CATEGORY_TASKS" :
		return aDrillDownFilterMetadata.aFilterMetadataForCategoryTask;
		break;
	case "INBOX_FILTER_CATEGORY_TODO" :
		return aDrillDownFilterMetadata.aFilterMetadataForCategoryTodo;
		break;
	case "INBOX_FILTER_CATEGORY_ALERT" :
		return aDrillDownFilterMetadata.aFilterMetadataForCategoryAlert;
		break;	
	case "INBOX_FILTER_CATEGORY_NOTIFICATION" :	
		return aDrillDownFilterMetadata.aFilterMetadataForCategoryNotification;
		break;
	default :
		return aDrillDownFilterMetadata.aFilterMetadataForCategoryTask;
	};
	
};

sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForPriority = function(oEvent, inBox) {
    var filterOperatorPrioLow, filterOperatorPrioMedium, filterOperatorPrioHigh, filterOperatorPrioVeryHigh;
    var attributeChanged = oEvent.getParameter("selectedItems");
    inBox.resetSearchCriteria();
    inBox.clearFiltersForPriority();
    for(var i=0; i<attributeChanged.length; i++) {
    switch(attributeChanged[i].getId()){
    case inBox.getId()+'--'+"INBOX_FILTER_PRIORITY_LOW":
        if (this.filterOperatorPrioLow === undefined )
            filterOperatorPrioLow = inBox.inboxUtils._getPriorityFilters("LOW",inBox.sProviderHost);
        inBox.filtersToApply['lowPrio']=filterOperatorPrioLow;
        break;
    case inBox.getId()+'--'+"INBOX_FILTER_PRIORITY_MEDIUM":
        if (filterOperatorPrioMedium === undefined)
            filterOperatorPrioMedium = inBox.inboxUtils._getPriorityFilters("MEDIUM",inBox.sProviderHost);
        inBox.filtersToApply['medPrio']=filterOperatorPrioMedium;
        break;
    case inBox.getId()+'--'+"INBOX_FILTER_PRIORITY_HIGH":
        if (filterOperatorPrioHigh === undefined)
            filterOperatorPrioHigh = inBox.inboxUtils._getPriorityFilters("HIGH",inBox.sProviderHost);
        inBox.filtersToApply['hiPrio']=filterOperatorPrioHigh;
        break;
    case inBox.getId()+'--'+"INBOX_FILTER_PRIORITY_VERY_HIGH":
        if (filterOperatorPrioVeryHigh === undefined)
            filterOperatorPrioVeryHigh = inBox.inboxUtils._getPriorityFilters("VERY_HIGH",inBox.sProviderHost);
        inBox.filtersToApply['veryhiPrio']=filterOperatorPrioVeryHigh;
        break;    
    };
    }
    inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForStatus = function(oEvent, inBox) {
    var filterOperatorStatusRES, filterOperatorStatusREADY, filterOperatorStatusINPRO, filterOperatorStatusOPENTASKS;
    inBox.resetSearchCriteria();
    inBox.clearFiltersForStatus();
    
    if(oEvent.getParameter("all")){
        filterOperatorStatusOPENTASKS = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, "COMPLETED");
        //inBox.filtersToApply['dropDownFilter'] = filterOperatorStatusOPENTASKS;
        inBox.filtersToApply['neCompleted'] = filterOperatorStatusOPENTASKS;
    }else{
            var attributeChanged = oEvent.getParameter("selectedItems");
            for(var i=0; i<attributeChanged.length; i++) {
            switch(attributeChanged[i].getId()){
        
            case inBox.getId()+'--'+"INBOX_FILTER_STATUS_RESERVED":
                if (filterOperatorStatusRES === undefined)
                    filterOperatorStatusRES = inBox.inboxUtils._getStatusFilters("RESERVED",inBox.sProviderHost);
                inBox.filtersToApply['resStat']=filterOperatorStatusRES;
                break;
            case inBox.getId()+'--'+"INBOX_FILTER_STATUS_READY":
                if (filterOperatorStatusREADY === undefined)
                    filterOperatorStatusREADY = inBox.inboxUtils._getStatusFilters("READY",inBox.sProviderHost);
                inBox.filtersToApply['readyStat']=filterOperatorStatusREADY;
                break;
            case inBox.getId()+'--'+"INBOX_FILTER_STATUS_IN_PROGRESS":
                if (filterOperatorStatusINPRO === undefined)
                    filterOperatorStatusINPRO = inBox.inboxUtils._getStatusFilters("IN_PROGRESS",inBox.sProviderHost);
                inBox.filtersToApply['InProStat']=filterOperatorStatusINPRO;
                break;
            };
            }
    }
    inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForDateTime = function(oEvent, inBox) {
    var filterOperatorDateToday, filterOperatorDate30, filterOperatorDate15, filterOperatorDate7;
    var todayAttr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DATETIME_TODAY");
    var last30Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DATETIME_MONTH"); 
    var last15Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DATETIME_15DAYS"); 
    var last7Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DATETIME_WEEK"); 
    var attributeChanged = oEvent.getParameter("selectedItems");
    inBox.resetSearchCriteria();
    inBox.clearFiltersForDateTime();
    var dropdownbox =  sap.ui.getCore().byId(inBox.getId()+'--'+'filterComboBox2');
    var isCompTasksSelected = false;
    if(dropdownbox.getSelectedItemId() === inBox.getId()+'--'+'li_completedTasks'){
        isCompTasksSelected = true;
    }
    for(var i=0; i<attributeChanged.length; i++) {
        switch(attributeChanged[i].getId()){
        case inBox.getId()+'--'+"INBOX_FILTER_DATETIME_TODAY":
            var formD = inBox.getFormattedDateTimeOff(0, false);
            // TODO: Can remove this check, one because we checking against null which is not valid in JavaScript,
            // two the variables are always undefined as they are created inside this function,
            // and the function is called for every selection.
            if (filterOperatorDateToday === undefined){
                    filterOperatorDateToday = new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, formD);
            }
            inBox.filtersToApply['today']=filterOperatorDateToday;

            // Clear the filter from the stack.
            delete inBox.filtersToApply.last30;
            delete inBox.filtersToApply.last15;
            delete inBox.filtersToApply.last7;
            break;
        case inBox.getId()+'--'+"INBOX_FILTER_DATETIME_MONTH":
            var formD = inBox.getFormattedDateTimeOff(30, false);
            if (filterOperatorDate30 === undefined){
                    filterOperatorDate30 = new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, formD);
            }
            inBox.filtersToApply['last30']=filterOperatorDate30;
            // Clear the filter from the stack.
            delete inBox.filtersToApply.today;
            delete inBox.filtersToApply.last15;
            delete inBox.filtersToApply.last7;
            break;
        case inBox.getId()+'--'+"INBOX_FILTER_DATETIME_15DAYS":
            var formD = inBox.getFormattedDateTimeOff(15, false);
            if (filterOperatorDate15 === undefined){
                    filterOperatorDate15 = new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, formD);
            }
            inBox.filtersToApply['last15']=filterOperatorDate15;

            delete inBox.filtersToApply.today;
            delete inBox.filtersToApply.last30;
            delete inBox.filtersToApply.last7;
            break;
        case inBox.getId()+'--'+"INBOX_FILTER_DATETIME_WEEK":
            var formD = inBox.getFormattedDateTimeOff(7, false);
            if (filterOperatorDate7 === undefined){
                    filterOperatorDate7 = new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, formD);
            }
            inBox.filtersToApply['last7']=filterOperatorDate7;
            delete inBox.filtersToApply.today;
            delete inBox.filtersToApply.last30;
            delete inBox.filtersToApply.last15;
            break;
        };

    }
    inBox.applyFilterOnResponse(null);
};


sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForTaskType = function(oEvent, inBox) {
	//this.data(null);
	var constants = inBox.constants;
// var filterOperatorStatusRES, filterOperatorStatusREADY, filterOperatorStatusINPRO;
    inBox.resetSearchCriteria();
    inBox.clearFiltersForTaskType();
    var isOdataModelBound = (inBox.typeOfModel === "OData");
    if(isOdataModelBound && inBox.currentView === inBox.constants.tableView){
    	inBox._clearCustomAttributeSort();
    }
    if(!oEvent.getParameter("all")) {
        var attributeChanged = oEvent.getParameter("selectedItems");
        inBox.bRefreshTaskTypes = false;
        if(isOdataModelBound){
        	inBox._createCustomAttributes(attributeChanged);
        	//Custom Actions not created on filter of Task Types. Commenting out.
        	//inBox._createCustomActions(attributeChanged);
        }

        for(var i=0; i<attributeChanged.length; i++) {
            inBox.filtersToApply[attributeChanged[i].getKey()]=new sap.ui.model.Filter("TaskDefinitionID", sap.ui.model.FilterOperator.EQ, decodeURIComponent(attributeChanged[i].getKey()));
        };
    }else{
        if(inBox.isCustomActionsEnabled === true && isOdataModelBound ){
            inBox._deleteCustomActions(null);
        }
        if(inBox.isCustomAttributesEnabled === true && isOdataModelBound){
            // change to delete all columns other than the fixed..... 
            inBox._deleteCustomAttributeColumns(null);
            inBox._modifyListBindingForExpand(false,constants.customAttributeNavigationParam);
         }
    }
    var rebind = (inBox.currentView === inBox.constants.rowRepeaterView)?true:false
    inBox.applyFilterOnResponse(null, rebind);
};

sap.uiext.inbox.Inbox.prototype._getCustomAttributeMetaData = function(sTaskDefinitionID,sSapOriginID,rowNumber, sSelectedTaskInstance){
	var that = this;
	var constants = this.constants;
	var oTaskDefinitionTCMMetadata = constants.TaskDefinitionCollection;
	var oCustomAttributeMetaDataArrayMap = constants.oTaskDefinitionCustomAttributesMap;
	var oCustomAttributeMetaDataArray = oCustomAttributeMetaDataArrayMap[sTaskDefinitionID];
	
	//if the Custom attribute definition for the task has not already been retrieved, then make a server call.
	if(!oCustomAttributeMetaDataArray){
		var sRequestURI =  this.bpmSvcUrl 
										+ constants.forwardSlash + oTaskDefinitionTCMMetadata.entityName 
										+ "(" 
											+ oTaskDefinitionTCMMetadata.properties.taskDefnID + "='" + sTaskDefinitionID 
											+ "'," 
											+ constants.sapOrigin + "='" + sSapOriginID 
										+ "')" 
										+ constants.forwardSlash +  oTaskDefinitionTCMMetadata.navParam.customAttrDefn;
		
		var oModel = this.getCoreModel();
		
	    var oRequestOptions = {
	        async:true,
	        requestUri : sRequestURI,
	        method : "GET",
	        headers : {
	            Accept : constants.acceptHeaderforJSON,
	            "Accept-Language" : sap.ui.getCore().getConfiguration().getLanguage(),
	            "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
	        }
	    };
	    
	    OData.request(oRequestOptions, function(data, request) {
	        var aCustomAttributeDefinitionArray = data.results;
	        var aCustomAttributeMetaDataArray = [];
	        //convert the result array into an object format with key as the 'Name' of Custom Attribute
	        for(var i=0;i<aCustomAttributeDefinitionArray.length;i++){
	            var oCustomAttributeDefn = {};
	            oCustomAttributeDefn.Name =  aCustomAttributeDefinitionArray[i].Name;
	            oCustomAttributeDefn.Type =  aCustomAttributeDefinitionArray[i].Type;
	            oCustomAttributeDefn.Label = aCustomAttributeDefinitionArray[i].Label;
	            aCustomAttributeMetaDataArray.push(oCustomAttributeDefn);
	        }
	        //cache the custom attribute definitions for a Task Definition, so that we do not make a server call the next time.
	        oCustomAttributeMetaDataArrayMap[sTaskDefinitionID] = aCustomAttributeMetaDataArray;
	        that._displayCustomAttributes(sTaskDefinitionID, sSelectedTaskInstance, rowNumber);
	    }, function(error) {
	        that.showMessage("error", that._oBundle.getText("INBOX_MSG_FETCH_CUSTOM_ATTRIBUTES_FAILS"));
	    });
	} else {
		that._displayCustomAttributes(sTaskDefinitionID, sSelectedTaskInstance, rowNumber);
	}
};

sap.uiext.inbox.Inbox.prototype._displayCustomAttributes = function(sSelectedTaskDefinition, sSelectedTaskInstance, rowNumber){
	var constants = this.constants;
	var aCustomAttributeMetaDataArray = constants.oTaskDefinitionCustomAttributesMap[sSelectedTaskDefinition];
	
	//Table View
	if(this.currentView === this.constants.tableView){
		//delete and create custom attribute columns
		this._deleteCustomAttributeColumns(aCustomAttributeMetaDataArray);
		if(aCustomAttributeMetaDataArray){
			this._createCustomAttributeColumns(aCustomAttributeMetaDataArray);
		}
	}else{
		//RowRepeater View
		if(aCustomAttributeMetaDataArray && aCustomAttributeMetaDataArray.length == 0){
			this._addActionContentinRowRepeater(rowNumber, "customAttributes", this._createNoDataLabel(this._oBundle.getText("INBOX_MSG_NO_TASK_DETAILS")));
			return;
		}
		
		var oCustomAttributesValues = constants.oTaskInstanceCustomAttributeValuesMap[sSelectedTaskInstance];
		if (oCustomAttributesValues && !jQuery.isEmptyObject(oCustomAttributesValues)) {
			this._addActionContentinRowRepeater(rowNumber, "customAttributes", this._createCustomAttributesLayoutForRRView(aCustomAttributeMetaDataArray,oCustomAttributesValues,rowNumber));
		} 
	}
};

sap.uiext.inbox.Inbox.prototype._getCustomAttributeData = function(sTaskInstanceID,sSapOriginID,rowNumber,sSelectedTaskDefinition){
	var that = this;
	var constants = this.constants;
	var oTaskCollectionTCMMetadata = constants.TaskCollection;
	
    var oCustomAttributeValuesMap = constants.oTaskInstanceCustomAttributeValuesMap;
	var oCustomAttributesValues = oCustomAttributeValuesMap[sTaskInstanceID];
	if(!oCustomAttributesValues){
		var sURIPart = constants.forwardSlash 
								+ oTaskCollectionTCMMetadata.entityName 
										+ "(" 
											+ oTaskCollectionTCMMetadata.properties.instanceID
													+ "='"
															+ sTaskInstanceID + 
																"',"
																	+ constants.sapOrigin 
																		+ "='" 
																			+ sSapOriginID 
																					+ "')" 
																						+ constants.forwardSlash
																							+ oTaskCollectionTCMMetadata.navParam.customAttrValues;
    
		var sRequestURI = this.bpmSvcUrl + sURIPart;
		var oCustomAttributesValues = {};
		var oModel = this.getCoreModel();
		
	    var oRequestOptions = {
	        async:true,
	        requestUri : sRequestURI,
	        method : "GET",
	        headers : {
	            Accept : constants.acceptHeaderforJSON,
	            "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
	        }
	    };
    
	    OData.request(oRequestOptions, function(data, request) {
        
        // TO-DO : make this generic
	    	var aCustomAttributeData = data.results;
	    	if (aCustomAttributeData.length > 0) {
	    		oCustomAttributesValues["numberOfAttributes"] = aCustomAttributeData.length;
	    		for(var i=0;i<aCustomAttributeData.length;i++){
	    			oCustomAttributesValues[aCustomAttributeData[i].Name] = aCustomAttributeData[i].Value;
	    			oCustomAttributeValuesMap[sTaskInstanceID] = oCustomAttributesValues;
	    		}
	    	} else {
	    		oCustomAttributeValuesMap[sTaskInstanceID] = oCustomAttributesValues;
	    	}
	    	that._displayCustomAttributes(sSelectedTaskDefinition, sTaskInstanceID, rowNumber);
	    }, function(error) {
	    	that.showMessage("error", that._oBundle.getText("INBOX_MSG_FETCH_CUSTOM_ATTRIBUTES_FAILS"));
	    });
	}
};

sap.uiext.inbox.Inbox.prototype._createCustomAttributeColumns = function(customAttributeDefinitionArray){
	var that = this;
	var oTable = this._getComponent('listViewTable');
	var oModel = this.getCoreModel();
	var NAME = "name", iColumnIndex = 0;
	
	//check if columns present and if not add
	jQuery.each(customAttributeDefinitionArray, function(index, caDefinition) {
		var oColumn = that._getComponent(that.inboxUtils.scrub(caDefinition.Name));
		var customAttrDefArrayType = caDefinition.Type;
		var columnTextAlignment = customAttrDefArrayType && (jQuery.inArray(customAttrDefArrayType.replace("class ", ""),that.constants.rightAlignedTypes) != -1) ? sap.ui.core.TextAlign.Right : sap.ui.core.TextAlign.Left;
		
		if(!oColumn){
			//create Column
			oColumn = new sap.ui.table.Column({id:that.getId() + '--' +that.inboxUtils.scrub(caDefinition.Name)})
            					.data("customAttrName", caDefinition.Name)
            					.data("ColumnType", "CustomAttribute")
            					.setFlexible(true)
            					.setLabel(
            							new sap.ui.commons.Label({
            								text: caDefinition.Label,
            								tooltip: caDefinition.Label, 
            								design : sap.ui.commons.LabelDesign.Bold
            								})
            					)
            					.setTemplate(
            							new sap.ui.commons.TextView({
            								id:that.getId() + '--' +that.inboxUtils.scrub(caDefinition.Name) + 'textView',
            								text: {
            											parts: that.oController.getCustomAttributeColumnParts(caDefinition.Name) ,
            											formatter: that.oController.getCustomAttributeColumnFormatter(that)
            								},
            							})
            							.data(NAME,caDefinition.Name)
            							.setTextAlign(columnTextAlignment)
            					);   
			//set Filter on column
            if(that.oController.isFilterOnCustomAttributesSupported()){
            	oColumn.setFilterProperty(caDefinition.Name);
            }
            //set sort on column
			if(that.bAllowCustomAttributeSort){
				oColumn.bindProperty("sortProperty","CustomAttributeData",function(value){
					return "CustomAttributeData/"+this.data("customAttrName");
	            });
			}
    	}else{
    		// in case the Custom Attribute Label is changed in the Process Definition, while the Custom Attribute Key remains as is.
    		if(oTable.indexOfColumn(oColumn) === -1){
    			var oLabel = oColumn.getLabel();
    			if(oLabel.getText() !== caDefinition.Label){
    				oLabel.setText(caDefinition.Label);
    			}
    		}
    	}
		//add column to Table
		oTable.insertColumn(oColumn,iColumnIndex+1);
		iColumnIndex++;
    //}
	});
	this.resizeColumns();
};

sap.uiext.inbox.Inbox.prototype._deleteCustomAttributeColumns = function(customAttributeDefinitionArray){
    //TODO refine this to delete only the ones not in customAttributeDefinitionArray
    var oTable = this._getComponent('listViewTable');
    
    var aTableColumns = oTable.getColumns();
    for (var i=0; i<aTableColumns.length; i++){
        var oColumn = aTableColumns[i];
        if(jQuery.inArray(this._removeParentID(oColumn.getId()),this._getCategoryMetadata().properties)===-1){
            oTable.removeColumn(oColumn);
        	oColumn.destroy();
        }
    }
};

sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForDueDate = function(oEvent, inBox) {
       var filterOperatorDueDateToday, filterOperatorDueDate30, filterOperatorDueDate15, filterOperatorDueDate7,filterOperatorDueDateLowerRange, filterOperatorNoDueDate;
       var todayAttr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_TODAY");
       var next30Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_MONTH"); 
       var next15Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_15DAYS"); 
       var next7Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_WEEK"); 
       var noDateAttr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_NO_DUE_DATETIME"); 
       inBox.resetSearchCriteria();
       inBox.clearFiltersForDueDate();

       if(!oEvent.getParameter("all")) {
         var attributeChanged = oEvent.getParameter("selectedItems");
         var fromDate = new Date(0);
         //filterOperatorDueDateLowerRange = new sap.ui.model.Filter("CompletionDeadLine", sap.ui.model.FilterOperator.GE, fromDate.toUTCString());
         //inBox.filtersToApply['dueDateLowerRange']=filterOperatorDueDateLowerRange;
         
           for(var i=0; i<attributeChanged.length; i++) {
                  switch(attributeChanged[i].getId()){
                  case inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_TODAY":
                         var formD = inBox.getFormattedDueDateTimeOff(1);
                         if (filterOperatorDueDateToday === undefined){
                             filterOperatorDueDateToday = new sap.ui.model.odata.Filter("CompletionDeadLine", [{operator:sap.ui.model.FilterOperator.LE, value1: formD},{operator:sap.ui.model.FilterOperator.GE, value1:fromDate}], true);    
                         }
                         inBox.filtersToApply['dueDateToday']=filterOperatorDueDateToday;
    
                         // Clear the filter from the stack.
                         delete inBox.filtersToApply.next30;
                         delete inBox.filtersToApply.next15;
                         delete inBox.filtersToApply.next7;
                         delete inBox.filtersToApply.noDueDate;
                         break;
                  case inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_MONTH":
                         var formD = inBox.getFormattedDueDateTimeOff(30);
                         if (filterOperatorDueDate30 === undefined){
                               filterOperatorDueDate30 = new sap.ui.model.odata.Filter("CompletionDeadLine", [{operator:sap.ui.model.FilterOperator.LE, value1: formD},{operator:sap.ui.model.FilterOperator.GE, value1:fromDate}], true);
                         }
                         inBox.filtersToApply['dueDatenext30']=filterOperatorDueDate30;
                         // Clear the filter from the stack.
                         delete inBox.filtersToApply.dueDateToday;
                         delete inBox.filtersToApply.next15;
                         delete inBox.filtersToApply.next7;
                         delete inBox.filtersToApply.noDueDate;
                         break;
                  case inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_15DAYS":
                         var formD = inBox.getFormattedDueDateTimeOff(15);
                         if (filterOperatorDueDate15 === undefined){
                               filterOperatorDueDate15 = new sap.ui.model.odata.Filter("CompletionDeadLine", [{operator:sap.ui.model.FilterOperator.LE, value1: formD},{operator:sap.ui.model.FilterOperator.GE, value1:fromDate}], true);
                         }
                         inBox.filtersToApply['dueDatenext15']=filterOperatorDueDate15;
    
                         delete inBox.filtersToApply.dueDateToday;
                         delete inBox.filtersToApply.next30;
                         delete inBox.filtersToApply.next7;
                         delete inBox.filtersToApply.noDueDate;
                         break;
                  case inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_WEEK":
                         var formD = inBox.getFormattedDueDateTimeOff(7);
                         if (filterOperatorDueDate7 === undefined){
                               filterOperatorDueDate7 = new sap.ui.model.odata.Filter("CompletionDeadLine", [{operator:sap.ui.model.FilterOperator.LE, value1: formD},{operator:sap.ui.model.FilterOperator.GE, value1:fromDate}], true);
                         }
                         inBox.filtersToApply['dueDatenext7']=filterOperatorDueDate7;
                         delete inBox.filtersToApply.dueDateToday;
                         delete inBox.filtersToApply.next30;
                         delete inBox.filtersToApply.next15;
                         delete inBox.filtersToApply.noDueDate;
                         break;
                  case inBox.getId()+'--'+"INBOX_FILTER_NO_DUE_DATETIME":
                      if (filterOperatorNoDueDate === undefined){
                    	  filterOperatorNoDueDate = new sap.ui.model.Filter("CompletionDeadLine", sap.ui.model.FilterOperator.EQ, null);
                      }
                      inBox.filtersToApply['noDueDate']=filterOperatorNoDueDate;
                      delete inBox.filtersToApply.dueDateToday;
                      delete inBox.filtersToApply.next30;
                      delete inBox.filtersToApply.next15;
                      delete inBox.filtersToApply.next7;
                      break;
                  };
    
           }
       }
       inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype._getSelectedContextsBeforeRequest = function() {
    return this.selectedContexts;
};

sap.uiext.inbox.Inbox.prototype._setVisibility = function(sComponentName, bVisibility) {
    var oComponent = this._getComponent(sComponentName);
    if (oComponent) {
    	oComponent.setVisible(bVisibility);
    }
};

sap.uiext.inbox.Inbox.prototype.changeToolbarOnFilterCategory = function() { // function to set properties 'visible' and 'enabled' of action buttons 
	var oSettingsButton = this._getComponent('settingsButton');
	var sSelectedCategory = this._getSelectedCategory();
    switch(sSelectedCategory) {
    case "INBOX_FILTER_CATEGORY_TASKS":
    	oSettingsButton.setEnabled(true);
    	break;
    case "INBOX_FILTER_CATEGORY_TODO":
    	oSettingsButton.setEnabled(false);
    	break;
    case "INBOX_FILTER_CATEGORY_ALERT":
    	oSettingsButton.setEnabled(false);
    	break;
    case "INBOX_FILTER_CATEGORY_NOTIFICATION":
    	oSettingsButton.setEnabled(false);
    	break;
    default:
    	oSettingsButton.setEnabled(true);
    };
};


sap.uiext.inbox.Inbox.prototype.showAllActions = function() { // displaying standard action buttons and links if type of model is not OData
    this._setVisibility('claimActionButton', true);
	this._setVisibility('releaseActionButton', true);
    this._setVisibility('openActionButton', true);
    this._setVisibility('forwardActionButton', true);
	
    this._setVisibility('rrViewClaimAction', true);
    this._setVisibility('rrViewReleaseAction', true);
    this._setVisibility('rrViewForwardAction', true);
	
    this._setVisibility('dotSeparator', true);
    this._setVisibility('dotSeparator2', true);
};

sap.uiext.inbox.Inbox.prototype.hideAllActionButtonsandLinks = function() { // hiding standard action buttons and links if Completed Tasks are selected in dropdownBox
    if (this.getOpenCompletedTasks() == false){
    	this._setVisibility('openActionButton', false);
    }
    this._setVisibility('claimActionButton', false);
	this._setVisibility('releaseActionButton', false);
    this._setVisibility('forwardActionButton', false);
	
    this._setVisibility('rrViewClaimAction', false);
    this._setVisibility('rrViewReleaseAction', false);
    this._setVisibility('rrViewForwardAction', false);
	
    this._setVisibility('dotSeparator', false);
    this._setVisibility('dotSeparator2', false);
};

sap.uiext.inbox.Inbox.prototype.showAllActionButtonsandLinks = function() { // displaying standard action buttons and links if Completed Tasks are not selected in dropdownBox
    if(this.typeOfModel === "OData"){
    	var sTaskEntity = this.constants.ENTITY_NAME_TASK_COLLECTION;
    	this._setVisibility('openActionButton', false);
    	
    	if(this.oTcmMetadata._isPropertyAvailable(sTaskEntity, "SupportsClaim")){
        	this._setVisibility('claimActionButton', true);
            this._setVisibility('rrViewClaimAction', true);
        }
        
        if(this.oTcmMetadata._isPropertyAvailable(sTaskEntity, "SupportsRelease")){
        	this._setVisibility('releaseActionButton', true);
            this._setVisibility('rrViewReleaseAction', true);
            this._setVisibility('dotSeparator', true);
        }
        
        if(this.oTcmMetadata._isPropertyAvailable(sTaskEntity, "SupportsForward") && this.isForwardActionEnabled){
        	this._setVisibility('forwardActionButton', true);
        	this._setVisibility('dotSeparator2', true);
            this._setVisibility('rrViewForwardAction', true);
        } 
    } else { // for Models other than OData
    	this.showAllActions();
    }
};

sap.uiext.inbox.Inbox.prototype._handleActionButtonsEnable = function(bSupportsAction) {
	if( (bSupportsAction.length > 0) && !(jQuery.inArray(false, bSupportsAction) > -1) )  {
        return true;
    } else {
       	return false;
    }
};

sap.uiext.inbox.Inbox.prototype.disableActionButtonsOnMultiStatus = function(selectedStatus, selectedActions) {
    var claimButton = this._getComponent('claimActionButton');
    var releaseButton = this._getComponent('releaseActionButton');
    var forwardButton = this._getComponent('forwardActionButton');
    var completeButton = this._getComponent('openActionButton');
    var bCompletedTasksSelected =  this._isCompletedTasksSelected();
    var bGetOpenCompletedTasks = this.getOpenCompletedTasks();
    
    var bSupportsClaim = selectedActions.aSupportsClaim;
    var bSupportsForward = selectedActions.aSupportsForward;
    var bSupportsRelease = selectedActions.aSupportsRelease;
    
    if ( !bGetOpenCompletedTasks && bCompletedTasksSelected ){
    	completeButton.setVisible(false);
    } else {
    	completeButton.setVisible(true);
    }
    
    if (selectedStatus.length > 0 && !jQuery.inArray("COMPLETED", selectedStatus) > -1 ){
    	completeButton.setEnabled(true);
    } else {
    	if (this.getOpenCompletedTasks() == true){
    		completeButton.setEnabled(true);
    	}
    	else{
    		completeButton.setEnabled(false);
    	}
    } 
    
    claimButton.setEnabled(this._handleActionButtonsEnable(bSupportsClaim));
    releaseButton.setEnabled(this._handleActionButtonsEnable(bSupportsRelease));
    forwardButton.setEnabled(this._handleActionButtonsEnable(bSupportsForward));
};

sap.uiext.inbox.Inbox.prototype.dateFormat = function(dateValue, bDisplayYear) {
  if (dateValue != undefined && typeof (dateValue) == 'string' && dateValue != "") {
      var date;
      if (dateValue.indexOf('Date') != -1) {
          date = new Date();
          date.setTime(dateValue.substring((dateValue.indexOf("(") + 1), dateValue.indexOf(")")));
      } else {
          date = new Date(dateValue.substring((dateValue.indexOf("'") + 1), dateValue.length - 1));
      }
      dateValue = date;
  }

  if (dateValue != undefined && dateValue != "") {
      var ins = sap.ui.core.format.DateFormat.getDateInstance({
          style : "medium"
      });
      if(bDisplayYear !== undefined && bDisplayYear === false)
  	{
  		ins = sap.ui.core.format.DateFormat.getDateInstance({
  			pattern: "MMM dd",
              style : "medium"
          });
  	}
      return ins.format(dateValue);
  }
      //FOR Time Zone Support, do not forget to add timeoffset property in inbox control.
      /*var utc = Date.UTC(dateValue.getUTCFullYear(),dateValue.getUTCMonth(),dateValue.getUTCDate(),dateValue.getUTCHours(),dateValue.getUTCMinutes(),dateValue.getUTCSeconds(),dateValue.getUTCMilliseconds())
      var inboxInstance = this;
      while(inboxInstance != undefined && !(inboxInstance instanceof sap.uiext.inbox.Inbox))
      {
          inboxInstance = inboxInstance.getParent();
      }
      var localTime =  utc + inboxInstance.getTimezoneOffset() + (new Date().getTimezoneOffset()*60*1000);
      var ins = sap.ui.core.format.DateFormat.getDateTimeInstance({
          style : "medium"
      });
      return ins.format(new Date(localTime));*/
 return "";

};

sap.uiext.inbox.Inbox.prototype.tooltipFormatForDateTime = function(dateValue) {
    if (dateValue != undefined && typeof (dateValue) == 'string' && dateValue != "") {
        var date;
        if (dateValue.indexOf('Date') != -1) {
            date = new Date();
            date.setTime(dateValue.substring((dateValue.indexOf("(") + 1), dateValue.indexOf(")")));
        } else {
            date = new Date(dateValue.substring((dateValue.indexOf("'") + 1), dateValue.length - 1));
        }
        dateValue = date;
    }

    if (dateValue != undefined && dateValue != "") {
        var ins = sap.ui.core.format.DateFormat.getDateTimeInstance({
            style : "full"
        });
        return ins.format(dateValue);
    }       
    return "";

};

sap.uiext.inbox.Inbox.prototype.executeActionOnTask = function(oEvent, eventParameters) {
	
	var inBox = eventParameters.inbox;
	var view = eventParameters.view;
	var action = eventParameters.action;
	var isForwardAction = (action === inBox.constants.FORWARD) ? true : false;
	var forwardTo = isForwardAction ? eventParameters.forwardTo : "";
	
    inBox.showBusyLoader();
    var oListTable, rowContext, oModel;
    
    //var action = oEvent.getSource().getId();
    
    var selectedIDs = [], selectedContexts = [],selectedSAPOrigins = [], selectedForwardToUsers = [];
    var selectedStatus = [];
    var concatSelectedIDs, concatSelectedSAPOrigins;
    var selectedID, selectedSAPOrigin;
    // reset search
    inBox.resetSearchCriteria();
    oModel = inBox.getCoreModel();
    
    if(view === inBox.constants.tableView){
    	oListTable = sap.ui.getCore().byId(inBox.getId() + '--' + 'listViewTable');
        if (oEvent.getSource())
            var selectedIndices = inBox.getlistTableSelectedIndices();
        
        jQuery.each(selectedIndices, function(i, selIndex) {
            rowContext = oListTable.getContextByIndex(selIndex);
            selectedContexts.push(rowContext);
            
            selectedID = oModel.getProperty("InstanceID", rowContext);
            selectedSAPOrigin = oModel.getProperty("SAP__Origin", rowContext);
            
            selectedIDs.push(selectedID);
            selectedSAPOrigins.push(selectedSAPOrigin);
            
            if (i == 0){
                concatSelectedIDs = selectedID;
            	concatSelectedSAPOrigins = selectedSAPOrigin;
            }
            else{
                concatSelectedIDs = concatSelectedIDs + ";" + selectedID;
            	concatSelectedSAPOrigins = concatSelectedSAPOrigins + ";" + selectedSAPOrigin;
            }
        });
   }else if(view === inBox.constants.rowRepeaterView){
	   var oContext = oEvent.getSource().getBindingContext();
	   var oRow = oEvent.getSource().getParent().getParent().getParent().getParent().getParent().getParent();
	   selectedID = oModel.getProperty("InstanceID", oContext);
       selectedSAPOrigin = oModel.getProperty("SAP__Origin", oContext);
       
       selectedIDs.push(selectedID);
       selectedSAPOrigins.push(selectedSAPOrigin);
       
	   concatSelectedIDs = selectedID;
	   concatSelectedSAPOrigins = selectedSAPOrigin;
	   selectedContexts.push(oContext);
	  
   }
    
    if (selectedIDs != null || selectedIDs.length > 0) {
        var IDURIPart, requestURI, requestOptions, status;
        if (action === "Claim") {
            action = "Claim";
        }
        if (action === "Release") {
            action = "Release";
        }if(isForwardAction){
        	action = "Forward";
        }
        var eventParams = oEvent.getParameters();
        eventParams.action = action;
        eventParams.selectedIDs = concatSelectedIDs;
        eventParams.selectedSAPOrigins = concatSelectedSAPOrigins;
        eventParams.selectedIDList = selectedIDs;
        eventParams.selectedSAPOriginList = selectedSAPOrigins;
        eventParams.selectedContextList = selectedContexts;
        if(oRow){
          	eventParams.oRow = oRow;
        }

        if(isForwardAction){
        	eventParams.selectedForwardToUsers = forwardTo;
        }
        inBox.fireTaskAction(eventParams);
        if(inBox.clientUpdate === undefined && inBox.typeOfModel !== "OData"){
          	inBox.applyFilterOnResponse(selectedContexts);
        }
  }
    inBox.resetMessages = false;
    if(inBox.clientUpdate){
    	//for clientUpdate, because there is no odata response event in this case
    	inBox.resetMessages = true;
    }
};

sap.uiext.inbox.Inbox.prototype.defaultActionHandler = function(oEvent, inBox) {
    var constants = inBox.constants;
    var sAction = oEvent.getParameter('action');
    var concatSelectedIDs = oEvent.getParameter('selectedIDs');
    var concatSAPOrigins = oEvent.getParameter('selectedSAPOrigins');
    var selectedIDList = oEvent.getParameter('selectedIDList');
    var selectedSAPOriginList = oEvent.getParameter('selectedSAPOriginList');
    var commentsList = oEvent.getParameter('commentsList');
    var isForwardAction = (sAction === inBox.constants.FORWARD) ? true : false;
    var aSelectedContextsList = oEvent.getParameter('selectedContextList');
    var oSelectedRow = oEvent.getParameter('oRow');
    var sForwardToUser = oEvent.getParameter('selectedForwardToUsers');
    var selectedIDListLength = selectedIDList.length;
    var iTotalNumberOfRequests = selectedIDListLength;
    
    if((selectedIDListLength > 1) && inBox.isBatchOperationSupported){
    	
    	var aUrlParameters = [];
    	for(var i = 0;i < selectedIDListLength ; i ++){
    		var mUrlParams = {};
    		mUrlParams.InstanceID = "'" + selectedIDList[i] + "'";
    		mUrlParams.SAP__Origin = "'" + selectedSAPOriginList[i]  + "'";
    		if(commentsList && commentsList.length > 0){
    			mUrlParams.Comments= "'" + commentsList[i] + "'";
    		}
    		if(isForwardAction){
    			mUrlParams.ForwardTo= "'" + oEvent.getParameter('selectedForwardToUsers')  + "'";
   		  	}
    		aUrlParameters.push(mUrlParams);
    	}
    	
    	var fnSuccess = function(oData,response){
    		inBox.processTaskActionBatchResponse(aSelectedContextsList, oData, sAction, sForwardToUser);
		};
		
		var fnError = function(oError) {
			inBox._handleErrorOnBatchRequests(oError, sAction, iTotalNumberOfRequests);
	    };
	    
	    this.oDataManager.fireBatchRequest({
	    	sPath : sAction,
	    	sMethod : "POST",
	    	sBatchGroupId : "standardActionBatch",
	    	aUrlParameters : aUrlParameters,
	    	numberOfRequests : selectedIDListLength,
	    	fnSuccess : fnSuccess,
	    	fnError : fnError
	    });
	    
    } else {
    	var oActionEntry = {};
    	oActionEntry.InstanceID = decodeURIComponent(concatSelectedIDs);
    	oActionEntry.SAP__Origin = concatSAPOrigins;
    	if (isForwardAction)
    		oActionEntry.ForwardTo = oEvent.getParameter('selectedForwardToUsers');
    	
    	var fnSuccess = function(data, request) {
        	if (inBox.clientUpdate) {
          	   var aCompletedTaskContexts = [], aChangeContextValues = [];
          	   inBox.hideBusyLoader();
           	   inBox.selectedContexts = aSelectedContextsList;
           	   var aStatusFilterParamValues = inBox._getAppliedStatusFilterValues();
           	   if (sAction === 'Forward' || aStatusFilterParamValues.length > 0 && (jQuery.inArray(data.Status,aStatusFilterParamValues)) === -1) {
           		  if(oSelectedRow) 
           			  aCompletedTaskContexts.push({orow: oSelectedRow, context: aSelectedContextsList[0]});
  	       		  else 
  	       			  aCompletedTaskContexts.push(aSelectedContextsList[0]);
           	   }
           	   aChangeContextValues.push({context: aSelectedContextsList[0], keys : [{key: 'Status', value: data.Status}, {key: 'IsEscalated', value: data.IsEscalated}]});
           	   inBox._refreshLocal(aCompletedTaskContexts, aChangeContextValues, true);
              }
          	
          	if(inBox.clientUpdate === undefined) 
          		inBox.applyFilterOnResponse(aSelectedContextsList);
          	
          	if(sAction === "Forward")
          		inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_FORWARD_ACTION_SUCCESS",[data.TaskTitle, sForwardToUser]));
          	else 
          		inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_ACTION_SUCCESS",[sAction,data.TaskTitle]));
          };
          
          var fnError = function(oError) {
        	  inBox._handleErrorOnActionFailed(oError, sAction, inBox.getCoreModel().getProperty("TaskTitle", aSelectedContextsList[0]));
          };
          
          inBox.oDataManager.callFunctionImport(sAction, {
        	  method : "POST",
        	  urlParameters : oActionEntry,
        	  success : fnSuccess,
        	  error : fnError
          }, true);
    }
};

sap.uiext.inbox.Inbox.prototype.processTaskActionBatchResponse = function(aSelectedContextsList, oData, sAction, sForwardToUser) {
	var batchResponses = oData.__batchResponses;
	var i, j, iBatchResLength, len, sTaskTitle, bErrorinChangeResponse;
    var iNoOfErrors = 0, iNoOfSuccess = 0, aCompletedTaskContexts = [], aChangeContextValues = [];
    	for(i = 0, len = batchResponses.length; i < len; i++){
    		var aChangeResponses = batchResponses[i].__changeResponses;
	        	if(aChangeResponses){
	        		for(j = 0, iBatchResLength = aChangeResponses.length; j < iBatchResLength ; j++){
	        			var oChangeResponse = aChangeResponses[j];
                        if (iBatchResLength === 1) {
	        				sTaskTitle = oChangeResponse.data.TaskDefinitionName;
                        }
                        bErrorinChangeResponse = !(oChangeResponse.statusCode >= 200 && oChangeResponse.statusCode <= 202);
                 
                        if(bErrorinChangeResponse){
                        	iNoOfErrors = iNoOfErrors+1 ;
                        } 
                        else {
                        	iNoOfSuccess = iNoOfSuccess + 1;
                  	  	}
                    }
	           } 
	           else {
	        	   iNoOfErrors = iNoOfErrors+1;
	           }
	      }
    	if(this.clientUpdate === undefined) {
    		this.applyFilterOnResponse(aSelectedContextsList);
        }
    	this.displayMessageAfterExecutingAction( sAction, sTaskTitle, iNoOfErrors, iNoOfSuccess, sForwardToUser);
};

sap.uiext.inbox.Inbox.prototype.displayMessageAfterExecutingAction = function ( sAction, sTaskTitle, iNoOfErrors, iNoOfSuccess, sForwardToUser) {
	
	/*TODO code needs to be varified and refactored.
	combine handling of standard as well custom action in one single function.
	*/
	
	if(iNoOfErrors > 0){
		var sErrorMessage = (iNoOfErrors === 1) ? this._oBundle.getText("INBOX_MSG_ACTION_FAILED", [sAction, iNoOfErrors]) :  this._oBundle.getText("INBOX_MSG_ACTION_FAILED_MULTIPLE_TASKS", [sAction, iNoOfErrors]) ; 
		this.showMessage("error",  sErrorMessage);
    }
	
	if(iNoOfSuccess === 1){
		var sMessage = sAction === "Forward" ? this._oBundle.getText("INBOX_MSG_FORWARD_ACTION_SUCCESS",[sTaskTitle, sForwardToUser]) : this._oBundle.getText("INBOX_MSG_ACTION_SUCCESS",[sAction, sTaskTitle]);
		this.showMessage("success",  sMessage);
	}
	   
	if(iNoOfSuccess > 1) {
		this.showMessage("success", this._oBundle.getText("INBOX_MSG_ACTION_SUCCESS_MULTIPLE_TASKS",[sAction, iNoOfSuccess]));
	} 
		
};

sap.uiext.inbox.Inbox.prototype.fillAttributes = function() {
    var inBox = this;
    var oFacetFilter = sap.ui.getCore().byId(this.getId()+'--'+'filterFacet');
    if(oFacetFilter != undefined){
        var taskTypes = inBox.applyTaskCategoryFilter ? inBox.constants.aDrillDownFilterMetadata [1].attributes :
        	inBox.bShowNoDueDateFilter ? inBox.constants.aFilterMetaDataWithNoDueDate[0].attributes : inBox.constants.aFilterMetaData[0].attributes;
        var taskParentAttr = inBox.applyTaskCategoryFilter ? oFacetFilter.getLists()[1] : oFacetFilter.getLists()[0];
        if(taskParentAttr === undefined || taskParentAttr === null)
            return;
            
        var taskAttributes = taskParentAttr.getItems();

        jQuery.each(taskAttributes, function(i, attr) {
            // TODO : here comparison is dependent on the language of TaskTitle.
            var attrIDPos = inBox.inboxUtils.inArray(attr.getKey(),taskTypes);
            if(attr.getKey()!='sapUiFacetFilter_ALL') {
                if(attrIDPos === -1)
                {
                    taskParentAttr.removeItem(attr);
                }else{
                    taskTypes.splice(attrIDPos,1);
                }
            }
        });
        
        if (taskTypes.length > 0) {
            jQuery.each(taskTypes, function(i, taskType) {
                // If TaskTypes have specialCharacters this is failing - needs to be checked
                var taskTypeID = inBox.inboxUtils.scrub(taskType.key);
                var oAttribute = sap.ui.getCore().byId(inBox.getId() + '--' + taskTypeID);
                if (oAttribute === undefined)
                	oAttribute = new sap.ui.core.ListItem(inBox.getId() + '--' + taskTypeID,{text: taskType.value, key:taskType.key}).data("InstanceID",taskType.instanceID).data("SAP__Origin",taskType.sap__Origin);
                taskParentAttr.addItem(oAttribute);
            });
        }
    }
};

sap.uiext.inbox.Inbox.prototype.resetFilterView = function(bClearTableBinding) {
    var appliedDDFilter;
    if (this.filtersToApply.dropDownFilter) {
        appliedDDFilter = this.filtersToApply.dropDownFilter;
    } else if (this.filtersToApply.resStat != undefined || this.filtersToApply.readyStat != undefined
            || this.filtersToApply.InProStat != undefined) {
        appliedDDFilter = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, "COMPLETED");
    }
    this.filtersToApply = {};
    if (appliedDDFilter != undefined) {
        this.filtersToApply.dropDownFilter = appliedDDFilter;
    }
    
    var aFilterKeysData = this.bShowNoDueDateFilter ? sap.uiext.inbox.InboxConstants.aFilterMetaDataWithNoDueDate : sap.uiext.inbox.InboxConstants.aFilterMetaData;
    for (var idx = 0; idx < aFilterKeysData.length; idx++) {
        var attr = sap.ui.getCore().byId(this.getId() + '--' + aFilterKeysData[idx].name);
        if (attr != undefined)
            attr.setSelectedKeys(["sapUiFacetFilter_ALL"]);
    }
    if(bClearTableBinding)
        this.applyFilterOnResponse(null);
    
};

sap.uiext.inbox.Inbox.prototype.getlistTableSelectedIndices = function() {
    var listTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    return listTable.getSelectedIndices();
};

sap.uiext.inbox.Inbox.prototype.getCoreModel = function() {
	if(!this._oModel){
		this._oModel = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable').getModel();
	}
	return this._oModel;
};

sap.uiext.inbox.Inbox.prototype.getnavigateTaskExecMetadata = function() {
    // var taskExecMeta = {};
    var oListTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    var taskExecutionURLs = [];
    var taskExecIDs = [];
    var taskExecTitles = [];
    var aTaskExecSAPOrigins = [];
    var aSelectedContexts = [];
    var selectedIndices = this.getlistTableSelectedIndices();
    var oModel = this.getCoreModel();
    jQuery.each(selectedIndices, function(i, selIndex) {
        var rowContext = oListTable.getContextByIndex(selIndex);
        aSelectedContexts.push(rowContext);
        // taskExecIDs.push(oModel.getProperty("ID",rowContext));
        taskExecIDs.push(oModel.getProperty("InstanceID", rowContext));
        taskExecTitles.push(oModel.getProperty("TaskTitle", rowContext));
        aTaskExecSAPOrigins.push(oModel.getProperty("SAP__Origin", rowContext));
    });
    if (this.getTaskExecutionURLCallBack != "" && this.getTaskExecutionURLCallBack != undefined && this.getTaskExecutionURLCallBack !== null){
    	var taskUiURL = this.getTaskExecutionURLCallBack(taskExecIDs[0],aTaskExecSAPOrigins[0]);
    	if(taskUiURL !== null && taskUiURL.replace(/\s/g, "").length > 0){
    		taskExecutionURLs.push(taskUiURL);
    	}
    }
    else{
        taskExecutionURLs.push("");
    }
    /*
     * taskExecMeta["arrayURLs"] = taskExecutionURLs; taskExecMeta["arrayIDs"] = taskExecIDs; taskExecMeta["arrayTitles"] =
     * taskExecTitles;
     */
    return {
    	aSelectedContexts : aSelectedContexts,
        arrayURLs : taskExecutionURLs,
        arrayIDs : taskExecIDs,
        arrayTitles : taskExecTitles,
        aTaskSAPOrigins : aTaskExecSAPOrigins
    };
};

sap.uiext.inbox.Inbox.prototype.getlistTableSelectedContexts = function() {
    var selectedContexts = [];
    var selectedIndices = this.getlistTableSelectedIndices();
    var oListTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    jQuery.each(selectedIndices, function(i, selIndex) {
        selectedContexts.push(oListTable.getContextByIndex(selIndex));
    });
    return selectedContexts;
};

sap.uiext.inbox.Inbox.prototype.showBusyLoader = function() {
    sap.ui.core.BusyIndicator.show(0);
    var busyLoader = jQuery.sap.byId("busy_loader");
    busyLoader.css('position', 'absolute');
    busyLoader.css('top', "50%");
    busyLoader.css('left', "50%");
    busyLoader.css('display', '');
    busyLoader.show();
    busyLoader.css('z-index', 99);

};

sap.uiext.inbox.Inbox.prototype.hideBusyLoader = function() {
    sap.ui.core.BusyIndicator.hide();
    var busyLoader = jQuery.sap.byId("busy_loader");
    busyLoader.css('display', 'none');
    busyLoader.css('z-index', -1);
};

sap.uiext.inbox.Inbox.prototype.resetSearchCriteria = function() {
    var srchFld = sap.ui.getCore().byId(this.getId() + '--' + 'searchField');
    srchFld.setValue("");
};

sap.uiext.inbox.Inbox.prototype.loadExecImages = function() {
    var requrl = this._imgResourcePath + sap.uiext.inbox.InboxConstants.prevBtnImage;
    var requrl1 = this._imgResourcePath + sap.uiext.inbox.InboxConstants.nxtBtnImage;
    jQuery.ajax({
        url : requrl,
        type : "GET",
        async : true,
        success : function(data, textStatus, XMLHttpRequest) {
        },
        error : function(XMLHttpRequest, textStatus, errorThrown) {
            // TODO Add proper Error handling and Messaging
        }
    });

    jQuery.ajax({
        url : requrl1,
        type : "GET",
        async : true,
        success : function(data, textStatus, XMLHttpRequest) {
        },
        error : function(XMLHttpRequest, textStatus, errorThrown) {
            // TODO Add proper Error handling and Messaging
        }
    });
};

/*sap.uiext.inbox.Inbox.prototype.getRowSettingsCookieValue = function() {
    var i, x, y, aCookies = document.cookie.split(";");
    for (i = 0; i < aCookies.length; i++) {
        x = aCookies[i].substr(0, aCookies[i].indexOf("="));
        y = aCookies[i].substr(aCookies[i].indexOf("=") + 1);
        x = x.replace(/^\s+|\s+$/g, "");
        if (x == (this.getId() + "nOfRows")) {
            return unescape(y);
        }
    }
};*/

/*sap.uiext.inbox.Inbox.prototype.setRowSettingsCookieValue = function(value, exDays) {
    // var exdate = new Date();
    // exdate.setDate(exdate.getDate() + exDays);
    // var c_value = escape(value) + ((exDays == null) ? "" : "; expires=" + exdate.toUTCString());
    document.cookie = this.getId() + "nOfRows" + "=" + escape(value);// c_value;
    this.setNoOfRowsOnTable(value);
};*/

sap.uiext.inbox.Inbox.prototype.setNoOfRowsOnTable = function(value) {
    var table = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    if (table != undefined)
        table.setVisibleRowCount(parseInt(value, 10));
};


sap.uiext.inbox.Inbox.prototype.showMessage = function(messageType, messageText) {
  
	var that = this;
	var oNotificationBar = sap.ui.getCore().byId(this.getId() + '--' + 'notificationBar');
	var oMessageNotifier = sap.ui.getCore().byId(this.getId() + '--' + 'messageNotifier');
	
	if (oNotificationBar != undefined) {
	
		oNotificationBar.setVisibleStatus(sap.ui.ux3.NotificationBarStatus.Default);
		var now = new Date();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({style : "medium"}); 
		var formattedDateTime = oDateFormat.format(now);
    	var oMessage = new sap.ui.core.Message({
    			text : messageText,
    			timestamp : formattedDateTime
    		});
    	
    	if (messageType === "success"){	
        	oMessage.setLevel(sap.ui.core.MessageType.Success);
        } else if (messageType === "info") {
        	oMessage.setLevel(sap.ui.core.MessageType.Information);
        } else if ( messageType === "error") { 
       		oMessage.setLevel(sap.ui.core.MessageType.Error);
        } else if ( messageType === "warning") {
       		oMessage.setLevel(sap.ui.core.MessageType.Warning);
        }

        oMessageNotifier.addMessage(oMessage);
    	oNotificationBar.setMessageNotifier(oMessageNotifier);

    	// This workaround is added, because NotificationBar does not support auto focus for accessability (2/2)
    	// For more details check Internal Incident 1580169447: ACC 264 : NW750_SP00_I/O_BPM : Text : Notification text not being read out
		jQuery.sap.delayedCall(0, this, function () {
			oNotificationBar._oItemNavigation.focusItem(1);
		});
 }
};

sap.uiext.inbox.Inbox.prototype.deleteMessage = function(oEvent, inBox) {
    if (inBox === undefined)
        inBox = this;
    var oNotificationBar = sap.ui.getCore().byId(inBox.getId() + '--' + 'notificationBar');
    var sMin = sap.ui.ux3.NotificationBarStatus.Min;
    if (oNotificationBar != undefined && oNotificationBar.hasItems()) {
        oNotificationBar.setVisibleStatus(sMin);
    }
};

sap.uiext.inbox.Inbox.prototype.getFormattedDateTimeOff = function(subT, isNow) {
    var myDate = new Date();
    myDate.setDate(myDate.getDate() - subT);
    if(!isNow){
        myDate.setHours(0);
        myDate.setSeconds(0);
        myDate.setMinutes(myDate.getTimezoneOffset());
    }
    return myDate;
};

sap.uiext.inbox.Inbox.prototype.getFormattedDueDateTimeOff = function(subT) {
  var myDate = new Date();
  myDate.setDate(myDate.getDate() + subT);
  myDate.setHours(0);
  myDate.setSeconds(0);
  myDate.setMinutes(myDate.getTimezoneOffset());
  return myDate;
};

sap.uiext.inbox.Inbox.prototype.refreshTaskTypes = function(){
	if(this.dynamicTaskTypeFilterCallBack) {
		if (this.applyTaskCategoryFilter){
    		this.constants.aDrillDownFilterMetadata [1].attributes = this.dynamicTaskTypeFilterCallBack();
    	} else if (this.bShowNoDueDateFilter) {
    		this.constants.aFilterMetaDataWithNoDueDate[0].attributes = this.dynamicTaskTypeFilterCallBack();
    	} else {
    		this.constants.aFilterMetaData[0].attributes = this.dynamicTaskTypeFilterCallBack();
    	}
        this.fillAttributes();
        return;
    }
  var oTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
  var aTaskDefinitions = [];
  var oMap = {};
  var oTaskDefinition;
  if (this.getHandleBindings()) {
      var iLengthT=this._currentViewElement().getBinding("rows");
      var oContexts = this._currentViewElement().getBinding("rows").getContexts(null,iLengthT.iLength);
      var oModel = this.getCoreModel();
      jQuery.each(oContexts, function(i, oContext) {
    	  oTaskDefinition = {"key":oModel.getProperty("TaskDefinitionID", oContext), "value":oModel.getProperty("TaskDefinitionName", oContext),"sap__Origin":oModel.getProperty("SAP__Origin", oContext)};
            if (!oMap[oTaskDefinition.key]) {
                oMap[oTaskDefinition.key] = true;
                aTaskDefinitions.push(oTaskDefinition);
            }
      });
  }else{
      var oListBinding = this._currentViewElement().getBinding("rows");
      if(oListBinding && oListBinding.oList){
	      jQuery.each(oListBinding.oList, function(i, oEntry) {
	    	  oTaskDefinition = {"key":oEntry.TaskDefinitionID, "value":oEntry.TaskDefinitionName};
	          if (!oMap[oTaskDefinition.key]) {
	            oMap[oTaskDefinition.key] = true;
	            aTaskDefinitions.push(oTaskDefinition);
	          }
	      });
      }
  }
  
  if(aTaskDefinitions.length > 0){
	  if (this.applyTaskCategoryFilter) {
			this.constants.aDrillDownFilterMetadata [1].attributes = aTaskDefinitions;
		} else if (this.bShowNoDueDateFilter) {
			this.constants.aFilterMetaDataWithNoDueDate[0].attributes = aTaskDefinitions;
		} else {
			this.constants.aFilterMetaData[0].attributes = aTaskDefinitions;
		}
        this.fillAttributes();
  }
};

sap.uiext.inbox.Inbox.prototype.onAfterRendering = function() {
    // TODO: Apply CSS
    var oTable$ = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable').$();
    oTable$.find("a:disabled").addClass("sapUiExtInboxLnkDsbl");
    
    // TODO: focus CSS
  /*  var settingsButton$ = sap.ui.getCore().byId(this.getId() + '--' + 'settingsButton').$();
    settingsButton$.hover(function(){
        settingsButton$.css("background-color","transparent");
        });
    settingsButton$.focus(function(){
                                        settingsButton$.css("background-color","transparent");
                                        });
    settingsButton$.css("background-color","transparent");
    
   settingsButton$.addClass("sapUiExtInboxSettingsButton");*///TODO: Confirm the behaviour with PO.
};


sap.uiext.inbox.Inbox.prototype._getComponent = function(sComponentName) { 
    return sap.ui.getCore().byId(this.getId() + '--' + sComponentName); 
};

sap.uiext.inbox.Inbox.prototype._removeParentID = function(sComponentName) { 
    var parentID = this.getId();
    return sComponentName.replace(this.getId()+"--","");
    
};

sap.uiext.inbox.Inbox.prototype.populateViewButtonsContainer = function(viewButtonsContainer) {
	var listViewCell = new sap.ui.commons.layout.MatrixLayoutCell({id : this.getId() + '--' + "segmentedButtonCell"});
	/*var listViewImg = new sap.ui.commons.Image({
		id : this.getId() + '--' +  "tableViewImage",
		src : this._imgResourcePath + sap.uiext.inbox.InboxConstants.tableViewImageSelected,
		text : "",
		tooltip : this._oBundle.getText("INBOX_LIST_VIEW_TOOLTIP")
	});
	listViewImg.attachPress(this, this.switchViews);
	listViewImg.addStyleClass("sapUiExtInboxToolBarContainerHeight");
	listViewCell.addContent(listViewImg);
	listViewCell.setPadding(sap.ui.commons.layout.Padding.None);

	// Uncomment the code for Steam View button and also donot forget to
	// increase the width to 4% while creating the toolBarContainer.
	 var matrixViewCell = new sap.ui.commons.layout.MatrixLayoutCell();
	 var matrixViewImg = new sap.ui.commons.Image({
	 id: this.getId() + '--' + "rrViewImage",
	 src : this._imgResourcePath + sap.uiext.inbox.InboxConstants.rrViewImageUnselected,
	 text : "",
	 tooltip : this._oBundle.getText("INBOX_STREAM_VIEW_TOOLTIP")
	 });
	 matrixViewImg.attachPress(this, this.switchViews);
	 matrixViewImg.addStyleClass("sapUiExtInboxToolBarContainerHeight");
	 matrixViewCell.addContent(matrixViewImg);
	 matrixViewCell.setPadding(sap.ui.commons.layout.Padding.None);*/
	 
	 var oSegmentedButtonViewSelectionLite = new sap.ui.commons.SegmentedButton({id:this.getId() + '--' + 'viewSelectionSegBtn',
			buttons:[new sap.ui.commons.Button({id: this.getId() + '--' + 'tableViewSelectionButton',height: "20px", lite: true,icon: this.constants.tableViewImageSelected,
				iconHovered: this.constants.tableViewImageSelected, iconSelected: this.constants.tableViewImageSelected,
													tooltip:this._oBundle.getText("INBOX_LIST_VIEW_TOOLTIP")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected"),//.addStyleClass("sapUiExtInboxToolBarContainerHeight"),
			         new sap.ui.commons.Button({id: this.getId() + '--' + 'rrViewSelectionButton',height: "20px", lite: true,icon: this.constants.rrViewImageSelected,
			        	 iconHovered: this.constants.rrViewImageSelected, iconSelected: this.constants.rrViewImageSelected, 
			        	 					tooltip:this._oBundle.getText("INBOX_STREAM_VIEW_TOOLTIP")}).addStyleClass("sapUiExtInboxSegmentedButtonViewSelection")]});//.addStyleClass("sapUiExtInboxToolBarContainerHeight")]});
	 oSegmentedButtonViewSelectionLite.setSelectedButton(this.getId() + '--' + 'tableViewSelectionButton');
	 oSegmentedButtonViewSelectionLite.attachSelect(this, this.switchViews);
	 oSegmentedButtonViewSelectionLite.addStyleClass("sapUiExtInboxToolBarContainerHeight");
	 listViewCell.addContent(oSegmentedButtonViewSelectionLite);
	 listViewCell.setPadding(sap.ui.commons.layout.Padding.None);
	viewButtonsContainer.createRow(listViewCell);
};

sap.uiext.inbox.Inbox.prototype.updateStylingOnSwitchingView = function(buttonSelected, oEvent) {
	var aButtons = oEvent.getSource().getButtons();
	var oButton;
	for( var i=0; i<aButtons.length; i++){
	oButton = aButtons[i];
	    if(buttonSelected.getId() != oButton.getId()) {
	        oButton.addStyleClass("sapUiExtInboxSegmentedButtonViewSelection");
	        oButton.removeStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
	      }
     
	 else {
	        oButton.removeStyleClass("sapUiExtInboxSegmentedButtonViewSelection");
            oButton.addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
	      }
	 }
	};	


sap.uiext.inbox.Inbox.prototype.switchViews = function(oEvent, oInbox) {
	//TODO : need to refresh model at each switch so as to see latest data
    var that = oInbox;
    that.resetSearchCriteria();
    var previousView = that.currentView;
    var buttonClicked = sap.ui.getCore().byId(oEvent.getSource().getSelectedButton());
    var tableViewSelectionButtonId = that.getId() + '--' + "tableViewSelectionButton";
    var rrViewSelectionButtonId = that.getId() + '--' + "rrViewSelectionButton";
    var tableView = sap.ui.getCore().byId(that.getId() + '--' + 'listViewTable');
    var tableRowSettings = sap.ui.getCore().byId(that.getId() + '--' + 'tableRowSettingLayoutContainer');
    
    var oTasksRowRepeater = sap.ui.getCore().byId(that.getId() + '--'+'tasksRowRepeater');
    var verticalLayout = sap.ui.getCore().byId(that.getId() + '--' + 'verticalLayoutContainer');
    var actionButtonsToolBar = sap.ui.getCore().byId(that.getId() + '--' + 'actionButtonsToolbarContainer');
    var rowRepeaterToolBar = sap.ui.getCore().byId(that.getId() + '--'+ 'rrToolbar'); 
    var rowRepeaterToolsContent = sap.ui.getCore().byId(that.getId() + '--'+ 'rowRepeaterToolsMatLayout'); 
    var rowRepeaterPaginator = sap.ui.getCore().byId(that.getId()+ '--' +"rowRepeaterPaginator");
    
    var currentViewElement = that._currentViewElement();
    var currentViewElementBinding = currentViewElement.getBinding('rows');
    var taskDefinitionFilter = false, bUpdateBinding = true, aSelectedKeys;
    var jSONModel = that.oModel instanceof sap.ui.model.json.JSONModel ;
    
    that.updateStylingOnSwitchingView(buttonClicked, oEvent) ;
    
    if (that.applyTaskCategoryFilter) {
    	if (buttonClicked.getId() == tableViewSelectionButtonId) {
    		that._modifyFacetFilterOnFilterCategory();
    	} else if (buttonClicked.getId() == rrViewSelectionButtonId) {
    		that._modifyFacetFilterOnFilterCategory(true);
    	}
    }
 
    if(currentViewElementBinding &&  currentViewElementBinding.sFilterParams && currentViewElementBinding.sFilterParams.indexOf('TaskDefinitionID') !== -1){
    	taskDefinitionFilter = true;
    	var oTaskTypefilterList = that._getComponent("INBOX_FILTER_TASK_TYPE");
        aSelectedKeys = oTaskTypefilterList.getSelectedKeys();
    }
    
    //in case of clientUpdate, the sFilterParams are not created. So, we need to check if the TaskDefinition Filter is
    //applied by using the array of Filters.
    if(that.clientUpdate && that._isTaskDefinitionFilterApplied()){
    	taskDefinitionFilter = true;
    	var oTaskTypefilterList = that._getComponent("INBOX_FILTER_TASK_TYPE");
        aSelectedKeys = oTaskTypefilterList.getSelectedKeys();
    }
    
    if(buttonClicked.getId() === tableViewSelectionButtonId){
           that.currentView = that.constants.tableView;
           buttonClicked.setIcon(that.constants.tableViewImageSelected);
           var rrViewSelectionButton = sap.ui.getCore().byId(rrViewSelectionButtonId);
           rrViewSelectionButton.setIcon(that.constants.rrViewImageSelected);
           actionButtonsToolBar.setVisible(true);
           tableView.setVisible(true);
           rowRepeaterToolBar.setVisible(false);
           oTasksRowRepeater.setVisible(false);
           rowRepeaterToolsContent.setVisible(false);
           tableRowSettings.setVisible(true);
           if(taskDefinitionFilter && aSelectedKeys && aSelectedKeys.length === 1){
        	   var aItems = oTaskTypefilterList.getItems();
        	   var key = aSelectedKeys[0];
        	   var aSelectedItem = [];
        	   
        	   for (var j = 0; j < aItems.length; j++) {
        		   if (key === aItems[j].getKey()) {
        			   aSelectedItem.push(aItems[j]);
        			   break;
        		   }
               }
                  //that._modifyListBindingForExpand(true,that.constants.customAttributeNavigationParam);
        	   that._createCustomAttributes(aSelectedItem);
          }
    }
    
    if(buttonClicked.getId() === rrViewSelectionButtonId){
           that.currentView = that.constants.rowRepeaterView;
           
           // removing local table filters if applied
           if (that._isTableFiltered) {
        	   that._removeTableFilters(); 
           }
           buttonClicked.setIcon(that.constants.rrViewImageSelected);
           var tableViewSelectionButton = sap.ui.getCore().byId(tableViewSelectionButtonId);
           tableViewSelectionButton.setIcon(that.constants.tableViewImageSelected);
           if(that.isCustomAttributesEnabled){
                  var customAttrButton = that._getComponent('customAttributesSegBtn');
                  if(customAttrButton && !customAttrButton.getVisible()){
                        customAttrButton.setVisible(true);
                  }
           }
           actionButtonsToolBar.setVisible(false);
           tableView.setVisible(false);
           tableRowSettings.setVisible(false);
           if(oTasksRowRepeater.getModel() === undefined || oTasksRowRepeater.getModel() === null){
                  oTasksRowRepeater.setModel(that.getModel());
           }
           rowRepeaterToolBar.setVisible(true);
           oTasksRowRepeater.setVisible(true);
           rowRepeaterToolsContent.setVisible(true);
           if(oTasksRowRepeater.getBinding('rows')){
        	   //oTasksRowRepeater.setCurrentPage(1);
               var numberOfRows = oTasksRowRepeater.getBinding('rows').iLength;
               //rowRepeaterPaginator.setNumberOfPages(Math.ceil(numberOfRows/5));
               that._updatePaginator(numberOfRows);
           }else{
               if(oEvent.getParameters().triggeredFrom === undefined){
            	   		var oRowRepeaterTemplate = that._getComponent('rrMainMatrixLayout');
                        var initialSort = new sap.ui.model.Sorter("CreatedOn", true);
                        var filtersTobeApplied = that._getFilterArray();
                        if(that.isCustomActionsEnabled){
                               that._deleteCustomActions();
                               var isCompletedTasksSelectedinDD =  that._isCompletedTasksSelected();
                               if(!isCompletedTasksSelectedinDD && taskDefinitionFilter){
                                      if(aSelectedKeys && aSelectedKeys.length === 1){
                                             //need to check if with the key we can store an object. This is too much of an overhead.
                                             var aItems = oTaskTypefilterList.getItems();
                                             var key = aSelectedKeys[0];
                                             var sapOrigin;
                               
                                             for (var j = 0; j < aItems.length; j++) {
                                                    if (key === aItems[j].getKey()) {
                                                           sapOrigin = aItems[j].data("SAP__Origin");
                                                           break;
                                                    }
                                             }
                                            /* var aCustomActionsDefinitionArray = that._getCustomActionsDefinition(null,aSelectedKeys[0],sapOrigin);
                                             //create Columns
                                             if(aCustomActionsDefinitionArray && aCustomActionsDefinitionArray.length>0)
                                                    that._createCustomActionButtons(aCustomActionsDefinitionArray, false);*/
                                      }
                               }
                        }
                        
                        var oParams = that._getBindingParameters();
                        
                        oTasksRowRepeater.bindRows({path: that.sCollectionPath,template: oRowRepeaterTemplate,parameters: oParams,sorter:initialSort,filters:filtersTobeApplied});
                        bUpdateBinding = false;
                        if(jSONModel){
                            var iResultLength = oTasksRowRepeater.getBinding('rows').iLength;
                            that._updatePaginator(iResultLength);
                        }
               }
           }
           //rowRepeaterPaginator.setCurrentPage(1);
    }
    	//This will modify the Browser URL without reloading the page.
	    if (window.history.replaceState) {  // Feature not supported in IE8, IE9
											// IOS Safari 3.2, 4.0, 4.1
											// Opera Mini 5.0-7.0
											// Android 2.1, 3.0, 4.0, 4.1
    	var sURLParameters = window.location.search;
    	var sDefaultViewParam = that.constants.defaultView_URLParameter;
    	if(sURLParameters.indexOf(sDefaultViewParam) != -1){
    		sURLParameters = sURLParameters.replace(sDefaultViewParam + "=" + previousView, sDefaultViewParam + "=" + that.currentView);
    		var htmlFilePath = window.location.pathname.substring(window.location.pathname.lastIndexOf("/") + 1);
    		window.history.replaceState(null, null, htmlFilePath + sURLParameters);
    	}
    }
    
    that.inboxUtils.setCookieValue (that.constants.defaultView_URLParameter,that.currentView,1);//Setting/Updating Cookie, on view selection  
    
    if(bUpdateBinding){
           if(that.isCustomActionsEnabled){
                        that._deleteCustomActions();
                        var isCompletedTasksSelectedinDD =  that._isCompletedTasksSelected();
                        if(!isCompletedTasksSelectedinDD && taskDefinitionFilter){
                               if(aSelectedKeys && aSelectedKeys.length === 1){
                                      //need to check if with the key we can store an object. This is too much of an overhead.
                                      var aItems = oTaskTypefilterList.getItems();
                                      var key = aSelectedKeys[0];
                                      var sapOrigin;
                        
                                      for (var j = 0; j < aItems.length; j++) {
                                             if (key === aItems[j].getKey()) {
                                                    sapOrigin = aItems[j].data("SAP__Origin");
                                                    break;
                                             }
                                      }
                              }
                               that.applyFilterOnResponse(null,true);
                        }else{
                               that.applyFilterOnResponse(null);
                        }
           }else{
           //that.refreshTaskList(oEvent, oInbox); //TODO: Should we Refresh Tasks using this function call ? 
                  if(oEvent.getParameters().triggeredFrom === undefined){
                        if(jSONModel && (that.currentView === that.constants.rowRepeaterView)){
                               that.applyFilterOnResponse(null,true);
                        }else{ 
                               that.applyFilterOnResponse(null);
                        }
                  }
           }
    }
};

sap.uiext.inbox.Inbox.prototype.createOtherActions = function(oInbox) {
	var that = oInbox;
	var attachmentButton = new sap.ui.commons.ToggleButton({
		id : that.getId() + '--' + 'attachmentsSegBtn',
		visible : false,
		lite : true,
		icon : that._imgResourcePath + sap.uiext.inbox.InboxConstants.attachmentsImage,
		tooltip : this._oBundle.getText("INBOX_SHOW_ATTACHMENTS")
	}).bindProperty("visible", "SupportsAttachments", function (value) {
		if (value) 
			return value;
		else
			return false;
	}).attachPress(this, function(oEvent, that) {
		that._handleActionButtonToggleinRowRepeater(oEvent);
	});

		var commentsButton = new sap.ui.commons.ToggleButton({
			id : that.getId() + '--' + 'commentsSegBtn',
			visible : false,
			lite : true,
			icon : this.constants.commentsImage,
			tooltip : this._oBundle.getText("INBOX_SHOW_COMMENTS")
		}).addStyleClass("sapUiExtInboxRowRepCommentIconColor");
	
		var customAttributesButton = new sap.ui.commons.ToggleButton({
			id : that.getId() + '--' + 'customAttributesSegBtn',
			enabled : true,
			pressed:false, 
			lite : true,
			visible: false,
			tooltip : this._oBundle.getText("INBOX_SHOW_CUSTOM_ATTRIBUTES"),
			icon : this.constants.iconPool.getIconURI("expand")
		});
		customAttributesButton.bindProperty("visible",that.constants.TaskCollection.properties.instanceID,function(sValue){
			 if(that.isCustomAttributesEnabled) {
			 	return true;
		 	 }
			 if(sValue && that.bCustomAttributesVisible){
				var rowId= this.getId();
				var oRegExpToGetRowNumber = (/\d+$/);
				var aRowNumber = oRegExpToGetRowNumber.exec(rowId);
				var oModel = that.getCoreModel();
				var oContext = this.getBindingContext();
			    var sSelectedTaskDefinition = that.getModel().getProperty(that.constants.TaskDefinitionCollection.properties.taskDefnID, oContext);
				var sSelectedTaskInstance = that.getModel().getProperty(that.constants.TaskCollection.properties.instanceID, oContext); 
				var sSapOrigin = that.getModel().getProperty(that.constants.sapOrigin, oContext);
				that._getCustomAttributeContentforRowRepeater(null, aRowNumber[0], sSelectedTaskDefinition, sSelectedTaskInstance, sSapOrigin);
				this.setIcon(that.constants.iconPool.getIconURI("collapse"));
				this.setTooltip(that._oBundle.getText("INBOX_HIDE_CUSTOM_ATTRIBUTES"));
				this.setPressed(true);
				return true;
		 } 
			 return false;
		 });
		
		/*
		 * var attachmentsImage = new sap.ui.commons.Image({ id : that.getId() + '--' + "attachmentsImg", decorative : false,
		 * src: that._imgResourcePath + sap.uiext.inbox.InboxConstants.attachmentsImage // tooltip :
		 * this._oBundle.getText("HAS ATTACHMENTS")//TODO: What Tootip ? });
		 * attachmentsImage.bindProperty("visible","HasAttachments");
		 * 
		 * var commentsImage = new sap.ui.commons.Image({ id : that.getId() + '--' + "commentsImg", decorative : false, src:
		 * that._imgResourcePath + sap.uiext.inbox.InboxConstants.commentsImage // tooltip :
		 * this._oBundle.getText("HAS_COMMENTS")//TODO: What Tootip ? }); commentsImage.bindProperty("visible","HasComments");
		 */
		
		var oCustomAttrButtonCell = new sap.ui.commons.layout.MatrixLayoutCell(that.getId() + '--'+ 'rrCustomAttrButtonCell', {
			hAlign: sap.ui.commons.layout.HAlign.End,
			//padding: sap.ui.commons.layout.Padding.None
		});
		oCustomAttrButtonCell.addContent(customAttributesButton);
		var rrOtherActionMatLay = new sap.ui.commons.layout.MatrixLayout(that.getId() + '--'+ 'rrOtherActionsMatLay',{layoutFixed: false, columns:4, width:"5%"});
		
		rrOtherActionMatLay.createRow(attachmentButton, commentsButton, oCustomAttrButtonCell);
	
		customAttributesButton.attachPress(this, function(oEvent, that) {
			that._handleActionButtonToggleinRowRepeater(oEvent);
		});
		
	return  rrOtherActionMatLay;
};

sap.uiext.inbox.Inbox.prototype._isOverDue = function(value) {
	//need to be overrriddedn in app for different timezones
	if(value === undefined || value === null || value === "")
		return false;
	
	var now = new Date().getTime();
	var overdue = (value.getTime() - now) < 0 ? true : false;
	return overdue;
};

sap.uiext.inbox.Inbox.prototype._currentView = function() {
	return this.currentView;
};

sap.uiext.inbox.Inbox.prototype.createRowRepeaterToolBar = function(oInbox) {
		var that = oInbox;	
	 var actionButtonsToolBar = sap.ui.getCore().byId(this.getId() + '--' + 'rrToolbar');
	 var oRowRepeater = sap.ui.getCore().byId(this.getId() + '--'+'tasksRowRepeater');
	
	 if(!actionButtonsToolBar){
		 var actionButtonsToolBar = new sap.ui.commons.Toolbar(this.getId() + '--' + "rrToolbar");
		 actionButtonsToolBar.setDesign(sap.ui.commons.ToolbarDesign.Standard);
		 actionButtonsToolBar.addStyleClass("sapUiExtInboxActionButtonsToolbarContainer");
		 
		 
		 //TODO: Add Label SortBy:
		 var sortIndex = 0;
		 if (sap.ui.getCore().byId(this.getId() + '--' + 'sortByLabel') === undefined) {
			 var sortByLabel = new sap.ui.commons.Label(this.getId() + '--' + "sortByLabel", {text: this._oBundle.getText("INBOX_SORT_BY_LABEL") + sap.uiext.inbox.InboxConstants.COLON,
				 design: sap.ui.commons.LabelDesign.Bold});
			 actionButtonsToolBar.insertItem(sortByLabel, sortIndex);
		 }
		 //Sort by Drop down list
		var dropdownComboBox = new sap.ui.commons.DropdownBox(this.getId() + '--' + "sortByFilterComboBox", {
		    tooltip : this._oBundle.getText("INBOX_SORT_BY_LABEL"),
		    items : [new sap.ui.core.ListItem(this.getId() + '--' + "li_creationDate", {
		        text : this._oBundle.getText("INBOX_FILTER_CREATION_DATE"),
		        tooltip : this._oBundle.getText("INBOX_SORT_BY_LABEL") +" "+ this._oBundle.getText("INBOX_FILTER_CREATION_DATE")
		    }), new sap.ui.core.ListItem(this.getId() + '--' + "li_taskTitle", {
		        text : this._oBundle.getText("INBOX_TASK_TITLE"),
		        tooltip : this._oBundle.getText("INBOX_SORT_BY_LABEL") +" "+ this._oBundle.getText("INBOX_TASK_TITLE")
		    }), new sap.ui.core.ListItem(this.getId() + '--' + "li_status", {
		        text : this._oBundle.getText("INBOX_STATUS"),
		        tooltip : this._oBundle.getText("INBOX_SORT_BY_LABEL") +" "+ this._oBundle.getText("INBOX_STATUS")
		    })]
		});
		dropdownComboBox.setValue(this._oBundle.getText("INBOX_FILTER_CREATION_DATE"));
		dropdownComboBox.addStyleClass("sapUiExtInboxRowRepeaterSortBy");
		 var _sortByStartDate = new sap.ui.commons.RowRepeaterSorter(this.getId() + '--' + 'sortByStartDate',{sorter:new sap.ui.model.Sorter("CreatedOn",true)});//Ascending
		 var _sortByTaskTitle = new sap.ui.commons.RowRepeaterSorter(this.getId() + '--' + 'sortByTaskTitle',{sorter:new sap.ui.model.Sorter("TaskTitle",true)});//Initialise it as descneding, as toggle would change it to Ascending
		 var _sortByStatus = new sap.ui.commons.RowRepeaterSorter(this.getId() + '--' + 'sortByStatus',{sorter:new sap.ui.model.Sorter("Status",true)});//Initialise it as descneding, as toggle would change it to Ascending
		 oRowRepeater.addSorter(_sortByStartDate);
		 oRowRepeater.addSorter(_sortByTaskTitle);
		 oRowRepeater.addSorter(_sortByStatus);
		 
		dropdownComboBox.attachChange(this, function(oEvent, inBox){
			var oEmptyListItem = inBox._getComponent('li_empty');
			if(this.indexOfItem(oEmptyListItem) !== -1)
				this.removeItem(oEmptyListItem);
			
		    var listItemID = oEvent.getSource().getSelectedItemId();
		    that.resetSearchCriteria();
		    var sorter;
		    if (listItemID === inBox.getId() + '--' + "li_creationDate") {
		    	sorter = sap.ui.getCore().byId(that.getId() + '--' + 'sortByStartDate').getSorter();
		    	sorter.bDescending = !sorter.bDescending;
		    	oRowRepeater.triggerSort(that.getId() + '--' + 'sortByStartDate');
		    }else if(listItemID === inBox.getId() + '--' + "li_taskTitle"){
		    	sorter = sap.ui.getCore().byId(that.getId() + '--' + 'sortByTaskTitle').getSorter();
		    	sorter.bDescending = !sorter.bDescending;
		    	oRowRepeater.triggerSort(that.getId() + '--' + 'sortByTaskTitle');
		    }else if(listItemID === inBox.getId() + '--' + "li_status"){
		    	sorter = sap.ui.getCore().byId(that.getId() + '--' + 'sortByStatus').getSorter();
		    	sorter.bDescending = !sorter.bDescending;
		    	oRowRepeater.triggerSort(that.getId() + '--' + 'sortByStatus');
		    }
		    that._updateRowRepeaterSortImage(sorter.bDescending);
	
		});
		 actionButtonsToolBar.insertItem(dropdownComboBox,sortIndex+1);
		//Sorting indicator image
		 var sortIcon = new sap.ui.commons.Button(this.getId() + '--' + "sortImage", {
			 tooltip : this._oBundle.getText("INBOX_SORT_INDICATOR_DESC"),
			 icon : sap.uiext.inbox.InboxConstants.sortDescImage
		 });
		 sortIcon.addStyleClass("sapUiExtInboxRefreshButtonHeight");
		 sortIcon.attachPress(this, function(oEvent, inBox){
			 var oSortListBox = inBox._getComponent('sortByFilterComboBox');
			 var oListItemID = oSortListBox.getSelectedItemId();
			 var oRowRepeater = sap.ui.getCore().byId(inBox.getId() + '--'+'tasksRowRepeater');
			 
			 inBox.resetSearchCriteria();
			 var sSorterID = inBox.constants.mRRSortMap[inBox._removeParentID(oListItemID)];
			 var oSorter = sSorterID?inBox._getComponent(sSorterID).getSorter():undefined;
			 
			 if(oSorter){
				 oSorter.bDescending = !oSorter.bDescending;
				 oRowRepeater.triggerSort(inBox.getId() + '--' + sSorterID);
				 inBox._updateRowRepeaterSortImage(oSorter.bDescending);
				 if(oSorter.bDescending){
					 this.setIcon(sap.uiext.inbox.InboxConstants.sortDescImage);
					 this.setTooltip(inBox._oBundle.getText("INBOX_SORT_INDICATOR_DESC"));
				 }else{
					 this.setIcon(sap.uiext.inbox.InboxConstants.sortAscImage);
					 this.setTooltip(inBox._oBundle.getText("INBOX_SORT_INDICATOR_ASC"));
				 }
			 }
		 });
		 actionButtonsToolBar.insertItem(sortIcon, sortIndex+2);
		 var oToggleCustomAttributesButton= sap.ui.getCore().byId(this.getId() + '--' + 'toggleCustomAttributes');
		 if (!oToggleCustomAttributesButton) {
		        var oToggleCustomAttributesButton = new sap.ui.commons.ToggleButton(this.getId() + '--' + "toggleCustomAttributes", {
		            tooltip : this._oBundle.getText("INBOX_SHOW_ALL_CUSTOM_ATTRIBUTES"),
		            icon : this.constants.iconPool.getIconURI("expand"),
		            lite : true,
		            visible : false,
		            pressed : false
		        });
		        oToggleCustomAttributesButton.addStyleClass("sapUiExtInboxToggleButtonMarginRight");
		        oToggleCustomAttributesButton.attachPress(that, that._toggleCustomAttributesVisibilityActionEvent);
		        actionButtonsToolBar.insertRightItem(oToggleCustomAttributesButton);
		    }
	 }
		 
		 //Refresh Button and Refresh Link
/*		 if (sap.ui.getCore().byId(this.getId() + '--' + 'rrRefreshImage') === undefined) {
			 
			 var refreshButton = new sap.ui.commons.Image(this.getId() + '--' + "rrRefreshImage", {
				 tooltip : this._oBundle.getText("INBOX_REFRESH_BUTTON_TOOLTIP"),
				 decorative : false
			 });
			 refreshButton.setSrc(this._imgResourcePath + sap.uiext.inbox.InboxConstants.refreshImage);
			 refreshButton.attachPress(that, that.refreshTaskList);
			 refreshButton.addStyleClass("sapUiExtInboxRefreshButtonHeight");
			 actionButtonsToolBar.insertRightItem(refreshButton, 0);
			 
			 var refreshLink = new sap.ui.commons.Link(this.getId() + '--' + "rrRefreshLink", {
				 text : this._oBundle.getText("INBOX_REFRESH_TEXT"),
				 tooltip : this._oBundle.getText("INBOX_REFRESH_BUTTON_TOOLTIP")
			 });
			 refreshLink.attachPress(that, that.refreshTaskList);
			// actionButtonsToolBar.insertRightItem(refreshLink,1);
				/}*/
		 //Here
		 //var settingsButton = that._createRRSettingsButton();
		 //actionButtonsToolBar.insertRightItem(settingsButton, 3);
		 //Seperator
		// var seprtr = new sap.ui.commons.ToolbarSeparator();
		// actionButtonsToolBar.insertRightItem(seprtr,3);
		

		
	 return actionButtonsToolBar;
}

sap.uiext.inbox.Inbox.prototype.createRowRepeaterToolsContent = function(oInbox) {
	var that = oInbox;
	var oTasksRowRepeater = sap.ui.getCore().byId(that.getId() + '--'+'tasksRowRepeater');
	var rowRepeaterToolsMatLayout = new sap.ui.commons.layout.MatrixLayout(that.getId() + '--'+ 'rowRepeaterToolsMatLayout');
//	var rowRepeaterToolsMatLayout = new sap.ui.commons.layout.MatrixLayout(that.getId() + '--'+ 'rowRepeaterToolsMatLayout',{columns:3, width:"100%",widths:["40.5%","44%","5.3%"]});
//["2%","39%","46%","5%"]

	//Paginator
	var oPaginator = new sap.ui.commons.Paginator(that.getId()+ '--' +"rowRepeaterPaginator");
	oPaginator.attachPage(that, function(oEvent, inBox){
		inBox._handleRowRepeaterPaginatorClick(oEvent);
	});
		
	
	
	//Row Repeater Page Settings.
		var oSegmentedButtonIconLite = new sap.ui.commons.SegmentedButton({id:that.getId() + '--' + 'rowRepeaterRowSettingsSegBtn',
			buttons:[new sap.ui.commons.Button({id: that.getId() + '--' + '5RowsSegBtn',lite:true,text:'5',
													tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_FIVE")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent"),
			         new sap.ui.commons.Button({id: that.getId() + '--' + '10RowsSegBtn',lite:true,text:'10',
			        	 					tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_TEN")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent"),
		           new sap.ui.commons.Button({id: that.getId() + '--' + '20RowsSegBtn',lite:true,text:'20',
		          	 					tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_TWENTY")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent")
	    ]});
		
		oSegmentedButtonIconLite.attachSelect(function(oEvent) {
				var rowSettingValue = parseInt(sap.ui.getCore().byId(oEvent.getParameters().selectedButtonId).getText());
				var aButtons = this.getButtons();
				for (var i = 0; i < aButtons.length; i++) {
					aButtons[i].removeStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
				}
				 
				sap.ui.getCore().byId(oEvent.getParameters().selectedButtonId).addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
					oTasksRowRepeater.setNumberOfRows(rowSettingValue);
					
					//TODO: Need a null check here
					if (oTasksRowRepeater.getBinding('rows')){
					var numberOfRows = oTasksRowRepeater.getBinding('rows').iLength;
					that._updatePaginator(numberOfRows);
					}
		 });
		
		// check for URL Parameter for the number of rows in stream view
		if (that.rrViewRowCountValue != null && that.rrViewRowCountValue != undefined){
        if (parseInt(that.rrViewRowCountValue) === 5 || parseInt(that.rrViewRowCountValue) === 10 || parseInt(that.rrViewRowCountValue) === 20){
        	oSegmentedButtonIconLite.fireSelect({selectedButtonId:that.getId() + '--' + parseInt(that.rrViewRowCountValue) + 'RowsSegBtn'}); 
        	oSegmentedButtonIconLite.setSelectedButton(that.getId() + '--' + parseInt(that.rrViewRowCountValue) + 'RowsSegBtn');
    		sap.ui.getCore().byId(oSegmentedButtonIconLite.getSelectedButton()).addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
        }
        	
        else {
        	oTasksRowRepeater.setNumberOfRows(parseInt(that.rrViewRowCountValue));
        	if (oTasksRowRepeater.getBinding('rows')){
        		var noOfRows = oTasksRowRepeater.getBinding('rows').iLength;
        		that._updatePaginator(noOfRows);
        		} 
        	}
		}
        
        else{
        	oSegmentedButtonIconLite.setSelectedButton(that.getId() + '--' + '5RowsSegBtn');
    		sap.ui.getCore().byId(oSegmentedButtonIconLite.getSelectedButton()).addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
        }
		
	//rowRepeaterToolsMatLayout.createRow(new sap.ui.commons.TextView({text : ' '}));	
	var separatorCell = new sap.ui.commons.layout.MatrixLayoutCell(that.getId() + '--' + "separatorRRViewCell");
	var separatorView = new sap.ui.commons.TextView({id:that.getId() + '--' + 'separator',text:"|"});
	separatorCell.addContent(separatorView);
	separatorCell.setPadding(sap.ui.commons.layout.Padding.None);
	var oBorderLayout2 = new sap.ui.commons.layout.BorderLayout(that.getId() + '--'+ 'borderLayout', {width: "100%", height: "40px"});
	//oBorderLayout2.addStyleClass("sapUIExtInboxRRToolBarStyle");

//	var settingsButton = that._createRRSettingsButton();
	 //Commenting this out as it creates a scrollbar in IE8, instead creating row with empty textview.
//	oBorderLayout2.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.top, new sap.ui.commons.TextView({text : ' '}));
//	oBorderLayout2.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.top, {
//		size : "10px",
//		contentAlign : "center",
//		visible : true
//	});
  
	/*oBorderLayout2.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.begin, settingsButton);
	oBorderLayout2.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.begin, {
		size : "20%",
		contentAlign : "left",
		visible : true
	});*/

	oBorderLayout2.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.center, oPaginator);
	oBorderLayout2.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.center, {
		size :"55%",
		contentAlign : "right",
		visible : true
	});

	oBorderLayout2.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.end, oSegmentedButtonIconLite);
	oBorderLayout2.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.end, {
		size : "45%",
		contentAlign : "right",
		visible : true
	});
	rowRepeaterToolsMatLayout.createRow(new sap.ui.commons.TextView({text : ' '}));//Fix For Footer scrollbar issue in IE8
	rowRepeaterToolsMatLayout.createRow(oBorderLayout2);
	return rowRepeaterToolsMatLayout;
	
};

sap.uiext.inbox.Inbox.prototype._createCustomAttributesLayoutForRRView = function(oCustomAttributeMetaDataArray,oCustomAttributesValues, rowNumber) {
	var that = this;
	var oModel = this.getCoreModel();
	var counter = 1;
	var iNumberofAttributes = oCustomAttributeMetaDataArray.length;
	
	var oCustomAttributesOuterLayout = new sap.ui.commons.layout.MatrixLayout({
	    layoutFixed : true,
	    width : "100%"
		});
	var oCustomAttributesRRViewMatrixLayout = new sap.ui.commons.layout.MatrixLayout();
	var oLabel, oTView , oBorderLayout, oBorderAreaConfig = {
																									size : "33.33%",
																									overflowX : 'hidden',
																									overflowY : 'hidden',
																									contentAlign : "left",
																									visible : true
																								};
	
	jQuery.each(oCustomAttributeMetaDataArray, function(index, caDefinition) {
		if(oCustomAttributesValues[caDefinition.Name]){
			//use the counter to create the numerical index , with which id is generated
			var sLabelID =  that.getId() + '--' + 'customattr'+'-label-'+'-row-'+rowNumber+'-index-' + (counter - 1);
			var sTViewID = that.getId() + '--' +  'customattr'+'-value-'+'-row-'+rowNumber+'-index-' + (counter - 1);
			oLabel = that.oCore.byId(sLabelID) || new sap.ui.commons.Label({
																			  	id :sLabelID,
																			  	text : caDefinition.Label
																			  })
																			.data("customAttrName", caDefinition.Name);
			
			oTView = that.oCore.byId(sTViewID) || new sap.ui.commons.TextView({
																					id : sTViewID
																				})
																				.data("customAttrName",caDefinition.Name);
			oTView.setText(oCustomAttributesValues[caDefinition.Name]);
			oLabel.setLabelFor(oTView);
			
			//====Layout Logic STARTS===
			var custAttrLblValueMatLay = that._createLabelValueMatrixLayout(oLabel, oTView);
			
			//better variable Name?
			//based on the custom Attribute index, calculate the position in the Border Area
			var iPosition = counter % 3;
			var oAreaType = (iPosition === 1) ? sap.ui.commons.layout.BorderLayoutAreaTypes.begin : ((iPosition === 2) ?  sap.ui.commons.layout.BorderLayoutAreaTypes.center : sap.ui.commons.layout.BorderLayoutAreaTypes.end);
			
			//create a nw Border Area, for every 1,4,7.. custom attribute.
			oBorderLayout = (iPosition === 1) ? new sap.ui.commons.layout.BorderLayout({width: "100%", height: "18px"}) : oBorderLayout;
			oBorderLayout.createArea(oAreaType, custAttrLblValueMatLay);
			oBorderLayout.setAreaData(oAreaType, oBorderAreaConfig);
			
			//for every second custom Attribute in the border area, check if it is the last one, and create a dummy element for the border end (for proper alignment)
			if(iPosition === 2 && counter === iNumberofAttributes) {
				 oBorderLayout.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.end, new sap.ui.commons.TextView({text:' '}));
				 oBorderLayout.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.end, oBorderAreaConfig);
			}
			//====Layout Logic ENDS====
			//add the Border Layout to the cell after processing every 3,6 .. custom Attribute or the last one
			if(iPosition === 0 || counter === iNumberofAttributes){
				var oCell = new sap.ui.commons.layout.MatrixLayoutCell();
				oCell.addStyleClass("sapUiExtInboxPaddingBottom");//This is to reduce the spacing between two rows of custom attributes in Row repeater.
				oCell.addContent(oBorderLayout);
				oCustomAttributesRRViewMatrixLayout.createRow(oCell);
			}
			counter++;
		}
	});
	
	//add the whole Custom Attribute to the Outer Matrix Layout.
	var oCellOuter = new sap.ui.commons.layout.MatrixLayoutCell()
							     .addContent(oCustomAttributesRRViewMatrixLayout)
							     .addStyleClass('sapUIExtInboxCustomAttributesBorder');
	
	oCustomAttributesOuterLayout.createRow(oCellOuter);
	return oCustomAttributesOuterLayout;
};

sap.uiext.inbox.Inbox.prototype._currentViewElement = function() {
	var oTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
	var oRowRepeater = sap.ui.getCore().byId(this.getId() + '--' + 'tasksRowRepeater');
	
	var oBindingInfo, currentViewElement;
	if(this.currentView === sap.uiext.inbox.InboxConstants.tableView){
		currentViewElement = oTable;
	}else if(this.currentView === sap.uiext.inbox.InboxConstants.rowRepeaterView){
		currentViewElement = oRowRepeater;
	}
	return currentViewElement;
};

sap.uiext.inbox.Inbox.prototype._updatePaginator = function(length) {
	var oPaginator = this._getComponent('rowRepeaterPaginator'),
	oSegmentedButton = this._getComponent('rowRepeaterRowSettingsSegBtn'),
	oTasksRowRepeater = this._getComponent('tasksRowRepeater');
	
	if(!oPaginator){
		var oPaginator = new sap.ui.commons.Paginator(this.getId()+ '--' +"rowRepeaterPaginator");
		oPaginator.attachPage(this, function(oEvent, inBox){
			inBox._handleRowRepeaterPaginatorClick(oEvent);
		});
		var oBorderLayout2 =this._getComponent('borderLayout');
		if(oBorderLayout2){
			var oRRBorderlayoutCenter = oBorderLayout2.getCenter();
			if(oRRBorderlayoutCenter){
				oRRBorderlayoutCenter.addContent(oPaginator);
			}
			
		}
	}
	
	if (this.rrViewRowCountValue != null && this.rrViewRowCountValue != undefined){
		oPaginator.setNumberOfPages(Math.ceil(length/parseInt(this.rrViewRowCountValue)));
	}
	else{
		var rowSettingValue = sap.ui.getCore().byId(oSegmentedButton.getSelectedButton()).getText();
		oPaginator.setNumberOfPages(Math.ceil(length/rowSettingValue));
	}
	oPaginator.setCurrentPage(1);
	oTasksRowRepeater.gotoPage(1);
};

sap.uiext.inbox.Inbox.prototype._createLabelValueMatrixLayout = function(sLabel, sValue){//TODO: Provide dynamic id to the controls.
	sLabel.addStyleClass("sapUiExtInboxCustomAttLabel").setWrapping(false);

	sValue.addStyleClass("sapUiExtInboxCustomAttValue").setWrapping(false);

var oMLCell1 = new sap.ui.commons.layout.MatrixLayoutCell({
	 hAlign : sap.ui.commons.layout.HAlign.Right,
	   vAlign : sap.ui.commons.layout.VAlign.Top,
	  padding: sap.ui.commons.layout.Padding.End,
	  content : [sLabel]
});
var oMLCell2 = new sap.ui.commons.layout.MatrixLayoutCell({
		hAlign : sap.ui.commons.layout.HAlign.Left,
		vAlign : sap.ui.commons.layout.VAlign.Top,
   padding: sap.ui.commons.layout.Padding.Begin, 
	  content : [sValue]
});

return new sap.ui.commons.layout.MatrixLayout().createRow(oMLCell1, oMLCell2);
};

sap.uiext.inbox.Inbox.prototype._getCustomActionsDefinition = function(sInstanceID, sSapOrigin, aAvailableCustomActionArrayList, callFunctionOnResponse, aSelectedContexts) {
	var that = this;
	var aCustomActionArrayMap = sap.uiext.inbox.InboxConstants.taskInstanceDecisionOptionsMap;
	var aCustomActionArray = aCustomActionArrayMap[sInstanceID];
	if(aCustomActionArray === undefined && sInstanceID){
		var mUrlParams = {InstanceID : "'"+decodeURIComponent(sInstanceID)+"'",
							SAP__Origin : "'"+sSapOrigin+"'",
							$format : "json"};
		
		var fnSuccess = function(oData, response){
							that.selectedContexts = aSelectedContexts;
							aCustomActionArray = aCustomActionArrayMap[sInstanceID] = oData.results;
							if(callFunctionOnResponse){
								callFunctionOnResponse(aCustomActionArray);
							}else{
								that._displayCustomActions(aCustomActionArray, aAvailableCustomActionArrayList);
							}
						};
		
		var fnError = function(oError){
			that.showMessage("error", that._oBundle.getText("INBOX_MSG_FETCH_CUSTOM_ACTION_FAILS"));
		};
		
		this.oDataManager.readData(that.constants.decisionOptionsFunctionImport, {
			urlParameters : mUrlParams,
			success : fnSuccess,
			error: fnError
			}
		);
		
	} else {
		if(callFunctionOnResponse){
			callFunctionOnResponse(aCustomActionArray);
		}else{
			that._displayCustomActions(aCustomActionArray, aAvailableCustomActionArrayList);
		}
	}
};

//TODO : Merge the two methods
sap.uiext.inbox.Inbox.prototype._fetchCustomActionsUsingAsyncCall = function(aInstanceIDs, sSapOrigin, aAvailableCustomActionArrayList, aSelectedContexts) {
	var that = this;
	var iTotalLength = aInstanceIDs.length + aAvailableCustomActionArrayList.length;
	var aCustomActionArray = [];
	var aCustomActionArrayMap = sap.uiext.inbox.InboxConstants.taskInstanceDecisionOptionsMap;
	
	jQuery.each(aInstanceIDs, function(i, sInstanceID) {
		var mUrlParams = {InstanceID : "'"+decodeURIComponent(sInstanceID)+"'",
				SAP__Origin : "'"+sSapOrigin+"'",
				$format : "json"};
		
		var fnSuccess = function(oData, response){
			that.selectedContexts = aSelectedContexts;
			aCustomActionArray = aCustomActionArrayMap[sInstanceID] = oData.results;
			aAvailableCustomActionArrayList.push(aCustomActionArray);
			if(aAvailableCustomActionArrayList.length == iTotalLength){
				that._displayCustomActions(aCustomActionArray, aAvailableCustomActionArrayList);
			}
		};
		
		var fnError = function(oError){
			that.showMessage("error", that._oBundle.getText("INBOX_MSG_FETCH_CUSTOM_ACTION_FAILS"));
		};
		
		that.oDataManager.readData(that.constants.decisionOptionsFunctionImport, {
			urlParameters : mUrlParams,
			success : fnSuccess,
			error: fnError
			}
		);
		
	});
};

sap.uiext.inbox.Inbox.prototype._displayCustomActions = function(aCustomActionArray, aAvailableCustomActionArrayList) {
	this._deleteCustomActionsForTableView();
    //create Custom Actions
	if(aCustomActionArray && aCustomActionArray.length>0){
		aAvailableCustomActionArrayList.push(aCustomActionArray);
	}
	
	function intersectionCustomActions(aLists) {
	    if (aLists.length == 0) return [];
	    else if (aLists.length == 1) return aLists[0];
	    var aIntersection = aLists[0];
	    for (var i = 1; i < aLists.length; i++){
	        aIntersection = intersection(aIntersection, aLists[i]);
	    }
	    return aIntersection;
	}

	function intersection(aArray1, aArray2) {
		var results = [];
		var i, j;
		var arr1Length = aArray1.length;
		var arr2Length = aArray2.length;

		for (i = 0; i < arr1Length; i++) {
			for (j = 0; j < arr2Length; j++) {
				if (aArray1[i].DecisionKey === aArray2[j].DecisionKey) {
					results.push(aArray1[i]);
				}
			}
		}
		return results;
	}

	var aCommonCustomActions = intersectionCustomActions(aAvailableCustomActionArrayList);
	
	if(aCommonCustomActions && aCommonCustomActions.length > 0)
		this._createCustomActionsForTableView(aCommonCustomActions,true);
};

sap.uiext.inbox.Inbox.prototype._executeCustomAction = function(oSource, sComment) {
	var decisionKey = oSource.data("key");
	var sAction = oSource.getText();
	var inBox = this;
	var view = this.currentView;
    var oListTable, rowContext, oModel;
    var selectedIDs = [], selectedContexts = [], selectedSAPOrigins = []; 
    var selectedStatus = [];
    var concatSelectedIDs, concatSelectedSAPOrigins;
    var comments = [];
    var selectedID, selectedSAPOrigin, sTaskTitle;
    // reset search
    inBox.resetSearchCriteria();
    var oModel = inBox.getCoreModel();
    
    if(view === inBox.constants.tableView){
    	oListTable = inBox._getComponent('listViewTable');
    	var selectedIndices = inBox.getlistTableSelectedIndices();
        
        jQuery.each(selectedIndices, function(i, selIndex) {
            rowContext = oListTable.getContextByIndex(selIndex);
            selectedContexts.push(rowContext);
            
            sTaskTitle = oModel.getProperty("TaskTitle", rowContext);
            selectedID = oModel.getProperty("InstanceID", rowContext);
            selectedSAPOrigin = oModel.getProperty("SAP__Origin", rowContext);
            
            selectedIDs.push(selectedID);
            selectedSAPOrigins.push(selectedSAPOrigin);
            
            if (i == 0){
                concatSelectedIDs = selectedID;
                concatSelectedSAPOrigins = selectedSAPOrigin;
            }
            else{
                concatSelectedIDs = concatSelectedIDs + ";" + selectedID;
                concatSelectedSAPOrigins = concatSelectedSAPOrigins + ";" + selectedSAPOrigin;
            }
        });
   }else if(view === inBox.constants.rowRepeaterView){
	   var oContext = oSource.getBindingContext();
	   sTaskTitle = oModel.getProperty("TaskTitle", rowContext);
	   selectedID = oModel.getProperty("InstanceID", oContext);
       selectedSAPOrigin = oModel.getProperty("SAP__Origin", oContext);
       
       selectedIDs.push(selectedID);
       selectedSAPOrigins.push(selectedSAPOrigin);
       
	   concatSelectedIDs = selectedID;
	   concatSelectedSAPOrigins = selectedSAPOrigin;
	   selectedContexts.push(oContext);
	   var oSelectedRow = oSource.getParent().getParent().getParent().getParent().getParent().getParent();
   }
	
    var IDURIPart, requestURI, requestOptions, status, selectedIDLength, iTotalNumberOfRequests;
    
    selectedIDLength = selectedIDs.length;
    iTotalNumberOfRequests = selectedIDLength;
    
    if((selectedIDLength > 1) && inBox.isBatchOperationSupported){
    	
    	var aUrlParameters = [];
    	for(var i = 0;i < selectedIDLength; i ++){
    		var mUrlParams = {};
    		mUrlParams.InstanceID = "'" + selectedIDs[i] + "'";
    		mUrlParams.SAP__Origin = "'" + selectedSAPOrigins[i]  + "'";
    		mUrlParams.DecisionKey = "'" + decisionKey  + "'";
    		if(sComment){
    			mUrlParams.Comments= "'" + jQuery.sap.encodeURL(sComment) +"'";
    		}
    		aUrlParameters.push(mUrlParams);
        }
    	
    	var fnSuccess = function(data,response){
 		   var batchResponses = data.__batchResponses;
 		   var sTaskTitle = data.TaskTitle;
	       var i, j, iBatchResLength, len;
	       var iNoOfErrors = 0, iNoOfSuccess = 0, aCompletedTaskContexts = [], aChangeContextValues = [];
	       for(i = 0, len = batchResponses.length; i < len; i++){
    	           var aChangeResponses = batchResponses[i].__changeResponses;
    	           if(aChangeResponses){
                       for(j = 0, iBatchResLength = aChangeResponses.length; j < iBatchResLength ; j++){
                           var oChangeResponse = aChangeResponses[j];
                           var bErrorinChangeResponse = !(oChangeResponse.statusCode >= 200 && oChangeResponse.statusCode <= 202);
                           if(bErrorinChangeResponse){
                        	   iNoOfErrors = iNoOfErrors+1 ;
                           }else {
                        	   iNoOfSuccess = iNoOfSuccess + 1;
                        	   if(inBox.clientUpdate){
                        	   inBox.selectedContexts = selectedContexts;
                        	   var oSuccessfulResponseData = oChangeResponse.data;
                        	   if(oSuccessfulResponseData.Status === 'COMPLETED'){
                        		   if(oSelectedRow){
                        			   aCompletedTaskContexts.push({orow: oSelectedRow, context: selectedContexts[i]});
                        		   }else{
                        			   aCompletedTaskContexts.push(selectedContexts[i]);
                        		   }
                  	    	   }
                           } }
                       }
    	           }
    	       }
	       if(inBox.clientUpdate){
	       		inBox._refreshLocal(aCompletedTaskContexts);
	       }
	       if(inBox.clientUpdate === undefined){
	    	   inBox.applyFilterOnResponse(selectedContexts);
	       }
	       if(iNoOfErrors > 0){
	    	   if (iNoOfErrors === 1) {
	    	   inBox.showMessage("error", inBox._oBundle.getText("INBOX_MSG_ACTION_FAILED", [sAction, sTaskTitle])); }
	    	   else {
	    		   inBox.showMessage("error",  inBox._oBundle.getText("INBOX_MSG_ACTION_FAILED_MULTIPLE_TASKS", [sAction, iNoOfErrors]));
	    	   }
	       }else{
	    	   if (iNoOfSuccess > 1) {
	    		   inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_ACTION_SUCCESS_MULTIPLE_TASKS",[sAction, iNoOfSuccess])); }
	    	   else {
	    	   inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_ACTION_SUCCESS",[sAction, sTaskTitle])); }
	       }
		};
		
		var fnError = function(oError) {
		    inBox._handleErrorOnBatchRequests(oError, sAction, iTotalNumberOfRequests);
	    };
	    
	    this.oDataManager.fireBatchRequest({
	    	sPath : inBox.constants.decisionExecutionFunctionImport,
	    	sMethod : "POST",
	    	sBatchGroupId : "customActionBatch",
	    	aUrlParameters : aUrlParameters,
	    	numberOfRequests : selectedIDLength,
	    	fnSuccess : fnSuccess,
	    	fnError : fnError
	    });
 
    } else {
    	var oActionEntry = {};
    	oActionEntry.InstanceID = decodeURIComponent(concatSelectedIDs);
    	oActionEntry.SAP__Origin = concatSelectedSAPOrigins;
    	oActionEntry.DecisionKey = decisionKey;
    	if(sComment)
    		oActionEntry.Comments = sComment;
    	
    	var fnSuccess = function(data, request) {
	    	 if(inBox.clientUpdate && data.Status === 'COMPLETED'){
	    		 inBox.selectedContexts = selectedContexts;
	    		 if(oSelectedRow)
	    			 inBox._refreshLocal([{orow: oSelectedRow, context: selectedContexts[0]}]);
	    		 else
	    			 inBox._refreshLocal([selectedContexts]);
	    	 }
	    	 if(inBox.clientUpdate === undefined)
	    	 		inBox.applyFilterOnResponse(selectedContexts);
	    	 inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_ACTION_SUCCESS",[sAction, data.TaskTitle]));
	    	 
	    };
	    
	    var fnError = function(oError) {
	    //TODO: use enums for messageType.
	    	inBox._handleErrorOnActionFailed(oError, sAction, oModel.getProperty("TaskTitle", selectedContexts[0]));
	    };
	    
	    inBox.oDataManager.callFunctionImport(inBox.constants.decisionExecutionFunctionImport, {
	    	method : "POST",
	    	success : fnSuccess,
	    	error : fnError,
	    	urlParameters : oActionEntry,
	    }, true);
	}
    
    inBox.resetMessages = false;
};

sap.uiext.inbox.Inbox.prototype._deleteCustomActions = function(customActionsDefinition) {
	if(this.currentView === this.constants.tableView){
		this._deleteCustomActionsForTableView();
	}else if(this.currentView === this.constants.rowRepeaterView){
		this._deleteCustomActionsForRowRepeaterView();
	}
};

sap.uiext.inbox.Inbox.prototype._createCustomActionButtons = function(customActionsDefinition,enableButtons) {
	if(this.currentView === this.constants.tableView){
		this._createCustomActionsForTableView(customActionsDefinition,enableButtons);
	}/*else if(this.currentView === this.constants.rowRepeaterView){
		this._createCustomActionsForRowRepeaterView(customActionsDefinition,enableButtons);
	}*/
};

sap.uiext.inbox.Inbox.prototype._deleteCustomActionsForTableView = function(customActionsDefinition) {
	var that = this;
	var oActionButtonsToolBar = this._getActionButtonToolBarForTableView();
	//Get All ToolBar Iems
	var oToolBarItems = oActionButtonsToolBar.getItems();
	for(var i=0; i< oToolBarItems.length; i++){
		var oToolBarItem = oToolBarItems[i];
		if(oToolBarItem instanceof sap.ui.commons.Button &&  oToolBarItem.data("type") === that.constants.customAction){
			oActionButtonsToolBar.removeItem(oToolBarItem);
			oToolBarItem.destroy();
		}
		if(oToolBarItem instanceof sap.ui.commons.ToolbarSeparator &&  oToolBarItem.data("separatorFor") === that.constants.customAction){
			oActionButtonsToolBar.removeItem(oToolBarItem);
			oToolBarItem.destroy();
		}
	}
};


sap.uiext.inbox.Inbox.prototype._createCustomActionsForTableView = function(customActionsDefinition,enableButtons) {
	var that = this;
	var actionButtonsToolBar = this._getActionButtonToolBarForTableView();
	var noOfCustomActions = customActionsDefinition.length;
	var index = 3;
	if(noOfCustomActions > 0){
		var seprtr = new sap.ui.commons.ToolbarSeparator();
		seprtr.data("separatorFor",that.constants.customAction);
		actionButtonsToolBar.insertItem(seprtr,index);
		index++;
	}
	for(var i=0; i < noOfCustomActions; i++){
		var action = customActionsDefinition[i];
		var sDecisionButtonText = !action.DecisionText? action.DecisionKey: action.DecisionText;
		var customActionButton = new sap.ui.commons.Button(this.getId() + '--' + action.DecisionKey+'button', {
		            text : sDecisionButtonText,
		            enabled : enableButtons,
		            tooltip :  action.Description
		        }).data("type",that.constants.customAction).data("key",action.DecisionKey).data("text",action.DecisionText).data("commentsMandatory",action.CommentMandatory);
		customActionButton.attachPress({inbox:that,view:that.constants.tableView}, jQuery.proxy(that._handleCustomActionClick, this));
		        actionButtonsToolBar.insertItem(customActionButton,index);
		        index++;
	}
};

/*sap.uiext.inbox.Inbox.prototype._createCustomActionsForRowRepeaterView = function(customActionsDefinition) {
	var that = this;
	var actionButtonsToolBar = this._getActionButtonToolBarForTableView();
	var noOfCustomActions = customActionsDefinition.length;
	
	var oRowRepeaterTemplate = this._getComponent('rrMainMatrixLayout');
	var oRowRepeaterTemplateActionLayout = this._getComponent('taskActionMatrixLayout');
	var actionRow = oRowRepeaterTemplateActionLayout.getRows()[0];
	for(var i=0; i < noOfCustomActions; i++){
		var action = customActionsDefinition[i];
		var dotLabelCell = new sap.ui.commons.layout.MatrixLayoutCell({
			id : that.getId() + '--' + 'dotLabelCell' + action.DecisionKey,
			hAlign: sap.ui.commons.layout.HAlign.Center,
			vAlign: sap.ui.commons.layout.VAlign.Top,
			colSpan : 1 });
		//DOT Seperator b/w Claim and Release Action Links
		var dotLabel = new sap.ui.commons.Label(that.getId() + '--' + 'dotLabel' + action.DecisionKey,{text:sap.uiext.inbox.InboxConstants.DOT});
		dotLabel.addStyleClass("sapUIExtInboxDotSeperatorStyle");
		dotLabel.data("separatorFor",that.constants.customAction);
		dotLabelCell.addContent(dotLabel);
		actionRow.addCell(dotLabelCell);
		
		var customActionCell = new sap.ui.commons.layout.MatrixLayoutCell({
			id : that.getId() + '--' + 'customActionCell' + action.DecisionKey,
			hAlign: sap.ui.commons.layout.HAlign.Left,
			vAlign: sap.ui.commons.layout.VAlign.Bottom,
			colSpan : 1 });
		
		var customActionLink = new sap.ui.commons.Link(that.getId() + '--' + "rrView" + action.DecisionKey + "link",{tootltip:action.Description});
		var sDecisionLinkText = !action.DecisionText? action.DecisionKey : action.DecisionText ;
		customActionLink.data("type",that.constants.customAction);
		customActionLink.data("key",action.DecisionKey);
		customActionLink.addStyleClass("sapUiExtInboxLnkNoUnderline");
		customActionLink.setText(sDecisionLinkText);
		customActionLink.attachPress({inbox:that,view:that.constants.rowRepeaterView,action:action.DecisionKey}, that._executeCustomAction);
		customActionCell.addContent(customActionLink);
		actionRow.addCell(customActionCell);
	}
};*/

sap.uiext.inbox.Inbox.prototype._deleteCustomActionsForRowRepeaterView = function(customActionsDefinition) {
	var that = this;
	var oRowRepeaterTemplate = this._getComponent('rrMainMatrixLayout');
	var oRowRepeaterTemplateActionLayout = this._getComponent('taskActionMatrixLayout');
	var actionRow = oRowRepeaterTemplateActionLayout.getRows()[0];
	var actionCells = actionRow.getCells();
	for(var i=0; i < actionCells.length; i++){
		var oActionCell = actionCells[i];
		var oActionContent = oActionCell.getContent()[0];
		if(oActionContent instanceof sap.ui.commons.Link &&  oActionContent.data("type") === that.constants.customAction || oActionContent instanceof sap.ui.commons.Label &&  oActionContent.data("separatorFor") === that.constants.customAction){
			actionRow.removeCell(oActionCell);
			oActionCell.destroy();
			oActionContent.destroy();
		}
	}
};


//With Refactor this code moves to the TableView getToolBar
sap.uiext.inbox.Inbox.prototype._getActionButtonToolBarForTableView = function() {
	return this._getComponent("actionButtonsToolbarContainer");
};

//removes or adds the parameter
sap.uiext.inbox.Inbox.prototype._modifyListBindingForExpand= function(add,paramName){
	var constants = this.constants;
	var currentViewElement, oListBinding;
	 if(this.currentView === this.constants.tableView){
	    	currentViewElement = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
	    	if (currentViewElement !== undefined) {
	    		oListBinding = currentViewElement.getBinding('rows');
	    	}
	    }else if(this.currentView === this.constants.rowRepeaterView){
	    	currentViewElement = sap.ui.getCore().byId(this.getId() + '--'+'tasksRowRepeater');
	    	if (currentViewElement !== undefined) {
	            oListBinding = currentViewElement.getBinding('rows');
	    	}
	    }
	var mParameters = oListBinding.mParameters;
	
	if(!mParameters){
		oListBinding.mParameters = {expand:""};
	}
	
	var expandParameters = oListBinding.mParameters.expand;
	if(!expandParameters){
		expandParameters = oListBinding.mParameters.expand = "";
	}	
	
	if(add){
		if(expandParameters){
			if(expandParameters.indexOf(constants.customAttributeNavigationParam) === -1){
				if(expandParameters.length > 0){
					expandParameters = expandParameters + "," ;
				}
				expandParameters = expandParameters + paramName;
			}
		}else{
			expandParameters = paramName;
		}
	}else{
		if(expandParameters && expandParameters.length>0){
			var index = expandParameters.indexOf(paramName);
			if(index >= 0){
				expandParameters = expandParameters.charAt(index - 1) === "," ? expandParameters.replace("," + paramName, '') :expandParameters.replace(paramName, '');
			}
		}
	}
	
	if(expandParameters.length > 0){
		oListBinding.mParameters.expand = expandParameters;
	}else{
		delete oListBinding.mParameters.expand;
	}
	
	
	function getCustomParams(mParameters){
		var aCustomParams = [],
		mSupportedParams = {
				expand: true,
				select: true
		};
		
		for (var sName in mParameters) {
			if (sName in mSupportedParams) {
				aCustomParams.push("$" + sName + "=" + jQuery.sap.encodeURL(mParameters[sName]));
			}
		}
		return aCustomParams.join("&");
	}
	
	oListBinding.sCustomParams = getCustomParams(oListBinding.mParameters);
};

sap.uiext.inbox.Inbox.prototype.populateRefreshButtonContainer = function(refreshButtonContainer) {
	var that = this;
  var refreshViewCell = new sap.ui.commons.layout.MatrixLayoutCell({
      id : this.getId() + '--' + "refreshButtonCell"
  });
  var refreshButton = new sap.ui.commons.Button(this.getId() + '--' + "refreshButton", {
    tooltip : this._oBundle.getText("INBOX_REFRESH_BUTTON_TOOLTIP")
  });
  
  refreshButton.setIcon(sap.uiext.inbox.InboxConstants.refreshImage);
 // refreshButton.addStyleClass("sapUiExtInboxRefreshButtonTransparent");
  refreshButton.attachPress(that, that.refreshTaskList);
  refreshButton.addStyleClass("sapUiExtInboxRefreshButtonHeight");
  refreshViewCell.addContent(refreshButton);
  refreshViewCell.setPadding(sap.ui.commons.layout.Padding.None);

  
  var refreshedOnTextCell = new sap.ui.commons.layout.MatrixLayoutCell({
    id : this.getId() + '--' + "refreshedOnTextCell",
    vAlign: sap.ui.commons.layout.VAlign.Bottom,
    padding: sap.ui.commons.layout.Padding.Top
  });  
  // var separatorCell = new sap.ui.commons.layout.MatrixLayoutCell().setSeparation(sap.ui.commons.layout.Separation.Small);
  var refreshedOnText = new sap.ui.commons.Label(this.getId() + '--' + "refreshOnText");
  that.lastRefreshedOnDateTime = new Date();
  var refreshedTime = that._getFormattedRefreshOnDateTime();
  refreshedOnText.setText(that._oBundle.getText("INBOX_TEXT_ON") + sap.uiext.inbox.InboxConstants.SPACE + refreshedTime);
  refreshedOnText.setTooltip(that._getFormattedTooltipForLastRefreshedTime());
  refreshedOnText.addStyleClass("sapUiExtInboxRefreshedOnStyle");
  refreshedOnTextCell.addContent(refreshedOnText);
	refreshButtonContainer.createRow(refreshViewCell, new sap.ui.commons.Label({text:sap.uiext.inbox.InboxConstants.SPACE}), refreshedOnTextCell);
};

sap.uiext.inbox.Inbox.prototype. _getFormattedRefreshOnDateTime = function(){
	 //var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({pattern: sap.uiext.inbox.InboxConstants.REFRESH_ON_DATE_PATTERN}); //Refreshed on Format "Sep 16, 17:22"
	 var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({style : "medium"}); 
	 return oDateFormat.format(this.lastRefreshedOnDateTime);
}; 

sap.uiext.inbox.Inbox.prototype._getFormattedTooltipForLastRefreshedTime = function(){
	var oTooltipDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({style : "medium"});
	return oTooltipDateFormat.format(this.lastRefreshedOnDateTime);
};	

sap.uiext.inbox.Inbox.prototype._createRRSettingsButton = function(){
	var that = this;
	 var settingsButton = sap.ui.getCore().byId(this.getId() + '--' + 'rrSettingsButton');
	 //Creating Settings Button
	 if (!settingsButton) {
		 settingsButton = new sap.ui.commons.Button(that.getId() + '--' + "rrSettingsButton", {
		 tooltip : that._oBundle.getText("INBOX_MANAGE_SUBSTITUTION_RULES_TOOLTIP"),
		 icon : this.constants.iconPool.getIconURI("workflow-tasks"),
		 iconHovered: this._imgResourcePath + sap.uiext.inbox.InboxConstants.settingsImageHover,
         iconSelected: this._imgResourcePath + sap.uiext.inbox.InboxConstants.settingsImageHover,
		 lite : true
		});
		//settingsButton.addStyleClass("sapUiExtInboxToolbarRight");
		settingsButton.addStyleClass("sapUiExtInboxSettingsButton");
		settingsButton.attachPress(that, that.onSubstitutionButtonPress); 
	}
	 return settingsButton;
};

sap.uiext.inbox.Inbox.prototype._executeForwardAction = function(oEvent, mParameters){
	var linkSource = oEvent.getSource();
	var inbox = mParameters.inbox;
	var dynamicId = inbox.getId() + '--';
	var forwardTasksPopUp = sap.ui.getCore().byId(dynamicId + "forwardTasksPopUp");
	var oTable = sap.ui.getCore().byId(dynamicId + "userTable"); 
	if(forwardTasksPopUp===undefined){
		var dLayout = new sap.ui.commons.layout.MatrixLayout({
			id : dynamicId + 'dLayout',
			layoutFixed : true,
			width : '100%'
		});
		
		
		var oSearch = new sap.ui.commons.SearchField({
			id : dynamicId + 'oSearch',	
	        enableListSuggest: false,
	        startSuggestion : 0,
	        tooltip : inbox._oBundle.getText("SUBSTIUTION_RULE_SEARCH_FOR_USERS"),//"Search For Users",
			editable : true,
	        width: '100%'});
		
		oSearch.addDelegate({
			onAfterRendering : function() {
				var oTextField = sap.ui.getCore().byId(dynamicId + 'oSearch-tf');
				oTextField.prop('placeholder', inbox._oBundle.getText("INBOX_SEARCH_FOR_A_COLLEAGUE"));
			}
		});
	
		oSearch.attachSearch(inbox,function(oEvent,inBox){
			oEvent.oParentSource = linkSource;
			oTable.setBusy(true);
			inBox._handleSearchUsersClickforForward(oEvent);
			
		});

		 oSearch.attachSuggest(inbox,function(oEvent,inBox){
			 if (oEvent.getParameter("value") === "") {
				 oTable.clearSelection();
				 oTable.bindRows("");
		        }
		    });
		
		dLayout.createRow(oSearch);
		var users = {
				collection: "UserInfoCollection", //fetch from configration, not to be hardcoded.
				propertiesLabel: [inbox._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_LOGONID"),
				                  inbox._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_NAME")],
				properties: ["UniqueName", "DisplayName"]
		};
		if(oTable === undefined){
			oTable = new sap.ui.table.Table(dynamicId + "userTable",{selectionMode: sap.ui.table.SelectionMode.Single});
		}
		//oTable.setModel(inbox.getModel());
		//oTable.setTitle( "User Table");
		oTable.setVisibleRowCount(5);
		oTable.attachRowSelectionChange(function(){
			if(oTable.getSelectedIndices().length !== 0){
				sap.ui.getCore().byId(dynamicId + "forwardTasksPopUpFrwBtn").setEnabled(true);
			}else{
				sap.ui.getCore().byId(dynamicId + "forwardTasksPopUpFrwBtn").setEnabled(false);
			}
		});
		oTable.bDynamic=true;
		for (var i = 0; i <= users.properties.length-1; i++) {
			oTable.addColumn(
					new sap.ui.table.Column().
					setLabel(new sap.ui.commons.Label({text: users.propertiesLabel[i],design : sap.ui.commons.LabelDesign.Bold })).
					setTemplate(new sap.ui.commons.TextField({
						editable: false,
						value: {path: users.properties[i]}}))
			);
		}

		var dLayoutCont = new sap.ui.commons.layout.VerticalLayout(dynamicId + "userDialogVLayout", {width:"100%"});
		dLayoutCont.insertContent(dLayout, 0);
		dLayoutCont.insertContent(oTable, 1);
		var selUserUniqueName;
		forwardTasksPopUp = new sap.ui.commons.Dialog(dynamicId + "forwardTasksPopUp", {modal: true,
			title : inbox._oBundle.getText("INBOX_FORWARD_SELECTED_TASKS"),//"Search For Users",
			content:[dLayoutCont],
		//	opener : sap.ui.getCore().byId(this.getId() + '--' + 'forwardActionButton'),
			buttons:[new sap.ui.commons.Button(dynamicId + "forwardTasksPopUpFrwBtn",{enabled:false, text: inbox._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD"), tooltip: inbox._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD_TOOLTIP"), press:function(pressEvent){
				var table = sap.ui.getCore().byId(dynamicId + "userTable");
				var selIndex = table.getSelectedIndex();
				var rowContext = table.getContextByIndex(selIndex);
				var tabModel = sap.ui.getCore().byId(dynamicId + 'userTable').getModel();
				var selUsesDisplayName = tabModel.getProperty("DisplayName", rowContext);
				if(selUsesDisplayName === null)
					selUsesDisplayName = "";
				selUserUniqueName = tabModel.getProperty("UniqueName", rowContext);
				var parentEvent = new sap.ui.base.Event();
				parentEvent.oSource = linkSource; 
				parentEvent.mParameters = {};
				inbox.executeActionOnTask(parentEvent,{inbox:inbox,view:mParameters.view,action:"Forward",forwardTo:jQuery.sap.encodeURL(selUserUniqueName),source:linkSource});
				forwardTasksPopUp.close();
			}
			})]
		});
	}
	forwardTasksPopUp.setWidth("500px"); 
	forwardTasksPopUp.open();
	
	forwardTasksPopUp.attachClosed( inbox, function(oEvent,inbox){
		forwardTasksPopUp.destroy();
	});
	forwardTasksPopUp.setInitialFocus(oSearch);
	
};

sap.uiext.inbox.Inbox.prototype._getExpandParameters = function(){
	return this.oController.getExpandParameters();
};

sap.uiext.inbox.Inbox.prototype._getFilterArray = function(){
	var oFilter = [];
	for ( var item in this.filtersToApply) {
		var filter = this.filtersToApply[item];
		if(jQuery.isArray(filter)){
			oFilter = oFilter.concat(filter)
		}else
			oFilter.push(filter);
	}
	return oFilter;
};

sap.uiext.inbox.Inbox.prototype._getSelectedItemfromKey = function(oTaskTypefilterList, selectedKey){
	//need to check if with the key we can store an object. This is too much of an overhead.
	var aItems = oTaskTypefilterList.getItems();
	var key = selectedKey;
	var sapOrigin;
	
	for (var j = 0; j < aItems.length; j++) {
		if (key === aItems[j].getKey()) {
			return aItems[j];
		}
	}
};

sap.uiext.inbox.Inbox.prototype._resetFlags = function(){
	this.isSubstitutionEnabled = false;
    this.isCustomAttributesEnabled = false;
    this.isCustomActionsEnabled = false;
    this.showTaskDescription = false;
    this.showTaskCategory = false;
};

sap.uiext.inbox.Inbox.prototype._createForwardActionLinkCell = function(){
	var that = this; 
	var forwardActionCell = new sap.ui.commons.layout.MatrixLayoutCell({
    	id : that.getId() + '--' + 'forwardActionCell',
    	hAlign: sap.ui.commons.layout.HAlign.Left,
    	vAlign: sap.ui.commons.layout.VAlign.Bottom,
    	colSpan : 1 });
    
    var forwardActionLink = new sap.ui.commons.Link(that.getId() + '--' + "rrViewForwardAction",{
    	visible:false,
    	enabled:false,
    	tooltip:that._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD")
    	});
    forwardActionLink.addStyleClass("sapUiExtInboxLnkNoUnderline");
    forwardActionLink.setText(that._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD"));
    forwardActionLink.attachPress({inbox:that, view:that.constants.rowRepeaterView}, that._executeForwardAction);
    forwardActionCell.addContent(forwardActionLink);
    
   return  forwardActionCell;
};

sap.uiext.inbox.Inbox.prototype._setInboxFiltersVisibility= function(visiblility){
	if(visiblility ===false || visiblility === true){
		sap.ui.getCore().byId(this.getId() + '--' + "filterViewButton").setVisible(visiblility);
		sap.ui.getCore().byId(this.getId() + '--' + "filterComboBox1").setVisible(visiblility);
		sap.ui.getCore().byId(this.getId() + '--' + "filterComboBox2").setVisible(visiblility);
		sap.ui.getCore().byId(this.getId() + '--' + "filterComboBox3").setVisible(visiblility);
	}
};
sap.uiext.inbox.Inbox.prototype._setInboxViewSelectionVisibility = function(visiblility){
	if(visiblility === false || visiblility === true){
		sap.ui.getCore().byId(this.getId() + '--' + "tableViewImage").setVisible(visiblility);
		sap.ui.getCore().byId(this.getId() + '--' + "rrViewImage").setVisible(visiblility);
	}
};

sap.uiext.inbox.Inbox.prototype.resizeColumns=function(){
	var that=this;
	var width=0;
	var oTable= sap.ui.getCore().byId(that.getId() + '--' + 'listViewTable');
	var cols= oTable.getColumns();
	var taskTitleColumn="";
	jQuery.each(cols,function(index,column){
		if(that.absId(column.getId())==="TaskTitle"){
			taskTitleColumn= column;
			return false;
		}	
	});
		if(taskTitleColumn && (taskTitleColumn.getVisible()===true)&&((cols.length)&&(100/cols.length<25))){
			taskTitleColumn.setWidth("20%");
			width=100/(cols.length-1);
			jQuery.each(cols,function(index,column){
				if(that.absId(column.getId())!=="TaskTitle"){
					column.setWidth(width+"%");
				}	
				
			});
			
		}
};

sap.uiext.inbox.Inbox.prototype._isCompletedTasksSelected = function(){
	var dropdownbox =  this._getComponent('filterComboBox2');
    var isCompTasksSelected = false;
    if(dropdownbox.getSelectedItemId() === this.getId()+'--'+'li_completedTasks'){
        isCompTasksSelected = true;
    }
    return isCompTasksSelected; 
};


sap.uiext.inbox.Inbox.prototype._isDrillDownFilterSelected = function(filter){
	var bFilterApplied = false;

	var currentViewElement = this._currentViewElement();
    var currentViewElementBinding = currentViewElement.getBinding('rows');
    
	if(currentViewElementBinding &&  currentViewElementBinding.sFilterParams && currentViewElementBinding.sFilterParams.indexOf(filter) !== -1)
		bFilterApplied = true;
	
	return bFilterApplied;
};

sap.uiext.inbox.Inbox.prototype._getDefaultSort = function(){
	if(!this._defaultSort){
		this._defaultSort = new sap.ui.model.Sorter("CreatedOn", true);
	}
	return this._defaultSort;
};

sap.uiext.inbox.Inbox.prototype._clearCustomAttributeSort = function(){
	var oTable = this._getComponent('listViewTable');
    var oBinding = oTable.getBinding("rows");
    if(oBinding.sSortParams.indexOf(this.constants.customAttributeNavigationParam) !== -1){
    	oBinding.createSortParams(oBinding.aSorters);
    }
};


sap.uiext.inbox.Inbox.prototype._updateViewElementsOnRequestCompleted = function(iLength){
	if(this.currentView === this.constants.tableView){
		this._updateTableOnRequestCompleted();
	}else if(this.currentView === this.constants.rowRepeaterView){
		this._updateRowRepeaterOnRequestCompleted(iLength);
	}
};


sap.uiext.inbox.Inbox.prototype._updateTableOnRequestCompleted = function(){
	if(this.clientUpdate && this.currentView === this.constants.tableView){
        this._currentViewElement().clearSelection();
    }
	var oRowContext, aSelectedStatus = [];
    var oSupportsAction = {
    		aSupportsClaim:[],
    		aSupportsRelease:[],
    		aSupportsForward:[]
    };
    var oCurrentViewElement = this._currentViewElement();
    var aSelectedContexts = this.selectedContexts;
    var aIndexes = this._getTableIndicesByContext(aSelectedContexts,oCurrentViewElement);
    var oModel = oCurrentViewElement.getModel();
    var that = this;
    
    jQuery.each(aIndexes, function(i, index) {
    	oRowContext = oCurrentViewElement.getContextByIndex(index);
    	aSelectedStatus.push(oModel.getProperty("Status", oRowContext));
    	oSupportsAction.aSupportsClaim.push(oModel.getProperty("SupportsClaim", oRowContext));
    	oSupportsAction.aSupportsRelease.push(oModel.getProperty("SupportsRelease", oRowContext));
    	if(that.isForwardActionEnabled){
    		oSupportsAction.aSupportsForward.push(oModel.getProperty("SupportsForward", oRowContext));
    	}
    });
    
  this.inboxUtils.reselectRowsinTable(aIndexes,oCurrentViewElement);
  //this.selectedContexts = [];
	
	/*if(this.isCustomActionsEnabled){
    	if(aIndexes.length === 0){
    		this._createCustomActionsonRequestCompleted();
    	}
	}*/
  this.disableActionButtonsOnMultiStatus(aSelectedStatus, oSupportsAction);
};

sap.uiext.inbox.Inbox.prototype._updateRowRepeaterOnRequestCompleted = function(iLength){
	this._updatePaginator(iLength);
};

sap.uiext.inbox.Inbox.prototype._getTableIndicesByContext = function(aContexts,oTableElement){
	var aIndexes = [];
	var oBinding = oTableElement.getBinding('rows');
	//getContexts() method for oDataListBinding takes parameters - start and iLength, which is not documented in the API reference
	//If no values are passed for these parameters, this method only returns array os contexts whose size is model.iSizeLimit.
	//To get all the contexts, we are using the internal iLength property of binding and passing it as the length parameter.
//	var iLength = oBinding? oBinding.aKeys : undefined;
  //  var aBoundContextList = oBinding.getContexts(0, iLength);
	var aBoundContextList = oBinding.getContexts(0, oBinding.iLength);
	var oModel = oTableElement.getModel();
	var index = -1;
	jQuery.each(aContexts, function(i, oContext) {
		jQuery.each(aBoundContextList, function(j, oBoundContext){
			if(oContext.sPath === oBoundContext.sPath){
				index = j;
				return false;
			}
		});
		if(index > -1){
			aIndexes.push(index);
		}
	});
	return aIndexes;
};

sap.uiext.inbox.Inbox.prototype._isTaskDefinitionFilterApplied = function(){
	var oCurrentViewElement = this._currentViewElement();
    var oCurrentViewElementBinding = oCurrentViewElement.getBinding('rows');
    if(this.clientUpdate){
    	var bFilterPathFound = false;
    	var aFilters = oCurrentViewElementBinding.aFilters.concat(oCurrentViewElementBinding.aApplicationFilters);
    	if(aFilters && aFilters.length > 0){
    		//group filters by path
    		jQuery.each(aFilters, function(j, oFilter) {
    			if (oFilter.sPath === 'TaskDefinitionID') {
    				bFilterPathFound = true;
    				return false;
    			} 
    		});
    	}
    	return bFilterPathFound;
    }
    return (oCurrentViewElementBinding.sFilterParams.indexOf('TaskDefinitionID') !== -1);
};

sap.uiext.inbox.Inbox.prototype._handleRequestSent = function(oEvent){
	if(this.bRefreshStartFlag){
		this.bRefreshStartFlag = false;
		var refreshButton = this._getComponent('refreshButton');
		refreshButton.setIcon(sap.uiext.inbox.InboxConstants.refreshImage);
	}
}

sap.uiext.inbox.Inbox.prototype._handleRequestCompleted = function(oEvent){
	var iLength = 0;
	var oParameters  = oEvent.getParameters();
	if(oParameters.url.indexOf(this.constants.UserInfoCollection) !== -1){
		return;
	}else if(!oParameters.success){
		//Updating the model binding to trigger a rerendering of the table view only as there is a rendering issue with the table view.
		if(this.currentView === this.constants.tableView){
			this._getComponent('listViewTable').getModel().updateBindings();
		}
		if(oParameters.errorobject === undefined || (oParameters.errorobject !== undefined && oParameters.errorobject.statusCode === 401)){
			//Reload the page in case of authentication request or authentication failed.
			window.location.reload(true);
		}		
	}else if(oParameters.success){
		var taskTypeFilterList = this._getComponent("INBOX_FILTER_TASK_TYPE");
		
		var bInitialFilterAppliedforTaskType = taskTypeFilterList ? this._isInitialFilterAppliedforTaskType() : false;
		
	    //refresh Tasks , in case Task Type filter is not applied.
	    if((bInitialFilterAppliedforTaskType || !this._isTaskDefinitionFilterApplied()) && this.bRefreshTaskTypes){
	            this.refreshTaskTypes();
	    }
	    
	    //display custom attributes if Task Type filter is applied for a task having custom attributes
	    if(bInitialFilterAppliedforTaskType){
	    	if(this._setInitialFilterKeysforTaskType(taskTypeFilterList)) {
	    		if (taskTypeFilterList  && taskTypeFilterList.getSelectedKeys() !== ["sapUiFacetFilter_ALL"]) {
	                if (taskTypeFilterList.getSelectedKeys().length === 1) {
	                	var oEvent = new sap.ui.base.Event();
	                    var aSelectedItems = taskTypeFilterList.getItems();
	                    oEvent.mParameters = {all: false, selectedItems: aSelectedItems};
	                    this.applyDrillDownFilterForTaskType(oEvent, this);
	                }
	            }
	        }
	     }
	    
	    // only in response of table column's sort event
	    if (this.bSorted) {
	    	var currentViewElement = this._currentViewElement();
	    	currentViewElement._originalKeys = currentViewElement.getBinding('rows').aKeys;
	    	this.bSorted = false;
	    }
	    
	    //reset refresh Task Types flag
	    this.bRefreshTaskTypes = true;
	    
	    iLength = this._getCurrentViewElementBindingLength();
	    
	    var currentViewElement = this._currentViewElement();
	    var bRowsRebinded = currentViewElement.bRowsRebinded;
	    /* In method applyFilterOnResponse, the row repeater is unbinded and binded again which cause iLength to be 0.
	     * This will treager second request to rebind the rows and in such case the message should not be displayed.
	     * The current function will be recalled after the second request is finished and in such case the message is 
	     * ok to be displayed.
	     * 
	     * This was implemented to fix a false notification "No data available" when data is actually available.
	     * The message was displayed due to iLength = 0 after unbind. It should wait to rebind and complete the second request.
	     */
	    if(bRowsRebinded === null || bRowsRebinded === undefined || !currentViewElement.bRowsRebinded){
	    	this._displayMessageOnRequestCompleted(iLength);
	    }
	    else{
	    	currentViewElement.bRowsRebinded = false;
	    }
	    
	}	

    this.hideBusyLoader();   
    
    //update the view Elements
    this._updateViewElementsOnRequestCompleted(iLength);
    
    //reset refresh gif
    var oRefreshButton = this._getComponent('refreshButton');
    oRefreshButton.setIcon(this.constants.refreshImage);
    
    //fire event
    var oDataEventParams = oEvent.getParameters();
    oDataEventParams.bindingLength = iLength;
    oDataEventParams.appliedFilter = this._getComponent('filterComboBox2').getValue();;
    this.fireODataRequestCompleted(oDataEventParams);    
    
    // preserver local search if appplied
    this._applySearch();
    
    // apply filters on columns if any column is filtered in table view
    if (this.currentView === this.constants.tableView && this._isTableFiltered()) 
    	this._preserveTableFilters();
    
    //Preserve sorting (custom attributes)
    if (this.currentView === this.constants.tableView){
    	this._preserveTableSort();
    }
};

sap.uiext.inbox.Inbox.prototype._applySearch = function(){
	var oSearchField = this._getComponent('searchField');
	var sSearchText = oSearchField.getValue();
	if(sSearchText !== "" && sSearchText !== null){
		oSearchField.fireSearch({query:sSearchText});
	}
};

sap.uiext.inbox.Inbox.prototype._displayMessageOnRequestCompleted = function(iLength){
    if (iLength <= 0) {
		this.showMessage("info", this._oBundle.getText("INBOX_MSG_FOR_NO_DATA"));
	} else {
		if (this.resetMessages === true){
			this.deleteMessage();
		}else{
			this.resetMessages = true;
		}
	}
};

/**
 * get binding length of the element which displays tasks on the current View
 */
sap.uiext.inbox.Inbox.prototype._getCurrentViewElementBindingLength = function(){
	var oCurrentViewElement = this._currentViewElement();
    var oCurrentViewElementBinding = oCurrentViewElement.getBinding('rows');
    return oCurrentViewElementBinding.iLength;
};


/**
 * select the row in the table to which the element belongs to
 * SId: element ID whose parent row has to be selected 
 */
sap.uiext.inbox.Inbox.prototype._selectParentRowforElement = function(sId){
	var iIndex = -1;
	var $target = jQuery.sap.byId(sId);
	var $row = $target.closest(".sapUiTableCtrl>tbody>tr");
	if ($row.length === 1) {
		iIndex = parseInt($row.attr("data-sap-ui-rowindex"), 10);
	}
	var oTable = this._getComponent('listViewTable');
	oTable.setSelectedIndex(iIndex);
};

sap.uiext.inbox.Inbox.prototype._handleTaskTitleLinkPress = function(oEvent){
	this.showBusyLoader();
	var that = this; 

	this._selectParentRowforElement(oEvent.getSource().getId());

	var oContext = oEvent.getSource().getBindingContext();
	var oModel = this.getCoreModel();
                 
	var aTaskExecutionURLs = [], aTaskExecIDs = [], aTaskExecTitles = [], aTaskExecSAPOrigins = [];

	aTaskExecIDs.push(oModel.getProperty("InstanceID", oContext));
	aTaskExecTitles.push(oModel.getProperty("TaskTitle", oContext));
	aTaskExecSAPOrigins.push(oModel.getProperty("SAP__Origin", oContext));

	if (this.getTaskExecutionURLCallBack != "" && this.getTaskExecutionURLCallBack != undefined && this.getTaskExecutionURLCallBack !== null){
		var taskUiURL = this.getTaskExecutionURLCallBack(aTaskExecIDs[0],aTaskExecSAPOrigins[0]);
		if(taskUiURL !== null && taskUiURL.replace(/\s/g, "").length > 0) {
			aTaskExecutionURLs.push(taskUiURL);
		}
	}else{
		aTaskExecutionURLs.push("");
	}

	var evt = oEvent.getParameter("windowEvent");
	if(!evt.ctrlKey && !(evt.button==1) && !evt.shiftKey && !this.bOpenTaskUIInNewTab){
	    this.populateTaskExecutionContent({
	    	aSelectedContexts: [oContext],
	        arrayURLs : aTaskExecutionURLs,
	        arrayIDs : aTaskExecIDs,
	        arrayTitles : aTaskExecTitles,
	        aTaskSAPOrigins : aTaskExecSAPOrigins
	    });
	    this.hideBusyLoader();
	}else{
		this.hideBusyLoader();
	    var windowURL = aTaskExecutionURLs[0];
	    if (windowURL!==null && windowURL.replace(/\s/g, "").length > 0) {
			var taskExecWindow = window.open(windowURL);
			if (taskExecWindow){
				taskExecWindow.focus();
			}
			oEvent.preventDefault();
	    }

	}
};

sap.uiext.inbox.Inbox.prototype._initFlagsByModel = function(){
	if (this.oModel instanceof sap.ui.model.json.JSONModel) {
		this.typeOfModel = "JSON";
		this.setHandleBindings(false);
	    this._resetFlags();
	} else if (this.oModel instanceof sap.ui.model.odata.ODataModel || this.oModel instanceof sap.ui.model.odata.v2.ODataModel) {
	    this.typeOfModel = "OData";
	    this.attachTaskAction(this, this.defaultActionHandler);
	    this.setHandleBindings(true);
	} else if (this.oModel instanceof sap.ui.model.xml.XMLModel) {
	    this.typeOfModel = "xml";
	    this.setHandleBindings(false);
	    this._resetFlags();
	} 
};

/**
 * Event Handler for Request Failed for the Model
 */
sap.uiext.inbox.Inbox.prototype._handleRequestFailed = function(oEvent){
	var oEventParams = oEvent.mParameters;
	if((oEventParams.message !== "Request aborted") && oEventParams.statusCode !== undefined){
		//var sErroMessageKey = (oEvent.mParameters.statusCode === 401) ? "INBOX_MSG_USER_NOT_AUTHORIZED" : "INBOX_MSG_NO_ODATA_SRVC";
		this.showMessage("error", this._oBundle.getText("INBOX_MSG_NO_ODATA_SRVC"));
	}

	this.hideBusyLoader();
};

sap.uiext.inbox.Inbox.prototype._applySortOnView = function(oSorter){
	var mEntitiesToElementsMeta = this.constants.mEntitiesToElements.taskMetadata;
	if(this.currentView === this.constants.tableView){
		this._applySortOnTableView(oSorter, mEntitiesToElementsMeta);
	}else if(this.currentView === this.constants.rowRepeaterView){
		this._applySortOnRowRepeaterView(oSorter, mEntitiesToElementsMeta);
	}
};

sap.uiext.inbox.Inbox.prototype._applySortOnTableView = function(oSorter, mEntitiesToElementsMeta){
	//TODO : check if this is a good way to create big objects?
	var mColumnsMap = mEntitiesToElementsMeta.sap_inbox_list.columnsMap;
	
	var oListView = this._getComponent('listViewTable');
	
	var aColumns = oListView.getColumns();
	for (var i = 0, l = aColumns.length; i < l; i++) {
		aColumns[i].setSorted(false);
	}

	if(oSorter){
		var oColumn, oColumnID;
		var sPath = oSorter.sPath;

		if(sPath.indexOf(this.constants.customAttributeNavigationParam)!==-1){
			oColumnID = sPath.replace(this.constants.customAttributeNavigationParam,"");
			oColumnID = oColumnID.replace(/^\//,"");
		}else{
			var oColumnID = mColumnsMap[sPath];
		}
		var oColumn = oColumnID ? this._getComponent(oColumnID) : undefined;
		if(oColumn){
			var sortOrder = oSorter.bDescending ? sap.ui.table.SortOrder.Descending : sap.ui.table.SortOrder.Ascending
			oColumn.setSortOrder(sortOrder);
			oColumn.setSorted(true);
		}
	}
};

sap.uiext.inbox.Inbox.prototype._applySortOnRowRepeaterView = function(oSorter, mEntitiesToElementsMeta){
	var mSorterMap = mEntitiesToElementsMeta.sap_inbox_stream.sorterMap;
	var oRowRepeaterSortCombobox = this._getComponent('sortByFilterComboBox');
	
	if(oSorter){
		var oColumn, oColumnID;
		var sPath = oSorter.sPath;

		var sSorterID = mSorterMap[sPath];
		if(sSorterID){
			oRowRepeaterSortCombobox.setSelectedItemId(this.getId()+'--'+sSorterID);
			this._updateRowRepeaterSortImage(oSorter.bDescending);
   			var sSorterID = this.constants.mRRSortMap[sSorterID];
   			var oRowRepeaterSorter = this._getComponent(sSorterID).getSorter();
   			if(oRowRepeaterSorter){
   				oRowRepeaterSorter.bDescending = oSorter.bDescending;
   			}
		}else{
			var oEmptyListItem = this._getComponent('li_empty');
			if(!oEmptyListItem)
				oEmptyListItem = new sap.ui.core.ListItem(this.getId() + '--' + "li_empty", {
					text : this._oBundle.getText("")
			});
			oRowRepeaterSortCombobox.insertItem(oEmptyListItem,0);
			oRowRepeaterSortCombobox.setSelectedItemId(this.getId() + '--' + "li_empty");
			var sortImage  = this._getComponent('sortImage');
			sortImage.setVisible(false);
		}
		
	}
};


sap.uiext.inbox.Inbox.prototype._updateRowRepeaterSortImage = function(bDescending){
	var sortImage  = this._getComponent('sortImage');
	sortImage.setVisible(true);
	if(bDescending){
		sortImage.setIcon(this.constants.sortDescImage);
		sortImage.setTooltip(this._oBundle.getText("INBOX_SORT_INDICATOR_DESC"));
	}else{
		sortImage.setIcon(this.constants.sortAscImage);
		sortImage.setTooltip(this._oBundle.getText("INBOX_SORT_INDICATOR_ASC"));
	}
};

sap.uiext.inbox.Inbox.prototype._getFirstColumnContentTemplate = function(){
	var that = this;
	var oFirstColHorLay = this._getComponent('firstColumnLayout');
	oFirstColHorLay = oFirstColHorLay || new sap.uiext.inbox.composite.InboxTaskTitleControl({
		
		 id : that.getId() + '--' + "firstColumnLayout",
		 categoryIconURI: {
				path: "InstanceID",					  
				formatter : function(sInstanceID) {
					if (sInstanceID !== null) {
						this.setTooltip(that._oBundle.getText(that.constants.taskCategoryToolTip["TASK"]));
						return that.constants.taskCategoryImages["TASK"];	
					}
				}
		 	}
		 });
	oFirstColHorLay.setTitleLink(this._createTaskLink());
	
	oFirstColHorLay.bindProperty("hasAttachments", "HasAttachments", function(value) {
		var bHasAttachment = (value != null) ? value : false;
		return bHasAttachment;
		
	});
	
	oFirstColHorLay.bindProperty("hasComments", "HasComments", function(value) {
		var bHasComment = (value != null) ? value : false;
		return bHasComment;
	});
	
	return oFirstColHorLay;
};

sap.uiext.inbox.Inbox.prototype._createTaskCategoryImage = function(){
	var that = this;
	var oCategoryImage = that._getComponent('taskCategoryImg');
	if(!oCategoryImage){
		oCategoryImage = new sap.ui.core.Icon({
				id : that.getId() + '--' + "taskCategoryImg",
				decorative : false,
				size : "15px", 
				enable : false
		}).addStyleClass("sapUiExtInboxMarginForTableColumnStyle");			//.addStyleClass("sapUiExtInboxMarginForTableColumnStyle");
	}
	
	if(this.clientUpdate){
		oCategoryImage.setSrc(that.constants.taskCategoryImages["TASK"]);
	}else{
		oCategoryImage.bindProperty("src", that.constants.taskDefinitionNavigationParam, function(taskDefinitionData){
			if(taskDefinitionData != null && taskDefinitionData !== ""){
				var oModel = that.getCoreModel();
				var oContext = this.getBindingContext();
				var categoryEntry = taskDefinitionData[0];
				var taskDefEntry = oModel.oData[categoryEntry];
				var categoryValue;
				if(taskDefEntry){
					categoryValue = taskDefEntry.Category;
					this.setVisible(true);
				}else{
					categoryValue = taskDefinitionData.Category;
					this.setVisible(true);
				}
				
				categoryValue=categoryValue.toUpperCase();
				
				if (categoryValue == "TASK" || categoryValue == "NOTIFICATION" || categoryValue == "TODO" || categoryValue == "ALERT") {
				   	this.setTooltip(that._oBundle.getText(that.constants.taskCategoryToolTip[categoryValue]));
					return that.constants.taskCategoryImages[categoryValue];
				}
			}
		return  that.constants.taskCategoryImage;
		}); 
	}
	
	return oCategoryImage;	
};

sap.uiext.inbox.Inbox.prototype._createTaskLink = function(){
	var that = this;
	var oTaskLink = new sap.uiext.inbox.InboxLink().addStyleClass("sapUiExtInboxTaskTitleLink");
	oTaskLink.addDelegate({
	      onAfterRendering : function() {
	          if (!this.getEnabled()) {
	              this.addStyleClass('sapUiExtInboxLnkDsbl');
	          }
	      }
	  });
	var taskTitleProperty = that._getCategoryMetadata().properties[0];
	oTaskLink.bindProperty("text", taskTitleProperty,function(value){
		if(this.getBindingContext() ===  undefined)
		   return undefined;
		else
			return value;
	});
	oTaskLink.bindProperty("overdue","CompletionDeadLine", function(value){
		return that._isOverDue(value);
	});		
	oTaskLink.bindProperty("tooltip", taskTitleProperty);
	oTaskLink.bindProperty("enabled", "Status", function(value) {
	    if (!that.getOpenCompletedTasks() && value === "COMPLETED") {
	      	this.addStyleClass("sapUiExtInboxLnkDsbl");
	      	return false;
	      }
	      this.removeStyleClass("sapUiExtInboxLnkDsbl");
	      return true;
	  });
	
	oTaskLink.attachPress(this, function(oEvent, that) { 
	  											that._handleTaskTitleLinkPress(oEvent);
	  										});
	
	return oTaskLink;
};


sap.uiext.inbox.Inbox.prototype._handleTaskCategoryVisibility = function(){
	//Handle visibility of category
	if(!this.showTaskCategory){
		var tableCategoryImage = this._getComponent('taskCategoryImg');
		if (tableCategoryImage) {
		tableCategoryImage.setVisible(false);}
		
	}
};

sap.uiext.inbox.Inbox.prototype._setCommentsVisibility = function(){
	 if(this.isCommentsEnabled){
		 	var oCommentsButton = this._getComponent("commentsSegBtn");
			//TODO: This needs to be changed to use 'SupportComments' from the service metadata.
		 	//oCommentsButton.setVisible(true);
		 	oCommentsButton.bindProperty("visible","SupportsComments", function(value) {
				if (value != null && value !== "") {
					return value;
				}
				return false;
			});
			
		 	oCommentsButton.attachPress(this, function(oEvent, that) {
				that._handleActionButtonToggleinRowRepeater(oEvent);
			});
	}
};

sap.uiext.inbox.Inbox.prototype._initTableView = function(){
	 var oTable = this._getComponent("listViewTable");
	 oTable.setModel(this.oModel);
	 return oTable;
};

sap.uiext.inbox.Inbox.prototype._initRowRepeaterView = function(){
	var oTasksRowRepeater = this._getComponent('tasksRowRepeater');
	oTasksRowRepeater.setModel(this.oModel);
	var oRowRepeaterTemplate = this._getComponent('rrMainMatrixLayout');
	return oTasksRowRepeater;
};

sap.uiext.inbox.Inbox.prototype._createCustomAttributes = function(aAttributes){
	if(this.isCustomAttributesEnabled){
	    if(aAttributes.length===1 && (this.currentView === this.constants.tableView)){
	        //getCustomAttribute Metadata
	    	//TODO : only if the view is Grid View
	    	if(!(this.oController instanceof sap.uiext.inbox.controller.InboxControllerAsync)){
	    		this._modifyListBindingForExpand(true,this.constants.customAttributeNavigationParam);
	    	}	    	
	        this._getCustomAttributeMetaData(aAttributes[0].getKey(),aAttributes[0].data("SAP__Origin"));
	    }else{
	    	if(!(this.oController instanceof sap.uiext.inbox.controller.InboxControllerAsync)){
	    		this._modifyListBindingForExpand(false,this.constants.customAttributeNavigationParam);
	    	}
	        //change to delete all columns other than the fixed..... 
	        this._deleteCustomAttributeColumns(null);
	    }
	}
};

sap.uiext.inbox.Inbox.prototype._isCustomAttribute = function(oColumn){
	if(oColumn){
		if(oColumn.data("ColumnType") == "CustomAttribute"){
			return true;
		}
	}
	return false;
}

sap.uiext.inbox.Inbox.prototype._selectInitialValueinDropDown = function(oPrimaryFilter){
	var oTasksDDBox = this._getComponent("filterComboBox2");
	var oPrimaryFilterValue = oPrimaryFilter? oPrimaryFilter.getFilter() : undefined ; 
	var sTaskItemIdtobeSelected = oPrimaryFilterValue? oPrimaryFilterValue.key : "li_openTasks";
	sTaskItemIdtobeSelected = this.getId()+ '--' + sTaskItemIdtobeSelected; 
	if(oTasksDDBox.getSelectedItemId() !== sTaskItemIdtobeSelected){
		oTasksDDBox.setSelectedItemId(sTaskItemIdtobeSelected);

    	var oSelectItem = sap.ui.getCore().byId(sTaskItemIdtobeSelected);
    	oTasksDDBox.fireChange({oSource: oTasksDDBox, newValue: oSelectItem.getText(), selectedItem: oSelectItem});
    }
};

sap.uiext.inbox.Inbox.prototype._addFilterToFilterMetadata = function(oFilter, aFiltersTobeApplied){
	if(jQuery.isArray(oFilter)){
		aFiltersTobeApplied = aFiltersTobeApplied.concat(oFilter);
	}else{
		aFiltersTobeApplied.push(oFilter);
	}
	return aFiltersTobeApplied;
};


sap.uiext.inbox.Inbox.prototype._selectFilterValuesinFacetFilterView = function(oSecondaryFilter, aFilters, appliedDropDownFilter){
	var attributesTobeSelected = oSecondaryFilter.getFilterUIKeys();
	
	var oFacet = sap.ui.getCore().byId(this.getId()+'--'+"filterFacet");
	
	var prioFilterList = sap.ui.getCore().byId(this.getId()+'--'+"INBOX_FILTER_PRIORITY");
	var statusFilterList = sap.ui.getCore().byId(this.getId()+'--'+"INBOX_FILTER_STATUS");
	var dateTimeFilterList = sap.ui.getCore().byId(this.getId()+'--'+"INBOX_FILTER_CREATION_DATE");
	var taskTypeFilterList = sap.ui.getCore().byId(this.getId()+'--'+"INBOX_FILTER_TASK_TYPE");
	var dueDateTimeFilterList = sap.ui.getCore().byId(this.getId()+'--'+"INBOX_FILTER_DUE_DATETIME");
	
	var aTaskInitialFilters = [];
	
	if(taskTypeFilterList && oFacet.indexOfList(taskTypeFilterList) !== -1 && attributesTobeSelected.TaskType && attributesTobeSelected.TaskType.length > 0){
    	taskTypeFilterList.data("initialFilterKeysToSelect",attributesTobeSelected.TaskType);
		//taskTypeFilterList.setSelectedKeys(attributesTobeSelected.TaskType);
	    if(aFilters.TaskType !== undefined && aFilters.TaskType.length > 0){
	    	aTaskInitialFilters.push(aFilters.TaskType);
        }
	}else{
		this.clearFiltersForTaskType();
	}
	if(prioFilterList && oFacet.indexOfList(prioFilterList) !== -1 && attributesTobeSelected.Priority && attributesTobeSelected.Priority.length > 0){
	    prioFilterList.setSelectedKeys(attributesTobeSelected.Priority);
	    if(aFilters.Priority !== undefined && aFilters.Priority.length > 0){
       	 aTaskInitialFilters.push(aFilters.Priority);
        }
	}else{
   	 this.clearFiltersForPriority();
    }
	
	if(statusFilterList && oFacet.indexOfList(statusFilterList) !== -1 && attributesTobeSelected.Status && attributesTobeSelected.Status.length > 0){
	    statusFilterList.setSelectedKeys(attributesTobeSelected.Status);
	    if(aFilters.Status !== undefined && aFilters.Status.length > 0 ){
       	 if ((appliedDropDownFilter.sPath === "Status")
       	            && (appliedDropDownFilter.sOperator === "NE")) {
       		 appliedDropDownFilter = undefined;
       		 delete this.filtersToApply.dropDownFilter;
       	 }
       	 aTaskInitialFilters.push(aFilters.Status);
        }
	}else{
    	this.clearFiltersForStatus();
    }
	
	if(dateTimeFilterList && oFacet.indexOfList(dateTimeFilterList) !== -1 && attributesTobeSelected.StartDate && attributesTobeSelected.StartDate.length > 0){
	    dateTimeFilterList.setSelectedKeys(attributesTobeSelected.StartDate);
	    if(aFilters.StartDate !== undefined){
       	 aTaskInitialFilters.push(aFilters.StartDate);
        }
	}else{
   	 this.clearFiltersForDateTime();
    }
	
	if(dueDateTimeFilterList && oFacet.indexOfList(dueDateTimeFilterList) !== -1 && attributesTobeSelected.DueDate && attributesTobeSelected.DueDate.length > 0){
	    dueDateTimeFilterList.setSelectedKeys(attributesTobeSelected.DueDate);
	    if(aFilters.DueDate !== undefined){
       	 aTaskInitialFilters.push(aFilters.DueDate);
        }
	}else{
   	 this.clearFiltersForDueDate();
    }
	
	var aFiltersTobeApplied = [];
	for ( var i=0; i < aTaskInitialFilters.length; i++) {
			var oFilter = aTaskInitialFilters[i];
			aFiltersTobeApplied = this._addFilterToFilterMetadata(oFilter, aFiltersTobeApplied);
	}
	
	if(appliedDropDownFilter){
		aFiltersTobeApplied = this._addFilterToFilterMetadata(appliedDropDownFilter, aFiltersTobeApplied);
		this.filtersToApply.dropDownFilter = appliedDropDownFilter;
	}
	return aFiltersTobeApplied;
};

sap.uiext.inbox.Inbox.prototype._setInitialFilterKeysforTaskType = function(taskTypeFilterList){
	if(taskTypeFilterList.getItems().length > 0 && taskTypeFilterList.data("initialFilterKeysToSelect") != null){
		taskTypeFilterList.setSelectedKeys(taskTypeFilterList.data("initialFilterKeysToSelect"));
		taskTypeFilterList.data(null);
		return true;
	} else {
		return false;
	}
};

sap.uiext.inbox.Inbox.prototype._isInitialFilterAppliedforTaskType = function(){
	//TODO: store facet class level
	var taskTypeFilterList = this._getComponent("INBOX_FILTER_TASK_TYPE");
	return taskTypeFilterList? ((taskTypeFilterList.data("initialFilterKeysToSelect") != null)? true : false) : false;
};

sap.uiext.inbox.Inbox.prototype._getTaskStatus= function(status,statusLabel){
	if(status || statusLabel){
		var bSupported= this.oTcmMetadata.serviceSupportsFilterOption;
		if(bSupported && statusLabel){
	   		return statusLabel;
	   	}
		
		if(status){
			var statusLabelKey = sap.uiext.inbox.InboxConstants.statusMap[status];
			if(statusLabelKey){
				return this._oBundle.getText(statusLabelKey);
			}
			
			return status;
		}
	}
	return "";	
};

sap.uiext.inbox.Inbox.prototype._manageVisibilityOfSettingsButton = function(settingsButton) {
	if(settingsButton != null) {
		var shouldBeVisible = false;
	
	if(this.getSubstitutionEnabled()) {
		shouldBeVisible = true;
		
	}
	 settingsButton.setVisible(shouldBeVisible);	
	} 
};

sap.uiext.inbox.Inbox.prototype._handleRowRepeaterPaginatorClick = function(oEvent) {
	var newPage = oEvent.getParameter("targetPage");
	var oldPage = oEvent.getParameter("srcPage");
	var oTasksRowRepeater = this._getComponent('tasksRowRepeater');
	if(oTasksRowRepeater){
		oTasksRowRepeater.gotoPage(newPage);
	}
};

sap.uiext.inbox.Inbox.prototype._getCustomAttributeContentforRowRepeater = function(oCustomAttrToggleButton, rowNumber, sSelectedTaskDefinition, sSelectedTaskInstance, sSapOrigin){
	var that = this;
	if (this.currentView === "sap_inbox_stream") {
		if (oCustomAttrToggleButton) {
			var sSelectedTaskDefinition = that.getModel().getProperty("TaskDefinitionID",oCustomAttrToggleButton.getParent().getBindingContext());
			var sSelectedTaskInstance = that.getModel().getProperty("InstanceID",oCustomAttrToggleButton.getParent().getBindingContext()); 
			var sSapOrigin = that.getModel().getProperty("SAP__Origin",oCustomAttrToggleButton.getParent().getBindingContext());
		}
		
		var constants = that.constants;
		var oCustomAttributeValuesMap = constants.oTaskInstanceCustomAttributeValuesMap;
		var oCustomAttributesValues = oCustomAttributeValuesMap[sSelectedTaskInstance];
		var oCustomAttributeMetaDataArrayMap = constants.oTaskDefinitionCustomAttributesMap;
		var oCustomAttributeMetaDataArray = oCustomAttributeMetaDataArrayMap[sSelectedTaskDefinition];
		
		//optimize the two if statements
		if ((oCustomAttributesValues && jQuery.isEmptyObject(oCustomAttributesValues)) || (oCustomAttributeMetaDataArray && oCustomAttributeMetaDataArray.length == 0)) {
			this._addActionContentinRowRepeater(rowNumber, "customAttributes", this._createNoDataLabel(this._oBundle.getText("INBOX_MSG_NO_TASK_DETAILS")));
			return;
		}
		
		if (!jQuery.isEmptyObject(oCustomAttributesValues) && oCustomAttributeMetaDataArray && oCustomAttributeMetaDataArray.length > 0) {
			that._displayCustomAttributes(sSelectedTaskDefinition, sSelectedTaskInstance, rowNumber);
		} else if (oCustomAttributesValues && !oCustomAttributeMetaDataArray) {
			that._getCustomAttributeMetaData(sSelectedTaskDefinition,sSapOrigin,rowNumber,sSelectedTaskInstance);
		} else if (!oCustomAttributesValues && oCustomAttributeMetaDataArray) {
			that._getCustomAttributeData(sSelectedTaskInstance,sSapOrigin,rowNumber,sSelectedTaskDefinition);
		} else {
			if (that.bUseBatch ){
				var sPathForCustomAttributeMetadata, sPathForCustomAttributeData;
				var oTaskDefinitionTCMMetadata = constants.TaskDefinitionCollection;
				var oTaskCollectionTCMMetadata = constants.TaskCollection;
				
				sPathForCustomAttributeMetadata = constants.forwardSlash
					+ oTaskDefinitionTCMMetadata.entityName 
						+ "(" + oTaskDefinitionTCMMetadata.properties.taskDefnID + "='" + sSelectedTaskDefinition + "'," 
							+ constants.sapOrigin + "='" + sSapOrigin + "')"
								+ constants.forwardSlash + oTaskDefinitionTCMMetadata.navParam.customAttrDefn;
				
				sPathForCustomAttributeData = constants.forwardSlash
					+ oTaskCollectionTCMMetadata.entityName 
						+ "(" + oTaskCollectionTCMMetadata.properties.instanceID + "='"	+ sSelectedTaskInstance + "',"
							+ constants.sapOrigin + "='" + sSapOrigin + "')" 
								+ constants.forwardSlash + oTaskCollectionTCMMetadata.navParam.customAttrValues;
				
				var fnSuccess = jQuery.proxy(function (data, response) {
					this._processCustomAtrributesBatchResponse(data, response, sSelectedTaskDefinition, sSelectedTaskInstance, rowNumber);
				}, that);
				
				that.oDataManager.fireBatchRequest({
					aPaths : [sPathForCustomAttributeMetadata, sPathForCustomAttributeData],
			    	sMethod : "GET",
			    	sBatchGroupId : "customAttributesBatch",
			    	numberOfRequests : 2,
			    	fnSuccess : fnSuccess,
			    	fnError : function(error) {
						that.showMessage("error", that._oBundle.getText("INBOX_MSG_FETCH_CUSTOM_ATTRIBUTES_FAILS"));
					}
			    });
				
			} else {
				that._getCustomAttributeMetaData(sSelectedTaskDefinition,sSapOrigin,rowNumber,sSelectedTaskInstance);
				that._getCustomAttributeData(sSelectedTaskInstance,sSapOrigin,rowNumber,sSelectedTaskDefinition);
			}
		}
	} 
};

sap.uiext.inbox.Inbox.prototype._processCustomAtrributesBatchResponse = function(data, response, sDefinitionID, sTaskID, rowNumber) {
	
	var batchResponses = data.__batchResponses;
	var oCustomAttributeMetaDataArray = [];
	var oCustomAttributesValues = {};
	
	//TODO: can be pulled out to the util (used in two places)
	var aCustomAttributeDefinitionArray = batchResponses[0].data.results;
	for(var i=0;i<aCustomAttributeDefinitionArray.length;i++){
		var oCustomAttributeDefn = {};
		oCustomAttributeDefn.Name =  aCustomAttributeDefinitionArray[i].Name;
        oCustomAttributeDefn.Type =  aCustomAttributeDefinitionArray[i].Type;
        oCustomAttributeDefn.Label = aCustomAttributeDefinitionArray[i].Label;
        oCustomAttributeMetaDataArray.push(oCustomAttributeDefn);
	}
	this.constants.oTaskDefinitionCustomAttributesMap[sDefinitionID] = oCustomAttributeMetaDataArray;
	
	var aCustomAttributeData = batchResponses[1].data.results;
	for(var i=0;i<aCustomAttributeData.length;i++) {
		oCustomAttributesValues[aCustomAttributeData[i].Name] = aCustomAttributeData[i].Value;
	}
	this.constants.oTaskInstanceCustomAttributeValuesMap[sTaskID] = oCustomAttributesValues;
	
	this._displayCustomAttributes(sDefinitionID, sTaskID, rowNumber);
};

sap.uiext.inbox.Inbox.prototype._getCommentsContentforRowRepeater = function(oCommentsToggleButton, rowNumber){
	//create Content to be displayed
	var oModel = this.getModel();
	var oContext = oCommentsToggleButton.getParent().getBindingContext();
	var sSelectedTaskInstance = oModel.getProperty("InstanceID",oContext); 
	var sSapOrigin = oModel.getProperty("SAP__Origin",oContext);
	var sStatus = oModel.getProperty("Status",oContext).toUpperCase();
	var bCompleted = false;
	if(sStatus === "COMPLETED")	{
		var bCompleted = true;	
	}	
	var oInbxTComm = this._getComponent("comments-"+rowNumber);
	if(!oInbxTComm){
		var oInbxTComm = new sap.uiext.inbox.composite.InboxTaskComments(this.getId()+"--"+"comments-"+rowNumber, {
			showFeeder : !bCompleted
		});
		oInbxTComm.attachCommentSubmit(this, this.handleCommentAdded);
		if(this.loggedInUserName){
			oInbxTComm.setFeederThumbnailSrc(this.inboxUtils.getUserMediaResourceURL(this.bpmSvcUrl, sSapOrigin, this.loggedInUserName));
		}
	}
	oInbxTComm.data("instanceID",sSelectedTaskInstance);
	oInbxTComm.data("SapOrigin",sSapOrigin);
	oInbxTComm.setShowHeader(false);
	oInbxTComm.showBusy(true);
	
	var oCommentsOuterLayout = new sap.ui.commons.layout.MatrixLayout({
	    layoutFixed : true,
	    width : "100%"
		});
	var oCellOuter = new sap.ui.commons.layout.MatrixLayoutCell();
	oCellOuter.addContent(oInbxTComm);
	oCellOuter.addStyleClass('sapUIExtInboxCommentsBorder');
	oCommentsOuterLayout.createRow(oCellOuter);
	this._addActionContentinRowRepeater(rowNumber, "comments", oCommentsOuterLayout);
	
	this._getComments(sSelectedTaskInstance, sSapOrigin, rowNumber);
};

sap.uiext.inbox.Inbox.prototype._handleActionButtonToggleinRowRepeater = function(oEvent){
	//USE oEvent.getParameters().selectedButtonId to perform action according, as it has info of which icon of which row.
	var buttonClicked = oEvent.getSource(), buttonClickedID = oEvent.getParameters().id;
	
	var tasksRowRepString = 'tasksRowRepeater-';
	var indexOfRowNumber = buttonClickedID.indexOf(tasksRowRepString) + tasksRowRepString.length;
	var rowNumber = buttonClickedID.substring(indexOfRowNumber, buttonClickedID.length);
	
	var sActionButtonName = this._removeParentID(buttonClickedID).replace("-" + this.getId()+"--"+tasksRowRepString + rowNumber, "");
	
	if(buttonClicked.getPressed()){
		
		// deselecting other pressed action button if any
		this.inboxUtils.deSelectOtherActionButtonsinStreamView(buttonClicked);
		
		// setting hide tooltip for clicked button
		buttonClicked.setTooltip(this._oBundle.getText(this.constants.mTooltipforActionButtonsinRR.hide[sActionButtonName]));
		
		var content, action; 
		if(sActionButtonName === "customAttributesSegBtn"){
			buttonClicked.setIcon('');
			buttonClicked.setIcon(this.constants.iconPool.getIconURI("collapse"));
			content = this._getCustomAttributeContentforRowRepeater(buttonClicked, rowNumber);
			action = "customAttributes";
		}else if(sActionButtonName === "commentsSegBtn"){
			content = this._getCommentsContentforRowRepeater(buttonClicked, rowNumber);
		}else if (sActionButtonName === "attachmentsSegBtn"){
			this._getAttachments(buttonClicked, rowNumber);
		} 
		
		this.data("previousSelection",buttonClickedID);
	}else{
		//Show/Hide tooltip
		if(sActionButtonName === "customAttributesSegBtn"){
			buttonClicked.setIcon('');
			buttonClicked.setIcon(this.constants.iconPool.getIconURI("expand"));
		}
		buttonClicked.setTooltip(this._oBundle.getText(this.constants.mTooltipforActionButtonsinRR.show[sActionButtonName]));
		this._removeActionContentinRowRepeater(rowNumber);
	}
};

sap.uiext.inbox.Inbox.prototype.handleCommentAdded = function(oEvent, inBox){
	var feeder = oEvent.getSource();
	var oModel=  inBox.getCoreModel();
	var instanceID = decodeURIComponent(this.data("instanceID"));
	var sCommentTxt = oEvent.getParameter('text');
	var sapOrigin = this.data("SapOrigin");
	
	var oAddCommentEntry = {};
	oAddCommentEntry.InstanceID = instanceID;
	oAddCommentEntry.SAP__Origin = sapOrigin;
	oAddCommentEntry.Text = sCommentTxt;
	
	inBox.oDataManager.callFunctionImport(inBox.constants.addCommentFunctionImport, {
		method : "POST",
		urlParameters : oAddCommentEntry,
		success : function(data, request) {
			var sCommentCreatedByName = data.CreatedByName;
			var sCommentCreatedBy = data.CreatedBy;
			var sCommentSAPOrigin = data.SAP__Origin;
			var sCommentCreatedByUserName = inBox.loggedInUserName;
			sCommentCreatedByName? feeder.setFeederSender(sCommentCreatedByName) : feeder.setFeederSender(""); 
		
			var oNewComment = new sap.uiext.inbox.composite.InboxComment(feeder.getId()+'-new-'+ feeder.getComments().length, {
				text: data.Text,
				timestamp: inBox.tooltipFormatForDateTime(data.CreatedAt),
				createdBy: sCommentCreatedByUserName,
				sapOrigin: sCommentSAPOrigin,
				sender: sCommentCreatedByName,
				thumbnailSrc: inBox.inboxUtils.getUserMediaResourceURL(inBox.bpmSvcUrl, sCommentSAPOrigin, sCommentCreatedBy)
			});
			feeder.addComment(oNewComment);
			inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_COMMENT_ADD_SUCCESS"));
		},
		error : function(error) {
			//TODO: use enums for messageType.
			inBox.showMessage("error", inBox._oBundle.getText("INBOX_MSG_COMMENT_ADD_ERROR"));
		}
	});

};


sap.uiext.inbox.Inbox.prototype._getComments = function(sTaskInstanceID,sSapOriginID, rowNumber){
	var constants = this.constants;
	var that = this;
	var oTaskCollectionTCMMetadata = constants.TaskCollection;
	
	var sURIPart = constants.forwardSlash 
								+ oTaskCollectionTCMMetadata.entityName 
										+ "(" 
											+ oTaskCollectionTCMMetadata.properties.instanceID
													+ "='"
															+ sTaskInstanceID + 
																"',"
																	+ constants.sapOrigin 
																		+ "='" 
																			+ sSapOriginID 
																					+ "')" 
																						+ constants.forwardSlash
																							+ oTaskCollectionTCMMetadata.navParam.comments;
    
		var sRequestURI = this.bpmSvcUrl + sURIPart;
		var oModel = this.getCoreModel(), aComments = [];
		
	    var oRequestOptions = {
	        async:true,
	        requestUri : sRequestURI,
	        method : "GET",
	        headers : {
	            Accept : constants.acceptHeaderforJSON,
	            "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
	        }
	    };
    
	    OData.request(oRequestOptions, function(data, request) {
	    	aComments = data.results;
	    	if(aComments){
	    		that._displayComments(aComments, rowNumber);
	    	}
	    }, function(error) {
	    	var oInbxTComm = that._getComponent("comments-"+rowNumber);
	    	oInbxTComm.showBusy(false);
	    	this.showMessage("error", this._oBundle.getText("INBOX_MSG_FETCH_COMMENTS_FAILS"));
	    });
};

sap.uiext.inbox.Inbox.prototype._displayComments = function(aComments, rowNumber){
	var oCommentsModel = new sap.ui.model.json.JSONModel();
	oCommentsModel.setData(aComments);
	
	var oInbxTComm = this._getComponent("comments-"+rowNumber);
	oInbxTComm.setModel(oCommentsModel);
	var oCommentTemplate = new sap.uiext.inbox.composite.InboxComment({
		sender: "{CreatedByName}",
		text: "{Text}",
		createdBy:"{CreatedBy}",
		sapOrigin:"{SAP__Origin}"
	});
	sap.uiext.inbox.composite.InboxComment.bpmSvcUrl = this.bpmSvcUrl;
	oCommentTemplate.bindProperty("timestamp","CreatedAt",this.tooltipFormatForDateTime);
	oInbxTComm.showBusy(false);
	oInbxTComm.setShowHeader(true);
	oInbxTComm.bindAggregation("comments",{path:"/",template: oCommentTemplate});
	
};

sap.uiext.inbox.Inbox.prototype._removeActionContentinRowRepeater = function(rowNumber){
	//Implementation seems a little strange : recheck.
	var sTaskDetailVLayoutId = this.getId() + '--' + 'rrMainMatrixLayout' + '-' + this.getId() + '--' + 'tasksRowRepeater-';
	var oRRTaskDetailContent = sap.ui.getCore().byId(sTaskDetailVLayoutId + rowNumber);

	if(oRRTaskDetailContent){
		var sLastRowMatLayoutID = this.getId() + '--' + 'lastRowOfRowRepeater-' + rowNumber;
		var oLastRowOfRowRepeater = sap.ui.getCore().byId(sLastRowMatLayoutID);
		if(oLastRowOfRowRepeater){
			var sLastRowCellID = this.getId() + '--' + 'lastRowCell-'+ rowNumber;
			var oLastRowCell = sap.ui.getCore().byId(sLastRowCellID);
			if(oLastRowCell){
				oLastRowCell.removeAllContent();
			}
			oRRTaskDetailContent.removeRow(sLastRowMatLayoutID);
		}
	}
	return oRRTaskDetailContent;
};

sap.uiext.inbox.Inbox.prototype._addActionContentinRowRepeater = function(rowNumber, action, content){
	//TODO: adding and removing method implementation doesnt look so good , creating the same objects again, needs a relook. 
	var oRRTaskDetailContent = this._removeActionContentinRowRepeater(rowNumber);
	if(oRRTaskDetailContent){
		var sLastRowRepMatLayoutID = this.getId() + '--' + 'lastRowOfRowRepeater-' + rowNumber;
		var oLastRowOfRowRepeater = sap.ui.getCore().byId(sLastRowRepMatLayoutID);
		if(!oLastRowOfRowRepeater){
			oLastRowOfRowRepeater = new sap.ui.commons.layout.MatrixLayoutRow({
				id : sLastRowRepMatLayoutID
			});
		}
		var sLastRowCellID = this.getId() + '--' + 'lastRowCell-'+ rowNumber;
		var oLastRowCell = sap.ui.getCore().byId(sLastRowCellID);
		if(!oLastRowCell){
			oLastRowCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : sLastRowCellID,
				vAlign: sap.ui.commons.layout.VAlign.Middle,
				colSpan : 2
			});
		}
		oLastRowCell.addStyleClass('sapUIExtInboxLastRowPadding'); // setting the right padding to cell
		oLastRowCell.addContent(content); 
		oLastRowOfRowRepeater.addCell(oLastRowCell);
		oRRTaskDetailContent.addRow(oLastRowOfRowRepeater);
	}
};

sap.uiext.inbox.Inbox.prototype._searchText= function(sText,sSearchText){
	return sText.toLowerCase().indexOf(sSearchText.toLowerCase()) >= 0 ? true : false;
};

sap.uiext.inbox.Inbox.prototype._getValuePresent= function(oData,oNavigation,sNavigationPath,sSearchText){
	var sNavigation,oNavigationEntry,oNavigationEntryInModel;
	if(!oNavigation){
		return false;
	}
	if(oNavigation.__list instanceof Array){
		oNavigationEntry= oNavigation.__list[0];
	}
	else{
		oNavigationEntry= oNavigation.__ref;
	}
	oNavigationEntryInModel= oData[oNavigationEntry];
	if(oNavigationEntry){
		var sNavigationText= oNavigationEntryInModel ? oNavigationEntryInModel[sNavigationPath] : ""; 
		if(sNavigationText){
		
			return this._searchText(sNavigationText, sSearchText);
		}
	}
	return false;
};

sap.uiext.inbox.Inbox.prototype._searchUsers= function(oSearchInput){
	var that = this;
	var oFunctionImport = this.oTCMModel.getFunctionImportHandler();
	var dynamicId = that.getId() + '--';
	var oTable = sap.ui.getCore().byId(dynamicId + "userTable"); 
	oFunctionImport.setServiceURL(this.bpmSvcUrl);
	oFunctionImport.setHeaders({
        Accept : this.constants.acceptHeaderforJSON,
        "x-csrf-token" : this.oModel.oHeaders["x-csrf-token"]
	});
	
	var sSearchTerm = oSearchInput.sSearchTerm;
	var iMaxResults =  oSearchInput.iMaxResults;
	var sSAPOrigin = oSearchInput.sSAPOrigin;
	var oResultData;
	
	this.oPendingSearchRequest = oFunctionImport.callSearchUsers({
		SearchPattern: jQuery.sap.encodeURL(sSearchTerm), MaxResults : iMaxResults, SAP__Origin : sSAPOrigin}, 
			function(oData, response){
					oResultData =  oData;
					that.displaySearchResults(oResultData, iMaxResults, oTable);
		 			oTable.setBusy(false);
		 			that.oPendingSearchRequest = undefined;
				}, function(error) {
					oTable.setBusy(true);
				 	if(error.response !== undefined) {
				 		that.showMessage("error", that._oBundle.getText("INBOX_MSG_NO_USER_FOUND", [sSearchTerm]));
				 		oTable.setBusy(false);
				 	}
					that.oPendingSearchRequest = undefined;
			    });
	
};
sap.uiext.inbox.Inbox.prototype.displaySearchResults = function(oResultData, iMaxResults, oTable) {
	
	if(oResultData){
			var oModel = new sap.ui.model.json.JSONModel();
		    oModel.setData(oResultData);
		    oTable.clearSelection();
		    oTable.setModel(oModel);
			oTable.bindRows("/results");
		
	if(oResultData.results.length > 0){ 
		oTable.setSelectedIndex(0);
		if(oResultData.results.length === iMaxResults){
			this.showMessage("warning", this._oBundle.getText("INBOX_TOP_MAX_USER", [iMaxResults]));
		}
	}else if(oResultData.results.length === 0)
	{
		this.showMessage("error", this._oBundle.getText("INBOX_MSG_FOR_NO_DATA"));
	}
 }
	
}

sap.uiext.inbox.Inbox.prototype._handleForwardButtonVisibilityOnRowSelection = function(aSelectedSAPOrigin, oSupportsAction){
	var forwardButton = this._getComponent('forwardActionButton');
	var bCompletedTasksSelected = this._isCompletedTasksSelected();
	//if (this.isForwardActionEnabled && !bCompletedTasksSelected && !jQuery.isEmptyObject(oSupportsAction.aSupportsForward) && oSupportsAction.aSupportsForward.indexOf(false) === -1 ) { 
	if (this.isForwardActionEnabled && !bCompletedTasksSelected && !jQuery.isEmptyObject(oSupportsAction.aSupportsForward) && jQuery.inArray(false, oSupportsAction.aSupportsForward) === -1 ) {
		forwardButton.setEnabled(true).data("SAP__Origin",aSelectedSAPOrigin);
	}else {
		forwardButton.setEnabled(false);
	} 
};

sap.uiext.inbox.Inbox.prototype.setConfiguration = function(oConfiguration){
	this.oConfiguration = oConfiguration;
};

sap.uiext.inbox.Inbox.prototype._handleSearchUsersClickforForward = function(oEvent){
	var oForwardActionSource = oEvent.oParentSource;
	var sSAPOrigin = oForwardActionSource.data("SAP__Origin");
	if(!sSAPOrigin){
		var oContext = oForwardActionSource.getBindingContext();
		sSAPOrigin = this.getCoreModel().getProperty("SAP__Origin", oContext);
	}
	if ( typeof(sSAPOrigin) === "object" && sSAPOrigin.length > 1) {
		sSAPOrigin = sSAPOrigin[0];
	}
	
	var iMaxResults = this.oConfiguration ? this.oConfiguration.getSearchUersMaxLimit() : 100;
	
	if(this.oPendingSearchRequest !== undefined) {
		this.oPendingSearchRequest.abort();
	}
	
	return this._searchUsers({sSearchTerm: jQuery.trim(this._getComponent('oSearch').getValue()),
							iMaxResults:iMaxResults,
								sSAPOrigin: sSAPOrigin});
};

sap.uiext.inbox.Inbox.prototype._bindTaskActionsProperties = function(oTaskActionObject, sProperty){
    oTaskActionObject.setVisible(true);
    oTaskActionObject.bindProperty("enabled",sProperty);
};

sap.uiext.inbox.Inbox.prototype._bindTaskActions = function(oEvent){
	var claimButton = this._getComponent('claimActionButton');
    var releaseButton = this._getComponent('releaseActionButton');
    var completeButton = this._getComponent('openActionButton');
    var forwardButton = this._getComponent('forwardActionButton');
    var claimLink = this._getComponent('rrViewClaimAction');
    var releaseLink = this._getComponent('rrViewReleaseAction');
    var forwardLink = this._getComponent('rrViewForwardAction');
    
    if(this.typeOfModel === "OData"){
    	var sTaskEntity = this.constants.ENTITY_NAME_TASK_COLLECTION;
    	
    	if(this.oTcmMetadata._isPropertyAvailable(sTaskEntity, "SupportsClaim")){
    		this._bindTaskActionsProperties(claimButton, "SupportsClaim");
    		this._bindTaskActionsProperties(claimLink, "SupportsClaim");
		}
    	if(this.oTcmMetadata._isPropertyAvailable(sTaskEntity, "SupportsRelease")){
    		this._bindTaskActionsProperties(releaseButton, "SupportsRelease");
    		this._bindTaskActionsProperties(releaseLink, "SupportsRelease");
    		this._setVisibility('dotSeparator', true);
    	}
    	if(this.oTcmMetadata._isPropertyAvailable(sTaskEntity, "SupportsForward") && this.isForwardActionEnabled){
    		this._bindTaskActionsProperties(forwardButton, "SupportsForward");
    		this._bindTaskActionsProperties(forwardLink, "SupportsForward");
    		this._setVisibility('dotSeparator2', true);
    	} else if (!this.isForwardActionEnabled) {
    		var oActionLinksLayout = this._getComponent("taskActionMatrixLayout");
    		var oActionLinksRow = oActionLinksLayout.getRows()[0];
    		var oDotSeparatorCell = oActionLinksRow.getCells()[3];
    		var oForwardActionCell = oActionLinksRow.getCells()[4];
    		oActionLinksRow.removeCell(oDotSeparatorCell);
    		oActionLinksRow.removeCell(oForwardActionCell);    		
    		
    	}
    } else { // for Models other than OData
    	this.showAllActions();
    	claimLink.bindProperty("enabled","SupportsClaim");
        releaseLink.bindProperty("enabled","SupportsRelease");
        if(this.isForwardActionEnabled){
        	forwardLink.bindProperty("enabled","SupportsForward");
        }
    }
    
};

sap.uiext.inbox.Inbox.prototype._refreshLocal = function(aCompletedTaskContexts, changeContextValues, bFilter){
    if(this.currentView === this.constants.tableView){
    	this._refreshLocalTableView(aCompletedTaskContexts, changeContextValues, bFilter);
    }else{
    	this._refreshLocalRowRepeaterView(aCompletedTaskContexts, changeContextValues, bFilter);
    }
    var parentEvent = new sap.ui.base.Event();
    parentEvent.mParameters = {url:'/TaskCollection'};
    this._handleRequestCompleted(parentEvent);
};

sap.uiext.inbox.Inbox.prototype._refreshLocalTableView = function(aCompletedTaskContexts, changeContextValues, bFilter){
	var oCurrentViewElement = this._currentViewElement();
    var oModel = oCurrentViewElement.getModel();
    var aIndexes = this._getTableIndicesByContext(aCompletedTaskContexts,oCurrentViewElement), that = this;
    if(aCompletedTaskContexts && aCompletedTaskContexts.length > 0){
	    jQuery.each(aCompletedTaskContexts, function(i, oContext) {
	    	that._deleteTaskEntry(oContext, oModel, aIndexes[i], oCurrentViewElement, bFilter);
	    });
	    oCurrentViewElement.rerender();
    }
    if(changeContextValues){
    	this._changeTaskData(changeContextValues,oModel,oCurrentViewElement);
    	/*this._changeTaskData(changeContextValues,oModel,oCurrentViewElement);
          var oModelData = oModel.oData;
          jQuery.each(changeContextValues, function(i, oContextMetaData) {
            var oContext = oContextMetaData.context;
            var oKeys = oContextMetaData.keys;
            var sContextPath = oContext.getPath().substr(1);
            var oEntry = oModelData[sContextPath];
            oCurrentViewElement.rerender();
            jQuery.each(oKeys, function(i, oKeyValue) {
                  oEntry[oKeyValue.key] = oKeyValue.value;
             });
        });*/
    }
};

sap.uiext.inbox.Inbox.prototype._refreshLocalRowRepeaterView = function(aCompletedTaskContexts, changeContextValues, bFilter){
	var oCurrentViewElement = this._currentViewElement();
    var oModel = oCurrentViewElement.getModel();
	if(aCompletedTaskContexts && aCompletedTaskContexts.length > 0){
        var iIndex = oCurrentViewElement.indexOfRow(aCompletedTaskContexts[0].orow);
        if(iIndex > -1){
        	this._deleteTaskEntry(aCompletedTaskContexts[0].context, oModel, iIndex, oCurrentViewElement, bFilter);
        	oCurrentViewElement.updateRows(false);
        }
	}
    if(changeContextValues){
    	  this._changeTaskData(changeContextValues,oModel,oCurrentViewElement);
          /*var oModelData = oModel.oData;
          jQuery.each(changeContextValues, function(i, oContextMetaData) {
            var oContext = oContextMetaData.context;
            var oKeys = oContextMetaData.keys;
            var sContextPath = oContext.getPath().substr(1);
            var oEntry = oModelData[sContextPath];
            jQuery.each(oKeys, function(i, oKeyValue) {
                  oEntry[oKeyValue.key] = oKeyValue.value;
                  if(oEntry.Status === 'RESERVED'){
        			  oEntry.SupportsClaim = false;
        			  oEntry.SupportsRelease = true;
        		  }else if (oEntry.Status === 'READY'){
        			  oEntry.SupportsClaim = true;
        			  oEntry.SupportsRelease = false;
        		  }
             });
            oCurrentViewElement.updateRows(false);
        });*/
    }
};

sap.uiext.inbox.Inbox.prototype._deleteTaskEntry = function(oContext, oFromModel, iIndexinElementBinding, oFromElement, bFilter){
	if(!bFilter){
		oFromModel.deleteCreatedEntry(oContext);
	}
	var oFromElementBinding = oFromElement.mBindingInfos['rows'].binding;
	if(oFromElementBinding){
		//oFromElementBinding.aKeys.splice(oFromElementBinding.aKeys.indexOf(oContext.getPath().substr(1)),1)
		oFromElementBinding.aKeys.splice(jQuery.inArray(oContext.getPath().substr(1), oFromElementBinding.aKeys), 1);
		oFromElementBinding.iLength = oFromElementBinding.iLength - 1;
	}
};

sap.uiext.inbox.Inbox.prototype._changeTaskData = function(changeContextValues, oModel, oCurrentViewElement){
    var oModelData = oModel.oData, that = this;
    jQuery.each(changeContextValues, function(i, oContextMetaData) {
      var oContext = oContextMetaData.context;
      var oKeys = oContextMetaData.keys;
      var sContextPath = oContext.getPath().substr(1);
      var oEntry = oModelData[sContextPath];
      if(that._currentView() === that.constants.tableView){
    	  oCurrentViewElement.rerender();
      }
      jQuery.each(oKeys, function(i, oKeyValue) {
            oEntry[oKeyValue.key] = oKeyValue.value;
            if(oEntry.Status === 'RESERVED'){
  			  oEntry.SupportsClaim = false;
  			  oEntry.SupportsRelease = true;
  		  }else if (oEntry.Status === 'READY'){
  			  oEntry.SupportsClaim = true;
  			  oEntry.SupportsRelease = false;
  		  }
       });
      if(that._currentView() === that.constants.rowRepeaterView){
    	  oCurrentViewElement.updateRows(false);
      }
  });
};

sap.uiext.inbox.Inbox.prototype._getAppliedStatusFilterValues = function(changeContextValues, oModel, oCurrentViewElement){
	var oCurrentViewElement = this._currentViewElement(), currentViewElementBinding = this._currentViewElement().getBinding('rows');
	var aCurrentViewElemBindingFilters = currentViewElementBinding.aFilters.concat(currentViewElementBinding.aApplicationFilters);
	if(currentViewElementBinding && aCurrentViewElemBindingFilters && aCurrentViewElemBindingFilters.length > 0){
        var sStatusFilterParam = [];
          if(this.inboxUtils._hasFilter(aCurrentViewElemBindingFilters, 'Status', 'EQ', 'READY')){
          	sStatusFilterParam.push("READY");
          }
          if(this.inboxUtils._hasFilter(aCurrentViewElemBindingFilters, 'Status', 'EQ', 'RESERVED')){
          	sStatusFilterParam.push("RESERVED");
          }
          if(this.inboxUtils._hasFilter(aCurrentViewElemBindingFilters, 'Status', 'EQ', 'IN_PROGRESS')){
          	sStatusFilterParam.push("IN_PROGRESS");
          }
          return sStatusFilterParam;
    }
};

sap.uiext.inbox.Inbox.prototype._handleErrorOnBatchRequests = function(oError, sAction, iTotalNumberOfRequests){
	this.hideBusyLoader();
    this.showMessage("error", this._oBundle.getText("INBOX_MSG_ACTION_FAILED_MULTIPLE_TASKS", [sAction, iTotalNumberOfRequests]));
};

sap.uiext.inbox.Inbox.prototype._handleErrorOnActionFailed = function(oError, sAction, sTaskTitle){
	this.hideBusyLoader();
    this.showMessage("error", this._oBundle.getText("INBOX_MSG_ACTION_FAILED", [sAction, sTaskTitle]));
};

sap.uiext.inbox.Inbox.prototype.storeFilterState = function(sKey) {
	var that = this;
	var aFilterKeysMap = this.bShowNoDueDateFilter ? this.constants.filterKeysMetaMapWithNoDueDate : this.constants.filterKeysMetaMap;
	var aKeys = aFilterKeysMap[sKey];
	
	jQuery.each(aKeys, function(i, sKeyValue) {
		if ( that.filtersToApply[sKeyValue] != undefined){
			var oFilterObject = that.filtersToApply[sKeyValue];
			if (that.filterState[sKey] === undefined){
				that.filterState[sKey] = {};
				that.filterState[sKey].filters = {};				
			}
			that.filterState[sKey].filters[sKeyValue] = oFilterObject;
		}
	});
	 
};

sap.uiext.inbox.Inbox.prototype.retrieveFilterState = function( sKey) {
	var that = this;
	if (that.filterState[sKey]){
		var filterStateFilters = that.filterState[sKey].filters;
		jQuery.each(filterStateFilters, function(sKey, oValue) {
			that.filtersToApply[sKey] = oValue;
			delete filterStateFilters[sKey];
		});
		delete that.filterState[sKey];
	}
};

sap.uiext.inbox.Inbox.prototype._toggleCustomAttributesVisibilityActionEvent= function(oEvent,oInbox){
	var oButtonClicked = oEvent.getSource();
	var bPressed = oButtonClicked.getPressed();
	oInbox._toggleCustomAttributesIcon(oButtonClicked, bPressed);
	oButtonClicked.setTooltip(oInbox._oBundle.getText(bPressed ? "INBOX_HIDE_ALL_CUSTOM_ATTRIBUTES" : "INBOX_SHOW_ALL_CUSTOM_ATTRIBUTES"));
	oInbox.bCustomAttributesVisible = bPressed;
	bPressed ? oInbox._addCustomAttributes(oInbox) : oInbox._removeCustomAttributes();
	
};

sap.uiext.inbox.Inbox.prototype._addCustomAttributes= function(oInbox){
	
	var oTasksRowRepeater = oInbox._getComponent('tasksRowRepeater');
	var aRowRepeaterRows= oTasksRowRepeater.getRows();
	var inboxId = oInbox.getId();
	jQuery.each(aRowRepeaterRows,function(rowNumber,oRow){
		oInbox._updateActionButtonsContent(true, rowNumber);
		var sSelectedTaskInstance = oInbox.getModel().getProperty(oInbox.constants.TaskCollection.properties.instanceID, oRow.getBindingContext()); 
		var sSapOrigin = oInbox.getModel().getProperty(oInbox.constants.sapOrigin, oRow.getBindingContext());
		if(!(sSelectedTaskInstance && sSapOrigin))
			return false;
		var sSelectedTaskDefinition = oInbox.getModel().getProperty(oInbox.constants.TaskDefinitionCollection.properties.taskDefnID, oRow.getBindingContext());
		oInbox._getCustomAttributeContentforRowRepeater(null, rowNumber, sSelectedTaskDefinition, sSelectedTaskInstance, sSapOrigin);
	});
	
};

sap.uiext.inbox.Inbox.prototype._removeCustomAttributes= function(){
	var aRowRepeaterRows= this._getComponent('tasksRowRepeater').getRows();
	var that = this;
	jQuery.each(aRowRepeaterRows,function(iRowNumber,oRow){
		that._removeActionContentinRowRepeater(iRowNumber);
		that._updateActionButtonsContent(false, iRowNumber);
	});
};

sap.uiext.inbox.Inbox.prototype._updateActionButtonsContent = function(bPressed, rowNumber) {
	
	var oSegBtn= sap.ui.getCore().byId(this.getId()+"--customAttributesSegBtn-"+this.getId()+"--tasksRowRepeater-"+rowNumber);
	this.inboxUtils.deSelectOtherActionButtonsinStreamView(oSegBtn);
	oSegBtn.setPressed(bPressed);
	oSegBtn.setIcon('');
	oSegBtn.setIcon(this.constants.iconPool.getIconURI(bPressed ? "collapse" : "expand"));
	oSegBtn.setTooltip(this._oBundle.getText(bPressed ? "INBOX_HIDE_CUSTOM_ATTRIBUTES" : "INBOX_SHOW_CUSTOM_ATTRIBUTES"));
	
};

sap.uiext.inbox.Inbox.prototype._toggleCustomAttributesIcon = function(oButtonClicked, bPressed){
	oButtonClicked.setIcon(sap.ui.core.IconPool.getIconURI(""));
	oButtonClicked.setIcon(this.constants.iconPool.getIconURI(bPressed ? "collapse" : "expand"));
};

sap.uiext.inbox.Inbox.prototype._createNoDataLabel = function(sText){
	var oLabel = new sap.ui.commons.Label({
		text : sText,
		tooltip : sText,
		width : '100%',
		textAlign : sap.ui.core.TextAlign.Center
		});
		oLabel.addStyleClass("sapUIExtInboxCustomAttributesBorder");
		
		return oLabel;
};

sap.uiext.inbox.Inbox.prototype.setOpenTaskUIInNewTab = function(bValue){
	this.bOpenTaskUIInNewTab = bValue;
};

/*
 * Custom attribute sorter
 */
sap.uiext.inbox.Inbox.prototype._applySortOnTableColumn = function (oColumn, attrName, attrType, sortDirection) {
	this._resetStateBeforeSearch(); // resetting state before sort
	var oModel = this.getCoreModel();
	var currentViewElement = this._currentViewElement();

	//Preserve filtering
	var filteredKeys = currentViewElement._originalKeys;
	if (this._isTableFiltered(null)) {
		filteredKeys = this._getCurrentBindingKeysForTableColumnFilters(oModel._original_data, currentViewElement._originalKeys, null);
	}

	//Construct object array to be sorted
	var objArr = new Array();
	for(var i=0; i<filteredKeys.length; i++){
		var val = oModel._original_data[filteredKeys[i]];
		var aCustomAttributeKeys = val.CustomAttributeData.__list;
		var customAttributeValue = null;
		for(var k=0; k<aCustomAttributeKeys.length; k++){
			var customAttributeKey = aCustomAttributeKeys[k];
			if(customAttributeKey.indexOf(attrName) > 0){
				customAttributeValue = oModel._original_data[customAttributeKey].Value;
				break;
			}
		}
		var entry = {
				key: filteredKeys[i],
				type: attrType,
				dir: sortDirection,
				val: customAttributeValue
		};
		objArr.push(entry);
	}

	//Sorting comparator function
	/*
	 * (a<b) => -1
	 * (a>b) => 1
	 * (a=b) => 0
	 */
	var comparator = function(a,b)
	{
		var timeParser = { //precision - seconds, time zone ignored
			parse: function(val){// returns NaN if cannot be resolved
				if(!val || val.length == 0) return NaN;
				var parts = val.split(':');
				if(parts.length != 3) return NaN;
				var h = parseInt(parts[0]);
				if(isNaN(h)) return NaN;
				var m = parseInt(parts[1]);
				if(isNaN(m)) return NaN;
				var secs = parseInt(parts[2]);
				var ptIndex = secs.indexOf('.');
				if(ptIndex >=0) secs = secs.substring(0,ptIndex);
				var s = parseInt(secs);
				if(isNaN(s)) return NaN;
				return h*60*60 + m*60 + s;
			}
		};

		var durationParser = {
			parse: function(val){ //returns 0, if cannot be resolved
				//Duration format: PnYnMnDTnHnMnS
				var hours = 0;
				var minutes = 0;
				var seconds = 0;

				var str = new String(val);
				var Tindex = str.indexOf('T');
				if(Tindex >=0){
					str = str.substring(Tindex+1, str.length); //Cut the time part
					var Hindex = str.indexOf('H');
					var Mindex = str.indexOf('M');
					var Sindex = str.indexOf('S');
					if(Hindex >= 0){
						hours = str.substring(0, Hindex);
						if(isNaN(hours)) hours = 0;
					}
					if(Mindex >= 0){
						minutes = str.substring(Hindex+1, Mindex);
						if(isNaN(minutes)) minutes = 0;
					}
					if(Sindex >= 0){
						seconds = str.substring(Mindex+1, Sindex);
						if(isNaN(seconds)) seconds = 0;
					}
				}

				return hours*60*60 + minutes*60 + seconds;
			}
		};

		var typeStr = a.type.toLowerCase();
		var dirModifier = (a.dir.toLowerCase().indexOf("ascending")>=0)?1:-1;
		if(typeStr.indexOf("boolean") >= 0){ //Boolean
			var aBool = ((a.val+"").toLowerCase() == 'true')?true:false;
			var bBool = ((b.val+"").toLowerCase() == 'true')?true:false;
			if(aBool == bBool) return 0;
			return dirModifier*(aBool?-1:1);
		}
		else if(typeStr.indexOf("date") >= 0 || typeStr.indexOf("time") >= 0){ //Date, DateTime, Time, Duration
			//Try to parse as dates
			var aTimestamp = Date.parse(a.val);
			var bTimestamp = Date.parse(b.val);

			//Check for time or duration
			if(isNaN(aTimestamp)){ //Try parse it as time
				aTimestamp = timeParser.parse(a.val);
			}
			if(isNaN(aTimestamp)){ //Try parse it as duration
				aTimestamp = durationParser.parse(a.val);
			}
			if(isNaN(bTimestamp)){ //Try parse it as time
				bTimestamp = timeParser.parse(b.val);
			}
			if(isNaN(bTimestamp)){ //Try parse it as duration
				bTimestamp = durationParser.parse(b.val);
			}

			if(aTimestamp == bTimestamp) return 0;
			return dirModifier*((aTimestamp < bTimestamp)?-1:1);
		}
		//number: BigDecimal, Float, Long, Integer
		else if(typeStr.indexOf("decimal") >= 0 || typeStr.indexOf("float") >= 0 || typeStr.indexOf("integer") >= 0 || typeStr.indexOf("long") >= 0){
			var aNum = 0;
			var bNum = 0;
			if(isFinite(a.val)){
				aNum = Number(a.val);
				if(isNaN(aNum)) aNum = 0;
			}
			if(isFinite(b.val)){
				bNum = Number(b.val);
				if(isNaN(bNum)) bNum = 0;
			}
			if(aNum.valueOf() == bNum.valueOf()) return 0;
			return dirModifier*((aNum.valueOf() < bNum.valueOf())?-1:1);
		}
		//Default: String
		return dirModifier*((a.val+"").localeCompare((b.val+"")));
	};
	objArr.sort(comparator);

	//Extract sorted keys list
	var sortedKeys = new Array();
	for(var i=0; i<objArr.length; i++){
		sortedKeys[sortedKeys.length] = objArr[i].key;
	}

	// binding the search results to table
	this._renderTableAfterSort(oColumn, sortDirection, sortedKeys, oModel._original_data, oModel);
};

/* this function below is called in response of event 'Filter' of a table's column which takes following as input : the column that needs to be searched upon and search text.
 * this function will bind the table to data which satisfies the search criteria.
 * it will combine three search results : filtering on current column, filtering on other columns if applied already and local search if applied.
 * as result, the table will be bound to data that satisfies all the three search conditions.
 */
sap.uiext.inbox.Inbox.prototype._applyFilterOnTableColumns = function (oColumn, sValue) {
	var srchText = sValue.toLowerCase();
	var oModel = this.getCoreModel();
	var currentViewElement = this._currentViewElement();
	var aFilteredKeys = [];
	var aResultKeys = [];
	this._resetStateBeforeSearch(); // resetting state before search
	
	// getting result keys of the current search
	var aCurrentKeys = this._getBindingKeysForTableColumnFilter(oColumn, oModel._original_data, currentViewElement._originalKeys, srchText);
	aFilteredKeys.push(aCurrentKeys);
	
	// getting result keys in case any other column is filtered already
	if (this._isTableFiltered(oColumn)) {
		aFilteredKeys.push(this._getCurrentBindingKeysForTableColumnFilters(oModel._original_data, currentViewElement._originalKeys, oColumn));
	}
	
	// getting result keys of local search if applied already
	var sLocalSearchText = this._getLocalSearchText();
	if (sLocalSearchText) {
		aFilteredKeys.push(this._getBindingKeysOnLocalSearch(sLocalSearchText, oModel._original_data, currentViewElement._originalKeys));
	}
	
	// intersecting all the above result keys
	aResultKeys = this.inboxUtils._getUniqueArray(aFilteredKeys);
	
	// setting property Filtered to true to show the filtered image in column header
	oColumn.setFiltered(!!srchText); 
	oColumn.setFilterValue(srchText);
	
	// binding the search results to table
	this._renderTableAfterSearch(aResultKeys, oModel._original_data, oModel);
};

/* this function below searches the text in a column and return an array of valid keys that satisfies the search condition.
 * it searches locally on the values being displayed in the Table. It doesn't make any oData calls.
 */
sap.uiext.inbox.Inbox.prototype._getBindingKeysForTableColumnFilter = function(oColumn, oSearchData, aSearchKeys, sText) {
	var keys = [];
	var sFilterProperty = oColumn.getProperty("filterProperty");
	for (var l in aSearchKeys) {   //var l in aSearchKeys
        //var val = oSearchData[j];
        var valuePresent = false;
        var fieldValue, taskMetadataProperty;
        
        // check over the table's row bindings
        for ( var j in oSearchData) {  // var j in oSearchData
            if (aSearchKeys[l] == j) {
            	var val = oSearchData[j];
            	
            	// searching only in standard attribute columns if column is of type standard attribute
            	if(oColumn.data("ColumnType") == "StandardAttribute") { 
            		for ( var k = 0; k < this._getCategoryMetadata().properties.length; k++) {
            			taskMetadataProperty = this._getCategoryMetadata().properties[k];
            			if (taskMetadataProperty === sFilterProperty)  {
            				var fieldValue = val[taskMetadataProperty];
            				if (!fieldValue  && taskMetadataProperty  === "TaskTitle") {
            					fieldValue =  this._oBundle.getText("INBOX_TASK_TITLE_NOTAVAILABLE_MSG") ;
            				}
            				if (fieldValue != null) {
            					//search on formatted value of dates
            					if (jQuery.type(fieldValue) === "date") {
            						fieldValue = (this.inboxUtils.dateTimeFormat(fieldValue));
            					}
            					fieldValue = fieldValue.toLowerCase();
            					if (fieldValue.indexOf(sText) >= 0) {
            						valuePresent = true;
            						break;
            					}
            				}
            			}
            		}
            	}
            	
            	// searching only in custom attribute columns if column is of type custom attribute
            	else if (oColumn.data("ColumnType") == "CustomAttribute") { 
            		var aCustomAttributeKeys = val.CustomAttributeData.__list;
                        if(aCustomAttributeKeys !== undefined){
                            for(var i = 0; i < aCustomAttributeKeys.length; i++ ){
                                var customAttributeKey = aCustomAttributeKeys[i];
                                if (sFilterProperty && customAttributeKey.indexOf(sFilterProperty) > 0) {
                                	var fieldValue = oSearchData[customAttributeKey].Value;
                                	if (fieldValue != null || fieldValue != undefined) {
                                		fieldValue = fieldValue.toLowerCase();
                                		if (fieldValue.indexOf(sText) >= 0) {
                                			valuePresent = true;
                                			break;
                                		}
                                	}
                                }
                            }
                        }
            	}
            	
            	if (valuePresent) {
                	var key = j;
                	keys.push(key);
               }
            }
        }
    }
	return keys;
};

/* this function below preserves column filter state if columns are filtered already.
 * this function is called on requestCompleted event of oData model.
 */
sap.uiext.inbox.Inbox.prototype._preserveTableFilters = function(){
	var oModel = this.getCoreModel();
	var oBindingInfo, currentViewElement;
	var currentViewElement = this._currentViewElement();
	this._resetStateBeforeSearch(); // resetting state before search
	
	// getting keys that satisfies the current filtered column state
	var aFilteredKeys = this._getCurrentBindingKeysForTableColumnFilters(oModel._original_data, currentViewElement._originalKeys);
	if (aFilteredKeys)
		this._renderTableAfterSearch(aFilteredKeys, oModel._original_data, oModel);
};

sap.uiext.inbox.Inbox.prototype._preserveTableSort = function(){
	var oTable = this._getComponent('listViewTable');
	var aColumns = oTable.getColumns();

	for (var i=0; i<aColumns.length; i++ ) {
		var oColumn = aColumns[i];
		if (oColumn.getSorted()) {
			if(this._isCustomAttribute(oColumn)){
				oColumn.sort((oColumn.getSortOrder() === sap.ui.table.SortOrder.Descending), false);
			}
		}
	}
};

/* this function below takes a set of keys as input and binds the table based on the input keys.
 * it maps the keys to the data being sent, and creates a model. this model will be bound to Table.
 */
sap.uiext.inbox.Inbox.prototype._renderTableAfterSort  = function(oColumn, sortDirection, aResultKeys, oData, oModel)
{
	var currentViewElement = this._currentViewElement();
	var oBindingInfo = currentViewElement.mBindingInfos["rows"];
	var result = {};

	for (var i in aResultKeys) {
		result[aResultKeys[i]] = oData[aResultKeys[i]];
	}
	oModel.oData = result;

    if (oBindingInfo && oBindingInfo.binding) {
        oBindingInfo.binding.iLength = aResultKeys.length; // update the length information
        oBindingInfo.binding.aKeys = aResultKeys; // update the key information for the filtered result
        this.currentView === this.constants.tableView ? currentViewElement.rerender():currentViewElement.updateRows(false);
    }

    var iResultLength = currentViewElement.getBinding('rows').iLength;
    if (iResultLength <= 0)
    	this.showMessage("info", this._oBundle.getText("INBOX_MSG_FOR_NO_DATA"));
    else
        this.deleteMessage();

    // reset the sorting status of all columns
	var oTable = oColumn.getParent();
	var aCols = oTable.getColumns();
	for (var i = 0, l = aCols.length; i < l; i++) {
		if (aCols[i] !== oColumn) {
			aCols[i].setProperty("sorted", false, true);
			aCols[i].setProperty("sortOrder", sap.ui.table.SortOrder.Ascending, true);
			aCols[i]._renderSortIcon();
			delete aCols[i]._oSorter;
		}
	}

	// set the sort property of the current column
	oColumn.setProperty("sorted", true, true);
	oColumn.setProperty("sortOrder", sortDirection, true);
	oColumn._oSorter = new sap.ui.model.Sorter(oColumn.getSortProperty(), oColumn.getSortOrder() === sap.ui.table.SortOrder.Descending);

	// set the sorted flag and sort the model
	if (oColumn._afterSort) {
		oColumn._afterSort();
	}

	// update the sort icon
	oColumn._renderSortIcon();
}

/* this function below takes a set of keys as input and binds the table based on the input keys.
 * it maps the keys to the data being sent, and creates a model. this model will be bound to Table.
 */
sap.uiext.inbox.Inbox.prototype._renderTableAfterSearch = function(aResultKeys, oData, oModel) {
	var currentViewElement = this._currentViewElement();
	var oBindingInfo = currentViewElement.mBindingInfos["rows"];
	var result = {};
	
	for (var i in aResultKeys) {
		result[aResultKeys[i]] = oData[aResultKeys[i]];
	}
	oModel.oData = result;
    
    if (oBindingInfo && oBindingInfo.binding) {
        oBindingInfo.binding.iLength = aResultKeys.length; // update the length information
        oBindingInfo.binding.aKeys = aResultKeys; // update the key information for the filtered result
        this.currentView === this.constants.tableView ? currentViewElement.rerender():currentViewElement.updateRows(false);
        currentViewElement._updateBindingContexts(undefined, undefined, "change");
    }
    var iResultLength = currentViewElement.getBinding('rows').iLength;
    if (iResultLength <= 0)
    	this.showMessage("info", this._oBundle.getText("INBOX_MSG_FOR_NO_DATA"));
    else
        this.deleteMessage();
    this.fireODataRequestCompleted({bindingLength:iResultLength,appliedFilter:this._oBundle.getText("INBOX_SEARCH_RESULTS_TEXT")});
}

/* this function below returns the keys that satisfies current filter state in a table. 
 * it loops through every column in the table and if the column is filtered, gets the keys satisfying column's filter.
 * it returns intersection of keys of every column filter.  
 */
sap.uiext.inbox.Inbox.prototype._getCurrentBindingKeysForTableColumnFilters = function(oSearchData, oSearchKeys, oCurrentColumn) {
	var oTable = this._getComponent('listViewTable');
	var aColumns = oTable.getColumns();
	var aFilteredKeys = [];
	var oColumn, sText, i;
	
	// if function is getting called from table's filter event handler, we don't need to search on current column as it is being done separately
	if (oCurrentColumn) {
		var sCurrentColumnId = oCurrentColumn.getId();
		for (i=0; i<aColumns.length; i++ ) {
			var oColumn = aColumns[i];
			if (oColumn.getFiltered() && oColumn.getId() !== sCurrentColumnId) {
				var sText = oColumn.getFilterValue();
				aFilteredKeys.push(this._getBindingKeysForTableColumnFilter(oColumn, oSearchData, oSearchKeys, sText));
			}
		}
		
	} else {
		for (i=0; i<aColumns.length; i++ ) {
			oColumn = aColumns[i];
			if (oColumn.getFiltered()) {
				sText = oColumn.getFilterValue();
				aFilteredKeys.push(this._getBindingKeysForTableColumnFilter(oColumn, oSearchData, oSearchKeys, sText));
			}
		}
	}
	
	return this.inboxUtils._getUniqueArray(aFilteredKeys);
};

/* this function below returns a boolean indicating if columns of table are filtered already.
 * oCurrentColumn will be passed in case we are filtering on a table's column. In that case, we need to check if there is any other column which is already filtered.
 */
sap.uiext.inbox.Inbox.prototype._isTableFiltered = function(oCurrentColumn) {
	
	var oTable = this._getComponent('listViewTable');
	var aColumns = oTable.getColumns();
	
	if (oCurrentColumn) {
		var sCurrentColumnId = oCurrentColumn.getId();
		jQuery.each(aColumns, function(i, oColumn) {
			if (oColumn.getId() === sCurrentColumnId) {
				aColumns.splice(i,1);
				return false;
			}
		});
	}
	
	for (var i=0; i<aColumns.length; i++ ) {
		var oColumn = aColumns[i];
		if (oColumn.getFiltered()) {
			return true;
		} 
	}
	return false;
};

// this function below returns the search text if local search is applied
sap.uiext.inbox.Inbox.prototype._getLocalSearchText = function(){
	var oSearchField = this._getComponent('searchField');
	var sSearchText = oSearchField.getValue();
	if(sSearchText !== "" && sSearchText !== null){
		sSearchText = sSearchText.toLowerCase();
		return sSearchText;
	}
	return;
};

/* this function below removes the column filters.
 * this is called from switch view, on switch to stream view, all column filters will be removed.
 */
sap.uiext.inbox.Inbox.prototype._removeTableFilters = function() {
	
	var oTable = this._getComponent('listViewTable');
	var aColumns = oTable.getColumns();
	jQuery.each(aColumns, function(i, oColumn) {
		if (oColumn.getFiltered()) {
			oColumn.setFiltered(false);
			oColumn.setFilterValue("");
		} 
	});
};

sap.uiext.inbox.Inbox.prototype._resetStateBeforeSearch = function() {
	
	var oModel = this.getCoreModel();
	var currentViewElement = this._currentViewElement();
	
	// this variable maintains latest oData state in the model
	if (this.modelRefreshed) {
		oModel._original_data = oModel.oData;
		this.modelRefreshed = false;
	}

	// this varaible maintains the latest state of the table bindings wrt selected filters
	if(!currentViewElement._originalKeys) {
	currentViewElement._originalKeys = currentViewElement.getBinding('rows').aKeys;
	}
};

sap.uiext.inbox.Inbox.prototype._handleCustomActionClick = function(oEvent, params) {
	var bCommentsMandatory = oEvent.getSource().data('commentsMandatory');
	var oCustomActionPopup = ( bCommentsMandatory==true )? this.oCustomActionToolPopupCommentsMand : this.oCustomActionToolPopup;
	
	//handles opening/closing of both the popups(comments mandatory/not mandatory)
	// if the popup exists and is opened and same button is pressed, close it, otherwise open it
	if(oCustomActionPopup && oCustomActionPopup.getOpener() === oEvent.getSource().getId()){
		var oCommentInputField = oCustomActionPopup.getContent()[0]
		if(oCommentInputField){
			oCommentInputField.setValue("");
			if(bCommentsMandatory==true){
				sap.ui.getCore().byId(this.getId() + '--' + "toolPopupButton-CommentsMand").setEnabled(false);
			}
		}
		oCustomActionPopup.isOpen() ?  oCustomActionPopup.close() : oCustomActionPopup.open(sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginBottom);
	}
	else
		this._openCustomActionToolPopup( oEvent.getSource(), params);
	
};


sap.uiext.inbox.Inbox.prototype._openCustomActionToolPopup = function(oCustomActionButton, params) {
	var sCustomActionKey = oCustomActionButton.data('key'),
	bCommentsMandatory = oCustomActionButton.data('commentsMandatory'),
	sCustomActionCompleteButtoninPopupId = this.getId() + '--' + 'toolPopupButton',
	sCustomActionInputFieldinPopupId = this.getId() + '--' + 'addCommentsinCustomActionPopup';
	
	// If comments are mandatory, map the input field variable to the corresponding text-area
	if(bCommentsMandatory==true){
		var oCustomActionInputFieldinPopup = this.oCore.byId(sCustomActionInputFieldinPopupId + "-CommentsMand");
		var oCustomActionCompleteButtoninPopupForCommentsMand = this.oCore.byId(sCustomActionCompleteButtoninPopupId + "-CommentsMand") ; //button for comments mandatory popup
	}
	else{
		var oCustomActionInputFieldinPopup = this.oCore.byId(sCustomActionInputFieldinPopupId);
		var oCustomActionCompleteButtoninPopup = this.oCore.byId(sCustomActionCompleteButtoninPopupId);
	}

	
	// if comments are not mandatory, create/open the popup which does not have comments mandatory
	if(bCommentsMandatory==false){
		//TODO: enter needs to fire the complete Button, enter is not working along with initialFocus. Check and handle it in TextArea	
		if(!oCustomActionCompleteButtoninPopup){  //create a button for the popup if not there already
			oCustomActionCompleteButtoninPopup = new sap.ui.commons.Button(sCustomActionCompleteButtoninPopupId,{
																			  	press: jQuery.proxy(function (oEvent) {
																			  					var sComment = oCustomActionInputFieldinPopup.getValue();
																			  					var oCustomActionSource = sap.ui.getCore().byId(this.oCustomActionToolPopup.getOpener());
																			  					this._executeCustomAction(oCustomActionSource, jQuery.sap._sanitizeHTML(sComment));
																			  					this.oCustomActionToolPopup.close();
																			  		},this)
																				});
		}
		if(!this.oCustomActionToolPopup){//create the pop up and text-area if popup not there already
			oCustomActionInputFieldinPopup = new sap.ui.commons.TextArea(sCustomActionInputFieldinPopupId)
																		.setWidth('300px');
			this.oCustomActionToolPopup = new sap.ui.ux3.ToolPopup(this.getId() + '--' + 'customActionToolPopup',{
																	inverted:false,
																	content : [ oCustomActionInputFieldinPopup],
																	buttons: [oCustomActionCompleteButtoninPopup],
																	title: this._oBundle.getText('INBOX_ADD_COMMENT'),
																	autoClose: true
																});
		}
		this._resetCustomActionToolPopupContent(oCustomActionInputFieldinPopup, oCustomActionCompleteButtoninPopup, oCustomActionButton.data('text'), sCustomActionKey);
		this.oCustomActionToolPopup.setOpener(oCustomActionButton);
		if(!this.oCustomActionToolPopup.isOpen()){
			this.oCustomActionToolPopup.open(sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginBottom);
		}
	}
	
	
	//if comments are not mandatory, create/open the popup which does has comments mandatory
	else if(bCommentsMandatory==true){
		if(!oCustomActionCompleteButtoninPopupForCommentsMand){ //create a button for the popup if not there already
			oCustomActionCompleteButtoninPopupForCommentsMand = new sap.ui.commons.Button(sCustomActionCompleteButtoninPopupId+"-CommentsMand",{
																			  	press: jQuery.proxy(function (oEvent) {
																			  					var sComment = oCustomActionInputFieldinPopup.getValue();
																			  					var oCustomActionSource = sap.ui.getCore().byId(this.oCustomActionToolPopupCommentsMand.getOpener());
																			  					this._executeCustomAction(oCustomActionSource, jQuery.sap._sanitizeHTML(sComment));
																			  					this.oCustomActionToolPopupCommentsMand.close();
																			  		},this)
																				});
		}
		if(!this.oCustomActionToolPopupCommentsMand){ //create the pop up and text-area if popup not there already
			oCustomActionInputFieldinPopup = new sap.ui.commons.TextArea(sCustomActionInputFieldinPopupId+"-CommentsMand",{
				//validates if something has been entered and enables/disables the action button
				liveChange: function(E){
					var sValue = E.getSource().getLiveValue();
					(sValue.trim().length>0) ? oCustomActionCompleteButtoninPopupForCommentsMand.setEnabled(true) : oCustomActionCompleteButtoninPopupForCommentsMand.setEnabled(false);
				}
			}).setWidth('300px');
			this.oCustomActionToolPopupCommentsMand = new sap.ui.ux3.ToolPopup(this.getId() + '--' + 'customActionToolPopup-CommentsMand',{
																	inverted:false,
																	content : [ oCustomActionInputFieldinPopup],
																	buttons: [oCustomActionCompleteButtoninPopupForCommentsMand],
																	title: this._oBundle.getText('INBOX_ADD_COMMENT'),
																	autoClose: true
																});
		
		}
		//disable the Action button, everytime comments mandatory popup is opened
		oCustomActionCompleteButtoninPopupForCommentsMand.setEnabled(false);
		this._resetCustomActionToolPopupContent(oCustomActionInputFieldinPopup, oCustomActionCompleteButtoninPopupForCommentsMand, oCustomActionButton.data('text'), sCustomActionKey);
		this.oCustomActionToolPopupCommentsMand.setOpener(oCustomActionButton);
		if(!this.oCustomActionToolPopupCommentsMand.isOpen()){
			this.oCustomActionToolPopupCommentsMand.open(sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginBottom);
		}
	}
	
};

sap.uiext.inbox.Inbox.prototype._resetCustomActionToolPopupContent = function(oCustomActionInputFieldinPopup, oCustomActionCompleteButtoninPopup, sCustomActionText, sCustomActionKey) {
	//Remove the old text in the TextArea
	if(oCustomActionInputFieldinPopup){
		oCustomActionInputFieldinPopup.setValue('');
	}
	
	//Reset the button meta information
	var sCustomActionDisplayText = sCustomActionText || sCustomActionKey;
	oCustomActionCompleteButtoninPopup.setText(sCustomActionDisplayText);
	oCustomActionCompleteButtoninPopup.setTooltip(sCustomActionDisplayText);
	oCustomActionCompleteButtoninPopup.data('key',sCustomActionKey);
};

sap.uiext.inbox.Inbox.prototype._getAttachments = function(oAttachmentsToggleButton, iRowNumber){
	
	var that = this;
	var oContext = oAttachmentsToggleButton.getParent().getBindingContext();
	var sRequestURI = this._getAttachmentsUrl(oContext);
	var oModel = this.getCoreModel();

	var oRequestOptions = {
			async:true,
			requestUri : sRequestURI,
			method : "GET",
			headers : {
				Accept : that.constants.acceptHeaderforJSON,
				"x-csrf-token" : oModel.oHeaders["x-csrf-token"]
			}
	};

	OData.request(oRequestOptions, function(data, request) {
		var aAttachmentsData = data.results;
		that._displayAttachments(aAttachmentsData, iRowNumber, oContext);
	}, function(error) {
	that.showMessage("error", that._oBundle.getText("INBOX_MSG_FETCH_ATTACHMENTS_FAILS"));
	});
};

sap.uiext.inbox.Inbox.prototype._displayAttachments = function(aAttachmentsData, iRowNumber, oContext){
	var that = this;
	
	var sStatus = this.getModel().getProperty("Status", oContext);
	var bCompleted = (sStatus === "COMPLETED");
	var bUploadNotSupported = sap.ui.Device.browser.msie && sap.ui.Device.browser.version < 10;
	var bShowAddAttachmentTile = !(bCompleted || bUploadNotSupported);
	
	// display no attachments label in case for a completed task that does not have any attachment
	if (!bShowAddAttachmentTile && aAttachmentsData && aAttachmentsData.length < 1) {
		this._addActionContentinRowRepeater(iRowNumber, "attachments", this._createNoDataLabel(this._oBundle.getText("INBOX_MSG_FOR_NO_DATA")));
		
	} else {
		
		var oAttachmentsModel = new sap.ui.model.json.JSONModel(aAttachmentsData);
		var oAttachmentContainer = this._createAttachmentContainer(iRowNumber, oContext, bShowAddAttachmentTile);
		oAttachmentContainer.setModel(oAttachmentsModel);
		var oAttachmentTemplate = this._createAttachmentTileTemplate(bCompleted);
		oAttachmentContainer.bindAggregation("attachments",{path:"/",template: oAttachmentTemplate});
		
		var oAttachmentsOuterLayout = new sap.ui.commons.layout.MatrixLayout({
			layoutFixed : true,
			width : "100%"
		});
		var oAttachmentsCellOuter = new sap.ui.commons.layout.MatrixLayoutCell();
		oAttachmentsCellOuter.addContent(oAttachmentContainer);
		oAttachmentsCellOuter.addStyleClass('sapUIExtInboxCommentsBorder');
		oAttachmentsOuterLayout.createRow(oAttachmentsCellOuter);
		this._addActionContentinRowRepeater(iRowNumber, "attachments", oAttachmentsOuterLayout);
	}
};

sap.uiext.inbox.Inbox.prototype._createAttachmentContainer = function(iRowNumber, oContext, bShowAddAttachmentTile){
	var that = this;
	var oModel = this.getCoreModel();
	var oAttachmentContainer = this._getComponent("attachmentContainer-"+iRowNumber);
	if(!oAttachmentContainer) {
		oAttachmentContainer = new sap.uiext.inbox.composite.InboxAttachmentsTileContainer(this.getId()+"--"+"attachmentContainer-"+iRowNumber, {
			showAddTile : bShowAddAttachmentTile,
			uploadUrl : that._getAttachmentsUrl(oContext),
			uploadButtonPress : function(oEvent) {
				that._addParametersBeforeUpload(oEvent);
				this.triggerUpload();
			},
			uploadSuccess : function(oEvent) {
					var oAttachmentModel = this.getModel();
					oAttachmentModel.oData.push(JSON.parse(oEvent.getParameter("attachmentResponse")).d);
					oAttachmentModel.checkUpdate(false);
					
					/*
					 * bTokenRefreshed is a boolean variable which is set to true if oDataModel's security token is refreshed.
					 * resetting the variable bTokenRefreshed if success handler is called after refreshing the security token.
					 */
					if (this.bTokenRefreshed)
						this.bTokenRefreshed = false;
					that.showMessage("success", that._oBundle.getText("INBOX_MSG_UPLOAD_ATTACHMENT_SUCCESS"));
			},
			uploadFailed : function(oEvent) {
				var statusCode = oEvent.getParameter("statusCode");
				/*
				 * if the failure occurs beacuse of csrf token invalidation, we need to refresh the oDataModel's security token and retrigger the request.
				 * If it has done, we need to maintain a variable which indicates that the oDataModel's security token had been refreshed.
				 */
				if (statusCode && statusCode == 403) {
					var sToken = oEvent.getParameter("securityToken");
					if (!this.bTokenRefreshed && sToken && sToken.toLowerCase() == "required") {
						that.getCoreModel().refreshSecurityToken();
						this.bTokenRefreshed = true;
						var oHeaderParameters = oEvent.getParameter("headerParameters");
						this.removeUploadHeader("x-csrf-token");
						this.addUploadHeader("x-csrf-token", oModel.oHeaders["x-csrf-token"]);
						this.triggerUpload();
					} else {
						this.bTokenRefreshed = false;
						that.showMessage("error", that._oBundle.getText("INBOX_MSG_UPLOAD_ATTACHMENT_FAILURE"));
					}
				} else {
					this.bTokenRefreshed = false;
					that.showMessage("error", that._oBundle.getText("INBOX_MSG_UPLOAD_ATTACHMENT_FAILURE"));
				}
			}
		});
	}
	return oAttachmentContainer;
};

sap.uiext.inbox.Inbox.prototype._createAttachmentTileTemplate = function(bCompleted){
	var that = this;
	var oTemplate = new sap.uiext.inbox.composite.InboxAttachmentTile({
		fileName: "{FileName}",
		createdBy: {
			parts : [
			         	{path:"CreatedByName"},
			         	{path:"CreatedBy"}
			         ],
			formatter : function(sFullName, sUniqueName) {
				if (sFullName &&  sFullName !== "")
					return sFullName;
				else if (sUniqueName && sUniqueName !== "")
					return sUniqueName;
			}
		},
		fileDescription: "{FileDisplayName}",
		creationDate : {
			path : "CreatedAt",
			formatter : function (sDate) {
				return that.inboxUtils.dateTimeFormat(sDate, true);
			}
		},
		fileTypeIcon : {
			path : "mime_type",
			formatter : that.inboxUtils._getFileTypeIcon
		},
		fileSize : {
			path : "FileSize",
			formatter : that.inboxUtils._getFileSize
		},
		downloadUrl : {
			parts : [
						{path:"InstanceID"},
						{path:"SAP__Origin"},
						{path:"ID"}
					],
			formatter : function(sTaskInstanceID,sSapOriginID, sAttachmentID) {
				return (that.bpmSvcUrl + that._getAttachmentValueUrl(sTaskInstanceID,sSapOriginID, sAttachmentID));
			}
		},
		showDeleteButton : !bCompleted
		
	}).attachDeleteAttachment(this, this._deleteAttachment);
	
	return oTemplate;
};

sap.uiext.inbox.Inbox.prototype._addParametersBeforeUpload = function(oEvent){
	var oAttachmentContainer = oEvent.getSource();
	var that = this;
	
	if (oAttachmentContainer.getIsFileSelected()) {
		var oModel = this.getCoreModel();
		
		/*var sDescription = oAttachmentContainer.getEnteredDescription();
		var sSlug = "FileName='" + oAttachmentContainer.getFileName() + "', FileDisplayName='" + sDescription + "'";*/
		oAttachmentContainer.addUploadHeader("slug", oAttachmentContainer.getFileName());
		oAttachmentContainer.addUploadHeader("Content-Type", oAttachmentContainer.getFileType());
		oAttachmentContainer.addUploadHeader("Accept",  this.constants.acceptHeaderforJSON);
		oAttachmentContainer.addUploadHeader("x-csrf-token", oModel.oHeaders["x-csrf-token"]);
	}
};

sap.uiext.inbox.Inbox.prototype._deleteAttachment = function(oEvent, oInbox){
	var that = this;
	var oAttachmentModel = this.getModel();
	var oContext = this.getBindingContext();
	var oTaskCollectionTCMMetadata = oInbox.constants.TaskCollection;
	var sTaskInstanceID = oAttachmentModel.getProperty("InstanceID", oContext); 
	var sSapOriginID = oAttachmentModel.getProperty("SAP__Origin", oContext);
	var sAttachmentID = oAttachmentModel.getProperty("ID", oContext);
	
	var sRequestURI = oInbox._getAttachmentValueUrl(sTaskInstanceID, sSapOriginID, sAttachmentID);
	var oModel = oInbox.getCoreModel();
	
	oInbox.oDataManager.removeData(oInbox._getAttachmentValueUrl(sTaskInstanceID, sSapOriginID, sAttachmentID), {
		success : function(data, request) {
			var aParts = oContext.getPath().split("/");
			oAttachmentModel.oData.splice(aParts[1], 1);
			oAttachmentModel.checkUpdate(false);
			oInbox.showMessage("success", oInbox._oBundle.getText("INBOX_MSG_DELETE_ATTACHMENT_SUCCESS"));
		},
		error : function(error) {
			oInbox.showMessage("error", oInbox._oBundle.getText("INBOX_MSG_DELETE_ATTACHMENT_FAILURE"));
		}
	}, true);

};

sap.uiext.inbox.Inbox.prototype._getAttachmentsUrl = function(oContext) {
	var constants = this.constants;
	var oTaskCollectionTCMMetadata = constants.TaskCollection;
	var oModel = this.getModel();
	var sTaskInstanceID = oModel.getProperty("InstanceID",oContext); 
	var sSapOriginID = oModel.getProperty("SAP__Origin",oContext);
	var sAttachmentsUrl = this.bpmSvcUrl
		+ constants.forwardSlash 
			+ oTaskCollectionTCMMetadata.entityName 
				+ "(" 
					+ oTaskCollectionTCMMetadata.properties.instanceID
						+ "='"
							+ sTaskInstanceID + 
								"',"
									+ constants.sapOrigin 
										+ "='" 
											+ sSapOriginID 
												+ "')" 
													+ constants.forwardSlash
														+ constants.attachmentCollection.navParam.attachment;

	return sAttachmentsUrl;
};

sap.uiext.inbox.Inbox.prototype._getAttachmentValueUrl = function(sTaskInstanceID, sSapOriginID, sAttachmentID) {
	
	var constants = this.constants;
	var oTaskCollectionTCMMetadata = constants.TaskCollection;
	var oAttachmentConstants = constants.attachmentCollection;
	
	var sAttachmentValueUrl = constants.forwardSlash 
			+ oAttachmentConstants.entityName 
				+ "(" 
					+ oTaskCollectionTCMMetadata.properties.instanceID
						+ "='"
							+ sTaskInstanceID + 
								"',"
									+ constants.sapOrigin 
										+ "='" 
											+ sSapOriginID + 
												"',"
													+ oAttachmentConstants.properties.id 
														+ "='" 
															+ sAttachmentID 
																+ "')" 
																	+ constants.forwardSlash
																		+ oAttachmentConstants.navParam.value;

	return sAttachmentValueUrl;
};

sap.uiext.inbox.Inbox.prototype._initODataModel = function(){
	var that = this;
	this.oModel.refreshSecurityToken(null, null, true);
	this.oModel.attachMetadataLoaded(function(oEvent){
		var oServiceMetadata = this.getServiceMetadata()
    	if(this.sServiceUrl && oServiceMetadata){
    		that.oTcmMetadata.setServiceMetadata(oServiceMetadata);
    	}
		that._bindTaskActions();
	});
	//store the Service URL if the model is oData
	if(this.getHandleBindings()){
		this.bpmSvcUrl = this.oModel.sServiceUrl;
	}
};

sap.uiext.inbox.Inbox.prototype._getBindingParameters = function(){
	var oParameters = {};
	var oExpandParameters = this._getExpandParameters();
	
	if (this.typeOfModel === "OData") {
		oParameters.countMode = sap.ui.model.odata.CountMode.InlineRepeat;
		oParameters.faultTolerant = true;
		
	}
	
	if(oExpandParameters.length > 0 ){
		oParameters.expand = oExpandParameters;
	}
	
	return oParameters;
};

}; // end of sap/uiext/inbox/Inbox.js
