// This file has been generated by the SAPUI5 'AllInOne' Builder
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
sap.ui.base.Object.extend("sap.collaboration.components.controls.SuggestionUtility", {
});

/**
* Logic for maintaining the the indices for an AtMention in the buffer
* @public
* @param {map} atMention
* @param {integer} length
* @memberOf sap.collaboration.components.controls.SuggestionUtility
*/
sap.collaboration.components.controls.SuggestionUtility.maintainAtMentionIndices = function(atMention, length) {
	atMention.startIndex = atMention.startIndex + length;
	atMention.endIndex = atMention.endIndex + length;
};

/**
* Logic to get the changes in a Text Area. The returned map that has the following information:
* 1. operation : whether the change is add character(s) or delete character(s)
* 2. charactersChanged: function that returns the characters added or removed
* 3. changeIndex: the index where the change starts to happen
* 4. numberOfCharsChanged: number of added or deleted character(s)
* 
* @public
* @param {string} textAreaCurrentValue
* @param {string} textAreaOldValue 
* @returns {map}
* @memberOf sap.collaboration.components.controls.SuggestionUtility
*/
sap.collaboration.components.controls.SuggestionUtility.getChangesInTextArea = function(textAreaCurrentValue, textAreaOldValue) {
	if (textAreaOldValue !== ""){
		// the loop counter will be the length of the longest string between textAreaCurrentValue and textAreaOldValue
		var iLoopCounter = textAreaCurrentValue.length > textAreaOldValue.length ? textAreaCurrentValue.length : textAreaOldValue.length;
		// get the number of added or deleted characters to the text of the TextArea 
		var iCharDiff = Math.abs(textAreaCurrentValue.length - textAreaOldValue.length);
		
		// function to return a string that represents the added characters to the text of the TextArea
		var fGetAddedChars = function(iCharDiff, iStartingIndex) {
			return textAreaCurrentValue.substring(iStartingIndex, iStartingIndex + iCharDiff);
		};
		var fGetRemovedChars = function(iCharDiff, iStartingIndex) {
			return textAreaOldValue.substring(iStartingIndex, iStartingIndex + iCharDiff);
		};
		
		// loop to compare character by character between the TextArea text before the change and the TextArea text after the change
		for(var i = 0; i < iLoopCounter; i++){
			// if there is a difference 
			if(textAreaCurrentValue[i] !== textAreaOldValue[i]){
				// if the TextArea text after the change is > then the TextArea text before the change, then character(s) are added, otherwise characters are deleted 
				return textAreaCurrentValue.length > textAreaOldValue.length ?  
						{operation: "addChar", charactersChanged: fGetAddedChars(iCharDiff, i), changeIndex: i, numberOfCharsChanged: iCharDiff} : {operation: "deleteChar", charactersChanged: fGetRemovedChars(iCharDiff, i), changeIndex: i, numberOfCharsChanged: iCharDiff};
			}
		}
	}
	else {
		return {operation: "addChar", charactersChanged: textAreaCurrentValue, changeIndex: 0};
	}
};

/**
* Converts a text that contains full names to email aliases
* @public
* @param {string} value - value of the AddPost Text Area with the full names
* @param {map} atMentionBuffer - value of the AddPost Text Area with the full names
* @returns {string} sTextWithAlias - new text with the user's email alias instead of full name
* @memberOf sap.collaboration.components.controls.SuggestionUtility
*/
sap.collaboration.components.controls.SuggestionUtility.convertTextWithFullNamesToEmailAliases = function(value, atMentionBuffer){
	var sTextWithAlias = "";
	var aBufferLength = atMentionBuffer.length;
	var iStartIndex = 0;
	
	if(aBufferLength !== 0){
		for(var i = 0; i < aBufferLength; i++){
			if(atMentionBuffer[i].atMentioned){ // if the '@mention' in the buffer is a real one
				var sEmailAlias = "@" + atMentionBuffer[i].email.split("@")[0];
				sTextWithAlias = sTextWithAlias + value.substring(iStartIndex, atMentionBuffer[i].startIndex) + sEmailAlias;
			}
			else {
				sTextWithAlias = sTextWithAlias + value.substring(iStartIndex, atMentionBuffer[i].endIndex + 1);
			}
			iStartIndex = atMentionBuffer[i].endIndex + 1;
		}
		// append the remaining text to sTextWithAlias
		sTextWithAlias = sTextWithAlias + value.substring(atMentionBuffer[aBufferLength - 1].endIndex + 1, value.length);
		return sTextWithAlias;
	}
		return value;
};

/**
* Function to get the string after the char(s) inserted in an AtMention
* example: '@pter', then the user inserted 'e' after the 'p' now it will be 'peter' and the after string 'ter'
* @public
* @param {integer} indexChangedChar
* @param {string} textAreaCurrentValue
* @param {map} atMention - an object containing information about the AtMention
* @returns {string} sStringAfterAtMention
* @memberOf sap.collaboration.components.controls.SuggestionUtility
*/

sap.collaboration.components.controls.SuggestionUtility.getStringAfterAtMention = function(indexChangedChar, textAreaCurrentValue, atMention){
	var sStringAfterAtMention = "";
	var index = indexChangedChar;
	
	function buildString() {
		while(textAreaCurrentValue[index+1] !== " " && textAreaCurrentValue[index+1] !== undefined && textAreaCurrentValue[index+1] !== '\n'){
			sStringAfterAtMention = sStringAfterAtMention.concat(textAreaCurrentValue[index+1]);
			index += 1;
		}
	}
	
	buildString();
	
	// the following is to handle a  special case: the char(s) added are part of a @mention that was selected from the suggestions list 
	// and the char(s) added were somewhere in the First Name - in this case we need to skip a space between the First and Last Name and continue
	// to build the string
	if(atMention.atMentioned && textAreaCurrentValue[index+1] === " " && textAreaCurrentValue[index+1] <= atMention.endIndex){
		sStringAfterAtMention = sStringAfterAtMention.concat(textAreaCurrentValue[index+1]);
		index += 1;
		buildString();
	}
	return sStringAfterAtMention;
};

/**
* Returns the string before the AtMention 
* @public
* @param {map} atMention - an object containing information about the AtMention
* @param {string} textAreaCurrentValue - the current value of the text area
* @param {integer} textAreaChangeIndex - the index in the text area where the change occured
* @returns {string} sStringBeforeAtMention - the string before the at AtMention
* @memberOf sap.collaboration.components.controls.SuggestionUtility
*/
sap.collaboration.components.controls.SuggestionUtility.getStringBeforeAtMention = function(atMention, textAreaCurrentValue, textAreaChangeIndex){
	var sStringBeforeAtMention = textAreaCurrentValue.substring(atMention.startIndex + 1, textAreaChangeIndex);

	return sStringBeforeAtMention;
};
/**
* Converts a text that contains full names to email aliases
* @public
* @param {array} atMentionBuffer - the AtMention buffer
* @param {integer} textAreaChangeIndex - the index in the text area where the change occurred
* @param {string} textAreaChangeChars - the char(s) changed in the text area
* @returns {string} iAtMentionBufferIndex
* @memberOf sap.collaboration.components.controls.SuggestionUtility
*/
sap.collaboration.components.controls.SuggestionUtility.addToAtMentionBuffer = function(atMentionBuffer, textAreaChangeIndex, textAreaChangeChars){
	var iAtMentionBufferIndex = 0;
	var iAtBufferLength = atMentionBuffer.length;
	// case #1: the @mention buffer is empty - push the @mention to the buffer
	if(iAtBufferLength === 0){
		atMentionBuffer.push({startIndex: textAreaChangeIndex, endIndex: textAreaChangeIndex + textAreaChangeChars.length - 1, atMentioned: false});
		iAtMentionBufferIndex = 0;
	}
	
	// case #2: the @mention buffer is not empty - update indices for all @mentions in the buffer and insert the new @mention in the correct position
	else {
		// maintain the start and end index for each @mention in the buffer
		for(var i = 0; i < iAtBufferLength; i++){
			if(textAreaChangeIndex <= atMentionBuffer[i].startIndex){
				this.maintainAtMentionIndices(atMentionBuffer[i], textAreaChangeChars.length);
			}
		}
		// Add the @mention at the right position in the buffer
		for(var i = iAtBufferLength - 1; i >= 0; i--){
			if(textAreaChangeIndex > atMentionBuffer[i].startIndex){
				atMentionBuffer.splice(i + 1,0,{startIndex: textAreaChangeIndex, endIndex: textAreaChangeIndex + textAreaChangeChars.length - 1 , atMentioned: false});
				iAtMentionBufferIndex = i + 1;
				break;
			}
			else if(i === 0){
				atMentionBuffer.splice(0,0,{startIndex: textAreaChangeIndex, endIndex: textAreaChangeIndex + textAreaChangeChars.length - 1, atMentioned: false});
				iAtMentionBufferIndex = 0;
			}
		}
	}
	return iAtMentionBufferIndex;
};

/**
* Check if the deleted char(s) was part of an AtMention (from the start to end index) in the buffer
* @public
* @param {map} atMentionBuffer - the AtMention buffer
* @param {integer} textAreaChangeIndex - the index in the text area where the change occurred
* @returns {integer} iAtMentionIndexInBuffer - index in the atMention buffer
* @memberOf sap.collaboration.components.controls.SuggestionUtility
*/
sap.collaboration.components.controls.SuggestionUtility.isDeletedCharPartOfAtMentioned = function(atMentionBuffer, textAreaChangeIndex){
	var iAtMentionBufferLength = atMentionBuffer.length;
	for(var iAtMentionIndexInBuffer = 0; iAtMentionIndexInBuffer < iAtMentionBufferLength; iAtMentionIndexInBuffer++){
		if (textAreaChangeIndex >= atMentionBuffer[iAtMentionIndexInBuffer].startIndex && textAreaChangeIndex <= atMentionBuffer[iAtMentionIndexInBuffer].endIndex){
			return iAtMentionIndexInBuffer;
		}
	}
};

/**
* Maintain buffer and return new text area value after selection from '@mentions' list
* @param {string} fullName - the selected user's Full Name
* @param {string} email - the selected user's Email address
* @param {map} currentAtMention - the current AtMention
* @param {array} atMentionBuffer - the AtMention buffer
* @param {string} textAreaCurrentValue - the current text area value
* @param {boolean} notifyAllSelected - whether the "@@notify" was selected
* @return {string} sNewTextAreaValue - the new text area value
* @public
* @memberOf sap.collaboration.components.controls.SuggestionUtility
*/
sap.collaboration.components.controls.SuggestionUtility.getTextAreaValueAfterSuggestionSelected = function(fullName, email, currentAtMention, atMentionBuffer, textAreaCurrentValue, notifyAllSelected){
	var startIndex = currentAtMention.startIndex;
	var endIndex = currentAtMention.endIndex;
	var iStringLengthBeforeMentioning = textAreaCurrentValue.length;
	var sNewTextAreaValue;
	var sAtNotifyText = "@notify";
	
	if(notifyAllSelected){
		sNewTextAreaValue = textAreaCurrentValue.substr(0, startIndex + 1) + sAtNotifyText + " " + textAreaCurrentValue.substr(endIndex + 1);
		currentAtMention.endIndex = startIndex + sAtNotifyText.length;
		currentAtMention.notifyAll = true;
	}
	else {
		sNewTextAreaValue = textAreaCurrentValue.substr(0, startIndex + 1) + fullName + " " + textAreaCurrentValue.substr(endIndex + 1);
		currentAtMention.endIndex = startIndex + fullName.length;
		currentAtMention.atMentioned = true;
		currentAtMention.email = email;
	}
	
	var iStringLengthAfterMentioning = sNewTextAreaValue.length;
	var iDifferenceInCharacters = iStringLengthAfterMentioning - iStringLengthBeforeMentioning;
	var iIndexOfCurrentAtMention = atMentionBuffer.indexOf(currentAtMention);
	for(var i = iIndexOfCurrentAtMention + 1; i < atMentionBuffer.length; i++){
		this.maintainAtMentionIndices(atMentionBuffer[i], iDifferenceInCharacters);
	}
	
	return sNewTextAreaValue;
};

/**
* Returns a text area value and cursor position after the '@mentions' button has been pressed
* @param {string} textAreaValue - the current text area value
* @param {integer} cursorPosition - current cursor position in text area
* @returns {map} - an map containing the new text area and the cursor position
* @public
* @memberOf sap.collaboration.components.controls.SuggestionUtility
*/
sap.collaboration.components.controls.SuggestionUtility.atMentionsButtonPressed = function(textAreaValue, cursorPosition){
	var iCursorPositionToBeSet;
	var sTextBeforeCursorPosition = textAreaValue.slice(0, cursorPosition);
	var sTextAfterCursorPosition =  textAreaValue.slice(cursorPosition, textAreaValue.length);
	var sAtMentionChar = "";
	
	if(textAreaValue[cursorPosition - 1] === " " 
		|| textAreaValue[cursorPosition - 1] === "\n" 
		|| textAreaValue[cursorPosition - 1] === undefined){
		sAtMentionChar = "@";
		iCursorPositionToBeSet = cursorPosition + 1;
	}
	else {
		sAtMentionChar = " @";
		iCursorPositionToBeSet = cursorPosition + 2;
	}
	
	var sNewTextAreaValue = sTextBeforeCursorPosition + sAtMentionChar + sTextAfterCursorPosition;
	
	return { newValue : sNewTextAreaValue, cursorPosition : iCursorPositionToBeSet };
};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
* Constructor for the App Controller
* @since 1.16
* constructor
* Is the controller for the App View and is responsible 
* for creating and setting a page for the ui5 none-split
* app. This page will display the JAM Feed Widget.
* class App Controller<br>
* 
* Is the controller for the App View and is responsible 
* for creating and setting a page for the ui5 none-split
* app. This page will display the JAM Feed Widget.
* 
* name sap.collaboration.components.fiori.feed.app.AppController
* @private
*/
sap.ui.controller("sap.collaboration.components.fiori.feed.app.App", 
	/* @lends sap.collaboration.components.fiori.feed.app.AppController */{

	/**
	* Called when a controller is instantiated and its View controls (if available) are already created (inherited).<br>
	* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	* It initialize class variables.
	* @private
	*/
	onInit: function() {
		this.oApp = this.getView().oApp;
		this.oOdataModel = this.getView().getViewData().odataModel;
		this.oLangBundle = this.getView().getViewData().langBundle;
		this.sPrefixId = this.getView().getViewData().controlId;
		this.sAppType = this.getView().getViewData().appType;
		this.sFeedType = this.getView().getViewData().feedType;
		this.sGroupIds = this.getView().getViewData().groupIds;
		this.oBusinessObject = this.getView().getViewData().object;
	},

	/**
	* This hook is invoked before the controller's View is re-rendered (inherited).<br>
	* It calls the initializeUtils() and the createDetailPage() functions.
	* @private
	*/
	onBeforeRendering: function() {
		try{
			this.initializeUtils();
			this.createDetailPage();
		}catch(oError){	
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.app.App.controller.onBeforeRendering()");
			this.oCommonUtil.displayError();
		}
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @private
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @private
*/
//	onExit: function() {
//
//	}
	
/**
 * Initializes an object from the sap.collaboration.components.utils.OdataUtil class.
 * @private
 */
	initializeUtils : function() {
		if(!this.oODataUtil){
			this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		}
		if(!this.oCommonUtil){
			this.oCommonUtil = this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		}
	},
	
	/**
	 * Creates and sets a page for the app. This page is the detail view.
	 * @private
	 */
	createDetailPage : function() {
		try{			
			/*if (this.sAppType === sap.collaboration.AppType.widget){
				this.getGroupIds();
			}*/
			var sViewId = this.sPrefixId + "detailView";
			
			if(!this.oApp.getPage(sViewId)){
				this.initOData();
				var oDetailView = sap.ui.view({
					id: sViewId, 
					viewData : {
						controlId: this.sPrefixId,
						jamURL:	this.sJamUrl,
						jamToken: this.sJamToken,
						appType: this.sAppType,
						feedType: this.sFeedType,
						groupIds: this.sGroupIds,
						object: this.oBusinessObject,
						langBundle: this.oLangBundle
					}, 
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.fiori.feed.commons.Detail"
				});
				
				this.oApp.addPage(oDetailView); 
				this.oApp.setInitialPage(oDetailView); 
			}
		} catch(oError){				
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.app.App.controller.createDetailPage()");
			throw oError;
		}
	},
	
	/**
	 * Gets the IDs of the JAM groups belonging to a user or the IDs of the JAM groups belonging to a user and related to a context in a back-end system.
	 * In case the feed type is "group" and the groups IDs are not set by the developer, it gets all the JAM groups belonging to a user.
	 * In case the feed type is "context" and the groups IDs are not set by the developer, it gets JAM groups belonging to a user and related to a context 
	 * at the same time.
	 * In case the feed type is "context" and the groups IDs are set by the developer, it gets JAM groups belonging to a user and related to a context at 
	 * the same time and uses them to filter the IDs set by the developer.
	 * @private
	 */
	getGroupIds : function() {
		var aGroupData;
		if (this.sFeedType === sap.collaboration.FeedType.group && (this.sGroupIds === undefined || this.sGroupIds === "")){
			aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/Groups");
			this.sGroupIds = this.oODataUtil.getGroupIds(aGroupData);
		}
		else if (this.sFeedType === sap.collaboration.FeedType.objectGroup && (this.sGroupIds === undefined || this.sGroupIds === "")){
		    aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/BusinessObjects('" + this.oBusinessObject.id + "')/AssignedGroups");
		    this.sGroupIds = this.oODataUtil.getGroupIds(aGroupData);
		}
		else if (this.sFeedType === sap.collaboration.FeedType.objectGroup && !(this.sGroupIds === undefined || this.sGroupIds === "")){
			aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/BusinessObjects('" + this.oBusinessObject.id + "')/AssignedGroups");
			var sContextRelatedGroupsId = this.oODataUtil.getGroupIds(aGroupData);
			this.sGroupIds = this.filterGroupIds(sContextRelatedGroupsId);
		}
	},
	
	/**
	 *Filter the JAM groups IDs set by the developer using the context related JAM groups IDs.
	 * @param {string} sContextRelatedGroupsId
	 * @private
	 */
	filterGroupIds : function(sContextRelatedGroupIds) {
		var sGroupIds;
		var aContextRelatedGroupIds = sContextRelatedGroupIds.split(",");
		var aInputGroupIds = this.sGroupIds.split(",");
		
		for(var i=0; i<aInputGroupIds.length; i++){
			if(aContextRelatedGroupIds.indexOf(aInputGroupIds[i]) === -1){
				aInputGroupIds.splice(i,1);
				i = i - 1;
			}
		}
		
		if (aInputGroupIds.length !== 0){
			sGroupIds = aInputGroupIds.join();
		} else{
			sGroupIds = "";
		}
		
		return sGroupIds;
	},
	
	/**
	 * Initialize OData.
	 * @private
	 */
	initOData: function(){
		var self = this;
		var aBatchRequests = [];
		var bAsync = false;
		
		var fnParseBatchResults = function(aBatchResults){
			self.parseBatchResults(aBatchResults);
		};
		
		var fnBatchErrorCallback = function(oErrorBatchFailed){
        	jQuery.sap.log.error(oErrorBatchFailed, "", "sap.collaboration.components.fiori.feed.dialog.Component.initOdata(), fnBatchErrorCallback()");
        	throw oErrorBatchFailed;
		};
		
		try{
			aBatchRequests = this.createBatchRequests();
			this.oODataUtil.executeODataBatchRequest(this.oOdataModel, aBatchRequests, fnParseBatchResults, bAsync, fnBatchErrorCallback);				
		} catch(oInitOdataError){				
			jQuery.sap.log.error(oInitOdataError, "", "sap.collaboration.components.fiori.feed.app.App.controller.initOdata()");
			throw oInitOdataError;
		}	
	},
	
	/**
	 * Creates batch requests for the different feed types.
	 * @return {array} aBatchRequests - An array of batch requests
	 * @throws {error} oErrorObjectUndefined Error thrown when one of the batch requests is not successfully created
	 * @private
	 */
	createBatchRequests : function(){
		var self = this;
		var aBatchRequests = [];
		
		try{
			//1) General batch requests, regardless of the feed type.
			if(!self.sJamUrl){
				aBatchRequests.push(self.oODataUtil.createJamUrlBatchOperation(self.oOdataModel));
			}
			aBatchRequests.push(self.oODataUtil.createJamTokenBatchOperation(self.oOdataModel));
			
			//2) Batch requests specific to the feed type.
			switch(self.sFeedType){
				case sap.collaboration.FeedType.object:
					aBatchRequests = aBatchRequests.concat(self.createExternalUrlBatchRequest(self.oODataUtil, self.oBusinessObject));
					break;
				case sap.collaboration.FeedType.group:
					aBatchRequests.push(self.oODataUtil.createGetGroupsDataBatchOperation(self.oOdataModel));
					break;
				case sap.collaboration.FeedType.objectGroup:
					aBatchRequests.push(self.createObjectGroupBatchRequest(self.oODataUtil, self.oBusinessObject));
					break;
			}
		} catch(oCreateBatchRequestsError){
			jQuery.sap.log.error(oCreateBatchRequestsError, "", "sap.collaboration.components.fiori.feed.app.App.controller.createBatchRequests()");
			throw oCreateBatchRequestsError;
		}
		
		return aBatchRequests;
	},

	/**
	 * Create a batch request to get the external URL mapping for a business object
	 * @param {sap.collaboration.components.utils.OdataUtil} oODataUtil An object containing a reference to the OData Util Class
	 * @param {object} oBusinessObject a Business Object containing the URLs that need to be mapped
	 * @return {array} aBatchOperations an array containing the batch operations
	 * @private
	 */
	createExternalUrlBatchRequest: function(oODataUtil, oBusinessObject){
		var self = this;
		var aBatchOperations = [];
		
		if(oODataUtil && oBusinessObject){
			if(oBusinessObject.id){
				aBatchOperations.push(oODataUtil.createExternalOdataUrlBatchOperation(self.oOdataModel, oBusinessObject.id));
			}
			if(oBusinessObject.type){
				aBatchOperations.push(oODataUtil.createExternalOdataUrlBatchOperation(self.oOdataModel, oBusinessObject.type));
			}				
		}
		
		return aBatchOperations;
	},
	
	/**
	 * Creates a batch request to get the groups assigned to business objects in the back-end
	 * @param {sap.collaboration.components.utils.OdataUtil} oODataUtil An object containing a reference to the OData Util Class
	 * @param {object} oBusinessObject a Business Object containing the URLs that need to be mapped
	 * @return {object} oBatchRequest a batch request to get the object groups
	 * @throws {error} oErrorObjectGroupBatchRequest Error thrown when the batch request cannot be created due to missing parameters (OData Util is missing, business object is undefined or its property id is missing)
	 */
	createObjectGroupBatchRequest: function(oODataUtil, oBusinessObject){
		var self = this;
		var oBatchRequest;
		
		if(oODataUtil && oBusinessObject && oBusinessObject.id){
			oBatchRequest = oODataUtil.createGetObjectGroupsBatchOperation(self.oOdataModel, oBusinessObject.id);
		}else{
			var oErrorObjectGroupBatchRequest = new Error("Missing parameters. Cannot create a batch request for Object Group.");
        	jQuery.sap.log.error(oErrorObjectGroupBatchRequest, "", "sap.collaboration.components.fiori.feed.app.App.controller.createObjectGroupBatchRequest()");
        	throw oErrorObjectGroupBatchRequest;
		}
		
		return oBatchRequest;
	},
	
	/**
	 * Callback function to parse the results from the batch request.<br>
	 * Assumption: the results are returned in the same order as the requests.<br>
	 * The values from the batch results will be assigned to member variables to be used later when the Feed View is created.
	 * @param {array} aBatchResults An array containing the batch results to be parsed
	 * @throws {error} an error when parsing the results
	 * @private
	 */
	parseBatchResults: function(aBatchResults){
		var self = this;
		var i = 0;
			
		if(!self.sJamUrl){
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				self.sJamUrl = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetCollaborationHostUrl].Url;
			}
			i++;
		}
		
		if(aBatchResults[i].error){
			throw new Error(aBatchResults[i].error);
		} else {
			self.sJamToken = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetSingleUseToken].Id;
		}
		i++;
		
		if(self.sFeedType == sap.collaboration.FeedType.object){
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				self.oBusinessObject.id = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetExternalODataURL].URL;
				self.oBusinessObject.odata_url = self.oBusinessObject.id;
			}
			i++;
			
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				self.oBusinessObject.type = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetExternalODataURL].URL;
				self.oBusinessObject.metadata_url = self.oBusinessObject.type;
			}
		} else if(self.sFeedType == sap.collaboration.FeedType.group || self.sFeedType == sap.collaboration.FeedType.objectGroup){
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				var backEndGroupIds = self.oODataUtil.getGroupIds(aBatchResults[i].results);
				if(!self.sGroupIds){
					self.sGroupIds = backEndGroupIds;
				} else {
					self.sGroupIds = self.filterGroupIds(backEndGroupIds);
				}
			}
		}
	}
	
});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
* Is a view that displays the ui for a ui5 none-split app.
* This app will contain a page that will display the JAM
* Feed Widget
* class App View
* name sap.collaboration.components.fiori.feed.app.AppView
* @since 1.16
* @private
*/
sap.ui.jsview("sap.collaboration.components.fiori.feed.app.App", 
	/* @lends sap.collaboration.components.fiori.feed.app.AppView */{

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.app.App";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates/returns a UI5 app
	* @param {sap.ui.controller} oController The view Controller  
	* @private
	*/ 
	createContent : function(oController) {
		this.sPrefixId = this.getViewData().controlId;
		this.oApp = new sap.m.App(this.sPrefixId + "app");
		return this.oApp;
	}

});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
* Detail View
*
* Is a view that displays the ui for a ui5 page. This page
* will display the JAM Feed Widget
* class Detail View
* name sap.collaboration.components.fiori.feed.commons.DetailView
* @since 1.16
* @private
*/
sap.ui.jsview("sap.collaboration.components.fiori.feed.commons.Detail", 
	/* @lends sap.collaboration.components.fiori.feed.commons.DetailView */{

	/** 
	* Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.commons.Detail";
	},

	/** 
	* Is the place where the UI is constructed (inherited).<br> 
	* It is initially called once after the Controller has been instantiated.
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates a UI5 page with a scroll container.
	* @param {sap.ui.controller} oController The view Controller 
	* @private
	*/ 
	createContent : function(oController) {
		var oLangBundle = this.getViewData().langBundle;
		this.sPrefixId  = this.getViewData().controlId;
		
		this.oDetailPage = new sap.m.Page(this.sPrefixId + "feedDetailsPage",{
			title: oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_FOLLOWS"),
			enableScrolling: false,
			content: [
						new sap.m.ScrollContainer(this.sPrefixId + "widgetContainer",{
							width: "100%",
							height: "100%",
							horizontal: false,
							vertical: false
						}) 
			]
		});
		
 		return this.oDetailPage;
	}

});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*******************************************************
* FeedTypeMaster View Controller
*
* Is the controller for the FeedTypeMaster View and is 
* responsible for creating JAM Feed Widget and for 
* navigating to other master pages
********************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initialize class variables.
* @private
*/
	onInit: function() {
		this.sJamToken = this.getView().getViewData().jamToken;
		this.sPrefixId = this.getView().getViewData().controlId;
		this.oBusinessObject = this.getView().getViewData().object;
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* @private
*/
//	onBeforeRendering: function() {
//
//	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @private
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @private
*/
//	onExit: function() {
//
//	}
	
	/**
	 * Handler for the list item press event
	 * This handler display the widget in case of feed type is "follows" or "company" by calling getJamWidget function
	 * Or it navigates to the Group Master Page in case the feed type in other that the above by calling navigateToGroupMaster
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	listItemPress : function(sFeedType) {
		if (sFeedType === sap.collaboration.FeedType.follows || sFeedType === sap.collaboration.FeedType.company){
			this.getJamWidget(sFeedType);
			this.setDetailPageTitle(sFeedType);
		} else{
			this.navigateToGroupMaster(sFeedType);
		}
	},
	
	/**
	 * Display the widget
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	getJamWidget : function(sFeedType){
		var oJamUtil = new sap.collaboration.components.utils.JamUtil();
		var oWidgetData = oJamUtil.prepareWidgetData(this.sJamToken, sFeedType, "", this.oBusinessObject);
		oJamUtil.createJamWidget(this.sPrefixId + "widgetContainer", oWidgetData);
	},
	
	/**
	 * Sets the detail page title
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	setDetailPageTitle : function(sFeedType){	
		var sDetailPageTitle;
		   sFeedType === sap.collaboration.FeedType.follows?		sDetailPageTitle = this.getView().oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_FOLLOWS") 
	   					  		  :  	sDetailPageTitle = this.getView().oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_COMPANY");
		   sap.ui.getCore().byId(this.sPrefixId + "feedDetailsPage").setTitle(sDetailPageTitle);
   },

   /**
	 * Navigates the split app master page to to the Group Master View
	 * And creates the navigation data by calling the createNavigationData function
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
   navigateToGroupMaster : function(sFeedType) {
	   var oNavData = this.createNavigationData(sFeedType);
	   
	   sap.ui.getCore().getEventBus().publish("nav", "to", oNavData);
	},
	
	/**
	 * Creates the navigation data
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	createNavigationData : function(sFeedType) {
		var oData;
		sFeedType === sap.collaboration.FeedType.group? 
				oData = {
							viewName: "sap.collaboration.components.fiori.feed.splitApp.GroupMaster",
							viewId: this.sPrefixId + "groupMasterView",
				   			data: {
				   					feedType: sap.collaboration.FeedType.group, 
				   					lanBundle: this.getView().oLangBundle, 
				   					groupMasterPageTitle: this.getView().oLangBundle.getText("GROUP_MASTER_PAGE_GROUP_TITLE")
				   			}
			   			} 
				: 
				oData = {
							viewName: "sap.collaboration.components.fiori.feed.splitApp.GroupMaster",
							viewId: this.sPrefixId + "groupMasterView",
				   			data: {
				   					feedType: sap.collaboration.FeedType.object, 
				   					lanBundle: this.getView().oLangBundle, 
				   					groupMasterPageTitle: this.getView().oLangBundle.getText("GROUP_MASTER_PAGE_BO_TITLE")
				   			}
						};
			   					
		return oData;
	}

});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*******************************************************
* FeedTypeMaster View
*
* Is a view that displays the ui for a ui5 page.
* This page will contain a list of Feed Types
* It will be used as a mater page for the ui5 split app
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* @param {sap.ui.controller} oController The view Controller  
	* It creates a page with a list of feed types.
	* @private
	*/ 
	createContent : function(oController) {
		
		this.oLangBundle = this.getViewData().langBundle;
		this.sPrefixId  = this.getViewData().controlId;
		
 		return new sap.m.Page(this.sPrefixId + "feedTypePage", {
			title: this.oLangBundle.getText("FEED_MASTER_PAGE_TITLE"),
			content: [
						new sap.m.List(this.sPrefixId + "FeedTypes", 
							{
								//mode: sap.m.ListMode.SingleSelectMaster,
								inset: true,
								items: [
							         	new sap.m.StandardListItem({
							         		title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_FOLLOWS"),
											type : sap.m.ListType.Active,
											selected: true,
											press : function(){
												oController.listItemPress("follows");
											}
										}),
										new sap.m.StandardListItem({
											title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_COMPANY"),
											type : sap.m.ListType.Active,
											press : function(){
												oController.listItemPress("company");
											}
										}),
										new sap.m.StandardListItem({
											title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_GROUP"),
											type : sap.m.ListType.Active,
											press : function(){
												oController.listItemPress("group");
											}
										}),
										new sap.m.StandardListItem({
											title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_BO"),
											type : sap.m.ListType.Active,
											press : function(){
												oController.listItemPress("context");
											}
										})
                                     ]})
			]
		});
	}

});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*******************************************************
* GroupMaster View Controller
*
* Is the controller for the GroupMaster View and is 
* responsible for setting the view data model, for
* binding data to the group list and for navigating to 
* a previous master page
********************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.splitApp.GroupMaster", {
	
/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initializes class variables.
* @private
*/
	onInit: function() {
		this.oOdataModel = this.getView().getViewData().odataModel;
		this.oBusinessObject = this.getView().getViewData().object;
		this.sFeedType = this.getView().getViewData().feedType;
		this.sPageTitle = this.getView().getViewData().pageTitle;
		this.sJamToken = this.getView().getViewData().jamToken;
		this.oLangBundle = this.getView().getViewData().langBundle;
		this.sPrefixId  = this.getView().getViewData().controlId;
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* It binds data to the groups list.
* @private
*/
	onBeforeRendering: function() {
		var self = this;
		this.getView().groupMasterPage.setTitle(this.sPageTitle);
		
		this.initializeUtils();
		this.setViewModel();
		
		var oStandardListItem = new sap.m.StandardListItem();
		oStandardListItem.bindProperty("title", "Name");
		oStandardListItem.setType(sap.m.ListType.Active);
		oStandardListItem.attachPress(function(){
			var sGroupId = this.getBindingContext().getProperty(this.getBindingContext().getPath()).Id;
			var sGroupName = this.getBindingContext().getProperty(this.getBindingContext().getPath()).Name;
			var oWidgetData = self.oJamUtil.prepareWidgetData(self.sJamToken, self.sFeedType, sGroupId);
			self.oJamUtil.createJamWidget(self.sPrefixId + "widgetContainer", oWidgetData);
			sap.ui.getCore().byId(self.sPrefixId + "feedDetailsPage").setTitle(sGroupName);
			
		});
		sap.ui.getCore().byId(this.sPrefixId + "groupsList").bindItems("/groupsData", oStandardListItem);
		
		var oStandardListItem_AllGroups = 
			new sap.m.StandardListItem({title: this.oLangBundle.getText("GROUP_MASTER_LIST_All_GROUPS")});
		oStandardListItem_AllGroups.setType(sap.m.ListType.Active);
		oStandardListItem_AllGroups.attachPress(function(){
			var sGroupIds = self.oODataUtil.getGroupIds(self.aGroupData);
			var oWidgetData = self.oJamUtil.prepareWidgetData(self.sJamToken, self.sFeedType, sGroupIds);
			self.oJamUtil.createJamWidget(self.sPrefixId + "widgetContainer", oWidgetData);
			sap.ui.getCore().byId(self.sPrefixId + "feedDetailsPage").setTitle(self.oLangBundle.getText("GROUP_MASTER_LIST_All_GROUPS"));
		});
		sap.ui.getCore().byId(this.sPrefixId + "groupsList").insertItem(oStandardListItem_AllGroups,0);
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @private
*/
	onAfterRendering: function() {
	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @private
*/
//	onExit: function() {
//
//	}
	
/**
 * Initializes an object from the sap.collaboration.components.utils.OdataUtil class
 * and an object from the sap.collaboration.components.utils.JamUtil class
 * @private
 */
	initializeUtils : function() {
		this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		this.oJamUtil = new sap.collaboration.components.utils.JamUtil();
	},
	
/**
 * Sets the data model to the view
 * @private
 */
	setViewModel : function() {
		this.aGroupData;
		this.sFeedType === sap.collaboration.FeedType.group?
				this.aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/Groups")
			    :
		    	this.aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/BusinessObjects('" + this.oBusinessObject.id + "')/AssignedGroups");
			
	   	this.oViewData = {
			groupsData:	this.aGroupData
		};
	   	
	   	this.oViewModel = new sap.ui.model.json.JSONModel(this.oViewData);
		this.getView().setModel(this.oViewModel);
			
	},
	
/**
 * Handler for the "showNavButton" press event
 * @private
 */
	onNavButtonTap : function() {
		sap.ui.getCore().getEventBus().publish("nav", "back");
	}
	
});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*******************************************************
* GroupMaster View
*
* Is a view that displays the ui for a ui5 page.
* This page will contain a list of JAM groups
* It will be used as a mater page for the ui5 split app
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.splitApp.GroupMaster", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.splitApp.GroupMaster";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates a UI5 page that has a list. 
	* @param {sap.ui.controller} oController The view Controller 
	* @private
	*/ 
	createContent : function(oController) {
		
		this.sPrefixId  = this.getViewData().controlId;
		
		this.groupMasterPage = 
			new sap.m.Page(this.sPrefixId  + "groupPage", {
				title: this.getViewData().groupMasterpageTitle,
				showNavButton : true,
				navButtonPress: oController.onNavButtonTap,
				content: [
				          	new sap.m.List(this.sPrefixId + "groupsList",{inset: true})
				          ]
		});
		
		return this.groupMasterPage;
	}

});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*************************************************************
* SplitApp View Controller
*
* Is the controller for the SplitApp View and is responsible 
* for creating and setting the master and detail pages for 
* the ui5 split app and for registering the navigation events
**************************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.splitApp.SplitApp", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initializes class variables and registers event handlers for the navigation.
* @private
*/
	onInit: function() {
		this.oSplitApp = this.getView().oSplitApp;
		this.sAppType = this.getView().getViewData().appType;
		this.oOdataModel = this.getView().getViewData().odataModel;
		this.oBusinessObject = this.getView().getViewData().object;
		this.oLangBundle = this.getView().getViewData().langBundle;
		
		this.sPrefixId = this.getView().getViewData().controlId;
		
		this.oEventBus = sap.ui.getCore().getEventBus();
		this.oEventBus.subscribe("nav", "to", this.navToHandler, this);
		this.oEventBus.subscribe("nav", "back", this.navBackHandler, this);
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered.
* (NOT before the first rendering! onInit() is used for that one!).
* It calls the createMasterDetail() function. Please refer to this function for the JSDoc.
* @private
*/
	onBeforeRendering: function() {
		this.createMasterDetail();
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @private
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @private
*/
//	onExit: function() {
//
//	}
	
/**
 * Creates and sets the master and detail pages for the split app.
 * The master page on initial load will be the Feed Type Master View.
 * The detail page will be the Detail View.
 * @private
 */
	createMasterDetail : function() {
		
		var oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		var sJamUrl = oODataUtil.getJamUrl(this.oOdataModel);
		this.sJamToken = oODataUtil.getJamToken(this.oOdataModel);
		
		var oMasterView = sap.ui.view({
			id: this.sPrefixId + "masterView", 
			viewData : {
				controlId: this.sPrefixId,
				jamToken: this.sJamToken,
				langBundle: this.oLangBundle,
				object: this.oBusinessObject
			}, 
			type: sap.ui.core.mvc.ViewType.JS, 
			viewName: "sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster"
		});
		
		var oDetailView = sap.ui.view({
			id: this.sPrefixId + "detailView", 
			viewData : {
				controlId: this.sPrefixId,
				appType: this.sAppType,
				jamURL:	sJamUrl,
				jamToken: this.sJamToken,
				langBundle: this.oLangBundle,
				object: this.oBusinessObject
			}, 
			type: sap.ui.core.mvc.ViewType.JS, 
			viewName: "sap.collaboration.components.fiori.feed.commons.Detail"
		});
		
		this.oSplitApp.addDetailPage(oDetailView); 
		this.oSplitApp.addMasterPage(oMasterView);
		this.oSplitApp.setInitialDetail(oDetailView); 
		this.oSplitApp.setInitialMaster(oMasterView);
	},
	
/**
 * Handler for the "navigate to" event.
 * This handler creates the Group Master View in case it was not previously created and add it to the master page of the split app.
 * @param {string} sChannelId The ID for the Navigation channel.
 * @param {string} sEventId The ID of the Event.
 * @param {object} oData The navigation data.
 * @private
 */
	navToHandler : function(sChannelId, sEventId, oData) {
        if (oData && oData.viewId === this.sPrefixId + "groupMasterView") {
        	if (!sap.ui.getCore().byId(oData.viewId)) {
				var oView = sap.ui.view({
					id: oData.viewId, 
					viewData : {
						controlId: this.sPrefixId,
						odataModel:  this.oOdataModel,
						object:	this.oBusinessObject,
						feedType: oData.data.feedType,
						pageTitle: oData.data.groupMasterPageTitle,
						jamToken: this.sJamToken,
						langBundle: this.oLangBundle
					}, 
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: oData.viewName
				});
				
				this.oSplitApp.addMasterPage(oView);
			} 
        	else{
        		// the rerender() will not create the content of the view again or call the init of the controller, it will only start from calling the onBeforeRendering()
        		// it is needed so that the group list is rebound again with the groups in case we switch from groups to bo groups or in case the data changes on the backend
        		// ie to get always the latest data (groups)
        		sap.ui.getCore().byId(oData.viewId).getController().sFeedType = oData.data.feedType;
        		sap.ui.getCore().byId(oData.viewId).getController().sPageTitle = oData.data.groupMasterPageTitle;
        		sap.ui.getCore().byId(oData.viewId).rerender();
        	}
        	this.oSplitApp.to(oData.viewId);
        } else {
            jQuery.sap.log.error("nav-to event cannot be processed. Invalid data: " + oData);
        }
    },

/**
 * Handler for the "navigate back" event.
 * It navigates back to the previous master page.
 * @private
 */
    navBackHandler : function() {
        this.oSplitApp.backMaster();
    }

});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*******************************************************
* SplitApp View
*
* Is a view that displays the ui for a ui5 split app.
* This split app will contain a master page and a detail
* page. The master page will display either a list of 
* Feed Types or a list of JAM groups. The detail page
* will display the JAM Feed WIdget
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.splitApp.SplitApp", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.splitApp.SplitApp";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away. 
	* It creates a UI5 split app
	* @param {sap.ui.controller} oController The view Controller 
	* @private
	*/ 
	createContent : function(oController) {
		this.sPrefixId = this.getViewData().controlId;
		this.oSplitApp = new sap.m.SplitApp(this.sPrefixId + "splitApp");
		return this.oSplitApp;
	}

});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

sap.ui.controller("sap.collaboration.components.fiori.sharing.FolderSelection", {
	
	constants:{
		top: 20
	},
	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created.
	 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * Initialize class variables, set the view model and bind the list items
	 * memberOf DisplayFolders
	 */
	onInit: function() {
		this.oLangBundle = this.getView().getViewData().languageBundle;
		
		this.oODataModel = this.getView().getViewData().oDataModel;
		this.oODataUtil = this.getView().getViewData().oDataUtil;
		
		this.sGroupId =  this.getView().getViewData().groupId;
		this.oFolderSelectionDialog = this.getView().getViewData().folderSelectionDialog; //needed to change the headerbar
		
		this.sCurrentFolderId='';
		this.aFolderBuffer = [];
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
*/
	onBeforeRendering: function() {
		this.refreshFolderSelection(this.sCurrentFolderId);
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
*/
	onAfterRendering: function() {
	},
	/**
	 * Rebuilds the displayed folder list 
	 * @private
	 */
	refreshFolderSelection: function(sCurrentFolderId){
		// Build new list and replace it in the dialog
		var aFolders = this.buildFolderList(sCurrentFolderId);
		this.setViewModel(aFolders);
		this.bindFoldersList();
		this.refreshHeaderBar(sCurrentFolderId);
				
	},
	/**
	 * Fetch the folders to be displayed 
	 * @private
	 */
	buildFolderList: function(sFolderId){
		var aSubFolders = [];
		

		var oFolder = this.getFolder(sFolderId);
		aSubFolders = this.getSubFolders(oFolder);
		
		// add empty folder items so that the number of folders in the list is displayed correctly
		if(oFolder.subFolderCount > aSubFolders.length){
			var difference = oFolder.subFolderCount - aSubFolders.length;
			for(var i=0; i<difference; i++){
				aSubFolders.push({});
			}
		}
		return aSubFolders;
	},
	/**
	* Sets the view model with the passed folders
	* @private
	*/
	setViewModel : function(aFolders) {
		
	   	this.oViewData = {
   			folders: aFolders
		};
	   	
	   	this.oViewModel = new sap.ui.model.json.JSONModel(this.oViewData);
		this.getView().setModel(this.oViewModel);
	},
	/**
	* Binds data to the folders List
	* @private
	*/
	bindFoldersList : function() {
		var self = this;
		var oItemTemplateStandardIcon = new sap.m.StandardListItem({
			title : "{name}",
			icon : "{icon}",
			type : sap.m.ListType.Navigation,
			press: self.selectFolder()
		});
		this.getView().oFoldersList.bindAggregation("items","/folders", oItemTemplateStandardIcon);
	},
	/**
	 * Refreshes the header bar (title, back button visibility)
	 * @private
	 */
	refreshHeaderBar: function(sFolderId){
		// Set Dialog
		if(!sFolderId == ""){		// Folder
			var oFolder = this.getFolder(sFolderId);
			this.setFolderSelectionDialogTitle(oFolder.name);
			this.setFolderSelectionDialogBackButtonVisibility(true);
		}else{						// Root Folder
			this.setFolderSelectionDialogTitle(this.oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT"));
			this.setFolderSelectionDialogBackButtonVisibility(false);
		}
	},
	/**
	 * Event handler for when folder is clicked on		
	 */
	selectFolder:  function(oEvent){
		var self = this;
		return function(oEvent){
			var sFolderId = oEvent.oSource.getBindingContext().getObject().id;
			
			self.refreshFolderSelection(sFolderId);
			self.sCurrentFolderId = sFolderId;
		};
	},
	/**
	 * Event handler for navigating back
	 */
	navigateBack: function(oEvent){
		var oCurrentFolder = this.getFolder(this.sCurrentFolderId);
		var sParentId = oCurrentFolder.parent;

		this.refreshFolderSelection(sParentId);
		this.sCurrentFolderId = sParentId;
	},
	/**
	 * Set the title in the header bar 
	 * @private
	 */
	setFolderSelectionDialogTitle: function(folderName){
		var oHeaderBar = this.oFolderSelectionDialog.getCustomHeader();
		var oTitleLabel = oHeaderBar.getContentMiddle()[0];
		oTitleLabel.setText(folderName);
	},
	/**
	 * Set the visibility of the back button in the header bar
	 * @private
	 */
	setFolderSelectionDialogBackButtonVisibility: function(isVisible){
		var oHeaderBar = this.oFolderSelectionDialog.getCustomHeader();
		var oBackButton = oHeaderBar.getContentLeft()[0];
		oBackButton.setVisible(isVisible);
	},
	/**
	 * Returns the current selected folder
	 * used by AttachmentUtils
	 * @private
	 */
	getCurrentFolder: function(){
		if(this.sCurrentFolderId === ''){
			return {name: this.oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT"), id:"" };
		}
		return this.getFolder(this.sCurrentFolderId);
	},

	/**
	 * Event handler for when list update is triggered
	 * @private
	 */
	updateStarted: function(oControlEvent){
		if(oControlEvent.mParameters.reason == 'Growing') {
			var aSubFolders = [];
			var oFolder = this.getFolderFromBuffer(this.sCurrentFolderId);
			
			var subFolderCount =  this.getSubFoldersFromBuffer(this.sCurrentFolderId).length;
			if (oFolder.subFolderCount != subFolderCount ){
				aSubFolders = this.fetchSubFolders( this.sCurrentFolderId, subFolderCount );
			}
			if(aSubFolders.length > 0) {
				this.addFoldersToBuffer(aSubFolders);
				// replace the blank entries in the view model
				for( var i=0; i<aSubFolders.length; i++ ){
			  		this.oViewData.folders[i+subFolderCount] = aSubFolders[i];	
			  	}		
			}
		}
	},
	
	/******************************
	 * FOLDER BUFFER METHODS
	 ******************************/
	/**
	 * Save folders to buffer and returns array of Folder objects
	 * @private
	 */
	addFoldersToBuffer : function(aFolders){
		if(!this.aFolderBuffer){
			this.aFolderBuffer = [];
		}
		
		for(var i=0; i<aFolders.length; i++){
			this.aFolderBuffer.push(aFolders[i]);
		}
	},
	/**
	 * Returns sub folders from buffer
	 * @private
	 */
	getSubFoldersFromBuffer : function(sFolderId){
		var sId = '';
		if(sFolderId){
			sId = sFolderId;
		}
		
		var hasParent = function(folder){
			return folder.parent == sId;
		};
		
		return this.aFolderBuffer.filter(hasParent);
	},
	/**
	 * Returns folder from buffer
	 * @private
	 */
	getFolderFromBuffer : function(sFolderId){
		var hasId = function(folder){
			return folder.id == sFolderId;
		};
		var aFiltered =  this.aFolderBuffer.filter(hasId);
		return aFiltered[0];// should only find 1
	},
	/**
	 * Return specific folder
	 * @private
	 */
	getFolder : function(sFolderId){
		var folder = this.getFolderFromBuffer(sFolderId);
		if(!folder && sFolderId == ''){ // folder is not in buffer && it's the root folder.
			var result = this.oODataUtil.getSubFolders(this.oODataModel, this.sGroupId, null, '0', this.constants.top);
			folder = { name: this.oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT"), id: '', parent: '0', subFolderCount : result.count, icon:"sap-icon://folder" };
			this.addFoldersToBuffer([folder]); // add root folder to buffer
			
			var aSubFolders = this.convertFolderEntities(result.folders, '');
			this.addFoldersToBuffer(aSubFolders); 

		}
		if(folder.subFolderCount == undefined){ // folder is in buffer but does not have the subfolderCount
			var result = this.oODataUtil.getSubFolders(this.oODataModel, null, sFolderId, '0', this.constants.top);
			folder.subFolderCount = result.count;
			
			var aSubFolders = this.convertFolderEntities(result.folders, sFolderId );
			this.addFoldersToBuffer(aSubFolders); 

		}
		return folder;
	},
	/**
	 * Return subfolders of folder
	 * @private
	 */
	getSubFolders : function(oFolder){
		var aSubFolders = [];
		if(oFolder.subFolderCount > 0){
			aSubFolders = this.getSubFoldersFromBuffer(oFolder.id);
		}
		return aSubFolders;
	},
	/**
	 * Convert the folder entities received from back end to this format
	 * { name, id, parent, hasNoChildren }
	 * @private 
	 */
	convertFolderEntities : function(aFolders, sParentId) {
		var aConvertedFolders = [];
		for(var i=0; i<aFolders.length; i++){
			aConvertedFolders.push( { name: aFolders[i].Name, id: aFolders[i].Id, parent: sParentId, icon:"sap-icon://folder" } );
		}
		return aConvertedFolders;
	},

	/**
	 * Returns sub folders of either the group or folder from Jam
	 * If sFolderId is blank or undefined, the sub folders of the root of the group is returned
	 * @private 
	 */
	fetchSubFolders : function(sFolderId, skip ){
		var aSubFolders = [];

		if(!sFolderId || sFolderId == ''){ 		// root folder
			aSubFolders = this.oODataUtil.getSubFolders(this.oODataModel, this.sGroupId, null, skip, this.constants.top).folders; // group
			aSubFolders = this.convertFolderEntities(aSubFolders, '');
		}
		else{		// folder
			aSubFolders = this.oODataUtil.getSubFolders(this.oODataModel, null, sFolderId, skip, this.constants.top).folders; // folder
			aSubFolders = this.convertFolderEntities(aSubFolders, sFolderId );
		}
		return aSubFolders;
	},
	
	/**
	 * Clear the folder buffer
	 * @private
	 */
	clearFolderBuffer: function(){
		this.oFolderSelectionDialog.getContent()[0].getController().clearFolderBuffer();
	}
});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

sap.ui.jsview("sap.collaboration.components.fiori.sharing.FolderSelection", {

	/**
	 * Specifies the Controller belonging to this View. 
	 * In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	 * memberOf DisplayFolders
	 */ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.sharing.FolderSelection";
	},

	/**
	 * Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	 * Since the Controller is given to this method, its event handlers can be attached right away.
	 * Creates and returns a UI5 mobile list 
	 */ 
	createContent : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		
		this.oFoldersList = new sap.m.List(sPrefixId + "_FoldersList", {
			inset : false,
			showNoData : true,
			noDataText : this.getViewData().languageBundle.getText("FOLDER_EMPTY"),
			growing : true,
			growingThreshold : oController.constants.top,
			updateStarted: function(oControlEvent){ oController.updateStarted(oControlEvent); }
		});
		
		var oDisplayFoldersVBox = new sap.m.VBox(sPrefixId + "_DisplayFoldersLayout", {
			width: "100%",
			height: "100%",
		    items: [this.oFoldersList]
		});
		
		return oDisplayFoldersVBox;
	}
});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

sap.ui.jsview("sap.collaboration.components.fiori.sharing.NoGroups", {

	/**
	 * Specifies the Controller belonging to this View. 
	 * In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	 * memberOf NoGroups
	 */ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.sharing.NoGroups";
	},

	/**
	 * Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	 * Since the Controller is given to this method, its event handlers can be attached right away.
	 * Creates and returns a UI5 mobile VBox 
	 */ 
	createContent : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		
		this.oNoGroupsVBox = new sap.m.VBox(sPrefixId + "_NoGroupsVbox");
		this.oNoGroupsVBox.addItem(this.createNoDataLayout());
		
		return this.oNoGroupsVBox;
	},
	
	/** 
	 * Creates the UI5 elements/controls that should be rendered in the VBox
	 * @param {sap.ui.controller} oController The view Controller
	 * @private
	 */ 
	createNoDataLayout : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		var oLangBundle = this.getViewData().langBundle;
		var sJamUrl = this.getViewData().jamUrl;
		
		// Prepare the UI controls in case of no groups available 
		this.oNoDataLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_NoDataLayout", {
			width: "100%",
		    content: [
						new sap.ui.core.HTML(sPrefixId + "_NoDataDiv", {content: "<div>" + oLangBundle.getText("NO_GROUPS_ERROR") + "</div>"}),
						new sap.m.VBox(sPrefixId + "_LinkVbox",{
							alignItems: sap.m.FlexAlignItems.End,
							items: [
				                new sap.m.Link(sPrefixId + "_JamLink", {
				                	text : oLangBundle.getText("JAM_URL_TEXT"),
				                	target: "_blank",
				                	href : sJamUrl
				                })
			                ]
						}).addStyleClass("linkVBox")
			]
		});
		
		return this.oNoDataLayout;
		
	}
});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

sap.ui.jsview("sap.collaboration.components.fiori.sharing.Sharing", {

	/**
	 * Specifies the Controller belonging to this View. 
	 * In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	 * @memberOf Sharing
	 */ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.sharing.Sharing";
	},

	/**
	 * Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	 * Since the Controller is given to this method, its event handlers can be attached right away.
	 * Creates and returns a UI5 mobile VBox 
	 * @memberOf Sharing
	 */ 
	createContent : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		
		this.oSharingVBox = new sap.m.VBox(sPrefixId + "_SharingVbox");
		this.createSharingVBoxContent(oController);
		
		return this.oSharingVBox;
	},
	
	/**
	 * Creates the content for the Sharing VBox
	 * @private
	 */
	createSharingVBoxContent : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		var oLangBundle = this.getViewData().langBundle;
		var sJamUrl = this.getViewData().jamUrl;
		
		this.oObjectDisplay = this.getViewData().objectDisplay;
		if(this.oObjectDisplay){
			this.oSharingVBox.addItem(this.oObjectDisplay);
		}
		
		// GROUP SELECTION 
		var oGroupLabel = new sap.m.Label(sPrefixId + "_GroupLabel", {
			text: oLangBundle.getText("GRP_SELECT_LABEL"),
			required : true,
			width: "100%"
		}); 
				
		this.oGroupSelect = new sap.m.Input(sPrefixId + "_GroupSelect",{
			width: "100%",
			type: sap.m.InputType.Text,
			placeholder: oLangBundle.getText("GRP_SELECT_BUTTON_TEXT"),
			showValueHelp: true,
			enabled: true,
			editable: true,
			valueHelpOnly: true,
			valueHelpRequest: function(oControlEvent) {
						oController.onGroupSelectValueHelpPress(oControlEvent);
			},
			ariaLabelledBy: sPrefixId + "_GroupLabel"
		});
		
		var oGroupSelectionLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_GroupSelectionLayout", {
			width: "100%",
			layoutData: new sap.m.FlexItemData({growFactor: 1}),
		    content: [
						oGroupLabel, 
						this.oGroupSelect
			]
		}).addStyleClass("sharingVBox");
		this.oSharingVBox.addItem(oGroupSelectionLayout);
		
		// ATTACHMENTS 
		var oAttachmentsLabel = new sap.m.Label(sPrefixId + "_AttachmentsLabel", {
			text: oLangBundle.getText("ATTACHMENTS_LABEL"),
			required : false,
			width: "100%"
		}); 
		this.oAttachmentsInput = new sap.m.Input(sPrefixId + "_AttachmentsInput", {
			width: "100%",
			type: sap.m.InputType.Text,
			placeholder: oLangBundle.getText("ATTACHMENTS_FIELD_TEXT",[""]),
			showValueHelp: true,
			enabled: true,
			editable: true,
			valueHelpOnly: true,
			valueHelpRequest: function(oControlEvent) {
				oController.onAttachmentsValueHelpPress(oControlEvent);
			},
			ariaLabelledBy: sPrefixId + "_AttachmentsLabel"
		});
		
		this.AttachmentsInputLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_AttachmentsInputLayout", {
			width: "100%",
			layoutData: new sap.m.FlexItemData({growFactor: 1}),
		    content: [
						oAttachmentsLabel, 
						this.oAttachmentsInput
			]
		}).addStyleClass("sharingVBox");
		this.oSharingVBox.addItem(this.AttachmentsInputLayout);
			
		// TARGET FOLDER
		var oTargetFolderLabel = new sap.m.Label(sPrefixId + "_TargetFolderLabel", {
			text: oLangBundle.getText("TARGET_FOLDER_LABEL"),
			required : false,
			width: "100%"
		}); 
		
		this.oTargetFolderInput = new sap.m.Input(sPrefixId + "_TargetFolderInput", {
			width: "100%",
			type: sap.m.InputType.Text,
			placeholder: oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT"),
			showValueHelp: true,
			enabled: true,
			editable: true,
			valueHelpOnly: true,
			valueHelpRequest: function(oControlEvent) {
				oController.onTargetFolderValueHelpPress(oControlEvent);
			},
			ariaLabelledBy: sPrefixId + "_TargetFolderLabel"
		});

		this.oTargetFolderInputLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_TargetFolderInputLayout", {
			width: "100%",
			layoutData: new sap.m.FlexItemData({growFactor: 1}),
		    content: [
						oTargetFolderLabel, 
						this.oTargetFolderInput
			]
		}).addStyleClass("sharingVBox");
		this.oSharingVBox.addItem(this.oTargetFolderInputLayout);
		
		// COMMENTS BOX
		var oNoteLabel = new sap.m.Label(sPrefixId + "_NoteLabel", {
			text: oLangBundle.getText("ADD_NOTE_LABEL"),
			width: "100%"
		}); 
		
		var iObjectId_CharLength;
		this.getViewData().objectId ? iObjectId_CharLength = this.getViewData().objectId.length : iObjectId_CharLength = 0;
		var iNoteTextArea_MaxChar = 1000 - iObjectId_CharLength - 1; // -1 to account for the newline we add as separator bet the Obj Id and the note in the feed
		
		this.oNoteTextArea = new sap.collaboration.components.controls.SocialTextArea(sPrefixId + "_NoteTextArea", {
			initialValue: this.getViewData().objectShare,
			rows: 6,
			width : "100%",
			suggestionPlacement: sap.m.PlacementType.Top,
			maxLength: iNoteTextArea_MaxChar,
			suggest: oController.onSuggestion.bind(oController),
			ariaLabelledBy: sPrefixId + "_NoteLabel"
		});
		
		var oNoteLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_NoteLayout", {
			width: "100%",
			layoutData: new sap.m.FlexItemData({growFactor: 2}),
		    content: [
						oNoteLabel, 
						this.oNoteTextArea
			]
		}).addStyleClass("sharingVBox");
		this.oSharingVBox.addItem(oNoteLayout);
		
		// ATTACHMENTS ONLY CHECKBOX
		this.oAttachmentCB = new sap.m.CheckBox(sPrefixId + "_AttchmentCB",{
			text: oLangBundle.getText("SHARE_ATTACHMENTS_ONLY_LABEL"),
			enabled: false,
			select: function(){
				oController.onAttachmentCheckBoxSelected();
			},
			ariaLabelledBy: sPrefixId + "_AttchmentCB"
		});
		this.oSharingVBox.addItem(this.oAttachmentCB);
	}
});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
sap.ui.jsview("sap.collaboration.components.socialprofile.SocialProfile", {

	/** 
	* Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	* @memberOf sap.collaboration.components.socialprofile.SocialProfile
	*/
	getControllerName : function() {
		return "sap.collaboration.components.socialprofile.SocialProfile";
	},

	/** 
	* Is the place where the UI is constructed (inherited).<br> 
	* It is initially called once after the Controller has been instantiated.
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates the VBox for the Responsive Popover
	* @param {sap.ui.controller} oController The view Controller 
	* @private
	* @memberOf sap.collaboration.components.socialprofile.SocialProfile
	*/ 
	createContent : function(oController) {
		this._sPrefixId = this.getId();
		this._oVBox= new sap.m.VBox(this._sPrefixId + "_VBox").addStyleClass("vbox");
		this._createVBoxContent();
		
		return this._oVBox;
	},
	
	/**
	 * Creates the content for the Social Profile VBox
	 * @private
	 * @memberOf sap.collaboration.components.socialprofile.SocialProfile
	 */
	_createVBoxContent : function(){
		this._oVBox.addItem(this._createHBoxHeader()); // add the header (HBox that contains the user image, full name and title) to the VBox content first
		
		var oContactDetailsLabel = new sap.m.Label(this._sPrefixId + "_ContactDetailsLabel", {
			text: this.getViewData().langBundle.getText("SP_CONTACT_DETAILS_LABEL")
		}).addStyleClass("heading");	
		
		// mobile #
		var oMobileNumber = new sap.m.Text(this._sPrefixId + "_MobileNumber", {
			text: "{/MemberProfile/MobilePhoneNumber}"
		});
		var oMobileLabel = new sap.m.Label(this._sPrefixId + "_MobileLabel", {
			text: this.getViewData().langBundle.getText("SP_MOBILE_LABEL"),
			labelFor: oMobileNumber.getId()
		}).addStyleClass("label");	
		
		// work #
		var oWorkNumber = new sap.m.Text(this._sPrefixId + "_WorkNumber", {
			text: "{/MemberProfile/WorkPhoneNumber}"
		});
		var oWorkLabel = new sap.m.Label(this._sPrefixId + "_WorkLabel", {
			text: this.getViewData().langBundle.getText("SP_WORK_LABEL"),
			labelFor: oWorkNumber.getId()
		}).addStyleClass("label");	
		
		// email address
		var oEmail = new sap.m.Link(this._sPrefixId + "_Email", {
			text: "{/Email}",
			press: function(){
				this.setHref("mailto:" + this.getText());
			}
		});
		var oEmailLabel = new sap.m.Label(this._sPrefixId + "_EmailLabel", {
			text: this.getViewData().langBundle.getText("SP_EMAIL_LABEL"),
			labelFor: oEmail.getId()
		}).addStyleClass("label");	
		
		var oCompanyDetailsLabel = new sap.m.Label(this._sPrefixId + "_CompanyDetailsLabel", {
			text: this.getViewData().langBundle.getText("SP_COMPANY_DETAILS_LABEL")
		}).addStyleClass("heading");	
		
		// company address
		var oCompanyAddress = new sap.m.Text(this._sPrefixId + "_CompanyAddress", {
			text: "{/MemberProfile/Address}"
		});
		var oCompanyAddressLabel = new sap.m.Label(this._sPrefixId + "_CompanyAddressLabel", {
			text: this.getViewData().langBundle.getText("SP_COMPANY_ADDRESS_LABEL"),
			labelFor: oCompanyAddress.getId()
		}).addStyleClass("label");	
		
		this._oVBox.addItem(oContactDetailsLabel)
		.addItem(oMobileLabel)
		.addItem(oMobileNumber)
		.addItem(oWorkLabel)
		.addItem(oWorkNumber)
		.addItem(oEmailLabel)
		.addItem(oEmail)
		.addItem(oCompanyDetailsLabel)
		.addItem(oCompanyAddressLabel)
		.addItem(oCompanyAddress);
	},
	
	/**
	 * Creates the content for the Social Profile Header HBox
	 * @private
	 * @memberOf sap.collaboration.components.socialprofile.SocialProfile
	 */
	_createHBoxHeader : function(){
			var oHeaderVBox = new sap.m.VBox(this._sPrefixId + "_HeaderVBox").addStyleClass("headervbox");
			
			var oFullName = new sap.m.Text(this._sPrefixId + "_FullName", {
				text: "{/FullName}",
				width: "200px",
				maxLines: 1
			}).addStyleClass("fullname");
			
			var oRole = new sap.m.Text(this._sPrefixId + "_Role", {
				text: "{/Title}",
				width: "200px",
				maxLines: 1
			}).addStyleClass("role");
			
			oHeaderVBox.addItem(oFullName).addItem(oRole);
			
			var oHeaderHBox = new sap.m.HBox(this._sPrefixId + "_HeaderHBox", {
				height: "48px"
			});
			
			var oUserImage = new sap.m.Image(this._sPrefixId + "_HeaderUserImage", {
				src: "{/UserImage}",
				alt: "{/FullName}",
				width: "48px",
				height: "48px"
			}).addStyleClass("image");
		
			var oNoUserHeader = new sap.m.ObjectStatus(this._sPrefixId + "_NoUserHeader", {
				text: this.getViewData().langBundle.getText("SP_NO_USER"), 
				state: "Warning", 
				icon: "sap-icon://alert",
				visible: false
			});

		oHeaderHBox.addItem(oUserImage)
		.addItem(oHeaderVBox)
		.addItem(oNoUserHeader);
		
		return oHeaderHBox;
	},
	
	/**
	 * Reset the content header in the Popover to have the image, user full name and role visible
	 * @public
	 * @memberOf sap.collaboration.components.socialprofile.SocialProfile
	 */
	resetHeader : function(){
		var oNouserHeader = sap.ui.getCore().byId(this._sPrefixId + "_NoUserHeader");
		
		if (oNouserHeader.getVisible() === true) {
			oNouserHeader.setVisible(false);
			sap.ui.getCore().byId(this._sPrefixId + "_HeaderVBox").setVisible(true);
			sap.ui.getCore().byId(this._sPrefixId + "_HeaderUserImage").setVisible(true);
		}
	},
	
	/**
	 * Sets the header for the content if the user does not exist
	 * @public
	 * @memberOf sap.collaboration.components.socialprofile.SocialProfile
	 */
	setHeaderNoUser : function(){
		var oUserImage = sap.ui.getCore().byId(this._sPrefixId + "_HeaderUserImage");
		
		if (oUserImage.getVisible() === true) {
			oUserImage.setVisible(false);
			sap.ui.getCore().byId(this._sPrefixId + "_HeaderVBox").setVisible(false);
			sap.ui.getCore().byId(this._sPrefixId + "_NoUserHeader").setVisible(true);
		}
	}
});
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2015 SAP AG. All rights reserved
 */
sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.filter.FilterType", {
	constructor: function(){
		if(Object.freeze){
			Object.freeze(this);
		}
	},
	
	FILTER_TYPE:
			{
				feedUpdates: "FeedUpdates",
				systemUpdates: "SystemUpdates",
				custom: "Custom"
			}
});
/**
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

sap.ui.base.Object.extend("sap.collaboration.components.utils.MediaTypeToSAPIcon",{
	
});

/**
 * Returns an SAP icon for a media type
 * @param {String} sMediaType - Media Type
 * @returns {String} SAP icon
 */
sap.collaboration.components.utils.MediaTypeToSAPIcon.getSAPIconForMediaType = function(sMediaType){
	var DEFAULT_SAPICON = "sap-icon://document";
	var aTokens = sMediaType.split("/");
	var sType = aTokens[0];
	var sSuffix = aTokens[1];
	
	switch(sType){
		case "audio":
			return "sap-icon://attachment-audio";
		case "video":
			return "sap-icon://attachment-video";
		case "image":
			return "sap-icon://attachment-photo";
		case "text":
			return "sap-icon://document";
		case "application":
			switch(sSuffix){
			 	case "msword":
				case "vnd.openxmlformats-officedocument.wordprocessingml.document":
				case "vnd.openxmlformats-officedocument.wordprocessingml.template":
				case "vnd.ms-word.document.macroEnabled.12":
				case "vnd.ms-word.template.macroEnabled.12":
					return "sap-icon://doc-attachment";
				case "vnd.ms-excel":
				case "vnd.openxmlformats-officedocument.spreadsheetml.sheet":
				case "vnd.openxmlformats-officedocument.spreadsheetml.template":
				case "vnd.ms-excel.sheet.macroEnabled.12":
				case "vnd.ms-excel.template.macroEnabled.12":
				case "vnd.ms-excel.addin.macroEnabled.12":
				case "vnd.ms-excel.sheet.binary.macroEnabled.12":
					return "sap-icon://excel-attachment";
				case "vnd.ms-powerpoint":
				case "vnd.openxmlformats-officedocument.presentationml.presentation":
				case "vnd.openxmlformats-officedocument.presentationml.template":
				case "vnd.openxmlformats-officedocument.presentationml.slideshow":
				case "vnd.ms-powerpoint.addin.macroEnabled.12":
				case "vnd.ms-powerpoint.presentation.macroEnabled.12":
				case "vnd.ms-powerpoint.template.macroEnabled.12":
				case "vnd.ms-powerpoint.slideshow.macroEnabled.12":
					return "sap-icon://ppt-attachment";
				case "pdf":
					return "sap-icon://pdf-attachment";
				case "mp4":
					return "sap-icon://attachment-video";
				default:
					return DEFAULT_SAPICON;
			}
		default:
			return DEFAULT_SAPICON;
	}
};
jQuery.sap.declare('sap.collaboration.library-all');
jQuery.sap.declare('sap.collaboration.components.controls.SuggestionUtility'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.app.App.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.app.App.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.commons.Detail.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.GroupMaster.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.GroupMaster.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.SplitApp.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.SplitApp.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.sharing.FolderSelection.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.sharing.FolderSelection.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.sharing.NoGroups.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.sharing.Sharing.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.socialprofile.SocialProfile.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.socialtimeline.filter.FilterType'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.utils.MediaTypeToSAPIcon'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.collaboration.components.controls.FeedEntryEmbeddedRenderer') ) {
/**
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.collaboration.components.controls.FeedEntryEmbeddedRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/collaboration/components/controls/FeedEntryEmbeddedRenderer",[],
	function(){
	/**
	 * FeedEntryEmbedded renderer.
	 * @namespace
	 */
	var FeedEntryEmbeddedRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * @protected
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer.
	 * @param {sap.ui.core.Control} oFeedEntryEmbedded an object representation of the control that should be rendered.
	 */
	FeedEntryEmbeddedRenderer.render = function(oRm, oFeedEntryEmbedded){

		// The embedded control is divided into 2 parts:
		// 1-Timeline Item Text Display: Text Display of for the feed and timeline entries
		// 2-Timeline Item Content:	The Content contains the content from feed entries (e.g. document, picture, poll...)
		
		// begin DIV
		oRm.write("<div");
		oRm.writeControlData(oFeedEntryEmbedded);
		oRm.write(">");

		// text display
		if (oFeedEntryEmbedded._shouldTextBeRendered()) {
			var sId = oFeedEntryEmbedded.getId();
			// begin DIV collapsed text
			oRm.write("<div id='" + sId + "'>");
			
			// if text content is greater than the specified size limit render short version			
			if (oFeedEntryEmbedded._sText.length > oFeedEntryEmbedded.nMaxCollapsedLength){
								
				oFeedEntryEmbedded.getCollapsedText();

				// begin DIV collapsed text
				oRm.write("<div id='" + sId + "-collapsed-text'");				
				oRm.addClass("sapUiTinyMarginBottom sapCollaborationEmbeddedText");
                oRm.writeClasses();                
				oRm.write(">");
				
				this._renderText(oRm, oFeedEntryEmbedded, oFeedEntryEmbedded._sCollapsedTextWithPlaceholders);				
				
				oRm.write("<span");
				oRm.addClass("sapCollaborationEmbeddedTextSpace");
                oRm.writeClasses();
				oRm.write("></span>");

				if (oFeedEntryEmbedded.oExpandLink === undefined){
					oFeedEntryEmbedded.oExpandLink = oFeedEntryEmbedded.createExpandCollapseLink("TE_MORE");
					oRm.renderControl(oFeedEntryEmbedded.oExpandLink);									
				}
				else{
					oRm.renderControl(oFeedEntryEmbedded.oExpandLink);
				}
				
				oRm.write("</div>");
				// end DIV collapsed text

				// begin DIV for expanded text in hidden state
				oRm.write("<div id='" + sId + "-expanded-text'");				
				oRm.addClass("sapUiTinyMarginBottom sapCollaborationEmbeddedText");
                oRm.writeClasses();
                oRm.write(">");

				this._renderText(oRm, oFeedEntryEmbedded, oFeedEntryEmbedded._sTextWithPlaceholders);			

				oRm.write("<span");
				oRm.addClass("sapCollaborationEmbeddedTextSpace");
                oRm.writeClasses();
				oRm.write("></span>");

                if (oFeedEntryEmbedded.oCollapseLink === undefined){
					oFeedEntryEmbedded.oCollapseLink = oFeedEntryEmbedded.createExpandCollapseLink("TE_LESS");
					oRm.renderControl(oFeedEntryEmbedded.oCollapseLink);									
				}
				else{
					oRm.renderControl(oFeedEntryEmbedded.oCollapseLink);
				}
                
				// end DIV expanded text
				oRm.write("</div>");
			}
			else{
				// begin DIV for expanded text
				oRm.write("<div id='" + sId + "-expanded-text'");
				oRm.addClass("sapUiTinyMarginBottom sapCollaborationEmbeddedText");
                oRm.writeClasses();
                oRm.write(">");
                
                this._renderText(oRm, oFeedEntryEmbedded, oFeedEntryEmbedded._sTextWithPlaceholders);			

				// end DIV
				oRm.write("</div>");
			}
			// end DIV
			oRm.write("</div>");
		}

		// content
		if (oFeedEntryEmbedded._shouldContentBeRendered()) {
			oRm.renderControl(oFeedEntryEmbedded._oTimelineItemContent);	
		}
		
		// end DIV
		oRm.write("</div>");
	};
	/**
	 * Renders the HTML for text with atMentions placeholders, using the provided {@link sap.ui.core.RenderManager}.
	 * @protected
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer.
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered.
	 * @param {string} textToRender the text with placeholders to render
	 */
	FeedEntryEmbeddedRenderer._renderText = function(oRm, oFeedEntryEmbedded, textToRender) {
		var aTextSplitByPlaceholders = oFeedEntryEmbedded._splitByPlaceholders(textToRender);
		for (var i=0; i<aTextSplitByPlaceholders.length; i++) {
			// if placeholder, render the link control
			var rPlaceholderPattern = /@@.\{\d+\}/; // Regex pattern for placeholder
			if (rPlaceholderPattern.test(aTextSplitByPlaceholders[i])) {
				oRm.renderControl(oFeedEntryEmbedded._mAtMentionsLinks[aTextSplitByPlaceholders[i]]);
			}
			// if content type is HTML, create and render a HTML control
			else if (oFeedEntryEmbedded.getProperty("feedEntry").ContentType === "text/html") {
				// wrap the text in a <span> since the sap.ui.core.HTML requires enclosing tags
				var sHTML = "<span>" + aTextSplitByPlaceholders[i] + "</span>";
				
				/*
				 * Logic to add the attr "target" with val "_blank" to anchor tags in order to open links in a new tab instead of the current window
				 * In cases where Jam returns HTML, anchors tags do not have this attr set
				 */
				var oDomEl = jQuery.parseHTML(sHTML)[0]; // parse HTML to get the <span> element
				var $el = jQuery(oDomEl).find("a"); // find the anchor tags inside the element
				
				if ($el.length !== 0) {
					$el.attr("target", "_blank"); // add the attr "target" with val "_blank" to the anchor tags
					sHTML = oDomEl.outerHTML; // convert the <span> element back to string, it will now have anchors tags with the attr "target" set
				}				
				
				// render a HTML control
				oRm.renderControl(new sap.ui.core.HTML({
					content: sHTML,
					sanitizeContent: true
				}));
			}
			// else render the text
			else {
				// have to put text in span to apply alignment to match the rendering of the sap.m.Link control
				oRm.writeEscaped(aTextSplitByPlaceholders[i], /* bLineBreaks= */ true );
			}
		}
	};
	
	return FeedEntryEmbeddedRenderer;
}, /* bExport= */ true);



}; // end of sap/collaboration/components/controls/FeedEntryEmbeddedRenderer.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.controls.FilterPopover') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.controls.FilterPopover'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/controls/FilterPopover",['jquery.sap.global', 'sap/ui/core/Control'],
	function(jQuery, Control) {
	"use strict";
	
	/**
	 * Constructor for a new Filter Popover Control. 
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * 
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @version ${version}
	 *
	 * @constructor
	 * @alias sap.collaboration.components.controls.FilterPopover
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) design time metamodel
	 */
	
	var FilterPopover = Control.extend("sap.collaboration.components.controls.FilterPopover", /** @lends sap.collaboration.components.controls.FilterPopover.prototype */ { metadata : {
		interfaces : [],
  		library : "sap.collaboration.components.controls.FilterPopover",
  		properties : {
			
  			/**
			 * The title text appears in the popover header.
			 */
  			title : {type : "string", group : "Appearance", defaultValue : null},
  			
  			/**
			 * This is the text shown when the content has no data.
			 */
			noDataText : {type : "string", group : "Appearance", defaultValue : null},
  		},
		events : {
			
			/**
			 * Event is fired when selection is changed via user interaction inside the list
			 */
			selectionChange : {
				parameters : {

					/**
					 * Returns the selected list item. When no item is selected, "null" is returned.
					 */
					listItem : {type : "sap.m.ListItemBase"},
				}
			},
		},
		defaultAggregation : "items",
		aggregations : {

			/**
			 * The items of the list.
			 */
			items : {type : "sap.m.ListItemBase", multiple : true, singularName : "item", bindable : "bindable"},
		}
	}});

	/* ====================================  */
	/*           Protected Methods			 */
	/* ===================================== */
	/**
	*  Initializes the Control instance after creation. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.controls.FilterPopover
	*/
	FilterPopover.prototype.init = function() {
		this._oList = new sap.m.List(this.getId() + "-list", {
			mode: sap.m.ListMode.SingleSelectMaster,
			includeItemInSelection: true,
			selectionChange: [this._selectionChange, this]
		});
		
		this._oResponsivePop = new sap.m.ResponsivePopover(this.getId() + "-popover", {
			placement: sap.m.PlacementType.Auto,
			contentWidth: "15rem",
			content: [this._oList]
		});
	};
	/**
	* Cleans up the control instance before destruction. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.controls.FilterPopover
	*/
	FilterPopover.prototype.exit = function() {
		this._oList = null;
		
		if (this._oResponsivePop) {
			this._oResponsivePop.destroy();
			this._oResponsivePop = null;
		}
	};
	
	/* ====================================  */
	/*           Public Methods				 */
	/* ===================================== */
	/**
	* Opens the FilterPopover control.
	* @public
	* @param {object} oControl The control that will open the popover
	* @returns {FilterPopover}
	* @memberOf sap.collaboration.components.controls.FilterPopover
	*/
	FilterPopover.prototype.openBy = function(oControl) {
		this._oResponsivePop.openBy(oControl);
		return this;
	};
	
	/**
	 * Set the title of the internal popover
	 * @overwrite
	 * @public
	 * @param {string} sTitle the title text for the dialog
	 * @returns {FilterPopover} this pointer for chaining
	 * @memberOf sap.collaboration.components.controls.FilterPopover
	 */
	FilterPopover.prototype.setTitle = function(sTitle) {
		this.setProperty("title", sTitle, true);
		this._oResponsivePop.setTitle(sTitle);

		return this;
	};
	
	/**
	 * Set the no data text of the internal list
	 * @overwrite
	 * @public
	 * @param {string} sNoDataText the no data text for the list
	 * @returns {FilterPopover} this pointer for chaining
	 * @memberOf sap.collaboration.components.controls.FilterPopover
	 */
	FilterPopover.prototype.setNoDataText = function(sNoDataText) {
		this.setProperty("noDataText", sNoDataText, true);
		this._oList.setNoDataText(sNoDataText);

		return this;
	};
	
	/**
	 * Selects the given list item.
	 * @overwrite
	 * @public
	 * @param {object} oListItem The list item whose selection to be changed.
	 * @returns {FilterPopover} this pointer for chaining
	 * @memberOf sap.collaboration.components.controls.FilterPopover
	 */
	FilterPopover.prototype.setSelectedItem = function(oListItem) {
		this._oList.setSelectedItem(oListItem);

		return this;
	};
	
	/**
	 * Selects the given list item.
	 * @overwrite
	 * @public
	 * @returns {sap.m.ListBase} the selected item from the list
	 * @memberOf sap.collaboration.components.controls.FilterPopover
	 */
	FilterPopover.prototype.getSelectedItem = function() {
		return this._oList.getSelectedItem();
	};
	
	/**
	* Set the model for the controls
	* @overwrite
	* @public
	* @param {sap.ui.Model} oModel the model that holds the data for the list
	* @param {string} sName the optional model name
	* @returns {FilterPopover} this pointer for chaining
	* @memberOf sap.collaboration.components.controls.FilterPopover
	*/
	FilterPopover.prototype._setModel = FilterPopover.prototype.setModel;
	FilterPopover.prototype.setModel = function(oModel, sModelName) {
		var aArgs = Array.prototype.slice.call(arguments);

		// pass the model to the responsive popover and also to the local control to allow binding of own properties
		this._oResponsivePop.setModel(oModel, sModelName);
		FilterPopover.prototype._setModel.apply(this, aArgs);

		return this;
	};
	
	/**
	 * Forwards aggregations to the internal list.
	 * @overwrite
	 * @param {string} sAggregationName the name for the binding
	 * @param {object} oBindingInfo the configuration parameters for the binding
	 * @returns {FilterPopover} this pointer for chaining
	 * @memberOf sap.collaboration.components.controls.FilterPopover
	 */
	FilterPopover.prototype.bindAggregation = function() {
		var args = Array.prototype.slice.call(arguments);

		// propagate the bind aggregation function to list
		this._callMethodInManagedObject.apply(this, ["bindAggregation"].concat(args));
		return this;
	};
	
	FilterPopover.prototype.validateAggregation = function(sAggregationName, oObject, bMultiple) {
		return this._callMethodInManagedObject("validateAggregation", sAggregationName, oObject, bMultiple);
	};

	FilterPopover.prototype.setAggregation = function(sAggregationName, oObject, bSuppressInvalidate) {
		this._callMethodInManagedObject("setAggregation", sAggregationName, oObject, bSuppressInvalidate);
		return this;
	};

	FilterPopover.prototype.getAggregation = function(sAggregationName, oDefaultForCreation) {
		return this._callMethodInManagedObject("getAggregation", sAggregationName, oDefaultForCreation);
	};

	FilterPopover.prototype.indexOfAggregation = function(sAggregationName, oObject) {
		return this._callMethodInManagedObject("indexOfAggregation", sAggregationName, oObject);
	};

	FilterPopover.prototype.insertAggregation = function(sAggregationName, oObject, iIndex, bSuppressInvalidate) {
		this._callMethodInManagedObject("insertAggregation", sAggregationName, oObject, iIndex, bSuppressInvalidate);
		return this;
	};

	FilterPopover.prototype.addAggregation = function(sAggregationName, oObject, bSuppressInvalidate) {
		this._callMethodInManagedObject("addAggregation", sAggregationName, oObject, bSuppressInvalidate);
		return this;
	};

	FilterPopover.prototype.removeAggregation = function(sAggregationName, oObject, bSuppressInvalidate) {
		this._callMethodInManagedObject("removeAggregation", sAggregationName, oObject, bSuppressInvalidate);
		return this;
	};

	FilterPopover.prototype.removeAllAggregation = function(sAggregationName, bSuppressInvalidate) {
		return this._callMethodInManagedObject("removeAllAggregation", sAggregationName, bSuppressInvalidate);
	};

	FilterPopover.prototype.destroyAggregation = function(sAggregationName, bSuppressInvalidate) {
		this._callMethodInManagedObject("destroyAggregation", sAggregationName, bSuppressInvalidate);
		return this;
	};
	
	/* ====================================  */
	/*           Private Methods			 */
	/* ===================================== */
	/*
	 * Forwards a function call to a managed object based on the aggregation name.
	 * If the name is items, it will be forwarded to the list, otherwise called locally
	 * @private
	 * @param {string} sFunctionName the name of the function to be called
	 * @param {string} sAggregationName the name of the aggregation associated
	 * @returns {mixed} the return type of the called function
	 * @memberOf sap.collaboration.components.controls.FilterPopover
	 */
	FilterPopover.prototype._callMethodInManagedObject = function(sFunctionName, sAggregationName) {
		var aArgs = Array.prototype.slice.call(arguments);
		
		if (sAggregationName === "items") {
			// apply to the internal list
			return this._oList[sFunctionName].apply(this._oList, aArgs.slice(1));
		} else {
			// apply to this control
			return sap.ui.base.ManagedObject.prototype[sFunctionName].apply(this, aArgs.slice(1));
		}
	};
	
	/**
	 * When the user select an item from the list
	 * @private
	 * @param {oControlEvent}
	 * @memberOf sap.collaboration.components.controls.FilterPopover
	 */
	FilterPopover.prototype._selectionChange = function(oControlEvent) {
		this._oResponsivePop.close();
		
		var oSelectedListItem = oControlEvent.getParameter("listItem");
		this.fireSelectionChange({
			listItem: oSelectedListItem
		});
	};
	
	return FilterPopover;
}, /* bExport= */ true);
}; // end of sap/collaboration/components/controls/FilterPopover.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.controls.PlaceholderUtility') ) {
/**
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.collaboration.components.controls.PlaceholderUtility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/controls/PlaceholderUtility",['sap/ui/base/Object'],
	function(BaseObject){
	"use strict";
	
	var sClassName = "sap.collaboration.components.controls.PlaceholderUtility";
	var atMentionsPlaceholderPattern = /@@.\{\d+\}/;
	var contentPlaceholderPattern = /@@[o]\{\d+\}/;
	
	/**
	 * AtMentions Utility class 
	 *
	 * @class
	 * Utility class for resolving placeholders from Jam for AtMentions and Content item name. Contains static methods
	 * @extends sap.ui.base.Object
	 *
	 * @author SAP SE
	 * @version ${version}
	 *
	 * @constructor
	 * @public
	 */
	var placeholderUtility = BaseObject.extend(sClassName, {
	});
	
	/**
	 * Returns a list of all the atMentions placeholders and their values
	 * @param {string} sText - Text
	 * @param {string} sTextWithPlaceholders - Text with the placeholders
	 * @return {object[]} array of atMentions {placeholder,value}
	 * @memberOf sap.collaboration.components.controls.PlaceholderUtility
	 */
	placeholderUtility.getAtMentionsValues = function(sText, sTextWithPlaceholders){
		var oPlaceholderRegex = new RegExp(atMentionsPlaceholderPattern);
		
		var aStringWithPlaceholders = this.splitByPlaceholders(sTextWithPlaceholders);
			
		var sTextToSlice = sText; // Original text that will be traversed and spliced
		var aPlaceholderValues = [];
		var iPlaceholdersCount = 0;
		// find the placeholders values
		for( var i=0; i < aStringWithPlaceholders.length; i++) {
			var substring = aStringWithPlaceholders[i];
			
			if ( oPlaceholderRegex.test(substring) == true ) {
				var nextToken = aStringWithPlaceholders[i+1];
				var sPlaceholderValue = "";

				// if nextToken == "", placeholder is either the last token in the string 
				// OR the placeholder is immediately (no space) followed by another placeholder.
				if ( nextToken == "" ) {
					var nextNextToken = aStringWithPlaceholders[i+2];
					
					// placeholder is the last token
					if (nextNextToken == undefined) { 
						sPlaceholderValue = sTextToSlice;
						sTextToSlice = sTextToSlice.slice(sTextToSlice.indexOf(nextToken));
					}
					// placeholder is immediately followed by another placeholder
					else if (oPlaceholderRegex.test(nextNextToken) == true) {
						// ASSUMPTION: in the text, the @mentions names begin with "@" AND "@" does not appear in the name
						sPlaceholderValue = this._findFirstPlaceholderValueInText(sTextToSlice);
						sTextToSlice = sTextToSlice.slice(sPlaceholderValue.length);
					}
					
				}
				// if nextToken == " ", placeholder is followed by another placeholder seperated by a space
				// OR a trailing space at the end
				else if ( nextToken == " " ) {
					// ASSUMPTION: in the text, the @mentions names begin with "@" AND "@" does not appear in the name
					sPlaceholderValue = this._findFirstPlaceholderValueInText(sTextToSlice);
					sTextToSlice = sTextToSlice.slice(sPlaceholderValue.length);
				}
				else {
					// next token is just normal text
					sPlaceholderValue = sTextToSlice.slice(0, sTextToSlice.indexOf(nextToken));
					sTextToSlice = sTextToSlice.slice(sTextToSlice.indexOf(nextToken));
				}
				// if the value is not equal to @@m{*}, save the value
				if ( !oPlaceholderRegex.test(sPlaceholderValue) ) {
					aPlaceholderValues.push({
						placeholder: "@@m{"+iPlaceholdersCount+"}",
						value: sPlaceholderValue
					});
					iPlaceholdersCount++;	
				}
			}
			else {
				sTextToSlice = sTextToSlice.slice(substring.length);
			}
		}
		
		return aPlaceholderValues;
	};

	/**
	 * Returns the name of the Content Item.
	 * ASSUMPTIONS: There is only one placeholder at the end of the text
	 * 
	 * @param {string} sAction - Action Text
	 * @param {string} sActionWithPlaceholders - Action Text with the placeholders
	 * @return {object[]} array of atMentions {placeholder,value}
	 * @memberOf sap.collaboration.components.controls.PlaceholderUtility
	 */
	placeholderUtility.getContentItemName = function(sAction, sActionWithPlaceholders){
		
		var sActionToSlice = sAction;
		var aActionWithoutPlaceholders = sActionWithPlaceholders.split(contentPlaceholderPattern); // array of substrings without placeholders
		
		// remove all text except for content item name
		for(var i=0; i<aActionWithoutPlaceholders.length; i++){
			sActionToSlice = sActionToSlice.replace(aActionWithoutPlaceholders[i], "");
		}
		var sContentItemName = sActionToSlice.trim();
		
		return sContentItemName;
	};
	/**
	 * Returns the an array of substrings seperated by placeholders
	 * 
	 * @param {string} sString - String to split
	 * @return {string[]} array of substrings seperated by the placeholders
	 * @memberOf sap.collaboration.components.controls.PlaceholderUtility
	 */
	placeholderUtility.splitByPlaceholders = function(sTextWithPlaceholder){
		
		var aStringWithPlaceholders = [];

		if (sTextWithPlaceholder) {
			var allAtMentionsplaceholderPattern = /@@.\{\d+\}/g; // all placeholders
			var aStringSeperatedByPlaceholders = sTextWithPlaceholder.split(allAtMentionsplaceholderPattern); // split by placeholders
			var aPlaceholders = sTextWithPlaceholder.match(allAtMentionsplaceholderPattern); // get all the placeholders
			var iPlaceholdersCount =  aPlaceholders == null ? 0 : aPlaceholders.length;

			// build array with string and placeholders  
			for( var i=0; i < aStringSeperatedByPlaceholders.length + iPlaceholdersCount; i++ ) {
				if ( i%2 == 0 ){
					aStringWithPlaceholders.push(aStringSeperatedByPlaceholders[i/2]);
				}
				else{
					aStringWithPlaceholders.push(aPlaceholders[Math.floor(i/2)]);
				}
			}
		}
		
		return aStringWithPlaceholders;
	};
	/**
	 * Returns the first placeholder value in the original Text substring. The substring must begin with an "@".
	 * e.g. "@John Doe '@Jane Doe are here to party." The function will only return '@John Doe'.
	 * 
	 * 
	 * BIG ASSUMPTION: in the text, the @ mentions names begin with "@" AND "@" does not appear in the name
	 * 
	 * @private
	 * @param {string} sTextSubstring
	 * @return {string} Place holder value
	 * @memberOf sap.collaboration.components.controls.PlaceholderUtility
	 */
	placeholderUtility._findFirstPlaceholderValueInText = function(sTextSubstring){
		var sPlaceholderValue;
		
		// if the substring starts with a placeholder, then return it as is.
		if (sTextSubstring.search(atMentionsPlaceholderPattern) == 0) {
			sPlaceholderValue = sTextSubstring.match(atMentionsPlaceholderPattern)[0];
		}
		else {
			// traverse the string until the first @ (after the first one
			// FIX: JAM now returns an invisible character in front of the @mentions to force 
			// text direction. we have to star parsing at the 2nd index.
			//
			sPlaceholderValue = sTextSubstring[0] + sTextSubstring[1]; // "@"
			for (var i=2; i<sTextSubstring.length; i++) {
				if (sTextSubstring[i] === "\u200E" || sTextSubstring[i] === "\u200F" // for special character &lrm; or &rlm;
					|| sTextSubstring[i] === '@' ) { // for fake placeholders
					break;
				}
				sPlaceholderValue += sTextSubstring[i]; // add character to placeholder value
			}
		}
		
		// remove spaces
		sPlaceholderValue = sPlaceholderValue.trim();
		return sPlaceholderValue;
	};
	Object.freeze(placeholderUtility);
	return placeholderUtility;
}, /* bExport= */ true);


}; // end of sap/collaboration/components/controls/PlaceholderUtility.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.controls.TimelineEntryEmbeddedRenderer') ) {
/**
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.collaboration.components.controls.TimelineEntryEmbeddedRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/collaboration/components/controls/TimelineEntryEmbeddedRenderer",[],
	function(){
	/**
	 * FeedEntryEmbedded renderer.
	 * @namespace
	 */
	var TimelineEntryEmbeddedRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * @protected
	 * @param {sap.ui.core.RenderManager} oRM the RenderManager that can be used for writing to the render output buffer.
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered.
	 */
	TimelineEntryEmbeddedRenderer.render = function(oRm, oTimelineEntryEmbedded){

		// The embedded control is divided into 2 parts:
		// 1-Timeline Item Text Display: Text Display of for the feed and timeline entries
		
		var iNumberTimelineItemTextControls = oTimelineEntryEmbedded._getTimelineItemTextControls().length;
		
		// Timeline Item Text Display
		if ( iNumberTimelineItemTextControls > 0 ){
			oTimelineEntryEmbedded._renderTimelineItemText(oRm);
		}
	};
	
	return TimelineEntryEmbeddedRenderer;
}, /* bExport= */ true);



}; // end of sap/collaboration/components/controls/TimelineEntryEmbeddedRenderer.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.feed.Component') ) {
  jQuery.sap.declare('sap.collaboration.components.feed.Component');
/* @copyright */

/**
* Constructor for the Feed Component.
*
* Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers.
* 
* The supported settings are:
* <ul>
* 	<li>Properties
* 		<ul>
* 			<li>{@link #getAxisOrientation axisOrientation} : sap.suite.ui.commons.TimelineAxisOrientation (default: sap.suite.ui.commons.TimelineAxisOrientation.Vertical) </li>
* 			<li>{@link #getFeedSources feedSources} : map|string[]</li>
* 			<li>{@link #getEnableScroll enableScroll} : boolean (default: true)</li>
* 		</ul>
* 	</li>
* </ul> 
*
* @param {string} [sId] id for the new component, generated automatically if no id is given 
* @param {map} [mSettings] initial settings for the new component. See the documentation of the component's properties for the structure of the expected data.
* 
* @class 
* The Feed Component is an SAPUI5 component that allows you to display SAP Jam feeds. 
* It includes the option to add new posts and reply to entries and view other users' social profiles from SAP Jam.
* @extends sap.ui.core.UIComponent
* @version ${version}
* @since 1.30
* 
* @constructor
* @public
* @name sap.collaboration.components.feed.Component
* 
*/
(function() {
	var sComponentName = "sap.collaboration.components.feed.Component";
	jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

	jQuery.sap.require('sap.suite.ui.commons.library'); // unlisted dependency retained

	jQuery.sap.declare(sComponentName);
	sap.ui.core.UIComponent.extend(sComponentName, {

	    metadata : {
	        stereotype: "component",
	    	version: "1.0",
	    	includes: ["../resources/css/MorePopover.css"],
	    	dependencies: {
	    		libs: [],
	    		components: [],
	    		ui5version: ""
	    	},
	    	library: "sap.collaboration",
	    	properties: {
				"axisOrientation" : { type : "sap.suite.ui.commons.TimelineAxisOrientation", group : "Misc", defaultValue : sap.suite.ui.commons.TimelineAxisOrientation.Vertical },
				"feedSources" : { type : "object|string[]" },
				"enableScroll" : { type : "boolean", defaultValue : true }
	    	},
	        rootView : null, // the rootView to open (view name as string or view configuration object)
	        publicMethods: [ "setSettings", "getSelectedGroup" ],
	        aggregations: {
	        },
		    routing: {  
	        },
	        config: {
	        },
	        customizing: {
	        }
	    },
		/**
		* Initializes the Component instance after creation. 
		* @protected
		* @memberOf sap.collaboration.components.feed.Component
		*/
		init: function() {
			this._logger = new jQuery.sap.log.getLogger(sComponentName);
			sap.ui.core.UIComponent.prototype.init.apply(this); // call superclass; needed to call createContent
		},
		/**
		* Cleans up the component instance before destruction.
		* @protected
		* @memberOf sap.collaboration.components.feed.Component
		*/
		exit: function() {
			
		},
		/**
		* Function is called when the rendering of the Component Container is started.
		* @protected
		* @memberOf sap.collaboration.components.feed.Component
		*/
		onBeforeRendering: function() {			
			
		},
		
		/**
		* Function is called when the rendering of the Component Container is completed. 
		* @protected
		* @memberOf sap.collaboration.components.feed.Component
		*/
		onAfterRendering: function() {
		},
		/**
		 * The method to create the Content (UI Control Tree) of the Component. 
		 * @protected
		 * @memberOf sap.collaboration.components.feed.Component
		 */
		createContent: function() {
			this._view = sap.ui.view({
				id: this.createId("group_feed_view"),
				height: "100%",
				type:sap.ui.core.mvc.ViewType.XML, 
				viewName:"sap.collaboration.components.feed.views.GroupFeed"
			});
			
			this.setAxisOrientation(this.getAxisOrientation());
			
			return this._view;
		},
		/**
		 * Sets all the properties passed in oSettings.
		 * @public
		 * @param {map} settings - key/value map for settings
		 * @memberOf sap.collaboration.components.feed.Component 
		 */
		setSettings: function(settings) {
			for(var key in settings) {
				if(settings.hasOwnProperty(key)) {
					this._setProperty(key, settings[key]);
				}
			}
		},
		/**
		 * Returns the selected Group.
		 * @public
		 * @memberOf sap.collaboration.components.feed.Component
		 * @return {map} a map containing information about the selected Group (e.g. Id, Name, etc...)
		 */
		getSelectedGroup: function() {
			return this._view.getModel().getProperty("/groupSelected");
		},
		/**
		 * Set the property's new value in the component and in the view's model.
		 * @private
		 * @param {string} propertyName
		 * @param {string} propertyValue
		 * @memberOf sap.collaboration.components.feed.Component
		 */
		_setProperty: function(propertyName, propertyValue) {
			this._logger.info(propertyName + ": " + propertyValue);
			this._view.getModel().setProperty("/" + propertyName, propertyValue);
			this.setProperty(propertyName, propertyValue);
		},
		/**
		 * Set the axis orientation for the Timeline.
		 * @override
		 * @public
		 * @param {sap.suite.ui.commons.TimelineAxisOrientation} axisOrientation
		 * @memberOf sap.collaboration.components.feed.Component
		 */
		setAxisOrientation: function(axisOrientation) {
			this._setProperty("axisOrientation", axisOrientation);
			return this;
		},
		/**
		 * Sets the sources for the feed.
		 * Array of strings representing the Jam group IDs (e.g. ["groupid1", "groupid2"]).
		 * @override 
		 * @public
		 * @param {object} feedSources
		 * @memberOf sap.collaboration.components.feed.Component
		 */
		setFeedSources: function(feedSources) {
			this._setProperty("feedSources", feedSources);
		},
		/**
		 * Sets the enableScroll property for the Timeline.
		 * @override
		 * @public
		 * @param {boolean} enableScroll
		 * @memberOf sap.collaboration.components.feed.Component
		 */
		setEnableScroll: function(enableScroll) {
			this._setProperty("enableScroll", enableScroll);
			return this;
		}
	});
})();

/**
 * Getter for property <code>axisOrientation</code>.
 *
 * Default value is <code>Vertical</code>
 *
 * @return {sap.suite.ui.commons.TimelineAxisOrientation} the value of property <code>axisOrientation</code>
 * @public
 * @name sap.collaboration.components.feed.Component#getAxisOrientation
 * @function
 * @memberOf sap.collaboration.components.feed.Component
 */

/**
 * Setter for property <code>axisOrientation</code>.
 *
 * Default value is <code>Vertical</code> 
 *
 * @param {sap.suite.ui.commons.TimelineAxisOrientation} oAxisOrientation  new value for property <code>axisOrientation</code>
 * @return {sap.collaboration.components.feed.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.feed.Component#setAxisOrientation
 * @function
 * @memberOf sap.collaboration.components.feed.Component
 */

/**
 * Getter for property <code>feedSources</code>.
 *
 * @return {map|string[]} the value of property <code>feedSources</code>
 * @public
 * @name sap.collaboration.components.feed.Component#getFeedSources
 * @function
 * @memberOf sap.collaboration.components.feed.Component
 */

/**
 * Setter for property <code>feedSources</code>.
 *
 * The feedSources is either an array of strings (SAP Jam Group IDs) or a map in the following structure:<br>
 * { mode : sap.collaboration.FeedType, data : any }<br>
 * Based on the mode, the data is either required or not.
 *
 * @param {map|string[]} oFeedSources  new value for property <code>feedSources</code>
 * @public
 * @name sap.collaboration.components.feed.Component#setFeedSources
 * @function
 * @memberOf sap.collaboration.components.feed.Component
 */

/**
 * Getter for property <code>enableScroll</code>.
 *
 * @return {boolean} the value of property <code>enableScroll</code>
 * @public
 * @name sap.collaboration.components.feed.Component#getEnableScroll
 * @function
 * @memberOf sap.collaboration.components.feed.Component
 */

/**
 * Setter for property <code>enableScroll</code>.
 * 
 * Sets the property enableScroll on the Timeline.
 * 
 * Setting this property to false will remove the scrollbar on the Timeline.<br>
 * 
 * Default value is <code>true</code>
 * 
 * @param {boolean} bEnableScroll new value for property <code>enableScroll</code>
 * @return {sap.collaboration.components.feed.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.feed.Component#setEnableScroll
 * @function
 * @memberOf sap.collaboration.components.feed.Component
 */

}; // end of sap/collaboration/components/feed/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.notification.NotificationContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.collaboration.components.fiori.notification.NotificationContainer");


sap.ui.core.Control.extend("sap.collaboration.components.fiori.notification.NotificationContainer", {
    
    metadata: {
    		
    	aggregations: {
    		"content" : {singularName: "content"}
    	}
           
    },
    
    renderer: function(oRM, oControl) {
    		
	   oRM.write("<div");
	   oRM.writeControlData(oControl); // applies the ID, ...
	   oRM.addClass("sapClbNotifContainerBox");
	   oRM.writeClasses();
	   oRM.writeStyles(); // custom style class support
	   oRM.write(">");
	   
	   var aContent = oControl.getContent();
	   for (var i = 0, l = aContent.length; i < l; i++) {
	          oRM.renderControl(aContent[i]);
	   }
	   
	   oRM.write("</div>");
           
    }
    
});

}; // end of sap/collaboration/components/fiori/notification/NotificationContainer.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentConstructorArgumentsException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*
 * This module is an exception class whose objects are thrown during File class object construction.
 * An exception of this kind is thrown when the File constructor isn't provided the arguments
 * it need to build an instance of the File class. 
 */

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentConstructorArgumentsException");

sap.ui.base.Object.extend("sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentConstructorArgumentsException", {
	constructor: function() {
		/** @private */ this.exceptionName = "InvalidAttachmentConstructorArgumentsException";
	}
});

}; // end of sap/collaboration/components/fiori/sharing/attachment/InvalidAttachmentConstructorArgumentsException.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException");

sap.ui.base.Object.extend("sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException", {
	constructor: function(parameter) {
		/** @private */ this.exceptionName = "InvalidAttachmentParameterException: " + parameter;
	}
});

}; // end of sap/collaboration/components/fiori/sharing/attachment/InvalidAttachmentParameterException.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.helper.ShareUtil') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*************************************************************
* JamUtil helper class
*
* Is responsible for the integration and communication with the
* JAM APIs
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.helper.ShareUtil");

sap.ui.base.Object.extend("sap.collaboration.components.fiori.sharing.helper.ShareUtil",{
	
	/**
	 * @constructor
	 */
	constructor: function(oLangBundle, oODataUtil, oSMIODataModel, oCommonUtil, oJamODataModel, oCollaborationHostRestService) {
		// Boolean indicating whether or not it's ok to refresh the security token.
		this._bIsOkToRefreshSecurityToken = true;
		
		this.iGrowingThreshold = 10; 
		this.oLangBundle = oLangBundle;
		this.oODataUtil = oODataUtil;
		this.oSMIODataModel = oSMIODataModel;
		this.oJamODataModel = oJamODataModel;
		this.oCollaborationHostRestService = oCollaborationHostRestService;
		this.oCommonUtil = oCommonUtil;
		this.bShareError = false;
		this.bShareBusinessObjShared;
		this.bFileUploaded;
		this.aUploadAttachmentsUploaded = [];
		this.IdisplaySuccessMessageIntervalId;
	},
	
	/**
	 * Method that performs either the sequence of steps a.* or b.*. The b.* sequence occurs when oSharingData.mappedExternalObject isn't specified.
	 * a.1. Creates an ExternalObject in Jam corresponding for the business object being shared.
	 * a.2. Features the created ExternalObject to a Jam Group.
	 * a.3. Creates a SharedExternalObject feed entry on the Group's wall. See {@link _createGroupFeedEntry_SharedExternalObject} to know what a SharedExternalObject feed entry is.
	 * b.1. Creates a SharedObjectLink feed entry on the Group's wall. See {@link _createFeedEntry_ShareObjectLink} to know what a SharedObjectLink feed entry is. 
	 * @map {object} oSharingData - Share data needed for this method.
	 * @param {string} oSharingData.groupId - The Jam Id of the Group in which to feature the ExternalObject.
	 * @param {string} oSharingData.groupName - The name of the Group in which to feature the ExternalObject.
	 * @param {string} oSharingData.folderId - This is the Jam Id of the Folder in which to upload the attachment's.
	 * @param {object} oSharingData.feedContent - Data to create a feed entry in a Jam Group.
	 * @param {string} oSharingData.feedContent.uiUrl - The URL to navigate to after clicking on the link in the feed entry. This URL points to the Fiori app's view of the business object.
	 * @param {string} oSharingData.feedContent.note - The comment to add to the feed entry.
	 * @param {array} oSharingData.aFilesToUpload - Array of files (attachments) to upload to Jam.
	 * @param {object} oSharingData.mappedExternalObject - Set of URLs used by Jam to 
	 * @param {string} oSharingData.mappedExternalObject.Exid - OData URL of the business object being shared. This URL is URL for the OData service that exposes the business object that is in the SAP system.
	 * @param {string} oSharingData.mappedExternalObject.ODataLink - Same as Exid.
	 * @param {string} oSharingData.mappedExternalObject.ObjectType - OData service's metadata URL appended with a hash (#) symbol and the business object's entity set. 
	 * @param {string} oSharingData.mappedExternalObject.ODataMetadata - Same as ObjectType.
	 * @param {string} oSharingData.mappedExternalObject.ODataAnnotations - Annotations URL. Specifies to Jam what to display of the business object.
	 */
	shareBusinessObject: function(oSharingData) {
		var that = this;
		// Share external object
		if (oSharingData.mappedExternalObject) {
			// Check if the oSharingData.feedContent.uiUrl (object.id) is passed, this is a mandatory field when sharing the business object. For this reason, this check was placed after the
			// line above, which checks if the business object was passed in the first place
			if (oSharingData.feedContent !== undefined &&  oSharingData.feedContent.uiUrl !== undefined) {
				var oPayload = oSharingData.mappedExternalObject;
				oPayload.Name = oSharingData.externalObject.name;
				oPayload.Groups = [{ __metadata : { uri : "Groups('"+ oSharingData.groupId + "')" } }];
				oPayload.Permalink = oSharingData.feedContent.uiUrl;
				
				var mParameters = {
						async: true,
						success: function(oData, response) {
							that._bIsOkToRefreshSecurityToken = true;
							that._createGroupFeedEntry_SharedExternalObject(oSharingData);
					 	},
					 	error: function(oError) {
					 		if (oError.response.statusCode === 409) { // assuming '409' means BO was already shared to the group, we want to share the comment and not throw an error
					 			that._createGroupFeedEntry_SharedExternalObject(oSharingData);
					 		}
					 		else if (oError.response.statusCode === 403 && that._bIsOkToRefreshSecurityToken) {
					 			that.oJamODataModel.refreshSecurityToken(
					 				function () {
					 					that._bIsOkToRefreshSecurityToken = false;
					 					that.shareBusinessObject(oSharingData);
					 				},
					 				function (oError) {
					 					that._checkAuthorizationAndDisplayErrorMessage(oError.response.statusCode);
					 				},
					 				true
					 			);
					 		}
					 		else {
					 			that._bIsOkToRefreshSecurityToken = true;
					 			that._checkAuthorizationAndDisplayErrorMessage(oError.response.statusCode);
					 		}
					 	},
				};
				this.oJamODataModel.create("/ExternalObjects", oPayload, mParameters);
			}
			else {
				jQuery.sap.log.error("feedContent.uiUrl parameter should not be undefined when sharing an external object", "sap.collaboration.components.fiori.sharing.helper.ShareUtil.shareBusinessObject()");
				this.displayErrorMessage();
				
			}
			
		}
		// Share object link
		else {
			this._createFeedEntry_ShareObjectLink(oSharingData);
		}
	},
	
	/**
	 * Method that creates a SharedExternalObject feed entry. A SharedExternalObject feed entry is a feed entry with a QuickView.
	 * @param {object} oSharingData - See the parameter of the same name for method {@link shareBusinessObject}.
	 * @private
	 */
	_createGroupFeedEntry_SharedExternalObject: function(oSharingData) {	
		var xmlPayload =
			'<?xml version="1.0" encoding="UTF-8"?>' +
			'<feed xmlns="http://www.w3.org/2005/Atom" xmlns:activity="http://activitystrea.ms/spec/1.0/">' +
				'<entry>' +
					'<title> </title>' +
					'<content type="html">'+ jQuery.sap.encodeXML(oSharingData.feedContent.note)+'</content>' +
					'<author>' +
						'<email>'+ jQuery.sap.encodeXML(oSharingData.memberEmail)+'</email>' +
						'<activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>' +
					'</author>' +
					'<activity:verb>http://activitystrea.ms/schema/1.0/share</activity:verb>' +
					'<activity:object>' +
						'<id>'+ jQuery.sap.encodeXML(oSharingData.mappedExternalObject.Exid) +'</id>' +
						'<title type="html">'+ jQuery.sap.encodeXML(oSharingData.externalObject.name) + '</title>' +
						'<activity:object-type>'+ jQuery.sap.encodeXML(oSharingData.mappedExternalObject.ObjectType) +'</activity:object-type>' +
						'<link type="text/html" rel="alternate" href="'+ jQuery.sap.encodeXML(oSharingData.feedContent.uiUrl) +'"/>' +
						'<link rel="http://www.odata.org" href="'+ jQuery.sap.encodeXML(oSharingData.mappedExternalObject.ODataLink) +'"/>' +
					    '<link rel="http://www.odata.org/metadata" href="'+ jQuery.sap.encodeXML(oSharingData.mappedExternalObject.ODataMetadata) +'"/>' +
					    '<link rel="http://www.odata.org/annotation" href="'+ jQuery.sap.encodeXML(oSharingData.mappedExternalObject.ODataAnnotations) +'"/>' +
			        	'<source>' +
			        		'<id>tag:www.cubetree.com,2013:/groups/' + jQuery.sap.encodeXML(oSharingData.groupId) + '</id>' +
			        	'</source>' +
			        '</activity:object>' +
			    '</entry>' +
		    '</feed>';
		
		var that = this;
		var fnOnReadyStateChange = function() {
			if (this.readyState == 4) {
				if(this.status == 200){
					that.bShareBusinessObjShared = true;
					that.displaySuccessMessage(oSharingData.groupName);
				}
				else{
					that._checkAuthorizationAndDisplayErrorMessage(this.status);
				}
			}
		};
		
		this._createFeedEntryViaRestAPI( xmlPayload, fnOnReadyStateChange );
	},

	/**
	 * Method that creates a SharedObjectLink feed entry. A SharedObjectLink usually has a link back to the Fiori application's view of the Object.
	 * @param {object} oSharingData - See the parameter of the same name for method {@link shareBusinessObject}. 
	 * @private
	 */
	_createFeedEntry_ShareObjectLink: function(oSharingData){
		// Build the feed content to be posted. The feed content can either be 
		// - Note + Object Id
		// - Note only
		// - Object Id only 
		this.bShareBusinessObjShared = false;

		// If feed content is not empty, add request to batch and execute
		if (oSharingData.feedContent){
			
			if(oSharingData.feedContent.note !== undefined){
				
				var sContent = oSharingData.feedContent.note;
				if(oSharingData.feedContent.uiUrl){
					sContent = sContent + "<br/><a href='" + oSharingData.feedContent.uiUrl.replace(/'/g, "&apos;" ) + "'>" 
								+  this.oLangBundle.getText("SHARE_OBJECT_LINK") + '</a>';				
				}
			
				var xmlPayload =
					'<?xml version="1.0" encoding="UTF-8"?>' +
					'<feed xmlns="http://www.w3.org/2005/Atom" xmlns:activity="http://activitystrea.ms/spec/1.0/">' +
						'<entry>' +
							'<title>' + jQuery.sap.encodeXML(this.oLangBundle.getText("SHARE_OBJECT_LINK_TITLE")) + '</title>' +
							'<content type="html">'+ jQuery.sap.encodeXML(sContent) +'</content>' +
							'<author>' +
								'<email>'+ jQuery.sap.encodeXML(oSharingData.memberEmail)+'</email>' +
								'<activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>' +
							'</author>' +
							'<activity:verb>http://activitystrea.ms/schema/1.0/share</activity:verb>' +
							'<activity:object>' +
					        	'<source>' +
					        		'<id>tag:www.cubetree.com,2013:/groups/' + jQuery.sap.encodeXML(oSharingData.groupId) + '</id>' +
					        	'</source>' +
					        '</activity:object>' +
					    '</entry>' +
				    '</feed>';
				
				var self = this;
				var fnOnReadyStateChange = function() {
					if (this.readyState == 4) {
						if(this.status == 200) {
							self.bShareBusinessObjShared = true;
							self._bIsOkToRefreshSecurityToken = true;
							self.displaySuccessMessage(oSharingData.groupName);
						}
						else {
							if (this.status == 403 && self._bIsOkToRefreshSecurityToken) {
					 			self.oJamODataModel.refreshSecurityToken(
					 				function() {
					 					self._bIsOkToRefreshSecurityToken = false;
					 					self._createFeedEntry_ShareObjectLink(oSharingData);
					 				},
					 				function(oError) {
					 					self._checkAuthorizationAndDisplayErrorMessage(oError.response.statusCode);
					 				},
					 				true
					 			);
					 		}
							else {
								self._bIsOkToRefreshSecurityToken = true;
								self._checkAuthorizationAndDisplayErrorMessage(this.status);
							}
						}
					}
				};
				
				this._createFeedEntryViaRestAPI( xmlPayload, fnOnReadyStateChange );
				
			}else{
				jQuery.sap.log.error("feedContent.note parameter should not be undefined", "sap.collaboration.components.fiori.sharing.helper.ShareUtil._createFeedEntry_ShareObjectLink()");
				this.displayErrorMessage();
			}
		}
		else{
			jQuery.sap.log.error("feedContent parameter should not be undefined", "sap.collaboration.components.fiori.sharing.helper.ShareUtil._createFeedEntry_ShareObjectLink()");
			this.displayErrorMessage();
		}
	},
	
	/**
	 * Creates a feed entry using Jam's REST API.
	 * @param {string} sXMLPayload - XML payload that will be in the HTTP request's body. 
	 * @callback {XMLHttpRequest#onreadystatechange} fnOnReadyStateChange
	 */
	_createFeedEntryViaRestAPI: function(sXMLPayload, fnOnReadyStateChange){
		
		var atomHeaders = {
				'Accept':'application/atom+xml',
				'Content-Type':'application/atom+xml',
				'x-csrf-token': this.oJamODataModel.getSecurityToken()
		};
		
		var sFeedPostURL = this.oCollaborationHostRestService.url + "/feed/post";
		if(this.oCollaborationHostRestService.urlParams != undefined && this.oCollaborationHostRestService.urlParams != "" ){
			sFeedPostURL = sFeedPostURL + "?" + this.oCollaborationHostRestService.urlParams;
		}
		
		var xmlHttpRequest = new window.XMLHttpRequest();
		xmlHttpRequest.open("POST",	sFeedPostURL, true );
		for (var headerField in atomHeaders) {
			xmlHttpRequest.setRequestHeader(headerField, atomHeaders[headerField]);
		}
		xmlHttpRequest.onreadystatechange = fnOnReadyStateChange;
		xmlHttpRequest.send(sXMLPayload);
	},
	/**
	* Uploads the attachments
	* @private
	*/
	uploadAttachments: function(oSharingData) {
		var self = this;
		var sGroupId = oSharingData.groupId;
		var sFolderId = oSharingData.folderId;
		
		
		for(var i in oSharingData.aFilesToUpload){
			this.oSMIODataModel.create( '/UploadTargetFile', null,
					 {	async 	: true,  
						success : function(oData,response){
						 
							jQuery.sap.log.debug('File was uploaded', "sap.collaboration.components.fiori.sharing.helper.ShareUtil.uploadAttachments()" );
					 	},
					 	error 	: function(oError){
					 		jQuery.sap.log.error('Error, file was not uploaded', "sap.collaboration.components.fiori.sharing.helper.ShareUtil.uploadAttachments()");
					 	},
					 	urlParameters : {
					 		FileMimeType : "'" + oSharingData.aFilesToUpload[i].mimeType + "'",
					 		FileName : "'" + oSharingData.aFilesToUpload[i].name + "'",
					 		FileURL : "'" + oSharingData.aFilesToUpload[i].url + "'",
					 		FolderId : "'" + oSharingData.folderId + "'",
					 		GroupId : "'" + oSharingData.groupId + "'"
					 	} 
					 });
		}
	},
	/**
	 * Create Group Selection Dialog
	 * @private
	 */
	createGroupSelectionDialog: function(sPrefixId, oItemTemplate, fSelectGroupCallback, iWidth, iHeight, oOdataModel){

		var self = this;
		var handleSearch = function(oEvent) {
		    var sValue = oEvent.getParameter("value");
			self.oGroupSelectionDialog.bindAggregation("items", "/Groups/?$filter=substringof('" + sValue.replace(/'/g,"''") + "',Name)", oItemTemplate);
		};

		this.oGroupSelectionDialog = new sap.m.SelectDialog(sPrefixId + "_GroupSelectionDialog", {
			multiSelect: false,
			noDataText:this.oLangBundle.getText("GRP_NO_GROUPS_FOUND_TEXT"),
			rememberSelections: false,
			growingThreshold: this.iGrowingThreshold,
			title:this.oLangBundle.getText("GROUP_SELECTION_DIALOG_TITLE"),
			confirm: fSelectGroupCallback,
			search: handleSearch,
			liveChange: handleSearch
			
		}).addStyleClass("sapUiPopupWithPadding");

		if(iWidth){
			this.oGroupSelectionDialog.setContentWidth(iWidth.toString() + "px");
		}
		
		if(iHeight){
			this.oGroupSelectionDialog.setContentHeight(iHeight.toString() + "px");
		}

		this.oGroupSelectionDialog.setModel(oOdataModel);
		this.oGroupSelectionDialog.bindAggregation("items","/Groups", oItemTemplate);		
		
		return this.oGroupSelectionDialog;
	},
	
	/**
	* Displays Success Message in case the share operation (BO + attachments) was processed successfully
	* @private
	*/
	displaySuccessMessage : function(sGroupName) {
		var bBoShareOk = true;
		// Check if the BO is shared
		if(!(this.bShareBusinessObjShared === true || this.bShareBusinessObjShared === undefined)){
			bBoShareOk = false;
		}
		
		var bFileUploadOk = true;
		
		if(!(this.bFileUploaded === true || this.bFileUploaded === undefined)){
			bBoShareOk = false;
		}
		
		if(this.bShareError === false){
			if(bBoShareOk === true && bFileUploadOk === true){
				this.oCommonUtil.showMessage(this.oLangBundle.getText("SHARING_SUCCESS_MSG", [sGroupName]), {width: "20em", autoClose: false});
				clearInterval(this.IdisplaySuccessMessageIntervalId);
			}
		}
		else{
			clearInterval(this.IdisplaySuccessMessageIntervalId);
		}
	},
	
	/**
	* Displays Error Message in case one of the attachments was not uploaded successfully
	* @private
	*/
	displayErrorMessage : function() {
		if(!this.bShareError){
			var sErrorMessage = this.oLangBundle.getText("SHARING_FAILURE_MSG");
			this.oCommonUtil.displayError(sErrorMessage);
		}
		this.bShareError = true;
	},
	
	/**
	* Check if the error is an authorization error, if so, display a different error message
	* @private
	*/
	_checkAuthorizationAndDisplayErrorMessage : function(iStatus) {
		var self = this;
		
		// Check if the server response is a 401 or 403, if so, then throw an 'authorization failure' error message. Otherwise, throw the standard error message.
		if(iStatus == 401 || iStatus == 403){
			self.oCommonUtil.displayError(self.oLangBundle.getText("SHARE_AUTHORIZATION_FAILURE_MSG"));
		}
		else{
			self.displayErrorMessage();
		}
	}
	
});

}; // end of sap/collaboration/components/fiori/sharing/helper/ShareUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.annotations.Metadata') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.socialtimeline.annotations.Metadata");

sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.annotations.Metadata", {
	constructor: function(oODataMetadata) {
		// namespace -> alias (For Schema that are included in an Include element as a child of a Reference element.)
		// namespace -> null (Means there's no alias for that namespace)
		// namespace -> undefined (Means the namespace isn't included.)
		this._oIncludedSchemaAliasMap = {};
		// namespace -> alias (For Schema that are defined as children of the DataServices element.)
		// namespace -> null (Means there's no alias for that namespace.)
		// namespace -> undefined (Means the namespace isn't defined.)
		this._oSchemaAliasMap = {};
		this._oODataMetadata = oODataMetadata;
		this._parseODataMetadata();
	},
	
	_parseODataMetadata: function() {
		this._parseReferenceElements(this._oODataMetadata.extensions);
		this._parseDataServicesElement(this._oODataMetadata.dataServices); // There can only be one of these.
	},
	
	_parseReferenceElements: function(aReferenceElements) {
		for (var iReferenceElementIndex in aReferenceElements) {
			this._parseReferenceElement(aReferenceElements[iReferenceElementIndex]);
		}
	},
	
	_parseReferenceElement: function(oReferenceElement) {
		for (var iReferenceElementChildIndex in oReferenceElement.children) {
			this._parseReferenceElementChild(oReferenceElement.children[iReferenceElementChildIndex]);
		}
	},
	
	_parseReferenceElementChild: function(oReferenceElementChild) {
		if (oReferenceElementChild.name === "Include") {
			this._parseIncludeElement(oReferenceElementChild);
		}
		else {
			// This means the child element is an IncludeAnnotations element, which we don't support.
			return;
		}
	},
	
	_parseIncludeElement: function(oIncludeElement) {
		var sIncludeElementNamespace = null; // This must be specified! The spec demands it!
		var sIncludeElementAlias = null; // This may not be an attribute because it is optional.
		for (var iIncludeElementAttributeIndex in oIncludeElement.attributes) {
			if (oIncludeElement.attributes[iIncludeElementAttributeIndex].name === "Namespace") {
				sIncludeElementNamespace = oIncludeElement.attributes[iIncludeElementAttributeIndex].value;
			}
			else {
				sIncludeElementAlias = oIncludeElement.attributes[iIncludeElementAttributeIndex].value;
			}
		}
		this._oIncludedSchemaAliasMap[sIncludeElementNamespace] = sIncludeElementAlias;
	},
	
	_parseDataServicesElement: function(oDataServicesElement) {
		this._parseSchemaElements(oDataServicesElement.schema);
		
	},
	
	_parseSchemaElements: function(aSchemaElements) {
		for (var iSchemaElementIndex in aSchemaElements) {
			this._parseSchemaElement(aSchemaElements[iSchemaElementIndex]);
		}
	},
	
	_parseSchemaElement: function(oSchemaElement) {
		if (oSchemaElement.alias === undefined) {
			this._oSchemaAliasMap[oSchemaElement.namespace] = null;
		}
		else {
			this._oSchemaAliasMap[oSchemaElement.namespace] = oSchemaElement.alias;
		}
		this._parseEntityTypeElements(oSchemaElement.entityType);
	},
	
	_parseEntityTypeElements: function(aEntityTypeElements) {
		for (var iEntityTypeElementIndex in aEntityTypeElements) {
			this._parseEntityTypeElement(aEntityTypeElements[iEntityTypeElementIndex]);
		}
	},
	
	_parseEntityTypeElement: function() {
		
	},
	
	isSchemaIncluded: function (sNamespace) {
		return (this._oIncludedSchemaAliasMap[sNamespace] !== undefined);
	}
});
}; // end of sap/collaboration/components/socialtimeline/annotations/Metadata.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.annotations.MetadataException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.socialtimeline.annotations.MetadataException");

sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.annotations.MetadataException", {
	constructor: function(sExceptionMessage) {
		this._sClassName = "sap.collaboration.components.socialtimeline.annotations.MetadataException";
		this._sExceptionMessage = sExceptionMessage;
	}
});
}; // end of sap/collaboration/components/socialtimeline/annotations/MetadataException.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility");

sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility",{
	/**
	 * Constructor for the Timeline Terms Utility
	 * This class is responsible with providing the field mapping for the TimelineEntry entities of a given business object 
	 * 
	 * @class TimelineTermsUtility
	 * @name sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility
	 *
	 * @constructor
	 * @param oServiceMetadata {Object} Service Metadata returned from ODataModel.getServiceMetadata()
	 * @param oServiceAnnotations {Object} Service Annotations returned from ODataModel.getServiceAnnotations()
	 */
	constructor: function(oServiceMetadata, oServiceAnnotations){
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility");
		this._oServiceMetadata = oServiceMetadata;
		this._oServiceAnnotations = oServiceAnnotations;
		this._oEntityMappings = {};
		// Services supported by the timeline must have the com.sap.vocabularies.Timeline.v1 namespace
		// defined in an Include element in their metadata document.
		this.sSchemaNamespace = "com.sap.vocabularies.Timeline.v1";
		var oSchema = this._getIncludedSchema(this.sSchemaNamespace);
		if (!(oSchema && oSchema.schemaNamespace === this.sSchemaNamespace)) {
			var sExceptionMessage = "Schema with namespace " + this.sSchemaNamespace + " wasn't in an Include in the service's metadata document.";
			this._oLogger.error(sExceptionMessage);
			throw new sap.collaboration.components.socialtimeline.annotations.MetadataException(sExceptionMessage);
		}
	},
	/**
	 * Get the TimelineEntry navigation path for sEntityCollection
	 * @public
	 * @param sEntityCollection
	 * @returns {string}
	 */
	getTimelineEntryNavigationPath: function(sEntityCollection){
		if(!sEntityCollection){
			var oError = new Error('Parameter sEntityCollection is undefined');
			this._oLogger.error(oError.message);
			throw oError;
		}
		var oMapping = this._oEntityMappings[sEntityCollection];
		if(!oMapping){
			oMapping = this._buildMapping(sEntityCollection);
		}
		
		return oMapping.timelineEntryNavigationPath;
	},
	/**
	 * Get the TimelineEntry entity's fields
	 * @public
	 * @param sEntityCollection
	 * @returns {object} map of the TimelineEntry entity's fields
	 */
	getTimelineEntryFields: function(sEntityCollection){
		if(!sEntityCollection){
			var oError = new Error('Parameter sEntityCollection is undefined');
			this._oLogger.error(oError.message);
			throw oError;
		}
		var oMapping = this._oEntityMappings[sEntityCollection];
		if(!oMapping){
			oMapping = this._buildMapping(sEntityCollection);
		}
		
		var oTimelineEntryFields = this._oEntityMappings[sEntityCollection].timelineEntryFields;
		if(!oTimelineEntryFields){
			var oTimelineEntryEntityFields = this._oServiceAnnotations[oMapping.timelineEntryEntityTypeFull][this.sSchemaNamespace + ".TimelineEntry"];
			if(!oTimelineEntryEntityFields){
				oTimelineEntryEntityFields = this._oServiceAnnotations[oMapping.timelineEntryEntityTypeFull][this._getCollaborationAlias() + ".TimelineEntry"];
			}
			oTimelineEntryFields = this._mapEntityFields(oTimelineEntryEntityFields);
			this._oEntityMappings[sEntityCollection].timelineEntryFields = oTimelineEntryFields;
		}
		return oTimelineEntryFields;
	},
	/**
	 * Get the TimelineEntryDetail entity's fields
	 * @public
	 * @param sEntityCollection
	 * @returns {object} map of the TimelineEntry entity's fields
	 */
	getTimelineEntryDetailFields: function(sEntityCollection){
		if(!sEntityCollection){
			var oError = new Error('Parameter sEntityCollection is undefined');
			this._oLogger.error(oError.message);
			throw oError;
		}
		var oMapping = this._oEntityMappings[sEntityCollection];
		if(!oMapping){
			oMapping = this._buildMapping(sEntityCollection);
		}
		
		var oTimelineEntryDetailFields = this._oEntityMappings[sEntityCollection].timelineEntryDetailFields;
		if(!oTimelineEntryDetailFields){
			var oTimelineEntryDetailEntityFields = this._oServiceAnnotations[oMapping.timelineEntryDetailEntityTypeFull][this.sSchemaNamespace + ".TimelineDetailPropertyValueChange"];
			if(!oTimelineEntryDetailEntityFields){
				oTimelineEntryDetailEntityFields = this._oServiceAnnotations[oMapping.timelineEntryDetailEntityTypeFull][this._getCollaborationAlias() + ".TimelineDetailPropertyValueChange"];
			}
			oTimelineEntryDetailFields = this._mapEntityFields(oTimelineEntryDetailEntityFields);
			this._oEntityMappings[sEntityCollection].timelineEntryDetailFields = oTimelineEntryDetailFields;
		}
		return oTimelineEntryDetailFields;
	},	
	
	/**
	 * Build mapping object for an entity collection
	 * @private
	 * @param sEntityCollection
	 * @returns {object} oMapping object
	 */
	_buildMapping: function(sEntityCollection){
		//build mapping object for entity collection and keep it for reuse
		this._oEntityMappings[sEntityCollection] = {};
		this._oEntityMappings[sEntityCollection].entityCollection = sEntityCollection;
		this._oEntityMappings[sEntityCollection].entityTypeFull = this._getEntityTypeFull(sEntityCollection);
		this._oEntityMappings[sEntityCollection].namespace = this._oEntityMappings[sEntityCollection].entityTypeFull.split(".")[0];
		this._oEntityMappings[sEntityCollection].entityType = this._oEntityMappings[sEntityCollection].entityTypeFull.split(".")[1];
				
		var oEntityTimelineNavigationPath = this._oServiceAnnotations[this._oEntityMappings[sEntityCollection].entityTypeFull][this.sSchemaNamespace + ".TimelineNavigationPath"];
		if(!oEntityTimelineNavigationPath){
			oEntityTimelineNavigationPath = this._oServiceAnnotations[this._oEntityMappings[sEntityCollection].entityTypeFull][this._getCollaborationAlias() + ".TimelineNavigationPath"];
		}
		this._oEntityMappings[sEntityCollection].timelineEntryNavigationPath = oEntityTimelineNavigationPath.NavigationPropertyPath;
		this._oEntityMappings[sEntityCollection].timelineEntryEntityTypeFull = this._getChildEntityTypeFull( this._oEntityMappings[sEntityCollection].entityType, this._oEntityMappings[sEntityCollection].timelineEntryNavigationPath );	
		this._oEntityMappings[sEntityCollection].timelineEntryEntityType = this._oEntityMappings[sEntityCollection].timelineEntryEntityTypeFull.split(".")[1];
		this._oEntityMappings[sEntityCollection].timelineEntryFields = undefined;

		var oTimelineEntryEntityFields = this._oServiceAnnotations[this._oEntityMappings[sEntityCollection].timelineEntryEntityTypeFull][this.sSchemaNamespace + ".TimelineEntry"];
		if(!oTimelineEntryEntityFields){
			oTimelineEntryEntityFields = this._oServiceAnnotations[this._oEntityMappings[sEntityCollection].timelineEntryEntityTypeFull][this._getCollaborationAlias() + ".TimelineEntry"];
		}
		this._oEntityMappings[sEntityCollection].timelineEntryDetailNavigationPath = oTimelineEntryEntityFields.TimelineDetailNavigationPath.NavigationPropertyPath;
		this._oEntityMappings[sEntityCollection].timelineEntryDetailEntityTypeFull = this._getChildEntityTypeFull( this._oEntityMappings[sEntityCollection].timelineEntryEntityType, this._oEntityMappings[sEntityCollection].timelineEntryDetailNavigationPath );
		this._oEntityMappings[sEntityCollection].timelineEntryDetailFields = undefined;
			
		return this._oEntityMappings[sEntityCollection];
	},
	/**
	 * Get the full entity type from the service metadata for given entity collection
	 * @private
	 * @param sEntityCollection
	 * @returns {string} entityType
	 */
	_getEntityTypeFull: function(sEntityCollection){
		for (var i = this._oServiceMetadata.dataServices.schema.length - 1; i >= 0; i--) {
			var oMetadataSchema = this._oServiceMetadata.dataServices.schema[i];
			if (oMetadataSchema.entityContainer) {
				var aEntitySets = oMetadataSchema.entityContainer[0].entitySet;
				for (var j = aEntitySets.length - 1; j >= 0; j--) {
					if (aEntitySets[j].name === sEntityCollection) {
						return aEntitySets[j].entityType;
					}
				}
			}
		}
		throw new Error("Entity collection '" + sEntityCollection + "' could not be found in service");
	},
	/**
	 * Get the full entity type for a child entity 
	 * @param sEntityType
	 * @param sNavigationPath
	 * @returns {object} returns an object from the service metadata representing the entity type of the Timeline Entry
	 */
	_getChildEntityTypeFull: function(sEntityType, sNavigationPath){
		var oEntityType = this._getEntityTypeObject(sEntityType);
		var oNavigationProperty = this._getNavigationProperty(oEntityType, sNavigationPath);
		var oAssociationEnd = this._getAssociationEnd(oNavigationProperty.toRole);
		
		return oAssociationEnd.type;
	},
	/**
	 * Get the entity type object
	 * @param sEntityType
	 * @returns {object} returns an object from the service metadata representing the entity type
	 */
	_getEntityTypeObject: function(sEntityType){
		for (var i = this._oServiceMetadata.dataServices.schema.length - 1; i >= 0; i--) {
			var oMetadataSchema = this._oServiceMetadata.dataServices.schema[i];
			if (oMetadataSchema.entityType) {
				var aEntityTypes = oMetadataSchema.entityType;
				for (var j = aEntityTypes.length - 1; j >= 0; j--) {
					if (aEntityTypes[j].name === sEntityType ) {
						return aEntityTypes[j];
					}
				}
			}
		}
		throw new Error("Entity Type '" + sEntityType + "' could not be found in service");
	},
	/**
	 * Get the navigation property object
	 * @param oEntityType
	 * @param sNavigationProperty
	 * @returns {object} returns an object from the service metadata representing the navigation property 
	 */
	_getNavigationProperty: function(oEntityType, sNavigationProperty){
		if(oEntityType.navigationProperty){
			for (var k = oEntityType.navigationProperty.length - 1; k >= 0; k--) {
				if(oEntityType.navigationProperty[k].name === sNavigationProperty){
					return oEntityType.navigationProperty[k];
				}
			}
		}
		throw new Error("Navigation property '" + sNavigationProperty + "' could not be found for entity '"+ oEntityType.name + "'.");
	},
	/**
	 * Get association end object
	 * @param sRole
	 * @returns {object} returns an object from the service metadata representing the association end
	 */
	_getAssociationEnd: function(sRole){
		for (var i = this._oServiceMetadata.dataServices.schema.length - 1; i >= 0; i--) {
			var oMetadataSchema = this._oServiceMetadata.dataServices.schema[i];
			if (oMetadataSchema.association) {
				for (var j = oMetadataSchema.association.length - 1; j >= 0; j--) {
					for(var k = oMetadataSchema.association[j].end.length - 1; k>=0; k--){
						if( oMetadataSchema.association[j].end[k].role === sRole ){
							return oMetadataSchema.association[j].end[k];
						}
					}
				}
			}
		}
		throw new Error("Association with role '" + sRole + "' could not be found in service.");
	},
	/**
	 * Returns an object map of an entity's field names
	 * @param oEntityFields
	 * @returns {object}
	 */
	_mapEntityFields: function(oEntityFields){
		var oFields = {};
		for (var oProperty in oEntityFields) {
			if (oEntityFields.hasOwnProperty(oProperty)) {
				if (oEntityFields[oProperty].Path) {
					oFields[oProperty] = oEntityFields[oProperty].Path;
				} else if (oEntityFields[oProperty].PropertyPath) {
					oFields[oProperty] = oEntityFields[oProperty].PropertyPath;
				} else if (oEntityFields[oProperty].EnumMember) {
					oFields[oProperty] = oEntityFields[oProperty].EnumMember;
				} else if (oEntityFields[oProperty].NavigationPropertyPath) {
					oFields[oProperty] = oEntityFields[oProperty].NavigationPropertyPath;
				}
			}
		}
		return oFields;
	},
	/**
	 * Get collaboration definition
	 * @returns {string}
	 */
	_getCollaborationAlias: function(){
		var aliasDefinitions = this._oServiceAnnotations.aliasDefinitions;
		for(var alias in aliasDefinitions){
			if(aliasDefinitions[alias].indexOf("com.sap.vocabularies.Timeline.v1") > -1){
				return alias;
			}
		}
	},

	
	
	/**
	 * Obtains the schema with the specified namespace from a Reference element in the metadata document. If
	 * the schema is defined within a Schema element, then this method returns undefined.
	 * @private
	 * @param sSchemaNamespace The namespace of the schema to return.
	 * @returns {object} Returns an object with the following structure: {schemaNamespace:"namespace", schemaAlias:"alias"}. If the schema doesn't use an alias,
	 * then the schemaAlias property value will be undefined. If the schema can't be found in a Reference element of the Metadata Document, then this method
	 * returns undefined.
	 */
	_getIncludedSchema: function(sSchemaNamespace) {
		// Iterate through the reference elements.
		var i = 0;
		var j = 0;
		var k = 0;
		var oReference;
		var oReferenceChild;
		var oIncludeAttribute;
		var oSchema = {schemaNamespace:undefined, schemaAlias:undefined};
		if (this._oServiceMetadata && this._oServiceMetadata.extensions) {
			// Iterate through the Reference elements.
			for(i = 0; i < this._oServiceMetadata.extensions.length; ++i) {
				oReference = this._oServiceMetadata.extensions[i];
				// Iterate through the child elements; we pay attention to the Include elements only.
				for(j = 0; j < oReference.children.length; ++j) {
					oReferenceChild = oReference.children[j];
					if (oReferenceChild.name == "Include") {
						// We then extract the Namespace and Alias attribute values.
						for (k = 0; k < oReferenceChild.attributes.length; ++k) {
							oIncludeAttribute = oReferenceChild.attributes[k];
							if (oIncludeAttribute.name == "Namespace") {
								oSchema.schemaNamespace = oIncludeAttribute.value;
							}
							if (oIncludeAttribute.name == "Alias") {
								oSchema.schemaAlias = oIncludeAttribute.value;
							}
						}
						// Return this schema if it matches the input namespace.
						if (oSchema.schemaNamespace == sSchemaNamespace) {
							return oSchema;
						}
					} 
				}
			}
			// If the schema wasn't found within a Reference element, then return undefined.
			return undefined;
		}
		return undefined;
	}
});
}; // end of sap/collaboration/components/socialtimeline/annotations/TimelineTermsUtility.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.controls.TimelineItemEmbeddedRenderer') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.socialtimeline.controls.TimelineItemEmbeddedRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/collaboration/components/socialtimeline/controls/TimelineItemEmbeddedRenderer",[],
	function(){
	/**
	 * TimelineItemEmbedded renderer.
	 * @namespace
	 */
	var TimelineItemEmbedded = {};
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * @protected
	 * @param {sap.ui.core.RenderManager} oRM the RenderManager that can be used for writing to the render output buffer.
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered.
	 */
	TimelineItemEmbedded.render = function(oRm, oControl) {
		oRm.renderControl(oControl.getEmbeddedControl());
	};
	
	return TimelineItemEmbedded;
}, /* bExport= */ true);
}; // end of sap/collaboration/components/socialtimeline/controls/TimelineItemEmbeddedRenderer.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler");

sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler",{
	/**
	 * Constructor for the Service Data handler
	 * This class is responsible with providing the History data for a given business object
	 * 
	 * @class ServiceDataHandler
	 * @name sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler
	 *
	 * @constructor
	 * @param {Object} oBOModel Business Object OData Service Model
	 * @param {sap.collaboration.components.socialtimeline.datahandlers.TimelineTermsUtility} oTimelineTermsUtility - Utility class for the timeline terminology
	 */
	constructor: function(oBOModel, oTimelineTermsUtility) {	
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler");
		
		this._oBOModel = oBOModel;
		this._oTimelineTermsUtility = oTimelineTermsUtility;
	},
	/**
	 * Perform the read to retrieve the timeline entries of a given business object
	 * @param {String} sEntityCollection - Entity collection name
	 * @param {String} sBOKey - Business object key
	 * @param {integer} iSkip - Skip token
	 * @param {integer} iTop - Top token
	 * @returns {Object} HTTP request
	 */
	readTimelineEntries: function(sEntityCollection, sBOKey, sOdataFilter, iSkip, iTop){
		var that = this;
		var oPromise = jQuery.Deferred();
		
		var sEndpoint = this._buildTimelineEntriesEndpoint(sEntityCollection, sBOKey, sOdataFilter, iSkip, iTop);
		var mParameters = {
				context: null,
				urlParameters: null,
				async: true,
				filters: [],
				sorters: [],
                success: function(oData,response){
					oPromise.resolve(oData);
				},
				error: 	function(oError){
					// we need this check since an aborted request also causes an error, but doesn't have a status code and should not be treated as an error
					if(oError.response && oError.response.statusCode){
						that._oLogger.error(oError.body);
						oPromise.reject(oError);
					}
				}
		};
		
		return {
			request: this._oBOModel.read(sEndpoint, mParameters),
			promise: oPromise.promise()
		};
	},
	
	/**
	 * Builds the endpoint to get the History
	 * @param {String} sEntityCollection - Entity collection name
	 * @param {String} sBOKey - Business object key
	 * @param {integer} iSkip - Skip token
	 * @param {integer} iTop - Top token
	 * @returns {String} Timeline Entries endpoint
	 */
	_buildTimelineEntriesEndpoint: function(sEntityCollection, sBOKey, sOdataFilter, iSkip, iTop){
		var endpoint = "/" + sEntityCollection + "(" + jQuery.sap.encodeURL(sBOKey) + ")" + 
				"/" + this._oTimelineTermsUtility.getTimelineEntryNavigationPath(sEntityCollection) + 
				"?$expand=" + this._oTimelineTermsUtility.getTimelineEntryFields(sEntityCollection).TimelineDetailNavigationPath;
		if(iSkip != undefined){
			endpoint +=	"&$skip=" + iSkip;	
		}
		if(iTop != undefined){
			endpoint += "&$top=" + iTop;
		}
		if(sOdataFilter != undefined){
			endpoint += "&$filter=" + sOdataFilter;
		}
		
		this._oLogger.info("Timeline Entries Endpoint: " + endpoint);
		return endpoint;
	}
	
});

}; // end of sap/collaboration/components/socialtimeline/datahandlers/ServiceDataHandler.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler");

sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler",{
	/**
	 * Constructor for the Timeline Data Handler
	 * This class is responsible for providing the data for the Timeline control.
	 * 
	 * @class TimelineDataHandler
	 * @name sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 * 
	 * @constructor
	 * @param oBusinessObjectMap - JSON object containing the following properties:
	 * 	<ul>
	 * 		<li>{sap.ui.model.odata.ODataModel} serviceModel required - OData model to retrieve timeline entries
	 * 		<li>{string} servicePath: The relative path to the OData service for the business object (example: "/sap/opu/odata/sap/ODATA_SRV")		
	 * 		<li>{string} collection: Entity collection name of the business object
	 * 		<li>{string} applicationContext: The application context (example: "CRM", "SD", etc.)
	 * 		<li>{function} customActionCallback: A callback function to determine which timeline entries should receive the custom action. The function should return an array of text/value objects.
	 * 	<ul>
	 * @param {object} oJamDataHandler - Jam data handler 
	 * @param {object} oSMIntegrationDataHandler - Social Media Integration data handler
	 * @param {object} oServiceDataHandler - Business Object Service data handler
	 * @param {object} oTimelineTermsUtility - Terms Utility for the Business Object Service
	 * @param {integer} iPageSize - The page size to be returned to the timeline
	 * @param {boolean} bSocialFeaturesEnabled - Social Features Enabling flag
	 * @param {boolean} bBackendFeaturesEnabled - Backend Features Enabling flag
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	constructor: function(oBusinessObjectMap, oJamDataHandler, oSMIntegrationDataHandler, oServiceDataHandler, oTimelineTermsUtility, iPageSize, bSocialFeaturesEnabled, bBackendFeaturesEnabled) {	
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler");
		this._oFilterConstants = new sap.collaboration.components.socialtimeline.filter.FilterType();
		
		this._oBusinessObjectMap = oBusinessObjectMap;
		
		this._oJamDataHandler = oJamDataHandler;
		this._oServiceDataHandler = oServiceDataHandler;
		this._oTimelineTermsUtility = oTimelineTermsUtility;
		this._oSMIntegrationDataHandler = oSMIntegrationDataHandler;
		
		this._bSocialFeaturesEnabled = bSocialFeaturesEnabled;		
		this._bBackendFeaturesEnabled = bBackendFeaturesEnabled;
		
		this._iPageSize = iPageSize;
		this._iPageSize = iPageSize;
		this._iTimelineEntriesPageSize = iPageSize;
		this._iTimelineEntriesSkip = 0;
		this._iFeedEntriesPageSize = iPageSize*2;

		this._sBusinessObjectKey ="";
		this._sFeedEntriesNextLink = "";
		
		this._fCustomActionCallBack = oBusinessObjectMap.customActionCallback;
		
		this._aTimelineEntries = [];
		this._aFeedEntries = [];
		
		this._oExternalBO = {};
		this._oMemberDataBuffer = {};
		this._oExternalBOMapping = {};
	},
	
	/**
	 * Set the business object for the timeline data handler and reset the skip token
	 * @param {string} sKey - Business Object Key
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	setBusinessObject: function( oObject ){
		this._setBusinessObjectValues(oObject);
		this._resetBusinessObjectData();
		this.getExternalBOMapping();
	},
	
	/**
	 * Resets the timeline data by setting the skip counter to 0, the next link to an empty string, 
	 * and the timeline/feed entries to an empty array.
	 * 
	 * When changing the filter, the reset method should be called.
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	reset: function(){
		this._iTimelineEntriesSkip = 0; // reset timeline skip counter
		this._iTimelineEntriesPageSize = this._iPageSize; // reset timeline page size 

		this._sFeedEntriesNextLink = ""; // reset feed entries next link
		this._aTimelineEntries = []; // empty timeline entries 
		this._aFeedEntries = []; // empty feed entries 
	},
		
	/**
	 * Based on the filter, returns the data for the Timeline Control one page at a time. 
	 * To get the next page of data, the application can just call this method again. 
	 * 
	 * The business object key must be set using setBusinessObject before calling this function.
	 *  
	 * @param {Object} oFilter - Filter object 
	 * @returns {jQuery.Deferred} Promise to handle success or failure 
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	getTimelineData: function(oFilter, oBusinessObject){
		var oPromise = jQuery.Deferred();
		var that = this;
		
		if(oFilter.type === this._oFilterConstants.FILTER_TYPE.feedUpdates) {
			if (oBusinessObject) {
				this._setBusinessObjectValues(oBusinessObject);
				this._resetBusinessObjectData();
				oPromise = this.getExternalBOMapping().then(function() {
					return that._getExternalObjectJamOnlyFeedEntries();
				});
			}
			else {
				oPromise = this._getExternalObjectFeedEntries();				
			}
		}
		else if(oFilter.type === this._oFilterConstants.FILTER_TYPE.systemUpdates || oFilter.type === this._oFilterConstants.FILTER_TYPE.custom){			
			oPromise = this._getTimelineEntries(oFilter);
		}
		else{
			// if a wrong filter type is passed, return nothing
			this._oLogger.error("The filter type is invalid.");
			oPromise.resolve([]);
		}
		
		return oPromise.promise();
	},

	/**
	 * Get external object mapping
	 * The business object key must be set using setBusinessObject before calling this function.
	 * Get the external object mapping from the SM Integration service
	 * 
	 * @returns {jQuery.Deferred} Promise to handle success or failure 
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	getExternalBOMapping: function(){
		var oInternalBO = { 
				"appContext": this._oBusinessObjectMap.applicationContext,
				"collection": this._oBusinessObjectMap.collection,
				"name": this._sBusinessObjectName,
				"key": this._sBusinessObjectKey,
				"odataServicePath": this._oBusinessObjectMap.servicePath 
		};
		
		var oPromise = this._oSMIntegrationDataHandler.mapInternalBOToExternalBO(oInternalBO)	// Get external object mapping
			.then(function(oExternalBOMapping){
				this._oExternalBOMapping = oExternalBOMapping;
				this._oExternalBOMapping.Name = this._sBusinessObjectName;
			}.bind(this));
		
		return oPromise.promise();
	},

	/**
	 * Set business object values
	 * @param {object} oBusinessObject
	 * @private
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_setBusinessObjectValues: function(oBusinessObject) {
		this._sBusinessObjectKey = oBusinessObject.key;
		this._sBusinessObjectName = oBusinessObject.name;
	},

	/**
	 * Reset business object data for new business object selection
	 * @private
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_resetBusinessObjectData: function() {
		this.reset();

		// Abort request if there is still one running
		if(this._oTimelineEntriesReadRequest){
			this._oTimelineEntriesReadRequest.abort();
		}
		// Abort request if there is still one running
		if(this._oFeedEntriesReadRequest){
			this._oFeedEntriesReadRequest.abort();
		}
	},

	/**
	 * Get the feed entries for the current object 
	 * The business object key must be set using setBusinessObject before calling this function.
	 * 
	 * 1- Get the external object 
	 * 2- Get the feed entries for external object
	 * 3- Map the feed entries to timeline items
	 * 
	 * @returns {jQuery.Deferred} Promise to handle success or failure 
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_getExternalObjectFeedEntries: function(){
		var that = this;
		var oPromise = this._oJamDataHandler.getExternalObject(this._oExternalBOMapping)	// Get external object 
		.then(function(oExternalBO){
			that._oExternalBO = oExternalBO;
			if(that._sFeedEntriesNextLink == undefined){
				var gettingFeedEntries = jQuery.Deferred();
				gettingFeedEntries.resolve({"results":[]}, null);
				return {
					request: null,
					promise: gettingFeedEntries
				};
			}
			// if the link in buffer is "", then get the first page of feed entries
			else if(that._sFeedEntriesNextLink == ""){
				return that._oJamDataHandler.getFeedEntries(oExternalBO.Id);
			}
			// if the next link in buffer is defined, then get the next page of feed entries defined by the next link
			else{
				return that._oJamDataHandler.getFeedEntries(null, that._sFeedEntriesNextLink); 
			}
		})
		.then(function(oGettingFeedEntries){
			that._oFeedEntriesReadRequest = oGettingFeedEntries.request; // save the request
			return oGettingFeedEntries.promise;
		})
		.then(function(oFeedEntries){
			that._sFeedEntriesNextLink = oFeedEntries.__next; 	// save the next link
			return oFeedEntries.results;						// return the data
		})
		.then(function(aFeedEntries){
			return that._mapFeedEntriesToTimelineItems(aFeedEntries);
		});

		return oPromise.promise();
	},

	/**
	 * Get the feed entries for the current Business Object 
	 * The current Business Object key must be set using setBusinessObject before calling this function.
	 * 
	 * 1- Get the external object 
	 * 2- Get the feed entries for external object
	 * 3- Map the feed entries to timeline items
	 * 
	 * @returns {jQuery.Deferred} Promise to handle success or failure 
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_getExternalObjectJamOnlyFeedEntries: function() {
		var fnGetFeeds = function() {
			var oPromise = jQuery.Deferred();
			
			if (this._sFeedEntriesNextLink === undefined) {
				var gettingFeedEntries = jQuery.Deferred();
				gettingFeedEntries.resolve({"results":[]}, null);
				oPromise = {
					request: null,
					promise: gettingFeedEntries
				};
			}
			// if the link in buffer is "", then get the first page of feed entries
			else if (this._sFeedEntriesNextLink === "") {
				oPromise = this._oJamDataHandler.getExternalObjectByExidAndObjectType(this._oExternalBOMapping);
			}
			// if the next link in buffer is defined, then get the next page of feed entries defined by the next link
			else {
				oPromise = this._oJamDataHandler.getExternalObjectByExidAndObjectType(null, this._sFeedEntriesNextLink); 
			}
			
			return oPromise.promise;
		}.bind(this);
		
		var oPromise = fnGetFeeds()
		.then(function(oExternalObject) {
			this._oExternalBO = oExternalObject.results;
			var oFeedEntries = oExternalObject.results.FeedEntries;
			this._sFeedEntriesNextLink = oFeedEntries.__next; 	// save the next link
			return this._mapFeedEntriesToTimelineItems(oFeedEntries.results);
		}.bind(this));

		return oPromise.promise();
	},

	/**
	 * Get timeline entries from the backend
	 * 1- get timeline entries from backend service 
	 * 2- map the timeline entries into timeline items
	 * 3- get the pictures of the timeline items from Jam
	 * 
	 * @param {object} oFilter
	 * @returns {object} oPromise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_getTimelineEntries: function(oFilter){
		var that = this;
		// if the filter is set to get all of the backend entries, then in fact there shouldn't be a filter set. In the method 
		// this._oServiceDataHandler.readTimelineEntries(...) there is a check for this. If the filter is set to undefined then the 
		// parameter $filter is omitted when making the request in method this._oServiceDataHandler.readTimelineEntries(...).
		var sBackendFilter = oFilter.type;
		if(sBackendFilter !== this._oFilterConstants.FILTER_TYPE.custom){ 
			sBackendFilter = undefined;
		}
		else {
			sBackendFilter = oFilter.value;
		}
		var readingTimelineEntries = this._oServiceDataHandler.readTimelineEntries( this._oBusinessObjectMap.collection, this._sBusinessObjectKey, sBackendFilter, this._iTimelineEntriesSkip, this._iTimelineEntriesPageSize);
		this._oTimelineEntriesReadRequest = readingTimelineEntries.request; // save request
		
		var gettingTimelineEntries = 
			readingTimelineEntries.promise
			.then(function(TLData){
				var aTimelineEntries = TLData.results;
								
				that._iTimelineEntriesPageSize = aTimelineEntries.length;
				that._iTimelineEntriesSkip += that._iTimelineEntriesPageSize;
				return that._mapTimelineEntriesToTimelineItems(aTimelineEntries);  // map TE to TI
			})
			.then(function(aTimelineItems){
				if(that._bSocialFeaturesEnabled === true){
					return that._fillPicturesForTimelineItems(aTimelineItems); // fill pictures
				}
				return aTimelineItems;
			});

		return gettingTimelineEntries.promise();
	},
	
	/**
	 * Fill the empty userPicture property of the Timeline items
	 * @param {array} aTimelineItems - timeline items
	 * @returns {object} Promise object 
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_fillPicturesForTimelineItems: function(aTimelineItems){
		var that = this;
		var oPromise = jQuery.Deferred();
		var aEmails = [];
			
		// Find emails of  timeline items with no picture
		aTimelineItems.forEach(function(oTimelineItem){
			if(!oTimelineItem.timelineItemData.userPicture){
				aEmails.push(oTimelineItem.timelineItemData.userEmail);
			}
		});
		// remove duplicate emails
		var aUniqueEmails = aEmails.filter(function(element,index){
			return aEmails.indexOf(element) == index;
		});
		
		if(aUniqueEmails.length > 0){
			var gettingUserInfoBatch = this._oJamDataHandler.getUserInfoBatch(aUniqueEmails);
			gettingUserInfoBatch.promise.done(function(aUserInfo){
				// remove empty user info
				var aUserInfoFiltered = jQuery.grep(aUserInfo, function(oUserInfo){
					return oUserInfo.results.length > 0;
				});
				// add user info to buffer
				aUserInfoFiltered.forEach(function(oUserInfo){
					that.addUserInfoToBuffer(oUserInfo.results[0]);
				});
				// fill the pictures
				aTimelineItems.forEach(function(oTLItem){
					if(!oTLItem.timelineItemData.userPicture){
						oTLItem.timelineItemData.userPicture = that.getUserPicture(oTLItem.timelineItemData.userEmail);
					}
				});
				oPromise.resolve(aTimelineItems);	
			});
			gettingUserInfoBatch.promise.fail(function(oError){
				oPromise.resolve(aTimelineItems);	
			});
		}
		else{
			oPromise.resolve(aTimelineItems);
		}
		return oPromise.promise();
	},
	
	/**
	 * Get the @mentions per Feed Entry
	 * @param {object} oFeedEntry - A single feed entry
	 * @returns {object} mentions object 
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_getAtMentions: function(oFeedEntry){
		
		var oAtMentions = {};
		var gettingAtMentions = this._oJamDataHandler.getAtMentions(oFeedEntry.Id);
		
		gettingAtMentions.promise.done(function(oJamResults, response){
			
			var aJamResults = oJamResults.results;
			
			for(var i = 0; i < aJamResults.length; i++){
				if (aJamResults[i]){
					oAtMentions[i] = aJamResults[i];
				}
			}
		});

		gettingAtMentions.promise.fail(function(){			
			this._oLogger.error('Failed to get the @mentions.');
		});
		
		return oAtMentions;
	},

	/************************************************************************************************
	 * Mapping Feed Entries to Timeline Items
	 ************************************************************************************************/
	/**
	 * Map a collection of the Feed Entries into items for the Timeline control
	 * @param {Array} aFeedEntries - Array of feed entries
	 * @returns {Array} - Timeline items
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_mapFeedEntriesToTimelineItems: function(aFeedEntries){
		var that = this;
		var oTimelineItems = [];
		
		aFeedEntries.forEach(function(oFeedEntry){
			var oTLItem = {};
			oTLItem.timelineItemData = that._mapFeedEntryToTimelineItem(oFeedEntry); 
			oTLItem._feedEntryData = oFeedEntry; // keep original feed entry data
			if( oFeedEntry.ConsolidatedCount > 1){
				oTLItem._feedEntryData._consolidatedUrl = "<collaboration_host_url>" + oFeedEntry.Id; //removed hardcoded internal URL for security reasons
			}
			oTimelineItems.push(oTLItem);
		});
		return oTimelineItems;
	},
	
	/**
	 * Map a single Feed Entry into an item for the Timeline control
	 * @param {object} oFeedEntry - A single feed entry
	 * @returns {object} Timeline item 
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_mapFeedEntryToTimelineItem: function(oFeedEntry){
		var POST_ICON = "sap-icon://post";
		
		if(!this.getUserInfoFromBuffer(oFeedEntry.Creator.Email)){
			this.addUserInfoToBuffer(oFeedEntry.Creator);
		}
				
		var oTimelineItem = {
				feedId: oFeedEntry.Id,
				dateTime: oFeedEntry.CreatedAt,
				userName: oFeedEntry.Creator.FullName,
				userEmail: oFeedEntry.Creator.Email,
				title: oFeedEntry.Action,
				text: oFeedEntry.Text,
				textWithPlaceholders: oFeedEntry.TextWithPlaceholders,
				replyCount: oFeedEntry.RepliesCount,
				icon: POST_ICON				
		};

		oTimelineItem.userPicture = this.getUserPicture(oTimelineItem.userEmail);

		return oTimelineItem;
	},
	
	/************************************************************************************************
	 * Mapping Timeline Entries to Timeline Items
	 ************************************************************************************************/
	/**
	 * Map a collection of the Timeline Entries into items for the Timeline control
	 * @param {Array} aTimelineEntriesData - Array of timeline entries
	 * @returns {Array} - Timeline items
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_mapTimelineEntriesToTimelineItems: function(aTimelineEntriesData){
		var that = this;
		var oTimelineItems = [];
		
		aTimelineEntriesData.forEach(function(oTimelineEntry){
			var oTLItem = {};
			oTLItem.timelineItemData = that._mapTimelineEntryToTimelineItem(oTimelineEntry); 
			
			// custom actions
			var aCustomActions = undefined;
			if(that._fCustomActionCallBack){
				aCustomActions = that._fCustomActionCallBack(oTimelineEntry);
				if(aCustomActions){
					/*
					 * Validation for the customActionCallback 
					 */
					var bCustomActionsOK = true;
					// check if the return statement is an array
					if(!jQuery.isArray(aCustomActions)){ 
						that._oLogger.error("The type defined for the return statement of the function 'customActionCallback' is " 
								+ typeof(aCustomActions) + ", expected type is array. Custom actions have been removed.");
						bCustomActionsOK = false;
					}
					else {
						// loop through each item in the array to check:
						// 1. if the item is an object 
						// 2. each object contains the property 'key' and 'value'
						// 3. if the property 'value' is the type 'string', the property 'key' can be of any type
						for(var i=0; i<aCustomActions.length; i++){
							if(typeof(aCustomActions[i]) !== 'object'){
								that._oLogger.error("The function 'customActionCallback' returned the item " + JSON.stringify(aCustomActions[i]) 
										+ " of type " + typeof(aCustomActions[i]) + ", expected type is object. Custom actions have been removed.");
								bCustomActionsOK = false;
								break;
							}
							else if(!aCustomActions[i].key || !aCustomActions[i].value){
								that._oLogger.error("The function 'customActionCallback' returned the item " + JSON.stringify(aCustomActions[i]) 
										+ " with the property 'key' or 'value' as undefined. Custom actions have been removed.");
								bCustomActionsOK = false;
								break;
							}
							else if(typeof(aCustomActions[i].value) !== 'string'){
								that._oLogger.error("The function 'customActionCallback' returned the item " + JSON.stringify(aCustomActions[i]) 
										+ " with the property 'value' as type " + typeof(aCustomActions[i].value) 
										+ ", expected type is string. Custom actions have been removed.");
								bCustomActionsOK = false;
								break;
							}
						}	
					}
					
					if(bCustomActionsOK){
						aCustomActions.oDataEntry = oTimelineEntry;
						oTLItem.timelineItemData.customActionData = aCustomActions;
					}
				}
			}
			oTimelineItems.push(oTLItem);
		});
		return oTimelineItems;
	},
	
	/**
	 * Map a single Timeline Entry into an item for the Timeline control
	 * @param {object} oTimelineEntry - A single timeline entry
	 * @returns {object} Timeline item 
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_mapTimelineEntryToTimelineItem: function(oTimelineEntry){
		var oTimelineEntryFields = this._oTimelineTermsUtility.getTimelineEntryFields(this._oBusinessObjectMap.collection);
		
		var oTimelineItem = {  
				dateTime: oTimelineEntry[oTimelineEntryFields.TimeStamp],
				userName: oTimelineEntry[oTimelineEntryFields.ActorName],
				userEmail: oTimelineEntry[oTimelineEntryFields.ActorExtID].toLowerCase(),
				title: oTimelineEntry[oTimelineEntryFields.ActionText] ,
				text: oTimelineEntry[oTimelineEntryFields.SummaryText],
				icon: oTimelineEntry[oTimelineEntryFields.Icon],
				timelineEntryDetails: this._processTimelineEntryDetails(oTimelineEntry[oTimelineEntryFields.TimelineDetailNavigationPath].results,
																		this._oBusinessObjectMap.collection)
			};
		oTimelineItem.userPicture = this.getUserPicture(oTimelineItem.userEmail);
		return oTimelineItem;
	},
	
	/**
	 * Returns the timeline entry details in format for the social timeline
	 * @param {Array} aTimelineEntryDetails - Timeline entry details
	 * @param {String} sEntityCollection - Entity collection name
	 * @returns {Array} Timeline entry details for the social timeline 
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	_processTimelineEntryDetails : function(aTimelineEntryDetails, sEntityCollection){
		var that = this;
		var aTimelineEntryDetailsView = [];
		
		var oTimelineEntryDetailFields = that._oTimelineTermsUtility.getTimelineEntryDetailFields(sEntityCollection);
		
		aTimelineEntryDetails.forEach(function(oTimelineEntryDetail){
			var oDetail = {};
			oDetail.afterValue = oTimelineEntryDetail[oTimelineEntryDetailFields.AfterValue];
			oDetail.beforeValue = oTimelineEntryDetail[oTimelineEntryDetailFields.BeforeValue];
			oDetail.changeType = oTimelineEntryDetail[oTimelineEntryDetailFields.ChangeType];
			oDetail.propertyLabel = oTimelineEntryDetail[oTimelineEntryDetailFields.PropertyLabel];
			
			aTimelineEntryDetailsView.push(oDetail);
		});
			
		return aTimelineEntryDetailsView;
	},
	
	/************************************************************************************************
	 * Member Information APIs
	 ************************************************************************************************/
	/**
	 * get the user picture
	 * @param {string} sUserEmail
	 * @returns {string} image url
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	getUserPicture: function(sUserEmail){
		var oMember = this.getUserInfoFromBuffer(sUserEmail);
		if(!oMember){
			return "";
		}
		return oMember.picture;
	},
	
	/**
	 * Builds the image url 
	 * @param {object} Member or FeedEntry or Comment 
	 * @returns {string} image url
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	buildImageUrl: function(oObject){
		return this._oJamDataHandler._oCollabModel.sServiceUrl + "/"+ oObject.__metadata.uri +"/ThumbnailImage/$value";
	},
	
	/**
	 * Adds member information to the buffer
	 * @param {object} oMember - member entity
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	addUserInfoToBuffer: function(oMember){
		var userPicture = this.buildImageUrl(oMember);
		var sUserEmailLC = oMember.Email.toLowerCase();
		this._oMemberDataBuffer[sUserEmailLC] = {
				"email":sUserEmailLC,
				"fullname":oMember.FullName,
				"id":oMember.Id,
				"address":oMember.MemberProfile.Address,
				"title":oMember.Title,
				"role":oMember.Role,
				"picture": userPicture
		};
	},
	/**
	 * Return the user information
	 * @param {string} sUserEmail
	 * @returns {object} user information
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	getUserInfoFromBuffer: function(sUserEmail){
		var sUserEmailLC = sUserEmail.toLowerCase();
		return this._oMemberDataBuffer[sUserEmailLC];
	},
	/**
	 * Getter for the current ExternalBO object
	 * 
	 * @returns {object} Current ExternalBO
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 */
	getCurrentExternalBO: function(){
		return this._oExternalBO;
	}

});

}; // end of sap/collaboration/components/socialtimeline/datahandlers/TimelineDataHandler.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.JamUtil') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*************************************************************
* JamUtil helper class
*
* Is responsible for the integration and communication with the
* JAM APIs
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.utils.JamUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.JamUtil",{
	
	FeedRenderedControllerConstants : {
		jamWidgetCSS :	{
			avatar: false, 
			skin: "gr", 
			post_mode: "inline", 
			reply_mode: "inline",
			mobile_mode: true,
			live_update: true
		}
	},
	
	JamFeedType: {
		Follows: "follows",
		Company: "company",
		Group: "group",
		ObjectGroup: "context",
		Object: "external"
	},
	
	JamCallback: {
		autocomplete: "autocomplete",
		post_status: "post_status",
		link: "link"		
	},	
	
	JamEventType: {
		mouseover: "mouseover",
		mouseout: "mouseout",
		click: "click"
	},
	
	/**
	 * Creates the feed widget
	 * @param {string} sJamURL The URL for the JAM System
	 * @param {callback} fLoadSuccess A call back function in case of success
	 * @param {callback} fLoadError A call back function in case of error
	 * @private
	 */
	loadFeedWidgetScript : function(sJamURL, fLoadSuccess, fLoadError) {
		var self = this;
		var sScriptUrl = sJamURL  + "/assets/feed_widget_v1.js";
		
		jQuery.sap.includeScript(sScriptUrl, "sap.collaboration.feed.JamFeedWidget", fLoadSuccess, fLoadError);
		jQuery.sap.log.info("Jam Feed Widget Script Loading Asynchronously","sap.collaboration.components.utils.JamUtil.loadFeedWidgetScript()");
		
	},
	
	/**
	 * Initialize the JAM feed widget by calling JAM API
	 * @param {string} sJamURL The URL for the JAM System
	 * @private
	 */
	initializeJamWidget : function(sJamURL) {
		try{
		   this.sapjam = eval('sapjam');
		   this.sapjam.feedWidget.init(sJamURL + "/widget/v1/feed", "single_use_token");
		   jQuery.sap.log.info("Jam Feed Widget Initialized", "sap.collaboration.components.utils.JamUtil.initializeJamWidget()");
		   // "/c/cubetree.com/widget/v1/feed", "single_use_token"
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.JamUtil.initializeJamWidget()");
			throw oError;
		}
	},

   /**
	 * Creates the JAM feed widget by calling the JAM API
	 * @param {string} sJamToken A JAM token
	 * @param {string} sWidgetContainerID The DIV ID for the widget
	 * @param {string} sFeedType The widget feed type
	 * @param {string} sGroupIds The JAM groups ID in case feed type is "group"
	 * @param {object} oBusinessObject The object in case of object feed
	 * @private
	 */
	createJamWidget:function(sWidgetContainerID, oWidgetData){
		try{							
			jQuery.sap.log.debug("Jam Feed Widget Properties:", "", "sap.collaboration.components.utils.JamUtil.createJamWidget()");
			jQuery.sap.log.debug("type: " + JSON.stringify(oWidgetData.type));
			jQuery.sap.log.debug("group_id: " + JSON.stringify(oWidgetData.group_id));
			jQuery.sap.log.debug("external_id: " + JSON.stringify(oWidgetData.external_id));
			jQuery.sap.log.debug("external_type: " + JSON.stringify(oWidgetData.external_type));
	        jQuery.sap.log.debug("external_object: " + JSON.stringify(oWidgetData.external_object));
	        
			this.sapjam = eval('sapjam');
			this.sapjam.feedWidget.create(sWidgetContainerID, oWidgetData);
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.JamUtil.createJamWidget()");
			throw oError;
		}

	},
	
	/**
	 * Creates the data needed by the JAM API to create the widget 
	 * @param {string} sJamToken A JAM token
	 * @param {string} sFeedType The widget feed type
	 * @param {string} sGroupIds The JAM groups ID in case feed type is "group"
	 * @param {object} oBusinessObject The object in case of object feed
	 * @private
	 */
	prepareWidgetData:function(sJamToken, sFeedType, sGroupIds, oBusinessObject) {
		var oWidgetData;
		
		oWidgetData = {
			type: sFeedType, 
			avatar: this.FeedRenderedControllerConstants.jamWidgetCSS.avatar, 
			//skin: this.FeedRenderedControllerConstants.jamWidgetCSS.skin, 
			live_update: this.FeedRenderedControllerConstants.jamWidgetCSS.live_update,
			post_mode: this.FeedRenderedControllerConstants.jamWidgetCSS.post_mode, 
			reply_mode: this.FeedRenderedControllerConstants.jamWidgetCSS.reply_mode,
			mobile_mode: this.FeedRenderedControllerConstants.jamWidgetCSS.mobile_mode,
			hide_bookmark: true,
			single_use_token: sJamToken
		};
		
		switch(sFeedType){
			case sap.collaboration.FeedType.follows:
	   		case sap.collaboration.FeedType.company:
				oWidgetData.type = sFeedType;
				break;
	   		case sap.collaboration.FeedType.group:
	   		case sap.collaboration.FeedType.objectGroup:
				oWidgetData.type 			= this.JamFeedType.Group;
				oWidgetData.group_id 		= sGroupIds;
				break;
	   		case sap.collaboration.FeedType.object:
				oWidgetData.type 			= this.JamFeedType.Object;
				if(!oBusinessObject){
					var oErrorObjectUndefined = new Error("Object is undefined");
					jQuery.sap.log.error(oErrorObjectUndefined, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oErrorObjectUndefined;
				}
				if(!oBusinessObject.id){
					var oErrorIdUndefined = new Error("Property 'id' is undefined");
					jQuery.sap.log.error(oErrorIdUndefined, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oErrorIdUndefined;
				}
				if(!oBusinessObject.type){
					var oErrorTypeUndefined = new Error("Property 'type' is undefined");
					jQuery.sap.log.error(oErrorTypeUndefined, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oErrorTypeUndefined;
				}
				try{
					oWidgetData.external_id		= oBusinessObject.id;
					oWidgetData.external_type	= oBusinessObject.type;					
					oWidgetData.external_object = oBusinessObject;
				} catch(oError){
					jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oError;
				}
				break;
	   		default:
				var sError = "Feed Type not supported";
				jQuery.sap.log.error(sError, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
				throw new Error(sError);
		}
		
		return oWidgetData;
	},
	
	/**
	 * Creates a XMLHttpRequest object to make a request the single use token from the SAP Jam REST API. If successful, returns the single use token
	 * @param {string} sCollaborationHostRestService The REST Service URL
	 * @param {function} fnAjaxCallback The callback function for the AJAX request
	 * @param {boolean} bAsync Whether the AJAX call should be asynchronous or not
	 */
	getJamSinglelUseTokens: function(sCollaborationHostRestService, fnAjaxCallback, bAsync, sCSRFToken){
		var self = this;
		var xmlHttpRequest = new window.XMLHttpRequest();	
		var sSingleUseTokenPostURL = sCollaborationHostRestService + "/single_use_tokens";
		
		xmlHttpRequest.open("POST",	sSingleUseTokenPostURL, bAsync);			
		xmlHttpRequest.onreadystatechange = fnAjaxCallback;
		xmlHttpRequest.setRequestHeader("x-csrf-token", sCSRFToken);
		xmlHttpRequest.send();
	},
	
	/**
	 * Creates a XMLHttpRequest object to make a request the single use token from the SAP Jam REST API. If successful, returns the single use token
	 * @param {string} sCollaborationHostRestService The REST Service URL
	 * @param {function} fnAjaxCallback The callback function for the AJAX request
	 * @param {boolean} bAsync Whether the AJAX call should be asynchronous or not
	 */
	getCSRFToken: function(sEndPoint, fnAjaxCallback, bAsync){
		var self = this;
		var xmlHttpRequest = new window.XMLHttpRequest();
		
		xmlHttpRequest.open("GET",	sEndPoint, bAsync);			
		xmlHttpRequest.onreadystatechange = fnAjaxCallback;
		xmlHttpRequest.setRequestHeader("x-csrf-token", "fetch");
		xmlHttpRequest.send();
	}
});
}; // end of sap/collaboration/components/utils/JamUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.LanguageBundle') ) {
/**
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.collaboration.components.utils.LanguageBundle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/utils/LanguageBundle",['jquery.sap.global','sap/ui/base/Object'], 
	function(jQuery, Object) {
	"use strict";
	/**
	 * Language bundle for Collaboration
	 *
	 * @class
	 * Language bundle for Collaboration 
	 * @extends sap.ui.base.Object
	 *
	 * @author SAP SE
	 * @version ${version}
	 *
	 * @constructor
	 * @public
	 */
	var resourceUrl = jQuery.sap.getModulePath("sap.collaboration.components") + "/resources/i18n/messagebundle.properties";
	var LanguageBundle = Object.extend("sap.collaboration.components.util.LanguageBundle", {
		constructor: function(){
			
			this.i18nModel =  new sap.ui.model.resource.ResourceModel({
				bundleUrl: resourceUrl
			});
			
			this.oLangBundle = this.i18nModel.getResourceBundle();
		},
		getText: function(textId, variables) {
			return this.oLangBundle.getText(textId, variables);
		},
		createResourceModel: function() {

			return this.i18nModel;
		}
	});
	
	return LanguageBundle;
},/* bExport= */ true );


}; // end of sap/collaboration/components/utils/LanguageBundle.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.MessageQueueUtil') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*************************************************************
* Message queue utility class to manager user messages
* 
**************************************************************/

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.utils.MessageQueueUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.MessageQueueUtil",{
	
	/* Constants for MessageQueueUtil class*/
	messageTypes: {
		messageToast : "MToast",
		messageBox : "MBox"
	},
	
	/*Queue to hold messages*/
	aMessageQueue: [],

	/**
	 * Adds the message to the queue and checks if this is the only message in the queue. If so, then the message is displayed immediately.
	 * The method afterMessageClose() is attached to oOptions and passed to the options parameter in the message. If there is more than 1 message in the queue,
	 * it is displayed only after the previous message is completed. This check is done in the afterMessageClose() method.
	 * @public
	 */
	displayMessage: function(sMessage, oOptions, sTypeOfMessage) {
		var oLocalOptions = oOptions;
		
		oLocalOptions.onClose = this.afterMessageClose();
		
		this.addMessageToQueue(sMessage, oLocalOptions, sTypeOfMessage);
		
		if(this.aMessageQueue.length == 1){
			if(this.aMessageQueue[0].type == this.messageTypes.messageBox){
				sap.m.MessageBox.show(this.aMessageQueue[0].message, this.aMessageQueue[0].options);
			}
			else if(this.aMessageQueue[0].type == this.messageTypes.messageToast){
				sap.m.MessageToast.show(this.aMessageQueue[0].message, this.aMessageQueue[0].options);
			}
		}
	},
	
	/**
	 * Add message to the queue
	 * @private
	 */
	addMessageToQueue: function(sMessage, oLocalOptions, sTypeOfMessage){
		this.aMessageQueue.push({message: sMessage, options: oLocalOptions, type: sTypeOfMessage});
	},
	
	/**
	 * Method to be executed after the message is closed. This method is attached to oOptions and passed to the message.
	 * It checks if there are messages in the queue and if so, then displays the message. This only occurs after the previous message is closed.
	 * @private
	 */
	afterMessageClose: function(){
		var self = this;
		return function(){
			self.aMessageQueue.shift();
		
			if(self.aMessageQueue.length != 0){
				if(self.aMessageQueue[0].type == self.messageTypes.messageBox){
					sap.m.MessageBox.show(self.aMessageQueue[0].message, self.aMessageQueue[0].options);
				}
				else if(self.aMessageQueue[0].type == self.messageTypes.messageToast){
					sap.m.MessageToast.show(self.aMessageQueue[0].message, self.aMessageQueue[0].options);
				}
			}
		};
	}
});
}; // end of sap/collaboration/components/utils/MessageQueueUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.NotificationTypeUtil') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*************************************************************
* OdataUtil helper class
*
* Is responsible for the integration and communication with the
* Backend OData Server
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.utils.NotificationTypeUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.NotificationTypeUtil",{
	
	/**
	 * Constants for the OdataUtil Class
	 */
	map: {
		AbuseReported : [],
		AcceptAddedAsAssistant : ["SenderFullName"],
		AcceptAddedAsMgr : ["SenderFullName"],
		AcceptAddedAsReport : ["SenderFullName"],
		AddedAsAssistant : ["SenderFullName"],
		AddedAsMgr : ["SenderFullName"],
		AddedAsReport : ["SenderFullName"],
		AutoGroupAdmin : ["SenderFullName"],
		AutoGroupMember : ["SenderFullName"],
		CommentInDiscussion : ["SenderFullName"],
		CrossCompanyInviteToGroup : ["SenderFullName", "ObjName"],
		FeatureInGroup : ["SenderFullName"],
		GoalMigrated : [],
		GroupContentPendingApproval : [],
		GroupAccessRequest : ["ObjName"], // there are {0} pending requests to join a group
		InviteToFollow : ["SenderFullName"],
		InviteToInactiveGroup : ["SenderFullName"],
		InviteToGroup : ["SenderFullName"],
		Like : ["SenderFullName"],
		MarkComment : ["SenderFullName"],
		MarkCommentSimple : ["SenderFullName"],
		MentionInFeed : ["SenderFullName"],
		ReceiveKudoType : ["SenderFullName", "ObjName"],
		ReceivedKudo : ["SenderFullName", "ObjName"],
		ReceiveKudo : ["SenderFullName", "ObjName"],
		RejectAddedAsAssistant : ["SenderFullName"],
		RejectAddedAsMgr : ["SenderFullName"],
		RejectAddedAsReport : ["SenderFullName"],
		ReplyInFeed : ["SenderFullName"],
		RemovedAsAssistant : ["SenderFullName"],
		RemovedAsMgr : ["SenderFullName"],
		RemovedAsReport : ["SenderFullName"],
		RejectPendingContent : ["ObjName"],
		RequestToBeGroupAdmin : ["SenderFullName"],
		SkillNudge : ["SenderFullName"],
		SubscribedToFeed : ["SenderFullName"],
		SuggestTopic : ["SenderFullName", "ObjName"],
		send_nudge : ["custom_brand_name"],
		TaskAssigned : ["SenderFullName"],
		TaskNudge : ["SenderFullName"],
		user_new_features : ["custom_brand_name"]
	},

	/**
	 * Gets the notification type text for a given notification 
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {string} sJamUrl A string containing the URL of the Collaboration Tool (Jam) 
	 * @private
	 */
	getRequiredNotificationPropertyNames : function(sNotificationType) {
		return this.map[sNotificationType] ? this.map[sNotificationType] : []; 
	}
	
});
}; // end of sap/collaboration/components/utils/NotificationTypeUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.PendingRequestsUtil') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.utils.PendingRequestsUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/collaboration/components/utils/PendingRequestsUtil",function() {
	/**
	 * Class to manage a set of pending requests.
	 */
	var PendingRequestsUtil = function() {
		this._aPendingRequests = [];
	};
	/**
	 * Checks if the request is in the set.
	 * @param oRequest - request to use during the check.
	 * @returns true if the set contains the element, false otherwise.
	 */
	PendingRequestsUtil.prototype.contains = function(oRequest) {
		for (var iIndex = 0; iIndex < this._aPendingRequests.length; ++iIndex) {
			if (this._aPendingRequests[iIndex] === oRequest) {
				return true;
			}
			return false;
		}
	};
	/**
	 * @param oRequest - request to add to the set.
	 * @returns true if the set was altered, false otherwise.
	 */
	PendingRequestsUtil.prototype.add = function(oRequest) {
		if (this.contains(oRequest)) {
			return false;
		}
		else {
			this._aPendingRequests.push(oRequest);
			return true;
		}
	};
	/**
	 * @param oRequest - request to remove from the set.
	 * @returns true if the set was altered, false otherwise.
	 */
	PendingRequestsUtil.prototype.remove = function(oRequest) {
		for (var iIndex = 0; iIndex < this._aPendingRequests.length; ++iIndex) {
			if (this._aPendingRequests[iIndex] === oRequest) {
				this._aPendingRequests.splice(iIndex, 1);
				return true;
			}
		}
		return false;
	};
	/**
	 * Aborts every request in the set.
	 */
	PendingRequestsUtil.prototype.abortAll = function() {
		var oRequest;
		while ((oRequest = this._aPendingRequests.pop()) !== undefined) {
			oRequest.abort();
		}
	};
	
	return PendingRequestsUtil;
}, true);
}; // end of sap/collaboration/components/utils/PendingRequestsUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.collaboration (1.50.4)
 */
jQuery.sap.declare("sap.collaboration.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: SAP Collaboration for Social Media Integration.
 *
 * @namespace
 * @name sap.collaboration
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.suite.ui.commons.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.collaboration",
	dependencies : ["sap.ui.core","sap.suite.ui.commons"],
	types: [
		"sap.collaboration.AppType",
		"sap.collaboration.DisplayFeedType",
		"sap.collaboration.FeedType"
	],
	interfaces: [],
	controls: [],
	elements: [],
	version: "1.50.4"
});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.collaboration.AppType.
jQuery.sap.declare("sap.collaboration.AppType");
/**
 * @class Application Type (Mode)
 *
 * @version 1.50.4
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.collaboration.AppType = {

	/**
	 * Fiori Split App
	 * @public
	 */
	split : "split",

	/**
	 * SAP Jam Feed Widget Wrapper
	 * @public
	 */
	widget : "widget"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.collaboration.DisplayFeedType.
jQuery.sap.declare("sap.collaboration.DisplayFeedType");
/**
 * @class Feed Types to be displayed by the Social Timeline
 *
 * @version 1.50.4
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.collaboration.DisplayFeedType = {

	/**
	 * The main feed for the Business Record Feed
	 * @public
	 */
	BusinessRecordFeed : "BusinessRecordFeed",

	/**
	 * Group feeds where the business record is primary or featured
	 * @public
	 */
	GroupFeedsWhereBusinessRecordIsLinked : "GroupFeedsWhereBusinessRecordIsLinked"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.collaboration.FeedType.
jQuery.sap.declare("sap.collaboration.FeedType");
/**
 * @class Feed Types
 *
 * @version 1.50.4
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.collaboration.FeedType = {

	/**
	 * Follows feed type
	 * @public
	 * @deprecated Since version 1.30.0. 
	 * The feed type was deprecated because the original feed dialog component does not use it anymore.
	 * It also does not conform to naming conventions.
	 */
	follows : "follows",

	/**
	 * Company feed type
	 * @public
	 * @deprecated Since version 1.30.0. 
	 * The feed type was deprecated because the original feed dialog component does not use it anymore.
	 * It also does not conform to naming conventions.
	 */
	company : "company",

	/**
	 * Group feed type
	 * @public
	 * @deprecated Since version 1.30.0. 
	 * The feed type was deprecated because the original feed dialog component does not use it anymore.
	 * It also does not conform to naming conventions.
	 */
	group : "group",

	/**
	 * Object group feed type
	 * @public
	 * @deprecated Since version 1.30.0. 
	 * The feed type was deprecated because the original feed dialog component does not use it anymore.
	 * It also does not conform to naming conventions.
	 */
	objectGroup : "objectGroup",

	/**
	 * Oject feed type
	 * @public
	 * @deprecated Since version 1.30.0. 
	 * The feed type was deprecated because the original feed dialog component does not use it anymore.
	 * It also does not conform to naming conventions.
	 */
	object : "object",

	/**
	 * The mode type that accepts an array of group IDs. Users will be able to select these groups from a selector. The list will have the groups' names.
	 * @public
	 */
	GroupIds : "GroupIds",

	/**
	 * The mode type that accepts the OData details of a business object. Users will be able to select groups where the business object is featured or primary.
	 * @public
	 */
	BusinessObjectGroups : "BusinessObjectGroups",

	/**
	 * Users of this mode type will be able to select from groups where they are members. This mode is used by the feed component. In the feed component, the list of groups displayed in the pop up will be the current user's personal groups.
	 * @public
	 */
	UserGroups : "UserGroups"

};

}; // end of sap/collaboration/library.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.controls.FeedEntryEmbedded') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.controls.FeedEntryEmbedded'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/controls/FeedEntryEmbedded",['jquery.sap.global', 'sap/ui/core/Control', 'sap/collaboration/components/utils/LanguageBundle', 'sap/collaboration/components/controls/PlaceholderUtility', 'sap/collaboration/components/utils/MediaTypeToSAPIcon'],
	function(jQuery, Control, LanguageBundle, PlaceholderUtility, MediaTypeToSAPIcon) {
	"use strict";
	
	/**
	 * Constructor for a new Feed Entry Embedded Control. 
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * 
	 * @extends sap.ui.core.Control
	 * The Feed Entry Embedded Control is to be used in a sap.suite.ui.commons.TimelineItem.
	 * @author SAP SE
	 * @version ${version}
	 *
	 * @constructor
	 * @alias sap.collaboration.components.controls.FeedEntryEmbedded
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	var FeedEntryEmbedded = Control.extend("sap.collaboration.components.controls.FeedEntryEmbedded", /** @lends sap.collaboration.components.controls.FeedEntryEmbedded.prototype */ { metadata : {
		interfaces : [],
  		library : "sap.m",
  		properties : {
  			"feedEntry": {type:"object", group:"data"},
			"serviceUrl": {type:"string", group:"data"}
  		},
		events : {
			"atMentionClick": {
				parameters : {
					link: {type : "object"}
				}
			},
			"expandCollapseClick": {
			},
			"previewLoad": {
			}
		},
		aggregations:{	
		}
	}});
	
	/**
	*  Initializes the Control instance after creation. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	*/
	FeedEntryEmbedded.prototype.init = function(){
		
		this.nMaxCollapsedLength = 200;
		this.CONTENT_MAX_HEIGHT = 128;
		this._oLangBundle = new LanguageBundle();
		
		this._oTimelineItemContent; // control for the Content (sap.m.VBox)
		jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.collaboration.components.resources.css.EmbeddedControl", ".css"));
	};

	/**
	* Function is called before the rendering of the control is started. [borrowed from sap.ui.core.Control]
	* @overwrite
	* @protected
	* @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	*/
	FeedEntryEmbedded.prototype.onBeforeRendering = function(){
	};
	/**
	* Function is called after the rendering of the control is started. [borrowed from sap.ui.core.Control]
	* @overwrite
	* @protected
	* @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	*/
	FeedEntryEmbedded.prototype.onAfterRendering = function(){
				
		this._$ExpandedTextDiv = jQuery('#'+this.getId()+'-expanded-text');
		var sExpandedInnerHTML = this._$ExpandedTextDiv.html();

		// render the links in the html
		if (sExpandedInnerHTML != undefined) {
			this._$ExpandedTextDiv.html(this._renderLinks(sExpandedInnerHTML));
		}

		if (this.oExpandLink && this.oCollapseLink) {
			this._$FeedEntryDiv = jQuery('#'+this.getId());
			this._$CollapsedTextDiv = jQuery('#'+this.getId()+'-collapsed-text');			
			var sCollapsedInnerHTML = this._$CollapsedTextDiv.html();

			if (sCollapsedInnerHTML != undefined) {
				this._$CollapsedTextDiv.html(this._renderLinks(sCollapsedInnerHTML));			
			}

			jQuery(this._$ExpandedTextDiv).detach();									
		}
		
		// adjust the size of Image content
		if (this._oTimelineItemContent.getItems()[0] && this._oTimelineItemContent.getItems()[0].getMetadata().getName() === 'sap.m.Image') {
			
			var oImage = this._oTimelineItemContent.getItems()[0];

			oImage.getDomRef().addEventListener("load", function() {

				var iMaxContentWidth = this._oTimelineItemContent.getDomRef().clientWidth;
				var iMaxContentHeight = this.CONTENT_MAX_HEIGHT;

				var iImageWidth = oImage.getDomRef().width;
				var iImageHeight = oImage.getDomRef().height;
				var iImageRatio = iImageWidth / iImageHeight;

				// If the image is bigger than the max width and height, need to resize the Image control
				if (!(iImageHeight <= iMaxContentHeight && iImageWidth <= iMaxContentWidth)) {
					// if image height is bigger than the max height, shrink image 
					if (iImageHeight > iMaxContentHeight) {
						iImageWidth = iImageRatio * iMaxContentHeight;
						iImageHeight = iMaxContentHeight;
					} 
					// if image width is bigger than the max width, shrink image again
					if (iImageWidth > iMaxContentWidth) {
						iImageHeight = iMaxContentWidth / iImageRatio;
						iImageWidth = iMaxContentWidth;
					}

					oImage.setWidth(iImageWidth+"px"); 
					oImage.setHeight(iImageHeight+"px");
					oImage.rerender();
				}
				this.firePreviewLoad(); // fire event previewLoad				
			}.bind(this));
		}
	};
	/**
	* Cleans up the control instance before destruction. [borrowed from sap.ui.core.Control]
	* @overwrite
	* @protected
	* @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	*/
	FeedEntryEmbedded.prototype.exit = function(){

		this._destroyAtMentionLinks();

		if(this.oExpandLink){
			this.oExpandLink.destroy();
		}
		
		if(this.oCollapseLink){
			this.oCollapseLink.destroy();
		}
		
		if( this._oTimelineItemContent ){
			this._oTimelineItemContent.destroy();
		}
	};
	
	/**
	* Setter for the feedEntry property
	* @protected
	* @param {object} feedEntry 
	* @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	*/
	FeedEntryEmbedded.prototype.setFeedEntry = function(feedEntry) {
		this.setProperty("feedEntry", feedEntry);
		
		// save the text and text with placeholder
		this._sText = feedEntry.Text;
		this._sTextWithPlaceholders = feedEntry.TextWithPlaceholders;

		// resolve the atMentions and create the link controls 
		this._destroyAtMentionLinks();
		this._mAtMentionsLinks = {};
		var aAtMentions = PlaceholderUtility.getAtMentionsValues(this._sText, this._sTextWithPlaceholders);
		for (var i=0; i<aAtMentions.length; i++) {
			this._mAtMentionsLinks[aAtMentions[i].placeholder] = this._createAtMentionLink(aAtMentions[i], feedEntry);
		}

		this._oTimelineItemContent = this._createTimelineItemContent();
		return this;
	};

	/**
	 * The first this._nMaxCollapsedLength characters of the text are shown in the collapsed form, the text string ends up
	 * with a complete word, the text string contains at least one word
	 *
	 * @public
	 * @returns {string} returns the collapsed text to be rendered
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	*/
	FeedEntryEmbedded.prototype.getCollapsedText = function() {
		
		this.oExpandLink;
		this.oCollapseLink;

		var iTotalCount = 0;
		var iTextAndPlaceholderIndex = 0;
		var iTextSplitByPlaceholderIndex = 0;
		var sTextWithPlaceholders = "";
		
		var rPlaceholderPattern = /@@.\{\d+\}/; // Regex pattern for placeholder
		
		var aTextSplitByPlaceholders = this._splitByPlaceholders(this._sTextWithPlaceholders);
		var aTextAndPlaceholders = PlaceholderUtility.getAtMentionsValues(this._sText, this._sTextWithPlaceholders);
		
		do {
			if (rPlaceholderPattern.test(aTextSplitByPlaceholders[iTextSplitByPlaceholderIndex])) {
				
				if (aTextAndPlaceholders[iTextAndPlaceholderIndex].placeholder === aTextSplitByPlaceholders[iTextSplitByPlaceholderIndex]) {
					iTotalCount += aTextAndPlaceholders[iTextAndPlaceholderIndex].value.length;
					sTextWithPlaceholders += aTextAndPlaceholders[iTextAndPlaceholderIndex].placeholder;
					iTextAndPlaceholderIndex++;
				}				
			}		
			else {
				iTotalCount += aTextSplitByPlaceholders[iTextSplitByPlaceholderIndex].length;
				sTextWithPlaceholders += aTextSplitByPlaceholders[iTextSplitByPlaceholderIndex];
			}
			iTextSplitByPlaceholderIndex++;
		} while (iTotalCount <= this.nMaxCollapsedLength);
		
		sTextWithPlaceholders = sTextWithPlaceholders.substring(0, this.nMaxCollapsedLength);
		var nLastSpace = sTextWithPlaceholders.lastIndexOf(" ");
		if (nLastSpace > 0) {
			this._sCollapsedTextWithPlaceholders = sTextWithPlaceholders.substr(0, nLastSpace);
		} else {
			this._sCollapsedTextWithPlaceholders = sTextWithPlaceholders;
		}		
	};

	/**	
	 * Create and return the expand / collapse link control
	 * @public
	 * @param {string} languagebundlekey - id and text for the expand / collapse link
	 * @returns {sap.m.Link} SAPUI5 link control
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	 */
	FeedEntryEmbedded.prototype.createExpandCollapseLink = function(languagebundlekey) {
		var oExpandCollapseLink = new sap.m.Link({
			id: this.getId() + "-" + languagebundlekey,
			text: this._oLangBundle.getText(languagebundlekey),
			press: [function(oControlEvent){

				var sLinkId = oControlEvent.getSource().getId();
				
				if (sLinkId.indexOf("-TE_MORE") > -1) {

					jQuery(this._$CollapsedTextDiv).detach();
					jQuery(this._$ExpandedTextDiv).prependTo(this._$FeedEntryDiv);
				}
				else {

					jQuery(this._$ExpandedTextDiv).detach();
					jQuery(this._$CollapsedTextDiv).prependTo(this._$FeedEntryDiv);
				}

				this.fireExpandCollapseClick();				

			},this]
		}).addStyleClass("alignMiddle");
		
		return oExpandCollapseLink;
	};	
	/**
	 * Returns if the Text Display should be rendered
	 *
	 * @private
	 * @returns {boolean} 
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	 */
	FeedEntryEmbedded.prototype._shouldTextBeRendered = function() {
		// do not create text control for the following cases:
		// - feed text is empty
		// - feed entry is consolidated 
		// - feed entry is a Poll
		// - feed entry is a Question
		// - feed entry is an Idea
		// - feed entry is an Event
		// - feed entry is a Task
		// - feed entry is a Blog
		var oFeedEntry = this.getFeedEntry();
		if ( oFeedEntry.Text == undefined ||
			 oFeedEntry.Text == "" ||
			 oFeedEntry.ConsolidatedCount > 1 ||	
			((!jQuery.isEmptyObject(oFeedEntry.TargetObjectReference)) &&
				(oFeedEntry.TargetObjectReference.Type == "Task" ||
				oFeedEntry.TargetObjectReference.Type == "ForumItem" ||
				oFeedEntry.TargetObjectReference.Type == "Event" ||
				oFeedEntry.TargetObjectReference.FullPath == "ContentItem/BlogEntry" ||
				oFeedEntry.TargetObjectReference.FullPath == "ContentItem/Page" ||
				oFeedEntry.TargetObjectReference.FullPath == "ContentItem/Poll")
			)
		) {
			return false;
		}
		else {
			return true;
		}
	};
	
	/**
	 * Returns if the Text Display should be rendered
	 *
	 * @private
	 * @returns {boolean} 
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	 */
	FeedEntryEmbedded.prototype._shouldContentBeRendered = function() {
		return (this._oTimelineItemContent.getItems().length > 0); 
	};
	
	/**
	 * Returns array of text split by placeholders
	 * 
	 * @private
	 * @returns {array} array of strings
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	 */
	FeedEntryEmbedded.prototype._splitByPlaceholders = function(textWithPlaceholders) {
		return PlaceholderUtility.splitByPlaceholders(textWithPlaceholders);
	};
	
	/**************************
	 * Text Display methods
	 **************************/
	/**
	 * Replaces fully defined urls in the text with anchor tags
	 *
	 * @private
	 * @returns {string} returns text with url anchors
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	 */
	FeedEntryEmbedded.prototype._renderLinks = function(text) {
		var rLinkPattern = /(^|[\s\n]|<br\/?>)((?:https?|ftp):\/\/[\-A-Z0-9+\u0026\u2019@#\/%?=()~_|!:,.;]*[\-A-Z0-9+\u0026@#\/%=~()_|])/gi;
		
		return text.replace(rLinkPattern, "$1<a href='$2' target='_blank'>$2</a>");
	};
	/**
	 * Create and return the link control for AtMention
	 * 
	 * @private
	 * @param mPlaceholder - placeholder and its value
	 * @param oFeedEntry - feed entry
	 * @returns {sap.m.Link} SAPUI5 link control
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	 */
	FeedEntryEmbedded.prototype._createAtMentionLink = function(mPlaceholder, oFeedEntry) {
		var sFullName = mPlaceholder.value.slice(1); // remove the @ at the beginning
		var iPlaceholderIndex = mPlaceholder.placeholder.replace(/[@a-z{}]/g,"");
					
		var oModel = new sap.ui.model.json.JSONModel({
			feedId: oFeedEntry.Id,
			placeholderIndex: iPlaceholderIndex,
			placeholderValue: mPlaceholder.value
		});
		
		var oLink = new sap.m.Link({
			id: "at_mention_link-" + this.getId() + "-" + iPlaceholderIndex,
			text: "{/placeholderValue}",
			press: [function(oControlEvent){
				this.fireAtMentionClick({ link: oControlEvent.getSource()}); // fire the atMentionClick event with the link control
			},this]
		}).addStyleClass("sapCollaborationAtMentionLink");
		
		oLink.setModel(oModel);
		return oLink;
	};
	/**
	 * Destroy the atMention links
	 * 
	 * @private
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	 */
	FeedEntryEmbedded.prototype._destroyAtMentionLinks = function() {
		if (this._mAtMentionsLinks) {
			for (var placeholder in this._mAtMentionsLinks) {
				if (this._mAtMentionsLinks.hasOwnProperty(placeholder)) {
					this._mAtMentionsLinks[placeholder].destroy();
				}
			}
			this._mAtMentionsLinks = undefined;
		}
	}
	
	/**************************
	 * Content methods
	 **************************/
	/**
	 * Create the control for the Content 
	 * 
	 * @private
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	 */
	FeedEntryEmbedded.prototype._createTimelineItemContent = function(){
		var oTimelineItemContent = new sap.m.VBox(this.getId() + "-content", {}).addStyleClass("sapUiTinyMarginTopBottom");
		
		// get the data
		var oFeedEntry =  this.getFeedEntry();
		
		// feed entry content
		if( (!jQuery.isEmptyObject(oFeedEntry.TargetObjectReference) 
				&& oFeedEntry.TargetObjectReference.Type !== undefined 
				&& oFeedEntry.TargetObjectReference.Type !== "FeedEntry") ||
			oFeedEntry.ConsolidatedCount > 1 ){
			
			oTimelineItemContent.addItem(this._createFeedEntryContent(oFeedEntry));
		}
		return oTimelineItemContent;
	};

	/**
	 * Create the control for a feed entry with a target object reference. 
	 * 
	 * @private
	 * @param oFeedEntry
	 * @returns {sap.m.HBox} 
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	 */
	FeedEntryEmbedded.prototype._createFeedEntryContent = function(oFeedEntry){
		
		var sIconSrc = "";
		var sLinkText = "";
		var sLinkHref = "";
		
		if ( oFeedEntry.ConsolidatedCount > 1 ) {
			sIconSrc = "sap-icon://documents";
			sLinkText = this._oLangBundle.getText("TE_CONSOLIDATED_FEED_TEXT");
			sLinkHref = oFeedEntry.WebURL;
		}
		else {
			sLinkHref = oFeedEntry.TargetObjectReference.WebURL;
			
			switch (oFeedEntry.TargetObjectReference.Type) {
			case "ContentItem":
				if (oFeedEntry.TargetObjectReference.ContentType) {
					// If the content is an image, return an image control with the preview image
					if (oFeedEntry.TargetObjectReference.ContentType.indexOf('image') > -1) {

						var oPreviewImage = new sap.m.Image( this.getId() + "-preview", {
							src: this.getServiceUrl() + "/FeedEntries('" + oFeedEntry.Id + "')/PreviewImage/$value",
							press: [function(oControlEvent) {
								window.open(sLinkHref, '_blank');
							}, this]
						});
						return oPreviewImage;
					}

					sIconSrc = MediaTypeToSAPIcon.getSAPIconForMediaType(oFeedEntry.TargetObjectReference.ContentType);
					sLinkText = PlaceholderUtility.getContentItemName(oFeedEntry.Action, oFeedEntry.ActionWithPlaceholders);	
				}
				else{
					switch (oFeedEntry.TargetObjectReference.FullPath){	
					case "ContentItem/Poll":
						sIconSrc = "sap-icon://horizontal-bar-chart";
						break;
					case "ContentItem/Page":
						sIconSrc = "sap-icon://e-learning";
						break;
					case "ContentItem/BlogEntry":
						sIconSrc = "sap-icon://request";
						break;
					default:
						sIconSrc = "";
						break;
					}
					sLinkText = oFeedEntry.TargetObjectReference.Title;
				}
				break;
			case "ForumItem":
				sIconSrc = this._getForumItemIconSrc(oFeedEntry.TargetObjectReference);
				sLinkText = oFeedEntry.TargetObjectReference.Title;
				break;
			case "Task":
				sIconSrc = "sap-icon://task";
				sLinkText = oFeedEntry.TargetObjectReference.Title;
				break;
			case "Event":
				sIconSrc = "sap-icon://calendar";
				sLinkText = oFeedEntry.TargetObjectReference.Title;
				break;
			default:
				sIconSrc = "sap-icon://action";
				sLinkText = oFeedEntry.TargetObjectReference.Title;
				break;
			}
		}
		// icon
		var ICON_SIZE = "2.5em";
		var oIcon = new sap.ui.core.Icon({
			src: sIconSrc,
			size: ICON_SIZE
		}).addStyleClass("sapUiTinyMarginBeginEnd");
		// link
		var oLink = new sap.m.Link({
			text: sLinkText, 
			target: "_blank",
			href: sLinkHref,
			tooltip: sLinkText,
			wrapping: true,
			width: "95%"
		}).addStyleClass("RightToLeftParenthesisStyling");
		
		var oHBox = new sap.m.HBox({});
		oHBox.addItem(oIcon);
		var oVBox = new sap.m.VBox({
			width:"100%"
		}).addStyleClass("sapUiTinyMarginBeginEnd"); // Vbox in case we want to add text under the link
		oVBox.addItem(oLink);
		oHBox.addItem(oVBox);
		
		return oHBox;
	};
	/**
	 * Get the icon source for a Forum Item.  
	 * 
	 * @private
	 * @param oForumItem
	 * @returns {String}
	 * @memberOf sap.collaboration.components.controls.FeedEntryEmbedded
	 */
	FeedEntryEmbedded.prototype._getForumItemIconSrc = function(oForumItem){
		
		var sFullPath = oForumItem.FullPath;
		
		switch (sFullPath){
		case "ForumItem/Inquiry":
		case "ForumItem/Question":
			return "sap-icon://question-mark";
		case "ForumItem/Idea":
			return "sap-icon://lightbulb";
		case "ForumItem/Discussion":
			return "sap-icon://discussion";
		default:
			return "";
		}
	};
	
	
	return FeedEntryEmbedded;
}, /* bExport= */ true);
}; // end of sap/collaboration/components/controls/FeedEntryEmbedded.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.controls.ReplyPopover') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/

jQuery.sap.declare("sap.collaboration.components.controls.ReplyPopover");

jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.collaboration.components.resources.css.SocialProfile", ".css"));
jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.collaboration.components.resources.css.ReplyPopover", ".css"));

sap.ui.core.Control.extend("sap.collaboration.components.controls.ReplyPopover",
/** @lends sap.collaboration.components.controls.ReplyPopover */ { metadata : {
	/**
	 * Constructor for the ReplyPopover
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * 
	 * @class ReplyPopover
	 * This class is responsible for creating the ReplyPopover
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.29.0-SNAPSHOT
	 *
	 * @constructor
	 * @alias sap.collaboration.components.controls.ReplyPopover
	 * @memberOf sap.collaboration.components.controls.ReplyPopover
	 */
		library : "sap.collaboration",
		events : {
			
			/**
			 * This event is fired after the "Post" button is pressed.
			 */
			postReplyPress : {
				parameters : {
					
					/**
					 * This parameter contains the value entered by the user after the "Post" button is pressed.
					 */
					value : {type : "string"} 
				}
			},
			
			/**
			 * This event is fired after the "Show more replies" link is pressed.
			 */
			moreRepliesPress : {},
			
			/**
			 * This event is fired after the ReplyPopover is closed.
			 */
			afterClose : {},			
		},
		aggregations : {

			/**
			 * The Social Text Area control
			 */
			socialTextArea : {type : "sap.collaboration.components.controls.SocialTextArea", multiple : false},
		}
	},
});
/*******************
 * Protected methods
 *******************/
/**
* Initialization on the ReplyPopover
* @protected
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype.init = function () {
	// Util Classes
	this._oLangBundle = new sap.collaboration.components.utils.LanguageBundle();
	
	// Initialize Model
	this._oJSONModelData = [];
	this._oJSONModel = new sap.ui.model.json.JSONModel(this._oJSONModelData);
	
	// Initialize variables
	this._oControlToReceiveFocus;
	
	// Initialize Controls
	this._oSocialProfileView;
	this._oReplyApp;
	this._oReplyPage;
	this._oReplyTextArea;
	this._oReplyList;
	this._oReplyButton;
	this._oReplyHeaderBar;
	this._oReplyPopover = this._oReplyPopover || this._createReplyPopover();
};

/**
* Clean up before control is destroyed
* @protected
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype.exit = function () {
	if (this._oReplyPopover) {
		this._oReplyPopover.destroy();
	}
};

/*****************
 * Public methods
 *****************/
/**
* Post new reply
* @public
* @param {object} oReplyData - the data for the reply to be added
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype.addReply = function(oReplyData) {
	// checks whether oReplyData is empty before adding it
	if (!jQuery.isEmptyObject(oReplyData)) {
		if (oReplyData.Text) {
			oReplyData.Text = this._replaceCarriageReturnWithBRTag(oReplyData.Text);
		}
		this._oJSONModelData.push(oReplyData);
		this._oJSONModel.setData(this._oJSONModelData, true);
	}
	else {
		this._oReplyTextArea.focus(); // this is required or the popover will close
	}
};

/**
* Add Replies
* @public
* @param {object} oRepliesData - the data for the replies to be added
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype.addReplies = function(oRepliesData) {
	var aRepliesData = oRepliesData && oRepliesData.data;
	// checks whether oRepliesData has 'data' and the length is not 0 before adding it
	if (aRepliesData && aRepliesData.length !== 0) {	
		var iReplyListLength = this._oReplyList.getItems().length;
		var iRepliesDataLength = aRepliesData.length;
		
		// replace each return carriage in the Replies Data Text with <br>
		for (var i = 0; i < aRepliesData.length; i++) {
			if (aRepliesData[i].Text) {
				aRepliesData[i].Text = this._replaceCarriageReturnWithBRTag(aRepliesData[i].Text);
				aRepliesData[i].Text = "\u200E" + aRepliesData[i].Text + "\u200E";
			}
		}
		
		this._oJSONModelData = aRepliesData.concat(this._oJSONModelData);
		this._oJSONModel.setData(this._oJSONModelData, true);
		
		// if the reply list length before setting the data is not 0, it implies that the list already had replies 
		// and the 'Show More' link was pressed. We then set the focus to the last item in the list before the 'Show More' link was pressed
		if (iReplyListLength !== 0) {
			this._oControlToReceiveFocus = this._oReplyList.getItems()[iRepliesDataLength];
		}
		
		// hide/show the 'Show more replies' link
		if (oRepliesData.more) {
			this._oShowMoreBar.setVisible(true);
		}
		else {
			this._oShowMoreBar.setVisible(false);
		}
	}
};

/**
* Open the ReplyPopover
* @public
* @param {object} oOpeningControl - the control that will open the ReplyPopover
* @returns {sap.collaboration.components.controls.ReplyPopover} this method allows for chaining
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype.openBy = function(oOpeningControl) {
	if (!this._oReplyTextArea) {
		this._oReplyTextArea = this.getSocialTextArea();
		this._oReplyTextArea.addStyleClass("replyTextAreaToBottom").addStyleClass("replyTextArea");
		this._oControlToReceiveFocus = this._oReplyTextArea;
		
		this._oReplyPage.addContent(this._oShowMoreBar).addContent(this._addList()).addContent(this._oReplyTextArea);
		
		this._oReplyPopover.setInitialFocus(this._oReplyTextArea);
	}
	this._oReplyPopover.openBy(oOpeningControl);
	
	return this;
};

/**
* Define the delay, after which the busy indicator will show up
* @public
* @param {int} iDelay - The delay in ms
* @returns {sap.collaboration.components.controls.ReplyPopover} this method allows for chaining
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype.setBusyIndicatorDelay = function(iDelay) {
	this._oReplyPage.setBusyIndicatorDelay(iDelay);
	return this;
};

/**
* Set the controls busy state
* @public
* @param {boolean} bBusy - Set the controls busy state
* @returns {sap.collaboration.components.controls.ReplyPopover} this method allows for chaining
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype.setBusy = function(bBusy) {
	this._oReplyPage.setBusy(bBusy);
	return this;
};

/**
* Getter for the text area
* @public
* @return {sap.ui.core.Control} - the ReplyPopover text area
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype.getTextArea = function () {
	return this._oReplyTextArea;
};

/*******************
 * Private methods
 *******************/
/**
* Creates a Responsive Popover for the Replies 
* @private
* @returns {sap.m.ResponsivePopover}
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype._createReplyPopover = function () {
	var oReplyPopover = new sap.m.ResponsivePopover({
		showHeader: false,
		placement: sap.m.PlacementType.Vertical,
		contentWidth: "25rem",
		contentHeight: "455px",
		content: this._addApp(),
		afterClose: [function(){
			this._oReplyApp.backToTop();
			this._oReplyList.destroyItems();
			this._oJSONModelData = [];
			this._oJSONModel.setData(this._oJSONModelData);
			this._oShowMoreBar.setVisible(false);
			this._oControlToReceiveFocus = this._oReplyTextArea;
			this.fireAfterClose();
		},this]
	});
	
	return oReplyPopover;
};

/**
* Adds a List to the Popover content
* @private
* @returns {sap.m.List}
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype._addList = function () {
	var that = this;
	
	var oReplyListTemplate = new sap.m.FeedListItem({
		text: "{Text}",
		icon: "{Creator/ThumbnailImage}",
		sender: "{Creator/FullName}",
		timestamp: "{CreatedAt}",
		iconActive: false,
		senderPress: function(oEvent){
			var oReplyObject = oEvent.getSource().getBindingContext().getObject();
			var sMemberEmail = oReplyObject.Creator.Email;
			that._oSocialProfileView.getViewData().memberId = sMemberEmail;
			that._oSocialProfileView.rerender();
			that._oReplyApp.to(that._oSocialProfilePage);
		}
	}).addStyleClass("replyFeedListItem");
	
	if (!this._oReplyList) {
		this._oReplyList = new sap.m.List({
			width: "100%",
			items: [],
			noDataText: this._oLangBundle.getText("ST_REPLY_LIST_AREA"),
			showNoData: true,
			showSeparators: sap.m.ListSeparators.None,
			updateFinished: function(oEvent){
				var iListLength = that._oReplyList.getItems().length;
				// We need to set the focus to the last Reply to have the scrollbar scroll to the bottom of the list
				if (iListLength !== 0 && that._oControlToReceiveFocus === that._oReplyTextArea) {
					that._oReplyList.getItems()[iListLength - 1].focus();
				}
				
				if (that._oReplyList.getItems().length === 0) {
					that._oReplyTextArea.addStyleClass("replyTextAreaToBottom");
					that._oReplyTextArea._oPop.setOffsetX(0);
				}
				else {
					/*
					 * We need to check if the height of the reply list is larger than the height of the reply page content. 
					 * If so, then we remove the css class which sticks the text area on top of the footer bar.
					 * If we don't remove this css class, then the text area will also remain in the same spot and 
					 * not move down as the replies grow
					 */ 
					// height of the reply list (grows as you add replies)
					var iReplyPopoverListHeight = jQuery(that._oReplyList.getDomRef()).height();
					// height of the ReplyPopover content, in this case it's everything inside the popover (header, content, text area, footer)
					var iReplyPopoverContentHeight =  jQuery(that._oReplyPopover.getDomRef("cont")).height();
					// height of the header containing the title "Replies"
					var iReplyPopoverHeaderHeight = jQuery(that._oReplyPage.getCustomHeader().getDomRef()).height();
					// height of the text area where you enter your reply
					var iReplyTextAreaHeight = parseInt(that._oReplyTextArea.getHeight());
					// height of the footer containing the 'Post' button
					var iReplyPopoverFooterHeight = jQuery(that._oReplyPage.getFooter().getDomRef()).height();
					if (iReplyPopoverListHeight > (iReplyPopoverContentHeight - iReplyPopoverHeaderHeight - iReplyTextAreaHeight - iReplyPopoverFooterHeight)) {
						that._oReplyTextArea.removeStyleClass("replyTextAreaToBottom");
						that._oReplyTextArea._oPop.setOffsetX(9); // we need to offset the suggestions popover to account for the vertical scrollbar that will now appear
					}
					else {
						that._oReplyTextArea.addStyleClass("replyTextAreaToBottom");
						that._oReplyTextArea._oPop.setOffsetX(0);
					}
				}
				that._oControlToReceiveFocus.focus();
			}
		});
	}
	this._oReplyList.setModel(this._oJSONModel);
	this._oReplyList.bindItems({
		path: "/",
		template: oReplyListTemplate
	});
	
	return this._oReplyList;
},

/**
* Adds the Social Profile
* @private
* @returns {sap.ui.View}
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype._addSocialProfile = function () {
	var that = this;
	this._oSocialProfileView = 	new sap.ui.view({
		viewData : {
			langBundle : this._oLangBundle, 
			popoverPrefix : this.getId(),
			afterUserInfoRetrieved : function( oUserData ){
				if (oUserData) {
					that._sUserProfileURL = oUserData.WebURL;
				}
			}
		},
		type: sap.ui.core.mvc.ViewType.JS, 
		viewName: "sap.collaboration.components.socialprofile.SocialProfile"
	});
	
	return this._oSocialProfileView;
},

/**
* Enables/Disables the 'Post' button
* @public
* @param {boolean} enabled Enables/Disables the post reply button
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype.enableButton = function(enabled) {
	this._oReplyButton.setEnabled(enabled);
};

/**
* Adds a Button to the Popover
* @private
* @returns {sap.m.App}
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype._addApp = function () {
	var that = this;
	
	if (this._oReplyApp) {
		return this._oReplyApp;
	}
	/**************************
	 * Create the Reply Page
	 **************************/
	this._oReplyButton = new sap.m.Button({
		text: this._oLangBundle.getText("ST_REPLY_POST"),
		enabled: false,
		press: this._postReply.bind(that)
	});
	this._oShowMoreLink = new sap.m.Link({
		text:  this._oLangBundle.getText("ST_SHOW_MORE_REPLIES"),
		press: this._showMoreReplies.bind(that)
	});
	this._oShowMoreBar = new sap.m.Bar({
		contentMiddle: [this._oShowMoreLink],
		visible: false
	}).addStyleClass("showMoreReplies");
	
	this._oReplyPage =  new sap.m.Page({
		showHeader: true,
		showSubHeader: false,
		showFooter: true,
		customHeader: new sap.m.Bar({
			contentMiddle: [new sap.m.Label({ text : this._oLangBundle.getText("ST_REPLY_TITLE")})]
		}),
		footer: new sap.m.Bar({
			contentRight: [this._createMentionButton(), this._oReplyButton]
		}),
	});
	
	/**************************
	 * Create the Profile Page
	 **************************/ 
	this._oSocialProfileButton = new sap.m.Button({
		text: this._oLangBundle.getText("SP_OPEN_JAM_BUTTON"),
		press: function() {
			window.open(that._sUserProfileURL, "_blank");
		}
	});
	this._oSocialProfilePage = new sap.m.Page({
		title: this._oLangBundle.getText("SP_TITLE"),
		showNavButton: true,
		showHeader: true,
		showSubHeader: false,
		showFooter: true,
		navButtonPress: function(oEvent){
			that._oReplyApp.back();
		},
		footer: new sap.m.Bar({
			contentRight: [this._oSocialProfileButton]
		}),
		content: [this._addSocialProfile()]
	});
	
	/**************************
	 * Add pages to App
	 **************************/ 
	this._oReplyApp = new sap.m.App({
		backgroundColor: "#ffffff",
		pages: [this._oReplyPage, this._oSocialProfilePage]
	});
	
	return this._oReplyApp;
};

/**
* Adds the 'mention' button to the Responsive Popover
* @private
* @returns {sap.m.Button}
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype._createMentionButton = function () {
	// Due to Ux issues, we don't want the @mention feature available on phones
	if (sap.ui.Device.system.phone) {
		return;
	}
	var oMentionButton = new sap.m.Button({
		text: "@",
		tooltip: this._oLangBundle.getText("ST_MENTION_TOOLTIP"),
		press: [function() {
			this._oReplyTextArea.atMentionsButtonPressed();
		}, this]

	});
	
	return oMentionButton;
};

/**
* Replaces all the carriage returns ('\n', '\r') in a string with the br tag
* @private
* @param {string} text - the text to be formatted
* @returns {string} sFormattedText - the formatted text
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype._replaceCarriageReturnWithBRTag = function (text) {
	var sFormattedText;
	if (typeof text === "string") {
		sFormattedText = text.replace(/[\n\r]/g, '<br>'); // check for '\n' or '\r'
	}
	return sFormattedText;
}

/********************
 * Event Handlers
 *******************/
/**
* Post new reply
* @private
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype._postReply = function () {
	var sValueWithEmailAlias = this._oReplyTextArea.convertTextWithFullNamesToEmailAliases();
	this.firePostReplyPress({ value : sValueWithEmailAlias });
	this._oControlToReceiveFocus = this._oReplyTextArea;
};

/**
* Show more replies
* @private
* @memberOf sap.collaboration.components.controls.ReplyPopover
*/
sap.collaboration.components.controls.ReplyPopover.prototype._showMoreReplies = function () {
	this.fireMoreRepliesPress();
};
}; // end of sap/collaboration/components/controls/ReplyPopover.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.controls.SocialTextArea') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.collaboration.components.resources.css.SocialTextArea", ".css"));

jQuery.sap.declare('sap.collaboration.components.controls.SocialTextArea'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.TextArea'); // unlisted dependency retained
jQuery.sap.require('sap.m.InputBase'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/controls/SocialTextArea",['jquery.sap.global', 'sap/ui/model/json/JSONModel',
               'sap/m/TextArea', 'sap/m/InputBase','sap/m/Popover', 'sap/m/List', 'sap/m/StandardListItem', 
               'sap/collaboration/components/controls/SuggestionUtility', 'sap/collaboration/components/utils/LanguageBundle'],
	function(jQuery, JSONModel,TextArea, InputBase,Popover, List, StandardListItem, SuggestionUtility, LanguageBundle) {
	
	/**
	 * Constructor for a new Text Area Suggestions Control. 
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * 
	 * @extends sap.m.TextArea
	 * @author SAP SE
	 * @version ${version}
	 *
	 * @constructor
	 * @alias sap.collaboration.components.controls.SocialTextArea
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) design time metamodel
	 */
	
	var SocialTextArea = TextArea.extend("sap.collaboration.components.controls.SocialTextArea", /** @lends sap.collaboration.components.controls.SocialTextArea.prototype */ { metadata : {
  		library : "sap.collaboration",
  		properties : {
  			/**
			 * Defines the initial value of the control.
			 */
			initialValue: { type: "string", group: "Data", defaultValue: null },
			
  			/**
			 * Enable "notify all" for suggestions
			 */
  			enableNotifyAll : {type : "boolean", group : "Behavior", defaultValue : true},
  			
  			/**
			 * Which side the suggestions will be displayed
			 */
  			suggestionPlacement : {type : "sap.m.PlacementType", group : "Misc", defaultValue : sap.m.PlacementType.VerticalPreferedBottom},
  			
  			/**
			 * Height of the suggestion popover
			 */
  			suggestionHeight : {type : "sap.ui.core.CSSSize", group : "Appearance"},
  		},
		events : {
			
			/**
			 * This event is fired after the "suggestions" are triggered.
			 */
			suggest : {
				parameters : {
					/**
					 * This parameter contains the value entered by the user after the suggestions are triggered.
					 */
						value : { type : "string" }
				}
			},
			
			/**
			 * This event is fired after the "suggestions" are closed.
			 */
			afterSuggestionClose : {}
		}
	},
		renderer: {}
	});

	/* =========================*/
	/*    Protected Methods		*/
	/* =========================*/
	
	/**
	* Initializes the Control instance after creation. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype.init = function() {
		// call parent
		TextArea.prototype.init.apply(this);
		
		// remove top and bottom padding
		this.addStyleClass("sapCollaborationSocialTextArea");
		
		// initialize class variables
		this._sTextAreaOldValue = "";
		this._sTextAreaCurrentValue = "";
		this._aAtMentionBuffer = []; // buffer to save the @mention(s)
		this._mCurrentAtMention = undefined; // a map containing information about the current @mention
		
		// initialize model
		this._oModel = new JSONModel();
		
		// create internal controls
		var oStandardListItem = new StandardListItem({
			title: "{fullName}",
			description: "{email}",
			icon: "{userImage}"
		});
		
		this._oList = new List(this.getId() + "-list", {
			mode: sap.m.ListMode.SingleSelectMaster,
			rememberSelections: false,
			showSeparators: sap.m.ListSeparators.None
		}).setModel(this._oModel).bindItems("/", oStandardListItem);
		
		this._oPop = new Popover(this.getId() + "-pop", {
			showHeader: false,
			showArrow: false,
			content: [this._oList],
		}).setInitialFocus(this);
		
		// initialize util classes
		this._oSuggestionUtil = SuggestionUtility;
		this._oLangBundle =  new LanguageBundle();
		
		// attach event handlers
		this._oList.attachSelectionChange(this.onSelectionChange.bind(this));
	};
	
	/**
	* Cleans up the control instance before destruction. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype.exit = function() {
		this._oPop.destroy();
		this._oPop = undefined;
		
		this._oSuggestionUtil = undefined;
	};
	
	/**
	 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
	 * (NOT before the first rendering! onInit() is used for that one!).
	 * @protected
	 * @memberOf sap.collaboration.components.controls.SocialTextArea
	 */
	SocialTextArea.prototype.onBeforeRendering = function() {
		this._oPop.setPlacement(this.getSuggestionPlacement());
		
		// set the list's no data text based on enableNotifyAll
		this.getEnableNotifyAll() ? this._oList.setProperty("noDataText", this._oLangBundle.getText("ST_NO_SUGGESTIONS", ["@@notify"])) : 
									this._oList.setProperty("noDataText", this._oLangBundle.getText("ST_ADD_POST_NO_SUGGESTIONS"));
	};
	
	/**
	 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	 * This hook is the same one that SAPUI5 controls get after being rendered.
	 * @memberOf sap.collaboration.components.controls.SocialTextArea
	 */
	SocialTextArea.prototype.onAfterRendering = function() {
		TextArea.prototype.onAfterRendering.apply(this);
		this._oPop.setContentWidth((jQuery(this.getDomRef()).width()).toString() + "px"); // set the content width of the popover based on the width of the text area
		var oElement = jQuery("#" + this.getId()).children()[0];
		if (oElement) {
			jQuery("#" + oElement.id).css({'height': '100%'});
		}
		jQuery("#" + this.getId()).css({'padding-top': '0', 'padding-bottom': '0'});
	};
	
	/* =========================*/
	/*    Event Handlers		*/
	/* =========================*/
	
	/**
	 * Handle DOM input event.
	 * This event is fired synchronously when the value the <textarea> element is changed.
	 * @override
	 * @param {jQuery.Event} oEvent The event object.
	 * @memberOf sap.collaboration.components.controls.SocialTextArea
	 */
	SocialTextArea.prototype.oninput = function(event) {
		TextArea.prototype.oninput.apply(this, [event]); // call parent
		
		if (event.isMarked("invalid")) { // check if parent or parents have set marker to "invalid", this implies the event was not an actual key stroke
			return;
		}
		
		this._sTextAreaCurrentValue = this.getValue();
		// if the user selected all of the text and deleted everything we clear the buffer, otherwise execute the _triggerSuggestions method
		if(this._sTextAreaCurrentValue.trim() === ""){
			this._aAtMentionBuffer = [];
			this.closeSuggestionPopover();
		}
		else {
			 this._triggerSuggestions(this._sTextAreaCurrentValue, this._sTextAreaOldValue); // starting point to trigger or not trigger the suggestions
		}
		this._sTextAreaOldValue = this._sTextAreaCurrentValue;
	};
	
	/**
	 * Handle list item selection.
	 * @param {object} event The event fire by a list item selection
	 * @memberOf sap.collaboration.components.controls.SocialTextArea
	 */
	SocialTextArea.prototype.onSelectionChange = function(event) {
		var oListItem = event.getParameter("listItem");
		var sFullname = oListItem.getProperty("title");
		var sEmail = oListItem.getProperty("description");

		this._sTextAreaCurrentValue = this._oSuggestionUtil.getTextAreaValueAfterSuggestionSelected(
				sFullname, 
				sEmail, 
				this._mCurrentAtMention, 
				this._aAtMentionBuffer, 
				this._sTextAreaCurrentValue,
				sFullname === "@@notify");
		
		this.setValue(this._sTextAreaCurrentValue);	
		this._sTextAreaOldValue = this._sTextAreaCurrentValue;
		this.closeSuggestionPopover();
		this.selectText(this._mCurrentAtMention.endIndex + 2, this._mCurrentAtMention.endIndex + 2); // +2 to include the space at the end
		this._oList.removeSelections(); // remove selections to ensure that the next time the list appears nothing is selected
	};
	
	/* =========================*/
	/*    Public Methods		*/
	/* =========================*/
	
	/**
	* Sets the suggestions
	* @public
	* @param {array} suggestions an array of maps that contain the suggestion
	* @return {SocialTextArea} this - to allow method chaining
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype.showSuggestions = function(suggestions) {
		// check if the "@@notify" list item should be pushed to the list or not
		if (suggestions.length !== 0 && suggestions[suggestions.length - 1].fullName !== "@@notify" && this.getEnableNotifyAll()) {
			suggestions.push({ fullName : "@@notify", email : this._oLangBundle.getText("ST_ATATNOTIFY_DESCRIPTION"), userImage : "sap-icon://world" });
		}
		
		if (suggestions.length !== 0) {
			this._oPop.close();
		}
		this._oModel.setData(suggestions);
		this._oPop.openBy(this);
		
		return this;
	};
		
	/**
	* Sets the initial value for the text area
	* @public
	* @param {string} text The initial text to set on the text area
	* @return {SocialTextArea} this - to allow method chaining
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype.setInitialValue = function(text) {
		this.setProperty("initialValue", text, true);
		this.setValue(text);
		this._aAtMentionBuffer = [];
		this._sTextAreaCurrentValue = text;
		this._sTextAreaOldValue = text;
		
		return this;
	};
		
	/**
	* Sets the height of the suggestion popover
	* @public
	* @param {string} height The height of the suggestions popover
	* @return {SocialTextArea} this - to allow method chaining
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype.setSuggestionHeight = function(height) {
		this.setProperty("suggestionHeight", height, true);
		this._oPop.setContentHeight(height);
		
		return this;
	};
	
	/**
	* Closes the Suggestion popover if opened
	* @public
	* @return {SocialTextArea} this - to allow method chaining
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype.closeSuggestionPopover = function() {
		this._oPop.close();
		this.fireAfterSuggestionClose();
		
		return this;
	};
	
	/**
	* Clears the text area
	* @public
	* @return {SocialTextArea} this - to allow method chaining
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype.clearText = function() {
		// clear the current text area, old text area value and buffer
		this._sTextAreaCurrentValue = "";
		this._sTextAreaOldValue = "";
		this._aAtMentionBuffer = [];
		this.setValue("");
		
		return this;
	};
	
	/**
	* Converts a text that contains full names to email aliases
	* @public
	* @returns {string} sTextWithAlias - new text with the user's email alias instead of full name
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype.convertTextWithFullNamesToEmailAliases = function() {
		return this._oSuggestionUtil.convertTextWithFullNamesToEmailAliases(this.getValue(), this._aAtMentionBuffer);
	};
	
	/**
	* Inserts an @ character in the text area, triggering the suggestions
	* @public
	* @return {SocialTextArea} this - to allow method chaining
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype.atMentionsButtonPressed = function() {
		var iCursorPositionInTextArea = this.getDomRef("inner").selectionStart; // property "selectionStart" not available in IE8 or lower
		var mAtMentionPressed = this._oSuggestionUtil.atMentionsButtonPressed(this.getValue(), iCursorPositionInTextArea);
		this.setValue(mAtMentionPressed.newValue);
		this._sTextAreaCurrentValue = this.getValue();
		this.focus(); // set the focus back to the text area
		this.selectText(mAtMentionPressed.cursorPosition, mAtMentionPressed.cursorPosition); // set cursor position in the text area
		this._triggerSuggestions(this._sTextAreaCurrentValue, this._sTextAreaOldValue);
		this._sTextAreaOldValue = this._sTextAreaCurrentValue;
		
		return this;
	};
	
	/* =========================*/
	/*    Private Methods		*/
	/* =========================*/
	
	/**
	/**
	* Logic for when to fire the suggestions
	* @private
	* @param {string} textAreaCurrentValue
	* @param {string} textAreaOldValue
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype._triggerSuggestions = function(textAreaCurrentValue, textAreaOldValue) {
		/*
		 * Due to a Ux issue (the height of the @mention popover renders too small on phones), the @mention feature should NOT be available on phones.
		 * This should change when enhancements to the sap.m.TextArea are made in order to support opening the @mention popover inside a text area.
		 */ 
		if (!sap.ui.Device.system.phone) {
			// gets the change that happened on the text of the text area 
			var oTextAreaChange = this._oSuggestionUtil.getChangesInTextArea(textAreaCurrentValue,textAreaOldValue);
			
			if (oTextAreaChange.operation === "addChar") { // user added characters
				this._handleAddedCharacters(oTextAreaChange, textAreaCurrentValue);
			}
			else if (oTextAreaChange.operation === "deleteChar") { // user deleted characters
				this._handleDeletedCharacters(oTextAreaChange, textAreaCurrentValue, this._aAtMentionBuffer);
			}
		}
	};

	/**
	* Logic when the user adds character(s)
	* @private
	* @param {object} textAreaChange
	* @param {string} textAreaCurrentValue
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype._handleAddedCharacters = function(textAreaChange, textAreaCurrentValue) {
		var iTextAreaChangeIndex = textAreaChange.changeIndex; // the index in the string where the change starts to happen
		var sTextAreaChangeChars = textAreaChange.charactersChanged; 	// the chars added by the change that happened on the text are, in case of delete it will be undefined
		var iAtBufferLength = this._aAtMentionBuffer.length; // buffer length
		var bIsNotifyAllEnabled = this.getEnableNotifyAll();
		
		/* 
		 * IF the char(s) added:
		 * i - bIsNotifyAllEnabled is true AND
		 * ii - has a '@' in the beginning AND
		 * iii - has another '@' before it AND
		 * iv - the character before it has a space OR return carriage OR or undefined
		 * 
		 * then it implies that the '@@notify' should be triggered
		 */ 
		if (bIsNotifyAllEnabled && sTextAreaChangeChars[0] === "@" && textAreaCurrentValue[iTextAreaChangeIndex - 1] === "@" && 
			(textAreaCurrentValue[iTextAreaChangeIndex - 2] === " " || textAreaCurrentValue[iTextAreaChangeIndex - 2] === "\n" || textAreaCurrentValue[iTextAreaChangeIndex - 2] === undefined)) {
			
			this.showSuggestions([{ fullName : "@@notify", email : this._oLangBundle.getText("ST_ATATNOTIFY_DESCRIPTION"), userImage : "sap-icon://world" }]);
			
			// update indices in the buffer
			for (var i = 0; i < iAtBufferLength; i++) {
				if(this._aAtMentionBuffer[i].startIndex === iTextAreaChangeIndex - 1){
					this._aAtMentionBuffer[i].endIndex += sTextAreaChangeChars.length;
				}
				else if(iTextAreaChangeIndex < this._aAtMentionBuffer[i].startIndex){
					this._oSuggestionUtil.maintainAtMentionIndices(this._aAtMentionBuffer[i], sTextAreaChangeChars.length);
				}
			}
		}
		/* 
		 * ELSE IF the char(s) added:
		 * i- has a '@' in the beginning OR
		 * ii- has a '@' in the beginning with a space before it (' @')
		 * 
		 * then it implies the suggestions should be triggered
		 */ 
		else if (sTextAreaChangeChars[0] === "@" || (sTextAreaChangeChars[0] === " " && sTextAreaChangeChars[1] === "@")) {
			if (sTextAreaChangeChars[1] === "@") {
				iTextAreaChangeIndex += 1; // need to increase the iTextChangeIndex by 1 to accommodate for the space since we want the start index to be where the '@' is
			}

			var iCurrentAtMentionArrayIndex = this._oSuggestionUtil.addToAtMentionBuffer(this._aAtMentionBuffer, iTextAreaChangeIndex, sTextAreaChangeChars);
			this._mCurrentAtMention = this._aAtMentionBuffer[iCurrentAtMentionArrayIndex];
			// if the text entered was an '@' char with a space after it (i.e. pressing the '@mentions' button), then -1 the end index in the buffer
			if (sTextAreaChangeChars === "@ ") {
				this._mCurrentAtMention.endIndex -= 1;
			}
			
			// get character before the '@' is a space, undefined or a return carriage
			var sCharBeforeAtMentionChar = textAreaCurrentValue[this._mCurrentAtMention.startIndex - 1];
			// get the next index after the added text
			var iNextCharAfterAddedTextIndex = this._mCurrentAtMention.endIndex + 1;
			if (sCharBeforeAtMentionChar === " " || sCharBeforeAtMentionChar === undefined || sCharBeforeAtMentionChar === '\n') { // if char before '@' is space, undefined or return carriage
				// get character(s) after the added text
				var sNextCharAfterAddedText = textAreaCurrentValue[iNextCharAfterAddedTextIndex];
				while (sNextCharAfterAddedText !== " " && sNextCharAfterAddedText !== undefined && sNextCharAfterAddedText !== '\n') {
					iNextCharAfterAddedTextIndex += 1;
					sNextCharAfterAddedText = textAreaCurrentValue[iNextCharAfterAddedTextIndex];
				}
				// update current AtMention end index with the characters after added text
				this._mCurrentAtMention.endIndex = iNextCharAfterAddedTextIndex - 1; // -1 since the last index is not a character but the end of the string
				this.fireSuggest({ value : textAreaCurrentValue.substring(iTextAreaChangeIndex + 1, iNextCharAfterAddedTextIndex) });
			}
			else {
				this.closeSuggestionPopover();
			}
		}
		/*
		 * ELSE the char(s) added do not have a '@' in the beginning
		 * 
		 * then it implies that the '@@notify' or suggestions or nothing should be triggered
		 */ 
		else { 
			for (var i = iAtBufferLength - 1; i >= 0; i--) {
				if (iTextAreaChangeIndex > this._aAtMentionBuffer[i].startIndex) {
					var sStringAfterAtMention = this._oSuggestionUtil.getStringAfterAtMention(iTextAreaChangeIndex + sTextAreaChangeChars.length - 1, textAreaCurrentValue, this._aAtMentionBuffer[i]);
					var sStringBeforeAtMention = this._oSuggestionUtil.getStringBeforeAtMention(this._aAtMentionBuffer[i], textAreaCurrentValue, iTextAreaChangeIndex);
					var sQueryString = sStringBeforeAtMention + sTextAreaChangeChars + sStringAfterAtMention;
					var oRegExp = new RegExp("^" + sQueryString);
					// case #1: the char(s) added are part of a "@@notify"
					if (bIsNotifyAllEnabled && oRegExp.test("@notify")) {
						this._aAtMentionBuffer[i].endIndex = this._aAtMentionBuffer[i].endIndex + sTextAreaChangeChars.length;
						this._mCurrentAtMention = this._aAtMentionBuffer[i];
						this.showSuggestions([{fullName : "@@notify", email : this._oLangBundle.getText("ST_ATATNOTIFY_DESCRIPTION"), userImage : "sap-icon://world"}]);
					}
					// case #2: the char(s) from the @mention start index to the char(s) added (sQueryString) have no space or one space
					else if (!sQueryString.match(/ /g) || (sQueryString.match(/ /g) && sQueryString.match(/ /g).length === 1)) {
						// if the char(s) were added to a @mention that was selected from the suggestions list (atMentioned === true) -
						// this would invalidate the @mention, therefore we remove the '@' char, replace it with a " " and remove the @mention from the buffer
						if ((this._aAtMentionBuffer[i].atMentioned === true || this._aAtMentionBuffer[i].notifyAll === true) && iTextAreaChangeIndex <= this._aAtMentionBuffer[i].endIndex) {
							var iAtMentionStartIndex = this._aAtMentionBuffer[i].startIndex;
							var sTextWithoutAtChar = textAreaCurrentValue.slice(0, iAtMentionStartIndex) + " " + textAreaCurrentValue.slice(iAtMentionStartIndex + 1, textAreaCurrentValue.length);
							
							this.setValue(sTextWithoutAtChar);
							this._sTextAreaCurrentValue = sTextWithoutAtChar;
							this._aAtMentionBuffer.splice(i, 1);
							this.selectText(iTextAreaChangeIndex + 1, iTextAreaChangeIndex + 1);
							this.closeSuggestionPopover();
						}
						// else check that there is no return carriage or '@' in the sQueryString and fire the suggestions
						else if (sQueryString.search("\n") === -1 && sQueryString.search("@") === -1) {
							this._aAtMentionBuffer[i].endIndex = this._aAtMentionBuffer[i].startIndex + sQueryString.length;
							this._mCurrentAtMention = this._aAtMentionBuffer[i];
							
							var sCharBeforeAtMentionChar = textAreaCurrentValue[this._mCurrentAtMention.startIndex - 1];
							// only fire the suggestions if the character before the '@' is a space, undefined or a return carriage
							if(sCharBeforeAtMentionChar === " " || sCharBeforeAtMentionChar === undefined || sCharBeforeAtMentionChar === '\n'){
								this.fireSuggest({value: sQueryString}); // fire suggestions
							}
						}
						else {
							this.closeSuggestionPopover();
						}
					}
					// case #3: the char(s) added have nothing to do with any @mentions (e.g. user entered a char, space or return carriage) then close any open suggestions
					else {
						this.closeSuggestionPopover();
					}
					break;
				}
				// update indices of @mentions in the buffer
				this._oSuggestionUtil.maintainAtMentionIndices(this._aAtMentionBuffer[i], sTextAreaChangeChars.length);
				
				if (i === 0) { // check if last iteration of for loop, then close suggestions in case it was previously opened
					this.closeSuggestionPopover();
				}
			}
		}
	};

	/**
	* Logic when the user deletes character(s)
	* @private
	* @param {map} textAreaChange
	* @param {string} textAreaCurrentValue
	* @memberOf sap.collaboration.components.controls.SocialTextArea
	*/
	SocialTextArea.prototype._handleDeletedCharacters = function(textAreaChange, textAreaCurrentValue) {
		var iTextAreaChangeIndex = textAreaChange.changeIndex; // the index in the string where the change starts to happen
		var sTextAreaChangeChars = textAreaChange.charactersChanged;
		var iCharsDifference = undefined; // the difference in char(s) between the old and new text area value

		// IF the deleted char(s) is part of a @mention in the buffer
		var iAtMentionIndexInBuffer = this._oSuggestionUtil.isDeletedCharPartOfAtMentioned(this._aAtMentionBuffer, iTextAreaChangeIndex);
		if (iAtMentionIndexInBuffer !== undefined) {
			// case #1: deleted char(s) is part of a selected @mention (atMentioned === true)
			if (this._aAtMentionBuffer[iAtMentionIndexInBuffer].atMentioned === true || this._aAtMentionBuffer[iAtMentionIndexInBuffer].notifyAll ===  true) {
				this.closeSuggestionPopover();
				// get the value of the text after deletion of the whole @mention string
				this._sTextAreaCurrentValue = this._sTextAreaCurrentValue.substr(0, this._aAtMentionBuffer[iAtMentionIndexInBuffer].startIndex) + 
																					this._sTextAreaCurrentValue.substr(this._aAtMentionBuffer[iAtMentionIndexInBuffer].endIndex -
																					textAreaChange.numberOfCharsChanged + 1);
				this.setValue(this._sTextAreaCurrentValue);
				this.selectText(this._aAtMentionBuffer[iAtMentionIndexInBuffer].startIndex, this._aAtMentionBuffer[iAtMentionIndexInBuffer].startIndex);
				this._sTextAreaOldValue = this._sTextAreaCurrentValue;
				
				iCharsDifference = 1 + this._aAtMentionBuffer[iAtMentionIndexInBuffer].endIndex - this._aAtMentionBuffer[iAtMentionIndexInBuffer].startIndex; // +1 for the @
				this._aAtMentionBuffer.splice(iAtMentionIndexInBuffer, 1); // remove the @mention from the buffer
			}
			// case #2: deleted char(s) is not part of a selected @mention (atMentioned === false)
			else {
				iCharsDifference = textAreaChange.numberOfCharsChanged;
				var sCharBeforeAtMentionChar = textAreaCurrentValue[this._aAtMentionBuffer[iAtMentionIndexInBuffer].startIndex - 1];
				// the deleted char(s) contains an '@' AND the char before is not an "@", remove the @mention from the buffer
				if (sTextAreaChangeChars.search("@") !== -1 && textAreaCurrentValue[textAreaChange.changeIndex - 1] !== "@") {
					this.closeSuggestionPopover();
					this._aAtMentionBuffer.splice(iAtMentionIndexInBuffer, 1);
				}
				// update the current @mention end index in the buffer and fire the suggest from the start to end index if the character before the "@" is a space, return carriage or undefined
				else if (sCharBeforeAtMentionChar === " " || sCharBeforeAtMentionChar === undefined || sCharBeforeAtMentionChar === '\n') {
					this._aAtMentionBuffer[iAtMentionIndexInBuffer].endIndex -= iCharsDifference;
					// +1 to the start index to not include the '@' char and +1 to the end index to account for the last char
					var sValue = textAreaCurrentValue.substring(this._aAtMentionBuffer[iAtMentionIndexInBuffer].startIndex + 1, this._aAtMentionBuffer[iAtMentionIndexInBuffer].endIndex + 1);
					var oRegExp = new RegExp("^" + sValue);
					if (sValue !== "" && oRegExp.test("@notify")) {
						this.showSuggestions([{fullName : "@@notify", email : this._oLangBundle.getText("ST_ATATNOTIFY_DESCRIPTION"), userImage : "sap-icon://world"}]);
					}
					else {
						this.fireSuggest({value : sValue});
					}
				}
			}
		}
		// update the rest of the indices in the buffer if the start index is greater than the change index
		iAtMentionIndexInBuffer = iAtMentionIndexInBuffer || 0;
		iCharsDifference = iCharsDifference || textAreaChange.numberOfCharsChanged;
		for (var j = iAtMentionIndexInBuffer; j < this._aAtMentionBuffer.length; j++) {
			if (iTextAreaChangeIndex < this._aAtMentionBuffer[j].startIndex) {
				this._oSuggestionUtil.maintainAtMentionIndices(this._aAtMentionBuffer[j], - iCharsDifference);
			}
		}
	};
	
	return SocialTextArea;
}, /* bExport= */ true);
}; // end of sap/collaboration/components/controls/SocialTextArea.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.controls.TimelineEntryEmbedded') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.controls.TimelineEntryEmbedded'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/controls/TimelineEntryEmbedded",['jquery.sap.global', 'sap/ui/core/Control', 'sap/collaboration/components/utils/LanguageBundle', 'sap/collaboration/components/controls/PlaceholderUtility', 'sap/collaboration/components/utils/MediaTypeToSAPIcon'],
	function(jQuery, Control, LanguageBundle, placeholderUtility, MediaTypeToSAPIcon) {
	"use strict";
	
	/**
	 * Constructor for a new Timeline Entry Embedded Control. 
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * 
	 * @extends sap.ui.core.Control
	 * The Timeline Entry Embedded Control is to be used in a sap.suite.ui.commons.TimelineItem.
	 * @author SAP SE
	 * @version ${version}
	 *
	 * @constructor
	 * @alias sap.collaboration.components.controls.TimelineEntryEmbedded
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	var TimelineEntryEmbedded = Control.extend("sap.collaboration.components.controls.TimelineEntryEmbedded", /** @lends sap.collaboration.components.controls.TimelineEntryEmbedded.prototype */ { metadata : {
		interfaces : [],
  		library : "sap.m",
  		properties : {
  			"timelineEntry":{type:"object", group:"data"}
  		},
		events : {
		},
		aggregations:{	
		}
	}});
	
	/**
	*  Initializes the Control instance after creation. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.controls.TimelineEntryEmbedded
	*/
	TimelineEntryEmbedded.prototype.init = function(){
		this._oLangBundle = new LanguageBundle();
		jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.collaboration.components.resources.css.EmbeddedControl", ".css"));

		this._aTimelineItemTextDisplay;	// controls (sap.m.Text & sap.m.Link) for the Text
	};

	/**
	* Function is called before the rendering of the control is started. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.controls.TimelineEntryEmbedded
	*/
	TimelineEntryEmbedded.prototype.onBeforeRendering = function(){
		if(!this._aTimelineItemTextDisplay){
			this._createTimelineItemText();
		}
	};

	/**
	* Cleans up the control instance before destruction. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.controls.TimelineEntryEmbedded
	*/
	TimelineEntryEmbedded.prototype.exit = function(){
		if( this._aTimelineItemTextDisplay ){
			this._aTimelineItemTextDisplay.forEach(function(oControl){
				oControl.destroy();
			});
		}
		if( this._oPopover ){
			this._oPopover.destroy();
		}
	};
	/**
	 * Returns the content control
	 * @private
	 * @returns {object} SAPUI5 control
	 * @memberOf sap.collaboration.components.controls.TimelineEntryEmbedded
	 */
	TimelineEntryEmbedded.prototype._getTimelineItemTextControls = function(){
		return this._aTimelineItemTextDisplay;
	};

	/**
	 * Creates the controls for the Text
	 * @private
	 * @memberOf sap.collaboration.components.controls.TimelineEntryEmbedded
	 */
	TimelineEntryEmbedded.prototype._createTimelineItemText = function(){
		var oTimelineItemData = this.getTimelineEntry();
		
		this._aTimelineItemTextDisplay = [];
		
		if(oTimelineItemData.timelineEntryDetails != undefined && oTimelineItemData.timelineEntryDetails.length > 0){
			
			var sFirstEntry = this._parseTimelineEntryDetail(oTimelineItemData.timelineEntryDetails[0]); 
			this._aTimelineItemTextDisplay.push( new sap.m.Text({text: sFirstEntry + " "}).addStyleClass("alignMiddle") );
			
			if(oTimelineItemData.timelineEntryDetails.length > 1){
				var oLink = this._createTLEntryDetailsLink(oTimelineItemData.timelineEntryDetails).addStyleClass("alignMiddle");
				this._aTimelineItemTextDisplay.push(oLink);
			}
		}
		else {
			this._aTimelineItemTextDisplay.push( new sap.m.Text({text: oTimelineItemData.text}).addStyleClass("alignMiddle") );
		}
		
	};
	/**
	 * Called by the renderer. This will render the Text part of the embedded control.
	 * @param oRenderManager
	 * @memberOf sap.collaboration.components.controls.TimelineEntryEmbedded
	 */
	TimelineEntryEmbedded.prototype._renderTimelineItemText = function(oRenderManager){
		var space = "&nbsp;";
		
	    if(this._aTimelineItemTextDisplay.length > 0){
			oRenderManager.write("<div"); 
		    oRenderManager.writeControlData(this);
		    oRenderManager.write(">");
		
		    for (var i = 0; i < this._aTimelineItemTextDisplay.length; i++) { 

		    	var sClassName = this._aTimelineItemTextDisplay[i].getMetadata().getName();
		    	
		    	switch (sClassName){
		    	case "sap.m.Text":
			    	// WORKAROUND: the SAPUI5 framework trims text automatically when rendering;
			    	// therefore we must add the spaces at the beginning and at the end
			    	var sText = this._aTimelineItemTextDisplay[i].getText();

			    	// adding spaces at the beginning
			    	if(sText.search(/\s/) == 0){
			    		var iFirstNonSpace = sText.search(/\S/);
			    		do {
			    			oRenderManager.write(space);
			    			iFirstNonSpace--;
			    		}
			    		while(iFirstNonSpace > 0);
			    	}
			    	oRenderManager.renderControl(this._aTimelineItemTextDisplay[i]);
			    	
			    	// adding spaces at the end
			    	if( sText[sText.length-1] == " " ){
			    		var index = sText.length-1;
			    		var character = sText[index];
			    		do{
			    			oRenderManager.write(space);
			    			character = sText[--index];
			    		}
			    		while(character == " " && character != undefined);
			    	}
			    	
		    		break;
		    	case "sap.m.Link":
		    	case "sap.ui.core.HTML":
		    	default:
		    		oRenderManager.renderControl(this._aTimelineItemTextDisplay[i]);
		    	}
		    }
		    oRenderManager.write("</div>");
	    }
	};
	/*********************************************************
	 * Timeline Entry functions
	 *********************************************************/
	/**
	 * Creates Link control for the additional changes
	 * @param {array} aTimelineEntryDetails - Number of timeline entry details
	 * @returns {sap.m.Link} Link control
	 * @memberOf sap.collaboration.components.socialtimeline.controls.TimelineItemEmbeddedControl
	 */
	TimelineEntryEmbedded.prototype._createTLEntryDetailsLink = function(aTimelineEntryDetails){
		var that = this;
		var iAdditionalChanges = aTimelineEntryDetails.length - 1;
		var sLangBundleText = this._oLangBundle.getText("TE_LINK_TEXT", iAdditionalChanges);
		
		var oLink = new sap.m.Link(this.getId()+"_PopoverLink",{ text: sLangBundleText });

		oLink.attachPress(function(){
			if (!that._oPopover){
				that._oPopover = that._createTLEntryDetailsPopover(aTimelineEntryDetails);
			}	
			that._oPopover.openBy(oLink);
		});		
		return oLink;		
	};
	/**
	 * Create the popover list for the additional changes
	 * @param {array} aTimelineEntryDetails - list of timeline entry details items
	 * @returns {sap.m.Popover}
	 * @memberOf sap.collaboration.components.socialtimeline.controls.TimelineItemEmbeddedControl
	 */
	TimelineEntryEmbedded.prototype._createTLEntryDetailsPopover = function(aTimelineEntryDetails){
		
		var oChangeList = new sap.m.List(this.getId()+"_ChangeList",{inset:false});

		for (var oEntry in aTimelineEntryDetails){
			var sEntry = this._parseTimelineEntryDetail(aTimelineEntryDetails[oEntry]);
			var oListItem = new sap.m.FeedListItem({text: sEntry,
													showIcon: false});
			oChangeList.addItem(oListItem);
		}
		
		var S_CONTENT_WIDTH = "20em";
		var oPopover = new sap.m.Popover(this.getId()+"_Popover",{
			contentWidth: S_CONTENT_WIDTH,
			placement: sap.m.PlacementType.Auto,
			title: this._oLangBundle.getText("TE_DETAILS_POPOVER_HEADER") + "(" + aTimelineEntryDetails.length +")",
			content:[oChangeList]
		});				
		return oPopover;
	};
	/**
	 * Parses the Timeline entry detail to a format for the additional changes to be displayed in the popover
	 * @param {Object} oDetail - Timeline entry detail
	 * @returns {String} Timeline entry change description
	 * @memberOf sap.collaboration.components.socialtimeline.controls.TimelineItemEmbeddedControl
	 */
	TimelineEntryEmbedded.prototype._parseTimelineEntryDetail = function(oDetail){
		
		var sTimelineEntryDetail="";
		
		switch (oDetail.changeType) {
			case "U":
				sTimelineEntryDetail = this._oLangBundle.getText("TE_DETAILS_CHANGED",[oDetail.propertyLabel, oDetail.beforeValue, oDetail.afterValue]);
				break;
			case "I":
				sTimelineEntryDetail = this._oLangBundle.getText("TE_DETAILS_SET",[oDetail.propertyLabel, oDetail.afterValue]);
				break;
			case "D":
				sTimelineEntryDetail = this._oLangBundle.getText("TE_DETAILS_CLEARED",[oDetail.propertyLabel, oDetail.beforeValue]);
				break;
		}		
		return sTimelineEntryDetail;
	};
	return TimelineEntryEmbedded;
}, /* bExport= */ true);
}; // end of sap/collaboration/components/controls/TimelineEntryEmbedded.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.feed.commons.Detail.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.feed.commons.Detail.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */


/**********************************************************
* Detail View Controller
*
* Is the controller for the Detail View and is responsible 
* for loading JAM API Script and for creating and rendering
* the JAM Feed Widget
***********************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.commons.Detail", {
	
/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initializes class variables.
* @memberOf detail
*/
	onInit: function() {
		this.sJamToken = this.getView().getViewData().jamToken;
		this.sJamURL = this.getView().getViewData().jamURL;
		this.oLangBundle = this.getView().getViewData().langBundle;
		this.sPrefixId  = this.getView().getViewData().controlId;
		this.oBusinessObject = this.getView().getViewData().businessObject;
		
		this.bJamWidgetInitialized = false;
		
		if (this.getView().getViewData().appType === sap.collaboration.AppType.split){
			this.sFeedType = sap.collaboration.FeedType.follows;
		} else{
			this.sFeedType = this.getView().getViewData().feedType;
			this.getView().oDetailPage.setShowHeader(false);
		}
		
		this.oJamUtil = new sap.collaboration.components.utils.JamUtil();
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* @memberOf detail
*/
	onBeforeRendering: function() {
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* It calls the loadFeedWidgetScript() function. Please refer to this function for the JSDoc.
* @memberOf detail
*/
	onAfterRendering: function() {		
		try{
			this.loadFeedWidget(this.sJamURL);			
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.commons.Detail.onInit()");
			throw oError;
		}
	},
	
	/**
	 * Loads the JAM API scripts used to create feed widget
	 * @private
	 */
	loadFeedWidget: function(sJamURL){
	   var self = this;	 
		   
	   try{
		   //1) Prepare the widget data
		   var sGroupIds = self.getView().getViewData().groupIds;
		   var oWidgetData = this.oJamUtil.prepareWidgetData(self.sJamToken, self.sFeedType, sGroupIds, self.oBusinessObject);
		   	   
		   // Callback function to get notified once the script has been loaded
		   var fLoadSuccess = function(response){
			   jQuery.sap.log.info("Jam Feed Widget Loaded Successfully","sap.collaboration.components.fiori.feed.commons.Detail.onInit()");
			   
			   //3) Initialize the jam widget
			   self.oJamUtil.initializeJamWidget(self.sJamURL);	
			   self.bJamWidgetInitialized = true;
			   
			   //4) Create the Feed Widget
			   self.oJamUtil.createJamWidget(self.sPrefixId + "widgetContainer", oWidgetData);
	   		};	
		   		   	
		   	var fLoadError = function(oError){
		   		jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.commons.Detail.loadFeedWidgetScript()");
		   		throw oError;
		   	};
		   	
		    //2) Load the feed widget
		   	// if the self.bJamWidgetInitialized = true this means that the Jam script is loaded and the widget is initialized
		   	if (this.bJamWidgetInitialized === false){
		   		this.oJamUtil.loadFeedWidgetScript(sJamURL, fLoadSuccess, fLoadError);
		   	} else{
		   		this.oJamUtil.createJamWidget(self.sPrefixId + "widgetContainer", oWidgetData);
		   	}
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.commons.Detail.loadFeedWidgetScript()");
			throw oError;
		}
			
	}
	   
/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf detail
*/
//	onExit: function() {
//
//	}
	
});
}; // end of sap/collaboration/components/fiori/feed/commons/Detail.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.notification.Notification.view') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.notification.Notification.view');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */




sap.ui.jsview("sap.collaboration.components.fiori.notification.Notification", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @memberOf Notification
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.notification.Notification";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* Creates and returns a UI5 mobile VBox 
	* @memberOf Notification
	*/ 
	createContent : function(oController) {
		this.sPrefixId = this.getViewData().controlId;
		this.oLangBundle = this.getViewData().langBundle;
		this.sStyleClassPrefix = this.getViewData().styleClassPrefix;
		this.iNumberOfNotifications = this.getViewData().numberOfNotifications;
		this.sNotificationsTargetURL = this.getViewData().notificationsTargetUrl;
		
		var oContainerBox = this.createContainerBox();
		return oContainerBox;
	},
	
	createContainerBox : function(){
		
		var self = this;
		this.aProfilePhotos = this.createProfilePhotos();
		this.oNotificationTypeText = this.createNotificationTypeText();
		this.oNotificationMessageText = this.createNotificationMessageText();
		
		var oNotificationUnreadCountVBox = this.createNotificationUnreadCountVBox();
		var oAgeAndGroupVBox = this.createNotificationAgeAndGroupVBox();
		
		var oContainerBox = new sap.collaboration.components.fiori.notification.NotificationContainer(this.sPrefixId + "_ContainerBox");
		for (var i = 0; i < this.aProfilePhotos.length; ++i) {
			oContainerBox.addContent(this.aProfilePhotos[i]);
		}
		oContainerBox.addContent(this.oNotificationTypeText);
		oContainerBox.addContent(this.oNotificationMessageText);
		oContainerBox.addContent(oNotificationUnreadCountVBox);
		oContainerBox.addContent(oAgeAndGroupVBox);
		
		return oContainerBox;
	},
	
	createProfilePhotos : function() {
		var aProfilePhotos = [];
		for (var i = 0; i < this.iNumberOfNotifications; ++i) {
			aProfilePhotos.push(
			    new sap.m.Image(this.sPrefixId + "_ProfileImage" + i,{
			    	densityAware: false,
			    	decorative: true
			    }).addStyleClass(this.sStyleClassPrefix + "ProfileImage")
			      .addStyleClass(this.sStyleClassPrefix + "ProfileImageHidden")
			      .addStyleClass(this.sStyleClassPrefix + "CursorPointer")
			);
		}
		return aProfilePhotos;
	},
	
	createNotificationTypeText : function() {
		return new sap.m.Text(this.sPrefixId + "_NotificationType").addStyleClass(this.sStyleClassPrefix + "NotificationTypeText")
		                                                           .addStyleClass(this.sStyleClassPrefix + "CursorPointer");
	},
	
	createNotificationMessageText : function() {
		return new sap.m.Text(this.sPrefixId + "_NotificationMessage").addStyleClass(this.sStyleClassPrefix + "NotificationMessageText")
                                                                      .addStyleClass(this.sStyleClassPrefix + "CursorPointer");
	},
	
	createNotificationUnreadCountText : function() {
		return new sap.m.Text(this.sPrefixId + "_NotificationUnreadCount").addStyleClass(this.sStyleClassPrefix + "NotificationUnreadCountText")
   		                                                                  .addStyleClass(this.sStyleClassPrefix + "CursorPointer");
	},
	
	createNotificationNewNotificationOrErrorText : function() {
		return new sap.m.Text(this.sPrefixId + "_NewNotificationOrErrorText").addStyleClass(this.sStyleClassPrefix + "CursorPointer");
	},
	
	createNotificationUnreadCountVBox : function() {
		this.oNotificationUnreadCountText = this.createNotificationUnreadCountText();
		this.oNotificationNewNotificationOrErrorText = this.createNotificationNewNotificationOrErrorText();
		
		var oNotificationUnreadCountVBox = new sap.m.VBox(this.sPrefixId + "_UnreadCountVBox", {
			items:[
			  this.oNotificationUnreadCountText,
			  this.oNotificationNewNotificationOrErrorText
			]
		}).addStyleClass(this.sStyleClassPrefix + "NotificationUnreadContainer");
		
		return oNotificationUnreadCountVBox;
	},
	
	createNotificationAgeAndGroupVBox : function() {
		this.oNotificationAgeText = new sap.m.Text(this.sPrefixId + "_NotificationAge", {
			textAlign: sap.ui.core.TextAlign.Right,
			}).addStyleClass(this.sStyleClassPrefix + "NotificationAgeAndGroupText")
		                                                .addStyleClass(this.sStyleClassPrefix + "CursorPointer");
		this.oNotificationGroupText = new sap.m.Text(this.sPrefixId + "_NotificationGroup", {
			textAlign: sap.ui.core.TextAlign.Right,
			}).addStyleClass(this.sStyleClassPrefix + "NotificationAgeAndGroupText")
		                                                .addStyleClass(this.sStyleClassPrefix + "CursorPointer");
		
		var oAgeAndGroupVBox = new sap.m.VBox(this.sPrefixId + "_AgeAndGroupVBox", {
			items:[this.oNotificationAgeText, this.oNotificationGroupText]
		}).addStyleClass(this.sStyleClassPrefix + "NotificationAgeAndGroupContainer");
//		oAgeAndGroupVBox.setAlignItems(sap.m.FlexAlignItems.End); // Ensures that all items in the VBox are aligned 
		
		return oAgeAndGroupVBox;
	},
	
	// When clicking on the view, the tap event is triggered for desktop
	ontap : function() {
		window.open(this.sNotificationsTargetURL, window.name);
	}
});
}; // end of sap/collaboration/components/fiori/notification/Notification.view.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.attachment.Attachment') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * This module is a class whose objects are meant to hold information about a single file.
 */
jQuery.sap.declare("sap.collaboration.components.fiori.sharing.attachment.Attachment");




/**
 * <p>This constructor must be called in the following way:</p> 
 * <p>new Attachment("name", "mimeType", "url")</p>
 * <p>name, mimeType, and url are only place holders and can be any string.</p>
 * @since version 1.20
 * @constructor
 * @param {string} name: The file's name.
 * @param {string} mimeType: The file's mime type.
 * @param {string} url: A url that points to the file.
 * 
 * @class Attachment
 * 
 * Attachment objects represent files.
 * @name sap.collaboration.components.fiori.sharing.attachment.Attachment
 * @public
 */
sap.ui.base.Object.extend("sap.collaboration.components.fiori.sharing.attachment.Attachment", {
	constructor: function(name, mimeType, url) {
		// There are two ways of calling this constructor
		// new Attachment("name", "mimeType", "url") or
		if (	arguments.length === 3 &&
				Object.prototype.toString.call(name) === "[object String]" &&
				Object.prototype.toString.call(mimeType) === "[object String]" &&
				Object.prototype.toString.call(url) === "[object String]") {
			/** @private */ this.name = name;
			/** @private */ this.mimeType = mimeType;
			/** @private */ this.url = url;
		} 
		else {
			throw new sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentConstructorArgumentsException();
		}
	},
	
	getName: function() {
		return this.name;
	},
	getMimeType: function() {
		return this.mimeType;
	},
	getUrl: function() {
		return this.url;
	},
	
	setName: function(name) {
		if (arguments.length === 1 && Object.prototype.toString.call(name) === "[object String]") {
			this.name = name;
		}
		else {
			throw new sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException("name");
		}
	},
	setMimeType: function(mimeType) {
		if (arguments.length === 1 && Object.prototype.toString.call(mimeType) === "[object String]") {
			this.mimeType = mimeType;
		}
		else {
			throw new sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException("mimeType");
		}
	},
	setUrl: function(url) {
		if (arguments.length === 1 && Object.prototype.toString.call(url) === "[object String]") {
			this.url = url;
		}
		else {
			throw new sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException("url");
		}
	}
});
}; // end of sap/collaboration/components/fiori/sharing/attachment/Attachment.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/socialtimeline/controls/TimelineItemEmbedded",['jquery.sap.global', 'sap/ui/core/Control', 
               'sap/collaboration/components/controls/TimelineEntryEmbedded', 'sap/collaboration/components/controls/FeedEntryEmbedded'],
	function(jQuery, Control, 
			TimelineEntryEmbedded, FeedEntryEmbedded) {
	"use strict";
	
	/**
	 * Constructor for a Timeline Item Embedded Control. 
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * 
	 * @extends sap.ui.core.Control
	 * The Timeline Item Embedded Control is to be used in a sap.suite.ui.commons.TimelineItem.
	 * @author SAP SE
	 * @version ${version}
	 *
	 * @constructor
	 * @alias sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	
	var TimelineItemEmbedded = Control.extend("sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded", /** @lends sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded.prototype */ { metadata : {
		interfaces : [],
  		library : "sap.m",
  		properties : {
  			"timelineItem":{type:"object", group:"data"}
  		},
		events : {
			atMentionClick : {
				parameters : {
					link: {type : "object"},
				}
			},
			expandCollapseClick : {
			}
		},
		aggregations:{	
		}
	}});
	
	/**
	*  Initializes the Control instance after creation. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded
	*/
	TimelineItemEmbedded.prototype.init = function(){
		this._oEmbeddedControl;
	};

	/**
	* Function is called before the rendering of the control is started. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded
	*/
	TimelineItemEmbedded.prototype.onBeforeRendering = function(){
		var oTimelineItem = this.getTimelineItem();
		if (oTimelineItem._feedEntryData !== undefined) {
			this._oEmbeddedControl = new FeedEntryEmbedded({
				"feedEntry": oTimelineItem._feedEntryData,
				"atMentionClick": [this.onAtMentionClicked, this],
				"expandCollapseClick": [this.onExpandCollapseClick, this]
			});
		}
		else {
			this._oEmbeddedControl = new TimelineEntryEmbedded({
				"timelineEntry": oTimelineItem.timelineItemData,
			});
		}
	};

	/**
	* Cleans up the control instance before destruction. [borrowed from sap.ui.core.Control]
	* @protected
	* @memberOf sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded
	*/
	TimelineItemEmbedded.prototype.exit = function(){
	};
	
	/**
	 * Returns the embedded control
	 * @public
	 * @returns {object} SAPUI5 control
	 * @memberOf sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded
	*/
	TimelineItemEmbedded.prototype.getEmbeddedControl = function(){
		return this._oEmbeddedControl;
	};

	/**
	 * Fired when the expand / collapse link is clicked
	 * @private
	 * @memberOf sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded
	*/
	TimelineItemEmbedded.prototype.onExpandCollapseClick = function(){
		this.fireExpandCollapseClick();
	};

	/**
	 * Returns the embedded control
	 * @private
	 * @param oControlEvent - event 
	 * @memberOf sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded
	*/
	TimelineItemEmbedded.prototype.onAtMentionClicked = function(oControlEvent){
		this.fireAtMentionClick(oControlEvent.getParameters()); // fire the same event with the same parameters
	};
	
	return TimelineItemEmbedded;
}, /* bExport= */ true);
}; // end of sap/collaboration/components/socialtimeline/controls/TimelineItemEmbedded.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.validation.InputValidator') ) {
  jQuery.sap.declare('sap.collaboration.components.socialtimeline.validation.InputValidator');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2015 SAP AG. All rights reserved
 */

sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.validation.InputValidator", {
	constructor: function(oSocialTimeline){
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.validation.InputValidator");
		
		this._bCustomFilterValid = true;
		this._bSocialFeaturesEnabled = true;
		this._bBackendFeaturesEnabled = true;
		
		this._oSocialTimeline = oSocialTimeline;
		
		// run the validation
//		this._validateCustomFilter();
//		this._validateEnableSocial();
	},
	/**
	 * Returns true if the Custom Filters are valid.
	 * @public
	 * @returns {Boolean}
	 * 
	 * @memberOf sap.collaboration.components.socialtimeline.validation.InputValidator
	 */
	areCustomFiltersValid: function(){
		return this._bCustomFilterValid;
	},
	/**
	 * Returns true if the Social Features are enabled. (Jam configuration is ok)
	 * @public
	 * @returns {Boolean}
	 * 
	 * @memberOf sap.collaboration.components.socialtimeline.validation.InputValidator
	 */
	areSocialFeaturesEnabled: function(){
		return this._bSocialFeaturesEnabled;
	},
	/**
	 * Returns true if the Backend Features are enabled. (Business Record Service is ok)
	 * @public
	 * @returns {Boolean}
	 * 
	 * @memberOf sap.collaboration.components.socialtimeline.validation.InputValidator
	 */
	areBackendFeaturesEnabled: function(){
		return this._bBackendFeaturesEnabled;
	},
	/**
	 * Returns true is the Business Object Map is valid.
	 * 
	 * Note: Validating the return statement for the function customActionCallback is done when the function gets executed in the method
	 * TimelineDataHandler._mapTimelineEntriesToTimelineItems. Here we validate whether the customActionCallback is a function.
	 * @public
	 * @returns {Boolean}
	 * 
	 * @memberOf sap.collaboration.components.socialtimeline.validation.InputValidator
	 */
	isBusinessObjectMapValid: function(oBusinessObjectMap){
		var isValid = true;
		if(typeof(oBusinessObjectMap) !== 'object'){
			this._oLogger.error("The argument passed to the function 'setBusinessObjectMap' is of type " 
					+ typeof(oBusinessObjectMap) + ", expected type is object.");
			isValid = false;
		}
		else if(!oBusinessObjectMap.collection || !oBusinessObjectMap.applicationContext || !oBusinessObjectMap.servicePath){
			this._oLogger.error("The object passed to the method setBusinessObjectMap has property 'collection', 'applicationContext', or 'servicePath' as undefined.");
			isValid = false;
		}
		else if(typeof(oBusinessObjectMap.collection) !== 'string' || typeof(oBusinessObjectMap.applicationContext) !== 'string' || typeof(oBusinessObjectMap.servicePath) !== 'string'){
			this._oLogger.error("The property 'collection', 'applicationContext', or 'servicePath' in the object passed to the method setBusinessObjectMap is not a string.");
			isValid = false;
		}
		else if(oBusinessObjectMap.customActionCallback && typeof(oBusinessObjectMap.customActionCallback) !== 'function'){
			this._oLogger.error("The type defined for the property 'customActionCallback' is " 
					+ typeof(oBusinessObjectMap.customActionCallback) + ", expected type is function.");
			isValid = false;
		}
		return isValid;
	},
	
	/**
	 * Returns true if business object is valid
	 * @public
	 * @returns {Boolean}
	 * 
	 * @memberOf sap.collaboration.components.socialtimeline.validation.InputValidator
	 */
	isBusinessObjectValid: function(oBusinessObject){
		var isValid = true;
		
		if(!oBusinessObject.key){
			this._oLogger.error("The key in the object passed to the function 'setBusinessObject' is undefined.");
			isValid = false;
		}
		else if(typeof(oBusinessObject.key) !== 'string'){
			this._oLogger.error("The key in the object passed to the function 'setBusinessObject' is not of type string.");
			isValid = false;
		}
		if(!oBusinessObject.name){
			this._oLogger.error("The name in the object passed to the function 'setBusinessObject' is undefined.");
			isValid = false;
		}
		else if(typeof(oBusinessObject.name) !== 'string'){
			this._oLogger.error("The name in the object passed to the function 'setBusinessObject' is not of type string.");
			isValid = false;
		}
		return isValid;
	},
	/**
	 * Create the timeline terms utility and service data handler AND 
	 * at the same time checks if the backend service is compatible with the Social Timeline.
	 * The constructor of timeline terms utility throws an exception if the backend service is not compatible with the Social Timeline.
	 * @public
	 * @param {object} oServiceModel - Business object service model
	 * @return {object} The timeline terms utility class
	 * @memberOf sap.collaboration.components.socialtimeline.validation.InputValidator
	 */
	createTermsUtilityForBackend: function(oServiceModel) {
		var oTimelineTermsUtility;
		try {
			oTimelineTermsUtility = new sap.collaboration.components.socialtimeline.annotations.
					TimelineTermsUtility(oServiceModel.getServiceMetadata(), oServiceModel.getServiceAnnotations());
			this._bBackendFeaturesEnabled = true;
		}
		catch(oError) {
			oTimelineTermsUtility = undefined;
			this._bBackendFeaturesEnabled = false;
			this._oLogger.error("The Business Object Service is not configured properly.");
			this._oSocialTimeline._oCommonUtil.displayError();
		}
		return oTimelineTermsUtility;
	},
	/**
	 * Validates the enableSocial flag to see if Social Features are ok 
	 * @public
	 * @return {boolean} valid = true 
	 * @memberOf sap.collaboration.components.socialtimeline.validation.InputValidator
	 */
	validateEnableSocial: function(){
		
		if (this._oSocialTimeline.getEnableSocial() === true) {
			return this._bSocialFeaturesEnabled = this._checkJamConfiguration();
		}
		else {
			return this._bSocialFeaturesEnabled = false;
		}
	},
	/**
	 * Validates the customFilter
	 * @public
	 * @return {boolean} valid = true 
	 * @memberOf sap.collaboration.components.socialtimeline.validation.InputValidator
	 */
	validateCustomFilter: function(){
		var aCustomFilter = this._oSocialTimeline.getCustomFilter();
		this._bCustomFilterValid = true;
		if (!jQuery.isEmptyObject(aCustomFilter)) {
			if (!jQuery.isArray(aCustomFilter)) {
				this._oLogger.error("The type defined for the property 'customFilter' is " + typeof(aCustomFilter) + ", expected type is array.");
				this._bCustomFilterValid = false;
				// DO NOT REMOVE - decision pending on whether we should destroy component or not
				//this.setCustomFilter([]);
			}
			else {
				for (var i=0; i<aCustomFilter.length; i++) {
					if (!aCustomFilter[i].value || !aCustomFilter[i].text 
							|| typeof(aCustomFilter[i].value) !== "string" || typeof(aCustomFilter[i].text) !== "string") {
						this._oLogger.error("The type defined for the property 'text' or 'value' for the filter " + JSON.stringify(aCustomFilter[i]) + " is undefined or not of type 'string'.");
						this._bCustomFilterValid = false;
						// DO NOT REMOVE - decision pending on whether we should destroy component or not
						//this._oLogger.error("The value or text for the filter " + JSON.stringify(aCustomFilter[i]) + " is not defined or not a string. It has been removed from the filter list.");
						//aCustomFilter.splice(i, 1);
						//i--;
					}
				}
			}
		}
		return this._bCustomFilterValid;
	},

	/**
	 * Check Jam Configuration
	 * This method is responsible to check Jam configuration status
	 * if status is false, all social features of the timeline should be hidden
	 * @private
	 * @memberOf sap.collaboration.components.socialtimeline.validation.InputValidator
	 */
	_checkJamConfiguration : function() {
		var bStatusOk = true;
		var that = this;
		var fSuccess = function(bConfigurationStatus) {
			if (bConfigurationStatus === false) {
				bStatusOk = false;
			}
		};
		var fError = function(sError) {
			that._oSocialTimeline._oCommonUtil.displayError();
		};
		this._oSocialTimeline._oSMIntegrationDataHandler.getJamConfigurationStatus(fSuccess, fError);
		
		return bStatusOk;
	},

});
}; // end of sap/collaboration/components/socialtimeline/validation/InputValidator.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.CommonUtil') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*************************************************************
* CommonUtil helper class
*
* Common utilities functions
**************************************************************/

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained



jQuery.sap.declare("sap.collaboration.components.utils.CommonUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.CommonUtil",{
	
	constructor: function() {	
		this.MessageQueueUtil = new sap.collaboration.components.utils.MessageQueueUtil(); 
	},
	
	/**
	 * Gets language bundle
	 * @private
	 */
	getLanguageBundle: function() {
		if (!this.oLangBundle){
			jQuery.sap.require("jquery.sap.resources");
			var sLocale = sap.ui.getCore().getConfiguration().getLanguage();
			this.oLangBundle = jQuery.sap.resources({
				url : jQuery.sap.getModulePath("sap.collaboration.components") + "/resources/i18n/messagebundle.properties", 
				locale: sLocale
			});
		}
		return this.oLangBundle;
	},
	
	/**
	 * Displays a MessageBox with an error message
	 * @param {oError} object The error object
	 * @private
	 */
	displayError : function(sErrorMessageMessage) {
		var self = this;
		var sMessage = "";
		var oOptions = {
				icon: sap.m.MessageBox.Icon.ERROR,
				title: self.getLanguageBundle().getText("SYSTEM_ERROR_MESSAGEBOX_TITLE")
		};
		
		if(!sErrorMessageMessage || sErrorMessageMessage === ""){
			sMessage = self.getLanguageBundle().getText("SYSTEM_ERROR_MESSAGEBOX_GENERAL_TEXT");
		}
		else{
			sMessage = sErrorMessageMessage;
		}
		
		this.MessageQueueUtil.displayMessage(sMessage, oOptions, "MBox");
	},
	
	/**
	 * Creates a Message Toast
	 * @private
	 */
	showMessage : function(sMessage, oOptions) {
		this.MessageQueueUtil.displayMessage(sMessage, oOptions, "MToast");
	},
	/**
	 * Test if the given date is a valid date object. If the date is invalid an error message is logged.
	 * @param {Date} The date to be validated.
	 * @return {boolean} True if the object is a date, false otherwise
	 * @public
	 */
	isValidDate : function(oDate) {
	    if (Object.prototype.toString.call(oDate) !== "[object Date]" || isNaN(oDate.getTime())) {
	        jQuery.sap.log.error("DateUtils invalid date=" + oDate);
	        return false;
	    }
	    return true;
	},
	
	/**
	 * A type checker for the string type.
	 * @param {object} o object whose type is to be verified as a string
	 * @return {boolean} true if the input is a string and false otherwise
	 */
	isString : function(o) {
		return Object.prototype.toString.call(o) === "[object String]";
	},

	/**
	 * A type checker for the object type.
	 * @param {object} o object whose type is to be verified as an object
	 * @return {boolean} true if the input is an object and false otherwise
	 */
	isObject : function(o) {
		return Object.prototype.toString.call(o) === "[object Object]";
	},

	/**
	 * A type checker for the function type.
	 * @param {object} o object whose type is to be verified as an function
	 * @return {boolean} true if the input is an function and false otherwise
	 */
	isFunction : function(o) {
		return Object.prototype.toString.call(o) === "[object Function]";
	},

	/**
	 * A type checker for arrays of string.
	 * @param  {object}  o object whose type is to be verified as an array of strings
	 * @return {boolean} true if the input is an array of strings and false otherwise
	 */
	isArrayOfStrings : function(o) {
		var i;
		if (Array.isArray(o)) {
			for (i in o) {
				if (!this.isString(o[i])) {
					return false;
				}
			}
			return true;
		}
		else {
			return false;
		}
	},

	/**
	 * Returns icon based on mime type
	 * @param {oError} object The error object
	 * @private
	 */
	getIconFromMimeType : function(sVal) {

	    var sIcon = "";
	    if (!sVal) {
	        return "sap-icon://document";
	    }
	    if (sVal.indexOf('image') === 0) {
	        sIcon = "sap-icon://attachment-photo";
	    } else if (sVal.indexOf('video') === 0) {
	        sIcon = "sap-icon://attachment-video";
	    } else if (sVal.indexOf('text') === 0) {
	        sIcon = "sap-icon://attachment-text-file";
	    } else if (sVal.indexOf('audio') === 0) {
	        sIcon = "sap-icon://attachment-audio";
	    } else if (sVal.indexOf('audio') === 0) {
	        sIcon = "sap-icon://attachment-audio";
	    } else if (sVal.indexOf('application') === 0) {

	        switch (sVal) {
	            case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
	            case 'application/vnd.ms-powerpoint':
	            case 'application/vnd.openxmlformats-officedocument.presentationml.template':
	                sIcon =  "sap-icon://ppt-attachment";
	                break;
	            case 'application/msword':
	            case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
	            case 'application/vnd.openxmlformats-officedocument.wordprocessingml.template':
	                sIcon =  "sap-icon://doc-attachment";
	                break;
	            case 'application/vnd.ms-excel':
	            case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
	            case 'application/vnd.openxmlformats-officedocument.spreadsheetml.template':
	                sIcon = "sap-icon://excel-attachment";
	                break;
	            case 'application/pdf':
	                sIcon = "sap-icon://pdf-attachment";
	                break;
	            case 'application/xhtml+xml':
	                sIcon = "sap-icon://attachment-html";
	                break;
	            case 'application/zip':
	            case 'application/gzip':
	                sIcon = "sap-icon://attachment-zip-file";
	                break;
	            default:
	                sIcon = "sap-icon://document";
	        }
	    } else {
	        sIcon = "sap-icon://document";
	    }
	    return sIcon;
	},
	
	/**
	 * Check if 2 arrays of objects are equal 
	 * @public
	 */	
	areArraysEqual : function(arrayA, arrayB){
		var objectsAreSame = function(x, y) {
		   var objectsAreSame = true;
		   for(var propertyName in x) {
		      if(x[propertyName] !== y[propertyName]) {
		         objectsAreSame = false;
		         break;
		      }
		   }
		   return objectsAreSame;
		};	
		
		if(arrayA.length !== arrayB.length){
			return false;
		}
		for(var i=0; i<arrayA.length; i++){
			if( !objectsAreSame(arrayA[i], arrayB[i]) ){
				return false;
			}
		}
		return true;
	},
	
	/**
	 * Convert a base64 string representation of a File into a Blob
	 * @param {string} b64Data - base64 string representation of the data
	 * @param {string} contentType - content type of file
	 * @param {string} sliceSize - slice size of files
	 * @return {Blob} Blob object 
	 * @public
	 */
	b64toBlob : function (b64Data, contentType, sliceSize) {
	    contentType = contentType || '';
	    sliceSize = sliceSize || 512;
	    
	    var byteCharacters = window.atob(b64Data);
	    var byteArrays = [];
	    
	    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
	        var slice = byteCharacters.slice(offset, offset + sliceSize);
	        
	        var byteNumbers = new Array(slice.length);
	        for (var i = 0; i < slice.length; i++) {
	            byteNumbers[i] = slice.charCodeAt(i);
	        }
	        
	        var byteArray = new window.Uint8Array(byteNumbers);
	        
	        byteArrays.push(byteArray);
	    }
	    
	    var blob = new window.Blob(byteArrays, {type: contentType});
	    return blob;
	},
	
	/**
	 * Return the results from a OData call
	 * @param {map} The data returned from the OData call
	 * @return {map|array} An array or map of the results of the OData call
	 * @public
	 */
	getODataResult: function (data) {
		// Refer to Incident #1670143241 for an example on why different results might be returned from an OData call
		return data.results ? data.results : data;
	},
});
}; // end of sap/collaboration/components/utils/CommonUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.DateUtil') ) {
/**
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.collaboration.components.utils.DateUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/utils/DateUtil",['jquery.sap.global','sap/ui/base/Object', "sap/collaboration/components/utils/LanguageBundle"], 
	function(jQuery, Object, LanguageBundle) {
	"use strict";
	/**
	 * Date Utility Class for Collaboration
	 *
	 * @class
	 * Language bundle for Collaboration 
	 * @extends sap.ui.base.Object
	 *
	 * @author SAP SE
	 * @version ${version}
	 *
	 * @constructor
	 * @public
	 */
	var DateUtil = Object.extend("sap.collaboration.components.util.DateUtil", {
		constructor: function(){
			this._oLanguageBundle = new LanguageBundle();
		},
		/**
		 * Format date object to string
		 * @param {Date} The date to be formatted
		 * @return {string} Formated date string 
		 * @memberOf sap.collaboration.components.utils.DateUtil
		 * @public
		 */
		formatDateToString: function(oDate){
	        var oDateFormatter = sap.ui.core.format.DateFormat.getDateInstance({style:"short", relative:true}, sap.ui.getCore().getConfiguration().getLocale());
	        var oTimeFormatter = sap.ui.core.format.DateFormat.getTimeInstance({style:"short"}, sap.ui.getCore().getConfiguration().getLocale());
	        var sDate = oDateFormatter.format(oDate) + " " + this._oLanguageBundle.getText("ST_GROUP_SELECT_AT") + " " + oTimeFormatter.format(oDate);

	        var pattern = /[A-Za-z]/; //check if the first character is lowercase, if so, then uppercase it
	        if(sDate.charAt(0).match(pattern)){
	              sDate = sDate.charAt(0).toUpperCase() + sDate.slice(1);
	        }
	        return sDate;
		},
	});
	
	return DateUtil;
},/* bExport= */ true );


}; // end of sap/collaboration/components/utils/DateUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.OdataUtil') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*************************************************************
* OdataUtil helper class
*
* Is responsible for the integration and communication with the
* Backend OData Server
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.utils.OdataUtil");


sap.ui.base.Object.extend("sap.collaboration.components.utils.OdataUtil",{
	
	/**
	 * Constants for the OdataUtil Class
	 */
	OdataUtilConstants: {
		HttpStatusCode: {
			success: 200,
			created: 201
		},
		
		EndPoint: {
			AssignedGroups: "AssignedGroups",
			BusinessObjects: "BusinessObjects",
			ContentItems: "ContentItems",
			PostContentItem: "PostContentItem",
			Feed: "Feed",
			Folders: "Folders",
			GetCollaborationHostUrl: "GetCollaborationHostURL",
			MapInternalBOToExternalBO: "MapInternalBOToExternalBO",
			GetExternalODataURL: "GetExternalODataURL",
			GetSingleUseToken: "GetSingleUseToken",
			Groups: "Groups",
			GroupsCount: "Groups/$count",			
			GetNotificationUnreadCount: "GetNoticeUnreadCount",
			Notifications: "Notices",
			FeaturedExternalObjects: "FeaturedExternalObjects",
			GroupsAsFeatured: "GroupsAsFeatured",
			ExternalObjects: "ExternalObjects",
			Activities: "Activities",
			ExternalObjects_FindByExidAndObjectType : "ExternalObjects_FindByExidAndObjectType"
		},
		
		HttpMethod: {
			GET: "GET",
			POST: "POST"
		},
		ResponseType: {
			blob: "blob",
			arraybuffer: "arraybuffer"
		}
		
	},
	constructor: function(){
		this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		this.bError = false;
	},
	/**
	 * Gets the JAM URL using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {string} sJamUrl A string containing the URL of the Collaboration Tool (Jam) 
	 * @private
	 */
	getJamUrl:function(oOdataModel, oPromise, bAsync) {
	   var sErrorCode = "";
	   var sJamURL = "";
	   
	   var fSuccessFn = function(oData,response){
		   if(oPromise){
			   oPromise.resolve(oData.GetCollaborationHostURL.URL); 
		   }
		   else {
			   sJamURL = oData.GetCollaborationHostURL.URL;
		   }
	   	};		   
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   		if(oPromise){
	   			oPromise.reject(sErrorCode);
	   		}
	   	};
	   	oOdataModel.read("/" + this.OdataUtilConstants.EndPoint.GetCollaborationHostUrl, {
	   		success: fSuccessFn,
	   		error: fErrorFn,
	   		async: bAsync
	   	});
	   	
	   	// if no oPromise is passed, return sJamURL
	   	if(!oPromise){
	   		return sJamURL;
	   	}
	},
	
	/**
	 * Batch Operation to get the JAM URL from the back-end
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createJamUrlBatchOperation: function(oOdataModel){
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.GetCollaborationHostUrl,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createJamUrlBatchOperation()");
			throw oError;
		}		
		
		return oBatchOperation;
	},
	
	/**
	 * Gets the JAM token using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {string} sJamToken The single use token from SAP Jam
	 * @private
	 */
	getJamToken:function(oOdataModel) {
	   var sJamToken = "";
	   var sErrorCode = "";
	   var fSuccessFn = function(oData,response){
			sJamToken = oData.GetSingleUseToken.Id;
	   	};		   
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	oOdataModel.read("/" + this.OdataUtilConstants.EndPoint.GetSingleUseToken, null, null, false, fSuccessFn, fErrorFn);
	   	
		if (sErrorCode){
			throw new Error(sErrorCode);
		}
		
		return sJamToken;
	   	
	},
	
	/**
	 * Batch Operation to get the Single Use Token from SAP Jam
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createJamTokenBatchOperation: function(oOdataModel){
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{			
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.GetSingleUseToken,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createJamTokenBatchOperation()");
			throw oError;
		}				
				
		return oBatchOperation;
	},
	
	/**
	 * Gets the JAM groups using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string}	sODataEndPoint The OData end point
	 * @private
	 */
	getGroupsData:function(oOdataModel, sODataEndPoint) {		
		var aGroupsData;
		var sErrorCode = "";
		var fSuccessFn = function(oData,response){
		   aGroupsData = this.oCommonUtil.getODataResult(oData);
	   	}.bind(this);
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	oOdataModel.read(sODataEndPoint, null, null, false, fSuccessFn, fErrorFn);
	   	
	   	if (sErrorCode){
	   		throw new Error(sErrorCode);
	   	}
	   	
	   	return aGroupsData;
	},

	/**
	 * Batch Operation to get the Groups Data
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createGetGroupsDataBatchOperation : function(oOdataModel) {
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.Groups,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createGetGroupsDataBatchOperation()");
			throw oError;
		}
				
		return oBatchOperation;
	},
	
	/**
	 * Batch Operation to get the Groups Count
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createGetGroupsCountBatchOperation : function(oOdataModel) {
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.GroupsCount,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createGetGroupsCountDataBatchOperation()");
			throw oError;
		}
				
		return oBatchOperation;
	},
	
	/**
	 * Batch Operation to get the Groups linked to a specific BO
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createGetGroupsLinkedToBOBatchOperation : function(oOdataModel,oExternalObject) {
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.ExternalObjects + "(ApplicationContext='" + jQuery.sap.encodeURL(oExternalObject.appContext.replace(/'/g, "''")) + "',"
							 + "OdataServicePath='" + jQuery.sap.encodeURL(oExternalObject.odataServicePath.replace(/'/g, "''")) + "',"
							 + "OdataCollection='" + jQuery.sap.encodeURL(oExternalObject.collection.replace(/'/g, "''")) + "',"
							 + "OdataKey='" + jQuery.sap.encodeURL(oExternalObject.key.replace(/'/g, "''")) + "')/" + this.OdataUtilConstants.EndPoint.GroupsAsFeatured;
				
		oBatchOperation = oOdataModel.createBatchOperation(
				sOdataEndPoint,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
						
		return oBatchOperation;
	},
		
	/**
	 * Batch Operation to get the Groups assigned to a Business Object from the SMI (CLB) mapping table
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {string} a string containing the Business Object ID
	 * @return {request} a request object for this end point
	 * @private
	 */
	createGetObjectGroupsBatchOperation : function(oOdataModel, sBusinessObjectId) {
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.BusinessObjects + "('" + jQuery.sap.encodeURL(sBusinessObjectId) + "')/" + this.OdataUtilConstants.EndPoint.AssignedGroups,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createGetObjectGroupsBatchOperation()");
			throw oError;
		}
				
		return oBatchOperation;
	},
	
	/**
	 * Helper function to extract the JAM groups' IDs
	 * @param {array} aGroupData An array of JAM Groups 
	 * @private
	 */
	getGroupIds:function(aGroupData) {
		var sGroupsIds="";
		for (var i = 0; i < aGroupData.length; i++){
			if (i == 0){
				sGroupsIds += aGroupData[i].Id;
			} else{
				sGroupsIds +=  "," + aGroupData[i].Id;
			}
		}
		return sGroupsIds;
	},
	
	/**
	 * Creates JAM groups Feed using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string}	sGroupId Jam Group Id
	 * @param {string}	sFeedContent The content of the Feed
	 * @private
	 */
	createGroupFeed: function(oOdataModel, sGroupId, sFeedContent) {
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.Groups + "(" + jQuery.sap.encodeURL(sGroupId) + ")/" + this.OdataUtilConstants.EndPoint.Feed;
		var oPayload = {
				"Text": sFeedContent
		};
		var bStatus = undefined;
		var fSuccess = function(){
			bStatus = true;
		};
		var fError = function(oError){
			jQuery.sap.log.error(JSON.stringify(oError.response.body));
			bStatus = false;
		};
		
		oOdataModel.create(sOdataEndPoint, oPayload, null, fSuccess, fError);
		
		return bStatus;
	},
	
	/**
	 * Main method to execute a batch requests for the end points supported by this utilities
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {array} aRequests An array containing the batch of requests
	 * @param {function} fnParseBatchResults A call back function to parse the results returned from the batch call
	 * @private
	 */
	executeODataBatchRequest: function(oOdataModel, aRequests, fnParseBatchResults, bAsync, fnErrorCallBack){
		var self = this;
		var aResults;
		
		var fnSuccess = function(oData){
			aResults = self.parseBatchResponse(oData.__batchResponses);
			fnParseBatchResults(aResults);
		};
		
		var fnError = function(oError){
			if(oError.response){
				jQuery.sap.log.error(JSON.stringify(oError.response.body));
			}
			else{
				jQuery.sap.log.error(JSON.stringify(oError.message));
			}
			fnErrorCallBack(oError);
		};
		
		
		// Either create a Read or Change batch request
		var aReadReqs = [];
		var aChangeReqs = [];
		for(var i in aRequests){
			if(aRequests[i].method == this.OdataUtilConstants.HttpMethod.GET){
				aReadReqs.push(aRequests[i]);	
			}else if (aRequests[i].method == this.OdataUtilConstants.HttpMethod.POST){
				aChangeReqs.push(aRequests[i]);
			}
		}
		
		if (aReadReqs.length > 0){
			oOdataModel.addBatchReadOperations(aReadReqs);
		}
		//if (aChangeReqs.length > 0)
			//oOdataModel.addBatchChangeOperations(aChangeReqs);
		for(var i=0; i<aChangeReqs.length; i++){
			oOdataModel.addBatchChangeOperations([aChangeReqs[i]]);
		}
		
		if (bAsync === true){
			oOdataModel.submitBatch(fnSuccess, fnError, true);
		}
		else{
			oOdataModel.submitBatch(fnSuccess, fnError, false);
		}
	},
	
	/**
	 * Parse the response returned from a batch call
	 * @ param {array} aBatchResponse An array containing the responses from a batch call.
	 * @ return {JSON Map} aResults A JSON map of key, value pairs containg the results from each response within the batch.  
	 */
	parseBatchResponse: function(aBatchResponse){
		var self = this;
		var aResults = [];
	
   		jQuery.sap.each(aBatchResponse, function(i, oResponse){
			if(oResponse.statusCode && oResponse.statusCode.match(self.OdataUtilConstants.HttpStatusCode.success))	{
				aResults.push(oResponse.data);
			}
			else if (oResponse.__changeResponses){
				for(var i=0; i<oResponse.__changeResponses.length; i++){
					if(oResponse.__changeResponses[i].statusCode && (oResponse.__changeResponses[i].statusCode.match(self.OdataUtilConstants.HttpStatusCode.created ) || oResponse.__changeResponses[i].statusCode.match(self.OdataUtilConstants.HttpStatusCode.success ))){
						aResults.push(oResponse.__changeResponses[i].data);
					}
					else{
						aResults.push({error: oResponse.__changeResponses[i].response.body});
						jQuery.sap.log.error(JSON.stringify(oResponse.__changeResponses[i].response.body), "sap.collaboration.components.utils.OdataUtil.parseBatchResponse()");
					}
				}
			}				
			else{
				aResults.push({error: oResponse.response.body});
				jQuery.sap.log.error(JSON.stringify(oResponse.response.body), "sap.collaboration.components.utils.OdataUtil.parseBatchResponse()");
			}
   		});
	   		   		
   		return aResults;
	},


	
	/**
	 * Creates a single batch operation to map an external URL
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string} sRelativePath A string containing the relative path to be mapped
	 * @return {request} oBatchOperation An object containing the request to be executed in a batch
	 */
	createExternalOdataUrlBatchOperation: function(oOdataModel, sRelativePath){
		// Batch operations do not encode the URL parameters, it needs to be done before creating the batch call.
		var aParameters = null;
		var oDataPayload = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.GetExternalODataURL + "/?RelativePath='" + jQuery.sap.encodeURL(sRelativePath) + "'",
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createExternalOdataUrlBatchOperation()");
			throw oError;
		}
				
		return oBatchOperation;
	},
	
	/**
	 * Calls the endpoint to map an external URL
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string} sRelativePath A string containing the relative path to be mapped
	 * @return {string} sExternalOdataUrl A string containing the external URL that was mapped
	 */
	getExternalOdataUrl: function(oOdataModel, sRelativePath){
		var sExternalOdataUrl = "";
		var sErrorCode = "";
		//Passing the URL parameters in a map so the encoding is done in SAPUI5 ODataModel class 
		var aUrlParameters = {};
		aUrlParameters["RelativePath"] = "'" + sRelativePath + "'";
		
		var fSuccessFn = function(oData,response){
			sExternalOdataUrl = oData.GetExternalODataURL.URL;
	   	};
	   	
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	
	   	oOdataModel.read("/" + this.OdataUtilConstants.EndPoint.GetExternalODataURL, null, aUrlParameters, false, fSuccessFn, fErrorFn);
	   	
	   	if (sErrorCode){
	   		throw new Error(sErrorCode);
	   	}
	   	
		return sExternalOdataUrl;
	},
	
	/**
	 * Batch Operation to get the count of unread notifications
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createNotificationUnreadCountBatchOperation : function(oOdataModel) {
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{			
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.GetNotificationUnreadCount,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createNotificationUnreadCountBatchOperation()");
			throw oError;
		}
		
		return oBatchOperation;
	},
	
	/**
	 * Batch Operation to get the Notifications
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createNotificationBatchOperation : function(oOdataModel, iNumberOfNotifications) {
		var oDataPayload = null;
		var aParameters = null;//["$top=20"];
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.Notifications + "?$top=" + jQuery.sap.encodeURL(iNumberOfNotifications.toString()),
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createNotificationBatchOperation()");
			throw oError;
		}
		
		return oBatchOperation;
	},
	
	/**
	 * Batch Operation to create a Group Feed Entry
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string}	sGroupId Jam Group Id
	 * @param {string}	sFeedContent The content of the Feed
	 * @return {request} a request object for this end point
	 * @private
	 */
	createGroupFeedBatchOperation : function(oOdataModel, sGroupId, oFeedContent) {
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.Groups + "(" + jQuery.sap.encodeURL(sGroupId) + ")/" + this.OdataUtilConstants.EndPoint.Feed;
		var oDataPayload = {
				"Text": oFeedContent.note,
				"UiUrl": oFeedContent.uiUrl
		};
		var aParameters = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				sOdataEndPoint,
				this.OdataUtilConstants.HttpMethod.POST,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createGroupFeedBatchOperation()");
			throw oError;
		}
		
		return oBatchOperation;
	},
	
	/**
	 * Batch Operation to upload file
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {object}	oAttachment File object to be uploaded
	 * @param {string}	sGroupId Jam Group Id
	 * @param {object}	sFolderId Jam Folder Id
	 * @private
	 */
	createUploadFileBatchOperation: function(oOdataModel, oAttachment, sGroupId, sFolderId){
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		
		
		oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.PostContentItem 	+ "/?name='" + jQuery.sap.encodeURL(oAttachment.name) + "'&"
																		+ "groupId='"  + jQuery.sap.encodeURL(sGroupId) + "'&"
																		+ "mimeType='" + jQuery.sap.encodeURL(oAttachment.mimeType) + "'&"
																		+ "folderId='" + jQuery.sap.encodeURL(sFolderId) + "'&"
																		+ "url='" + jQuery.sap.encodeURL(oAttachment.url) + "'",
																		
				this.OdataUtilConstants.HttpMethod.POST,
				oDataPayload, 
				aParameters
		);
		
		return oBatchOperation;
	},
	
	/**
	 * Post a request to upload a file
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {sap.collaboration.components.fiori.sharing.attachment.Attachment} oAttachment - File to be uploaded
	 * @param {string} sGroupId - Group Id to which the file will be posted to
	 * @param {string} sFolderId - Folder id to which the file will be posted to
	 * The sFolderId parameter will take priority over the sGroupId. This means, if both ids are specified, then the attachment will be posted to the folder.
	 * @param {function} fnSuccess - Callback function when upload is successful
	 * @param {function} fnError - Callback function when there is an error
	 * @private
	 */
	uploadFile : function(oOdataModel, oAttachment, sGroupId, sFolderId, fSuccess, fError, bAsyn ){
		// Determine to either the group's root folder, or a specific folder
		var sOdataEndPoint = this.OdataUtilConstants.EndPoint.PostContentItem;
		
		var fUploadSuccess = function() {
			fSuccess();
		};
		var fUploadError = function () {
			jQuery.sap.log.error(oAttachment.name + " was not uploaded", "",  "sap.collaboration.components.utils.OdataUtil.uploadFile()");
			fError();
		};
		
		oOdataModel.callFunction(sOdataEndPoint, 
								 'POST', 
								 {
									name : oAttachment.name,
									groupId : sGroupId,
									mimeType : oAttachment.mimeType,
									url : oAttachment.url,
									folderId :sFolderId
								 },
								 null,
								 fUploadSuccess,
								 fUploadError,
								 bAsyn
		);
				

	},
	
	/**
	 * Gets the sub-folders for a Jam Group or Folder 
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel -	The OData model object
	 * @param {string} sGroupId - group id
	 * @param {string} sFolderId - folder id
	 * @return {object} oFolder - object containing an array of folder entities returned from Jam and the total count of subfolders { folders: [], count: i }
	 * @private
	 */
	getSubFolders : function(oOdataModel, sGroupId, sFolderId, skip, top ){
	
		var sODataEndPoint;
		if(!sFolderId && sGroupId) {
			sODataEndPoint = "/" + this.OdataUtilConstants.EndPoint.Groups + "('" + jQuery.sap.encodeURL(sGroupId) + "')/" + this.OdataUtilConstants.EndPoint.Folders;
		}
		else{
			sODataEndPoint = "/" + this.OdataUtilConstants.EndPoint.Folders + "(Id='" + jQuery.sap.encodeURL(sFolderId) + "',FolderType='Folder')/" + this.OdataUtilConstants.EndPoint.Folders;
		}
		sODataEndPoint = sODataEndPoint	+'?$skip=' + skip + '&$top='+top + '&$inlinecount=allpages';
		
		var aFolders = [];
		var iCount = 0;
		var sErrorCode = "";
		var fSuccessFn = function(oData,response){
			if(oData) {
				aFolders = this.oCommonUtil.getODataResult(oData);
				iCount = parseInt(JSON.parse(response.body).d.__count);
			}
	   	}.bind(this);
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	oOdataModel.read(sODataEndPoint, null, null, false, fSuccessFn, fErrorFn);
	   	
	   	if (sErrorCode){
	   		throw new Error(sErrorCode);
	   	}
		
	   	return { folders : aFolders,
	   			 count : iCount };
	   	
	},
	
	/**
	 * Batch Operation share a Featured External Object in the Group
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {object}	oExternalObject Featured External Object (see endpoint for more information about the object's properties)
	 * @param {string}	sGroupId Jam Group Id
	 * @return {request} a request object for this end point
	 * @private
	 * @private
	 */
	createShareFeaturedObjectBatchOperation: function (oOdataModel, oExternalObject, sGroupId){
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.Groups + "(" + jQuery.sap.encodeURL(sGroupId) + ")/" + this.OdataUtilConstants.EndPoint.FeaturedExternalObjects;
		var oDataPayload = {
				"ApplicationContext": oExternalObject.appContext,
				"OdataServicePath": oExternalObject.odataServicePath,
				"OdataCollection": oExternalObject.collection,
				"OdataKey": oExternalObject.key,
				"Name": oExternalObject.name,
				"Summary": oExternalObject.summary,
				"UiUrl": oExternalObject.uiUrl,
				"Comment": oExternalObject.note
		};
		var aParameters = null;
		var oBatchOperation;
		
		oBatchOperation = oOdataModel.createBatchOperation(
			sOdataEndPoint,
			this.OdataUtilConstants.HttpMethod.POST,
			oDataPayload, 
			aParameters
		);
		
		return oBatchOperation;
	},
	
	/**
	 * Get the Mapping for the External Object
	 * @param oOdataModel
	 * @param oInternalObject
	 * @param oPromise
	 * @public
	 */
	getExternalObjectMapping: function(oOdataModel, oInternalObject, oPromise){
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.MapInternalBOToExternalBO;
		//Passing the URL parameters in a map so the encoding is done in SAPUI5 ODataModel class 
		var aUrlParameters = {};
		aUrlParameters["ApplicationContext"] = "'" + oInternalObject.appContext + "'";
		aUrlParameters["ODataCollection"] = "'" + oInternalObject.collection + "'";
		aUrlParameters["ODataKeyPredicate"] = "'" + oInternalObject.key + "'";
		aUrlParameters["ODataServicePath"] = "'" + oInternalObject.odataServicePath + "'";
		var sErrorCode = "";
		
		var fSuccessFn = function(oData,response){
			oPromise.resolve(oData.MapInternalBOToExternalBO);
	   	};
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   		oPromise.reject(sErrorCode);
	   	};
	   	
	   	oOdataModel.read(sOdataEndPoint, null, aUrlParameters, true, fSuccessFn, fErrorFn);
		
	},
	
	/**
	 * Get Jam External Object
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string}	sExObjId	Object External ID (External ID in Jam)
	 * @param {string}	sExObjType	Object Id in Jam
	 * @private
	 */
	_GetJamExternalObject : function(oOdataModel, sExObjId, sExObjType, fSuccessCallBack, fErrorCallBack) {
		
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.ExternalObjects_FindByExidAndObjectType
								 + "/?Exid='" + jQuery.sap.encodeURL(sExObjId) + "'&"
								 + "ObjectType='"  + jQuery.sap.encodeURL(sExObjType);

		var fSuccess = function(){
			fSuccessCallBack();
		};
		var fError = function(oError){
			jQuery.sap.log.error(JSON.stringify(oError.response.body));
			fErrorCallBack();
		};
		
		oOdataModel.read(sOdataEndPoint, null, null, false, fSuccess, fError);
	}
	
});

}; // end of sap/collaboration/components/utils/OdataUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.feed.Mode') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.feed.Mode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Fragment'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/feed/Mode",["sap/ui/base/Object", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/ui/core/Fragment", "sap/collaboration/components/utils/CommonUtil"], function(Object, Filter, FilterOperator, Fragment, CommonUtil) {
	
	var Mode = Object.extend("sap.collaboration.components.feed.Mode", {
		constructor: function(oFeedController) {
			// The questions below may help me in refactoring.
			// Do controls define byId("")
			// Do views have the getController method?
			// Do controllers have a getView method?
			
			// a common utility used to verify input types
			this._oCommonUtil = new CommonUtil();
			
			// The group feed component's controller.
			this._oFeedController = oFeedController;

			// Initialize feed mode models
			this._initializeModels();

			// view properties
			this._oViewDataModel = this._oFeedController.getModel();
			this._oJamModel = this._oFeedController.getModel("jam");
			
			// construct the group selector fragment
			var sGroupSelectorFragmentId = this._getGroupSelectorFragmentId();
			sap.ui.xmlfragment(sGroupSelectorFragmentId, "sap.collaboration.components.feed.fragments.GroupSelector", this);

			// obtain a reference to the responsive popover
			this._oGroupSelectPopover = Fragment.byId(sGroupSelectorFragmentId, "responsivePopover");			
			this._oGroupSelectPopover.setModel(this._oFeedController.getModel("i18n"), "i18n");
			
			// obtain a reference to the list control
			this._oList = Fragment.byId(sGroupSelectorFragmentId, "list");
			this._oList.addStyleClass("RightToLeftParenthesisStyling");
			this._oList.setBusyIndicatorDelay(0);
			
			// construct the custom list item fragment, binding will be done in each mode
			this._oListItemTemplate = sap.ui.xmlfragment("sap.collaboration.components.feed.fragments.CustomListItem", this);
		}
	});
	
	/**
	 * Boolean to store if jam service is available
	 * @static
	 * @private
	 * @type {Boolean}
	 */
	Mode._bJamServiceAvailable = true;

	/**
	 * String to store URL for jam service
	 * @static
	 * @private
	 * @type {String}
	 */
	Mode._sJamServiceUrl = "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData";

	/**
	 * Integer used to store the next index to use in the group
	 * selector fragment id upon construction. This is to avoid
	 * collision of of ids.
	 * @static
	 * @private
	 * @type {Number}
	 */
	Mode._nextGroupSelectorFragmentIdIndex = 0;

	/**
	 * This method is used to make sure the various instances of this class
	 * don't construct group selector fragment having the same id.
	 * @private
	 * @return {string} the id to use when creating a group selector fragment
	 * @memberOf sap.collaboration.components.feed.Mode
	 */
	Mode.prototype._getGroupSelectorFragmentId = function () {
		return this._oFeedController.createId("groupSelectorFragment") + Mode._nextGroupSelectorFragmentIdIndex++;
	};

	/*********************
	 * HTTP GET Requests
	 ********************/
	/**
	 * Get Jam group wall feed entries
	 * @public
	 * @param {string} path the path to get the feed entries
	 * @param [string] skipToken the skip token from the next link
	 * @return {object} a deferred promise object 
	 * @memberOf sap.collaboration.components.feed.Mode
	 */
	Mode.prototype.getFeedEntries = function (path, skipToken) {
		var loadingFeedEntriesPromise = jQuery.Deferred();
		var mParameters = {
				"urlParameters": {
					"$expand": "Creator,TargetObjectReference"
				},
				"success": function(oData, response) {
					loadingFeedEntriesPromise.resolve(oData, response);
				},
				"error": function(oError) {
					loadingFeedEntriesPromise.reject(oError);
				}
			};
		
		if (skipToken) {
			mParameters.urlParameters.$skiptoken = skipToken;
		}
				
		return loadingFeedEntriesPromise.promise(this._oJamModel.read(path, mParameters));
	};

	Mode.prototype.onGroupSearch = function(oEvent) {

		var oFilter = new Filter("Name", FilterOperator.Contains, oEvent.getParameter("newValue"));
		this._oList.getBinding("items").filter([oFilter]);
	};
	
	/*********************
	 * HTTP POST Requests
	 ********************/
	/**
	 * Post comment to Jam
	 * @public
	 * @param {string} content The comment to post in Jam
	 * @return {map} a map containing the path, and a deferred promise object
	 * @memberOf sap.collaboration.components.feed.Mode
	 */
	Mode.prototype.addPost = function (content) {
		var postingCommentPromise = jQuery.Deferred();
		var sPath = this.getAddPostPath();
		var oDataPayload = { "Text" : content };
		var mParameters = {
				"success": function(oData, response) {
					postingCommentPromise.resolve(oData, response);
				},
				"error": function(oError) {
					postingCommentPromise.reject(oError);
				}
		};
		// return the path and payload along with the promise in case the caller wants to make the request again (i.e. CSRF token refresh)
		return {
			"path" : sPath,
			"payload" : oDataPayload,
			"promise" : postingCommentPromise.promise(this._oJamModel.create(sPath, oDataPayload, mParameters))
		};
	};
	
	/**
	 * Get the number of new updates since the latest feed entry 
	 * @return {object} Deferred object for the request
	 * 
	 * @public
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	Mode.prototype.getFeedUpdatesLatestCount = function() {
		var gettingFeedUpdates = jQuery.Deferred();
		// get the first timeline item and get the Id
		var oLatestFeedEntry = this._oFeedController.byId("timeline").getContent()[0];
		var sLatestTopLevelId = oLatestFeedEntry ? oLatestFeedEntry.getModel().getProperty("/TopLevelId") : "";
		var sGroupId = this._oViewDataModel.getProperty("/groupSelected/Id");
		
		var sPath = "/Group_FeedLatestCount";
		var mParameters = {
			"urlParameters": {
				LatestTopLevelId: sLatestTopLevelId,
				Id: sGroupId
			},
			"success": function(oData, response) {
				gettingFeedUpdates.resolve(oData, response);
			},
			"error": function(oError) {
				gettingFeedUpdates.reject(oError);
			}
		};
		
		return gettingFeedUpdates.promise(this._oJamModel.callFunction(sPath, mParameters));
	};
	
	/**
	 * Create and initialized the models for the view
	 * Jam model: OData model for connecting to Jam
	 * @private
	 * @memberOf sap.collaboration.components.feed.Mode
	 */
	Mode.prototype._initializeModels = function() {
		// Jam model
		var oJamModel =  new sap.ui.model.odata.v2.ODataModel(Mode._sJamServiceUrl);
		oJamModel.attachMetadataFailed(this._oFeedController._onMetadataFailed, this._oFeedController);
		oJamModel.attachRequestCompleted(this._oFeedController._onJamRequestCompleted, this._oFeedController);
		oJamModel.attachRequestFailed(this._oFeedController._onJamRequestFailed, this._oFeedController);
		oJamModel.attachRequestSent(this._oFeedController._onJamRequestSent, this._oFeedController);
		oJamModel.attachBatchRequestCompleted(this._oFeedController._onBatchCompleted, this._oFeedController);
		oJamModel.attachBatchRequestFailed(this._oFeedController._onBatchFailed, this._oFeedController);
		oJamModel.attachBatchRequestSent(this._oFeedController._onBatchSent, this._oFeedController);
		this._oFeedController.setJamModel(oJamModel);
	};
	
	/**
	 * Returns the Jam Service Url
	 * @public
	 * @memberOf sap.collaboration.components.feed.Mode
	 */
	Mode.prototype.getJamServiceUrl = function() {
		return Mode._sJamServiceUrl;
	};
	
	/**
	 * Return if the Jam service is available
	 * @public
	 * @memberOf sap.collaboration.components.feed.Mode
	 */
	Mode.prototype.isJamServiceAvailable = function() {
		return Mode._bJamServiceAvailable;
	};

	/**
	 * Sets the flag if the Jam service is available or not
	 * @public
	 * @memberOf sap.collaboration.components.feed.Mode
	 */
	Mode.prototype.setJamServiceAvailable = function(bJamServiceAvailable) {
		Mode._bJamServiceAvailable = bJamServiceAvailable;
	};

	return Mode;
}, /* bExport */ true);

}; // end of sap/collaboration/components/feed/Mode.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.feed.UserMode') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.feed.UserMode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/collaboration/components/feed/UserMode",["./Mode"], function(Mode) {
	
	var UserMode = Mode.extend("sap.collaboration.components.feed.UserMode",{
		constructor: function(oFeedController) {
			// Calls the superclass's constructor. This
			// causes this class to inherit the instance
			// variables list below.
			Mode.apply(this, [oFeedController]);
			
			// Inherited instance variables
			// this._oCommonUtil
			// this._oFeedController
			// this._oListItemTemplate
			// this._oList
			// this._oViewDataModel
			// this._oJamModel
			// this._oSelectPopover
			
			this._oList.setModel(this._oJamModel);
		}
	});
	
	/**
	 * Asks the UserMode object to start.
	 * @public
	 * @memberOf sap.collaboration.components.feed.UserMode
	 */
	UserMode.prototype.start = function() {
		// Prior to binding the path for the list items, since this
		// is the start of a new list of list items being
		// populated, we attach to the list's update finished
		// event to update the view's data model about the
		// selection. The update finished method will then
		// detach itself to make sure it isn't called again.
		this._oList.attachUpdateFinished(this.onGroupSelectorUpdateFinished, this);
		
		// Attach event handler for the List's updateFinished, this handler function simply removes the busy indicator on the list.
		// The reason we can't put it in this.onGroupSelectorUpdateFinished is because after this.onGroupSelectorUpdateFinished is executed, it then detaches itself 
		this._oList.attachUpdateFinished(this.onUpdateFinished, this);
		
		// We must figure out a way to deal with the things that can
		// potentially go wrong after the list sends a request for
		// the groups. Whatever callback functions we register
		// must be unregistered when the request is successful.
		// Also, the registered callback should not have to worry
		// about other parts of the component that also use the
		// list control and/or ODataModel object.
		this._oList.bindItems({
			path: "/Groups",
			template: this._oListItemTemplate
		});
		
		//enable group feed by enabling add post button, group selector and the more button
		this._oFeedController.enableGroupFeed();
	};
	
	/**
	 * Asks the UserMode object to stop.
	 * @public
	 * @memberOf sap.collaboration.components.feed.UserMode
	 */
	UserMode.prototype.stop = function() {
		// detach handler for the list
		this._oList.detachUpdateFinished(this.onUpdateFinished, this);
	};

	UserMode.prototype._updateSelectedGroupInViewDataModel = function(oGroup) {
		this._oViewDataModel.setProperty("/groupSelected", {
			Id : oGroup.Id,
			Name : oGroup.Name,
			WebURL : oGroup.WebURL
		});

		this._oViewDataModel.setProperty("/feedEndpoint", "/Groups('" + oGroup.Id + "')/FeedEntries");
	};
	
	/**
	 * Returns the OData path for Add Post
	 * @public
	 * @return {string} The OData path for Add Post
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	UserMode.prototype.getAddPostPath = function () {
		return "/Groups('" + this._oViewDataModel.getProperty("/groupSelected/Id") + "')/FeedEntries";
	};
	
	/**
	 * Displays  the feed source selector popover next to the specified control.
	 * @param {object} oControl the control next to which to display the feed source selector
	 * @memberOf sap.collaboration.components.feed.UserMode
	 */
	UserMode.prototype.displayFeedSourceSelectorPopover = function(oControl) {
		this._oList.setBusy(true);
		this._oJamModel.refresh(/* bForceUpdate */ true);
		this._oGroupSelectPopover.openBy(oControl);
	};
	
	/**
	 * Event handler for the selector list when an item is selected.
	 * The structure of the model set on the individual list items
	 * must be known, and there must exist a way of mapping the
	 * selected list item.
	 * @param {object} oEvent
	 * @memberOf sap.collaboration.components.feed.UserMode
	 */
	UserMode.prototype.onGroupSelected = function(oEvent) {
		var oGroupSelected = oEvent.getSource().getSelectedItem().getBindingContext().getObject();
		this._updateSelectedGroupInViewDataModel(oGroupSelected);
		this._oGroupSelectPopover.close();
	};
	
	/**
	 * Required method by the Mode abstract method. However, this
	 * mode doesn't need to implement anything for this method.
	 * @memberOf sap.collaboration.components.feed.UserMode
	 */
	UserMode.prototype.onBatchCompleted = function() {};
	
	/**
	 * When the group list is finished updating, then we make the
	 * the currently selected group equal to the first group
	 * in the list.
	 * @memberOf sap.collaboration.components.feed.UserMode
	 */
	UserMode.prototype.onGroupSelectorUpdateFinished = function() {
		var aListItems = this._oList.getItems();
		var oFirstListItem;
		var oFirstGroup;
		if (aListItems.length > 0) {
			oFirstListItem = aListItems[0];
			this._oList.setSelectedItem(oFirstListItem);
			oFirstGroup = oFirstListItem.getBindingContext().getObject();
			this._updateSelectedGroupInViewDataModel(oFirstGroup);
		}
		
		// detach this event handler function since we only want it to run once
		this._oList.detachUpdateFinished(this.onGroupSelectorUpdateFinished, this);
	};
	
	/**
	 * When the group list is finished updating, then we make the
	 * the currently selected group equal to the first group
	 * in the list.
	 * @memberOf sap.collaboration.components.feed.UserMode
	 */
	UserMode.prototype.onUpdateFinished = function() {
		this._oList.setBusy(false);
	};
	
	return UserMode;
}, /* bExport */ true);

}; // end of sap/collaboration/components/feed/UserMode.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.feed.Component') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */





jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.fiori.feed.Component");


/**
* Constructor for the Feed Component.
* @since version 1.16
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] The OData service URL needed for the Feed Component, the default value is <tt>"/sap/opu/odata/sap/SM_INTEGRATION_SRV".</tt>
* @param {sap.collaboration.FeedType} feedType The type of feed to be displayed.
* @param {string} [groupIds] A comma separated list of group IDs.
* @param {object} [object] A JSON object passed to the Feed component. 
* It is required when the value of <tt>feedType</tt> is <tt>sap.collaboration.FeedType.object</tt> or <tt>sap.collaboration.FeedType.objectGroup</tt>.
* This object represents business related information, such as a sales order, an opportunity, etc. It contains the following properties:
* 		<ul>
*			<li><strong><tt>id</tt></strong>: The Business Object ID to be posted in the SAP Jam Feed. It needs to be an OData URL containing the relative path to the object in the back-end.</li>
*			<li><strong><tt>type</tt></strong>: The type of the Business Object. It needs to be the OData meta data URL to the corresponding Entity Collection.</li>
*			<li><strong><tt>name?</tt></strong> (optional): The description of the Business Object to be displayed in SAP Jam, i.e. "SO 57746", "Opportunity 123", etc.</li>
*			<li><strong><tt>ui_url?</tt></strong> (optional): The URL to navigate to the same Business Object in the application.</li>
*		</ul>
*
* @class Feed Component<br>
*
* A Feed Component is a ui5 component that applications can use to render a <tt>sap.m.App</tt> that embeds the JAM Feed Widget.<br>
* The Component class extends the base UI5 UIComponent class.<br>
* This class defines the Reusable UI5 Component structure, i.e properties, aggregations and events, if any, and creates the UI5 controls to be displayed.
*  
* @name sap.collaboration.components.fiori.feed.Component
* @public
* @deprecated Since version 1.26.0.
* Please use sap.collaboration.components.fiori.feed.dialog.Component instead.
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.feed.Component",
		/** @lends sap.collaboration.components.fiori.feed.Component */ {
		/**
		 * The Component class has the following properties, contained in <tt>metadata.properties</tt>:
		 * <ol>
		 * 	 <li><tt>{sap.ui.core.CSSSize}</tt> <strong>width</strong> - The width of the component. The default value is an empty string "". </li>
		 *   <li><tt>{sap.ui.core.CSSSize}</tt> <strong>height</strong> - The height of the component. The default value is an empty string "". </li>
		 *   <li><tt>{sap.ui.core.URI}</tt> <strong>odataServiceUrl</strong> - The URL of the OData Service used. The default value is “<tt>/sap/opu/odata/sap/SM_INTEGRATION_SRV</tt>”.</li>
		 *   <li><tt>{string}</tt> <strong>feedType</strong> - The feed type for the JAM widget.  The available types are in @link sap.collaboration.FeedType.</li>
		 *   <li><tt>{string}</tt> <strong>groupIds</strong> - The IDs of the group to display in the widget.</li>
		 *   <li><tt>{object}</tt> <strong>object</strong> - The encapsulation of a Business Object.
		 * </ol>
		 * @property
		 * @private
		 */
		metadata: {
			properties: {
				width: 		 			{type: "sap.ui.core.CSSSize", defaultValue: ""},
				height:		 			{type: "sap.ui.core.CSSSize", defaultValue: ""},
				oDataServiceUrl:		{type: "sap.ui.core.URI", defaultValue: "/sap/opu/odata/sap/SM_INTEGRATION_SRV"},
				feedType:				{type: "string"},
				groupIds:				{type: "string"},
				object:					{type: "object"}
			},
			
			aggregations: {
			},
			
			events: {
			}
		},
		
		/**
		* Initialization of the Component (inherited from sap.ui.core.UIComponent).<br>
		* This method overrides its parent in order to initialize member variables and utility classes.
		* The default values for the component's  width and height value is set to 100%, since the child control needs these properties specified.
		* @private
		*/
		init: function(){
			//Initialize and apply constants for width and height 
			this.CollaborationFeedConstants = {
				defaultWidth: '100%',
				defaultHeight: '100%'
			 };
				
			this.setWidth(this.CollaborationFeedConstants.defaultWidth);
			this.setHeight(this.CollaborationFeedConstants.defaultHeight);
			// For SP06 the split app mode is disabled.
			this.mode = sap.collaboration.AppType.widget;
			
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
			
			sap.ui.core.UIComponent.prototype.init.apply(this);
		},
		
		/**
		* Contract for passing the settings to the Component.
		* @public
		* @param {object} oSettings A JSON object containing the following attributes:
		* 		<ul>
		* 			<li><tt>{sap.ui.core.URI} oDataServiceUrl</tt>: The URL of the OData Service needed for the Feed Component.</li>
		* 			<li><tt>{sap.collaboration.FeedType} feedType</tt>: The type of feed to be displayed.</li>
		* 			<li><tt>{string} [groupIds?]</tt>: A comma separated list of Group IDs.</li>
		* 			<li><tt>{object} object</tt>: The representation of a Business Object.</li>
		* 		</ul>
		*/
		setSettings : function(oSettings) {
			this.setODataServiceUrl(oSettings.oDataServiceUrl);
			this.setFeedType(oSettings.feedType);
			this.setGroupIds(oSettings.groupIds);
			this.setObject(oSettings.object);
		},
		
		/**
		* Invoked before the Component is rendered (inherited from sap.ui.core.UIComponent).<br>
		* Initializes the OData model.
		* @private
		*/
		onBeforeRendering: function(){
			var asJson = true;
			
			try{
				this.bStopRendering = false; // Initialize the flag to continue rendering.
				this.validateInputParameters();
	            this.sODataServiceUrl = this.getODataServiceUrl();
	            if(!this.oOdataModel){
	            	this.oOdataModel = new sap.ui.model.odata.ODataModel(this.sODataServiceUrl, asJson);
	            }
			} catch (oError){
				//If an error occurs, it will be logged and displayed, and the flag this.bStopRendering will be turned on to be consumed by the onAfterRendering method.
				jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.Component.onBeforeRendering()");
				this.bStopRendering = true; // If an error is thrown then stop rendering (onAfterRendering).
				this.oCommonUtil.displayError(oError);
			}
	            
            // delete views before rendering
            if( sap.ui.getCore().byId(this.getId() + "_oAppView") ){
                  sap.ui.getCore().byId(this.getId() + "_oAppView").destroy();
            }
            if( sap.ui.getCore().byId(this.getId() + "_oSplitAppView") ){
                  sap.ui.getCore().byId(this.getId() + "_oSplitAppView").destroy();
            }		
		},
		
		/**
		* Called when the Component has been rendered (inherited from sap.ui.core.UIComponent).<br>
		* Creates a View that represents a UI5 app and places this view in the Component main HTML DIV created by the render function.
		* @function
		* @private
		*/
		onAfterRendering: function(){	
			if(!this.bStopRendering){
				// log properties
				jQuery.sap.log.debug("Feed Component properties:", "", 
						"sap.collaboration.components.fiori.feed.Component.onAfterRendering()");
				jQuery.sap.log.debug("width: " + this.getWidth());
		        jQuery.sap.log.debug("height: " + this.getHeight());
		        jQuery.sap.log.debug("oDataServiceUrl: " + this.getODataServiceUrl());
		        jQuery.sap.log.debug("feedType: " + this.getFeedType());
		        jQuery.sap.log.debug("groupIds: " + this.getGroupIds());
		        jQuery.sap.log.debug("object: " + JSON.stringify(this.getObject()));
		        
		        try{
					if(this.getMode() === sap.collaboration.AppType.widget){
						var oAppView = 
							sap.ui.view({
								id: this.getId() + "_oAppView",
								viewData : {
									controlId: this.getId(),
									odataModel:  this.oOdataModel,
									appType: this.getMode(),	
									feedType: this.getFeedType(),
									groupIds: this.getGroupIds(),
									object: this.getObject(),
									langBundle: this.oLangBundle
								}, 
								type:sap.ui.core.mvc.ViewType.JS, 
								viewName:"sap.collaboration.components.fiori.feed.app.App"
							});
						
						oAppView.placeAt(this.getId());
					}
					else if(this.getMode() === sap.collaboration.AppType.split){
						var oSplitAppView = 
							sap.ui.view({
								id: this.getId() + "_oSplitAppView",
								viewData : {
									controlId: this.getId(),
									odataModel:  this.oOdataModel,
									appType: this.getMode(),
									object: this.getObject(),
									langBundle: this.oLangBundle
								}, 
								type:sap.ui.core.mvc.ViewType.JS, 
								viewName:"sap.collaboration.components.fiori.feed.splitApp.SplitApp"
							});
						
						oSplitAppView.placeAt(this.getId());
					}
				}catch(oError){
					jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.Component.onAfterRendering()");
					this.oCommonUtil.displayError(oError);
				}
			}
		},
		
		/**
		 * Renders the outer HTML for the Component (inherited from sap.ui.core.UIComponent).<br>
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
			oRm.write("<div id='" + this.getId() + "' style='width:" + this.getWidth() + ";height:" + this.getHeight() + "'");
			oRm.write(">");
			oRm.write("</div>");
			
		},
		
		/**
		 * Getter for the mode property
		 * @private
		 */
		getMode: function(){
			return this.mode;
		},
		
		/**
		 * Validate input parameters before creating the view, initializing OData, making server calls etc.
		 * @private
		 * @throws {Error} oErrorIncorrectInputParameters - Error thrown when the
		 */
		validateInputParameters : function(){			
			var oErrorIncorrectInputParameters;
			
			//Validations are applied in the sequence they appear, throwing an error the moment a validation fails.  If all the validations pass then continue execution.
			
			//Applies to both, object and object group
			if(this.getFeedType() == sap.collaboration.FeedType.object || this.getFeedType() == sap.collaboration.FeedType.objectGroup){
				if(!this.getObject()){
					oErrorIncorrectInputParameters = new Error("Object is undefined or null");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters, "", "sap.collaboration.components.fiori.feed.Component.validateInputParameters()");
	            	throw oErrorIncorrectInputParameters;
				}else if(!this.getObject().id){
					oErrorIncorrectInputParameters = new Error("Missing Object ID");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters, "", "sap.collaboration.components.fiori.feed.Component.validateInputParameters()");
	            	throw oErrorIncorrectInputParameters;
				}
			}
			
			//Only applies to object
			if(this.getFeedType() == sap.collaboration.FeedType.object){
				if(!this.getObject().type){
					oErrorIncorrectInputParameters = new Error("Missing Object Type");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters, "", "sap.collaboration.components.fiori.feed.Component.validateInputParameters()");
	            	throw oErrorIncorrectInputParameters;
				}
			}
		}
	}
);
}; // end of sap/collaboration/components/fiori/feed/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.feed.dialog.Component') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */





jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.fiori.feed.dialog.Component");

/**
* Constructor for the Feed Dialog Component.
* @since version 1.16
* @constructor
* @param {object} businessObject A JSON object passed to the Feed Dialog Component.
* This object represents business related information, such as a sales order, an opportunity, etc. It contains the following properties:
* <ul>
* 	<li><tt>{string} appContext</tt>: The application context.  Example: "CRM", "CB", "SD", etc.</li>
* 	<li><tt>{string} odataServicePath</tt>: The path to the OData Service and the Service name.  Example: "/sap/opu/odata/sap/APPLICATION_SRV".</li>
* 	<li><tt>{string} collection</tt>: The name of the OData Collection. Example: "Account", "Opportunity", etc.</li>
* 	<li><tt>{string} key</tt>: The key to identify a particular instance of the Business Object. It can be a simple ID or a compound key. Example: "123", "ObjectID='123'", "ObjectID='123',ObjectType='BUS000123'", etc.</li>
* 	<li><tt>{string} name</tt>: The short name of the Business Object. Example: "Sales Order 123", "Opportunity 123", "Account 123", etc.</li>
* 	<li><tt>{string} ui_url</tt>: The URL to navigate to the same business object in the application.</li>
* </ul>
* @param {sap.ui.core.URI} [oDataServiceUrl] <b>[DEPRECATED]</b> The OData service URL needed for the Feed Dialog Component, the default value is <tt>"/sap/opu/odata/sap/SM_INTEGRATION_SRV".</tt>
* @param {sap.collaboration.FeedType} [feedType] <b>[DEPRECATED]</b> The type of feed to be displayed.
* @param {string} [groupIds] <b>[DEPRECATED]</b> A comma separated list of group IDs.
* @param {object} [object] <b>[DEPRECATED]</b> A JSON object passed to the Feed Dialog Component. Use <b><tt>businessObject</tt></b> instead.
* This object represents business related information, such as a sales order, an opportunity, etc. It contains the following properties:
*		<ul>
*			<li><tt>id</tt>: The Business Object ID to be posted in the SAP Jam Feed. It needs to be an OData URL containing the relative path to the object in the back-end.</li>
*			<li><tt>type</tt>: the type of the business object. It can be any text or it can be the OData meta data URL to the object Entity Type.</li>
*			<li><tt>name</tt> (optional): the description of the business object to be displayed in SAP Jam, i.e. "SO 57746", "Opportunity 123", etc.</li>
*			<li><tt>ui_url</tt> (optional): the URL to navigate to the same business object in the application.</li>
*		</ul>
* Note: The object is passed by reference, which means that the attributes will be modified in the original object, for example, when the URLs contained in the id and type attributes are mapped (via OData call).
*
* @class Feed Dialog Component
*
* A Feed Dialog Component is a ui5 component that applications can use to render the feed widget view in a dialog 
* in order to discuss information in SAP JAM by adding and replying to feed posts related to a specific Business Object.
* 
* @deprecated Since version 1.34.0. For new integrations and existing implementations running on release 1.32 or later, use the Group Feed component (sap.collaboration.components.feed.Component), Business Object mode(sap.collaboration.FeedType.BusinessObjectGroups). Note that the Group Feed component does not display the full public feed for the object in SAP Jam (object wall), but rather is restricted to the feed for the object within a specific group (group object wall).
* @name sap.collaboration.components.fiori.feed.dialog.Component
* @extends sap.ui.core.UIComponent
* @public
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.feed.dialog.Component",
		/** @lends sap.collaboration.components.fiori.feed.dialog.Component */ {
		/**
		 * The Component class has the following properties, contained in <tt>metadata.properties</tt>:
		 * <ol>
		 * 	 <li><tt>{object} businessObject</tt>: the representation of a business object.</li>
		 * 	 <li><tt>{sap.ui.core.CSSSize}</tt> <strong>width</strong> - The width of the component. The default value is an empty string "". </li>
		 *   <li><tt>{sap.ui.core.CSSSize}</tt> <strong>height</strong> - The height of the component. The default value is an empty string "". </li>
		 *   <li><tt>{string}</tt> <strong>feedType</strong> - <b>[DEPRECATED]</b> The feed type for the JAM widget.  The available types are in @link sap.collaboration.FeedType.</li>
		 *   <li><tt>{string}</tt> <strong>groupIds</strong> - <b>[DEPRECATED]</b> The IDs of the group to display in the widget.</li>
		 *   <li><tt>{object}</tt> <strong>object</strong> - <b>[DEPRECATED]</b> The encapsulation of a Business Object.
		 * </ol>
		 * @property
		 * @private
		 */

		metadata: {
			includes: ["../../../resources/css/Sharing.css"],
			properties: {
				width: 		 			{type: "sap.ui.core.CSSSize", defaultValue: "575px"}, // Value defined by Central UX. Internal Message 3216022/2013
				//We need to pass a value in pixels, otherwise the dialog won't render correctly
				height:		 			{type: "sap.ui.core.CSSSize", defaultValue: "605px"}, // Value defined by Central UX. Internal Message 3216022/2013
				feedType:				{type: "string", defaultValue: sap.collaboration.FeedType.object},
				groupIds:				{type: "string"},
				object:					{type: "object"}, 
				businessObject:			{type: "object"} //appContext, oDataServicePath, collection, key, name, ui_url
			},
			
			aggregations: {
			},
			
			events: {
			}
		},

		systemSettings: {
			oDataServiceUrl: "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV",
			oCollaborationHostRestService: "/sap/bc/ui2/smi/rest_tunnel/Jam//v1",
			oCollaborationHostODataService: "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData"
		},
		
		/**
		* Initialization of the Component.<br>
		* This method overrides its parent in order to initialize member variables and utility classes.
		* The default values were specified by the Central UX Team (Internal Message 3216022/2013).
		* @private
		*/
		init: function(){
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
			this.oJamUtil = new sap.collaboration.components.utils.JamUtil();
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
			
			this.sJamUrl = undefined;
			this.sJamToken = undefined;
			this.oOdataModel = undefined;
			this.oODataUtil = undefined;
			this.oBusinessObject = {};

			sap.ui.core.UIComponent.prototype.init.apply(this);
		},
		
		/**
		* Contract for passing the settings to the Component.
		* @public
		* @param {object} oSettings A JSON object containing the following attributes:
		* 		<ul>
		* 			<li><tt>{object} businessObject</tt>: the representation of a business object.</li>
		* 			<li><tt>{sap.collaboration.FeedType} <b>[DEPRECATED]</b> feedType</tt>: the type of feed to be displayed.</li>
		* 			<li><tt>{string} <b>[DEPRECATED]</b> [groupIds?]</tt>: a comma separated list of group IDs.</li>
		* 			<li><tt>{object} <b>[DEPRECATED]</b> object</tt>: the representation of a business object. Use <tt>businessObject</tt> instead</li>
		* 		</ul>
		*/
		setSettings : function(oSettings) {
			if(oSettings){
				this.setFeedType(oSettings.feedType);
				this.setGroupIds(oSettings.groupIds);
				
				//The object passed in the settings needs to be cloned in order to make it a local variable of the component,
				//otherwise, the original object in the settings is changed (i.e. when url mapping is done), because it is being passed by reference.
				//The cloning is done using jQuery "deep" cloning.
				//The object is directly assigned to the mProperties of the component because the setter is not working properly.
				//The object should also be cloned during construction.
				//Example: this.mProperties.object = jQuery.extend(true, {}, oSettings.object);
				this.setObject(oSettings.object);
				this.setBusinessObject(oSettings.businessObject);
			} else {
				var oErrorSettingsUndefined = new Error("Settings object is undefined");
            	jQuery.sap.log.error(oErrorSettingsUndefined.stack);
			}
		},
		
		/**
		 * Open the Feed Dialog.
		 * @public
		 */
		open : function(){
			// log properties
			this._logComponentProperties();
	        
			try{
					this._validateInputParameters(this.mProperties);
					this._createFeedDialog();
					this._requestWidgetData();
					this.oFeedDialog.open();
			} catch (oError){
					jQuery.sap.log.error(oError.stack);
					this.oCommonUtil.displayError();
			}	
			
		},
		
		
		/**
		* Invoked before the Component is rendered.
		* @private
		*/
		onBeforeRendering: function(){
		},
		
		/**
		* Called when the Component has been rendered 
		* @function
		* @private
		*/
		onAfterRendering: function(){
		},
		
		/**
		 * Renders the outer HTML for the Component
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
		},
		
		/**
		 * Initializes the OData needed by the feed widget:
		 * The model and the OData Util class. 
		 * Calls the corresponding functions to create and execute the batch requests to retrieve the necessary data for the component as well as to parse the batch results.
		 * Calls the corresponding function to create and execute the AJAX request to retrieve the SAP Jam single use token.
		 * If both the batch request and AJAX request are successful, the Feed Dialog Component (Feed View and the Feed Dialog Control) is then created.
		 * @private
		 */
		_requestWidgetData: function(){
			var sCSRFToken = this._getCSRFToken();
			
			var self = this;
			var bAsync = true;
			var sCollaborationHostRestService = this.systemSettings.oCollaborationHostRestService;

			this._initOData();
			
			//Logic for object and external Object
           if(this.getObject()){
        	   this._getObjectWithoutMapping();
           } else if(this.getBusinessObject()) {
        	   this._getObjectWithMapping();
           }
           
			// Create, execute and parse the AJAX request asynchronously
			// The AJAX request is to get the token from SAP Jam and if successful, set the variable sJamToken to the retrieved token
			var fnAjaxCallback = function() {
				if (this.readyState == 4) {
					if(this.status == 201){
						self.sJamToken = this.responseXML.getElementsByTagName('single_use_token')[0].attributes[0].value;
						//check if the Jam URL from the batch request is retrieved, if yes, then create the View, the Dialog, and open it.
						if(self.sJamUrl && self.oBusinessObject.odata_url && self.oBusinessObject.metadata_url){
							self._createFeedView();
							self.oFeedDialog.addContent(self.oFeedView);
							setTimeout(function(){self.oFeedDialog.setBusy(false);}, 3000);
						}
					}
					else{
						var sError = "The single use token from SAP Jam was not returned successfully";
						jQuery.sap.log.error(sError, "", "sap.collaboration.components.utils.JamUtil.getJamSinglelUseTokens()");
						if(self.oFeedDialog.isOpen() === true){
							self.oFeedDialog.close();
						}
						self.oCommonUtil.displayError();
					}
				}
			};
			
			this.oJamUtil.getJamSinglelUseTokens(sCollaborationHostRestService, fnAjaxCallback, bAsync, sCSRFToken);
		},
		
		/**
		 * Backwards Compatibility to get the host url, and external url for object id and type using batch.
		 * @private
		 */
		_getObjectWithoutMapping : function(){
			var self = this;
			var bAsync = true;
			var aBatchRequests = [];
			
			// Create, execute and parse the batch requests asynchronously
			var fnParseBatchResults = function(aBatchResults){
				self._parseBatchResults(aBatchResults);
				//check if the single use token from the AJAX request is retrieved, if yes, then create the View, the Dialog, and open it.
				if(self.sJamToken){
					self._createFeedView();
					self.oFeedDialog.addContent(self.oFeedView);
					setTimeout(function(){self.oFeedDialog.setBusy(false);}, 3000);
				}
			};
			
			var fnBatchErrorCallback = function(oErrorBatchFailed){
            	jQuery.sap.log.error(oErrorBatchFailed, "", "sap.collaboration.components.fiori.feed.dialog.Component._getObjectWithoutMapping(), fnBatchErrorCallback()");
            	throw oErrorBatchFailed;
			};
			
			aBatchRequests = this._createBatchRequests();												
			this.oODataUtil.executeODataBatchRequest(this.oOdataModel, aBatchRequests, fnParseBatchResults, bAsync, fnBatchErrorCallback);
		},
		
		/**
		 * Map internal to external object and get the Jam URL
		 * @private
		 */
		_getObjectWithMapping : function(){
			var self = this;
			var getJamUrlPromise = new jQuery.Deferred();
			getJamUrlPromise.done(function(sJamURL){
			   self.sJamUrl = sJamURL;
			});
		   
			var getMappedObjectPromise = new jQuery.Deferred();
			getMappedObjectPromise.done(function(oMappedObject){
			   self._setMappedObject(oMappedObject);
			});
		   
			jQuery.when(getJamUrlPromise, getMappedObjectPromise).fail(function(sStatusCode){
			   if(self.oFeedDialog && self.oFeedDialog.isOpen()){
				   self.oFeedDialog.close();
			   }
			   self.oCommonUtil.displayError();
			});
		   
			this.oODataUtil.getJamUrl(this.oOdataModel, getJamUrlPromise);
			this.oODataUtil.getExternalObjectMapping(this.oOdataModel, this.getBusinessObject(), getMappedObjectPromise);
		},
		
		/**
		 * Set mapped object to member business object
		 * @param oMappedObject
		 * @private
		 */
		_setMappedObject : function (oMappedObject){
			var self = this;
			this.oBusinessObject.id = oMappedObject.Exid;
			this.oBusinessObject.type = oMappedObject.ObjectType;
			this.oBusinessObject.odata_url = this.oBusinessObject.id;
			this.oBusinessObject.metadata_url = this.oBusinessObject.type;
			// Synchronizing getExternalObjectMapping with getJamSingleUseToken
			if(this.sJamToken){
				this._createFeedView();
				this.oFeedDialog.addContent(this.oFeedView);
				setTimeout(function(){self.oFeedDialog.setBusy(false);}, 3000);
			}
		},
		
		/**
		 * Initialize the OData Model and the OData Util Classes
		 * @private
		 */
		_initOData : function(){
			// The variable asJson is used instead of just passing the boolean value 
			// to explain what is the effect of passing true to the ODataModel Constructor
			var asJson = true;    
			//Using a variable for better maintenance and debugging
			var sODataServiceUrl = this.systemSettings.oDataServiceUrl;
			// Initialize the OData Model
			if(!this.oOdataModel){
				this.oOdataModel = new sap.ui.model.odata.ODataModel(sODataServiceUrl, asJson);
			}
            if(!this.oOdataModel.oMetadata.oMetadata){
            	var oErrorMetadataUndefined = new Error("Metadata is undefined");
            	jQuery.sap.log.error(oErrorMetadataUndefined, "", "sap.collaboration.components.fiori.feed.dialog.Component._requestWidgetData()");
            	throw oErrorMetadataUndefined;
            }		            	
			
            // Initialize the OData utility class to create batch calls
            if(!this.oODataUtil){
            	this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
            }
		},
		
		/**
		 * Returns a CSRF token from SAP Jam
		 * @return {string} CSRF token
		 * @private
		 */
		_getCSRFToken: function(){
			var sCSRFToken = "";
			var oCollaborationHostODataService = this.systemSettings.oCollaborationHostODataService;
			
			var fnAjaxCallback = function(oData) {
				if (this.readyState == 4) {
					if(this.status == 200){
							sCSRFToken = this.getResponseHeader('x-csrf-token');
					}
				}
			};
			this.oJamUtil.getCSRFToken(oCollaborationHostODataService, fnAjaxCallback, false);
			return sCSRFToken;
		},
		
		/**
		 * Creates batch requests for the different feed types.
		 * @return {array} aBatchRequests - An array of batch requests
		 * @private
		 */
		_createBatchRequests : function(){
			var self = this;
			var aBatchRequests = [];
			
			if (!self.sJamUrl){
				aBatchRequests.push(self.oODataUtil.createJamUrlBatchOperation(self.oOdataModel));
			}
			aBatchRequests = aBatchRequests.concat(self._createExternalUrlBatchRequest(self.oODataUtil, self.getObject()));
			
			return aBatchRequests;
		},
				
		/**
		 * Creates a batch request to get the external URL mapping for a business object.
		 * @param {sap.collaboration.components.utils.OdataUtil} oODataUtil An object containing a reference to the OData Util Class
		 * @param {object} oBusinessObject a Business Object containing the URLs that need to be mapped
		 * @return {array} aBatchOperations an array containing the batch operations
		 * @private
		 */
		_createExternalUrlBatchRequest: function(oODataUtil, oBusinessObject){
			var self = this;
			var aBatchOperations = [];
			
			if(oODataUtil && oBusinessObject){
				if(oBusinessObject.id){
					aBatchOperations.push(oODataUtil.createExternalOdataUrlBatchOperation(self.oOdataModel, oBusinessObject.id));
				}
				if(oBusinessObject.type){
					aBatchOperations.push(oODataUtil.createExternalOdataUrlBatchOperation(self.oOdataModel, oBusinessObject.type));
				}				
			}
			
			return aBatchOperations;
		},
		
		/**
		 * Callback function to parse the results from the batch request.<br>
		 * Assumption: the results are returned in the same order as the requests.<br>
		 * The values from the batch results will be assigned to member variables to be used later when the Feed View is created.
		 * @param {array} aBatchResults An array containing the batch results to be parsed
		 * @private
		 */
		_parseBatchResults : function(aBatchResults){
			var self = this;
			var i = 0;
			
			if (!self.sJamUrl){
				if(aBatchResults[i].error){
					throw new Error(aBatchResults[i].error);
				} else {
						self.sJamUrl = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetCollaborationHostUrl].URL;
				}
				i++;
			}
					
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				self.oBusinessObject.id = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetExternalODataURL].URL;
				self.oBusinessObject.odata_url = self.oBusinessObject.id;
			}
			i++;
			
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				self.oBusinessObject.type = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetExternalODataURL].URL;
				self.oBusinessObject.metadata_url = self.oBusinessObject.type;
			}
		},
		
		/**
		 * Creates the View that wraps the Feed Widget (<tt>sap.collaboration.components.fiori.feed.commons.Detail</tt>).
		 * @private
		 */
		_createFeedView : function() {
			var self = this;
			if(!self.oFeedView){					
				self.oFeedView  = sap.ui.view({
					id: self.getId() + "_FeedView", 
					height: "100%",
					viewData : {
						controlId: self.getId(),
						jamURL:	self.sJamUrl,
						jamToken: self.sJamToken,
						appType: sap.collaboration.AppType.widget,
						feedType: self.getFeedType(),
						groupIds: self.getGroupIds(),
						businessObject: self.oBusinessObject,
						langBundle: self.oLangBundle
					}, 
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.fiori.feed.commons.Detail"
				});
			} else{
				//If the Feed View already exists, we pass the new settings
				self.oFeedView.getController().sFeedType = self.getFeedType();
				self.oFeedView.getViewData().groupIds = self.getGroupIds();
				self.oFeedView.getController().oBusinessObject = self.oBusinessObject;
			}
		},
		
		/**
		 * Creates the Dialog Mobile Control (sap.m.Dialog), defining the sections (title, content and button), 
		 * as well as its properties (height, stretch, etc.) and passes the view in the content.
		 * @private
		 */
		_createFeedDialog: function() {
			var self = this;
				
			if (!this.oFeedDialog){
				this.oFeedDialog = new sap.m.Dialog(this.getId() + "FeedDialog", {
					title: this.oLangBundle.getText("FEED_DIALOG_TITLE"),
					stretch: false,
					contentWidth: this.getWidth(),
					contentHeight: this.getHeight(),
					content: [],
					endButton:
						new sap.m.Button({
							text: this.oLangBundle.getText("CLOSE_BUTTON_TEXT"),
							press : function() {
								self.oFeedDialog.close();
							}
						})
				}); 
			
				if(sap.ui.Device.system.phone){
					this.oFeedDialog.setStretch(true);
				}
			}
			
			this.oFeedDialog.setBusy(true);
		},
		
		/**
		 * Validate input parameters before creating the view, initializing OData, making server calls etc.
		 * @private
		 * @throws {error} oErrorIncorrectInputParameters - Error thrown when the validation on input parameters fail.
		 */
		_validateInputParameters : function(oInputParameters){
			var oErrorIncorrectInputParameters;
			
			//Validations are applied in the sequence they appear, throwing an error the moment a validation fails.  If all the validations pass then continue execution.
			//Using object or external object
			
			if(!oInputParameters){
				oErrorIncorrectInputParameters = new Error("Input paremeters are undefined");
            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
            	throw oErrorIncorrectInputParameters;
			}else if(oInputParameters.businessObject){
				var businessObject = oInputParameters.businessObject;
				if(jQuery.isEmptyObject(businessObject)){//
					oErrorIncorrectInputParameters = new Error("Business Object is empty");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!businessObject.appContext){
					oErrorIncorrectInputParameters = new Error("Application context is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!businessObject.odataServicePath){
					oErrorIncorrectInputParameters = new Error("OData Service Path is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!businessObject.collection){
					oErrorIncorrectInputParameters = new Error("Collection is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!businessObject.key){
					oErrorIncorrectInputParameters = new Error("Key is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!businessObject.name){
					oErrorIncorrectInputParameters = new Error("Name is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
			} else if(oInputParameters.object){
				var object = oInputParameters.object;
				if(jQuery.isEmptyObject(object)){
					oErrorIncorrectInputParameters = new Error("Business Object is empty");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!object.id){
					oErrorIncorrectInputParameters = new Error("Object is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!object.type){
					oErrorIncorrectInputParameters = new Error("Missing Object Type");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
			} else {
				oErrorIncorrectInputParameters = new Error("Neither an Object nor a Business Object was passed");
            	//jQuery.sap.log.error(oErrorIncorrectInputParameters.stack); It will be logged by the calling function (open)
            	throw oErrorIncorrectInputParameters;
			}
		},
		
		/**
		 * Log the component properties
		 * @private
		 */
		_logComponentProperties : function(){
			jQuery.sap.log.debug("Share Component properties:", "", 
			"sap.collaboration.components.fiori.dialog.Component._logComponentProperties()");
			jQuery.sap.log.debug("width: " + this.getWidth());
	        jQuery.sap.log.debug("height: " + this.getHeight());
	        jQuery.sap.log.debug("oDataServiceUrl: " + this.systemSettings.oDataServiceUrl);
	        jQuery.sap.log.debug("feedType: " + this.getFeedType());
	        jQuery.sap.log.debug("groupIds: " + this.getGroupIds());
	        jQuery.sap.log.debug("object: " + JSON.stringify(this.getObject()));
	        jQuery.sap.log.debug("businessObject: " + JSON.stringify(this.getBusinessObject()));
		}

	}
);

}; // end of sap/collaboration/components/fiori/feed/dialog/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.notification.Component') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */



jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.declare("sap.collaboration.components.fiori.notification.Component");
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


/**
* Constructor for the notification component
* @since version 1.18
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] The OData service URL needed for the notification component, the default value is "/sap/opu/odata/sap/SM_INTEGRATION_SRV"
* @param {sap.ui.core.int} [numberOfNotifications] This is the maximum number of notifications to be displayed. The default value is 10.
* @param {sap.ui.core.int} [transitionInterval] This is the amount of time in seconds a notification is displayed before the next notification is displayed. The default value is 10.
* @param {sap.ui.core.int} [refreshInterval] This is the amount of time in seconds before calling the backend to update the notifications. The default value is 300.
* @param {sap.ui.core.URI} notificationsTargetUrl When a user clicks on the component, a new browser tab will open at this URL.
* 
* @class Notification Component
*
* A Notification Component is a ui5 component that displays a SAP Jam member's latest notifications.
* 
* This component refreshes itself when the number of seconds specified in the <tt>refreshInterval</tt> parameter elapses.
* When refreshing, the backend is called to obtain the latest notifications.
* @name sap.collaboration.components.fiori.notification.Component
* @public
* @deprecated Since version 1.26.0.
* There is no replacement for this control. The Fiori Launchpad now provides its own implementation
* for this control. This control was never meant to be used directly by third parties.  
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.notification.Component",
		/** @lends sap.collaboration.components.fiori.notification.Component */ {		
	
		metadata: {
			properties: {
				oDataServiceUrl:		{type: "sap.ui.core.URI", defaultValue: "/sap/opu/odata/sap/SM_INTEGRATION_SRV"},
				numberOfNotifications:	{type: "int", defaultValue: 10},
				transitionInterval:		{type: "int", defaultValue: 10},
				refreshInterval:		{type: "int", defaultValue: 300},
				notificationsTargetUrl: {type: "sap.ui.core.URI"}
			}
		},
		
		/**
		* Initialization of the Component
		* @private
		*/
		init: function(){
			this.iMillisecondsPerSecond = 1000;
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();			
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
			
			this.sStyleClassPrefix = "sapClbNotif";
			
		},
		
		/**
		* Invoked before the Component is rendered.
		* It calls the setGroupsData() function. Refer to the setGroupsData() for the JSDoc 
		* @private
		*/
		onBeforeRendering: function(){
			
		},
		
		/**
		* Called when the Component has been rendered 
		* Creates the sharing View or rerender it
		* @function
		* @private
		*/
		onAfterRendering: function(){
			// log properties
			jQuery.sap.log.debug("Notification Component properties:", this.mProperties.toString(), 
					"sap.collaboration.components.fiori.notification.Component.onAfterRendering()");
			jQuery.sap.log.debug("oDataServiceUrl: " + this.getODataServiceUrl());
			jQuery.sap.log.debug("numberOfNotifications: " + this.getNumberOfNotifications());
			jQuery.sap.log.debug("transitionInterval: " + this.getTransitionInterval());
			jQuery.sap.log.debug("refreshInterval: " + this.getRefreshInterval());
			jQuery.sap.log.debug("notificationsTargetUrl: " + this.getNotificationsTargetUrl());
			if (!this.oNotificationView) {
				this.oNotificationView = sap.ui.view({
					id: this.getId() + "_NotificationView",
					viewData: {
						controlId: 	this.getId(), 
						langBundle: this.oLangBundle,
						oDataServiceUrl: this.getODataServiceUrl(),
						numberOfNotifications: this.getNumberOfNotifications(), 
						transitionInterval:	this.getTransitionInterval() * this.iMillisecondsPerSecond,
						refreshInterval: this.getRefreshInterval() * this.iMillisecondsPerSecond,
						notificationsTargetUrl: this.getNotificationsTargetUrl(),
						styleClassPrefix : this.sStyleClassPrefix
					}, 
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.fiori.notification.Notification"
				});
//				var button = new sap.ui.commons.Button();
//				this.oNotificationView.destroy = function(bSuppressInvalidate) {
//					var a = 1;
//				};
//				button.destroy =  function(bSuppressInvalidate) {
//					var b = 1;
//				};
//				this.addAggregation("view", this.oNotificationView);
//				this.addAggregation("view", button);
			}
			
			this.oNotificationView.placeAt(this.getId());
//			setTimeout(this.destroy.bind(this), 5000);
		},
		
		/**
		* Called when the Component is destroyed. Use this one to free resources and finalize activities.
		* Destroys the sharing view
		* @private
		*/
		exit: function() {
			this.deactivateNotificationRefreshAndTransition();
			// destroy the view in case the component is destroyed as the view will not be destroyed by default. It's not in the aggregation of the component.
			this.oNotificationView.destroy();
		},
		
		/**
		 * Renders the outer HTML for the Component
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
			oRm.write("<div id='" + this.getId() + "'");
			oRm.addClass(this.sStyleClassPrefix + "Component");
			oRm.addClass(this.sStyleClassPrefix + "CursorPointer");
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("</div>");
		},
		
		/**
		 * When this function is called, the automatic refresh and transition are deactivated.
		 * @private
		 */
		deactivateNotificationRefreshAndTransition : function() {
			this.oNotificationView.getController().deactivateNotificationTransition();
			this.oNotificationView.getController().deactivateNotificationRefresh();
		}
	}
);

}; // end of sap/collaboration/components/fiori/notification/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.notification.Notification.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.notification.Notification.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */




sap.ui.controller("sap.collaboration.components.fiori.notification.Notification", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* Initialize class variables
* memberOf Notification
*/
	onInit: function() {
		this.initializeRefreshAndTransitionState();
		
		this.sPrefixId = this.getView().getViewData().controlId;
		this.oView = this.getView();
		this.oLangBundle = this.oView.oLangBundle;
		this.sOdataServiceUrl = this.getView().getViewData().oDataServiceUrl;
		this.iTransitionInterval = this.getView().getViewData().transitionInterval;
		this.iRefreshInterval = this.getView().getViewData().refreshInterval;
		
		this.sProfilePhotoHiddenStyleClass = this.oView.sStyleClassPrefix + "ProfileImageHidden";
		this.sLoadingAnimationDummyTextStyleClass = this.oView.sStyleClassPrefix + "LoadingText";
		this.sNewNotificationTextStyleClass = this.oView.sStyleClassPrefix + "NewNotificationText";
		this.sErrorTextStyleClass = this.oView.sStyleClassPrefix + "ErrorText";
		
		this.oView.oNotificationNewNotificationOrErrorText.addStyleClass(this.sLoadingAnimationDummyTextStyleClass);
		this.oView.oNotificationNewNotificationOrErrorText.setText(". . . . . . . . . . . .");
		this.oView.oNotificationNewNotificationOrErrorText.setBusy(true);
		
		this.oNotificationTypeUtil = new sap.collaboration.components.utils.NotificationTypeUtil();	
	},
	
	initializeRefreshAndTransitionState: function() {
		this.bErrorInUnreadCountODataResponse = true;
		this.bErrorInNoticesODataResponse = true;
		this.bErrorInODataResponse = true;
		
		this.iNotificationCurrentIndex = undefined;
		this.iNotificationPreviousIndex = undefined;
		
		this.aNotifications = undefined;
		
		this.bIsTransitionActive = false;
		this.iNotificationsTransitionCallbackRegistrationId = undefined;
		
		this.bIsRefreshActive = false;
		this.iNotificationsRefreshCallbackRegistrationId = undefined;
		
		this.iNotificationUnreadCount = undefined;
		
		// Maximum number of notifications to display.
		this.iMaxNotificationsToDisplay = this.getView().getViewData().numberOfNotifications;
		this.aImageControls = this.getView().getViewData().aProfilePhotos;
		
		this.iNotificationsToDisplay = undefined;
		this.aUsedImageControls = [];
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
*/
	onBeforeRendering: function() {
		this.initializeCommonUtil();
		this.initializeOdataModel();
		this.initializeOdataUtils();
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
*/
	onAfterRendering: function() {
		this.fetchNotificationData();
	},
	
	/**
	 * Initializes the OData Model
	 * @private
	 */
	initializeOdataModel : function() {
		var asJson = true;
    	this.oOdataModel = new sap.ui.model.odata.ODataModel(this.sOdataServiceUrl, asJson);
	},
	
	/**
	 * Initialize the OData Utility Class
	 * @private
	 */
	initializeOdataUtils : function() {
		this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
	},
	
	/**
	 * Initialize the Common Utility Class
	 * @private
	 */
	initializeCommonUtil: function() {
		this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
	},
	
	fetchNotificationData : function() {
		var aRequests = [];
		
		var oNotificationUnreadCountReq = this.oODataUtil.createNotificationUnreadCountBatchOperation(this.oOdataModel);
		var oNotificationReq = this.oODataUtil.createNotificationBatchOperation(this.oOdataModel, this.iMaxNotificationsToDisplay);
		
		aRequests.push(oNotificationUnreadCountReq);
		aRequests.push(oNotificationReq);
		
		var fParseResult = this.getFunctionParseResult();
		var fErrorCallBack = this.getFunctionErrorCallBack();
		
		//var self = this;
		this.oODataUtil.executeODataBatchRequest(this.oOdataModel, aRequests, fParseResult, true, fErrorCallBack);
	},
	
	getFunctionParseResult : function() {
		var self = this;
		return function(aResults){
			// Here we turn off the loading animation.
			self.oView.oNotificationNewNotificationOrErrorText.setBusy(false);
			self.oView.oNotificationNewNotificationOrErrorText.setText("");
			self.oView.oNotificationNewNotificationOrErrorText.removeStyleClass(self.sLoadingAnimationDummyTextStyleClass);
			
			// And set the internal state to the initial state.
			self.initializeRefreshAndTransitionState();
			if (aResults[0].error && !aResults[1].error) {
				self.bErrorInNoticesODataResponse = false;
				self.aNotifications = aResults[1].results;
				self.clearAllUiTexts();
				self.hideAllProfilePhotoControls();
				self.setUiContent();
				self.activateNotificationRefresh();
			}
			else if (!aResults[0].error && aResults[1].error) {
				self.bErrorInUnreadCountODataResponse = false;
				self.iNotificationUnreadCount = aResults[0].GetNoticeUnreadCount.UnreadCount;
				self.clearAllUiTexts();
				self.hideAllProfilePhotoControls();
				self.setUiContent();
				self.activateNotificationRefresh();
			}
			else if (aResults[0].error && aResults[1].error) {
				self.clearAllUiTexts();
				self.hideAllProfilePhotoControls();
				self.setUiContent();
				self.activateNotificationRefresh();
			}
			else {
				self.bErrorInUnreadCountODataResponse = false;
				self.bErrorInNoticesODataResponse = false;
				self.bErrorInODataResponse = false;
				self.aNotifications = aResults[1].results;
				self.iNotificationUnreadCount = aResults[0].GetNoticeUnreadCount.UnreadCount;
				if (self.iMaxNotificationsToDisplay > 0) {
					// The user wants to display at least one notification.
					if (self.aNotifications.length > 0) {
						// There is at least one notification that is available to display.
						if (self.iNotificationUnreadCount > 0) {
							// There are at least one unread notification.
							self.iNotificationsToDisplay = Math.min(self.iMaxNotificationsToDisplay, self.aNotifications.length, self.iNotificationUnreadCount);
							self.iNotificationCurrentIndex = 0;
							self.iNotificationPreviousIndex = self.iNotificationsToDisplay - 1;
							self.clearAllUiTexts();
							self.hideAllProfilePhotoControls();
							self.setProfilePhotosSrc();
							self.setUiContent();
							self.activateNotificationTransition();
							self.activateNotificationRefresh();
						}
						else {
							// In the case where the number of unread notifications is less than 
							// or equal to zero and there are notifications to display, we only
							// display the one notification.
							// We do not activate transitions in this case because there
							// is only one notification to display. But we do activate the
							// refresh.
							self.iNotificationsToDisplay = 1;
							self.iNotificationCurrentIndex = 0;
							self.iNotificationPreviousIndex = self.iNotificationsToDisplay - 1;
							self.clearAllUiTexts();
							self.hideAllProfilePhotoControls();
							self.setProfilePhotosSrc();
							self.setUiContent();
							self.activateNotificationRefresh();
						}
					}
					else {
						// There are no notifications available to display.
						// The assumption we make here is that the unread
						// count is also zero. The user has requested that we display
						// some notifications, but since there's absolutely nothing to display,
						// then we display nothing. We may want to display the number of
						// unread notifications, but this is not part of the specification
						// Hence, we simply display nothing.
						// We only activate the refresh since there may be new notifications
						// that come in later.
						self.iNotificationsToDisplay = 0;
						self.clearAllUiTexts();
						self.hideAllProfilePhotoControls();
						self.activateNotificationRefresh();
					}
				}
				else {
					// The user has requested we display absolutely nothing. The user
					// has requested less than or equal to 0 number of notifications
					// be displayed. Hence, we display nothing. And since we don't allow
					// applications using our component to change the number of notifications
					// to display after creating the component, then we don't bother activating
					// the refresh or the transition. If a refresh should be done, then it
					// only makes sense if we want to update the number of unread notifications.
					// However, the setUIContent method currently doesn't allow for displaying
					// only the unread notifications.
					self.iNotificationsToDisplay = 0;
					self.clearAllUiTexts();
					self.hideAllProfilePhotoControls();
				}
			}
		};
	},
	
	getFunctionErrorCallBack : function() {
		var self = this;
		return function(oError){
			self.initializeRefreshAndTransitionState();
			self.clearAllUiTexts();
			self.hideAllProfilePhotoControls();
			self.setUiContent();
			self.activateNotificationRefresh();
		};
	},
	
	setProfilePhotosSrc : function() {
		// If the notification was triggered by a Jam member, then this is that member's id and full name.
		var iSenderId;
		var sSenderFullName;
		var sProfilePhotoURL;
		for(var i = 0; i < this.iNotificationsToDisplay; ++i) {
			iSenderId = this.aNotifications[i].SenderId;
			sSenderFullName = this.aNotifications[i].SenderFullName;
			sProfilePhotoURL = this.getProfilePhotoURL(sSenderFullName,iSenderId);
			this.oView.aProfilePhotos[i].addStyleClass(this.sProfilePhotoHiddenStyleClass);
			this.oView.aProfilePhotos[i].setSrc(sProfilePhotoURL);
		}
	},
	
	getProfilePhotoURL : function(sSenderFullName,iSenderId) {
		if(sSenderFullName !== "") {
			return this.sOdataServiceUrl + "/Members(" + iSenderId + ")/ProfilePhoto/$value";
		}
		else {
			return sap.ui.resource('sap.collaboration.components',"images/Anonymous.png");
		}
	},
	
	hideAllProfilePhotoControls: function() {
		for (var i = 0; i < this.oView.aProfilePhotos.length; ++i) {
			this.oView.aProfilePhotos[i].addStyleClass(this.sProfilePhotoHiddenStyleClass);
		}
	},
	
	clearAllUiTexts : function() {
		this.oView.oNotificationTypeText.setText("");
		this.oView.oNotificationMessageText.setText("");
		this.oView.oNotificationUnreadCountText.setText("");
		this.oView.oNotificationNewNotificationOrErrorText.setText("");
		this.oView.oNotificationAgeText.setText("");
		this.oView.oNotificationGroupText.setText("");
	},
	
	setUiContent : function() {
		if (this.bErrorInODataResponse) {
			// Then display an error.
			this.oView.oNotificationNewNotificationOrErrorText.removeStyleClass(this.sNewNotificationTextStyleClass); // In case the "New Notifications" text was previously being displayed.
			this.oView.oNotificationNewNotificationOrErrorText.addStyleClass(this.sErrorTextStyleClass);
			this.oView.oNotificationNewNotificationOrErrorText.setText(this.oLangBundle.getText("NOTIF_ERROR_MESSAGE"));
		}
		else {
			// No errors. Go ahead and display the content of the tile.
			
			// JavaScript object representation of an OData Notification entity type instance. 
			var oNotification = this.aNotifications[this.iNotificationCurrentIndex];
			
			// Key used to fetch the notification type's text.
			var sNotificationTypeText = "NOTIF_" + oNotification.EventType.toUpperCase();
			
			// If the sender that triggered the notification has written a message, then this
			// message will be non-empty.
			var sNotificationMessageText = oNotification.Message;
			
			var sNotificationUnreadCountText;
			if (this.iNotificationUnreadCount > 999) {
				sNotificationUnreadCountText = this.oLangBundle.getText("NOTIF_MORE_THAN_999_NEW_NOTIFICATIONS");
			}
			else {
				sNotificationUnreadCountText = this.iNotificationUnreadCount;
			}
			
			// The date on which the notification was created.
			var dCreatedAt = oNotification.CreatedAt;
			
			// If the notification has a corresponding Jam group, then this is that group's name.
			// For example, when someone posts an update using @@notify in a group's feed that you're
			// a member of, then the string below will have the name of that group.
			var sGroupName = oNotification.GroupName;
			
			// These are the notification entity type instance's properties that are needed
			// to correctly generate this notification type's text. For example, some notifications
			// require the sender's full name only, while others need both the sender's full name and
			// company name.
			var aNotificationTypePropertyNames = this.oNotificationTypeUtil.getRequiredNotificationPropertyNames(oNotification.EventType);
			var aNotificationPropertyValues = this.getNotificationPropertyValues(aNotificationTypePropertyNames, oNotification);
			
			// Using the properties retrieved above, we can now get this notification type's text and
			// display it in the UI.
			this.oView.oNotificationTypeText.setText(this.oLangBundle.getText(sNotificationTypeText, aNotificationPropertyValues));
			this.oView.oNotificationMessageText.setText(sNotificationMessageText);
			
			
			// Instead of setting the image source for a single image control when we want to display
			// the next image, we now hide the currently displayed image control and unhide the next
			// image control we want to display. Here we make the assumption that the array we use
			// has been prepopulated with image controls, and that the source of each of those image
			// controls has already been set. We hide and unhide image controls by changing the CSS
			// classes that are currently applied to them.
			this.oView.aProfilePhotos[this.iNotificationPreviousIndex].addStyleClass(this.sProfilePhotoHiddenStyleClass);
			this.oView.aProfilePhotos[this.iNotificationCurrentIndex].removeStyleClass(this.sProfilePhotoHiddenStyleClass);
			
			this.oView.oNotificationUnreadCountText.setText(sNotificationUnreadCountText);
			this.oView.oNotificationNewNotificationOrErrorText.removeStyleClass(this.sErrorTextStyleClass); // In case there was previously an error being displayed.
			this.oView.oNotificationNewNotificationOrErrorText.addStyleClass(this.sNewNotificationTextStyleClass);
			this.oView.oNotificationNewNotificationOrErrorText.setText(this.oLangBundle.getText("NOTIF_NEW_NOTIFICATIONS"));
			var aNotificationAgeAndGroup = this.calculateNotificationAge(dCreatedAt,sGroupName).split("\n");
			var sNotificationAgeText = aNotificationAgeAndGroup[0];
			var sNotificationGroupText = "";
			if(aNotificationAgeAndGroup.length > 1){
				sNotificationGroupText = aNotificationAgeAndGroup[1];
			}

			this.oView.oNotificationAgeText.setText(sNotificationAgeText);
			this.oView.oNotificationGroupText.setText(sNotificationGroupText);
			
			this.iNotificationPreviousIndex = this.iNotificationCurrentIndex;
			this.iNotificationCurrentIndex = (this.iNotificationCurrentIndex + 1)%this.iNotificationsToDisplay;
		}
	},
	
	
	getNotificationPropertyValues : function(aNotificationTypePropertyNames, oNotification) {
		var aNotificationTypePropertyValues = [];
		for(var i=0; i < aNotificationTypePropertyNames.length; i++){
			aNotificationTypePropertyValues.push(oNotification[aNotificationTypePropertyNames[i]]);
		}
		return aNotificationTypePropertyValues;
	},
	
	/**
	   * This function calculates the age of the notification
	   *
	   * @param {Date} The notification date
	   * @private
	   */
	   calculateNotificationAge : function(dCreatedAt, sGroupName) {
			
		   
			if (!this.oCommonUtil.isValidDate(dCreatedAt)) {
			  return "";
			}
			
			var dNow = new Date();
			
			// ignore milliseconds
			dCreatedAt.setMilliseconds(0);
			dNow.setMilliseconds(0);
			
			var nMillisInOneMinute = 60000;
			var nMillisInOneHour = nMillisInOneMinute * 60;
			var nMillisInOneDay = nMillisInOneHour * 24;
			
			var nNotificationAgeInMillis = dNow.getTime() - dCreatedAt.getTime();
			
			if (nNotificationAgeInMillis >= nMillisInOneDay) {
				var nNumberOfDays = Math.round(parseFloat(nNotificationAgeInMillis / nMillisInOneDay, 10));
				if (nNumberOfDays === 1) {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_DAY_AGO_GRP",[nNumberOfDays.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_DAY_AGO_NO_GRP",[nNumberOfDays.toString()]);
					}
				}
				else {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_DAYS_AGO_GRP",[nNumberOfDays.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_DAYS_AGO_NO_GRP",[nNumberOfDays.toString()]);
					}
				}
			}
			else if (nNotificationAgeInMillis >= nMillisInOneHour) {
				var nNumberOfHours = Math.round(parseFloat(nNotificationAgeInMillis / nMillisInOneHour, 10));
			
				if (nNumberOfHours === 1) {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_HOUR_AGO_GRP",[nNumberOfHours.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_HOUR_AGO_NO_GRP",[nNumberOfHours.toString()]);
					}
				}
				else {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_HOURS_AGO_GRP",[nNumberOfHours.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_HOURS_AGO_NO_GRP",[nNumberOfHours.toString()]);
					}
				}
			}
			else {
				var nNumberOfMins = Math.round(parseFloat(nNotificationAgeInMillis / nMillisInOneMinute, 10));
			
				if (nNumberOfMins === 1) {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_MINUTE_AGO_GRP",[nNumberOfMins.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_MINUTE_AGO_NO_GRP",[nNumberOfMins.toString()]);
					}
				}
				else {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_MINUTES_AGO_GRP",[nNumberOfMins.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_MINUTES_AGO_NO_GRP",[nNumberOfMins.toString()]);
					}
				}
			}
	   },
	  
	  activateNotificationTransition : function() {
		  if (!this.bIsTransitionActive) {
			  this.iNotificationsTransitionCallbackRegistrationId = this.getTransitionRegistrationId();
			  this.bIsTransitionActive = true;
		  }
	  },
	  
	  getTransitionRegistrationId: function() {
		  return setInterval(this.setUiContent.bind(this),this.iTransitionInterval);
	  },
	  
	  deactivateNotificationTransition : function() {
		  if (this.bIsTransitionActive) {
			  clearInterval(this.iNotificationsTransitionCallbackRegistrationId);
			  this.bIsTransitionActive = false;
		  }
	  },
	  
	  activateNotificationRefresh : function() {
		  if (!this.bIsRefreshActive) {
			  this.iNotificationsRefreshCallbackRegistrationId = this.getRefreshRegistrationId();
			  this.bIsRefreshActive = true;
		  }
      },
      
      getRefreshRegistrationId: function() {
		  return setInterval(this.refreshNotification.bind(this),this.iRefreshInterval);
	  },
      
      deactivateNotificationRefresh : function() {
    	  if (this.bIsRefreshActive) {
    		  clearInterval(this.iNotificationsRefreshCallbackRegistrationId);
    		  this.bIsRefreshActive = false;
		  }
      },
		
	  refreshNotification : function() {
		   // Deactivate the transitions and the refresh.
		   this.deactivateNotificationTransition();
		   this.deactivateNotificationRefresh();
		   
		   // Update the array and index.
		   this.fetchNotificationData();
	  }
	  
});
}; // end of sap/collaboration/components/fiori/notification/Notification.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.Component') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */




jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.Component");
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


/**
* Constructor for the share component
* @since version 1.16
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] The OData service URL needed for the share component, the default value is "/sap/opu/odata/sap/SM_INTEGRATION_SRV"
* @param {object} [object] A JSON object passed to the share component. This object contains the following properties:
* 		<ul>
*  			<li>id (optional): is the object Id to be shared in SAP Jam, i.e a URL that navigates back to the same object in the application</li>
*  			<li>display (optional): is a UI5 control to be displayed in the component UI</li>
* 			<li>share (optional): is a note that will be displayed in the component UI and shared to SAP Jam too</li>
* 		</ul>
* @param {object} [externalObject]  A Business Object such as an Opportunity, Sales Order, Account, etc. from the back-end that will be shared as a Featured External Object in a Group in Jam.
* <code>
* <ul>
* 	<li>{string} appContext: The application context. Example: "CRM", "SD", etc.</li>
*	<li>{string} odataServicePath: The relative path to the OData Service.  Example: "/sap/opu/odata/sap/ODATA_SRV"</li>
* 	<li>{string} collection: The name of the OData Collection. Example: "Account", "Opportunity", etc.</li>
* 	<li>{string} key: The key to identify a particular instance of the Business Object. It can be a simple ID or a compound key. Example: "123", "ObjectID='123'", "ObjectID='123',ObjectType='BUS000123'", etc.</li>
* 	<li>{string} name: The short name of the Business Object. Example: "Sales Order 123", "Opportunity 123", "Account 123", etc.</li>
* </ul>
* </code>
* These attributes are not enforced by the UI (missing or incorrect values are not validated), but they are required to make the integration work.
* These attributes also should be mapped in the Back-end System and Jam in order to make the External Object work.
* <br><b>Note:</b> the externalObject is dependent on object.id, therefore, the object.id must also be passed to the Share Component. See the parameter "object" for more information.
* @param {object} [attachments] When you want to provide the user with the option to share file attachments, then the following properties need to be specified:
* <ul>
*   <li>attachmentsArray: An array of {@link sap.collaboration.components.fiori.sharing.attachment.Attachment} objects. This array offers users a list of files they can attach.</li>
* </ul>
* 
* @class Share Component
*
* A Share Component is a ui5 component that applications 
* can use to share information to SAP Jam
* @name sap.collaboration.components.fiori.sharing.Component
* @public
* @deprecated Since version 1.26.0.
* Please use sap.collaboration.components.fiori.sharing.dialog.Component instead.
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.sharing.Component",
		/** @lends sap.collaboration.components.fiori.sharing.Component */ {		
	
		metadata: {
			includes: ["../../resources/css/Sharing.css"],
			/**
			 * the Properties are:
			 * 		component width
			 * 		component height
			 * 		OData Service URL
			 * 		tunnel Service URL
			 * 		JSON like Object that looks like:
			 *		{
             *   		display: display,
             *   		id:"id",
             *   		share: "share"
			 *		}
			 *      
			 *		
			 *		where: 
			 *				display is a UI5 control to be displayed in the component UI
			 * 				id is the Object Id to be shared in JAM
			 *				share: is a note that will be displayed in the component UI that is used also as sharing info to jam
			 * */
			properties: {
				width: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},
				height: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},
				oDataServiceUrl: {type: "sap.ui.core.URI", defaultValue: "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV"},
				collaborationHostODataServiceUrl: {type: "sap.ui.core.URI", defaultValue: "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData"},
				tunnelServiceUrl: {type: "sap.ui.core.URI", defaultValue: "/sap/bc/z_sail_httproxy/Jam/api/v1/OData"},
				object: {type: "object"},
				attachments: {type: "object"},
				externalObject: {type: "object"}
			}
		},
		
		/**
		* Initialization of the Component
		* @private
		*/
		init: function(){
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();			
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
			this.sODataServiceUrl = undefined;
			this.sTunnelServiceUrl = undefined;
			this.sJamUrl = undefined;
			this.oODataUtil = undefined;
			
			this.oSharingView = undefined;
			
			this.oView = undefined;
			
			this.aJamGroups = [];
			
			// a flag that can be set to inform this component to bypass any OData call
			// so in this case the groups "this.aJamGroups" should be initialized by the caller like:
			// var oComp =  sap.ui.getCore().createComponent(....);
			// oComp.aJamGroups = aGroups;
			this.bOdataOn = true;
		},
		
		/**
		* Invoked before the Component is rendered.
		* @private
		*/
		onBeforeRendering: function(){
		},
		
		/**
		* Called when the Component has been rendered 
		* Creates the sharing View or rerender it
		* @function
		* @private
		*/
		onAfterRendering: function(){
			// Log Component properties.
			this.logComponentProperties();
			if(this.bStopRendering === undefined || this.bStopRendering === false){
				this.oSharingView =  this.getSharingView();
				this.oSharingView.placeAt(this.getId());
				
			}
		},
		
		/**
		* Called when the Component is destroyed. Use this one to free resources and finalize activities.
		* Destroys the sharing view
		* @private
		*/
		exit: function() {
			// destroy the view in case the component is destroyed as the view will not be destroyed by default. It's not in the aggregation of the component.
			this.oSharingView.destroy();
		},
		
		/**
		* Setter for the Component settings.
		* @param {object} oSettings A JSON object used to set the component settings, this object should contains the same 
		* properties used in the constructor. 
		* @public
		*/
		setSettings : function(oSettings) {
			this.setODataServiceUrl(oSettings.oDataServiceUrl);
			this.setTunnelServiceUrl(oSettings.tunnelServiceUrl);
			this.setObject(oSettings.object);
			this.setAttachments(oSettings.attachments);
			this.setExternalObject(oSettings.externalObject);
		},
		
		/**
		 * Renders the outer HTML for the Component
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
			oRm.write("<div id='" + this.getId() + "' style='width:" + this.getWidth() + ";height:" + this.getHeight() + "'");
			oRm.write(">");
			oRm.write("</div>");
		},
		
		/**
		 * Creates and returns the sharing view
		 * @private
		 */
		getSharingView : function() {
	        
			var oObjectDisplay;
			var sObjectShare;
			var sObjectId;
			var oObject = this.getObject();
			if (oObject){
				sObjectId = oObject.id;
				oObjectDisplay = oObject.display; 
				sObjectShare = oObject.share; 
			}
			
			var oComponentData = this.getComponentData();
			if(oComponentData) {
				this.oDialogComponent = oComponentData.dialogComponent;
			}
			
			var self = this;
			
			var fNoGroupsCallBack = function() {
				if(!self.oNoGroupsView){
					self.oNoGroupsView = sap.ui.view({
						id: self.getId() + "_NoGroupsView",
						viewData : {
							controlId: self.getId(),
							langBundle: self.oLangBundle,
							jamUrl: self.oSharingView.getController().sJamUrl,
						},
						type: sap.ui.core.mvc.ViewType.JS, 
						viewName: "sap.collaboration.components.fiori.sharing.NoGroups"
					});
				}
				self.oSharingView.destroy();
				self.oSharingView = undefined;
				self.oNoGroupsView.placeAt(self.getId());
			};
			
			if(!this.oSharingView)
			{
				this.oSharingView = sap.ui.view({
					id: this.getId() + "_SharingView",
					viewData : {
						controlId: this.getId(),
						odataServiceUrl: this.systemSettings.oDataServiceUrl,
						collaborationHostODataServiceUrl: this.systemSettings.collaborationHostODataServiceUrl,
						collaborationHostRestService: this.systemSettings.collaborationHostRestService,
						langBundle: this.oLangBundle,
						jamGroups: this.aJamGroups,
						sharingDialog: undefined,
						noGroupsCallBack: fNoGroupsCallBack,
						objectDisplay: oObjectDisplay,
						objectShare: sObjectShare,
						objectId: sObjectId,
						attachments: this.getAttachments(),
						externalObject: this.getExternalObject()
					},
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.fiori.sharing.Sharing"
				});
			}
			else{
					//this.oSharingView.getController().aJamGroups = this.aJamGroups;
					this.oSharingView.getViewData().objectId = sObjectId;
					this.oSharingView.getViewData().objectShare = sObjectShare;
					this.oSharingView.getViewData().objectDisplay = oObjectDisplay;
					this.oSharingView.getViewData().externalObject = this.getExternalObject();
					//**** Note: we dont rerender the view here because when the component container rerender this component, it deleted the domRef and the rerender
					//**** for the view can not be accomplished without the domRef, so we depend on the "placeAt" to do the trick
			}
			
			if(this.oNoGroupsView){
				this.oNoGroupsView.destroy();
				this.oNoGroupsView = undefined;
			}
				
				
			return this.oSharingView;
		},
		
		/**
		 * Shares the data to Jam group
		 * @public
		 */
		shareToJam : function() {
			this.oSharingView.getController().shareToJam();
		},
		
		/**
		 * Logs the properties of the component
		 * @private
		 */
		logComponentProperties: function(){
			jQuery.sap.log.debug("Share Component properties:", "", 
					"sap.collaboration.components.fiori.sharing.Component.logComponentProperties()");
			jQuery.sap.log.debug("width: " + this.getWidth());
	        jQuery.sap.log.debug("height: " + this.getHeight());
	        jQuery.sap.log.debug("oDataServiceUrl: " + this.getODataServiceUrl());
	        jQuery.sap.log.debug("tunnelServiceUrl: " + this.getTunnelServiceUrl());
	        
	        if(this.getObject()) {
	        	jQuery.sap.log.debug("object->id: " + this.getObject().id);
	        	jQuery.sap.log.debug("object->display: " + this.getObject().display);
	        	jQuery.sap.log.debug("object->share: " + this.getObject().share);
	        } else {
	        	jQuery.sap.log.debug("object: undefined");
	        }
	        
	        if(this.getAttachments() && this.getAttachments().attachmentsArray){
	        	jQuery.sap.log.debug("Attachments:");
	        	var attachmentsArray = this.getAttachments().attachmentsArray;
	        	for(var i=0; i<attachmentsArray.length; i++){
	        		jQuery.sap.log.debug("Attachments" + (i+1) + ":");
	        		jQuery.sap.log.debug(attachmentsArray[i].mimeType);
	        		jQuery.sap.log.debug(attachmentsArray[i].name);
	        		jQuery.sap.log.debug(attachmentsArray[i].url);
	        	}
	    	}
	        else{
	        	jQuery.sap.log.debug("attachments: undefined");
	        }
	        
	        if(this.getExternalObject()){
	        	jQuery.sap.log.debug("externalObject->appContext: " + this.getObject().appContext);
	        	jQuery.sap.log.debug("externalObject->odataServicePath: " + this.getObject().odataServicePath);
	        	jQuery.sap.log.debug("externalObject->collection: " + this.getObject().collection);
	        	jQuery.sap.log.debug("externalObject->key: " + this.getObject().key);
	        	jQuery.sap.log.debug("object->name: " + this.getObject().name);
	        	jQuery.sap.log.debug("object->summary: " + this.getObject().summary);
	        } else {
	        	jQuery.sap.log.debug("externalObject: undefined");
	        }
		}
	}
);

}; // end of sap/collaboration/components/fiori/sharing/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.NoGroups.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.sharing.NoGroups.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */



sap.ui.controller("sap.collaboration.components.fiori.sharing.NoGroups", {

	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created.
	 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * Initialize class variables
	 * memberOf NoGroups
	 */
	onInit: function() {
	},

	/**
	* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
	* (NOT before the first rendering! onInit() is used for that one!).
	*/
	onBeforeRendering: function() {
	},

	/**
	* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	* This hook is the same one that SAPUI5 controls get after being rendered.
	*/
	onAfterRendering: function() {

	},

	/**
	* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	*/
	onExit: function() {
		this.getView().destroyContent();
	}
	
});
}; // end of sap/collaboration/components/fiori/sharing/NoGroups.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.dialog.Component') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */




jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.fiori.sharing.dialog.Component");

/**
 * Constructor for the share dialog component
 * 
 * @since version 1.16
 * @constructor
 * @param {sap.ui.core.URI} [oDataServiceUrl] DEPRECATED The OData service URL will no longer be taken into account.
 * @param {object} [object] A JSON object passed to the share component. This object contains the following properties:
 *        <ul>
 *        <li>id (optional): is the object Id to be shared in SAP Jam, i.e a URL( or a callback function that returns a URL) that navigates back to the same object in the application</li>
 *        <li>display (optional): is a UI5 control to be displayed in the component UI <br>
 *        <b>Note:</b> The preferred object to pass in the display parameter is <code>sap.m.ObjectListItem</code>. Using other type of objects
 *        (for example: <code>ap.ui.commons.TextView</code>) may result in problems in the rendering of the content which needs to be corrected by
 *        the application owners.</li>
 *        <li>share (optional): is a note that will be displayed in the component UI and shared to SAP Jam too</li>
 *        </ul>
 * @param {object} [externalObject] A Business Object such as an Opportunity, Sales Order, Account, etc. from the back-end that will be shared as a
 *        Featured External Object in a Group in Jam. <code>
 * <ul>
 * 	<li>{string} appContext: The application context. Example: "CRM", "SD", etc.</li>
 *	<li>{string} odataServicePath: The relative path to the OData Service.  Example: "/sap/opu/odata/sap/ODATA_SRV"</li>
 * 	<li>{string} collection: The name of the OData Collection. Example: "Account", "Opportunity", etc.</li>
 * 	<li>{string} key: The key to identify a particular instance of the Business Object. It can be a simple ID or a compound key. Example: "123", "ObjectID='123'", "ObjectID='123',ObjectType='BUS000123'", etc.</li>
 * 	<li>{string} name: The short name of the Business Object. Example: "Sales Order 123", "Opportunity 123", "Account 123", etc.</li>
 * </ul>
 * </code> These attributes are not enforced by the UI (missing or incorrect values are not validated), but they are required to make the
 *        integration work. These attributes also should be mapped in the Back-end System and Jam in order to make the External Object work. <br>
 *        <b>Note:</b> the externalObject is dependent on object.id, therefore, the object.id must also be passed to the Share Component. See the
 *        parameter "object" for more information.
 * @param {object} [attachments] When you want to provide the user with the option to share file attachments, then the following properties need to be
 *        specified:
 *        <ul>
 *        <li>attachmentsArray: An array of {@link sap.collaboration.components.fiori.sharing.attachment.Attachment} objects. This array offers users
 *        a list of files they can attach.</li>
 *        </ul>
 * @class The Share Dialog component is an SAPUI5 component that you can use to create a dialog in your application to enable you to enter or edit information shared to SAP Jam. 
 * @name sap.collaboration.components.fiori.sharing.dialog.Component
 * @extends sap.ui.core.UIComponent
 * @public
 */

sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.sharing.dialog.Component",
/** @lends sap.collaboration.components.fiori.sharing.dialog.Component */
{
	

	metadata: {
		includes: [
			"../../../resources/css/Sharing.css"
		],
		properties: {
			attachments: {
				type: "object"
			},
			object: {
				type: "object"
			},
			externalObject: {
				type: "object"
			}
		},

		aggregations: {},

		events: {}
	},
	systemSettings: {
		width: "400px",
		height: "",
		oDataServiceUrl: "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV",
		collaborationHostODataServiceUrl: "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData",
		collaborationHostRestService: {
			url: "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1",
			urlParams: ""
		}
	},
	/**
	 * Initialization of the Component
	 * 
	 * @memberOf sap.collaboration.components.fiori.sharing.dialog.Component
	 * @private
	 */
	init: function() {
		this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		this.oLangBundle = this.oCommonUtil.getLanguageBundle();
	},

	/**
	 * Setter for the Component settings.
	 * 
	 * @param {object} oSettings A JSON object used to set the component settings, this object should contains the same properties used in the
	 *        constructor.
	 * @public
	 */
	setSettings: function(oSettings) {
		this.setObject(oSettings.object);
		this.setAttachments(oSettings.attachments);
		// Treat an empty external object as undefined.
		if (JSON.stringify(oSettings.externalObject) === '{}') {
			this.setExternalObject(undefined);
		} else {
			this.setExternalObject(oSettings.externalObject);
		}
	},

	/**
	 * Creates the sharing view
	 * 
	 * @private
	 */
	_createSharingView: function() {
		var self = this;

		var oObjectDisplay;
		var sObjectShare;
		var sObjectId;
		var oObject = this.getObject();
		if (oObject) {
			sObjectId = self._handleObjectId(oObject.id);
			oObjectDisplay = oObject.display;
			sObjectShare = oObject.share;
		}

		var fNoGroupsCallBack = function() {
			self.close();
			self.openoNoGroupsDialog(self.oSharingView.getController().sJamUrl);
		};

		if (!this.oSharingView) {
			this.oSharingView = sap.ui.view({
				id: this.getId() + "_SharingView",
				viewData: {
					controlId: this.getId(),
					odataServiceUrl: this.systemSettings.oDataServiceUrl,
					collaborationHostODataServiceUrl: this.systemSettings.collaborationHostODataServiceUrl,
					collaborationHostRestService: this.systemSettings.collaborationHostRestService,
					langBundle: this.oLangBundle,
					jamGroups: this.aJamGroups,
					sharingDialog: this._oSharingDialog,
					noGroupsCallBack: fNoGroupsCallBack,
					objectDisplay: oObjectDisplay,
					objectShare: sObjectShare,
					objectId: sObjectId,
					attachments: this.getAttachments(),
					externalObject: this.getExternalObject()
				},
				type: sap.ui.core.mvc.ViewType.JS,
				viewName: "sap.collaboration.components.fiori.sharing.Sharing"
			});
		} else {
			this.oSharingView.getViewData().objectId = sObjectId;
			this.oSharingView.getViewData().objectShare = sObjectShare;
			this.oSharingView.getViewData().objectDisplay = oObjectDisplay;
			this.oSharingView.getViewData().externalObject = this.getExternalObject();
			this.oSharingView.getViewData().attachments = this.getAttachments();
			// **** Note: we dont rerender the view here because
			// when the component container rerender this
			// component, it deleted the domRef and the rerender
			// **** for the view can not be accomplished without
			// the domRef, so we depend on the "placeAt" to do
			// the trick
		}
	},

	/**
	 * Creates the sharing component dialog
	 * 
	 * @private
	 */
	_createSharingDialog: function() {
		var oSharingDialog = new sap.m.Dialog(this.getId() + "_SharingDialog", {
			title: this.oLangBundle.getText("SHARING_PAGE_TITLE"),
			contentWidth: this.systemSettings.width,
			stretch: false,
			afterClose: function() {
				// TODO: Here is where we execute the code
				// responsible
				// for sharing the files.
			}
		}).addStyleClass("sapUiPopupWithPadding");

		return oSharingDialog;
	},

	/**
	 * Creates a dialog for the case where there are no groups
	 * 
	 * @param {string} sJamUrl The Jam Url
	 * @private
	 */
	createNoGroupsDialog: function(sJamUrl) {
		if (!this.oNoGroupsView) {
			this.oNoGroupsView = sap.ui.view({
				id: this.getId() + "_NoGroupsView",
				viewData: {
					controlId: this.getId(),
					langBundle: this.oLangBundle,
					jamUrl: sJamUrl
				},
				type: sap.ui.core.mvc.ViewType.JS,
				viewName: "sap.collaboration.components.fiori.sharing.NoGroups"
			});
		}

		var oNoGroupsDialog = new sap.m.Dialog(this.getId() + "_NoGroupsDialog", {
			title: this.oLangBundle.getText("SHARING_PAGE_TITLE"),
			stretch: false,
			content: this.oNoGroupsView,
			beginButton: new sap.m.Button(this.getId() + "_CloseButton", {
				text: this.oLangBundle.getText("CLOSE_BUTTON_TEXT"),
				press: function() {
					oNoGroupsDialog.close();
				}
			})
		}).addStyleClass("sapUiPopupWithPadding");

		return oNoGroupsDialog;
	},

	/**
	 * Opens the share component dialog
	 * 
	 * @public
	 */
	open: function() {
		if (this.bStopRendering === undefined || this.bStopRendering === false) {
			if (!this._oSharingDialog) {
				this._logComponentProperties();
				this._oSharingDialog = this._createSharingDialog();
			}
			try {
				this._createSharingView();
				this._oSharingDialog.addAriaLabelledBy(this.getId() + "_SharingView");
				this._oSharingDialog.addContent(this.oSharingView);
				this._oSharingDialog.setInitialFocus(this.oSharingView);
				this._createDialogButtons();

				if (sap.ui.Device.system.phone) {
					this._oSharingDialog.setStretch(true);
				}

				this._oSharingDialog.open();
			} catch (oError) {
				jQuery.sap.log.error(oError);
				this.oCommonUtil.displayError();
			}
		}
	},

	/**
	 * closes the share component dialog
	 * 
	 * @private
	 */
	close: function() {
		if (this._oSharingDialog) {
			this._oSharingDialog.close();
		}
	},

	/**
	 * Opens the dialog for the case where there are no groups
	 * 
	 * @param {string} sJamUrl The Jam Url
	 * @private
	 */
	openoNoGroupsDialog: function(sJamUrl) {
		this._oSharingDialog.removeAllContent();
		if (!this.oNoGroupsDialog) {
			this.oNoGroupsDialog = this.createNoGroupsDialog(sJamUrl);
		}

		this.oNoGroupsDialog.open();
	},

	/**
	 * create the sharing component dialog buttons
	 * 
	 * @private
	 */
	_createDialogButtons: function() {
		if (!this.oMentionButton) {
			this.oMentionButton = new sap.m.Button(this.getId() + "_mentionButton", {
				text: "@",
				enabled: false,
				press:  [function() {
					this.oSharingView.getController().atMentionsButtonPressed();
				}, this]
			});
			this._oSharingDialog.addButton(this.oMentionButton);
		}
		
		// Due to Ux issues, we don't want the @mention feature available on phones
		if (sap.ui.Device.system.phone) {
			this.oMentionButton.setVisible(false);
		}
		
		if (!this.oLeftButton) {
			this.oLeftButton = new sap.m.Button(this.getId() + "_LeftButton", {
				text: this.oLangBundle.getText("OK_BUTTON_TEXT"),
				enabled: false,
				press: [function() {
					this.oSharingView.getController().shareToJam();
					this._oSharingDialog.close();
				}, this]
			});
			this._oSharingDialog.addButton(this.oLeftButton);
		}
		
		if (!this.oRightButton) {
			this.oRightButton = new sap.m.Button(this.getId() + "_RightButton", {
				text: this.oLangBundle.getText("CANCEL_BUTTON_TEXT"),
				press: [function() {
					this._oSharingDialog.close();
				}, this]
			});
			this._oSharingDialog.addButton(this.oRightButton);
		}
	},

	/**
	 * Sets the begin and end buttons for the dialog
	 * 
	 * @private
	 */
	setDialogButtons: function() {
		// this._oSharingDialog.setBeginButton(this.oLeftButton);
		// this.oLeftButton.setEnabled(true);
		// this.oRightButton.setEnabled(true);
		// this._oSharingDialog.setEndButton(this.oRightButton);
	},

	/**
	 * Sets the end buttons for the dialog in case there are no groups
	 * 
	 * @private
	 */
	setCloseButton: function() {
		this._oSharingDialog.destroyBeginButton();
		this._oSharingDialog.setEndButton(this.oCloseButton);
	},

	/**
	 * handles oObject.id and returns object id string when possible
	 * 
	 * @param {object} oObjectId The object ID
	 * @private
	 */
	_handleObjectId: function(oObjectId) {
			// check if objectId contains either empty, a sting or a
			// call back function otherwise close the dialog and
			// show an error
			var sObjectIdType = typeof oObjectId;
			
			var sObjectId;

			switch (sObjectIdType) {
				case "undefined":
				case "":
				case "string":
					sObjectId =  oObjectId;
					break;
				case "function":
					sObjectId = oObjectId();
					if (typeof sObjectId == "string") {
						break;
					};
				default:
					jQuery.sap.log.error("object->id is not a sting or callback function that returns a string");
					throw new Error();
			};
			return sObjectId;
	},

	/**
	 * Logs the properties of the component
	 * 
	 * @private
	 */
	_logComponentProperties: function() {
		jQuery.sap.log.debug("Share Component properties:", "", "sap.collaboration.components.fiori.sharing.Component._logComponentProperties()");
		jQuery.sap.log.debug("width: " + this.systemSettings.width);
		jQuery.sap.log.debug("height: " + this.systemSettings.height);
		jQuery.sap.log.debug("oDataServiceUrl: " + this.systemSettings.oDataServiceUrl);
		jQuery.sap.log.debug("collaborationHostODataServiceUrl: " + this.systemSettings.collaborationHostODataServiceUrl);
		jQuery.sap.log.debug("collaborationHostRestService: " + this.systemSettings.collaborationHostRestService.url + this.systemSettings.collaborationHostRestService.urlParams);

		if (this.getObject()) {
			jQuery.sap.log.debug("object->id: " + this.getObject().id);
			jQuery.sap.log.debug("object->display: " + this.getObject().display);
			jQuery.sap.log.debug("object->share: " + this.getObject().share);
		} else {
			jQuery.sap.log.debug("object: undefined");
		}

		if (this.getAttachments() && this.getAttachments().attachmentsArray) {
			jQuery.sap.log.debug("Attachments:");
			var attachmentsArray = this.getAttachments().attachmentsArray;
			for (var i = 0; i < attachmentsArray.length; i++) {
				jQuery.sap.log.debug("Attachments" + (i + 1) + ":");
				jQuery.sap.log.debug(attachmentsArray[i].mimeType);
				jQuery.sap.log.debug(attachmentsArray[i].name);
				jQuery.sap.log.debug(attachmentsArray[i].url);
			}
		} else {
			jQuery.sap.log.debug("attachments: undefined");
		}

		if (this.getExternalObject()) {
			jQuery.sap.log.debug("externalObject->appContext: " + this.getExternalObject().appContext);
			jQuery.sap.log.debug("externalObject->odataServicePath: " + this.getExternalObject().odataServicePath);
			jQuery.sap.log.debug("externalObject->collection: " + this.getExternalObject().collection);
			jQuery.sap.log.debug("externalObject->key: " + this.getExternalObject().key);
			jQuery.sap.log.debug("object->name: " + this.getExternalObject().name);
			jQuery.sap.log.debug("object->summary: " + this.getExternalObject().summary);
		} else {
			jQuery.sap.log.debug("externalObject: undefined");
		}
	}
});

}; // end of sap/collaboration/components/fiori/sharing/dialog/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/*************************************************************
* AttachmentsUtil helper class
*
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil");



sap.ui.base.Object.extend("sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil",{
	
	/**
	 * @memberOf sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil
	 */
	constructor: function(oLangBundle, oODataUtil, oJamODataModel) {
		this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		this.oLangBundle = oLangBundle;
		this.oODataUtil = oODataUtil;
		this.oJamODataModel = oJamODataModel;
		
	},
	
	/**
	* Creates the file selection dialog
	* @memberOf sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil
	* @private
	*/
	createFileSelectionDialog : function(sPrefixId, oAttachmentsModel, fOnFileSelectionDialogConfirm, iWidth, iHeight) {
		
		var handleSearch = function(oEvent) {
		
			    var sValue = oEvent.getParameter("value");
			    var oFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, sValue);
			    var oBinding = oEvent.getSource().getBinding("items");
			    oBinding.filter([oFilter]);
		};

		this.oFileSelectionDialog = new sap.m.SelectDialog(sPrefixId + "_FileSelectionDialog",{
			multiSelect: true,
			rememberSelections: true,
			title: this.oLangBundle.getText("ATTACHMENTS_FIELD_TEXT",[""]),
			confirm: fOnFileSelectionDialogConfirm,
			search: handleSearch,
			liveChange: handleSearch
		});
					
		if(iWidth){
			this.oFileSelectionDialog.setContentWidth(iWidth.toString() + "px");
		}
		
		if(iHeight){
			this.oFileSelectionDialog.setContentHeight(iHeight.toString() + "px");
		}
		var oItemTemplate = new sap.m.StandardListItem({
			title : "{name}",
			icon : "{icon}",
			iconDensityAware : false,
			iconInset : true,
			type : sap.m.ListType.Active
		});
		this.oFileSelectionDialog.setModel(oAttachmentsModel);
		this.oFileSelectionDialog.bindAggregation("items","/attachments", oItemTemplate);
		
		return this.oFileSelectionDialog;
	},
	/**
	* Creates the attachments model necessary for the file selection dialog
	* @memberOf sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil
	* @private
	*/
	createAttachmentsModel : function(aFiles){
		// create attachment model
		var aAttachments = [];
		for(var i = 0; i < aFiles.length; i++) {
			aAttachments.push( { 
				name: aFiles[i].getName(), 
				mimeType: aFiles[i].getMimeType(),
				url: aFiles[i].getUrl(),
				icon: this.oCommonUtil.getIconFromMimeType(aFiles[i].getMimeType())
			}); 
		}
		var oAttachmentsModel = new sap.ui.model.json.JSONModel({
			attachments : aAttachments			
		});
		
		return oAttachmentsModel;
	},

	
	
	/**
	* Creates the folder selection dialog
	* @memberOf sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil
	* @private
	*/
	createFolderSelectionDialog : function(sPrefixId, sGroupId, fOnFolderSelectionDialogConfirm, fOnFolderSelectionDialogCancel, iWidth, iHeight) {
		var self = this;
		
		// Header Bar
		var fnBack = function(oEvent){
			self.oFolderSelectionDialog.getContent()[0].getController().navigateBack();
		};
		var oHeaderBar = new sap.m.Bar(sPrefixId + "_FolderSelectionDialogHeaderBar", {
			contentLeft:[new sap.m.Button(sPrefixId + "_FolderSelectionDialogHeaderBarBackButton", { type: sap.m.ButtonType.Back,
											visible: false,
											press: fnBack })],
			contentMiddle: [new sap.m.Label(sPrefixId + "_FolderSelectionDialogHeaderBarTitle", {text:this.oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT")})] 
		});
		
		var oOKButton = new sap.m.Button( sPrefixId + "_FolderSelectionDialogOKButton", {
			text: this.oLangBundle.getText("OK_BUTTON_TEXT"),
			press: function(evt){ 
				fOnFolderSelectionDialogConfirm(evt);
				self.oFolderSelectionDialog.close();
			}
		});
		var oCancelButton = new sap.m.Button(sPrefixId + "_FolderSelectionDialogCancelButton", {
			text: this.oLangBundle.getText("CANCEL_BUTTON_TEXT"),
			press: function(evt){ 
				fOnFolderSelectionDialogCancel(evt);
				self.oFolderSelectionDialog.close(); 
				}
		});
		
		this.oFolderSelectionDialog = new sap.m.Dialog(sPrefixId + "_FolderSelectionDialog", {
			beginButton: oOKButton,
			endButton: oCancelButton,
			customHeader: oHeaderBar
		}).addStyleClass("sapUiPopupWithPadding");
		var oFolderSelectionDialogContent = this.createFolderSelectionView(sPrefixId, sGroupId, iWidth, iHeight);
		this.oFolderSelectionDialog.addContent(oFolderSelectionDialogContent);
		
		if(sap.ui.Device.system.phone){
			this.oFolderSelectionDialog.setStretch(true);
		}
		
		return this.oFolderSelectionDialog;
	},
	/**
	* Creates the folder selection view
	* @memberOf sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil
	* @private
	*/
	createFolderSelectionView : function(sPrefixId, sGroupId, iWidth, iHeight) {
		var oFolderView = sap.ui.view({
			id: sPrefixId + "_FolderSelectionView", 
			viewData : {
				controlId: sPrefixId,
				groupId: sGroupId,
				languageBundle: this.oLangBundle,
				oDataUtil: this.oODataUtil,
				oDataModel: this.oJamODataModel,
				folderSelectionDialog: this.oFolderSelectionDialog
			}, 
			type: sap.ui.core.mvc.ViewType.JS, 
			viewName: "sap.collaboration.components.fiori.sharing.FolderSelection"
		});
		
		if(iWidth){
			oFolderView.setWidth(iWidth.toString() + "px");
		}
		
		if(iHeight){
			oFolderView.setHeight(iHeight.toString() + "px");
		}
		
		return oFolderView;
	},	
	/**
	 * Returns the current selected folder 
	 * @memberOf sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil
	 * @private
	 */
	getCurrentFolder: function(){
		if(this.oFolderSelectionDialog){
			return this.oFolderSelectionDialog.getContent()[0].getController().getCurrentFolder();
		}
		return {name: this.oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT"), id:"" };
	},
	/**
	 * Returns the current group id 
	 * @memberOf sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil
	 * @private
	 */
	getCurrentGroupId : function(){
		return this.oFolderSelectionDialog.getContent()[0].getController().sGroupId;
	},
	/**
	 * Reset parameters of folder dialog  
	 * @memberOf sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil
	 * @private
	 */
	resetFolderSelection: function(sGroupId){
		if(this.oFolderSelectionDialog){
			this.oFolderSelectionDialog.getContent()[0].getController().sGroupId = sGroupId;
			this.oFolderSelectionDialog.getContent()[0].getController().sCurrentFolderId = '';
			this.oFolderSelectionDialog.getContent()[0].getController().aFolderBuffer = [];
		}
	},
	/**
	 * Set current folder id 
	 * @memberOf sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil
	 * @private
	 */
	setCurrentFolderId : function(sFolderId){
		this.oFolderSelectionDialog.getContent()[0].getController().sCurrentFolderId = sFolderId;
	}
	
});

}; // end of sap/collaboration/components/fiori/sharing/helper/AttachmentsUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialprofile.Component') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained



jQuery.sap.declare("sap.collaboration.components.socialprofile.Component");
/** 
* Constructor for the Social Profile Component.
* 
* !!! EXPERIMENTAL !!!
* 
* Accepts an object literal <code>mSettings</code> that defines initial 
* property values, aggregated and associated objects as well as event handlers.
* 
* If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
* then the framework assumes property, aggregation, association, event in that order. 
* To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
* or "event:" can be added to the name of the setting (such a prefixed name must be
* enclosed in single or double quotes).
* 
* The supported settings are:
* <ul>
* <li>Properties
* <ul>
* <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Auto) </li>
* <li>{@link #getMemberId memberId} : string </li>
* <li>{@link #getMemberInfo memberInfo} : {object} </li>
* <li>{@link #getOpeningControl openingControl} : {object} </li>
* <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 380px) </li>
* <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 300px) </li>
* 
* @param {string} [sId] id for the new control, generated automatically if no id is given 
* @param {object} [mSettings] initial settings for the new control
* 
* @class Social Profile Component
* @extends sap.ui.core.UIComponent
* 
* The Social Profile Component is a SAPUI5 component that applications can use to display the
* profile information for a specific user. The profile information is coming from SAP Jam. 
* 
* @since version 1.25
* @constructor
* @name sap.collaboration.components.socialprofile.Component
* @public
* @experimental The API is not stable and the UI is not finalized. The implementation for this feature is subject to change.
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.socialprofile.Component",
	/** @lends sap.collaboration.components.socialprofile.Component */
	{
		metadata: {
			version: "1.0",
			includes: ["../resources/css/SocialProfile.css"],
			aggregations: {
	
			},
			properties: {
				placement: {type: "sap.m.PlacementType", group:"Misc", defaultValue: sap.m.PlacementType.Auto},
				memberId: {type: "string", group:"Misc"},
				memberInfo: {type: "object", group:"Misc"},
				openingControl: {type: "object", group:"Misc"},
				height: {type: "sap.ui.core.CSSSize", group:"Dimension", defaultValue: "380px"},
				width: {type: "sap.ui.core.CSSSize", group:"Dimension", defaultValue: "300px"}
			}
		},
		_defaultAttributes: {
			collaborationHostServiceUrl: "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData", 
			smiServiceUrl: "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV" 
		},
		/**
		* Initializes the Component instance after creation. [borrowed from sap.ui.core.UIComponent]
		* @protected
		* @memberOf sap.collaboration.components.socialprofile.Component
		*/
		init: function(){
			this._oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
			this._oLangBundle = this._oCommonUtil.getLanguageBundle();
			this._sUserProfileURL;
			this._sCurrentUserEmail;
		},	
		/**
		* Cleans up the component instance before destruction. [borrowed from sap.ui.core.Component]
		* @protected
		* @memberOf sap.collaboration.components.socialprofile.Component
		*/
		exit: function() {
		},
		/**
		* Function is called when the rendering of the Component Container is started. [borrowed from sap.ui.core.UIComponent]
		* @protected
		* @memberOf sap.collaboration.components.socialprofile.Component
		*/
		onBeforeRendering: function(){
		},
		/**
		* Function is called when the rendering of the Component Container is completed. [borrowed from sap.ui.core.UIComponent]
		* @protected
		* @memberOf sap.collaboration.components.socialprofile.Component
		*/
		onAfterRendering: function(){
		},
		/**
		 * Opens the social profile component
		 * @public
		 * @memberOf sap.collaboration.components.socialprofile.Component
		 */
		open: function(){
			try {
				this._logComponentProperties();
				this._validateInputParameters();
				this._createView();
				this._createSocialPopover();
				this._oPopover.openBy(this.getOpeningControl());
			}
			catch (oError) {
				jQuery.sap.log.error(oError.stack);
				this._oCommonUtil.displayError();
			}
		},
		/**
		* Setter for the Component settings
		* @param {object} oSettings A JSON object used to set the component settings, this object should contains the same properties used in the constructor
		* @public
		* @memberOf sap.collaboration.components.socialprofile.Component
		*/
		setSettings: function(oSettings){
			try {
				if (oSettings) {
					this.setPlacement(oSettings.placement);
					this.setMemberId(oSettings.memberId);
					this.setMemberInfo(oSettings.memberInfo);
					this.setOpeningControl(oSettings.openingControl);
					this.setHeight(oSettings.height);
					this.setWidth(oSettings.width);
				}
				
				else {
					throw new Error("Settings object is undefined");
				}
			}
			catch (oError) {
				jQuery.sap.log.error(oError.stack);
				this._oCommonUtil.displayError();
			}
			
		},
		/**
		 * Creates the social profile view
		 * @private
		 * @memberOf sap.collaboration.components.socialprofile.Component
		 */
		_createView: function(){
			var that = this;
			if (!this._oPopoverView) {
				this._oPopoverView = new sap.ui.view({
					id: this.getId() + "_PopoverView",
					viewData : {
						collaborationHostServiceUrl: this._defaultAttributes.collaborationHostServiceUrl,
						smiServiceUrl: this._defaultAttributes.smiServiceUrl,
						langBundle: this._oLangBundle,
						memberId: this.getMemberId(),
						memberInfo: this.getMemberInfo(),
						popoverPrefix: this.getId(),
						afterUserInfoRetrieved : function( oUserData ){
							if (oUserData) {
								that._sUserProfileURL = oUserData.WebURL;
								
								var oJamButton = sap.ui.getCore().byId(that.getId() + "_JamButton");
								oJamButton.setEnabled(true);
								oJamButton.rerender(); // re-render immediately for the focus to set (focus does not work for disabled controls)
								oJamButton.focus();
							}
						}
					},
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.socialprofile.SocialProfile"
				});
			}
			else {
				this._oPopoverView.getViewData().memberId = this.getMemberId();
				this._oPopoverView.getViewData().memberInfo = this.getMemberInfo();
			}
		},
		/**
		 * Creates the responsive popover for the social profile
		 * @private
		 * @memberOf sap.collaboration.components.socialprofile.Component
		 */
		_createSocialPopover: function(){
			var that = this;
			
			if (!this._oPopover) {
				var oHeaderBar = new sap.m.Bar(this.getId() + "_HeaderBar", {
					contentMiddle: new sap.m.Text({ text : this._oLangBundle.getText("SP_TITLE") }).addStyleClass("popoverheader")
				});			
				this._oPopover = new sap.m.ResponsivePopover(this.getId() + "_Popover", {
					placement: this.getPlacement(),
					showCloseButton: true,
					contentHeight: this.getHeight(),
					contentWidth: this.getWidth(),
					content: [this._oPopoverView],
					customHeader: oHeaderBar,
					beginButton: new sap.m.Button(this.getId() + "_JamButton", {
						text: this._oLangBundle.getText("SP_OPEN_JAM_BUTTON"), 
						enabled: false,
						press: function(){
							window.open(that._sUserProfileURL, "_blank");
						}
					}),
					beforeOpen: function(){
						if (that._sCurrentUserEmail !== that.getMemberId()) {
							sap.ui.getCore().byId(that.getId() + "_JamButton").setEnabled(false);
						}
						that._sCurrentUserEmail = that.getMemberId();
					}
				}).addStyleClass("popover");
			}
			
			if (this._oPopover.getPlacement() !== this.getPlacement()) {
				this._oPopover.setPlacement(this.getPlacement());
			}
			if (this._oPopover.getContentHeight() !== this.getHeight()) {
				this._oPopover.setContentHeight(this.getHeight());
			}
			if (this._oPopover.getContentWidth() !== this.getWidth()) {
				this._oPopover.setContentWidth(this.getWidth());
			}
		},
		/**
		 * Log the component properties
		 * @private
		 * @memberOf sap.collaboration.components.socialprofile.Component
		 */
		_logComponentProperties: function(){
			jQuery.sap.log.debug("Social Profile Component properties:", "", "sap.collaboration.components.socialprofile.Component._logComponentProperties()");
			jQuery.sap.log.debug("placement: " + this.getPlacement());
			jQuery.sap.log.debug("memberId: " + this.getMemberId());
			jQuery.sap.log.debug("openingControl: " + this.getOpeningControl());
			jQuery.sap.log.debug("height: " + this.getHeight());
			jQuery.sap.log.debug("width: " + this.getWidth());
		},
		/**
		 * Validate input parameters
		 * @private
		 * @throws Error - an object that contains that error thrown if the validation for the input parameters fails
		 * @memberOf sap.collaboration.components.socialprofile.Component
		 */
		_validateInputParameters: function(){
			if (!this.getMemberId()) {
				throw new Error("MemberId is undefined");
			}
			
			if (!this.getOpeningControl()) {
				throw new Error("Opening control is undefined");
			}
		}
	}
);
/**
 * Getter for property <code>placement</code>.
 * Gets the placement of the Social Profile
 *
 * Default value is <code>sap.m.PlacementType.Auto</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getPlacement
 * @function
 */
/**
 * Setter for property <code>placement</code>.
 * Sets the placement of the Social Profile
 * 
 * Default value is <code>sap.m.PlacementType.Auto</code>
 *
 * @param {sap.m.PlacementType} sPlacement  new value for property <code>placement</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setPlacement
 * @function
 */
/**
 * Getter for property <code>memberId</code>.
 * Gets the SAP Jam member id of the user
 *
 * @return {string} the value of property <code>memberId</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getMemberId
 * @function
 */
/**
 * Setter for property <code>memberId</code>.
 * Sets the memberId of the user
 * 
 * @param {string} sMemberId  new value for property <code>memberId</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setMemberId
 * @function
 */
/**
 * Getter for property <code>memberInfo</code>.
 * Gets the SAP Jam member information
 *
 * @return {object} member information <code>memberInfo</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getMemberInfo
 * @function
 */
/**
 * Setter for property <code>memberInfo</code>.
 * Sets the memberInformation of the user
 * 
 * @param {object} oMemberInfo  new value for property <code>memberInfo</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setMemberInfo
 * @function
 */
/**
 * Getter for property <code>openingControl</code>.
 * Gets the opening control for the Social Profile
 *
 * @return {object} the value of property <code>openingControl</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getOpeningControl
 * @function
 */
/**
 * Setter for property <code>openingControl</code>.
 * Sets the opening control for the Social Profile
 * 
 * @param {object} oOpeningControl  new value for property <code>openingControl</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setOpeningControl
 * @function
 */
/**
 * Getter for property <code>height</code>.
 * Gets the height of the Social Profile
 *
 * Default value is <code>380px</code>
 * 
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getHeight
 * @function
 */
/**
 * Setter for property <code>height</code>.
 * Sets the height of the Social Profile
 * 
 * Default value is <code>380px</code>
 *  
 * @param {string} sHeight  new value for property <code>height</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setHeight
 * @function
 */
/**
 * Getter for property <code>width</code>.
 * Gets the width of the Social Profile
 *
 * Default value is <code>300px</code>
 * 
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getWidth
 * @function
 */
/**
 * Setter for property <code>width</code>.
 * Sets the width of the Social Profile
 * 
 * Default value is <code>300px</code>
 *  
 * @param {string} sWidth  new value for property <code>width</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setWidth
 * @function
 */
}; // end of sap/collaboration/components/socialprofile/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialprofile.SocialProfile.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.socialprofile.SocialProfile.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */



sap.ui.controller("sap.collaboration.components.socialprofile.SocialProfile", {

	/**************************************************************************************
	 * PROTECTED METHODS
	 **************************************************************************************/
	/**
	* Called when a controller is instantiated and its View controls (if available) are already created.
	* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	* @protected
	* @memberOf sap.collaboration.components.socialprofile.SocialProfile
	*/
	onInit: function() {
		this.getView().getViewData().collaborationHostServiceUrl ? 
				this._sJamODataServiceUrl = this.getView().getViewData().collaborationHostServiceUrl : this._sJamODataServiceUrl = "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData";
		this.getView().getViewData().smiServiceUrl ? this._sSMIODataServiceUrl = this.getView().getViewData().smiServiceUrl : this._sSMIODataServiceUrl =  "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV";
		this._oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		this._oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		this._sPrefixId = this.getView().getId();
		this._sJamURL = "";
		this._sJamUserId = "";
		this._sPopoverPrefix = this.getView().getViewData().popoverPrefix;
		this._fnUserInfoFetchedCallback = this.getView().getViewData().afterUserInfoRetrieved;
		this._initializeModels();
	},

	/**
	* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
	* (NOT before the first rendering! onInit() is used for that one!).
	* @protected
	* @memberOf sap.collaboration.components.socialprofile.SocialProfile
	*/
	onBeforeRendering: function() {
		if (this._memberId !== this.getView().getViewData().memberId) { // if the same user profile is not clicked, then fetch the user's data
			this.getView().resetHeader(); // this is done in case the header is set to 'No user' in the previous call (where the image, user full name and role have been removed)
			this._clearViewData(); // clear fields
			this._memberId = this.getView().getViewData().memberId;	
			
			var oMember = this.getView().getViewData().memberInfo;
			if (jQuery.isEmptyObject(oMember)) { // if no member information was passed, fetch the data
				this._getMember();
			}
			else {
				this._setMember(oMember);
				if (this._fnUserInfoFetchedCallback) {
					this._fnUserInfoFetchedCallback(oMember); // execute the callback
				}
			}
		}
	},
	
	/**************************************************************************************
	 * PRIVATE METHODS
	 **************************************************************************************/
	/**
	 * Initialize models
	 * @private
	 * @memberOf sap.collaboration.components.socialprofile.SocialProfile
	 */
	_initializeModels: function(){
		var bAsJSON = true;
    	this._oJamODataModel = new sap.ui.model.odata.ODataModel(this._sJamODataServiceUrl, bAsJSON);
		this._oJSONModel = new sap.ui.model.json.JSONModel({});
		this.getView().setModel(this._oJSONModel);
	},
	
	/**
	 * Fetch the SAP Jam user profile data
	 * @private
	 * @memberOf sap.collaboration.components.socialprofile.SocialProfile
	 */
	_getMember: function(){
		var that = this;
		if (this._oSocialProfileRequest) {
			this._oSocialProfileRequest.abort(); // abort an existing request, this is required for cases where the user clicks on a different user profile before the previous request is complete
		}
		
		var sPath = "Members_FindByEmail";
		var mParameters = {};
		mParameters.urlParameters = {
				"Email" : "'" + that._memberId + "'", 
				"$expand" : "MemberProfile/PhoneNumbers",
				"$select" : "Id,FullName,Title,Email,WebURL,MemberProfile"			
		};
		mParameters.success = function(oData, response){
			var oMember = that._oCommonUtil.getODataResult(oData);
			if (!jQuery.isEmptyObject(oMember)) {
				
				var aPhoneNumbers = oMember.MemberProfile.PhoneNumbers.results;
				var iPhoneNumbersLength = aPhoneNumbers.length;
				for(var i = 0;  i < iPhoneNumbersLength; i++) {
					if (aPhoneNumbers[i]['PhoneNumberType'] === 'Work') {
						oMember.MemberProfile.WorkPhoneNumber =  aPhoneNumbers[i]['PhoneNumber'];
					}
					if (aPhoneNumbers[i]['PhoneNumberType'] === 'Mobile') {
						oMember.MemberProfile.MobilePhoneNumber = aPhoneNumbers[i]['PhoneNumber'];
					}
				}
				that._oJSONModel.setData(oMember);
				that._sJamUserId = oMember.Id;
				
				var sImageURL = that._buildThumbnailImageURL(that._sJamUserId);
				sap.ui.getCore().byId(that._sPrefixId + "_HeaderUserImage").setSrc(sImageURL);
				
				if (that._fnUserInfoFetchedCallback) {
					that._fnUserInfoFetchedCallback(oMember); // execute the callback
				}
			}
		};
		mParameters.error = function(oError){
			if (oError.response && oError.response.statusCode) {
				jQuery.sap.log.error("SAP Jam request failed at sap.collaboration.components.socialprofile.SocialProfileController._getMember()");
				that.getView().setHeaderNoUser();
			}
		};
		this._oSocialProfileRequest = this._oJamODataModel.read(sPath, mParameters);
	},
	/**
	 * Fills the data model with the SAP Jam profile information
	 * @param {object} oMember - The member profile information  
	 * @private
	 * @memberOf sap.collaboration.components.socialprofile.SocialProfile
	 */
	_setMember: function(oMember){
		var oMemberData = {
				"UserImage": oMember.picture,
				"Id": oMember.id,
				"FullName": oMember.fullname,
				"Title": oMember.title,
				"Email": oMember.email,
				"MemberProfile": {
					"Address" : oMember.address,
					"WorkPhoneNumber" : oMember.workPhoneNumber,
					"MobilePhoneNumber" : oMember.mobilePhoneNumber
				}
		};
		this._sJamUserId = oMember.id;
		this._oJSONModel.setData(oMemberData);
	},
	/**
	 * Clear the fields in the view
	 * @private
	 * @memberOf sap.collaboration.components.socialprofile.SocialProfile
	 */
	_clearViewData: function(){
		sap.ui.getCore().byId(this._sPrefixId + "_HeaderUserImage").setSrc();
		sap.ui.getCore().byId(this._sPrefixId + "_FullName").setText();
		sap.ui.getCore().byId(this._sPrefixId + "_Role").setText();	
		sap.ui.getCore().byId(this._sPrefixId + "_MobileNumber").setText();
		sap.ui.getCore().byId(this._sPrefixId + "_WorkNumber").setText();
		sap.ui.getCore().byId(this._sPrefixId + "_Email").setText();
		sap.ui.getCore().byId(this._sPrefixId + "_CompanyAddress").setText();
	},

	/**
	 * Returns a URL for the ThumbnailImage
	 * @param {string} sUserId
	 * @return {string}
	 * @private
	 * @memberOf sap.collaboration.components.socialprofile.SocialProfile
	 */
	_buildThumbnailImageURL: function(sUserId) {
		return this._sJamODataServiceUrl + "/Members('" + jQuery.sap.encodeURL(sUserId) + "')/ThumbnailImage/$value";
	}	
});

}; // end of sap/collaboration/components/socialprofile/SocialProfile.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler");


sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler",{
	/**
	 * Constructor for the Jam Data handler
	 * This class is responsible for getting and posting requests to Jam
	 * 
	 * @class JamDataHandler
	 * @name sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 *
	 * @constructor
	 * @param oCollabModel Collaboration Host OData Service Model (Jam)
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	constructor: function(oCollabModel) {	
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler");
		this._oOdataUtil = new sap.collaboration.components.utils.OdataUtil();
				
		this._oCollabModel = oCollabModel;		
		this._oExternalBObuffer = {}; // buffer for external object from Jam
	},

	// Each request is fully defined by the following information:
	// 1. The request URL.
	// 2. The parameters to add the URL the HTTP request is made to.
	// 3. What to log in case of a success.
	// 4. What to log in case of an error.
	_requestsData: {
		getGroups: {
			url: function(sExternalObjectId) {
				return "/ExternalObjects('" +jQuery.sap.encodeURL(sExternalObjectId) + "')/Groups";
			},
			urlParameters: function() {
				return {};
			},
			successLog: function(oData, response) {
				return "Groups were successfully retrieved.";
			},
			errorLog: function(oError) {
				this._oLogger.error("Failed to retrieve groups: " + oError.response.statusText);
			}
		},
		getExternalObjectByExidAndObjectType: {
			url: function(sExid, sObjectType, sNextLink) {
				return sNextLink ? sNextLink : "/ExternalObjects_FindByExidAndObjectType";
			},
			urlParameters: function(sExid, sObjectType) {
				return {
					"Exid": "'" + sExid.replace(/'/g, "''") + "'",
					"ObjectType": "'" + sObjectType.replace(/'/g, "''") + "'",
					"$expand": "FeedEntries/Creator"
				};
			},
			successLog: function(oData, response) {
				return "External object found: " + oData.results.Name;
			},
			errorLog: function(oError) {
				this._oLogger.error(oError.response.statusText);
			}
		},
		getFeedEntries: {
			url: function(sExternalObjectId, sNextLink) {
				return sNextLink ? sNextLink : "/ExternalObjects" + "('" + jQuery.sap.encodeURL(sExternalObjectId) + "')/FeedEntries";
			},
			urlParameters: function() {
				return {
					"$expand": "Creator/MemberProfile"
				};
			},
			successLog: function(oData, response) {
				return "Feed entries were successfully retrieved.";
			},
			errorLog: function(oError) {
				this._oLogger.error("Failed to retrieve feed entries: " + oError.response.statusText);
			}
		},
		getSuggestions: {
			url: function() {
				return "/Members_Autocomplete";
			},
			urlParameters: function(sValue, sGroupId) {
				var urlParameters = {
					"Query": "'" + sValue + "'",
					"$top": "4"
				};
				if (sGroupId) {
					urlParameters.GroupId = "'" + sGroupId + "'";
				}
				return urlParameters;
			},
			successLog: function(oData, response) {
				return "";
			},
			errorLog: function(oError) {
				this._oLogger.error("");
			}
		},
		getAtMentions: {
			url: function(sFeedEntryId) {
				return "/FeedEntries('" + jQuery.sap.encodeURL(sFeedEntryId) + "')/AtMentions";
			},
			urlParameters: function() {
				return {};
			},
			successLog: function(oData, response) {
				return "@mentions were successfully retrieved.";
			},
			errorLog: function(oError) {
				this._oLogger.error("Failed to retrieve the @mentions: " + oError.response.statusText, oError.stack);
			}
		},
		getReplies: {
			url: function(sFeedEntryId, sNextLink) {
				return sNextLink ? sNextLink : "/FeedEntries('" + jQuery.sap.encodeURL(sFeedEntryId) + "')/Replies";
			},
			urlParameters: function() {
				return {
					'$orderby': 'CreatedAt desc',
					'$expand': 'Creator'
				};
			},
			successLog: function(oData, response) {
				return "Replies were successfully retrieved.";
			},
			errorLog: function(oError) {
				if(oError.response){
					this._oLogger.error("Failed to retrieve replies: " + oError.response.statusText, oError.stack);
				}
			}
		}
	},
	
	/**
	 * This method encodes the pattern used for many of the HTTP GET requests.
	 * @param sRequestName - The name of the HTTP GET request.
	 * @param oURLParameters - Additional URL parameters to append to the HTTP GET request's URL.
	 * If the argument received by this method is undefined, null, or an empty object ({}),
	 * then no parameters are appended.
	 * @returns {object} object containing the object to abort the request and promise
	 * @private
	 */
	_doAllTheThings: function(sRequestName, oURLParameters) {
		var that = this;
		
		// This obtains all the request specific info for the input request.
		var requestObject = this._requestsData[sRequestName];
		
		// The arguments object is an array like object. The arguments are accessible
		// like elements of an array. For example, the first argument is retrieved
		// with arguments[0]. This method should always have the first two arguments
		// be the name of the request and an object specifying additional URL parameters
		// to append to the HTTP GET request's URL. Below, we create an array object from
		// the arguments object and remove from that array the first two arguments. What
		// remains are the arguments passed to the method calling this method. These
		// arguments are then passed to the request specific functions.
		var requestArguments = Array.prototype.slice.apply(arguments);
		requestArguments.shift(); // Removes the name from the object.
		requestArguments.shift(); // Removes the URL parameters from the object.
		
		// This is the deferred object which will be used to notify the user
		// that the request is complete.
		var oDeferred = new jQuery.Deferred();
		
		// The success callback function. Passed to the ODataModel object when
		// initiating the request.
		var success = function(oData, response) {
			that._oLogger.info(requestObject.successLog.apply(that, [oData, response]));
			oDeferred.resolve(oData, response);
		};
		
		// The error callback function. Passed to the ODataModel object when
		// initiating the request.
		var error = function(oError) {
			requestObject.errorLog.apply(that, [oError]);
			oDeferred.reject(oError);
		};
		
		// The URL parameters. The URL parameters passed as arguments are
		// added to those already specified for the request. If a URL argument
		// is already specified, then the one passed through the argument will
		// override the one already specified.
		var oCombinedURLParameters =  requestObject.urlParameters.apply(that, requestArguments);
		if (Object.prototype.toString.apply(oURLParameters) === "[object Object]") {
			for (var URLParameter in oURLParameters) {
				oCombinedURLParameters[URLParameter] = oURLParameters[URLParameter];
			}
		}
		
		// Parameters controlling some aspects of the request. Passed to the ODataModel
		// object when initiating the request.
		var mParameters = {
			context: null,
			urlParameters: oCombinedURLParameters,
			async: true,
			filters: [],
			sorters: [],
			success: success,
			error: error
		};
		
		// Return an object containing the request, which is abortable, and a promise to attach event handlers to.
		return {
			request: this._oCollabModel.read(requestObject.url.apply(that, requestArguments), mParameters),
			promise: oDeferred.promise()
		};
	},
	
	/**********************************************************************
	 * GET request functions
	 **********************************************************************/
	
	/**
	 * Perform GET request to read the groups associated to an external object.
	 * The following inputs are expected:
	 * 1.
	 *   sExternalObjectId is a non empty string.
	 *   sNextLink null.
	 *   oURLParameter is either undefined, null, an empty object ({}) or a non empty object.
	 * 2.
	 *   sExternalObject is null.
	 *   sNextLink is a non empty string.
	 *   oURLParameters is either undefined, null, an empty object ({}) or a non empty object.
	 * 
	 * Any other combinations don't make sense.
	 * 
	 * @param {string} sExternalObjectId - external object id from Jam
	 * @param {string} sNextLink - next link to get the next page of groups
	 * @param {object} oURLParameters - An object of name-value pairs, where each name and value
	 * will be used to append a parameter of that name with the corresponding value to the
	 * request URL. Example: Suppose the base URL is http://<hostname>/resource?$skip=2, and the argument
	 * is {"$top":"5"}, then the resulting request URL will be http://<hostname>/resource?$skip=2&$top=5.
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getGroups: function(sExternalId, sNextLink, oURLParameters) {
		return this._doAllTheThings("getGroups", oURLParameters, sExternalId, sNextLink);
	},
	
	/**
	 * Performs a GET request to get an external object from Jam by exid and object type
	 * 
	 * @param {string} sExid - OData URL of the business object being shared. This URL is URL for the OData service that exposes the business object that is in the SAP system.
	 * @param {string} sObjectType - OData service's metadata URL appended with a hash (#) symbol and the business object's entity set. 
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getExternalObjectByExidAndObjectType: function(oExternalObject, sNextLink) {
		var sBufferKey = oExternalObject.ObjectType + oExternalObject.Exid;
		this._oExternalBObuffer[sBufferKey] = oExternalObject;
		return this._doAllTheThings("getExternalObjectByExidAndObjectType", null, oExternalObject.Exid, oExternalObject.ObjectType, sNextLink);
	},
	
	/**
	 * Perform GET request to read the feed entries of an external object
	 * 
	 * @param {string} sExternalObjectId - external object id from Jam
	 * @param {string} sNextLink - next link to get the next page of feed entries
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getFeedEntries: function(sExternalObjectId, sNextLink) {
		return this._doAllTheThings("getFeedEntries", null, sExternalObjectId, sNextLink);
	},
	
	/**
	 * Performs a GET request to get the Autocomplete for a specific value in SAP Jam
	 * 
	 * @param {string} sValue - The value entered for the Autocomplete and will be used to search in SAP Jam.
	 * @param {string} [sGroupId] - The Group Id
	 * @returns {object} an object which has an abort function to abort the current request
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getSuggestions: function(sValue, sGroupId) {
		return this._doAllTheThings("getSuggestions", null, sValue, sGroupId);
	},
	
	/**
	 * Get the @mentions for a specific FeedEntry
	 * 
	 * @param {string} sFeedEntryId - Feed entry ID
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getAtMentions: function(sFeedEntryId) {
		return this._doAllTheThings("getAtMentions", null, sFeedEntryId);
	},
	
	/**
	 * Get the Replies for a specific FeedEntry
	 * 
	 * @param {string} sFeedEntryId - Feed entry ID
	 * @param {string} sNextLink - next link to get the next set of replies
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getReplies: function(sFeedEntryId, sNextLink) {
		return this._doAllTheThings("getReplies", null, sFeedEntryId, sNextLink);
	},
	
	/**
	 * Gets the external object from Jam (with buffer)
	 * 1 - Find the external object by Exid and Object Type
	 * 2 - If the external object is not found, create the external object in Jam 
	 * 
	 * @param {object} oExternalObjectMapping - Set of URLs used by Jam to create an external object.
	 * 			{string} oExternalObjectMapping.Exid - OData URL of the business object being shared. This URL is URL for the OData service that exposes the business object that is in the SAP system.
	 * 			{string} oExternalObjectMapping.ODataLink - Same as Exid.
	 * 			{string} oExternalObjectMapping.ObjectType - OData service's metadata URL appended with a hash (#) symbol and the business object's entity set. 
	 * 			{string} oExternalObjectMapping.ODataMetadata - Same as ObjectType.
	 * 			{string} oExternalObjectMapping.ODataAnnotations - Annotations URL. Specifies to Jam what to display of the business object.
	 * @returns {jQuery.Deferred} Promise object
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getExternalObject: function(oExternalObjectMapping){
		var that = this;
		var sBufferKey = oExternalObjectMapping.ObjectType + oExternalObjectMapping.Exid;
		var oPromise = jQuery.Deferred();
		
		if(!this._oExternalBObuffer[sBufferKey]){													// if external object is not in buffer
			var creatingExternalObject = this.postExternalObject(oExternalObjectMapping);			// create external object in Jam
																									// if exist jam will return the existing external object
			creatingExternalObject.promise.done(function(oData, response){
				var oExternalObject = oData.results;
				that._oExternalBObuffer[sBufferKey] = oExternalObject; 								// save to buffer
				oPromise.resolve(oExternalObject);
			});
			creatingExternalObject.promise.fail(function(oError){
				oPromise.reject(oError);				
			});
		}
		else{
			oPromise.resolve(this._oExternalBObuffer[sBufferKey]);
		}
		return oPromise.promise();
	},
	
	/**
	 * Performs a GET request to get the Feed Entry from SAP Jam
	 * 
	 * @param {string} sActivityId - Activity Id for the Feed Entry
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 * */
	getFeedEntryFromActivity: function(sActivityId){
		var that = this;
		var sEndpoint = "/Activities('" + jQuery.sap.encodeURL(sActivityId) + "')/FeedEntry";
		
		var oPromise = jQuery.Deferred();
		var fSuccess = function(oData, response){
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			that._oLogger.error("Failed to get the feed entry: "+ oError.response.statusText);
			oPromise.reject(oError);
		};
		var mParameters = {
				urlParameters: {
					$expand: "Creator"
				},
				async: true,
				success: fSuccess, 
				error: 	fError
		};
		this._oCollabModel.read(sEndpoint, mParameters);
		
		return oPromise.promise();
	},
	
	/**
	 * Perform a $batch request to get the info for several members 
	 * 
	 * @param {array} aUserEmails - array of emails
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getUserInfoBatch: function(aUserEmails){
		var that = this;
		
		var aBatchReadOperations = [];
		aUserEmails.forEach(function(sUserEmail){
			var sEndpoint = "/Members_Autocomplete?Query='"+jQuery.sap.encodeURL(sUserEmail)+"'&$expand=MemberProfile";	
			var sMethod = "GET";
			var oData = null;
			var oParameters = null;
			
			aBatchReadOperations.push(that._oCollabModel.createBatchOperation( sEndpoint, sMethod, oData, oParameters));
		});
		
		this._oCollabModel.addBatchReadOperations(aBatchReadOperations);
		
		var bAsync = true;
		var bIsOkToRefreshSecurityToken = true;
		var oPromise = jQuery.Deferred();
		var fSuccess = function(oData, response){
			var aResults = that._oOdataUtil.parseBatchResponse(oData.__batchResponses);
			oPromise.resolve(aResults, response);
		};
		var fError = function(oError){
			if(oError.response.statusCode === 403 && bIsOkToRefreshSecurityToken){
				that._oCollabModel.refreshSecurityToken(
						function(){
							bIsOkToRefreshSecurityToken = false;
							that._oCollabModel.addBatchReadOperations(aBatchReadOperations);
							that._oCollabModel.submitBatch(fSuccess, fError, bAsync);
						},
						function(oRefreshSecurityTokenError){
							that._oLogger.error("Failed to get member information: "+ oRefreshSecurityTokenError.response.statusText);
							oPromise.reject(oRefreshSecurityTokenError);
						},
						true
					);
			}
			else {
				that._oLogger.error("Failed to get member information: "+ oError.response.statusText);
				oPromise.reject(oError);
			}
		};
		return {
			request: this._oCollabModel.submitBatch(fSuccess, fError, bAsync),
			promise: oPromise.promise() 
		};
	},
	
	/**
	 * Perform a $batch request to get the @mentions for all feeds 
	 * 
	 * @param {array} aAtMentions - array of @mentions
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getAtMentionsBatch: function(aFeedEntryIds){
		var that = this;
		var iMinBatchSize = 10;
		var aBatchReadOperations = [];
		aFeedEntryIds.forEach(function(sFeedEntryId, index){
			if(index < iMinBatchSize){
				var sEndpoint = "/FeedEntries('" + jQuery.sap.encodeURL(sFeedEntryId) + "')/AtMentions";
				var sMethod = "GET";
				var oData = null;
				var oParameters = null;
						
				aBatchReadOperations.push(that._oCollabModel.createBatchOperation(sEndpoint, sMethod, oData, oParameters));
			}
		});
		
		this._oCollabModel.addBatchReadOperations(aBatchReadOperations);
		var bAsync = true;
		var bIsOkToRefreshSecurityToken = true;
		var oPromise = new jQuery.Deferred();
		var fSuccess = function(oData, response){
			var aResults = that._oOdataUtil.parseBatchResponse(oData.__batchResponses);
			oPromise.resolve(aResults, response);
		};
		var fError = function(oError){
			if(oError.response.statusCode === 403 && bIsOkToRefreshSecurityToken){
				that._oCollabModel.refreshSecurityToken(
						function(){
							bIsOkToRefreshSecurityToken = false;
							that._oCollabModel.addBatchReadOperations(aBatchReadOperations);
							that._oCollabModel.submitBatch(fSuccess, fError, bAsync);
						},
						function(oRefreshSecurityTokenError){
							that._oLogger.error("Failed to get the feeds @mentions: "+ oRefreshSecurityTokenError.response.statusText);
							oPromise.reject(oRefreshSecurityTokenError);
						},
						true
					);
			}
			else {
				that._oLogger.error("Failed to get the feeds @mentions: "+ oError.response.statusText);
				oPromise.reject(oError);
			}
		};
		return {
			request: this._oCollabModel.submitBatch(fSuccess, fError, bAsync),
			promise: oPromise 
		};
	},
	
	/**
	 * 
	 * @returns {___anonymous16587_16678}
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getSender: function(){
		var that = this;
		var sEndpoint = "/Self";
		
		var oPromise = jQuery.Deferred();
		var fSuccess = function(oData, response){
			that._oLogger.info("The reply was successfully posted.");
			oPromise.resolve(oData.results);
		};
		var fError = function(oError){
			that._oLogger.error("Failed to retrieve the sender: " + oError.response.statusText, oError.stack);
			oPromise.reject(oError);
		};
		var mParameters = {
				urlParameters: null,
				async: true,
				success: fSuccess, 
				error: 	fError
		};
		
		return { 
			request: this._oCollabModel.read(sEndpoint, mParameters),
			promise: oPromise.promise() 
		};
	},
	
	/**
	 * Get the Feed Entries of a Group
	 * @param {string} sGroupId - Group ID
	 * @param {string} sNextLink
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getGroupFeedEntries: function(sGroupId, sNextLink){
		var that = this;
		
		var sEndpoint = ""; 
		if(sNextLink){
			sEndpoint = sNextLink;
		}
		else {
			sEndpoint = "/Groups('"+ jQuery.sap.encodeURL(sGroupId) +"')/FeedEntries";
		}

		var oPromise = jQuery.Deferred();		
		var fSuccess = function(oData, response){
			that._oLogger.info("The feed entries for the group '" + sGroupId + "' were retrieved.");
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			that._oLogger.error("Failed to get feed entries for the group '" + sGroupId + "'." );
			oPromise.reject(oError);
		};
		var mParameters = {
			context: null,
			urlParameters: {
				$expand: "Group,Creator,TargetObjectReference"
			},
			async: true,
			success: fSuccess, 
			error: 	fError
		};
		
		return {
			request: this._oCollabModel.read(sEndpoint, mParameters),
			promise: oPromise.promise()
		};
	},
	
	/**
	 * Get the Feed Entries of a Group Object Feed
	 * @param {string} sGroupId - Group ID
	 * @param {string} sExternalObjectId - Jam External Object ID
	 * @param {string} sNextLink - OData NextLink to retrieve next page of feed entries
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	getGroupExternalObjectFeedEntries : function(sGroupId, sExternalObjectId, sNextLink) {
		var that = this;
		var sEndPoint = "";
		var oPromise = jQuery.Deferred();
		
		if(sNextLink){
			sEndPoint = sNextLink;
		}
		else{
			sEndPoint = "/GroupExternalObjects(GroupId='" + jQuery.sap.encodeURL(sGroupId) + "',ExternalObjectId='" + jQuery.sap.encodeURL(sExternalObjectId) + "')/FeedEntries";
		}
		
		var fSuccess = function(oData, response){
			that._oLogger.info("The feed entries for the group object wall was retrieved. Group Id is:'" + sGroupId + "', External Object Id is:" + sExternalObjectId + ".");
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			that._oLogger.error("Failed to get feed entries for the group object wall. Group Id is:'" + sGroupId + "', External Object Id is:" + sExternalObjectId + ".");
			oPromise.reject(oError);
		};
		
		var mParameters = {
				context: null,
				urlParameters: {
					$expand: "Group,Creator,TargetObjectReference"
				},
				async: true,
				success: fSuccess, 
				error: 	fError
			};
		
		return {
			request: this._oCollabModel.read(sEndPoint, mParameters),
			promise: oPromise.promise()
		};
	},
	
	/**********************************************************************
	 * POST request functions
	 **********************************************************************/
	
	/**
	 * Add a post to an external object in Jam. 
	 * 1 - Find the external object in Jam 
	 * 2 - Post the feed entry to the object.
	 * 
	 * @param {string} sContent - Feed content to be posted
	 * @param {object} oExternalObject
	 * 
	 * @returns {jQuery.Deferred} Promise object resolving with a feed entry
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	addPostToExternalObject: function(sContent, oExternalObject){
		var that = this;
		
		var oPromise = 
			this.postFeedEntryToObject(oExternalObject, sContent).promise	// post feed entry to object
				.then(function(oData, response){
					var oActivity = oData.results;
					return that.getFeedEntryFromActivity(oActivity.Id);
				}).then(function(oData, response){
					var oFeedEntry = oData.results;
					return oFeedEntry;
				}).fail(function(oError){
					return oError;
				});
			
		return oPromise.promise();
	},
	
	/**
	 * Performs a POST request to create an external object in Jam
	 * 
	 * @param {object} oExternalObjectMapping - Set of URLs used by Jam to create an external object.
	 * 			{string} oExternalObjectMapping.Exid - OData URL of the business object being shared. This URL is URL for the OData service that exposes the business object that is in the SAP system.
	 * 			{string} oExternalObjectMapping.ODataLink - Same as Exid.
	 * 			{string} oExternalObjectMapping.ObjectType - OData service's metadata URL appended with a hash (#) symbol and the business object's entity set. 
	 * 			{string} oExternalObjectMapping.ODataMetadata - Same as ObjectType.
	 * 			{string} oExternalObjectMapping.ODataAnnotations - Annotations URL. Specifies to Jam what to display of the business object.
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	postExternalObject: function(oExternalObjectMapping){
		var that = this;
		var sEndpoint = "/ExternalObjects";
		var oDataPayload = oExternalObjectMapping;
		
		var oPromise = jQuery.Deferred();
		var postExternalObjectSuccess = function(oData, response){
			that._oLogger.info("External object created. " + oData.results.Name);
			oPromise.resolve(oData, response);
		};
		var postExternalObjectError = function(oError){
			that._oLogger.error("Failed to create external object: " + oError.response.statusText);
			oPromise.reject(oError);
		};
		var mParameters = {
				context: null,
				urlParameters: null,
				async: true,
				success: postExternalObjectSuccess, 
				error: 	postExternalObjectError
		};
		
		return {
			request: this._oCollabModel.create(sEndpoint, oDataPayload, mParameters),
			promise: oPromise.promise() 
		};
	},
	
	/**
	 * Performs a POST request to create a feed entry to the object feed of an existing external object in Jam
	 * 
	 * @param {object} oExternalObject - external object from Jam
	 * @param {string} sContent - Desired text for the feed entry
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	postFeedEntryToObject: function(oExternalObject, sContent){
		var that = this;
		var sEndpoint = "/Activities";
		var oObject = {};
		oObject.__metadata = oExternalObject.__metadata;
		var oDataPayload = { "Content": sContent, "Object":  oObject, "Verb": "comment" };
		var bIsOkToRefreshSecurityToken = true; 
		
		var oPromise = jQuery.Deferred();
		var fSuccess = function(oData, response){
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			if(oError.response.statusCode === 403 && bIsOkToRefreshSecurityToken){
				that._oCollabModel.refreshSecurityToken(
						function(){
							bIsOkToRefreshSecurityToken = false;
							that._oCollabModel.create(sEndpoint, oDataPayload, mParameters);
						},
						function(oRefreshSecurityTokenError){
							that._oLogger.error("Failed to get the activity: "+ oRefreshSecurityTokenError.response.statusText);
							oPromise.reject(oRefreshSecurityTokenError);
						},
						true
					);
			}
			else {
				that._oLogger.error("Failed to get the activity: "+ oError.response.statusText);
				oPromise.reject(oError);
			}
		};
		var mParameters = {
				context: null,
				urlParameters: null,
				async: true,
				success: fSuccess, 
				error: 	fError
		};
		
		return { 
			request: this._oCollabModel.create(sEndpoint, oDataPayload, mParameters),
			promise: oPromise.promise() 
		};
	},
	
	/**
	 * Post a Reply for a specific FeedEntry
	 * 
	 * @param {string} sFeedEntryId - Feed entry ID
	 * @param {string} sReplyText - Reply text to post 
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	postReply: function(sFeedEntryId, sReplyText){
		var that = this;
		var sEndpoint =  "/FeedEntries('" + jQuery.sap.encodeURL(sFeedEntryId) + "')/Replies";
		var oDataPayload = { "Text": sReplyText };
		var bIsOkToRefreshSecurityToken = true; 
		
		var oPromise = jQuery.Deferred();		
		var fSuccess = function(oData, response){
			that._oLogger.info("The reply was successfully posted.");
			oPromise.resolve(oData);
		};
		var fError = function(oError){
			if(oError.response.statusCode === 403 && bIsOkToRefreshSecurityToken){
				that._oCollabModel.refreshSecurityToken(
						function(){
							bIsOkToRefreshSecurityToken = false;
							that._oCollabModel.create(sEndpoint, oDataPayload, mParameters);
						},
						function(oRefreshSecurityTokenError){
							that._oLogger.error("Failed to post reply: " + oRefreshSecurityTokenError.response.statusText, oRefreshSecurityTokenError.stack);
							oPromise.reject(oRefreshSecurityTokenError);
						},
						true
					);
			}
			else {
				that._oLogger.error("Failed to post reply: " + oError.response.statusText, oError.stack);
				oPromise.reject(oError);
			}
		};
		var mParameters = {
				context: null,
				urlParameters: null,
				async: true,
				success: fSuccess, 
				error: 	fError
		};

		return { 
			request: this._oCollabModel.create(sEndpoint, oDataPayload, mParameters),
			promise: oPromise.promise()
		};
	},
	
	/**
	 * Post a Feed Entry to a Group
	 * @param {string} sGroupId - Group ID
	 * @param {string} sText - Desired text for the feed entry
	 * @returns {object} object containing the object to abort the request and promise
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	postGroupFeedEntry: function(sGroupId, sText){
		var that = this;
		
		var sEndpoint = "/Groups('"+ jQuery.sap.encodeURL(sGroupId) +"')/FeedEntries";
		
		var oDataPayload = { "Text": sText };
		
		var oPromise = jQuery.Deferred();		
		var fSuccess = function(oData, response){
			that._oLogger.info("Feed entry was successfully posted to Group '" + sGroupId + "'.");
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			that._oLogger.error("Failed to post feed entry to group '" + sGroupId + "'." );
			oPromise.reject(oError);
		};
		var mParameters = {
			context: null,
			urlParameters: null,
			async: true,
			success: fSuccess, 
			error: 	fError
		};
		
		return {
			request: this._oCollabModel.create(sEndpoint, oDataPayload, mParameters),
			promise: oPromise.promise()
		};
	},
	
	/**
	 * REMARKS MISSING
	 * @memberOf sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 */
	postGroupExternalObjectFeedEntry : function(sGroupId, sExternalObjectId, sText) {
		var that = this;
		var sEndPoint = "/GroupExternalObjects(GroupId='" + jQuery.sap.encodeURL(sGroupId) + "',ExternalObjectId='" + jQuery.sap.encodeURL(sExternalObjectId) + "')/FeedEntries";
		var oDataPayload = { "Text": sText };
		var oPromise = jQuery.Deferred();
		
		var fSuccess = function(oData, response){
			that._oLogger.info("Feed entry was successfully posted to group object wall. Group Id is:'" + sGroupId + "', External Object Id is:" + sExternalObjectId + ".");
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			that._oLogger.error("Failed to post feed entry to group object wall. Group Id is:'" + sGroupId + "', External Object Id is:" + sExternalObjectId + ".");
			oPromise.reject(oError);
		};
		
		var mParameters = {
				context: null,
				urlParameters: null,
				async: true,
				success: fSuccess, 
				error: 	fError
			};
		
		return {
			request: this._oCollabModel.create(sEndPoint, oDataPayload, mParameters),
			promise: oPromise.promise()
		};
	},
	
	/**
	 * Get the number of new updates since the latest feed entry 
 	 * @param {string} LatestFeedEntryId 
	 * @param {string} ExternalObjectId 
	 * @return {object} Deferred object for the request
	 * 
	 * @public
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	getFeedUpdatesLatestCount : function(LatestTopLevelId, ExternalObjectId) {
		var gettingFeedUpdates = jQuery.Deferred();
		
		var sPath = "/ExternalObject_FeedLatestCount";
		var mParameters = {
			"urlParameters": {
				LatestTopLevelId: "'"+LatestTopLevelId+"'",
				Id: "'"+ExternalObjectId+"'"
			},
			"success": function(oData, response) {
				gettingFeedUpdates.resolve(oData, response);
			},
			"error": function(oError) {
				gettingFeedUpdates.reject(oError);
			}
		};
		
		return gettingFeedUpdates.promise(this._oCollabModel.read(sPath, mParameters));
	}
	
});

}; // end of sap/collaboration/components/socialtimeline/datahandlers/JamDataHandler.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler");


sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler",{
	/**
	 * Constructor for the Social Media Integration Data handler
	 * This class is now responsible to provide the mapping of the business object to be used by Jam
	 * 
	 * @class SMIntegrationDataHandler
	 * @name sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler
	 *
	 * @constructor
	 * @param {object} oSMIntegrationModel - Social Media Integration OData model
	 */
	constructor: function(oSMIntegrationModel) {	
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler");
		
		this._oSMIntegrationModel = oSMIntegrationModel;
		
		this._oOdataUtil = new sap.collaboration.components.utils.OdataUtil();
				
		this.oJamConfigurationStatusMap = {
			configurationOk: 0,
			configuartionError: 1
		};
	},
	/**
	 * Map the internal object to external object using the SMI OData service
	 * 
	 * @param {object} oInternalBO - internal identifier of a business object
	 * 			{string} appContext - application context
	 * 			{string} collection - entity collection
	 * 			{string} key - business object key
	 * 			{string} odataServicePath - path for the business object's OData service
	 * @returns {object} Promise object
	 */
	mapInternalBOToExternalBO: function(oInternalBO){
		
		var oPromise = this.getExternalObjectMapping(oInternalBO).promise
		.then(function(oData){
			this._oLogger.info("External business object mapping was found.");
			return oData.MapInternalBOToExternalBO;
		}.bind(this));
		
		return oPromise.promise();
	},
	
	/**
	 * Get Jam Configuration Status
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 */
	getJamConfigurationStatus : function(fCallerSuccess, fCallerError){
		var sOdataEndPoint = "/GetJamConfigurationStatus";
		var that = this;
	   	var mParameters = {
				async: false,
				success: function(oData,response){
					if (oData.GetJamConfigurationStatus.StatusCode === that.oJamConfigurationStatusMap.configurationOk){
						fCallerSuccess(true);
					}
					else{
						fCallerSuccess(false);
					}
			   	}, 
				error: function(oError){
					that._oLogger.error(JSON.stringify(oError));
			   		fCallerError();
			   	}
		};
	   	this._oSMIntegrationModel.read(sOdataEndPoint, mParameters);
	},
	
	
	/**
	 * Get the Mapping for the External Object
	 * @param {object} oInternalBO - internal identifier of a business object
	 * 			{string} appContext - application context
	 * 			{string} collection - entity collection
	 * 			{string} key - business object key
	 * 			{string} odataServicePath - path for the business object's OData service
	 * @returns {object} object containing the object to abort the request and promise
	 */
	getExternalObjectMapping: function(oInternalBO){
		var that = this;
		var sEndpoint = "/MapInternalBOToExternalBO";
		var oPromise = jQuery.Deferred();
		
		//Passing the URL parameters in a map so the encoding is done in SAPUI5 ODataModel class 
		var aUrlParameters = {};
		aUrlParameters["ApplicationContext"] = "'" + oInternalBO.appContext + "'";
		aUrlParameters["ODataCollection"] = "'" + oInternalBO.collection + "'";
		aUrlParameters["ODataKeyPredicate"] = "'" + oInternalBO.key + "'";
		aUrlParameters["ODataServicePath"] = "'" + oInternalBO.odataServicePath + "'";
		
		var fSuccess = function(oData, response){
			that._oLogger.info("External object mapping found");
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			that._oLogger.error(oError.response.statusText);
			oPromise.reject(oError);
		};

		var mParameters = {
				context: null,
				urlParameters: aUrlParameters,
				async: true,
				filters: [],
				sorters: [],
				success: fSuccess, 
				error: 	fError
		};
		
	   	return { 
	   		request: this._oSMIntegrationModel.read(sEndpoint,mParameters),
	   		promise: oPromise.promise()
	   	};
	}
});

}; // end of sap/collaboration/components/socialtimeline/datahandlers/SMIntegrationDataHandler.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.feed.BOMode') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.feed.BOMode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.CustomListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/feed/BOMode",["./Mode", "sap/m/CustomListItem", "sap/m/Label", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/collaboration/components/utils/PendingRequestsUtil"], function(Mode, CustomListItem, Label, Filter, FilterOperator, PendingRequestsUtil) {
	
	var BOMode = Mode.extend("sap.collaboration.components.feed.BOMode",{
		constructor: function(oFeedController) {
			// Calls the superclass's constructor. This
			// causes this class to inherit the instance
			// variables list below.
			Mode.apply(this, [oFeedController]);
			
			// Inherited instance variables
			// this._oCommonUtil
			// this._oFeedController
			// this._oListItemTemplate
			// this._oList
			// this._oViewDataModel
			// this._oJamModel
			// this._oSelectPopover
			
			// current Jam External BO Id
			this._sJamBOId = undefined;
			
			// Utility to keep track of the pending OData requests.
			// Can be used to abort all the pending requests.
			this._oPendingRequestsUtil = new PendingRequestsUtil();
			
			// This mode needs access to the SMIv2 OData Mode.
			this._oSMIModel = this._oFeedController.getModel("smi");
			
			// This mode requires the language bundle for texts.
			this._oLanguageBundle = this._oFeedController.getLanguageBundle();

			this._oList.setModel(this._oJamModel);
			
			// Filter constants
			this.FILTER_CONSTANTS = {
					GROUP_WALL: "Group Wall",
					GROUP_OBJECT_WALL: "Group Object Wall"
			};
			
			// Attach event handler for filter control
			oFeedController.byId("filter_popover").attachSelectionChange(this.onFilterSelection, this);
		}
	});
	
	/**
	 * String to store URL for SMI V2 service
	 * @static
	 * @private
	 * @type {String}
	 */
	BOMode._sSMIv2ServiceUrl = "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV";

	/**
	 * Asks the BOMode object to start.
	 * @public
	 * @param {object} oFeedSourcesData - Uses this object if defined. Uses the current object otherwise.
	 * @memberOf sap.collaboration.components.feed.BOMode
	 * @param {object} oFeedSourcesData object with the following structure:
	 * {
	 *   appContext: <string>,
	 *   odataServicePath: <string>,
	 *   collection: <string>,
	 *   key: <string>,
	 *   name: <string>
	 * }
	 * @public
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype.start = function(oFeedSourcesData) {
		// The if statement below verifies that
		// the oFeedSourcesData parameter has the following
		// structure
		// {
		//   appContext: <string>,
		//   odataServicePath: <string>,
		//   collection: <string>,
		//   key: <string>,
		//   name: <string>
		// }
		if (!(this._oCommonUtil.isObject(oFeedSourcesData) &&
				this._oCommonUtil.isString(oFeedSourcesData.appContext) &&
				this._oCommonUtil.isString(oFeedSourcesData.odataServicePath) &&
				this._oCommonUtil.isString(oFeedSourcesData.collection) &&
				this._oCommonUtil.isString(oFeedSourcesData.key) &&
				this._oCommonUtil.isString(oFeedSourcesData.name)))  {
			var sErrorMessage = "The feedSources' data object is invalid.";
			this._oFeedController.logError(sErrorMessage);
			throw new Error(sErrorMessage);
		}

		// I'm worried about memory leaks in this chaining.
		// We need deeper analysis to fully understand all
		// the dangling objects that we're possibly creating.
		this._sendRequestMapInternalBOToExternalBO(
			oFeedSourcesData.appContext,
			oFeedSourcesData.collection,
			oFeedSourcesData.key,
			oFeedSourcesData.odataServicePath
		).then(
			(function(oData, oResponse) {
				return this._sendRequestExternalObjects_FindByExidAndObjectType(oData.MapInternalBOToExternalBO.Exid, oData.MapInternalBOToExternalBO.ObjectType);
			}).bind(this), // For success we chain.
			(function(oError) {
				// What are the possible things that can go wrong here?
				// 1. A network issue.
				// 2. A CSRF token issue.
				// 3. 401 (Unauthorized) Status code indicating that the user is not authorized to access the resource. This may mean the user is not authenticated.
				// 4. 5xx errors are server side errors, which I don't really know how to handle.
				
				// Although there are many error scenarios,
				// at the moment all errors are handled the same way.
				this._oFeedController.logError("The internal to external mapping for the business object could not be performed.");
				this._oFeedController.displayErrorMessage(this._oLanguageBundle.getText("SMIV2_INTERNAL_TO_EXTERNAL_BO_MAPPING_COULD_NOT_BE_PERFORMED"));
				
				// To indicate to the chained error handler not to display
				// its error message, we return the null object.
				return null;
			}).bind(this) // For errors, error messages are logged and displayed to the user.
		).then(
			(function(oData, oResponse) {
				this._sJamBOId = this._oCommonUtil.getODataResult(oData).Id; // set the Jam External BO id

				// Prior to binding the path for the list items, since this
				// is the start of a new list of list items being
				// populated, we attach to the list's update finished
				// event to update the view's data model about the
				// selection. The update finished method will then
				// detach itself to make sure it isn't called again.
				this._oList.attachUpdateFinished(this.onGroupSelectorUpdateFinished, this);

				// We must figure out a way to deal with the things that can
				// potentially go wrong after the list sends a request for
				// the groups. Whatever callback functions we register
				// must be unregistered when the request is successful.
				// Also, the registered callback should not have to worry
				// about other parts of the component that also use the
				// list control and/or ODataModel object.
				this._oList.bindItems({
					path: "/ExternalObjects('" + this._oCommonUtil.getODataResult(oData).Id + "')/Groups",
					template: this._oListItemTemplate
				});
			}).bind(this), // Success! We now set the path.
			(function(oError) {
				// What are the possible things that can go wrong here?
				// 1. A network issue. What does this look like?
				// 2. A tunnel issue.
				// 3. A CSRF token issue.
				// 4. 404 (Not Found) Status code indicating that the external object could not be found.
				// 5. 5xx errors are server side errors, which I don't really know how to handle.
				
				// If the oError object is null, it means the call to which we're chaining failed.
				// Therefore, since that call's error handler logged and displayed error messages,
				// none are logged or displayed here.
				if (oError !== null) {
					// Although there are many error scenarios,
					// at the moment all errors are handled the same way.
					this._oFeedController.logError("An external object associated with the given Exid and ObjectType could not be found.");
					this._oFeedController.displayErrorMessage(this._oLanguageBundle.getText("JAM_EXTERNAL_OBJECT_COULD_NOT_BE_FOUND"));
				}
			}).bind(this) // For errors, error messages are logged and displayed to the user.
		);
		
		//enable group feed by enabling add post button, group selector and the more button
		this._oFeedController.enableGroupFeed();		
		// enable filter
		this._oViewDataModel.setProperty("/filterEnabled", true);
		
		
		// set filter criteria
		this._setFilterOptions(oFeedSourcesData.name);
		
		// Attach event handler for the List's updateFinished, this handler function simply removes the busy indicator on the list.
		// The reason we can't put it in this.onGroupSelectorUpdateFinished is because after this.onGroupSelectorUpdateFinished is executed, it then detaches itself 
		this._oList.attachUpdateFinished(this.onUpdateFinished, this);
	};
	
	/**
	 * Asks the BOMode object to stop.
	 * @public
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype.stop = function() {	
		this._oPendingRequestsUtil.abortAll();
		
		// disable filter
		this._oViewDataModel.setProperty("/filterEnabled", false);
		
		// detach handler for the list
		this._oList.detachUpdateFinished(this.onUpdateFinished, this);
	};
	
	/**
	 * A generic method to send various kinds of requests. Handles the
	 * pending requests in a generic way.
	 * @param {object} oODataModel the ODataModel class instance to use to send the function import OData request
	 * @param {string} sODataPath the path to use when calling the method on the ODataModel class instance.
	 * @param {object} oURLParameters the object representing the function import's parameters
	 * @private
	 * @return {object} oAbortableAndChainablePromiseRequest a promise object
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype._sendFunctionImportODataRequest = function(oODataModel, sODataPath, oParameters) {
		var oDeferred = jQuery.Deferred();
		var oAbortableRequest = oODataModel.callFunction(sODataPath, {
			urlParameters: oParameters,
			success: function(oData, oResponse) {
				oDeferred.resolve(oData, oResponse);
			},
			error: function(oError) {
				oDeferred.reject(oError);
			}
		});
		var oAbortableAndChainablePromiseRequest = oDeferred.promise(oAbortableRequest);
		this._oPendingRequestsUtil.add(oAbortableAndChainablePromiseRequest);
		oDeferred.always((function(){
			this._oPendingRequestsUtil.remove(oAbortableAndChainablePromiseRequest);
		}).bind(this));
		return oAbortableAndChainablePromiseRequest;
	};
	
	/**
	 * A method to make a request to get the internal to external mapping
	 * @param {string} sApplicationContext
	 * @param {string} sODataCollection
	 * @param {string} sODataKeyPredicate - The content to place between parenthesis to identify the business object.
	 * For example, say the collection is Opportunities and that opportunities has a string id
	 * of say aE6f, then the URL for that Opportunity would contain Opportunities('aE6f').
	 * Hence, the sODataKeyPredicate would be the string 'aE6F'. It's important to send
	 * the single quotes in with the string. Hence, the string would be "'aE6f'" in JavaScript.
	 * @param {string} sOdataServicePath - Path to the OData service. For example, his could be
	 * /sap/opu/odata/sap/ODataService/
	 * @private
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype._sendRequestMapInternalBOToExternalBO = function(sApplicationContext, sODataCollection, sODataKeyPredicate, sODataServicePath) {
		return this._sendFunctionImportODataRequest(this._oSMIModel, "/MapInternalBOToExternalBO", {
			ApplicationContext: sApplicationContext,
			ODataCollection: sODataCollection,
			ODataKeyPredicate: sODataKeyPredicate,
			ODataServicePath: sODataServicePath
		});
	};
	
	/**
	 * A method to make a request to find an external object by external Id and object type
	 * @param {string} Exid
	 * @param {string} ObjectType
	 * @private
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype._sendRequestExternalObjects_FindByExidAndObjectType = function(Exid, ObjectType) {
		return this._sendFunctionImportODataRequest(this._oJamModel, "/ExternalObjects_FindByExidAndObjectType", {
			Exid: Exid,
			ObjectType: ObjectType
		});
	};
	
	/**
	 * Set filter options
	 * @private
	 * @param {string} BOName The name of the BO
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype._setFilterOptions = function(BOName) {
		var sI18nText;
		BOName ? sI18nText = this._oLanguageBundle.getText("GF_FILTER_OBJECT", BOName) : sI18nText =  this._oLanguageBundle.getText("GF_FILTER_OBJECT_DEFAULT");
		var mFilterData = [{ Name : this._oLanguageBundle.getText("GF_FILTER_GROUP"), key : this.FILTER_CONSTANTS.GROUP_WALL },
		                   { Name :  sI18nText, key : this.FILTER_CONSTANTS.GROUP_OBJECT_WALL }];
		this._oViewDataModel.setProperty("/filter", mFilterData);
		
		var oFilterPop = this._oFeedController.byId("filter_popover");
		oFilterPop.setSelectedItem(oFilterPop.getItems()[0]);
	};
	
	
	/**
	 * Returns the OData path for Add Post
	 * @public
	 * @return {string} The OData path for Add Post
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype.getAddPostPath = function () {
		var sGroupId = this._oViewDataModel.getProperty("/groupSelected/Id");
		
		return "/GroupExternalObjects(GroupId='" + sGroupId + "',ExternalObjectId='" + this._sJamBOId + "')/FeedEntries";
	};
	
	/**
	 * Displays  the feed source selector popover next to the specified control.
	 * @param {object} oControl the control next to which to display the feed source selector
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype.displayFeedSourceSelectorPopover = function(oControl) {
		this._oList.setBusy(true);
		this._oJamModel.refresh(/* bForceUpdate */ true);
		this._oGroupSelectPopover.openBy(oControl);
	};
	
	/**
	 * Event handler for the selector list when an item is selected.
	 * The structure of the model set on the individual list items
	 * must be known, and there must exist a way of mapping the
	 * selected list item.
	 * @param {object} oEvent
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype.onGroupSelected = function(oEvent) {
		var oGroupSelected = oEvent.getSource().getSelectedItem().getBindingContext().getObject();
		this._oViewDataModel.setProperty("/groupSelected", {
			Id : oGroupSelected.Id,
			Name : oGroupSelected.Name,
			WebURL : oGroupSelected.WebURL
		});
		
		this._oViewDataModel.setProperty("/feedEndpoint", "/Groups('" + oGroupSelected.Id + "')/FeedEntries");
		
		// reset the filter and remove filter message
		this._oViewDataModel.setProperty("/filterMessage", "");
		var oFilterPop = this._oFeedController.byId("filter_popover");
		oFilterPop.setSelectedItem(oFilterPop.getItems()[0]); 
		
		this._oGroupSelectPopover.close();
	};
	
	BOMode.prototype.onBatchCompleted = function(oEvent) {
		
	};
	
	/**
	 * When the group list is finished updating, then we make the
	 * the currently selected group equal to the first group
	 * in the list.
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype.onGroupSelectorUpdateFinished = function() {
		var aListItems = this._oList.getItems();
		var oFirstListItem;
		var oFirstGroup;
		if (aListItems.length > 0) {
			oFirstListItem = aListItems[0];
			this._oList.setSelectedItem(oFirstListItem);
			oFirstGroup = oFirstListItem.getBindingContext().getObject();
			this._oViewDataModel.setProperty("/groupSelected", oFirstGroup);
			this._oViewDataModel.setProperty("/feedEndpoint", "/Groups('" + oFirstGroup.Id + "')/FeedEntries");
		}
		
		// detach this event handler function since we only want it to run once
		this._oList.detachUpdateFinished(this.onGroupSelectorUpdateFinished, this);
	};
	
	/**
	 * When the group list is finished updating, then we make the
	 * the currently selected group equal to the first group
	 * in the list.
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype.onUpdateFinished = function() {
		this._oList.setBusy(false);
	};
	
	/**
	 * Event handler for filter selection
	 * @private
	 * @param {object} controlEvent the event from the selection change on the filter control
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	
	BOMode.prototype.onFilterSelection = function (controlEvent) {
		var sSelectedFilter = controlEvent.getParameter("listItem");
		var oFilterData = sSelectedFilter.getBindingContext().getObject();
		var sGroupId = this._oViewDataModel.getProperty("/groupSelected/Id");
		
		switch (oFilterData.key) {
			case this.FILTER_CONSTANTS.GROUP_WALL:
				this._oViewDataModel.setProperty("/filterMessage", "");
				this._oViewDataModel.setProperty("/feedEndpoint", "/Groups('" + sGroupId + "')/FeedEntries"); 
				break;
			case this.FILTER_CONSTANTS.GROUP_OBJECT_WALL:
				this._oViewDataModel.setProperty("/filterMessage", this._oLanguageBundle.getText("ST_FILTER_TEXT") + " " + oFilterData.Name);
				this._oViewDataModel.setProperty("/feedEndpoint", "/GroupExternalObjects(GroupId='" + sGroupId + "',ExternalObjectId='" + this._sJamBOId + "')/FeedEntries");
				break;
		}
	};
	
	
	/**
	 * Get the number of new updates since the latest feed entry 
	 * @return {object} Deferred object for the request
	 * 
	 * @public
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype.getFeedUpdatesLatestCount = function() {
		// get the first timeline item and get the Id
		var oLatestFeedEntry = this._oFeedController.byId("timeline").getContent()[0];
		var sLatestTopLevelId = oLatestFeedEntry ? oLatestFeedEntry.getModel().getProperty("/TopLevelId") : "";
		var sGroupId = this._oViewDataModel.getProperty("/groupSelected/Id");

		if (this._oViewDataModel.getProperty("/filterMessage") === "") {
			return this._sendRequestGroup_SinceLatestCount(sLatestTopLevelId, sGroupId);
		}
		else {
			var sExternalObjectId = this._sJamBOId;
			return this._sendRequestGroupExternalObject_SinceLatestCount(sLatestTopLevelId, sGroupId, sExternalObjectId);
		}
	};
	/**
	 * A method to make a request to get the number of new updates since the latest feed entry for a group
	 * @param {string} LatestTopLevelId 
	 * @param {string} GroupId 
	 * @return {object} Deferred object for the request
	 * 
	 * @private
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype._sendRequestGroup_SinceLatestCount = function(LatestTopLevelId, GroupId) {

		return this._sendFunctionImportODataRequest(this._oJamModel, "/Group_FeedLatestCount", {
			LatestTopLevelId: LatestTopLevelId,
			Id: GroupId
		});
	};
	/**
	 * A method to make a request to get the number of new updates since the latest feed entry for an external object in a group
	 * @param {string} LatestFeedEntryId 
	 * @param {string} GroupId 
	 * @param {string} ExternalObjectId 
	 * @return {object} Deferred object for the request
	 * 
	 * @private
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype._sendRequestGroupExternalObject_SinceLatestCount = function(LatestTopLevelId, GroupId, ExternalObjectId ) {
	
		return this._sendFunctionImportODataRequest(this._oJamModel, "/GroupExternalObject_FeedLatestCount", {
			LatestTopLevelId: LatestTopLevelId,
			GroupId: GroupId,
			ExternalObjectId: ExternalObjectId
		});
	};

	/**
	  * Create and initialized the models for the view
	 * Jam model: OData model for connecting to Jam
	 * @private
	 * @memberOf sap.collaboration.components.feed.BOMode
	 */
	BOMode.prototype._initializeModels = function() {
		Mode.prototype._initializeModels.apply(this);

		// SMIv2 model
		var oSMIModel =  new sap.ui.model.odata.ODataModel(BOMode._sSMIv2ServiceUrl, true);
		this._oFeedController.setSmiModel(oSMIModel);
	};

	/**
	 * Returns the SMI Service Url
	 * @public
	 * @memberOf sap.collaboration.components.feed.Mode
	 */
	BOMode.prototype.getSMIv2ServiceUrl = function() {
		return BOMode._sSMIv2ServiceUrl;
	};
	
	return BOMode;
}, /* bExport */ true);

}; // end of sap/collaboration/components/feed/BOMode.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.feed.GroupIDsMode') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.feed.GroupIDsMode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/feed/GroupIDsMode",["./Mode", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/collaboration/components/utils/PendingRequestsUtil"], function(Mode, Filter, FilterOperator, PendingRequestsUtil) {
	
	var GroupIDsMode = Mode.extend("sap.collaboration.components.feed.GroupIDsMode", {
		constructor: function(oFeedController) {
			Mode.apply(this, [oFeedController]);

			// instance variables			
			// Utility to keep track of the pending OData requests.
			// Can be used to abort all the pending requests.
			this._oPendingRequestsUtil = new PendingRequestsUtil();
			this._iOpenGroupRequests;
			this._aGroupsToLoad;
			this.oResult;

			this._oList.setModel(this._oViewDataModel);
		}
	});
	
	/**
	 * Asks the GroupIDsMode object to start.
	 * @param {string[]} aFeedSourcesData an array of group ids
	 * @public
	 * @memberOf sap.collaboration.components.feed.GroupIDsMode
	 */
	GroupIDsMode.prototype.start = function(aFeedSourcesData) {
		// The if statement below verifies that the aFeedSourcesData
		// is an array of strings.
		if (!this._oCommonUtil.isArrayOfStrings(aFeedSourcesData)) {
			var sErrorMessage = "The feedSources' data object is invalid.";
			this._oFeedController.logError(sErrorMessage);
			throw new Error(sErrorMessage);
		}
		
		// disable group feed if array is empty
		if (aFeedSourcesData.length === 0) {
			this._oFeedController.disableGroupFeed();
			return;
		}
		
		// remove duplicates from array
		aFeedSourcesData = aFeedSourcesData.filter(function (groupId, index) {
		    return aFeedSourcesData.indexOf(groupId) === index && groupId.trim() !== "";
		});
		
		
		// fill the property /groups in the model
		this._oViewDataModel.setProperty("/groups", []);
		this._oViewDataModel.setProperty("/groupSelected/Id", undefined);
		this._iOpenGroupRequests = 0;
		this._aGroupsToLoad = jQuery.merge([], aFeedSourcesData);
		
		this._oList.bindItems({
			path: "/groups",
			template: this._oListItemTemplate
		});
		
		this._oGroupSelectPopover.setBusyIndicatorDelay(0).setBusy(true);
		this._fillGroupInfo(); // get the group info (name, weburl ...)
	};
	
	GroupIDsMode.prototype.onBatchCompleted = function(oEvent) {
		this._oJamModel.setUseBatch(false); // batch is required for initial load, turn off for all subsequent requests
		if (this._iOpenGroupRequests === 0){
			if (this._oGroupSelectPopover !== undefined){
				this._oGroupSelectPopover.setBusy(false);					
			}
		}
	};
	
	/**
	 * Asks the GroupIDsMode object to stop.
	 * @memberOf sap.collaboration.components.feed.GroupIDsMode
	 */
	GroupIDsMode.prototype.stop = function() {
		this._oPendingRequestsUtil.abortAll();
	};
	
	/**
	 * Returns the OData path for Add Post
	 * @public
	 * @return {string} The OData path for Add Post
	 * @memberOf sap.collaboration.components.feed.GroupIDsMode
	 */
	GroupIDsMode.prototype.getAddPostPath = function () {
		var sGroupId = this._oViewDataModel.getProperty("/groupSelected/Id");
		
		return "/Groups('"+ sGroupId +"')/FeedEntries";
	};
	
	/**
	 * Displays  the feed source selector popover next to the specified control.
	 * @param {object} oControl the control next to which to display the feed source selector
	 * @memberOf sap.collaboration.components.feed.GroupIDsMode
	 */
	GroupIDsMode.prototype.displayFeedSourceSelectorPopover = function(oControl) {
		this._oGroupSelectPopover.openBy(oControl);
	};
	
	/**
	 * Event handler for the selector list when an item is selected.
	 * The structure of the model set on the individual list items
	 * must be known, and there must exist a way of mapping the
	 * selected list item
	 * @param {object} oEvent
	 * @memberOf sap.collaboration.components.feed.GroupIDsMode
	 */
	GroupIDsMode.prototype.onGroupSelected = function(oEvent) {
		var oGroupSelected = oEvent.getSource().getSelectedItem().getBindingContext().getObject();
		this._oViewDataModel.setProperty("/groupSelected", oGroupSelected);
		
		this._oViewDataModel.setProperty("/feedEndpoint", "/Groups('" + oGroupSelected.Id + "')/FeedEntries");
		
		this._oGroupSelectPopover.close();
	};
	
	/**
	 * Get and fill the group info of the groups
	 * @private
	 * @memberOf sap.collaboration.components.feed.GroupIDsMode
	 */
	GroupIDsMode.prototype._fillGroupInfo = function() {
		var iBatchLimit = 10; //max batch size
		var iBatchId = 0; //id of the current batch
		var iBatchRequestCount = 0; // number of requests in current batch
		var iGroupsInRequestCount = 0; // number of groups in current request
		var iGroupsPerRequestLimit = 20; // limit for number of groups per request
		this._oJamModel.setUseBatch(true); 
		var sFilterParameter = "$filter=Id eq '";
					
		for(var iLoopCounter = 0, iGroupsToLoadCount = this._aGroupsToLoad.length; iLoopCounter<iGroupsToLoadCount; iLoopCounter++ ){
			// building $filter URL parameter
			if(!(iLoopCounter%iGroupsPerRequestLimit == 0)){
				sFilterParameter = sFilterParameter.concat(" or Id eq '" + this._aGroupsToLoad[iLoopCounter].replace(/'/g, "''") + "'");
			}else{ 
				sFilterParameter = sFilterParameter.concat(this._aGroupsToLoad[iLoopCounter].replace(/'/g, "''") + "'");
			};
			iGroupsInRequestCount++;
			
			// if the limit of groups per request or end of source array is reached
			if (iGroupsInRequestCount === iGroupsPerRequestLimit || iLoopCounter+1 === iGroupsToLoadCount){
				this._iOpenGroupRequests++;
				var oResult = undefined;
				this._loadGroups(sFilterParameter, iBatchId).done((function(oData, oResponse) {
					
					oResult = this._oCommonUtil.getODataResult(oData); 
					
					if (!jQuery.isEmptyObject(oResult)){  //if the request returns no response the result object is empty
						if (oResult.length != undefined){ //if oResult.length is defined the response is an array of objects
							var iIndexInFeedSources = this._aGroupsToLoad.indexOf(oResult[0].Id);
							for(var iCount = 0, iODataResultLength = oResult.length; iCount<iODataResultLength;iCount++){
								this._oViewDataModel.setProperty("/groups/"+iIndexInFeedSources, oResult[iCount]);
								iIndexInFeedSources++;
							};
						}else{ //if oResult.length is undefined the response is a single object
							this._oViewDataModel.setProperty("/groups/"+this._aGroupsToLoad.indexOf(oResult.Id), oResult);
						}
					};
					this._iOpenGroupRequests--;
					//After all request are handled clean up the data model
					if (this._iOpenGroupRequests === 0){
						if (this._oViewDataModel.getProperty("/groups/").length === 0) { // disable group feed component if there are no groups
							this._oFeedController.disableGroupFeed();
							jQuery.sap.log.warning("No group information was retrieved for the current user.");
						}
						else {
							this._oFeedController.enableGroupFeed();
							var aGroups = this._oViewDataModel.getProperty("/groups/");
							aGroups = aGroups.filter(function(oCurrentGroup){ return oCurrentGroup!==undefined&&oCurrentGroup!==null });
							this._oViewDataModel.setProperty("/groups/", aGroups);
							this._oViewDataModel.setProperty("/groupSelected", aGroups[0]);
							this._oViewDataModel.setProperty("/feedEndpoint", "/Groups('" + aGroups[0].Id + "')/FeedEntries");
						}
					};
				}).bind(this));

				iBatchRequestCount++;
				iGroupsInRequestCount = 0;
				sFilterParameter = "$filter=Id eq '";
			};
			
			// limit of requests per batch reached
			if (iBatchRequestCount == iBatchLimit){
				iBatchId++;
				iBatchRequestCount = 0;
			}				
		};
	};
	
	/**
	 * Fetches ID,Name and WebUrl for a list of groups definded in the $filter URL parameter
	 * @param {string} URL parameter for $filter
	 * @param {string} batchGroupId
	 * @private
	 * @return {object} A deferred promise object
	 * @memberOf sap.collaboration.components.feed.GroupIDsMode
	 */
	GroupIDsMode.prototype._loadGroups = function(sFilterParameter, batchGroupId) {
		// if Jam is not configured, do not execute
		if (!this.isJamServiceAvailable()) {
			return;
		}

		var that = this;
		
		var loadingGroups = jQuery.Deferred();
		
		var sPath ="/Groups/";
		var mParameters = {
			"urlParameters": sFilterParameter + "&$select=Id,Name,WebURL",
			"success": function(oData, response) {
				loadingGroups.resolveWith(that, [oData,response]);
			}, 
			"error": function(oError) {
				loadingGroups.rejectWith(that, [oError]);
				that._oFeedController.logError("The group information was not retrieved.");
			},
			"batchGroupId": batchGroupId
		};
		
		var request = this._oJamModel.read(sPath,mParameters);
		this._oPendingRequestsUtil.add(request);
		var oPromise = loadingGroups.promise(request);
		oPromise.always(function(){
			this._oPendingRequestsUtil.remove(request);
		});
		return oPromise;
	};
	
	return GroupIDsMode;
}, /* bExport */ true);


}; // end of sap/collaboration/components/feed/GroupIDsMode.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.feed.ModeFactory') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.feed.ModeFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/collaboration/components/feed/ModeFactory",["./GroupIDsMode", "./BOMode", "./UserMode"], function(GroupIDsMode, BOMode, UserMode) {
	/**
	 * A ModeFactory object is used to construct sub-class instance of the Mode abstract-class.
	 * This class implements the singleton pattern.
	 * @class
	 * @private
	 */
	var ModeFactory = function() {
		this._oFeedTypeToModeClass = {};
		this._oFeedTypeToModeClass[sap.collaboration.FeedType.GroupIds] = GroupIDsMode;
		this._oFeedTypeToModeClass[sap.collaboration.FeedType.BusinessObjectGroups] = BOMode;
		this._oFeedTypeToModeClass[sap.collaboration.FeedType.UserGroups] = UserMode;
	};
	/**
	 * Instance variable used to store the instance of the ModeFactory class to return.
	 * @private
	 * @static
	 * @type {ModeFactory}
	 */
	ModeFactory._instance = null;
	/**
	 * Returns the instance of the ModeFactory class.
	 * @public
	 * @static
	 * @return {ModeFactory} the ModeFactory class instance
	 */
	ModeFactory.getInstance = function() {
		if (ModeFactory._instance === null) {
			ModeFactory._instance = new ModeFactory();
		}
		return ModeFactory._instance;
	};
	/**
	 * Creates and returns an instance of the corresponding Mode sub-class.
	 * @public
	 * @param  {string} sFeedType the feed type for which to obtain a Mode sub-class instance
	 * @param  {sap.ui.mvc.Controller} oFeedController the collaborating feed controller
	 * @return {Mode} an instance of the corresponding Mode sub-class
	 * @throws {Error} if there is no corresponding class
	 */
	ModeFactory.prototype.createMode = function(sFeedType, oFeedController) {
		var ModeClass = this._oFeedTypeToModeClass[sFeedType];
		if (ModeClass === undefined) {
			var sErrorMessage = sFeedType + " is not a valid value for the feedSources mode property.\n";
			sErrorMessage += "It must be equal to the value of either one of the following:\n";
			sErrorMessage += "sap.collaboration.FeedType.GroupIds\n";
			sErrorMessage += "sap.collaboration.FeedType.BusinessObjectGroups\n";
			sErrorMessage += "sap.collaboration.FeedType.UserGroups";
			oFeedController.logError(sErrorMessage);
			oFeedController.byId("timeline").destroy();
			throw new Error(sErrorMessage);
		}
		return new ModeClass(oFeedController);
	};
	return ModeFactory;
}, true);
}; // end of sap/collaboration/components/feed/ModeFactory.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.feed.views.GroupFeed.controller') ) {
/*
* ! SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
*/
jQuery.sap.declare('sap.collaboration.components.feed.views.GroupFeed.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.commons.TimelineItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/collaboration/components/feed/views/GroupFeed.controller",["jquery.sap.global","sap/ui/core/mvc/Controller","sap/suite/ui/commons/TimelineItem","sap/m/MessageBox",
               "sap/collaboration/components/utils/LanguageBundle","sap/collaboration/components/utils/DateUtil",
               "sap/collaboration/components/controls/FeedEntryEmbedded","sap/collaboration/components/controls/ReplyPopover",
               "sap/collaboration/components/controls/SocialTextArea", "sap/collaboration/components/controls/FilterPopover",
               "sap/collaboration/components/utils/CommonUtil", "sap/collaboration/components/feed/ModeFactory"],
	function(jQuery, Controller, TimelineItem, MessageBox, 
			LanguageBundle, DateUtil, FeedEntryEmbedded,
			ReplyPopover, SocialTextArea, FilterPopover,
			CommonUtil, ModeFactory) {
	"use strict";
	var sControllerName = "sap.collaboration.components.feed.views.GroupFeed";
	
	var oGroupFeed =  Controller.extend(sControllerName, {
		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onInit: function() {
			
			this._initializeUtilities();
			this._initializeRequestStateData();
			this._initializeSystemData();
			this._initializeModels();
			this._initializeTimeline();
		},
		/**
		 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
		 * (NOT before the first rendering! onInit() is used for that one!).
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onBeforeRendering: function() {
			if (!this._oMode.isJamServiceAvailable()) {
				this.displayErrorMessage();
			}
		},
		/**
		 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
		 * This hook is the same one that SAPUI5 controls get after being rendered.
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onAfterRendering: function() {
		},
		/**
		 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onExit: function() {
			this._abortAllPendingRequests();
			
			// destroy controls
			this.byId("filter_popover").destroy();
			this.byId("addPost_popover").destroy();
			
			this._stopAutoCheckingForNewUpdates();
		},
		
		
		/************************************************************************
		 * Initialization
		 ************************************************************************/
		/**
		 * Initialize the utility classes that will be needed
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_initializeUtilities: function() {
			this._oCommonUtil = new CommonUtil();
			this._oLogger = new jQuery.sap.log.getLogger(sControllerName);
			this._oLanguageBundle = new LanguageBundle();
			this._oDateUtil = new DateUtil();
		},
		/**
		 * Initialize feed component system data for to keep track of the Group Feed's state
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_initializeSystemData: function() {
			this._oModes = {};
			this._mCurrentUser;
		},
		/**
		 * Initialize data to keep track of the requests 
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_initializeRequestStateData: function() {
			this._oNextLinks = {
				"feedEntriesNextLink": "",
				"repliesNextLink": ""	
			};
			this._oPendingRequests = {
				"loadingFeedEntriesRequest": undefined,
				"loadingRepliesRequest": undefined,
				"loadingSuggestionsRequest": undefined,
				"loadingFeedAtMentions": undefined,
				"refreshingSecurityToken": undefined
			};
			
			this._oPostRequestData = {
				"path": undefined,
				"payload": undefined,
				"parameters": undefined
			};
		},
		/**
		 * Create and initialized the models for the view
		 * 1- Jam model: OData model for connecting to Jam
		 * 2- SMI v2 model: OData model for connecting to SMIntegration V2 gateway service
		 * 3- View model: JSON model for the controls' properties
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_initializeModels: function() {
			// resource model
			var i18nModel = this._oLanguageBundle.createResourceModel();
			this.getView().setModel(i18nModel, "i18n");
			this._i18nModel = i18nModel;

			// View Data model
			var oViewDataModel = new sap.ui.model.json.JSONModel(); 
			oViewDataModel.setData({
				"feedSources": undefined,
				
				"axisOrientation": undefined,
				"enableSocial": true,
				"enableScroll": undefined,
				"forceGrowing": false,
				"growingThreshold": 20,
					
				"groupSelectorEnabled": false,
				"groupSelected": {},
				"groups":[],
								
				"filterEnabled": false,
				"filter": [],
				"filterMessage": "",
				
				"feedEndpoint": undefined,
				
				"addPostButtonEnabled": false,
			});
			oViewDataModel.bindProperty("/feedSources").attachChange(this._onFeedSourcesChange, this);
			oViewDataModel.bindProperty("/feedEndpoint").attachChange(this._onFeedEndpointChange, this);
			oViewDataModel.bindProperty("/filterMessage").attachChange(this._onFilterMessageChange, this);
			this.getView().setModel(oViewDataModel);
			this._oViewDataModel = oViewDataModel;
		},
		
		/************************************************************************
		 * Timeline manipulation
		 ************************************************************************/
		/**
		 * Initialize timeline
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_initializeTimeline: function() {
			var oTimeline = this.byId("timeline");
			oTimeline.setContent([]);
			
			this._modifyHeaderBar();
			this._createSocialProfile();
		},
		/**
		 * Modify the Timeline Header Bar
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_modifyHeaderBar: function(){
			var oHeaderBar = this.byId("timeline").getHeaderBar();
			
			// remove all content
			oHeaderBar.removeAllContent();
			
			// add the group selector
			var oGroupSelector = this._createGroupSelector();
			oHeaderBar.insertContent(oGroupSelector, 0);
			
			// add a spacer
			var oSpacer = new sap.m.ToolbarSpacer(this.createId("header_spacer"));
			oHeaderBar.insertContent(oSpacer, 1);
			
			// Add the filter
			var oFilterButton = this._createFilterButton();
			oHeaderBar.insertContent(oFilterButton, 2);
			
			// create the Add Post button
			var oAddPostButton = this._createAddPostButton();
			oHeaderBar.insertContent(oAddPostButton, 3);
		},
		/**
		 * Create the Context Selector Control
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_createGroupSelector: function(){
			var oGroupSelectButton = new sap.m.Button( this.createId("groupSelect_button"), { 	
				icon: "sap-icon://slim-arrow-down",
				iconFirst: false,
				text: "{/groupSelected/Name}",
				width: "20em",
				enabled: "{/groupSelectorEnabled}",
				type: sap.m.ButtonType.Transparent,
				press: [this.onGroupSelectorButtonPress, this]
			});
			oGroupSelectButton.setModel(this._oViewDataModel);
			
			return oGroupSelectButton;
		},
		/**
		 * Create the filter button
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_createFilterButton: function() {
			if (!this.byId("filter_popover")) {

				// construct the custom list item fragment
				var oCustomListItem = sap.ui.xmlfragment("sap.collaboration.components.feed.fragments.CustomListItem", this);
				
				new FilterPopover(this.createId("filter_popover"), {
					title: this._oLanguageBundle.getText("ST_FILTER_HEADER"),
				}).setModel(this._oViewDataModel).bindItems("/filter", oCustomListItem);
			}
			
			var oFilterButton = new sap.m.Button(this.createId("filter_button"), {
				enabled: "{/filterEnabled}",
				visible: "{/filterEnabled}",
				icon: "sap-icon://filter",
				type: sap.m.ButtonType.Transparent,
				press: [function() {
					this.byId("filter_popover").openBy(this.byId("filter_button"));
				}, this]
			}).setModel(this._oViewDataModel);
			
			return oFilterButton;
		},
		/**
		 * Create the Add Post button
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_createAddPostButton: function(){
			if (this.byId("addPost_popover") === undefined) {
				new sap.m.ResponsivePopover(this.createId("addPost_popover"), {
					placement: sap.m.PlacementType.Auto,
					title: this._oLanguageBundle.getText("ST_ADD_POST_TITLE"),
					contentWidth:"25rem",
					contentHeight:"10rem",
					content: new SocialTextArea(this.createId("social_TextArea"), {
						height: "10rem",
						width: "100%",
						liveChange: [function(oEvent) {
							oEvent.getParameter("value").trim() !== "" ? this.byId("addPost_postButton").setEnabled(true) : this.byId("addPost_postButton").setEnabled(false);
						}, this],
						suggest: [this.onSuggest, this],
						afterSuggestionClose: [function() {
							this._oPendingRequests.loadingSuggestionsRequest && this._oPendingRequests.loadingSuggestionsRequest.abort();
						}, this]
					}),
					endButton: new sap.m.Button(this.createId("addPost_postButton"), {
						text : this._oLanguageBundle.getText("ST_ADD_POST_BUTTON"),
						enabled: false,
						press: [this.onAddPost, this],					
					}),
				}).setInitialFocus(this.byId("social_TextArea"));
				
				// Due to Ux issues, we don't want the @mention feature available on phones
				if (!sap.ui.Device.system.phone) {
					this.byId("addPost_popover").setBeginButton(new sap.m.Button(this.createId("addPost_atMentionButton"), {
						text: "@",
						press: [function() {
							this.byId("social_TextArea").atMentionsButtonPressed();
						}, this]
					}));
				}
			}
			
			var oAddPostButton = new sap.m.Button(this.createId("addPost_button") , {
				enabled: "{/addPostButtonEnabled}",
				icon: "sap-icon://add",
				type: sap.m.ButtonType.Transparent,
				press: [function(){
					 this.byId("addPost_popover").openBy(this.byId("addPost_button"));
				}, this]
			});
			oAddPostButton.setModel(this._oViewDataModel);
			
			return oAddPostButton;
		},
		/**
		 * Clear the timeline of all its content
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_clearTimeline: function() {
			var oTimeline = this.byId("timeline");
			oTimeline.destroyContent();
		},
		/**
		 * Create a timeline item control
		 * @param oFeedEntry
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_createTimelineItem: function(oFeedEntry) {
			var oFeedEntryModel = new sap.ui.model.json.JSONModel(oFeedEntry);
			var oFeedEntryEmbedded = new FeedEntryEmbedded(this.createId(oFeedEntry.Id+"_embedded"), {
				"feedEntry": "{/}",
				"serviceUrl": this._oMode.getJamServiceUrl(),
				"expandCollapseClick": [function() {
					this.byId("timeline").adjustUI();
				}, this],
				"atMentionClick": [this.onAtMentionClicked, this],
				"previewLoad": [function(oControlEvent) {
					this.byId('timeline').adjustUI();
				}, this]
			});
			
			var oReplyPopover = new ReplyPopover(this.createId("replyPostPopover_" + oFeedEntry.Id), {
				socialTextArea: new SocialTextArea({
					height: "80px",
					width: "100%",
					suggestionPlacement: sap.m.PlacementType.Top,
					suggest: [this.onSuggest, this],
					afterSuggestionClose: [function() {
						this._oPendingRequests.loadingSuggestionsRequest && this._oPendingRequests.loadingSuggestionsRequest.abort();
					}, this]
				}),
				postReplyPress: [this.onPostReplyPress, this],
				moreRepliesPress: [function(oEvent){
					var oTimelineItem = oEvent.getSource().getParent();
					this._getReplies(undefined, oTimelineItem.getModel().getData().Replies.__next, oTimelineItem);
				}, this],
				afterClose: [function() {
					if(this._oPendingRequests.loadingRepliesRequest){
						this._oPendingRequests.loadingRepliesRequest.abort();
					}
					this._bReplyPopoverIsOpen = false;
				}, this]
			});
			
			oReplyPopover.getSocialTextArea().attachLiveChange(function(oEvent) {
				oEvent.getParameter("value").trim() !== "" ? this.enableButton(true) : this.enableButton(false);
			}.bind(oReplyPopover));
			
			var oMoreLinkCustomAction = new sap.ui.core.CustomData({
				key:"1", 
				value:this._oLanguageBundle.getText("ST_MORE_CUSTOM_ACTION")
			});
						
			var oTimelineItem = new TimelineItem(this.createId(oFeedEntry.Id), {
				"dateTime": "{/CreatedAt}",
				"userName": "{/Creator/FullName}", 
				"title": "{/Action}",
				"text": "{/Text}",
				"icon": "sap-icon://post",
				"userNameClickable": this._oViewDataModel.getProperty("/enableSocial"),
				"userNameClicked": [this.onUserNameClicked, this],
				"userPicture": {
					path: "/Creator/Id",
					formatter: this._buildThumbnailImageURL.bind(this)
				},
				"replyCount": "{/RepliesCount}",
				"embeddedControl": oFeedEntryEmbedded,
				"customReply": oReplyPopover,
				"replyListOpen": [this.onReplyListOpen, this],
				"customAction": oMoreLinkCustomAction,
				"customActionClicked": [this.onMoreClicked, this]
			});
			oTimelineItem.setModel(oFeedEntryModel);
			oTimelineItem.setTitle("\u200E" + oTimelineItem.getTitle() + "\u200E");
			return oTimelineItem;
		},
		/**
		 * Add the feed entries to the Timeline control
		 * @param {object[]} feedEntries - array of feed entries entities
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_addFeedEntriesToTimeline: function(feedEntries) {

			// create timeline item controls for each feed entry and add it to the timeline
			var oTimeline = this.byId("timeline");
			
			feedEntries.forEach(function(oFeedEntry){
				var oTimelineItem = this._createTimelineItem(oFeedEntry);
				oTimeline.addContent(oTimelineItem);
			}, this);
		},
		/**
		 * Process the addition of more feed entries
		 * 1a - Add Timeline items for each feed entry
		 * 1b - If no feed entries, disable the more button
		 * 2 - Set timeline to not busy
		 * @param {object[]} aFeedEntries
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_processFeedEntries: function(feedEntries) {
			if (feedEntries.length > 0) {
				this._addFeedEntriesToTimeline(feedEntries);
			}
			else {
				this._oViewDataModel.setProperty("/forceGrowing",false); // disable the more button 
			}
			this._setTimelineToNotBusy();
		},
		
		/**
		 * Process the @mentions for the embedded control
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_processAtMentions: function(){
			
			if (this._oPendingRequests.loadingFeedAtMentions && 
					this._oPendingRequests.loadingFeedAtMentions.state("pending")) {
				this._oPendingRequests.loadingFeedAtMentions.abort();
			}

			var that = this;
			var sPath;
			
			var mParameters = {
					"async": true,
					"success": function(oData, response){
						getttingAtMentionsPromise.resolveWith(that, [oData,response]);
					},
					"error": function(oError){
						that._oLogger.error('Failed to retrieve the @mentions.');
						getttingAtMentionsPromise.rejectWith(that, [oError]);
					}
				};

			if (this._oAtMention.atMentionsNextLink){
				sPath = "/" + this._oAtMention.atMentionsNextLink;
				mParameters.urlParameters = this._extractUrlParams(decodeURIComponent(this._oAtMention.atMentionsNextLink));
			}
			else {
				sPath = "/FeedEntries("+ jQuery.sap.encodeURL("'"+this._oAtMention.feedId+"'") + ")/AtMentions";
			}

			var getttingAtMentionsPromise = jQuery.Deferred();			
			getttingAtMentionsPromise.done(function(oData, response){
				
				that._oAtMention.atMentionsNextLink = oData.__next;
				that._oAtMention.aAtMentions = that._oCommonUtil.getODataResult(oData).concat(that._oAtMention.aAtMentions);
								
				if (that._oAtMention.atMentionsNextLink) {
					that._processAtMentions();
				}
				else {
					var oSettings = {
							openingControl: that._oAtMention.oUserNameLink,
							memberId: that._oAtMention.aAtMentions[that._oAtMention.placeholderIndex].Email
					};
					that._oSocialProfile.setSettings(oSettings);
					that._oSocialProfile.open();	
				}
			});
			
			this._oPendingRequests.loadingFeedAtMentions = getttingAtMentionsPromise.promise(this._oJamModel.read(sPath, mParameters));
		},

		/**
		 * Create the Social Profile component
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_createSocialProfile: function(){
			this._oSocialProfile = new sap.ui.getCore().createComponent("sap.collaboration.components.socialprofile");
			return this._oSocialProfile;
		},
		/**
		 * Sets the busy indicator for the Timeline control
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_setTimelineToBusy: function(){
			var oTimeline = this.byId("timeline");
			oTimeline.setBusyIndicatorDelay(0).setBusy(true);
		},
		/**
		 * Turn off the busy indicator for the Timeline control
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_setTimelineToNotBusy: function(){
			var oTimeline = this.byId("timeline");
			oTimeline.setBusyIndicatorDelay(0).setBusy(false);
		},
		/**
		 * Shows the number of new Feed Updates in the Timeline
		 * @param {integer} newFeedUpdatesCount: number of new feed updates
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_showFeedUpdatesInTimeline: function(newFeedUpdatesCount) {
			var oTimeline = this.byId("timeline");
			var oMessageStrip = oTimeline.getMessageStrip();
			
			if (newFeedUpdatesCount > 0) {
				if (!this.byId("refreshLink")) {
					var oRefreshLink = new sap.m.Link(this.createId("refreshLink"), {
						text: this._oLanguageBundle.getText("GF_REFRESH_FEED"),
						press: [function() {
							// refresh the feed
							var sFeedEndpoint = this._oViewDataModel.getProperty("/feedEndpoint");
							this._initialLoadFeedEntries(sFeedEndpoint);
						}, this]
					});
					oMessageStrip.setLink(oRefreshLink);
					oMessageStrip.setType(sap.ui.core.MessageType.Information);
					oMessageStrip.setShowIcon(true);
				}
				newFeedUpdatesCount == 1 ? oTimeline.setCustomMessage(this._oLanguageBundle.getText("GF_NEW_FEED_UPDATE")) :
					oTimeline.setCustomMessage(this._oLanguageBundle.getText("GF_NEW_FEED_UPDATES", newFeedUpdatesCount));
				
				oMessageStrip.setVisible(true);
				oTimeline.rerender();
			}
		},
		/**
		 * Hide the number of new Feed Updates in the Timeline
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_hideFeedUpdatesInTimeline: function() {
			var oMessageStrip = this.byId("timeline").getMessageStrip();
			oMessageStrip.close();
		},
		
		/************************************************************************
		 * Controls event handlers
		 ***********************************************************************/
		/**
		 * Event handler for the "Show More" button of the Timeline Control
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onGrow: function(oEvent) {
			// if there's a pending request, do not start a new one
			if (!this._oPendingRequests.loadingFeedEntriesRequest || !this._oPendingRequests.loadingFeedEntriesRequest.state() != "pending") {
				var sFeedEndpoint = this._oViewDataModel.getProperty("/feedEndpoint");
				
				this._loadFeedEntries(sFeedEndpoint).done(this._loadFeedEntriesSuccess.bind(this));	
			}
		},
		/**
		 * Event handler for the Group Selector button of the Timeline Control
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onGroupSelectorButtonPress: function(oEvent){
			// asks the mode class instance to display its source
			// selector popover next to the group selector button.
			this._oMode.displayFeedSourceSelectorPopover(oEvent.getSource());
		},
		/**
		 * Event handler for the add post button. Opens a pop over to add a post.
		 * @param {object} event
		 * @public
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onAddPost: function(event) {
			this.byId("addPost_popover").close();
			var sContent = this.byId("social_TextArea").convertTextWithFullNamesToEmailAliases();
			// post the user content if it's not empty
			if (sContent && sContent.trim() !== "") {
				this._getLoggedInUser().done(function() {
					this._setTimelineToBusy();
					
					var fnSuccessCallback = function (oData, response) { // success callback
						this.byId("social_TextArea").clearText(); // clear the text in the add post popover
						this.byId("addPost_postButton").setEnabled(false); // disable the add post button until the user types
						this._setTimelineToNotBusy();
						
						var oFeedEntry = this._oCommonUtil.getODataResult(oData);
						oFeedEntry.Creator = this._mCurrentUser;
						
						var oTimelineItem = this._createTimelineItem(oFeedEntry);
						this.byId("timeline").insertContent(oTimelineItem, 0); // add timeline item to timeline
					};
					var fnFailCallback = function (oError) { // fail callback
						this._oLogger.error("Error occured when adding a post.", oError.stack);
					};
					
					var mAddPostReturn = this._oMode.addPost(sContent);
	
					this._oPostRequestData = { "path" : mAddPostReturn.path, "payload" : mAddPostReturn.payload }; // save the request data
					this._oPostRequestData.parameters = { success : fnSuccessCallback, error : fnFailCallback };
					
					var oAddPostPromise = mAddPostReturn.promise;
					oAddPostPromise.then(fnSuccessCallback.bind(this), fnFailCallback.bind(this));
				}.bind(this));
			}
			else {
				this._oLogger.info('Posting an empty comment is not allowed, no feed entry will be created.');
			}
		},
		/**
		 * Event handler when the ReplyPopover is opened.
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onReplyListOpen: function(oEvent){
			// set the focus on the text area inside the reply popover immediately on open
			var oCustomReply = oEvent.getSource().getCustomReply();
			oCustomReply.getTextArea().focus();
			
			if (!this._bReplyPopoverIsOpen) {
				this._bReplyPopoverIsOpen = true;
				var oTimelineItem = oEvent.getSource();
				var sFeedId = oTimelineItem.getModel().getProperty("/Id");
				this._getReplies(sFeedId, undefined, oTimelineItem);
			}
		},
		/**
		 * Event handler when the "Post" button is pressed on the ReplyPopover.
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onPostReplyPress: function(oEvent){
			var that = this;
			var sValue = oEvent.getParameter("value");
			var oTimelineItem = oEvent.getSource().getParent();
			var oCustomReply = oTimelineItem.getCustomReply();
			var sFeedId = oTimelineItem.getModel().getData().Id;
			var sPath = "/FeedEntries('" + jQuery.sap.encodeURL(sFeedId) + "')/Replies";
			var oDataPayload = { "Text" : sValue };
			this._getLoggedInUser();
			this._getLoggedInUser().done(function() {
				var mParameters = {
					"async": true,
					"success": function(oData, response) {
						oCustomReply.getTextArea().clearText(); // clear the text area on successfully reply
						oCustomReply.enableButton(false); // disable the post button until user starts typing again
						oCustomReply.setBusy(false);
						
						var oJamResults = that._oCommonUtil.getODataResult(oData);
						
						var oReply = {
							"CreatedAt": that._oDateUtil.formatDateToString(oJamResults.CreatedAt),
							"Text": oJamResults.Text,
							"Creator" : that._mCurrentUser
						};
						oReply.Creator.ThumbnailImage = that._buildThumbnailImageURL(that._mCurrentUser.Id);
						
						oCustomReply.addReply(oReply);
						
						oTimelineItem.getModel().setProperty("/RepliesCount", oTimelineItem.getModel().getProperty("/RepliesCount") + 1); // +1 to the reply count
					},
					"error": function(oError) {
						that._oLogger.error("Failed to post reply: " + oError.statusText, oError.stack);
					}
				};
							
				// We need to put the focus on the text area to avoid the Popover from closing - not sure why it closes
				oCustomReply.getTextArea().focus();
				oCustomReply.setBusyIndicatorDelay(0).setBusy(true);
				this._oPostRequestData = {"path": sPath, "payload": oDataPayload, "parameters": mParameters}; // save the request data
				this._oJamModel.create(sPath, oDataPayload, mParameters);
			}.bind(this));
		},
		/**
		 * Event handler for the suggestions
		 * @param {object} oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onSuggest: function(oEvent){
			var that = this;
			
			if (this._oPendingRequests.loadingSuggestionsRequest){
				this._oPendingRequests.loadingSuggestionsRequest.abort();
			}
			
			var oSocialTextArea = oEvent.getSource();
			var sValue = oEvent.getParameter("value");
			if (sValue.trim() === ""){ // if value is empty then it's the suggestions is triggered but user has not entered any text yet
				oSocialTextArea.showSuggestions([]);
			}
			else {
				var sPath = "/Members_Autocomplete";
				var sGroupId = this._oViewDataModel.getProperty("/groupSelected/Id");
				var mParameters = {
					"async": true,
					"urlParameters": {
						"Query": "'" + sValue + "'",
						"GroupId": "'" + sGroupId + "'",
						"$top": "4"
					},
					"success": function(oData, response){
						gettingSuggestionsPromise.resolveWith(that, [oData,response]);
					},
					"error": function(oError){
						that._oLogger.error("Failed to get suggestions: " + oError.statusText);
						gettingSuggestionsPromise.rejectWith(that, [oError]);
					}
				};
				
				var gettingSuggestionsPromise = jQuery.Deferred();
				gettingSuggestionsPromise.done(function(oData, response){
					var aJamResults = that._oCommonUtil.getODataResult(oData);
					if (aJamResults.length === 0) { // if nothing is returns from jam then close the suggestion popover
						oSocialTextArea.closeSuggestionPopover();
					}
					else {
						var aSuggestions = [];
						var iJamResultsLength = aJamResults.length;
						for(var i = 0; i < iJamResultsLength; i++){
							aSuggestions.push({
								fullName: aJamResults[i].FullName,
								email: aJamResults[i].Email,
								userImage: that._buildThumbnailImageURL(aJamResults[i].Id)
							});
						}
						oSocialTextArea.showSuggestions(aSuggestions);
					}
				});
				this._oPendingRequests.loadingSuggestionsRequest = gettingSuggestionsPromise.promise(this._oJamModel.read(sPath, mParameters));
			}
		},
		/**
		 * Event handler for userNameClicked event
		 * @param {object} oControlEvent - event when the user name is clicked
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onUserNameClicked: function(oControlEvent){
			var oUserNameLink = oControlEvent.getParameter("uiElement");
			var oTimelineEntryModel = oControlEvent.getSource().getModel();
			var sMemberId = oTimelineEntryModel.getProperty("/Creator/Email");
			
			this._oSocialProfile.setSettings({
				openingControl: oUserNameLink,
				memberId: sMemberId
			});
			this._oSocialProfile.open();
		},
		/**
		 * Event handler for the more custom action. Opens a pop over that contain links to the group and feed entry.
		 * @param oControlEvent - event when a custom action is clicked
		 * @public
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */		
		onMoreClicked: function(oControlEvent){
			var sFeedEntryWebURL  = oControlEvent.getSource().getModel().getProperty("/WebURL");		
			var sFeedEntryId = oControlEvent.getSource().getModel().getProperty("/Id");
			
			var sSelectedGroupName = oControlEvent.getSource().getParent().getModel().getProperty("/groupSelected/Name");	
			var sSelectedGroupWebURL = oControlEvent.getSource().getParent().getModel().getProperty("/groupSelected/WebURL");	

			var oMorePopover = this.byId(this.createId("moreListPopover_" + sFeedEntryId));
			
			if (oMorePopover === undefined){
				var oMoreList = new sap.m.List(this.createId("moreList_" + sFeedEntryId), {});
	         
		        var oGroupNameLink = new sap.m.Link(this.createId("groupNameLink_" + sFeedEntryId), {
		        	text: this._oLanguageBundle.getText("ST_GROUP_NAME_LINK", sSelectedGroupName),
		            target: "_blank",
		            href: sSelectedGroupWebURL,
	                width: "15em"
		        }).addStyleClass("sapCollaborationCustomLinkPadding");
		         
		        var oGroupNameLinkListItem = new sap.m.CustomListItem(this.createId( sFeedEntryId + "_groupNameLinkListItem" ), {
		            content: oGroupNameLink
		        });
		         
		        oMoreList.addItem(oGroupNameLinkListItem);
	            
	            var oFeedEntryLink = new sap.m.Link(this.createId("feedEntryLink_" + sFeedEntryId), {
	                 text: this._oLanguageBundle.getText("ST_FEED_ENTRY_LINK"),
	                 target: "_blank",
	                 href: sFeedEntryWebURL,
		             width: "15em"
	            }).addStyleClass("sapCollaborationCustomLinkPadding");
	            
	            var oFeedEntryLinkListItem = new sap.m.CustomListItem(this.createId("feedEntryLinkListItem_" + sFeedEntryId), {
	                 content: oFeedEntryLink
	            });
	            
	            oMoreList.addItem(oFeedEntryLinkListItem);
	            
	            var bshowHeader = false;
	            
	            if (sap.ui.Device.system.phone) {
	            	bshowHeader = true;
	            }
	            
	            oMorePopover = new sap.m.ResponsivePopover(this.createId("moreListPopover_" + sFeedEntryId), {
	                content: oMoreList,
	                showHeader: bshowHeader,
	                title: this._oLanguageBundle.getText("ST_MORE_CUSTOM_ACTION"),
	                showCloseButton: true,
	                placement: sap.m.PlacementType.VerticalPreferedBottom,
	                contentWidth: "15em"
	            });
	            
				var fnClose = function () {
					this.close();
				};
				// close popover after clicking links
				oGroupNameLink.attachPress(fnClose.bind(oMorePopover));
				oFeedEntryLink.attachPress(fnClose.bind(oMorePopover));
			}
            oMorePopover.openBy(oControlEvent.getParameter("linkObj"));
		},
		/**
		 * Event handler when an AtMention in the embedded control is clicked
		 * @param {object} oControlEvent - event when the user name is clicked
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		onAtMentionClicked: function(oControlEvent){
			
			var sFeedId = oControlEvent.getSource().getModel().getProperty("/Id");
			var oUserNameLink = oControlEvent.getParameter("link");
			var placeholderIndex = oUserNameLink.getModel().getProperty("/placeholderIndex");				

			this._oAtMention = {
					"feedId": sFeedId,
					"oUserNameLink": oUserNameLink,
					"placeholderIndex": placeholderIndex,
					"aAtMentions": [],
					"atMentionsNextLink": undefined
			};

			this._processAtMentions();
		},

		/************************************************************************
		 * View model's event handlers
		 ************************************************************************/
		/**
		 * Event handler when the url is changed
		 * @param {object} event
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_onFeedEndpointChange: function(event) {
			var sFeedEndpoint = event.getSource().getValue();
			
			this._initialLoadFeedEntries(sFeedEndpoint);
		},
		/**
		 * Event handler for when the property feedSources changes
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_onFeedSourcesChange: function(oEvent) {
			// For backwards compatibility:
			var sErrorMessage;
			var oFeedSources = oEvent.getSource().getValue();
			if (Array.isArray(oFeedSources)) {
				oFeedSources = {
					mode: sap.collaboration.FeedType.GroupIds,
					data: oFeedSources
				};
			}

			if (this._oMode) {
				this._oMode.stop();
			}

			if (this._oCommonUtil.isString(oFeedSources.mode)) {
				if (this._oModes[oFeedSources.mode] === undefined) {
					this._oModes[oFeedSources.mode] = ModeFactory.getInstance().createMode(oFeedSources.mode, this);
				}
			}
			else {
				sErrorMessage = "The mode must be a string.";
				this.logError(sErrorMessage);
				this.byId("timeline").destroy();
				throw new Error(sErrorMessage);
			}

			this._oMode = this._oModes[oFeedSources.mode];
			this._oMode.start(oFeedSources.data);
		},

		/**
		 * Event handler when the property 'filterMessage' is changed.
		 * Sets the custom message on the timeline.
		 * @param {object} event
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_onFilterMessageChange: function(event) {
			var sText = event.getSource().getValue();
			this.byId("timeline").setCustomMessage(sText);
			this.byId("timeline").rerender();
		},
		/************************************************************************
		 * SM Integration V2 model's event handlers
		 ************************************************************************/
		/**
		 * Event handler for when Jam or SMI fail to load their metadata
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */ 
		_onMetadataFailed: function(oEvent) {
			
			switch(oEvent.oSource.sServiceUrl) {
			case this._oMode.getJamServiceUrl():
				this._oLogger.error("Failed to load Jam metadata. Service unavailable or possible missing JAM configuration.");
				this._displayJamConnectionErrorMessage();
				this._oMode.setJamServiceAvailable(false);
				break;
				
			case this._oMode.getSMIv2ServiceUrl():
				this._oLogger.error("Failed to load SMIv2 metadata.");
				this.displayErrorMessage();
				break;
			}
			this.disableGroupFeed();
		},
		/************************************************************************
		 * Jam model's event handlers
		 ************************************************************************/
		/**
		 * Event handler for when the requests to Jam are completed
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_onJamRequestCompleted: function(oEvent) {
			var sMethod = oEvent.getParameter("method");
			
			if (oEvent.success && sMethod === "POST") {
				// reset the refreshing security token request because it is not needed
				this._oPendingRequests.refreshingSecurityToken = undefined;				
			}
		},
		/**
		 * Event handler for when the requests to Jam fail
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_onJamRequestFailed: function(oEvent) {
			this._setTimelineToNotBusy();
			
			var sMethod = oEvent.getParameter("method");
			var iStatusCode = parseInt(oEvent.getParameter("response").statusCode, 10);
			var sFeedEndpoint = oEvent.getParameter("feedEndpoint");
			
			// if the endpoint is still empty, read the parameter url
			if (!sFeedEndpoint) {
				sFeedEndpoint = oEvent.getParameter("url");	
			}
			
			if (/ExternalObjects_FindByExidAndObjectType/.test(sFeedEndpoint)) {
				// Leave the BOMode class handle its own error messages.
				// This assumes that only the BOMode makes this call and
				// no other part of the code relies on this method to
				// display errors when a failure occurs for this call.
				this.disableGroupFeed();
				return;
			}
			
			switch(iStatusCode) {
			case 403: // Forbidden
				// For Post requests, we must refresh the security token and re-execute the request
				// to make sure it's actually a forbidden request
				if (sMethod === "POST") {
					if (this._oPendingRequests.refreshingSecurityToken === undefined) {
						this._refreshSecurityToken().done(function(oData,response){
							this._oJamModel.create(this._oPostRequestData.path, this._oPostRequestData.payload, this._oPostRequestData.parameters);
						});
					}
					else {
						this._oPendingRequests.refreshingSecurityToken = undefined;
						this.displayErrorMessage(this._oLanguageBundle.getText('JAM_NO_ACCESS_TO_POST_TO_GROUP'));
					}
				}
				else{
					this.displayErrorMessage(this._oLanguageBundle.getText('JAM_FORBIDDEN_ACCESS'));
				}
				break;
			case 404: // Not Found
				if (/Groups\(.*\)\/FeedEntries/.test(sFeedEndpoint)) { // /Groups(*)/FeedEntries 
					this.displayErrorMessage(this._oLanguageBundle.getText('JAM_NO_ACCESS_TO_GROUP'));
					this.disableGroupFeed();
				}
				else if (/Groups\(.*\)/.test(sFeedEndpoint)) { // /Groups(*) 
					this.displayErrorMessage(this._oLanguageBundle.getText('JAM_NO_ACCESS_TO_GROUP'));
					this.disableGroupFeed();
				}
				else if (/GroupExternalObject_FeedLatestCount|Group_FeedLatestCount/.test(sFeedEndpoint) ) {
					// stop checking for feed updates
					this._stopAutoCheckingForNewUpdates();
				}
				else{
					this.displayErrorMessage(); 	
				}
				break;
			case 500: // Internal Server Error
			case 503: // Service Unavailable
				this._displayJamConnectionErrorMessage();
				break;
			default:
				this.displayErrorMessage();
			}
			
		},
		/**
		 * Event handler for when the requests to Jam is sent
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_onJamRequestSent: function(oEvent) {
		},
		/**
		 * Event handler for when the requests to Jam batch call is completed
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_onBatchCompleted: function(oEvent) {
			this._oJamModel.setUseBatch(false); // batch is required for initial load, turn off for all subsequent requests
			this._oMode.onBatchCompleted(oEvent);
		},
		/**
		 * Event handler for when the requests to Jam batch call fails
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_onBatchFailed: function(oEvent) {
		},
		/**
		 * Event handler for when the requests to Jam batch call is sent
		 * @param oEvent
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_onBatchSent: function(oEvent) {
		},
		/************************************************************************
		 * Requests
		 ************************************************************************/
		/**
		 * Abort all pending requests
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_abortAllPendingRequests: function() {
			if (this._oPendingRequests.loadingFeedEntriesRequest) {
				this._oPendingRequests.loadingFeedEntriesRequest.abort();
			}
			if (this._oPendingRequests.loadingRepliesRequest) {
				this._oPendingRequests.loadingRepliesRequest.abort();
			}
			if (this._oPendingRequests.loadingSuggestionsRequest) {
				this._oPendingRequests.loadingSuggestionsRequest.abort();
			}
		},
		/**
		 * Refreshes the security token and performs a POST to the path provided
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_refreshSecurityToken: function(){
			var that = this;
			var refreshingSecurityToken = jQuery.Deferred();
			
			return this._oPendingRequests.refreshingSecurityToken = 
				refreshingSecurityToken.promise(this._oJamModel.refreshSecurityToken(
					function(oData, response){
						that._oLogger.info("Security token refreshed");
						refreshingSecurityToken.resolveWith(that,[oData, response]);
					},
					function(oSecurityTokenError){
						that._oLogger.error("Security token error: " + oSecurityTokenError.statusText);
						refreshingSecurityToken.rejectWith([oSecurityTokenError],that);
					}
				));
		},
		/**
		 * Get the logged in user from Jam and assign it to a member attribute of the controller.
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_getLoggedInUser: function(){
			var getLoggedInUser = jQuery.Deferred();
			if(!this._mCurrentUser){
				var sPath = "/Self";
				var mParameters = {
					"success": function(oData, response){
						this._mCurrentUser = this._oCommonUtil.getODataResult(oData);
						getLoggedInUser.resolve(oData, response);
					}.bind(this),
					"error": function(oError){
						this._oLogger.error('Failed to get the logged in user', oError.stack);
						getLoggedInUser.reject(oError);
					}.bind(this)
				};
				
				return getLoggedInUser.promise(this._oJamModel.read(sPath, mParameters));
			}
			return getLoggedInUser.resolve();
		},
		/**
		 * Load the feed entries for the selected group. If a next link exists, get the next page.
		 * @private
		 * @param {string} feedEndpoint the feed endpoint to fetch the feed entries
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_loadFeedEntries: function(feedEndpoint) {
			var sSkipToken = undefined;
			// if Jam is not configured, do not execute
			if (!this._oMode.isJamServiceAvailable()) {
				return;
			}
			this._setTimelineToBusy();
			
			// resolve next link
			var sNextLink = this._oNextLinks.feedEntriesNextLink;
			if (sNextLink !== "") {
				sNextLink = decodeURIComponent(sNextLink);
				sSkipToken = this._extractUrlParams(sNextLink).$skiptoken;
			}
			
			return this._oPendingRequests.loadingFeedEntriesRequest = this._oMode.getFeedEntries(feedEndpoint, sSkipToken);
		},
		/**
		 * Loading the feed entries success function
		 * @private
		 * @param {string} feedEndpoint the feed endpoint to fetch the feed entries
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_loadFeedEntriesSuccess: function(oData, response) {
			this._oNextLinks.feedEntriesNextLink = oData.__next;
			var aFeedEntries = this._oCommonUtil.getODataResult(oData); // get the feed entries from the results
			this._processFeedEntries(aFeedEntries);
		},
		/**
		 * Initial load the feed entries for the selected group.
		 * @private
		 * @param {string} feedEndpoint - the feed endpoint to fetch the feed entries
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_initialLoadFeedEntries: function(feedEndpoint) {
			
			if (this._oPendingRequests.loadingFeedEntriesRequest) {
				this._oPendingRequests.loadingFeedEntriesRequest.abort();
			}
			
			this._initializeRequestStateData();
			this._oViewDataModel.setProperty("/forceGrowing", true); // enable the more button 
			this._hideFeedUpdatesInTimeline();	// reset feed updates message
			this._stopAutoCheckingForNewUpdates();
			
			this._loadFeedEntries(feedEndpoint).done([this._clearTimeline.bind(this),
			                                           this._loadFeedEntriesSuccess.bind(this),
			                                           this._startAutoCheckingForNewUpdates.bind(this)]);
		},
		/**
		 * Get the Replies based on whether the sFeedEntryId or sNextLink is passed:
		 * i- If the sFeedEntryId is passed, then the assumption is that it's the initial set of replies
		 * ii- If the sNextLink is passed, then the assumption is that the "Show More" link is pressed and the next link from SAP Jam is used
		 * to make the call to retrieve the next set of Replies
		 * 
		 * @param {string} sFeedId - the feed entry id
		 * @param {string} sNextLink - the next link from SAP Jam
		 * @param {object} oTimelineItem - the timeline item that corresponds to this Reply
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_getReplies: function(sFeedId, sNextLink, oTimelineItem) { 
			var that = this;
			var sPath;
			var mParameters = {
				"async": true,
				"urlParameters": {
						'$orderby': 'CreatedAt desc',
						'$expand': 'Creator'
				},
				"success": function(oData, response){
					that._oLogger.info("Replies were successfully retrieved.");
					gettingRepliesPromise.resolveWith(that, [oData,response]);
				},
				"error": function(oError){
					that._oLogger.error("Failed to retrieve replies: " + oError.statusText);
					gettingRepliesPromise.rejectWith(that, [oError]);
				}
			};
			var oCustomReply = oTimelineItem.getCustomReply();
			
			if (sNextLink){
				sPath = "/" + sNextLink;
				mParameters.urlParameters = this._extractUrlParams(decodeURIComponent(sNextLink));
				mParameters.urlParameters.$orderby = mParameters.urlParameters.$orderby.replace("+", " ");
			}
			else {
				sPath = "/FeedEntries('" + jQuery.sap.encodeURL(sFeedId) + "')/Replies";
			}
			
			var gettingRepliesPromise = jQuery.Deferred();
			gettingRepliesPromise.done(function(oData, response){
				var aReplies = that._oCommonUtil.getODataResult(oData).reverse();
				
				// for each reply, build the image url and format the date
				aReplies.forEach(function(oReply){
					oReply.Creator.ThumbnailImage = that._buildThumbnailImageURL(oReply.Creator.Id);
					oReply.CreatedAt = that._oDateUtil.formatDateToString(oReply.CreatedAt);
				});
				
				oCustomReply.addReplies({
					data : aReplies,
					more : oData.__next ? true : false
				});
				oTimelineItem.getModel().getData().Replies.__next = oData.__next;
			})
			.always(function(){
				oCustomReply.setBusy(false);
			})
			.fail(function(){
				oCustomReply._oReplyPopover.close();
			});
			
			oCustomReply.setBusyIndicatorDelay(0).setBusy(true);
			this._oPendingRequests.loadingRepliesRequest = gettingRepliesPromise.promise(this._oJamModel.read(sPath, mParameters));
			
		},
		/************************************************************************
		 * Logging Services
		 ************************************************************************/
		 /**
		  * A service method to allow class instances needed by the controller
		  * to log their errors.
		  * @param {string} sErrorMessageToLog - The error message to log.
		  * @memberOf sap.collaboration.components.feed.views.GroupFeed
		  */
		 logError: function(sErrorMessageToLog) {
		 	this._oLogger.error(sErrorMessageToLog);
		 },
		 /************************************************************************
		 * Public Methods to Expose Resources Needed by Collaboration Classes
		 ************************************************************************/
		 /**
		  * A service method to expose the controller's view's models.
		  * @param {string|undefined} [sName] name of the model to be retrieved
		  * @return {sap.ui.model.Model} the requested model
		  * @memberOf sap.collaboration.components.feed.views.GroupFeed
		  */
		 getModel: function(sName) {
	 		return this.getView().getModel(sName);
		 },
		 /**
		  * A service method to define the controller's view's models.
		  * @param {object} [oModel] model to be assigned
		  * @param {string|undefined} [sName] name of the model to be defined
		  * @public
		  * @memberOf sap.collaboration.components.feed.views.GroupFeed
		  */
		 setModel: function(oModel, sName) {
			 this.getView().setModel(oModel, sName);
		 },
		 /**
		  * This method returns this controller's LanguageBundle instance.
		  * @return {sap.collaboration.components.util.LanguageBundle} the LanguageBundle instance used by the controller
		  * @public
		  * @memberOf sap.collaboration.components.feed.views.GroupFeed
		  */
		 getLanguageBundle: function () {
		 	return this._oLanguageBundle;
		 },
		 /**
		  * A method to set the jam model
		  * @param {object} [oModel] model to be assigned
		  * @public
		  * @memberOf sap.collaboration.components.feed.views.GroupFeed
		  */
		 setJamModel: function(oModel) {
			 this._oJamModel = oModel;
			 this.setModel(oModel, "jam");
		 },
		 /**
		  * A method to set the jam model
		  * @param {object} [oModel] model to be assigned
		  * @public
		  * @memberOf sap.collaboration.components.feed.views.GroupFeed
		  */
		 setSmiModel: function(oModel) {
			 this._oSMIModel = oModel;
			 this.setModel(oModel, "smi");
		 },
		/************************************************************************
		 * Error handling
		 ************************************************************************/
		/**
		 * Display error message
		 * @public
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		displayErrorMessage: function(sErrorText) { 
			var sMessage = sErrorText || this._oLanguageBundle.getText("SYSTEM_ERROR_MESSAGEBOX_GENERAL_TEXT");
			
			MessageBox.error(sMessage);
		},
		/**
		 * Display Jam connection error
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_displayJamConnectionErrorMessage: function() { 
			var sMessage = this._oLanguageBundle.getText("JAM_CONNECTION_ERROR_MESSAGEBOX_TEXT");
			
			MessageBox.error(sMessage);
		},
		/**
		 * Disable the Timeline control
		 * @public
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed 
		 */
		disableGroupFeed: function(){
			this._abortAllPendingRequests();
			
			var oTimeline = this.byId("timeline");
			if (!jQuery.isEmptyObject(oTimeline)){
				oTimeline.setBusyIndicatorDelay(0).setBusy(false);

				this._clearTimeline();
				
				this._oViewDataModel.setProperty("/groupSelectorEnabled",false);
				this._oViewDataModel.setProperty("/addPostButtonEnabled",false);
				this._oViewDataModel.setProperty("/forceGrowing",false);
			}
		},	
		
		/**
		 * Enable the Timeline control
		 * @public
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed 
		 */
		enableGroupFeed: function(){
			var oTimeline = this.byId("timeline");
			if (!jQuery.isEmptyObject(oTimeline)){
				oTimeline.setBusyIndicatorDelay(0).setBusy(false);

				this._oViewDataModel.setProperty("/groupSelectorEnabled", true);
				this._oViewDataModel.setProperty("/addPostButtonEnabled", true);
				this._oViewDataModel.setProperty("/forceGrowing", true);
			}
		},	
		
		/************************************************************************
		 * Utilities
		 ************************************************************************/
		/**
		 * Starts the auto new feed checking feature
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed 
		 */
		_startAutoCheckingForNewUpdates: function() {
			this._iNewFeedUpdatesCheckerTimeDelay = 120000; // in milliseconds
			this._sNewFeedUpdatesCheckerTimeoutId = jQuery.sap.delayedCall(this._iNewFeedUpdatesCheckerTimeDelay, this, this._checkForNewFeedUpdates);
		},
		/**
		 * Stops the auto new feed checking feature
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed 
		 */		
		_stopAutoCheckingForNewUpdates: function() {
			jQuery.sap.clearDelayedCall(this._sNewFeedUpdatesCheckerTimeoutId);
		},
		/**
		 * Checks Jam for new feed updates
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed 
		 */
		_checkForNewFeedUpdates: function() {
			
			var fnSuccess = function(oData, response) {
				this._showFeedUpdatesInTimeline(oData); 
				this._sNewFeedUpdatesCheckerTimeoutId = jQuery.sap.delayedCall(this._iNewFeedUpdatesCheckerTimeDelay, this, this._checkForNewFeedUpdates);
			};
			var fnError = function(oError) {
				this._oLogger.error("Failed to check for new feed updates.");
				this._sNewFeedUpdatesCheckerTimeoutId = jQuery.sap.delayedCall(this._iNewFeedUpdatesCheckerTimeDelay, this, this._checkForNewFeedUpdates);
			};
			
			// check Jam for the new feed updates
			this._oMode.getFeedUpdatesLatestCount().done(fnSuccess.bind(this)).fail(fnError.bind(this));
		},
		/************************************************************************
		 * Utilities
		 ************************************************************************/
		/**
		 * Returns a map containing URL parameters extracted from a URL
		 * @param {string} sURL
		 * @return {map} mUrlParameters
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_extractUrlParams: function(sURL) {
			var sUrlParameters = sURL.slice(sURL.indexOf("?")+1);
			var aUrlParameters = sUrlParameters.split("&");
			var mUrlParameters = {};
			
			aUrlParameters.forEach(function(urlParameter) {
				var indexOfEqual = urlParameter.indexOf("=");
				mUrlParameters[urlParameter.slice(0, indexOfEqual)] = urlParameter.slice(indexOfEqual+1);
			});
			return mUrlParameters;
		},
		/**
		 * Returns a URL for the ThumbnailImage
		 * @param {string} sUserId
		 * @return {string}
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_buildThumbnailImageURL: function(sUserId) {
			return this._oJamModel.sServiceUrl + "/Members('" + jQuery.sap.encodeURL(sUserId) + "')/ThumbnailImage/$value";
		}

	});
	return oGroupFeed;
}, /* bExport= */ true);

}; // end of sap/collaboration/components/feed/views/GroupFeed.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.Sharing.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.sharing.Sharing.controller');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */





jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


sap.ui.controller("sap.collaboration.components.fiori.sharing.Sharing", {

	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created.
	 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * Initialize class variables
	 * @memberOf Sharing
	 */
	onInit: function() {
		// References to the View's controls needed by the Sharing controller.
		this.oNoteTextArea = this.getView().oNoteTextArea;
		this.oAttachmentsInput = this.getView().oAttachmentsInput;
		this.oTargetFolderInput = this.getView().oTargetFolderInput;
		
		this.oODataUtil = undefined;
		this.sPrefixId = this.getView().getViewData().controlId;
		this.oLangBundle = this.getView().getViewData().langBundle;
						
		this.iJamGroupsCount = 0;

		// Share Object and External Object
		this.sObjectId = this.getView().getViewData().objectId;
		this.sObjectShare = this.getView().getViewData().objectShare;
		this.oObjectDisplay = this.getView().getViewData().objectDisplay;
		this.oExternalObject = undefined;
		this.oMappedExternalObject = undefined;
		this.sMemberEmail = undefined; // remove after jam implements feed entry after sharing BO
		
		this.oSharingDialog = this.getView().getViewData().sharingDialog;
		this.fNoGroupsCallBack = this.getView().getViewData().noGroupsCallBack;
		
		this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		
		// Variables for Attachment Selection
		this.oAttachments = this.getView().getViewData().attachments;
		this.bAttachmentsCB = false;
		this.aFiles = [];
		this.aSelectedFiles = [];
		
		// Variables for Group Selection
		this.sSelectedFolderId = '';		
		this.oItemTemplate = undefined;
		this.oSelectedGroup = undefined;
		
		// Suggestions request
		this.gettingSuggestions = undefined;
	},
	
	/**
	* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
	* (NOT before the first rendering! onInit() is used for that one!).
	* @memberOf Sharing
	*/
	onBeforeRendering: function() {
		try{
			// Variables for Group Selection, has to be in the onBeforerendering to be reset each time the component is loaded
			this.sSelectedGroupId = '';
			this.sSelectedGroupName = '';
			
			// Initialize Utility Classes
			if (!this.oSMIODataModel){
				this.initializeOdataModel();
			}
			if (!this.oODataUtil){
				this.initializeOdataUtils();
			}
			if(!this.oAttachmentsUtil){
				this.initializeAttachmentsUtil();
			}
			// The share util has to be initialized each time the dialog opens to handle the upload correctly
			this.initializeShareUtil();
			
			// Setup to be done on the controls before rendering
			this.preRenderSetup();
			// Fetch data needed for the Share view
			this.fetchData();
			
			// Attachments Initialization ***********************************************
			this.clearAttachmentsData();
			this.oAttachments = this.getView().getViewData().attachments;

			if(this.oAttachments && this.oAttachments.attachmentsArray){
				this.aFiles = this.oAttachments.attachmentsArray;
				// Enable/Disable attachment selection
				if(this.aFiles.length > 0){
					this.getView().oAttachmentsInput.setEnabled(true);
				}
				else{
					this.getView().oAttachmentsInput.setEnabled(false);
				}
				
				// Update the attachments dialog
				if(this.oFileSelectionDialog){
					var oAttachmentsModel = this.oAttachmentsUtil.createAttachmentsModel(this.aFiles);
					this.oFileSelectionDialog.setModel(oAttachmentsModel);
				}
							
				// Show attachments fields
				this.showAttachmentsFields(true);
			}
			else{
				// Hide attachments button
				this.showAttachmentsFields(false);
			}
			//***************************************************************************

			// In case the view was rerendered (ie it was created previously and then reused again), we have to reset the field for note
			if(this.sObjectId != this.getView().getViewData().objectId){
				this.sObjectId = this.getView().getViewData().objectId;
			}
			
			// In case the view was rerendered (ie it was created previously and then reused again) or the 
			// user changed the note, we have to reset the field for note
			if(this.sObjectShare != this.getView().getViewData().objectShare || 
					sap.ui.getCore().byId(this.sPrefixId + "_NoteTextArea").setValue !== this.getView().getViewData().objectShare){
				this.sObjectShare = this.getView().getViewData().objectShare;
				sap.ui.getCore().byId(this.sPrefixId + "_NoteTextArea").setInitialValue(this.sObjectShare);
			}
			
			// In case of rerendering when display object was different than previous one, there are two possible scenarios:
			// 1. the previous display object existed, in this case remove the previous one then add the new item
			// 2. the previous display object did not exist, in this case just add the new item
			if (this.oObjectDisplay != this.getView().getViewData().objectDisplay){
				if(this.oObjectDisplay != undefined){
					this.getView().oSharingVBox.removeItem(0);
				}
				this.oObjectDisplay = this.getView().getViewData().objectDisplay;
				this.getView().oSharingVBox.insertItem(this.oObjectDisplay, 0);		
			}

		}
		catch(oError){	
			if(this.oSharingDialog){
				throw oError;
			}
			this.oCommonUtil.displayError(oError);
		}
	},
	
	/**
	* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	* This hook is the same one that SAPUI5 controls get after being rendered.
	* @memberOf Sharing
	*/
	onAfterRendering: function() {		
		// After some investigation, we noticed that setting the focus without a delay only
		// worked on browsers other than Chrome. So to get the focus to appear on the select
		// control in as many browsers as possible, we make the call to the focus function
		// with some delay for all browsers.
		setTimeout(function() {sap.ui.getCore().byId(this.sPrefixId + "_GroupSelect").focus();}.bind(this), 1);
	},
	
	/**
	* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	* @memberOf Sharing
	*/
	onExit: function() {
		this.getView().destroyContent();
	},
	
	/**
	* Does some setup required on some control (i.e disable/enable, set text ...) 
	* @private
	*/
	preRenderSetup : function() {
		this.getView().oGroupSelect.setEnabled(false);
		this.setGroupSelectionText("");
		if(this.oAttachments && this.oAttachments.attachmentsArray){
			this.getView().oTargetFolderInput.setEnabled(false);
		}
		this.getView().oNoteTextArea.setEnabled(false);
		// if Share is in dialog
		if(this.oSharingDialog){
			this.oSharingDialog.getButtons()[0].setEnabled(false); // enable "OK" button
			this.oSharingDialog.getButtons()[1].setEnabled(false); // enable "OK" button
		}
	},
	
	/**
	* Fetches the data needed for the component rendering
	* @private
	*/
	fetchData : function() {
		
		var self = this;

		var gettingGroupCount = new jQuery.Deferred();
		gettingGroupCount.done(function(count){
			self.iJamGroupsCount = count;
			if(self.iJamGroupsCount > 0){
				self.postFetchSetup();
				setTimeout(function(){
					self.getView().getContent()[0].getItems()[1].getContent()[1].focus();
				}, 50); // sets the focus to the Group Input field after it's enabled
			}
			else{
				if(self.fNoGroupsCallBack){
					self.fNoGroupsCallBack();
				}
			}
		}); 
		var gettingCollaborationHostUrl = new jQuery.Deferred();
		gettingCollaborationHostUrl.done(function(url){
			if(!self.sJamUrl){
				self.sJamUrl = url;
			}
		});
		var mappingInternalBOToExternalBO = new jQuery.Deferred();
		mappingInternalBOToExternalBO.done(function(externalBO){
			self.oMappedExternalObject = externalBO;
		});
		mappingInternalBOToExternalBO.fail(function(){
			self.oMappedExternalObject = undefined;
			jQuery.sap.log.debug('Mapping Internal BO to External BO failed');
		});
		
		var gettingEmail = new jQuery.Deferred();
		gettingEmail.done(function(email){
			if(!self.sMemberEmail){
				self.sMemberEmail = email;
			}
		});
		
		jQuery.when(gettingGroupCount,gettingCollaborationHostUrl,mappingInternalBOToExternalBO).fail(function(oErrorReponse){
			if(self.oSharingDialog){
				self.oSharingDialog.close();
			}
			if(oErrorReponse.statusCode === 401 || oErrorReponse.statusCode === 403){
				self.oCommonUtil.displayError(self.oLangBundle.getText("SHARE_AUTHORIZATION_FAILURE_MSG"));
			}
			else{
				self.oCommonUtil.displayError();	
			}
		});
		
		// Get group count
		this.oJamODataModel.read( '/Groups/$count', { 
			success: function(oData, response){
				gettingGroupCount.resolve(parseInt(response.body));
			},
			error: function(oError){
				gettingGroupCount.reject(oError.response);
			}
		});

		// Get email
		this.oJamODataModel.read( '/Self', { 
			success: function(oData, response){
				gettingEmail.resolve(this.oCommonUtil.getODataResult(oData).Email);
			}.bind(this),
			error: function(oError){
				gettingEmail.reject(oError.response);
			}
		});
		
		// Get collaboration host url
		if(!this.sJamUrl){
			this.oSMIODataModel.read('/GetCollaborationHostURL',{ 
				success: function(oData, response){
					gettingCollaborationHostUrl.resolve(oData.GetCollaborationHostURL.URL);
				},
				error: function(oError){
					gettingCollaborationHostUrl.reject(oError.response);
				} 
			});
		}else{
			gettingCollaborationHostUrl.resolve();	
		}
		
		// Map internal bo to external BO
		this.oExternalObject = this.getView().getViewData().externalObject; 		// Update external object from view data
		if(this.oExternalObject) {
			this.oSMIODataModel.read('/MapInternalBOToExternalBO',{
				urlParameters: { ApplicationContext: "'"+self.oExternalObject.appContext+"'",
								 ODataCollection: "'"+self.oExternalObject.collection+"'",
								 ODataKeyPredicate: "'"+self.oExternalObject.key+"'",
								 ODataServicePath: "'"+self.oExternalObject.odataServicePath+"'" },
				success: function(oData,response){
					mappingInternalBOToExternalBO.resolve(oData.MapInternalBOToExternalBO);
				},
				error: function(oError){
					mappingInternalBOToExternalBO.reject(oError.response);
				}
			});
		}
	},
	
	/**
	* Does some setup required on some control (i.e disable/enable ...) 
	* @private
	*/
	postFetchSetup : function() {
		this.setGroupSelectionEnabled(true);
	},
	
	/**
	 * Initializes the OData Model
	 * @private
	 */
	initializeOdataModel : function() {
		var asJson = true;
        this.sSMIODataServiceUrl = this.getView().getViewData().odataServiceUrl;
    	this.oSMIODataModel = new sap.ui.model.odata.ODataModel(this.sSMIODataServiceUrl, asJson);
    	
    	this.sJamODataServiceUrl = this.getView().getViewData().collaborationHostODataServiceUrl;
    	this.oJamODataModel = new sap.ui.model.odata.ODataModel(this.sJamODataServiceUrl, asJson);
    	this.oJamODataModel.setDefaultCountMode(sap.ui.model.odata.CountMode.Inline);
	},
	
	/**
	 * Initialize the OData Utility Class
	 * @private
	 */
	initializeOdataUtils : function() {
		this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
	},
	
	/**
	 * Initialize the Attachments Utility Class
	 * @private
	 */
	initializeAttachmentsUtil : function(){
		this.oAttachmentsUtil = new sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil(this.oLangBundle, this.oODataUtil, this.oJamODataModel);
	},
	
	/**
	 * Initialize the Share Utility Class
	 * @private
	 */
	initializeShareUtil : function(){
		this.oShareUtil = new sap.collaboration.components.fiori.sharing.helper.ShareUtil(this.oLangBundle, this.oODataUtil, this.oSMIODataModel, this.oCommonUtil,
				this.oJamODataModel, this.getView().getViewData().collaborationHostRestService );
	},
	
	/**
	 * Set Group Selection Text
	 * @private
	 */
	setGroupSelectionText: function(sText){
		var oGroupSelect = sap.ui.getCore().byId( this.sPrefixId + "_GroupSelect");
		oGroupSelect.setValue(sText);
	},
	
	/**
	 * Set Group Selection Enabled
	 * @private
	 */
	setGroupSelectionEnabled: function(bEnabled){
		var oGroupSelect = sap.ui.getCore().byId( this.sPrefixId + "_GroupSelect");
		oGroupSelect.setEnabled(bEnabled);
	},
	
	/**
	 * Set Group Selection Enabled
	 * @private
	 */
	setFolderSelectionEnabled: function(bEnabled){
		this.oTargetFolderInput.setEnabled(bEnabled);
	},
	
	/**
	 * Show/Hide fields for attachments
	 * @private
	 */
	showAttachmentsFields : function(bVisibility){
		this.getView().AttachmentsInputLayout.setVisible(bVisibility);
		this.getView().oTargetFolderInputLayout.setVisible(bVisibility);
		this.getView().oAttachmentCB.setVisible(bVisibility);		
	},
	
	/**
	 * Clear data for attachments
	 * @private
	 */
	clearAttachmentsData : function(){
		// Clear previous attachments data, buttons, texts
		this.aFiles = [];
		this.aSelectedFiles = [];
		this.sSelectedFolderId = '';
		this.bAttachmentsCB = false;
		
		// Reset text of button
		this.oAttachmentsInput.setValue("");
		
		// Clear Attachments Only checkbox
		this.getView().oAttachmentCB.setSelected(this.bAttachmentsCB);
		this.getView().oAttachmentCB.setEnabled(false);
		
		// Clear folder selection
		this.oTargetFolderInput.setValue("");
		if(this.oFolderSelectionDialog){
			this.oAttachmentsUtil.resetFolderSelection(this.getSelectedGroupId());
		}				
	},
	
	/**
	* Event Handler for the attachment value help
	* @private
	*/
	onAttachmentsValueHelpPress : function(oControlEvent){
		
		if(this.oSharingDialog){
			var iShareDialogHeight = this.oSharingDialog.getContent()[0].getDomRef().offsetHeight;
			var iShareDialogWidth = this.oSharingDialog.getContent()[0].getDomRef().offsetWidth;
		}
		
		// Create the file selection dialog
		if (!this.oFileSelectionDialog) {
			var oAttachmentsModel = this.oAttachmentsUtil.createAttachmentsModel(this.aFiles);
			this.oFileSelectionDialog = this.oAttachmentsUtil.createFileSelectionDialog(this.sPrefixId, oAttachmentsModel, this.onFileSelectionDialogConfirm(), iShareDialogWidth, iShareDialogHeight);
		}
		
		// Clear the filter on the binding
		var oBinding = this.oFileSelectionDialog.getBinding("items");
		oBinding.filter([]);
	
		// Open dialog
		this.oFileSelectionDialog.open();
	},
	
	/**
	 * This function returns a function that is called when the OK button of the files selection dialog is clicked.
	 * @private
	 */
	onFileSelectionDialogConfirm: function() {
		var self = this;
		
		return function(oEvent){
						
			self.aSelectedFiles = [];
			var aContexts = oEvent.getParameter("selectedContexts");
			for(var i=0; i<aContexts.length; i++){
				self.aSelectedFiles.push(aContexts[i].getObject());
			}
			
			// Set the text of the Attachments button (ex: Attachments(5) when there are 5 attachments selected)
			if (self.aSelectedFiles && self.aSelectedFiles.length > 0) {
				self.postFileSelectionSetup(true);
			}
			else{
				self.postFileSelectionSetup(false);
			}
		};
	},
	
	/**
	* Does some setup required on some control (i.e disable/enable, set text ...) 
	* @private
	*/
	postFileSelectionSetup : function(filesSelected) {
		if(filesSelected === true){
			if(this.aSelectedFiles.length == 1){
				this.oAttachmentsInput.setValue(this.oLangBundle.getText("SELECTED_ATTACHMENT_FIELD_TEXT", [this.aSelectedFiles.length]));
			}
			else {
				this.oAttachmentsInput.setValue(this.oLangBundle.getText("SELECTED_ATTACHMENTS_FIELD_TEXT", [this.aSelectedFiles.length]));
			}
			
			this.getView().oAttachmentCB.setEnabled(true);
			
			if(this.sSelectedGroupId !== '') {
				this.setFolderSelectionEnabled(true);
			}
		}
		else{
			this.oAttachmentsInput.setValue("");
			this.bAttachmentsCB = false;
			this.getView().oAttachmentCB.setSelected(this.bAttachmentsCB);
			this.postAttachmentCheckBoxSelection();
			this.getView().oAttachmentCB.setEnabled(false);
			this.setFolderSelectionEnabled(false);
		}
	},

	/**
	* Event Handler for the group value help
	* @private
	*/
	onGroupSelectValueHelpPress: function(oEvent){
		
		if(!this.oItemTemplate){
			this.oItemTemplate = new sap.m.StandardListItem({
				title : {
					parts: [
					        "Name",
					        "GroupType"
					        ],
					        formatter : function(sName,sGroupType) {
					        	return sName + " (" + sGroupType + ")";
					        }
				},
				type : sap.m.ListType.Active,
				tooltip: "{Name}"
			});
		}
		
		if(this.oSharingDialog){
			var iShareDialogHeight = this.oSharingDialog.getContent()[0].getDomRef().offsetHeight;
			var iShareDialogWidth = this.oSharingDialog.getContent()[0].getDomRef().offsetWidth;
		}
				
		// Create the group selection dialog
		if(!this.oGroupSelectionDialog){
			this.oGroupSelectionDialog = this.oShareUtil.createGroupSelectionDialog(this.sPrefixId, this.oItemTemplate, this._onGroupSelectionDialogConfirm(), iShareDialogWidth, iShareDialogHeight, this.oJamODataModel);
		}
		else{
			this.oGroupSelectionDialog.setModel(this.oJamODataModel);
			this.oGroupSelectionDialog.bindAggregation("items","/Groups", this.oItemTemplate);		
		}
		
		this.oGroupSelectionDialog.open();
	},
	
	/** 
	 * This function returns a function that is called when the group is selected.
	 * @private
	 * @returns {function} function called when the group is selected.
	 */
	_onGroupSelectionDialogConfirm: function() {
		var self = this;
		
		return function(oEvent){
						
			var aContexts = oEvent.getParameter("selectedContexts");
			for(var i=0; i<aContexts.length; i++){
				self.oSelectedGroup = aContexts[i].getObject();
			}
							
			if (self.oSelectedGroup) {
				self.postGroupSelectionSetup(true);
			}
			else{
				self.postGroupSelectionSetup(false);
			}			
		};
	},	
	
	/**
	* Does some setup required on some control (i.e disable/enable ...) 
	* @private
	*/
	postGroupSelectionSetup : function(groupSelected) {
		if(groupSelected === true){
			if(this.oSelectedGroup !== undefined){
				// Save selected group id
				this.sSelectedGroupId = this.oSelectedGroup.Id.toString();
				this.sSelectedGroupName = this.oSelectedGroup.Name.toString();
				this.setGroupSelectionText(this.sSelectedGroupName);
			}
			
			if(this.oAttachments && this.oAttachments.attachmentsArray){
				// Reset folder selection
				this.sSelectedFolderId = '';
				this.oAttachmentsUtil.resetFolderSelection(this.getSelectedGroupId());
				var oSelectedFolder = this.oAttachmentsUtil.getCurrentFolder();
				this.oTargetFolderInput.setValue(oSelectedFolder.name);
			}
		
			// If some attachments are already selected
			if (this.aSelectedFiles && this.aSelectedFiles.length > 0) {
				this.setFolderSelectionEnabled(true);
			}
			
			if(this.bAttachmentsCB === false){
				this.getView().oNoteTextArea.setEnabled(true);
			}
			// If Share is in dialog
			if(this.oSharingDialog){
				this.oSharingDialog.getButtons()[0].setEnabled(true); // enable @mention button
				this.oSharingDialog.getButtons()[1].setEnabled(true); // enable "OK" button
			}
		}
		else{
			this.setFolderSelectionEnabled(false);
			this.getView().oNoteTextArea.setEnabled(false);
		}

	},
		
	/**
	* Event Handler for the attachment value help
	* @private
	*/
	onTargetFolderValueHelpPress : function(oControlEvent){
		if(this.oSharingDialog){
			var iShareDialogHeight = this.oSharingDialog.getContent()[0].getDomRef().offsetHeight;
			var iShareDialogWidth = this.oSharingDialog.getContent()[0].getDomRef().offsetWidth;
		}
		
		// Build folder dialog if not built yet
		if (!this.oFolderSelectionDialog) {
			this.oFolderSelectionDialog = this.oAttachmentsUtil.createFolderSelectionDialog(this.sPrefixId, this.getSelectedGroupId(), this.onFolderSelectionDialogConfirm(), this.onFolderSelectionDialogCancel(), iShareDialogWidth, iShareDialogHeight);
			this.sSelectedFolderId = '';
		}
		
		// Update the Dialog title before opening
		this.oFolderSelectionDialog.getContent()[0].oController.setFolderSelectionDialogTitle(this.oTargetFolderInput.getValue());
		this.oFolderSelectionDialog.open();
	},
	
	/**
	 * This function is called when the OK button of the folder selection dialog is clicked.
	 * @private
	 */
	onFolderSelectionDialogConfirm : function(oEvent){
		var self = this;
		return function(){
			var oSelectedFolder = self.oAttachmentsUtil.getCurrentFolder();
			self.sSelectedFolderId = oSelectedFolder.id;
			self.oTargetFolderInput.setValue(oSelectedFolder.name);
		};
	},
	
	/**
	 * This function is called when the Cancel button of the folder selection dialog is clicked.
	 * @private
	 */
	onFolderSelectionDialogCancel: function(oEvent) {
		var self = this;
		return function(oEvent){
			self.oAttachmentsUtil.setCurrentFolderId(self.sSelectedFolderId);	
		};
	},
		
	/**
	* Event Handler for the attachment checkBox
	* @private
	*/
	onAttachmentCheckBoxSelected : function() {
		// Toggle between checking and unchecking the Attachments Checkbox
		this.bAttachmentsCB = this.getView().oAttachmentCB.getSelected();
		this.postAttachmentCheckBoxSelection();
	},
	
	/**
	* Event Handler for when the atMentions button is pressed
	* @private
	*/
	atMentionsButtonPressed: function() {
		this.getView().oNoteTextArea.atMentionsButtonPressed();
	},
	
	/**
	* Event Handler for the suggestion
	* @private
	*/
	onSuggestion : function(oEvent) {
		if (this.gettingSuggestions) {
			this.gettingSuggestions.abort();
		}
		
		var that = this;
		var sValue = oEvent.getParameter("value");
		var oNoteTextArea = this.getView().oNoteTextArea;
		
		if (sValue.trim() === ""){ // if value is empty then it's the suggestions is triggered but user has not entered any text yet
			oNoteTextArea.showSuggestions([]);
			oNoteTextArea.setSuggestionHeight(undefined);
			return;
		}
		
		var sGroupId = this.getSelectedGroupId();
		var sPath = "/Members_Autocomplete";
		var mParameters = {
				"async": true,
				"urlParameters": {
					"Query": "'" + sValue + "'",
					"GroupId": "'" + sGroupId + "'",
					"$top": "4"
				},
				"success": function(oData, response){
					var aJamResults = that.oCommonUtil.getODataResult(oData);
					if (aJamResults.length === 0) { // if nothing is returns from jam then close the suggestion popover
						oNoteTextArea.closeSuggestionPopover();
						oNoteTextArea.setSuggestionHeight(undefined);
					}
					else {
						var aSuggestions = [];
						var iJamResultsLength = aJamResults.length;
						for(var i = 0; i < iJamResultsLength; i++){
							aSuggestions.push({
								fullName: aJamResults[i].FullName,
								email: aJamResults[i].Email,
								userImage: that._buildThumbnailImageURL(aJamResults[i].Id)
							});
						}
						oNoteTextArea.showSuggestions(aSuggestions);
						iJamResultsLength >= 3 ? oNoteTextArea.setSuggestionHeight("12rem") : oNoteTextArea.setSuggestionHeight(undefined);
					}
				},
				"error": function(oError){
					jQuery.sap.log.error("Failed to get suggestions: " + oError.statusText);
				}
			};
		
		this.gettingSuggestions = this.oJamODataModel.read(sPath, mParameters);
	},
	
	/**
	* Does some setup required on some control (i.e disable/enable ...) 
	* @private
	*/
	postAttachmentCheckBoxSelection : function() {
		if(this.bAttachmentsCB === true){
			this.getView().oNoteTextArea.setEnabled(false);
		}
		else{
			if(this.sSelectedGroupId !== ''){
				this.getView().oNoteTextArea.setEnabled(true);
			}
		}
	},
	
	/**
	* Gets the form data that can be used by other class to share some info to Jam
	* @private
	*/
	getSharingData : function() {
		var oFeedContent;
		
		if((this.oNoteTextArea.getValue() !== undefined && this.oNoteTextArea.getValue() !== "") || (this.sObjectId !== undefined && this.sObjectId !== "")){
			oFeedContent = 	{
								note: this.oNoteTextArea.convertTextWithFullNamesToEmailAliases(),
								uiUrl: this.sObjectId
							};
		}
		if(JSON.stringify(this.oExternalObject)=== '{}'){
			this.oExternalObject = undefined;
		}
				
		return {
		 feedContent:						 oFeedContent,
		  groupId:                           this.getSelectedGroupId(),
		  folderId:							 this.getSelectedFolderId(),
		  aFilesToUpload:                    this.aSelectedFiles,
		  externalObject:					 this.oExternalObject,
		  mappedExternalObject:				 this.oMappedExternalObject,
		  groupName: 						 this.getSelectedGroupName(),
		  //groupName: 						 sap.ui.getCore().byId( this.sPrefixId + "_GroupSelect").getValue(),
		  memberEmail:						 this.sMemberEmail
		};
	},
	
	/**
	 * Gets the selected group's id
	 * @private
	 */
	getSelectedGroupId : function() {
		return this.sSelectedGroupId;
	},

	/**
	 * Gets the selected group's name
	 * @private
	 */
	getSelectedGroupName : function() {
		return this.sSelectedGroupName;
	},

	/**
	 * Gets the selected folder's id
	 * @private
	 */
	getSelectedFolderId : function() {
		return this.sSelectedFolderId;
	},
	
	/**
	 * Shares the data to Jam group
	 *  We need the:
	 *  - Group
	 *  - Target Folder
	 *  - Attachments
	 *  - Comment
	 *  - The link to the BO
	 *  However, things are a little more complicated because there are different sharing scenarios:
	 *  		
	 *  Scenario 1 (BO only)
	 *  When BO only, then Group is set, the link to the BO is set,
	 *  and the comment is optional.
	 *  Scenario 1.1 BO (URL)
	 *  Scenario 1.2 BO (OData object)
	 *  		
	 *  Scenario 2 (Attachments only)
	 *  When Attachments only, then the Group is set, there is at least
	 *  one attachment selected, and the comment and target folder are optional.
	 *  
	 *  Scenario 3 (Both)
	 *  When both, then the Group is set, there is at least one attachment selected,
	 *  the link for the BO is set, and the comment and target folder are optional.
	 *  
	 * @private
	 */
	shareToJam : function() {
		var oSharingData = this.getSharingData();
		var self = this;
		
		// Nothing to share
		if (oSharingData.aFilesToUpload.length === 0 && (!oSharingData.feedContent || (!oSharingData.feedContent.uiUrl && oSharingData.feedContent.note.trim() === "")) && !oSharingData.externalObject){
			var sResultMessage = self.oLangBundle.getText("SHARING_NOTHING_TO_SHARE_MSG");
			this.oCommonUtil.showMessage(sResultMessage, {duration:3000, autoclose: false});
		}
		else{
			if (!this.bAttachmentsCB) {
				// For scenario 1 & 3.
				this.oShareUtil.shareBusinessObject(oSharingData);
				
			}	
			if (oSharingData.aFilesToUpload.length > 0) {
				// For scenario 2 & 3.
				this.oShareUtil.uploadAttachments(oSharingData);
				var sResultMessage = this.oLangBundle.getText("SHARING_ACKNOWLEDGMENT_MSG");
				// SetTimeout to trigger the message toast 1/2 second after the dialog closes
				setTimeout(function(){self.oCommonUtil.showMessage(sResultMessage, {duration:3000, width:"30em", autoClose: false});}, 500);
			}
		}
	},

	/**
	 * Returns a URL for the ThumbnailImage
	 * @param {string} sUserId
	 * @return {string}
	 * @private
	 * @memberOf sap.collaboration.components.fiori.sharing.Sharing
	 */
	_buildThumbnailImageURL: function(sUserId) {
		return this.oJamODataModel.sServiceUrl + "/Members('" + jQuery.sap.encodeURL(sUserId) + "')/ThumbnailImage/$value";
	}
});

}; // end of sap/collaboration/components/fiori/sharing/Sharing.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.Component') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

jQuery.sap.require('sap.suite.ui.commons.Timeline'); // unlisted dependency retained

jQuery.sap.require('sap.suite.ui.commons.TimelineItem'); // unlisted dependency retained
















jQuery.sap.declare("sap.collaboration.components.socialtimeline.Component");
/**
* Constructor for the Social Timeline Component.
*
* Accepts an object literal <code>mSettings</code> that defines initial 
* property values, aggregated and associated objects as well as event handlers. 
* 
* If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
* then the framework assumes property, aggregation, association, event in that order. 
* To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
* or "event:" can be added to the name of the setting (such a prefixed name must be
* enclosed in single or double quotes).
*
* The supported settings are:
* <ul>
* 	<li>Properties
* 		<ul>
* 			<li>{@link #getEnableSocial enableSocial} : boolean (default: true) </li>
* 			<li>{@link #getAlignment alignment} : sap.suite.ui.commons.TimelineAlignment (default: sap.suite.ui.commons.TimelineAlignment.Right)</li>
* 			<li>{@link #getAxisOrientation axisOrientation} : sap.suite.ui.commons.TimelineAxisOrientation (default: sap.suite.ui.commons.TimelineAxisOrientation.Vertical)</li>
* 			<li>{@link #getNoDataText noDataText} : string</li>
* 			<li>{@link #getShowIcons showIcons} : boolean (default: true)</li>
* 			<li>{@link #getVisible visible} : boolean (default: true)</li>
* 			<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
* 			<li>{@link #getCustomFilter customFilter} : {object}</li>
* 		</ul>
* 	</li>
* 	<li>Events
* 		<ul>
* 			<li>{@link sap.collaboration.components.socialtimeline.Component:customActionPress customActionPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
* 		</ul>
* 	</li>
* </ul> 

* 
* @param {string} [sId] id for the new control, generated automatically if no id is given 
* @param {object} [mSettings] initial settings for the new control
* 
* @class 
* Social Timeline
* @extends sap.ui.core.UIComponent
* @version 1.27.0-SNAPSHOT
* 
* @deprecated Since version 1.34.0. For new integrations and existing implementations running on release 1.32 or later, use the Group Feed component (sap.collaboration.components.feed.Component), Business Object mode(sap.collaboration.FeedType.BusinessObjectGroups).  Note that the Group Feed component does not display any updates related to the business object from the back-end system (system updates).
* @constructor
* @public
* @name sap.collaboration.components.socialtimeline.Component
* 
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.socialtimeline.Component",
	/** @lends sap.collaboration.components.socialtimeline.Component */
	{
		metadata: {
			version: "1.0",
			includes: ["../resources/css/SocialTimeline.css"],
			dependencies:{
				libs: ["sap.collaboration"],
				components: [],
				ui5version: ""
			},
			config: {},
			customizing: {},
			rootView: null,
			publicMethods: ["setBusinessObject", "setBusinessObjectKey", "setBusinessObjectMap", "updateTimelineEntry", "deleteTimelineEntry"],
			aggregations: {
			},
			properties: {
				"enableSocial": {type:"boolean",group:"Social",defaultValue:true},
				"alignment": {type:"sap.suite.ui.commons.TimelineAlignment",group:"Misc",defaultValue:sap.suite.ui.commons.TimelineAlignment.Right},
				"axisOrientation": {type:"sap.suite.ui.commons.TimelineAxisOrientation",group:"Misc",defaultValue:sap.suite.ui.commons.TimelineAxisOrientation.Vertical},
				"noDataText": {type:"string",group:"Misc",defaultValue:null},
				"showIcons": {type:"boolean",group:"Misc",defaultValue:true},
				"visible": {type:"boolean",group:"Appearance",defaultValue:true},
				"width": {type:"sap.ui.core.CSSSize",group:"Dimension",defaultValue:'100%'},
				"customFilter": {type:"object[]", group:"Social"}
			},
			events : {
				"customActionPress": {}
			}
		},
		_defaultAttributes: {
			collaborationHostServiceUrl: "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData",
			smiServiceUrl: "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV",
			pageSize: 10,
			jamOnly: false
		},

		/**
		* Initializes the Component instance after creation. 
		* @protected
		* @memberOf sap.collaboration.components.socialtimeline.Component
		*/
		init: function(){
			this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.Component");
			
			// OData service models
			this._oCollaborationHostModel;
			this._oSMIntegrationModel;
			
			// Timeline
			this._oTimeline;
			this._oTimelineModelData = {
				enableSocial: true,
				alignment: sap.suite.ui.commons.TimelineAlignment.Right,
				axisOrientation: sap.suite.ui.commons.TimelineAxisOrientation.Vertical,
				enableBackendFilter: true,
				enableScroll: true,
				forceGrowing: true,
				noDataText: null,
				showIcons: true,
				sort: true,
				visible: true,
				width: '100%',
				timelineData: [],
				suggestions: []
			};
			this._oTimelineModel = new sap.ui.model.json.JSONModel(this._oTimelineModelData);
			this._oTimelineModel.setSizeLimit(10000); // change max size for number of bound entries to 10000, default is 100
			this._oTimelineModel.bindProperty("/enableSocial").attachChange(this._onEnableSocialChange,this);
			this._iGrowingThreshold = this._defaultAttributes.pageSize;
			
			// Header Controls
			this._oFilterIcon;
			this._oContextSelect;
			this._oAddPostButton;
			
			// Business object
			this._oBusinessObjectMap = {};
			this._oBusinessObject = {};

			// Utilities
			this._oCommonUtil = new sap.collaboration.components.utils.CommonUtil(); // display error, language bundle, date format
			this._oDateUtil = new sap.collaboration.components.utils.DateUtil();
			// Language Bundle
			this._oLanguageBundle = this._oCommonUtil.getLanguageBundle();

			// Handlers
			this._oTimelineDataHandler;
			this._oJamDataHandler;
			this._oSMIntegrationDataHandler;
			
			// Filter
			this._oFilterPopover;
			this._oFilterConstants = new sap.collaboration.components.socialtimeline.filter.FilterType();
			this._oFilter = {};
			
			// Reply
			this._oRepliesData;
			this._oReplyPopover;
			
			// Add Post
			this._oAddPostPopover;
			
			// Social Profile
			this._oSocialProfile;
			
			// User that is currently logged in
			this._oTimelineUser = {};
			
			// Input Parameters Validation
			this._oInputValidator;
			
			// promise for getting the timeline data
			this._oGettingTimelineData; 
			
			this._initialize(); // initialize Utilities and Handlers
			
			this._oInputValidator = new sap.collaboration.components.socialtimeline.validation.InputValidator(this);
			
			
			sap.ui.core.UIComponent.prototype.init.apply(this); // call superclass; needed to call createContent
		},
		/**
		* Cleans up the component instance before destruction.
		* @protected
		* @memberOf sap.collaboration.components.socialtimeline.Component
		*/
		exit: function() {
			if(this._oTimeline){
				this._oTimeline.destroy();
			}
			if(this._oAddPostPopover){
				this._oAddPostPopover.destroy();
			}
			if(this._oReplyPopover){
				this._oReplyPopover.destroy();
			}
			if(this._oFilterPopover){
				this._oFilterPopover.destroy();
			}
			if(this._oSocialProfile){
				this._oSocialProfile.destroy();
			}
			if(this._oInputValidator){
				this._oInputValidator.destroy();
			}
			if(this._oFilterIcon){
				this._oFilterIcon.destroy();	
			}
			if(this._oContextSelect){
				this._oContextSelect.destroy();	
			}
			if(this._oAddPostButton){
				this._oAddPostButton.destroy();	
			}
			
//			this._stopAutoCheckingForNewUpdates();
		},
		/**
		* Function is called when the rendering of the Component Container is started.
		* @protected
		* @memberOf sap.collaboration.components.socialtimeline.Component
		*/
		onBeforeRendering: function(){			
			
			if( this._oInputValidator.areSocialFeaturesEnabled() === true ){
				if( !this._oBusinessObject.key || this._oBusinessObject.key === "" ){
					this._oTimeline._filterIcon.setEnabled(false); // disabled filter icon if business object key is not set	
					this._oContextSelect.setEnabled(false); // disable context selector if the business object is not set 
				}
			}
			else{
				if( !this._oBusinessObject.key || this._oBusinessObject.key === "" ){
					this._oTimeline._filterIcon.setEnabled(false); // disabled filter icon if business object key is not set
				}
				this._oContextSelect.setVisible(false); // hide the context selector if the social features are disabled.
				this._oAddPostButton.setVisible(false); // hide the add post button if the social features are disabled.
			}
			
			this._getLoggedInUser();
			this._bindTemplates();
		},
		
		/**
		* Function is called when the rendering of the Component Container is completed. 
		* @protected
		* @memberOf sap.collaboration.components.socialtimeline.Component
		*/
		onAfterRendering: function() {
		},
		/**
		 * The method to create the Content (UI Control Tree) of the Component. 
		 * @protected
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		createContent: function() {
			return this._createTimeline();
		},
		/**
		 * Set property of component 
		 * @redefine 
		 * @protected
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		setProperty: function(propertyName, propertyValue) {
			sap.ui.core.UIComponent.prototype.setProperty.call(this, propertyName, propertyValue);
			this._oLogger.info(propertyName + ": " + propertyValue);

			// Set the property to the Timeline's model
			switch (propertyName) {
			case 'enableSocial':
				var bEnableSocial = propertyValue;
				if (bEnableSocial === true) {
					bEnableSocial = this._oInputValidator.validateEnableSocial();	
				}
				this._oTimelineModel.setProperty("/" + propertyName, bEnableSocial);
				break;
			case 'customFilter':
				var aCustomFilter = propertyValue;
				
				this._oInputValidator.validateCustomFilter();

				if (aCustomFilter && aCustomFilter.length !== 0) {
					this._oTimeline.setCustomFilter(this._getFilter());
					this._oTimeline._filterIcon.setEnabled(true);
				}
				else {
					this._oTimeline._filterIcon.setEnabled(false); // disabled filter icon no custom filters exist
				}
				break;
			default:
				this._oTimelineModel.setProperty("/" + propertyName, propertyValue);
				break;
			}
			
			
		},
		/**************************************************************************************
		 * PUBLIC METHODS for the Component
		 **************************************************************************************/
		/**
		* Setter for the Component settings.
		* @public
		* @param {object} settings A JSON object used to set the component settings, this object should contains the same 
		* properties used in the constructor. 
		* @memberOf sap.collaboration.components.socialtimeline.Component
		*/
		setSettings: function(settings){
			for(var key in settings) {
				if(settings.hasOwnProperty(key)) {
					this.setProperty(key, settings[key]);
				}
			}
		},
		
		/**
		 * Set the business object map. It is used to initialize the data needed to retrieve the timeline entries.
		 * This function must be called once before calling setBusinessObjectKey for the first time.
		 * @public
		 * @param {object] businessObjectMap required - JSON object containing the following properties:
		 * 	<ul>
		 * 		<li>{sap.ui.model.odata.ODataModel} serviceModel required - OData model to retrieve timeline entries
		 * 		<li>{string} servicePath: The relative path to the OData service for the business object (example: "/sap/opu/odata/sap/ODATA_SRV")		
		 * 		<li>{string} collection: Entity collection name of the business object
		 * 		<li>{string} applicationContext: The application context (example: "CRM", "SD", etc.)
		 * 		<li>{function} customActionCallback: A callback function to determine which timeline entries should receive the custom action. The function should return an array of text/value objects.
		 * 	<ul>
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		setBusinessObjectMap: function(oBusinessObjectMap){
			this._oLogger.info("servicePath: " + oBusinessObjectMap.servicePath);
			this._oLogger.info("collection: " + oBusinessObjectMap.collection);
			this._oLogger.info("applicationContext: " + oBusinessObjectMap.applicationContext);
			
			// recreate timeline terms utility with new object map
			this._oBusinessObjectMap = oBusinessObjectMap;
			
			this._validateBusinessObjectMap();
			
			this._defaultAttributes.jamOnly = jQuery.isEmptyObject(this._oBusinessObjectMap.serviceModel);
			
			var oTimelineTermsUtility;
			var oServiceDataHandler;
			if (this._defaultAttributes.jamOnly) {
				this._oFilter = {
						type: this._oFilterConstants.FILTER_TYPE.feedUpdates
				};
				this._oContextSelect.setVisible(false);
				this._oTimeline._filterIcon.setVisible(false);
			}
			else {
				this._oContextSelect.setVisible(true);
				this._oTimeline._filterIcon.setVisible(true);
				oTimelineTermsUtility = this._oInputValidator.createTermsUtilityForBackend(this._oBusinessObjectMap.serviceModel);
				oServiceDataHandler = new sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler(this._oBusinessObjectMap.serviceModel, oTimelineTermsUtility);
			}
			
			this._oTimelineDataHandler = new sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler(
					this._oBusinessObjectMap, 
					this._oJamDataHandler,
					this._oSMIntegrationDataHandler,
					oServiceDataHandler,
					oTimelineTermsUtility,
					this._iGrowingThreshold,
					this._oInputValidator.areSocialFeaturesEnabled(),
					this._oInputValidator.areBackendFeaturesEnabled());
		},
		/**
		 * Set the current business object for the social timeline to display.
		 * Note: The function setBusinessObjectMap must be called once before calling setBusinessObjectKey for the first time.
		 * @deprecated since 1.28.5. This method is deprecated, use method setBusinessObject instead.
		 * @public
		 * @param {string} sKey
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		setBusinessObjectKey: function(sKey){
			this._oLogger.info("Business Object Key: " + sKey);
			
			if(!this._oTimelineDataHandler){
				this._oLogger.error("Function setBusinessObjectMap must be called before calling setBusinessObjectKey for the first time.");
			}
			
			// Since the business object key is set, we enable the filter and context selector but disable the add post button 
			// because the default context is 'System Updates'.
			this._oTimeline._filterIcon.setEnabled(true);
			this._oAddPostButton.setEnabled(false);
			this._oContextSelect.setEnabled(true);
			
			// for backwards compatibility, we set the name the same as the key and set the key/name to this._oBusinessObject
			this._oBusinessObject = {key: sKey, name: sKey};
			this._oTimelineDataHandler.setBusinessObject(this._oBusinessObject);
			
			if (!this._defaultAttributes.jamOnly) {
				this._resetFilterAndContextSelector();
			}
			
			this._refreshTimelineModel(); 
		},
		/**
		 * Set the current business object for the social timeline to display.
		 * Note: The function setBusinessObjectMap must be called once before calling setBusinessObject for the first time.
		 * @public
		 * @param {object} oObject - an object that contains the key and name for the business object
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		setBusinessObject: function(oObject){
			this._oBusinessObject = oObject;
			
			this._oLogger.info("Business Object Key: " + this._oBusinessObject.key);
			this._oLogger.info("Business Object Name: " + this._oBusinessObject.name);
			if(!this._oTimelineDataHandler){
				this._oLogger.error("Function setBusinessObjectMap must be called before calling setBusinessObject for the first time.");
			}
			this._validateBusinessObject();
			
			// Since the business object key is set, we enable the filter and context selector but disable the add post button 
			// because the default context is 'System Updates'.
			if (this._defaultAttributes.jamOnly) {
				this._oAddPostButton.setEnabled(true);
			}
			else {
				this._oTimeline._filterIcon.setEnabled(true);
				this._oAddPostButton.setEnabled(false);
				this._oContextSelect.setEnabled(true);
				this._oTimelineDataHandler.setBusinessObject(this._oBusinessObject); // set the current business object
			}

			if (!this._defaultAttributes.jamOnly) {
				this._resetFilterAndContextSelector();
			}
			
			this._refreshTimelineModel(); 
		},
		/**
		 * Update a Timeline Entry text.
		 * This method should be called when a custom action requires a content update of a Timeline entry and should only be called if an
		 * an update to the backend is performed successfully.
		 * @public
		 * @param {string} sText - the text that will be displayed in the content of the timeline entry
		 * @param {string} sId - the id of the timeline entry to update
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		updateTimelineEntry: function(sText, sId){
			// the embedded control consists of a flex box, we are setting the text of the first item in the flexbox here
			var oTimelineEntry = sap.ui.getCore().byId(sId);
			var oEmbCtrl = oTimelineEntry.getAggregation('embeddedControl');
			var aFlexBoxItems = oEmbCtrl._oFlexbox.getItems();
			
			aFlexBoxItems[0].setText(sText);
			// check if the timeline entry has a second item in the flexbox (e.g. link which contains 'and 2 other things') and remove it
			if(aFlexBoxItems.length > 1){
				for(var i=1; i<aFlexBoxItems.length; i++){
					aFlexBoxItems[i].destroy();
				}
			}
			var oTimelineModel = oTimelineEntry.getModel();
			
			// get the index of the timeline entry from the content of the timeline
			var iTimelineEntryIndex = this._oTimeline.getContent().indexOf(oTimelineEntry);
			
			// update the timeline entry text in the model with the new text
			oTimelineModel.getData().timelineData[iTimelineEntryIndex].timelineItemData.text = sText;
			oTimelineModel.getData().timelineData[iTimelineEntryIndex].timelineItemData.timelineEntryDetails = []; // clear any timeline entry details
		},
		
		/**
		 * Delete a Timeline Entry.
		 * This method should be called when a custom action requires a deletion of a Timeline entry and should only be called if an
		 * a delete to the backend is performed successfully.
		 * @public
		 * @param {string} sId - the id of the timeline entry to delete
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		deleteTimelineEntry: function(sId){
			var oTimelineEntry = sap.ui.getCore().byId(sId);
			var oTimelineModel = oTimelineEntry.getModel();
			
			// get the index of the timeline entry from the content of the timeline
			var iTimelineEntryIndex = this._oTimeline.getContent().indexOf(oTimelineEntry);
			
			// remove the timeline entry from the model. The function splice removes items based on index and number of items to remove
			oTimelineModel.getData().timelineData.splice(iTimelineEntryIndex, 1);
			
			// by destroying this timeline entry it will also remove it from the content of the timeline
			oTimelineEntry.destroy(); 
		},
		/**************************************************************************************
		 * PRIVATE METHODS for the Component
		 **************************************************************************************/
		/**
		 * initialize the OData models and Jam data handler
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_initialize: function(){
			// OData service models
			var asJson = true;
			if(!this._oCollaborationHostModel){
				this._oCollaborationHostModel = new sap.ui.model.odata.ODataModel(this._defaultAttributes.collaborationHostServiceUrl, asJson);
			}
			if(!this._oSMIntegrationModel){
				this._oSMIntegrationModel = new sap.ui.model.odata.ODataModel(this._defaultAttributes.smiServiceUrl, asJson);	
			}
			
			// Utilities
			if(!this._oJamDataHandler){
				this._oJamDataHandler = new sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler(this._oCollaborationHostModel);	
			}			
			if(!this._oSMIntegrationDataHandler){
				this._oSMIntegrationDataHandler = new sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler(this._oSMIntegrationModel);
			}		
		},
		/**
		 * Create the Timeline Control
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_createTimeline: function(){
			this._oTimeline = new sap.suite.ui.commons.Timeline( this.getId()+"_timeline", {
				enableSocial: "{/enableSocial}",
				alignment: "{/alignment}",
				axisOrientation: "{/axisOrientation}",
				enableBackendFilter: "{/enableBackendFilter}",
				enableScroll: "{/enableScroll}",
				forceGrowing: "{/forceGrowing}",
				noDataText: "{/noDataText}",
				showIcons: "{/showIcons}",
				visible: "{/visible}",
				width: "{/width}",
				sort: "{/sort}",
				data:[],
				grow: this._onGrow.bind(this),
			});
			this._modifyHeaderBar();
			
			this._oTimeline.setModel(this._oTimelineModel);
			return this._oTimeline;
		},
		/**
		 * Modify the Timeline Header Bar
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_modifyHeaderBar: function(){
			var oHeaderBar = this._oTimeline.getHeaderBar();
			
			var contents = oHeaderBar.getContent();
			this._oFilterIcon = contents[contents.length-1];
			
			// create the Context Selector
			this._oContextSelect = this._createContextSelector();
			oHeaderBar.insertContent(this._oContextSelect, 0);
			
			// create the Add Post button
			this._oAddPostButton = this._createAddPostButton();
			oHeaderBar.insertContent(this._oAddPostButton, 3);
		},
		/**
		 * Create the Context Selector Control
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_createContextSelector: function(){
			
			var onContextSelectButtonPress = function(oEvent){
				var oContextSelect = sap.ui.getCore().byId(this.getId()+"_context_select");
				
				var oContextSelectPopover = sap.ui.getCore().byId(this.getId()+"_context_select_popover");
				if (oContextSelectPopover == undefined ){
					// entries in the context selector
					var oTimelineContextData = [];
					oTimelineContextData.push({context_type: this._oFilterConstants.FILTER_TYPE.systemUpdates, context_text: this._oLanguageBundle.getText("ST_CONTEXT_SYSTEM_UPDATES")});
					oTimelineContextData.push({context_type: this._oFilterConstants.FILTER_TYPE.feedUpdates, context_text: this._oLanguageBundle.getText("ST_CONTEXT_DISCUSSION_POSTS")});
					var oTimelineContextModel = new sap.ui.model.json.JSONModel(oTimelineContextData);
					this.setModel(oTimelineContextModel, "timeline_context");	// save model in the Social Timeline Component
					// context select list
					var oContextSelectItemTemplate = new sap.ui.core.Item({key:"{context_type}", text:"{context_text}"});
					var oContextSelectList = new sap.m.SelectList(this.getId()+"_context_select_list",
							{	selectedKey: this._oFilterConstants.FILTER_TYPE.systemUpdates,
								selectionChange: [this._onContextSelect, this],
								width: "15rem"
					});
					oContextSelectList.bindAggregation("items", { path: "/", template: oContextSelectItemTemplate});
					oContextSelectList.setModel(oTimelineContextModel);

					// context select popover
					oContextSelectPopover = new sap.m.Popover(this.getId()+"_context_select_popover",
							{	placement: sap.m.PlacementType.VerticalPreferedBottom,
								title: this._oLanguageBundle.getText("ST_CONTEXT_SELECT_HEADER")
					});
					oContextSelectPopover.addContent(oContextSelectList);
				}
				
				oContextSelectPopover.getContent()[0].setSelectedKey(this._oFilter.type);
				oContextSelectPopover.openBy(oContextSelect);
			};
			
			var oContextSelect = new sap.m.Button( this.getId()+"_context_select", 
					{ 	icon: "sap-icon://navigation-down-arrow",
						iconFirst: false,
						text: this._oLanguageBundle.getText("ST_CONTEXT_SYSTEM_UPDATES"),
						type: sap.m.ButtonType.Transparent,
						press: [onContextSelectButtonPress, this]
			});

			return oContextSelect;
		},
		/**
		 * Create the Add Post Button
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_createAddPostButton: function(){
			if(this._oAddPostPopover === undefined){
				this._oAddPostPopover = new sap.m.ResponsivePopover(this.createId("_addPostPopover"), {
					placement: sap.m.PlacementType.Auto,
					title: this._oLanguageBundle.getText("ST_ADD_POST_TITLE"),
					contentWidth:"25rem",
					contentHeight:"10rem",
					content: new sap.collaboration.components.controls.SocialTextArea(this.createId("social_TextArea"), {
						height: "10rem",
						width: "100%",
						enableNotifyAll: false,
						liveChange: [function(oEvent) {
							oEvent.getParameter("value").trim() !== "" ? this.byId("addPost_postButton").setEnabled(true) : this.byId("addPost_postButton").setEnabled(false);
						}, this],
						suggest: [this._onSuggest, this],
						afterSuggestionClose: [function() {
							if (this.gettingSuggestions) {
								this.gettingSuggestions.request.abort();
							}
						}, this]
					}),
					endButton: new sap.m.Button(this.createId("addPost_postButton"), {
						text : this._oLanguageBundle.getText("ST_ADD_POST_BUTTON"),
						enabled: false,
						press: [this._onAddPost, this],					
					}),
					beginButton: new sap.m.Button(this.createId("addPost_atMentionButton"), {
						text: "@",
						press: [function() {
							this.byId("social_TextArea").atMentionsButtonPressed();
						}, this]
					})
				}).setInitialFocus(this.byId("social_TextArea"));
			}
			
			var oAddPostButton = new sap.m.Button(this.createId("_addPostButton"), {
				icon: "sap-icon://add",
				type: sap.m.ButtonType.Transparent,
				enabled: false,
				press: [function(){
					this._oAddPostPopover.openBy(this.byId("_addPostButton"));
				}, this]
			});
			return oAddPostButton;
		},
		/**
		 * Refreshes the model for the timeline control
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_refreshTimelineModel: function(){
			var that = this;
//			this._stopAutoCheckingForNewUpdates();
			
			this._oTimeline.setBusyIndicatorDelay(0).setBusy(true);
			
			this._oGettingTimelineData = 
				this._oTimelineDataHandler.getTimelineData(this._oFilter, this._defaultAttributes.jamOnly ? this._oBusinessObject : null).then(
					function(oTLData){
						that._oTimeline.setBusy(false);
						that._oFilter.text === undefined || that._oFilter.text === that._oLanguageBundle.getText("ST_FILTER_ALL") ? 
								that._oTimeline.setCustomMessage("") : that._oTimeline.setCustomMessage(that._oLanguageBundle.getText("ST_FILTER_TEXT") + " " + that._oFilter.text);
						that._oTimeline.destroyContent();
						that._oTimelineModelData.timelineData = oTLData;
						that._oTimelineModel.setData(that._oTimelineModelData);
						
						that._setReplies(); // set the replies

						// Removing since JAM api in not working correctly and socialtimeline is being deprecated
//						if (that._oFilter.type !== that._oFilterConstants.FILTER_TYPE.systemUpdates 
//								&& that._oFilter.type !== that._oFilterConstants.FILTER_TYPE.custom) {
//							that._startAutoCheckingForNewUpdates();	
//						}
						
						
					},
					function(oError){
						that._oCommonUtil.displayError();
						that._oTimeline.setBusy(false);
				});
		},
		/**
		 * Create and bind the Timeline and Filter Item template to the Timeline
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_bindTemplates: function(){
			
			if( this._oTimeline.getBinding("content").getPath() !== "/timelineData"){
				var oCustomDataTemplate = new sap.ui.core.CustomData({
					key:"{key}",
					value: "{value}"
				});
				
				var oTLItemTemplate = new sap.suite.ui.commons.TimelineItem({
					dateTime: "{timelineItemData/dateTime}",
					userName: "{timelineItemData/userName}",
					title: "{timelineItemData/title}",
					icon: "{timelineItemData/icon}",
					filterValue: "{timelineItemData/filterValue}",
					userNameClickable: "{/enableSocial}",
					userNameClicked: this._onUserNameClicked,
					userPicture: "{timelineItemData/userPicture}",
					embeddedControl: this._createEmbeddedControl(),
					customAction: {
						template: oCustomDataTemplate,
						path: "timelineItemData/customActionData"
					},
					customActionClicked: this._onCustomActionClicked.bind(this),
					replyCount: "{timelineItemData/replyCount}",
					replyListOpen: this._onReplyListOpen.bind(this)
				});
				this._oTimeline.bindAggregation("content", {
					path: "/timelineData",
					template: oTLItemTemplate
				});
			}
		},
		/**
		 * Returns the embedded control for the timeline
		 * @param {object} oTLItemData
		 * @returns {sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded}
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_createEmbeddedControl: function(oTLItemData){

			var oTimelineItem = (oTLItemData === undefined) ? "{}" : oTLItemData;	
			
			var oEmbeddedControl = new sap.collaboration.components.socialtimeline.controls.TimelineItemEmbedded({
				timelineItem: oTimelineItem,
				expandCollapseClick: [function() {
					this._oTimeline.adjustUI();

				}, this],

				atMentionClick: [this._getAtMentionClicked, this]
			});
			return oEmbeddedControl;
		},
		/**
		 * Returns the custom filter for the timeline
		 * @private
		 * @returns {sap.m.ResponsivePopover}
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_getFilter: function(){
			var aCustomFilter = this.getCustomFilter();	
			var iCustomFilterLength =  aCustomFilter.length;
			for (var i = 0; i < iCustomFilterLength; i++) {
				aCustomFilter[i].type = this._oFilterConstants.FILTER_TYPE.custom;
			}
			var aFilter = [{text: this._oLanguageBundle.getText("ST_FILTER_ALL"), type: this._oFilterConstants.FILTER_TYPE.systemUpdates}].concat(aCustomFilter);
				
			if(!this._oFilterPopover){
				var oJSONModel = new sap.ui.model.json.JSONModel({ filter: aFilter });
				var oStandardListItem = new sap.m.StandardListItem({
					title: "{text}"
				});
				this._oFilterPopover = new sap.collaboration.components.controls.FilterPopover(this.getId() + "_filterPopover", {
					title: this._oLanguageBundle.getText("ST_FILTER_HEADER"),
					selectionChange: [function(oControlEvent){
						this._oFilter = oControlEvent.getParameter("listItem").getBindingContext().getObject();
						this._oTimelineDataHandler.reset();
						this._refreshTimelineModel();
					}, this]
				}).setModel(oJSONModel).bindItems("/filter", oStandardListItem);
				this._oFilterPopover.setSelectedItem(this._oFilterPopover.getItems()[0]); // set the first item as the selected on
			}
			else {
				this._oFilterPopover.getModel().setProperty("/filter", aFilter);
			}
			
			return this._oFilterPopover;
		},
		/**
		 * Resets the Filter and the Context Selector in the UI
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component 
		 */
		_resetFilterAndContextSelector: function(){
			this._resetFilter();
			// reset context selector
			this._oContextSelect.setText(this._oLanguageBundle.getText("ST_CONTEXT_SYSTEM_UPDATES"));
		},
		/**
		 * Resets the Filter
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component 
		 */
		_resetFilter: function() {
			this._oTimelineModel.setProperty("/sort", true);
			this._oFilter = {type: this._oFilterConstants.FILTER_TYPE.systemUpdates};
			if(this._oFilterPopover){
				this._oFilterPopover.setSelectedItem(this._oFilterPopover.getItems()[0]);
			}
		},
		/**
		 * TODO: This method needs to be revisited until it is not needed
		 * Go through the timeline items and hide the 'Reply' if social features are disabled.
		 * Otherwise set a custom reply for each timeline item.
		 * Also removes the reply for Timeline Entries because the anchor feed on Jam is not yet implemented.
		 * This is a workaround implementation until a better solution comes from the Timeline and Jam.
		 * @memberOf sap.collaboration.components.socialtimeline.Component 
		 */
		_setReplies: function(){
			var that = this;
			var aTimelineItems = this._oTimeline.getContent();
			aTimelineItems.forEach(function(oTLItem){
				var oTLData = oTLItem.getBindingContext().getObject();
				if(!oTLData._feedEntryData){
					that._hideReply(oTLItem);
				}	
				else {
					oTLItem.setCustomReply(that._createReplyPopover());
				}
			});
		},
		/**
		 * TODO: This method needs to be revisited until it is not needed
		 * Removes the reply link from a timeline item
		 * @param oTLItem
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_hideReply: function(oTLItem){
			oTLItem._replyLink.setVisible(false);
		},
		/**
		 * Show the Social Profile for an @mention that was clicked in the feed
		 * @param {object} oSource
		 * @param {object} oLink - a reference to the link control
		 * @param {string} sEmail - the email linked with the @mention link
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_showSocialProfile: function(oSource, oLink, sEmail){
			if(oSource){
				// get the Component of the Social Timeline to have a single instance of the SocialProfile
				var oSocialTimelineComponent = oSource.getParent().getParent().getParent();
				
				if(!oSocialTimelineComponent._oSocialProfile){
					oSocialTimelineComponent._oSocialProfile = sap.ui.getCore().createComponent({
						name:"sap.collaboration.components.socialprofile",
						id: this.getId()+"_socialProfile"
					});
					 //copy odata service urls to the Social Profile
					oSocialTimelineComponent._oSocialProfile._defaultAttributes = oSocialTimelineComponent._defaultAttributes; 
				}
				var oSettings = {
						openingControl: oLink,
						memberId: sEmail
				};
				oSocialTimelineComponent._oSocialProfile.setSettings(oSettings);
				oSocialTimelineComponent._oSocialProfile.open();				
			}
		},
		/**
		 * Get the Feed Entry ID given a Feed List Item
		 * @param {object} oTimelineItem - The TimelineItem event corresponding to the Feed List Item
		 * @returns {string} sFeedEntryId - The Feed Entry ID
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_getFeedId: function(oTimelineItem){
			var sPath = oTimelineItem.getBindingContext().getPath();
			var aPathElements = sPath.split("/");
			var sPosition = aPathElements[aPathElements.length -1];
			var sFeedEntryId = oTimelineItem.getModel().getData().timelineData[sPosition]._feedEntryData.Id;
			
			return sFeedEntryId;
		},
		/**
		 * Get the sender from Jam and assign it to a member attribute of the component.
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_getLoggedInUser: function(){
			var that = this;
			var oGetSender = this._oJamDataHandler.getSender();
			oGetSender.promise.done(function(oJamResults, response){
				that._oTimelineUser = oJamResults;
			});
			
			oGetSender.promise.fail(function(oError){
				that._oLogger.error('Failed to get the sender', oError.stack);
				//that._oCommonUtil.displayError(that._oLanguageBundle.getText('ST_POST_REPLY_FAILED')); 
			});
		},

		/**
		 * Adds a TimelineItem control to the Timeline control 
		 * @param {object} oTLItemData - data for a timeline item
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_addTimelineItemToTimeline: function(oTLItemData){
			// add timeline item data to the timeline control's data model
			var aModelData = this._oTimeline.getModel().getData();
			aModelData.timelineData.push(oTLItemData);
			
			var oTimelineItem = new sap.suite.ui.commons.TimelineItem({
				dateTime: oTLItemData.timelineItemData.dateTime,
				userName: oTLItemData.timelineItemData.userName,
				title: oTLItemData.timelineItemData.title,
				text: oTLItemData.timelineItemData.text,
				icon: oTLItemData.timelineItemData.icon,
				userNameClickable: true,
				userNameClicked: this._onUserNameClicked,
				userPicture: oTLItemData.timelineItemData.userPicture,
				embeddedControl: this._createEmbeddedControl(oTLItemData),
				replyCount: oTLItemData.timelineItemData.replyCount,
				replyListOpen: this._onReplyListOpen.bind(this),
				customReply: this._createReplyPopover(),
			});
			
			// insert the timeline item to the timeline
			this._oTimeline.insertContent(oTimelineItem, 0);
			
			// get the index of the timeline item in the model
			// create a binding context using this index and set this binding context to the timeline item
			var iFeedEntryIndex = aModelData.timelineData.indexOf(oTLItemData);
			var oContext = oTimelineItem.getParent().getModel().createBindingContext("/timelineData/" + iFeedEntryIndex);
			oTimelineItem.setBindingContext(oContext);
		},
		/**************************************************************************************
		 * Validation methods for the Social Timeline
		 **************************************************************************************/		
		/**
		 * Validation for the input parameters.
		 * Parameters not validated here will be handled by the framework.
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_validateInputParameters: function(){
			this._oInputValidator = new sap.collaboration.components.socialtimeline.validation.InputValidator(this);
			
			if(!this._oInputValidator.areCustomFiltersValid()){
				this.destroy();
			}
			return this._oInputValidator;
		},
		/**
		 * Validation for the parameters of the function setBusinessObjectMap.
		 * 
		 * Note: Validating the return statement for the function customActionCallback is done when the function gets executed in the method
		 * TimelineDataHandler._mapTimelineEntriesToTimelineItems. Here we validate whether the customActionCallback is a function.
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_validateBusinessObjectMap: function(){
			if(!this._oInputValidator){
				this._validateInputParameters();	
			}
			if(!this._oInputValidator.isBusinessObjectMapValid(this._oBusinessObjectMap)){
				this.destroy();
			}
		},
		/**
		 * Validation for the object passed to the function setBusinessObject.
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_validateBusinessObject: function(){
			if(!this._oInputValidator){
				this._validateInputParameters();	
			}
			if(!this._oInputValidator.isBusinessObjectValid(this._oBusinessObject)){
				this.destroy();
			}
		},

		/*************************************************************************************
		 * EVENT HANDLERS
		 *************************************************************************************/
		/**
		 * Event handler for the context selector. 
		 * Changes the context of the Timeline between System Updates and Feed Updates
		 * @param {object} oEvent
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component		 */
		_onContextSelect: function(oEvent) {
			
			var oSelectedContext = oEvent.getParameter("selectedItem"); 
			
			this._oFilter = {type: oSelectedContext.getKey()}; // set the context 
			// disable the filter icon if the context is Feed Updates
			if (oSelectedContext.getKey() == this._oFilterConstants.FILTER_TYPE.feedUpdates) {
				this._oTimelineModel.setProperty("/sort", false);
				this._oFilterIcon.setEnabled(false);
				this._oAddPostButton.setEnabled(true); // enable add post button if the context is jam feed
			}
			else {
				if (!this._defaultAttributes.jamOnly) {
					this._resetFilter();
				}
				this._oFilterIcon.setEnabled(true);
				this._oAddPostButton.setEnabled(false); // disable add post button if the context is system updates
			}
			// refresh the timeline
			this._oTimelineDataHandler.reset();
			this._refreshTimelineModel();
			
			// close the popover and change the context select button's text
			var oContextSelectPopover = sap.ui.getCore().byId(this.getId()+"_context_select_popover");
			oContextSelectPopover.close();
			this._oContextSelect.setText(oSelectedContext.getText());
		},
		/**
		 * Event handler for the grow event. 
		 * Appends the next page of data to the model for the timeline control
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_onGrow: function(){
			var that = this;
			// if the previous request to get the timeline data is not finish, 
			if(!this._oGettingTimelineData || this._oGettingTimelineData.state() != "pending"){
				this._oGettingTimelineData = 
					this._oTimelineDataHandler.getTimelineData(this._oFilter)
					.then(
						function(oTLData){
							var oData = that._oTimelineModel.getData();
							oData.timelineData = oData.timelineData.concat(oTLData);
							that._oTimelineModel.setData(oData);
							
							that._setReplies();
						},
						function(oError){
							 that._oCommonUtil.displayError();
					});
			}
			else{
				this._oLogger.info("A previous request is still pending.");
			}
		},
		/**
		 * Event handler for userNameClicked event
		 * @param {object} oControlEvent - event when the user name is clicked
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_onUserNameClicked: function(oControlEvent){
			var oSocialTimelineComponent = oControlEvent.getSource().getParent().getParent(); // get the Component of the Social Timeline to have a single instance of the SocialProfile
			var oTimeline = oControlEvent.getSource().getParent();
			var oTimelineEntry = oControlEvent.getSource();
			
			if(!oSocialTimelineComponent._oSocialProfile){
				oSocialTimelineComponent._oSocialProfile = sap.ui.getCore().createComponent(
									{	name:"sap.collaboration.components.socialprofile",
										id: this.getId()+"_socialProfile"
				});
				oSocialTimelineComponent._oSocialProfile._defaultAttributes = oSocialTimelineComponent._defaultAttributes; //copy odata service urls to the Social Profile 
			}
			var iTimelineEntryIndex = oTimeline.getContent().indexOf(oTimelineEntry);
			var oSettings = {
					openingControl: oTimelineEntry._userNameLink,
					memberId: oTimeline.getModel().getData().timelineData[iTimelineEntryIndex].timelineItemData.userEmail
			};
			oSocialTimelineComponent._oSocialProfile.setSettings(oSettings);
			oSocialTimelineComponent._oSocialProfile.open();
		},
		/**
		 * Event handler for adding post
		 * 
		 * 1 - get the external object
		 * 2 - add a post for the external object in Jam
		 * 3 - add timeline item to the timeline control for a smooth UI transition
		 * 
		 * @param {object} oControlEvent - event when the + add post button
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_onAddPost: function(oControlEvent) {
			var that = this;
			var sContent = this.byId("social_TextArea").convertTextWithFullNamesToEmailAliases();
			
			this.byId("_addPostPopover").close();			
			
			// post the user content if it's not empty
			if (sContent && sContent.trim() !== "") {
				this._oTimeline.setBusyIndicatorDelay(0).setBusy(true);
				
				// add a post for the external object
				this._oJamDataHandler.addPostToExternalObject(sContent, this._oTimelineDataHandler.getCurrentExternalBO()) 				
				.then(function(oFeedEntryFromActivity) {
					that.byId("social_TextArea").clearText(); // clear the text in the add post popover if success
					that.byId("addPost_postButton").setEnabled(false); // disable the add post button until user types
					
					//if a backend filter is set, there's no need to show the new timeline item on the UI
					if (that._oFilter.type !== that._oFilterConstants.FILTER_TYPE.systemUpdates && that._oFilter.type !== that._oFilterConstants.FILTER_TYPE.custom) {
						// 3 - add timeline item to the timeline control for a smooth UI transition
						var oFeedEntryTLItem = that._oTimelineDataHandler._mapFeedEntriesToTimelineItems([oFeedEntryFromActivity])[0];
						that._addTimelineItemToTimeline(oFeedEntryTLItem);
						
						// check if the current user who created a new high level post is in the buffer, if not, then add it
						if (!that._oTimelineDataHandler.getUserInfoFromBuffer(oFeedEntryFromActivity.Creator.Email)) {
							that._oTimelineDataHandler.addUserInfoToBuffer(oFeedEntryFromActivity.Creator);
						}
					
					}
				})
				.always(function() {
					that._oTimeline.setBusy(false);
				})
				.fail(function() {
					that._oCommonUtil.displayError(that._oLanguageBundle.getText("ST_POST_TO_JAM_FAILED"));
				});
			}
			else {
				this._oLogger.info('Posting an empty comment is not allowed, no feed entry will be created.');
			}
		},
		/**
		 * Event handler for the suggestions
		 * 
		 * @param {object} oEventData
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_onSuggest: function(oEventData) {
			var that = this;
			
			if (this.gettingSuggestions) {
				this.gettingSuggestions.request.abort();
			}
			
			var oSocialTextArea = oEventData.getSource();
			var sValue = oEventData.getParameter("value");
			if (sValue.trim() === "") { // if value is empty then it's the suggestions is triggered but user has not entered any text yet
				oSocialTextArea.showSuggestions([]);
			}
			else {
				this.gettingSuggestions = this._oJamDataHandler.getSuggestions(sValue);
				
				this.gettingSuggestions.promise.done(function(oData, response) {
					var aJamResults = oData.results;
					if (aJamResults.length === 0) { // if nothing is returns from jam then close the suggestion popover
						oSocialTextArea.closeSuggestionPopover();
					}
					else {
						var aSuggestions = [];
						for (var i = 0; i < aJamResults.length; i++) {
							aSuggestions.push({ fullName: aJamResults[i].FullName, email: aJamResults[i].Email, 
												userImage: that._buildThumbnailImageURL(aJamResults[i].Id) });
						}
						oSocialTextArea.showSuggestions(aSuggestions);
					}
			});
			
				this.gettingSuggestions.promise.fail(function(oError) {
					// we need this check since an aborted request also causes an error, but doesn't have a status code and should not be treated as an error
					if(oError.response && oError.response.statusCode){
						that._oCommonUtil.displayError(that._oLanguageBundle.getText("ST_GET_SUGGESTIONS_FAILED"));
					}
				});
			}
		},
		/**
		 * Event handler for customActionClicked event
		 * @param {object} oCustomActionEvent
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_onCustomActionClicked: function(oCustomActionEvent){
			var oCustomActionEventParam = {};
			var oBindingContext = oCustomActionEvent.getSource().getBindingContext();
			var sBindingPath = oBindingContext.getPath(); 
			var oOdataEntry = oCustomActionEvent.getSource().getModel().getProperty(sBindingPath + "/timelineItemData/customActionData/oDataEntry");
			
			oCustomActionEventParam.oDataEntry = oOdataEntry;
			oCustomActionEventParam.timelineEntryId = oCustomActionEvent.getParameters().id;
			oCustomActionEventParam.key = oCustomActionEvent.getParameters().key;
			this.fireCustomActionPress(oCustomActionEventParam); 
		},
		/**
		 * Get the @mentions on the press of an @mention link in the feed.
		 * @param {object} oControlEvent
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_getAtMentionClicked: function(oControlEvent){
			
			var that = this;
			var aAtMentions = [];
			var oSource = oControlEvent.getSource();
			var oLink = oControlEvent.getParameter("link");
			
			var gettingAtMentions = this._oJamDataHandler.getAtMentions(oLink.getModel().getData().feedId);
			
			gettingAtMentions.promise.done(function(oJamResults, response){
				
				var placeholderIndex =  oLink.getModel().getProperty("/placeholderIndex");
				aAtMentions = oJamResults.results;
				
				that._showSocialProfile(oSource, oLink, aAtMentions[placeholderIndex].Email);
			});
			
			gettingAtMentions.promise.fail(function(){
				that._oLogger.error('Failed to retrieve the @mentions.');
				that._oCommonUtil.displayError(that._oCommonUtil.getLanguageBundle().getText('ST_GET_ATMENTIONS_FAILED')); 
			});
		},

		/**
		 * Load replies for a specific High Level Feed when the user clicks on the Reply link of the TimelineItem.
		 * Fetch the replies from the Jam OData Service.
		 * Set the results to the Timeline OData Model.
		 * 
		 * @param {object} oEventData - the event data
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_onReplyListOpen: function(oEventData) {
			if (!this._bReplyPopoverIsOpen) {
				this._bReplyPopoverIsOpen = true;
				var oTimelineItem = oEventData.getSource();
				
				try {
					var sFeedEntryId = this._getFeedId(oTimelineItem);
					if (!sFeedEntryId){
						throw new Error('Failed to get the feed entry ID.');
					}
				}
				catch (oError) {
					this._oLogger.error('Failed to get the feed entry ID');
					// In this case, the reply box needs to be closed manually.
					this._oCommonUtil.displayError(this._oLanguageBundle.getText('ST_GET_REPLIES_FAILED'));
					return;	
				}			
				
				this._getReplies(sFeedEntryId, undefined, oTimelineItem);
			}
		},
		/**
		 * Get the Replies based on whether the sFeedEntryId or sNextLink is passed:
		 * i- If the sFeedEntryId is passed, then the assumption is that it's the initial set of replies
		 * ii- If the sNextLink is passed, then the assumption is that the "Show More" link is pressed and the next link from SAP Jam is used
		 * to make the call to retrieve the next set of Replies
		 * 
		 * @param {string} sFeedEntryId - the feed entry id
		 * @param {string} sNextLink - the next link from SAP Jam
		 * @param {object} oTimelineItem - the timeline item that corresponds to this Reply
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_getReplies: function(sFeedEntryId, sNextLink, oTimelineItem) {
			var that = this;
			
			oTimelineItem.getCustomReply().setBusyIndicatorDelay(0).setBusy(true);
			
			this.gettingReplies = this._oJamDataHandler.getReplies(sFeedEntryId, sNextLink);
			this.gettingReplies.promise.done(function(oJamResults, response){
				that._oRepliesData = oJamResults;
				var aReplies = oJamResults.results.reverse();
				
				// for each reply, build the image url and format the date
				aReplies.forEach(function(oReply){
					oReply.Creator.ThumbnailImage = that._oTimelineDataHandler.buildImageUrl(oReply.Creator);
					oReply.CreatedAt = that._oDateUtil.formatDateToString(oReply.CreatedAt);
				});
				
				oTimelineItem.getCustomReply().addReplies({
					data : aReplies,
					more : that._oRepliesData.__next ? true : false
				});
				oTimelineItem.getCustomReply().setBusy(false);
			});
			this.gettingReplies.promise.fail(function(oError){
				// we need this check since an aborted request also causes an error, but doesn't have a status code and should not be treated as an error
				if(oError.response && oError.response.statusCode){
					// In this case, the reply box is closed successfully when the error message is displayed
					that._oCommonUtil.displayError(that._oCommonUtil.getLanguageBundle().getText('ST_GET_REPLIES_FAILED')); 
				}
			});
		},
			
		/**
		 * Returns ReplyPopover control 
		 * 
		 * @private
		 * @returns {sap.collaboration.components.controls.ReplyPopover}
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_createReplyPopover: function() {			
			this._oReplyPopover = new sap.collaboration.components.controls.ReplyPopover({
				socialTextArea: new sap.collaboration.components.controls.SocialTextArea({
					height: "80px",
					width: "100%",
					enableNotifyAll: false,
					suggestionPlacement: sap.m.PlacementType.Top,
					suggest: [this._onSuggest, this],
					afterSuggestionClose: [function() {
						if (this.gettingSuggestions) {
							this.gettingSuggestions.request.abort();
						}
					}, this]
				}),
				postReplyPress: [this._onPostReplyPress, this],
				moreRepliesPress: [function(oEventData) {
					var oTimelineItem = oEventData.getSource().getParent();
					if(this._oRepliesData.__next){
						this._getReplies(undefined, this._oRepliesData.__next, oTimelineItem);
					}
				}, this],
				afterClose: [function(oEventData){
					if(this.gettingReplies){
						this.gettingReplies.request.abort();
					}
					this._bReplyPopoverIsOpen = false;
				}, this],
			});
			
			this._oReplyPopover.getSocialTextArea().attachLiveChange(function(oEvent) {
				oEvent.getParameter("value").trim() !== "" ? this.enableButton(true) : this.enableButton(false);
			}.bind(this._oReplyPopover));
			
			return this._oReplyPopover;
		},
		
		/**
		 * Event handler for postReplyPress
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_onPostReplyPress: function(oEventData) {
			var that = this;
			var sValue = oEventData.getParameter("value");
			var oTimelineItem = oEventData.getSource().getParent();
			var oTimelineItemContextObject = oTimelineItem.getBindingContext().getObject();
			var sFeedId = oTimelineItemContextObject.timelineItemData.feedId;
			var oReplyPop = oTimelineItem.getCustomReply();
			
			oReplyPop.setBusyIndicatorDelay(0).setBusy(true);
			
			var oPostingReply = this._oJamDataHandler.postReply(sFeedId, sValue);
			
			// We need to put the focus on the text area to avoid the Popover from closing - not sure why it closes
			oReplyPop._oReplyTextArea.focus();
			oPostingReply.promise.done(function(oJamResults, response) {
				oReplyPop.getTextArea().clearText(); // clear the text in the reply popover
				oReplyPop.enableButton(false); // disable button until user types
				var oReply = {
					Text: oJamResults.results.Text,
					Creator: {
						Email: that._oTimelineUser.Email,
						FullName: that._oTimelineUser.FullName
					},
					CreatedAt: that._oDateUtil.formatDateToString(oJamResults.results.CreatedAt),
				};
				
				// method getUserPicture tries to get the image from the buffer, if does not exist, we build the image url
				var sUserImage = that._oTimelineDataHandler.getUserPicture(that._oTimelineUser.Email);
				sUserImage ? oReply.Creator.ThumbnailImage = sUserImage : oReply.Creator.ThumbnailImage = that._oTimelineDataHandler.buildImageUrl(oJamResults.results);
				
				oReplyPop.addReply(oReply);
				oReplyPop.setBusy(false);
				
				oTimelineItem.setReplyCount(oTimelineItem.getReplyCount() + 1);
			});
			oPostingReply.promise.fail(function(oError) {
				oReplyPop.setBusy(false);
				that._oCommonUtil.displayError(that._oLanguageBundle.getText("ST_POST_REPLY_FAILED"));
			});
		},
		/**
		 * Event handler for when the property enableSocial changes
		 * @private
		 * @param oEvent
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_onEnableSocialChange: function(oEvent) {
			var bEnableSocial = oEvent.getSource().getValue();
			(bEnableSocial === true) ?	this._oAddPostButton.setVisible(true) : this._oAddPostButton.setVisible(false)
		}, 
		
		
		/***************************************************
		 * FEED UPDATE METHODS
		 ***************************************************/
		/**
		 * Shows the number of new Feed Updates in the Timeline
		 * @param {integer} newFeedUpdatesCount: number of new feed updates
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_showFeedUpdatesInTimeline: function(newFeedUpdatesCount) {
			var oMessageStrip = this._oTimeline.getMessageStrip();
			
			if (newFeedUpdatesCount > 0) {
				if (!this.byId("refreshLink")) {
					var oRefreshLink = new sap.m.Link(this.createId("refreshLink"), {
						text: this._oLanguageBundle.getText("GF_REFRESH_FEED"),
						press: [function() {
							// refresh the feed
//							this._stopAutoCheckingForNewUpdates();
							this._hideFeedUpdatesInTimeline();
							this._oTimelineDataHandler.reset();
							this._refreshTimelineModel(); 
						}, this]
					});
					oMessageStrip.setLink(oRefreshLink);
					oMessageStrip.setType(sap.ui.core.MessageType.Information);
					oMessageStrip.setShowIcon(true);
				}
				newFeedUpdatesCount == 1 ? oMessageStrip.setText(this._oLanguageBundle.getText("GF_NEW_FEED_UPDATE")) :
					oMessageStrip.setText(this._oLanguageBundle.getText("GF_NEW_FEED_UPDATES", newFeedUpdatesCount));
				
				oMessageStrip.setVisible(true);
				this._oTimeline.rerender();
			}
		},
		/**
		 * Hide the number of new Feed Updates in the Timeline
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed
		 */
		_hideFeedUpdatesInTimeline: function() {
			var oMessageStrip = this._oTimeline.getMessageStrip();
			oMessageStrip.close();
		},
		/**
		 * Starts the auto new feed checking feature
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed 
		 */
		_startAutoCheckingForNewUpdates: function() {
			this._iNewFeedUpdatesCheckerTimeDelay = 120000; // in milliseconds
			this._sNewFeedUpdatesCheckerTimeoutId = jQuery.sap.delayedCall(this._iNewFeedUpdatesCheckerTimeDelay, this, this._checkForNewFeedUpdates);
		},
		/**
		 * Stops the auto new feed checking feature
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed 
		 */		
		_stopAutoCheckingForNewUpdates: function() {
			jQuery.sap.clearDelayedCall(this._sNewFeedUpdatesCheckerTimeoutId);
		},
		/**
		 * Checks Jam for new feed updates
		 * @private
		 * @memberOf sap.collaboration.components.feed.views.GroupFeed 
		 */
		_checkForNewFeedUpdates: function() {
			
			var fnSuccess = function(oData, response) {
				this._showFeedUpdatesInTimeline(oData); 
				this._sNewFeedUpdatesCheckerTimeoutId = jQuery.sap.delayedCall(this._iNewFeedUpdatesCheckerTimeDelay, this, this._checkForNewFeedUpdates);
			};
			var fnError = function(oError) {
				this._oLogger.error("Failed to check for new feed updates.");
				this._sNewFeedUpdatesCheckerTimeoutId = jQuery.sap.delayedCall(this._iNewFeedUpdatesCheckerTimeDelay, this, this._checkForNewFeedUpdates);
			};
			
			// get the first timeline item and get the Id
			var oLatestFeedEntry = this._oTimeline.getContent()[0];
			var sLatestTopLevelId = oLatestFeedEntry ? oLatestFeedEntry.getBindingContext().getObject()._feedEntryData.TopLevelId : '' 
			var sExternalObjectId = this._oTimelineDataHandler.getCurrentExternalBO().Id;
			
			// check Jam for the new feed updates
			this._oJamDataHandler.getFeedUpdatesLatestCount(sLatestTopLevelId, sExternalObjectId).done(fnSuccess.bind(this)).fail(fnError.bind(this));
		},


		/**
		 * Returns a URL for the ThumbnailImage
		 * @param {string} sUserId
		 * @return {string}
		 * @private
		 * @memberOf sap.collaboration.components.socialtimeline.Component
		 */
		_buildThumbnailImageURL: function(sUserId) {
			return this._defaultAttributes.collaborationHostServiceUrl + "/Members('" + sUserId +"')/ThumbnailImage/$value";
		}
	}
);

/**
 * Getter for property <code>alignment</code>.
 * Timeline item alignment.
 *
 * Default value is <code>Right</code>
 *
 * @return {sap.suite.ui.commons.TimelineAlignment} the value of property <code>alignment</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getAlignment
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Setter for property <code>alignment</code>.
 *
 * Default value is <code>Right</code> 
 *
 * @param {sap.suite.ui.commons.TimelineAlignment} oAlignment  new value for property <code>alignment</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setAlignment
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Getter for property <code>axisOrientation</code>.
 * Timeline axis orientation.
 *
 * Default value is <code>Vertical</code>
 *
 * @return {sap.suite.ui.commons.TimelineAxisOrientation} the value of property <code>axisOrientation</code>
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getAxisOrientation
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Setter for property <code>axisOrientation</code>.
 *
 * Default value is <code>Vertical</code> 
 *
 * @param {sap.suite.ui.commons.TimelineAxisOrientation} oAxisOrientation  new value for property <code>axisOrientation</code>
 * @return {sap.collaboration.components.socialtimeline.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#setAxisOrientation
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Getter for property <code>noDataText</code>.
 * This text is displayed when the control has no data.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getNoDataText
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Setter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNoDataText  new value for property <code>noDataText</code>
 * @return {sap.collaboration.components.socialtimeline.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#setNoDataText
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Getter for property <code>showIcons</code>.
 * Show icon on each Timeline item.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showIcons</code>
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getShowIcons
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Setter for property <code>showIcons</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowIcons  new value for property <code>showIcons</code>
 * @return {sap.collaboration.components.socialtimeline.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#setShowIcons
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Getter for property <code>visible</code>.
 * Set Timeline control visibility
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getVisible
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.collaboration.components.socialtimeline.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#setVisible
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Getter for property <code>width</code>.
 * Sets the width of the Timeline.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getWidth
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.collaboration.components.socialtimeline.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#setWidth
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Getter for property <code>customFilter</code>.
 *
 * Default value is <code>[]</code>. The customFilter is an array of objects, each object contains text and value.
 * Text is the name of the filter category and value is the filter value.
 *
 * @return {array} the value of property <code>customFilter</code> 
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getCustomFilter
 * @function
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */

/**
 * Event fire when a custom action is clicked
 *
 * @name sap.collaboration.components.socialtimeline.Component#customActionPress
 * @event
 * @param {object} oEventData
 * @public
 * @memberOf sap.collaboration.components.socialtimeline.Component
 */


}; // end of sap/collaboration/components/socialtimeline/Component.js
