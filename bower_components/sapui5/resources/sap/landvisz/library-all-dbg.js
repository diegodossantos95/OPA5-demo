// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

sap.landvisz.internal.Connection = function() {
};

sap.landvisz.internal.Connection.init = function() {

	this.setting = {
		showLog : true, // [boolean:false] to decide show logs in firebug, IE8, chrome console
		animationSpeed : 10
	// [number:1000] the speed of animations: maximize, restore, select, unselect, in milliseconds
	};
	// to remember current clv connection entity instance
	this.initialized = false;
	// a boolean flag to check is it initialized?

	this.initialRow = 0;
	this.initialCol = 0;

	this.allConnections = [];
	this.clvConnections = [];

	this.sourceDoneList = {};
	this.targetDoneList = {};
	this.nodeDoneList = {};

	this.sourceConnectionMatrix = {};
	this.targetConnectionMatrix = {};
	this.connectionMatrix = {};

	this.topPostions = {};
	this.connectedNodesLayout = {};
	this.svgForConnections = null;
    this.isConnectionEntity = false;
    this.isSystemEntity = false;
	//this.connectionData = connectionsData;
	//this.containerInstance = containerInstance;

	//this.initialize(this.containerInstance, this.connectionsData);
};

sap.landvisz.internal.Connection.hideConnections = function() {
	if (this.svgForConnections) {
		jQuery(this.svgForConnections.canvas).hide();
	}
}

sap.landvisz.internal.Connection.getConnectedNodesLayoutTrack= function(connections) {
	
	
	if (connections.length > 0) {
		this.allConnections = connections;
		
		if (jQuery.isEmptyObject(this.connectedNodesLayout)) {
			for ( var i = 0; i < this.allConnections.length; i++) {
				
				this.getAllTargets(this.allConnections[i].getSource());
				this.getAllSources(this.allConnections[i].getSource());
				
				}
			}
		
		
		var nodePosition = {};
		nodePosition.row = this.initialRow;
		nodePosition.col = this.initialCol;
		var node;
		var nodeName;
		var firstNode = true;
		for ( var key in this.sourceConnectionMatrix) {
			this.connectionMatrix[key] = [];
			this.connectionMatrix[key].sources = this.sourceConnectionMatrix[key];
			this.connectionMatrix[key].targets = this.targetConnectionMatrix[key];
			
			if(!this.connectedNodesLayout[key] && firstNode == true ){
				this.connectedNodesLayout[key] = nodePosition;
				node = this.connectionMatrix[key];
				nodeName = key;
				firstNode = false;
			}
		}
		
		this.assignIndexToConnectedNodes(node, nodeName);
		
		
		
//		var nodePosition = {};
//		nodePosition.row = this.initialRow;
//		nodePosition.col = this.initialCol;
//		var node;
//		for ( var key in this.connectionMatrix) {
//				node = this.connectionMatrix[key];
//				if(!this.connectedNodesLayout[key])
//				this.connectedNodesLayout[key] = nodePosition;
//				if(node.targets.length>0){
//					this.assignTargetIndex(key);
//				}
//				if(node.sources.length>1){
//					this.assignSourceIndex(key);
//				}
//		}
//
	}
	return this.connectedNodesLayout;
};

sap.landvisz.internal.Connection.assignIndexToConnectedNodes= function(node,key) {
	
	if (node.targets.length>0 )
		this.assignTargetIndex(key);
	if ( node.sources.length>0) 
		this.assignSourceIndex(key)
	
};

sap.landvisz.internal.Connection.assignTargetIndex= function(nodename) {
	var node = this.connectionMatrix[nodename];
	var row = this.connectedNodesLayout[nodename].row;
	var col = this.connectedNodesLayout[nodename].col;
	var targetNode;
	for ( var i = 0; i < node.targets.length; i++) {
		
		targetNode = this.connectionMatrix[node.targets[i]];
		if(i==0)
		col++;
		else{
		row++;
		if(targetNode && targetNode.targets.length>0)
			col = col + targetNode.targets.length -1;
		}
		var nodePosition = {};
		nodePosition.row = row;
		nodePosition.col = col;
		if(!this.connectedNodesLayout[node.targets[i]])
		this.connectedNodesLayout[node.targets[i]] = nodePosition;
		if(targetNode)
			this.assignIndexToConnectedNodes(targetNode,node.targets[i]);
	}
};

sap.landvisz.internal.Connection.assignSourceIndex= function(nodename) {
	
	var node = this.connectionMatrix[nodename];
	var row = this.connectedNodesLayout[nodename].row;
	var col = this.connectedNodesLayout[nodename].col; 
	
	for ( var i = 0; i < node.sources.length; i++) {
		if(!this.connectedNodesLayout[node.sources[i]]){
		col--;
		row++;
		var nodePosition = {};
		nodePosition.row = row;
		nodePosition.col = col;
		
		this.connectedNodesLayout[node.sources[i]] = nodePosition;
		if(this.connectionMatrix[node.targets[i]])
			this.assignIndexToConnectedNodes(this.connectionMatrix[node.targets[i]],node.targets[i]);
		}
	}
};

sap.landvisz.internal.Connection.getAllTargets= function(sourceConnection) {
	
	var targetMatrixCol = [];
	if (!this.sourceDoneList[sourceConnection]) {
		this.sourceDoneList[sourceConnection] = true;
		for ( var j = 0; j < this.allConnections.length; j++) {
			if (sourceConnection == this.allConnections[j].getSource()) {
				targetMatrixCol.push(this.allConnections[j].getTarget());
			}
		}

		this.targetConnectionMatrix[sourceConnection] = targetMatrixCol;
	}
};

sap.landvisz.internal.Connection.getAllSources= function(sourceConnection) {
	
	var sourceMatrixCol = [];
	if (!this.targetDoneList[sourceConnection]) {
		this.targetDoneList[sourceConnection] = true;
		for ( var j = 0; j < this.allConnections.length; j++) {
			if (sourceConnection == this.allConnections[j].getTarget()) {
				sourceMatrixCol.push(this.allConnections[j].getSource());
			}
		}

		this.sourceConnectionMatrix[sourceConnection] = sourceMatrixCol;
	}
};

sap.landvisz.internal.Connection.getConnectedNodesLayout = function(connections) {

	//	this.getAllConnections(this.connectionsData);
	if (connections.length > 0) {
		this.allConnections = connections;
		if (jQuery.isEmptyObject(this.connectedNodesLayout)) {
			for ( var i = 0; i < this.allConnections.length; i++) {
				this.getSourceTargetConnections(this.allConnections[i]
						.getSource());
				this.getTargetSourceConnections(this.allConnections[i]
						.getTarget());
			}

			for ( var key in this.sourceConnectionMatrix) {
				this.connectionMatrix[key] = jQuery.merge(jQuery.merge([],
						this.sourceConnectionMatrix[key]),
						this.targetConnectionMatrix[key]);
			}

			var nodePosition = {};
			nodePosition.row = this.initialRow;
			nodePosition.col = this.initialCol;

			for ( var key in this.connectionMatrix) {
				if (this.connectionMatrix[key].length == 1) {
					this.connectedNodesLayout[key] = nodePosition;
					this.nodeDoneList[key] = true;
					if (!this.topPostions[this.initialRow]) {
						this.topPostions[this.initialRow] = [];
					}
					this.topPostions[this.initialRow].push(this.initialCol);
					this.findConnectedNodes(key);
					break;
				}
			}
		}
	}
	return this.connectedNodesLayout;

};

sap.landvisz.internal.Connection.getAllConnections = function() {
	if (this.allConnections.length == 0) {
		jQuery(this.connectionsData).find('CONNECTION').each(function() {
			var connection = this.parseSingleConnection(jQuery(this));
			this.allConnections.push(connection);
		});
	}
	return this.allConnections;
};

sap.landvisz.internal.Connection.parseSingleConnection = function(
		connectionData) {
	var properties = {};

	jQuery(connectionData).children('DATA').each(function() {
		var property = jQuery(this).attr('property');
		var value = jQuery.trim(jQuery(this).attr('value'));

		switch (property.toUpperCase()) {
		case 'CONNECTION-UUID':
			properties.uuid = value;
			break;
		case 'CONNECTION-TYPE':
			properties.type = value;
			break;
		case 'TEXT':
			properties.text = value;
			break;
		case 'SOURCE-ENTITY-UUID':
			properties.source = value;
			break;
		case 'TARGET-ENTITY-UUID':
			properties.target = value;
			break;
		}
	});
	return properties;
};

sap.landvisz.internal.Connection.getSourceTargetConnections = function(
		sourceConnection) {
	var sourceMatrixCol = [];

	if (!this.sourceDoneList[sourceConnection]) {
		this.sourceDoneList[sourceConnection] = true;
		for ( var j = 0; j < this.allConnections.length; j++) {
			if (sourceConnection == this.allConnections[j].getSource()) {
				sourceMatrixCol.push(this.allConnections[j].getTarget());
				this.getSourceTargetConnections(this.allConnections[j].getTarget());

			}
		}

		this.sourceConnectionMatrix[sourceConnection] = sourceMatrixCol;
	}
};

sap.landvisz.internal.Connection.getTargetSourceConnections = function(
		targetConnection) {
	var targetMatrixCol = [];

	if (!this.targetDoneList[targetConnection]) {
		this.targetDoneList[targetConnection] = true;
		for ( var j = 0; j < this.allConnections.length; j++) {
			if (targetConnection == this.allConnections[j].getTarget()) {
				targetMatrixCol.push(this.allConnections[j].getSource());
				this.getTargetSourceConnections(this.allConnections[j].getSource());
			}
		}

		this.targetConnectionMatrix[targetConnection] = targetMatrixCol;
	}
};

sap.landvisz.internal.Connection.findConnectedNodes = function(nodeName) {
	var node = this.connectionMatrix[nodeName];
	var connectedNodesCount = 0;
	var row = this.connectedNodesLayout[nodeName].row;
	var col = this.connectedNodesLayout[nodeName].col;
	var remainingNodes = [];

	for ( var i = 0; i < node.length; i++) {
		if (!this.nodeDoneList[node[i]]) {
			remainingNodes[connectedNodesCount] = node[i];
			connectedNodesCount++;
		}
	}

	connectedNodesCount = node.length - remainingNodes.length;

	for ( var i = 0; i < remainingNodes.length; i++) {
		connectedNodesCount++;

		if (connectedNodesCount == 1) {
			col++;
		} else {
			if (connectedNodesCount == 2) {
				if (row != 0) {
					var checkCol = col;
					var checkRow = row - 1;
					if (node.length > 2
							&& !this.inTopPosition(checkRow, checkCol)) {
						row--;
					}
				}
				col++;
			} else if (connectedNodesCount >= 3) {
				row++;
			}
		}

		var nodePosition = {};
		nodePosition.row = row;
		nodePosition.col = col;

		this.connectedNodesLayout[remainingNodes[i]] = nodePosition;
		this.nodeDoneList[remainingNodes[i]] = true;

		if (!this.topPostions[row]) {
			this.topPostions[row] = [];
		}
		this.topPostions[row].push(col);

		var rowPosition = this.findConnectedNodes(remainingNodes[i]);
		row = rowPosition;
	}

	return row;
}

sap.landvisz.internal.Connection.inTopPosition = function(row, col) {
	if (this.topPostions[row]) {
		for ( var i = 0; i < this.topPostions[row].length; i++) {
			if (this.topPostions[row][i] == col) {
				return true;
			}
		}
	}
	return false;
};



sap.landvisz.internal.Connection.renderConnections = function(systems,connectionEntities,type) {
	for ( var i = 0; i < this.allConnections.length; i++) {
		var connection = this.allConnections[i];
		connection.sourceEntity = this.getEntity(systems,connectionEntities,this.allConnections[i].getSource());
		connection.targetEntity = this.getEntity(systems,connectionEntities,this.allConnections[i].getTarget()); 
		this.clvConnections.push(connection);
	}

	if (this.clvConnections.length == 0)
		return;

	//update the svg canvas size with the parent scroll szie
//	if (this.svgForConnections) {
//		this.svgForConnections
//				.setSize(
//						this.clvContainerInstance.getClvContainerFrame()[0].scrollWidth,
//						this.clvContainerInstance.getClvContainerFrame()[0].scrollHeight);
//		this.showConnections();
//	}
	var endMarker = this.svgForConnections.append( "marker" ).attr( "id", "endMarker" )
	   .attr( "viewBox", "0 0 10 10")
	   .attr( "markerWidth", 10 )
	   .attr( "markerHeight", 3 )
	   .attr( "refX", 7 )
	   .attr( "refY", 4 )
	   .attr( "orient", "auto" )
	   .attr( "markerUnits", "strokeWidth" );
	
	endMarker.append( "path").attr( "d", "M0,0 L10,4 L0,8 z" );
	
	for ( var i = 0; i < this.clvConnections.length; i++) {
		this.drawConnection(this.clvConnections[i],type);
	}
}


sap.landvisz.internal.Connection.getEntity = function(systems,connectionEntities,connectorID){
	
	var id;
	
	this.isConnectionEntity = false;
	this.isSystemEntity = false;
	
	for (var i = 0; i < connectionEntities.length; i++) {
		
		id = connectionEntities[i].getConnectionId();
		if(connectorID == id)
			return jQuery.sap.byId(connectionEntities[i].getId());
	}
	
	
	for (var i = 0; i < systems.length; i++) {
		
		id = systems[i].getSystemId();
		
		if(connectorID == id)
			return jQuery.sap.byId(systems[i].getId());
	}
	
}; 


sap.landvisz.internal.Connection.drawConnection = function(clvConnection,type) {
	var sourceEntity = clvConnection.sourceEntity;
	var targetEntity = clvConnection.targetEntity;

	var sourceX = this.getX(sourceEntity);
	var sourceY = this.getY(sourceEntity);
	var targetX = this.getX(targetEntity);
	var targetY = this.getY(targetEntity);

	var sourceId = clvConnection.getSource();
	var targetId = clvConnection.getTarget();
	var sourceEntityPosition = this.connectedNodesLayout[sourceId];
	var targetEntityPosition = this.connectedNodesLayout[targetId];
	

	var connection = null;
	
	if (targetEntityPosition.row == sourceEntityPosition.row) {
		connection = this.svgForConnections.append("line");
		
		if(type == sap.landvisz.ConnectionLine.Arrow){
			sourceX = sourceX +122;
			targetX = targetX -122;
			connection.attr("marker-end","url(#endMarker)");
		}
		connection.attr("x1", sourceX);
		connection.attr("y1", sourceY);
		connection.attr("x2", targetX);
		connection.attr("y2", targetY);
		connection.attr("stroke", "#999");
		connection.attr("stroke-width", 2);
		connection.transition()
		.duration(1500)
		.delay(1000);
	} else if (targetEntityPosition.col == sourceEntityPosition.col) {
			
		    connection = this.svgForConnections.append("line");
			
			if(type == sap.landvisz.ConnectionLine.Arrow){
				sourceY = sourceY + 95;
				targetY = targetY - 95;
				connection.attr("marker-end","url(#endMarker)");
			}
			connection.attr("x1", sourceX);
			connection.attr("y1", sourceY);
			connection.attr("x2", targetX);
			connection.attr("y2", targetY);
			connection.attr("stroke", "#999");
			connection.attr("stroke-width", 2);
			connection.transition()
			.duration(1500)
			.delay(1000);
		} else if (targetEntityPosition.col > sourceEntityPosition.col) {
			
			if (targetEntityPosition.row < sourceEntityPosition.row){
			connection = this.svgForConnections.append("line");
			
			if(type == sap.landvisz.ConnectionLine.Arrow){
				sourceX = sourceX + 95;
				connection.attr("marker-end","url(#endMarker)");
				}
			connection.attr("x1", sourceX);
			connection.attr("y1", sourceY);
			connection.attr("x2", targetX);
			connection.attr("y2", sourceY);
			connection.attr("stroke", "#999");
			connection.attr("stroke-width", 2);
			connection.transition()
			.duration(1500)
			.delay(1000);
			
			connection = this.svgForConnections.append("line");
			if(type == sap.landvisz.ConnectionLine.Arrow){
				targetY = targetY + 95;
				connection.attr("marker-end","url(#endMarker)");
				}
			connection.attr("x1", targetX);
			connection.attr("y1", sourceY);
			connection.attr("x2", targetX);
			connection.attr("y2", targetY);
			connection.attr("stroke", "#999");
			connection.attr("stroke-width", 2);
			connection.transition()
			.duration(1500)
			.delay(1000);
			}
			else{
				connection = this.svgForConnections.append("line");
				
				if(type == sap.landvisz.ConnectionLine.Arrow){
					sourceY = sourceY + 95;
					connection.attr("marker-end","url(#endMarker)");
					}
				connection.attr("x1", sourceX);
				connection.attr("y1", sourceY);
				connection.attr("x2", sourceX);
				connection.attr("y2", targetY);
				connection.attr("stroke", "#999");
				connection.attr("stroke-width", 2);
				
				connection.transition()
				.duration(1500)
				.delay(1000);
				
				connection = this.svgForConnections.append("line");
				
				if(type == sap.landvisz.ConnectionLine.Arrow){
					targetX = targetX - 122;
					connection.attr("marker-end","url(#endMarker)");
					}
				connection.attr("x1", sourceX);
				connection.attr("y1", targetY);
				connection.attr("x2", targetX);
				connection.attr("y2", targetY);
				connection.attr("stroke", "#999");
				connection.attr("stroke-width", 2);
				connection.transition()
				.duration(1500)
				.delay(1000);
				
			}
		} else {
			
			connection = this.svgForConnections.append("line");
			connection.transition()
			connection.attr("x1", sourceX);
			connection.attr("y1", sourceY);
			connection.attr("x2", targetX);
			connection.attr("y2", sourceY);
			connection.attr("marker-end","url(#endMarker)");
			connection.attr("stroke", "#999");
			connection.attr("stroke-width", 2);
			connection.transition()
			.duration(1500)
			.delay(1000)
			connection.attr("x1", sourceX);
			
			connection = this.svgForConnections.append("line");
			connection.transition()
			connection.attr("x1", targetX);
			connection.attr("y1", sourceY);
			connection.attr("x2", targetX);
			connection.attr("y2", targetY);
			connection.attr("marker-end","url(#endMarker)");
			connection.attr("stroke", "#999");
			connection.attr("stroke-width", 2);
			
			connection.transition()
			.duration(1500)
			.delay(1000);
//			connection.attr("x1", sourceX);
//			connection = this.svgForConnections.append("path");
//			connection.attr("M" + sourceX + " "
//					+ sourceY);
//			connection.attr("stroke", "#999");
//			connection.attr("stroke-width", 2);
////			connection.animate({
////				'path' : "M" + sourceX + " " + sourceY + "H" + targetX
////			}, this.setting.animationSpeed);
//			connection = this.svgForConnections.append("path");
//			connection.attr("M" + targetX + " "
//					+ sourceY);
//			connection.attr("stroke", "#999");
//			connection.attr("stroke-width", 2);
//			connection.animate({
//				'path' : "M" + targetX + " " + sourceY + "V" + targetY
//			}, this.setting.animationSpeed);
	}
}

sap.landvisz.internal.Connection.getX = function(entity) {
	var srcLeft = parseInt(entity.css('left'));
	var srcWidth = entity[0].clientWidth;
	return  srcLeft + (srcWidth / 2);
	
}

sap.landvisz.internal.Connection.getY = function(entity) {
	var srcTop = parseInt(entity.css('top'));
	var srcHeight = entity[0].clientHeight;
	return srcTop + (srcHeight / 2);
	
}

sap.landvisz.internal.Connection.getTargetXMiddle = function(targetEntity) {
	var trgLeft = parseInt(targetEntity.css('left'));
	var trgWidth = targetEntity.outerWidth();
	if (targetEntity.hasClass('clv_entity_container')) {
		return (trgLeft + 26 + ((trgWidth - 26) / 2));
	} else if (targetEntity.hasClass('networkConnectionEntity')) {
		var trgParentLeft = parseInt(targetEntity.parent().css('left'));
		return (trgParentLeft + trgLeft + (trgWidth / 2));
	} else {
		return null;
	}
}

sap.landvisz.internal.Connection.getTargetYCenter = function(targetEntity) {
	var trgTop = parseInt(targetEntity.css('top'));
	var trgHeight = targetEntity.outerHeight();
	if (targetEntity.hasClass('clv_entity_container')) {
		return (trgTop + 32 + ((trgHeight - 32) / 2));
	} else if (targetEntity.hasClass('networkConnectionEntity')) {
		var trgParentTop = parseInt(targetEntity.parent().css('top'));
		return (trgParentTop + trgTop + (trgHeight / 2));
	} else {
		return null;
	}
}

sap.landvisz.internal.Connection.showConnections = function() {
	if (this.svgForConnections) {
		jQuery(this.svgForConnections.canvas).show();
	}
}

sap.landvisz.internal.Connection.destroyConnections = function() {
	if (this.svgForConnections) {
		this.svgForConnections.canvas.remove();
		this.svgForConnections = null;
	}
}

sap.landvisz.internal.Connection.getConnectedNodes = function(nodeName) {
	var connectedNodes = [];
	for ( var i = 0; i < this.allConnections.length; i++) {
		if (nodeName == this.allConnections[i].source) {
			connectedNodes.push(this.allConnections[i].target);
		} else if (nodeName == this.allConnections[i].target) {
			connectedNodes.push(this.allConnections[i].source);
		}
	}
	return connectedNodes;
}

sap.landvisz.internal.Connection.deinitialize = function() {
	if (this.initialized) {
		if (this.svgForConnections) {
			this.svgForConnections.canvas.remove();
			this.svgForConnections = null;
		}
		this.allConnections = [];
		this.clvConnections = [];

		this.sourceDoneList = {};
		this.targetDoneList = {};
		this.nodeDoneList = {};

		this.sourceConnectionMatrix = {};
		this.targetConnectionMatrix = {};
		this.connectionMatrix = {};

		this.topPostions = {};
		this.connectedNodesLayout = {};

		this.initialized = false;
	}
}


sap.landvisz.internal.Connection.getBoxViewConnectedNodesLayout = function (connections) {
	
	
	
	

	var firstLevelEntities = {};
	var thirdLevelEntities = [];
	var connectedNodesLayout = {};
	 
	if(connections.length > 0){
         this.allConnections = connections;
         
	for (var i = 0; i < this.allConnections.length; i++) {
		var existInFirstLevel = false;
		for (var key in firstLevelEntities) {
			if (this.allConnections[i].getSource() == key) {
				existInFirstLevel = true;
				break;
			}
		}

		if (!existInFirstLevel) {
			firstLevelEntities[this.allConnections[i].getSource()] = {};
		}
	}

	for (var key in firstLevelEntities) {
		var secondLevelEntities = [];

		for (var j = 0; j < this.allConnections.length; j++) {
			if (key == this.allConnections[j].getSource()) {
				var firstLevelEntity = [];

				for (var k = 0; k < this.allConnections.length; k++) {
					if (this.allConnections[j].getTarget() == this.allConnections[k].getTarget())
						firstLevelEntity.push(this.allConnections[k].getSource());
				}

				var systemObject = {};

				if (firstLevelEntity.length > 1) {
					if (thirdLevelEntities.length > 0) {
						var existInThirdLevel = false;
						for (var i = 0; i < thirdLevelEntities.length; i++) {
							for (var entityId in thirdLevelEntities[i]) {
								if (this.allConnections[j].getTarget() == entityId) {
									existInThirdLevel = true;
								}
							}

							if (existInThirdLevel){
								break;
							}
						}
						if (!existInThirdLevel) {
							systemObject[this.allConnections[j].getTarget()] = firstLevelEntity;
							thirdLevelEntities.push(systemObject);
						}
					} else {
						systemObject[this.allConnections[j].getTarget()] = firstLevelEntity;
						thirdLevelEntities.push(systemObject);
					}
				} else {
					systemObject[this.allConnections[j].getTarget()] = {};
					secondLevelEntities.push(systemObject);
				}
			}
		}
		firstLevelEntities[key].secondLevelEntities = secondLevelEntities;
	}

	connectedNodesLayout.maxColumnCount = 0;
	for (var key in firstLevelEntities) {
		var secondLevelEntities = firstLevelEntities[key].secondLevelEntities;
		connectedNodesLayout[key] = {};
		connectedNodesLayout[key].row = this.initialRow;
		connectedNodesLayout[key].col = this.initialCol;
		connectedNodesLayout[key].colspan = secondLevelEntities.length > 0 ? secondLevelEntities.length : 1;

		for (var i = 0; i < secondLevelEntities.length; i++) {
			for (var entityId in secondLevelEntities[i]) {
				connectedNodesLayout[entityId] = {};
				connectedNodesLayout[entityId].row = this.initialRow + 1;
				connectedNodesLayout[entityId].col = this.initialCol + i;
			}
		}

		this.initialCol += connectedNodesLayout[key].colspan;
	}

	connectedNodesLayout.thirdLevelEntitiesCount = thirdLevelEntities.length;
	for (var i = 0; i < thirdLevelEntities.length; i++) {

		for (var key in thirdLevelEntities[i]) {
			connectedNodesLayout[key] = {};
			connectedNodesLayout[key].row = this.initialRow + 2;
			connectedNodesLayout[key].col = 0;

			if (thirdLevelEntities[i][key].length == 2) {
				var firstColStart = connectedNodesLayout[thirdLevelEntities[i][key][0]].col;
				var firstColEnd = connectedNodesLayout[thirdLevelEntities[i][key][0]].col + connectedNodesLayout[thirdLevelEntities[i][key][0]].colspan - 1;
				var secondColStart = connectedNodesLayout[thirdLevelEntities[i][key][1]].col;
				var secondColEnd = connectedNodesLayout[thirdLevelEntities[i][key][1]].col + connectedNodesLayout[thirdLevelEntities[i][key][1]].colspan - 1;
				if (firstColStart < secondColStart) {
					connectedNodesLayout[key].col = (firstColEnd + secondColStart) / 2;
				} else {
					connectedNodesLayout[key].col = (secondColEnd + firstColStart) / 2;
				}
			} else {							
				for (var j = 0; j < thirdLevelEntities[i][key].length; j++) {
					var colEnd = connectedNodesLayout[thirdLevelEntities[i][key][j]].col + connectedNodesLayout[thirdLevelEntities[i][key][j]].colspan - 1;
					if (connectedNodesLayout[key].col < colEnd)
						connectedNodesLayout[key].col = colEnd;
				}
				connectedNodesLayout[key].col = connectedNodesLayout[key].col / 2;
			}

		}
	}
	
	connectedNodesLayout.maxColumnCount = this.initialCol;
}
	return connectedNodesLayout;

}; 



/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
///**
// * This file defines behavior for the control,
// */
sap.landvisz.TechnicalSystemTypes.prototype.init = function(){

};
jQuery.sap.declare('sap.landvisz.library-all');
jQuery.sap.declare('sap.landvisz.internal.Connection'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.landvisz.internal.types.TechnicalSystemTypes'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.landvisz.ConnectionEntityRenderer') ) {
/*!
 * @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.ConnectionEntityRenderer");

/**
 * @class ConnectionEntity renderer.
 * @static
 */
sap.landvisz.ConnectionEntityRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.ConnectionEntityRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager

	if (!this.initializationDone) {

		oControl.initControls();
		oControl.initializationDone = true;
		oRm.write("<div");
		oRm.writeControlData(oControl);

		if (oControl.viewType == sap.landvisz.DependencyType.NETWORK_VIEW)
			oRm.addClass("sapLandviszConnection_entity_container");
		else if (oControl.viewType == sap.landvisz.DependencyType.BOX_VIEW)
			oRm.addClass("sapLandviszConnectionBox");
		else if (oControl.viewType == sap.landvisz.ViewType.SOLUTION_VIEW)
			oRm.addClass("sapLandviszSolutionBox");
		oRm.writeClasses();
		if (this.left != 0)
			oRm.addStyle("left",oControl.left + "px");
		if (this.top != 0)
			oRm.addStyle("top",oControl.top + "px");
		if (oControl.width != 0)
			oRm.addStyle("width", oControl.width + "px");
		if (oControl.height != 0)
			oRm.addStyle("height",oControl.height + "px");
		oRm.addStyle("position", "absolute");
		oRm.writeStyles();
		oRm.write(" >");

		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "connectionRow");
		oRm.addClass("connectionEntity");
		if (oControl.getType() == sap.landvisz.ConnectionType.ProductSystem)
			oRm.addClass("productSystem");
		if (oControl.getType() == sap.landvisz.ConnectionType.TechnicalSystem)
			oRm.addClass("technicalSystem");
		if (oControl.getType() == sap.landvisz.ConnectionType.MobileSolution && oControl.viewType != sap.landvisz.ViewType.SOLUTION_VIEW)
			oRm.addClass("mobileSolution");
		oRm.writeClasses();

		if (this.left != 0)
			oRm.addStyle("left", oControl.innerLeft + "px");
		if (this.top != 0)
			oRm.addStyle("top", oControl.innerTop + "px");
		if (oControl.width != 0)
			oRm.addStyle("width",oControl.innerWidth + "px");
		if (oControl.height != 0)
			oRm.addStyle("height", oControl.innerHeight + "px");
		oRm.addStyle("position","absolute");
		var connectionData = oControl.getConnectionData();
		if(connectionData.length > 1)
		oRm.addStyle("overflow", "auto");
		oRm.writeStyles();
		oRm.write(">");
		oRm.write("<div");
		oRm
				.writeAttributeEscaped("id", oControl.getId()
						+ "connectionRowField");
		oRm.addClass("boxRowDisplay");
		
		if(connectionData.length <= 1)
		oRm.addStyle("width", "100%");
		oRm.writeStyles();
		oRm.addClass("sapLandviszConnectionRowField");
		oRm.writeClasses();
		oRm.write(">");

		//var connectionData = oControl.getConnectionData();
		if (oControl.viewType == sap.landvisz.ViewType.SOLUTION_VIEW) {

			for ( var i = 0; i < connectionData.length; i++) {

				if (connectionData.length > 1) {
					connectionData[i]
							.setRenderingSize(sap.landvisz.EntityCSSSize.Medium);
					connectionData[i]
							.addStyleClass("sapLandviszConnectionDataNotopMargin");
					oRm.renderControl(connectionData[i]);

				} else {
					oControl.connectionImage.setSrc(
							sap.ui.resource("sap.landvisz",
									"themes/base/img/landscapeobjects/"
											+ "48x48" + "/Solution.png"))
							.addStyleClass("solutionImage");
					oControl.connectionImage.setTooltip(oControl
							.getDependencyTooltip());

					oRm.renderControl(oControl.connectionImage);

					oControl.connectionLabel.setText(connectionData[i]
							.getLabel());
					oControl.connectionLabel.setTooltip(connectionData[i]
							.getTooltip());
					oControl.connectionLabel.addStyleClass("solutionRow");
					oRm.renderControl(oControl.connectionLabel);
				}
			}

		} else {

			var connectionData = oControl.getConnectionData();
			if (connectionData.length > 0) {
				for ( var i = 0; i < connectionData.length; i++) {
					if(oControl.getSize() == sap.landvisz.EntityCSSSize.Small)
						connectionData[i]
					.setRenderingSize(sap.landvisz.EntityCSSSize.Small);
					else
					connectionData[i]
							.setRenderingSize(sap.landvisz.EntityCSSSize.Medium);
					connectionData[i]
							.addStyleClass("sapLandviszConnectionDataNotopMargin");
					oRm.renderControl(connectionData[i]);

				}

			}

			var row;

			if (connectionData.length > 0) {
				oControl.oVLayoutToolPopup.removeAllContent();
				oControl.oVLayoutToolPopup.addStyleClass("sapLandviszConnectionToolPopup");
				for ( var i = 0; i < connectionData.length; i++) {
					
					if(oControl.getSize() == sap.landvisz.EntityCSSSize.Small)
						connectionData[i]
					.setRenderingSize(sap.landvisz.EntityCSSSize.Small);
					else
					connectionData[i]
							.setRenderingSize(sap.landvisz.EntityCSSSize.Medium);
					row = new sap.landvisz.internal.LinearRowField();
					row.addStyleClass("overlayRow");
					row.setLabel(connectionData[i].getLabel());
					row.setValue(connectionData[i].getValue());
					row.setRenderingSize(connectionData[i].getRenderingSize());
					row.setIconType(connectionData[i].getIconType());
					row.setIconTitle(connectionData[i].getIconTitle());
					row.setLinkSource(connectionData[i].getLinkSource());
					row.setRightIconSrc(connectionData[i].getRightIconSrc());
					oControl.oVLayoutToolPopup.addContent(row);
				}
			}
		}
		oRm.write("</div>");
		oRm.write("</div>");
		oRm.write("</div>");

		var backup = oControl.oVLayoutCallout.getContent();
		for ( var i = 0; i < backup.length; i++) {
			oControl.addAggregation("connectionData", backup[i], false);
		}
	}
};

}; // end of sap/landvisz/ConnectionEntityRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.ConnectorRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.ConnectorRenderer");
/**
 * @class ConnectionEntity renderer.
 * @static
 */
sap.landvisz.ConnectorRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.ConnectorRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager
};

}; // end of sap/landvisz/ConnectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.EntityConstants') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.landvisz.EntityConstants");
sap.landvisz.EntityConstants = function(){
};

sap.landvisz.EntityConstants.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

sap.landvisz.EntityConstants.internalEvent = false;


}; // end of sap/landvisz/EntityConstants.js
if ( !jQuery.sap.isDeclared('sap.landvisz.LandscapeEntityRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.LandscapeEntityRenderer");

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained

/**
 * @class LandscapeEntity renderer.
 * @static
 */
sap.landvisz.LandscapeEntityRenderer = {};

sap.landvisz.LandscapeEntityRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager
	var renderSize = oControl.getRenderingSize();

	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;
		oRm.write("<div");
		oRm.addClass("sapLandviszLandscapeEntity");
		oRm.writeClasses();
		oRm.writeControlData(oControl);
		if (oControl.expVisible == true) {
			oRm.addStyle("width","100%");
			oRm.addStyle("height","100%");
		}
		if (this.left != 0)
			oRm.addStyle("left",oControl.left + "px");
		if (this.top != 0)
			oRm.addStyle("top",oControl.top + "px");
		if (oControl.entityMaximized == true) {
			if (oControl.sViewWidth != 0)
				oRm.addStyle("width",oControl.sViewWidth + "px");
			if (oControl.sViewHeight != 0)
				oRm.addStyle("height",oControl.sViewHeight + "px");
		}

		if (oControl.viewType == sap.landvisz.ViewType.DEPENDENCY_VIEW
				|| oControl.viewType == sap.landvisz.ViewType.SOLUTION_VIEW)
			oRm.addStyle("position","absolute");
		else
			oRm.addStyle("position","relative");

		oRm.writeStyles();
		oRm.write(">");
		this._renderModelingStatus(oRm, oControl);

		this._renderActionBar(oRm, oControl);

		this._renderSystemEntity(oRm, oControl);

		oRm.write("</div>");
		oRm.write("</div>");
		oRm.write("</div>");

		// has to be removed
		// this._renderUnselectedHeaderPopup(oRm, oControl);

		// TO DO tweak to get the aggregated data back as container removes its
		// children from the actual parent.
		// Check this later how to overcome the problem.

		var content = oControl.oHeadersLayout.getContent();

		if (content.length > 0) {
			for ( var i = 0; i < content.length - 2; i++)
				oControl.addAggregation("dataContainers", content[i], false);
		}

		if (oControl.getDataContainers()
				&& oControl.getDataContainers().length > 0) {
			var backup = oControl.oVLayoutProperties.getContent();
			var container = oControl.propertyHeaders[oControl.selectedIndex];
			for ( var i = 0; i < backup.length; i++) {
				container.addAggregation("properties", backup[i], false);
			}

		}

		if (oControl.expVisible == true) {
			this._renderUnselectedHeaderPopup(oRm, oControl);
		}
		
		// creating all the dialogs
		if (oControl.getDataContainers() && oControl.getDataContainers().length > 0) {
			var containers = oControl.getDataContainers()
			var container;
			var hasHeader;
			for ( var i = 0; i < containers.length; i++) {
				container = containers[i];
				hasHeader = false;
				for ( var j = 0; j < oControl.dialogArray.length; j++) {
					if (oControl.dialogArray[j].getHeader() == container
							.getHeader()) {
						hasHeader = true;
						break;
					}
				}
				if (hasHeader == false) {
					oControl.smvContainer = new sap.landvisz.internal.SingleDataContainer(
							oControl.getId() + i + "CLVSMVSection");
					oControl.smvContainer.setHeader(container.getHeader());
					oControl.dialogArray.push(oControl.smvContainer);
				}
			}
		}

		oControl.firstTime = false;
		this._renderOverlayContainer(oRm, oControl);
		oRm.write("</div>");

		// backup actions
		var actions = oControl.oHLayoutAction.getContent();
		for ( var j = actions.length - 1; j >= 0; j--) {
			oControl.addAggregation("actionBar", actions[j], false);
		}

		oControl.containerEvent = false;
	}
};

sap.landvisz.LandscapeEntityRenderer._renderModelingStatus = function(oRm,
		oControl) {
	var renderSize = oControl.getRenderingSize();
	oRm.write("<div");

	oControl.modelStatus.entityMaximized = oControl.entityMaximized;

	if (oControl.entityMaximized != true) {
		if (renderSize == sap.landvisz.EntityCSSSize.Small)
			oRm.addClass("sapLandviszStatusSmallSize");
		else if (renderSize == sap.landvisz.EntityCSSSize.RegularSmall)
			oRm.addClass("sapLandviszStatusRegularSmallSize");
		else if (renderSize == sap.landvisz.EntityCSSSize.Regular)
			oRm.addClass("sapLandviszStatusRegularSize");
		else if (renderSize == sap.landvisz.EntityCSSSize.Medium)
			oRm.addClass("sapLandviszStatusMediumSize");
		else if (renderSize == sap.landvisz.EntityCSSSize.Large)
			oRm.addClass("sapLandviszStatusLargeSize");
	}else {
		oRm.addClass("sapLandviszStatusMaximizeSize");
	}

	oRm.writeClasses();
	oRm.write(">");
	oControl.modelStatus.setStatus(oControl.getSystemStatus());
	oControl.modelStatus.setStatusTooltip(oControl.getStatusTooltip());
	oControl.modelStatus.setStateIconSrc(oControl.getStateIconSrc());
	oControl.modelStatus.setStateIconTooltip(oControl.getStateIconTooltip());
	if(oControl.getEntityStatus())
	oControl.modelStatus.statusImage = oControl.getEntityStatus();
	oControl.modelStatus.renderSize = renderSize;
	if (oControl.firstTime == true) {
		oControl.modelStatus.attachEvent("statusSelected", function(event) {
			oControl.fireStatusSelect();
		});
	}
	oRm.renderControl(oControl.modelStatus);
};

sap.landvisz.LandscapeEntityRenderer._renderActionBar = function(oRm, oControl) {
	var renderSize = oControl.getRenderingSize();
	var showCustomActions = oControl.getShowCustomActions();
	var showEntityActions = oControl.getShowEntityActions();

	oRm.write("<div");
	if (oControl.entityMaximized != true) {
		oRm.addClass("sapLandviszActionBarSizeCommon");
		if (renderSize == sap.landvisz.EntityCSSSize.Small) {
			oRm.addClass("sapLandviszActionBarSmallSize");
			oControl.oVLayoutProperties
			.addStyleClass("sapLandviszSmallSizesPropertySection");
			oControl.oVLayoutProperties
			.removeStyleClass("sapLandviszMaximizePropertySection");
			oControl._imgFolderPath = "16x16/";
			oControl.restore = false;
		}else if (renderSize == sap.landvisz.EntityCSSSize.RegularSmall) {
			oRm.addClass("sapLandviszActionBarRegularSmallSize");
			oControl.oVLayoutProperties
			.addStyleClass("sapLandviszRegularSmallSizesPropertySection");
			oControl.oVLayoutProperties
			.removeStyleClass("sapLandviszMaximizePropertySection");
			oControl._imgFolderPath = "16x16/";
			oControl.restore = false;
		}else if (renderSize == sap.landvisz.EntityCSSSize.Regular) {
			oRm.addClass("sapLandviszActionBarRegularSize");
			oControl.oVLayoutProperties
			.addStyleClass("sapLandviszRegularSizesPropertySection");
			oControl.oVLayoutProperties
			.removeStyleClass("sapLandviszMaximizePropertySection");
			oControl._imgFolderPath = "16x16/";
			oControl.restore = false;
		}else if (renderSize == sap.landvisz.EntityCSSSize.Medium) {
			oRm.addClass("sapLandviszActionBarMediumSize");
			oControl.oVLayoutProperties
			.addStyleClass("sapLandviszMediumSizesPropertySection");
			oControl.oVLayoutProperties
			.removeStyleClass("sapLandviszMaximizePropertySection");
			oControl.restore = false;
			oControl._imgFolderPath = "16x16/";
		}else if (renderSize == sap.landvisz.EntityCSSSize.Large) {
			oRm.addClass("sapLandviszActionBarLargeSize");
			oControl.oVLayoutProperties
			.addStyleClass("sapLandviszLargeSizesPropertySection");
			oControl.oVLayoutProperties
			.removeStyleClass("sapLandviszMaximizePropertySection");
			oControl.restore = true;
			oControl._imgFolderPath = "24x24/";
		}

		if (oControl.expVisible == true){
			if(renderSize == sap.landvisz.EntityCSSSize.Regular){
				oControl.oVLayoutProperties.addStyleClass("sapLandviszRegularSizesPropertySectionSmv");
				oControl.oVLayoutProperties.removeStyleClass("sapLandviszRegularSmallSizesPropertySectionSmv");
			}else if(renderSize == sap.landvisz.EntityCSSSize.RegularSmall){
				oControl.oVLayoutProperties.addStyleClass("sapLandviszRegularSmallSizesPropertySectionSmv");
				oControl.oVLayoutProperties.removeStyleClass("sapLandviszRegularSizesPropertySectionSmv");
				oControl.oVLayoutProperties.removeStyleClass("sapLandviszMaximizePropertySection");
				if(oControl.explodeViewClosed == true)
					oControl.oVLayoutProperties.addStyleClass("sapLandviszRegularSmallSizesPropertySection");
				else
					oControl.oVLayoutProperties.removeStyleClass("sapLandviszRegularSmallSizesPropertySection");
			}
		}else{
			oControl.oVLayoutProperties.removeStyleClass("sapLandviszRegularSizesPropertySectionSmv");
		}
	}

	if (oControl.entityMaximized == true) {
		var maxWidth = oControl.sViewWidth - 30;
		oRm.addStyle("width", maxWidth + "px");
		oRm.addClass("sapLandviszActionBarMaximizeSize");

		oControl.oVLayoutProperties
		.addStyleClass("sapLandviszMaximizePropertySection");
		oControl.oVLayoutProperties.addStyleClass("sapLandviszMaximizePropertySection");
		   if(renderSize == sap.landvisz.EntityCSSSize.Large)
		oControl.oVLayoutProperties.removeStyleClass("sapLandviszLargeSizesPropertySection");
		   else if(renderSize == sap.landvisz.EntityCSSSize.Small)
		oControl.oVLayoutProperties.removeStyleClass("sapLandviszSmallSizesPropertySection");
		   else if(renderSize == sap.landvisz.EntityCSSSize.RegularSmall)
		oControl.oVLayoutProperties.removeStyleClass("sapLandviszRegularSmallSizesPropertySection");
		   else if(renderSize == sap.landvisz.EntityCSSSize.Regular)
		oControl.oVLayoutProperties.removeStyleClass("sapLandviszRegularSizesPropertySection");
		   else if(renderSize == sap.landvisz.EntityCSSSize.Medium)
		oControl.oVLayoutProperties.removeStyleClass("sapLandviszMediumSizesPropertySection");
		oControl.oVLayoutProperties
		.removeStyleClass("sapLandviszRegularSmallSizesPropertySectionSmv");
		oControl.restore = true;
		oControl._imgFolderPath = "24x24/";
	}
	oRm.writeStyles();
	oRm.writeClasses();
	oRm.write(">");
	if (showCustomActions == true)
		this._renderCustomActionRegion(oRm, oControl);
	oControl.oHLayoutAllAction.addContent(oControl.oHLayoutAction);
	if (showEntityActions == true)
		this._renderEntityAction(oRm, oControl);
	if (oControl.entityMaximized == true) {
		oControl.oHLayoutAllAction
		.addStyleClass("sapLandviszAllActionLayoutMaximize");
		oControl.oHLayoutAllAction
		.removeStyleClass("sapLandviszAllActionLayout");
	} else {
		oControl.oHLayoutAllAction.addStyleClass("sapLandviszAllActionLayout");
		oControl.oHLayoutAllAction
		.removeStyleClass("sapLandviszAllActionLayoutMaximize");
	}

	oRm.renderControl(oControl.oHLayoutAllAction);

};

sap.landvisz.LandscapeEntityRenderer._renderSystemEntity = function(oRm,
		oControl) {

	var renderSize = oControl.getRenderingSize();
	oRm.write("<div");
	if (oControl.entityMaximized != true) {
		if (renderSize == sap.landvisz.EntityCSSSize.Small) {
			oRm.addClass("sapLandviszLandscapeEntitySmallSize");
			oControl.containerWidth = 21;
		}else if (renderSize == sap.landvisz.EntityCSSSize.RegularSmall) {
			oRm.addClass("sapLandviszLandscapeEntityRegularSmallSize");
			oControl.containerWidth = 31.5;
		}else if (renderSize == sap.landvisz.EntityCSSSize.Regular) {
			oRm.addClass("sapLandviszLandscapeEntityRegularSize");
			oControl.containerWidth = 36.5;
		}else if (renderSize == sap.landvisz.EntityCSSSize.Medium) {
			oRm.addClass("sapLandviszLandscapeEntityMediumSize");
			oControl.containerWidth = 41;
		}else if (renderSize == sap.landvisz.EntityCSSSize.Large) {
			oRm.addClass("sapLandviszLandscapeEntityLargeSize");
			oControl.containerWidth = 62;
		}
	} else if (oControl.entityMaximized == true) {
		oRm.addClass("sapLandviszLandscapeEntityMaximizedSize");
		oRm.write(" style='");
		var entityWidth;
		var entityHeight;
		if (oControl.sViewWidth != 0) {
			entityWidth = oControl.sViewWidth - 30;
			oRm.write("width:" + entityWidth + "px;");
		}
		if (oControl.sViewHeight != 0) {
			entityHeight = oControl.sViewHeight - 32;
			oRm.write("height:" + entityHeight + "px;");
		}
		oRm.write("position:absolute;");
		oRm.write("'");
	}

	oRm.writeClasses();
	oRm.write(">");
	if(oControl.getType()==sap.landvisz.LandscapeObject.Track){
	this._renderTrack(oRm, oControl);
	}else{
	this._renderIdentificationBar(oRm, oControl);
	this._renderDataEntityRegion(oRm, oControl);
	}
	oRm.renderControl(oControl.oHLayout);

};

sap.landvisz.LandscapeEntityRenderer._renderTrack = function(oRm,oControl) {


				oRm.write("<div");
				oRm.addClass("trackEntity");
				oRm.writeClasses();
				oRm.write(">");
				
				oRm.write("<div");
				oRm.addClass("trackLogo");
				oRm.writeClasses();
				oRm.write(">");
				oRm.write("</div>");
				
				oRm.write("<div");
				oRm.addClass("trackName");
				oRm.writeClasses();
				oRm.write(">"+oControl.getSystemName());
				oRm.write("</div>");
				
				oRm.write("<div");
				oRm.addClass("trackFooter");
				oRm.writeClasses();
				oRm.write("> "+oControl.getTrackSystemCount());
				oRm.write("</div>");
				
				oRm.renderControl(oControl.infoIcon);
				
				oRm.write("</div>");

};

sap.landvisz.LandscapeEntityRenderer._renderIdentificationBar = function(oRm,
		oControl) {

	var identificationHdrID = oControl.getId();

	if (oControl.entityMaximized == true) {
		oControl.oIdnBar.entityMaximized = oControl.entityMaximized;
		oControl.oIdnBar.maxHeight = oControl.sViewHeight - 32;
	} else
		oControl.oIdnBar.entityMaximized = false;
	oControl.oIdnBar.setText(oControl.getSystemName());
	oControl.oIdnBar.setTooltip(oControl.getTooltip());
	oControl.oIdnBar.setType(oControl.getType());
	oControl.oIdnBar.setQualifierText(oControl.getQualifierText());
	oControl.oIdnBar.setQualifierTooltip(oControl.getQualifierTooltip());
	oControl.oIdnBar.setQualifierType(oControl.getQualifierType());
	oControl.oIdnBar.setRenderingSize(oControl.getRenderingSize());
	oControl.oIdnBar.setDefaultState(oControl.getDefaultState());
	oControl.oIdnBar.setDescription(oControl.getDescription());
	oControl.oIdnBar.setComponentType(oControl.getComponentType());
	oControl.oVLayout.addContent(oControl.oIdnBar);
	oControl.oHLayout.addContent(oControl.oVLayout);
};

//Identification region rendering
sap.landvisz.LandscapeEntityRenderer._renderDataEntityRegion = function(oRm,oControl) {

	oControl.propertyHeaders = oControl.getDataContainers();

	if (oControl.propertyHeaders.length > 0)
		// change for tab
		this._renderTabContainers(oRm, oControl)
		else if (!oControl.propertyHeaders || oControl.propertyHeaders.length < 1) {
			oControl.propertyHeaders = oControl.getContainers();
			if (oControl.propertyHeaders && oControl.propertyHeaders.length > 0)
				this._renderContainerData(oRm, oControl);
			else if (oControl.propertyHeaders)
				this._renderSingleContainerData(oRm, oControl);
		}

	oControl.oVLayoutContainer.addContent(oControl.oVLayoutProperties);
	if(oControl.display == "block"){
		oControl.oVLayoutContainer.addStyleClass("sapLandviszDisplayBlock");
		oControl.oVLayoutContainer.removeStyleClass("sapLandviszDisplayNone");
	}
	else{
		oControl.oVLayoutContainer.addStyleClass("sapLandviszDisplayNone");
		oControl.oVLayoutContainer.removeStyleClass("sapLandviszDisplayBlock");
	}
	oControl.oHLayout.addContent(oControl.oVLayoutContainer);
};

//finding properties.
sap.landvisz.LandscapeEntityRenderer._findContainerProperties = function(key,
		oControl, oRm) {

	for ( var i = 0; i < oControl.propertyHeaders.length; i++) {

		if (key == oControl.propertyHeaders[i].header) {
			oControl.propertyHeaders[i].selected = true;
			oControl.selectedIndex = i;
			this._renderDataContainerProperties(oRm, oControl,
					oControl.propertyHeaders[i].properties,"");
		} else
			oControl.propertyHeaders[i].selected = false;

	}
};

//finding Aggregated properties.
sap.landvisz.LandscapeEntityRenderer._findContainerAggregationProperties = function(
		key, oControl, oRm) {

	for ( var i = 0; i < oControl.propertyHeaders.length; i++) {

		if (key == oControl.propertyHeaders[i].getHeader()) {
			oControl.propertyHeaders[i].setSelected(true);
			oControl.selectedIndex = i;
		} else
			oControl.propertyHeaders[i].setSelected(false);

	}
};

sap.landvisz.LandscapeEntityRenderer._renderSingleContainerData = function(oRm,
		oControl) {
	var container = oControl.getContainers();
	var continerId = oControl.getId();
	oControl.dataContainer = new sap.landvisz.internal.DataContainer(continerId
			+ "-CLVEntityDataContainer");
	oControl.dataContainer.setHeader(container.header);
	oControl.dataContainer.setSelected(container.selected);
	var properties = container.properties;
	this._setPropertiesAggregation(oRm, oControl, properties, container.header);

	oControl.addAggregation("dataContainers", oControl.dataContainer, false);

	oControl.propertyHeaders = oControl.getDataContainers();
	this._renderContainerAggregation(oRm, oControl);
};

sap.landvisz.LandscapeEntityRenderer._setPropertiesAggregation = function(oRm,
		oControl, properties, header) {

	var id;
	var continerId = oControl.getId();
	if (properties && properties.length && properties.length > 0) {

		for ( var j = 0; j < properties.length; j++) {
			id = continerId + j + header + "-CLVRowField";
			oControl.dataContainer.addAggregation("properties", properties[j],
					false);
		}

	} else if (properties instanceof sap.ui.core.Control) {

		id = continerId + header + "-CLVRowField";
		oControl.dataContainer.addAggregation("properties", properties, false);
	}
};



//render the aggregation for data containers.

sap.landvisz.LandscapeEntityRenderer._renderContainerData = function(oRm,
		oControl) {

	var continerId = oControl.getId();
	oControl.isAggregated = false;
	this._setContainerRenderingSize(oControl);

	var selected;
	var container;
	var properties;
	var id;
	for ( var i = 0; i < oControl.propertyHeaders.length; i++) {

		oControl.dataContainer = new sap.landvisz.internal.DataContainer(
				continerId + i + "-CLVEntityDataContainer");
		container = oControl.propertyHeaders[i];
		oControl.dataContainer.setHeader(container.header);
		oControl.dataContainer.setSelected(container.selected);
		properties = container.properties;

		this._setPropertiesAggregation(oRm, oControl, properties,
				container.header);

		oControl
		.addAggregation("dataContainers", oControl.dataContainer, false);

	}
	oControl.propertyHeaders = oControl.getDataContainers();
	this._renderTabContainers(oRm, oControl);

};

//render the aggregation for data containers.

sap.landvisz.LandscapeEntityRenderer._makeOtherContainerUnselected = function(
		oControl, index) {

	for ( var i = 0; i < index; i++)
		oControl.propertyHeaders[i].setSelected(false);
};

sap.landvisz.LandscapeEntityRenderer._renderTabContainers = function(oRm,
		oControl) {

	var continerId = oControl.getId();
	var selected;
	oControl.isAggregated = true;
	var selectedHeader;
	this._setContainerRenderingSize(oControl);

	for ( var i = 0; i < oControl.propertyHeaders.length; i++) {

		oControl.dataContainer = oControl.propertyHeaders[i];
		oControl.dataContainer.setRenderingSize(oControl.getRenderingSize());
		oControl.dataContainer.setType(oControl.getType());
		if (i == 0)
			oControl.dataContainer.setSelected(true);
		selected = oControl.dataContainer.getSelected();
		if (selected == true) {
			selectedHeader = oControl.dataContainer;
			oControl.selectedIndex = i;
			this._makeOtherContainerUnselected(oControl, i);

		}
		if (oControl.showMiniNavigation == true
				&& oControl.propertyHeaders.length > 1) {
			this._createMiniNavigation(oRm, oControl, oControl.dataContainer
					.getHeader(), oControl.dataContainer.getSelected());
			if (i + 1 == oControl.propertyHeaders.length) {
				oControl.oHLayoutMiniNavigation
				.addStyleClass("sapLandviszMiniNavigationVisible");
				oControl.oHLayoutMiniNavigation
				.removeStyleClass("sapLandviszMiniNavigationHidden");
			}
		} else {
			oControl.oHLayoutMiniNavigation
			.addStyleClass("sapLandviszMiniNavigationHidden");
			oControl.oHLayoutMiniNavigation
			.removeStyleClass("sapLandviszMiniNavigationVisible");
		}
		oControl.oVLayoutContainer.addContent(oControl.oHLayoutMiniNavigation);

		oControl.oHeadersLayout.addContent(oControl.dataContainer);
		var that = this;
		if (oControl.dataContainer.hasChangeEvent == false) {
			oControl.dataContainer.attachEvent("itemsChanged", function(event) {
				oControl.oVLayoutProperties.removeAllContent();
				var key = event.oSource.getHeader();
				that._findContainerAggregationProperties(key, oControl, oRm);
				that._selectMiniNavigationButton(oControl, oRm, key);
				oControl.containerEvent = true;
				oControl.invalidate();
			}, this);

		}
	}
	oControl.dataContainer.hasChangeEvent = true;

	oControl.oHeadersLayout.addContent(oControl.previousIcon);
	oControl.oHeadersLayout.addContent(oControl.nextIcon);
	if (oControl.containerEvent == false)
		this._setVisibleTabs(oRm, oControl);

	this._enableNextAndPrevious(oRm, oControl, oControl.selectedIndex);

	oControl.oVLayoutContainer.addContent(oControl.oHeadersLayout);
	oControl.oSingleHeaderLabel.setText(selectedHeader.getHeader());
	oControl.oSingleHeaderLabel.setTooltip(selectedHeader.getHeader());
	oControl.oSingleHeaderLabel
	.addStyleClass("sapLandviszSingleLabelHeaderWidth");
	oControl.oSingleHeaderLayout.addContent(oControl.oSingleHeaderLabel);

	oControl.oVLayoutContainer.addContent(oControl.oSingleHeaderLayout);

	if (oControl.expVisible == false
			&& oControl.oHeadersLayout.getContent().length > 3) {
		oControl.oHeadersLayout.removeStyleClass("sapLandviszDisplayNone");
		oControl.oSingleHeaderLayout.addStyleClass("sapLandviszDisplayNone");
		oControl.oSingleHeaderLayout
		.removeStyleClass("sapLandviszDisplayBlock");
		oControl.oVLayoutProperties
		.removeStyleClass("sapLandviszRegularSizesPropertySectionSmv");
	} else {
		if(oControl.expVisible == true)
			oControl.oSingleHeaderLayout.addStyleClass("singleHeaderExplodeView");
		oControl.oSingleHeaderLayout.addStyleClass("singleHeader");
		oControl.oHeadersLayout.addStyleClass("sapLandviszDisplayNone");
		oControl.oHeadersLayout.removeStyleClass("sapLandviszDisplayBlock");
		oControl.oSingleHeaderLayout.addStyleClass("sapLandviszDisplayBlock");
		oControl.oSingleHeaderLayout.removeStyleClass("sapLandviszDisplayNone");
		if(oControl.getRenderingSize() ==  sap.landvisz.EntityCSSSize.Small)
			oControl.oVLayoutProperties
			.addStyleClass("sapLandviszSmallSizesPropertySectionSmv");
		else if(oControl.getRenderingSize() ==  sap.landvisz.EntityCSSSize.Regular)
			oControl.oVLayoutProperties
			.addStyleClass("sapLandviszRegularSizesPropertySectionSmv");
		else if(oControl.getRenderingSize() ==  sap.landvisz.EntityCSSSize.RegularSmall)
			oControl.oVLayoutProperties
			.addStyleClass("sapLandviszRegularSmallSizesPropertySectionSmv"); 
		if(oControl.getType() == sap.landvisz.LandscapeObject.TechnicalSystem)
			oControl.oSingleHeaderLayout.addStyleClass("sapLandviszTechnicalSystem");
		else if(oControl.getType() == sap.landvisz.LandscapeObject.ProductSystem)
			oControl.oSingleHeaderLayout.addStyleClass("sapLandviszProductSystem");
		else if(oControl.getType() == sap.landvisz.LandscapeObject.SapComponent)
			oControl.oSingleHeaderLayout.addStyleClass("sapLandviszSapComponent");	                 
	}
	if(oControl.expVisible == false && oControl.getRenderingSize() ==  sap.landvisz.EntityCSSSize.RegularSmall){
		oControl.oVLayoutProperties
		.removeStyleClass("sapLandviszRegularSizesPropertySectionSmv");
	}

	if(oControl.explodeViewClosed == true && oControl.getRenderingSize() ==  sap.landvisz.EntityCSSSize.RegularSmall && oControl.oHeadersLayout.getContent().length > 3){
		oControl.oVLayoutProperties
		.removeStyleClass("sapLandviszRegularSmallSizesPropertySectionSmv");
		oControl.oVLayoutProperties
		.addStyleClass("sapLandviszRegularSmallSizesPropertySection");
	}
	if(oControl.explodeViewClosed == true && oControl.getRenderingSize() ==  sap.landvisz.EntityCSSSize.Small && oControl.oHeadersLayout.getContent().length > 3){
		oControl.oVLayoutProperties
		.removeStyleClass("sapLandviszSmallSizesPropertySectionSmv");
		oControl.oVLayoutProperties
		.addStyleClass("sapLandviszSmallSizesPropertySection");
	}
	if(oControl.expVisible == true && oControl.getRenderingSize() ==  sap.landvisz.EntityCSSSize.RegularSmall){
		oControl.oVLayoutProperties
		.addStyleClass("sapLandviszRegularSmallSizesPropertySectionSmv");
	}

	var that = this;

	var miniNavigations = oControl.oHLayoutMiniNavigation.getContent();
	if (miniNavigations.length > 0) {

		var tabContent = oControl.oHeadersLayout.getContent();

		for ( var i = 0; i < tabContent.length - 2; i++) {
			if (tabContent[i].inDisplay == true
					&& tabContent[i].getSelected() == true)
				miniNavigations[i].setSelected(true);
			else if (tabContent[i].inDisplay == true)
				miniNavigations[i].inDisplay = true;
			else
				miniNavigations[i].inDisplay = false;
		}
		miniNavigations[oControl.selectedIndex].setSelected(true);
	}

	this._renderDataContainerProperties(oRm, oControl, selectedHeader
			.getProperties(), selectedHeader.getHeader());

};

sap.landvisz.LandscapeEntityRenderer._setVisibleTabs = function(oRm, oControl) {

	var renderSize = oControl.getRenderingSize();
	var showAllTab = false;
	if (oControl.entityMaximized != true) {
		if (renderSize == sap.landvisz.EntityCSSSize.Small) {
			if (oControl.propertyHeaders.length > 1)
				oControl.visibleTabCount = 1;
			else
				showAllTab = true;
		} 

		else if (renderSize == sap.landvisz.EntityCSSSize.RegularSmall) {
			if (oControl.propertyHeaders.length > 2)
				oControl.visibleTabCount = 2;
			else
				showAllTab = true;
		}	

		else if (renderSize == sap.landvisz.EntityCSSSize.Regular) {
			if (oControl.propertyHeaders.length > 2)
				oControl.visibleTabCount = 2;
			else
				showAllTab = true;
		}

		else if (renderSize == sap.landvisz.EntityCSSSize.Medium) {
			if (oControl.propertyHeaders.length > 2)
				oControl.visibleTabCount = 2;
			else
				showAllTab = true;
		} else if (renderSize == sap.landvisz.EntityCSSSize.Large) {
			if (oControl.propertyHeaders.length > 4)
				oControl.visibleTabCount = 4;
			else
				showAllTab = true;
		}
	} else if (oControl.entityMaximized == true) {
		var countCalc = Math.floor(oControl.containerWidth / 148);
		if (oControl.propertyHeaders.length > countCalc)
			oControl.visibleTabCount = countCalc;
		else
			showAllTab = true;
	}

	var tabs = oControl.oHeadersLayout.getContent();
	if (showAllTab) {

		var tabWidth = oControl.containerWidth / (tabs.length - 2);
		if (oControl.entityMaximized != true)
			tabWidth = (tabWidth * 12);
		tabWidth = Math.round(tabWidth) - 2;
		for ( var i = 0; i < tabs.length; i++) {

			if (i > tabs.length - 3) {
				// tabs[i].addStyleClass("sapLandviszDisplayNone");
				// tabs[i].removeStyleClass("sapLandviszDisplayBlock");
				tabs[i].inDisplay = false;
			} else {
				tabs[i].width = tabWidth + "px";
				// tabs[i].addStyleClass("sapLandviszDisplayBlock");
				// tabs[i].removeStyleClass("sapLandviszDisplayNone");
				tabs[i].inDisplay = true;
			}
		}

	} else {

		var selectedIndex;
		var visibleCount;
		var tabWidth;
		var availableCounts = 0;
		var selected;

		if (oControl.visibleTabCount < oControl.propertyHeaders.length) {
			visibleCount = oControl.visibleTabCount;
			if (oControl.entityMaximized != true)
				tabWidth = oControl.containerWidth * 12;
			else 
				tabWidth = oControl.containerWidth;
			tabWidth = tabWidth - 46;
			tabWidth = Math.round((tabWidth / oControl.visibleTabCount) - 2);

		} else
			visibleCount = oControl.propertyHeaders.length;

		if (oControl.previousClicked == true) {

			for ( var i = 0; i < tabs.length; i++) {
				if (i > tabs.length - 3) {
					// tabs[i].addStyleClass("sapLandviszDisplayBlock");
					// tabs[i].removeStyleClass("sapLandviszDisplayNone");
					tabs[i].inDisplay = true;
				} else {
					selected = tabs[i].getSelected();
					if (selected == true) {
						availableCounts = i - 1;
						selectedIndex = i;
					} else {
						// tabs[i].addStyleClass("sapLandviszDisplayNone");
						// tabs[i].removeStyleClass("sapLandviszDisplayBlock");
						tabs[i].inDisplay = false;
					}
					tabs[i].width = tabWidth + "px";
				}
			}

			visibleCount = oControl.visibleTabCount;

			if (availableCounts >= 0) {
				for ( var k = availableCounts; k >= 0; k--) {
					tabs[k].inDisplay = true;
					visibleCount--
				}
			}

			for ( var l = 0; l < visibleCount; l++) {
				tabs[l + selectedIndex].inDisplay = true;
			}

		}

		else {

			for ( var i = 0; i < tabs.length; i++) {
				if (i > tabs.length - 3) {
					// tabs[i].addStyleClass("sapLandviszDisplayBlock");
					// tabs[i].removeStyleClass("sapLandviszDisplayNone");
					tabs[i].inDisplay = true;
				} else {
					selected = tabs[i].getSelected();
					if (selected == true) {
						availableCounts = tabs.length - 3 - i;
						selectedIndex = i;
					} else {
						// tabs[i].addStyleClass("sapLandviszDisplayNone");
						// tabs[i].removeStyleClass("sapLandviszDisplayBlock");
						tabs[i].inDisplay = false;
					}
					tabs[i].width = tabWidth + "px";
				}
			}

			if (availableCounts >= visibleCount) {

				for ( var k = 0; k < visibleCount; k++) {
					// tabs[selectedIndex + k]
					// .addStyleClass("sapLandviszDisplayBlock");
					// tabs[selectedIndex + k]
					// .removeStyleClass("sapLandviszDisplayNone");
					tabs[selectedIndex + k].inDisplay = true;
				}

			} else {
				for ( var j = 0; j <= availableCounts; j++) {
					// tabs[selectedIndex + j]
					// .addStyleClass("sapLandviszDisplayBlock");
					// tabs[selectedIndex + j]
					// .removeStyleClass("sapLandviszDisplayNone");
					visibleCount--;
					tabs[selectedIndex + j].inDisplay = true;
				}
				for ( var k = 0; k <= visibleCount; k++) {
					// tabs[selectedIndex - k]
					// .addStyleClass("sapLandviszDisplayBlock");
					// tabs[selectedIndex - k]
					// .removeStyleClass("sapLandviszDisplayNone");
					tabs[selectedIndex - k].inDisplay = true;
				}
			}
		}
	}
};

sap.landvisz.LandscapeEntityRenderer._enableNextAndPrevious = function(oRm,
		oControl, selectedIndex) {

	var folderPath = "16x16/";
	var previousSrc;
	var nextSrc;

	var renderSize = oControl.getRenderingSize();
	var showAllTab = false;
	if (renderSize == sap.landvisz.EntityCSSSize.Small) {
		if (oControl.propertyHeaders.length > 1)
			oControl.visibleTabCount = 1;
		else
			showAllTab = true;
	}

	else if (renderSize == sap.landvisz.EntityCSSSize.RegularSmall) {
		if (oControl.propertyHeaders.length > 2)
			oControl.visibleTabCount = 2;
		else
			showAllTab = true;
	}

	else if (renderSize == sap.landvisz.EntityCSSSize.Regular) {
		if (oControl.propertyHeaders.length > 2)
			oControl.visibleTabCount = 2;
		else
			showAllTab = true;
	}

	else if (renderSize == sap.landvisz.EntityCSSSize.Medium) {
		if (oControl.propertyHeaders.length > 2)
			oControl.visibleTabCount = 2;
		else
			showAllTab = true;
	} else if (renderSize == sap.landvisz.EntityCSSSize.Large) {
		if (oControl.propertyHeaders.length > 4)
			oControl.visibleTabCount = 4;
		else
			showAllTab = true;
	}

	var enablePrevoius = false;
	var tabs = oControl.oHeadersLayout.getContent();

	if (selectedIndex > 0) {
		for ( var i = 0; i < selectedIndex; i++) {

			if (tabs[i].inDisplay == false) {
				enablePrevoius = true;
				break;
			}
		}

	}

	if (enablePrevoius == true)
		previousSrc = oControl._imgResourcePath + folderPath
		+ "leftnav_enable_dark.png";
	else
		previousSrc = oControl._imgResourcePath + folderPath
		+ "leftnav_disable.png";

	var enableNext = false;

	if (selectedIndex < oControl.propertyHeaders.length) {
		for ( var i = oControl.propertyHeaders.length - 1; i > selectedIndex; i--) {

			if (tabs[i].inDisplay == false) {
				enableNext = true;
				break;
			}
		}

	}

	if (enableNext == true)
		nextSrc = oControl._imgResourcePath + folderPath
		+ "rightnav_enable_dark.png";
	else
		nextSrc = oControl._imgResourcePath + folderPath
		+ "rightnav_disable.png";

	oControl.nextIcon.addStyleClass("sapLandviszLandscapeEntityNavIcon");
	oControl.previousIcon.addStyleClass("sapLandviszLandscapeEntityNavIcon");
	oControl.nextIcon.setTooltip(oControl.NEXT);
	oControl.previousIcon.setTooltip(oControl.PREVIOUS);
	if (renderSize == sap.landvisz.EntityCSSSize.Small) {
		oControl.previousIcon.setHeight("14px");
		oControl.nextIcon.setHeight("14px");
	} else if (renderSize == sap.landvisz.EntityCSSSize.RegularSmall) {
		oControl.previousIcon.setHeight("16px");
		oControl.nextIcon.setHeight("16px");
	} else if (renderSize == sap.landvisz.EntityCSSSize.Regular) {
		oControl.previousIcon.setHeight("16px");
		oControl.nextIcon.setHeight("16px");
	} else if (renderSize == sap.landvisz.EntityCSSSize.Medium) {
		oControl.previousIcon.setHeight("16px");
		oControl.nextIcon.setHeight("16px");
	} else if (renderSize == sap.landvisz.EntityCSSSize.Large) {
		oControl.previousIcon.setHeight("26px");
		oControl.nextIcon.setHeight("26px");
	}

	oControl.nextIcon.setSrc(nextSrc);
	oControl.previousIcon.setSrc(previousSrc);
	oControl.nextEnabled = enableNext;
	oControl.previousEnable = enablePrevoius;
	var that = this;

	if (oControl.hasNavigationEvent == false) {

		oControl.nextIcon.attachPress(function(oEvent) {

			if (oControl.nextEnabled == true) {
				oControl.nextClicked = true;
				var selectIndex;
				for ( var m = 0; m < tabs.length - 2; m++) {

					if (tabs[m].inDisplay == true) {
						selectIndex = m + oControl.visibleTabCount;
						break;
					}
				}

				that._findContainerAggregationProperties(tabs[selectIndex]
				.getHeader(), oControl, oRm);
				that._selectMiniNavigationButton(oControl, oRm,
						tabs[selectIndex].getHeader());
				oControl.containerEvent = false;
				oControl.invalidate();
			}

		});

		oControl.previousIcon.attachPress(function(oEvent) {

			if (oControl.previousEnable == true) {

				var selectIndex;
				oControl.previousClicked = true;
				for ( var l = 0; l < tabs.length - 2; l++) {

					if (tabs[l].inDisplay == true) {
						selectIndex = l - 1;
						break;
					}
				}

				if (selectIndex < 0)
					selectIndex = 0;

				that._findContainerAggregationProperties(tabs[selectIndex]
				.getHeader(), oControl, oRm);
				that._selectMiniNavigationButton(oControl, oRm,
						tabs[selectIndex].getHeader());
				oControl.containerEvent = false;
				oControl.invalidate();
			}
		});

		oControl.hasNavigationEvent = true;

	}

};

sap.landvisz.LandscapeEntityRenderer._renderContainerAggregation = function(
		oRm, oControl) {

	var continerId = oControl.getId();
	var selected;
	oControl.isAggregated = true;
	var selectedHeader;
	this._setContainerRenderingSize(oControl);
	for ( var i = 0; i < oControl.propertyHeaders.length; i++) {

		oControl.dataContainer = oControl.propertyHeaders[i];
		if (i == 0)
			oControl.dataContainer.setSelected(true);
		selected = oControl.dataContainer.getSelected();

		if (selected == true) {
			selectedHeader = oControl.dataContainer;
			oControl.selectedIndex = i;
		}
		if (oControl.showMiniNavigation == true) {
			this._createMiniNavigation(oRm, oControl, oControl.dataContainer
					.getHeader(), oControl.dataContainer.getSelected());
			if (i + 1 == oControl.propertyHeaders.length) {
				oControl.oHLayoutMiniNavigation
				.addStyleClass("sapLandviszMiniNavigationVisible");
				oControl.oHLayoutMiniNavigation
				.removeStyleClass("sapLandviszMiniNavigationHidden");
			}
		} else {
			oControl.oHLayoutMiniNavigation
			.addStyleClass("sapLandviszMiniNavigationHidden");
			oControl.oHLayoutMiniNavigation
			.removeStyleClass("sapLandviszMiniNavigationVisible");
		}
		oControl.oVLayoutContainer.addContent(oControl.oHLayoutMiniNavigation);

		this._initilizeDataContainer(oRm, oControl, i);

	}

	var that = this;
	this._renderDataContainerProperties(oRm, oControl, selectedHeader
			.getProperties(), selectedHeader.getHeader());

};

sap.landvisz.LandscapeEntityRenderer._setContainerRenderingSize = function(
		oControl) {

	var renderSize = oControl.getRenderingSize();
	if (oControl.entityMaximized == true)
		oControl.containerWidth = oControl.sViewWidth - 30 - (8.4 * 12);
	else {
		if (renderSize == sap.landvisz.EntityCSSSize.Small)
			oControl.containerWidth = 21 - 6.1;
		else if (renderSize == sap.landvisz.EntityCSSSize.RegularSmall)
			oControl.containerWidth = 31.5 - 7;
		else if (renderSize == sap.landvisz.EntityCSSSize.Regular)
			oControl.containerWidth = 36.5 - 8.33;

		else if (renderSize == sap.landvisz.EntityCSSSize.Medium) {
			oControl.containerWidth = 41 - 8.4;
		}
		else if (renderSize == sap.landvisz.EntityCSSSize.Large) {
			oControl.containerWidth = 62 - 8.4;
		}
	}
};

sap.landvisz.LandscapeEntityRenderer._initilizeDataContainer = function(oRm,
		oControl, index) {

	// select the first header
	oControl.dataContainer.lastItem = false;
	if (index + 1 == oControl.propertyHeaders.length)
		oControl.dataContainer.lastItem = true;

	oControl.dataContainer.oVLayoutContainer = oControl.oVLayoutContainer;
	oRm.renderControl(oControl.dataContainer);

};

sap.landvisz.LandscapeEntityRenderer._createMiniNavigation = function(oRm,
		oControl, header, selected) {

	var miniNavigation = oControl.oHLayoutMiniNavigation.getContent();
	var hasNavigation = false;
	var minusLength = 0;
	if (oControl.getActionBar() && oControl.getActionBar().length > 0)
		minusLength = 1;
	if (miniNavigation.length > 0) {
		for ( var i = 0; i < miniNavigation.length - minusLength; i++) {
			if (header == miniNavigation[i].getHeaderTooltip()) {
				oControl.headerBtn = miniNavigation[i];
				hasNavigation = true;
			}
		}
	}

	var continerId = oControl.getId();
	if (hasNavigation == false)
		oControl.headerBtn = new sap.landvisz.internal.HeaderList();
	oControl.headerBtn.setHeaderTooltip(header);
	oControl.headerBtn.setSelected(false);
	oControl.headerBtn.setType(oControl.getType());
	var headerWidth = oControl.containerWidth / oControl.propertyHeaders.length;
	if (oControl.entityMaximized != true)
		headerWidth = headerWidth * 12;
	oControl.headerBtn.headerWidth = Math.round(headerWidth) - 2.5;

	var value;
	var that = this;
	if (hasNavigation == false)
		oControl.headerBtn.attachPress(function(oEvent) {
			value = oEvent.oSource.getHeaderTooltip();
			that._selectMiniNavigationButton(oControl, oRm, value);
			that._findContainerAggregationProperties(value, oControl, oRm);
			oControl.containerEvent = false;
			oControl.invalidate();

		});
	oControl.headerBtn.removeStyleClass("sapLandviszMiniNavigationSelected");
	oControl.headerBtn.removeStyleClass("sapLandviszMiniNavigationInDisplay");
	oControl.headerBtn.removeStyleClass("sapLandviszMiniNavigationNormal");
	oControl.oHLayoutMiniNavigation.addContent(oControl.headerBtn);
};

sap.landvisz.LandscapeEntityRenderer._selectMiniNavigationButton = function(
		oControl, oRm, value) {

	this._setContainerRenderingSize(oControl);
	var btnWidth = oControl.containerWidth / oControl.propertyHeaders.length;
	var headerItems = oControl.oHLayoutMiniNavigation.getContent();

	for ( var i = 0; i < headerItems.length; i++) {

		var headerItem = headerItems[i];
		if (headerItem.getHeaderTooltip() == value) {

			headerItem.setSelected(true);
			headerItem.setType(oControl.getType());
//			headerItem.addStyleClass("sapLandviszMiniNavigationSelected");
//			headerItem.removeStyleClass("sapLandviszMiniNavigationNormal");
		} else {

			headerItem.setSelected(false);
//			headerItem.addStyleClass("sapLandviszMiniNavigationNormal");
//			headerItem.removeStyleClass("sapLandviszMiniNavigationSelected");

		}
	}

};

sap.landvisz.LandscapeEntityRenderer._selectNavigationHeader = function(
		oControl, oRm, value) {

	var items = oControl.oNavBar.getItems();
	for ( var i = 0; i < items.length; i++) {
		if (items[i].getKey() == value) {
			oControl.oNavBar.setSelectedItem(items[i]);
			oControl.oVLayoutProperties.removeAllContent();
			if (oControl.isAggregated)
				this._findContainerAggregationProperties(items[i].getKey(),
						oControl, oRm);
			else
				this._findContainerProperties(items[i].getKey(), oControl, oRm);
		}
	}
};

//Render the property set available in a header

sap.landvisz.LandscapeEntityRenderer._renderDataContainerProperties = function(
		oRm, oControl, oProperties, header) {

	var continerId = oControl.getId();
	var id;
	if (oProperties && oProperties.length && oProperties.length > 0) {

		for ( var i = 0; i < oProperties.length; i++) {
			this._renderContainerProperty(oControl, oProperties[i], id)
		}

	} else if (oProperties instanceof sap.ui.core.Control) {

		this._renderContainerProperty(oControl, oProperties, id)
	}

};

//Render the control for property
sap.landvisz.LandscapeEntityRenderer._renderContainerProperty = function(
		oControl, oProperty, id) {

	if (oProperty instanceof sap.landvisz.internal.LinearRowField
			|| oProperty instanceof sap.landvisz.internal.NestedRowField
			|| oProperty instanceof sap.landvisz.internal.TreeField
			|| oProperty instanceof sap.landvisz.LongTextField)
		oProperty.setRenderingSize(oControl.getRenderingSize());
	oProperty.totalWidth = oControl.containerWidth;
	oProperty.entityMaximized = oControl.entityMaximized;
//	oProperty.sId = id;
	oControl.oVLayoutProperties.addContent(oProperty);
};

sap.landvisz.LandscapeEntityRenderer._renderEntityAction = function(oRm,
		oControl) {

	for ( var i = 0; i < oControl.entityActionArray.length; i++) {
		oControl.entityAction = oControl.entityActionArray[i];
		oControl.entityAction.entityMaximized = oControl.entityMaximized;

		if (oControl.restore == true
				&& oControl.entityAction.getActionTooltip() == oControl.MAXIMIZE_TEXT) {
			oControl.oHLayoutAllAction.removeContent(oControl.entityAction);
			continue;
		}
		if (oControl.restore == false
				&& oControl.entityAction.getActionTooltip() == oControl.RESTORE_TEXT) {
			oControl.oHLayoutAllAction.removeContent(oControl.entityAction);
			continue;
		}

		if (oControl.expVisible == true
				&& oControl.entityAction.getActionTooltip() == oControl.SHOW_ALL_TEXT) {
			oControl.oHLayoutAllAction.removeContent(oControl.entityAction);
			continue;
		}
		if (oControl.expVisible == false
				&& oControl.entityAction.getActionTooltip() == oControl.COLLAPSE_TEXT) {
			oControl.oHLayoutAllAction.removeContent(oControl.entityAction);
			continue;
		}
		if (oControl.expVisible == true
				&& oControl.entityAction.getActionTooltip() == oControl.MAXIMIZE_TEXT) {
			oControl.oHLayoutAllAction.removeContent(oControl.entityAction);
			continue;
		}

		if (oControl.entityMaximized == true
				&& oControl.entityAction.getActionTooltip() == oControl.SHOW_ALL_TEXT) {
			oControl.oHLayoutAllAction.removeContent(oControl.entityAction);
			continue;
		}

		if (oControl.entityAction.getActionTooltip() == oControl.MAXIMIZE_TEXT)
			oControl.entityAction.setIconSrc(oControl._imgResourcePath
					+ oControl._imgFolderPath + "maximize_enable_dark.png");
		if (oControl.entityAction.getActionTooltip() == oControl.RESTORE_TEXT)
			oControl.entityAction.setIconSrc(oControl._imgResourcePath
					+ oControl._imgFolderPath + "restore_enable_dark.png");
		if (oControl.entityAction.getActionTooltip() == oControl.SHOW_ALL_TEXT)
			oControl.entityAction.setIconSrc(oControl._imgResourcePath
					+ oControl._imgFolderPath + "openshowall_enable_dark.png");
		if (oControl.entityAction.getActionTooltip() == oControl.COLLAPSE_TEXT)
			oControl.entityAction.setIconSrc(oControl._imgResourcePath
					+ oControl._imgFolderPath + "closeshowall_enable_dark.png");
		var renderSize = oControl.getRenderingSize();
		oControl.entityAction.setRenderingSize(renderSize);
		oControl.oHLayoutAllAction.addContent(oControl.entityAction);

		var that = this;
		if (oControl.hasEntityEvent == false) {
			oControl.entityAction.attachPress(function(oEvent) {
				var value = oEvent.oSource;
				if (value.getActionTooltip() == oControl.MAXIMIZE_TEXT) {
					oControl.entityMaximized = true;
					oControl.invalidate();
					oControl.oHLayoutAllAction.removeContent(value);
					oControl.containerEvent = false;
				}
				if (value.getActionTooltip() == oControl.RESTORE_TEXT
						&& oControl.entityMaximized == true) {

					setTimeout(function() {
						oControl.entityMaximized = false;
						oControl.invalidate();
					}, 1000);
				}
				if (value.getActionTooltip() == oControl.RESTORE_TEXT) {
					oControl.entityMaximized = false;
					oControl.oHLayoutAllAction.removeContent(value);
					oControl.containerEvent = false;
				}

				if (value.getActionTooltip() == oControl.SHOW_ALL_TEXT
						&& oControl.entityMaximized == true) {

					oControl.entityMaximized = false;
					oControl.expVisible = true;
					that._renderExplodeView(oRm, oControl);
//					jQuery.sap.byId(oControl.oHLayoutMiniNavigation.getId())
//					.css("display", "none");
					oControl.showMiniNavigation = false;
					setTimeout(function() {
						oControl.entityMaximized = false;
						oControl.invalidate();
					}, 1000);
				}

				if (value.getActionTooltip() == oControl.SHOW_ALL_TEXT) {
					oControl.entityMaximized = false;
					oControl.expVisible = true;
					that._renderExplodeView(oRm, oControl);
//					jQuery.sap.byId(oControl.oHLayoutMiniNavigation.getId())
//					.css("display", "none");
					oControl.showMiniNavigation = false;
					oControl.invalidate();

				}

				if (value.getActionTooltip() == oControl.COLLAPSE_TEXT) {
					oControl.entityMaximized = false;
					oControl.expVisible = false;
//					jQuery.sap.byId(oControl.oHLayoutMiniNavigation.getId())
//					.css("display", "block");
					oControl.showMiniNavigation = true;
					that._resetHeaderData(oRm, oControl);
					that._resetHeaderNavigation(oRm, oControl);
					oControl.nextIcon.setVisible(true);
					oControl.previousIcon.setVisible(true);
					jQuery.sap.byId("SMV").hide(700);
					oControl.invalidate();

				}

			});
			oControl.hasEntityEvent == true;
		}
	}

};

sap.landvisz.LandscapeEntityRenderer._renderExplodeView = function(oRm,
		oControl) {
	this.hideUnselectedHeaders(oRm, oControl);
};

sap.landvisz.LandscapeEntityRenderer.hideUnselectedHeaders = function(oRm,
		oControl) {

	var containers = oControl.getDataContainers();
	for ( var i = 0; i < containers.length; i++) {
		if (i != oControl.selectedIndex) {
			containers[i].visible = false;
		}
	}

	oControl.nextIcon.setVisible(false);
	oControl.previousIcon.setVisible(false);

};

sap.landvisz.LandscapeEntityRenderer._renderUnselectedHeaderPopup = function(
		oRm, oControl) {

	var containers = new Array();
	oRm.write("<div");
	oRm.writeAttributeEscaped("id", "SMV");
	var renderSize = oControl.getRenderingSize();
	if (renderSize == sap.landvisz.EntityCSSSize.RegularSmall)
		oRm.addClass("sapLandviszSMVContainerRegularSmall");
	else if (renderSize == sap.landvisz.EntityCSSSize.Regular)
		oRm.addClass("sapLandviszSMVContainerRegular");
	else if (renderSize == sap.landvisz.EntityCSSSize.Medium)
		oRm.addClass("sapLandviszSMVContainerMedium");
	oRm.writeClasses();

	if (oControl.sViewWidth != 0) 
		oRm.addStyle("width", oControl.sViewWidth - 2 + "px");	
	else if (oControl.getExplodeViewWidth() && oControl.getExplodeViewWidth() != '')
		oRm.addStyle("width", oControl.getExplodeViewWidth());
	if (oControl.sViewHeight != 0) 
		oRm.addStyle("height", "100%");
	else if (oControl.getExplodeViewHeight() && oControl.getExplodeViewHeight() != '')
		oRm.addStyle("height", oControl.getExplodeViewHeight());

	oRm.writeStyles();
	oRm.write(">");

	containers = oControl.getDataContainers();

	var properties;
	var container;
	var property;
	var dialog;
	var that = this;
	var renderSize = oControl.getRenderingSize();
	if (containers.length > 0) {

		for ( var i = 0; i < containers.length; i++) {
			container = containers[i];
			if (i != oControl.selectedIndex) {
				properties = container.getProperties();
				oControl.smvContainer = oControl.dialogArray[i];
				oControl.smvContainer.setRenderingSize(oControl
						.getRenderingSize());
				oControl.smvContainer.setHeader(container.getHeader());
				for ( var j = 0; j < properties.length; j++) {
					property = properties[j];
					oControl.smvContainer.addAggregation("properties",
							property, false);
				}

				oControl.smvContainer.addStyleClass("sapLandviszDisplayNone");
				oRm.renderControl(oControl.smvContainer);

				oControl.smvContainer.attachClosed(function(oEvent) {
					oControl.expVisible = false
					var value = oEvent.oSource;

					var containers = oControl.getDataContainers();
					var backup;
					for ( var i = 0; i < containers.length; i++) {
						backup = value.getProperties();
						var container = containers[i];
						if (container.getHeader() == value.getHeader()) {
							if (backup.length > 0) {
								for ( var j = 0; j < backup.length; j++) {
									container.addAggregation("properties",
											backup[j], false);
								}
							}
						}
					}

					if (that._checkAllPopupClosed(oControl, value)) {
						that._resetHeaderNavigation(oRm, oControl);
						oControl.showMiniNavigation = true;
						oControl.nextIcon.setVisible(true);
						oControl.previousIcon.setVisible(true);
						oControl.invalidate();
					}

				});
			}
		}
	}

	oRm.write("</div>");

};

sap.landvisz.LandscapeEntityRenderer._resetHeaderData = function(oRm, oControl) {

	var container;
	var containers = oControl.getDataContainers();
	var backup;
	for ( var i = 0; i < oControl.dialogArray.length; i++) {
		container = oControl.dialogArray[i];
		backup = container.getProperties();
		if (backup && backup.length && backup.length > 0) {
			for ( var j = 0; j < backup.length; j++) {
				containers[i].addAggregation("properties", backup[j], false);
			}
		}
	}
};

sap.landvisz.LandscapeEntityRenderer._resetHeaderNavigation = function(oRm,
		oControl) {
	var containers = oControl.getDataContainers();
	for ( var i = 0; i < containers.length; i++) {
		if (i != oControl.selectedIndex) {
			containers[i].visible = true;
		}
	}

}

sap.landvisz.LandscapeEntityRenderer._checkAllPopupClosed = function(oControl,
		currentDailog) {

	var dialog;
	for ( var i = 0; i < oControl.dialogArray.length; i++) {
		dialog = oControl.dialogArray[i];
		if (dialog.isOpen() == true && i != oControl.selectedIndex
				&& currentDailog.getHeader() != dialog.getHeader()) {
			oControl.explodeViewClosed = false;
			return false;
		}
	}
	oControl.explodeViewClosed = true;
	return true;

};

sap.landvisz.LandscapeEntityRenderer._renderCustomActionRegion = function(oRm,
		oControl) {

	var continerId = oControl.getId();

	oControl.actions = oControl.getActionBar();
	for ( var i = oControl.actions.length - 1; i >= 0; i--) {
		oControl.action = oControl.actions[i];
		oControl.action.setRenderingSize(oControl.getRenderingSize());
		oControl.action.oActToolBar = oControl.oBtnToolBar;
		oControl.action.systemId = oControl.getSystemId();
		oControl.oHLayoutAction.addContent(oControl.action);
	}
	oControl.oHLayoutAction.addStyleClass("sapLandviszActionLayout");
	var actions = oControl.oHLayoutAction.getContent();

	for ( var j = 0; j < actions.length; j++) {

		actions[j].setRenderingSize(oControl.getRenderingSize());
	}
};

sap.landvisz.LandscapeEntityRenderer._renderOverlayContainer = function(oRm,
		oControl) {

	oControl.oVLayoutOverlay.removeAllContent();
	var renderSize = oControl.getRenderingSize();
	oRm.write("<div");
	oRm.writeClasses();
	oRm.writeAttributeEscaped("id", oControl.getId() + "-innerOverlay");
	oRm.write(" style='");	
	oRm.write("top:74px;");
	if (renderSize == sap.landvisz.EntityCSSSize.RegularSmall) {
		oRm.write("width:24.5em;");
		oRm.write("height:15.88em;");
		oRm.write("left:108px;");
	} 
	if (renderSize == sap.landvisz.EntityCSSSize.Regular) {
		oRm.write("width:28.1em;");
		oRm.write("height:18em;");
		oRm.write("left:124px;");
	} else if (renderSize == sap.landvisz.EntityCSSSize.Medium) {
		oRm.write("width:32.6em;");
		oRm.write("height:21.3em;");
		oRm.write("left:124px;");
	}

	oRm.write("position:absolute;");
	oRm.write("font-size: 12px;");
	oRm.write("border: 1px solid grey;");
	oRm.write("z-index:10;");
	oRm.write("float:left;");
	if (oControl.showOverlay == true)
		oRm.write("display:block;");
	else
		oRm.write("display:none;");
	oRm.write("'");
	oRm.write(">");

	var containers = oControl.getDataContainers();
	var headerContent;
	for ( var i = 0; i < containers.length; i++) {

		if (containers[i].getSelected() == true) {
			headerContent = containers[i].getProperties();
			break;
		}
	}
	
	var row;
	var nestedRow;
	
	if(headerContent){
		for ( var i = 0; i < headerContent.length; i++) {
			if (headerContent[i] instanceof sap.landvisz.internal.LinearRowField) {
				row = new sap.landvisz.internal.LinearRowField();
				row.addStyleClass("overlayRow");
				row.setLabel(headerContent[i].getLabel());
				row.setValue(headerContent[i].getValue());
				row.setRenderingSize(headerContent[i].getRenderingSize());
				row.setIconType(headerContent[i].getIconType());
				row.setIconTitle(headerContent[i].getIconTitle());
				if (oControl.showOverlay == true && oControl.overlayFilter == "")
					row.addStyleClass("sapLandviszDisplayBlock");
				else if (oControl.showOverlay == true
						&& oControl.overlayFilter == headerContent[i]
				.getLinkSource())
					row.addStyleClass("sapLandviszDisplayBlock");
				else
					row.addStyleClass("sapLandviszDisplayNone");
				row.setLinkSource(headerContent[i].getLinkSource());
				row.setRightIconSrc(headerContent[i].getRightIconSrc());
				oControl.oVLayoutOverlay.addContent(row);
			} else if (headerContent[i] instanceof sap.landvisz.internal.NestedRowField) {
				nestedRow = new sap.landvisz.internal.NestedRowField();
				nestedRow.setLabel(headerContent[i].getLabel());
				nestedRow.setRenderingSize(headerContent[i].getRenderingSize());
				nestedRow.setType(headerContent[i].getType());
				nestedRow.setIconTitle(headerContent[i].getIconTitle());
				nestedRow.setLinkSource(headerContent[i].getLinkSource());
				nestedRow.addStyleClass("overlayRow");
				var rows = headerContent[i].getLinearRows();
				var anyRowVisible = false;
				for ( var j = 0; j < rows.length; j++) {
					row = new sap.landvisz.internal.LinearRowField();
					row.setLabel(rows[j].getLabel());
					row.setValue(rows[j].getValue());
					row.setRenderingSize(rows[j].getRenderingSize());
					row.setIconType(rows[j].getIconType());
					row.setIconTitle(rows[j].getIconTitle());
					row.setLinkSource(rows[j].getLinkSource());
					if (oControl.showOverlay == true
							&& oControl.overlayFilter == "") {
						row.addStyleClass("sapLandviszDisplayBlock");
						anyRowVisible = true;
					} else if (oControl.showOverlay == true
							&& oControl.overlayFilter == rows[j].getLinkSource()) {
						row.addStyleClass("sapLandviszDisplayBlock");
						anyRowVisible = true;
					} else
						row.addStyleClass("sapLandviszDisplayNone");
					row.setRightIconSrc(rows[j].getRightIconSrc());
					nestedRow.addAggregation("linearRows", row, false);
				}
				if (anyRowVisible == true)
					nestedRow.addStyleClass("sapLandviszDisplayBlock");
				else
					nestedRow.addStyleClass("sapLandviszDisplayNone");
				oControl.oVLayoutOverlay.addContent(nestedRow);
			}
		}
	}
	
	oControl.oVLayoutOverlay.addStyleClass("sapLandviszVlayoutOverLay");
	oRm.renderControl(oControl.oVLayoutOverlay);
	oRm.write("</div>");
	oRm.write("<div");
	oRm.writeClasses();
	oRm.writeAttributeEscaped("id", oControl.getId() + "-overlay");
	oRm.write(" style='");
	oRm.write("left:0px;");
	oRm.write("top:0px;");
	oRm.write("width:100%;");
	oRm.write("height:100%;");
	oRm.write("position:absolute;");
	oRm.write("background-color:rgb(229, 229, 229);");
	oRm.write("font-size: 12px;");
	oRm.write("z-index:8;");
	oRm.write("cursor:not-allowed;");
	oRm.write("opacity:0.5;");
	oRm.write("float:left;");
	if (oControl.showOverlay == true)
		oRm.write("display:block;");
	else
		oRm.write("display:none;");
	oRm.write("'");
	oRm.write(">");
	oRm.write("</div>");

};

}; // end of sap/landvisz/LandscapeEntityRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.LongTextFieldRenderer') ) {
/*!
 * @copyright 2012-2014 SAP SE. All rights reserved@
 */

///**
// * This file defines behavior for the control,
// */


jQuery.sap.declare("sap.landvisz.LongTextFieldRenderer");

/**
 * @class LongTextRenderer renderer. 
 * @static
 */
sap.landvisz.LongTextFieldRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.landvisz.LongTextFieldRenderer.render = function(oRm, oControl){ 
	 // write the HTML into the render manager

	// write the HTML into the render manager
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.landvisz");

	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapLandviszLongTextSizeCommon");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.RegularSmall)
		oRm.addClass("sapLandviszLongTextRegularSmallSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Regular)
			oRm.addClass("sapLandviszLongTextRegularSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Medium)
			oRm.addClass("sapLandviszLongTextMediumSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Large)
			oRm.addClass("sapLandviszLongTextLargeSize");

		oRm.writeClasses();
		oRm.write(">"); // span element
		var rfText = oControl.getText();
		oControl.oLongText.setWrapping(true);
		oControl.oLongText.setText(rfText);
		oRm.renderControl(oControl.oLongText);
		oRm.write("</div>");
	}
};

}; // end of sap/landvisz/LongTextFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.OptionEntityRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.OptionEntityRenderer");

/**
 * @class ConnectionEntity renderer.
 * @static
 */
sap.landvisz.OptionEntityRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.OptionEntityRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager
	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapLandviszOptionButton");
		oRm.writeClasses();
		if (oControl.left != 0)
			oRm.addStyle("left", oControl.left + "px");
		if (oControl.top != 0)
			oRm.addStyle("top", oControl.top + "px");
		if (oControl.optionOn == sap.landvisz.OptionType.ENTITY)
			oRm.addStyle("position", "absolute");
		if (oControl.getEnable() == false) {
			oRm.addStyle("cursor", "default");
			oRm.addStyle("color", "#999999");
		} else {
			oRm.addStyle("cursor", "pointer");
			oRm.addStyle("color", "#00669c");
		}
		oRm.writeStyles();
		oRm.write(" >");
		oControl.optionBtn.addStyleClass("viewBtn");
		oControl.optionBtn.setText("");
		oControl.optionBtn.setTooltip(oControl.getOptionTextTooltip());
		oControl.optionBtn.setEnabled(oControl.getEnable());
		oControl.optionBtn.setSelected(oControl.getSelected());
		oRm.renderControl(oControl.optionBtn);
		oControl.optionTextView.addStyleClass("viewText");
		oControl.optionTextView.setText(oControl.getLabel());
		oControl.optionTextView.setTooltip(oControl.getOptionTextTooltip());
		oControl.optionTextView.setEnabled(oControl.getEnable());
		oRm.renderControl(oControl.optionTextView);
		oRm.write("</div>");
	}

};

}; // end of sap/landvisz/OptionEntityRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.OptionRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.OptionRenderer");
/**
 * @class ConnectionEntity renderer.
 * @static
 */
sap.landvisz.OptionRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.OptionRenderer.render = function(oRm, oControl) {
};
}; // end of sap/landvisz/OptionRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.OptionSourceRenderer') ) {
/*!
 * @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.OptionSourceRenderer");
/**
 * @class ConnectionEntity renderer.
 * @static
 */
sap.landvisz.OptionSourceRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.OptionSourceRenderer.render = function(oRm, oControl) {
};

}; // end of sap/landvisz/OptionSourceRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.ActionBarRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.internal.ActionBarRenderer");

/**
 * @class ActionBar renderer.
 * @static
 */
sap.landvisz.internal.ActionBarRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.internal.ActionBarRenderer.render = function(oRm, oControl) {
	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;
		var renderSize = oControl.getRenderingSize();
		var topParentCSS;
		var sizeCSS = "sapLandviszActionText";
		var iconCSS = "sapLandviszActionIcon";
		var alignCSS = "sapLandviszActionAlign";
//				oRm.addClass(alignCSS);
//				oRm.writeClasses();
				
		if (renderSize == sap.landvisz.EntityCSSSize.Small) {
			topParentCSS = "sapLandviszActionAlignSmall";
		}
		else if (renderSize == sap.landvisz.EntityCSSSize.RegularSmall) {
			topParentCSS = "sapLandviszActionAlignRegularSmall";
		}
		else if (renderSize == sap.landvisz.EntityCSSSize.Regular) {
			topParentCSS = "sapLandviszActionAlignRegular";
		}
		
		oRm.write("<div");
		oRm.writeControlData(oControl);
		
		oRm.addClass(alignCSS);
		oRm.addClass(topParentCSS);
		if(oControl.getEnable()){
			oRm.addClass("enable");
			oRm.writeAttributeEscaped("tabIndex","0");
		}else{
			oRm.addClass("disable");
			oRm.writeAttributeEscaped("tabIndex","-1");
		}
		
		if (oControl.getActionType() == sap.landvisz.ActionType.MENU) {
			oRm.write(" style='");
			oRm.write("border:0px;");
			oRm.write("padding : 0px;");
			oRm.write("'");
			oRm.addClass("sapLandviszActionIndex");
		}
		oRm.writeClasses();
		oRm.write(">");

		if (oControl.getActionType() == sap.landvisz.ActionType.NORMAL) {
			oRm.write("<div style='padding:0 2px'");
			oRm.writeAttributeEscaped("id",oControl.getId() + "Action");
			oRm.writeAttributeEscaped("title",oControl.getActionTooltip());
			oRm.write(">");
			
			var src = oControl.getIconSrc();
			if (src && src != ""){
				oControl.customActionIcon.setSrc(oControl.getIconSrc());
				oControl.customActionIcon.addStyleClass(iconCSS);
				oRm.renderControl(oControl.customActionIcon);
			}
			oRm.write("<div");
			oRm.writeAttributeEscaped("id",oControl.getId() + "Action_text");
			oRm.addClass(sizeCSS);
			oRm.writeClasses();
			oRm.write(">");
			oRm.writeEscaped(oControl.getActionLabel());
			oRm.write("</div>");
			
			oRm.write("</div>");
			
			//put disable overlay
			if(!oControl.getEnable()){
				oRm.write("<div");
				oRm.writeAttributeEscaped("id",oControl.getId() + "Action_Disable");
				oRm.addClass("sapLandviszActionDisable");
				oRm.writeClasses();
				oRm.write("/>");
			}
		}else if (oControl.getActionType() == sap.landvisz.ActionType.MENU) {
			this._renderSubMenu(oRm, oControl);

			if (renderSize == sap.landvisz.EntityCSSSize.Small) {
				oControl.menuButton.addStyleClass("sapLandviszSmallSizeMenuItem");
				oControl.menuButton.removeStyleClass("sapLandviszMenuItem");
				oControl.menuButton.setHeight("20px")
			} else if (renderSize == sap.landvisz.EntityCSSSize.Regular
					|| renderSize == sap.landvisz.EntityCSSSize.Medium
					|| renderSize == sap.landvisz.EntityCSSSize.Large 
					|| renderSize == sap.landvisz.EntityCSSSize.RegularSmall) {
				oControl.menuButton.addStyleClass("sapLandviszMenuItem");
				oControl.menuButton.removeStyleClass("sapLandviszSmallSizeMenuItem");
				oControl.menuButton.setHeight("28px");
			}
			oControl.menuButton.setEnabled(oControl.getEnable());
			oControl.menuButton.setText(oControl.getActionLabel());
			oControl.menuButton.setTooltip(oControl.getActionTooltip());
			oRm.renderControl(oControl.menuButton);
		}
		oRm.write("</div>");
	}
};

sap.landvisz.internal.ActionBarRenderer._renderSubMenu = function(oRm, oControl) {

	var menus = oControl.getMenuData();

	var oMainMenu = new sap.ui.commons.Menu();
	oMainMenu.attachItemSelect(function(oEvent) {
		oControl.selectedItem = oEvent.mParameters.item;
		if(oControl.getChangeView() == false)
			jQuery.sap.byId(oControl.getId()).click();
		else
			oControl.fireEvent("changeView");
	});

	oMainMenu.addStyleClass("sapLandviszMenuItem");
	oMainMenu.addStyleClass("sapLandviszMenuItemBorber");
	var subMenu;
	var menuItemObj = null;
	var menuItem = null;
	if (menus && menus.length > 0) {
		for ( var i = 0; i < menus.length; i++) {
			menuItemObj = menus[i];
			menuItem = new sap.ui.commons.MenuItem({
				text : menuItemObj.text,
				tooltip : menuItemObj.tooltip
			});
			if (menuItemObj.customdata) {
				var customData = new sap.ui.core.CustomData({
					key : menuItemObj.customdata,
				});
				menuItem.addCustomData(customData);
			}
			oMainMenu.addItem(menuItem);
			if (menuItemObj.subActions && menuItemObj.subActions.length > 0) {
				var subMenu = oControl._createMenu(menuItemObj.subActions)
				menuItem.setSubmenu(subMenu);
			}
		}
	}
	oControl.menuButton.setMenu(oMainMenu);
};

}; // end of sap/landvisz/internal/ActionBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.DataContainerRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.internal.DataContainerRenderer");

/**
 * @class DataContainer renderer.
 * @static
 */
sap.landvisz.internal.DataContainerRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.internal.DataContainerRenderer.render = function(oRm, oControl) {

	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;

		// write the HTML into the render manager

		oRm.write("<div tabIndex='0' ");
		oRm.writeControlData(oControl);
			oRm.addClass("sapLandviszDataContainerSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Small)
			oRm.addClass("sapLandviszDataContainerSmallSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.RegularSmall)
			oRm.addClass("sapLandviszDataContainerRegularSmallSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Regular)
			oRm.addClass("sapLandviszDataContainerRegularSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Medium)
			oRm.addClass("sapLandviszDataContainerMediumSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Large)
			oRm.addClass("sapLandviszDataContainerLargeSize");
		if (oControl.getSelected()){
		if(oControl.getType() == sap.landvisz.LandscapeObject.TechnicalSystem)
		oRm.addClass("sapLandviszSelectedTechnicalSystem");
		else if(oControl.getType() == sap.landvisz.LandscapeObject.ProductSystem)
		oRm.addClass("sapLandviszSelectedProductSystem");
		else if(oControl.getType() == sap.landvisz.LandscapeObject.SapComponent)
		oRm.addClass("sapLandviszSelectedSapComponent");	
		oRm.writeClasses();	
		}
			//oRm.addClass("sapLandviszSelected");
		else
			oRm.addClass("sapLandviszUnselected");

		if (oControl.width && oControl.width != '')
			oRm.addStyle("width", oControl.width);
//		if (oControl.visible == false)
//			oRm.addStyle("visibility","hidden");
//		else
//			oRm.addStyle("visibility","visible");
//oRm.addStyle("display","none");
		oRm.writeStyles();
		oRm.writeClasses();
		oRm.writeAttributeEscaped("title", oControl.getHeader());
		oRm.write(">"); // span element
		oRm.writeEscaped(oControl.getHeader());

		oRm.write("</div>");

//._renderDataContainer(oRm, oControl);


	}

};



sap.landvisz.internal.DataContainerRenderer._renderDataContainerProperties = function(
		oRm, oControl) {

	var continerId = oControl.getId();
	var oProperties = oControl.getValues();
	var rowField;
	if (oProperties.length) {

		for ( var i = 0; i < oProperties.length; i++) {

			rowField = new sap.landvisz.internal.LinearRowField(continerId + i
					+ oControl.getHeader() + "-CLVDatacontainerRowField");
			rowField.setLabel(oProperties[i].label);
			rowField.setValue(oProperties[i].value);
			rowField.placeAt("CLVEntityHLayout");
		}
	}

	else {

		rowField = new sap.landvisz.internal.LinearRowField(continerId
				+ oControl.getHeader() + "-CLVDatacontainerRowField");
		rowField.setLabel(oProperties.label);
		rowField.setValue(oProperties.value);
		rowField.placeAt("CLVEntityHLayout");
	}

};

}; // end of sap/landvisz/internal/DataContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.DeploymentTypeRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */

jQuery.sap.declare("sap.landvisz.internal.DeploymentTypeRenderer");

/**
 * @class LinearRowField renderer.
 * @static
 */
sap.landvisz.internal.DeploymentTypeRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.internal.DeploymentTypeRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager
	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;
		var width;
		var margin = 5;
		if (oControl.count + 1 == 1)
			width = oControl.standardWidth;
		else
			width = oControl.standardWidth * (oControl.count + 1) + margin
					* (oControl.count);

		oRm.write("<div");
		oRm.addStyle("left", oControl.left + "px");
		oRm.addStyle("position", "absolute");
		oRm.addStyle("height", "40px");
		oRm.addStyle("width", width + "px");
		oRm.writeStyles();
		oRm.writeClasses();
		oRm.writeControlData(oControl);
		oRm.write(">"); // span element

		this._drawLeftLine(oRm, oControl, width);

		oRm.write("<div");
		oRm.addStyle("left", width / 2 - 40 + "px");
		oRm.addStyle("position", "absolute");
		oRm.addStyle("margin-top", "5px");
		oRm.addStyle("width", "80px");
		oRm.addStyle("text-align", "center");
		oRm.writeStyles();
		oRm.write(">"); // span element

		// type image to be drawn here
		if (oControl.type == sap.landvisz.ComponentType.onDemand)
			oControl.iconType.setSrc(sap.ui.resource("sap.landvisz",
					"themes/base/img/framework/" + "32x32" + "/sap_on_demand.png"));
		else if (oControl.type == sap.landvisz.ComponentType.onPremise)
			oControl.iconType
					.setSrc(sap.ui.resource("sap.landvisz",
							"themes/base/img/framework/" + "32x32"
									+ "/sap_on_premise.png"));
		oControl.iconType.setTooltip(oControl.getTooltip());
		oControl.iconType.addStyleClass("sapLandviszIconBorder");
		oRm.renderControl(oControl.iconType);
		oRm.write("</div>");
		this._drawRightLine(oRm, oControl, width);

		oRm.write("</div>");
	}

};

sap.landvisz.internal.DeploymentTypeRenderer._drawLeftLine = function(oRm,
		oControl, width) {

	var pixelWidth = width / 2 - 40 - 9;
	oRm.write("<div");
	oRm.addStyle("position", "absolute");
	oRm.addStyle("margin-top", "11px");
	oRm.writeStyles();
	oRm.write(">");
	oControl.iconLeft.setSrc(sap.ui
			.resource("sap.landvisz", "themes/base/img/framework/" + "16x16"
					+ "/leftnav_enable_dark.png"));
	oRm.renderControl(oControl.iconLeft);
	oRm.write("</div>");
	oRm.write("<h2 ");
	oRm.addStyle("left", "9px");
	oRm.addStyle("position", "absolute");
	oRm.addStyle("width", pixelWidth + "px");
	oRm.addStyle("margin", "18px 0px");
	oRm.addStyle("line-height", ".1em");
	oRm.addStyle("border-bottom", "2px solid black");
	oRm.addStyle("text-align", "center");
	oRm.writeStyles();
	oRm.write(">");
	oRm.write(" </h2>");
};

sap.landvisz.internal.DeploymentTypeRenderer._drawRightLine = function(oRm,
		oControl, width) {

	var pixelWidth = width / 2 - 40 - 9;
	var left = width / 2 + 40;
	oRm.write("<h2 ");
	oRm.addStyle("left", left + "px");
	oRm.addStyle("position", "absolute");
	oRm.addStyle("width", pixelWidth + "px");
	oRm.addStyle("margin", "18px 0px");
	oRm.addStyle("line-height", ".1em");
	oRm.addStyle("border-bottom", "2px solid black");
	oRm.addStyle("text-align", "center");
	oRm.writeStyles();
	oRm.write(">");
	oRm.write(" </h2>");

	oRm.write("<div");
	oRm.addStyle("position", "absolute");
	oRm.addStyle("margin-top", "11px");
	oRm.addStyle("left", width - 18 + "px");
	oRm.writeStyles();
	oRm.write(">");
	oControl.iconRight.setSrc(sap.ui.resource("sap.landvisz",
			"themes/base/img/framework/" + "16x16"
					+ "/rightnav_enable_dark.png"));
	oRm.renderControl(oControl.iconRight);
	oRm.write("</div>");
};
}; // end of sap/landvisz/internal/DeploymentTypeRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.EntityActionRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */

jQuery.sap.declare("sap.landvisz.internal.EntityActionRenderer");
/**
 * @class EntityAction renderer.
 * @static
 */
sap.landvisz.internal.EntityActionRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.internal.EntityActionRenderer.render = function(oRm, oControl) {

	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;
		oRm.write("<div tabIndex='0' ");
		oRm.writeControlData(oControl);
		var renderSize = oControl.getRenderingSize();
		if (oControl.entityMaximized != true) {
			if (renderSize == sap.landvisz.EntityCSSSize.Small
					|| renderSize == sap.landvisz.EntityCSSSize.RegularSmall
					|| renderSize == sap.landvisz.EntityCSSSize.Regular
					|| renderSize == sap.landvisz.EntityCSSSize.Medium) {
				oRm.addClass("sapLandviszIcon_buttonSmall");
			} else
				oRm.addClass("sapLandviszIcon_button");
		} else if (oControl.entityMaximized == true) {
			oRm.addClass("sapLandviszIcon_button");
			oControl.entityActionIcon.setWidth("16px");
			oControl.entityActionIcon.setHeight("16px");
		}

		oRm.writeClasses();
		oRm.write(">");
		oControl.setTooltip(oControl.getActionTooltip());
		oControl.entityActionIcon.setSrc(oControl.getIconSrc());
		oControl.entityActionIcon.setTooltip(oControl.getActionTooltip());
		oRm.renderControl(oControl.entityActionIcon);
		oRm.write("</div>");
	}

};

}; // end of sap/landvisz/internal/EntityActionRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.EntityCustomActionRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.internal.EntityCustomActionRenderer");

/**
 * @class EntityCustomAction renderer. 
 * @static
 */
sap.landvisz.internal.EntityCustomActionRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.landvisz.internal.EntityCustomActionRenderer.render = function(oRm, oControl){ 
	 // write the HTML into the render manager
	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapLandviszAction");
		oRm.writeClasses();
		oRm.write("id=\"");
		oRm.write(oControl.getId()+"Action");
		oRm.write("\" title =\"");
		oRm.writeEscaped(oControl.getCustomAction());
		oRm.write("\">");
		oRm.writeEscaped(oControl.getCustomAction());
		oRm.write("</div>");
	}
};

}; // end of sap/landvisz/internal/EntityCustomActionRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.EntityRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.landvisz.internal.EntityRenderer");

/**
 * @class Entity renderer. 
 * @static
 */
sap.landvisz.internal.EntityCustomActionRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.landvisz.internal.EntityCustomActionRenderer.render = function(oRm, oControl){ 
	 // write the HTML into the render manager
	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;
	}
};

}; // end of sap/landvisz/internal/EntityRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.EntityUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.landvisz.internal.EntityUtils");

/**
 * @class EntityUtils.
 * @static
 */
sap.landvisz.internal.EntityUtils = function(){
};

sap.landvisz.internal.EntityUtils._getStatusFilters = function(oEvent) {
};



}; // end of sap/landvisz/internal/EntityUtils.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.HeaderListRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.internal.HeaderListRenderer");

/**
 * @class HeaderList renderer.
 * @static
 */
sap.landvisz.internal.HeaderListRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.internal.HeaderListRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager
	if (!this.initializationDone) {
		oControl.initControls();

		oControl.initializationDone = true;
		oRm.write("<div tabIndex='0' ");
		oRm.writeControlData(oControl);
		if (oControl.getSelected()){
		oRm.addClass("sapLandviszMiniNavigationSelected");
		if(oControl.getType() == sap.landvisz.LandscapeObject.TechnicalSystem)
		oRm.addClass("sapLandviszTechnicalSystem");
		else if(oControl.getType() == sap.landvisz.LandscapeObject.ProductSystem)
		oRm.addClass("sapLandviszProductSystem");
		else if(oControl.getType() == sap.landvisz.LandscapeObject.SapComponent)
		oRm.addClass("sapLandviszSapComponent");	
		oRm.writeClasses();			
		}

		else if (oControl.inDisplay == true)
			oRm.addClass("sapLandviszMiniNavigationInDisplay");
		else
			oRm.addClass("sapLandviszMiniNavigationNormal");

		oRm.writeClasses();
		oRm.writeAttributeEscaped("id", oControl.getId() + "MiniHeader");
		oRm.writeAttributeEscaped("title", oControl.getHeaderTooltip());
		oRm.addStyle("width",oControl.headerWidth+"px");
		oRm.writeStyles();
		oRm.write(">");
		oRm.write("</div>");
	}
};

}; // end of sap/landvisz/internal/HeaderListRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.IdentificationBarRenderer') ) {
/*!
 * @copyright 2012-2014 SAP SE. All rights reserved@
 */

jQuery.sap.declare("sap.landvisz.internal.IdentificationBarRenderer");
jQuery.sap.require('sap.ui.commons.Callout'); // unlisted dependency retained


/**
 * @class IdentificationBar renderer.
 * @static
 */

sap.landvisz.internal.IdentificationBarRenderer = {

};

sap.landvisz.internal.IdentificationBarRenderer.render = function(oRm, oControl) {
	this.tSize = null, this.sEntityIconSizePath = "32x32",
	this.tSIDTextSize = sap.ui.commons.TextViewDesign.H4;
	this.squalifierTextSize = null;
	this.sQualifierIconSizePath = null;
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.landvisz");
	var identificationHdrID = oControl.getId();
	var size = oControl.getRenderingSize();
	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;

		oRm.write("<div");
		oRm.writeControlData(oControl); // writes the Control ID and enables
		// event handling - important!
		this._renderObjectType(oRm, oControl);
		// oRm.writeStyles();

		var title = oControl._oBundle.getText(oControl.getType());

		oRm.writeAttributeEscaped('title', title);
		if (oControl.entityMaximized != true) {
		oRm.addClass("sapLandVisIdentificationBarSize");
			if (size == sap.landvisz.EntityCSSSize.Small) {
				oRm.addClass("sapLandVisIdentificationBarSmallSize");
				this.sEntityIconSizePath = "32x32";
			} else if (size == sap.landvisz.EntityCSSSize.RegularSmall) {
            oRm.addClass("sapLandVisIdentificationBarRegularSmallSize");
            this.sEntityIconSizePath = "48x48";
            } else if (size == sap.landvisz.EntityCSSSize.Regular) {
				oRm.addClass("sapLandVisIdentificationBarRegularSize");
				this.sEntityIconSizePath = "48x48";

			} else if (size == sap.landvisz.EntityCSSSize.Medium) {
				oRm.addClass("sapLandVisIdentificationBarMediumSize");
				this.sEntityIconSizePath = "48x48";
			}
			if (size == sap.landvisz.EntityCSSSize.Large) {
				oRm.addClass("sapLandVisIdentificationBarLargeSize");
				this.sEntityIconSizePath = "48x48";
			}
		} else if (oControl.entityMaximized == true) {
			oRm.addClass("sapLandVisIdentificationBarSize");
			oRm.addClass("sapLandVisIdentificationBarMaximizeSize");
			if (oControl.maxHeight && oControl.maxHeight != 0)
				oRm.addStyle("height", oControl.maxHeight + "px")
			this.sEntityIconSizePath = "48x48";
		}
		// add a CSS class for styles common to all control instances
		oRm.writeStyles();
		oRm.writeClasses();
		oRm.write(">");
		this._renderIdentificationProperties(oRm, oControl);

		if (oControl.getType() == sap.landvisz.LandscapeObject.TechnicalSystem
				|| oControl.getType() == sap.landvisz.LandscapeObject.SapComponent)
			this._renderQualifierProperties(oRm, oControl);
		this._renderDescriptionCallOut(oRm, oControl);

		oRm.write("</div>");

	}

};

sap.landvisz.internal.IdentificationBarRenderer._renderObjectType = function(
		oRm, oControl) {

	var type = oControl.getType();

	switch (type) {
	case sap.landvisz.LandscapeObject.TechnicalSystem:
		oRm.addStyle("background-color", "rgb(0, 143, 211)");
		break;
	case sap.landvisz.LandscapeObject.ProductSystem:
		oRm.addStyle("background-color", "rgb(243, 155, 2)");
		break;
	case sap.landvisz.LandscapeObject.Database:
		oRm.addStyle("background-color", "rgb(0, 0, 0)");
		break;
	case sap.landvisz.LandscapeObject.Product:
		oRm.addStyle("background-color", "rgb(137, 124, 98)");
		break;
	case sap.landvisz.LandscapeObject.ProductVersion:
		oRm.addStyle("background-color", "rgb(137, 124, 98)");
		break;
	case sap.landvisz.LandscapeObject.SapComponent:
		oRm.addStyle("background-color", "rgb(102, 102, 102)");
		break;
	}

};

sap.landvisz.internal.IdentificationBarRenderer._renderIdentificationProperties = function(
		oRm, oControl) {
	if (oControl) {
		var type = oControl.getType();
		oControl.oIdentifierText.setText(oControl.getText());
		oControl.oIdentifierText.setTooltip(oControl.getTooltip());
		oControl.oIdentifierText.addStyleClass("IdentificationText");
		oControl.oIdentifierText.attachBrowserEvent("mouseclick", function(event) {
			sap.landvisz.EntityConstants.internalEvent = true;
		});
		var srcPath = this._renderIdentifireIcon(oControl, "enable");
		oControl.oIdentifierIcon.setSrc(srcPath).addStyleClass("img");

		oControl.oIdentifierIcon.attachPress(function(event) {
			sap.landvisz.EntityConstants.internalEvent = true;
		});

		oControl.oIdentifierIcon.setAlt("landscape Entity Image");
		var title = oControl._oBundle.getText(oControl.getType());
		var componentType = oControl.getComponentType();

		if (oControl.getType() == sap.landvisz.LandscapeObject.SapComponent
				&& componentType == sap.landvisz.ComponentType.onDemand)
			title = title + "-" + oControl.OnDemandText;
		else if (oControl.getType() == sap.landvisz.LandscapeObject.SapComponent
				&& componentType == sap.landvisz.ComponentType.onPremise)
			title = title + "-" + oControl.OnPremiseText;

		oControl.oIdentifierIcon.setTooltip(title);

		// Render to Render Manager
		oRm.write("<div");
		oRm.addClass("entityIcon");
		oRm.writeClasses();

		oRm.write(">");
		var that = this;
		oControl.oIdentifierIcon.attachBrowserEvent("mouseenter", function(event) {
			event.currentTarget.src = that._renderIdentifireIcon(oControl,"hover");
		});

		oControl.oIdentifierIcon.attachBrowserEvent("mouseleave", function(event) {
			event.currentTarget.src = that._renderIdentifireIcon(oControl,"enable");
		});

		oRm.renderControl(oControl.oIdentifierIcon);
		oRm.write("</div>");
		oRm.write("<div");

		var idnHeight = 0;
		if (oControl.maxHeight != 0)
			idnHeight = oControl.maxHeight - 175;
		if (oControl.entityMaximized == true) {
			if (idnHeight != 0)
				oRm.addStyle("height", idnHeight + "px");
		} else
			oRm.addStyle("height", "auto");
		oRm.addStyle("text-align", "center");
		oRm.writeStyles();
		oRm.write(">");

//		if (type == sap.landvisz.LandscapeObject.SapComponent) {
//		oRm.write("<div");

//		if (oControl.entityMaximized == true) {
//		if (idnHeight != 0)
//		oRm.addStyle("height", idnHeight + "px");
//		} else
//		oRm.addStyle("height", "auto");
//		oRm.addStyle("text-align", "center");
//		oRm.writeStyles();
//		oRm.write(">");
//		oRm.renderControl(oControl.oIdentifierTextIcon);
//		oRm.write("</div>");
//		} else

		oRm.renderControl(oControl.oIdentifierText);
		oRm.write("</div>");
	}
};

sap.landvisz.internal.IdentificationBarRenderer._renderIdentifireIcon = function(
		oControl, apendText) {

	var iconPath = sap.ui.resource("sap.landvisz",
			"themes/base/img/landscapeobjects/");

	if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Small)
		iconPath = iconPath + "32x32";
	else
		iconPath = iconPath + "48x48";

	var type = oControl.getType();
	var componentType = oControl.getComponentType();

	switch (type) {
	case sap.landvisz.LandscapeObject.TechnicalSystem:
		iconPath = iconPath + "/TechnicalSystem_" + apendText + ".png";

		break;
	case sap.landvisz.LandscapeObject.ProductSystem:
		iconPath = iconPath + "/ProductSystem_" + apendText + ".png";
		break;
	case sap.landvisz.LandscapeObject.Database:
		iconPath = iconPath + "/Database_" + apendText + ".png";
		break;
	case sap.landvisz.LandscapeObject.Product:
		iconPath = iconPath + "/Product_" + apendText + ".png";
		break;
	case sap.landvisz.LandscapeObject.ProductVersion:
		iconPath = iconPath + "/ProductVersion_" + apendText + ".png";
		break;
	case sap.landvisz.LandscapeObject.SapComponent:
		if (componentType == sap.landvisz.ComponentType.onDemand)
			iconPath = iconPath + "/sap_on_demand.png";
		else if (componentType == sap.landvisz.ComponentType.onPremise)
			iconPath = iconPath + "/sap_on_premise.png";
		break;
	}

	return iconPath;
};

sap.landvisz.internal.IdentificationBarRenderer._renderQualifierProperties = function(
		oRm, oControl) {
	if (oControl) {
		// Qualifier Text
		oControl.oQualifierText.setText(oControl.getQualifierText());
		oControl.oIdentifierText.setTooltip(oControl.getQualifierTooltip());
		var tooltip = oControl._oBundle.getText(oControl.getQualifierText());
		oControl.oQualifierText.addStyleClass("qualifierText");
		oControl.oQualifierText.setTooltip(tooltip);

		oControl.oQualifierText.attachBrowserEvent("mouseclick",
				function(event) {
					sap.landvisz.EntityConstants.internalEvent = true;
					;
				});
		// Qualifier Icon

		this._setQualifierIconSrc(oRm, oControl);
		oControl.oQualifierIcon.setTooltip(tooltip);
		oControl.oQualifierIcon.attachPress(function(event) {
			sap.landvisz.EntityConstants.internalEvent = true;
		});
		oRm.write("<div");
		oRm.addClass("qualifierIcon");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.oQualifierIcon);
		oRm.write("</div>");
		oRm.write("<div");
		oRm.addClass("");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.oQualifierText);
		oRm.write("</div>");
	}
};

sap.landvisz.internal.IdentificationBarRenderer._setQualifierIconSrc = function(
		oRm, oControl) {

	// Assign type icon
	var qualType = oControl.getQualifierType();

	switch (qualType) {
	case sap.landvisz.TechnicalSystemType.ABAP:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/ABAPApplicationServer.png"));
		break;
	case sap.landvisz.TechnicalSystemType.JAVA:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/ApplicationServerJava.png"));
		break;
	case sap.landvisz.TechnicalSystemType.HANADB:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/HanaDatabase.png"));
		break;
	case sap.landvisz.TechnicalSystemType.SBOP:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/BusinessObjectsCluster.png"));
		break;
	case sap.landvisz.TechnicalSystemType.DUAL:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/DualStackSystem.png"));
		break;
	case sap.landvisz.TechnicalSystemType.SUP:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/SybaseUnwiredPlatform.png"));
		break;
	case sap.landvisz.TechnicalSystemType.GENERIC:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/GenaricApplications.png"));
		break;
	case sap.landvisz.TechnicalSystemType.INTROSCOPEMGR:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/IntroscopeManagerCluster.png"));
		break;
	case sap.landvisz.TechnicalSystemType.INTROSCOPESTD:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/IntroscopeManagerStandalone.png"));
		break;
	case sap.landvisz.TechnicalSystemType.LIVECACHESAP:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/LiveCache.png"));
		break;
	case sap.landvisz.TechnicalSystemType.MDM:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/MasterDataManagement.png"));
		break;
	case sap.landvisz.TechnicalSystemType.TREX:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/TREX.png"));
		break;
	case sap.landvisz.TechnicalSystemType.UNSP3TIER:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/Unspecific3LayerSystem.png"));
		break;
	case sap.landvisz.TechnicalSystemType.UNSPCLUSTER:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/UnspecificCluster.png"));
		break;
	case sap.landvisz.TechnicalSystemType.UNSPAPP:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/UnspecificStandaloneApplication.png"));
		break;
	case sap.landvisz.TechnicalSystemType.MSNET:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/VendorSpecificServer.png"));
		break;

	case sap.landvisz.TechnicalSystemType.APACHESERVER:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/VendorSpecificServer.png"));
		break;
	case sap.landvisz.TechnicalSystemType.WEBSPHERE:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/VendorSpecificServer.png"));
		break;
	case sap.landvisz.TechnicalSystemType.MSIISINST:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/VendorSpecificServer.png"));
		break;
	case sap.landvisz.TechnicalSystemType.WEBDISP:
		oControl.oQualifierIcon.setSrc(sap.ui.resource("sap.landvisz",
				"themes/base/img/technicaltypes/" + this.sEntityIconSizePath
						+ "/WebDispatcher.png"));
		break;
	}

};

sap.landvisz.internal.IdentificationBarRenderer._renderDescriptionCallOut = function(
		oRm, oControl) {
	if (oControl) {
		if (oControl.getDescription()) {
			function createCallout(sText) {
				oControl.oButton = new sap.ui.commons.Button({
					text : sText,
					lite : true
				});
				oControl.oCallout = new sap.ui.commons.Callout({
					content : oControl.oButton
				});
				return oControl.oCallout;
			}
			;
			oControl.oIdentifierIcon.setTooltip(createCallout(oControl
					.getDescription()));

		}
	}
};

}; // end of sap/landvisz/internal/IdentificationBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.LinearRowFieldRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */

jQuery.sap.declare("sap.landvisz.internal.LinearRowFieldRenderer");

/**
 * @class LinearRowField renderer.
 * @static
 */
sap.landvisz.internal.LinearRowFieldRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.internal.LinearRowFieldRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.landvisz");

	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapLandviszLinearRowFieldSize");		
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Small)
			oRm.addClass("sapLandviszLinearRowFieldSmallSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.RegularSmall)
			oRm.addClass("sapLandviszLinearRowFieldRegularSmallSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Regular)
			oRm.addClass("sapLandviszLinearRowFieldRegularSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Medium)
			oRm.addClass("sapLandviszLinearRowFieldMediumSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Large)
			oRm.addClass("sapLandviszLinearRowFieldLargeSize");

		oRm.addClass("sapLandviszLinearRowField");
		oRm.writeClasses();
		oRm.write(">"); // span element
		var rfLabel = oControl.getLabel();
		var rfText = oControl.getValue();
		var hasLabel = false;
		var hasValue = false;
		var rightIcon;
		if (oControl.getIconType()) {
			this._assignIconSrc(oRm, oControl);
			oControl.iconType.setTooltip(oControl.getIconTitle());
			oRm.renderControl(oControl.iconType);
		}
		if (rfLabel && "" != rfLabel) {

			if (!rfText || "" == rfText) {
				rightIcon = oControl.getRightIconSrc();
				if (rightIcon && "" != jQuery.trim(rightIcon)){
				oControl.oLinearRowFieldLabel
							.addStyleClass("sapLandviszLinearRowFieldDataCommon");
					oControl.oLinearRowFieldLabel
							.addStyleClass("fullDataLabelwithRightIcon");
				}
				else
				{ 
				oControl.oLinearRowFieldLabel
							.addStyleClass("sapLandviszLinearRowFieldDataCommon");
					oControl.oLinearRowFieldLabel
							.addStyleClass("fullDataLabel");
				}				
				hasValue = false;
			
			} else {
				oControl.oLinearRowFieldLabel.addStyleClass("sapLandviszLinearRowFieldDataCommon");
				oControl.oLinearRowFieldLabel.addStyleClass("dataLabel");
				}
				hasValue = true;
			
			oControl.oLinearRowFieldLabel.setText(rfLabel);
			oControl.oLinearRowFieldLabel.setTooltip(rfLabel);
			oRm.renderControl(oControl.oLinearRowFieldLabel);
		}
		if (rfText && "" != rfText) {
			if (!rfLabel || "" == rfLabel) {

				rightIcon = oControl.getRightIconSrc();
				if (rightIcon && "" != jQuery.trim(rightIcon)){
					oControl.oLinearRowFieldValue
							.addStyleClass("sapLandviszLinearRowFieldDataCommon");
					oControl.oLinearRowFieldValue
							.addStyleClass("fullDataValuewithRightIcon");
				}
				else{
					oControl.oLinearRowFieldValue
							.addStyleClass("sapLandviszLinearRowFieldDataCommon");
					oControl.oLinearRowFieldValue
							.addStyleClass("fullDataValue");
				
				hasLabel = false;
			}
			}

			else {
				oControl.oLinearRowFieldValue.addStyleClass("sapLandviszLinearRowFieldDataCommon");
				oControl.oLinearRowFieldValue.addStyleClass("dataValue");
				hasLabel = true;
			}

			if (hasLabel == true && hasValue == true) {
				oControl.seperatorLbl.addStyleClass("dataSeperator");
				oControl.seperatorLbl.setText(":");
				oRm.renderControl(oControl.seperatorLbl);
			}
			oControl.oLinearRowFieldValue.setWrapping(false);
			oControl.oLinearRowFieldValue.setTooltip(oControl.getTooltip());
			oControl.oLinearRowFieldValue.setText(rfText);
			if (oControl.getInvalidName() == true)
				oControl.oLinearRowFieldValue
						.addStyleClass("sapLandviszWarningBG");
			oRm.renderControl(oControl.oLinearRowFieldValue);
		}

		rightIcon = oControl.getRightIconSrc();
		if (rightIcon && "" != jQuery.trim(rightIcon)) {
			var iconsrc = oControl.getRightIconSrc();
			oControl.rightIcon.setSrc(iconsrc);
			oControl.rightIcon.setTooltip(oControl.getRightIconTooltip());
			oControl.rightIcon.addStyleClass("sapLandviszRightIcon");
			oRm.renderControl(oControl.rightIcon);
		}
		oRm.write("</div>");
	}

};

sap.landvisz.internal.LinearRowFieldRenderer._assignIconSrc = function(oRm,
		oControl) {
	if (oControl.getIconType() == "p")
		oControl.iconType.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/Product_enable.png")).addStyleClass("img");
	else if (oControl.getIconType() == "pv")
		oControl.iconType.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/ProductVersion_enable.png")).addStyleClass(
				"img");
	if (oControl.getIconType() == "pi")
		oControl.iconType.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/ProductInstance_enable.png"))
				.addStyleClass("img");
	if (oControl.getIconType() == "ps")
		oControl.iconType.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/ProductSystem_enable.png")).addStyleClass(
				"img");
	if (oControl.getIconType() == "scv")
		oControl.iconType.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/SoftwareComponentVersion_enable.png"))
				.addStyleClass("img");
	if (oControl.getIconType() == "ts")
		oControl.iconType.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/TechnicalSystem_enable.png"))
				.addStyleClass("img");

	if (oControl.getIconType() == "MOB")
		oControl.iconType.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/Solution.png")).addStyleClass("img");

};
}; // end of sap/landvisz/internal/LinearRowFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.ModelingStatusRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */

jQuery.sap.declare("sap.landvisz.internal.ModelingStatusRenderer");

/**
 * @class ModelingStatusRenderer renderer.
 * @static
 */
sap.landvisz.internal.ModelingStatusRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.internal.ModelingStatusRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.landvisz");

	if (!this.initializationDone) {
		oControl.initControls();
		oRm.write("<div");
		oRm.writeControlData(oControl);
		if (oControl.entityMaximized != true) {
			if (oControl.renderSize == sap.landvisz.EntityCSSSize.Small) {
				oControl._imgFolderPath = "16x16/";
				oRm.addClass("sapLandviszStatusSectionSmallSize");
			} else if(oControl.renderSize == sap.landvisz.EntityCSSSize.RegularSmall || oControl.renderSize == sap.landvisz.EntityCSSSize.Regular 
			|| oControl.renderSize == sap.landvisz.EntityCSSSize.Medium || oControl.renderSize == sap.landvisz.EntityCSSSize.Large ){			
				oControl._imgFolderPath = "24x24/";
				oRm.addClass("sapLandviszStatusSectionAllSize");
			} 

		} else if (oControl.entityMaximized == true) {
			oControl._imgFolderPath = "24x24/";
			oRm.addClass("sapLandviszStatusSectionAllSize");
		}

		// write the HTML into the render manager

		oRm.writeClasses();

		if (oControl.getStatus() == sap.landvisz.ModelingStatus.ERROR
				|| oControl.getStatus() == sap.landvisz.ModelingStatus.WARNING)
			oRm.addStyle("border","1px solid #999999");
		oRm.writeStyles();
			oRm.writeAttributeEscaped("title",oControl.getStatusTooltip());
		oRm.write(">");
		//oControl.statusImage.setTooltip(oControl.getStatusTooltip());
		if(oControl.initializationDone == false){
		oControl.statusImage.attachPress(function(oEvent) {
		oControl.fireEvent("statusSelected");
		});
		}
		
		this._assignIconSrc(oRm, oControl);
		
		if (oControl.getStatus() == sap.landvisz.ModelingStatus.ERROR
				|| oControl.getStatus() == sap.landvisz.ModelingStatus.WARNING)
			oRm.renderControl(oControl.statusImage);
		if (oControl.getStateIconSrc() && "" != oControl.getStateIconSrc()) {
			oControl.stateImage.setSrc(oControl.getStateIconSrc());
			oControl.stateImage.setTooltip(oControl.getStateIconTooltip());
			oControl.stateImage.addStyleClass("stateIconClass");
			oRm.renderControl(oControl.stateImage);

		}
		oControl.initializationDone = true;
		oRm.write("</div>");
	}

};

sap.landvisz.internal.ModelingStatusRenderer._assignIconSrc = function(oRm,
		oControl) {
	if (oControl.getStatus() == sap.landvisz.ModelingStatus.ERROR)
		oControl.statusImage.setSrc(oControl._imgResourcePath
				+ oControl._imgFolderPath + "error.png");
	else if (oControl.getStatus() == sap.landvisz.ModelingStatus.WARNING)
		oControl.statusImage.setSrc(oControl._imgResourcePath
				+ oControl._imgFolderPath + "warning.png");
	else if (oControl.getStatus() == sap.landvisz.ModelingStatus.WARNING)
		oControl.statusImage.setSrc(oControl._imgResourcePath
				+ oControl._imgFolderPath + "success.png");

};
}; // end of sap/landvisz/internal/ModelingStatusRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.NestedRowFieldRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */
jQuery.sap.declare("sap.landvisz.internal.NestedRowFieldRenderer");

/**
 * @class NestedRowField renderer.
 * @static
 */
sap.landvisz.internal.NestedRowFieldRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.internal.NestedRowFieldRenderer.render = function(oRm, oControl) {

	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;

		// write the HTML into the render manager
		oRm.write("<div");

		oRm.writeControlData(oControl);
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Small)
			oRm.addClass("sapLandviszNestedRowFieldSmallSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.RegularSmall)
			oRm.addClass("sapLandviszNestedRowFieldRegularSmallSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Regular)
			oRm.addClass("sapLandviszNestedRowFieldRegularSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Medium)
			oRm.addClass("sapLandviszNestedRowFieldMediumSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Large)
			oRm.addClass("sapLandviszNestedRowFieldLargeSize");

		oRm.writeClasses();
		oRm.write(" >");
		oRm.write("<div");
		oRm.write(" >");
		oControl.oNestedRowFieldLabel.setText(oControl.getLabel());
		oControl.oNestedRowFieldLabel.setTooltip(oControl.getLabel());
		oControl.oNestedRowFieldLabel.addStyleClass("sapLandviszNestedRowFieldCommon");
		oControl.oNestedRowFieldLabel.addStyleClass("dataLabel");

		if (oControl.getType()) {
			this._assignIconSrc(oControl.getType(), oControl.iconLabel);
			oControl.iconLabel.addStyleClass("sapLandviszDataLabelIcon");
			oControl.iconLabel.setTooltip(oControl.getIconTitle());
			oRm.renderControl(oControl.iconLabel);
		}

		oRm.renderControl(oControl.oNestedRowFieldLabel);
		oRm.write("</div>");
		var rows = oControl.getLinearRows();
		var row;

		for ( var i = 0; i < rows.length; i++) {
			row = rows[i]
			row.setRenderingSize(oControl.getRenderingSize());
			row.addStyleClass("rowFieldinNestedRow");
			oRm.renderControl(row);
		}

		oRm.write("</div>");

	}

};

sap.landvisz.internal.NestedRowFieldRenderer._assignIconSrc = function(type,
		image) {
	if (type == "p")
		image.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/Product_enable.png")).addStyleClass("img");
	else if (type == "pv")
		image.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/ProductVersion_enable.png")).addStyleClass(
				"img");
	if (type == "pi")
		image.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/ProductInstance_enable.png"))
				.addStyleClass("img");
	if (type == "ps")
		image.setSrc(
				sap.ui.resource("sap.landvisz",
						"themes/base/img/landscapeobjects/" + "24x24"
								+ "/ProductSystem_enable.png")).addStyleClass(
				"img");
};

}; // end of sap/landvisz/internal/NestedRowFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.SingleDataContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.landvisz.internal.SingleDataContainerRenderer");

/**
 * @class SingleDataContainer renderer.
 * @static
 */
sap.landvisz.internal.SingleDataContainerRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.internal.SingleDataContainerRenderer.render = function(oRm,
		oControl) {
	// write the HTML into the render manager

	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapLandviszSMVContainerAllSizes");
		oRm.addClass("svmContainer");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapLandviszSvmHeader");
		oRm.writeClasses();
		oRm.write(">");
		oControl.headerLabel.setText(oControl.getHeader());
		oControl.headerLabel.setTooltip(oControl.getHeader());
		oControl.headerLabel.addStyleClass("sapLandviszSvmHeaderLabel");
		oRm.renderControl(oControl.headerLabel);
		oRm.write("<div");
		oRm.writeAttributeEscaped("id", "closeVM");
		oRm.addClass("sapLandviszSvmSectorCloseBtn");
		oRm.writeClasses();

		var oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.landvisz");
		var closeText = oBundle.getText("CLOSE");

		oRm.writeAttributeEscaped("title", closeText);
		oRm.write("></div>");
		oRm.write("</div>");

		oRm.write("<div");
		oRm.addClass("sapLandviszSvmDataContainer");
		oRm.writeClasses();
		oRm.write(">");
		var properties = oControl.getProperties();
		var property;
		for ( var i = 0; i < properties.length; i++) {
			property = properties[i];
			if (property.getRenderingSize())
				property.setRenderingSize(oControl.getRenderingSize());
			oRm.renderControl(property);
		}
		oRm.write("</div>");
		oRm.write("</div>");

		oControl.isModelOpen = true;
	}
};

}; // end of sap/landvisz/internal/SingleDataContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.TreeFieldRenderer') ) {
/*!
 *  @copyright 2012-2014 SAP SE. All rights reserved@
 */

jQuery.sap.declare("sap.landvisz.internal.TreeFieldRenderer");
jQuery.sap.require('sap.ui.commons.Tree'); // unlisted dependency retained

/**
 * @class TreeField renderer.
 * @static
 */
sap.landvisz.internal.TreeFieldRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.landvisz.internal.TreeFieldRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.landvisz");

	if (!this.initializationDone) {
		oControl.initControls();
		oControl.initializationDone = true;

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);

		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Small)
			oRm.addClass("sapLandVisTreeFieldSmallSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.RegularSmall)
			oRm.addClass("sapLandVisTreeFieldRegularSmallSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Regular)
			oRm.addClass("sapLandVisTreeFieldRegularSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Medium)
			oRm.addClass("sapLandVisTreeFieldMediumSize");
		if (oControl.getRenderingSize() == sap.landvisz.EntityCSSSize.Large)
			oRm.addClass("sapLandVisTreeFieldLargeSize");

		oRm.writeClasses();
		oRm.write(">"); // span element

		// set the data to the
		var modelData = oControl.getTreeModel();
		var array = eval(oControl.getTreeModel());
		oControl.jsonModel.setData(modelData);

		oControl.tree.setShowHeader(false);
		oControl.tree.addStyleClass("landscapetree");
		oControl.tree.setModel(oControl.jsonModel);
		oControl.tree.setHeight("100%");
		oControl.oTreeNodeTemplate.bindProperty("text", "name");
		var customDataTemplate = new sap.ui.core.CustomData({
			key : "type",
			value : "{type}"
		});
		oControl.oTreeNodeTemplate.addCustomData(customDataTemplate);
		oControl.oTreeNodeTemplate.setExpanded(true);
		oControl.oTreeNodeTemplate.setSelectable(false);
		oControl.oTreeNodeTemplate
		oControl.tree.bindAggregation("nodes", '/' + oControl.getBindingName(),
				oControl.oTreeNodeTemplate);
		this._assignIconSrc(oControl.tree.getNodes());
		oRm.renderControl(oControl.tree);

		oRm.write("</div>");

	}
};

sap.landvisz.internal.TreeFieldRenderer._assignIconSrc = function(nodes) {

	var node;
	var type;
	if (typeof (nodes) == "object") {
		for ( var i = 0; i < nodes.length; i++) {
			node = nodes[i];
			if (node.getNodes().length && node.getNodes().length > 0) {
				type = node.getCustomData()[0].getValue();
				this._setIcon(node, type);
				this._assignIconSrc(node.getNodes());
			} else {
				type = node.getCustomData()[0].getValue();
				this._setIcon(node, type);
			}
		}
	}
};

sap.landvisz.internal.TreeFieldRenderer._setIcon = function(node, type) {

	if (type == "p")
		node.setIcon(sap.ui.resource("sap.landvisz",
				"themes/base/img/landscapeobjects/" + "24x24"
						+ "/Product_enable.png"));
	else if (type == "pv")
		node.setIcon(sap.ui.resource("sap.landvisz",
				"themes/base/img/landscapeobjects/" + "24x24"
						+ "/ProductVersion_enable.png"));
	if (type == "pi")
		node.setIcon(sap.ui.resource("sap.landvisz",
				"themes/base/img/landscapeobjects/" + "24x24"
						+ "/ProductInstance_enable.png"));
	if (type == "ps")
		node.setIcon(sap.ui.resource("sap.landvisz",
				"themes/base/img/landscapeobjects/" + "24x24"
						+ "/ProductSystem_enable.png"));

};

}; // end of sap/landvisz/internal/TreeFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.landvisz (1.50.0)
 */
jQuery.sap.declare("sap.landvisz.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * sap.landvisz library for UI developments
 *
 * @namespace
 * @name sap.landvisz
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.landvisz",
	dependencies : ["sap.ui.core"],
	types: [
		"sap.landvisz.ActionType",
		"sap.landvisz.ComponentType",
		"sap.landvisz.ConnectionLine",
		"sap.landvisz.ConnectionType",
		"sap.landvisz.DependencyType",
		"sap.landvisz.DependencyVisibility",
		"sap.landvisz.EntityCSSSize",
		"sap.landvisz.LandscapeObject",
		"sap.landvisz.ModelingStatus",
		"sap.landvisz.OptionType",
		"sap.landvisz.SelectionViewPosition",
		"sap.landvisz.SolutionType",
		"sap.landvisz.TechnicalSystemType",
		"sap.landvisz.ViewType",
		"sap.landvisz.internal.ContainerType"
	],
	interfaces: [],
	controls: [
		"sap.landvisz.ConnectionEntity",
		"sap.landvisz.Connector",
		"sap.landvisz.LandscapeEntity",
		"sap.landvisz.LandscapeViewer",
		"sap.landvisz.LongTextField",
		"sap.landvisz.Option",
		"sap.landvisz.OptionEntity",
		"sap.landvisz.OptionSource",
		"sap.landvisz.internal.ActionBar",
		"sap.landvisz.internal.DataContainer",
		"sap.landvisz.internal.DeploymentType",
		"sap.landvisz.internal.EntityAction",
		"sap.landvisz.internal.EntityCustomAction",
		"sap.landvisz.internal.HeaderList",
		"sap.landvisz.internal.IdentificationBar",
		"sap.landvisz.internal.LinearRowField",
		"sap.landvisz.internal.ModelingStatus",
		"sap.landvisz.internal.NestedRowField",
		"sap.landvisz.internal.SingleDataContainer",
		"sap.landvisz.internal.TreeField"
	],
	elements: [],
	version: "1.50.0"
});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.ActionType.
jQuery.sap.declare("sap.landvisz.ActionType");
/**
 * @class Action Type of a action
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.ActionType = {

	/**
	 * Normal action type
	 * @public
	 */
	NORMAL : "NORMAL",

	/**
	 * Menu action type
	 * @public
	 */
	MENU : "MENU"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.ComponentType.
jQuery.sap.declare("sap.landvisz.ComponentType");
/**
 * @class [Enter description for ComponentType]
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.ComponentType = {

	/**
	 * on demand component type
	 * @public
	 */
	onDemand : "onDemand",

	/**
	 * on premise component type
	 * @public
	 */
	onPremise : "onPremise",

	/**
	 * component type in not defined
	 * @public
	 */
	notDefined : "notDefined"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.ConnectionLine.
jQuery.sap.declare("sap.landvisz.ConnectionLine");
/**
 * @class type file for ps, ts and mob soln
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.ConnectionLine = {

	/**
	 * Plain line
	 * @public
	 */
	Line : "Line",

	/**
	 * Line with arrow at end
	 * @public
	 */
	Arrow : "Arrow"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.ConnectionType.
jQuery.sap.declare("sap.landvisz.ConnectionType");
/**
 * @class type file for ps, ts and mob soln
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.ConnectionType = {

	/**
	 * ps type
	 * @public
	 */
	ProductSystem : "ProductSystem",

	/**
	 * ts type
	 * @public
	 */
	TechnicalSystem : "TechnicalSystem",

	/**
	 * mob type
	 * @public
	 */
	MobileSolution : "MobileSolution"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.DependencyType.
jQuery.sap.declare("sap.landvisz.DependencyType");
/**
 * @class View type of landscape viewer
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.DependencyType = {

	/**
	 * dependency view
	 * @public
	 */
	NETWORK_VIEW : "NETWORK_VIEW",

	/**
	 * Landscape view for selected view
	 * @public
	 */
	BOX_VIEW : "BOX_VIEW"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.DependencyVisibility.
jQuery.sap.declare("sap.landvisz.DependencyVisibility");
/**
 * @class View Visibility of landscape viewer
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.DependencyVisibility = {

	/**
	 * Network dependency view
	 * @public
	 */
	NETWORK : "NETWORK",

	/**
	 * Box Dependency View
	 * @public
	 */
	BOX : "BOX",

	/**
	 * make both view visible
	 * @public
	 */
	BOTH : "BOTH"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.EntityCSSSize.
jQuery.sap.declare("sap.landvisz.EntityCSSSize");
/**
 * @class System Size supported
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.EntityCSSSize = {

	/**
	 * Regular size of system
	 * @public
	 */
	Regular : "Regular",

	/**
	 * Medium size of system
	 * @public
	 */
	Medium : "Medium",

	/**
	 * Large size of system
	 * @public
	 */
	Large : "Large",

	/**
	 * Small size of system
	 * @public
	 */
	Small : "Small",

	/**
	 * Smallest size of system
	 * @public
	 */
	Smallest : "Smallest",

	/**
	 * Smaller size of system
	 * @public
	 */
	Smaller : "Smaller",

	/**
	 * Largest size of system
	 * @public
	 */
	Largest : "Largest",

	/**
	 * new size regular size
	 * @public
	 */
	RegularSmall : "RegularSmall"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.LandscapeObject.
jQuery.sap.declare("sap.landvisz.LandscapeObject");
/**
 * @class Type of object in the landscape
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.LandscapeObject = {

	/**
	 * Technical system type
	 * @public
	 */
	TechnicalSystem : "TechnicalSystem",

	/**
	 * Product systems type
	 * @public
	 */
	ProductSystem : "ProductSystem",

	/**
	 * Database type
	 * @public
	 */
	Database : "Database",

	/**
	 * Product type
	 * @public
	 */
	Product : "Product",

	/**
	 * Product version type
	 * @public
	 */
	ProductVersion : "ProductVersion",

	/**
	 * SAP Component Type
	 * @public
	 */
	SapComponent : "SapComponent",

	/**
	 * SAP Track Type
	 * @public
	 */
	Track : "Track"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.ModelingStatus.
jQuery.sap.declare("sap.landvisz.ModelingStatus");
/**
 * @class sampl doc
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.ModelingStatus = {

	/**
	 * sample doc for types - ABAP
	 * @public
	 */
	ERROR : "ERROR",

	/**
	 * sample doc
	 * @public
	 */
	WARNING : "WARNING",

	/**
	 * sample doc
	 * @public
	 */
	NORMAL : "NORMAL"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.OptionType.
jQuery.sap.declare("sap.landvisz.OptionType");
/**
 * @class Action Type of a action
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.OptionType = {

	/**
	 * Option applicable on entity
	 * @public
	 */
	ENTITY : "ENTITY",

	/**
	 * Option applicable on view
	 * @public
	 */
	VIEW : "VIEW"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.SelectionViewPosition.
jQuery.sap.declare("sap.landvisz.SelectionViewPosition");
/**
 * @class position of selection view
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.SelectionViewPosition = {

	/**
	 * selection entity at left position
	 * @public
	 */
	LEFT : "LEFT",

	/**
	 * selection entity at right position
	 * @public
	 */
	RIGHT : "RIGHT",

	/**
	 * Selection entity at center position
	 * @public
	 */
	CENTER : "CENTER"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.SolutionType.
jQuery.sap.declare("sap.landvisz.SolutionType");
/**
 * @class View type of landscape viewer
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.SolutionType = {

	/**
	 * Component view of a solution
	 * @public
	 */
	COMPONENT_VIEW : "COMPONENT_VIEW",

	/**
	 * Deploy view of a solution
	 * @public
	 */
	DEPLOYMENT_VIEW : "DEPLOYMENT_VIEW"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.TechnicalSystemType.
jQuery.sap.declare("sap.landvisz.TechnicalSystemType");
/**
 * @class sampl doc
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.TechnicalSystemType = {

	/**
	 * types: ABAP
	 * @public
	 */
	ABAP : "ABAP",

	/**
	 * types: JAVA
	 * @public
	 */
	JAVA : "JAVA",

	/**
	 * Types: HANA DB
	 * @public
	 */
	HANADB : "HANADB",

	/**
	 * types - DUAL
	 * @public
	 */
	DUAL : "DUAL",

	/**
	 * types - DUAL
	 * @public
	 */
	SBOP : "SBOP",

	/**
	 * types: SUP
	 * @public
	 */
	SUP : "SUP",

	/**
	 * Types: GENERIC
	 * @public
	 */
	GENERIC : "GENERIC",

	/**
	 * types - INTROSCOPEMGR
	 * @public
	 */
	INTROSCOPEMGR : "INTROSCOPEMGR",

	/**
	 * Types: INTROSCOPESTD
	 * @public
	 */
	INTROSCOPESTD : "INTROSCOPESTD",

	/**
	 * types - LIVECACHESAP
	 * @public
	 */
	LIVECACHESAP : "LIVECACHESAP",

	/**
	 * types - MDM
	 * @public
	 */
	MDM : "MDM",

	/**
	 * types: TREX
	 * @public
	 */
	TREX : "TREX",

	/**
	 * types: UNSP3TIER
	 * @public
	 */
	UNSP3TIER : "UNSP3TIER",

	/**
	 * Types: UNSPCLUSTER
	 * @public
	 */
	UNSPCLUSTER : "UNSPCLUSTER",

	/**
	 * types - UNSPAPP
	 * @public
	 */
	UNSPAPP : "UNSPAPP",

	/**
	 * types - .NET
	 * @public
	 */
	MSNET : "MSNET",

	/**
	 * types: APACHESERVER
	 * @public
	 */
	APACHESERVER : "APACHESERVER",

	/**
	 * types: WEBSPHERE
	 * @public
	 */
	WEBSPHERE : "WEBSPHERE",

	/**
	 * Types: MSIISINST
	 * @public
	 */
	MSIISINST : "MSIISINST",

	/**
	 * types - WEBDISP
	 * @public
	 */
	WEBDISP : "WEBDISP"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.ViewType.
jQuery.sap.declare("sap.landvisz.ViewType");
/**
 * @class View type of landscape viewer
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.ViewType = {

	/**
	 * dependency view
	 * @public
	 */
	DEPENDENCY_VIEW : "DEPENDENCY_VIEW",

	/**
	 * Landscape view for selected view
	 * @public
	 */
	SELECTION_VIEW : "SELECTION_VIEW",

	/**
	 * Solution View for a Landscape Objects
	 * @public
	 */
	SOLUTION_VIEW : "SOLUTION_VIEW"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.landvisz.internal.ContainerType.
jQuery.sap.declare("sap.landvisz.internal.ContainerType");
/**
 * @class ContainerType
 *
 * @version 1.50.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.internal.ContainerType = {

	/**
	 * Type Product
	 * @public
	 */
	Product : "Product",

	/**
	 * Type Product version
	 * @public
	 */
	ProductVersion : "ProductVersion",

	/**
	 * Product Instances in the system
	 * @public
	 */
	ProductInstances : "ProductInstances",

	/**
	 * Software Components in the system
	 * @public
	 */
	SoftwareComponents : "SoftwareComponents"

};

}; // end of sap/landvisz/library.js
if ( !jQuery.sap.isDeclared('sap.landvisz.Connector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.Connector.
jQuery.sap.declare("sap.landvisz.Connector");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Connector.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSource source} : string</li>
 * <li>{@link #getTarget target} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Connector of the entities
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.Connector
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.Connector", { metadata : {

	library : "sap.landvisz",
	properties : {
		"source" : {type : "string", group : "Data", defaultValue : null},
		"target" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.Connector with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.Connector.extend
 * @function
 */


/**
 * Getter for property <code>source</code>.
 * source of a connection to be drawn
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>source</code>
 * @public
 * @name sap.landvisz.Connector#getSource
 * @function
 */

/**
 * Setter for property <code>source</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSource  new value for property <code>source</code>
 * @return {sap.landvisz.Connector} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.Connector#setSource
 * @function
 */


/**
 * Getter for property <code>target</code>.
 * destination of the connection
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>target</code>
 * @public
 * @name sap.landvisz.Connector#getTarget
 * @function
 */

/**
 * Setter for property <code>target</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTarget  new value for property <code>target</code>
 * @return {sap.landvisz.Connector} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.Connector#setTarget
 * @function
 */

// Start of sap/landvisz/Connector.js
///**
// * This file defines behavior for the control,
// */

sap.landvisz.Connector.prototype.init = function() {
this.viewType;
};
}; // end of sap/landvisz/Connector.js
if ( !jQuery.sap.isDeclared('sap.landvisz.LandscapeEntity') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.LandscapeEntity.
jQuery.sap.declare("sap.landvisz.LandscapeEntity");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new LandscapeEntity.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSystemName systemName} : string</li>
 * <li>{@link #getType type} : sap.landvisz.LandscapeObject</li>
 * <li>{@link #getQualifierText qualifierText} : string</li>
 * <li>{@link #getQualifierTooltip qualifierTooltip} : string</li>
 * <li>{@link #getQualifierType qualifierType} : string</li>
 * <li>{@link #getRenderingSize renderingSize} : sap.landvisz.EntityCSSSize (default: sap.landvisz.EntityCSSSize.Regular)</li>
 * <li>{@link #getDefaultState defaultState} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getActions actions} : object</li>
 * <li>{@link #getSystemStatus systemStatus} : sap.landvisz.ModelingStatus (default: sap.landvisz.ModelingStatus.NORMAL)</li>
 * <li>{@link #getStatusTooltip statusTooltip} : string</li>
 * <li>{@link #getExplodeViewWidth explodeViewWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getExplodeViewHeight explodeViewHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getShowCustomActions showCustomActions} : boolean (default: true)</li>
 * <li>{@link #getShowEntityActions showEntityActions} : boolean (default: true)</li>
 * <li>{@link #getSystemId systemId} : string</li>
 * <li>{@link #getStateIconSrc stateIconSrc} : string</li>
 * <li>{@link #getStateIconTooltip stateIconTooltip} : string</li>
 * <li>{@link #getComponentType componentType} : sap.landvisz.ComponentType</li>
 * <li>{@link #getComponentTypeTooltip componentTypeTooltip} : string</li>
 * <li>{@link #getTrackSystemCount trackSystemCount} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getDataContainers dataContainers} : sap.landvisz.internal.DataContainer[]</li>
 * <li>{@link #getActionBar actionBar} : sap.landvisz.internal.ActionBar[]</li>
 * <li>{@link #getEntityStatus entityStatus} : sap.ui.commons.Image</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.landvisz.LandscapeEntity#event:mouseOverIdenIcon mouseOverIdenIcon} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.landvisz.LandscapeEntity#event:statusSelect statusSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.landvisz.LandscapeEntity#event:trackInfoPress trackInfoPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control to render the system
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.LandscapeEntity
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.LandscapeEntity", { metadata : {

	library : "sap.landvisz",
	properties : {
		"systemName" : {type : "string", group : "Data", defaultValue : null},
		"type" : {type : "sap.landvisz.LandscapeObject", group : "Data", defaultValue : null},
		"qualifierText" : {type : "string", group : "Data", defaultValue : null},
		"qualifierTooltip" : {type : "string", group : "Data", defaultValue : null},
		"qualifierType" : {type : "string", group : "Data", defaultValue : null},
		"renderingSize" : {type : "sap.landvisz.EntityCSSSize", group : "Dimension", defaultValue : sap.landvisz.EntityCSSSize.Regular},
		"defaultState" : {type : "string", group : "Data", defaultValue : null},
		"description" : {type : "string", group : "Data", defaultValue : null},
		"actions" : {type : "object", group : "Data", defaultValue : null},
		"systemStatus" : {type : "sap.landvisz.ModelingStatus", group : "Data", defaultValue : sap.landvisz.ModelingStatus.NORMAL},
		"statusTooltip" : {type : "string", group : "Data", defaultValue : null},
		"explodeViewWidth" : {type : "sap.ui.core.CSSSize", group : "Data", defaultValue : null},
		"explodeViewHeight" : {type : "sap.ui.core.CSSSize", group : "Data", defaultValue : null},
		"showCustomActions" : {type : "boolean", group : "Identification", defaultValue : true},
		"showEntityActions" : {type : "boolean", group : "Data", defaultValue : true},
		"systemId" : {type : "string", group : "Identification", defaultValue : null},
		"stateIconSrc" : {type : "string", group : "Data", defaultValue : null},
		"stateIconTooltip" : {type : "string", group : "Data", defaultValue : null},
		"componentType" : {type : "sap.landvisz.ComponentType", group : "Identification", defaultValue : null},
		"componentTypeTooltip" : {type : "string", group : "Data", defaultValue : null},
		"trackSystemCount" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"dataContainers" : {type : "sap.landvisz.internal.DataContainer", multiple : true, singularName : "dataContainer"}, 
		"actionBar" : {type : "sap.landvisz.internal.ActionBar", multiple : true, singularName : "actionBar"}, 
		"entityStatus" : {type : "sap.ui.commons.Image", multiple : false}
	},
	events : {
		"mouseOverIdenIcon" : {}, 
		"statusSelect" : {}, 
		"trackInfoPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.LandscapeEntity with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.LandscapeEntity.extend
 * @function
 */

sap.landvisz.LandscapeEntity.M_EVENTS = {'mouseOverIdenIcon':'mouseOverIdenIcon','statusSelect':'statusSelect','trackInfoPress':'trackInfoPress'};


/**
 * Getter for property <code>systemName</code>.
 * name of the system
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>systemName</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getSystemName
 * @function
 */

/**
 * Setter for property <code>systemName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSystemName  new value for property <code>systemName</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setSystemName
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * type of the system rendered
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.LandscapeObject} the value of property <code>type</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.LandscapeObject} oType  new value for property <code>type</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setType
 * @function
 */


/**
 * Getter for property <code>qualifierText</code>.
 * text of qualifier icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>qualifierText</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getQualifierText
 * @function
 */

/**
 * Setter for property <code>qualifierText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sQualifierText  new value for property <code>qualifierText</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setQualifierText
 * @function
 */


/**
 * Getter for property <code>qualifierTooltip</code>.
 * tooltip for qualifier icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>qualifierTooltip</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getQualifierTooltip
 * @function
 */

/**
 * Setter for property <code>qualifierTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sQualifierTooltip  new value for property <code>qualifierTooltip</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setQualifierTooltip
 * @function
 */


/**
 * Getter for property <code>qualifierType</code>.
 * text of the qualifier that specifies the server
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>qualifierType</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getQualifierType
 * @function
 */

/**
 * Setter for property <code>qualifierType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sQualifierType  new value for property <code>qualifierType</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setQualifierType
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * rendering size of a system
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code>
 *
 * @return {sap.landvisz.EntityCSSSize} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code> 
 *
 * @param {sap.landvisz.EntityCSSSize} oRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setRenderingSize
 * @function
 */


/**
 * Getter for property <code>defaultState</code>.
 * default state of the system
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>defaultState</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getDefaultState
 * @function
 */

/**
 * Setter for property <code>defaultState</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDefaultState  new value for property <code>defaultState</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setDefaultState
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * description of the identification region
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setDescription
 * @function
 */


/**
 * Getter for property <code>actions</code>.
 * actions of entity
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>actions</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getActions
 * @function
 */

/**
 * Setter for property <code>actions</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oActions  new value for property <code>actions</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setActions
 * @function
 */


/**
 * Getter for property <code>systemStatus</code>.
 * Modeling status of the entity
 *
 * Default value is <code>sap.landvisz.ModelingStatus.NORMAL</code>
 *
 * @return {sap.landvisz.ModelingStatus} the value of property <code>systemStatus</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getSystemStatus
 * @function
 */

/**
 * Setter for property <code>systemStatus</code>.
 *
 * Default value is <code>sap.landvisz.ModelingStatus.NORMAL</code> 
 *
 * @param {sap.landvisz.ModelingStatus} oSystemStatus  new value for property <code>systemStatus</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setSystemStatus
 * @function
 */


/**
 * Getter for property <code>statusTooltip</code>.
 * tooltip for modelling status
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>statusTooltip</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getStatusTooltip
 * @function
 */

/**
 * Setter for property <code>statusTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStatusTooltip  new value for property <code>statusTooltip</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setStatusTooltip
 * @function
 */


/**
 * Getter for property <code>explodeViewWidth</code>.
 * Width of the show all view
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>explodeViewWidth</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getExplodeViewWidth
 * @function
 */

/**
 * Setter for property <code>explodeViewWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sExplodeViewWidth  new value for property <code>explodeViewWidth</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setExplodeViewWidth
 * @function
 */


/**
 * Getter for property <code>explodeViewHeight</code>.
 * Height of the show all view
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>explodeViewHeight</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getExplodeViewHeight
 * @function
 */

/**
 * Setter for property <code>explodeViewHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sExplodeViewHeight  new value for property <code>explodeViewHeight</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setExplodeViewHeight
 * @function
 */


/**
 * Getter for property <code>showCustomActions</code>.
 * determines the visiblity of custom actions
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCustomActions</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getShowCustomActions
 * @function
 */

/**
 * Setter for property <code>showCustomActions</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCustomActions  new value for property <code>showCustomActions</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setShowCustomActions
 * @function
 */


/**
 * Getter for property <code>showEntityActions</code>.
 * determines the visiblity of entityactions
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showEntityActions</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getShowEntityActions
 * @function
 */

/**
 * Setter for property <code>showEntityActions</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowEntityActions  new value for property <code>showEntityActions</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setShowEntityActions
 * @function
 */


/**
 * Getter for property <code>systemId</code>.
 * System entity ID
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>systemId</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getSystemId
 * @function
 */

/**
 * Setter for property <code>systemId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSystemId  new value for property <code>systemId</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setSystemId
 * @function
 */


/**
 * Getter for property <code>stateIconSrc</code>.
 * Icon source of the state of entity
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>stateIconSrc</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getStateIconSrc
 * @function
 */

/**
 * Setter for property <code>stateIconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStateIconSrc  new value for property <code>stateIconSrc</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setStateIconSrc
 * @function
 */


/**
 * Getter for property <code>stateIconTooltip</code>.
 * tooltip of modelling status icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>stateIconTooltip</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getStateIconTooltip
 * @function
 */

/**
 * Setter for property <code>stateIconTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStateIconTooltip  new value for property <code>stateIconTooltip</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setStateIconTooltip
 * @function
 */


/**
 * Getter for property <code>componentType</code>.
 * Type of a soution component/deployment type entity
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.ComponentType} the value of property <code>componentType</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getComponentType
 * @function
 */

/**
 * Setter for property <code>componentType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.ComponentType} oComponentType  new value for property <code>componentType</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setComponentType
 * @function
 */


/**
 * Getter for property <code>componentTypeTooltip</code>.
 * Tooltip for component type
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>componentTypeTooltip</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getComponentTypeTooltip
 * @function
 */

/**
 * Setter for property <code>componentTypeTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sComponentTypeTooltip  new value for property <code>componentTypeTooltip</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setComponentTypeTooltip
 * @function
 */


/**
 * Getter for property <code>trackSystemCount</code>.
 * Systems count in the track
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>trackSystemCount</code>
 * @public
 * @name sap.landvisz.LandscapeEntity#getTrackSystemCount
 * @function
 */

/**
 * Setter for property <code>trackSystemCount</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTrackSystemCount  new value for property <code>trackSystemCount</code>
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setTrackSystemCount
 * @function
 */


/**
 * Getter for aggregation <code>dataContainers</code>.<br/>
 * aggregations for data container
 * 
 * @return {sap.landvisz.internal.DataContainer[]}
 * @public
 * @name sap.landvisz.LandscapeEntity#getDataContainers
 * @function
 */


/**
 * Inserts a dataContainer into the aggregation named <code>dataContainers</code>.
 *
 * @param {sap.landvisz.internal.DataContainer}
 *          oDataContainer the dataContainer to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the dataContainer should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the dataContainer is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the dataContainer is inserted at 
 *             the last position        
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#insertDataContainer
 * @function
 */

/**
 * Adds some dataContainer <code>oDataContainer</code> 
 * to the aggregation named <code>dataContainers</code>.
 *
 * @param {sap.landvisz.internal.DataContainer}
 *            oDataContainer the dataContainer to add; if empty, nothing is inserted
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#addDataContainer
 * @function
 */

/**
 * Removes an dataContainer from the aggregation named <code>dataContainers</code>.
 *
 * @param {int | string | sap.landvisz.internal.DataContainer} vDataContainer the dataContainer to remove or its index or id
 * @return {sap.landvisz.internal.DataContainer} the removed dataContainer or null
 * @public
 * @name sap.landvisz.LandscapeEntity#removeDataContainer
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>dataContainers</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.landvisz.internal.DataContainer[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.LandscapeEntity#removeAllDataContainers
 * @function
 */

/**
 * Checks for the provided <code>sap.landvisz.internal.DataContainer</code> in the aggregation named <code>dataContainers</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.landvisz.internal.DataContainer}
 *            oDataContainer the dataContainer whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.LandscapeEntity#indexOfDataContainer
 * @function
 */
	

/**
 * Destroys all the dataContainers in the aggregation 
 * named <code>dataContainers</code>.
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#destroyDataContainers
 * @function
 */


/**
 * Getter for aggregation <code>actionBar</code>.<br/>
 * aggregation on action bar control
 * 
 * @return {sap.landvisz.internal.ActionBar[]}
 * @public
 * @name sap.landvisz.LandscapeEntity#getActionBar
 * @function
 */


/**
 * Inserts a actionBar into the aggregation named <code>actionBar</code>.
 *
 * @param {sap.landvisz.internal.ActionBar}
 *          oActionBar the actionBar to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the actionBar should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the actionBar is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the actionBar is inserted at 
 *             the last position        
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#insertActionBar
 * @function
 */

/**
 * Adds some actionBar <code>oActionBar</code> 
 * to the aggregation named <code>actionBar</code>.
 *
 * @param {sap.landvisz.internal.ActionBar}
 *            oActionBar the actionBar to add; if empty, nothing is inserted
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#addActionBar
 * @function
 */

/**
 * Removes an actionBar from the aggregation named <code>actionBar</code>.
 *
 * @param {int | string | sap.landvisz.internal.ActionBar} vActionBar the actionBar to remove or its index or id
 * @return {sap.landvisz.internal.ActionBar} the removed actionBar or null
 * @public
 * @name sap.landvisz.LandscapeEntity#removeActionBar
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>actionBar</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.landvisz.internal.ActionBar[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.LandscapeEntity#removeAllActionBar
 * @function
 */

/**
 * Checks for the provided <code>sap.landvisz.internal.ActionBar</code> in the aggregation named <code>actionBar</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.landvisz.internal.ActionBar}
 *            oActionBar the actionBar whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.LandscapeEntity#indexOfActionBar
 * @function
 */
	

/**
 * Destroys all the actionBar in the aggregation 
 * named <code>actionBar</code>.
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#destroyActionBar
 * @function
 */


/**
 * Getter for aggregation <code>entityStatus</code>.<br/>
 * Modeling status icon
 * 
 * @return {sap.ui.commons.Image}
 * @public
 * @name sap.landvisz.LandscapeEntity#getEntityStatus
 * @function
 */


/**
 * Setter for the aggregated <code>entityStatus</code>.
 * @param {sap.ui.commons.Image} oEntityStatus
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#setEntityStatus
 * @function
 */
	

/**
 * Destroys the entityStatus in the aggregation 
 * named <code>entityStatus</code>.
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#destroyEntityStatus
 * @function
 */


/**
 * fires an event on hovering over identification system icon
 *
 * @name sap.landvisz.LandscapeEntity#mouseOverIdenIcon
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'mouseOverIdenIcon' event of this <code>sap.landvisz.LandscapeEntity</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.LandscapeEntity</code>.<br/> itself. 
 *  
 * fires an event on hovering over identification system icon
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.LandscapeEntity</code>.<br/> itself.
 *
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#attachMouseOverIdenIcon
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'mouseOverIdenIcon' event of this <code>sap.landvisz.LandscapeEntity</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#detachMouseOverIdenIcon
 * @function
 */

/**
 * Fire event mouseOverIdenIcon to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.LandscapeEntity#fireMouseOverIdenIcon
 * @function
 */


/**
 * fires an event on clicking the modelling status
 *
 * @name sap.landvisz.LandscapeEntity#statusSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'statusSelect' event of this <code>sap.landvisz.LandscapeEntity</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.LandscapeEntity</code>.<br/> itself. 
 *  
 * fires an event on clicking the modelling status
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.LandscapeEntity</code>.<br/> itself.
 *
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#attachStatusSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'statusSelect' event of this <code>sap.landvisz.LandscapeEntity</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#detachStatusSelect
 * @function
 */

/**
 * Fire event statusSelect to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.LandscapeEntity#fireStatusSelect
 * @function
 */


/**
 * Fired when info Icon of track entity clicked
 *
 * @name sap.landvisz.LandscapeEntity#trackInfoPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'trackInfoPress' event of this <code>sap.landvisz.LandscapeEntity</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.LandscapeEntity</code>.<br/> itself. 
 *  
 * Fired when info Icon of track entity clicked
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.LandscapeEntity</code>.<br/> itself.
 *
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#attachTrackInfoPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'trackInfoPress' event of this <code>sap.landvisz.LandscapeEntity</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeEntity#detachTrackInfoPress
 * @function
 */

/**
 * Fire event trackInfoPress to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.LandscapeEntity} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.LandscapeEntity#fireTrackInfoPress
 * @function
 */

// Start of sap/landvisz/LandscapeEntity.js
///**
// * This file defines behavior for the control,
// */




sap.landvisz.LandscapeEntity.prototype.init = function() {
	this.initializationDone = false;
	this.top = 0;
	this.explodeViewClosed = true;
	this.left = 0;
	this.oHLayout = null;
	this.firstTime = true;
	var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
	this.internalEvent = false;
	this.showMax = true;
	this._imgResourcePath = sap.ui.resource('sap.landvisz',
			'themes/base/img/framework/');
	this._imgFolderPath = "16x16/";
	this.maxIconSrc = this._imgResourcePath + this._imgFolderPath
			+ "maximize_enable_dark.png";
	this.restoreIconSrc = this._imgResourcePath + this._imgFolderPath
			+ "restore_enable_dark.png";
	this.smvIconSrc = this._imgResourcePath + +this._imgFolderPath
			+ "openshowall_enable_dark.png";
	this.smvCollapseIconSrc = this._imgResourcePath + +this._imgFolderPath
			+ "closeshowall_enable_dark.png";

	this.entityAction;
	this.entityActionArray = new Array();

	var oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.landvisz");
	this.SHOW_ALL_TEXT = oBundle.getText("SHOW_ALL");
	this.COLLAPSE_TEXT = oBundle.getText("COLLAPSE_ALL");
	this.MAXIMIZE_TEXT = oBundle.getText("MAXIMIZE");
	this.RESTORE_TEXT = oBundle.getText("RESTORE");
	this.NEXT = oBundle.getText("NEXT");
	this.PREVIOUS = oBundle.getText("PREVIOUS");

	this.createActionButtons(this.SHOW_ALL_TEXT, "showAll", this.smvIconSrc);
	this.createActionButtons(this.COLLAPSE_TEXT, "collapseAll",
			this.smvCollapseIconSrc);
	this.createActionButtons(this.MAXIMIZE_TEXT, "max", this.maxIconSrc);
	this.createActionButtons(this.RESTORE_TEXT, "restore", this.restoreIconSrc);

	this.dialogArray = new Array();
	this.propertyArray = new Array();
	this.expVisible = false;
	this.showMiniNavigation = true;
	this.hasNavigationEvent = false;
	this.hasEntityEvent = false;
	this.containerEvent = false;
	this.maxEnabled = true;
	this.sViewWidth = 0;
	this.sViewHeight = 0;
	this.viewType = "";
	this.showOverlay = false;
	this.overlayFilter = "";
	this.oDialog = new sap.ui.commons.Dialog({
		modal : false,
	});

	this.previousClicked = false;
	this.display = "block";
};

sap.landvisz.LandscapeEntity.prototype.exit = function() {
	this.oHLayout && this.oHLayout.destroy();
	this.oVLayout && this.oVLayout.destroy();
};

sap.landvisz.LandscapeEntity.prototype.createActionButtons = function(tooltip,
		id, iconURI) {
	var identificationHdrID = this.getId();
	this.entityAction = new sap.landvisz.internal.EntityAction(
			identificationHdrID + id + "EntityAction");
	this.entityAction.setActionTooltip(tooltip);
	this.entityActionArray.push(this.entityAction);

};

/**
 * Create the composite parts out of the current settings. Called by the
 * renderer just before rendering
 * 
 * @private
 */
sap.landvisz.LandscapeEntity.prototype.initControls = function() {

	var identificationHdrID = this.getId();

	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.landvisz");
	if (!this.oVLayout)
		this.oVLayout = new sap.ui.commons.layout.VerticalLayout(
				identificationHdrID + "-CLVEntityVLayout");
	if (!this.oVLayoutContainer)
		this.oVLayoutContainer = new sap.ui.commons.layout.VerticalLayout(
				identificationHdrID + "-CLVEntityVLayoutContainer");
	if (!this.oVLayoutProperties)
		this.oVLayoutProperties = new sap.ui.commons.layout.VerticalLayout(
				identificationHdrID + "-CLVEntityVLayoutProperties");
	if (!this.oHLayout)
		this.oHLayout = new sap.ui.commons.layout.HorizontalLayout(
				identificationHdrID + "CLVEntityHLayout");
	if (!this.oIdnBar)
		this.oIdnBar = new sap.landvisz.internal.IdentificationBar(
				identificationHdrID + "-CLVEntityIdnRegion");
	if (!this.modelStatus)
		this.modelStatus = new sap.landvisz.internal.ModelingStatus(
				identificationHdrID + "-CLVEntityModelingStatus");
	if (!this.propertyHeaders)
		this.propertyHeaders = new Array();
	this.selectedIndex = 0;
	this.dataContainer;
	this.headerBtn;
	this.navItem;
	this.isAggregated;
	if (!this.oHLayoutMiniNavigation)
		this.oHLayoutMiniNavigation = new sap.ui.commons.layout.HorizontalLayout(
				identificationHdrID + "CLVEntityMiniNavigationHLayout");

	if (!this.oHLayoutAction)
		this.oHLayoutAction = new sap.ui.commons.layout.HorizontalLayout(
				identificationHdrID + "CLVEntityActions");

	if (!this.oHLayoutAllAction)
		this.oHLayoutAllAction = new sap.ui.commons.layout.HorizontalLayout(
				identificationHdrID + "CLVEntityAllActions");

	this.smvContainer;
	this.containerWidth;
	this.oToolBarBtn;
	this.visibleTabCount = 0;

	// changes for tab renderer
	if (!this.entityHeader)
		this.entityHeader = new sap.ui.commons.TabStrip(identificationHdrID
				+ "-CLVTabStrip");

	if (!this.oHeadersLayout)
		this.oHeadersLayout = new sap.ui.commons.layout.HorizontalLayout(
				identificationHdrID + "-CLVHeadersLayout");

	if (!this.previousIcon)
		this.nextIcon = new sap.ui.commons.Image(identificationHdrID
				+ "-NextImage");
	if (!this.previousIcon)
		this.previousIcon = new sap.ui.commons.Image(identificationHdrID
				+ "-PreviousImage");

	if (!this.oSingleHeaderLayout)
		this.oSingleHeaderLayout = new sap.ui.commons.layout.HorizontalLayout(
				identificationHdrID + "-oSingleHeaderLayout");
	if (!this.oSingleHeaderLabel)
		this.oSingleHeaderLabel = new sap.ui.commons.Label(identificationHdrID
				+ "-oSingleHeaderLabel");

	if (!this.oVLayoutOverlay)
		this.oVLayoutOverlay = new sap.ui.commons.layout.VerticalLayout(
				identificationHdrID + "-vlayoutOverlay");
	this.nextEnabled = false;
	this.previousEnable = false;

	this.entityMaximized;
	
	var that = this;
					this.infoIcon = new sap.ui.core.Icon({src:"sap-icon://hint",
													  press: function(){
														  that.fireTrackInfoPress();
													  }
													}).addStyleClass('trackInfoIcon');

};
// sap.landvisz.LandscapeEntity.prototype.select = function(oEvent) {
// this.fireSelect();
// };

sap.landvisz.LandscapeEntity.prototype.onclick = function(oEvent) {
	// if (sap.landvisz.EntityConstants.internalEvent == true) {
	// sap.landvisz.EntityConstants.internalEvent = false;
	// this.fireSelect();
	// }
	//
	if (oEvent.srcControl.getTooltip() == this.MAXIMIZE_TEXT)
		this.display = "none";
	else
		this.display = "block";
};

/**
 * Rerendering handling
 * 
 * @private
 */
sap.landvisz.LandscapeEntity.prototype.onAfterRendering = function() {

	setTimeout(function() {
		var smv = jQuery.sap.byId("SMV");
		var smvChild;
		if (smv && smv.length > 0) {
			for ( var i = 0; i < smv[0].children.length; i++) {
				// smv[0].children[i].show('slow');
				smvChild = jQuery.sap.byId(smv[0].children[i].id);
				smvChild.show(700);

			}
		}
	}, 800);
	if (this.entityMaximized == true) {
	
	var mininavigationmaxWidth = this.containerWidth - 2;
	jQuery.sap.byId(this.oHLayoutMiniNavigation.getId())
				.css({
					width :  mininavigationmaxWidth,
				});
	
		var identificationHdrID = this.getId();
		var propHeight = this.sViewHeight - 32 - 41;
		var propWidth = this.sViewWidth - 33 - 100;
		jQuery.sap.byId(identificationHdrID + "-CLVEntityVLayoutProperties")
				.css({
					height : propHeight,
					width : propWidth,
					"display" : this.display
				});
	}
	var layoutWidth = this.containerWidth;
	if (this.entityMaximized != true)
		layoutWidth = (layoutWidth * 12);
	var headerLayout = jQuery.sap.byId(this.oHeadersLayout.getId());

	headerLayout.css({
		width : layoutWidth,
	});

	var navigationTabs = this.oHeadersLayout.getContent();
	var navTab;
	var navTabHtml;
	if (navigationTabs && navigationTabs.length > 1) {

		for ( var i = 0; i < navigationTabs.length; i++) {
			navTab = navigationTabs[i];
			navTabHtml = jQuery.sap.byId(navTab.getId());
			if (navTab.inDisplay == true) {
				navTabHtml.show();
			} else
				navTabHtml.hide();
		}
	}

	var tabs = this.getDataContainers();
	var tab;
	var tabHtml;
	if (tabs && tabs.length > 1) {

		for ( var i = 0; i < tabs.length; i++) {
			tab = tabs[i];
			tabHtml = jQuery.sap.byId(tab.getId());
			if (tab.inDisplay == true) {
				tabHtml.show(700);
			} else
				tabHtml.hide(500);
		}
	}
	this.previousClicked = false;
};

}; // end of sap/landvisz/LandscapeEntity.js
if ( !jQuery.sap.isDeclared('sap.landvisz.LandscapeViewerRenderer') ) {
/*!
*  @copyright 2012-2014 SAP SE. All rights reserved@
*/
jQuery.sap.require('sap.ui.commons.layout.ResponsiveFlowLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.layout.ResponsiveFlowLayoutData'); // unlisted dependency retained

jQuery.sap.declare("sap.landvisz.LandscapeViewerRenderer");

jQuery.sap.require('sap.landvisz.libs.lvsvg'); // unlisted dependency retained

/**
* @class LandscapeViewer renderer.
* @static
*/

sap.landvisz.LandscapeViewerRenderer = {};

sap.landvisz.LandscapeViewerRenderer.render = function(oRm, oControl) {

       if (!this.initializationDone) {
             oControl.initControls();
             oControl.initializationDone = true;
             oRm.write("<div");
             oRm.writeControlData(oControl);
             oRm.addClass("sapLandviszViewMainContainer");
             oRm.writeClasses();

             oRm.addStyle("width", "100%");
             oRm.addStyle("height", "100%");
             oRm.writeStyles();
             oRm.write(">");

           if (oControl.getVisibleDependency() == sap.landvisz.DependencyVisibility.BOTH) {
                  oControl.networkViewVisible = true;
                  oControl.boxViewVisible = true;
           }else if (oControl.getVisibleDependency() == sap.landvisz.DependencyVisibility.NETWORK) {
                  oControl.networkViewVisible = true;
                  oControl.boxViewVisible = false;
           }

           else if (oControl.getVisibleDependency() == sap.landvisz.DependencyVisibility.BOX) {
                  oControl.networkViewVisible = false;
                  oControl.boxViewVisible = true;
           }


             this._renderTitle(oRm, oControl);
             if (oControl.getViewType() == sap.landvisz.ViewType.SOLUTION_VIEW) {
                    this._renderSolutionView(oRm, oControl);
             }else {
                    oRm.write("<div");
                    oRm.writeAttributeEscaped("id", oControl.getId() + "-viewLables");
                    oRm.addClass("sapLandviszViews");
                    oRm.writeClasses();
                    oRm.write(">");

                    if (oControl.networkViewVisible == true)
                           this._renderNetworkViewHeader(oRm, oControl);
                    if (oControl.boxViewVisible == true)
                           this._renderBoxViewHeader(oRm, oControl);
                    oRm.write("</div>");

                    if (oControl.getShowDependencyNavigator() == true)
                           this._renderNavigationPath(oRm, oControl);

                    if (oControl.getShowClose() == true)
                           this._renderCloseButton(oRm, oControl);

                    if (oControl.getViewType() == sap.landvisz.ViewType.SELECTION_VIEW)
                           this._renderSelectionView(oRm, oControl);
                    else if (oControl.getViewType() == sap.landvisz.ViewType.DEPENDENCY_VIEW) {
                           this._renderDependencyView(oRm, oControl);
                    }

                    if (oControl.getViewType() == sap.landvisz.ViewType.DEPENDENCY_VIEW)
                           this._renderNavigationPanel(oRm, oControl);
             }
             oRm.write("</div>");
       }

       if (oControl.currentView == sap.landvisz.DependencyType.BOX_VIEW) {
             var backup = oControl.oHLayoutConnectionEntity.getContent();
             for ( var i = 0; i < backup.length; i++) {
                    oControl.addAggregation("connectionEntities", backup[i], false);
             }
       }

       var optionsEntities = oControl.oHLayoutOptions.getContent();
       if (optionsEntities.length > 0) {
             for ( var i = 0; i < optionsEntities.length; i++)
                    if (optionsEntities[i] instanceof sap.landvisz.OptionEntity)
                           oControl.getSolutionOptions()[0]
                                        .addOptionEntity(optionsEntities[i]);
       }
       oControl.firstTime = false;
};

//renders fiori solution viewer
sap.landvisz.LandscapeViewerRenderer._renderSolutionView = function(oRm,oControl) {

       if (oControl.getShowDependencyNavigator() == true)
             this._renderNavigationPath(oRm, oControl);

       if (oControl.getShowClose() == true)
             this._renderCloseButton(oRm, oControl);

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-solutionViewLables");
       oRm.addClass("sapLandviszViews");
       oRm.writeClasses();
       oRm.write(">");
       
       this._renderComponentViewHeader(oRm, oControl);
       this._renderDeploymentViewHeader(oRm, oControl);
       oRm.write("</div>");
       
       // Bug fix to remove the top empty area in Component View
       if(oControl.getSolutionType() == sap.landvisz.SolutionType.DEPLOYMENT_VIEW)
             this._renderOptions(oRm, oControl);
       
       var systems = oControl.getSystems();
       for ( var i = 0; i < systems.length; i++)
             systems[i].setShowEntityActions(false);

       this._renderSolutionViewer(oRm, oControl);
}

// renders component view label and button
sap.landvisz.LandscapeViewerRenderer._renderComponentViewHeader = function(oRm,
             oControl) {

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-compViewLabel");
       oRm.addClass("sapLandviszView");
       oRm.writeClasses();
       oRm.write(">");
       oControl.compViewBtn.setText(oControl.getComponentViewLabel());
       oControl.compViewBtn.setLite(true);
       oControl.compViewBtn.addStyleClass("sapLandviszSolution_view_text");
       oControl.compViewBtn.setTooltip(oControl.getComponentViewTooltip());
       oControl.compViewBtn.setIcon("sap-icon://tree");
       var _that = this;
       if (oControl.firstTime == true) {
             oControl.compViewBtn.attachPress(function(oEvent) {

                                 oControl.currentSolutionView = sap.landvisz.SolutionType.COMPONENT_VIEW;

                                 oControl.compViewBtn.addStyleClass("selectedView");

                                 oControl.depViewBtn.removeStyleClass("selectedView");
                                 
                                 // fire a event from here.
                                 oControl.fireLoadSolutionView();
                           });
       }
       oRm.renderControl(oControl.compViewBtn);

       oRm.write("</div>");

};

//renders deployment view label and button
sap.landvisz.LandscapeViewerRenderer._renderDeploymentViewHeader = function(
             oRm, oControl) {

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-deploymentViewLable");
       oRm.addClass("sapLandviszView");
       oRm.writeClasses();
       oRm.write(">");
       oControl.depViewBtn.setText(oControl.getDeploymentViewLabel());
       oControl.depViewBtn.setLite(true);
       oControl.depViewBtn.addStyleClass("sapLandviszSolution_view_text");
       oControl.depViewBtn.setTooltip(oControl.getDeploymentViewTooltip());
       oControl.depViewBtn.setIcon("sap-icon://dimension");

       var _that = this;
       if (oControl.firstTime == true) {
             oControl.depViewBtn.attachPress(function(oEvent) {
                                 oControl.currentSolutionView = sap.landvisz.SolutionType.DEPLOYMENT_VIEW;

                                 oControl.depViewBtn.addStyleClass("selectedView");
                                  
                                 oControl.compViewBtn.removeStyleClass("selectedView");

                                 // fire a event from here.
                                 oControl.fireLoadSolutionView();

                           });
       }
       oRm.renderControl(oControl.depViewBtn);

       oRm.write("</div>");

};

// renders the solution viewer container
sap.landvisz.LandscapeViewerRenderer._renderSolutionViewer = function(oRm,oControl) {

      if(null!= oControl.getPlugContent())
    	 this. _renderPlugContent(oRm,oControl);

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-solutionViewContainer");
       oRm.addClass("sapLandviszSolutionViewContainer");
       oRm.writeClasses();
       var width = oControl.windowWidth - 2;
       oRm.addStyle("width", width + "px");
        var calHeight; 
       if(oControl.getSolutionType() == sap.landvisz.SolutionType.DEPLOYMENT_VIEW){
    	  calHeight = oControl.getPlugContentHeight() + 90;
//	       oRm.addStyle("height", "calc(100% - 90px)");
//	       oRm.addStyle("height", "-webkit-calc(100% - 90px)");
//	       oRm.addStyle("height", "-moz-calc(100% - 90px)");
//	       oRm.addStyle("height", "-o-calc(100% - 90px)");
    	  	oRm.addStyle("position", "absolute");
       }else{
    	   calHeight = oControl.getPlugContentHeight() + 35;
//    	   oRm.addStyle("height", "calc(100% - 35px)");
//	       oRm.addStyle("height", "-webkit-calc(100% - 35px)");
//	       oRm.addStyle("height", "-moz-calc(100% - 35px)");
//	       oRm.addStyle("height", "-o-calc(100% - 35px)");
       }
       
       
       		oRm.addStyle("height", "calc(100% - "+calHeight+"px)");
	       oRm.addStyle("height", "-webkit-calc(100% - "+calHeight+"px)");
	       oRm.addStyle("height", "-moz-calc(100% - "+calHeight+"px)");
	       oRm.addStyle("height", "-o-calc(100% - "+calHeight+"px)");
	       oRm.addStyle("top",calHeight+"px");
       oRm.writeStyles();
       oRm.write(">");
      
       this._renderSolutionContainer(oRm, oControl);
       this._renderSolution(oRm, oControl);
       if (oControl.getShowDeploymentTypeSection() == true)
             this._renderSolutionDeploymentType(oRm, oControl);
       // Bug fix to remove the top empty area in Component View
       if(oControl.getSolutionType() == sap.landvisz.SolutionType.COMPONENT_VIEW)
             this._renderOptions(oRm, oControl);
       oRm.write("</div>");
};


sap.landvisz.LandscapeViewerRenderer._renderPlugContent = function(oRm,oControl) {


	   oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-solutionPlugContent");
        oRm.addStyle("top", "32px");
        oRm.addStyle("width", "100%");
         oRm.addStyle("position", "absolute");
        oRm.writeStyles();
       oRm.write(">");
       oRm.renderControl(oControl.getPlugContent());
       oRm.write("</div>");
}

// renders solution inner container
sap.landvisz.LandscapeViewerRenderer._renderSolutionContainer = function(oRm,
             oControl) {

       var connectors = oControl.getConnectors();
       oControl.connection.init();
       var options = oControl.getSolutionOptions();
       var connectedLayout;
       if (options.length >0 && options[0].getType() == sap.landvisz.OptionType.VIEW) 
       connectedLayout = oControl.getViewConnectedLayout()
       else
       connectedLayout = oControl.connection.getBoxViewConnectedNodesLayout(connectors);
       var margin = 5;

       var boxContainerWidth = Number((oControl.entityWidth * connectedLayout.maxColumnCount)
                    + ((connectedLayout.maxColumnCount + 1) * margin));
       var boxContainerHeight = Number(oControl.boxModeHeight + oControl.entityHeight + (margin * 3));
       
       if (oControl.getSolutionOptions().length >0 && oControl.getSolutionType() == sap.landvisz.SolutionType.COMPONENT_VIEW )
             boxContainerHeight = boxContainerHeight + 50;

       if (oControl.getShowDeploymentTypeSection() == true)
             boxContainerHeight = boxContainerHeight + 40;
       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId()
                    + "-solutionInnerContainer");
       oRm.addClass("sapLandviszBoxViewBorderContainer");
       oRm.writeClasses();
       oRm.addStyle("width", boxContainerWidth + "px");
       oRm.addStyle("height", boxContainerHeight + "px");
       oRm.writeStyles();
       oRm.write(">");
       oRm.write("</div>");
};

//algorithm to render components in solution viewer inner container
sap.landvisz.LandscapeViewerRenderer._renderSolution = function(oRm, oControl) {

	oControl.connection.init();
	var options = oControl.getSolutionOptions();
	var connectedLayout;
	if (options.length >0 && options[0].getType() == sap.landvisz.OptionType.VIEW) 
       connectedLayout = oControl.getViewConnectedLayout()
    else { 
    
           connectedLayout = oControl.getEntityConnectedLayout()
//    	var connectors = oControl.getConnectors();
//       connectedLayout = oControl.connection.getBoxViewConnectedNodesLayout(connectors);
         }
       var entityID;
       var connectionId;
       var margin = 5;

       if (connectedLayout) {
             var boxContainerId = oControl.getId() + "-solutionInnerContainer";
             var boxContainer = jQuery.sap.byId(boxContainerId);

             setTimeout(function() {
                    boxContainer.css("display", "block");
             }, 1200);

             oControl.visibleEntities = [];
             var systems = oControl.getSystems();
             for ( var i = 0; i < systems.length; i++) {
                    entityID = systems[i].getSystemId();
                    var labelWidth = 0;
                    labelWidth = 30 + margin;
                    var actualMargin = 30;
                    if (connectedLayout[entityID]) {

                           var leftPos = 0;
                           if (connectedLayout.thirdLevelEntitiesCount > 0)
                                 leftPos = 30;
                           var topPos = 0;
                           leftPos += Number((connectedLayout[entityID].col * (oControl.entityWidth))
                                        + ((connectedLayout[entityID].col + 1) * margin));

                           topPos += Number(((connectedLayout[entityID].row - 1) * (oControl.entityHeight))
                                        + ((connectedLayout[entityID].row + 1) * margin)
                                        + oControl.boxModeHeight);

                           systems[i].left = leftPos;
                           systems[i].top = topPos;
                           systems[i].viewType = sap.landvisz.ViewType.SOLUTION_VIEW;
                           oControl.visibleEntities.push(systems[i]);
                           oRm.renderControl(systems[i]);
                    }

                    else {
                           systems[i].viewType = sap.landvisz.ViewType.SOLUTION_VIEW;
                           systems[i].addStyleClass("sapLandviszDisplayNone");
                           oRm.renderControl(systems[i]);
                    }
             }
             // render Connection Entity
             var connectionEntities = oControl.getConnectionEntities();
             var connectionEntityWidth = 0;
             for ( var i = 0; i < connectionEntities.length; i++) {
                    connectionEntityWidth = 0;
                    connectionId = connectionEntities[i].getConnectionId();
                    if (connectedLayout[connectionId]) {
                           leftPos = Number(connectedLayout[connectionId].col
                                        * (oControl.entityWidth + 10))
                                        + margin;
                           topPos = Number(connectedLayout[connectionId].row
                                        * (oControl.entityHeight + 10))
                                        + margin;

                           connectionEntityWidth = Number(((connectedLayout[connectionId].colspan) * oControl.entityWidth)
                                        + ((connectedLayout[connectionId].colspan - 1) * margin));
                    }
                    connectionEntities[i].viewType = sap.landvisz.ViewType.SOLUTION_VIEW;
                    connectionEntities[i].left = leftPos;
                    connectionEntities[i].top = topPos;
                    connectionEntities[i].width = connectionEntityWidth;
                    connectionEntities[i].height = 90;

                    connectionEntities[i].innerLeft = 0;
                    connectionEntities[i].innerTop = 0;
                    connectionEntities[i].innerWidth = connectionEntityWidth;
                    connectionEntities[i].innerHeight = 90;

                    oRm.renderControl(connectionEntities[i]);
                    connectionEntities[i].addStyleClass("connectionBox");
             }
       }

       var navigationContainer = jQuery.sap.byId(oControl.getId() + "-navigation");
       var navigator = jQuery.sap.byId(oControl.getId() + "-navigation_navigator");
       navigationContainer.animate({
             height : '0px'
       }, 900, "swing", function(e) {
             navigationContainer.hide();
       });

};

// renders deployment view for solution viewer
sap.landvisz.LandscapeViewerRenderer._renderSolutionDeploymentType = function(
             oRm, oControl) {

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId()
                    + "-deploymentTypeContainer");
       oRm.addClass("sapLandviszDeploymentTypeContainer");
       oRm.writeClasses();
       oRm.write(">");

       var options = oControl.getSolutionOptions();
       var option;
       var optionsEntities;
       var optionSources;
       var entityid;
       var entity;
       var nextEntity;
       var count = 0;
       var selected;
       var depType;
       var srcEntity;
       var depTypeControls;
       optionsEntities = oControl.oHLayoutOptions.getContent();
       for ( var j = 1; j < optionsEntities.length; j++) {

             depTypeControls = new Array();
             optionSources = optionsEntities[j].getOptionSources();
             selected = optionsEntities[j].getSelected();

             for ( var k = 0; k < optionSources.length; k++) {
                    entityid = optionSources[k].getSource();

                    entity = this._getDesiredSystem(oControl, optionSources[k]
                                 .getSource());

                    if (null != entity
                                 && entity.getComponentType() == sap.landvisz.ComponentType.notDefined)
                           continue;
                    else if (k + 1 < optionSources.length) {

                           nextEntity = this._getDesiredSystem(oControl,
                                        optionSources[k + 1].getSource());

                           if (entity.getComponentType() == nextEntity.getComponentType()) {
                                 count++;
                           } else {
                                 srcEntity = this._getDesiredSystem(oControl,
                                               optionSources[k - count].getSource());
                                 depType = this._renderDeploymentType(oRm, oControl, count,
                                               srcEntity.left, entity.getComponentType(), entity
                                                            .getComponentTypeTooltip(), selected,
                                               srcEntity.getSystemId());
                                 depTypeControls.push(depType);
                                 count = 0
                           }
                    } else {
                           srcEntity = this._getDesiredSystem(oControl, optionSources[k
                                        - count].getSource());
                           depType = this._renderDeploymentType(oRm, oControl, count,
                                        srcEntity.left, entity.getComponentType(), entity
                                                     .getComponentTypeTooltip(), selected, srcEntity
                                                     .getSystemId());
                           depTypeControls.push(depType);
                           count = 0
                    }

             }

             oControl.depTypeOptions[optionsEntities[j].getId()] = depTypeControls;
       }
       oRm.write("</div>");
}


//returns desired system
sap.landvisz.LandscapeViewerRenderer._getDesiredSystem = function(oControl, id) {

       var systems = oControl.getSystems();
       for ( var i = 0; i < systems.length; i++) {
             if (systems[i].getSystemId() == id)
                    return systems[i];
       }

       return null;
}

// renders the deployment type
sap.landvisz.LandscapeViewerRenderer._renderDeploymentType = function(oRm,
             oControl, count, left, type, tooltip, selected, srcEntityId) {

       var oDepType = new sap.landvisz.internal.DeploymentType();
       oDepType.left = left;
       oDepType.count = count;
       oDepType.type = type;
       oDepType.srcEntityId = srcEntityId;
       oDepType.setTooltip(tooltip);
       oDepType.standardWidth = oControl.entityWidth;
       if (selected == true)
             oDepType.addStyleClass("sapLandviszDisplayBlock");
       else
             oDepType.addStyleClass("sapLandviszDisplayNone");
       oRm.renderControl(oDepType);
       return oDepType;
}

//renders option container
sap.landvisz.LandscapeViewerRenderer._renderOptions = function(oRm, oControl) {
       var options = oControl.getSolutionOptions();
       if(options.length <=0)
             return;

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-optionContainer");
       if (oControl.getSolutionOptionType() == sap.landvisz.OptionType.VIEW) 
             oRm.addClass("sapLandviszOptionContainer");
       else if (oControl.getSolutionOptionType() == sap.landvisz.OptionType.ENTITY)
             oRm.addClass("sapLandviszEntityOptionContainer");
       oRm.writeClasses();

       if (oControl.getSolutionOptionType() == sap.landvisz.OptionType.VIEW){
             var width = oControl.windowWidth - 2;
             oRm.addStyle("width", width +"px");
             oRm.writeStyles();
       }
       oRm.write(">");
       this._createOptions(oRm, oControl);
       oRm.write("</div>");
}

// creates deployment options
sap.landvisz.LandscapeViewerRenderer._createOptions = function(oRm, oControl) {
       if (oControl.getSolutionOptionType() == sap.landvisz.OptionType.VIEW) {
             this._renderViewOptions(oRm, oControl, oControl.getSolutionOptionType());
       } else if (oControl.getSolutionOptionType() == sap.landvisz.OptionType.ENTITY) {
             this._createEntityOptions(oRm, oControl);
       }

}

// renders deployment options when option type is entity
sap.landvisz.LandscapeViewerRenderer._createEntityOptions = function(oRm, oControl) {
       var options = oControl.getSolutionOptions();
       var optionsEntities;
       var systems = oControl.getSystems();
       var srcLeft;
       var srcTop;
       var that = this;
       for ( var i = 0; i < options.length; i++) {
             optionsEntities = options[i].getOptionEntities();
             if("" == oControl.srcEntity)
             oControl.srcEntity = options[i].getCurrentEntity();
             for ( var j = 0; j < optionsEntities.length; j++) {
                    for ( var l = 0; l < systems.length; l++) {
                           if (oControl.srcEntity == systems[l].getSystemId()) {
                                 srcLeft = systems[l].left;
                                 srcTop = systems[l].top;
                                 break;
                           }
                    }

                    // This logic is not correct we need to align this in the middle may be use a Hlayout
                    srcLeft = srcLeft + oControl.entityWidth / 2 - 50 + 50 * j;
                    optionsEntities[j].left = srcLeft;
                    optionsEntities[j].optionOn = options[i].getType();
                    optionsEntities[j].optionSrcEntityId = oControl.srcEntity;
                    optionsEntities[j].attachEvent(
                                               "optionSelected",
                                               function(event) {
                                                     var optionBtn = event.getSource();
                                                     var sources = optionBtn.getOptionSources();
                                                     var entityTobePlaced;
                                                     for ( var i = 0; i < sources.length; i++) {
                                                            entityTobePlaced = sources[i].getSource();
                                                     }

                                                     if (oControl.srcEntity == entityTobePlaced)
                                                            return;
                                                     oControl.selectedOptionEntity = optionBtn;
                                                     for ( var i = 0; i < options.length; i++) {
                                                            optionsEntities = options[i]
                                                                          .getOptionEntities();
                                                            for ( var j = 0; j < optionsEntities.length; j++) {
                                                                   if (oControl.srcEntity == optionsEntities[j].optionSrcEntityId
                                                                                && optionBtn.getId() == optionsEntities[j]
                                                                                             .getId()) {
                                                                          jQuery.sap
                                                                                       .byId(
                                                                                                    optionsEntities[j]
                                                                                                                 .getId())
                                                                                       .css(
                                                                                                    {
                                                                                                           "background-color" : "#008fd3",
                                                                                                           "color" : "#ffffff"
                                                                                                    });
                                                                   } else {
                                                                          jQuery.sap
                                                                                       .byId(
                                                                                                    optionsEntities[j]
                                                                                                                 .getId())
                                                                                       .css(
                                                                                                    {
                                                                                                           "background-color" : "transparent",
                                                                                                           "color" : "#00669c"
                                                                                                    });

                                                                          optionsEntities[j]
                                                                                       .setSelected(false);
                                                                  }

                                                            }
                                                     }
                                                     that._makeOptionVisible(oRm, oControl, event);
                                               });
                    oRm.renderControl(optionsEntities[j]);
             }
       }
}

// renders options when option entity is of type view
sap.landvisz.LandscapeViewerRenderer._renderViewOptions = function(oRm, oControl, optionType) {
       var options = oControl.getSolutionOptions();
       var optionsEntities = options[0].getOptionEntities();
       if (optionsEntities.length > 0) {
             var title = oControl.getDeploymentOptionsLabel();
             oControl.deploymentOptionLabel.setText(title);
             oControl.deploymentOptionLabel.setTooltip(oControl.getDeploymentOptionsTooltip());
              oControl.deploymentOptionLabel.addStyleClass("sapLandviszOptionLabel");
             oControl.oHLayoutOptions.addContent(oControl.deploymentOptionLabel);
       }
       var that = this;
       for ( var i = 0; i < optionsEntities.length; i++) {
             optionsEntities[i].optionOn = optionType;
             if (optionsEntities[i].getSelected() == true) {
                    oControl.currentViewOptionId = optionsEntities[i].getId();
                    oControl.selectedOptionEntity = optionsEntities[i];
             }
             optionsEntities[i].attachEvent("optionSelected", function(event) {

                    var optionBtn = event.getSource();

                    if (oControl.currentViewOptionId == optionBtn.getId())
                           return;
                    oControl.selectedOptionEntity = optionBtn;
                    var optionEntity;
                    optionsEntities = oControl.oHLayoutOptions.getContent();
                    optionsEntities = oControl.getSolutionOptions()[0].getOptionEntities();

                    for ( var j = 0; j < optionsEntities.length; j++) {
                           optionEntity = jQuery.sap.byId(optionsEntities[j].getId());
                           optionEntity.css({
                               "background-color" : "transparent",
                               "color" : "#00669c"
                           });
                           if (optionBtn.getId() == optionsEntities[j].getId()) {
                                 optionsEntities[j].setSelected(true);
                           } else {
                                 optionsEntities[j].removeStyleClass("optionSelected")
                                 optionsEntities[j].setSelected(false);
                           }
                    }
                    that._makeOptionVisible(oRm, oControl, event);
             });

             oControl.oHLayoutOptions.addContent(optionsEntities[i]);
       }
       oRm.renderControl(oControl.oHLayoutOptions);
};

// turns visibility of options on/off 
sap.landvisz.LandscapeViewerRenderer._makeOptionVisible = function(oRm,
             oControl, event) {
       var optionBtn = event.getSource();

       if (optionBtn.optionOn == sap.landvisz.OptionType.VIEW) {
             this._makeViewOptionVisible(oRm, oControl, optionBtn);
       } else if (optionBtn.optionOn == sap.landvisz.OptionType.ENTITY) {
             this._makeEntityOptionVisible(oRm, oControl, optionBtn);
       }

}

// turns visibility of options on/off for type View
sap.landvisz.LandscapeViewerRenderer._makeViewOptionVisible = function(oRm,
             oControl, optionBtn) {

       if (oControl.currentViewOptionId == optionBtn.getId())
             return;
       oControl.currentViewOptionId = optionBtn.getId();

       var systems = oControl.getSystems();
       var system;
       for ( var i = 0; i < systems.length; i++) {
             systems[i].removeStyleClass("sapLandviszDisplayNone");
             system = jQuery.sap.byId(systems[i].getId());
             system.hide("600");
       }

       var depContainerid = oControl.getId() + "-deploymentTypeContainer";
       var depContainer = jQuery.sap.byId(depContainerid);
       var selectedDepTypes = oControl.depTypeOptions[oControl.selectedOptionEntity.getId()];
       var deploymentTypes = depContainer.children();
       var deploymentType;
       for ( var x = 0; x < deploymentTypes.length; x++) {
             deploymentType = jQuery.sap.byId(deploymentTypes[x].id);
             deploymentType.css({
                    "display" : "none"
             });
       }
       var sources = optionBtn.getOptionSources();
       var entityTobePlaced;
       var connectors = oControl.getConnectors();
       // we are taking a tradeoff that there is only one connection entity for the
       // Solution view & the same is declared as source for the connector
       var connectionEntityId = connectors[0].getSource();
       var connectorArray = [];
       var connector;
       for ( var i = 0; i < sources.length; i++) {
             connector = new sap.landvisz.Connector();
             entityTobePlaced = sources[i].getSource();
             connector.setSource(connectionEntityId);
             connector.setTarget(entityTobePlaced);
             connectorArray.push(connector);
       }

       var entityID;
       var connectionId;
       var margin = 5;
       var system;
       var connectionEntityWidth;
       oControl.connection.init();
       var connectedLayout = oControl.connection.getBoxViewConnectedNodesLayout(connectorArray);
       if (connectedLayout) {
             var boxContainerWidth = Number((oControl.entityWidth * connectedLayout.maxColumnCount)
                           + ((connectedLayout.maxColumnCount + 1) * margin));
             var boxContainerHeight = Number(oControl.boxModeHeight + oControl.entityHeight + (margin * 3));

             var depContainerid = oControl.getId() + "-deploymentTypeContainer";
             if (selectedDepTypes && selectedDepTypes.length > 0){
                    boxContainerHeight = boxContainerHeight + 40;
                    jQuery.sap.byId(depContainerid).css({
   					 "display" : "block",
   				 });
             }else{
            	 jQuery.sap.byId(depContainerid).css({
					 "display" : "none",
				 });
             }

             var boxContainerId = oControl.getId() + "-solutionInnerContainer";
             var boxContainer = jQuery.sap.byId(boxContainerId);
             boxContainer.animate({
                    width : boxContainerWidth,
                    height : boxContainerHeight
             }, 400);

             setTimeout(
            		 function() {


            			 var boxContainerId = oControl.getId() + "-solutionInnerContainer";
            			 var boxContainer = jQuery.sap.byId(boxContainerId);
            			 var boxLeftMargine = boxContainer[0].offsetLeft;
            			 var boxTopMargine = boxContainer[0].offsetTop;

            			 var deploymentOptionsTop = 0;
            			 var connectionEntities = oControl.getConnectionEntities();
            			 for ( var i = 0; i < connectionEntities.length; i++) {
            				 connectionId = connectionEntities[i].getConnectionId();
            				 if (connectedLayout[connectionId]) {
            					 leftPos = Number(connectedLayout[connectionId].col
            							 * (oControl.entityWidth + 10));
            					 topPos = Number(connectedLayout[connectionId].row
            							 * (oControl.entityHeight + 10));
            					 leftPos = Number(connectedLayout[connectionId].col
            							 * (oControl.entityWidth + 10))
            							 + margin;
            					 topPos = Number(connectedLayout[connectionId].row
            							 * (oControl.entityHeight + 10))
            							 + margin;
            					 connectionEntities[i].left = leftPos
            					 + boxLeftMargine;
            					 deploymentOptionsTop = connectionEntities[i].top ;
            					 connectionEntities[i].top = leftPos + boxTopMargine;
            					 connectionEntityWidth = Number(((connectedLayout[connectionId].colspan) * oControl.entityWidth)
            							 + ((connectedLayout[connectionId].colspan - 1) * margin));
            					 var entity = jQuery.sap.byId(connectionEntities[i]
            					 .getId());

            					 entity.animate({
            						 left : connectionEntities[i].left,
            						 top : connectionEntities[i].top,
            						 width : connectionEntityWidth,
            						 height : 90,
            					 }, 600, 'swing');

            					 var connectionRow = jQuery.sap
            					 .byId(connectionEntities[i].getId()
            							 + "connectionRow");

            					 connectionRow.animate({
            						 width : connectionEntityWidth,
            						 height : 90,
            					 }, 600, 'swing');
            					 
            					 var conLbl =  jQuery.sap.byId(connectionEntities[i].getId() +"-connectionLabel");
            					 var conLblWidth = connectionEntityWidth - 68;
            					  conLbl.css({
            						  	"max-width" : conLblWidth,
            					  	});
            				 }
            			 }
            			 oControl.visibleEntities = [];
            			 for ( var i = 0; i < systems.length; i++) {
            				 entityID = systems[i].getSystemId();
            				 var labelWidth = 0;
            				 labelWidth = 30 + margin;
            				 var actualMargin = 30;
            				 if (connectedLayout[entityID]) {
            					 var leftPos = 0;
            					 var topPos = 0;
            					 leftPos += Number((connectedLayout[entityID].col * (oControl.entityWidth))
            							 + ((connectedLayout[entityID].col + 1) * margin));

            					 topPos += Number(((connectedLayout[entityID].row - 1) * (oControl.entityHeight))
            							 + ((connectedLayout[entityID].row + 1) * margin)
            							 + oControl.boxModeHeight);
            					 systems[i].left = leftPos + boxLeftMargine;
            					 systems[i].top = topPos + boxTopMargine;
            					 system = jQuery.sap.byId(systems[i].getId());
            					 system.css({
            						 left : leftPos + boxLeftMargine,
            						 top : topPos + boxTopMargine
            					 });
            					 system.show("700");
            					 oControl.visibleEntities.push(systems[i]);
            				 }

            			 }

            			 var depContainerid = oControl.getId() + "-deploymentTypeContainer";
            			 var depContainer = jQuery.sap.byId(depContainerid);

            			 depContainer.css({
            				 left : boxLeftMargine,
            				 width : boxContainerWidth,
            			 });

            			 var depLeft;
            			 var srcEntity;
            			 if (selectedDepTypes && selectedDepTypes.length > 0) {
            				 for ( var x = 0; x < selectedDepTypes.length; x++) {
            					 deploymentType = selectedDepTypes[x];
            					 for ( var i = 0; i < systems.length; i++) {
            						 if (systems[i].getSystemId() == deploymentType.srcEntityId) {
            							 srcEntity = systems[i];
            							 break;
            						 }
            					 }
            					 depLeft = srcEntity.left - boxLeftMargine;
            					 jQuery.sap.byId(deploymentType.getId()).css({
            						 "display" : "block",
            						 "left" : depLeft
            					 });

            				 }
            			 }

            		 }, 405);
       }
};

// turns visibility of options on/off for type entity
sap.landvisz.LandscapeViewerRenderer._makeEntityOptionVisible = function(oRm,
             oControl, optionBtn) {

       var systems = oControl.getSystems();
       var sources = optionBtn.getOptionSources();
       optionBtn.setSelected(true);
       var entityTobePlaced;
       for ( var i = 0; i < sources.length; i++) {
             entityTobePlaced = sources[i].getSource();
       }

       if (oControl.srcEntity == entityTobePlaced)
             return;
       var system;
       var srcLeft;
       var srcTop;
       var canReplace = false;
       for ( var k = 0; k < systems.length; k++) {
             if (oControl.srcEntity == systems[k].getSystemId()) {
                    system = jQuery.sap.byId(systems[k].getId());
                    srcLeft = systems[k].left;
                    srcTop = systems[k].top;
                    system.hide("800");
                    break;
             }
       }
       setTimeout(function() {
             for ( var l = 0; l < systems.length; l++) {
                    if (entityTobePlaced == systems[l].getSystemId()) {
                           system = jQuery.sap.byId(systems[l].getId());
                           system.css({
                                 left : srcLeft,
                                 top : srcTop
                           });
                           systems[l].left = srcLeft;
                           systems[l].top = srcTop;
                           systems[l].removeStyleClass("sapLandviszDisplayNone");
                           oControl.srcEntity = systems[l].getSystemId();
                           system.show("800");
                           break;

                    }
             }
       }, 810);

};

// renders navigation path in dependency view
sap.landvisz.LandscapeViewerRenderer._renderNavigationPath = function(oRm,
             oControl) {

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-navigationPath");
       oRm.addClass("sapLandviszDependencyPath");
       oRm.writeClasses();
       oRm.write(">");
       oControl.navigationPathLabel.setText(oControl.getNavigationPath());
       oControl.navigationPathLabel.setTooltip(oControl.getNavigationPath());
       oControl.navigationPathLabel
                    .addStyleClass("sapLandviszDependencyPathLabel");
       oRm.renderControl(oControl.navigationPathLabel);
       oRm.write("</div>");

};

// renders selection view/single system view
sap.landvisz.LandscapeViewerRenderer._renderSelectionView = function(oRm,
             oControl) {

       var systems = oControl.getSystems();
       var actions = systems[0].getActionBar();

       for ( var j = 0; j < actions.length; j++) {
             actions[j].attachEvent("changeView", function(event) {
                    oControl.resetView(systems[0], event.oSource);
             }, this);
       }
       var left = 0;
       var top = 0;
       var expWidth = 0;
       var expHeight = 0;
       var outerHeight = oControl.windowHeight - 28 - 2;

       oRm.write("<div");
       
       oRm.addStyle("width", "100%");
       oRm.addStyle("height", outerHeight + "px");
       oRm.addStyle("overflow", "auto");
       oRm.addStyle("box-sizing", "border-box");
       oRm.addStyle("top", "28px");
       oRm.addStyle("position", "absolute");
       oRm.writeStyles();
       oRm.writeAttributeEscaped("id", oControl.getId() + "-outerContainer");
       oRm.writeClasses();
       oRm.write(">");
       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-container");
       oRm.writeClasses();

       oRm.addStyle("position", "absolute");
       oRm.addStyle("box-sizing", "border-box");

       if (systems[0].entityMaximized == true) {
             expWidth = oControl.windowWidth - 40;
             expHeight = oControl.windowHeight - 66;
             left = 20;
             top = 20;
             systems[0].sViewWidth = expWidth;
             systems[0].sViewHeight = expHeight;
       } else if (systems[0].expVisible == true) {
             expWidth = oControl.windowWidth - 12;
             expHeight = oControl.windowHeight;
             left = 10;
             oRm.addStyle("position", "relative");
             systems[0].sViewWidth = expWidth - oControl.entityWidth;
             systems[0].sViewHeight = expHeight;
       } else {
             systems[0].sViewWidth = 0;
             systems[0].sViewHeight = 0;
       }
       oRm.addStyle("left", left + "px");
       oRm.addStyle("top", top + "px");
       if (expWidth != 0)
             oRm.addStyle("width", expWidth + "px");
       else
             oRm.addStyle("width", oControl.entityWidth + "px");
       if (expHeight != 0)
             oRm.addStyle("height", expHeight + "px");
       else
             oRm.addStyle("height", oControl.entityHeight + "px");

       oRm.writeStyles();
       oRm.write(">");
       systems[0].viewType = sap.landvisz.ViewType.SELECTION_VIEW;
       systems[0].display = "block";
       oRm.renderControl(systems[0]);
       oRm.write("</div>");
       oRm.write("</div>");

};

// renders dependency view
sap.landvisz.LandscapeViewerRenderer._renderDependencyView = function(oRm,
             oControl) {

       var systems = oControl.getSystems();

       for ( var i = 0; i < systems.length; i++)
             systems[i].setShowEntityActions(false);

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-viewContainer");
       oRm.writeClasses();
       var width = oControl.windowWidth - 2;
       var height = oControl.windowHeight - 26;
       //oRm.write(" style='");
//     oRm.write("width:" + width + "px;");
//     oRm.write("height:" + height + "px;");
//     oRm.write("position:absolute;");
//     oRm.write("overflow:hidden;");
//     oRm.write("top:" + 26 + "px;");
       //oRm.write("'");
       oRm.addStyle("width", width + "px");
       oRm.addStyle("height", height + "px");
       oRm.addStyle("position", "absolute");
       oRm.addStyle("overflow", "hidden");
       oRm.addStyle("top", 26 + "px");
       oRm.writeStyles();
       oRm.write(">");

       this._renderBoxContainer(oRm, oControl);

       if (oControl.currentView != ""
                    && oControl.currentView == sap.landvisz.DependencyType.NETWORK_VIEW)
             this._renderNetworkView(oRm, oControl)
       else if (oControl.currentView != ""
                    && oControl.currentView == sap.landvisz.DependencyType.BOX_VIEW)
             this._renderBoxView(oRm, oControl);
       else if (oControl.getVisibleDependency() == sap.landvisz.DependencyVisibility.BOTH) {
             if (oControl.getDefaultDependencyView() == sap.landvisz.DependencyType.NETWORK_VIEW)
                    this._renderNetworkView(oRm, oControl);
             if (oControl.getDefaultDependencyView() == sap.landvisz.DependencyType.BOX_VIEW)
                    this._renderBoxView(oRm, oControl);
       } else if (oControl.getVisibleDependency() == sap.landvisz.DependencyVisibility.NETWORK)
             this._renderNetworkView(oRm, oControl);
       else if (oControl.getVisibleDependency() == sap.landvisz.DependencyVisibility.BOX)
             this._renderBoxView(oRm, oControl);
       this._renderBoxViewLabels(oRm, oControl);

       oRm.write("</div>");
};

// renders close button for dependency view
sap.landvisz.LandscapeViewerRenderer._renderCloseButton = function(oRm,
             oControl) {

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-closeBtn");
       oRm.addClass("sapLandviszCloseButton");
       oRm.writeClasses();
       oRm.write(">");

       oControl.closeImg.setSrc(sap.ui.resource("sap.landvisz",
                    "themes/base/img/framework/" + "16x16" + "/close_enable_dark.png"));
       oControl.closeImg.setTooltip(oControl.getCloseButtonTooltip());
       if (oControl.firstTime == true)
             oControl.closeImg.attachPress(function(oEvent) {

                    oControl.fireClose();
             });

       oRm.renderControl(oControl.closeImg);

       oRm.write("</div>");
};

// renders network view label and button
sap.landvisz.LandscapeViewerRenderer._renderNetworkViewHeader = function(oRm,
             oControl) {

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-netwrokViewLable");
       oRm.addClass("sapLandviszView");
       oRm.writeClasses();
       oRm.write(">");
       oControl.networkViewBtn.setText(oControl.getNetworkDependencyLabel());
       oControl.networkViewBtn.setLite(true);
       oControl.networkViewBtn.addStyleClass("sapLandviszView_text");
       oControl.networkViewBtn.setTooltip(oControl.getNetworkDependencyLabel());

       var type = oControl.getViewType();
       oControl.networkViewBtn.setIcon("sap-icon://overview-chart");
       if (type == sap.landvisz.ViewType.SELECTION_VIEW) {
             oControl.networkViewBtn.setEnabled(false);
       } else if (type == sap.landvisz.ViewType.DEPENDENCY_VIEW) {
             oControl.networkViewBtn.setEnabled(true);
       }

       var _that = this;
       if (oControl.firstTime == true) {
             oControl.networkViewBtn.attachPress(function(oEvent) {

                    oControl.networkViewBtn.addStyleClass("selectedView");
                    
                    oControl.boxViewBtn.removeStyleClass("selectedView");
                    
                    _that.renderAllEntities(oRm, oControl, false);
             });
       }
       oRm.renderControl(oControl.networkViewBtn);

       oRm.write("</div>");

};

// renders box view label and button
sap.landvisz.LandscapeViewerRenderer._renderBoxViewHeader = function(oRm,
             oControl) {

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-boxViewLable");
       oRm.addClass("sapLandviszView");
       oRm.writeClasses();
       oRm.write(">");
       oControl.boxViewBtn.setText(oControl.getBoxDependencyLabel());
       oControl.boxViewBtn.setLite(true);
       oControl.boxViewBtn.addStyleClass("sapLandviszView_text");
       oControl.boxViewBtn.setTooltip(oControl.getBoxDependencyLabel());

       var type = oControl.getViewType();
       oControl.boxViewBtn.setIcon("sap-icon://table-view");
       if (type == sap.landvisz.ViewType.SELECTION_VIEW) {             
             oControl.boxViewBtn.setEnabled(false);
       } else if (type == sap.landvisz.ViewType.DEPENDENCY_VIEW) {            
             oControl.boxViewBtn.setEnabled(true);
       }

       var _that = this;
       if (oControl.firstTime == true) {
             oControl.boxViewBtn.attachPress(function(oEvent) {
                    
                    oControl.boxViewBtn.addStyleClass("selectedView");
                    
                     oControl.networkViewBtn.removeStyleClass("selectedView");
                     
                    _that.renderAllBoxViewEntities(oRm, oControl, false);
             });
       }
       oRm.renderControl(oControl.boxViewBtn);

       oRm.write("</div>");

};

// renders title for landscape viewer container
sap.landvisz.LandscapeViewerRenderer._renderTitle = function(oRm, oControl) {

       var containerheaderText;

       containerheaderText = oControl.getTitle();
       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-viewHeaderContainer");
       oRm.addClass("sapLandviszViewer_container_header");
       oRm.writeClasses();
       oRm.writeAttributeEscaped("title", containerheaderText);
       oRm.write(">");
       oRm.write(containerheaderText);
       oRm.write("</div>");
};

sap.landvisz.LandscapeViewerRenderer._renderNetworkView = function(oRm,
             oControl) {
       this.renderAllEntities(oRm, oControl, true);
};

// renders entities for network view
sap.landvisz.LandscapeViewerRenderer.renderAllEntities = function(oRm,
             oControl, isRendering) {

       var connectors = oControl.getConnectors();
       oControl.currentView = sap.landvisz.DependencyType.NETWORK_VIEW;

       var boxContainerId = oControl.getId() + "-boxViewContainer";
       var boxContainer = jQuery.sap.byId(boxContainerId);
       if (boxContainer)
             boxContainer.css("display", "none");

       var boxLevels = oControl.getBoxDependencyLevels();
       if (boxLevels) {
             for ( var i = 0; i < boxLevels.length; i++) {
                    var boxLabelId = oControl.getId() + "-boxViewLabel" + i;
                    var boxLabel = jQuery.sap.byId(boxLabelId);
                    if (boxLabel)
                           boxLabel.css("display", "none");
             }
       }
       oControl.connection.init();
        
        var connectedNodesLayout;
       if(oControl.getConnectionLine() == sap.landvisz.ConnectionLine.Line)
    	   connectedNodesLayout  = oControl.connection.getConnectedNodesLayout(connectors);
       else
         connectedNodesLayout  = oControl.connection.getConnectedNodesLayoutTrack(connectors);
         
       var systems = oControl.getSystems();
       var connectionEntities = oControl.getConnectionEntities();
       var systemsMargin = 50;
       if(connectionEntities.length>0)
    	   systemsMargin = 0;
       var entityID;
       var connectionId;
       for ( var i = 0; i < systems.length; i++) {

             entityID = systems[i].getSystemId();

             if (connectedNodesLayout[entityID]) {

                    var leftPos = 0;
                    var topPos = 0;

                    leftPos = Number(connectedNodesLayout[entityID].col
                                 * (oControl.entityWidth + 10 + systemsMargin)) ;
                    topPos = Number(connectedNodesLayout[entityID].row
                                 * (oControl.entityHeight + 10 + systemsMargin));
             }

             systems[i].left = leftPos;
             systems[i].top = topPos;
             systems[i].viewType = sap.landvisz.ViewType.DEPENDENCY_VIEW;
             if (isRendering == true)
                    oRm.renderControl(systems[i]);
             else
                    this._moveEntityToPosition(leftPos, topPos, systems[i].getId());

       }

       // render Connection Entity

       for ( var i = 0; i < connectionEntities.length; i++) {
             connectionId = connectionEntities[i].getConnectionId();

             if (oControl.firstTime == true) {
                    connectionEntities[i].attachEvent("connectionMouseover", function(
                                 event) {
                           oControl.onmouseenter(event);
                    }, this);
                    connectionEntities[i].attachEvent("connectionMouseout", function(
                                 event) {
                           oControl.onmouseleave(event);
                    }, this);

             }

             if (connectedNodesLayout[connectionId]) {
                    leftPos = Number(connectedNodesLayout[connectionId].col
                                 * (oControl.entityWidth + 10));
                    topPos = Number(connectedNodesLayout[connectionId].row
                                 * (oControl.entityHeight + 10));

             }

             connectionEntities[i].left = leftPos;
             connectionEntities[i].top = topPos;
             connectionEntities[i].width = oControl.entityWidth;
             connectionEntities[i].height = oControl.entityHeight;

             connectionEntities[i].innerLeft = (oControl.entityWidth - 50)/2;
             connectionEntities[i].innerTop = (oControl.entityHeight - 50)/2;
             connectionEntities[i].innerWidth = 50;
             connectionEntities[i].innerHeight = 50;

             connectionEntities[i].viewType = oControl.currentView;
             if (isRendering == true) {
                    connectionEntities[i]
                                  .addStyleClass("sapLandviszConnection_entity_container");
                    oRm.renderControl(connectionEntities[i]);
             } else {
                    connectionEntities[i]
                                  .addStyleClass("sapLandviszConnection_entity_container");
                    connectionEntities[i].removeStyleClass("sapLandviszConnectionBox");
                    this._animateConnectionEntityContainer(oControl.entityWidth,
                                 oControl.entityHeight, connectionEntities[i]);
             }
       }

       if (oControl.connection.svgForConnections)
             oControl.connection.svgForConnections.style("display", "block");
       else if (isRendering == false) {

             var navigationContainer = jQuery.sap.byId(oControl.getId()
                           + "-navigation");
             var navigator = jQuery.sap.byId(oControl.getId()
                           + "-navigation_navigator");
             navigationContainer.animate({
                    height : '0px'
             }, 1000, "swing", function(e) {
                    navigationContainer.hide();
             });

             setTimeout(
                           function() {

                                 if (oControl.svgForConnections) {
                                        oControl.connection.svgForConnections = oControl.svgForConnections;
                                        oControl.connection.svgForConnections.style("display",
                                                     "block");
                                 } else {
                                        var viewer = jQuery.sap.byId(oControl.getId()
                                                     + "-viewContainer");
                                        var svgWidth = viewer[0].scrollWidth - 10;
                                        var svgHeight = viewer[0].scrollHeight - 10;
                                        oControl.svgForConnections = sap.landvisz.libs.lvsvg
                                                     .getSVG(svgWidth, svgHeight, oControl.getId()
                                                                   + "-viewContainer");
                                        oControl.connection = sap.landvisz.internal.Connection;
                                        oControl.connection.svgForConnections = oControl.svgForConnections;
                                        oControl.connection
                                                      .renderConnections(oControl.getSystems(),
                                                                   oControl.getConnectionEntities(),this.getConnectionLine());
                                 }
                                 var enitityContainer = jQuery.sap.byId(oControl.getId()
                                               + "-viewContainer");
                                 var frameScrollHeight = Number(enitityContainer[0].scrollHeight);
                                 var frameScrollWidth = Number(enitityContainer[0].scrollWidth);
                                 var frameHeight = Number(enitityContainer.height());
                                 var frameWidth = Number(enitityContainer.width());

                                 if ((frameScrollWidth > frameWidth)
                                               || (frameScrollHeight > frameHeight))
                                        oControl.getVisibleRegion();

                           }, 1500);
       }

};

// renders box view container
sap.landvisz.LandscapeViewerRenderer._renderBoxContainer = function(oRm,
             oControl) {

       var connectors = oControl.getConnectors();
       oControl.connection.init();
       var connectedLayout = oControl.connection
                    .getBoxViewConnectedNodesLayout(connectors);
       var margin = 5;

       var boxContainerWidth = Number((oControl.entityWidth * connectedLayout.maxColumnCount)
                    + ((connectedLayout.maxColumnCount + 1) * margin));

       // add the width for level labels in case third level is
       // visible
       if (connectedLayout.thirdLevelEntitiesCount > 0) {
             boxContainerWidth += 30 + margin;
       }
       var boxContainerHeight = Number(oControl.boxModeHeight
                    + oControl.entityHeight + (margin * 3));
       if (connectedLayout.thirdLevelEntitiesCount > 0) {
             boxContainerHeight += Number(oControl.entityHeight + margin);
       }

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-boxViewContainer");
       oRm.addClass("sapLandviszBoxViewBorderContainer");
       oRm.writeClasses();

//     oRm.write(" style='");
//     oRm.write("width:" + boxContainerWidth + "px;");
//     oRm.write("height:" + boxContainerHeight + "px;");
//     oRm.write("top:" + 10 + "px;");
//     oRm.write("'");
       oRm.addStyle("width", boxContainerWidth + "px");
       oRm.addStyle("height", boxContainerHeight + "px");
       oRm.addStyle("top", 10 + "px");
       oRm.writeStyles();
       oRm.write(">");
       oRm.write("</div>");
};

// renders level labels for box view 
sap.landvisz.LandscapeViewerRenderer._renderBoxViewLabels = function(oRm,
             oControl) {

       var levelHeaderWidth = 30;
       var levelHeaderHeight = oControl.entityHeight;
       var margin = 5;
       var levelHeaderLeft = oControl.boxLeftMargine + margin;
       var levelHeaderTop = oControl.boxModeHeight + (margin * 2)
                    + oControl.boxTopMargine;
       var boxLevels = oControl.getBoxDependencyLevels();
       var parentBoxhLevelId;
       if (boxLevels) {
             for ( var i = 0; i < boxLevels.length; i++) {
                    levelHeaderTop += ((oControl.entityHeight + margin) * i);
                    parentBoxhLevelId = oControl.getId() + "-boxViewLabel" + i;
                    oRm.write("<div");
                    oRm.writeAttributeEscaped("id", parentBoxhLevelId);
                    oRm.writeAttributeEscaped("title", boxLevels[i]);
                    oRm.addClass("sapLandviszBoxContainerLevelHeader");
                    oRm.writeClasses();
                    oRm.addStyle("left", levelHeaderLeft + "px");
                    oRm.addStyle("top", levelHeaderTop + "px");
                    oRm.addStyle("height", levelHeaderHeight + "px");
                    oRm.addStyle("width", levelHeaderWidth + "px");
                    oRm.addStyle("display", "none");
                    oRm.writeStyles();
                    oRm.write(">");
                    oRm.write("<div");
                    oRm.addClass("sapLandviszLevelLabel");
                    oRm.writeClasses();
                    oRm.writeAttributeEscaped("id", parentBoxhLevelId + "Level");
                    oRm.writeAttributeEscaped("title", boxLevels[i]);
                    oRm.addStyle("height", "100%");
                    oRm.addStyle("width", "100%");
                    oRm.addStyle("left", "3px");
                    oRm.writeStyles();
                    oRm.write(">");
                    oRm.write(boxLevels[i]);
                    oRm.write("</div>");
                    oRm.write("</div>");

             }
       }
};

// renders navigation panel for dependency view
sap.landvisz.LandscapeViewerRenderer._renderNavigationPanel = function(oRm,
             oControl) {

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-navigation");
       oRm.addClass("sapLandviszClv_container_frame_navigation");
       oRm.writeAttributeEscaped("draggable", "true");
       oRm.addClass("no-draggable");
       oRm.addClass("no-resizable");
       oRm.addClass("ui-draggable");
       oRm.writeClasses();
//     oRm.write(" style='");
//     oRm.write("bottom:" + "0px;");
//     oRm.write("right:" + "0px;");
//     oRm.write("height:" + "28%;");
//     oRm.write("background-size:" + "100%;");
//     oRm.write("display:" + "block;");
//     oRm.write("'");
       oRm.addStyle("bottom", "0px");
       oRm.addStyle("right", "0px");
       oRm.addStyle("height", "28%");
       oRm.addStyle("background-size", "100%");
       oRm.addStyle("display", "block");
       oRm.writeStyles();
       oRm.write(">");

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-navigation_header");
       oRm.addClass("navigationHeader");
       oRm.writeClasses();
       oRm.write(">");

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId()
                    + "-navigation_header_arrowup");
       oRm.addClass("navigationBarButton");
       oRm.addClass("arrowUp");
       oRm.writeClasses();
       oRm.writeAttributeEscaped("title", oControl.SHOW_NAV_TEXT);
       oRm.write(">");
       oRm.write("</div>");
       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId()
                    + "-navigation_header_arrowdown");
       oRm.addClass("navigationBarButton");
       oRm.addClass("arrowDown");
       oRm.writeClasses();
       oRm.writeAttributeEscaped("title", oControl.HIDE_NAV_TEXT);
       oRm.write(">");
       oRm.write("</div>");
       oRm.write("</div>");

       oRm.write("<div");
       oRm.writeAttributeEscaped("id", oControl.getId() + "-navigation_navigator");
       oRm.writeAttributeEscaped("draggable", "true");
       oRm.addClass("navigationNavigator");
       oRm.addClass("ui-draggable");
//     oRm.write(" style='");
//     oRm.write("'");
       oRm.writeClasses();
       oRm.write(">");
       oRm.write("</div>");
       oRm.write("</div>");

};

sap.landvisz.LandscapeViewerRenderer._renderBoxView = function(oRm, oControl) {

       this.renderAllBoxViewEntities(oRm, oControl, true);
};

// renders all entities for box view
sap.landvisz.LandscapeViewerRenderer.renderAllBoxViewEntities = function(oRm,
             oControl, isRendering) {

       oControl.currentView = sap.landvisz.DependencyType.BOX_VIEW;
       if (oControl.connection.svgForConnections != null)
             oControl.connection.svgForConnections.style("display", "none");
       var systems = oControl.getSystems();
       var connectionEntities = oControl.getConnectionEntities();

       var connectors = oControl.getConnectors();
       oControl.connection.init();
       var connectedLayout = oControl.connection
                    .getBoxViewConnectedNodesLayout(connectors);
       var entityID;
       var connectionId;
       var margin = 5;

       if (connectedLayout) {

             var boxContainerId = oControl.getId() + "-boxViewContainer";
             var boxContainer = jQuery.sap.byId(boxContainerId);

             setTimeout(function() {
                    boxContainer.css("display", "block");
             }, 1200);

             for ( var i = 0; i < systems.length; i++) {

                    entityID = systems[i].getSystemId();

                    var labelWidth = 0;
                    labelWidth = 30 + margin;
                    var actualMargin = 30;
                    if (connectedLayout[entityID]) {

                           var leftPos = 0;
                           if (connectedLayout.thirdLevelEntitiesCount > 0)
                                 leftPos = 30;
                           var topPos = 0;
                           leftPos += Number((connectedLayout[entityID].col * (oControl.entityWidth))
                                        + ((connectedLayout[entityID].col + 1) * margin))
                                       
                           topPos += Number(((connectedLayout[entityID].row - 1) * (oControl.entityHeight))
                                        + ((connectedLayout[entityID].row + 1) * margin)
                                        + oControl.boxModeHeight)
                                       

                           systems[i].left = leftPos;
                           systems[i].top = topPos;
                           systems[i].viewType = sap.landvisz.ViewType.DEPENDENCY_VIEW;
                           if (isRendering == true) {
                                 systems[i].left = leftPos;
                                 systems[i].top = topPos;
                                 oRm.renderControl(systems[i]);
                           }

                           else {
                                 systems[i].left = leftPos + oControl.boxLeftMargine;
                                 systems[i].top = topPos + oControl.boxTopMargine;
                                 this._moveEntityToPosition(systems[i].left, systems[i].top,
                                               systems[i].getId());
                           }
                    }
             }

             // render Connection Entity

             var connectionEntityWidth = 0;
             for ( var i = 0; i < connectionEntities.length; i++) {

                    if (oControl.firstTime == true) {
                           connectionEntities[i].attachEvent("connectionMouseover",
                                        function(event) {
                                               oControl.onmouseenter(event);
                                        }, this);
                           connectionEntities[i].attachEvent("connectionMouseout",
                                        function(event) {
                                               oControl.onmouseleave(event);
                                        }, this);

                    }
                    connectionEntityWidth = 0;
                    connectionId = connectionEntities[i].getConnectionId();
                    if (connectedLayout[connectionId]) {
                           if (oControl.currentView == sap.landvisz.DependencyType.BOX_VIEW) {

                                 leftPos = Number(connectedLayout[connectionId].col
                                               * (oControl.entityWidth + 10))
                                               + margin;
                                 topPos = Number(connectedLayout[connectionId].row
                                               * (oControl.entityHeight + 10))
                                               + margin;

                                 connectionEntityWidth = Number(((connectedLayout[connectionId].colspan) * oControl.entityWidth)
                                               + ((connectedLayout[connectionId].colspan - 1) * margin));

                           }

                    }
                    connectionEntities[i].viewType = oControl.currentView;
                    connectionEntities[i].left = leftPos;
                    if (connectedLayout.thirdLevelEntitiesCount > 0)
                           connectionEntities[i].left = leftPos + 30;
                    connectionEntities[i].top = topPos;
                    connectionEntities[i].width = connectionEntityWidth;
                    connectionEntities[i].height = 90;

                    connectionEntities[i].innerLeft = 0;
                    connectionEntities[i].innerTop = 0;
                    connectionEntities[i].innerWidth = connectionEntityWidth;
                    connectionEntities[i].innerHeight = 90;

                    if (oControl.getVisibleDependency() == sap.landvisz.DependencyVisibility.BOTH
                                 && oControl.getDefaultDependencyView() == sap.landvisz.DependencyType.NETWORK_VIEW) {
                           if (connectionEntities[i].toolPopup.isOpen())
                                 connectionEntities[i].toolPopup.close();
                    }

                    if (isRendering == true) {
                           oRm.renderControl(connectionEntities[i]);
                           connectionEntities[i].left = leftPos;
                           if (connectedLayout.thirdLevelEntitiesCount > 0)
                                 connectionEntities[i].left = leftPos + 30;
                           connectionEntities[i].top = topPos;
                           connectionEntities[i].viewType = oControl.currentView;
                           connectionEntities[i].width = connectionEntityWidth;
                           connectionEntities[i].height = 0;
                           connectionEntities[i].addStyleClass("sapLandviszConnectionBox");
                    } else {
                           connectionEntities[i].left = leftPos + oControl.boxLeftMargine;
                           if (connectedLayout.thirdLevelEntitiesCount > 0)
                                 connectionEntities[i].left = leftPos
                                               + oControl.boxLeftMargine + 30;
                           connectionEntities[i].top = topPos + oControl.boxTopMargine;
                           connectionEntities[i].addStyleClass("sapLandviszConnectionBox");
                           connectionEntities[i]
                                        .removeStyleClass("sapLandviszConnection_entity_container");
                           this._animateConnectionEntityContainer(connectionEntityWidth,
                                        90, connectionEntities[i]);
                    }
             }
       }

       if (connectedLayout.thirdLevelEntitiesCount > 0) {
             oControl.hasBoxThirdLevel = true;

             var levelHeaderWidth = 30;
             var levelHeaderHeight = oControl.entityHeight;

             var levelHeaderLeft = oControl.boxLeftMargine + margin;
             var levelHeaderTop = oControl.boxModeHeight + (margin * 2)
                           + oControl.boxTopMargine;
             var boxLevels = oControl.getBoxDependencyLevels();
             var boxViewFirstLabel = "Systems";
             var boxViewFirstLabelTooltip = "Systems";

             if (isRendering == false) {

                    setTimeout(
                                 function() {
                                        if (boxLevels) {
                                               for ( var i = 0; i < boxLevels.length; i++) {

                                                     var boxLabelId = oControl.getId()
                                                                   + "-boxViewLabel" + i;
                                                     var boxLabel = jQuery.sap.byId(boxLabelId);
                                                     levelHeaderTop += ((oControl.entityHeight + margin) * i);

                                                     boxLabel.css("display", "block");

                                                     boxLabel.css({
                                                            left : levelHeaderLeft,
                                                            top : levelHeaderTop,
                                                            width : levelHeaderWidth,
                                                            height : levelHeaderHeight,
                                                     });

                                                     var boxLavelLabel = jQuery.sap.byId(boxLabelId
                                                                   + "Level");

                                                     boxLavelLabel.css({
                                                            width : levelHeaderHeight,
                                                            height : levelHeaderHeight,
                                                     });
                                               }
                                        }

                                 }, 1000);

             }

       }

       if (isRendering == false) {

             var navigationContainer = jQuery.sap.byId(oControl.getId()
                           + "-navigation");
             var navigator = jQuery.sap.byId(oControl.getId()
                           + "-navigation_navigator");
             navigationContainer.animate({
                    height : '0px'
             }, 900, "swing", function(e) {
                    navigationContainer.hide();
             });

             setTimeout(function() {

                    var enitityContainer = jQuery.sap.byId(oControl.getId()
                                 + "-viewContainer");
                    var frameScrollHeight = Number(enitityContainer[0].scrollHeight);
                    var frameScrollWidth = Number(enitityContainer[0].scrollWidth);
                    var frameHeight = Number(enitityContainer.height());
                    var frameWidth = Number(enitityContainer.width());

                    if ((frameScrollWidth > frameWidth)
                                 || (frameScrollHeight > frameHeight))
                           oControl.getVisibleRegion();
             }, 1000);

       }
};

sap.landvisz.LandscapeViewerRenderer._moveEntityToPosition = function(leftpos,
             toppos, entityId) {

       var entity = jQuery.sap.byId(entityId);

       entity.animate({
             left : leftpos,
             top : toppos,
       }, 1000);

};

// animates connection entity on switching from different views
sap.landvisz.LandscapeViewerRenderer._animateConnectionEntityContainer = function(
             entityWidth, enityHeight, connectionEntity) {
       var entity = jQuery.sap.byId(connectionEntity.getId());

       entity.animate({
             left : connectionEntity.left,
             top : connectionEntity.top,
             width : entityWidth,
             height : enityHeight,
       }, 1000, 'swing');

       var connectionDivID = connectionEntity.getId() + "connectionRow";
       var connectionDiv = jQuery.sap.byId(connectionDivID);
       connectionDiv.animate({
             left : connectionEntity.innerLeft,
             top : connectionEntity.innerTop,
             width : connectionEntity.innerWidth,
             height : connectionEntity.innerHeight,
       }, 1000, 'swing');

};



}; // end of sap/landvisz/LandscapeViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.LongTextField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.LongTextField.
jQuery.sap.declare("sap.landvisz.LongTextField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new LongTextField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getRenderingSize renderingSize} : sap.landvisz.EntityCSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Long text for a header
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.LongTextField
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.LongTextField", { metadata : {

	library : "sap.landvisz",
	properties : {
		"text" : {type : "string", group : "Data", defaultValue : null},
		"renderingSize" : {type : "sap.landvisz.EntityCSSSize", group : "Dimension", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.LongTextField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.LongTextField.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Long text for a header
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.landvisz.LongTextField#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.landvisz.LongTextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LongTextField#setText
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * rendering size of the data
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.EntityCSSSize} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.LongTextField#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.EntityCSSSize} oRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.LongTextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LongTextField#setRenderingSize
 * @function
 */

// Start of sap/landvisz/LongTextField.js
///**
// * This file defines behavior for the control,
// */

sap.landvisz.LongTextField.prototype.init = function(){
};


sap.landvisz.LongTextField.prototype.exit = function() {
       
       this.oLinearRowFieldLabel && this.oLinearRowFieldLabel.destroy();
};

sap.landvisz.LongTextField.prototype.initControls = function() {
      
       var oNavigationAreaID = this.getId();
       
       if(!this.oLongText)
       this.oLongText = new sap.ui.commons.TextView(oNavigationAreaID + "-CLVConValue");

};
}; // end of sap/landvisz/LongTextField.js
if ( !jQuery.sap.isDeclared('sap.landvisz.Option') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.Option.
jQuery.sap.declare("sap.landvisz.Option");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Option.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getCurrentEntity currentEntity} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getOptionEntities optionEntities} : sap.landvisz.OptionEntity[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Options for solution entities
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.Option
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.Option", { metadata : {

	library : "sap.landvisz",
	properties : {
		"type" : {type : "string", group : "Identification", defaultValue : null},
		"currentEntity" : {type : "string", group : "Data", defaultValue : null}
	},
	aggregations : {
		"optionEntities" : {type : "sap.landvisz.OptionEntity", multiple : true, singularName : "optionEntity"}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.Option with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.Option.extend
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * type of main entity which has a replacement
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.landvisz.Option#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.landvisz.Option} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.Option#setType
 * @function
 */


/**
 * Getter for property <code>currentEntity</code>.
 * Entity on which options are applicable
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>currentEntity</code>
 * @public
 * @name sap.landvisz.Option#getCurrentEntity
 * @function
 */

/**
 * Setter for property <code>currentEntity</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCurrentEntity  new value for property <code>currentEntity</code>
 * @return {sap.landvisz.Option} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.Option#setCurrentEntity
 * @function
 */


/**
 * Getter for aggregation <code>optionEntities</code>.<br/>
 * Entity to be rendered as options
 * 
 * @return {sap.landvisz.OptionEntity[]}
 * @public
 * @name sap.landvisz.Option#getOptionEntities
 * @function
 */


/**
 * Inserts a optionEntity into the aggregation named <code>optionEntities</code>.
 *
 * @param {sap.landvisz.OptionEntity}
 *          oOptionEntity the optionEntity to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the optionEntity should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the optionEntity is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the optionEntity is inserted at 
 *             the last position        
 * @return {sap.landvisz.Option} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.Option#insertOptionEntity
 * @function
 */

/**
 * Adds some optionEntity <code>oOptionEntity</code> 
 * to the aggregation named <code>optionEntities</code>.
 *
 * @param {sap.landvisz.OptionEntity}
 *            oOptionEntity the optionEntity to add; if empty, nothing is inserted
 * @return {sap.landvisz.Option} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.Option#addOptionEntity
 * @function
 */

/**
 * Removes an optionEntity from the aggregation named <code>optionEntities</code>.
 *
 * @param {int | string | sap.landvisz.OptionEntity} vOptionEntity the optionEntity to remove or its index or id
 * @return {sap.landvisz.OptionEntity} the removed optionEntity or null
 * @public
 * @name sap.landvisz.Option#removeOptionEntity
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>optionEntities</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.landvisz.OptionEntity[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.Option#removeAllOptionEntities
 * @function
 */

/**
 * Checks for the provided <code>sap.landvisz.OptionEntity</code> in the aggregation named <code>optionEntities</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.landvisz.OptionEntity}
 *            oOptionEntity the optionEntity whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.Option#indexOfOptionEntity
 * @function
 */
	

/**
 * Destroys all the optionEntities in the aggregation 
 * named <code>optionEntities</code>.
 * @return {sap.landvisz.Option} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.Option#destroyOptionEntities
 * @function
 */

// Start of sap/landvisz/Option.js
///**
// * This file defines behavior for the control,
// */

//jQuery.sap.require("sap.landvisz.internal.IdentificationBarRenderer");
//jQuery.sap.require("sap.landvisz.EntityConstants");

sap.landvisz.Option.prototype.init = function() {
this.viewType;
};
}; // end of sap/landvisz/Option.js
if ( !jQuery.sap.isDeclared('sap.landvisz.OptionSource') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.OptionSource.
jQuery.sap.declare("sap.landvisz.OptionSource");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new OptionSource.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSource source} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Options source for solution entities
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.OptionSource
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.OptionSource", { metadata : {

	library : "sap.landvisz",
	properties : {
		"source" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.OptionSource with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.OptionSource.extend
 * @function
 */


/**
 * Getter for property <code>source</code>.
 * source for option entity
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>source</code>
 * @public
 * @name sap.landvisz.OptionSource#getSource
 * @function
 */

/**
 * Setter for property <code>source</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSource  new value for property <code>source</code>
 * @return {sap.landvisz.OptionSource} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.OptionSource#setSource
 * @function
 */

// Start of sap/landvisz/OptionSource.js
///**
// * This file defines behavior for the control,
// */

sap.landvisz.OptionSource.prototype.init = function() {
this.viewType;
};
}; // end of sap/landvisz/OptionSource.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.ActionBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.ActionBar.
jQuery.sap.declare("sap.landvisz.internal.ActionBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/ActionBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getActionLabel actionLabel} : string</li>
 * <li>{@link #getRenderingSize renderingSize} : sap.landvisz.EntityCSSSize (default: sap.landvisz.EntityCSSSize.Regular)</li>
 * <li>{@link #getIconSrc iconSrc} : sap.ui.core.URI</li>
 * <li>{@link #getActionType actionType} : sap.landvisz.ActionType (default: sap.landvisz.ActionType.NORMAL)</li>
 * <li>{@link #getMenuData menuData} : object</li>
 * <li>{@link #getActionTooltip actionTooltip} : string</li>
 * <li>{@link #getEnable enable} : boolean (default: true)</li>
 * <li>{@link #getChangeView changeView} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMenu menu} : sap.ui.commons.Menu[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.landvisz.internal.ActionBar#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control that render actions of a system
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.ActionBar
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.ActionBar", { metadata : {

	publicMethods : [
		// methods
		"getSelectedItem", "setSelectedItemSubAction", "getSystemId"
	],
	library : "sap.landvisz",
	properties : {
		"actionLabel" : {type : "string", group : "Data", defaultValue : null},
		"renderingSize" : {type : "sap.landvisz.EntityCSSSize", group : "Dimension", defaultValue : sap.landvisz.EntityCSSSize.Regular},
		"iconSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"actionType" : {type : "sap.landvisz.ActionType", group : "Data", defaultValue : sap.landvisz.ActionType.NORMAL},
		"menuData" : {type : "object", group : "Data", defaultValue : null},
		"actionTooltip" : {type : "string", group : "Data", defaultValue : null},
		"enable" : {type : "boolean", group : "Identification", defaultValue : true},
		"changeView" : {type : "boolean", group : "Identification", defaultValue : false}
	},
	aggregations : {
		"menu" : {type : "sap.ui.commons.Menu", multiple : true, singularName : "menu"}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.ActionBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.ActionBar.extend
 * @function
 */

sap.landvisz.internal.ActionBar.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>actionLabel</code>.
 * label for action
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>actionLabel</code>
 * @public
 * @name sap.landvisz.internal.ActionBar#getActionLabel
 * @function
 */

/**
 * Setter for property <code>actionLabel</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sActionLabel  new value for property <code>actionLabel</code>
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#setActionLabel
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * Property that determines the size of the entity rendered
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code>
 *
 * @return {sap.landvisz.EntityCSSSize} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.internal.ActionBar#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code> 
 *
 * @param {sap.landvisz.EntityCSSSize} oRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#setRenderingSize
 * @function
 */


/**
 * Getter for property <code>iconSrc</code>.
 * source for the icon rendered
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSrc</code>
 * @public
 * @name sap.landvisz.internal.ActionBar#getIconSrc
 * @function
 */

/**
 * Setter for property <code>iconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconSrc  new value for property <code>iconSrc</code>
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#setIconSrc
 * @function
 */


/**
 * Getter for property <code>actionType</code>.
 * type of the action
 *
 * Default value is <code>sap.landvisz.ActionType.NORMAL</code>
 *
 * @return {sap.landvisz.ActionType} the value of property <code>actionType</code>
 * @public
 * @name sap.landvisz.internal.ActionBar#getActionType
 * @function
 */

/**
 * Setter for property <code>actionType</code>.
 *
 * Default value is <code>sap.landvisz.ActionType.NORMAL</code> 
 *
 * @param {sap.landvisz.ActionType} oActionType  new value for property <code>actionType</code>
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#setActionType
 * @function
 */


/**
 * Getter for property <code>menuData</code>.
 * data of menu items and sub items
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>menuData</code>
 * @public
 * @name sap.landvisz.internal.ActionBar#getMenuData
 * @function
 */

/**
 * Setter for property <code>menuData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oMenuData  new value for property <code>menuData</code>
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#setMenuData
 * @function
 */


/**
 * Getter for property <code>actionTooltip</code>.
 * Tooltip for the action
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>actionTooltip</code>
 * @public
 * @name sap.landvisz.internal.ActionBar#getActionTooltip
 * @function
 */

/**
 * Setter for property <code>actionTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sActionTooltip  new value for property <code>actionTooltip</code>
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#setActionTooltip
 * @function
 */


/**
 * Getter for property <code>enable</code>.
 * property to enable/disable actions
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enable</code>
 * @public
 * @name sap.landvisz.internal.ActionBar#getEnable
 * @function
 */

/**
 * Setter for property <code>enable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnable  new value for property <code>enable</code>
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#setEnable
 * @function
 */


/**
 * Getter for property <code>changeView</code>.
 * new type of view is loaded while performing the action.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>changeView</code>
 * @public
 * @name sap.landvisz.internal.ActionBar#getChangeView
 * @function
 */

/**
 * Setter for property <code>changeView</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bChangeView  new value for property <code>changeView</code>
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#setChangeView
 * @function
 */


/**
 * Getter for aggregation <code>menu</code>.<br/>
 * aggregation for menu items
 * 
 * @return {sap.ui.commons.Menu[]}
 * @public
 * @name sap.landvisz.internal.ActionBar#getMenu
 * @function
 */


/**
 * Inserts a menu into the aggregation named <code>menu</code>.
 *
 * @param {sap.ui.commons.Menu}
 *          oMenu the menu to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the menu should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the menu is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the menu is inserted at 
 *             the last position        
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#insertMenu
 * @function
 */

/**
 * Adds some menu <code>oMenu</code> 
 * to the aggregation named <code>menu</code>.
 *
 * @param {sap.ui.commons.Menu}
 *            oMenu the menu to add; if empty, nothing is inserted
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#addMenu
 * @function
 */

/**
 * Removes an menu from the aggregation named <code>menu</code>.
 *
 * @param {int | string | sap.ui.commons.Menu} vMenu the menu to remove or its index or id
 * @return {sap.ui.commons.Menu} the removed menu or null
 * @public
 * @name sap.landvisz.internal.ActionBar#removeMenu
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>menu</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Menu[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.internal.ActionBar#removeAllMenu
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.Menu</code> in the aggregation named <code>menu</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Menu}
 *            oMenu the menu whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.internal.ActionBar#indexOfMenu
 * @function
 */
	

/**
 * Destroys all the menu in the aggregation 
 * named <code>menu</code>.
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#destroyMenu
 * @function
 */


/**
 * click on the action bar
 *
 * @name sap.landvisz.internal.ActionBar#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.landvisz.internal.ActionBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.internal.ActionBar</code>.<br/> itself. 
 *  
 * click on the action bar
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.internal.ActionBar</code>.<br/> itself.
 *
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.landvisz.internal.ActionBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ActionBar#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.internal.ActionBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.internal.ActionBar#fireSelect
 * @function
 */


/**
 * returns selected menu item object
 *
 * @name sap.landvisz.internal.ActionBar#getSelectedItem
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * sub actions to be added in the recently selected
 *
 * @name sap.landvisz.internal.ActionBar#setSelectedItemSubAction
 * @function
 * @param {object} oSubAction
 *         sub action of selcted menu item
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * returns the system ID.
 *
 * @name sap.landvisz.internal.ActionBar#getSystemId
 * @function
 * @type string
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/landvisz/internal/ActionBar.js
///**
// * This file defines behavior for the control,
// */

jQuery.sap.require('sap.ui.commons.MenuButton'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Menu'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MenuItem'); // unlisted dependency retained


sap.landvisz.internal.ActionBar.prototype.init = function() {
	this.initializationDone = false;
	this.lastButton = false;
	this.selectedItem;
	this.systemId = "";
};

sap.landvisz.internal.ActionBar.prototype.exit = function() {
	this.customAction && this.customAction.destroy();
	this.oActToolBar && this.oActToolBar.destroy();
	this.oToolBarBtn && this.oToolBarBtn.destroy();
};

sap.landvisz.internal.ActionBar.prototype.initControls = function() {
	var customActionHdrID = this.getId();
	this.oToolBarBtn;
	this.oActToolBar;

	if (!this.customActionIcon && this.getIconSrc() && this.getIconSrc() != "")
		this.customActionIcon = new sap.ui.commons.Image(customActionHdrID
				+ "-CLVCustomActionImg");
	if (!this.menuButton)
		this.menuButton = new sap.ui.commons.MenuButton(customActionHdrID + '-'
				+ "MenuButton");
};

sap.landvisz.internal.ActionBar.prototype.onclick = function(oEvent) {
	if (this.getEnable() == false)
		oEvent.preventDefault();
	else
		this.fireSelect();
};



/**
 * Handles the sapenter event does not bubble
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.landvisz.internal.ActionBar.prototype.onsapenter = function(oEvent) {
		if (this.getEnable() == false)
		oEvent.preventDefault();
	else
		this.fireSelect();
};

/**
 * Handles the sapenter event does not bubble
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.landvisz.internal.ActionBar.prototype.nsapenter = function(oEvent) {
	if (this.getEnable() == false)
		oEvent.preventDefault();
	else
		this.fireSelect();
};

sap.landvisz.internal.ActionBar.prototype.getSelectedItem = function() {
	return this.selectedItem;
};

sap.landvisz.internal.ActionBar.prototype.getSystemId = function() {
	return this.systemId;
};

sap.landvisz.internal.ActionBar.prototype.setSelectedItemSubAction = function(subActions) {
	var menuData = this.getMenuData();
	var subMenu = this._addSubActions(menuData, subActions);
};

sap.landvisz.internal.ActionBar.prototype._addSubActions = function(menuData,subMenu) {
	for ( var i = 0; i < menuData.length; i++) {
		if (this.selectedItem.getText() == menuData[i].text) {
			menuData[i].subActions = subMenu;
			return;
		}
//		if (menuData[i].subActions && menuData[i].subActions.length > 0) {
//			this._addSubActions(menuData[i].subActions, subMenu)
//		}
	}
};

sap.landvisz.internal.ActionBar.prototype._createMenu = function(menuSubAction) {
	var menuItem = null;
	var menuItemObj = null;
	var menu = new sap.ui.commons.Menu();
	menu.addStyleClass("sapLandviszMenuItemBorber");
	for ( var i = 0; i < menuSubAction.length; i++) {
		menuItemObj = menuSubAction[i];
		menuItem = new sap.ui.commons.MenuItem({
			text : menuItemObj.text,
			tooltip : menuItemObj.tooltip
		});
		if (menuItemObj.customdata) {
			var customData = new sap.ui.core.CustomData({
				key : menuItemObj.customdata,
			});

			menuItem.addCustomData(customData);
		}
		menu.addItem(menuItem);
		if (menuItemObj.subActions && menuItemObj.subActions.length > 0) {
			var subMenu = this._createMenu(menuItemObj.subActions)
			menuItem.setSubmenu(subMenu);
		}
	}

	return menu;
};

}; // end of sap/landvisz/internal/ActionBar.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.DataContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.DataContainer.
jQuery.sap.declare("sap.landvisz.internal.DataContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/DataContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getSelected selected} : boolean (default: true)</li>
 * <li>{@link #getRenderingSize renderingSize} : sap.landvisz.EntityCSSSize (default: sap.landvisz.EntityCSSSize.Regular)</li>
 * <li>{@link #getType type} : sap.landvisz.LandscapeObject</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getProperties properties} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.landvisz.internal.DataContainer#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control that renders the data container section in a system
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.DataContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.DataContainer", { metadata : {

	library : "sap.landvisz",
	properties : {
		"header" : {type : "string", group : "Data", defaultValue : null},
		"selected" : {type : "boolean", group : "Identification", defaultValue : true},
		"renderingSize" : {type : "sap.landvisz.EntityCSSSize", group : "Dimension", defaultValue : sap.landvisz.EntityCSSSize.Regular},
		"type" : {type : "sap.landvisz.LandscapeObject", group : "Identification", defaultValue : null}
	},
	aggregations : {
		"properties" : {type : "sap.ui.core.Control", multiple : true, singularName : "property"}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.DataContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.DataContainer.extend
 * @function
 */

sap.landvisz.internal.DataContainer.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>header</code>.
 * Text of Navigation Header
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>header</code>
 * @public
 * @name sap.landvisz.internal.DataContainer#getHeader
 * @function
 */

/**
 * Setter for property <code>header</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeader  new value for property <code>header</code>
 * @return {sap.landvisz.internal.DataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.DataContainer#setHeader
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * selected property of data header
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.landvisz.internal.DataContainer#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.landvisz.internal.DataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.DataContainer#setSelected
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * rendering size of the control
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code>
 *
 * @return {sap.landvisz.EntityCSSSize} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.internal.DataContainer#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code> 
 *
 * @param {sap.landvisz.EntityCSSSize} oRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.internal.DataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.DataContainer#setRenderingSize
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * type of landscape object
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.LandscapeObject} the value of property <code>type</code>
 * @public
 * @name sap.landvisz.internal.DataContainer#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.LandscapeObject} oType  new value for property <code>type</code>
 * @return {sap.landvisz.internal.DataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.DataContainer#setType
 * @function
 */


/**
 * Getter for aggregation <code>properties</code>.<br/>
 * test
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.landvisz.internal.DataContainer#getProperties
 * @function
 */


/**
 * Inserts a property into the aggregation named <code>properties</code>.
 *
 * @param {sap.ui.core.Control}
 *          oProperty the property to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the property should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the property is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the property is inserted at 
 *             the last position        
 * @return {sap.landvisz.internal.DataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.DataContainer#insertProperty
 * @function
 */

/**
 * Adds some property <code>oProperty</code> 
 * to the aggregation named <code>properties</code>.
 *
 * @param {sap.ui.core.Control}
 *            oProperty the property to add; if empty, nothing is inserted
 * @return {sap.landvisz.internal.DataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.DataContainer#addProperty
 * @function
 */

/**
 * Removes an property from the aggregation named <code>properties</code>.
 *
 * @param {int | string | sap.ui.core.Control} vProperty the property to remove or its index or id
 * @return {sap.ui.core.Control} the removed property or null
 * @public
 * @name sap.landvisz.internal.DataContainer#removeProperty
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>properties</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.internal.DataContainer#removeAllProperties
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>properties</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oProperty the property whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.internal.DataContainer#indexOfProperty
 * @function
 */
	

/**
 * Destroys all the properties in the aggregation 
 * named <code>properties</code>.
 * @return {sap.landvisz.internal.DataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.DataContainer#destroyProperties
 * @function
 */


/**
 * the action to be carried out on selection of a tab
 *
 * @name sap.landvisz.internal.DataContainer#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.landvisz.internal.DataContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.internal.DataContainer</code>.<br/> itself. 
 *  
 * the action to be carried out on selection of a tab
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.internal.DataContainer</code>.<br/> itself.
 *
 * @return {sap.landvisz.internal.DataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.DataContainer#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.landvisz.internal.DataContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.internal.DataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.DataContainer#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.internal.DataContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.internal.DataContainer#fireSelect
 * @function
 */

// Start of sap/landvisz/internal/DataContainer.js
///**
// * This file defines behavior for the control,
// */
sap.landvisz.internal.DataContainer.prototype.init = function(){
   this.initializationDone = false;
   this.firstItem = false;
   this.lastItem = true;
   this.width;
   this.hasChangeEvent = false;
   this.visible = true;
   this.inDisplay = true;
};

sap.landvisz.internal.DataContainer.prototype.exit = function() {
	this.navItem && this.navItem.destroy();
	this.oNavBar && this.navItem.destroy();
};

sap.landvisz.internal.DataContainer.prototype.initControls = function() {

var navigationItemHdrID = this.getId();
	if(!this.oVLayoutContainer)
	this.oVLayoutContainer = new sap.ui.commons.layout.VerticalLayout(navigationItemHdrID + "-CLVEntityVLayoutContainer");

this.navItem && this.navItem.destroy();
this.navItem = new sap.ui.ux3.NavigationItem(navigationItemHdrID + "-CLVItemHeader");

};

sap.landvisz.internal.DataContainer.prototype.select = function(oEvent) {
	alert('selected');
};

sap.landvisz.internal.DataContainer.prototype.onclick = function(oEvent) {
 this.fireEvent("itemsChanged"); //private event used in DropdownBox
};


sap.landvisz.internal.DataContainer.prototype.onsapenter = function(oEvent) {
	this.fireEvent("itemsChanged"); 
};
}; // end of sap/landvisz/internal/DataContainer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.DeploymentType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.DeploymentType.
jQuery.sap.declare("sap.landvisz.internal.DeploymentType");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/DeploymentType.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control to render deployment type of a component
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.DeploymentType
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.DeploymentType", { metadata : {

	library : "sap.landvisz",
	properties : {
		"type" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.DeploymentType with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.DeploymentType.extend
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * icon type of data
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.landvisz.internal.DeploymentType#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.landvisz.internal.DeploymentType} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.DeploymentType#setType
 * @function
 */

// Start of sap/landvisz/internal/DeploymentType.js
///**
// * This file defines behavior for the control,
// */

sap.landvisz.internal.DeploymentType.prototype.init = function() {
	this.left = 0;
	this.top = 0;
	this.initializationDone = false;
	this.entityId = "";
	this.count = 0;
	this.type ="";
	this.standardWidth = 0;
	this.srcEntityId ="";
};

sap.landvisz.internal.DeploymentType.prototype.initControls = function() {

	var controlID = this.getId();
	this.iconType && this.iconType.destroy();
	this.iconType = new sap.ui.commons.Image(controlID + "-solutionCategoryImg");
	this.iconLeft && this.iconLeft.destroy();
	this.iconLeft = new sap.ui.commons.Image(controlID + "-solutionCategoryLeftImg");
	this.iconRight && this.iconRight.destroy();
	this.iconRight = new sap.ui.commons.Image(controlID + "-solutionCategoryRightImg");
};

}; // end of sap/landvisz/internal/DeploymentType.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.EntityAction') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.EntityAction.
jQuery.sap.declare("sap.landvisz.internal.EntityAction");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/EntityAction.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getActionTooltip actionTooltip} : string</li>
 * <li>{@link #getIconSrc iconSrc} : sap.ui.core.URI</li>
 * <li>{@link #getRenderingSize renderingSize} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.landvisz.internal.EntityAction#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control to specify entity actions
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.EntityAction
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.EntityAction", { metadata : {

	library : "sap.landvisz",
	properties : {
		"actionTooltip" : {type : "string", group : "Data", defaultValue : null},
		"iconSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"renderingSize" : {type : "string", group : "Dimension", defaultValue : null}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.EntityAction with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.EntityAction.extend
 * @function
 */

sap.landvisz.internal.EntityAction.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>actionTooltip</code>.
 * Tooltip for the internal action
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>actionTooltip</code>
 * @public
 * @name sap.landvisz.internal.EntityAction#getActionTooltip
 * @function
 */

/**
 * Setter for property <code>actionTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sActionTooltip  new value for property <code>actionTooltip</code>
 * @return {sap.landvisz.internal.EntityAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.EntityAction#setActionTooltip
 * @function
 */


/**
 * Getter for property <code>iconSrc</code>.
 * Source of the icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSrc</code>
 * @public
 * @name sap.landvisz.internal.EntityAction#getIconSrc
 * @function
 */

/**
 * Setter for property <code>iconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconSrc  new value for property <code>iconSrc</code>
 * @return {sap.landvisz.internal.EntityAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.EntityAction#setIconSrc
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * rendering size of the control
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.internal.EntityAction#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.internal.EntityAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.EntityAction#setRenderingSize
 * @function
 */


/**
 * on click fire press
 *
 * @name sap.landvisz.internal.EntityAction#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.landvisz.internal.EntityAction</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.internal.EntityAction</code>.<br/> itself. 
 *  
 * on click fire press
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.internal.EntityAction</code>.<br/> itself.
 *
 * @return {sap.landvisz.internal.EntityAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.EntityAction#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.landvisz.internal.EntityAction</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.internal.EntityAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.EntityAction#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.internal.EntityAction} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.internal.EntityAction#firePress
 * @function
 */

// Start of sap/landvisz/internal/EntityAction.js
sap.landvisz.internal.EntityAction.prototype.init = function() {
	this.initializationDone = false;
};

sap.landvisz.internal.EntityAction.prototype.exit = function() {

	this.entityActionIcon && this.entityActionIcon.destroy();
	this.style = "";
	this.entityMaximized
};

sap.landvisz.internal.EntityAction.prototype.initControls = function() {

	var oNavigationAreaID = this.getId();
	this.entityActionIcon && this.entityActionIcon.destroy();
	this.entityActionIcon = new sap.ui.commons.Image(oNavigationAreaID
			+ "-CLVEntityActionImg");

};

sap.landvisz.internal.EntityAction.prototype.press = function(oEvent) {
	this.fireSelect();
};

sap.landvisz.internal.EntityAction.prototype.onclick = function(oEvent) {
	this.firePress();
};
}; // end of sap/landvisz/internal/EntityAction.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.EntityCustomAction') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.EntityCustomAction.
jQuery.sap.declare("sap.landvisz.internal.EntityCustomAction");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/EntityCustomAction.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCustomAction customAction} : string</li>
 * <li>{@link #getRenderingSize renderingSize} : sap.landvisz.EntityCSSSize (default: sap.landvisz.EntityCSSSize.Regular)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.landvisz.internal.EntityCustomAction#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control to render custom actions of visualization control
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.EntityCustomAction
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.EntityCustomAction", { metadata : {

	library : "sap.landvisz",
	properties : {
		"customAction" : {type : "string", group : "Data", defaultValue : null},
		"renderingSize" : {type : "sap.landvisz.EntityCSSSize", group : "Dimension", defaultValue : sap.landvisz.EntityCSSSize.Regular}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.EntityCustomAction with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.EntityCustomAction.extend
 * @function
 */

sap.landvisz.internal.EntityCustomAction.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>customAction</code>.
 * name of the custom action
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>customAction</code>
 * @public
 * @name sap.landvisz.internal.EntityCustomAction#getCustomAction
 * @function
 */

/**
 * Setter for property <code>customAction</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCustomAction  new value for property <code>customAction</code>
 * @return {sap.landvisz.internal.EntityCustomAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.EntityCustomAction#setCustomAction
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * rendering size of the control
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code>
 *
 * @return {sap.landvisz.EntityCSSSize} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.internal.EntityCustomAction#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code> 
 *
 * @param {sap.landvisz.EntityCSSSize} oRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.internal.EntityCustomAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.EntityCustomAction#setRenderingSize
 * @function
 */


/**
 * click on the action bar
 *
 * @name sap.landvisz.internal.EntityCustomAction#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.landvisz.internal.EntityCustomAction</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.internal.EntityCustomAction</code>.<br/> itself. 
 *  
 * click on the action bar
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.internal.EntityCustomAction</code>.<br/> itself.
 *
 * @return {sap.landvisz.internal.EntityCustomAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.EntityCustomAction#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.landvisz.internal.EntityCustomAction</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.internal.EntityCustomAction} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.EntityCustomAction#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.internal.EntityCustomAction} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.internal.EntityCustomAction#fireSelect
 * @function
 */

// Start of sap/landvisz/internal/EntityCustomAction.js
///**
// * This file defines behavior for the control,
// */
sap.landvisz.internal.EntityCustomAction.prototype.init = function(){

   this.initializationDone = false;

   this.lastButton = false;

};

sap.landvisz.internal.EntityCustomAction.prototype.exit = function() {

        this.customAction && this.customAction.destroy();

};

sap.landvisz.internal.EntityCustomAction.prototype.initControls = function() {

var customActionHdrID = this.getId();


};


sap.landvisz.internal.EntityCustomAction.prototype.select = function(oEvent) {
	this.fireSelect();
};

sap.landvisz.internal.EntityCustomAction.prototype.onclick = function(oEvent) {
	this.fireSelect();
};


}; // end of sap/landvisz/internal/EntityCustomAction.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.HeaderList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.HeaderList.
jQuery.sap.declare("sap.landvisz.internal.HeaderList");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/HeaderList.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeaderTooltip headerTooltip} : string</li>
 * <li>{@link #getEntitySize entitySize} : string</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getType type} : sap.landvisz.LandscapeObject</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.landvisz.internal.HeaderList#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control to render headers of a control
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.HeaderList
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.HeaderList", { metadata : {

	library : "sap.landvisz",
	properties : {
		"headerTooltip" : {type : "string", group : "Data", defaultValue : null},
		"entitySize" : {type : "string", group : "Dimension", defaultValue : null},
		"selected" : {type : "boolean", group : "Identification", defaultValue : false},
		"type" : {type : "sap.landvisz.LandscapeObject", group : "Identification", defaultValue : null}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.HeaderList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.HeaderList.extend
 * @function
 */

sap.landvisz.internal.HeaderList.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>headerTooltip</code>.
 * ToolTip for headers
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerTooltip</code>
 * @public
 * @name sap.landvisz.internal.HeaderList#getHeaderTooltip
 * @function
 */

/**
 * Setter for property <code>headerTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderTooltip  new value for property <code>headerTooltip</code>
 * @return {sap.landvisz.internal.HeaderList} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.HeaderList#setHeaderTooltip
 * @function
 */


/**
 * Getter for property <code>entitySize</code>.
 * Size of the headers
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>entitySize</code>
 * @public
 * @name sap.landvisz.internal.HeaderList#getEntitySize
 * @function
 */

/**
 * Setter for property <code>entitySize</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sEntitySize  new value for property <code>entitySize</code>
 * @return {sap.landvisz.internal.HeaderList} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.HeaderList#setEntitySize
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * to select/deselect a header
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.landvisz.internal.HeaderList#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.landvisz.internal.HeaderList} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.HeaderList#setSelected
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * type of system
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.LandscapeObject} the value of property <code>type</code>
 * @public
 * @name sap.landvisz.internal.HeaderList#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.LandscapeObject} oType  new value for property <code>type</code>
 * @return {sap.landvisz.internal.HeaderList} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.HeaderList#setType
 * @function
 */


/**
 * Event triggered when header is clicked
 *
 * @name sap.landvisz.internal.HeaderList#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.landvisz.internal.HeaderList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.internal.HeaderList</code>.<br/> itself. 
 *  
 * Event triggered when header is clicked
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.internal.HeaderList</code>.<br/> itself.
 *
 * @return {sap.landvisz.internal.HeaderList} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.HeaderList#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.landvisz.internal.HeaderList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.internal.HeaderList} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.HeaderList#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.internal.HeaderList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.internal.HeaderList#firePress
 * @function
 */

// Start of sap/landvisz/internal/HeaderList.js
///**
// * This file defines behavior for the control,
// */

sap.landvisz.internal.HeaderList.prototype.init = function() {

	this.initializationDone = false;
	this.lastBtn = true;
	this.onFocus = true;
	this.inDisplay = false;

};

sap.landvisz.internal.HeaderList.prototype.exit = function() {

	this.customAction && this.customAction.destroy();
	this.oToolBarBtn && this.oToolBarBtn.destroy();
	this.oActToolBar && this.oActToolBar.destroy();

};

sap.landvisz.internal.HeaderList.prototype.initControls = function() {
	this.oToolBarBtn;
	this.oActToolBar;
	this.oHLayoutBtn;
	this.parentContainer;
	this.headerWidth;
	this.btnEventController;

};

/**
 * Rerendering handling
 * 
 * @private
 */

sap.landvisz.internal.HeaderList.prototype.press = function(oEvent) {
	this.firePress();
};

sap.landvisz.internal.HeaderList.prototype.onclick = function(oEvent) {
	this.firePress();
};

/**
 * Handles the sapenter event does not bubble
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.landvisz.internal.HeaderList.prototype.onsapenter = function(oEvent) {
	this.firePress();
};
}; // end of sap/landvisz/internal/HeaderList.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.IdentificationBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.IdentificationBar.
jQuery.sap.declare("sap.landvisz.internal.IdentificationBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/IdentificationBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getQualifierText qualifierText} : string</li>
 * <li>{@link #getQualifierTooltip qualifierTooltip} : string</li>
 * <li>{@link #getQualifierType qualifierType} : string</li>
 * <li>{@link #getRenderingSize renderingSize} : sap.landvisz.EntityCSSSize (default: sap.landvisz.EntityCSSSize.Regular)</li>
 * <li>{@link #getDefaultState defaultState} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getComponentType componentType} : sap.landvisz.ComponentType</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.landvisz.internal.IdentificationBar#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Acontrol to render identification bar of a system
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.IdentificationBar
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.IdentificationBar", { metadata : {

	publicMethods : [
		// methods
		"getIdentificationProperties"
	],
	library : "sap.landvisz",
	properties : {
		"text" : {type : "string", group : "Data", defaultValue : null},
		"type" : {type : "string", group : "Data", defaultValue : null},
		"qualifierText" : {type : "string", group : "Data", defaultValue : null},
		"qualifierTooltip" : {type : "string", group : "Data", defaultValue : null},
		"qualifierType" : {type : "string", group : "Data", defaultValue : null},
		"renderingSize" : {type : "sap.landvisz.EntityCSSSize", group : "Dimension", defaultValue : sap.landvisz.EntityCSSSize.Regular},
		"defaultState" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Data", defaultValue : null},
		"componentType" : {type : "sap.landvisz.ComponentType", group : "Identification", defaultValue : null}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.IdentificationBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.IdentificationBar.extend
 * @function
 */

sap.landvisz.internal.IdentificationBar.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>text</code>.
 * text that identifies a system
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.landvisz.internal.IdentificationBar#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#setText
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * type of system rendered
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.landvisz.internal.IdentificationBar#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#setType
 * @function
 */


/**
 * Getter for property <code>qualifierText</code>.
 * text that identifies the server
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>qualifierText</code>
 * @public
 * @name sap.landvisz.internal.IdentificationBar#getQualifierText
 * @function
 */

/**
 * Setter for property <code>qualifierText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sQualifierText  new value for property <code>qualifierText</code>
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#setQualifierText
 * @function
 */


/**
 * Getter for property <code>qualifierTooltip</code>.
 * tooltip to identify the server
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>qualifierTooltip</code>
 * @public
 * @name sap.landvisz.internal.IdentificationBar#getQualifierTooltip
 * @function
 */

/**
 * Setter for property <code>qualifierTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sQualifierTooltip  new value for property <code>qualifierTooltip</code>
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#setQualifierTooltip
 * @function
 */


/**
 * Getter for property <code>qualifierType</code>.
 * icon to identify the server
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>qualifierType</code>
 * @public
 * @name sap.landvisz.internal.IdentificationBar#getQualifierType
 * @function
 */

/**
 * Setter for property <code>qualifierType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sQualifierType  new value for property <code>qualifierType</code>
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#setQualifierType
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * rendering size of the control
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code>
 *
 * @return {sap.landvisz.EntityCSSSize} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.internal.IdentificationBar#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code> 
 *
 * @param {sap.landvisz.EntityCSSSize} oRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#setRenderingSize
 * @function
 */


/**
 * Getter for property <code>defaultState</code>.
 * determines the default state of the control
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>defaultState</code>
 * @public
 * @name sap.landvisz.internal.IdentificationBar#getDefaultState
 * @function
 */

/**
 * Setter for property <code>defaultState</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDefaultState  new value for property <code>defaultState</code>
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#setDefaultState
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * despriction of the identification region of a control
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.landvisz.internal.IdentificationBar#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#setDescription
 * @function
 */


/**
 * Getter for property <code>componentType</code>.
 * Component type of the entity
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.ComponentType} the value of property <code>componentType</code>
 * @public
 * @name sap.landvisz.internal.IdentificationBar#getComponentType
 * @function
 */

/**
 * Setter for property <code>componentType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.ComponentType} oComponentType  new value for property <code>componentType</code>
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#setComponentType
 * @function
 */


/**
 * fires click event on selection
 *
 * @name sap.landvisz.internal.IdentificationBar#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.landvisz.internal.IdentificationBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.internal.IdentificationBar</code>.<br/> itself. 
 *  
 * fires click event on selection
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.internal.IdentificationBar</code>.<br/> itself.
 *
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.landvisz.internal.IdentificationBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.IdentificationBar#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.internal.IdentificationBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.internal.IdentificationBar#fireSelect
 * @function
 */


/**
 * returns identification properties
 *
 * @name sap.landvisz.internal.IdentificationBar#getIdentificationProperties
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/landvisz/internal/IdentificationBar.js
///**
// * This file defines behavior for the control,
// */
sap.landvisz.internal.IdentificationBar.prototype.init = function() {
	this.initializationDone = false;
};

sap.landvisz.internal.IdentificationBar.prototype.exit = function() {
	this.oIdentifierIcon && this.oIdentifierIcon.destroy();
	this.oQualifierIcon && this.oQualifierIcon.destroy();
	this.oDescriptionText && this.oDescriptionText.destroy();
	this.oIdentifierText && this.oIdentifierText.destroy();
	this.oQualifierText && this.oQualifierText.destroy();
};

/**
 * Create the composite parts out of the current settings. Called by the renderer just before rendering
 * 
 * @private
 */
sap.landvisz.internal.IdentificationBar.prototype.initControls = function() {

	var identificationHdrID = this.getId();

	this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.landvisz");
	this.OnDemandText = this._oBundle.getText("On_Demand");
	this.OnPremiseText = this._oBundle.getText("On_Premise");

	

	// Identification Region Icon
	this.oIdentifierIcon && this.oIdentifierIcon.destroy();
	this.oIdentifierIcon = new sap.ui.commons.Image(identificationHdrID
			+ "-CLVIdnImg");
	this.oIdentifierIcon.setParent(this);

	// Identification Text display
	this.oIdentifierText && this.oIdentifierText.destroy();
	this.oIdentifierText = new sap.ui.commons.TextView(identificationHdrID
			+ "-CLVIdnTxt");
	this.oIdentifierText.setAccessibleRole(sap.ui.core.AccessibleRole.Heading);
	this.oIdentifierText.setParent(this);

	// Identification Region Qualifier Icon
	this.oQualifierIcon && this.oQualifierIcon.destroy();
	this.oQualifierIcon = new sap.ui.commons.Image(identificationHdrID
			+ "-CLVQuaImg").addStyleClass("sapLandviszCursor");
	this.oQualifierIcon.setParent(this);

	// Identification Description display - Make it as Call out
	this.oDescriptionText && this.oDescriptionText.destroy();
	this.oDescriptionText = new sap.ui.commons.TextView(identificationHdrID
			+ "-CLVDesTxt");
	this.oDescriptionText.setParent(this);

	// Identification Text display
	this.oQualifierText && this.oQualifierText.destroy();
	this.oQualifierText = new sap.ui.commons.TextView(identificationHdrID
			+ "-CLVQuaTxt");

	this.oIdentifierTextIcon && this.oIdentifierTextIcon.destroy();

	this.oIdentifierTextIcon = new sap.ui.commons.Image(identificationHdrID
	+ "-CLVIdnSIDImg");

	this.oQualifierText.setAccessibleRole(sap.ui.core.AccessibleRole.Heading);
	this.oQualifierText.setParent(this);

	this.oButton;
	this.oCallout;
	this.maxHeight;
	this.entityMaximized;

};
sap.landvisz.internal.IdentificationBar.prototype.select = function(oEvent) {
	this.fireSelect();
};

sap.landvisz.LandscapeEntity.prototype.select = function(oEvent) {
	this.fireSelect();
};

sap.landvisz.internal.IdentificationBar.prototype.onclick = function(oEvent) {
	sap.landvisz.EntityConstants.internalEvent = true;
	this.fireSelect();
};

}; // end of sap/landvisz/internal/IdentificationBar.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.LinearRowField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.LinearRowField.
jQuery.sap.declare("sap.landvisz.internal.LinearRowField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/LinearRowField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getRenderingSize renderingSize} : sap.landvisz.EntityCSSSize (default: sap.landvisz.EntityCSSSize.Regular)</li>
 * <li>{@link #getIconType iconType} : string</li>
 * <li>{@link #getIconTitle iconTitle} : string</li>
 * <li>{@link #getRightIconSrc rightIconSrc} : string</li>
 * <li>{@link #getLinkSource linkSource} : string</li>
 * <li>{@link #getRightIconTooltip rightIconTooltip} : string</li>
 * <li>{@link #getInvalidName invalidName} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control to render linear row fields in data container region of a system
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.LinearRowField
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.LinearRowField", { metadata : {

	library : "sap.landvisz",
	properties : {
		"label" : {type : "string", group : "Data", defaultValue : null},
		"value" : {type : "string", group : "Data", defaultValue : null},
		"renderingSize" : {type : "sap.landvisz.EntityCSSSize", group : "Dimension", defaultValue : sap.landvisz.EntityCSSSize.Regular},
		"iconType" : {type : "string", group : "Data", defaultValue : null},
		"iconTitle" : {type : "string", group : "Data", defaultValue : null},
		"rightIconSrc" : {type : "string", group : "Data", defaultValue : null},
		"linkSource" : {type : "string", group : "Data", defaultValue : null},
		"rightIconTooltip" : {type : "string", group : "Data", defaultValue : null},
		"invalidName" : {type : "boolean", group : "Identification", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.LinearRowField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.LinearRowField.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * text to be displayed in the row field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.landvisz.internal.LinearRowField#getLabel
 * @function
 */

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.landvisz.internal.LinearRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.LinearRowField#setLabel
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * value to be displayed in the row field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.landvisz.internal.LinearRowField#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.landvisz.internal.LinearRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.LinearRowField#setValue
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * rendering size of system
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code>
 *
 * @return {sap.landvisz.EntityCSSSize} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.internal.LinearRowField#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code> 
 *
 * @param {sap.landvisz.EntityCSSSize} oRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.internal.LinearRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.LinearRowField#setRenderingSize
 * @function
 */


/**
 * Getter for property <code>iconType</code>.
 * text of the icon dislayed in the row field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconType</code>
 * @public
 * @name sap.landvisz.internal.LinearRowField#getIconType
 * @function
 */

/**
 * Setter for property <code>iconType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconType  new value for property <code>iconType</code>
 * @return {sap.landvisz.internal.LinearRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.LinearRowField#setIconType
 * @function
 */


/**
 * Getter for property <code>iconTitle</code>.
 * title of the icon displayed in the row field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconTitle</code>
 * @public
 * @name sap.landvisz.internal.LinearRowField#getIconTitle
 * @function
 */

/**
 * Setter for property <code>iconTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconTitle  new value for property <code>iconTitle</code>
 * @return {sap.landvisz.internal.LinearRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.LinearRowField#setIconTitle
 * @function
 */


/**
 * Getter for property <code>rightIconSrc</code>.
 * Image source of the icon on right
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>rightIconSrc</code>
 * @public
 * @name sap.landvisz.internal.LinearRowField#getRightIconSrc
 * @function
 */

/**
 * Setter for property <code>rightIconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sRightIconSrc  new value for property <code>rightIconSrc</code>
 * @return {sap.landvisz.internal.LinearRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.LinearRowField#setRightIconSrc
 * @function
 */


/**
 * Getter for property <code>linkSource</code>.
 * source from which two or more systems are dependent
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>linkSource</code>
 * @public
 * @name sap.landvisz.internal.LinearRowField#getLinkSource
 * @function
 */

/**
 * Setter for property <code>linkSource</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLinkSource  new value for property <code>linkSource</code>
 * @return {sap.landvisz.internal.LinearRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.LinearRowField#setLinkSource
 * @function
 */


/**
 * Getter for property <code>rightIconTooltip</code>.
 * tool tip for the right icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>rightIconTooltip</code>
 * @public
 * @name sap.landvisz.internal.LinearRowField#getRightIconTooltip
 * @function
 */

/**
 * Setter for property <code>rightIconTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sRightIconTooltip  new value for property <code>rightIconTooltip</code>
 * @return {sap.landvisz.internal.LinearRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.LinearRowField#setRightIconTooltip
 * @function
 */


/**
 * Getter for property <code>invalidName</code>.
 * determines if the product version are valid/invalid
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>invalidName</code>
 * @public
 * @name sap.landvisz.internal.LinearRowField#getInvalidName
 * @function
 */

/**
 * Setter for property <code>invalidName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bInvalidName  new value for property <code>invalidName</code>
 * @return {sap.landvisz.internal.LinearRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.LinearRowField#setInvalidName
 * @function
 */

// Start of sap/landvisz/internal/LinearRowField.js
///**
// * This file defines behavior for the control,
// */
//sap.landvisz.LinearRowField.prototype.init = function(){
//   // do something for initialization...
//};

sap.landvisz.internal.LinearRowField.prototype.init = function() {
	this.initializationDone = false;
	this.iconType && this.iconType.destroy();
	this.totalWidth =0;
};

sap.landvisz.internal.LinearRowField.prototype.exit = function() {

	this.oLinearRowFieldLabel && this.oLinearRowFieldLabel.destroy();
	this.oLinearRowFieldValue && this.oLinearRowFieldValue.destroy();
	this.seperatorLbl && this.seperatorLbl.destroy();
};

sap.landvisz.internal.LinearRowField.prototype.initControls = function() {
	var oNavigationAreaID = this.getId();
	if (!this.oLinearRowFieldLabel)
		this.oLinearRowFieldLabel = new sap.ui.commons.Label(oNavigationAreaID
				+ "-CLVConLabel");
	if (!this.oLinearRowFieldValue)
		this.oLinearRowFieldValue = new sap.ui.commons.TextView(
				oNavigationAreaID + "-CLVConValue");
	if (!this.seperatorLbl)
		this.seperatorLbl = new sap.ui.commons.TextView(oNavigationAreaID
				+ "-CLVConSeperator");
	// Identification Region Qualifier Icon
	this.iconType && this.iconType.destroy();
	this.iconType = new sap.ui.commons.Image(oNavigationAreaID
			+ "-CLVDataTypeImg");

	if (!this.rightIcon)
		this.rightIcon = new sap.ui.commons.Image(oNavigationAreaID
				+ "-rightImg");
	this.entityMaximized;

};

sap.landvisz.internal.LinearRowField.prototype.onmouseenter = function(oEvent) {
	oEvent.stopImmediatePropagation();

};
sap.landvisz.internal.LinearRowField.prototype.onmouseleave = function(oEvent) {
	oEvent.stopImmediatePropagation();

};
}; // end of sap/landvisz/internal/LinearRowField.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.ModelingStatus') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.ModelingStatus.
jQuery.sap.declare("sap.landvisz.internal.ModelingStatus");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/ModelingStatus.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getStatus status} : string</li>
 * <li>{@link #getStatusTooltip statusTooltip} : string</li>
 * <li>{@link #getStateIconSrc stateIconSrc} : string</li>
 * <li>{@link #getStateIconTooltip stateIconTooltip} : any</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Modeling Status of entity
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.ModelingStatus
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.ModelingStatus", { metadata : {

	library : "sap.landvisz",
	properties : {
		"status" : {type : "string", group : "Data", defaultValue : null},
		"statusTooltip" : {type : "string", group : "Data", defaultValue : null},
		"stateIconSrc" : {type : "string", group : "Data", defaultValue : null},
		"stateIconTooltip" : {type : "any", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.ModelingStatus with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.ModelingStatus.extend
 * @function
 */


/**
 * Getter for property <code>status</code>.
 * status determines the state of the system namely correct, warning, error
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>status</code>
 * @public
 * @name sap.landvisz.internal.ModelingStatus#getStatus
 * @function
 */

/**
 * Setter for property <code>status</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStatus  new value for property <code>status</code>
 * @return {sap.landvisz.internal.ModelingStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ModelingStatus#setStatus
 * @function
 */


/**
 * Getter for property <code>statusTooltip</code>.
 * Tooltip for status that determines the state of the system namely correct, warning, error
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>statusTooltip</code>
 * @public
 * @name sap.landvisz.internal.ModelingStatus#getStatusTooltip
 * @function
 */

/**
 * Setter for property <code>statusTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStatusTooltip  new value for property <code>statusTooltip</code>
 * @return {sap.landvisz.internal.ModelingStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ModelingStatus#setStatusTooltip
 * @function
 */


/**
 * Getter for property <code>stateIconSrc</code>.
 * icon source for status
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>stateIconSrc</code>
 * @public
 * @name sap.landvisz.internal.ModelingStatus#getStateIconSrc
 * @function
 */

/**
 * Setter for property <code>stateIconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStateIconSrc  new value for property <code>stateIconSrc</code>
 * @return {sap.landvisz.internal.ModelingStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ModelingStatus#setStateIconSrc
 * @function
 */


/**
 * Getter for property <code>stateIconTooltip</code>.
 * tooltip for the icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>stateIconTooltip</code>
 * @public
 * @name sap.landvisz.internal.ModelingStatus#getStateIconTooltip
 * @function
 */

/**
 * Setter for property <code>stateIconTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oStateIconTooltip  new value for property <code>stateIconTooltip</code>
 * @return {sap.landvisz.internal.ModelingStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.ModelingStatus#setStateIconTooltip
 * @function
 */

// Start of sap/landvisz/internal/ModelingStatus.js
///**
// * This file defines behavior for the control,
// */
//sap.landvisz.LinearRowField.prototype.init = function(){
//   // do something for initialization...
//};

sap.landvisz.internal.ModelingStatus.prototype.init = function() {
	this.initializationDone = false;
	this._imgResourcePath = sap.ui.resource('sap.landvisz',
			'themes/base/img/status/')
	this._imgFolderPath;
	this.renderSize;
	if (!this.statusImage)
		this.statusImage = new sap.ui.commons.Image(this.getId()
				+ "-CLVEntityStatusImage");
};

sap.landvisz.internal.ModelingStatus.prototype.exit = function() {

	this.statusImage && this.statusImage.destroy();
};

sap.landvisz.internal.ModelingStatus.prototype.initControls = function() {
	var oNavigationAreaID = this.getId();
	if (!this.statusImage)
		this.statusImage = new sap.ui.commons.Image(oNavigationAreaID
				+ "-CLVEntityStatusImage");

	if (!this.stateImage)
		this.stateImage = new sap.ui.commons.Image(oNavigationAreaID
				+ "-EntityStateImage");

	this.entityMaximized;
};

//sap.landvisz.internal.ModelingStatus.prototype.onclick = function(oEvent) {
//	this.fireEvent("statusSelected"); //private event used when option clicked
//};

}; // end of sap/landvisz/internal/ModelingStatus.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.NestedRowField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.NestedRowField.
jQuery.sap.declare("sap.landvisz.internal.NestedRowField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/NestedRowField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getValues values} : string[]</li>
 * <li>{@link #getRenderingSize renderingSize} : sap.landvisz.EntityCSSSize (default: sap.landvisz.EntityCSSSize.Regular)</li>
 * <li>{@link #getIconTitle iconTitle} : string</li>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getValueType valueType} : string</li>
 * <li>{@link #getRightIconSrc rightIconSrc} : string</li>
 * <li>{@link #getLinkSource linkSource} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLinearRows linearRows} : sap.landvisz.internal.LinearRowField[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control to render nester row fields in a control
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.NestedRowField
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.NestedRowField", { metadata : {

	library : "sap.landvisz",
	properties : {
		"label" : {type : "string", group : "Data", defaultValue : null},
		"values" : {type : "string[]", group : "Data", defaultValue : null},
		"renderingSize" : {type : "sap.landvisz.EntityCSSSize", group : "Dimension", defaultValue : sap.landvisz.EntityCSSSize.Regular},
		"iconTitle" : {type : "string", group : "Data", defaultValue : null},
		"type" : {type : "string", group : "Identification", defaultValue : null},
		"valueType" : {type : "string", group : "Identification", defaultValue : null},
		"rightIconSrc" : {type : "string", group : "Data", defaultValue : null},
		"linkSource" : {type : "string", group : "Data", defaultValue : null}
	},
	aggregations : {
		"linearRows" : {type : "sap.landvisz.internal.LinearRowField", multiple : true, singularName : "linearRow"}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.NestedRowField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.NestedRowField.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * label for data in a row field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.landvisz.internal.NestedRowField#getLabel
 * @function
 */

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#setLabel
 * @function
 */


/**
 * Getter for property <code>values</code>.
 * value of the data in a row field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>values</code>
 * @public
 * @name sap.landvisz.internal.NestedRowField#getValues
 * @function
 */

/**
 * Setter for property <code>values</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aValues  new value for property <code>values</code>
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#setValues
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * rendering size of the control
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code>
 *
 * @return {sap.landvisz.EntityCSSSize} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.internal.NestedRowField#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is <code>sap.landvisz.EntityCSSSize.Regular</code> 
 *
 * @param {sap.landvisz.EntityCSSSize} oRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#setRenderingSize
 * @function
 */


/**
 * Getter for property <code>iconTitle</code>.
 * titlte of the icon rendered in the nested row field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconTitle</code>
 * @public
 * @name sap.landvisz.internal.NestedRowField#getIconTitle
 * @function
 */

/**
 * Setter for property <code>iconTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconTitle  new value for property <code>iconTitle</code>
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#setIconTitle
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * determines the type of landscape object
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.landvisz.internal.NestedRowField#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#setType
 * @function
 */


/**
 * Getter for property <code>valueType</code>.
 * determines the type of value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>valueType</code>
 * @public
 * @name sap.landvisz.internal.NestedRowField#getValueType
 * @function
 */

/**
 * Setter for property <code>valueType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValueType  new value for property <code>valueType</code>
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#setValueType
 * @function
 */


/**
 * Getter for property <code>rightIconSrc</code>.
 * Image source of the icon on right
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>rightIconSrc</code>
 * @public
 * @name sap.landvisz.internal.NestedRowField#getRightIconSrc
 * @function
 */

/**
 * Setter for property <code>rightIconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sRightIconSrc  new value for property <code>rightIconSrc</code>
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#setRightIconSrc
 * @function
 */


/**
 * Getter for property <code>linkSource</code>.
 * source from which two or more systems are dependent
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>linkSource</code>
 * @public
 * @name sap.landvisz.internal.NestedRowField#getLinkSource
 * @function
 */

/**
 * Setter for property <code>linkSource</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLinkSource  new value for property <code>linkSource</code>
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#setLinkSource
 * @function
 */


/**
 * Getter for aggregation <code>linearRows</code>.<br/>
 * Rows aggregation in a label
 * 
 * @return {sap.landvisz.internal.LinearRowField[]}
 * @public
 * @name sap.landvisz.internal.NestedRowField#getLinearRows
 * @function
 */


/**
 * Inserts a linearRow into the aggregation named <code>linearRows</code>.
 *
 * @param {sap.landvisz.internal.LinearRowField}
 *          oLinearRow the linearRow to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the linearRow should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the linearRow is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the linearRow is inserted at 
 *             the last position        
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#insertLinearRow
 * @function
 */

/**
 * Adds some linearRow <code>oLinearRow</code> 
 * to the aggregation named <code>linearRows</code>.
 *
 * @param {sap.landvisz.internal.LinearRowField}
 *            oLinearRow the linearRow to add; if empty, nothing is inserted
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#addLinearRow
 * @function
 */

/**
 * Removes an linearRow from the aggregation named <code>linearRows</code>.
 *
 * @param {int | string | sap.landvisz.internal.LinearRowField} vLinearRow the linearRow to remove or its index or id
 * @return {sap.landvisz.internal.LinearRowField} the removed linearRow or null
 * @public
 * @name sap.landvisz.internal.NestedRowField#removeLinearRow
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>linearRows</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.landvisz.internal.LinearRowField[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.internal.NestedRowField#removeAllLinearRows
 * @function
 */

/**
 * Checks for the provided <code>sap.landvisz.internal.LinearRowField</code> in the aggregation named <code>linearRows</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.landvisz.internal.LinearRowField}
 *            oLinearRow the linearRow whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.internal.NestedRowField#indexOfLinearRow
 * @function
 */
	

/**
 * Destroys all the linearRows in the aggregation 
 * named <code>linearRows</code>.
 * @return {sap.landvisz.internal.NestedRowField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.NestedRowField#destroyLinearRows
 * @function
 */

// Start of sap/landvisz/internal/NestedRowField.js
///**
// * This file defines behavior for the control,
// */

sap.landvisz.internal.NestedRowField.prototype.init = function() {
	this.initializationDone = false;
};

sap.landvisz.internal.NestedRowField.prototype.exit = function() {

	this.oNestedRowFieldLabel && this.oNestedRowFieldLabel.destroy();
	this.oNestedRowFieldValue && this.oNestedRowFieldValue.destroy();
	this.iconType && this.iconType.destroy();
	this.iconValue && this.iconValue.destroy();
};

sap.landvisz.internal.NestedRowField.prototype.initControls = function() {
	var oNavigationAreaID = this.getId();
	if (!this.oNestedRowFieldLabel)
		this.oNestedRowFieldLabel = new sap.ui.commons.Label(oNavigationAreaID
				+ "-CLVConNestedLabel");
	if (!this.oNestedRowFieldValue)
		this.oNestedRowFieldValue = new sap.ui.commons.TextView(
				oNavigationAreaID + "-CLVConNestedValue");
	if (!this.iconLabel)
		this.iconLabel = new sap.ui.commons.Image(oNavigationAreaID
				+ "-CLVDataLabelImg");
	if (!this.iconValue)
		this.iconValue = new sap.ui.commons.Image(oNavigationAreaID
				+ "-CLVDataValueImg");
};
}; // end of sap/landvisz/internal/NestedRowField.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.SingleDataContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.SingleDataContainer.
jQuery.sap.declare("sap.landvisz.internal.SingleDataContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/SingleDataContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getRenderingSize renderingSize} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getProperties properties} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.landvisz.internal.SingleDataContainer#event:closed closed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control that shows all the tabs separately for a better view
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.SingleDataContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.SingleDataContainer", { metadata : {

	publicMethods : [
		// methods
		"isOpen"
	],
	library : "sap.landvisz",
	properties : {
		"header" : {type : "string", group : "Data", defaultValue : null},
		"renderingSize" : {type : "string", group : "Dimension", defaultValue : null}
	},
	aggregations : {
		"properties" : {type : "sap.ui.core.Control", multiple : true, singularName : "property"}
	},
	events : {
		"closed" : {}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.SingleDataContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.SingleDataContainer.extend
 * @function
 */

sap.landvisz.internal.SingleDataContainer.M_EVENTS = {'closed':'closed'};


/**
 * Getter for property <code>header</code>.
 * header of the tab
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>header</code>
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#getHeader
 * @function
 */

/**
 * Setter for property <code>header</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeader  new value for property <code>header</code>
 * @return {sap.landvisz.internal.SingleDataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#setHeader
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * rendering size of the system
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.internal.SingleDataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#setRenderingSize
 * @function
 */


/**
 * Getter for aggregation <code>properties</code>.<br/>
 * properties that are aggregated to the data container region of tabs
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#getProperties
 * @function
 */


/**
 * Inserts a property into the aggregation named <code>properties</code>.
 *
 * @param {sap.ui.core.Control}
 *          oProperty the property to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the property should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the property is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the property is inserted at 
 *             the last position        
 * @return {sap.landvisz.internal.SingleDataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#insertProperty
 * @function
 */

/**
 * Adds some property <code>oProperty</code> 
 * to the aggregation named <code>properties</code>.
 *
 * @param {sap.ui.core.Control}
 *            oProperty the property to add; if empty, nothing is inserted
 * @return {sap.landvisz.internal.SingleDataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#addProperty
 * @function
 */

/**
 * Removes an property from the aggregation named <code>properties</code>.
 *
 * @param {int | string | sap.ui.core.Control} vProperty the property to remove or its index or id
 * @return {sap.ui.core.Control} the removed property or null
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#removeProperty
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>properties</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#removeAllProperties
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>properties</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oProperty the property whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#indexOfProperty
 * @function
 */
	

/**
 * Destroys all the properties in the aggregation 
 * named <code>properties</code>.
 * @return {sap.landvisz.internal.SingleDataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#destroyProperties
 * @function
 */


/**
 * called when Single view model is closed
 *
 * @name sap.landvisz.internal.SingleDataContainer#closed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'closed' event of this <code>sap.landvisz.internal.SingleDataContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.internal.SingleDataContainer</code>.<br/> itself. 
 *  
 * called when Single view model is closed
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.internal.SingleDataContainer</code>.<br/> itself.
 *
 * @return {sap.landvisz.internal.SingleDataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#attachClosed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'closed' event of this <code>sap.landvisz.internal.SingleDataContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.internal.SingleDataContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.SingleDataContainer#detachClosed
 * @function
 */

/**
 * Fire event closed to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.internal.SingleDataContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.internal.SingleDataContainer#fireClosed
 * @function
 */


/**
 * returns true if show all option is open
 *
 * @name sap.landvisz.internal.SingleDataContainer#isOpen
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/landvisz/internal/SingleDataContainer.js
///**
// * This file defines behavior for the control,
// */
sap.landvisz.internal.SingleDataContainer.prototype.init = function() {
	this.initializationDone = false;
	this.isModelOpen = false;
};

sap.landvisz.internal.SingleDataContainer.prototype.exit = function() {
};

sap.landvisz.internal.SingleDataContainer.prototype.initControls = function() {

	var oNavigationAreaID = this.getId();
	if (!this.headerLabel)
		this.headerLabel = new sap.ui.commons.Label(oNavigationAreaID
				+ "-CLVHeaderLabel");
	if (!this.closeIcon)
		this.closeIcon = new sap.ui.commons.Image(oNavigationAreaID
				+ "-CLVSMVClose");

};

// Implementation of API method isOpen
sap.landvisz.internal.SingleDataContainer.prototype.isOpen = function() {
	return this.isModelOpen;
};

sap.landvisz.internal.SingleDataContainer.prototype.onclick = function(oEvent) {

	if (oEvent.target.id == "closeVM") {
		jQuery.sap.byId(oEvent.currentTarget.id).hide("slow");
		this.isModelOpen = false;
		this.fireClosed();

	} else {
		oEvent.stopImmediatePropagation();
	}
};
}; // end of sap/landvisz/internal/SingleDataContainer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.internal.TreeField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.internal.TreeField.
jQuery.sap.declare("sap.landvisz.internal.TreeField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new internal/TreeField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTreeModel treeModel} : object</li>
 * <li>{@link #getBindingName bindingName} : string</li>
 * <li>{@link #getRenderingSize renderingSize} : sap.landvisz.EntityCSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTreeNode treeNode} : sap.ui.commons.TreeNode[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control to render tree field in the control
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.internal.TreeField
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.internal.TreeField", { metadata : {

	library : "sap.landvisz",
	properties : {
		"treeModel" : {type : "object", group : "Data", defaultValue : null},
		"bindingName" : {type : "string", group : "Data", defaultValue : null},
		"renderingSize" : {type : "sap.landvisz.EntityCSSSize", group : "Dimension", defaultValue : null}
	},
	aggregations : {
		"treeNode" : {type : "sap.ui.commons.TreeNode", multiple : true, singularName : "treeNode"}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.internal.TreeField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.internal.TreeField.extend
 * @function
 */


/**
 * Getter for property <code>treeModel</code>.
 * treeModel to be rendered in the control
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>treeModel</code>
 * @public
 * @name sap.landvisz.internal.TreeField#getTreeModel
 * @function
 */

/**
 * Setter for property <code>treeModel</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oTreeModel  new value for property <code>treeModel</code>
 * @return {sap.landvisz.internal.TreeField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.TreeField#setTreeModel
 * @function
 */


/**
 * Getter for property <code>bindingName</code>.
 * binding name
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>bindingName</code>
 * @public
 * @name sap.landvisz.internal.TreeField#getBindingName
 * @function
 */

/**
 * Setter for property <code>bindingName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBindingName  new value for property <code>bindingName</code>
 * @return {sap.landvisz.internal.TreeField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.TreeField#setBindingName
 * @function
 */


/**
 * Getter for property <code>renderingSize</code>.
 * rendering size of the control
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.EntityCSSSize} the value of property <code>renderingSize</code>
 * @public
 * @name sap.landvisz.internal.TreeField#getRenderingSize
 * @function
 */

/**
 * Setter for property <code>renderingSize</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.EntityCSSSize} oRenderingSize  new value for property <code>renderingSize</code>
 * @return {sap.landvisz.internal.TreeField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.TreeField#setRenderingSize
 * @function
 */


/**
 * Getter for aggregation <code>treeNode</code>.<br/>
 * aggregation on the tree field to render tree nodes
 * 
 * @return {sap.ui.commons.TreeNode[]}
 * @public
 * @name sap.landvisz.internal.TreeField#getTreeNode
 * @function
 */


/**
 * Inserts a treeNode into the aggregation named <code>treeNode</code>.
 *
 * @param {sap.ui.commons.TreeNode}
 *          oTreeNode the treeNode to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the treeNode should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the treeNode is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the treeNode is inserted at 
 *             the last position        
 * @return {sap.landvisz.internal.TreeField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.TreeField#insertTreeNode
 * @function
 */

/**
 * Adds some treeNode <code>oTreeNode</code> 
 * to the aggregation named <code>treeNode</code>.
 *
 * @param {sap.ui.commons.TreeNode}
 *            oTreeNode the treeNode to add; if empty, nothing is inserted
 * @return {sap.landvisz.internal.TreeField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.TreeField#addTreeNode
 * @function
 */

/**
 * Removes an treeNode from the aggregation named <code>treeNode</code>.
 *
 * @param {int | string | sap.ui.commons.TreeNode} vTreeNode the treeNode to remove or its index or id
 * @return {sap.ui.commons.TreeNode} the removed treeNode or null
 * @public
 * @name sap.landvisz.internal.TreeField#removeTreeNode
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>treeNode</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.TreeNode[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.internal.TreeField#removeAllTreeNode
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.TreeNode</code> in the aggregation named <code>treeNode</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.TreeNode}
 *            oTreeNode the treeNode whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.internal.TreeField#indexOfTreeNode
 * @function
 */
	

/**
 * Destroys all the treeNode in the aggregation 
 * named <code>treeNode</code>.
 * @return {sap.landvisz.internal.TreeField} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.internal.TreeField#destroyTreeNode
 * @function
 */

// Start of sap/landvisz/internal/TreeField.js
///**
// * This file defines behavior for the control,
// */
sap.landvisz.internal.TreeField.prototype.init = function(){
   this.initializationDone = false;
};

sap.landvisz.internal.TreeField.prototype.exit = function() {
       
       this.tree && this.tree.destroy();
       this.oTreeNodeTemplate && this.oTreeNodeTemplate.destroy();
       this.jsonModel && this.jsonModel.destroy();
};

sap.landvisz.internal.TreeField.prototype.initControls = function() {

       var oNavigationAreaID = this.getId();
       if(!this.tree)
       this.tree = new sap.ui.commons.Tree(oNavigationAreaID+"CLVTree");
        if(!this.jsonModel)
       this.jsonModel = new sap.ui.model.json.JSONModel();
        if(!this.oTreeNodeTemplate)
       this.oTreeNodeTemplate = new sap.ui.commons.TreeNode(oNavigationAreaID+"CLVTreeNode");

};

}; // end of sap/landvisz/internal/TreeField.js
if ( !jQuery.sap.isDeclared('sap.landvisz.ConnectionEntity') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.ConnectionEntity.
jQuery.sap.declare("sap.landvisz.ConnectionEntity");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ConnectionEntity.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getConnectionId connectionId} : string</li>
 * <li>{@link #getSize size} : string</li>
 * <li>{@link #getType type} : sap.landvisz.ConnectionType</li>
 * <li>{@link #getLinkId linkId} : string</li>
 * <li>{@link #getLinkedHeader linkedHeader} : string</li>
 * <li>{@link #getDependencyTooltip dependencyTooltip} : string</li>
 * <li>{@link #getShowOverlay showOverlay} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getConnectionData connectionData} : sap.landvisz.internal.LinearRowField[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Connection Entity of Dependency view
 * @extends sap.ui.core.Control
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.ConnectionEntity
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.landvisz.ConnectionEntity", { metadata : {

	library : "sap.landvisz",
	properties : {
		"connectionId" : {type : "string", group : "Data", defaultValue : null},
		"size" : {type : "string", group : "Data", defaultValue : null},
		"type" : {type : "sap.landvisz.ConnectionType", group : "Identification", defaultValue : null},
		"linkId" : {type : "string", group : "Data", defaultValue : null},
		"linkedHeader" : {type : "string", group : "Data", defaultValue : null},
		"dependencyTooltip" : {type : "string", group : "Data", defaultValue : null},
		"showOverlay" : {type : "boolean", group : "Data", defaultValue : true}
	},
	aggregations : {
		"connectionData" : {type : "sap.landvisz.internal.LinearRowField", multiple : true, singularName : "connectionData"}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.ConnectionEntity with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.ConnectionEntity.extend
 * @function
 */


/**
 * Getter for property <code>connectionId</code>.
 * id of connection Entity
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>connectionId</code>
 * @public
 * @name sap.landvisz.ConnectionEntity#getConnectionId
 * @function
 */

/**
 * Setter for property <code>connectionId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sConnectionId  new value for property <code>connectionId</code>
 * @return {sap.landvisz.ConnectionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.ConnectionEntity#setConnectionId
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * size of connection Entity
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>size</code>
 * @public
 * @name sap.landvisz.ConnectionEntity#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSize  new value for property <code>size</code>
 * @return {sap.landvisz.ConnectionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.ConnectionEntity#setSize
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * type of a connection Entity
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.ConnectionType} the value of property <code>type</code>
 * @public
 * @name sap.landvisz.ConnectionEntity#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.ConnectionType} oType  new value for property <code>type</code>
 * @return {sap.landvisz.ConnectionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.ConnectionEntity#setType
 * @function
 */


/**
 * Getter for property <code>linkId</code>.
 * ID which links the entities
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>linkId</code>
 * @public
 * @name sap.landvisz.ConnectionEntity#getLinkId
 * @function
 */

/**
 * Setter for property <code>linkId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLinkId  new value for property <code>linkId</code>
 * @return {sap.landvisz.ConnectionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.ConnectionEntity#setLinkId
 * @function
 */


/**
 * Getter for property <code>linkedHeader</code>.
 * link header data that is shared with in the entities
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>linkedHeader</code>
 * @public
 * @name sap.landvisz.ConnectionEntity#getLinkedHeader
 * @function
 */

/**
 * Setter for property <code>linkedHeader</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLinkedHeader  new value for property <code>linkedHeader</code>
 * @return {sap.landvisz.ConnectionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.ConnectionEntity#setLinkedHeader
 * @function
 */


/**
 * Getter for property <code>dependencyTooltip</code>.
 * tooltip for dependency type icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>dependencyTooltip</code>
 * @public
 * @name sap.landvisz.ConnectionEntity#getDependencyTooltip
 * @function
 */

/**
 * Setter for property <code>dependencyTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDependencyTooltip  new value for property <code>dependencyTooltip</code>
 * @return {sap.landvisz.ConnectionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.ConnectionEntity#setDependencyTooltip
 * @function
 */


/**
 * Getter for property <code>showOverlay</code>.
 * to show the overlay for highlightig
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showOverlay</code>
 * @public
 * @name sap.landvisz.ConnectionEntity#getShowOverlay
 * @function
 */

/**
 * Setter for property <code>showOverlay</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowOverlay  new value for property <code>showOverlay</code>
 * @return {sap.landvisz.ConnectionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.ConnectionEntity#setShowOverlay
 * @function
 */


/**
 * Getter for aggregation <code>connectionData</code>.<br/>
 * Linear row field renderer for connection Entity
 * 
 * @return {sap.landvisz.internal.LinearRowField[]}
 * @public
 * @name sap.landvisz.ConnectionEntity#getConnectionData
 * @function
 */


/**
 * Inserts a connectionData into the aggregation named <code>connectionData</code>.
 *
 * @param {sap.landvisz.internal.LinearRowField}
 *          oConnectionData the connectionData to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the connectionData should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the connectionData is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the connectionData is inserted at 
 *             the last position        
 * @return {sap.landvisz.ConnectionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.ConnectionEntity#insertConnectionData
 * @function
 */

/**
 * Adds some connectionData <code>oConnectionData</code> 
 * to the aggregation named <code>connectionData</code>.
 *
 * @param {sap.landvisz.internal.LinearRowField}
 *            oConnectionData the connectionData to add; if empty, nothing is inserted
 * @return {sap.landvisz.ConnectionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.ConnectionEntity#addConnectionData
 * @function
 */

/**
 * Removes an connectionData from the aggregation named <code>connectionData</code>.
 *
 * @param {int | string | sap.landvisz.internal.LinearRowField} vConnectionData the connectionData to remove or its index or id
 * @return {sap.landvisz.internal.LinearRowField} the removed connectionData or null
 * @public
 * @name sap.landvisz.ConnectionEntity#removeConnectionData
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>connectionData</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.landvisz.internal.LinearRowField[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.ConnectionEntity#removeAllConnectionData
 * @function
 */

/**
 * Checks for the provided <code>sap.landvisz.internal.LinearRowField</code> in the aggregation named <code>connectionData</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.landvisz.internal.LinearRowField}
 *            oConnectionData the connectionData whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.ConnectionEntity#indexOfConnectionData
 * @function
 */
	

/**
 * Destroys all the connectionData in the aggregation 
 * named <code>connectionData</code>.
 * @return {sap.landvisz.ConnectionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.ConnectionEntity#destroyConnectionData
 * @function
 */

// Start of sap/landvisz/ConnectionEntity.js
///**
// * This file defines behavior for the control,
// */


jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.ToolPopup'); // unlisted dependency retained


sap.landvisz.ConnectionEntity.prototype.init = function() {

	this.viewType;
	this.top = 0;
	this.left = 0;
	this.width = 0;
	this.height = 90;

	this.innerTop = 0;
	this.innerLeft = 0;
	this.innerWidth = 0;
	this.innerHeight = 0;
	this.holdDisplay = false;
	this.initializationDone = false;
	//this.holdByClick = false;

	//	this.attachBrowserEvent("mouseenter", function(event) {
	//		alert("test");
	//	});

};

sap.landvisz.ConnectionEntity.prototype.initControls = function() {

	if (!this.oVLayoutRows)
		this.oVLayoutRows = new sap.ui.commons.layout.VerticalLayout(this
				.getId()
				+ "-ConnectionRowVLayout");
	if (!this.connectionLabel)
		this.connectionLabel = new sap.ui.commons.Label(this.getId()
				+ "-connectionLabel");
	if (!this.connectionImage)
		this.connectionImage = new sap.ui.commons.Image(this.getId()
				+ "-connectionImage");

	if (!this.oVLayoutCallout)
		this.oVLayoutCallout = new sap.ui.commons.layout.VerticalLayout(this
				.getId()
				+ "-calloutVLayout");

	if (!this.oVLayoutToolPopup)
		this.oVLayoutToolPopup = new sap.ui.commons.layout.VerticalLayout(this
				.getId()
				+ "-toolPopupVLayout");

	if (!this.calloutLabel)
		this.calloutLabel = new sap.ui.commons.Label(this.getId()
				+ "-calloutLabel");
	if (!this.toolPopup) {
		this.toolPopup = new sap.ui.ux3.ToolPopup(this.getId() + "toolpopup");
		this.toolPopup.addContent(this.oVLayoutToolPopup);
	}
	

	if (this.getType() == sap.landvisz.ConnectionType.ProductSystem)
		this.oVLayoutToolPopup
				.addStyleClass("sapLandviszCalloutPS productSystemPopup");
	if (this.getType() == sap.landvisz.ConnectionType.TechnicalSystem)
		this.oVLayoutToolPopup
				.addStyleClass("sapLandviszCalloutPS technicalSystemPopup");
	if (this.getType() == sap.landvisz.ConnectionType.MobileSolution)
		this.oVLayoutToolPopup
				.addStyleClass("sapLandviszCalloutPS mobileSolutionPopup");
	this.toolPopup.addStyleClass("sapLandviszCalloutPS");

	
	if(this.getSize() == sap.landvisz.EntityCSSSize.Small)
		this.oVLayoutToolPopup.addStyleClass("sapLandviszCalloutRowFieldSmall");
	else
		this.oVLayoutToolPopup.addStyleClass("sapLandviszCalloutRowField");
		
};

sap.landvisz.ConnectionEntity.prototype.onclick = function(oEvent) {

	if (oEvent.target.id == this.getId() + "connectionRow")
		oEvent.srcControl.holdDisplay = !oEvent.srcControl.holdDisplay;
	else
		this.holdDisplay = !this.holdDisplay;
	if(this.holdDisplay){
		if (this.viewType == sap.landvisz.DependencyType.NETWORK_VIEW) {
			var id = jQuery.sap.byId(this.getId() + "connectionRow");
			this.toolPopup.setOpener(id);
			if (!this.toolPopup.isOpen()) {
				this.toolPopup.setPosition(sap.ui.core.Popup.Dock.CenterBottom,
						sap.ui.core.Popup.Dock.CenterTop, id, "-10 0", "fit");
				var popup = jQuery.sap.byId(this.getId() + "toolpopup");
				this.toolPopup.open();
			}
		}		
		this.fireEvent("connectionMouseover");
	}
}

sap.landvisz.ConnectionEntity.prototype.onmouseenter = function(oEvent) {

	if (this.viewType == sap.landvisz.ViewType.SOLUTION_VIEW) 
		oEvent.stopImmediatePropagation();
	else if (oEvent.target.id == this.getId() + "connectionRow") {
		var holdDisplayTrue = false;
		var thisElementHold = false;
		for(var i = 0 ; i < this.getParent().getConnectionEntities().length ; i++){
			if(this.getParent().getConnectionEntities()[i].holdDisplay == true){
				if(this.getParent().getConnectionEntities()[i].getId() == this.getId()){
					holdDisplayTrue = true;
					thisElementHold = true;
				}else{
					holdDisplayTrue = true;
				}
			}		
		}	
		if((!holdDisplayTrue) || (thisElementHold && holdDisplayTrue)){
			if (this.viewType == sap.landvisz.DependencyType.NETWORK_VIEW) {
			var id = jQuery.sap.byId(this.getId() + "connectionRow");
			this.toolPopup.setOpener(id);
			if (!this.toolPopup.isOpen()) {
				this.toolPopup.setPosition(sap.ui.core.Popup.Dock.CenterBottom,
						sap.ui.core.Popup.Dock.CenterTop, id, "-10 0", "fit");
				var popup = jQuery.sap.byId(this.getId() + "toolpopup");
				this.toolPopup.open();
			}
		}
	}	
	if (this.getShowOverlay() == true && this.getLinkId() && ""!=this.getLinkId())
		this.fireEvent("connectionMouseover");
	}

}
sap.landvisz.ConnectionEntity.prototype.onmouseleave = function(oEvent) {

	if (this.viewType == sap.landvisz.ViewType.SOLUTION_VIEW)
		oEvent.stopImmediatePropagation();
	else {
		if (this.holdDisplay == false && this.toolPopup.isOpen()) {
			this.toolPopup.close();
			//			this.oControl.fireEvent("connectionHover");
		}
		if (this.getLinkId() && ""!=this.getLinkId())
		this.fireEvent("connectionMouseout");
		//		if (oEvent.srcElement.id != this.getId() + "connectionRow") {
		//			oEvent.srcControl = this;
		//			this.fireEvent("on" + oEvent.eventType, oEvent);
		//
		//		}
	}
};

sap.landvisz.ConnectionEntity.prototype.onAfterRendering = function() {

	var that = this;
	jQuery.sap.byId(this.getId() + "connectionRow").mouseleave(
			function(oEvent) {
				that.onmouseleave(oEvent);
			});

	jQuery.sap.byId(this.getId() + "connectionRow").mouseenter(
			function(oEvent) {
				that.onmouseenter(oEvent);
			});

};
}; // end of sap/landvisz/ConnectionEntity.js
if ( !jQuery.sap.isDeclared('sap.landvisz.LandscapeViewer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.LandscapeViewer.
jQuery.sap.declare("sap.landvisz.LandscapeViewer");




/**
 * Constructor for a new LandscapeViewer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDefaultDependencyView defaultDependencyView} : sap.landvisz.DependencyType (default: sap.landvisz.DependencyType.NETWORK_VIEW)</li>
 * <li>{@link #getHeight height} : int</li>
 * <li>{@link #getWidth width} : int</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNetworkDependencyLabel networkDependencyLabel} : string (default: 'Network View')</li>
 * <li>{@link #getBoxDependencyLabel boxDependencyLabel} : string (default: 'Box View')</li>
 * <li>{@link #getBoxDependencyLevels boxDependencyLevels} : string[]</li>
 * <li>{@link #getShowDependencyNavigator showDependencyNavigator} : boolean (default: true)</li>
 * <li>{@link #getVisibleDependency visibleDependency} : sap.landvisz.DependencyVisibility (default: sap.landvisz.DependencyVisibility.BOTH)</li>
 * <li>{@link #getViewType viewType} : sap.landvisz.ViewType</li>
 * <li>{@link #getNavigationPath navigationPath} : string</li>
 * <li>{@link #getHasParent hasParent} : boolean (default: true)</li>
 * <li>{@link #getSelectionViewPosition selectionViewPosition} : sap.landvisz.SelectionViewPosition (default: sap.landvisz.SelectionViewPosition.CENTER)</li>
 * <li>{@link #getShowClose showClose} : boolean (default: true)</li>
 * <li>{@link #getComponentViewLabel componentViewLabel} : string (default: 'Component View')</li>
 * <li>{@link #getDeploymentViewLabel deploymentViewLabel} : string (default: 'Deployment View')</li>
 * <li>{@link #getSolutionOptionType solutionOptionType} : sap.landvisz.OptionType</li>
 * <li>{@link #getSolutionType solutionType} : sap.landvisz.SolutionType</li>
 * <li>{@link #getShowDeploymentTypeSection showDeploymentTypeSection} : boolean (default: false)</li>
 * <li>{@link #getDeploymentOptionsLabel deploymentOptionsLabel} : string (default: 'Deployment Options :')</li>
 * <li>{@link #getDeploymentOptionsTooltip deploymentOptionsTooltip} : string</li>
 * <li>{@link #getComponentViewTooltip componentViewTooltip} : string</li>
 * <li>{@link #getDeploymentViewTooltip deploymentViewTooltip} : string</li>
 * <li>{@link #getCloseButtonTooltip closeButtonTooltip} : string</li>
 * <li>{@link #getPlugContentHeight plugContentHeight} : int (default: 0)</li>
 * <li>{@link #getConnectionLine connectionLine} : sap.landvisz.ConnectionLine (default: sap.landvisz.ConnectionLine.Line)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSystems systems} : sap.landvisz.LandscapeEntity[]</li>
 * <li>{@link #getConnectionEntities connectionEntities} : sap.landvisz.ConnectionEntity[]</li>
 * <li>{@link #getConnectors connectors} : sap.landvisz.Connector[]</li>
 * <li>{@link #getSolutionOptions solutionOptions} : sap.landvisz.Option[]</li>
 * <li>{@link #getPlugContent plugContent} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.landvisz.LandscapeViewer#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.landvisz.LandscapeViewer#event:loadSolutionView loadSolutionView} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.landvisz.Option#constructor sap.landvisz.Option}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Visualize the landscape objects in a new user experience
 * @extends sap.landvisz.Option
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.LandscapeViewer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.Option.extend("sap.landvisz.LandscapeViewer", { metadata : {

	publicMethods : [
		// methods
		"appendNavigationPath", "getSelectedOption", "getCurrentSolutionView"
	],
	library : "sap.landvisz",
	properties : {
		"defaultDependencyView" : {type : "sap.landvisz.DependencyType", group : "Identification", defaultValue : sap.landvisz.DependencyType.NETWORK_VIEW},
		"height" : {type : "int", group : "Dimension", defaultValue : null},
		"width" : {type : "int", group : "Dimension", defaultValue : null},
		"title" : {type : "string", group : "Data", defaultValue : null},
		"networkDependencyLabel" : {type : "string", group : "Data", defaultValue : 'Network View'},
		"boxDependencyLabel" : {type : "string", group : "Data", defaultValue : 'Box View'},
		"boxDependencyLevels" : {type : "string[]", group : "Data", defaultValue : null},
		"showDependencyNavigator" : {type : "boolean", group : "Identification", defaultValue : true},
		"visibleDependency" : {type : "sap.landvisz.DependencyVisibility", group : "Identification", defaultValue : sap.landvisz.DependencyVisibility.BOTH},
		"viewType" : {type : "sap.landvisz.ViewType", group : "Identification", defaultValue : null},
		"navigationPath" : {type : "string", group : "Data", defaultValue : null},
		"hasParent" : {type : "boolean", group : "Misc", defaultValue : true},
		"selectionViewPosition" : {type : "sap.landvisz.SelectionViewPosition", group : "Identification", defaultValue : sap.landvisz.SelectionViewPosition.CENTER},
		"showClose" : {type : "boolean", group : "Identification", defaultValue : true},
		"componentViewLabel" : {type : "string", group : "Data", defaultValue : 'Component View'},
		"deploymentViewLabel" : {type : "string", group : "Data", defaultValue : 'Deployment View'},
		"solutionOptionType" : {type : "sap.landvisz.OptionType", group : "Identification", defaultValue : null},
		"solutionType" : {type : "sap.landvisz.SolutionType", group : "Identification", defaultValue : null},
		"showDeploymentTypeSection" : {type : "boolean", group : "Identification", defaultValue : false},
		"deploymentOptionsLabel" : {type : "string", group : "Data", defaultValue : 'Deployment Options :'},
		"deploymentOptionsTooltip" : {type : "string", group : "Data", defaultValue : null},
		"componentViewTooltip" : {type : "string", group : "Data", defaultValue : null},
		"deploymentViewTooltip" : {type : "string", group : "Data", defaultValue : null},
		"closeButtonTooltip" : {type : "string", group : "Data", defaultValue : null},
		"plugContentHeight" : {type : "int", group : "Misc", defaultValue : 0},
		"connectionLine" : {type : "sap.landvisz.ConnectionLine", group : "Misc", defaultValue : sap.landvisz.ConnectionLine.Line}
	},
	aggregations : {
		"systems" : {type : "sap.landvisz.LandscapeEntity", multiple : true, singularName : "system"}, 
		"connectionEntities" : {type : "sap.landvisz.ConnectionEntity", multiple : true, singularName : "connectionEntity"}, 
		"connectors" : {type : "sap.landvisz.Connector", multiple : true, singularName : "connector"}, 
		"solutionOptions" : {type : "sap.landvisz.Option", multiple : true, singularName : "solutionOption"}, 
		"plugContent" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"close" : {}, 
		"loadSolutionView" : {}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.LandscapeViewer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.LandscapeViewer.extend
 * @function
 */

sap.landvisz.LandscapeViewer.M_EVENTS = {'close':'close','loadSolutionView':'loadSolutionView'};


/**
 * Getter for property <code>defaultDependencyView</code>.
 * View type of landscape view
 *
 * Default value is <code>sap.landvisz.DependencyType.NETWORK_VIEW</code>
 *
 * @return {sap.landvisz.DependencyType} the value of property <code>defaultDependencyView</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getDefaultDependencyView
 * @function
 */

/**
 * Setter for property <code>defaultDependencyView</code>.
 *
 * Default value is <code>sap.landvisz.DependencyType.NETWORK_VIEW</code> 
 *
 * @param {sap.landvisz.DependencyType} oDefaultDependencyView  new value for property <code>defaultDependencyView</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setDefaultDependencyView
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of Viewer container
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>height</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iHeight  new value for property <code>height</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setHeight
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * width of the Viewer container
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>width</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iWidth  new value for property <code>width</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setWidth
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Header of the rendered view
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setTitle
 * @function
 */


/**
 * Getter for property <code>networkDependencyLabel</code>.
 * Label of the network view
 *
 * Default value is <code>Network View</code>
 *
 * @return {string} the value of property <code>networkDependencyLabel</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getNetworkDependencyLabel
 * @function
 */

/**
 * Setter for property <code>networkDependencyLabel</code>.
 *
 * Default value is <code>Network View</code> 
 *
 * @param {string} sNetworkDependencyLabel  new value for property <code>networkDependencyLabel</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setNetworkDependencyLabel
 * @function
 */


/**
 * Getter for property <code>boxDependencyLabel</code>.
 * Label of box view
 *
 * Default value is <code>Box View</code>
 *
 * @return {string} the value of property <code>boxDependencyLabel</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getBoxDependencyLabel
 * @function
 */

/**
 * Setter for property <code>boxDependencyLabel</code>.
 *
 * Default value is <code>Box View</code> 
 *
 * @param {string} sBoxDependencyLabel  new value for property <code>boxDependencyLabel</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setBoxDependencyLabel
 * @function
 */


/**
 * Getter for property <code>boxDependencyLevels</code>.
 * Levels information in Box dependency view
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>boxDependencyLevels</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getBoxDependencyLevels
 * @function
 */

/**
 * Setter for property <code>boxDependencyLevels</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aBoxDependencyLevels  new value for property <code>boxDependencyLevels</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setBoxDependencyLevels
 * @function
 */


/**
 * Getter for property <code>showDependencyNavigator</code>.
 * Navigator for dependency views
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showDependencyNavigator</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getShowDependencyNavigator
 * @function
 */

/**
 * Setter for property <code>showDependencyNavigator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowDependencyNavigator  new value for property <code>showDependencyNavigator</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setShowDependencyNavigator
 * @function
 */


/**
 * Getter for property <code>visibleDependency</code>.
 * Dependency View Visibility
 *
 * Default value is <code>sap.landvisz.DependencyVisibility.BOTH</code>
 *
 * @return {sap.landvisz.DependencyVisibility} the value of property <code>visibleDependency</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getVisibleDependency
 * @function
 */

/**
 * Setter for property <code>visibleDependency</code>.
 *
 * Default value is <code>sap.landvisz.DependencyVisibility.BOTH</code> 
 *
 * @param {sap.landvisz.DependencyVisibility} oVisibleDependency  new value for property <code>visibleDependency</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setVisibleDependency
 * @function
 */


/**
 * Getter for property <code>viewType</code>.
 * View type of landscape view
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.ViewType} the value of property <code>viewType</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getViewType
 * @function
 */

/**
 * Setter for property <code>viewType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.ViewType} oViewType  new value for property <code>viewType</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setViewType
 * @function
 */


/**
 * Getter for property <code>navigationPath</code>.
 * Text displayed in the dependency view
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>navigationPath</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getNavigationPath
 * @function
 */

/**
 * Setter for property <code>navigationPath</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNavigationPath  new value for property <code>navigationPath</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setNavigationPath
 * @function
 */


/**
 * Getter for property <code>hasParent</code>.
 * control has to be added in the container or directly in the window.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>hasParent</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getHasParent
 * @function
 */

/**
 * Setter for property <code>hasParent</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHasParent  new value for property <code>hasParent</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setHasParent
 * @function
 */


/**
 * Getter for property <code>selectionViewPosition</code>.
 * positions for selection view entity
 *
 * Default value is <code>sap.landvisz.SelectionViewPosition.CENTER</code>
 *
 * @return {sap.landvisz.SelectionViewPosition} the value of property <code>selectionViewPosition</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getSelectionViewPosition
 * @function
 */

/**
 * Setter for property <code>selectionViewPosition</code>.
 *
 * Default value is <code>sap.landvisz.SelectionViewPosition.CENTER</code> 
 *
 * @param {sap.landvisz.SelectionViewPosition} oSelectionViewPosition  new value for property <code>selectionViewPosition</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setSelectionViewPosition
 * @function
 */


/**
 * Getter for property <code>showClose</code>.
 * close button visibility
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showClose</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getShowClose
 * @function
 */

/**
 * Setter for property <code>showClose</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowClose  new value for property <code>showClose</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setShowClose
 * @function
 */


/**
 * Getter for property <code>componentViewLabel</code>.
 * Label for the component view
 *
 * Default value is <code>Component View</code>
 *
 * @return {string} the value of property <code>componentViewLabel</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getComponentViewLabel
 * @function
 */

/**
 * Setter for property <code>componentViewLabel</code>.
 *
 * Default value is <code>Component View</code> 
 *
 * @param {string} sComponentViewLabel  new value for property <code>componentViewLabel</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setComponentViewLabel
 * @function
 */


/**
 * Getter for property <code>deploymentViewLabel</code>.
 * Label for deployment view.
 *
 * Default value is <code>Deployment View</code>
 *
 * @return {string} the value of property <code>deploymentViewLabel</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getDeploymentViewLabel
 * @function
 */

/**
 * Setter for property <code>deploymentViewLabel</code>.
 *
 * Default value is <code>Deployment View</code> 
 *
 * @param {string} sDeploymentViewLabel  new value for property <code>deploymentViewLabel</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setDeploymentViewLabel
 * @function
 */


/**
 * Getter for property <code>solutionOptionType</code>.
 * determines whether the option is rendered on view or entity
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.OptionType} the value of property <code>solutionOptionType</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getSolutionOptionType
 * @function
 */

/**
 * Setter for property <code>solutionOptionType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.OptionType} oSolutionOptionType  new value for property <code>solutionOptionType</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setSolutionOptionType
 * @function
 */


/**
 * Getter for property <code>solutionType</code>.
 * Type of solution rendered
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.landvisz.SolutionType} the value of property <code>solutionType</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getSolutionType
 * @function
 */

/**
 * Setter for property <code>solutionType</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.landvisz.SolutionType} oSolutionType  new value for property <code>solutionType</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setSolutionType
 * @function
 */


/**
 * Getter for property <code>showDeploymentTypeSection</code>.
 * Deployment type section
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showDeploymentTypeSection</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getShowDeploymentTypeSection
 * @function
 */

/**
 * Setter for property <code>showDeploymentTypeSection</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowDeploymentTypeSection  new value for property <code>showDeploymentTypeSection</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setShowDeploymentTypeSection
 * @function
 */


/**
 * Getter for property <code>deploymentOptionsLabel</code>.
 * Label for the options
 *
 * Default value is <code>Deployment Options :</code>
 *
 * @return {string} the value of property <code>deploymentOptionsLabel</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getDeploymentOptionsLabel
 * @function
 */

/**
 * Setter for property <code>deploymentOptionsLabel</code>.
 *
 * Default value is <code>Deployment Options :</code> 
 *
 * @param {string} sDeploymentOptionsLabel  new value for property <code>deploymentOptionsLabel</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setDeploymentOptionsLabel
 * @function
 */


/**
 * Getter for property <code>deploymentOptionsTooltip</code>.
 * tooltip of label for the options
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>deploymentOptionsTooltip</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getDeploymentOptionsTooltip
 * @function
 */

/**
 * Setter for property <code>deploymentOptionsTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDeploymentOptionsTooltip  new value for property <code>deploymentOptionsTooltip</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setDeploymentOptionsTooltip
 * @function
 */


/**
 * Getter for property <code>componentViewTooltip</code>.
 * tooltip for component view button
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>componentViewTooltip</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getComponentViewTooltip
 * @function
 */

/**
 * Setter for property <code>componentViewTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sComponentViewTooltip  new value for property <code>componentViewTooltip</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setComponentViewTooltip
 * @function
 */


/**
 * Getter for property <code>deploymentViewTooltip</code>.
 * tooltip for deployment view button
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>deploymentViewTooltip</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getDeploymentViewTooltip
 * @function
 */

/**
 * Setter for property <code>deploymentViewTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDeploymentViewTooltip  new value for property <code>deploymentViewTooltip</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setDeploymentViewTooltip
 * @function
 */


/**
 * Getter for property <code>closeButtonTooltip</code>.
 * tooltip for close button
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>closeButtonTooltip</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getCloseButtonTooltip
 * @function
 */

/**
 * Setter for property <code>closeButtonTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCloseButtonTooltip  new value for property <code>closeButtonTooltip</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setCloseButtonTooltip
 * @function
 */


/**
 * Getter for property <code>plugContentHeight</code>.
 * Specify the height of plugged content
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>plugContentHeight</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getPlugContentHeight
 * @function
 */

/**
 * Setter for property <code>plugContentHeight</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iPlugContentHeight  new value for property <code>plugContentHeight</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setPlugContentHeight
 * @function
 */


/**
 * Getter for property <code>connectionLine</code>.
 * Type of line to be drawn
 *
 * Default value is <code>sap.landvisz.ConnectionLine.Line</code>
 *
 * @return {sap.landvisz.ConnectionLine} the value of property <code>connectionLine</code>
 * @public
 * @name sap.landvisz.LandscapeViewer#getConnectionLine
 * @function
 */

/**
 * Setter for property <code>connectionLine</code>.
 *
 * Default value is <code>sap.landvisz.ConnectionLine.Line</code> 
 *
 * @param {sap.landvisz.ConnectionLine} oConnectionLine  new value for property <code>connectionLine</code>
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setConnectionLine
 * @function
 */


/**
 * Getter for aggregation <code>systems</code>.<br/>
 * Systems to be rendered in the landscape viewer
 * 
 * @return {sap.landvisz.LandscapeEntity[]}
 * @public
 * @name sap.landvisz.LandscapeViewer#getSystems
 * @function
 */


/**
 * Inserts a system into the aggregation named <code>systems</code>.
 *
 * @param {sap.landvisz.LandscapeEntity}
 *          oSystem the system to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the system should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the system is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the system is inserted at 
 *             the last position        
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#insertSystem
 * @function
 */

/**
 * Adds some system <code>oSystem</code> 
 * to the aggregation named <code>systems</code>.
 *
 * @param {sap.landvisz.LandscapeEntity}
 *            oSystem the system to add; if empty, nothing is inserted
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#addSystem
 * @function
 */

/**
 * Removes an system from the aggregation named <code>systems</code>.
 *
 * @param {int | string | sap.landvisz.LandscapeEntity} vSystem the system to remove or its index or id
 * @return {sap.landvisz.LandscapeEntity} the removed system or null
 * @public
 * @name sap.landvisz.LandscapeViewer#removeSystem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>systems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.landvisz.LandscapeEntity[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.LandscapeViewer#removeAllSystems
 * @function
 */

/**
 * Checks for the provided <code>sap.landvisz.LandscapeEntity</code> in the aggregation named <code>systems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.landvisz.LandscapeEntity}
 *            oSystem the system whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.LandscapeViewer#indexOfSystem
 * @function
 */
	

/**
 * Destroys all the systems in the aggregation 
 * named <code>systems</code>.
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#destroySystems
 * @function
 */


/**
 * Getter for aggregation <code>connectionEntities</code>.<br/>
 * Optional: connection Entity between two systems.
 * 
 * @return {sap.landvisz.ConnectionEntity[]}
 * @public
 * @name sap.landvisz.LandscapeViewer#getConnectionEntities
 * @function
 */


/**
 * Inserts a connectionEntity into the aggregation named <code>connectionEntities</code>.
 *
 * @param {sap.landvisz.ConnectionEntity}
 *          oConnectionEntity the connectionEntity to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the connectionEntity should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the connectionEntity is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the connectionEntity is inserted at 
 *             the last position        
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#insertConnectionEntity
 * @function
 */

/**
 * Adds some connectionEntity <code>oConnectionEntity</code> 
 * to the aggregation named <code>connectionEntities</code>.
 *
 * @param {sap.landvisz.ConnectionEntity}
 *            oConnectionEntity the connectionEntity to add; if empty, nothing is inserted
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#addConnectionEntity
 * @function
 */

/**
 * Removes an connectionEntity from the aggregation named <code>connectionEntities</code>.
 *
 * @param {int | string | sap.landvisz.ConnectionEntity} vConnectionEntity the connectionEntity to remove or its index or id
 * @return {sap.landvisz.ConnectionEntity} the removed connectionEntity or null
 * @public
 * @name sap.landvisz.LandscapeViewer#removeConnectionEntity
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>connectionEntities</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.landvisz.ConnectionEntity[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.LandscapeViewer#removeAllConnectionEntities
 * @function
 */

/**
 * Checks for the provided <code>sap.landvisz.ConnectionEntity</code> in the aggregation named <code>connectionEntities</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.landvisz.ConnectionEntity}
 *            oConnectionEntity the connectionEntity whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.LandscapeViewer#indexOfConnectionEntity
 * @function
 */
	

/**
 * Destroys all the connectionEntities in the aggregation 
 * named <code>connectionEntities</code>.
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#destroyConnectionEntities
 * @function
 */


/**
 * Getter for aggregation <code>connectors</code>.<br/>
 * connector contains from and to information
 * 
 * @return {sap.landvisz.Connector[]}
 * @public
 * @name sap.landvisz.LandscapeViewer#getConnectors
 * @function
 */


/**
 * Inserts a connector into the aggregation named <code>connectors</code>.
 *
 * @param {sap.landvisz.Connector}
 *          oConnector the connector to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the connector should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the connector is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the connector is inserted at 
 *             the last position        
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#insertConnector
 * @function
 */

/**
 * Adds some connector <code>oConnector</code> 
 * to the aggregation named <code>connectors</code>.
 *
 * @param {sap.landvisz.Connector}
 *            oConnector the connector to add; if empty, nothing is inserted
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#addConnector
 * @function
 */

/**
 * Removes an connector from the aggregation named <code>connectors</code>.
 *
 * @param {int | string | sap.landvisz.Connector} vConnector the connector to remove or its index or id
 * @return {sap.landvisz.Connector} the removed connector or null
 * @public
 * @name sap.landvisz.LandscapeViewer#removeConnector
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>connectors</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.landvisz.Connector[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.LandscapeViewer#removeAllConnectors
 * @function
 */

/**
 * Checks for the provided <code>sap.landvisz.Connector</code> in the aggregation named <code>connectors</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.landvisz.Connector}
 *            oConnector the connector whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.LandscapeViewer#indexOfConnector
 * @function
 */
	

/**
 * Destroys all the connectors in the aggregation 
 * named <code>connectors</code>.
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#destroyConnectors
 * @function
 */


/**
 * Getter for aggregation <code>solutionOptions</code>.<br/>
 * Options for the solution
 * 
 * @return {sap.landvisz.Option[]}
 * @public
 * @name sap.landvisz.LandscapeViewer#getSolutionOptions
 * @function
 */


/**
 * Inserts a solutionOption into the aggregation named <code>solutionOptions</code>.
 *
 * @param {sap.landvisz.Option}
 *          oSolutionOption the solutionOption to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the solutionOption should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the solutionOption is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the solutionOption is inserted at 
 *             the last position        
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#insertSolutionOption
 * @function
 */

/**
 * Adds some solutionOption <code>oSolutionOption</code> 
 * to the aggregation named <code>solutionOptions</code>.
 *
 * @param {sap.landvisz.Option}
 *            oSolutionOption the solutionOption to add; if empty, nothing is inserted
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#addSolutionOption
 * @function
 */

/**
 * Removes an solutionOption from the aggregation named <code>solutionOptions</code>.
 *
 * @param {int | string | sap.landvisz.Option} vSolutionOption the solutionOption to remove or its index or id
 * @return {sap.landvisz.Option} the removed solutionOption or null
 * @public
 * @name sap.landvisz.LandscapeViewer#removeSolutionOption
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>solutionOptions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.landvisz.Option[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.LandscapeViewer#removeAllSolutionOptions
 * @function
 */

/**
 * Checks for the provided <code>sap.landvisz.Option</code> in the aggregation named <code>solutionOptions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.landvisz.Option}
 *            oSolutionOption the solutionOption whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.LandscapeViewer#indexOfSolutionOption
 * @function
 */
	

/**
 * Destroys all the solutionOptions in the aggregation 
 * named <code>solutionOptions</code>.
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#destroySolutionOptions
 * @function
 */


/**
 * Getter for aggregation <code>plugContent</code>.<br/>
 * a control which can be plugged into this control and can be only plugged in top section.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.landvisz.LandscapeViewer#getPlugContent
 * @function
 */


/**
 * Setter for the aggregated <code>plugContent</code>.
 * @param {sap.ui.core.Control} oPlugContent
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#setPlugContent
 * @function
 */
	

/**
 * Destroys the plugContent in the aggregation 
 * named <code>plugContent</code>.
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#destroyPlugContent
 * @function
 */


/**
 * closes the view
 *
 * @name sap.landvisz.LandscapeViewer#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.landvisz.LandscapeViewer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.LandscapeViewer</code>.<br/> itself. 
 *  
 * closes the view
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.LandscapeViewer</code>.<br/> itself.
 *
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#attachClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.landvisz.LandscapeViewer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#detachClose
 * @function
 */

/**
 * Fire event close to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.LandscapeViewer#fireClose
 * @function
 */


/**
 * load the solution view either deployment or component
 *
 * @name sap.landvisz.LandscapeViewer#loadSolutionView
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'loadSolutionView' event of this <code>sap.landvisz.LandscapeViewer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.LandscapeViewer</code>.<br/> itself. 
 *  
 * load the solution view either deployment or component
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.LandscapeViewer</code>.<br/> itself.
 *
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#attachLoadSolutionView
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'loadSolutionView' event of this <code>sap.landvisz.LandscapeViewer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.LandscapeViewer#detachLoadSolutionView
 * @function
 */

/**
 * Fire event loadSolutionView to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.LandscapeViewer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.LandscapeViewer#fireLoadSolutionView
 * @function
 */


/**
 * Append the text in the navigation path
 *
 * @name sap.landvisz.LandscapeViewer#appendNavigationPath
 * @function
 * @param {string} sNavigationText
 *         text to be appended in the navigation path
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * returns an object of the internal connection entity
 *
 * @name sap.landvisz.LandscapeViewer#getSelectedOption
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * return the current solution loaded.
 *
 * @name sap.landvisz.LandscapeViewer#getCurrentSolutionView
 * @function
 * @type string
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/landvisz/LandscapeViewer.js


jQuery.sap.require('sap.landvisz.libs.lvsvg'); // unlisted dependency retained


sap.landvisz.LandscapeViewer.prototype.init = function() {

       this.initializationDone = false;
       this.windowHeight = 0;
       this.windowWidth = 0;
       this.connection = sap.landvisz.internal.Connection;
       this.boxModeHeight = 90;
       this.currentView = "";
       this.firstTime = true;

       this.boxLeftMargine = 0;
       this.boxTopMargine = 0;
       this.hasBoxThirdLevel = false;
       this.firstTime = true;
       this.lindkedEntities = [];
       var oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.landvisz");
       this.SHOW_ALL_TEXT = oBundle.getText("SHOW_ALL");
       this.COLLAPSE_TEXT = oBundle.getText("COLLAPSE_EXPLODE_VIEW");
       this.MAXIMIZE_TEXT = oBundle.getText("MAXIMIZE");
       this.RESTORE_TEXT = oBundle.getText("RESTORE");
//       this.SHOW_NAV_TEXT = oBundle.getText("SHOW_NAVIGATION_PANEL");
//       this.HIDE_NAV_TEXT = oBundle.getText("HIDE_NAVIGATION_PANEL");
       this.CLOSE = oBundle.getText("CLOSE");
       this.srcEntity = "";
       this.currentViewOptionId = "";
       this.currentSolutionView = "";
       this.selectedOptionEntity = null;
       
                    var win = jQuery(window);
                    if (this.getHeight() && "" != this.getHeight()) {
                           this.windowHeight = this.getHeight();
                    }else{
                           this.windowHeight = win.height();
                    }
                    if (this.getWidth()) {
                           this.windowWidth = this.getWidth();
                    } else {
                           this.windowWidth = win.width();
                    }

};

sap.landvisz.LandscapeViewer.prototype.onwindowresize = function(oEvent) {

	   var viewer = jQuery.sap.byId(this.getId());
       if (this.getHasParent() == false) {
             var win = jQuery(window);
             var resizeWidth = win.width();
             var resizeHeight = win.height();
             this.windowHeight = resizeHeight;
             this.windowWidth = resizeWidth;
             this.invalidate();
             
       } else if(viewer && viewer[0] && viewer[0].parentElement ) {
             this.windowWidth = viewer[0].parentElement.clientWidth;
             this.windowHeight = viewer[0].parentElement.clientHeight;
             this.invalidate();
       }
};

sap.landvisz.LandscapeViewer.prototype.onclick = function(oEvent) {

       var systems = this.getSystems();
       var selectedSystem = systems[0];
       var container = jQuery.sap.byId(this.getId() + "-container");
       var selectionView = jQuery.sap.byId(selectedSystem.getId());

       if (this.getViewType() == sap.landvisz.ViewType.SELECTION_VIEW && oEvent.srcControl.getTooltip() == this.MAXIMIZE_TEXT) {


             if (oEvent.srcControl.getTooltip() == this.SHOW_ALL_TEXT)
                    selectedSystem.expVisible = true;
             
              container.css({
                    height : this.entityHeight,
                    width : this.entityWidth
             });


             jQuery.sap.byId(selectedSystem.getId() + "-CLVEntityVLayoutContainer")
                           .css({
                                 "display" : "none"
                           });    
             this._animateMaximizeView(selectedSystem, container);
       
             setTimeout(function() {
                    jQuery.sap.byId(
                                 selectedSystem.getId() + "-CLVEntityVLayoutContainer").css(
                                 {
                                        "display" : "block"
                                 });
                    jQuery.sap.byId(
                                 selectedSystem.getId() + "-CLVEntityVLayoutProperties")
                                 .css({
                                        "display" : "block"
                                 });    
                    
             }, 1000);
       }

       if (this.getViewType() == sap.landvisz.ViewType.SELECTION_VIEW && oEvent.srcControl.getTooltip() == this.RESTORE_TEXT) {
    	   	 var expWidth = this.windowWidth - 40;
             var expHeight = this.windowHeight;
             selectedSystem.sViewWidth = expWidth;
             selectedSystem.sViewHeight = expHeight;
             
             jQuery.sap.byId(selectedSystem.getId() + "-CLVEntityVLayoutContainer")
                           .css({
                                 "display" : "none"
                           });
             this._animateRestoreView(selectedSystem, container);
             
             setTimeout(function() {
                    jQuery.sap.byId(
                                 selectedSystem.getId() + "-CLVEntityVLayoutContainer").css(
                                 {
                                        "display" : "block"
                                 });
             }, 1000);
       }

       if (oEvent.srcControl.getTooltip() == this.SHOW_ALL_TEXT && selectedSystem.entityMaximized != true) 
             this._animateShowAllView(selectedSystem, container,selectionView);

       if (oEvent.srcControl.getTooltip() == this.SHOW_ALL_TEXT && selectedSystem.entityMaximized == true) {
             selectedSystem.sViewWidth = expWidth;
             selectedSystem.sViewHeight = expHeight;
             this._animateSelectionView(container);
       }

       else if (oEvent.srcControl.getTooltip() == this.COLLAPSE_TEXT && this.entityMaximized != true) 
             this._animateCollapseView(container);
             
       else if (oEvent.srcControl instanceof sap.landvisz.internal.SingleDataContainer && selectedSystem.explodeViewClosed == true)
             this._animateCollapseView(container);
};

sap.landvisz.LandscapeViewer.prototype._animateCollapseView = function(container) {

             var position = this.getSelectionViewPosition();
             if (position == sap.landvisz.SelectionViewPosition.CENTER) {
                    var left = (this.windowWidth - this.entityWidth) / 2;
                    var top = (this.windowHeight - this.entityHeight) / 2;
             } else if (position == sap.landvisz.SelectionViewPosition.LEFT) {
                    var left = 20;
                    var top = 20;
             } else if (position == sap.landvisz.SelectionViewPosition.RIGHT) {
                    var left = this.windowHeight - this.entityHeight - 20;
                    var top = 20;
             }
             container.animate({
                 width : this.entityWidth,
                 height : this.entityHeight,
                    left : left,
                    top : top,
             }, 1000);

};


sap.landvisz.LandscapeViewer.prototype._animateSelectionView = function(container) {

                    var left;
                    var top;
                    var position = this.getSelectionViewPosition();
                    if (position == sap.landvisz.SelectionViewPosition.CENTER) {
                           left = (this.windowWidth - this.entityWidth) / 2;
                           top = (this.windowHeight - this.entityHeight) / 2;
                    } else if (position == sap.landvisz.SelectionViewPosition.LEFT) {
                           left = 20;
                           top = 20;
                    } else if (position == sap.landvisz.SelectionViewPosition.RIGHT) {
                           left = this.windowWidth - this.entityWidth -20;
                           top = 20;
                    }

                    container.animate({
                           left : left,
                           top : top,
                    }, 1000);

};


sap.landvisz.LandscapeViewer.prototype._animateShowAllView = function(selectedSystem, container,selectionView ) {

             var expWidth = this.windowWidth - 12;
             var expHeight = this.windowHeight;
             selectedSystem.sViewWidth = expWidth - this.entityWidth;
             selectedSystem.sViewHeight = expHeight;
             selectedSystem.left = 0;
             selectedSystem.top = 0;
             selectionView.css({
                    "position" : "relative"
             });
             container.animate({
                    left : 10,
                    top : 0,
                    width : expWidth,
                    height : "100%",
             }, 1000);
             var smv = jQuery.sap.byId("SMV");
             setTimeout(function() {
                    smv.animate({
                           "display" : "block"
                    }, 1000);
             }, 1000);

};


sap.landvisz.LandscapeViewer.prototype._animateMaximizeView = function(selectedSystem, container) {

       var expWidth = this.windowWidth - 40;
       var expHeight = this.windowHeight - 66;
       selectedSystem.sViewWidth = expWidth;
       selectedSystem.sViewHeight = expHeight;
       container.animate({
             left : 20,
             top : 20,
             width : expWidth,
             height : expHeight
       },1000);

};

sap.landvisz.LandscapeViewer.prototype._animateRestoreView = function(selectedSystem, container) {

			 var expWidth = this.windowWidth - 40;
             var expHeight = this.windowHeight;
             selectedSystem.sViewWidth = expWidth;
             selectedSystem.sViewHeight = expHeight;
             var position = this.getSelectionViewPosition();
             var left;
             var top;
             if (position == sap.landvisz.SelectionViewPosition.CENTER) {
                    left = (this.windowWidth - this.entityWidth) / 2;
                    top = (this.windowHeight - this.entityHeight) / 2;
             } else if (position == sap.landvisz.SelectionViewPosition.LEFT) {
                    left = 20;
                    top = 20;
             } else if (position == sap.landvisz.SelectionViewPosition.RIGHT) {
                    left = this.windowHeight - this.entityHeight -20;
                    top = 20;
             }

             container.animate({
                    left : left,
                    top : top,
                    width : this.entityWidth,
                    height : this.entityHeight
             }, 1000);


};

sap.landvisz.LandscapeViewer.prototype.resetView = function(system, action) {

       var container = jQuery.sap.byId(this.getId() + "-container");
       if (system.entityMaximized == true) {

             system.entityMaximized = false;
             setTimeout(function() {
                    system.invalidate();
             }, 1000);

             var expWidth = this.windowWidth - 40;
             var expHeight = this.windowHeight;
             system.sViewWidth = expWidth;
             system.sViewHeight = expHeight;
             var position = this.getSelectionViewPosition();
             var left;
             var top;
             if (position == sap.landvisz.SelectionViewPosition.CENTER) {
                    left = (this.windowWidth - this.entityWidth) / 2;
                    top = (this.windowHeight - this.entityHeight) / 2;
             } else if (position == sap.landvisz.SelectionViewPosition.LEFT) {
                    left = 20;
                    top = 20;
             } else if (position == sap.landvisz.SelectionViewPosition.RIGHT) {
                    left = this.windowHeight - this.entityHeight - 20;
                    top = 20;
             }

             jQuery.sap.byId(system.getId() + "-CLVEntityVLayoutProperties").css({
                    "display" : "none"
             });
             container.animate({
                    left : left,
                    top : top,
                    width : this.entityWidth,
                    height : this.entityHeight
             }, 1000);

             setTimeout(function() {
                    jQuery.sap.byId(system.getId() + "-CLVEntityVLayoutProperties")
                                 .css({
                                        "display" : "block"
                                 });
             }, 1000);

             setTimeout(function() {
                    jQuery.sap.byId(action.getId()).click();

             }, 1000);

       } else if (system.expVisible == true) {

             system.entityMaximized = false;
             system.expVisible = false;
             jQuery.sap.byId(system.oHLayoutMiniNavigation.getId()).css("display",
                           "block");
             system.showMiniNavigation = true;

             var header;
             var headers = system.getDataContainers();
             var backup;
             for ( var i = 0; i < system.dialogArray.length; i++) {
                    header = system.dialogArray[i];
                    backup = header.getProperties();
                    if (backup && backup.length && backup.length > 0) {
                           for ( var j = 0; j < backup.length; j++) {
                                 headers[i].addAggregation("properties", backup[j], false);
                           }
                    }
             }

             for ( var i = 0; i < headers.length; i++) {
                    if (i != system.selectedIndex) {
                           headers[i].visible = true;
                    }
             }
             system.nextIcon.setVisible(true);
             system.previousIcon.setVisible(true);
             jQuery.sap.byId("SMV").hide(700);
             system.invalidate();

             var left;
             var top;
             var position = this.getSelectionViewPosition();
             if (position == sap.landvisz.SelectionViewPosition.CENTER) {
                    left = (this.windowWidth - this.entityWidth) / 2;
                    top = (this.windowHeight - this.entityHeight) / 2;
             } else if (position == sap.landvisz.SelectionViewPosition.LEFT) {
                    left = 20;
                    top = 20;
             } else if (position == sap.landvisz.SelectionViewPosition.RIGHT) {
                    left = this.windowHeight - this.entityHeight - 20;
                    top = 20;
             }

             container.animate({
                    left : left,
                    top : top,
             }, 1000);

             setTimeout(function() {
                    jQuery.sap.byId(action.getId()).click();
             }, 1000);

       } else
             jQuery.sap.byId(action.getId()).click();

};

sap.landvisz.LandscapeViewer.prototype.initControls = function() {

       var id = this.getId();
       if (!this.oHLayoutConnectionEntity)
             this.oHLayoutConnectionEntity = new sap.ui.commons.layout.HorizontalLayout(
                           id + "viewerConnectionEntityHLayout");

       if (!this.oHLayoutOptions)
             this.oHLayoutOptions = new sap.ui.commons.layout.HorizontalLayout(id
                           + "viewerHLayoutOptions");
       this.entityWidth;
       this.entityHeight;

       this.networkViewVisible = false;
       this.boxViewVisible = false;
       if (!this.boxViewLabel)
             this.boxViewLabel = new sap.ui.commons.Label(id + "-viewBoxLabel");
       if (!this.boxViewImg)
             this.boxViewImg = new sap.ui.commons.Image(id + "-viewBoxImg");
       if (!this.networkViewLabel)
             this.networkViewLabel = new sap.ui.commons.Label(id
                           + "-viewNetworkLabel");
       if (!this.closeImg)
             this.closeImg = new sap.ui.commons.Image(id + "-closeImg");

       if (!this.networkViewBtn)
             this.networkViewBtn = new sap.ui.commons.Button(id + "-viewNetworkBtn")
                           .addStyleClass("sapLandviszImg");
       if (!this.boxViewBtn)
             this.boxViewBtn = new sap.ui.commons.Button(id + "-viewBoxBtn")
                           .addStyleClass("sapLandviszImg");

       if (!this.compViewBtn)
             this.compViewBtn = new sap.ui.commons.Button(id + "-viewComponentBtn")
                           .addStyleClass("sapLandviszImg");
       if (!this.depViewBtn)
             this.depViewBtn = new sap.ui.commons.Button(id + "-viewDeployBtn")
                           .addStyleClass("sapLandviszImg");

       if (!this.navigationPathLabel)
             this.navigationPathLabel = new sap.ui.commons.Label(id
                           + "navigationPathLabel");
       if (!this.deploymentOptionLabel)
             this.deploymentOptionLabel = new sap.ui.commons.Label(id
                           + "deploymentOptionLabel");

       var size = this.getSystems()[0].getRenderingSize();

     if (size == sap.landvisz.EntityCSSSize.Small) {
           this.entityWidth = Math.round(22.7 * 12);
           this.entityHeight = Math.round(15.8 * 12);
     }
     if (size == sap.landvisz.EntityCSSSize.RegularSmall) {
           this.entityWidth = Math.round(33.7 * 12);
           this.entityHeight = Math.round(22.3 * 12);
     }
     if (size == sap.landvisz.EntityCSSSize.Regular) {
           this.entityWidth = Math.round(38.7 * 12);
           this.entityHeight = Math.round(24.5 * 12);
     }
     if (size == sap.landvisz.EntityCSSSize.Medium) {
           this.entityWidth = Math.round(43.5 * 12);
           this.entityHeight = Math.round(28 * 12);
     }
     if (size == sap.landvisz.EntityCSSSize.Large) {

           this.entityWidth = Math.round(64.5 * 12);
           this.entityHeight = Math.round(41.5 * 12);

     }

       this.visibleEntities = [];
       this.depTypeOptions = new Object();
       
};

sap.landvisz.LandscapeViewer.prototype.appendNavigationPath = function(
             navigationText) {

       var fullText = this.navigationPathLabel.getText() + "-->" + navigationText;
       this.setNavigationPath(fullText);
       this.navigationPathLabel.setText(fullText);

};

sap.landvisz.LandscapeViewer.prototype.onAfterRendering = function() {

       jQuery(window).unbind("resize", jQuery.proxy(this.onwindowresize, this));
       // Register for window resize event during the viewer is rendered.
       jQuery(window).bind("resize", jQuery.proxy(this.onwindowresize, this));

if (this.getViewType() == sap.landvisz.ViewType.SOLUTION_VIEW) {

             var innerContainerId = this.getId() + "-solutionInnerContainer";
             var innerContainer = jQuery.sap.byId(innerContainerId);
             var entity;
             var entityID;
             var leftPos;
             var topPos;
             var margin = 5;

             this.innerLeftMargine = innerContainer[0].offsetLeft;
             this.innerTopMargine = innerContainer[0].offsetTop;
             
             var systems = this.getSystems();
             var entity;
             var entityLeft;
             var entityTop;
             var totalLeft;
             var totalTop;
             for (var i = 0; i < systems.length; i++) {
                    entity = jQuery.sap.byId(systems[i].getId());
                    entityLeft = systems[i].left;
                    entityTop = systems[i].top;
                    totalLeft = entityLeft + this.innerLeftMargine;
                    totalTop = entityTop + this.innerTopMargine;
                    systems[i].left = totalLeft;
                    systems[i].top = totalTop;
                    entity.css({
                           left : totalLeft,
                           top : totalTop
                    });
             }

             var connectionEntities = this.getConnectionEntities();
             var deploymentOptionsTop = 0;
             for ( var i = 0; i < connectionEntities.length; i++) {
                    entity = jQuery.sap.byId(connectionEntities[i].getId());
                    entityLeft = connectionEntities[i].left;
                    entityTop = connectionEntities[i].top;
                    totalLeft = entityLeft + this.innerLeftMargine;
                    totalTop = entityTop + this.innerTopMargine;
                    deploymentOptionsTop = connectionEntities[i].top ;
                    connectionEntities[i].left = totalLeft;
                    connectionEntities[i].top = totalTop;
                    
                    entity.css({
                           left : totalLeft,
                           top : totalTop
                    });
                    
                   var conLbl =  jQuery.sap.byId(connectionEntities[i].getId() +"-connectionLabel");
                   var conLblWidth = connectionEntities[i].width - 68;
                    conLbl.css({
                           "max-width" : conLblWidth,
                    });
             }
		    if (this.getSolutionType() == sap.landvisz.SolutionType.DEPLOYMENT_VIEW) {

			var depContainerid = this.getId() + "-deploymentTypeContainer";
			var depContainer = jQuery.sap.byId(depContainerid);
			var boxWidth = innerContainer[0].offsetWidth;
			var depContainerTop = this.entityHeight + 90 + 10;

			depContainer.css({
				left : this.innerLeftMargine,
				top : depContainerTop,
				width : boxWidth
			});

		  if (null != this.selectedOptionEntity) {
				var selectedDepTypes = this.depTypeOptions[this.selectedOptionEntity
						.getId()];
					if (this.getShowDeploymentTypeSection() == true
						&& selectedDepTypes.length <= 0) {

						var changedHeight = innerContainer[0].offsetHeight - 40;

						innerContainer.css({
						height : changedHeight
						});
					}
				}
		    }
             if (this.getSolutionOptionType() == sap.landvisz.OptionType.ENTITY) {

                    var optionContainerid = this.getId() + "-optionContainer";
                    var optionContainer = jQuery.sap.byId(optionContainerid);
                    var boxWidth = innerContainer[0].offsetWidth - 10;
                    var optionContainerTop = this.entityHeight + 90 + 10 + 5;
                    if (this.getSolutionType() == sap.landvisz.SolutionType.DEPLOYMENT_VIEW) {
                           optionContainerTop = deploymentOptionsTop;
                    }
                    if (this.getShowDeploymentTypeSection() == true)
                           optionContainerTop = optionContainerTop + 40;

                    optionContainer.css({
                           left : this.innerLeftMargine + 5,
                           top : optionContainerTop,
                           width : boxWidth
                    });
             }
             
             if (this.getSolutionType() == sap.landvisz.SolutionType.COMPONENT_VIEW) {

            	 this.compViewBtn.addStyleClass("selectedView");

            	 this.depViewBtn.removeStyleClass("selectedView");

             }else if (this.getSolutionType() == sap.landvisz.SolutionType.DEPLOYMENT_VIEW) {
            	 
            	 this.depViewBtn.addStyleClass("selectedView");

            	 this.compViewBtn.removeStyleClass("selectedView");
             }
       }

       else if (this.getViewType() == sap.landvisz.ViewType.SELECTION_VIEW) {
       
             var enitityContainer = jQuery.sap.byId(this.getId() + "-container");
             var systems = this.getSystems();
             var selectedSystem = systems[0];
             var selectionView = jQuery.sap.byId(systems[0].getId());

             if (systems[0].entityMaximized == true) 

                    this._animateMaximizeView(selectedSystem,enitityContainer);
             else if (systems[0].expVisible == true) {

                  var expWidth = this.windowWidth - 12;
                  var expHeight = this.windowHeight;
                  selectedSystem.sViewWidth = expWidth - this.entityWidth;
                  selectedSystem.sViewHeight = expHeight;
                  selectionView.css({
                         "position" : "relative"
                  });
                  enitityContainer.css({
                         left : 10,
                         top : 0,
                         width : expWidth,
                         height : "100%",
                  });
                  var smv = jQuery.sap.byId("SMV");
                  setTimeout(function() {
                         smv.css({
                               "display" : "block"
                         }, 1000);
                  }, 1000);
        //this._animateShowAllView(selectedSystem, enitityContainer,selectionView );
             }
                    
             else
                this._animateSelectionView(enitityContainer);

       }
       else if (this.getViewType() == sap.landvisz.ViewType.DEPENDENCY_VIEW && this.currentView == sap.landvisz.DependencyType.NETWORK_VIEW) {
             var boxContainerId = this.getId() + "-boxViewContainer";
             var boxContainer = jQuery.sap.byId(boxContainerId);

             this.boxLeftMargine = boxContainer[0].offsetLeft;
             this.boxTopMargine = boxContainer[0].offsetTop;
             boxContainer.css("display", "none");

             var boxLevels = this.getBoxDependencyLevels();
             if (boxLevels) {
                    for ( var i = 0; i < boxLevels.length; i++) {
                           var boxLabelId = this.getId() + "-boxViewLabel" + i;
                           var boxLabel = jQuery.sap.byId(boxLabelId);
                           boxLabel.css("display", "none");
                    }
             }
             var viewer = jQuery.sap.byId(this.getId() + "-viewContainer");
             var svgWidth = viewer[0].scrollWidth - 10;
             var svgHeight = viewer[0].scrollHeight - 10;
             
             this.svgForConnections = sap.landvisz.libs.lvsvg.getSVG(svgWidth,
                           svgHeight, this.getId() + "-viewContainer");
             this.connection = sap.landvisz.internal.Connection;
             this.connection.svgForConnections = this.svgForConnections;
             this.connection.renderConnections(this.getSystems(), this
                           .getConnectionEntities(), this.getConnectionLine());

       } else if (this.getViewType() == sap.landvisz.ViewType.DEPENDENCY_VIEW && this.currentView == sap.landvisz.DependencyType.BOX_VIEW) {

             var boxContainerId = this.getId() + "-boxViewContainer";
             var boxContainer = jQuery.sap.byId(boxContainerId);
             var entity;
             var entityID;
             var leftPos;
             var topPos;
             var margin = 5;

             this.boxLeftMargine = boxContainer[0].offsetLeft;
             this.boxTopMargine = boxContainer[0].offsetTop;

             var levelHeaderWidth = 30;
             var levelHeaderHeight = this.entityHeight;

             var systems = this.getSystems();
             var entity;
             var entityLeft;
             var entityTop;
             var totalLeft;
             var totalTop;
             for ( var i = 0; i < systems.length; i++) {
                    entity = jQuery.sap.byId(systems[i].getId());
                    entityLeft = systems[i].left;
                    entityTop = systems[i].top;
                    totalLeft = entityLeft + this.boxLeftMargine;
                    totalTop = entityTop + this.boxTopMargine;
                    systems[i].left = totalLeft;
                    systems[i].top = totalTop;
                    entity.css({
                           left : totalLeft,
                           top : totalTop
                    });
             }

             var connectionEntities = this.getConnectionEntities();

             for ( var i = 0; i < connectionEntities.length; i++) {
                    entity = jQuery.sap.byId(connectionEntities[i].getId());
                    entityLeft = connectionEntities[i].left;
                    entityTop = connectionEntities[i].top;
                    totalLeft = entityLeft + this.boxLeftMargine;
                    totalTop = entityTop + this.boxTopMargine;
                    connectionEntities[i].left = totalLeft;
                    connectionEntities[i].top = totalTop;
                    entity.css({
                           left : totalLeft,
                           top : totalTop
                    });
             }

             var levelHeaderLeft = this.boxLeftMargine + margin;
             var levelHeaderTop = this.boxModeHeight + (margin * 2)
                           + this.boxTopMargine;
             var boxLevels = this.getBoxDependencyLevels();
             var boxViewFirstLabel = "Systems";
             var boxViewFirstLabelTooltip = "Systems";
             var that = this;
             if (boxLevels) {
                    setTimeout(function() {
                           for ( var i = 0; i < boxLevels.length; i++) {

                                 if (that.hasBoxThirdLevel == true) {

                                        var boxLabelId = that.getId() + "-boxViewLabel" + i;
                                        var boxLabel = jQuery.sap.byId(boxLabelId);
                                        levelHeaderTop += ((that.entityHeight + margin) * i);

                                        boxLabel.css({
                                               left : levelHeaderLeft,
                                               top : levelHeaderTop,
                                               width : levelHeaderWidth,
                                               height : levelHeaderHeight,
                                               display : "block"
                                        });

                                        var boxLavelLabel = jQuery.sap.byId(boxLabelId
                                                     + "Level");
                                        boxLavelLabel.css({
                                               width : levelHeaderHeight,
                                               height : levelHeaderHeight,
                                        });
                                 }
                           }
                    }, 1000);
             }
       }

       if (this.getViewType() == sap.landvisz.ViewType.DEPENDENCY_VIEW
                    && this.currentView == sap.landvisz.DependencyType.NETWORK_VIEW) {
    	   
    	     this.networkViewBtn.addStyleClass("selectedView");

    	     this.boxViewBtn.removeStyleClass("selectedView");
       }

       if (this.getViewType() == sap.landvisz.ViewType.DEPENDENCY_VIEW
                    && this.currentView == sap.landvisz.DependencyType.BOX_VIEW) {
    	   
    	   this.boxViewBtn.addStyleClass("selectedView");
    	   
    	   this.networkViewBtn.removeStyleClass("selectedView");
       }

       if (this.getViewType() == sap.landvisz.ViewType.DEPENDENCY_VIEW) {

             var version = jQuery.ui ? jQuery.ui.version || "pre 1.6"
                           : 'jQuery-UI not detected';

             // if (version == "pre 1.6") {
             jQuery.sap.require("sap.ui.thirdparty.jqueryui.jquery-ui-core");
             jQuery.sap.require("sap.ui.thirdparty.jqueryui.jquery-ui-widget");
             jQuery.sap.require("sap.ui.thirdparty.jqueryui.jquery-ui-mouse");
             jQuery.sap.require("sap.ui.thirdparty.jqueryui.jquery-ui-draggable");
             jQuery.sap.require("sap.ui.thirdparty.jqueryui.jquery-ui-droppable");
             // }

             var enitityContainer = jQuery.sap.byId(this.getId() + "-viewContainer");
             var navigationContainer = jQuery.sap.byId(this.getId() + "-navigation");
             var that = this;

             var enitityContainer = jQuery.sap.byId(this.getId() + "-viewContainer");
             var frameScrollHeight = Number(enitityContainer[0].scrollHeight);
             var frameScrollWidth = Number(enitityContainer[0].scrollWidth);
             var frameHeight = Number(enitityContainer.height());
             var frameWidth = Number(enitityContainer.width());

             if ((frameScrollWidth > frameWidth)
                           || (frameScrollHeight > frameHeight)) {
                    if (navigationContainer.css('display') == 'none') {
                           navigationContainer.show(0);
                           that.getVisibleRegion(0);
                           navigationContainer.hide(0);
                    } else {
                           that.getVisibleRegion(0);
                    }
             } else
                    navigationContainer.hide(0);

             var navigator = jQuery.sap.byId(this.getId() + "-navigation_navigator");
             var that = this;
             navigator.bind('drag', function(event) {
                    that.calculateNavigationMovement(enitityContainer, navigator);
             });
             navigator.draggable({
                    containment : navigationContainer
             });

             var navigatorArrowdown = jQuery.sap.byId(this.getId()
                           + "-navigation_header_arrowdown");
             var navigatorArrowup = jQuery.sap.byId(this.getId()
                           + "-navigation_header_arrowup");
             navigatorArrowdown.show();

             navigatorArrowdown.click(function(e) {
                    navigationContainer.animate({
                           height : '0px'
                    }, 1000, "swing", function(e) {
                           navigator.hide();
                    });
                    navigatorArrowdown.hide();
                    navigatorArrowup.show();
                    e.stopPropagation();
             });

             navigatorArrowup.click(function(e) {
                    navigationContainer.animate({
                           height : '29%'
                    }, 1000, "swing");
                    navigatorArrowup.hide();
                    navigatorArrowdown.show();
                    navigator.show();
                    e.stopPropagation();
             });

             navigationContainer.bind('drag');
             navigationContainer.draggable({
                    cancel : "div.navigationHeader",
                    containment : enitityContainer
             });
       }

};

sap.landvisz.LandscapeViewer.prototype.calculateNavigationMovement = function(
             mainContainer, navigator) {
       var heightRatio = mainContainer.height() / navigator.height();
       var widthRatio = mainContainer.width() / navigator.width();

       mainContainer
                    .scrollTop((navigator.css('top').split('px')[0]) * heightRatio);
       mainContainer.scrollLeft((navigator.css('left').split('px')[0])
                    * widthRatio);
       var connectionEntities = this.getConnectionEntities();
       for ( var i = 0; i < connectionEntities.length; i++) {
             if (this.getVisibleDependency() == sap.landvisz.DependencyVisibility.BOTH
                           && this.currentView == sap.landvisz.DependencyType.NETWORK_VIEW) {
                    if (connectionEntities[i].toolPopup.isOpen())
                           connectionEntities[i].toolPopup.close();
             }
       }
}

sap.landvisz.LandscapeViewer.prototype.getVisibleRegion = function() {

       var enitityContainer = jQuery.sap.byId(this.getId() + "-viewContainer");
       var navigationContainer = jQuery.sap.byId(this.getId() + "-navigation");
       var navigator = jQuery.sap.byId(this.getId() + "-navigation_navigator");
       navigationContainer.css({
             height : '29%'
       });
       setTimeout(function() {
             sap.landvisz.libs.lvsvg.convertHtmltoCanvas(enitityContainer,
                           navigationContainer);
       }, 1000);
       navigationContainer.hide();

       setTimeout(function() {
             navigationContainer.show("slow");
             navigationContainer.animate({
                    height : '29%'
             }, 100, "swing", function(e) {
                    navigator.show("slow");
             });

             var frameScrollHeight = Number(enitityContainer[0].scrollHeight);
             var frameScrollWidth = Number(enitityContainer[0].scrollWidth);
             var frameHeight = Number(enitityContainer.height());
             var frameWidth = Number(enitityContainer.width());
             var heightRatio = frameHeight / frameScrollHeight;
             var widthRatio = frameWidth / frameScrollWidth;

             setTimeout(function() {

                    var navHeight = Number(navigationContainer[0].scrollHeight);
                    var navWidth = Number(navigationContainer[0].scrollWidth);
                    navigator.height(navHeight * heightRatio);
                    navigator.width(navWidth * widthRatio);

                    navigator.show();
                    navigator.css({
                           left : 0,
                           top : 0
                    });

             }, 1500);

       }, 1000);
};

sap.landvisz.LandscapeViewer.prototype.onmouseenter = function(oEvent) {
       var srcCntrl = oEvent.oSource;
       var srcElement = oEvent.target;
       var connectors;
       var systems;
       var hasMatchingHeader = false;
       var holdDisplayTrue = false; 
       var holdCount = 0;
       for(var i = 0 ; i < this.getConnectionEntities().length ; i++){
             if(this.getConnectionEntities()[i].holdDisplay == true){
                    holdDisplayTrue = true;
                    holdCount++;
             }                   
       }      
       if((!holdDisplayTrue) || (holdCount > 1)){
       if (srcCntrl instanceof sap.landvisz.ConnectionEntity) {

             this.lindkedEntities = [];
             var connectionEntities = this.getConnectionEntities();
             for ( var i = 0; i < connectionEntities.length; i++) {
             
                           if (srcCntrl.getId() != connectionEntities[i].getId()) {
                           jQuery.sap
                                        .byId(connectionEntities[i].getId() + "connectionRow")
                                        .css({
                                               "box-shadow" : "none"
                                        });
                           connectionEntities[i].holdDisplay = false;
                           connectionEntities[i].toolPopup.close();
                    } else {
                           jQuery.sap
                                        .byId(connectionEntities[i].getId() + "connectionRow")
                                        .css({
                                               "box-shadow" : "rgb(0, 0, 0) 0px 0px 20px"
                                        });
                    }
             }
             connectors = this.getConnectors();
             for ( var i = 0; i < connectors.length; i++) {
                    if (connectors[i].getSource() == srcCntrl.getConnectionId())
                           this.lindkedEntities.push(connectors[i].getTarget());
                    if (connectors[i].getTarget() == srcCntrl.getConnectionId())
                           this.lindkedEntities.push(connectors[i].getSource());
             }

             systems = this.getSystems();
             var isLinkedSystem;
             var header;
             for ( var i = 0; i < systems.length; i++) {
                    isLinkedSystem = false;

                    for ( var j = 0; j < this.lindkedEntities.length; j++) {

                           if (systems[i].getSystemId() == this.lindkedEntities[j]) {
                                 isLinkedSystem = true;
                                 if (srcCntrl.getLinkedHeader()
                                               && "" != srcCntrl.getLinkedHeader()) {
                                        hasMatchingHeader = false;
                                        for ( var k = 0; k < systems[i].propertyHeaders.length; k++) {
                                               header = systems[i].propertyHeaders[k];
                                               if (srcCntrl.getLinkedHeader() == header
                                                            .getHeader()) {
                                                     if (header.getSelected() != true) {
                                                            header.setSelected(true);
                                                            systems[i].selectedIndex = k;
                                                            hasMatchingHeader = true;
                                                     } else {
                                                            systems[i].selectedIndex = k;

                                                            this.filterOverlay(systems[i], srcCntrl
                                                                          .getLinkId())

                                                            jQuery.sap.byId(
                                                                          systems[i].getId()
                                                                                       + "-innerOverlay").css({
                                                                   "display" : "block"
                                                            });
                                                            jQuery.sap.byId(
                                                                          systems[i].getId() + "-overlay")
                                                                         .css({
                                                                                "display" : "block"
                                                                         });

                                                     }
                                               } else
                                                     systems[i].propertyHeaders[k]
                                                                   .setSelected(false);

                                               // innerOverlay
                                               // systems[i].invalidate();
                                               systems[i].showOverlay = false;
                                               systems[i].overlayFilter = "";

                                        }

                                        if (hasMatchingHeader == true
                                                     && systems[i].showOverlay == false) {
                                               systems[i].showOverlay = true;
                                               systems[i].overlayFilter = srcCntrl.getLinkId();
                                               systems[i].invalidate();

                                        }
                                 }
                           }

                    }

                    if (isLinkedSystem == false) {
                           if (systems[i].showOverlay == true)
                                 systems[i].invalidate();
                           else {
                                 jQuery.sap.byId(systems[i].getId() + "-innerOverlay").css({
                                        "display" : "none"
                                 });
                                 jQuery.sap.byId(systems[i].getId() + "-overlay").css({
                                        "display" : "none"
                                 });
                           }
                           systems[i].showOverlay = false;
                           systems[i].overlayFilter = "";

                    }

             }
       }
}
};

sap.landvisz.LandscapeViewer.prototype.filterOverlay = function(system, filter) {

       var headerContent = system.oVLayoutOverlay.getContent();
       var row;
       var linearRows;
       for ( var j = 0; j < headerContent.length; j++) {
             row = headerContent[j];
             if (row instanceof sap.landvisz.internal.NestedRowField) {

                    linearRows = row.getLinearRows();
                    for ( var k = 0; k < linearRows.length; k++) {

                           if (filter == linearRows[k].getLinkSource()) {
                                 jQuery.sap.byId(row.getId()).css({
                                        display : "block",
                                 });
                                 jQuery.sap.byId(linearRows[k].getId()).css({
                                        display : "block",
                                 });
                           } else {

                                 jQuery.sap.byId(row.getId()).css({
                                        display : "none",
                                 });
                                 jQuery.sap.byId(linearRows[k].getId()).css({
                                        display : "none",
                                 });
                           }

                    }
             } else {
                    if (filter == row.getLinkSource()) {
                           jQuery.sap.byId(row.getId()).css({
                                 display : "block",
                           });
                    } else {
                           jQuery.sap.byId(row.getId()).css({
                                 display : "none",
                           });
                    }
             }
       }
};

sap.landvisz.LandscapeViewer.prototype.showAllOverlay = function(system, filter) {

       var headerContent = system.oVLayoutOverlay.getContent();
       var row;
       for ( var j = 0; j < headerContent.length; j++) {
             row = headerContent[j];
             jQuery.sap.byId(row.getId()).css({
                    display : "block",
             });
       }
};

sap.landvisz.LandscapeViewer.prototype.showOverlay = function(id,
             overlayDisplay) {

       jQuery.sap.byId(id + "-overlay").css({
             display : overlayDisplay,
       });

       jQuery.sap.byId(id + "-innerOverlay").css({
             display : overlayDisplay,
       });

};

sap.landvisz.LandscapeViewer.prototype.onmouseleave = function(oEvent) {
       var srcCntrl = oEvent.oSource;
       var srcElement = oEvent.target;
       this.lindkedEntities = [];
       var connectors;
       var systems;
       var hasMatchingHeader = false;
       var holdDisplayTrue = false; 
       var holdCount = 0;
       for(var i = 0 ; i < this.getConnectionEntities().length ; i++){
             if(this.getConnectionEntities()[i].holdDisplay == true){
                    holdDisplayTrue = true;
                    holdCount++;
             }                   
       }
       if(!(holdDisplayTrue && holdCount < 2)){
             if (srcCntrl instanceof sap.landvisz.ConnectionEntity) {

                    if (srcCntrl.holdDisplay != true) {

                           jQuery.sap.byId(srcCntrl.getId() + "connectionRow").css({
                                 "box-shadow" : "none"
                           });

                           connectors = this.getConnectors();

                           for ( var i = 0; i < connectors.length; i++) {
                                 if (connectors[i].getSource() == srcCntrl.getConnectionId())
                                        this.lindkedEntities.push(connectors[i].getTarget());
                                 if (connectors[i].getTarget() == srcCntrl.getConnectionId())
                                        this.lindkedEntities.push(connectors[i].getSource());
                           }

                           systems = this.getSystems();
                           for ( var i = 0; i < systems.length; i++) {

                                 for ( var j = 0; j < this.lindkedEntities.length; j++) {

                                        if (systems[i].getSystemId() == this.lindkedEntities[j]) {
                                               jQuery.sap.byId(systems[i].getId() + "-innerOverlay")
                                                            .css({
                                                                   "display" : "none"
                                                            });
                                               jQuery.sap.byId(systems[i].getId() + "-overlay").css({
                                                     "display" : "none"
                                               });

                                               // innerOverlay
                                               // systems[i].invalidate();
                                               systems[i].showOverlay = false;
                                               systems[i].overlayFilter = "";
                                        }
                                 }

                           }
                    }
             }
}
};

sap.landvisz.LandscapeViewer.prototype.getCurrentSolutionView = function() {
       return this.currentSolutionView;
};

sap.landvisz.LandscapeViewer.prototype.getCurrentDependencyView = function() {
       return this.currentView;
};

sap.landvisz.LandscapeViewer.prototype.setEnableLoadSolution = function(enabled) {

       if (enabled == false) {
             this.compViewBtn.addStyleClass("sapLandviszBtnDisable");
             this.depViewBtn.addStyleClass("sapLandviszBtnDisable");

       } else if (enabled == true) {
             this.compViewBtn.removeStyleClass("sapLandviszBtnDisable");
             this.depViewBtn.removeStyleClass("sapLandviszBtnDisable");
       }
       this.compViewBtn.setEnabled(enabled);
       this.depViewBtn.setEnabled(enabled);
};

sap.landvisz.LandscapeViewer.prototype.getSelectedOption = function() {
       return this.selectedOptionEntity;
};

sap.landvisz.LandscapeViewer.prototype.onfocusout = function(oEvent) {
       this.compViewBtn
};

sap.landvisz.LandscapeViewer.prototype.fetchSelectedOption = function() {
       return this.selectedOptionEntity;
};
sap.landvisz.LandscapeViewer.prototype.exit = function() {
       jQuery(window).unbind("resize", jQuery.proxy(this.onwindowresize, this));
};

sap.landvisz.LandscapeViewer.prototype.getViewConnectedLayout = function() {
   
     	var connectedLayout;
		var sources;
		var optionsEntities;
		var sources;
		var connectors = this.getConnectors();
		optionsEntities = this.oHLayoutOptions.getContent();
		for ( var y = 1; y < optionsEntities.length; y++) {
			if (optionsEntities[y].getSelected() == true) {
				sources = optionsEntities[y].getOptionSources();
				break;

			}
		}
       // we are taking a tradeoff that there is only one connection entity for
		// the
       // Solution view & the same is declared as source for the connector
       
       var connectionEntityId = connectors[0].getSource();
       var connectorArray = [];
       var connector;
       var entityTobePlaced;
       for ( var i = 0; i < sources.length; i++) {
             connector = new sap.landvisz.Connector();
             entityTobePlaced = sources[i].getSource();
             connector.setSource(connectionEntityId);
             connector.setTarget(entityTobePlaced);
             connectorArray.push(connector);
       }
       
       connectedLayout = this.connection
                    .getBoxViewConnectedNodesLayout(connectorArray);
       
      return connectedLayout;
};


sap.landvisz.LandscapeViewer.prototype.getEntityConnectedLayout = function() {
   

	var connectedLayout;
	var optionsEntities;
	var connectors = this.getConnectors();
	var option;
	var connectorArray = [];
	for ( var i = 0; i < connectors.length; i++) {

		option = this.getOptionConnector(connectors[i]);
		if ("" !== option)
			connectorArray.push(option);
		else
			connectorArray.push(connectors[i]);
	}
		
		
		connectedLayout = this.connection
                    .getBoxViewConnectedNodesLayout(connectorArray);
       
      return connectedLayout;
      
};


sap.landvisz.LandscapeViewer.prototype.getOptionConnector = function(connector) {

	var options = this.getSolutionOptions();
	var optionsEntities;
	var sources;
	var entityConnector;
	var optionSrcEntity;
	for ( var x = 0; x < options.length; x++) {

		if (options[x].getCurrentEntity() == connector.getTarget()) {
		
			optionsEntities = options[x].getOptionEntities();
			
			for ( var y = 0; y < optionsEntities.length; y++) {
			
			  optionSrcEntity = optionsEntities[y].getOptionSources()[0].getSource();
			  
				if (optionsEntities[y].getSelected() == true && optionSrcEntity != connector.getTarget()) {
					entityConnector = new sap.landvisz.Connector();
					entityConnector.setSource(connector.getSource());
					optionsEntities[y].getOptionSources()[0].getSource()
					entityConnector.setTarget(optionsEntities[y].getOptionSources()[0].getSource());
					this.srcEntity = optionSrcEntity;
					return entityConnector;
					
				}
			}

		}
	}

	return "";
};
sap.landvisz.LandscapeViewer.prototype.setHeight = function(height) {

			var win = jQuery(window);
                    if (height && "" != height) 
                           this.windowHeight = height;
                    else
                           this.windowHeight = win.height();
};
sap.landvisz.LandscapeViewer.prototype.setWidth = function(width) {
				var win = jQuery(window);
				if (width && "" != width) {
                           this.windowWidth = width;
                    } else {
                           this.windowWidth = win.width();
                    }
};

}; // end of sap/landvisz/LandscapeViewer.js
if ( !jQuery.sap.isDeclared('sap.landvisz.OptionEntity') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.landvisz.OptionEntity.
jQuery.sap.declare("sap.landvisz.OptionEntity");




/**
 * Constructor for a new OptionEntity.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getEnable enable} : boolean (default: true)</li>
 * <li>{@link #getOptionTextTooltip optionTextTooltip} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getOptionSources optionSources} : sap.landvisz.OptionSource[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.landvisz.OptionEntity#event:selectOption selectOption} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.landvisz.OptionSource#constructor sap.landvisz.OptionSource}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Options for solution entities
 * @extends sap.landvisz.OptionSource
 * @version 1.50.0
 *
 * @constructor
 * @public
 * @name sap.landvisz.OptionEntity
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.landvisz.OptionSource.extend("sap.landvisz.OptionEntity", { metadata : {

	library : "sap.landvisz",
	properties : {
		"label" : {type : "string", group : "Data", defaultValue : null},
		"selected" : {type : "boolean", group : "Accessibility", defaultValue : false},
		"enable" : {type : "boolean", group : "Identification", defaultValue : true},
		"optionTextTooltip" : {type : "string", group : "Data", defaultValue : null}
	},
	aggregations : {
		"optionSources" : {type : "sap.landvisz.OptionSource", multiple : true, singularName : "optionSource"}
	},
	events : {
		"selectOption" : {}
	}
}});


/**
 * Creates a new subclass of class sap.landvisz.OptionEntity with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.landvisz.OptionEntity.extend
 * @function
 */

sap.landvisz.OptionEntity.M_EVENTS = {'selectOption':'selectOption'};


/**
 * Getter for property <code>label</code>.
 * label for option entity
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.landvisz.OptionEntity#getLabel
 * @function
 */

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.landvisz.OptionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.OptionEntity#setLabel
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * determines current selected option
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.landvisz.OptionEntity#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.landvisz.OptionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.OptionEntity#setSelected
 * @function
 */


/**
 * Getter for property <code>enable</code>.
 * enabling/disabling options
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enable</code>
 * @public
 * @name sap.landvisz.OptionEntity#getEnable
 * @function
 */

/**
 * Setter for property <code>enable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnable  new value for property <code>enable</code>
 * @return {sap.landvisz.OptionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.OptionEntity#setEnable
 * @function
 */


/**
 * Getter for property <code>optionTextTooltip</code>.
 * tooltip for options
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>optionTextTooltip</code>
 * @public
 * @name sap.landvisz.OptionEntity#getOptionTextTooltip
 * @function
 */

/**
 * Setter for property <code>optionTextTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sOptionTextTooltip  new value for property <code>optionTextTooltip</code>
 * @return {sap.landvisz.OptionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.OptionEntity#setOptionTextTooltip
 * @function
 */


/**
 * Getter for aggregation <code>optionSources</code>.<br/>
 * Option Renderer Control
 * 
 * @return {sap.landvisz.OptionSource[]}
 * @public
 * @name sap.landvisz.OptionEntity#getOptionSources
 * @function
 */


/**
 * Inserts a optionSource into the aggregation named <code>optionSources</code>.
 *
 * @param {sap.landvisz.OptionSource}
 *          oOptionSource the optionSource to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the optionSource should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the optionSource is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the optionSource is inserted at 
 *             the last position        
 * @return {sap.landvisz.OptionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.OptionEntity#insertOptionSource
 * @function
 */

/**
 * Adds some optionSource <code>oOptionSource</code> 
 * to the aggregation named <code>optionSources</code>.
 *
 * @param {sap.landvisz.OptionSource}
 *            oOptionSource the optionSource to add; if empty, nothing is inserted
 * @return {sap.landvisz.OptionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.OptionEntity#addOptionSource
 * @function
 */

/**
 * Removes an optionSource from the aggregation named <code>optionSources</code>.
 *
 * @param {int | string | sap.landvisz.OptionSource} vOptionSource the optionSource to remove or its index or id
 * @return {sap.landvisz.OptionSource} the removed optionSource or null
 * @public
 * @name sap.landvisz.OptionEntity#removeOptionSource
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>optionSources</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.landvisz.OptionSource[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.landvisz.OptionEntity#removeAllOptionSources
 * @function
 */

/**
 * Checks for the provided <code>sap.landvisz.OptionSource</code> in the aggregation named <code>optionSources</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.landvisz.OptionSource}
 *            oOptionSource the optionSource whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.landvisz.OptionEntity#indexOfOptionSource
 * @function
 */
	

/**
 * Destroys all the optionSources in the aggregation 
 * named <code>optionSources</code>.
 * @return {sap.landvisz.OptionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.OptionEntity#destroyOptionSources
 * @function
 */


/**
 * Select event for option entity
 *
 * @name sap.landvisz.OptionEntity#selectOption
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectOption' event of this <code>sap.landvisz.OptionEntity</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.landvisz.OptionEntity</code>.<br/> itself. 
 *  
 * Select event for option entity
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.landvisz.OptionEntity</code>.<br/> itself.
 *
 * @return {sap.landvisz.OptionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.OptionEntity#attachSelectOption
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectOption' event of this <code>sap.landvisz.OptionEntity</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.landvisz.OptionEntity} <code>this</code> to allow method chaining
 * @public
 * @name sap.landvisz.OptionEntity#detachSelectOption
 * @function
 */

/**
 * Fire event selectOption to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.landvisz.OptionEntity} <code>this</code> to allow method chaining
 * @protected
 * @name sap.landvisz.OptionEntity#fireSelectOption
 * @function
 */

// Start of sap/landvisz/OptionEntity.js
///**
//* This file defines behavior for the control,
//*/

//jQuery.sap.require("sap.landvisz.internal.IdentificationBarRenderer");
//jQuery.sap.require("sap.landvisz.EntityConstants");

sap.landvisz.OptionEntity.prototype.init = function() {
	this.optionText = "1";
	this.optionSrcEntityId;
	this.optionRepEntityId;
	this.optionOn;
	this.isSelected;
	this.initializationDone = false;
	this.left = 0;
	this.top = 0;
};

sap.landvisz.OptionEntity.prototype.initControls = function() {
	var optionID = this.getId();
	if (!this.optionTextView)
		this.optionTextView = new sap.ui.commons.TextView(optionID + "-optionText");
	var that = this;
	if (!this.optionBtn){
		this.optionBtn = new sap.ui.commons.RadioButton(optionID+ "-optionBtn",{
			groupName: optionID+ "-optionBtn"
		});
		this.optionBtn.attachSelect(function(oEvent) {
			//private event used when option is clicked
			that.fireEvent("optionSelected");
			//public event used when option is clicked
			that.fireSelectOption(); 
		});
	}
};

sap.landvisz.OptionEntity.prototype.onclick = function(oEvent) {
	if(oEvent.srcControl instanceof sap.ui.commons.RadioButton)
		return;
	if(this.getEnable() == true){
		//private event used when option is clicked
		this.fireEvent("optionSelected");
		//public event used when option is clicked
		this.fireSelectOption(); 
	}
};

sap.landvisz.OptionEntity.prototype.onAfterRendering = function() {
	if(this.getSelected()==true){
		this.optionBtn.setSelected(true);
	}
};
}; // end of sap/landvisz/OptionEntity.js
