// This file has been generated by the SAPUI5 'AllInOne' Builder
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.analytical.analyticalChart", {
		onInit: function () {
				sap.ovp.cards.charts.VizAnnotationManager.formatChartAxes();
//				this.bFlag = true;
		},
		onBeforeRendering : function() {
			if (this.bCardProcessed) {
				return;
			}
			sap.ovp.cards.charts.VizAnnotationManager.validateCardConfiguration(this);
			var vizFrame = this.getView().byId("analyticalChart");
            var oCompData = this.getOwnerComponent().getComponentData();
            if (this.getCardPropertiesModel().getProperty("/layoutDetail") === "resizable" && oCompData.appComponent) {
                var oDashboardLayoutUtil = oCompData.appComponent.getDashboardLayoutUtil();
                var oCard = oDashboardLayoutUtil.dashboardLayoutModel.getCardById(oCompData.cardId);
                if (oCard.dashboardLayout.autoSpan && vizFrame) {
                    vizFrame.setHeight("340px");
                }
            }
//		    var bubbleText = this.getView().byId("bubbleText");
//			var chartTitle = this.getView().byId("ovpCT");
			var vbLayout = this.getView().byId("vbLayout");
//			var bubbleSizeText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("BUBBLESIZE");
			var navigation;
			
			var isVizPropSet = false;
			
			var oDataSet = new sap.viz.ui5.data.FlattenedDataset({
				data : {
					path : "/"
				}
			});
			
			this.isVizPropSet = isVizPropSet;
			this.oDataSet = oDataSet;
			this.vizFrame = vizFrame;
			this.vbLayout = vbLayout;
			/*var navigation = vizFrame.getModel('ovpCardProperties').getProperty("/navigation");
			if (navigation == "chartNav") {
				vizFrame.attachBrowserEvent("click", this.onHeaderClick.bind(this));
			} else {
				sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint(vizFrame, this);
			}*/
			if (!vizFrame) {
				jQuery.sap.log.error(sap.ovp.cards.charts.VizAnnotationManager.constants.ERROR_NO_CHART +
						": (" + this.getView().getId() + ")");
			} else {
				this.vbLayout.setBusy(true);
				navigation = vizFrame.getModel('ovpCardProperties').getProperty("/navigation");
				//FIORITECHP1-6021 - Allow Disabling of Navigation from Graph
				if (navigation === undefined || navigation == "datapointNav" || navigation != "headerNav") {
					sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint(vizFrame, this);
				} 
				vizFrame.destroyDataset();
//				vizFrame.addEventDelegate(this.busyDelegate, vizFrame);
//				var handler = vizFrame.getParent();
//				handler.setBusy(true);
//				sap.ovp.cards.charts.VizAnnotationManager.buildVizAttributes(vizFrame,handler,chartTitle);
//				if (bubbleText != undefined) {
//					var feeds = vizFrame.getFeeds();
//					jQuery.each(feeds,function(i,v){
//						if (feeds[i].getUid() == "bubbleWidth") {
//							bubbleText.setText(bubbleSizeText + " " + feeds[i].getValues());
//						}
//					});
//				}
//				sap.ovp.cards.charts.VizAnnotationManager.hideDateTimeAxis(vizFrame);
				var binding = vizFrame.getParent().getBinding("data");

				this._handleKPIHeader();
				
				if (binding && binding.getPath()) {
					binding.attachDataReceived(jQuery.proxy(this.onDataReceived, this));
					binding.attachDataRequested(jQuery.proxy(this.onDataRequested, this));
				} else {
					var noDataDiv = sap.ui.xmlfragment("sap.ovp.cards.charts.generic.noData");
					var cardContainer = this.getCardContentContainer();
					cardContainer.removeAllItems();
					cardContainer.addItem(noDataDiv);
				}
			}
			this.bCardProcessed = true;
		},

        onAfterRendering: function () {
            var oCompData = this.getOwnerComponent().getComponentData();
            if (this.getCardPropertiesModel().getProperty("/layoutDetail") === "resizable" && oCompData.appComponent) {
                var oDashboardLayoutUtil = oCompData.appComponent.getDashboardLayoutUtil();
                var sCardId = oDashboardLayoutUtil.getCardDomId(oCompData.cardId);
                var oCard = oDashboardLayoutUtil.dashboardLayoutModel.getCardById(oCompData.cardId);
                var element = document.getElementById(sCardId);
                var iHeaderHeight = this.getHeaderHeight();
                //.sapOvpCardContentContainer where border-top is 1px
                element.getElementsByClassName('sapOvpWrapper')[0].style.height =
                    oCard.dashboardLayout.rowSpan * oDashboardLayoutUtil.ROW_HEIGHT_PX + 2 - (iHeaderHeight + 2 * oDashboardLayoutUtil.CARD_BORDER_PX) + "px";
                if (oCard.dashboardLayout.showOnlyHeader) {
                    element.classList.add("sapOvpMinHeightContainer");
                }
                var vizCard = this.getView().byId("analyticalChart");
                if (vizCard) {
                    vizCard.setHeight(this._calculateVizFrameHeight() + "px");
                }
            }
        },

		onDataReceived: function(oEvent) {
			var that = this;
			var vizFrame = this.getView().byId("analyticalChart");
			
			var bubbleText = this.getView().byId("bubbleText");
			var chartTitle = this.getView().byId("ovpCT");
			var bubbleSizeText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("BUBBLESIZE");
			
			this.oDataSet.bindData("analyticalmodel>/","");
			vizFrame.setDataset(this.oDataSet);
			
			var handler = vizFrame.getParent();
			
			if (!this.isVizPropSet) {
				
				sap.ovp.cards.charts.VizAnnotationManager.buildVizAttributes(vizFrame,handler,chartTitle);
				this.isVizPropSet = true;
			
				if (bubbleText != undefined) {
					var feeds = vizFrame.getFeeds();
					jQuery.each(feeds,function(i,v){
						if (feeds[i].getUid() == "bubbleWidth") {
							bubbleText.setText(bubbleSizeText + " " + feeds[i].getValues());
						}
					});
				}
				sap.ovp.cards.charts.VizAnnotationManager.hideDateTimeAxis(vizFrame);
			}
//			var handler = vizFrame.getParent();
//			var chartScaleTitle = this.getView().byId("ovpScaleUnit");
//			var vizData = oEvent ? oEvent.getParameter('data') : null;
			//FIORITECHP1-4935Reversal of Scale factor in Chart and Chart title.
//			sap.ovp.cards.charts.VizAnnotationManager.setChartScaleTitle(vizFrame,vizData,handler,chartScaleTitle);
			if (this.bFlag == true) {
//			vizFrame.addEventDelegate(this.freeDelegate, vizFrame);
			this.bFlag = false;
			this.vbLayout.setBusy(false);
			} else {
				setTimeout(function(){
					that.vbLayout.setBusy(false);
					},0);
			}
			sap.ovp.cards.charts.VizAnnotationManager.checkNoData(oEvent, this.getCardContentContainer(), vizFrame);
		},
		onDataRequested : function() {
//			var vizFrame = this.getView().byId("analyticalChart");
//			vizFrame.removeEventDelegate(this.freeDelegate, vizFrame);
			this.vbLayout.setBusy(true);
		},
		
		getCardItemsBinding: function() {
            var vizFrame = this.getView().byId("analyticalChart");
//            var handler = vizFrame.getParent();
          //vizFrame.setBusy(true); Commenting for the issue 1780015305
           // if (this.vizFrame.getParent().getBinding("data")){
			if (vizFrame && vizFrame.getDataset() && vizFrame.getDataset().getBinding("data")) {
				this.vbLayout.setBusy(false);
			}
			
			if (vizFrame && vizFrame.getParent()) {
				return vizFrame.getParent().getBinding("data");
			}
			
			return null;
        },

        /**
         * Method called upon when card is resized manually
         *
         * @method resizeCard
         * @param {Object} newCardLayout - new card layout after resize
         */
        resizeCard: function (newCardLayout) {
            var oCardPropertiesModel = this.getCardPropertiesModel();
            this.newCardLayout = newCardLayout;
            oCardPropertiesModel.setProperty("/cardLayout/rowSpan", newCardLayout.rowSpan);
            oCardPropertiesModel.setProperty("/cardLayout/colSpan", newCardLayout.colSpan);
            var oCardLayout = this.getCardPropertiesModel().getProperty("/cardLayout");
            var iHeaderHeight = this.getHeaderHeight();
            //Set the height of cardContentContainer
            jQuery(this.getView().$()).find(".sapOvpWrapper").css({
                height: (newCardLayout.rowSpan * oCardLayout.iRowHeightPx + 2) - (iHeaderHeight + 2 * oCardLayout.iCardBorderPx) + "px"
            });
            var vizCard = this.getView().byId("analyticalChart");
            var bubbleText = this.getView().byId("bubbleText");
            var chartTitle = this.getView().byId("ovpCT");

            if (vizCard.getVizType() === 'timeseries_bubble' || vizCard.getVizType() === "bubble") {
                if (oCardLayout.colSpan > 1) {
                    bubbleText.setVisible(false);
                } else {
                    bubbleText.setVisible(true);
                }
            }
            if (vizCard) {
                vizCard.setHeight(this._calculateVizFrameHeight() + "px");
                //Viz container width = Card Container width - 32(//.ovpChartTitleVBox where padding-left/padding-right = 1rem)
                vizCard.setWidth(+newCardLayout.width.split("px")[0] - 32 + "px");
            }
            var oOvpContent = this.getView().byId('ovpCardContentContainer').getDomRef();
            if (oOvpContent) {
                if (!newCardLayout.showOnlyHeader) {
                    oOvpContent.classList.remove('sapOvpContentHidden');
                } else {
                    oOvpContent.classList.add('sapOvpContentHidden');
                }
            }

            var bubbleSizeText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("BUBBLESIZE");
            this.oDataSet.bindData("analyticalmodel>/", "");
            this.vizFrame.setDataset(this.oDataSet);

            var handler = vizCard.getParent();
            if (!this.isVizPropSet) {
                sap.ovp.cards.charts.VizAnnotationManager.buildVizAttributes(vizCard, handler, chartTitle);
                this.isVizPropSet = true;
                if (bubbleText != undefined) {
                    var feeds = vizCard.getFeeds();
                    jQuery.each(feeds, function (i, v) {
                        if (feeds[i].getUid() == "bubbleWidth") {
                            bubbleText.setText(bubbleSizeText + " " + feeds[i].getValues());
                        }
                    });
                }
                sap.ovp.cards.charts.VizAnnotationManager.hideDateTimeAxis(vizCard);
            }
            sap.ovp.cards.charts.VizAnnotationManager.reprioritizeContent(this.newCardLayout, vizCard);
        },

        /**
         * Method to calculate viz frame height
         *
         * @method _calculateVizFrameHeight
         * @return {Integer} iVizFrameHeight - Calculated height of the viz frame
         *                                      For Fixed layout - 480 px
         *                                      For resizable layout - Calculated according to the rowspan
         */
        _calculateVizFrameHeight: function () {
            var iVizFrameHeight;
            var oCompData = this.getOwnerComponent().getComponentData();
            var oDashboardLayoutUtil = this.getDashboardLayoutUtil();
            var oCard = oDashboardLayoutUtil.dashboardLayoutModel.getCardById(oCompData.cardId);
            var vizCard = this.getView().byId("analyticalChart");
            //For resizable layout calculate height of vizframe
            if (oCard) {
                var oGenCardCtrl = this.getView().getController();
                var iDropDownHeight = this.getItemHeight(oGenCardCtrl, 'toolbar');
                var iHeaderHeight = this.getHeaderHeight();
                var iChartTextHeight = this.getView().byId("ovpCT") ? 20 : 0;
                var iBubbleTextHeight = (vizCard.getVizType() === 'timeseries_bubble' || vizCard.getVizType() === "bubble") && oCard.dashboardLayout.colSpan === 1 ? 43 : 0;
                //Viz container height = Card Container height + Border top of OvpCardContainer[1px--.sapOvpCardContentContainer] - (Header height + Card padding top and bottom{16px} +
                //                          View switch toolbar height + Height of the Chart text(if present) + Height of bubble chart text +
                //                          Padding top to  the card container[0.875rem -- .ovpChartTitleVBox] + Margin top to viz frame[1rem .ovpViz])
                iVizFrameHeight = oCard.dashboardLayout.rowSpan * oDashboardLayoutUtil.ROW_HEIGHT_PX + 2 - ( iHeaderHeight+ 2 * oDashboardLayoutUtil.CARD_BORDER_PX + iDropDownHeight + iChartTextHeight + iBubbleTextHeight + 30);
            }
            return iVizFrameHeight;
        },

        /**
         * Method to refresh the view after drag completion
         *
         * @method refreshCard
         */
        refreshCard: function () {
            this.getView().rerender();
        }
     });
})();
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.bubble.BubbleChart", {
		onInit: function () {
				sap.ovp.cards.charts.VizAnnotationManager.formatChartAxes();
		},
		onBeforeRendering : function() {
			sap.ovp.cards.charts.VizAnnotationManager.validateCardConfiguration(this);
			var vizFrame = this.getView().byId("bubbleChartCard");
			var navigation;
			if (!vizFrame) {
				jQuery.sap.log.error(sap.ovp.cards.charts.Utils.constants.ERROR_NO_CHART +
						": (" + this.getView().getId() + ")");
			} else {
				navigation = vizFrame.getModel('ovpCardProperties').getProperty("/navigation");
				if (navigation == "chartNav") {
					vizFrame.attachBrowserEvent("click", this.onHeaderClick.bind(this));
				} else {
					sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint(vizFrame, this);
				}
//				vizFrame.addEventDelegate(this.busyDelegate, vizFrame);
				var binding = vizFrame.getDataset().getBinding("data");
				if (binding.getPath()) {
					binding.attachDataReceived(jQuery.proxy(this.onDataReceived, this));
					binding.attachDataRequested(jQuery.proxy(this.onDataRequested, this));
				} else {
					var noDataDiv = sap.ui.xmlfragment("sap.ovp.cards.charts.generic.noData");
					var cardContainer = this.getCardContentContainer();
					cardContainer.removeAllItems();
					cardContainer.addItem(noDataDiv);
				}
				sap.ovp.cards.charts.Utils.validateMeasuresDimensions(vizFrame, "Bubble");
			}
		},
		onDataReceived: function(oEvent) {
			var vizFrame = this.getView().byId("bubbleChartCard");
			if (this.bFlag == true) {
//				vizFrame.addEventDelegate(this.freeDelegate, vizFrame);
				this.bFlag = false;
				} else {
					setTimeout(function(){
						vizFrame.setBusy(false);
						},0);
				}
			sap.ovp.cards.charts.VizAnnotationManager.hideDateTimeAxis(vizFrame, "valueAxis");
			sap.ovp.cards.charts.VizAnnotationManager.checkNoData(oEvent, this.getCardContentContainer(), vizFrame);
		},
		onDataRequested : function() {
			var vizFrame = this.getView().byId("bubbleChartCard");
//			vizFrame.removeEventDelegate(this.freeDelegate, vizFrame);
			vizFrame.setBusy(true);
		}
	});
})();
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.donut.DonutChart", {
		onInit: function () {
//				this.bFlag = true;
		},
		onBeforeRendering: function () {
			var utils = sap.ovp.cards.charts.Utils;
			var VizAnnotationManager = sap.ovp.cards.charts.VizAnnotationManager;
			VizAnnotationManager.validateCardConfiguration(this);
			var measureArrNames = [];
			var dimensionArrayNames = [];
			var vizFrame = this.getView().byId("donutChartCard");
			var navigation;
			if (!vizFrame) {
				jQuery.sap.log.error(utils.constants.ERROR_NO_CHART +
						": (" + this.getView().getId() + ")");
			} else {
				navigation = vizFrame.getModel('ovpCardProperties').getProperty("/navigation");
				if (navigation == "chartNav") {
					vizFrame.attachBrowserEvent("click", this.onHeaderClick.bind(this));
				} else {
					sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint(vizFrame, this);
				}
//				vizFrame.addEventDelegate(this.busyDelegate, vizFrame);
				var binding = vizFrame.getDataset().getBinding("data");
				if (binding.getPath()) {
					binding.attachDataReceived(jQuery.proxy(this.onDataReceived, this));
					binding.attachDataRequested(jQuery.proxy(this.onDataRequested, this));
				} else {
					var noDataDiv = sap.ui.xmlfragment("sap.ovp.cards.charts.generic.noData");
					var cardContainer = this.getCardContentContainer();
					cardContainer.removeAllItems();
					cardContainer.addItem(noDataDiv);
				}
				sap.ovp.cards.charts.Utils.validateMeasuresDimensions(vizFrame, "Donut");
				var entityTypeObject = this.getCardPropertiesModel().getProperty("/entityType");
				var columnLabels = utils.getAllColumnLabels(entityTypeObject);
				var measuresArr = vizFrame.getDataset().getMeasures();
				var dimensionsArr = vizFrame.getDataset().getDimensions();
	
				measureArrNames.push(measuresArr[0].getName());
				var dimensionName = columnLabels[dimensionsArr[0].getName()];
				dimensionArrayNames.push(dimensionName ? dimensionName : dimensionsArr[0].getName());
				var bDatapointNavigation = true;
				var dNav = vizFrame.getModel('ovpCardProperties').getProperty("/navigation");
				if (dNav == "chartNav") {
					bDatapointNavigation = false;
				}
				vizFrame.removeAllFeeds();
				vizFrame.addFeed(new sap.viz.ui5.controls.common.feeds.FeedItem({
					'uid': "size",
					'type': "Measure",
					'values': measureArrNames
				}));
				vizFrame.addFeed(new sap.viz.ui5.controls.common.feeds.FeedItem({
					'uid': "color",
					'type': "Dimension",
					'values': dimensionArrayNames
				}));
	
				vizFrame.setVizProperties({
					size:{
						title:{
							visible:false
						}
					},
					color:{
						title:{
							visible:false
						}
					},
					legend: {
						isScrollable: false
					},
	
					title: {
						visible: false
					},
					interaction:{
						noninteractiveMode: bDatapointNavigation ? false : true,
						selectability: {
							legendSelection: false,
							axisLabelSelection: false,
							mode: "EXCLUSIVE",
							plotLassoSelection: false,
							plotStdSelection: true
						}
					}
				});
				VizAnnotationManager.formatChartAxes();
			}
		},
		onDataReceived: function(oEvent) {
			var vizFrame = this.getView().byId("donutChartCard");
			if (this.bFlag == true) {
//				vizFrame.addEventDelegate(this.freeDelegate, vizFrame);
				this.bFlag = false;
				} else {
					setTimeout(function(){
						vizFrame.setBusy(false);
						},0);
				}
			sap.ovp.cards.charts.VizAnnotationManager.checkNoData(oEvent, this.getCardContentContainer(), vizFrame);
		},
		onDataRequested : function() {
			var vizFrame = this.getView().byId("donutChartCard");
//			vizFrame.removeEventDelegate(this.freeDelegate, vizFrame);
			vizFrame.setBusy(true);
		}
	});
})();
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.line.LineChart", {
		onInit: function () {
				sap.ovp.cards.charts.VizAnnotationManager.formatChartAxes();
//				this.bFlag = true;
		},
		onBeforeRendering : function() {
			sap.ovp.cards.charts.VizAnnotationManager.validateCardConfiguration(this);
			var vizFrame = this.getView().byId("lineChartCard");
			var navigation;
			if (!vizFrame) {
				jQuery.sap.log.error(sap.ovp.cards.charts.Utils.constants.ERROR_NO_CHART +
						": (" + this.getView().getId() + ")");
			} else {
				navigation = vizFrame.getModel('ovpCardProperties').getProperty("/navigation");
				if (navigation == "chartNav") {
					vizFrame.attachBrowserEvent("click", this.onHeaderClick.bind(this));
				} else {
					sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint(vizFrame, this);
				}
//				vizFrame.addEventDelegate(this.busyDelegate, vizFrame);
				var binding = vizFrame.getDataset().getBinding("data");
				if (binding.getPath()) {
					binding.attachDataReceived(jQuery.proxy(this.onDataReceived, this));
					binding.attachDataRequested(jQuery.proxy(this.onDataRequested, this));
				} else {
					var noDataDiv = sap.ui.xmlfragment("sap.ovp.cards.charts.generic.noData");
					var cardContainer = this.getCardContentContainer();
					cardContainer.removeAllItems();
					cardContainer.addItem(noDataDiv);
				}
				sap.ovp.cards.charts.Utils.validateMeasuresDimensions(vizFrame, "Line");
			}
		},
		onDataReceived: function(oEvent) {
			var vizFrame = this.getView().byId("lineChartCard");
			if (this.bFlag == true) {
//				vizFrame.addEventDelegate(this.freeDelegate, vizFrame);
				this.bFlag = false;
				} else {
					setTimeout(function(){
						vizFrame.setBusy(false);
						},0);
				}
			sap.ovp.cards.charts.VizAnnotationManager.hideDateTimeAxis(vizFrame, "categoryAxis");
			sap.ovp.cards.charts.VizAnnotationManager.checkNoData(oEvent, this.getCardContentContainer(), vizFrame);
		},
		onDataRequested : function() {
			var vizFrame = this.getView().byId("lineChartCard");
			vizFrame.setBusy(true);
		}
	});
})();
(function () {
    "use strict";
    /*global sap, jQuery */

    sap.ui.controller("sap.ovp.cards.image.Image", {
        onInit: function () {
        },

        onImagePress: function (oEvent) {
            this.doNavigation(oEvent.getSource().getBindingContext());
        }

    });
})();
(function() {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.map.Analytical.AnalyticalMap", {

		onInit: function(evt) {
			var mapInstance = this.getView().byId("vbi");

			mapInstance.addEventDelegate({
						"onAfterRendering": function () {
							var allRegions = this.getAllRegionCodes(mapInstance);
							mapInstance.zoomToRegions(allRegions);

							var colorPaletteType = this.getCardPropertiesModel().getProperty("/colorpalette");
							if (colorPaletteType === "qualitative") {
								var items = mapInstance.getAggregation("regions");

								var colourPalette = ["sapUiChartPaletteQualitativeHue1", "sapUiChartPaletteQualitativeHue2", "sapUiChartPaletteQualitativeHue3", 
											   "sapUiChartPaletteQualitativeHue4", "sapUiChartPaletteQualitativeHue5", "sapUiChartPaletteQualitativeHue6",
											   "sapUiChartPaletteQualitativeHue7", "sapUiChartPaletteQualitativeHue8", "sapUiChartPaletteQualitativeHue9",
											   "sapUiChartPaletteQualitativeHue10", "sapUiChartPaletteQualitativeHue11"];

								items.forEach(function(item, index) {
									var colour = sap.ui.core.theming.Parameters.get(colourPalette[ index % colourPalette.length ]);
									item.setColor( colour );
								});
							}
						}
			}, this);
		},

		getAllRegionCodes: function(map) {
			var regions = [];

			map.getAggregation("regions").forEach(function(item) {
				var code = item.mProperties.code;
				regions.push(code);
			});
			return regions;
		},

		regionClick: function (oEvent) {
            /*
             On region click of OVP Cards used as an API in other Applications
             */
                var aNavigationFields = this.getEntityNavigationEntries(oEvent.getSource().getBindingContext(), this.getCardPropertiesModel().getProperty("/annotationPath"));
                this.doNavigation(oEvent.getSource().getBindingContext(), aNavigationFields[0]);
        },

		onAfterRendering: function() {
		},

		onBeforeRendering: function() {
		}
	});
})();
(function() {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.map.GeographicalMap", {

		onInit: function(evt) {
			/**
			 *If the state is 'Loading' or 'Error', we do not render the popover header. Hence, this is no oHeader.
			 */
			var sState = this.getView().mPreprocessors.xml[0].ovpCardProperties.oData.state;
			if (sState !== "Loading" && sState !== "Error") {
				var oHeader = this.getView().byId("popoverHeader");
				oHeader.attachBrowserEvent("click", this.onPopoverHeaderPress.bind(this, oHeader));

				// Attach the keyboard events so the you can navigate using Space and Return key
				oHeader.addEventDelegate({
					onkeydown: function(oEvent) {
						if (!oEvent.shiftKey && (oEvent.keyCode == 13 || oEvent.keyCode == 32)) {
							oEvent.preventDefault();
							this.onPopoverHeaderPress(oHeader);
						}
					}.bind(this)
				});
			}
		},

		resizeCard: function(newCardLayout) {
			var oVBI = this.getView().byId("oVBI");
			var oCardPropertiesModel = this.getCardPropertiesModel();
			oCardPropertiesModel.setProperty("/cardLayout/rowSpan", newCardLayout.rowSpan);
			oCardPropertiesModel.setProperty("/cardLayout/colSpan", newCardLayout.colSpan);
			var oGenCardCtrl = this.getView().getController();
			var iHeaderHeight = this.getItemHeight(oGenCardCtrl, 'ovpCardHeader');
			var iMapHeight = newCardLayout.rowSpan * newCardLayout.iRowHeightPx - (iHeaderHeight + 2 * newCardLayout.iCardBorderPx);
			oVBI.setHeight(iMapHeight + "px");
			oVBI.setWidth("100%");
            var oOvpContent = this.getView().byId('ovpCardContentContainer').getDomRef();
            if (oOvpContent) {
                if (!newCardLayout.showOnlyHeader) {
                    oOvpContent.classList.remove('sapOvpContentHidden');
                } else {
                    oOvpContent.classList.add('sapOvpContentHidden');
                }
            }
		},

		onPopoverHeaderPress: function(oHeader) {
			var aNavigationFields = this.getEntityNavigationEntries(oHeader.getBindingContext(), this.getCardPropertiesModel().getProperty("/annotationPath"));
			this.doNavigation(oHeader.getBindingContext(), aNavigationFields[0]);
		},

		getAllSpotsCoordinates: function(map) {
			var spotCoordinates = {
				lonValues: [],
				latValues: []
			};

			map.getAggregation("vos")[0].getItems().forEach(function(item) {
				var coordinates = item.getPosition().split(";");
				spotCoordinates.lonValues.push(parseFloat(coordinates[0]));
				spotCoordinates.latValues.push(parseFloat(coordinates[1]));
			});

			return spotCoordinates;
		},

		onClickSpot: function(evt) {
			var spot = evt.getSource();
			// Retrieving the click offset; how many pixels away from the top-left corner of the map;
			var clickOffset = {};
			clickOffset[evt.getParameter("data").Action.Params.Param[0].name] = evt.getParameter("data").Action.Params.Param[0]["#"];
			clickOffset[evt.getParameter("data").Action.Params.Param[1].name] = evt.getParameter("data").Action.Params.Param[1]["#"];

			var oVBI = this.getView().byId("oVBI");

			if (!this.oQuickViewPopover) {
				this.oQuickViewPopover = this.getView().byId("quickViewPopover");
			} else if (this.oQuickViewPopover.isOpen()){
				// If the popover exists, we make sure we close to close it
				this.oQuickViewPopover.close();
			}

			if (!this.oPopoverAnchor) {
				this.oPopoverAnchor = document.createElement("div");
				this.oPopoverAnchor.style.position = "absolute";
				this.oPopoverAnchor.style.display = "inline-block";
				this.oPopoverAnchor.style.width = "0px";
				this.oPopoverAnchor.style.height = "0px";
			}
			this.oPopoverAnchor.style.top = Math.floor(parseFloat(clickOffset.y)) + "px";
			this.oPopoverAnchor.style.left = Math.floor(parseFloat(clickOffset.x)) + "px";

			oVBI.getParent().getDomRef().appendChild(this.oPopoverAnchor);

			// Set the model and open the quick view popover
			this.oQuickViewPopover.openBy(this.oPopoverAnchor);
			this.oQuickViewPopover.setBindingContext(spot.getBindingContext());
		},
		
		onAfterOpen: function () {
			//Store all the focusable elements' classes/ids in an array
			var aFocusItemsOrder = ['.quickViewResponsivePopover', '.mapPopoverHeader', '.sapMQuickViewPage', '.sapOvpActionFooter'];
			var oPopover = this.getView().byId("quickViewPopover");
			var popoverDOMElement = oPopover.$();
			//After the popover opens, put focus on the whole popover
			popoverDOMElement[0].focus();
			var index = 0;
			//Add the buttons in the actions footer dynamically to the array
			var aActionFooter = popoverDOMElement.find('.sapOvpActionFooter').children();
			for (var i = 0; i < aActionFooter.length; i++){
				if (jQuery(aActionFooter[i]).hasClass('sapMTBSpacer')) {
					//Ignore the spaces b/w the buttons
					continue;
				}
				var btnId = "#" + aActionFooter[i].id;
				aFocusItemsOrder.push(btnId);
			}
			oPopover.attachBrowserEvent("keydown", function(oEvent){
				var aElements = oEvent.target.closest('.quickViewResponsivePopover');
				if (oEvent.keyCode == 9){
					if (oEvent.shiftKey){
						//the control is inside this if block when the shift key is also pressed along with the tab key
						index--;
						index = index == -1 ? aFocusItemsOrder.length - 1 : index;
					} else {
						//index of the next element to be focused
						index++;
						index = index >= aFocusItemsOrder.length ? 0 : index;
					}
					var jqItem = aElements.querySelector(aFocusItemsOrder[index]);
					if (index === 0) {
						jqItem = aElements;
					}
					// set the tabindex attribute to 0, to fall in the tab order
					jqItem.setAttribute("tabindex", 0);
					jqItem.focus();
					//Making sure all the other default handlers are removed
					oEvent.preventDefault();
				} 
				
			});
		},

		onBeforeRendering: function() {
			var mapInstance = this.getView().byId("oVBI");

			mapInstance.getAggregation("vos")[0].getBinding("items").attachChange(function(item) {
				// Retrieving all spot coordinates
				var subTitle, allSpotsCoordinates = this.getAllSpotsCoordinates(mapInstance),
					spotsTotal = allSpotsCoordinates.lonValues.length;
                if (this && this.getView() && this.getView().getDomRef() && this.getView().getDomRef().getElementsByClassName("noDataSubtitle")) {
                    subTitle = this.getView().getDomRef().getElementsByClassName("noDataSubtitle");
                }
				// Adjust the zoom level and map position so all spots are visible
				if (spotsTotal > 0) {
					mapInstance.zoomToGeoPosition(allSpotsCoordinates.lonValues, allSpotsCoordinates.latValues, spotsTotal === 1 ? 5 : undefined);
                    if (subTitle && subTitle.length > 0) {
                        subTitle[0].style.display = "none";
                    }
                } else {
                    if (subTitle && subTitle.length > 0) {
                        subTitle[0].style.display = "flex";
                    }
				}
			}.bind(this));

			//set the map using object oMapConfig created in Manifest file.
			var oMapConfig = this.getOwnerComponent().getComponentData().settings.oMapConfig;
			mapInstance.setMapConfiguration(oMapConfig);
		},

		onGeoCardResize: function(event) {
			// This method gets called everytime the geomap changes it's size.
			// We get all spots positions and readjust the map position and zoom level
			// so we can have all spots visibile.
			var allSpotsCoordinates = this.getAllSpotsCoordinates(event.control),
				spotsTotal = allSpotsCoordinates.lonValues.length;

			if (spotsTotal > 0) {
				event.control.zoomToGeoPosition(allSpotsCoordinates.lonValues, allSpotsCoordinates.latValues, spotsTotal === 1 ? 5 : undefined);
			}
		},

		onAfterRendering: function() {
			//Register a resize handler so we are aware when the map resizes
			this._resizeListenerId = sap.ui.core.ResizeHandler.register(this.getView().byId("oVBI"), this.onGeoCardResize.bind(this));
		},

		exit: function() {
			//Deregistering the resize watcher
			if (this._resizeListenerId) {
				sap.ui.core.ResizeHandler.deregister(this.resizeHandlerId);
			}
		}
	});
})();
jQuery.sap.declare('sap.ovp.library-all');
jQuery.sap.declare('sap.ovp.cards.charts.analytical.analyticalChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.charts.bubble.BubbleChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.charts.donut.DonutChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.charts.line.LineChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.image.Image.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.map.Analytical.AnalyticalMap.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.map.GeographicalMap.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.ovp.app.Component') ) {
(function() {
	"use strict";
	/*global sap, jQuery*/

	/**
	 * @fileOverview Application component to display information on entities from the GWSAMPLE_BASIC
	 *   OData service.
	 * @version 1.50.4
	 */
	jQuery.sap.declare("sap.ovp.app.Component");
	jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained

	
	// We need to require RuntimeAuthoring in the very beginning to be able to personalize.
    // Instead of require here, added it as a lib dependency below. Adding it as a dependency in library.js does not help.
	// Hence, below statement commented out and to be removed after successful testing.
//    jQuery.sap.require('sap.ui.rta.RuntimeAuthoring');

	sap.ui.core.UIComponent.extend("sap.ovp.app.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			routing: {
				config: {
					routerClass: sap.ui.core.routing.Router
				},
				targets: {},
				routes: []
			},

			properties: {
				"cardContainerFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.app.CardContainer"
				},
				"dashboardLayoutUtil": {
					"type": "sap.ovp.ui.DashboardLayoutUtil"
				}
			},

			version: "1.50.4",

			library: "sap.ovp.app",

			dependencies: {
				libs: ["sap.ui.rta"],
				components: []
			},
			config: {
				fullWidth: true,
				hideLightBackground: true
			}
		},

		_addModelsMeasurements: function() {
			var oModels = this.oModels;
			var oModel, sModel;
			for (sModel in oModels) {
				oModel = this.getModel(sModel);
				if (oModel.getMetaModel()) {
					this._addModelMeasurements(oModel, sModel);
				}
			}
		},

		_addModelMeasurements: function(oModel, sModel) {
			var sId = "ovp:ModelLoading-" + sModel;
			var sIdBatch = "ovp:ModelBatchCall-" + sModel + ":";
			jQuery.sap.measure.start(sId, "Component createContent -> MetaData loaded", "ovp");
            var getMetaModelPromise = oModel.getMetaModel().loaded();
            getMetaModelPromise.then(function() {
                jQuery.sap.measure.end(sId);
            });
			oModel.attachBatchRequestSent(function(oEvent) {
				jQuery.sap.measure.start(sIdBatch + oEvent.getParameter("ID"), "BatchRequestSent -> BatchRequestCompleted", "ovp");
			});
			oModel.attachBatchRequestCompleted(function(oEvent) {
				jQuery.sap.measure.end(sIdBatch + oEvent.getParameter("ID"));
			});
		},

		/**
		 * get the merged sap.ovp section from all component hierarchy
		 * @returns merged sap.ovp section from manifes files
		 */
		getOvpConfig: function() {
			var oOvpConfig;
			var aExtendArgs = [];
			var oManifest = this.getMetadata();
			//loop over the manifest hierarchy till we reach the current generic component
			while (oManifest && oManifest.getComponentName() !== "sap.ovp.app") {
				oOvpConfig = oManifest.getManifestEntry("sap.ovp");
				if (oOvpConfig) {
					//as the last object is the dominant one we use unshift and not push
					aExtendArgs.unshift(oOvpConfig);
				}
				oManifest = oManifest.getParent();
			}
			//add an empty object for the merged config as we don't whant to change the actual manifest objects
			aExtendArgs.unshift({});
			//add deep flag so the merge would be recurcive
			aExtendArgs.unshift(true);
			oOvpConfig = jQuery.extend.apply(jQuery, aExtendArgs);
			return oOvpConfig;
		},

		createXMLView: function(ovpConfig) {
			jQuery.sap.measure.start("ovp:AppCreateContent", "OVP app Component createContent", "ovp");
			this._addModelsMeasurements();

            if (this.getRouter()) {
			this.getRouter().initialize();
            }
			var appConfig = this.getMetadata().getManifestEntry("sap.app");
			var uiConfig = this.getMetadata().getManifestEntry("sap.ui");
			var sIcon = jQuery.sap.getObject("icons.icon", undefined, uiConfig);

			var sComponentName = this.getMetadata().getComponentName();
			ovpConfig.baseUrl = jQuery.sap.getModulePath(sComponentName);
            if (ovpConfig.smartVariantRequired === undefined || ovpConfig.smartVariantRequired === null) {
                ovpConfig.smartVariantRequired = true;
            }
            if (ovpConfig.enableLiveFilter === undefined || ovpConfig.enableLiveFilter === null) {
                ovpConfig.enableLiveFilter = true;
            }
            
            if (ovpConfig.useDateRangeType || ovpConfig.useDateRangeType === undefined || ovpConfig.useDateRangeType === null) {
                ovpConfig.useDateRangeType = false;
            }
            
            var uiModel = new sap.ui.model.json.JSONModel(ovpConfig);

			uiModel.setProperty("/title", jQuery.sap.getObject("title", undefined, appConfig));
			uiModel.setProperty("/description", jQuery.sap.getObject("description", undefined, appConfig));

			if (sIcon) {
				if (sIcon.indexOf("sap-icon") < 0 && sIcon.charAt(0) !== '/') {
					sIcon = ovpConfig.baseUrl + "/" + sIcon;
				}
				uiModel.setProperty("/icon", sIcon);
			}

			//convert cards object into sorted array
			var oCards = ovpConfig.cards;
			var aCards = [];
			var oCard;
			for (var cardKey in oCards) {
				if (oCards.hasOwnProperty(cardKey) && oCards[cardKey]) {
					oCard = oCards[cardKey];
					oCard.id = cardKey;
					aCards.push(oCard);
				}
			}

			aCards.sort(function(card1, card2) {
				if (card1.id < card2.id) {
					return -1;
				} else if (card1.id > card2.id) {
					return 1;
				} else {
					return 0;
				}
			});

			uiModel.setProperty("/cards", aCards);
            if (this.inResizableTestMode() === true) {
                ovpConfig.containerLayout = "resizable";
            }

			// Layout switch: read 'containerLayout' property from manifest
			if (ovpConfig.containerLayout && ovpConfig.containerLayout === "resizable") {
                jQuery.sap.require("sap.ovp.ui.DashboardLayoutUtil");
				uiModel.setProperty("/cardContainerFragment", "sap.ovp.app.DashboardCardContainer");
                //Read all the property "/resizableLayout" from the manifest and set it to "/dashboardLayout" property
                uiModel.setProperty("/dashboardLayout",ovpConfig.resizableLayout);
				var oDblUtil = new sap.ovp.ui.DashboardLayoutUtil(uiModel);
				this.setDashboardLayoutUtil(oDblUtil);
			} else {
				// default + compatibility --> EasyScanLayout
				uiModel.setProperty("/cardContainerFragment", this.getCardContainerFragment());
			}

            //Remove any namespace from global filter entity name, the namespace will be added as and
            //when required
            if (ovpConfig.globalFilterEntityType && ovpConfig.globalFilterEntityType.length > 0) {
                ovpConfig.globalFilterEntityType = ovpConfig.globalFilterEntityType.split('.').pop();
            }

            var oValueHelpEntityMap = this.createMapForValueHelpEntity(ovpConfig);
            uiModel.setProperty("/ValueHelpEntityMap", oValueHelpEntityMap);
            this.setModel(uiModel, "ui");
            var oFilterModel = this.getModel(ovpConfig.globalFilterModel);
            this.setModel(oFilterModel);
            /* What: Using Resource Bundle to get strings to display on error page. */
            var ovplibResourceBundle = this._getOvpLibResourceBundle();
            this.setModel(ovplibResourceBundle, "ovplibResourceBundle");
            var oEntityType = oFilterModel.getMetaModel().getODataEntityType(oFilterModel.getMetaModel().getODataEntityContainer().namespace +
                "." + ovpConfig.globalFilterEntityType, true);
            /**
             * power user
             * temp
             */
            var oView = sap.ui.view("mainView", {
                height: "100%",
                preprocessors: {
                    xml: {
                        bindingContexts: {
                            ui: uiModel.createBindingContext("/"),
                            meta: oFilterModel.getMetaModel().createBindingContext(oEntityType)
                        },
                        models: {
                            ui: uiModel,
                            meta: oFilterModel.getMetaModel()
                        }
                    }
                },
				type: sap.ui.core.mvc.ViewType.XML,
				viewName: "sap.ovp.app.Main"
			});
            /**
             * end
             */

			jQuery.sap.measure.end("ovp:AppCreateContent");

			return oView;
		},

        _showErrorPage: function() {
            /* About: this function
             *  When: If error occurs and getMetaModel.loaded() promise gets rejected
             *  How: Loads Error Page into the Root Container and sets Aggregation
             */
            var oView = sap.ui.view({
                height: "100%",
                type: sap.ui.core.mvc.ViewType.XML,
                viewName: "sap.ovp.app.Error"
            });
            /* What: Using Resource Bundle to get strings to display on error page. */
            var ovplibResourceBundle = this._getOvpLibResourceBundle();
            oView.setModel(ovplibResourceBundle, "ovplibResourceBundle");
            this.setAggregation("rootControl", oView);
            this.oContainer.invalidate();
        },

        _checkForAuthorizationForLineItems: function () {
            return new Promise(function (resolve, reject) {
                var aAllIntents = [],
                    oCardsWithStaticContent = [];
                var oOvpConfig = this.getOvpConfig();
                var oCards = oOvpConfig["cards"];
                for (var sCard in oCards) {
                    if (oCards.hasOwnProperty(sCard) && oCards[sCard]) {
                        var card = oCards[sCard];
                        var oSettings = card.settings;
                        if (card.template === "sap.ovp.cards.linklist" && oSettings.listFlavor === "standard" && oSettings.staticContent) {
                            var aStaticContent = oSettings.staticContent;
                            for (var i = 0; i < aStaticContent.length; i++) {
                                if (aStaticContent[i].semanticObject || aStaticContent[i].action) {
                                    var sIntent = "#" + aStaticContent[i].semanticObject + "-" + aStaticContent[i].action;
                                    if (oCardsWithStaticContent.indexOf(sCard) === -1) {
                                        oCardsWithStaticContent.push(sCard);
                                    }
                                    if (aAllIntents.indexOf(sIntent) === -1) {
                                        aAllIntents.push(sIntent);
                                    }
                                }
                            }
                        }
                    }
                }

                this._oCardsWithStaticContent = oCardsWithStaticContent;

                // Checks for the supported Intents for the user
                sap.ushell.Container.getService('CrossApplicationNavigation').isIntentSupported(aAllIntents)
                    .done(function (oResponse) {
                        var oOvpConfig = this.getOvpConfig();
                        for (var key in oResponse) {
                            if (oResponse.hasOwnProperty(key) && oResponse[key].supported === false) {
                                for (var i = 0; i < this._oCardsWithStaticContent.length; i++) {
                                    var aStaticContent = oOvpConfig["cards"][this._oCardsWithStaticContent[i]].settings.staticContent;
                                    for (var j = aStaticContent.length - 1; j >= 0; j--) {
                                        var sIntent = "#" + aStaticContent[j].semanticObject + "-" + aStaticContent[j].action;
                                        if (key === sIntent) {
                                            aStaticContent.splice(j, 1);
                                        }
                                    }
                                    oOvpConfig["cards"][this._oCardsWithStaticContent[i]].settings.staticContent = aStaticContent;
                                }
                            }
                        }

                        delete this._oCardsWithStaticContent;

                        resolve(oOvpConfig);
                    }.bind(this))
                    .fail(function (oError) {
                        jQuery.sap.log.error(oError);
                    });
            }.bind(this));
        },

		setContainer: function() {
			var ovpConfig = this.getOvpConfig();
			var oFilterModel = this.getModel(ovpConfig.globalFilterModel);
			// call overwritten setContainer (sets this.oContainer)
			sap.ui.core.UIComponent.prototype.setContainer.apply(this, arguments);

			if (oFilterModel && !this.getAggregation("rootControl")) {
                Promise.all([
                    oFilterModel.getMetaModel().loaded(),
                    this._checkForAuthorizationForLineItems(ovpConfig)
                ]).then(function(aResponse) {
                    this.oOvpConfig = aResponse[1];
					// Do the templating once the metamodel is loaded
					this.runAsOwner(function() {
						var oView = this.createXMLView(this.oOvpConfig);
						this.setAggregation("rootControl", oView);
						this.oContainer.invalidate();
					}.bind(this));
				}.bind(this));
                oFilterModel.attachMetadataFailed(function () {
                    /*To show error page if metadata Model doesn't get loaded*/
                    this._showErrorPage();
                }.bind(this));
			}
		},
        _getOvpLibResourceBundle: function () {
            var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ovp");
            var ovplibResourceBundle = oResourceBundle ? new sap.ui.model.resource.ResourceModel({
                bundleUrl: oResourceBundle.oUrlInfo.url
            }) : null;
            return ovplibResourceBundle;
        },

        createMapForEntityContainer: function (oEntityContainer) {
            var oEntitySetMap = {};
            var oEntitySets = oEntityContainer.entitySet;
            for (var i = 0; i < oEntitySets.length; i++) {
                oEntitySetMap[oEntitySets[i].name] = oEntitySets[i].entityType;
            }
            return oEntitySetMap;

        },

        createMapForValueHelpEntity: function (oOvpConfig) {
            var oFilterModel = this.getModel(oOvpConfig.globalFilterModel);
            var oValueHelpEntityMap = [];
            var oFilterEntityType = oFilterModel.getMetaModel().getODataEntityType(oFilterModel.getMetaModel().getODataEntityContainer().namespace +
                "." + oOvpConfig.globalFilterEntityType);
            if (!oFilterEntityType) {
                return oValueHelpEntityMap;
            }
            var oEntityCollection = [];
            oEntityCollection.push(oFilterEntityType);
            var counter = 0;
            var bNavigationProperty = false;
            var oEntitySetMap = this.createMapForEntityContainer(oFilterModel.getMetaModel().getODataEntityContainer());
            if (oFilterEntityType.navigationProperty) {
                bNavigationProperty = true;
            }
            while (oEntityCollection.length != 0) {
                var oEntityType = oEntityCollection.shift();
                for (var i = 0; i < oEntityType.property.length; i++) {
                    var oProp = oEntityType.property[i];
                    if (oProp["com.sap.vocabularies.Common.v1.ValueList"]) {
                        oValueHelpEntityMap.push(oEntitySetMap[oProp["com.sap.vocabularies.Common.v1.ValueList"].CollectionPath.String]);
                    }
                }
                if (!bNavigationProperty || !(oFilterEntityType.navigationProperty[counter])) {
                    break;
                }
                //get association
                var sAssociationEntity = oFilterModel.getMetaModel().getODataAssociationEnd(oFilterEntityType, oFilterEntityType.navigationProperty[counter].name).type;
                var oNavigationEntityType = oFilterModel.getMetaModel().getODataEntityType(sAssociationEntity);
                oEntityCollection.push(oNavigationEntityType);
                counter++;
            }
            return oValueHelpEntityMap;
        },

        //Changes to test the Resizable layout in running applications
        inResizableTestMode: function () {
            // get the URL parameter from the parent frame
            return this._getQueryParamUpToTop('resizableTest') == 'true';
        },

        _getQueryParamUpToTop: function (name) {
            var win = window;
            var val = this.getQueryParam(win.location.search, name);
            if (val != null) {
                return val;
            }
            if (win == win.parent) {
                return null;
            }
            win = win.parent;
            return null;
        },

        getQueryParam: function (query, name) {
            var val = null;
            if (!query) {
                return val;
            }
            if (query.indexOf('?') != -1) {
                query = query.substring(query.indexOf('?'));
            }
            if (query.length > 1 && query.indexOf(name) != -1) {
                query = query.substring(1); // remove '?'
                var params = query.split('&');
                for (var i = 0; i < params.length; i++) {
                    var nameVal = params[i].split('=');
                    if (nameVal[0] == name) {
                        val = nameVal[1];
                        break;
                    }
                }
            }
            return val;
        }
	});
}());
}; // end of sap/ovp/app/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.ActionUtils') ) {

(function () {
    "use strict";
    /*global dispatchEvent, document, jQuery, localStorage, sap */

    jQuery.sap.declare("sap.ovp.cards.ActionUtils");

    sap.ovp.cards.ActionUtils = {};

    sap.ovp.cards.ActionUtils.getActionInfo = function(oContext, action, oEntityType) {

        var metaModel = oContext.getModel().getMetaModel();
        var sFunctionName = action.action.split('/')[1];
        var oContextObject = oContext.getObject();
        var actionData = {
            oContext: oContext,
            sFunctionImportPath: action.action,
            sFunctionLabel: action.label,
            oFunctionImport: metaModel.getODataFunctionImport(sFunctionName),
            parameterData: {},
            allParameters: []
        };
        var oParameterValue;

        if (actionData.oFunctionImport.parameter) {
            var keyMap = this._getKeyProperties(oEntityType);
            for (var i = 0; i < actionData.oFunctionImport.parameter.length; i++) {
                var oParameter = actionData.oFunctionImport.parameter[i];
                this._addParamLabel(oParameter, oEntityType, metaModel);
                if (keyMap[oParameter.name]) {
                    oParameter.isKey = true;
                }

                if (typeof oParameter.nullable === 'undefined') {
                    oParameter.nullable = true;// default is not mandatory parameter == could be null
                }
                if (oContextObject.hasOwnProperty(oParameter.name)) {
                    oParameterValue = oContextObject[oParameter.name];
                } else {
                    oParameterValue = "";
                }

                actionData.parameterData[oParameter.name] = oParameterValue;
                actionData.allParameters.push(oParameter);
            }
        }
        return actionData;
    };

    sap.ovp.cards.ActionUtils._getKeyProperties = function(oEntityType){
        var oKeyMap = {};

        if (oEntityType && oEntityType.key && oEntityType.key.propertyRef){
            for (var i = 0; i < oEntityType.key.propertyRef.length; i++) {
                var sKeyName = oEntityType.key.propertyRef[i].name;
                oKeyMap[sKeyName] = true;
            }
        }

        return oKeyMap;
    };

    sap.ovp.cards.ActionUtils._addParamLabel = function (oParameter, oEntityType, metaModel){
        if (oEntityType && oParameter && !oParameter["com.sap.vocabularies.Common.v1.Label"]) {

            var oProperty = metaModel.getODataProperty(oEntityType, oParameter.name, false);
            if (oProperty && oProperty["com.sap.vocabularies.Common.v1.Label"]) {
                // copy label from property to parameter with same name as default if no label is set for function import parameter
                oParameter["com.sap.vocabularies.Common.v1.Label"] = oProperty["com.sap.vocabularies.Common.v1.Label"];
            } else if (oProperty && oProperty["sap:label"]) {
                oParameter["sap:label"] = oProperty["sap:label"];
            }
        }
    };

    sap.ovp.cards.ActionUtils.buildParametersForm = function(actionData, onFieldChangeCB) {

        function getParamLabel(oParameter){
            var sLabel = "";
            if (oParameter["com.sap.vocabularies.Common.v1.Label"]) {
                sLabel = oParameter["com.sap.vocabularies.Common.v1.Label"].String;
            } else if (oParameter["sap:label"]) {
                sLabel = oParameter["sap:label"];
            } else {
                sLabel = oParameter.name;
            }

            return sLabel;
        }

        jQuery.sap.require("sap.ui.layout.form.SimpleForm");
        jQuery.sap.require("sap.ui.comp.smartfield.SmartField");

        var oForm = new sap.ui.layout.form.SimpleForm({
            editable: true
        });
        var aFields = [];

        for (var i = 0; i < actionData.allParameters.length; i++) {
            var oParameter = actionData.allParameters[i];

            var sParameterLabel = getParamLabel(oParameter);
            var sBinding = '{/' + oParameter.name + '}';
            var sJSONType = null;
            var sEdmType = oParameter.type;

            // max length - default undefined if not set in OData metadata
            var iMaxLength = oParameter.maxLength ? parseInt(oParameter.maxLength, 10) : undefined;

            // covers Edm.Byte, Edm.SByte, Edm.Boolean, Edm.Int16, Edm.Int32, Edm.Time
            if (sEdmType === 'Edm.Boolean') {
                sJSONType = sap.ui.comp.smartfield.JSONType.Boolean;
            } else if (sEdmType === 'Edm.Byte' || sEdmType === 'Edm.SByte' || sEdmType === 'Edm.Int16' || sEdmType === 'Edm.Int32') {
                sJSONType = sap.ui.comp.smartfield.JSONType.Integer;
            } else {
                sJSONType = sap.ui.comp.smartfield.JSONType.String;
            }

            var isMandatory = sap.ovp.cards.ActionUtils._isMandatoryParameter(oParameter);

            var oField = new sap.ui.comp.smartfield.SmartField({
                value: sBinding,
                mandatory: isMandatory,
                jsontype: sJSONType,
                maxLength: iMaxLength,
                editable:!oParameter.isKey
            });
            oField.attachChange(onFieldChangeCB);
            aFields.push(oField);
            var oLabel = new sap.ui.comp.smartfield.SmartLabel();
            oLabel.setRequired(isMandatory && !oParameter.isKey);

            oLabel.setText(sParameterLabel);
            oLabel.setLabelFor(oField);

            oForm.addContent(oLabel);
            oForm.addContent(oField);
        }

        return oForm;
    };

    sap.ovp.cards.ActionUtils.getParameters = function (oParameterModel, functionImport){
        var paramObject = sap.ovp.cards.ActionUtils._validateParametersValue(oParameterModel, functionImport);
        return paramObject.preparedParameterData;
    };

    sap.ovp.cards.ActionUtils.mandatoryParamsMissing = function(oParameterModel, functionImport) {
        var oValidatedParams = sap.ovp.cards.ActionUtils._validateParametersValue(oParameterModel, functionImport);
        return oValidatedParams.missingMandatoryParameters && oValidatedParams.missingMandatoryParameters.length > 0;
    };

    sap.ovp.cards.ActionUtils._validateParametersValue = function(oParameterModel, functionImport) {
        var aMissingMandatoryParameters = [];
        var oModelParameterData = oParameterModel.getObject('/');
        var oPreparedParameterData = {};
        var oValue, isMandatory;
        for (var i = 0; i < functionImport.parameter.length; i++) {
            var oParameter = functionImport.parameter[i];
            var sParameterName = oParameter.name;
            if (oModelParameterData.hasOwnProperty(sParameterName)) {

                oValue = oModelParameterData[sParameterName];
                isMandatory = sap.ovp.cards.ActionUtils._isMandatoryParameter(oParameter);
                if (oValue === undefined || oValue === "") {
                    if (isMandatory) {
                        if (oParameter.type === 'Edm.Boolean'){
                            oPreparedParameterData[sParameterName] = false;
                        } else {
                            aMissingMandatoryParameters.push(oParameter);
                        }
                    }
                } else {
                    oPreparedParameterData[sParameterName] = oValue;
                }
            } else {
                throw new Error("Unknown parameter: " + sParameterName);
            }
        }
        return {
            preparedParameterData: oPreparedParameterData,
            missingMandatoryParameters: aMissingMandatoryParameters
        };
    };

    sap.ovp.cards.ActionUtils._isMandatoryParameter = function(oParameter) {
        return !sap.ovp.cards.ActionUtils._toBoolean(oParameter.nullable);
    };

    sap.ovp.cards.ActionUtils._toBoolean = function(oParameterValue) {
        if (typeof oParameterValue === "string"){
            var oValue = oParameterValue.toLowerCase();
            return !(oValue == "false" || oValue == "" || oValue == " ");
        }

        return !!oParameterValue;
    };
}());

}; // end of sap/ovp/cards/ActionUtils.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.CommonUtils') ) {
(function () {
    "use strict";
    jQuery.sap.declare("sap.ovp.cards.CommonUtils");
    sap.ovp.cards.CommonUtils = {
        app : undefined,
        navigationHandler : undefined,
        supportedCards: ["sap.ovp.cards.list", "sap.ovp.cards.table", "sap.ovp.cards.stack", "sap.ovp.cards.linklist", "sap.ovp.cards.charts.analytical", "sap.ovp.cards.charts.bubble", "sap.ovp.cards.charts.donut", "sap.ovp.cards.charts.line"],

        enable : function(app, oNavHandler) {
            this.app = app;
            this.navigationHandler = oNavHandler;
        },

        getApp : function() {
            return this.app;
        },

        getNavigationHandler : function() {
            return this.navigationHandler;
        },

        createKeyForCB: function (oTabs, oTab) {
            return oTabs.indexOf(oTab) + 1;
        },

        /**
         * Check Whether API is used or not
         *
         * @method checkIfAPIIsUsed
         * @param {Object} oContext - Current Context
         * @returns {boolean} bCheckForAPI - It will be true if API is used else false
         */
        checkIfAPIIsUsed: function (oContext) {
            var bCheckForAPI = false;
            var oOwnerComponent = oContext.getOwnerComponent();
            if (!!oOwnerComponent) {
                var oComponentData = oOwnerComponent.getComponentData();
                if (!!oComponentData && oComponentData.ovpCardsAsApi) {
                    bCheckForAPI = true;
                }
            }
            return bCheckForAPI;
        },

        /**
         * Recreate OVP Cards for View Switch
         * API support for View Switch
         *
         * @method recreateCard
         * @param {Object} oCardProperties - Card's updated properties for view switch
         * @param {Object} oComponentData - Card's Component Data
         */
        recreateCard: function (oCardProperties, oComponentData) {
            var oManifest = oComponentData.manifest;
            var sCardId;
            for (var card in oManifest.cards) {
                sCardId = card;
            }
            var oCard = oManifest.cards[sCardId];
            if (oCard.template === "sap.ovp.cards.charts.analytical") {
                oCard.settings.chartAnnotationPath = oCardProperties.chartAnnotationPath;
                oCard.settings.navigation = oCardProperties.navigation;
            }
            oCard.settings.annotationPath = oCardProperties.annotationPath;
            oCard.settings.dynamicSubtitleAnnotationPath = oCardProperties.dynamicSubtitleAnnotationPath;
            oCard.settings.presentationAnnotationPath = oCardProperties.presentationAnnotationPath;
            oCard.settings.selectionAnnotationPath = oCardProperties.selectionAnnotationPath;
            oCard.settings.selectionPresentationAnnotationPath = oCardProperties.selectionPresentationAnnotationPath;
            oCard.settings.dataPointAnnotationPath = oCardProperties.dataPointAnnotationPath;
            oCard.settings.identificationAnnotationPath = oCardProperties.identificationAnnotationPath;
            // headerAnnotationPath is a property added to the manifest.json for Qualifier support in HeaderInfo annotations.
            oCard.settings.headerAnnotationPath = oCardProperties.headerAnnotationPath;
            oCard.settings.selectedKey = oCardProperties.selectedKey;
            if (oCard) {
                oManifest.cards[sCardId] = oCard;
                sap.ovp.cards.CommonUtils.createCardComponent(oComponentData.parentView, oManifest, oComponentData.containerId);
            }
        },

        /**
         * Creating OVP Cards for External Libraries
         *
         * @method createCardComponent
         * @param {Object} oView - View where the card's component will be set to a Container
         * @param {Object} oManifest - Manifest settings object
         * @param {String} sContainerId - Container's Id where card's component will be set
         */
        createCardComponent: function (oView, oManifest, sContainerId) {
            return new Promise(function(resolve, reject) {
            var oCardManifest, cardId;
            if (!!oManifest) {
                for (var card in oManifest.cards) {
                    oCardManifest = oManifest.cards[card];
                    cardId = card;
                }
                if (!!oCardManifest && !!cardId) {
                    if (!!oCardManifest.template && !!oCardManifest.model && !!oCardManifest.settings) {
                        /*
                         Checking for the supported Cards in the API
                         */
                        if (this.supportedCards.indexOf(oCardManifest.template) !== -1) {
                            if (!!sContainerId && typeof sContainerId === 'string') {
                                if (!!oView) {
                                    var oModel = oView.getModel(oCardManifest.model);
                                    var getMetaModelPromise = oModel.getMetaModel().loaded();
                                    getMetaModelPromise.then(function () {
                                        //alert("MetaModel Loaded");
                                        var oComponentConfig = {
                                            async: true,
                                            name: oCardManifest.template,
                                            componentData: {
                                                model: oModel,
                                                ovpCardsAsApi: true,
                                                parentView: oView,
                                                manifest: oManifest,
                                                containerId: sContainerId,
                                                showDateInRelativeFormat: oManifest.showDateInRelativeFormat,
                                                disableTableCardFlexibility: oManifest.disableTableCardFlexibility,
                                                template: oCardManifest.template,
                                                i18n: null,
                                                cardId: cardId,
                                                settings: oCardManifest.settings,
                                                appComponent: null,
                                                mainComponent: null
                                            }
                                        };
                                        //Component creation will be done asynchronously
                                        sap.ui.component(oComponentConfig).then(function (oComponent) {

                                            var oComponentContainer = oView.byId(sContainerId);
                                            if (!!oComponentContainer) {
                                                var oOldCard = oComponentContainer.getComponentInstance();

                                                //Add the card component to the container
                                                oComponent.setModel(oModel);
                                                oComponentContainer.setComponent(oComponent);

                                                //Destroy any old card
                                                if (oOldCard) {
                                                    //currently the old component is not destroyed when setting a different component
                                                    //so we need to do that in timeout to make sure that it will not be destroyed
                                                    //too early, before real card will be rendered on the screen.
                                                    setTimeout(function () {
                                                        oOldCard.destroy();
                                                    }, 0);
                                                }
                                                resolve(true);
                                            } else {
                                                jQuery.sap.log.error("Component Container '" + sContainerId + "' is not present in the current View");
                                            }

                                        });
                                    }, function () {
                                        jQuery.sap.log.error("MetaModel was not loaded");
                                    });
                                } else {
                                    jQuery.sap.log.error("First argument oView is null");
                                }
                            } else {
                                jQuery.sap.log.error("ContainerId should be of type string and not null");
                            }
                        } else {
                            jQuery.sap.log.error(oCardManifest.template + " card type is not supported in the API");
                        }
                    } else {
                        jQuery.sap.log.error("Cards template or model or settings are not defined");
                    }
                } else {
                    jQuery.sap.log.error("Cards manifest entry or cardId is null");
                }
            } else {
                jQuery.sap.log.error("Second argument oManifest is null");
            }
          }.bind(this));
        },

        /* Returns column name that contains the unit for the measure */
        getUnitColumn : function (measure, oEntityType) {
          var tempUnit, properties = oEntityType.property;
          for (var i = 0, len = properties.length; i < len; i++) {
            if (properties[i].name == measure) {
                      if (properties[i].hasOwnProperty("Org.OData.Measures.V1.ISOCurrency")) { //as part of supporting V4 annotation
                          return properties[i]["Org.OData.Measures.V1.ISOCurrency"].Path ? properties[i]["Org.OData.Measures.V1.ISOCurrency"].Path : properties[i]["Org.OData.Measures.V1.ISOCurrency"].String;
                      } else if (properties[i].hasOwnProperty("Org.OData.Measures.V1.Unit")) {
                          tempUnit = properties[i]["Org.OData.Measures.V1.Unit"].Path ? properties[i]["Org.OData.Measures.V1.Unit"].Path : properties[i]["Org.OData.Measures.V1.Unit"].String;
                          if (tempUnit && tempUnit != "%") {
                              return tempUnit;
                          } else {
                              return null;
                          }
                      } else if (properties[i].hasOwnProperty("sap:unit")) {
                          return properties[i]["sap:unit"];
                      }
              break;
            }
          }
          return null;
        },

        /*
            Hook function for Header Click
         */
        onHeaderClicked: function () {

        },

        /*
            Hook function for Content Click
         */
        onContentClicked: function (oEvent) {

        },

        /**
         * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy
         * design mode class should be set, which influences the size appearance of some controls.
         * @public
         * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set
         */
        getContentDensityClass: function () {
            if (this._sContentDensityClass === undefined) {
                // check whether FLP has already set the content density class; do nothing in this case
                if (jQuery(document.body).hasClass("sapUiSizeCozy") || jQuery(document.body).hasClass("sapUiSizeCompact")) {
                    if (jQuery(document.body).hasClass("sapUiSizeCozy") === true) {
                        this._sContentDensityClass = "sapUiSizeCozy";
                    } else if (jQuery(document.body).hasClass("sapUiSizeCompact") === true) {
                        this._sContentDensityClass = "sapUiSizeCompact";
                    } else {
                        this._sContentDensityClass = "";
                    }
                } else if (!sap.ui.Device.support.touch) { // apply "compact" mode if touch is not supported
                    this._sContentDensityClass = "sapUiSizeCompact";
                } else {
                    // "cozy" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table
                    this._sContentDensityClass = "sapUiSizeCozy";
                }
            }
            return this._sContentDensityClass;
        },

        _setCardpropertyDensityAttribute: function() {
            var sContentDensityClassName = this.getContentDensityClass();
            if (sContentDensityClassName === "sapUiSizeCompact") {
                return "compact";
            } else if (sContentDensityClassName === "sapUiSizeCozy") {
                return "cozy";
            } else if (!sap.ui.Device.support.touch) { // apply "compact" mode if touch is not supported
                return "compact";
            } else {
                // "cozy" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table
                return "cozy";
            }
        },

        //returns the number of pixel for one rem from the current browser font size
        getPixelPerRem: function() {
            // Returns a number
            var fontSize = parseFloat(
                // of the computed font-size, so in px
                getComputedStyle(
                    // for the root <html> element
                    document.documentElement
                )
                    .fontSize
            );
            return fontSize;
        },

        /**
         * Shows the error messages from the body of an HTTP response.
         *
         * @param {object}
         *            oError an object with error information.
         */
        showODataErrorMessages: function (oError) {
            var aMessages = [], mError, mResponseBody, result = "";
            if (oError && oError.responseText) {
                // It's an error coming in via the requestFailed event of the model
                var sResponse = oError.responseText;
                if (sResponse) {
                    try {
                        mResponseBody = JSON.parse(sResponse);
                    } catch (exception) {
                        jQuery.sap.log.error("Failed parsing response as JSON: " + sResponse);
                    }
                    if (mResponseBody && mResponseBody.error) {
                        mError = mResponseBody.error;
                    }
                }
            }
            // Get messages from error
            if (mError && mError.innererror && mError.innererror.errordetails) {
                aMessages = mError.innererror.errordetails;
            }
            if (mError && mError.message && jQuery.isArray(aMessages)) {
                // Add the root message
                aMessages.unshift({
                    message: mError.message.value,
                    severity: "error"
                });
            }
            // Display the messages
            if (aMessages && aMessages.length > 0) {
                // SAP Gateway is overly cautious here and tends to provide you with the same error message multiple times. So let's keep track of the
                // messages that we've added already to avoid duplicates.
                // So here's the craziest thing: The OData framework does not only multiply messages but sometimes, it feels like it should add a dot
                // ('.') to the end of the message if not already available. This can result in the same message being displayed twice, once with a
                // dot and once without. So when we keep track of the messages that we've already added, we'll ignore the dot.
                var mAddedMessages = {};
                jQuery.each(aMessages, function (iIdx, mMessage) {
                    var sMessageText = mMessage.message;
                    if (jQuery.sap.endsWith(sMessageText, ".")) {
                        sMessageText = sMessageText.substr(0, sMessageText.length - 1);
                    }
                    if (!mAddedMessages[sMessageText]) {
                        mAddedMessages[sMessageText] = true;
                        result = result + sMessageText + " ";
                    }
                });
            }
            return result;
        }
    };
}());

}; // end of sap/ovp/cards/CommonUtils.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.LoadingUtils') ) {
(function () {
    "use strict";
    jQuery.sap.declare("sap.ovp.cards.LoadingUtils");
    sap.ovp.cards.LoadingUtils = {
        bAnimationStarted : false,
        aCanvas : [],
        bPageAndCardLoading : false,
        bAnimationStop : false,
        startAnimation: function() {

            var windowWidth = jQuery(window).width();

            var oWave = {
                speed: (0.02 * windowWidth), // Speed of the wave
                currentPosition: 0.01,
                width: 0.2,
                backgroundColor: "#f5f5f0",
                waveColor: "#e6e6e6"
            };

            var updateWavePosition = function () {
                oWave.currentPosition += oWave.speed;
                if (oWave.currentPosition > windowWidth) {
                    oWave.currentPosition = 0.01;
                }
            };

            var renderingWaveOnCanvas = function (canvas) {
                var aParents = jQuery(canvas).parentsUntil(".sapUiComponentContainer");
                if (aParents.length === 0) {
                    return;
                }
                var oParent = aParents[aParents.length - 1].parentNode.parentNode;
                if (!oParent || oParent.offsetLeft == undefined) {
                    return;
                }
                var canvasX = oParent.offsetLeft;
                var canvasWidth = canvas.offsetWidth;
                var oContext = canvas.getContext("2d");
                var oGradient = oContext.createLinearGradient(0,0,canvas.width,0);
                oGradient.addColorStop(0,oWave.backgroundColor);
                if (oWave.currentPosition > canvasX && oWave.currentPosition < (canvasX + canvasWidth)) {
                    var waveX = (oWave.currentPosition - canvasX) / canvasWidth;
                    oGradient.addColorStop(Math.max(waveX - oWave.width, 0.01), oWave.backgroundColor);
                    oGradient.addColorStop(waveX, oWave.waveColor);
                    oGradient.addColorStop(Math.min(waveX + oWave.width, 0.99), oWave.backgroundColor);
                }
                oGradient.addColorStop(1, oWave.backgroundColor);

                oContext.fillStyle = oGradient;
                oContext.fillRect(0, 0, canvas.width, canvas.height);
            };

            var animateLoadingCards = function () {
                if (!sap.ovp.cards.LoadingUtils.bAnimationStop) {
                    updateWavePosition();
                    var aCanvases = sap.ovp.cards.LoadingUtils.aCanvas;
                    for (var i = 0; i < aCanvases.length; i++) {
                        renderingWaveOnCanvas(aCanvases[i]);
                    }

                    // Request to do this again ASAP
                    requestAnimationFrame(animateLoadingCards);
                }
            };

            var w = window,
                requestAnimationFrame = w.requestAnimationFrame || w.webkitRequestAnimationFrame || w.msRequestAnimationFrame || w.mozRequestAnimationFrame;

            animateLoadingCards();
        }
    };
}());
}; // end of sap/ovp/cards/LoadingUtils.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.SettingsUtils') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

jQuery.sap.declare('sap.ovp.cards.SettingsUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
sap.ui.define("sap/ovp/cards/SettingsUtils",[
	'jquery.sap.global',
	"sap/m/Dialog",
    "sap/m/Button",
    'sap/ovp/cards/CommonUtils'
], function(jQuery, Dialog, Button, CommonUtils) {
	"use strict";
	
	function addCardToView(oComponentContainer, oView){
		var oComponent = oComponentContainer.getComponentInstance(),
			oComponentData = oComponent.getComponentData(),
			oAppComponent = oComponentData.appComponent,
			sCardId = oComponentData.cardId,
			sManifestCardId = sCardId + 'Dialog',
			sModelName = oComponentData.modelName,
			oModel = oAppComponent.getModel(sModelName),
			oCardProperties = oView.getModel().getData(),
			oManifest = {
				cards: {}
			};
		oManifest.cards[sManifestCardId] = {
			model: sModelName,
	        template: oCardProperties.template,
	        settings: oCardProperties
		};
		oView.setModel(oModel, sModelName);
		oView.getController()._oManifest = oManifest;
		CommonUtils.createCardComponent(oView, oManifest, 'dialogCard');
	}
	
	function hasViewSwitch(oComponent) {
		var oCardProperties = oComponent.getRootControl().getModel("ovpCardProperties").getData(),
			aTabs = oCardProperties.tabs;
		return (!!aTabs && aTabs.length != 0) || (oCardProperties.template === "sap.ovp.cards.linklist" && !!oCardProperties.staticContent);
	}
	
	function addIconTabBarToDialog(oComponent, oView, oDialogBox) {
		var oCardProperties = oComponent.getRootControl().getModel("ovpCardProperties").getData(),
			aTabs = oCardProperties.tabs,
			oIconTabBar;
		if (!!aTabs && aTabs.length != 0) {
            oIconTabBar = new sap.m.IconTabBar({
                selectedKey: oCardProperties.selectedKey,
                select: function (oEvent) {
                    //Code for tab change goes here
                    var dialogCard = oView.byId("dialogCard");
                    var oRootControl = dialogCard.getComponentInstance().getRootControl();
                    var oController = oRootControl.getController();
                    oController.changeSelection(oEvent, true);
                }.bind(this)
            }).addStyleClass("sapOvpITH");
            for (var i = 0; i < aTabs.length; i++) {
                    var iconTabFilter = new sap.m.IconTabFilter({
                    text: aTabs[i].value,
                    key: i + 1
                });
                oIconTabBar.addItem(iconTabFilter);
            }
        } else {
        	// (oCardProperties.template === "sap.ovp.cards.linklist" && !!oCardProperties.staticContent)
        	oIconTabBar = new sap.m.IconTabBar({
                selectedKey: 1,
                select: function (oEvent) {
                    //Code for tab change goes here
                    var iSelectedKey = oEvent.getParameters().selectedKey;
                    var iSelectedLineItem = iSelectedKey - 1;
                    var oDialogCard = oView.byId("dialogCard");
                    var oRootControl = oDialogCard.getComponentInstance().getRootControl();
                    var oCarousel = oRootControl.byId("pictureCarousel");
                    if (oCarousel) {
                        oCarousel.setActivePage(oCarousel.getAggregation("pages")[iSelectedLineItem]);
                    }
                    var oModel = oView.getModel();
                    oModel.setProperty("/lineItemId", "linkListItem--" + iSelectedKey);
                    var oStaticContentData = oView.byId("sapOvpSettingsForm").getModel().getData().staticContent[iSelectedLineItem];
                    var oLinks, oLinksItem,
                        oTitle = oView.byId("sapOvpSettingsLineItemTitle"),
                        oSubTitle = oView.byId("sapOvpSettingsLineItemSubTitle");
                    oTitle.bindValue("/staticContent/" + iSelectedLineItem + "/title");
                    oSubTitle.bindValue("/staticContent/" + iSelectedLineItem + "/subTitle");
                    var oVisibilityModel = oView.getModel("visibility");
                    if (oStaticContentData.semanticObject && oStaticContentData.action) {
                        oVisibilityModel.setProperty("/links", true);
                        oVisibilityModel.setProperty("/staticLink", false);
                        oLinks = oView.byId("sapOvpSettingsLinks");
                        oLinksItem = oLinks.getItemByKey("#" + oStaticContentData.semanticObject + "-" + oStaticContentData.action);
                        oLinks.setSelectedItem(oLinksItem);
                    } else {
                        oVisibilityModel.setProperty("/staticLink", true);
                        oVisibilityModel.setProperty("/links", false);
                        oLinks = oView.byId("sapOvpSettingsStaticLink");
                        oLinks.bindValue("/staticContent/" + iSelectedLineItem + "/targetUri");
                    }
                    oVisibilityModel.refresh();
                }.bind(this)
            }).addStyleClass("sapOvpITH");
            for (var i = 0; i < oCardProperties.staticContent.length; i++) {
                var iconTabFilter = new sap.m.IconTabFilter({
                    text: "Record--" + (i + 1),
                    key: i + 1
                });
                oIconTabBar.addItem(iconTabFilter);
            }
        }
		oIconTabBar.addContent(oView);
		oDialogBox.addContent(oIconTabBar);
	}
	
	function getQualifier(sAnnotationPath) {
		if (sAnnotationPath.indexOf('#') !== -1) {
            return sAnnotationPath.split('#')[1];
        } else {
            return "Default";
        }
	}
	
	function getAnnotationLabel(oEntityType, sKey) {
		if (sKey.indexOf(",") !== -1) {
    		sKey = sKey.split(",")[0];
        }
        if (sKey.indexOf(".Identification") !== -1) {
        	if (oEntityType[sKey]) {
                var aRecords = sap.ovp.cards.AnnotationHelper.sortCollectionByImportance(oEntityType[sKey]);
                for (var index = 0; index < aRecords.length; index++) {
                    var oItem = aRecords[index];
                    if (oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
                        if (oItem && oItem["Label"]) {
                            return oItem["Label"].String;
                        } else {
                            return oItem["SemanticObject"].String + "-" + oItem["Action"].String;
                        }
                    }
                    if (oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {
                        if (oItem && oItem["Label"]) {
                            return oItem["Label"].String;
                        } else {
                            return oItem["Url"].String;
                        }
                    }
                }
            }
            return "No Navigation";
        } else {
            var sLabelQualifier = "",
                sAnnotationQualifier = getQualifier(sKey);
            if (sAnnotationQualifier !== "Default") {
                sLabelQualifier = "#" + sAnnotationQualifier;
            }
            var sLabelName = "com.sap.vocabularies.Common.v1.Label" + sLabelQualifier;
            if (oEntityType[sKey] && oEntityType[sKey][sLabelName]) {
                return oEntityType[sKey][sLabelName].String;
            } else {
                return sAnnotationQualifier;
            }
        }
	}

    function checkIfCardTemplateHasProperty(sTemplate, sType) {
        switch (sType) {
            case "listType":
                var aCardTypeForListType = ["sap.ovp.cards.list"];
                return (aCardTypeForListType.indexOf(sTemplate) !== -1);
            case "listFlavor":
                var aCardTypeForListFlavor = ["sap.ovp.cards.list", "sap.ovp.cards.linklist"];
                return (aCardTypeForListFlavor.indexOf(sTemplate) !== -1);
            case "kpiHeader":
                var aCardTypeForKPI = ["sap.ovp.cards.list",
                    "sap.ovp.cards.table",
                    "sap.ovp.cards.charts.analytical",
                    "sap.ovp.cards.charts.bubble",
                    "sap.ovp.cards.charts.donut",
                    "sap.ovp.cards.charts.line"];
                return (aCardTypeForKPI.indexOf(sTemplate) !== -1);
            case "chart":
                var aCardTypeForChart = ["sap.ovp.cards.charts.analytical",
                    "sap.ovp.cards.charts.bubble",
                    "sap.ovp.cards.charts.donut",
                    "sap.ovp.cards.charts.line"];
                return (aCardTypeForChart.indexOf(sTemplate) !== -1);
            case "lineItem":
                var aCardTypeForLineItem = ["sap.ovp.cards.list", "sap.ovp.cards.table"];
                return (aCardTypeForLineItem.indexOf(sTemplate) !== -1);
            default :
                break;
        }
    }

    function getVisibilityOfElement(oCardProperties, sElement) {
        switch (sElement) {
            case "subTitle":
            case "title":
                return (!!oCardProperties[sElement]);
            case "valueSelectionInfo":
                if(!oCardProperties.valueSelectionInfo) {
                    oCardProperties.valueSelectionInfo = ' ';
                }
                return (!!oCardProperties.dataPointAnnotationPath &&
                checkIfCardTemplateHasProperty(oCardProperties.template, "kpiHeader"));
            case "listType":
            case "listFlavor":
                return checkIfCardTemplateHasProperty(oCardProperties.template, sElement);
            case "sortOrder":
            case "sortBy":
                return (!!oCardProperties[sElement] && !oCardProperties.staticContent);
            case "dataPoint":
                return (checkIfCardTemplateHasProperty(oCardProperties.template, "kpiHeader") && !!oCardProperties.dataPointAnnotationPath);
            case "identification":
            case "presentationVariant":
            case "selectionVariant":
                return (!oCardProperties.staticContent);
            case "kpiHeader":
            case "lineItem":
            case "chart":
                return checkIfCardTemplateHasProperty(oCardProperties.template, sElement);
            case "lineItemSubTitle":
            case "lineItemTitle":
            case "staticLink":
            case "links":
                var bFlag = (oCardProperties.template === "sap.ovp.cards.linklist" && !!oCardProperties.staticContent);
                if (sElement === "staticLink") {
                    return (bFlag && !!oCardProperties.staticContent[0].targetUri);
                } else if (sElement === "links") {
                    return (bFlag && !!oCardProperties.staticContent[0].semanticObject);
                } else {
                    return bFlag;
                }
            default :
                break;
        }
    }

    function setVisibilityForFormElements(oCardProperties) {
        // setting Visibility for Form Elements in settingDialog
        this.oVisibility["title"] = getVisibilityOfElement(oCardProperties, "title");
        this.oVisibility["subTitle"] = getVisibilityOfElement(oCardProperties, "subTitle");
        this.oVisibility["kpiHeader"] = getVisibilityOfElement(oCardProperties, "kpiHeader");
        this.oVisibility["valueSelectionInfo"] = getVisibilityOfElement(oCardProperties, "valueSelectionInfo");
        this.oVisibility["listType"] = getVisibilityOfElement(oCardProperties, "listType");
        this.oVisibility["listFlavor"] = getVisibilityOfElement(oCardProperties, "listFlavor");
        this.oVisibility["sortOrder"] = getVisibilityOfElement(oCardProperties, "sortOrder");
        this.oVisibility["sortBy"] = getVisibilityOfElement(oCardProperties, "sortBy");
        this.oVisibility["staticLink"] = getVisibilityOfElement(oCardProperties, "staticLink");
        this.oVisibility["links"] = getVisibilityOfElement(oCardProperties, "links");
        this.oVisibility["lineItemTitle"] = getVisibilityOfElement(oCardProperties, "lineItemTitle");
        this.oVisibility["lineItemSubTitle"] = getVisibilityOfElement(oCardProperties, "lineItemSubTitle");
    }

    function _getOvpLibResourceBundle() {
        var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ovp");
        var ovplibResourceBundle = oResourceBundle ? new sap.ui.model.resource.ResourceModel({
            bundleUrl: oResourceBundle.oUrlInfo.url
        }) : null;
        return ovplibResourceBundle;
    }

	function addManifestSettings(oData) {
		var oEntityType = oData.entityType,
         	aVariantNames = [ {
							sVariant : ".SelectionVariant",
							sPath : "selectionVariant"
						}, {
							sVariant : ".PresentationVariant",
							sPath : "presentationVariant"
						}, {
							sVariant : ".Identification",
							sPath : "identification"
						}, {
							sVariant : ".DataPoint",
							sPath : "dataPoint"
						}, {
							sVariant : ".Chart",
							sPath : "chart"
						}, {
                            sVariant: ".LineItem",
                            sPath: "lineItem"
                        } ];
		for (var i = 0 ; i < aVariantNames.length ; i++ ) {
			var aVariants = [];
			for (var key in oEntityType) {
		        if (oEntityType.hasOwnProperty(key) && key.indexOf(aVariantNames[i].sVariant) !== -1) {
                    if (aVariantNames[i].sVariant === ".LineItem") {
                        var variant = {
                            name: getAnnotationLabel(oEntityType, key),
                            value: key,
                            fields: sap.ovp.cards.AnnotationHelper.sortCollectionByImportance(oEntityType[key])
                        };
                        aVariants.push(variant);
                        if (key === oData.annotationPath) {
                            oData.lineItemQualifier = variant.name;
                        }
                    } else {
                        aVariants.push({name: getAnnotationLabel(oEntityType, key), value: key});
                    }
		        }
		    }
			if (aVariants.length !== 0 &&
                (aVariantNames[i].sPath !== "dataPoint" || checkIfCardTemplateHasProperty(oData.template, "kpiHeader"))) {
				oData[aVariantNames[i].sPath] = aVariants;
		    }
            this.oVisibility[aVariantNames[i].sPath] = (getVisibilityOfElement(oData, aVariantNames[i].sPath) && aVariants.length !== 0);
		}
		return oData;
	}

	function getCrossAppNavigationLinks(oModel) {
		var oData = oModel.getData();
	    sap.ushell.Container.getService('CrossApplicationNavigation').getLinks()
	        .done(function (aLinks) {
	            var aAllIntents = [],
	                oLinkToTextMapping = {};
	            for (var i = 0; i < aLinks.length; i++) {
	                aAllIntents.push(aLinks[i].intent);
	                oLinkToTextMapping[aLinks[i].intent] = aLinks[i].text;
	            }
//	            this.oLinkToTextMapping = oLinkToTextMapping;
	            // Checks for the supported Intents for the user
	            sap.ushell.Container.getService('CrossApplicationNavigation').isIntentSupported(aAllIntents)
	                .done(function (oResponse) {
	                    // Setting the model of Dialog Form with Semantic Objects and Actions
	                    var aLinks = [];
	                    for (var key in oResponse) {
	                        if (oResponse.hasOwnProperty(key) && oResponse[key].supported === true && oLinkToTextMapping && oLinkToTextMapping[key]) {
	                            aLinks.push({name: oLinkToTextMapping[key], value: key});
	                        }
	                    }
	                    var cardManifestSettings = oData;
	                    if (aLinks.length !== 0 || aLinks.length !== 0) {
	                        cardManifestSettings['links'] = aLinks;
	                    }
	                    oModel.refresh();
	                })
	               .fail(function (oError) {
	                    jQuery.sap.log.error(oError);
	                });
	        })
	        .fail(function (oError) {
	            jQuery.sap.log.error(oError);
	        });
	}
	
	var oSettingsUtils = {
		
			dialogBox: undefined,
            FORM_ITEM_NAME_FOR_LIST_FLAVOR_IN_LINKLIST: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OVP_KEYUSER_CAROUSEL"),
            FORM_ITEM_NAME_FOR_LIST_FLAVOR_IN_LIST: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OVP_KEYUSER_BARLIST"),
            addManifestSettings: addManifestSettings,
            setVisibilityForFormElements: setVisibilityForFormElements,
            oVisibility: {
                "title": true,
                "subTitle": true,
                "kpiHeader": true,
                "valueSelectionInfo": true,
                "listType": true,
                "listFlavor": true,
                "sortOrder": true,
                "sortBy": true,
                "selectionVariant": true,
                "presentationVariant": true,
                "lineItem": true,
                "identification": true,
                "dataPoint": true,
                "chart": true,
                "links": false,
                "lineItemTitle": false,
                "lineItemSubTitle": false,
                "staticLink": false
            },

			getDialogBox: function(oComponentContainer) {
				return new Promise(function(resolve, reject) {
					if (!this.dialogBox) {
	            		// settings dialog save button
                        // Attached this button to 'this' scope to get it in setting controller and attach save
                        // function to it.
	            		this.oSaveButton = new Button("settingsSaveBtn", {
	            			text: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("save")
	            		});
	            		// settings dialog close button
	            		var oCancelButton = new Button("settingsCancelBtn", {
	            			text: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("cancelBtn")
	            		});
	            		// settings dialog
	            		this.dialogBox = new Dialog("settingsDialog", {
	            			title: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("settingsDialogTitle"),
	            			buttons: [this.oSaveButton, oCancelButton],
	            			resizable: true,
	            			// TODO: confirm width
                            contentWidth: "70%",
                            // destroy the view on close of dialog (?)
                            // TODO: confirm if we can just destroy the card component, rest of the things can be updated via model data binding
                            afterClose: function(oEvent) {
                            	this.dialogBox.destroyContent();
                            }.bind(this)
	            		});
	            		this.dialogBox.setBusyIndicatorDelay(0);
	            		oCancelButton.attachPress(function(oEvent) {
	            			this.dialogBox.close();
	            		}.bind(this));
					}

					// card properties and model
					var oCardProperties = oComponentContainer.getComponentInstance().getRootControl().getModel("ovpCardProperties").getData(),
						oCardProperties = this.addManifestSettings(oCardProperties),
						oCardPropertiesModel = new sap.ui.model.json.JSONModel(oCardProperties),
                        ovplibResourceBundle = _getOvpLibResourceBundle();

                    if (oCardProperties.template === "sap.ovp.cards.linklist") {
                        oCardPropertiesModel.setProperty("/listFlavorName", this.FORM_ITEM_NAME_FOR_LIST_FLAVOR_IN_LINKLIST);
                    } else {
                        oCardPropertiesModel.setProperty("/listFlavorName", this.FORM_ITEM_NAME_FOR_LIST_FLAVOR_IN_LIST);
                    }

                    if (oCardProperties.template === "sap.ovp.cards.linklist" && oCardProperties.staticContent) {
                        getCrossAppNavigationLinks(oCardPropertiesModel);
                        oCardPropertiesModel.setProperty("/lineItemId", "linkListItem--1");
                    }

                    this.setVisibilityForFormElements(oCardProperties);
                    var oVisibilityModel = new sap.ui.model.json.JSONModel(this.oVisibility);

					// settings view
            		var oSettingsView = new sap.ui.view("settingsView", {
            			viewName: "sap.ovp.cards.rta.SettingsDialog",
            			type: sap.ui.core.mvc.ViewType.XML,
            			preprocessors: {
            				xml: {
    							bindingContexts: {
    								ovpCardProperties: oCardPropertiesModel.createBindingContext("/")
    							},
    							models: {
    								ovpCardProperties: oCardPropertiesModel
    							}
    						}
            			}
            		});
            		oSettingsView.setModel(oCardPropertiesModel);
                    oSettingsView.setModel(ovplibResourceBundle, "ovplibResourceBundle");
                    oSettingsView.setModel(oVisibilityModel, "visibility");
            		// check for tabs and set the iconTabBar accordingly
					// TODO: Why are we adding icon tab bar to the dialog instead of the view?
					if (hasViewSwitch(oComponentContainer.getComponentInstance())) {
						addIconTabBarToDialog(oComponentContainer.getComponentInstance(), oSettingsView, this.dialogBox);
					} else {
						this.dialogBox.addContent(oSettingsView);
					}
					var componentContainerHeight = oComponentContainer.getDomRef().offsetHeight;
            		oSettingsView.loaded().then(function(oView) {
            			// set the width of the component container for settings card
            			var oLayout = oComponentContainer.getComponentInstance().getComponentData().appComponent.getRootControl().getController().getLayout();
            			oView.byId('dialogCard').setWidth(oLayout.getColumnWidth(oLayout.columnStyle) + "rem");
            			addCardToView(oComponentContainer, oView);
            			oView.byId("dialogCard").setHeight(componentContainerHeight + "px");
            			resolve(this.dialogBox);
            		}.bind(this));
				}.bind(this));	
			}
		
	};
	
	return oSettingsUtils;
},
/* bExport= */true);

}; // end of sap/ovp/cards/SettingsUtils.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.OVPVizDataHandler') ) {
jQuery.sap.declare('sap.ovp.cards.charts.OVPVizDataHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ovp/cards/charts/OVPVizDataHandler",["sap/ui/core/Control"], function(Control) {
	"use strict";
	return Control.extend("sap.ovp.cards.charts.OVPVizDataHandler", {
		metadata : {
			aggregations : {
				data : {
					type : "sap.ui.core.Element"
				},
				aggregateData : {
					type : "sap.ui.core.Element"
				},
				content : {
					multiple : false
				}
			},
			properties : {
				chartType : { defaultValue : false },
				dependentDataReceived : { defaultValue : false },
				scale : { defaultValue : "" },
				entitySet:{}
			}
		},
		renderer : function(renderer, control) {
			renderer.write("<div");
			renderer.writeElementData(control);
			renderer.write(">");
			if (control.getContent()) {
				renderer.renderControl(control.getContent());
			}
			renderer.write("</div>");
		},
		
		mergeDatasets : function (binding, oDataClone, content) {
			var that = this;
			var model = this.getModel();
			var parameters = binding.mParameters;
			var bData = jQuery.extend(true, {}, this.dataSet );
			var selectedProperties = parameters.select.split(",");
			var entitySetPath = binding.getPath().substring(1);
			var pos = -1;
			
			if ( entitySetPath ) {
				pos = entitySetPath.indexOf('Parameters');
			}
			if ( pos >= 0 ) {
				entitySetPath = entitySetPath.substr(0, entitySetPath.indexOf('Parameters'));
			}
			var metaModel = model.getMetaModel();
//			var entityset = this.getEntitySet();
			var entitySetName = this.getEntitySet();
			var entitySet = metaModel.getODataEntitySet(entitySetName);
			var entityType = metaModel.getODataEntityType(entitySet.entityType); 
			var finalMeasures = [];
			var finalDimensions = [];
			for ( var i = 0; i < entityType.property.length; i++ ) { //as part of supporting V4 annotation
                if (entityType.property[i]["com.sap.vocabularies.Analytics.v1.Measure"] || (entityType.property[i].hasOwnProperty("sap:aggregation-role") && entityType.property[i]["sap:aggregation-role"] === "measure")) {
					if ( selectedProperties.indexOf(entityType.property[i].name) !== -1 ) {
						finalMeasures.push(entityType.property[i].name);
					}
				} else {
					if ( selectedProperties.indexOf(entityType.property[i].name) !== -1 ) {
						finalDimensions.push(entityType.property[i].name);
					}
				}
			}
			
			if (bData && bData.results) {
				for (var i = 0;i < bData.results.length - 2;i++) {
					for (var j = 0;j < finalMeasures.length;j++) {
						bData.results[0][finalMeasures[j]] = Number(bData.results[0][finalMeasures[j]]) + Number(bData.results[i + 1][finalMeasures[j]]);
					}
				}
				var count = bData.__count - bData.results.length;
				var object = {};
				object.results = [];
				object.results[0] = bData.results[0];
				var result;
				
				if ( bData.__count > bData.results.length ) {
					var aggregateObject = jQuery.extend(true, {}, this.aggregateSet);
					if (aggregateObject && aggregateObject.results && bData.results.length < bData.__count ) {
						jQuery.each(finalMeasures,function(i){
								aggregateObject.results[0][finalMeasures[i]] = String(Number(that.aggregateSet.results[0][finalMeasures[i]]) - Number(object.results[0][finalMeasures[i]]));
						});
						jQuery.each(finalDimensions,function(i){
								aggregateObject.results[0][finalDimensions[i]] = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OTHERS_DONUT",[count]);
						});
						aggregateObject.results[0].$isOthers = true;
						result = aggregateObject.results[0];
						
						if (result) {
							oDataClone.results.splice(-1,1);
						}
					}
				}
				if (result) {
					oDataClone.results.push(result);
				}
			}
			
			var oModel = new sap.ui.model.json.JSONModel();
			oModel.setData(oDataClone.results);
			content.setModel(oModel, "analyticalmodel");
		},
		
		updateBindingContext : function() {
			var binding = this.getBinding("data");
			var aggrDataBinding = this.getBinding("aggregateData");
			var that = this;
			if (this.chartBinding == binding) {
				return;
			} else {
				this.chartBinding = binding;
				if (binding) {
					var that = this;
					binding.attachEvent("dataReceived", function(oEvent) {
						that.dataSet = oEvent && oEvent.getParameter("data");
						that.oDataClone = jQuery.extend(true, {}, that.dataSet);
						if (that.getChartType() == "donut" ) {
							if ( that.getDependentDataReceived() === true || that.getDependentDataReceived() === "true" ) {
								
								that.mergeDatasets(binding,that.oDataClone,that.getContent());
								that.setDependentDataReceived(false);
							} else {
								that.setDependentDataReceived(true);
								//store data local
							}
						} else {
							var oModel = new sap.ui.model.json.JSONModel();
							if (that.dataSet) {
								oModel.setData(that.dataSet.results);
							}
							that.getContent().setModel(oModel, "analyticalmodel");
						}
						
					});
				}
				Control.prototype.updateBindingContext.apply(this, arguments);
			}
			if (this.chartAggrBinding == aggrDataBinding) {
				return;
			} else {
				this.chartAggrBinding = aggrDataBinding;
				if (aggrDataBinding) {
					var that = this;
					aggrDataBinding.attachEvent("dataReceived", function(oEvent) {
						that.aggregateSet = oEvent && oEvent.getParameter("data");
						if (that.getChartType() == "donut" ) {
							if ( that.getDependentDataReceived() === true || that.getDependentDataReceived() === "true" ) {
								that.oDataClone = jQuery.extend(true, {}, that.dataSet);
								that.mergeDatasets(binding,that.oDataClone,that.getContent());
								that.setDependentDataReceived(false);
							} else {
								that.setDependentDataReceived(true);
								//store data local
							}
						} else {
							var oModel = new sap.ui.model.json.JSONModel();
							oModel.setData(that.aggregateSet.results);
							that.getContent().setModel(oModel, "analyticalmodel");
						}
					});
				}
				Control.prototype.updateBindingContext.apply(this, arguments);
			}
		}

	});
}, true);

}; // end of sap/ovp/cards/charts/OVPVizDataHandler.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.Utils') ) {
/**
 * @fileOverview Miscellaneous utility functions for legacy cards.
 * See VizAnnotationManager.js for generic card methods.
 * This file can be safely deleted when legacy cards deprecate.
 */

(function () {
	"use strict";
	jQuery.sap.declare("sap.ovp.cards.charts.Utils");


	sap.ovp.cards.charts.Utils = sap.ovp.cards.charts.Utils || {};


	/* All constants feature here */
	sap.ovp.cards.charts.Utils.constants = {
			/* qualifiers for annotation terms */
			CHART_QUALIFIER_KEY: "chartAnnotationPath",
			SELVAR_QUALIFIER_KEY: "selectionAnnotationPath",
			PREVAR_QUALIFIER_KEY: "presentationAnnotationPath",
			/* DEBUG MESSAGES */
			ERROR_NO_CHART: "Analytic cards require valid \"chartAnnotationPath\" " +
					"configured in manifest.json",
			LABEL_KEY: "sap:label",
			TEXT_KEY: "sap:text",
			TYPE_KEY:"type"
	};

	/* retrieve qualifier from iContext */
	sap.ovp.cards.charts.Utils.getQualifier = function (iContext, annoTerm) {
		/* see sap.ovp.cards.charts.Utils.constants for legal values of annoTerm */
		if (!annoTerm) {
			return "";
		}
		var settingsModel = iContext.getSetting('ovpCardProperties');
		if (!settingsModel) {
			return "";
		}
		var oSettings = settingsModel.oData;
		if (!oSettings) {
			return "";
		}
		var fullQualifier = oSettings && oSettings[annoTerm] ? oSettings[annoTerm] : "";
		return fullQualifier === "" ? "" : fullQualifier.split("#")[1];
	};

	/************************ FORMATTERS ************************/

	sap.ovp.cards.charts.Utils.wrapInBraces = function(whateverNeedsToBeInBraces) {
		return "{" + whateverNeedsToBeInBraces + "}";
	};

	sap.ovp.cards.charts.Utils.getSapLabel = function(property) {
		var entityTypeObject = this.getModel('ovpCardProperties').getProperty("/entityType");
		var label = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject)[property];
		return label ? label : property;
	};

	sap.ovp.cards.charts.Utils.formDimensionPath = function(dimension) {
		var ret = "{" + dimension + "}";
		var entityTypeObject = this.getModel('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return ret;
		}
		var edmTypes = sap.ovp.cards.charts.Utils.getEdmTypeOfAll(entityTypeObject);
		if (!edmTypes || !edmTypes[dimension]) {
			return ret;
		}
		var type = edmTypes[dimension];
		if (type == "Edm.DateTime") {
			return "{path:'" + dimension + "', formatter: 'sap.ovp.cards.charts.VizAnnotationManager.returnDateFormat'}";
		}
		var columnTexts = sap.ovp.cards.charts.Utils.getAllColumnTexts(entityTypeObject);
		if (!columnTexts) {
			return ret;
		}
		ret = "{" + (columnTexts[dimension] || dimension) + "}";
		return ret;
	};


	/************************ METADATA PARSERS ************************/

	/* Returns the set of all properties in the metadata */
	sap.ovp.cards.charts.Utils.getAllColumnProperties = function(prop, entityTypeObject) {
		var finalObject = {};
		var properties = entityTypeObject.property;
		for (var i = 0, len = properties.length; i < len; i++) {
			if (properties[i].hasOwnProperty(prop) && prop == "com.sap.vocabularies.Common.v1.Label") {
				finalObject[properties[i].name] = properties[i][prop].String;
			} else if (properties[i].hasOwnProperty(prop)) {
				finalObject[properties[i].name] = properties[i][prop];
			} else {
				finalObject[properties[i].name] = properties[i].name;
			}
		}
		return finalObject;
	};

	/* Returns column name that contains the sap:label(s) for all properties in the metadata*/
	sap.ovp.cards.charts.Utils.getAllColumnLabels = function(entityTypeObject) {
		return sap.ovp.cards.charts.Utils.getAllColumnProperties("com.sap.vocabularies.Common.v1.Label", entityTypeObject);
	};


	/* Returns column name that contains the sap:text(s) for all properties in the metadata*/
	sap.ovp.cards.charts.Utils.getAllColumnTexts = function(entityTypeObject) {
		return sap.ovp.cards.charts.Utils.getAllColumnProperties("sap:text", entityTypeObject);
	};


	/* get EdmType of all properties from $metadata */
	sap.ovp.cards.charts.Utils.getEdmTypeOfAll = function(entityTypeObject) {
		return sap.ovp.cards.charts.Utils.getAllColumnProperties("type", entityTypeObject);
	};


	/************************ Line Chart functions ************************/

	sap.ovp.cards.charts.Utils.LineChart = sap.ovp.cards.charts.Utils.LineChart || {};
	sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList = {};

	sap.ovp.cards.charts.Utils.LineChart.getVizProperties = function(iContext, dimensions, measures) {
		var rawValueAxisTitles = sap.ovp.cards.charts.Utils.LineChart.getValueAxisFeed(iContext, measures).split(",");
		var rawCategoryAxisTitles = sap.ovp.cards.charts.Utils.LineChart.getCategoryAxisFeed(iContext, dimensions).split(",");
		var valueAxisTitles = [];
		jQuery.each(rawValueAxisTitles, function(i, m){
			valueAxisTitles.push(m);
		});
		var categoryAxisTitles = [];
		jQuery.each(rawCategoryAxisTitles, function(i, d){
			categoryAxisTitles.push(d);
		});
		var bDatapointNavigation = true;
		var dNav = iContext.getSetting("ovpCardProperties").getProperty("/navigation");
		if (dNav == "chartNav") {
			bDatapointNavigation = false;
		}
		var bDatapointNavigation = bDatapointNavigation ? false : true;
		/*
		 //Readable version for debugging
		 //eslint can't multiline strings
		 return "{\
				valueAxis:{\
					title:{\
						visible:true,\
						text: '" + valueAxisTitles.join(",") + "'\
					},\
					label:{\
						formatString:'axisFormatter'\
					}\
				},\
				categoryAxis:{\
					title:{\
						visible:true,\
						text: '" + categoryAxisTitles.join(",") + "'\
					},\
					label:{\
						formatString:'axisFormatter'\
					}\
				},\
				legend: {\
					isScrollable: false\
				},\
				title: {\
					visible: false\
				},\
				interaction:{\
					noninteractiveMode: false,\
					selectability: {\
						legendSelection: false,\
						axisLabelSelection: false,\
						mode: 'EXCLUSIVE',\
						plotLassoSelection: false,\
						plotStdSelection: true\
					}\
				}\
			}";
		*/
		return "{ valueAxis:{  layout: { maxWidth : 0.4 }, title:{   visible:false,   text: '" + valueAxisTitles.join(",") + "'  },  label:{   formatString:'axisFormatter'  } }, categoryAxis:{  title:{   visible:false,   text: '" + categoryAxisTitles.join(",") + "'  },  label:{   formatString:'axisFormatter'  } }, legend: {  isScrollable: false }, title: {  visible: false }, general: { groupData: false }, interaction:{  noninteractiveMode: " + bDatapointNavigation + ",  selectability: {   legendSelection: false,   axisLabelSelection: false,   mode: 'EXCLUSIVE',   plotLassoSelection: false,   plotStdSelection: true  }, zoom:{   enablement: 'disabled'} } }";
	};
	sap.ovp.cards.charts.Utils.LineChart.getVizProperties.requiresIContext = true;

	sap.ovp.cards.charts.Utils.LineChart.getValueAxisFeed = function(iContext, measures) {
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return "";
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var ret = [];
		jQuery.each(measures, function(i, m){
			ret.push(columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath);
		});
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.LineChart.getValueAxisFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.LineChart.getCategoryAxisFeed = function(iContext, dimensions) {
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return "";
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var ret = [];
		var qualifier;
		var feedValue;
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Category") {
				feedValue = columnLabels[d.Dimension.PropertyPath];
				ret.push(feedValue ? feedValue : d.Dimension.PropertyPath);
			}
		});
		/*
		 * If no dimensions are given as category, pick first dimension as category
		 * (see Software Design Description UI5 Chart Control 3.1.2.2.1.1)
		 */
		if (ret.length < 1) {
			feedValue = columnLabels[dimensions[0].Dimension.PropertyPath];
			ret.push(feedValue ? feedValue : dimensions[0].Dimension.PropertyPath);
		}
		qualifier = sap.ovp.cards.charts.Utils.getQualifier(iContext,
				sap.ovp.cards.charts.Utils.constants.CHART_QUALIFIER_KEY);
		sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList[qualifier] = ret;
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.LineChart.getCategoryAxisFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.LineChart.getColorFeed = function(iContext, dimensions) {
		var ret = [];
		var qualifier;
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return "";
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var feedValue;
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Series") {
				feedValue = columnLabels[d.Dimension.PropertyPath];
				ret.push(feedValue ? feedValue : d.Dimension.PropertyPath);
			}
		});
		/*
		 * If the dimensions is picked up for category feed as no category is given in the annotation,
		 * remove it from color feed.
		 * (see Software Design Description UI5 Chart Control 3.1.2.2.1.1)
		 */
		qualifier = sap.ovp.cards.charts.Utils.getQualifier(iContext,
				sap.ovp.cards.charts.Utils.constants.CHART_QUALIFIER_KEY);
		ret = jQuery.grep(ret, function(value) {
			if (!sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList[qualifier]) {
				return true;
			}
			return value != sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList[qualifier][0];
		});
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.LineChart.getColorFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.LineChart.testColorFeed = function(iContext, dimensions) {
		return sap.ovp.cards.charts.Utils.LineChart.getColorFeed(iContext, dimensions) !== "";
	};
	sap.ovp.cards.charts.Utils.LineChart.testColorFeed.requiresIContext = true;



	/************************ Bubble Chart Functions ************************/

	sap.ovp.cards.charts.Utils.BubbleChart = sap.ovp.cards.charts.Utils.BubbleChart || {};

	sap.ovp.cards.charts.Utils.BubbleChart.getVizProperties = function(iContext, dimensions, measures) {
		var rawValueAxisTitles = sap.ovp.cards.charts.Utils.BubbleChart.getValueAxisFeed(iContext, measures).split(",");
		var rawValueAxis2Titles = sap.ovp.cards.charts.Utils.BubbleChart.getValueAxis2Feed(iContext, measures).split(",");
		var valueAxisTitles = [];
		jQuery.each(rawValueAxisTitles, function(i, m){
			valueAxisTitles.push(m);
		});
		var valueAxis2Titles = [];
		jQuery.each(rawValueAxis2Titles, function(i, m){
			valueAxis2Titles.push(m);
		});
		var bDatapointNavigation = true;
		var dNav = iContext.getSetting("ovpCardProperties").getProperty("/navigation");
		if (dNav == "chartNav") {
			bDatapointNavigation = false;
		}
		var bDatapointNavigation = bDatapointNavigation ? false : true;
		/*
		 //Readable version for debugging
		 //eslint can't multiline strings
		return "{\
				valueAxis:{\
					title:{\
						visible:true,\
						text: '" + valueAxisTitles.join(",") + "'\
					},\
					label:{\
						formatString:'axisFormatter'\
					}\
				},\
				valueAxis2:{\
					title:{\
						visible:true,\
						text: '" + valueAxis2Titles.join(",") + "'\
					},\
					label:{\
						formatString:'axisFormatter'\
					}\
				},\
				categoryAxis:{\
					title:{\
						visible:true\
					},\
					label:{\
						formatString:'axisFormatter'\
					}\
				},\
				legend: {\
					isScrollable: false\
				},\
				title: {\
					visible: false\
				},\
				interaction:{\
					noninteractiveMode: bDatapointNavigation ? false : true,\
					selectability: {\
						legendSelection: false,\
						axisLabelSelection: false,\
						mode: 'EXCLUSIVE',\
						plotLassoSelection: false,\
						plotStdSelection: true\
					}\
				}\
			}";
		*/
		return "{ valueAxis:{  layout: { maxWidth : 0.4 }, title:{ visible:true, text: '" + valueAxisTitles.join(",") + "'  },  label:{ formatString:'axisFormatter'  } }, valueAxis2:{  title:{ visible:true, text: '" + valueAxis2Titles.join(",") + "'  },  label:{ formatString:'axisFormatter'  } }, categoryAxis:{  title:{ visible:true  },  label:{ formatString:'axisFormatter'  } }, legend: {  isScrollable: false }, title: {  visible: false }, interaction:{  noninteractiveMode: " + bDatapointNavigation + ",  selectability: { legendSelection: false, axisLabelSelection: false, mode: 'EXCLUSIVE', plotLassoSelection: false, plotStdSelection: true  }, zoom:{   enablement: 'disabled'} } }";
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getVizProperties.requiresIContext = true;

	sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList = function(iContext, measures) {
		/* (see Software Design Description UI5 Chart Control - Bubble Chart) */
		var ovpCardPropertiesModel;
		if (!iContext ||
				!iContext.getSetting ||
				!(ovpCardPropertiesModel = iContext.getSetting('ovpCardProperties'))) {
			return [""];
		}
		var entityTypeObject = ovpCardPropertiesModel.getProperty("/entityType");
		if (!entityTypeObject) {
			return [""];
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var ret = [null, null, null];
		jQuery.each(measures, function(i, m){
			if (m.Role.EnumMember.split("/")[1] === "Axis1") {
				if (ret[0] === null) {
					ret[0] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[1] === null) {
					ret[1] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[2] == null) {
					ret[2] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				}
			}
		});
		jQuery.each(measures, function(i, m){
			if (m.Role.EnumMember.split("/")[1] === "Axis2") {
				if (ret[0] === null) {
					ret[0] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[1] === null) {
					ret[1] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[2] == null) {
					ret[2] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				}
			}
		});
		jQuery.each(measures, function(i, m){
			if (m.Role.EnumMember.split("/")[1] === "Axis3") {
				if (ret[0] === null) {
					ret[0] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[1] === null) {
					ret[1] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				} else if (ret[2] == null) {
					ret[2] = columnLabels[m.Measure.PropertyPath] || m.Measure.PropertyPath;
				}
			}
		});
		return ret;
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.getValueAxisFeed = function(iContext, measures) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList(iContext, measures)[0];
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getValueAxisFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.getValueAxis2Feed = function(iContext, measures) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList(iContext, measures)[1];
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getValueAxis2Feed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.getBubbleWidthFeed = function(iContext, measures) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList(iContext, measures)[2];
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getBubbleWidthFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.getColorFeed = function(iContext, dimensions) {
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return "";
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var ret = [];
		var feedValue;
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Series") {
				feedValue = columnLabels[d.Dimension.PropertyPath];
				ret.push(feedValue ? feedValue : d.Dimension.PropertyPath);
			}
		});
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getColorFeed.requiresIContext = true;

	sap.ovp.cards.charts.Utils.BubbleChart.getShapeFeed = function(iContext, dimensions) {
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		if (!entityTypeObject) {
			return "";
		}
		var columnLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var ret = [];
		var feedValue;
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Category") {
				feedValue = columnLabels[d.Dimension.PropertyPath];
				ret.push(feedValue ? feedValue : d.Dimension.PropertyPath);
			}
		});
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.BubbleChart.getShapeFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.testColorFeed = function(iContext, dimensions) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getColorFeed(iContext, dimensions) !== "";
	};
	sap.ovp.cards.charts.Utils.BubbleChart.testColorFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.BubbleChart.testShapeFeed = function(iContext, dimensions) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getShapeFeed(iContext, dimensions) !== "";
	};
	sap.ovp.cards.charts.Utils.BubbleChart.testShapeFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.validateMeasuresDimensions = function(vizFrame, type) {
		var measuresArr = null;
		var dimensionsArr = null;
		if (!vizFrame.getDataset()) {
			jQuery.sap.log.error("OVP-AC: " + type + " Card Error: No Dataset defined for chart.");
			return false;
		}
		measuresArr = vizFrame.getDataset().getMeasures();
		dimensionsArr = vizFrame.getDataset().getDimensions();

		switch (type) {
		case "Bubble":
			if (measuresArr.length !== 3 || dimensionsArr.length < 1 ||
					!measuresArr[0].getName() || !measuresArr[1].getName() || !measuresArr[2].getName() ||
					!dimensionsArr[0].getName()) {
				jQuery.sap.log.error("OVP-AC: Bubble Card Error: Enter exactly 3 measures and at least 1 dimension.");
				return false;
			}
			break;

		case "Donut":
			if (measuresArr.length !== 1 || dimensionsArr.length !== 1 ||
					!measuresArr[0].getName() || !dimensionsArr[0].getName()) {
				jQuery.sap.log.error("OVP-AC: Donut Card Error: Enter exactly 1 measure and 1 dimension.");
				return false;
			}
			break;

		case "Line":
			if (measuresArr.length < 1 || dimensionsArr.length < 1 ||
					!measuresArr[0].getName() || !dimensionsArr[0].getName()) {
				jQuery.sap.log.error("OVP-AC: Line Card Error: Configure at least 1 dimensions and 1 measure.");
				return false;
			}
			break;
		}
		return true;
	};
	sap.ovp.cards.charts.Utils.getSortAnnotationCollection = function(dataModel,presentationVariant,entitySet){
		if (presentationVariant && presentationVariant.SortOrder && presentationVariant.SortOrder.Path && presentationVariant.SortOrder.Path.indexOf('@') >= 0){
			 var sSortOrderPath = presentationVariant.SortOrder.Path.split('@')[1]; 
		        var oAnnotationData = dataModel.getServiceAnnotations()[entitySet.entityType];
		        return oAnnotationData[sSortOrderPath];
		}
       return presentationVariant.SortOrder;
};

}());

}; // end of sap/ovp/cards/charts/Utils.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.VizAnnotationManager') ) {
/**
 * @fileOverview Library to Manage rendering of Viz Charts.
 * Reads configuration from config.js.
 */

(function () {
	"use strict";
	jQuery.sap.declare("sap.ovp.cards.charts.VizAnnotationManager");
	
	sap.ovp.cards.charts.VizAnnotationManager = sap.ovp.cards.charts.VizAnnotationManager || {};


	/* All constants feature here */
	sap.ovp.cards.charts.VizAnnotationManager.constants = {
		LABEL_KEY: "sap:label",
        LABEL_KEY_V4:"com.sap.vocabularies.Common.v1.Label", //as part of supporting V4 annotation
		TEXT_KEY: "sap:text",
        TEXT_KEY_V4:"com.sap.vocabularies.Common.v1.Text", //as part of supporting V4 annotation
		TYPE_KEY: "type",
		DISPLAY_FORMAT_KEY: "sap:display-format",
		SEMANTICS_KEY: "sap:semantics",
		UNIT_KEY: "sap:unit",
        UNIT_KEY_V4_ISOCurrency:"Org.OData.Measures.V1.ISOCurrency", //as part of supporting V4 annotation
        UNIT_KEY_V4_Unit:"Org.OData.Measures.V1.Unit", //as part of supporting V4 annotation
		CURRENCY_CODE: "currency-code",
		NAME_KEY: "name",
		NAME_CAP_KEY: "Name",
		EDM_TYPE: "type",
		EDM_INT32: "Edm.Int32",
		SCATTER_CHARTTYPE:"com.sap.vocabularies.UI.v1.ChartType/Scatter",
		BUBBLE_CHARTTYPE:"com.sap.vocabularies.UI.v1.ChartType/Bubble",
		LINE_CHARTTYPE:"com.sap.vocabularies.UI.v1.ChartType/Line"
	};
	
	/* All constants for error messages feature here */
	sap.ovp.cards.charts.VizAnnotationManager.errorMessages = {
		CARD_WARNING: "OVP-AC: Analytic card: Warning: ",	
		CARD_ERROR: "OVP-AC: Analytic card Error: ",
		DATA_ANNO_ERROR: "OVP-AC: Analytic card Error:",
		CARD_ANNO_ERROR: "OVP-AC: Analytic card: Error ",
		CHART_ANNO_ERROR: "OVP-AC: Analytic card: Error ",
		INVALID_CHART_ANNO: "OVP-AC: Analytic Cards: Invalid Chart Annotation.",
		ANALYTICAL_CONFIG_ERROR: "Analytic card configuration error",
		CACHING_ERROR: "no model defined while caching OdataMetaData",
		INVALID_MAXITEMS: "maxItems is Invalid. ",
		NO_DATASET: "OVP-AC: Analytic Cards: Could not obtain dataset.",
		SORTORDER_WARNING:"SortOrder is present in PresentationVariant, but it is empty or not well formed.",
		BOOLEAN_ERROR: "Boolean value is not present in PresentationVariant.",
		IS_MANDATORY: "is mandatory.",
		IS_MISSING: "is missing.",
		NOT_WELL_FORMED: "is not found or not well formed)",
		MISSING_CHARTTYPE: "Missing ChartType in ",
		CHART_ANNO: "Chart Annotation.",
		DATA_ANNO: "Data Annotation",
		CARD_ANNO: "card annotation.",
		CARD_CONFIG: "card configuration.",
		CARD_CONFIG_ERROR: "Could not obtain configuration for ",
		CARD_CONTAINER_ERROR: "Could not obtain card container. ",
		DATA_UNAVAIALABLE: "No data available.",
		CONFIG_LOAD_ERROR: "Failed to load config.json. Reason: ",
		INVALID_CHARTTYPE: "Invalid ChartType given for ",
		INVALID_CONFIG: "No valid configuration given for ",
		CONFIG_JSON: "in config.json",
		ENTER_INTEGER: "Please enter an Integer.",
		NO_CARD_MODEL: "Could not obtain Cards model.",
		ANNO_REF: "com.sap.vocabularies.UI.v1 annotation.",
		INVALID_REDUNDANT: "Invalid/redundant role configured for ",
		CHART_IS: "chart is/are ",
		CARD_CONFIG_JSON:"card from config.json",
		ALLOWED_ROLES: "Allowed role(s) for ",
		DIMENSIONS_MANDATORY: "DimensionAttributes are mandatory.",
		MEASURES_MANDATORY: "MeasureAttributes are mandatory.",
		CARD_LEAST: "card: Enter at least ",
		CARD_MOST: "card: Enter at most ",
		FEEDS: "feed(s).",
		MIN_FEEDS: "Minimum number of feeds required for ",
		FEEDS_OBTAINED: "card is not configured. Obtained ",
		FEEDS_REQUIRED: "feed(s), Required: ",
		INVALID_SEMANTIC_MEASURES: "More than one measure is being semantically coloured",
		INVALID_IMPROVEMENT_DIR: "No Improvement Direction Found",
		INVALID_CRITICALITY: "Invalid criticality values",
		INVALID_DIMMEAS: "Invalid number of Measures or Dimensions",
		INVALID_FORECAST: "Invalid/Redundant Datapoint or Forecast measure",
		ERROR_MISSING_AXISSCALES:"Minimum and Maximum values are mandatory for AxisScale MinMax to work"
	};


	/*
	 * Reads filters from annotation and prepares data binding path
	 */
	sap.ovp.cards.charts.VizAnnotationManager.formatItems = function(iContext, oEntitySet, oSelectionVariant, oPresentationVariant, oDimensions, oMeasures, chartType) {
		var dataModel = iContext.getSetting("dataModel");
		var chartEnumArr;
		if (chartType && chartType.EnumMember) {
			chartEnumArr = chartType.EnumMember.split("/");
			if (chartEnumArr && ( chartEnumArr[1] === 'Donut' ) ) {
				dataModel.setDefaultCountMode(sap.ui.model.odata.CountMode.Inline);
			}
			if (chartEnumArr && ( chartEnumArr[1] != 'Donut' ) && (oDimensions === undefined)) {
				return null;
			}
		}
		var ret = "{";
		var dimensionsList = [];
		var measuresList = [];
		var sorterList = [];
		var bFilter = oSelectionVariant && oSelectionVariant.SelectOptions;
		var bParams = oSelectionVariant && oSelectionVariant.Parameters;
		var bSorter = oPresentationVariant && oPresentationVariant.SortOrder;
		var maxItemTerm = oPresentationVariant && oPresentationVariant.MaxItems, maxItems = null;
		var aConfigFilters;
		var tmp;
		var entitySet = null;
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var textKey = self.constants.TEXT_KEY;
        var textKeyV4 = self.constants.TEXT_KEY_V4; //as part of supporting V4 annotation
		var unitKey = self.constants.UNIT_KEY;
        var unitKey_v4_isoCurrency = self.constants.UNIT_KEY_V4_ISOCurrency; //as part of supporting V4 annotation
        var unitKey_v4_unit = self.constants.UNIT_KEY_V4_Unit; //as part of supporting V4 annotation

		if (maxItemTerm) {
			maxItems = maxItemTerm.Int32 ? maxItemTerm.Int32 : maxItemTerm.Int;
		}

		if (maxItems) {
			if (maxItems == "0") {
				jQuery.sap.log.error("OVP-AC: Analytic card Error: maxItems is configured as " +
					maxItems);
				ret += "}";
				return ret;
			}
			if (!/^\d+$/.test(maxItems)) {
				jQuery.sap.log.error("OVP-AC: Analytic card Error: maxItems is Invalid. " +
					"Please enter an Integer.");
				ret += "}";
				return ret;
			}
		}

		if (bParams) {
			var path = sap.ovp.cards.AnnotationHelper.resolveParameterizedEntitySet(dataModel, oEntitySet, oSelectionVariant);
			ret += "path: '" + path + "'";
		} else {
			ret += "path: '/" + oEntitySet.name + "'";
		}

		var filters = [];
		if (!iContext || !iContext.getSetting('ovpCardProperties')) {
			jQuery.sap.log.error(self.errorMessages.ANALYTICAL_CONFIG_ERROR);
			ret += "}";
			return ret;
		}
		entitySet = iContext.getSetting('ovpCardProperties').getProperty("/entitySet");
		if (!dataModel || !entitySet) {
			return ret;
		}
		var oMetadata = self.getMetadata(dataModel, entitySet);
		aConfigFilters = iContext.getSetting('ovpCardProperties').getProperty("/filters");

        var cardLayout = iContext.getSetting('ovpCardProperties').getProperty("/cardLayout");
        var colSpan = 1, colSpanOffset;
        var allConfig = sap.ovp.cards.charts.VizAnnotationManager.getConfig();
        var config;
        var reference;

        if (oDimensions && cardLayout &&  cardLayout.colSpan && cardLayout.colSpan > 1) {
            colSpanOffset = cardLayout.colSpan - colSpan;

            for (var key in allConfig) {
                if ((reference = allConfig[key].reference) &&
                    allConfig[reference]) {
                    var virtualEntry = jQuery.extend(true, {}, allConfig[reference]);
                    allConfig[key] = virtualEntry;
                }
                if (allConfig[key].default.type == chartEnumArr[1].toLowerCase() ||
                    (allConfig[key].time && allConfig[key].time.type == chartEnumArr[1].toLowerCase())) {
                    config = allConfig[key];
                    break;
                }
            }

            var bSupportsTimeSemantics = sap.ovp.cards.charts.VizAnnotationManager.hasTimeSemantics(oDimensions, config, dataModel, entitySet);
            if (bSupportsTimeSemantics) {
                config = config.time;
            } else {
                config = config.default;
            }

            var dataStep = iContext.getSetting('ovpCardProperties').getProperty("/dataStep");
            if (!dataStep) {
                if (config.resize && config.resize.hasOwnProperty("dataStep") && !isNaN(config.resize.dataStep)) {
                    dataStep = config.resize.dataStep;
                }
            }

            dataStep = parseInt(dataStep, 10);

            if (colSpanOffset > 0 && dataStep && !isNaN(dataStep)) {
                maxItems = parseInt(maxItems, 10) + dataStep * colSpanOffset;
            }

        }
		if (bFilter) {
			jQuery.each(oSelectionVariant.SelectOptions, function() {
				var prop = this.PropertyName.PropertyPath;
				jQuery.each(this.Ranges, function() {
					if (this.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I") {
						var filtervalue = sap.ovp.cards.charts.VizAnnotationManager.getPrimitiveValue(this.Low);
						var filtervaueHigh = this.High && this.High.String;
						var formatByType = self.formatByType;
						filtervalue = formatByType(oMetadata, prop, filtervalue);
						var filter = {
								path : prop,
								operator : this.Option.EnumMember.split("/")[1],
								value1 : filtervalue
						};
						if (filtervaueHigh) {
							filter.value2 = formatByType(oMetadata, prop, filtervaueHigh);
						}
						filters.push(filter);
					}
				});
			});
		}

		/*
		 * code for ObjectStream
		 */
		if (aConfigFilters && aConfigFilters.length > 0){
			filters = filters.concat(aConfigFilters);
		}

		if (filters.length > 0) {
			ret += ", filters: " + JSON.stringify(filters);
		}

		if (bSorter) {
			var oSortAnnotationCollection = oPresentationVariant.SortOrder;
			if (!oSortAnnotationCollection.length){
				oSortAnnotationCollection = sap.ovp.cards.charts.Utils.getSortAnnotationCollection(dataModel,oPresentationVariant,oEntitySet);
			}
			if (oSortAnnotationCollection.length < 1) {
				jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.SORTORDER_WARNING);
			} else {
				var sSorterValue = "";
				var oSortOrder;
				var sSortOrder;
				var sSortBy;
				for (var i = 0; i < oSortAnnotationCollection.length; i++) {
					oSortOrder = oSortAnnotationCollection[i];
					sSortBy = oSortOrder.Property.PropertyPath;
					sorterList.push(sSortBy);
					if (typeof oSortOrder.Descending == "undefined") {
						sSortOrder = 'true';
					} else {
						var checkFlag = oSortOrder.Descending.Bool || oSortOrder.Descending.Boolean;
						if (!checkFlag) {
							jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.BOOLEAN_ERROR);
							sSortOrder = 'true';
						} else {
							sSortOrder = checkFlag.toLowerCase() == 'true' ? 'true' : 'false';
						}
					}
					sSorterValue = sSorterValue + "{path: '" + sSortBy + "',descending: " + sSortOrder + "},";
				}
				/* trim the last ',' */
				ret += ", sorter: [" + sSorterValue.substring(0, sSorterValue.length - 1) + "]";
			}
		}

		var entityTypeObject = iContext.getSetting("ovpCardProperties").getProperty("/entityType");

		jQuery.each(oMeasures, function(i, m){
			tmp = m.Measure.PropertyPath;
			if (m.DataPoint && m.DataPoint.AnnotationPath) {
				var datapointAnnotationPath = entityTypeObject[m.DataPoint.AnnotationPath.substring(1)];
				if (datapointAnnotationPath.ForecastValue && datapointAnnotationPath.ForecastValue.PropertyPath) {
					measuresList.push(datapointAnnotationPath.ForecastValue.PropertyPath);
				}
			}
			measuresList.push(tmp);
            if (oMetadata && oMetadata[tmp]) {
                if (oMetadata[tmp][textKeyV4]) { //as part of supporting V4 annotation
                    if (oMetadata[tmp][textKeyV4].String && tmp != oMetadata[tmp][textKeyV4].String) {
                        measuresList.push(oMetadata[tmp][textKeyV4].String ? oMetadata[tmp][textKeyV4].String : tmp);
                    } else if (oMetadata[tmp][textKeyV4].Path && tmp != oMetadata[tmp][textKeyV4].Path) {
                        measuresList.push(oMetadata[tmp][textKeyV4].Path ? oMetadata[tmp][textKeyV4].Path : tmp);
                    }
                } else if (oMetadata[tmp][textKey] && tmp != oMetadata[tmp][textKey]) {
                    measuresList.push(oMetadata[tmp][textKey] ? oMetadata[tmp][textKey] : tmp);
                }
            }

            if (oMetadata && oMetadata[tmp]) {
                var unitCode;
                if (oMetadata[tmp][unitKey_v4_isoCurrency]) { //as part of supporting V4 annotation
                    unitCode = oMetadata[tmp][unitKey_v4_isoCurrency].Path ? oMetadata[tmp][unitKey_v4_isoCurrency].Path : oMetadata[tmp][unitKey_v4_isoCurrency].String;
                } else if (oMetadata[tmp][unitKey_v4_unit]) {
                    unitCode = oMetadata[tmp][unitKey_v4_unit].Path ? oMetadata[tmp][unitKey_v4_unit].Path : oMetadata[tmp][unitKey_v4_unit].String;
                } else if (oMetadata[tmp][unitKey]) {
                    unitCode = oMetadata[tmp][unitKey];
                }
                if (unitCode) {
                    if (jQuery.inArray(unitCode, measuresList) === -1) {
                        measuresList.push(unitCode);
                    }
                }
            }
		});
		jQuery.each(oDimensions, function(i, d){
			tmp = d.Dimension.PropertyPath;
			dimensionsList.push(tmp);
            if (oMetadata && oMetadata[tmp]) {
                if (oMetadata[tmp][textKeyV4]) { //as part of supporting V4 annotation
                    if (oMetadata[tmp][textKeyV4].String && tmp != oMetadata[tmp][textKeyV4].String) {
                        dimensionsList.push(oMetadata[tmp][textKeyV4].String ? oMetadata[tmp][textKeyV4].String : tmp);
                    } else if (oMetadata[tmp][textKeyV4].Path && tmp != oMetadata[tmp][textKeyV4].Path) {
                        dimensionsList.push(oMetadata[tmp][textKeyV4].Path ? oMetadata[tmp][textKeyV4].Path : tmp);
                    }
                } else if (oMetadata[tmp][textKey] && tmp != oMetadata[tmp][textKey]) {
                    dimensionsList.push(oMetadata[tmp][textKey] ? oMetadata[tmp][textKey] : tmp);
                }
            }
		});
		ret += ", parameters: {select:'" + [].concat(dimensionsList, measuresList).join(",");
		if (sorterList.length > 0) {
			ret += "," + sorterList.join(",");
		}
		/* close `parameters` */
		ret += "'}";

		if (chartEnumArr && ( chartEnumArr[1] === 'Donut' ) && (oDimensions === undefined)) {
			ret += ", length: 1";
		} else if (chartEnumArr && ( chartEnumArr[1] === 'Donut' ) && (oDimensions) && maxItems) {
			ret += ", length: " + (parseInt(maxItems, 10) + 1);
		} else if (maxItems) {
			ret += ", length: " + maxItems;
		}
		ret += "}";
		return ret;
	};
	sap.ovp.cards.charts.VizAnnotationManager.formatItems.requiresIContext = true;
	
	sap.ovp.cards.charts.VizAnnotationManager.checkForecastMeasure = function(aMeasure, entityTypeObject) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var boolflag = false;
		var realMeasure;
			if (aMeasure.DataPoint && aMeasure.DataPoint.AnnotationPath) {
				var oDatapoint = entityTypeObject[aMeasure.DataPoint.AnnotationPath.substring(1)];
				if (oDatapoint && oDatapoint.ForecastValue && oDatapoint.ForecastValue.PropertyPath ) {
					boolflag = true;
					realMeasure = aMeasure;
				}
			}

		if (boolflag == true) {
			return realMeasure;
		} else {
			jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.INVALID_FORECAST);
			return undefined;
		}
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.getSapLabel = function(aMeasure, oMetadata) {
		var value;
		jQuery.each(oMetadata, function(i,v) {
            if (v.name == aMeasure) {
                if (v["com.sap.vocabularies.Common.v1.Label"]) { //as part of supporting V4 annotation
                    value = v["com.sap.vocabularies.Common.v1.Label"].String ? v["com.sap.vocabularies.Common.v1.Label"].String : v["com.sap.vocabularies.Common.v1.Label"].Path;
                } else if (v["sap:label"]) {
                    value = v["sap:label"];
                }
                return false;
            }
		});
		return value;
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.getMeasureDimCheck = function(feeds, chartType) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var boolFlag = true;
		if (chartType == "line" || chartType == "column") {
			jQuery.each(feeds, function(i,v) {
				if ((v.getUid() == 'valueAxis') || (v.getUid() == 'categoryAxis')) {
				if (v.getValues().length != 1) {
					boolFlag = false;
					jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.INVALID_DIMMEAS);
					return false;
				}
			}
			});
		} else if (chartType == "vertical_bullet") {
			jQuery.each(feeds, function(i,v) {
				if ((v.getUid() == 'actualValues') || (v.getUid() == 'categoryAxis')) {
				if (v.getValues().length != 1) {
					boolFlag = false;
					jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.INVALID_DIMMEAS);
					return false;
				}
			}
			});
		}

		if (boolFlag == true) {
			return true;
		}
	};

	sap.ovp.cards.charts.VizAnnotationManager.formatByType = function(oMetadata, sProp, sVal) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var typeKey = self.constants.TYPE_KEY;
		if (!oMetadata || !oMetadata[sProp] || !oMetadata[sProp][typeKey]) {
			return sVal;
		}
		var aNumberTypes = [
			"Edm.Int",
			"Edmt.Int16",
			"Edm.Int32",
			"Edm.Int64",
			"Edm.Decimal"
		];
		var currentType = oMetadata[sProp][typeKey];
		if (jQuery.inArray(currentType, aNumberTypes) !== -1){
			return Number(sVal);
		}
		return sVal;
	};


	sap.ovp.cards.charts.VizAnnotationManager.returnDateFormat = function(date) {
		if (date) {
			/*jQuery.sap.require("sap.ui.core.format.DateFormat");
			var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({pattern: "dd-MMM"});
			return oDateFormat.format(new Date(date));*/
			return date;
		}
		return "";
	};


	sap.ovp.cards.charts.VizAnnotationManager.formatChartAxes = function() {
		jQuery.sap.require("sap.ui.core.format.NumberFormat");
		var customFormatter = {
				locale: function(){},
				format: function(value, pattern) {
					var patternArr = "";
					if (pattern) {
						patternArr = pattern.split('/');
					}
					if (patternArr.length > 0) {
						var minFractionDigits, shortRef;
						if (patternArr.length == 3) {
							minFractionDigits = Number(patternArr[1]);
							shortRef = Number(patternArr[2]);
							if (isNaN(minFractionDigits)) {
								minFractionDigits = -1;
							}
							if (isNaN(shortRef)) {
								shortRef = 0;
							}
						} else {
							minFractionDigits = 2;
							shortRef = 0;
						}
						if (patternArr[0] == "axisFormatter" || (patternArr[0] == "ShortFloat")) {
							// if (pattern == "axisFormatter") {
							var numberFormat;
							numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance(
								{style: 'short',
//										shortRefNumber: shortRef, //FIORITECHP1-4935Reversal of Scale factor in Chart and Chart title.
//										showScale: false,
										minFractionDigits: minFractionDigits,
										maxFractionDigits: minFractionDigits}
							);
							if (patternArr[0] == "ShortFloat") {
								numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance(
									{style: 'short',
											minFractionDigits: minFractionDigits,
											maxFractionDigits: minFractionDigits}
								);
							}
							if (minFractionDigits === -1) {
								numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance(
										{style: 'short'}
									);
							}
							return numberFormat.format(Number(value)); 
						} else if (patternArr[0] == "CURR"){
							var currencyFormat = sap.ui.core.format.NumberFormat.getCurrencyInstance(
									{style: 'short',
										currencyCode: false,
//										shortRefNumber: shortRef, //FIORITECHP1-4935Reversal of Scale factor in Chart and Chart title.
//										showScale: false,
										minFractionDigits: minFractionDigits,
										maxFractionDigits: minFractionDigits}
								);
							if (minFractionDigits === -1) {
								currencyFormat = sap.ui.core.format.NumberFormat.getCurrencyInstance(
										{style: 'short',
											currencyCode: false}
									);
							}
							return currencyFormat.format(Number(value));
						} else if ( patternArr[0].search("%") !== -1) {
							//FIORITECHP1-5665 - Donut and Pie charts should be able to show numbers
							var percentFormat = sap.ui.core.format.NumberFormat.getPercentInstance(
									{style: 'short', 
									minFractionDigits: minFractionDigits,
									maxFractionDigits: minFractionDigits
								});
							if (minFractionDigits === -1) {
								percentFormat = sap.ui.core.format.NumberFormat.getPercentInstance(
										{style: 'short', 
											minFractionDigits: 1,
											maxFractionDigits: 1
										});
							}
							value = percentFormat.format(Number(value));
							return value;
						}
					}
					if (value.constructor == Date) {
						jQuery.sap.require("sap.ui.core.format.DateFormat");
						//var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({pattern: "dd-MMM"});
						//Commented for FIORITECHP1-3963[DEV] OVP-AC – Remove the formatting of the Time Axis
						var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({pattern: pattern});
						if (pattern == "tooltipFormatter") {
							oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({style: "medium"});
						}
						value = oDateFormat.format(new Date(value));
					}
					return value;
				}
		};
		jQuery.sap.require("sap.viz.ui5.api.env.Format");
		sap.viz.ui5.api.env.Format.numericFormatter(customFormatter);
	};

	sap.ovp.cards.charts.VizAnnotationManager.hideDateTimeAxis = function(vizFrame, feedName) {
		var dataModel = vizFrame.getModel();
		var type = vizFrame.getVizType();
		if (type != "line" && type != "bubble") {
			return;
		}
		if (!feedName) {
			feedName = type == "line" ? "categoryAxis" : "valueAxis";
		}
		var entitySet = vizFrame.getModel('ovpCardProperties').getProperty("/entitySet");
		if (!dataModel || !entitySet) {
			return;
		}
		var oMetadata = this.getMetadata(dataModel, entitySet);
		var feeds = vizFrame.getFeeds();
		for (var i = 0; i < feeds.length; i++) {
			if (feeds[i].getUid() == feedName) {
				var feedValues = feeds[i].getValues();
				if (!feedValues) {
					return;
				}
				for (var j = 0; j < feedValues.length; j++) {
					if (oMetadata[feedValues[j][this.constants.TYPE_KEY]] != "Edm.DateTime") {
						return;
					}
				}
				vizFrame.setVizProperties({categoryAxis:{
					title:{
						visible: false
					}
				}});
				return;
			}
		}
	};


	/*
	 * Check if annotations exist vis-a-vis manifest
	 * @param {String} term - Annotation with Qualifier
	 * @param {Object} annotation - Annotation Data
	 * @param {String} type - Type of Annotation
	 * @param {Boolean} [bMandatory=false] - Whether the term is mandatory
	 * @param {String} logViewId - Id of the view for log purposes
	 * @param {String} contentFragment - To check whether we're dealing with
	 * generic analytic card or legacy type.
	 * @returns {Boolean}
	 */
	sap.ovp.cards.charts.VizAnnotationManager.checkExists = function(term, annotation, type, bMandatory, logViewId, contentFragment) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		bMandatory = typeof bMandatory === "undefined" ? false : bMandatory;
		var ret = false;
		var annoTerm;
		if (!term && bMandatory) {
			jQuery.sap.log.error(logViewId + self.errorMessages.CARD_ERROR + type + self.errorMessages.IS_MANDATORY);
			return ret;
		}
		if (!term) {
			/* Optional parameters can be blank */
			jQuery.sap.log.warning(logViewId + self.errorMessagesCARD_WARNING + type + self.errorMessages.IS_MISSING);
			ret = true;
			return ret;
		}
		annoTerm = annotation[term];
		if (!annoTerm || typeof annoTerm !== "object") {
			var logger = bMandatory ? jQuery.sap.log.error : jQuery.sap.log.warning;
			logger(logViewId + self.errorMessages.CARD_ERROR + "in " + type +
					". (" + term + " " + self.errorMessages.NOT_WELL_FORMED);
			return ret;
		}
		/*
		 * For new style generic analytical card, make a check chart annotation
		 * has chart type.
		 */
		if (contentFragment &&
			contentFragment == "sap.ovp.cards.charts.analytical.analyticalChart" &&
			type == "Chart Annotation" &&
			(!annoTerm.ChartType || !annoTerm.ChartType.EnumMember)) {
			jQuery.sap.log.error(logViewId + self.errorMessages.CARD_ERROR + self.errorMessages.MISSING_CHARTTYPE +
					self.errorMessages.CHART_ANNO);
			return ret;
		}
		ret = true;
		return ret;
	};

	/*
	 * Check and log errors/warnings if any.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.validateCardConfiguration = function(oController) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var ret = false;
		if (!oController) {
			return ret;
		}
		var selVar;
		var chartAnno;
		var contentFragment;
		var preVar;
		var idAnno;
		var dPAnno;
		var entityTypeData;
		var logViewId = "";
		var oCardsModel;
		var oView = oController.getView();
		if (oView) {
			logViewId = "[" + oView.getId() + "] ";
		}

		if (!(oCardsModel = oController.getCardPropertiesModel())) {
			jQuery.sap.log.error(logViewId + self.errorMessages.CARD_ERROR + "in " + self.errorMessages.CARD_CONFIG +
					self.errorMessages.NO_CARD_MODEL);
			return ret;
		}

		entityTypeData = oCardsModel.getProperty("/entityType");
		if (!entityTypeData || jQuery.isEmptyObject(entityTypeData)) {
			jQuery.sap.log.error(logViewId + self.errorMessages.CARD_ERROR + "in " + self.errorMessages.CARD_ANNO);
			return ret;
		}

		selVar = oCardsModel.getProperty("/selectionAnnotationPath");
		chartAnno = oCardsModel.getProperty("/chartAnnotationPath");
		preVar = oCardsModel.getProperty("/presentationAnnotationPath");
		idAnno = oCardsModel.getProperty("/identificationAnnotationPath");
		dPAnno = oCardsModel.getProperty("/dataPointAnnotationPath");
		contentFragment = oCardsModel.getProperty("/contentFragment");

		ret = this.checkExists(selVar, entityTypeData, "Selection Variant", false, logViewId);
		ret = this.checkExists(chartAnno, entityTypeData, "Chart Annotation", true, logViewId, contentFragment) && ret;
		ret = this.checkExists(preVar, entityTypeData, "Presentation Variant", false, logViewId) && ret;
		ret = this.checkExists(idAnno, entityTypeData, "Identification Annotation", true, logViewId) && ret;
		ret = this.checkExists(dPAnno, entityTypeData, "Data Point", false, logViewId) && ret;
		return ret;
	};


	/*
	 * Check if backend supplies no data.
	 * If so, show the no-data fragment.
	 * Commented out due to an issue with filters.
	 * Shows No data available even when correct filters are applied the second time.
	 * So, removing it temporarily.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.checkNoData = function(oEvent, cardContainer, vizFrame) {
	/*	var self = sap.ovp.cards.charts.VizAnnotationManager;
		var data, noDataDiv;
		if (!cardContainer) {
			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.CARD_CONTAINER_ERROR +
					"(" + vizFrame.getId() + ")");
			return;
		}
		data = oEvent.getParameter("data");
		if (!data || jQuery.isEmptyObject(data) ||
			!data.results || !data.results.length) {

			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.DATA_UNAVAIALABLE  +
					"(" + vizFrame.getId() + ")");
			noDataDiv = sap.ui.xmlfragment("sap.ovp.cards.charts.generic.noData");
			cardContainer.removeAllItems();
			cardContainer.addItem(noDataDiv);
		}*/
	};


	/*
	 * @param {Object} [oChartType] - Chart Annotation Object
	 * @returns {Object} - Get config object of a particular chart type from
	 * configuration defined in config.json.
	 * If the param is absent, return config of all charts.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.getConfig = function(oChartType) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var ret = {};
		var chartAnnoName, chartType, analyticDIR, reference, fullConf = null;
		var bChartType = !!oChartType;
		if (!jQuery.sap.getObject("sap.ovp.cards.charts.config")) {
			analyticDIR = jQuery.sap.getModulePath("sap.ovp.cards.charts");
			sap.ovp.cards = sap.ovp.cards  || {};
			sap.ovp.cards.charts = sap.ovp.cards.charts || {};
			try {
				sap.ovp.cards.charts.config = jQuery.sap.loadResource({
					url: analyticDIR + "/config.json",
					dataType: "json",
					async: false
				});
			} catch (e) {
				jQuery.sap.log.error(self.errorMessages.CONFIG_LOAD_ERROR + e);
			}
			sap.ovp.cards.charts.config = sap.ovp.cards.charts.config || {};
		}
		fullConf = sap.ovp.cards.charts.config;

		if (!bChartType) {
			return fullConf;
		}

		if (!oChartType.EnumMember ||
			!(chartAnnoName = oChartType.EnumMember.split("/")) ||
			chartAnnoName.length < 2) {
			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.INVALID_CHARTTYPE +
					self.errorMessages.ANNO_REF);
			return ret;
		}
		chartType = chartAnnoName[1];
		if (!fullConf[chartType]) {
			jQuery.sap.log.error(self.errorMessages.INVALID_CONFIG + chartType + " " +
					self.errorMessages.CONFIG_JSON);
			return ret;
		}
		if ((reference = fullConf[chartType].reference) &&
			fullConf[reference]) {
			var virtualEntry = jQuery.extend(true, {}, fullConf[reference]);
			fullConf[chartType] = virtualEntry;
		}
		ret = fullConf[chartType];
		return ret;
	};


	/*
	 * If there is exactly one dimension with time semantics (according to model metadata),
	 * then instead time type shall be used.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.hasTimeSemantics = function(aDimensions, config, dataModel, entitySet) {
		var ret = false;
		var oMetadata;
		var dimensionName;
		var dimensionType;
		var displayFormat;
		var sapSemantics;
        var sapSemanticsV4; //as part of supporting V4 annotation
		if (!config.time || jQuery.isEmptyObject(config.time)) {
			return ret;
		}
		if (!aDimensions) {
			return ret;
		}
		if (aDimensions.length != 1) {
			return ret;
		}
		if (!aDimensions[0].Dimension ||
			!(dimensionName = aDimensions[0].Dimension.PropertyPath)) {
			return ret;
		}
		oMetadata = this.getMetadata(dataModel, entitySet);
		if (oMetadata && oMetadata[dimensionName]) {
			dimensionType = oMetadata[dimensionName][this.constants.TYPE_KEY];
			displayFormat = oMetadata[dimensionName][this.constants.DISPLAY_FORMAT_KEY];
			sapSemantics = oMetadata[dimensionName][this.constants.SEMANTICS_KEY];
            sapSemanticsV4 = oMetadata[dimensionName]["com.sap.vocabularies.Common.v1.IsCalendarYear"]; //as part of supporting V4 annotation
		}
		if (dimensionType &&
			displayFormat &&
			dimensionType.lastIndexOf("Edm.Date", 0) === 0 &&
			displayFormat.toLowerCase() == "date") {
			ret = true;
		} //as part of supporting V4 annotation
		if (dimensionType == "Edm.String" && (sapSemanticsV4 || sapSemantics && sapSemantics.lastIndexOf("year", 0) === 0)) {
			ret = true;
		}
		return ret;
	};


	/*
	 * Formatter for VizFrame type.
	 * @param {Object} oChartType - Chart Annotation Object
	 * @returns {String} Valid Enum for Vizframe type
	 */
	sap.ovp.cards.charts.VizAnnotationManager.getChartType = function(iContext, oChartType, aDimensions) {
		var ret = "";
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var config = self.getConfig(oChartType);
		var dataModel, entitySet;
		if (!config) {
			return ret;
		}
		ret = config.default.type;
		dataModel = iContext.getSetting("dataModel");
		entitySet = iContext.getSetting('ovpCardProperties').getProperty("/entitySet");
		if (self.hasTimeSemantics(aDimensions, config, dataModel, entitySet)) {
			ret = config.time.type;
		}
		return ret;
	};
	sap.ovp.cards.charts.VizAnnotationManager.getChartType.requiresIContext = true;


	/*
	 * Check if roles are valid for dimension/measure for the chart type
	 */
	sap.ovp.cards.charts.VizAnnotationManager.checkRolesForProperty = function(queue, config, type) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		/* Nothing remains in the queue, all good !!! */
		if (!queue.length) {
			return;
		}
		var feedtype = type == "dimension" ? "Dimension" : "Measure";
		var queuedNames = [];
		jQuery.each(queue, function(i, val) {
			if (!val || !val[feedtype] || !val[feedtype].PropertyPath) {
				jQuery.sap.log.error(self.errorMessages.INVALID_CHART_ANNO);
				return false;
			}
			queuedNames.push(val[feedtype].PropertyPath);
		});
		var allowedRoles = jQuery.map(config.feeds, function(f) {
			if (f.type == type) {
				if (f.role) {
					return f.role.split("|");
				}
				return [];
			}
		});
		allowedRoles = jQuery.grep(allowedRoles, function(role, i) {
			return jQuery.inArray(role, allowedRoles) == i;
		}).join(", ");

		jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.INVALID_REDUNDANT  +
			type + "(s) " + queuedNames.join(", ") + ". " + self.errorMessages.ALLOWED_ROLES + config.type +
			self.errorMessages.CHART_IS + allowedRoles);
	};


    sap.ovp.cards.charts.VizAnnotationManager.getPrimitiveValue = function (oValue,isLegend) {
        var value;

        if (oValue) {
            if (oValue.String) {
                value = oValue.String;
            } else if (oValue.Boolean || oValue.Bool) {
                value = sap.ovp.cards.charts.VizAnnotationManager.getBooleanValue(oValue);
            } else {
                value = sap.ovp.cards.charts.VizAnnotationManager.getNumberValue(oValue,isLegend);
            }
        }
        return value;
    };

    sap.ovp.cards.charts.VizAnnotationManager.getBooleanValue = function (oValue, bDefault) {
        if (oValue && oValue.Boolean) {
            if (oValue.Boolean.toLowerCase() === "true") {
                return true;
            } else if (oValue.Boolean.toLowerCase() === "false") {
                return false;
            }
        } else if (oValue && oValue.Bool) {
            if (oValue.Bool.toLowerCase() === "true") {
                return true;
            } else if (oValue.Bool.toLowerCase() === "false") {
                return false;
            }
        }

        return bDefault;
    };

	sap.ovp.cards.charts.VizAnnotationManager.getNumberValue = function(oValue,isLegend) {
		var value;

		if (oValue) {
			if (oValue.String) {
				value = Number(oValue.String);
			} else if (oValue.Int) {
				value = Number(oValue.Int);
			} else if (oValue.Decimal) {
				value = Number(oValue.Decimal);
			} else if (oValue.Double) {
				value = Number(oValue.Double);
			} else if (oValue.Single) {
				value = Number(oValue.Single);
			}
		}
		
		if (isLegend) {
			jQuery.sap.require("sap.ui.core.format.NumberFormat");
			var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance({
				style: 'short',
				minFractionDigits: 2,
				maxFractionDigits: 2
			});
			if (value) {
				value = numberFormat.format(Number(value));
			}
		}
		return value;
	};

	sap.ovp.cards.charts.VizAnnotationManager.formThePathForCriticalityStateCalculation = function(iContext, oDataPoint) {
		
		function getPathOrPrimitiveValue(oItem) {
			if (oItem) {
				if (oItem.Path) {
					return "{path:'" + oItem.Path + "'}";
				} else {
					return sap.ovp.cards.charts.VizAnnotationManager.getPrimitiveValue(oItem);
				}
			} else {
				return "";
			}
		}
		
		var value = iContext[iContext.measureNames];
		if (oDataPoint && oDataPoint.CriticalityCalculation && oDataPoint.CriticalityCalculation.ImprovementDirection) {
			var sImprovementDirection = oDataPoint.CriticalityCalculation.ImprovementDirection.EnumMember;
			var deviationLow = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeLowValue);
			var deviationHigh = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeHighValue);
			var toleranceLow = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeLowValue);
			var toleranceHigh = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeHighValue);

			return sap.ovp.cards.AnnotationHelper._calculateCriticalityState( value, sImprovementDirection, deviationLow, deviationHigh, toleranceLow, toleranceHigh, sap.ovp.cards.AnnotationHelper.criticalityConstants.StateValues);
		} else {
			//If there's no criticality calculation in the datapoint annotation, we check for criticality
			var state = oDataPoint.Criticality.EnumMember;
			var criticalTypeArr = state ? state.split("/") : [];
			if (criticalTypeArr) {
				return criticalTypeArr[1]; //returns positive, negative, critical or none
			}
		}
	};

	sap.ovp.cards.charts.VizAnnotationManager.mapMeasures = function(oContext, oMetadata, aMeasures) {
		var value,dataPointAnnotationPath;
        jQuery.each(oMetadata, function (i, v) {
            //as part of supporting V4 annotation
            if (v["com.sap.vocabularies.Common.v1.Label"] && v["com.sap.vocabularies.Common.v1.Label"].String == oContext.measureNames) {
                value = v.name;
                return false;
            } else if (v["com.sap.vocabularies.Common.v1.Label"] && v["com.sap.vocabularies.Common.v1.Label"].Path == oContext.measureNames) {
                value = v.name;
                return false;
            } else if (v["sap:label"] == oContext.measureNames) {
                value = v.name;
                return false;
            }
        });
		
		jQuery.each(aMeasures, function(i,v) {
			if (v.Measure.PropertyPath == value) {
				if (!v.DataPoint || !v.DataPoint.AnnotationPath) {
					return false;
				}
				dataPointAnnotationPath = v.DataPoint.AnnotationPath;
				return false;
				}
			});
		return dataPointAnnotationPath;
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.getPathOrPrimitiveValue = function(oItem, isLegend) {
		
		if (oItem) {
			if (oItem.Path) {
					return oItem.Path;
			} else {
					return sap.ovp.cards.charts.VizAnnotationManager.getPrimitiveValue(oItem,isLegend);
			}
		} else {
			return "";
		}
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.checkFlag = function(aMeasures, entityTypeObject) {
		function endsWith(sString, sSuffix) {
			return sString && sString.indexOf(sSuffix, sString.length - sSuffix.length) !== -1;
		}
		var boolFlag = false;
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		jQuery.each(aMeasures, function(i,v) {
			if (v.DataPoint && v.DataPoint.AnnotationPath) {
				var oDatapoint = entityTypeObject[v.DataPoint.AnnotationPath.substring(1)];
				if (oDatapoint && oDatapoint.CriticalityCalculation &&
						oDatapoint.CriticalityCalculation.ImprovementDirection &&
						oDatapoint.CriticalityCalculation.ImprovementDirection.EnumMember) {

					var sImproveDirection = oDatapoint.CriticalityCalculation.ImprovementDirection.EnumMember;
					
					var deviationLow = sap.ovp.cards.charts.VizAnnotationManager.getPathOrPrimitiveValue(oDatapoint.CriticalityCalculation.DeviationRangeLowValue);
					var deviationHigh = sap.ovp.cards.charts.VizAnnotationManager.getPathOrPrimitiveValue(oDatapoint.CriticalityCalculation.DeviationRangeHighValue);
					var toleranceLow = sap.ovp.cards.charts.VizAnnotationManager.getPathOrPrimitiveValue(oDatapoint.CriticalityCalculation.ToleranceRangeLowValue);
					var toleranceHigh = sap.ovp.cards.charts.VizAnnotationManager.getPathOrPrimitiveValue(oDatapoint.CriticalityCalculation.ToleranceRangeHighValue);

					if (endsWith(sImproveDirection, "Minimize") ||
							endsWith(sImproveDirection, "Minimizing")) {
						if (toleranceHigh && deviationHigh) {
							boolFlag = true;
							return false;
						} else {
							jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.INVALID_CRITICALITY);
						}

					} else if (endsWith(sImproveDirection, "Maximize") ||
							endsWith(sImproveDirection, "Maximizing")) {
						if (toleranceLow && deviationLow) {
							boolFlag = true;
							return false;
						} else {
							jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.INVALID_CRITICALITY);
						}

					} else if (endsWith(sImproveDirection, "Target")) {
						if (toleranceLow && deviationLow && toleranceHigh && deviationHigh) {
							boolFlag = true;
							return false;
						} else {
							jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.INVALID_CRITICALITY);
						}
					}
					
				} else if (oDatapoint && oDatapoint.Criticality) {
					boolFlag = true;
					return false;
				} else {
					jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.INVALID_IMPROVEMENT_DIR);
				}
			}
		});
		if (boolFlag == true && aMeasures.length > 1) {
			jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.INVALID_SEMANTIC_MEASURES);
		}
		return boolFlag;
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.buildSemanticLegends = function(oMeasure, entityTypeObject, oMetadata){
		function endsWith(sString, sSuffix) {
			return sString && sString.indexOf(sSuffix, sString.length - sSuffix.length) !== -1;
		}
		var ret = [null, null];
		var isLegend = true;
		var measureName = oMeasure.Measure.PropertyPath;
        if (oMetadata[measureName]) {
            if (oMetadata[measureName][this.constants.LABEL_KEY_V4]) { //as part of supporting V4 annotation
                measureName = oMetadata[measureName][this.constants.LABEL_KEY_V4].String ? oMetadata[measureName][this.constants.LABEL_KEY_V4].String : oMetadata[measureName][this.constants.LABEL_KEY_V4].Path;
            } else if (oMetadata[measureName][this.constants.LABEL_KEY]) {
                measureName = oMetadata[measureName][this.constants.LABEL_KEY];
            } else if (measureName) {
                measureName = measureName;
            }
        }
		var dataPointAnnotationPath = oMeasure.DataPoint.AnnotationPath;
		var oDataPoint = entityTypeObject[dataPointAnnotationPath.substring(1)];
		if (!oDataPoint.CriticalityCalculation ||
				!oDataPoint.CriticalityCalculation.ImprovementDirection ||
				!oDataPoint.CriticalityCalculation.ImprovementDirection.EnumMember) {
			return ret;
		}
		var sImproveDirection = oDataPoint.CriticalityCalculation.ImprovementDirection.EnumMember;
		var deviationLow = sap.ovp.cards.charts.VizAnnotationManager.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeLowValue,isLegend);
		var deviationHigh = sap.ovp.cards.charts.VizAnnotationManager.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeHighValue,isLegend);
		var toleranceLow = sap.ovp.cards.charts.VizAnnotationManager.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeLowValue,isLegend);
		var toleranceHigh = sap.ovp.cards.charts.VizAnnotationManager.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeHighValue,isLegend);
		
		jQuery.sap.require("sap.ui.core.format.NumberFormat");

		if (endsWith(sImproveDirection, "Minimize") ||
				endsWith(sImproveDirection, "Minimizing")) {
			if (toleranceHigh && deviationHigh) {
				ret[0] = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("MINIMIZING_LESS",[measureName, toleranceHigh]);
				ret[1] = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("MINIMIZING_MORE",[measureName, deviationHigh]);
				ret[2] = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("MINIMIZING_CRITICAL",[toleranceHigh, measureName, deviationHigh]);
			}

		} else if (endsWith(sImproveDirection, "Maximize") ||
				endsWith(sImproveDirection, "Maximizing")) {
			if (toleranceLow && deviationLow) {
				ret[0] = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("MAXIMISING_MORE",[measureName, toleranceLow]);
				ret[1] = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("MAXIMISING_LESS",[measureName, deviationLow]);
				ret[2] = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("MAXIMIZING_CRITICAL",[deviationLow, measureName, toleranceLow]);
			}

		} else if (endsWith(sImproveDirection, "Target")) {
			if (toleranceLow && deviationLow && toleranceHigh && deviationHigh) {
				ret[0] = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("TARGET_BETWEEN",[toleranceLow, measureName, toleranceHigh]);
				ret[1] = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("TARGET_AROUND",[measureName, deviationLow, deviationHigh]);
				ret[2] = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("TARGET_CRITICAL",[deviationLow, measureName, toleranceLow, toleranceHigh, deviationHigh]);
			}
		}
		return ret;
	};
	
	// Check the numberFormat of the DataPoint for each measure
	sap.ovp.cards.charts.VizAnnotationManager.checkNumberFormat = function(minValue,val,entityTypeObject) {
		if (val && val.DataPoint && val.DataPoint.AnnotationPath) {
			var oDataPoint = entityTypeObject[val.DataPoint.AnnotationPath.substring(1)];
			var fractionDigits, fractionDigitsVal;
			if (oDataPoint && oDataPoint.ValueFormat) {
				fractionDigits = oDataPoint.ValueFormat;
			} else if (oDataPoint && oDataPoint.NumberFormat) {
				fractionDigits = oDataPoint.NumberFormat;
			}
			
			if (fractionDigits && fractionDigits.NumberOfFractionalDigits && fractionDigits.NumberOfFractionalDigits.Int) {
				fractionDigitsVal = fractionDigits.NumberOfFractionalDigits.Int;
				if (minValue < Number(fractionDigitsVal)) {
					minValue = Number(fractionDigitsVal);
				}
			}
		}
		
		return minValue;
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.getMaxScaleFactor = function(maxScaleValue,val,entityTypeObject) {
		if (val && val.DataPoint && val.DataPoint.AnnotationPath) {
			var oDataPoint = entityTypeObject[val.DataPoint.AnnotationPath.substring(1)];
			var scaleF, ScaleFVal;
			if (oDataPoint && oDataPoint.ValueFormat) {
				scaleF = oDataPoint.ValueFormat; 
			} else if (oDataPoint && oDataPoint.NumberFormat) {
				scaleF = oDataPoint.NumberFormat;
			}
			
			if (scaleF) {
				if (scaleF.ScaleFactor && scaleF.ScaleFactor.Decimal) {
					ScaleFVal = Number(scaleF.ScaleFactor.Decimal);
				} else if (scaleF.ScaleFactor && scaleF.ScaleFactor.Int) {
					ScaleFVal = Number(scaleF.ScaleFactor.Int);
				}
				
				if (!isNaN(ScaleFVal)) {
					if (maxScaleValue === undefined){
						maxScaleValue = Number(ScaleFVal);
					} else if (maxScaleValue > Number(ScaleFVal)) {
						maxScaleValue = Number(ScaleFVal);
					}
				}
			}
		} 
		return maxScaleValue;
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.isMeasureCurrency = function(oMetadata, sapUnit) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
        //as part of supporting V4 annotation
		if (oMetadata && oMetadata[sapUnit] && (oMetadata[sapUnit]["Org.OData.Measures.V1.ISOCurrency"] || (oMetadata[sapUnit][self.constants.SEMANTICS_KEY] && oMetadata[sapUnit][self.constants.SEMANTICS_KEY] === self.constants.CURRENCY_CODE))) {
			return true;
		}
		return false;
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.fractionalDigitsExists = function(val,entityTypeObject) {
		if (val.DataPoint && val.DataPoint.AnnotationPath) {
			var oDataPoint = entityTypeObject[val.DataPoint.AnnotationPath.substring(1)];
			if (oDataPoint && oDataPoint.ValueFormat && oDataPoint.ValueFormat.NumberOfFractionalDigits 
					&& oDataPoint.ValueFormat.NumberOfFractionalDigits.Int) {
				return true;
			} else if (oDataPoint && oDataPoint.NumberFormat && oDataPoint.NumberFormat.NumberOfFractionalDigits 
					&& oDataPoint.NumberFormat.NumberOfFractionalDigits.Int) {
				return true;
			} 
		}
		return false;
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.checkEDMINT32Exists = function(oMetadata,val,feedtype) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		if (oMetadata[val[feedtype].PropertyPath][self.constants.EDM_TYPE] == self.constants.EDM_INT32) {
			return true;
		}
		return false;
	};
	
	/*
	 * Construct VizProperties and Feeds for VizFrame
	 * @param {Object} VizFrame
	 */
	sap.ovp.cards.charts.VizAnnotationManager.buildVizAttributes = function(vizFrame,handler,chartTitle) {
		var oCardsModel, entityTypeObject, chartAnno, chartContext;
		var chartType, allConfig, config, aDimensions, aMeasures;
		var oVizProperties;
		var aQueuedProperties, aQueuedDimensions, aQueuedMeasures;
		var aPropertyWithoutRoles, aDimensionWithoutRoles = [], aMeasureWithoutRoles = [];
		var bSupportsTimeSemantics;
		var reference;
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		chartType = vizFrame.getVizType();
		allConfig = this.getConfig();
		
		for (var key in allConfig) {
			if ((reference = allConfig[key].reference) &&
					allConfig[reference]) {
					var virtualEntry = jQuery.extend(true, {}, allConfig[reference]);
					allConfig[key] = virtualEntry;
				}
			if (allConfig[key].default.type == chartType ||
				(allConfig[key].time && allConfig[key].time.type == chartType)) {
				config = allConfig[key];
				break;
			}
		}


		if (!config) {
			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + "in " + self.errorMessages.CARD_CONFIG +
					self.errorMessages.CARD_CONFIG_ERROR + chartType + " " + self.errorMessages.CARD_CONFIG_JSON);
			return;
		}

		if (!(oCardsModel = vizFrame.getModel('ovpCardProperties'))) {
			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + "in " + self.errorMessages.CARD_CONFIG +
					self.errorMessages.NO_CARD_MODEL);
			return;
		}
		var dataModel = vizFrame.getModel();
		var entitySet = oCardsModel.getProperty("/entitySet");
		if (!dataModel || !entitySet) {
			return;
		}
		entityTypeObject = oCardsModel.getProperty("/entityType");
		if (!entityTypeObject) {
			jQuery.sap.log.error(self.errorMessages.CARD_ANNO_ERROR + "in " + self.errorMessages.CARD_ANNO);
			return;
		}
		var oMetadata = self.getMetadata(dataModel, entitySet);
		chartAnno = oCardsModel.getProperty("/chartAnnotationPath");
		if (!chartAnno || !(chartContext = entityTypeObject[chartAnno])) {
			jQuery.sap.log.error(self.errorMessages.CARD_ANNO_ERROR + "in " + self.errorMessages.CARD_ANNO);
			return;
		}

		if (!(aDimensions = chartContext.DimensionAttributes) ||
				!aDimensions.length) {
			jQuery.sap.log.error(self.errorMessages.CHART_ANNO_ERROR + "in " + self.errorMessages.CHART_ANNO + " " +
					self.errorMessages.DIMENSIONS_MANDATORY);
			return;
		}
		if (!(aMeasures = chartContext.MeasureAttributes) ||
				!aMeasures.length) {
			jQuery.sap.log.error(self.errorMessages.CHART_ANNO_ERROR + "in " + self.errorMessages.CHART_ANNO + " " +
					self.errorMessages.MEASURES_MANDATORY);
			return;
		}
		bSupportsTimeSemantics = self.hasTimeSemantics(aDimensions, config, dataModel, entitySet);
		if (bSupportsTimeSemantics) {
			config = config.time;
		} else {
			config = config.default;
		}

		var chartProps = oCardsModel.getProperty("/ChartProperties");
		
		var bErrors = false;
		
		var oTooltip = new sap.viz.ui5.controls.VizTooltip();
		oTooltip.connect(vizFrame.getVizUid());
		
		/*
		 * Check if given number of dimensions, measures
		 * are valid acc to config's min and max requirements
		 */
		[config.dimensions, config.measures].forEach(function(entry, i) {
			var oProperty = i ? aMeasures : aDimensions;
			var typeCue = i ? "measure(s)" : "dimension(s)";
			if (entry.min && oProperty.length < entry.min) {
				jQuery.sap.log.error(self.errorMessages.CARD_ERROR + "in " + chartType +
					" " + self.errorMessages.CARD_LEAST + entry.min + " " + typeCue);
				bErrors = true;
			}
			if (entry.max && oProperty.length > entry.max) {
				jQuery.sap.log.error(self.errorMessages.CARD_ERROR + "in " + chartType +
						self.errorMessages.CARD_MOST + entry.max + " " + typeCue);
				bErrors = true;
			}
		});

		if (bErrors) {
			return;
		}
		
		/* HEADER UX stuff */
		var bHideAxisTitle = true;
		
		if (config.properties && config.properties.hasOwnProperty("hideLabel") &&
				!config.properties["hideLabel"]) {
			 bHideAxisTitle = false;
		} 
		
		var bDatapointNavigation = true;
		
		//FIORITECHP1-6021 - Allow Disabling of Navigation from Graph
//		var dNav = oCardsModel.getProperty("/navigation");
//		if (dNav == "chartNav") {
//			bDatapointNavigation = false;
//		}
		var bDonutChart = false;
		if (chartType == 'donut') {
			bDonutChart = true;
		}
		vizFrame.removeAllAggregation();
		/*
		 * Default viz properties template
		 */
		oVizProperties = {
				legend: {
					isScrollable: false
				},
				title: {
					visible: false
				},
				interaction:{
					noninteractiveMode: bDatapointNavigation ? false : true,
					selectability: {
						legendSelection: false,
						axisLabelSelection: false,
						mode: 'EXCLUSIVE',
						plotLassoSelection: false,
						plotStdSelection: true
					},
					zoom:{
						enablement: 'disabled'
					}
				},
				plotArea:{
					window: {
						start: 'firstDataPoint',
						end: 'lastDataPoint'
					},
					dataLabel: {
						visible : bDonutChart ? true : false,
						type : 'value' //FIORITECHP1-5665 - Donut and Pie charts should be able to show numbers
					},
					dataPoint: {
						invalidity: 'ignore'
					}
				},
				categoryAxis: {
					label: {
						truncatedLabelRatio: 0.15
					}
				},
				general:{
					groupData: false,
					showAsUTC: true
				}
		};
		
		if (config.properties && config.properties.semanticColor == true && sap.ovp.cards.charts.VizAnnotationManager.checkFlag(aMeasures, entityTypeObject)) {
			//put strings in resource bundle
			var goodLegend = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("GOOD");
			var badLegend = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("BAD");
			var criticalLegend = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("CRITICAL");
			var othersLegend = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OTHERS");
			if (aMeasures.length == 1) {
				var legends = self.buildSemanticLegends(aMeasures[0], entityTypeObject, oMetadata);
				var goodLegend = legends[0] || goodLegend,
				badLegend = legends[1] || badLegend,
				criticalLegend = legends[2] || criticalLegend,
				othersLegend = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OTHERS");
			}
			oVizProperties.plotArea.dataPointStyle = {
						rules:
							[
							 { 
								 callback: function (oContext) {
									 var dataPointAnnotationPath = sap.ovp.cards.charts.VizAnnotationManager.mapMeasures(oContext, oMetadata, aMeasures);
									 if (!dataPointAnnotationPath) {
										return false;
									 }
									 var criticality = entityTypeObject[dataPointAnnotationPath.substring(1)];
									 var sState = sap.ovp.cards.charts.VizAnnotationManager.formThePathForCriticalityStateCalculation(oContext, criticality);
									 if (sState == sap.ovp.cards.AnnotationHelper.criticalityConstants.StateValues.Positive) {
										return true;
									 } else if (sState === "Positive") {
										return true;
									 }
								 },
								 properties: {
									 color: "sapUiChartPaletteSemanticGoodLight1" 
								 },
								 "displayName" : goodLegend
							 },
							 {
								 callback: function (oContext) {
									 var dataPointAnnotationPath = sap.ovp.cards.charts.VizAnnotationManager.mapMeasures(oContext, oMetadata, aMeasures);
									 if (!dataPointAnnotationPath) {
										return false;
									 }
									 var criticality = entityTypeObject[dataPointAnnotationPath.substring(1)];
									 var sState = sap.ovp.cards.charts.VizAnnotationManager.formThePathForCriticalityStateCalculation(oContext, criticality);
									 if (sState == sap.ovp.cards.AnnotationHelper.criticalityConstants.StateValues.Critical) {
										return true;
									 } else if (sState === "Critical") {
										return true;
									 }
								 },
								 properties: {
									 color: "sapUiChartPaletteSemanticCriticalLight1" 
								 },
								 "displayName" : criticalLegend
							 },
							 {
								 callback: function (oContext) {
									 var dataPointAnnotationPath = sap.ovp.cards.charts.VizAnnotationManager.mapMeasures(oContext, oMetadata, aMeasures);
									 if (!dataPointAnnotationPath) {
										return false;
									 }
									 var criticality = entityTypeObject[dataPointAnnotationPath.substring(1)];
									 var sState = sap.ovp.cards.charts.VizAnnotationManager.formThePathForCriticalityStateCalculation(oContext, criticality);
									 if (sState == sap.ovp.cards.AnnotationHelper.criticalityConstants.StateValues.Negative) {
										return true;
									 } else if (sState === "Negative") {
										return true;
									 }
								 },
								 properties: {
									 color: "sapUiChartPaletteSemanticBadLight1" 
								 },
								 "displayName" : badLegend
							 },
							 {
								 callback: function (oContext) {
									 var dataPointAnnotationPath = sap.ovp.cards.charts.VizAnnotationManager.mapMeasures(oContext, oMetadata, aMeasures);
									 if (!dataPointAnnotationPath) {
										return false;
									 }
									 var criticality = entityTypeObject[dataPointAnnotationPath.substring(1)];
									 var sState = sap.ovp.cards.charts.VizAnnotationManager.formThePathForCriticalityStateCalculation(oContext, criticality);
									 if (sState == sap.ovp.cards.AnnotationHelper.criticalityConstants.StateValues.None) {
										return true;
									 } else if (sState === "None") {
										return true;
									 }
								 },
								 properties: {
									 color: "sapUiChartPaletteSemanticNeutralLight1" 
								 },
								 "displayName" : othersLegend
							 }]
					};
		}
		/*Check if the Config.json has scale properties set*/
		var bConsiderAnnotationScales = false;
		
		if (chartContext.ChartType.EnumMember === sap.ovp.cards.charts.VizAnnotationManager.constants.SCATTER_CHARTTYPE ||
				  chartContext.ChartType.EnumMember === sap.ovp.cards.charts.VizAnnotationManager.constants.BUBBLE_CHARTTYPE ||
				  chartContext.ChartType.EnumMember === sap.ovp.cards.charts.VizAnnotationManager.constants.LINE_CHARTTYPE){
				if (chartContext && chartContext.AxisScaling && chartContext.AxisScaling.EnumMember) {
					var sScaleType = chartContext.AxisScaling.EnumMember.substring(chartContext.AxisScaling.EnumMember.lastIndexOf('/') + 1, chartContext.AxisScaling.EnumMember.length);
				//bConsiderAnnotationScales are individually set for each case to make sure the scale values are set casewise
					switch (sScaleType) {
						case "AdjustToDataIncluding0":
							oVizProperties.plotArea.adjustScale = false;
							bConsiderAnnotationScales = true;
							break;
						case "AdjustToData":
							oVizProperties.plotArea.adjustScale = true;
							bConsiderAnnotationScales = true;
							break;
						case "MinMaxValues":
						    var aChartScales = [];
						    if (chartContext["MeasureAttributes"][0] && 
						      chartContext["MeasureAttributes"][0].DataPoint && 
						      chartContext["MeasureAttributes"][0].DataPoint.AnnotationPath){
							var sDataPointAnnotationPath = chartContext["MeasureAttributes"][0].DataPoint.AnnotationPath;
							var sDataPointPath = sDataPointAnnotationPath.substring(sDataPointAnnotationPath.lastIndexOf('@') + 1, sDataPointAnnotationPath.length);
							if (entityTypeObject && entityTypeObject[sDataPointPath]){
								var oMinMaxParams = entityTypeObject[sDataPointPath];
								if (oMinMaxParams && oMinMaxParams.MaximumValue && oMinMaxParams.MaximumValue.Decimal &&
										oMinMaxParams.MinimumValue && oMinMaxParams.MinimumValue.Decimal){
									aChartScales.push({
										feed : "valueAxis",
										max: oMinMaxParams.MaximumValue.Decimal,
			                            min:oMinMaxParams.MinimumValue.Decimal
									});	
								bConsiderAnnotationScales = true;	
								}else {
									jQuery.sap.log.error(self.errorMessages.ERROR_MISSING_AXISSCALES);
								}
								
							}
							
						}
						    //LINE_CHARTTYPE donot have valueAxis2
						if (chartContext.ChartType.EnumMember !== sap.ovp.cards.charts.VizAnnotationManager.constants.LINE_CHARTTYPE &&
							chartContext["MeasureAttributes"][1] &&
							chartContext["MeasureAttributes"][1].DataPoint &&
							chartContext["MeasureAttributes"][1].DataPoint.AnnotationPath){
								var sDataPointAnnotationPath = chartContext["MeasureAttributes"][1].DataPoint.AnnotationPath;
								var sDataPointPath = sDataPointAnnotationPath.substring(sDataPointAnnotationPath.lastIndexOf('@') + 1, sDataPointAnnotationPath.length);
								if (entityTypeObject && entityTypeObject[sDataPointPath]){
									var oMinMaxParams = entityTypeObject[sDataPointPath];
									if (oMinMaxParams && oMinMaxParams.MaximumValue && oMinMaxParams.MaximumValue.Decimal &&
											oMinMaxParams.MinimumValue && oMinMaxParams.MinimumValue.Decimal){	
									aChartScales.push({
										feed : "valueAxis2",
										max: oMinMaxParams.MaximumValue.Decimal,
			                            min:oMinMaxParams.MinimumValue.Decimal
									});	
									bConsiderAnnotationScales = true;
									}else {
										jQuery.sap.log.error(self.errorMessages.ERROR_MISSING_AXISSCALES);
									}
								}
								
							   }
							vizFrame.setVizScales(aChartScales);
							break;
						default:
							break;
					}
				}
			}
		aQueuedDimensions = aDimensions.slice();
		aQueuedMeasures = aMeasures.slice();

//		var minFractionDigits = Number(dataContext.NumberFormat.NumberOfFractionalDigits.Int);
		
		var minValue = 0;
		var minValCurr = 0;
		var maxScaleValue;
		var maxScaleValueCurr;
		var isCurrency = false;
		var isNotCurrency = false;
		var isFractionalDigitsSet = false;
		var isEDMINT32 = false;
		var sapUnit;
		var oVizPropertiesFeeds = [];
		var measureArr = [], dimensionArr = [];

		jQuery.each(config.feeds, function(i, feed) {
			var uid = feed.uid;
			var aFeedProperties = [];
			if (feed.type) {
				var iPropertiesLength, feedtype, propertyName;
				if (feed.type === "dimension") {
					iPropertiesLength = aDimensions.length;
					feedtype = "Dimension";
					propertyName = "dimensions";
					aQueuedProperties = aQueuedDimensions;
					aPropertyWithoutRoles = aDimensionWithoutRoles;
				} else {
					iPropertiesLength = aMeasures.length;
					feedtype = "Measure";
					propertyName = "measures";
					aQueuedProperties = aQueuedMeasures;
					aPropertyWithoutRoles = aMeasureWithoutRoles;
				}
				var min = 0, max = iPropertiesLength;
				if (feed.min) {
					min = min > feed.min ? min : feed.min;
				}
				if (feed.max) {
					max = max < feed.max ? max : feed.max;
				}
				/* If no roles configured - add the property to feed */
				if (!feed.role) {
					var len = aQueuedProperties.length;
					for (var j = 0; j < len && aFeedProperties.length < max; ++j) {
						var val = aQueuedProperties[j];
						aQueuedProperties.splice(j, 1);
						--len;
						--j;
						aFeedProperties.push(val);
                        if (oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency]) { //as part of supporting V4 annotation
                            sapUnit = oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency].Path ? oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency].Path : oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency].String;
                        } else if (oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit]) {
                            sapUnit = oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit].Path ? oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit].Path : oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit].String;
                        } else if (oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY]) {
                            sapUnit = oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY];
                        }
                        if (!isEDMINT32 ) {
							isEDMINT32 = self.checkEDMINT32Exists(oMetadata,val,feedtype);
						}
						
						if (self.isMeasureCurrency(oMetadata,sapUnit)) {
							isCurrency = true;
						} else {
							isNotCurrency = true;
						}
						
						if (!isFractionalDigitsSet) {
							isFractionalDigitsSet = self.fractionalDigitsExists(val,entityTypeObject);
						}
						
						if (!isCurrency) {
							minValue = self.checkNumberFormat(minValue,val,entityTypeObject);
							maxScaleValue = self.getMaxScaleFactor(maxScaleValue,val,entityTypeObject);
						} else {
							minValCurr = self.checkNumberFormat(minValCurr,val,entityTypeObject);
							maxScaleValueCurr = self.getMaxScaleFactor(maxScaleValueCurr,val,entityTypeObject);
						}
					}
				} else {
					var rolesByPrio = feed.role.split("|");
					jQuery.each(rolesByPrio, function(j, role) {
						if (aFeedProperties.length == max) {
							return false;
						}
						var len = aQueuedProperties.length;
						for (var k = 0; k < len && aFeedProperties.length < max; ++k) {
							var val = aQueuedProperties[k];
							if (val && val.Role && val.Role.EnumMember &&
								val.Role.EnumMember.split("/") && val.Role.EnumMember.split("/")[1]) {
								var annotationRole = val.Role.EnumMember.split("/")[1];
								if (annotationRole == role) {
									aQueuedProperties.splice(k, 1);
									--len;
									--k;
									aFeedProperties.push(val);
                                    if (oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency]) { //as part of supporting V4 annotation
                                        sapUnit = oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency].Path ? oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency].Path : oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency].String;
                                    } else if (oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit]) {
                                        sapUnit = oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit].Path ? oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit].Path : oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit].String;
                                    } else if (oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY]) {
                                        sapUnit = oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY];
                                    }
                                    if (self.isMeasureCurrency(oMetadata,sapUnit)) {
										isCurrency = true;
									} else {
										isNotCurrency = true;
									}
									
									if (!isEDMINT32 ) {
										isEDMINT32 = self.checkEDMINT32Exists(oMetadata,val,feedtype);
									}
									
									if (!isFractionalDigitsSet) {
										isFractionalDigitsSet = self.fractionalDigitsExists(val,entityTypeObject);
									}
									
									if (!isCurrency) {
										minValue = self.checkNumberFormat(minValue,val,entityTypeObject);
										maxScaleValue = self.getMaxScaleFactor(maxScaleValue,val,entityTypeObject);
									} else {
										minValCurr = self.checkNumberFormat(minValCurr,val,entityTypeObject);
										maxScaleValueCurr = self.getMaxScaleFactor(maxScaleValueCurr,val,entityTypeObject);
									}
								}
							} else if (jQuery.inArray(val, aPropertyWithoutRoles) == -1) {
								aPropertyWithoutRoles.push(val);
							}
						}
					});
					if (aFeedProperties.length < max) {
						jQuery.each(aPropertyWithoutRoles, function(k, val) {
							/* defaultRole is the fallback role */
							var defaultRole;
							var index;
							if ((defaultRole = config[propertyName].defaultRole)  &&
								(jQuery.inArray(defaultRole, rolesByPrio) !== -1) &&
								(index = jQuery.inArray(val, aQueuedProperties)) !== -1) {
								aQueuedProperties.splice(index, 1);
								aFeedProperties.push(val);
                                if (oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency]) { //as part of supporting V4 annotation
                                    sapUnit = oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency].Path ? oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency].Path : oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_ISOCurrency].String;
                                } else if (oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit]) {
                                    sapUnit = oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit].Path ? oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit].Path : oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY_V4_Unit].String;
                                } else if (oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY]) {
                                    sapUnit = oMetadata[val[feedtype].PropertyPath][self.constants.UNIT_KEY];
                                }
                                if (self.isMeasureCurrency(oMetadata,sapUnit)){
									isCurrency = true;
								} else {
									isNotCurrency = true;
								}
								
								if (!isEDMINT32 ) {
									isEDMINT32 = self.checkEDMINT32Exists(oMetadata,val,feedtype);
								}
								
								if (!isFractionalDigitsSet) {
									isFractionalDigitsSet = self.fractionalDigitsExists(val,entityTypeObject);
								}
								
								if (!isCurrency){
									minValue = self.checkNumberFormat(minValue,val,entityTypeObject);
									maxScaleValue = self.getMaxScaleFactor(maxScaleValue,val,entityTypeObject);
								} else {
									minValCurr = self.checkNumberFormat(minValCurr,val,entityTypeObject);
									maxScaleValueCurr = self.getMaxScaleFactor(maxScaleValueCurr,val,entityTypeObject);
								}
								
								if (aFeedProperties.length == max) {
									return false;
								}
							}
						});
					}
					if (aFeedProperties.length < min) {
						jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.MIN_FEEDS + chartType +
						" " + self.errorMessages.FEEDS_OBTAINED + aFeedProperties.length + " " + self.errorMessages.FEEDS_REQUIRED + min +
						" " + self.errorMessages.FEEDS);
						return false;
					}
				}
				if (aFeedProperties.length) {
					var aFeeds = [];
					var dataset;
					if (!(dataset = vizFrame.getDataset())) {
						jQuery.sap.log.error(self.errorMessages.NO_DATASET);
						return false;
					}
					jQuery.each(aFeedProperties, function(i, val) {
						if (!val || !val[feedtype] || !val[feedtype].PropertyPath) {
							jQuery.sap.log.error(self.errorMessages.INVALID_CHART_ANNO);
							return false;
						}
						var property = val[feedtype].PropertyPath;
						var feedName = property;
						var textColumn = property;
						var edmType = null;
						if (oMetadata && oMetadata[property]) {
                            if (oMetadata[property][self.constants.LABEL_KEY_V4]) { //as part of supporting V4 annotation
                                feedName = oMetadata[property][self.constants.LABEL_KEY_V4].String ? oMetadata[property][self.constants.LABEL_KEY_V4].String : oMetadata[property][self.constants.LABEL_KEY_V4].Path;
                            } else if (oMetadata[property][self.constants.LABEL_KEY]) {
                                feedName = oMetadata[property][self.constants.LABEL_KEY];
                            } else if (property) {
                                feedName = property;
                            }
                            if (oMetadata[property][self.constants.TEXT_KEY_V4]) { //as part of supporting V4 annotation
                                textColumn = oMetadata[property][self.constants.TEXT_KEY_V4].String ? oMetadata[property][self.constants.TEXT_KEY_V4].String : oMetadata[property][self.constants.TEXT_KEY_V4].Path;
                            } else if (oMetadata[property][self.constants.TEXT_KEY]) {
                                textColumn = oMetadata[property][self.constants.TEXT_KEY];
                            } else if (property) {
                                textColumn = property;
                            }
							edmType = oMetadata[property][self.constants.TYPE_KEY] || null;
						}
						var displayBindingPath;
						if (edmType == "Edm.DateTime" && textColumn == property) {
							displayBindingPath = "{path:'" + property + "', formatter: 'sap.ovp.cards.charts.VizAnnotationManager.returnDateFormat'}";
						} else {
							displayBindingPath = "{" + textColumn + "}";
						}
						aFeeds.push(feedName);
						if (feedtype == "Dimension") {
							var dimensionDefinition = new sap.viz.ui5.data.DimensionDefinition({
								name: feedName,
								value: "{" + property + "}",
								displayValue: displayBindingPath
							});
							if (bSupportsTimeSemantics) {
								dimensionDefinition.setDataType("date");
								var obj = {};
								obj[feedName] = {formatPattern: 'tooltipFormatter'};
								oTooltip.setFormatString(obj);
							}
							dataset.addDimension(dimensionDefinition);
							if (jQuery.inArray(feedName, dimensionArr) === -1) {
								dimensionArr.push(feedName);
							}
						} else {
							dataset.addMeasure(new sap.viz.ui5.data.MeasureDefinition({
								name: feedName,
								value: "{" + property + "}"
							}));
							if ((jQuery.inArray(feedName, measureArr) === -1) && (uid != "bubbleWidth")) {
								measureArr.push(feedName);
							}
						}

					});
					vizFrame.addFeed(new sap.viz.ui5.controls.common.feeds.FeedItem({
						'uid': uid,
						'type': feedtype,
						'values': aFeeds
					}));
					if (uid === "categoryAxis") {
						oVizProperties[uid] = {
								title:{
									visible: bHideAxisTitle ? false : true,
									text: aFeeds.join(", ")
								},
								label:{
									formatString : isCurrency ? 'CURR' : 'axisFormatter',
									truncatedLabelRatio: 0.15
								}
						};
					} else {
						oVizProperties[uid] = {
								title:{
									visible: bHideAxisTitle ? false : true,
									text: aFeeds.join(", ")
								},
								label:{
									formatString : isCurrency ? 'CURR' : 'axisFormatter'
								}
						};
					}
					
					oVizPropertiesFeeds.push(oVizProperties[uid]);
					
					if (config.hasOwnProperty("vizProperties")){
						var configi = 0;
						var confignumberOfProperties = config.vizProperties.length; 
						var configpathToUse;
						var configvalue;
						for (; configi < confignumberOfProperties;configi++) { 
							if (config.vizProperties[configi].hasOwnProperty("value")) {
								configvalue = config.vizProperties[configi].value;
							}
							if (config.vizProperties[configi].hasOwnProperty("path")) {
								configpathToUse = (config.vizProperties[configi].path).split(".");
								var configlengthOfPathToUse = configpathToUse.length;
								var configtmp, manifestTmp;
								var configcurrent;
								for (var configj = 0, configcurrent = configpathToUse[0], configtmp = oVizProperties, manifestTmp = chartProps; configj < configlengthOfPathToUse; ++configj) {
									if (configj == configlengthOfPathToUse - 1){
										if (manifestTmp && manifestTmp.hasOwnProperty(configcurrent)) {
											//FIORITECHP1-5665 - Donut and Pie charts should be able to show numbers
											if (chartType == 'donut' && (manifestTmp[configcurrent] == "value" || manifestTmp[configcurrent] == "percentage") ) {
												configvalue = manifestTmp[configcurrent];
											} else if (chartType != 'donut') {
												configvalue = manifestTmp[configcurrent];
											}
										} 
										if ((bConsiderAnnotationScales && (configcurrent != "adjustScale")) || 
												(!bConsiderAnnotationScales && (configcurrent === "adjustScale")) || 
												(!bConsiderAnnotationScales && (configcurrent != "adjustScale"))) {
											configtmp[configcurrent] = configvalue;
										}
										break;
									} 
									configtmp[configcurrent] = configtmp[configcurrent] || {};
									configtmp = configtmp[configcurrent];
									if (manifestTmp) {
										manifestTmp[configcurrent] = manifestTmp[configcurrent] || {};
										manifestTmp = manifestTmp[configcurrent];
									}
									
									configcurrent = configpathToUse[configj + 1];
								}
							}
						}
					}
					if (feed.hasOwnProperty("vizProperties")) {
						var i = 0;
						var numberOfProperties = feed.vizProperties.length; 
						var attributeValue;
						var methodToUse;
						var pathToUse;
						
						for (; i < numberOfProperties;i++) { 
							if (feed.vizProperties[i].hasOwnProperty("method")) {
								methodToUse = feed.vizProperties[i].method;
								
								switch (methodToUse) {
								case 'count':
									attributeValue = aFeeds.length;
									if (feed.vizProperties[i].hasOwnProperty("min") &&
											attributeValue <= feed.vizProperties[i].min) {
										attributeValue = feed.vizProperties[i].min;
									} else if (feed.vizProperties[i].hasOwnProperty("max") &&
											attributeValue >= feed.vizProperties[i].max) {
										attributeValue = feed.vizProperties[i].max;
									}
									break;
								}
							}else if (feed.vizProperties[i].hasOwnProperty("value")){
								attributeValue = feed.vizProperties[i].value;
								
							}
							if (feed.vizProperties[i].hasOwnProperty("path")) {
								pathToUse = (feed.vizProperties[i].path).split(".");
								var lengthOfPathToUse = pathToUse.length;
								var tmp;
								var current;
								for (var j = 0, current = pathToUse[0], tmp = oVizProperties; j < lengthOfPathToUse; ++j) {
									if (j == lengthOfPathToUse - 1){
										tmp[current] = attributeValue;
										break;
									} 
									tmp[current] = tmp[current] || {};
									tmp = tmp[current];
									current = pathToUse[j + 1];
								} 
							}
						}
					}
				}
			}
		});

		var feeds = vizFrame.getFeeds();
		if (config.properties && config.properties.semanticPattern == true && sap.ovp.cards.charts.VizAnnotationManager.getMeasureDimCheck(feeds, chartType)) {
		jQuery.each(feeds, function(i,v){
			if (feeds[i].getType() == 'Measure' && ((feeds[i].getUid() == 'valueAxis') || (feeds[i].getUid() == 'actualValues'))) {
				var selectedValue;
				jQuery.each(aMeasures, function(index,value){
					var valueLabel = sap.ovp.cards.charts.VizAnnotationManager.getSapLabel(value.Measure.PropertyPath, oMetadata);
					if (valueLabel == feeds[i].getValues()[0]) {
						selectedValue = sap.ovp.cards.charts.VizAnnotationManager.checkForecastMeasure(value, entityTypeObject);
						return false;
					}
				});
				if (selectedValue) {
				var actualMeasure = sap.ovp.cards.charts.VizAnnotationManager.getSapLabel(selectedValue.Measure.PropertyPath, oMetadata);
				var forecastMeasure = entityTypeObject[selectedValue.DataPoint.AnnotationPath.substring(1)].ForecastValue.PropertyPath;
				var forecastValue = sap.ovp.cards.charts.VizAnnotationManager.getSapLabel(forecastMeasure, oMetadata);
				var actualValue = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("ACTUAL",[actualMeasure]);
				var forecastValueName = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("FORECAST",[forecastValue]);
				oVizProperties.plotArea.dataPointStyle = {
							rules:
								[
								 {
									 dataContext: {
										MeasureNamesDimension : actualMeasure
									 },
									 properties: {
										 color: "sapUiChartPaletteSequentialHue1Light1",
										 lineType : "line",
										 lineColor : "sapUiChartPaletteSequentialHue1Light1"

									 },
									 displayName : actualValue
								 },
								 {
									 dataContext: {
											MeasureNamesDimension : forecastValue
									 },
									 properties: {
										 color: "sapUiChartPaletteSequentialHue1Light1",
										 lineType : "dotted",
										 lineColor : "sapUiChartPaletteSequentialHue1Light1",
										 pattern : "diagonalLightStripe"
									 },
									 displayName : forecastValueName
								 }]
						};
						vizFrame.getDataset().addMeasure(new sap.viz.ui5.data.MeasureDefinition({
								name: forecastValue,
								value: "{" + forecastMeasure + "}"
						}));
						var values = feeds[i].getValues();
						values.push(forecastValue);
						feeds[i].setValues(values);
			}
				return false;
			}
		});
		}
		
		if (isCurrency && isNotCurrency) {
			jQuery.sap.log.warning(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Currency_non_currency_measure"));
		}
		
		if (isEDMINT32 && !isFractionalDigitsSet) { 
			minValCurr = minValue = -1;
		} else if (!isEDMINT32 && !isFractionalDigitsSet) {
			minValCurr = minValue = -1;
		}
		
		var scaleUnit;
		
		if (maxScaleValueCurr === undefined) {
			maxScaleValueCurr = "";
		}
		
		if (maxScaleValue === undefined) {
			maxScaleValue = "";
		}
		
		if (isCurrency) {
			scaleUnit = sap.ovp.cards.charts.VizAnnotationManager.getScaleUnit(maxScaleValueCurr,isCurrency);
		} else {
			scaleUnit = sap.ovp.cards.charts.VizAnnotationManager.getScaleUnit(maxScaleValue,isCurrency);
		}
		
		if (handler) {
			handler.setScale(scaleUnit);
		}
		sap.ovp.cards.charts.VizAnnotationManager.setFormattedChartTitle(measureArr,dimensionArr,chartTitle);
		
		var fmtStr = "";
		jQuery.each(oVizPropertiesFeeds, function(i, feed) {
			var formatStr = feed.label.formatString;
			fmtStr = "";
			if (isCurrency) {
				if (formatStr === 'CURR') {
					fmtStr = 'CURR/' + minValCurr.toString() + "/";// + maxScaleValueCurr.toString(); //FIORITECHP1-4935Reversal of Scale factor in Chart and Chart title.
				} else {
					fmtStr = 'axisFormatter/' + minValCurr.toString() + "/";// + maxScaleValueCurr.toString(); //FIORITECHP1-4935Reversal of Scale factor in Chart and Chart title.
				}
			} else {
				fmtStr = 'axisFormatter/' + minValue.toString() + "/";// + maxScaleValue.toString(); //FIORITECHP1-4935Reversal of Scale factor in Chart and Chart title.
			}
			feed.label.formatString = fmtStr;
			
		});
		
		if (chartType == "vertical_bullet") {
			oVizProperties["valueAxis"] = {
				title:{
					visible: bHideAxisTitle ? false : true
				},
				label:{
					formatString: fmtStr
				}
			};
		}

		var finalMinValue = "";
		var donutFmtStr = "";
		if (isCurrency) {
			finalMinValue = minValCurr.toString();
			donutFmtStr = 'CURR/' + minValCurr.toString() + "/";
		} else {
			finalMinValue = minValue.toString();
			donutFmtStr = 'axisFormatter/' + minValue.toString() + "/";
		}
		
		if (chartType === "donut") {
			oVizProperties.plotArea.dataLabel.formatString = donutFmtStr;
			if (oVizProperties.plotArea.dataLabel.type === "percentage") {
				oVizProperties.plotArea.dataLabel.formatString = "0.0%/" + finalMinValue + "/";
			}
		}
		
		this.checkRolesForProperty(aQueuedDimensions, config, "dimension");
		this.checkRolesForProperty(aQueuedMeasures, config, "measure");

		vizFrame.setVizProperties(oVizProperties);
	};

	sap.ovp.cards.charts.VizAnnotationManager.setChartScaleTitle = function(vizFrame,vizData,handler,chartTitle) {
		var oCardsModel, entityTypeObject, chartAnno, chartContext;
		var aMeasures;
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		var unitKey = self.constants.UNIT_KEY;
        var unitKey_v4_isoCurrency = self.constants.UNIT_KEY_V4_ISOCurrency; //as part of supporting V4 annotation
        var unitKey_v4_unit = self.constants.UNIT_KEY_V4_Unit; //as part of supporting V4 annotation

		//var self = sap.ovp.cards.charts.VizAnnotationManager;
		
		if (!(oCardsModel = vizFrame.getModel('ovpCardProperties'))) {
			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + "in " + self.errorMessages.CARD_CONFIG +
					self.errorMessages.NO_CARD_MODEL);
			return;
		}
		
		var dataModel = vizFrame.getModel();
		var entitySet = oCardsModel.getProperty("/entitySet");
		if (!dataModel || !entitySet) {
			return;
		}
		entityTypeObject = oCardsModel.getProperty("/entityType");
		if (!entityTypeObject) {
			jQuery.sap.log.error(self.errorMessages.CARD_ANNO_ERROR + "in " + self.errorMessages.CARD_ANNO);
			return;
		}
		var oMetadata = self.getMetadata(dataModel, entitySet);
		chartAnno = oCardsModel.getProperty("/chartAnnotationPath");
		if (!chartAnno || !(chartContext = entityTypeObject[chartAnno])) {
			jQuery.sap.log.error(self.errorMessages.CARD_ANNO_ERROR + "in " + self.errorMessages.CARD_ANNO);
			return;
		}
		
		if (!(aMeasures = chartContext.MeasureAttributes) ||
				!aMeasures.length) {
			jQuery.sap.log.error(self.errorMessages.CHART_ANNO_ERROR + "in " + self.errorMessages.CHART_ANNO + " " +
					self.errorMessages.MEASURES_MANDATORY);
			return;
		}
		
		var result = vizData ? vizData.results : null;
		var property, unitType = "", unitArr = [];
		var isUnitSame = true;
		var feedMeasures = [];
		
		var feeds = vizFrame.getFeeds();
		
		jQuery.each(feeds, function(i, feed){
			if (feed.getType() === "Measure") {
				feedMeasures = feedMeasures.concat(feed.getValues());
			}
		});
		
		var scaleUnit = "";
		
		if (result) {
			jQuery.each(aMeasures, function(i, m){
				var feedName = "";
				property = m.Measure.PropertyPath;
                if (oMetadata && oMetadata[property]) {
                    if (oMetadata[property][self.constants.LABEL_KEY_V4]) { //as part of supporting V4 annotation
                        feedName = oMetadata[property][self.constants.LABEL_KEY_V4].String ? oMetadata[property][self.constants.LABEL_KEY_V4].String : oMetadata[property][self.constants.LABEL_KEY_V4].Path;
                    } else if (oMetadata[property][self.constants.LABEL_KEY]) {
                        feedName = oMetadata[property][self.constants.LABEL_KEY];
                    } else if (property) {
                        feedName = property;
                    }
                }
                if (jQuery.inArray(feedName, feedMeasures) != -1) {
                    if (oMetadata && oMetadata[property]) {
                        var unitCode;
                        // if (unitCode && oMetadata[unitCode] && oMetadata[currCode][semanticKey] === currencyCode) {
                        if (oMetadata[property][unitKey_v4_isoCurrency]) { //as part of supporting V4 annotation
                            unitCode = oMetadata[property][unitKey_v4_isoCurrency].Path ? oMetadata[property][unitKey_v4_isoCurrency].Path : oMetadata[property][unitKey_v4_isoCurrency].String;
                        } else if (oMetadata[property][unitKey_v4_unit]) {
                            unitCode = oMetadata[property][unitKey_v4_unit].Path ? oMetadata[property][unitKey_v4_unit].Path : oMetadata[property][unitKey_v4_unit].String;
                        } else if (oMetadata[property][unitKey]) {
                            unitCode = oMetadata[property][unitKey];
                        }
                        if (unitCode && oMetadata[unitCode] ) {
							for (var i = 0; i < result.length; i++) {
								var objData = result[i];
								if (isUnitSame){
									if (unitType && objData[unitCode] && (objData[unitCode] != "" ) && (unitType != "") && (unitType != objData[unitCode]) ) {
										isUnitSame = false;
									}
								}
								unitType = objData[unitCode];
								if (unitType && unitType != "" ) {
									var unitObj = {};
									unitObj.name = feedName;
									unitObj.value = unitType;
									unitArr.push(unitObj);
									break;
								}
							}
						}
					}
				}
				
			});
		}
		
		var oVizProperties = vizFrame.getVizProperties();
		var chartUnitTitleTxt = "";
		if (handler) {
			scaleUnit = handler.getScale();
		}
		if (isUnitSame) {
			if (isNaN(Number(scaleUnit)) && scaleUnit != undefined) {
				if (unitType != "") {
					chartUnitTitleTxt = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("IN",[scaleUnit,unitType]);
				} else {
					chartUnitTitleTxt = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("IN_NO_SCALE",[scaleUnit]);
				}
			} else if (unitType != "") {
				chartUnitTitleTxt = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("IN_NO_SCALE",[unitType]);
			}
			if (chartTitle) {
				chartTitle.setText(chartUnitTitleTxt);
				chartTitle.data("aria-label",chartUnitTitleTxt,true);
			}
		} else if (!isUnitSame) {
			jQuery.each(oVizProperties, function(i, vizProps) {
				if (vizProps && vizProps.title) {
					var axisTitle = vizProps.title.text;
					for (var i = 0; i < unitArr.length; i++) {
						if (unitArr[i].name === axisTitle ) {
							var axisStr = "";
							if (isNaN(Number(scaleUnit)) && scaleUnit != undefined) {
								if (unitType != "") {
									axisStr = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("AXES_TITLE",[axisTitle,scaleUnit,unitArr[i].value]);
								} else {
									axisStr = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("AXES_TITLE_NO_SCALE",[scaleUnit]);
								}
							} else if (unitType != "") {
								axisStr = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("AXES_TITLE_NO_SCALE",[axisTitle,unitArr[i].value]);
							}
							
							vizProps.title = {
									text:axisStr
							};
						}
					}
				}
			});
			vizFrame.setVizProperties(oVizProperties);
		} 
	};

	/*
	 * Get the (cached) OData metadata information.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.getMetadata = function(model, entitySet) {
		var map = this.cacheODataMetadata(model);
		if (!map) {
			return undefined;
		}
		return map[entitySet];
	};

	sap.ovp.cards.charts.VizAnnotationManager.setFormattedChartTitle  = function(measureArr,dimensionArr,chartTitle) {
		var txt = "", measureStr = "", dimensionStr = "";
		if (chartTitle) {
			txt = chartTitle.getText();
		}
		
		if (measureArr && (measureArr.length > 1)) {
			for (var i = 0; i < measureArr.length - 1; i++) {
				if (measureStr != "") {
					measureStr += ", ";
				}
				measureStr += measureArr[i];
			}
			measureStr = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("MEAS_DIM_TITLE",[measureStr, measureArr[i]]);
		} else if (measureArr) {
			measureStr = measureArr[0];
		}
		
		if (dimensionArr && (dimensionArr.length > 1) ) {
			for (var i = 0; i < dimensionArr.length - 1; i++) {
				if (dimensionStr != "") {
					dimensionStr += ", ";
				}
				dimensionStr += dimensionArr[i];
			}
			dimensionStr = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("MEAS_DIM_TITLE",[dimensionStr, dimensionArr[i]]);
		} else if (dimensionArr) {
			dimensionStr = dimensionArr[0];
		}
		
		if (chartTitle && (txt == "")) {
			txt = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("NO_CHART_TITLE",[measureStr,dimensionStr]); 
			chartTitle.setText(txt);
			chartTitle.data("aria-label",txt,true);
		}
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.getScaleUnit  = function(maxScaleValue,isCurrency) {
//	sap.ovp.cards.charts.VizAnnotationManager.getScaleUnit  = function(maxScaleValue) {
		var num = 1;
		var scaledNum;
		if (isCurrency) {
			var currencyFormat = sap.ui.core.format.NumberFormat.getCurrencyInstance(
					{style: 'short',
						currencyCode: false,
						shortRefNumber: maxScaleValue
					}
				);
			scaledNum = currencyFormat.format(Number(num));
		} else {
			var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance(
				{style: 'short',
						shortRefNumber: maxScaleValue
				}
			);
			scaledNum = numberFormat.format(Number(num));
		}
		
		var scaleUnit = scaledNum.slice(-1);
		return scaleUnit;
	};

	/*
	 * Cache OData metadata information with key as UI5 ODataModel id.
	 */
	sap.ovp.cards.charts.VizAnnotationManager.cacheODataMetadata  = function(model) {
		var self = sap.ovp.cards.charts.VizAnnotationManager;
		if (model){
			if (!jQuery.sap.getObject("sap.ovp.cards.charts.cachedMetaModel")) {
				sap.ovp.cards.charts.cachedMetaModel = {};
			}
		var map = sap.ovp.cards.charts.cachedMetaModel[model.getId()];
		if (!map) {
			var metaModel = model.getMetaModel();
			map = {};
			var container = metaModel.getODataEntityContainer();
			jQuery.each(container.entitySet, function(anIndex,entitySet) {
				var entityType = metaModel.getODataEntityType(entitySet.entityType);
				var entitysetMap = {};
				jQuery.each(entityType.property,function(propertyIndex,property) {
					entitysetMap[property.name] = property;
				});
				map[entitySet.name] = entitysetMap;
			});
			sap.ovp.cards.charts.cachedMetaModel[model.getId()] = map;
		}
		return map;
		} else {
			jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.CACHING_ERROR );
		}
	};
	sap.ovp.cards.charts.VizAnnotationManager.getSelectedDataPoint = function(vizFrame, controller) {


		vizFrame.attachSelectData(function(oEvent){

			var self = sap.ovp.cards.charts.VizAnnotationManager;
			var oCardsModel = vizFrame.getModel('ovpCardProperties');
			var dataModel = vizFrame.getModel();
			var entitySet = oCardsModel.getProperty("/entitySet");
			var oMetadata = self.getMetadata(dataModel, entitySet);			
			var dimensionArrayNames = [], dimensions = [];
			var finalDimensions = {};
			var dimensionsArr = vizFrame.getDataset().getDimensions();
			var contextNumber;

			for (var i = 0; i < dimensionsArr.length; i++){
				dimensionArrayNames.push(dimensionsArr[i].getName());
			}

			var allData = jQuery.map(vizFrame.getDataset().getBinding("data").getCurrentContexts(), function(x) {return x.getObject();});

			if (oEvent.getParameter("data") && oEvent.getParameter("data")[0] && oEvent.getParameter("data")[0].data){
				
				contextNumber = oEvent.getParameter("data")[0].data._context_row_number;
				var oNavigationField = controller.getEntityNavigationEntries(oContext)[0];
				var oContext = vizFrame.getDataset().getBinding("data").getContexts()[contextNumber];
				if (allData[contextNumber].$isOthers && allData[contextNumber].$isOthers == true) {
					var donutIntent = {$isOthers : true};
					var payLoad = {getObject : function(){return donutIntent;}};
					if (oNavigationField) {
						controller.doNavigation(payLoad, oNavigationField);
					}
				} else {
				dimensions = Object.keys(oEvent.getParameter("data")[0].data);

				for (var j = 0; j < dimensionArrayNames.length; j++){
					for (var k = 0; k < dimensions.length; k++){
						if (dimensionArrayNames[j] == dimensions[k]){ 
							for (var key in oMetadata) {
								if (oMetadata.hasOwnProperty(key)) {
									var propertyName = oMetadata[key][self.constants.LABEL_KEY] || oMetadata[key][self.constants.NAME_KEY] || oMetadata[key][self.constants.NAME_CAP_KEY];
									if (propertyName == dimensions[k]) {
										finalDimensions[key] = allData[contextNumber][key];
									}
								}
							}
						}
					}
				}
				var payLoad = {getObject : function(){return finalDimensions;}};

				if (oNavigationField) {
					controller.doNavigation(payLoad, oNavigationField);
				}
			}
			}
		});
	};
	sap.ovp.cards.charts.VizAnnotationManager.checkBubbleChart = function(chartType) {
		if (chartType.EnumMember.endsWith("Bubble")) {
			return true;
		} else {
			return false;
		}
	};
	sap.ovp.cards.charts.VizAnnotationManager.dimensionAttrCheck = function(dimensions) {
		var ret = false;
		var self = sap.ovp.cards.charts.VizAnnotationManager; 
		if (!dimensions ||
				dimensions.constructor != Array ||
				dimensions.length < 1 ||
				dimensions[0].constructor != Object ||
				!dimensions[0].Dimension ||
				!dimensions[0].Dimension.PropertyPath) {
					jQuery.sap.log.error(self.errorMessages.CHART_ANNO_ERROR + "in " + self.errorMessages.CHART_ANNO + " " +
					self.errorMessages.DIMENSIONS_MANDATORY);
			return ret;
		}
		ret = true;
		return ret;
	};
	sap.ovp.cards.charts.VizAnnotationManager.measureAttrCheck = function(measures) {
		var ret = false;
		var self = sap.ovp.cards.charts.VizAnnotationManager; 
		if (!measures ||
				measures.constructor != Array ||
				measures.length < 1 ||
				measures[0].constructor != Object ||
				!measures[0].Measure ||
				!measures[0].Measure.PropertyPath) {
			jQuery.sap.log.error(self.errorMessages.CHART_ANNO_ERROR + "in " + self.errorMessages.CHART_ANNO + " " +
					self.errorMessages.MEASURES_MANDATORY);
			return ret;
		}
		ret = true;
		return ret;
	};
	sap.ovp.cards.charts.VizAnnotationManager.getEntitySet = function(oEntitySet) {
		return oEntitySet.name;
	};
	
	sap.ovp.cards.charts.VizAnnotationManager.getAnnotationQualifier = function(annotationPath) {
		if ( annotationPath && annotationPath.indexOf("#") != -1 ) {
			var tokens = annotationPath.split("#");
			if ( tokens.length > 1 ) {
				return tokens[1];
			}
		}
		return "";
	};

    sap.ovp.cards.charts.VizAnnotationManager.reprioritizeContent = function (newCardLayout, vizFrame) {
        var oCardsModel, entityTypeObject, chartAnno, chartContext, presentationAnno, presentationContext, dataStep;
        var self = sap.ovp.cards.charts.VizAnnotationManager;

        if (!(oCardsModel = vizFrame.getModel('ovpCardProperties'))) {
            jQuery.sap.log.error(self.errorMessages.CARD_ERROR + "in " + self.errorMessages.CARD_CONFIG +
            self.errorMessages.NO_CARD_MODEL);
            return;
        }
        var dataModel = vizFrame.getModel();
        var cardData = oCardsModel.getData();

        var entitySet = oCardsModel.getProperty("/entitySet");
        if (!dataModel || !entitySet) {
            return;
        }

        entityTypeObject = oCardsModel.getProperty("/entityType");
        if (!entityTypeObject) {
            jQuery.sap.log.error(self.errorMessages.CARD_ANNO_ERROR + "in " + self.errorMessages.CARD_ANNO);
            return;
        }

        chartAnno = oCardsModel.getProperty("/chartAnnotationPath");
        if (!chartAnno || !(chartContext = entityTypeObject[chartAnno])) {
            jQuery.sap.log.error(self.errorMessages.CARD_ANNO_ERROR + "in " + self.errorMessages.CARD_ANNO);
            return;
        }

        presentationAnno = oCardsModel.getProperty("/presentationAnnotationPath");
        if (!presentationAnno || !(presentationContext = entityTypeObject[presentationAnno])) {
            jQuery.sap.log.error(self.errorMessages.CARD_ANNO_ERROR + "in " + self.errorMessages.CARD_ANNO);
            return;
        }

        var maxItemTerm = presentationContext.MaxItems;

        if (maxItemTerm) {
            var maxItems = maxItemTerm.Int32 ? maxItemTerm.Int32 : maxItemTerm.Int;
            maxItems = parseInt(maxItems, 10);
            var colSpan = 1;
            var rowSpanOffset = newCardLayout.rowSpan - cardData.cardLayout.rowSpan;
            var colSpanOffset = newCardLayout.colSpan - colSpan;
            var chartType = vizFrame.getVizType();
            var allConfig = sap.ovp.cards.charts.VizAnnotationManager.getConfig();
            var config;
            var reference;
            for (var key in allConfig) {
                if ((reference = allConfig[key].reference) &&
                    allConfig[reference]) {
                    var virtualEntry = jQuery.extend(true, {}, allConfig[reference]);
                    allConfig[key] = virtualEntry;
                }
                if (allConfig[key].default.type == chartType ||
                    (allConfig[key].time && allConfig[key].time.type == chartType)) {
                    config = allConfig[key];
                    break;
                }
            }
            var aDimensions = chartContext.DimensionAttributes;
            var finalMeasures = [];

            jQuery.each(chartContext.MeasureAttributes, function (i, m) {
                finalMeasures.push(m.Measure.PropertyPath);
            });

            var bSupportsTimeSemantics = sap.ovp.cards.charts.VizAnnotationManager.hasTimeSemantics(aDimensions, config, dataModel, cardData.entitySet);
            if (bSupportsTimeSemantics) {
                config = config.time;
            } else {
                config = config.default;
            }
            dataStep = oCardsModel.getProperty("/dataStep");
            if (!dataStep) {
                if (config.resize && config.resize.hasOwnProperty("dataStep") && !isNaN(config.resize.dataStep)) {
                    dataStep = config.resize.dataStep;
                }
            }
            dataStep = parseInt(dataStep, 10);
            var toBeRefreshed = false;
            if (rowSpanOffset > 0 && config.resize && config.resize.hasOwnProperty("rowStep") && !isNaN(config.resize.rowStep)) {
                maxItems += config.resize.rowStep * rowSpanOffset;
                toBeRefreshed = true;
            } else if (colSpanOffset > 0 && dataStep && !isNaN(dataStep)) {
                maxItems += dataStep * colSpanOffset;
                toBeRefreshed = true;
            } else if (rowSpanOffset <= 0 || colSpanOffset <= 0) {
                //do nothing
                toBeRefreshed = true;
            }

            if (toBeRefreshed) {
                var dataBinding = vizFrame.getParent().getBinding("data");
                var newBinding = {};
                newBinding.path = dataBinding.getPath();
                newBinding.parameters = {};
                newBinding.parameters.select = dataBinding.mParameters.select;
                newBinding.filters = dataBinding.aApplicationFilters;
                newBinding.sorter = dataBinding.aSorters;
                newBinding.length = ( chartType === "donut") ? maxItems + 1 : maxItems;//(count-1)== maxItems? maxItems+1:maxItems;
                newBinding.template = new sap.ui.core.Element();
                vizFrame.getParent().bindAggregation("data", newBinding);
                var newAggrBinding;
                if (chartType === "donut") {
                    newAggrBinding = {};
                    newAggrBinding.path = dataBinding.getPath();
                    newAggrBinding.parameters = {};
                    newAggrBinding.parameters.select = finalMeasures.join(",");
                    newAggrBinding.filters = dataBinding.aApplicationFilters;
                    newAggrBinding.sorter = dataBinding.aSorters;
                    newAggrBinding.length = 1;//(count-1)== maxItems? maxItems+1:maxItems;
                    newAggrBinding.template = new sap.ui.core.Element();
                    vizFrame.getParent().bindAggregation("aggregateData", newAggrBinding);
                }
                vizFrame.getParent().updateBindingContext();
            }
        }
    };

}());

}; // end of sap/ovp/cards/charts/VizAnnotationManager.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.generic.Card.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.generic.Card.controller');
(function () {
    "use strict";
    /*global sap, jQuery */
    
    jQuery.sap.require('sap.ui.generic.app.navigation.service.NavigationHandler'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.generic.app.navigation.service.PresentationVariant'); // unlisted dependency retained

    

    var ActionUtils = sap.ovp.cards.ActionUtils;

    sap.ui.controller("sap.ovp.cards.generic.Card", {

        onInit: function () {
        /**
         *If the state is 'Loading' or 'Error', we do not render the header. Hence, this is no oHeader.
         */
          var sState = this.getView().mPreprocessors.xml[0].ovpCardProperties.oData.state;
          if (sState !== "Loading" && sState !== "Error") {
            var oHeader = this.getView().byId("ovpCardHeader");
              if (!!oHeader) {
                  oHeader.attachBrowserEvent("click", this.onHeaderClick.bind(this));
                  oHeader.addEventDelegate({
                      onkeydown: function (oEvent) {
                          if (!oEvent.shiftKey && (oEvent.keyCode == 13 || oEvent.keyCode == 32)) {
                              oEvent.preventDefault();
                              this.onHeaderClick();
                          }
                      }.bind(this)
                  });
              }
          }
            var oNumericControl = this.getView().byId("kpiNumberValue");
            if (oNumericControl) {
                oNumericControl.addEventDelegate({
                    onAfterRendering: function () {
                        var $numericControl = oNumericControl.$();
                        var $number = $numericControl.find(".sapMNCValueScr");
                        var $scale = $numericControl.find(".sapMNCScale");
                        $number.attr("aria-label", $number.text());
                        $scale.attr("aria-label", $scale.text());
                        /*
                         For restricting target and deviation in KPI Header to move towards the right
                         */
                        var $header = this.getView().byId("ovpCardHeader").getDomRef();
                        var oCompData = this.getOwnerComponent().getComponentData();
                        if (!!oCompData && !!oCompData.appComponent) {
                            var oAppComponent = oCompData.appComponent;
                            if (!!oAppComponent.getModel("ui")) {
                                var oUiModel = oAppComponent.getModel("ui");
                                if (!!oUiModel.getProperty("/containerLayout") && oUiModel.getProperty("/containerLayout") === "resizable") {
                                    var oDashboardLayoutUtil = oCompData.appComponent.getDashboardLayoutUtil();
                                    if (!!oDashboardLayoutUtil) {
                                        oDashboardLayoutUtil.setKpiNumericContentWidth($header);
                                    }
                                }
                            }
                        }
                    }.bind(this)
                });
            }
        },

        exit: function () {
            //de-register event handler
            if (this.resizeHandlerId) {
                sap.ui.core.ResizeHandler.deregister(this.resizeHandlerId);
            }
        },

        onAfterRendering: function () {
            //Flag added to enable click on header/line item 
            this.enableClick  = true;
            var sContentFragment = this.getCardPropertiesModel().getProperty("/contentFragment");
            var oCompData = this.getOwnerComponent().getComponentData();
            this._handleCountHeader();
            this._handleKPIHeader();
            var sSelectedKey = this.getCardPropertiesModel().getProperty("/selectedKey");
            if (sSelectedKey && this.getCardPropertiesModel().getProperty("/state") !== 'Loading') {
                this.getView().byId("ovp_card_dropdown").setSelectedKey(sSelectedKey);
            }

            //if this card is owned by a Resizable card layout, check if autoSpan is required and register event handler
            try {
                var oCompData = this.getOwnerComponent().getComponentData();
                if (oCompData && oCompData.appComponent) {
                    var oAppComponent = oCompData.appComponent;
                    if (oAppComponent.getModel('ui')) {
                        var oUiModel = oAppComponent.getModel('ui');
                        //Check Added for Resizable card layout
                        if (oUiModel.getProperty('/containerLayout') === 'resizable') {
                            var oDashboardLayoutUtil = oAppComponent.getDashboardLayoutUtil();
                            if (oDashboardLayoutUtil) {
                                var oCard = oDashboardLayoutUtil.dashboardLayoutModel.getCardById(oCompData.cardId);
                                if (oCard && oCard.template === 'sap.ovp.cards.stack') {
                                    oCard.dashboardLayout.autoSpan = false;
                                }
                                if (oDashboardLayoutUtil.isCardAutoSpan(oCompData.cardId)) {
                                    this.resizeHandlerId = sap.ui.core.ResizeHandler.register(this.getView(), function (oEvent) {
                                        jQuery.sap.log.info('DashboardLayout autoSize:' + oEvent.target.id + ' -> ' + oEvent.size.height);
                                        //Timeout is added so that after the card is completely rendered then all the resize handler functions can be called
                                        setTimeout(function () {
                                            oDashboardLayoutUtil.setAutoCardSpanHeight(oEvent);
                                        }, 0);
                                    });
                                    this.oDashboardLayoutUtil = oDashboardLayoutUtil;
                                    this.cardId = oCompData.cardId;
                                }
                            }
                        }
                    }
                }
            } catch (err) {
                jQuery.sap.log.error("DashboardLayout autoSpan check failed.");
            }

            //Resizable card layout: autoSpan cards - size card wrapper to card height
            if (this.oDashboardLayoutUtil && this.oDashboardLayoutUtil.isCardAutoSpan(this.cardId)) {
                var $wrapper = jQuery("#" + this.oDashboardLayoutUtil.getCardDomId(this.cardId));
                if (this.oView.$().outerHeight() > $wrapper.innerHeight()) {
                    this.oDashboardLayoutUtil.setAutoCardSpanHeight(null, this.cardId, this.oView.$().height());
                }
            }

            var bIsNavigable = 0;
            if (oCompData && oCompData.mainComponent) {
                var oMainComponent = oCompData.mainComponent;
                //Flag bGlobalFilterLoaded is set only when the oGlobalFilterLodedPromise is resolved
                if (oMainComponent.bGlobalFilterLoaded) {
                    bIsNavigable = this.checkNavigation();
                }
            }

            // checking if header is non navigable then removing the view all link from the stack card
            var oCardPropertyModel = this.getCardPropertiesModel();
            var sState = oCardPropertyModel.getProperty("/state");
            if (sState !== "Loading" && sState !== "Error") {
              var cardType = oCardPropertyModel.getProperty("/template");
              if (cardType === "sap.ovp.cards.stack") {
                if (!bIsNavigable) {
                  var viewAllLink = this.getView().byId('ViewAll');
                  if (viewAllLink) {
                    viewAllLink = viewAllLink.getDomRef();
                    jQuery(viewAllLink).remove();
                  }
                }
              }
            }

            //var sContentFragment = this.getCardPropertiesModel().getProperty("/contentFragment");
            if (bIsNavigable) {
                /**
                 * If it's a Quickview card, it should not have "cursor: pointer" set.
                 * Only the header and footer action items of Quickview card are navigable.
                 */
                if (sContentFragment ? sContentFragment !== "sap.ovp.cards.quickview.Quickview" : true) {
                  if (sContentFragment === "sap.ovp.cards.stack.Stack") {
                    var oCardRef = this.getView().getDomRef();
                    var stackContainer = jQuery(oCardRef).find('.sapOvpCardContentRightHeader');
                    if (stackContainer.length !== 0) {
                      stackContainer.addClass('sapOvpCardNavigable');
                    }
                  } else {
                    this.getView().addStyleClass("sapOvpCardNavigable");
                  }
                }
                if (sContentFragment && sContentFragment === "sap.ovp.cards.quickview.Quickview") {
                    var oHeader = this.byId("ovpCardHeader");
                    if (oHeader) {
                        oHeader.addStyleClass("sapOvpCardNavigable");
                    }
                }
            }
            else {
                // removing the role=button if the navigation for the header is not available
                var oHeader = this.byId("ovpCardHeader");
                if (oHeader) {
                    oHeader.$().removeAttr('role');
                }
            }
            var dropDown = this.getView().byId("ovp_card_dropdown");
            var toolBar = this.getView().byId("toolbar");
            if (toolBar) {
                var toolBarDomRef = toolBar.getDomRef();
                //jQuery(toolBarDomRef).attr("aria-label", dropDown.getValue());
                jQuery(toolBarDomRef).attr("aria-label", dropDown.getSelectedItem().getText());
            }

        },

        checkNavigation: function () {
            if (this.getEntityType()) {
                var oEntityType = this.getEntityType();
                if (this.getCardPropertiesModel()) {
                    var oCardPropsModel = this.getCardPropertiesModel();
                    var sIdentificationAnnotationPath = oCardPropsModel.getProperty("/identificationAnnotationPath");
                    var sAnnotationPath = sIdentificationAnnotationPath;
                    /* In case of Stack Card, there can be two entries for the identification annotation path
                    When more than one IdentificationAnnotationPath exists, they need to be split and assigned accordingly to Stack and Quickview Cards */
                    var sContentFragment = this.getCardPropertiesModel().getProperty("/contentFragment");
                    if (sContentFragment && (sContentFragment === "sap.ovp.cards.stack.Stack" || sContentFragment === "sap.ovp.cards.quickview.Quickview")){
                        var aAnnotationPath = (sIdentificationAnnotationPath) ? sIdentificationAnnotationPath.split(",") : [];
                        if (aAnnotationPath && aAnnotationPath.length > 1) {
                            if (sContentFragment === "sap.ovp.cards.stack.Stack"){
                                sAnnotationPath = aAnnotationPath[0];
                            } else {
                                sAnnotationPath = aAnnotationPath[1];
                            }
                        }
                    }
                    // if we have an array object e.g. we have records
                    var aRecords = oEntityType[sAnnotationPath];
                    if (aRecords && aRecords.length) {
                        for (var i = 0; i < aRecords.length; i++) {
                            var oItem = aRecords[i];
                            if (oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" ||
                                oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" ||
                                oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {
                                return 1;
                            }
                        }
                    }
                }
            } else if (this.getCardPropertiesModel() && this.getCardPropertiesModel().getProperty("/template") === "sap.ovp.cards.linklist" &&
                this.getCardPropertiesModel().getProperty("/staticContent") &&
                this.getCardPropertiesModel().getProperty("/targetUri")) {
                return 1;
            }
            return 0;
        },

        onHeaderClick: function () {
            /*
                On Header click of OVP Cards used as an API in other Applications
             */
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onHeaderClicked();
            } else {
                //Only for static linklist cards, the navigation destination is the URL specified as the targetUri property's value in the manifest.
                var oCardPropertiesModel = this.getCardPropertiesModel();
                var template = oCardPropertiesModel.getProperty("/template");
                var sTargetUrl = oCardPropertiesModel.getProperty("/targetUri");

                if (template == "sap.ovp.cards.linklist" && oCardPropertiesModel.getProperty("/staticContent") !== undefined && sTargetUrl) {
                    window.location.href = sTargetUrl;
                } else if (oCardPropertiesModel.getProperty("/staticContent") !== undefined && sTargetUrl === "") {
                    return;
                } else {
                    //call the navigation with the binded context to support single object cards such as quickview card
                    this.doNavigation(this.getView().getBindingContext());
                }
            }
        },

        resizeCard: function (cardSpan) {
            jQuery.sap.log.info(cardSpan);
            //card was manually resized --> de-register handler
            if (this.resizeHandlerId) {
                sap.ui.core.ResizeHandler.deregister(this.resizeHandlerId);
                this.resizeHandlerId = null;
            }
        },
        /*_handleCountFooter: function () {
            var countFooter = this.getView().byId("ovpCountFooter");

            if (countFooter) {
                var countFooterParent = countFooter.$().parent();
                countFooterParent.addClass("sapOvpCardFooterBorder");
            }

            if (countFooter) {
                //Gets the card items binding object
                var oItemsBinding = this.getCardItemsBinding();
                if (oItemsBinding) {
                    oItemsBinding.attachDataReceived(function () {
                        var iTotal = oItemsBinding.getLength();
                        var iCurrent = oItemsBinding.getCurrentContexts().length;
                        var countFooterText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Count_Zero_Footer");
                        if (iTotal !== 0) {
                            countFooterText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Count_Footer", [iCurrent, iTotal]);
                        }
                        countFooter.setText(countFooterText);
                        var countFooterDomRef = countFooter.$();
                        countFooterDomRef.attr("aria-label", countFooterText);
                    });
                }
            }
        },*/
        //Function to display header counter
        _handleCountHeader: function() {
            var countFooter = this.getView().byId("ovpCountHeader");
            if (countFooter) {
                //Gets the card items binding object
                var oItemsBinding = this.getCardItemsBinding();
                if (oItemsBinding) {
                    /*There have been instances when the data is received before attaching the event "attachDataReceived"
                      is made.As a result, no counter comes in the header on intital load.Therefore, an explicit
                      call is made to set the header counter.*/
                    this.setHeaderCounter(oItemsBinding, countFooter);
                    oItemsBinding.attachDataReceived(function() {
                        this.setHeaderCounter(oItemsBinding, countFooter);
                    }.bind(this));
                    oItemsBinding.attachChange(function() {
                        this.setHeaderCounter(oItemsBinding, countFooter);
                    }.bind(this));
                }
            }

        },

        setHeaderCounter: function(oItemsBinding, countFooter) {
            var iTotal = oItemsBinding.getLength();
            var iCurrent = oItemsBinding.getCurrentContexts().length;
            var oCard, countFooterText = "";
            var numberFormat = sap.ui.core.format.NumberFormat.getIntegerInstance({
                minFractionDigits: 0,
                maxFractionDigits: 1,
                decimalSeparator: ".",
                style: "short"
            });
            iCurrent = parseFloat(iCurrent, 10);
            var oCompData = this.getOwnerComponent().getComponentData();
            //Check Added for Fixed card layout
            if (oCompData && oCompData.appComponent) {
                var oAppComponent = oCompData.appComponent;
                if (oAppComponent.getModel('ui')) {
                    var oUiModel = oAppComponent.getModel('ui');
                    //Check Added for Resizable card layout
                    if (oUiModel.getProperty('/containerLayout') !== 'resizable') {
                        if (iTotal !== 0) {
                            iTotal = numberFormat.format(Number(iTotal));
                        }
                        if (iCurrent !== 0) {
                            iCurrent = numberFormat.format(Number(iCurrent));
                        }
                    } else {
                        oCard = this.getDashboardLayoutUtil().dashboardLayoutModel.getCardById(oCompData.cardId);
                    }
                }
            }
            /*Set counter in header if
             * (i)   All the items are not displayed
             * (ii) Card is resized to its header
             */
            if (0 === iCurrent) {
                countFooterText = "";
            } else if (oCard && oCard.dashboardLayout.showOnlyHeader) {
                //Display only total indication in case the card is resized to its header
                countFooterText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Count_Header_Total", [iTotal]);
            } else if (iTotal != iCurrent) {
                //Display both current and total indication in the other scenarios
                countFooterText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Count_Header", [iCurrent, iTotal]);
            }
            countFooter.setText(countFooterText);
            var countFooterDomRef = countFooter.$();
            countFooterDomRef.attr("aria-label", countFooterText);
        },

        /*
         *   Hide the KPI Header when there is no Data to be displayed
         */
        _handleKPIHeader: function () {
            var kpiHeader, subTitle;
            if (this.getView() && this.getView().getDomRef()) {
                kpiHeader = this.getView().getDomRef().getElementsByClassName("numericContentHbox");
                subTitle = this.getView().getDomRef().getElementsByClassName("noDataSubtitle");
            } else {
                return;
            }
            if (kpiHeader || subTitle) {
                var oItemsBinding = this.getCardItemsBinding();
                if (oItemsBinding) {
                    oItemsBinding.attachDataReceived(function () {
                        this._setSubTitleWithUnitOfMeasure(oItemsBinding);
                        var iTotal = oItemsBinding.getLength();
                        if (kpiHeader[0]) {
                            kpiHeader[0].style.visibility = null;
                            if (iTotal === 0) {
                                kpiHeader[0].style.visibility = 'hidden';
                            }
                        }
                        if (subTitle.length !== 0) {
                            subTitle[0].style.display = "none";
                            if (iTotal === 0) {
                                subTitle[0].style.display = "flex";
                            }
                        }
                    }.bind(this));
                }
            }
        },
        /*
        *  SubTitle with unit of measure
        */
        _setSubTitleWithUnitOfMeasure: function (oItemsBinding) {
            var oCardPropertiesModel = this.getCardPropertiesModel();
            if (!!oCardPropertiesModel) {
                var oData = oCardPropertiesModel.getData();
                var oSubtitleTextView = this.getView().byId("SubTitle-Text");
                if (!!oSubtitleTextView) {
                    oSubtitleTextView.setText(oData.subTitle);
                    if (!!oData && !!oData.entityType && !!oData.dataPointAnnotationPath) {
                        var oEntityType = oCardPropertiesModel.getData().entityType;
                        var oDataPoint = oEntityType[oData.dataPointAnnotationPath];
                        var measure;
                        if (oDataPoint && oDataPoint.Value && oDataPoint.Value.Path) {
                            measure = oDataPoint.Value.Path;
                        } else if (oDataPoint && oDataPoint.Description && oDataPoint.Description.Value && oDataPoint.Description.Value.Path) {
                            measure = oDataPoint.Description.Value.Path;
                        }
                        if (!!measure) {
                            var sPath = sap.ovp.cards.CommonUtils.getUnitColumn(measure, oEntityType);
                            var kpiHeader = this.byId("kpiHeader");
                            if (!!kpiHeader) {
                                var oAggregationItems = kpiHeader.getAggregation("items")[0];
                                if (!!oAggregationItems) {
                                    var item = oAggregationItems.getItems()[0];
                                    if (!!item) {
                                        var sContextPath = item.getBindingContext().getPath();
                                        if (!!sPath && !!sContextPath) {
                                            var oModel = this.getModel();
                                            var oContext = oModel.getContext(sContextPath);
                                            if (!!oContext) {
                                                var unitOfMeasure = oContext.getProperty(sPath);
                                                var subTitleInText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("SubTitle_IN");
                                                if (!!oData.subTitle && !!subTitleInText && !!unitOfMeasure) {
                                                    oSubtitleTextView.setText(oData.subTitle + " " + subTitleInText + " " + unitOfMeasure);
                                                    var oCustomData = oSubtitleTextView.getAggregation("customData");
                                                    if (!!oCustomData && !!oCustomData[0]) {
                                                        oCustomData[0].setValue(oData.subTitle + " " + subTitleInText + " " + unitOfMeasure);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },

        /**
         * default empty implementation for the count footer
         */
        getCardItemsBinding: function () {
        },

        onActionPress: function (oEvent) {
            var sourceObject = oEvent.getSource(),
                oCustomData = this._getActionObject(sourceObject),
                context = sourceObject.getBindingContext();
            if (oCustomData.type.indexOf("DataFieldForAction") !== -1) {
                this.doAction(context, oCustomData);
            } else {
                this.doNavigation(context, oCustomData);
            }
        },
        _getActionObject: function (sourceObject) {
            var aCustomData = sourceObject.getCustomData();
            var oCustomData = {};
            for (var i = 0; i < aCustomData.length; i++) {
                oCustomData[aCustomData[i].getKey()] = aCustomData[i].getValue();
            }
            return oCustomData;
        },

        doNavigation: function (oContext, oNavigationField) {
            //handle multiple clicks of line item/header
            if (!this.enableClick){
                return;
             }
            this.enableClick = false;
            setTimeout(function(){this.enableClick = true; }.bind(this), 1000);
            if (!oNavigationField) {
                oNavigationField = this.getEntityNavigationEntries(oContext)[0];
            }

            if (oNavigationField) {
                switch (oNavigationField.type) {
                    case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
                        this.doNavigationWithUrl(oContext, oNavigationField);
                        break;
                    case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
                        this.doIntentBasedNavigation(oContext, oNavigationField, false);
                        break;
                }
            }
        },

        doNavigationWithUrl: function (oContext, oNavigationField) {
            var oParsingSerivce = sap.ushell.Container.getService("URLParsing");

            //Checking if navigation is external or IntentBasedNav with paramters
            //If Not a internal navigation, navigate in a new window
            if (!(oParsingSerivce.isIntentUrl(oNavigationField.url))) {
                window.open(oNavigationField.url);
            } else {
                var oParsedShellHash = oParsingSerivce.parseShellHash(oNavigationField.url);
            //Url can also contain an intent based navigation with route, route can be static or dynamic with paramters
                this.doIntentBasedNavigation(oContext, oParsedShellHash, true);
            }
        },

        fnHandleError: function (oError) {
            if (oError instanceof sap.ui.generic.app.navigation.service.NavError) {
                if (oError.getErrorCode() === "NavigationHandler.isIntentSupported.notSupported") {
                    sap.m.MessageBox.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OVP_NAV_ERROR_NOT_AUTHORIZED_DESC"), {
                        title: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OVP_GENERIC_ERROR_TITLE")
                    });
                } else {
                    sap.m.MessageBox.show(oError.getErrorCode(), {
                        title: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OVP_GENERIC_ERROR_TITLE")
                    });
                }
            }
        },

        doCrossApplicationNavigation: function (oIntent, oNavArguments) {
            var sIntent = "#" + oIntent.semanticObject + '-' + oIntent.action;
            var that = this;
            sap.ushell.Container.getService("CrossApplicationNavigation").isIntentSupported([sIntent])
                .done(function (oResponse) {
                    if (oResponse[sIntent].supported === true) {
                        // enable link
                        if (!!oNavArguments.params) {
                            if (typeof oNavArguments.params == 'string') {
                                try {
                                    oNavArguments.params = JSON.parse(oNavArguments.params);
                                } catch (err) {
                                    jQuery.sap.log.error("Could not parse the Navigation parameters");
                                    return;
                                }
                            }
                        }
                        /*
                         Adding Global filters to Navigation Parameters
                         */
                        var oComponentData = that.getOwnerComponent().getComponentData();
                        var oGlobalFilter = oComponentData ? oComponentData.globalFilter : undefined;
                        var oUiState = oGlobalFilter && oGlobalFilter.getUiState({
                                allFilters: false
                            });
                        var sSelectionVariant = oUiState ? JSON.stringify(oUiState.getSelectionVariant()) : "{}";
                        oGlobalFilter = jQuery.parseJSON(sSelectionVariant);
                        if (!oNavArguments.params) {
                            oNavArguments.params = {};
                        }
                        if (!!oGlobalFilter && !!oGlobalFilter.SelectOptions) {
                            for (var i = 0; i < oGlobalFilter.SelectOptions.length; i++) {
                                var oGlobalFilterValues = oGlobalFilter.SelectOptions[i].Ranges;
                                if (!!oGlobalFilterValues) {
                                    var values = [];
                                    for (var j = 0; j < oGlobalFilterValues.length; j++) {
                                        if (oGlobalFilterValues[j].Sign === "I" && oGlobalFilterValues[j].Option === "EQ") {
                                            values.push(oGlobalFilterValues[j].Low);
                                        }
                                    }
                                    oNavArguments.params[oGlobalFilter.SelectOptions[i].PropertyName] = values;
                                }
                            }
                        }
                        sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oNavArguments);
                    } else {
                        var oError = new sap.ui.generic.app.navigation.service.NavError("NavigationHandler.isIntentSupported.notSupported");
                        that.fnHandleError(oError);
                    }
                })
                .fail(function () {
                    jQuery.sap.log.error("Could not get authorization from isIntentSupported");
                });
        },

        doIntentBasedNavigation: function (oContext, oIntent, oUrlWithIntent) {
            var oParameters,
                oNavArguments,
                oEntity = oContext ? oContext.getObject() : null;

            if (oEntity && oEntity.__metadata) {
                delete oEntity.__metadata;
            }

            var oNavigationHandler = sap.ovp.cards.CommonUtils.getNavigationHandler();

            if (oNavigationHandler) {
                if (oIntent) {
                    oParameters = this._getEntityNavigationParameters(oEntity);
                    oNavArguments = {
                        target: {
                            semanticObject: oIntent.semanticObject,
                            action: oIntent.action
                        },
                        appSpecificRoute: oIntent.appSpecificRoute,
                        params: oParameters.newSelectionVariant
                    };

                    var oCustomData = {}, oMain = null;
                    if (this.getOwnerComponent() && this.getOwnerComponent().getComponentData()) {
                        oMain = this.getOwnerComponent().getComponentData().mainComponent;
                        if (!!oMain) {
                            oMain.getCustomAppStateDataExtension(oCustomData);
                            //var oGlobalFilter = oMain.getView().byId("ovpGlobalFilter");
                        }
                    }

                    var oAppInnerData = {
                        selectionVariant: oParameters.oldSelectionVariant,
                        presentationVariant : oParameters.newPresentationVariant,
                        customData: oCustomData
                    };

                    if (oUrlWithIntent) {
                        if (oIntent && oIntent.semanticObject && oIntent.action) {
                            var oParams = this.getCardPropertiesModel().getProperty("/staticParameters");
                            oNavArguments.params = (!!oParams) ? oParams : {};
                            this.doCrossApplicationNavigation(oIntent, oNavArguments);
                        }
                    } else {
                        oNavigationHandler.navigate(oNavArguments.target.semanticObject, oNavArguments.target.action, oNavArguments.params,
                            oAppInnerData, this.fnHandleError);
                    }
                }
            }
        },

        doAction: function (oContext, action) {
            this.actionData = ActionUtils.getActionInfo(oContext, action, this.getEntityType());
            if (this.actionData.allParameters.length > 0) {
                this._loadParametersForm();
            } else {
                this._callFunction();
            }
        },

        getEntityNavigationEntries: function (oContext, sAnnotationPath) {
            var aNavigationFields = [];
            var oEntityType = this.getEntityType();

            if (!oEntityType) {
                return aNavigationFields;
            }

            if (!sAnnotationPath) {
                var oCardPropsModel = this.getCardPropertiesModel();
                var sIdentificationAnnotationPath = oCardPropsModel.getProperty("/identificationAnnotationPath");
                /**
                 * In the case of stack card there can be 2 entries for the identification annotation path.
                 * The second entry corresponds to the object stream, so we avoid this entry (it is processed separately).
                 */
                var aAnnotationPath = (sIdentificationAnnotationPath) ? sIdentificationAnnotationPath.split(",") : [];
                if (aAnnotationPath && aAnnotationPath.length > 1) {
                    sAnnotationPath = aAnnotationPath[0];
                } else {
                    sAnnotationPath = sIdentificationAnnotationPath;
                }
            }

            // if we have an array object e.g. we have records
            var aRecords = oEntityType[sAnnotationPath];
            if (Array.isArray(aRecords)) {

                // sort the records by Importance - before we initialize the navigation-actions of the card
                aRecords = sap.ovp.cards.AnnotationHelper.sortCollectionByImportance(aRecords);

                for (var i = 0; i < aRecords.length; i++) {
                    if (aRecords[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
                        aNavigationFields.push({
                            type: aRecords[i].RecordType,
                            semanticObject: aRecords[i].SemanticObject.String,
                            action: aRecords[i].Action.String,
                            label: aRecords[i].Label ? aRecords[i].Label.String : null
                        });
                    }
                    if (aRecords[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" && !aRecords[i].Url.UrlRef) {

                        var oModel = this.getView().getModel();
                        var oMetaData = oModel.oMetaModel;
                        var oEntityBindingContext = oMetaData.createBindingContext(oEntityType.$path);
                        var sBindingString = sap.ui.model.odata.AnnotationHelper.format(oEntityBindingContext, aRecords[i].Url);
                        var oCustomData = new sap.ui.core.CustomData({
                            key: "url",
                            value: sBindingString
                        });
                        oCustomData.setModel(oModel);
                        oCustomData.setBindingContext(oContext);
                        var oUrl = oCustomData.getValue();

                        aNavigationFields.push({
                            type: aRecords[i].RecordType,
                            url: oUrl,
                            value: aRecords[i].Value.String,
                            label: aRecords[i].Label ? aRecords[i].Label.String : null
                        });
                    }
                }
            }
            return aNavigationFields;
        },

        getModel: function () {
            return this.getView().getModel();
        },

        getMetaModel: function () {
            if (this.getModel()) {
                return this.getModel().getMetaModel();
            }
        },

        getCardPropertiesModel: function () {
            return this.getView().getModel("ovpCardProperties");
        },

        getEntitySet: function () {
            if (!this.entitySet) {
                var sEntitySet = this.getCardPropertiesModel().getProperty("/entitySet");
                this.entitySet = this.getMetaModel().getODataEntitySet(sEntitySet);
            }

            return this.entitySet;
        },

        getEntityType: function () {
            if (!this.entityType) {
                if (this.getMetaModel() && this.getEntitySet()) {
                    this.entityType = this.getMetaModel().getODataEntityType(this.getEntitySet().entityType);
                }
            }

            return this.entityType;
        },

        getCardContentContainer: function () {
            if (!this.cardContentContainer) {
                this.cardContentContainer = this.getView().byId("ovpCardContentContainer");
            }
            return this.cardContentContainer;
        },

        //_saveAppState: function(sFilterDataSuiteFormat) {
        //	var oDeferred = jQuery.Deferred();
        //	var oAppState = sap.ushell.Container.getService("CrossApplicationNavigation").createEmptyAppState(this.getOwnerComponent());
        //	var sAppStateKey = oAppState.getKey();
        //	var oAppDataForSave = {
        //		selectionVariant: sFilterDataSuiteFormat
        //	};
        //	oAppState.setData(oAppDataForSave);
        //	var oSavePromise = oAppState.save();
        //
        //	oSavePromise.done(function() {
        //       oDeferred.resolve(sAppStateKey,oAppDataForSave);
        //	});
        //
        //	return oDeferred.promise();
        //},

        /**
         * Retrieve entity parameters (if exists) and add xAppState from oComponentData.appStateKeyFunc function (if exists)
         * @param oEntity
         * @returns {*}
         * @private
         */
        _getEntityNavigationParameters: function (oEntity) {
            var oUrlParameters = {};
            var oEntityType;
            var oComponentData = this.getOwnerComponent().getComponentData();
            var oGlobalFilter = oComponentData ? oComponentData.globalFilter : undefined;
            var oCardSelections = sap.ovp.cards.AnnotationHelper.getCardSelections(this.getCardPropertiesModel());

            var aCardFilters = oCardSelections.filters;
            var aCardParameters = oCardSelections.parameters;

            //When filters are passed as navigation params, '/' should be replaced with '.'
            //Eg. to_abc/xyz should be to_abc.xyz
            aCardFilters && aCardFilters.forEach(function(oCardFilter) {
                oCardFilter.path = oCardFilter.path.replace("/", ".");

                // NE operator is not supported by selction variant
                // so we are changing it to exclude with EQ operator.
                if(oCardFilter.operator === sap.ui.model.FilterOperator.NE) {
                    oCardFilter.operator = sap.ui.model.FilterOperator.EQ;
                    oCardFilter.sign = "E";
                }
            });
            oCardSelections.filters = aCardFilters;

            aCardParameters && aCardParameters.forEach(function(oCardParameter) {
                oCardParameter.path = oCardParameter.path.replace("/", ".");
            });
            oCardSelections.parameters = aCardParameters;

            var oCardSorters = sap.ovp.cards.AnnotationHelper.getCardSorters(this.getCardPropertiesModel());
            var oSelectionVariant, oGlobalSelectionVariant, oPresentationVariant;

            // Build result object of card parameters
            if (oEntity) {
                oEntityType = this.getEntityType();
                var key;
                for (var i = 0; oEntityType.property && i < oEntityType.property.length; i++) {
                    key = oEntityType.property[i].name;
                    var vAttributeValue = oEntity[key];

                    if (oEntity.hasOwnProperty(key)) {
                        if (window.Array.isArray(oEntity[key]) && oEntity[key].length === 1) {
                            oUrlParameters[key] = oEntity[key][0];
                        } else if (jQuery.type(vAttributeValue) !== "object") {
                            oUrlParameters[key] = vAttributeValue;
                        }
                    }
                }
            }

            //Build selection variant object from global filter, card filter and card parameters
            var oUiState = oGlobalFilter && oGlobalFilter.getUiState({
                    allFilters: false
                });
            var sSelectionVariant = oUiState ? JSON.stringify(oUiState.getSelectionVariant()) : "{}";
            oGlobalSelectionVariant = new sap.ui.generic.app.navigation.service.SelectionVariant(sSelectionVariant);
            oPresentationVariant = new sap.ui.generic.app.navigation.service.PresentationVariant(oCardSorters);
            oSelectionVariant = this._buildSelectionVariant(oGlobalFilter, oCardSelections);

            /*
                    Custom Parameters
             */
            var oMain = null;
            if (this.getOwnerComponent() && this.getOwnerComponent().getComponentData()) {
                oMain = this.getOwnerComponent().getComponentData().mainComponent;
            }
            if (!!oMain) {
                var oCardPropertiesModel = this.getCardPropertiesModel();
                if (!!oCardPropertiesModel) {
                    var sCustomParams = oCardPropertiesModel.getProperty("/customParams");
                    if (!!sCustomParams) {
                        var oParams = oEntity;
                        var param = oMain.onCustomParams(sCustomParams);
                        if (typeof param === "function") {
                            var aCustomSelectionVariant = param(oParams);
                            for (var j = 0; aCustomSelectionVariant && j < aCustomSelectionVariant.length; j++) {
                                var oCustomSelectionVariant = aCustomSelectionVariant[j];
                                if (oCustomSelectionVariant &&
                                    oCustomSelectionVariant.path &&
                                    oCustomSelectionVariant.operator &&
                                    (oCustomSelectionVariant.value1 || oCustomSelectionVariant.value1 === 0) &&
                                    oCustomSelectionVariant.sign) {
                                    //value2 is optional, hence we check it separately
                                    var sValue1 = oCustomSelectionVariant.value1.toString();
                                    var sValue2 = (oCustomSelectionVariant.value2) ? oCustomSelectionVariant.value2.toString() : undefined;
                                    oSelectionVariant.addSelectOption(oCustomSelectionVariant.path, oCustomSelectionVariant.sign, oCustomSelectionVariant.operator, sValue1, sValue2);
                                    if (oUrlParameters[oCustomSelectionVariant.path]) {
                                        oUrlParameters[oCustomSelectionVariant.path] = null;
                                    }
                                 }
                            }
                        }
                    }
                    var oParameters = oCardPropertiesModel.getProperty("/staticParameters");
                    if (!!oParameters) {
                        for (var key in oParameters) {
                            oUrlParameters[key] = oParameters[key];
                        }
                    }
                }
            }

            var oNavigationHandler = sap.ovp.cards.CommonUtils.getNavigationHandler();
            var newSelectionVariant = null;
            if (oNavigationHandler) {
                newSelectionVariant = oNavigationHandler.mixAttributesAndSelectionVariant(oUrlParameters, oSelectionVariant.toJSONString());
            }

            return {
                oldSelectionVariant: oGlobalSelectionVariant ? oGlobalSelectionVariant.toJSONString() : null,
                newSelectionVariant: newSelectionVariant ? newSelectionVariant.toJSONString() : null,
                newPresentationVariant: oPresentationVariant ? oPresentationVariant.toJSONString() : null
            };
        },

        _buildSelectionVariant: function (oGlobalFilter, oCardSelections) {
            var oUiState = oGlobalFilter && oGlobalFilter.getUiState({
                allFilters: false
            });
            var sSelectionVariant = oUiState ? JSON.stringify(oUiState.getSelectionVariant()) : "{}";
            var oSelectionVariant = new sap.ui.generic.app.navigation.service.SelectionVariant(sSelectionVariant);
            var oFilter, sValue1, sValue2, oParameter;

            var aCardFilters = oCardSelections.filters;
            var aCardParameters = oCardSelections.parameters;

            // Add card filters to selection variant
            for (var i = 0; i < aCardFilters.length; i++) {
                oFilter = aCardFilters[i];
                //value1 might be typeof number, hence we check not typeof undefined
                if (oFilter.path && oFilter.operator && typeof oFilter.value1 !== "undefined") {
                    //value2 is optional, hence we check it separately
                    sValue1 = oFilter.value1.toString();
                    sValue2 = (typeof oFilter.value2 !== "undefined") ? oFilter.value2.toString() : undefined;
                    oSelectionVariant.addSelectOption(oFilter.path, oFilter.sign, oFilter.operator, sValue1, sValue2);
                }
            }
            /*Card parameters will be passed in 1.52 release, commented for now
            // Add card parameters to selection variant
            for (var j = 0; j < aCardParameters.length; j++) {
                oParameter = aCardParameters[j];
                //If parameter name or value is missing, then ignore
                if (!oParameter.path || !oParameter.value) {
                    continue;
                }
                //If parameter already part of selection variant, this means same parameter came from global
                //filter and we should not send card parameter again, because parameter will always contain
                //single value, multiple parameter values will confuse target application
                if (oSelectionVariant.getParameter(oParameter.path)) {
                    continue;
                }
                oSelectionVariant.addParameter(oParameter.path, oParameter.value);
            }*/

            return oSelectionVariant;
        },

        _loadParametersForm: function () {
            var oParameterModel = new sap.ui.model.json.JSONModel();
            oParameterModel.setData(this.actionData.parameterData);
            var that = this;

            // first create dialog
            var oParameterDialog = new sap.m.Dialog('ovpCardActionDialog', {
                title: this.actionData.sFunctionLabel,
                afterClose: function () {
                    oParameterDialog.destroy();
                }
            }).addStyleClass("sapUiNoContentPadding");

            // action button (e.g. BeginButton)
            var actionButton = new sap.m.Button({
                text: this.actionData.sFunctionLabel,
                press: function (oEvent) {
                    var mParameters = ActionUtils.getParameters(oEvent.getSource().getModel(), that.actionData.oFunctionImport);
                    oParameterDialog.close();
                    that._callFunction(mParameters, that.actionData.sFunctionLabel);
                }
            });

            // cancel button (e.g. EndButton)
            var cancelButton = new sap.m.Button({
                text: "Cancel",
                press: function () {
                    oParameterDialog.close();
                }
            });
            // assign the buttons to the dialog
            oParameterDialog.setBeginButton(actionButton);
            oParameterDialog.setEndButton(cancelButton);

            // preparing a callback function which will be invoked on the Form's Fields-change
            var onFieldChangeCB = function (oEvent) {
                var missingMandatory = ActionUtils.mandatoryParamsMissing(oEvent.getSource().getModel(), that.actionData.oFunctionImport);
                actionButton.setEnabled(!missingMandatory);
            };

            // get the form assign it the Dialog and open it
            var oForm = ActionUtils.buildParametersForm(this.actionData, onFieldChangeCB);

            oParameterDialog.addContent(oForm);
            oParameterDialog.setModel(oParameterModel);
            oParameterDialog.open();
        },

        _callFunction: function (mUrlParameters, actionText) {
            var mParameters = {
                batchGroupId: "Changes",
                changeSetId: "Changes",
                urlParameters: mUrlParameters,
                forceSubmit: true,
                context: this.actionData.oContext,
                functionImport: this.actionData.oFunctionImport
            };
            var that = this;
            var oPromise = new Promise(function (resolve, reject) {
                var model = that.actionData.oContext.getModel();
                var sFunctionImport;
                sFunctionImport = "/" + mParameters.functionImport.name;
                model.callFunction(sFunctionImport, {
                    method: mParameters.functionImport.httpMethod,
                    urlParameters: mParameters.urlParameters,
                    batchGroupId: mParameters.batchGroupId,
                    changeSetId: mParameters.changeSetId,
                    headers: mParameters.headers,
                    success: function (oData, oResponse) {
                        resolve(oResponse);
                    },
                    error: function (oResponse) {
                        oResponse.actionText = actionText;
                        reject(oResponse);
                    }
                });
            });
            //Todo: call translation on message toast
            oPromise.then(function (oResponse) {
                return sap.m.MessageToast.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Success"), {
                    duration: 1000
                });
            }, function (oError) {
                var errorMessage = sap.ovp.cards.CommonUtils.showODataErrorMessages(oError);
                if (errorMessage === "" && oError.actionText) {
                    errorMessage = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Error") + ' "' + oError.actionText + '"' + ".";
                }
                return sap.m.MessageBox.error(errorMessage, {
                    title: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OVP_GENERIC_ERROR_TITLE"),
                    onClose: null,
                    styleClass: "",
                    initialFocus: null,
                    textDirection: sap.ui.core.TextDirection.Inherit
                });
            });
        },

        /**
         * In case of error card implementation can call this method to display
         * card error state.
         * Current instance of the card will be destroied and instead loading card
         * will be presenetd with the 'Cannot load card' meassage
         */
        setErrorState: function () {
            //get the current card component
            var oCurrentCard = this.getOwnerComponent();
            //If oCurrentCard is undefined, it means the original card has been created and the loading card
            //has been destroyed.
            //Thus, there is no need of creating an error card on top of the loading card.
            if (!oCurrentCard || !oCurrentCard.oContainer) {
                return;
            }
            //get the component container
            var oComponentContainer = oCurrentCard.oContainer;
            //prepare card configuration, i.e. category, title, description and entitySet
            //which are required for the loading card. in addition set the card state to error
            //so no loading indicator will be presented
            var oCardPropertiesModel = this.getCardPropertiesModel();
            var oComponentConfig = {
                name: "sap.ovp.cards.loading",
                componentData: {
                    model: this.getView().getModel(),
                    settings: {
                        category: oCardPropertiesModel.getProperty("/category"),
                        title: oCardPropertiesModel.getProperty("/title"),
                        description: oCardPropertiesModel.getProperty("/description"),
                        entitySet: oCardPropertiesModel.getProperty("/entitySet"),
                        state: sap.ovp.cards.loading.State.ERROR,
                        template: oCardPropertiesModel.getProperty("/template")
                    }
                }
            };
            //create the loading card
            var oLoadingCard = sap.ui.component(oComponentConfig);
            //set the loading card in the container
            oComponentContainer.setComponent(oLoadingCard);
            //destroy the current card
            setTimeout(function () {
                oCurrentCard.destroy();
            }, 0);
        },

        changeSelection: function (oEvent, bAdaptUIMode) {
            //get the index of the combo box
            var selectedKey;
            if (!bAdaptUIMode) {
                var oDropdown = this.getView().byId("ovp_card_dropdown");
                selectedKey = parseInt(oDropdown.getSelectedKey(), 10);
            } else {
                //change selection has been called from AdaptUI mode
                selectedKey = oEvent.getParameter("selectedKey");
            }
            //update the card properties
            var oTabValue = this.getCardPropertiesModel().getProperty("/tabs")[selectedKey - 1];
            var oUpdatedCardProperties = {
                cardId: this.getOwnerComponent().getComponentData().cardId,
                selectedKey: selectedKey
            };
            for (var prop in oTabValue) {
                oUpdatedCardProperties[prop] = oTabValue[prop];
            }
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.recreateCard(oUpdatedCardProperties, this.getOwnerComponent().getComponentData());
            } else {
                this.getOwnerComponent().getComponentData().mainComponent.recreateCard(oUpdatedCardProperties);
            }
        },

        /**
         * Calculate the offset height of any card component(e.g- header, footer, container, toolbar or each item)
         *
         * @method getItemHeight
         * @param {Object} oGenCardCtrl - Card controller
         * @param {String} sCardComponentId - Component id which height is to be calculated
         * @return {Object} iHeight- Height of the component
         */
        getItemHeight: function (oGenCardCtrl, sCardComponentId, bFlag) {
            if (!!oGenCardCtrl) {
                var aAggregation = oGenCardCtrl.getView().byId(sCardComponentId);
                var iHeight = 0;
                //Null check as some cards does not contain toolbar or footer.
                if (!!aAggregation) {
                    if (bFlag) {
                        //if the height is going to be calculated for any item like <li> in List or <tr> in Table card
                        if (aAggregation.getItems()[0] && aAggregation.getItems()[0].getDomRef()) {
                            iHeight = jQuery(aAggregation.getItems()[0].getDomRef()).outerHeight(true);
                        }
                    } else {
                        if (aAggregation.getDomRef()) {
                            iHeight = jQuery(aAggregation.getDomRef()).outerHeight(true);
                        }
                    }
                }
                return iHeight;
            }
        },

        /**
         * Method to return the layoututil object if the layout is resizable
         *
         * @method getDashboardLayoutUtil
         * @return {Object} oDashboardLayoutUtil - DashboardLayoutUtil object
         */
        getDashboardLayoutUtil: function () {
            var oDashboardLayoutUtil = null;
            var oCompData = this.getOwnerComponent().getComponentData();
            if (oCompData.appComponent) {
                oDashboardLayoutUtil = oCompData.appComponent.getDashboardLayoutUtil();
            }
            return oDashboardLayoutUtil;
        },

        /**
         * Method to return the height of the header component
         *
         * @method getHeaderHeight
         * @return {Integer} iHeaderHeight - Height of the header component
         */
        getHeaderHeight: function () {
            var iHeight = this.getItemHeight(this, 'ovpCardHeader');
            var oCompData = this.getOwnerComponent() ? this.getOwnerComponent().getComponentData() : null;
            if (oCompData) {
                var oCard = this.getDashboardLayoutUtil().dashboardLayoutModel.getCardById(oCompData.cardId);
                return 0 === iHeight ? oCard.dashboardLayout.headerHeight : iHeight;
            } else {
                return iHeight;
            }
        }

    });
})();

}; // end of sap/ovp/cards/generic/Card.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.linklist.AnnotationHelper') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */

(function () {
    "use strict";
    /*global dispatchEvent, document, jQuery, localStorage, sap */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ovp.cards.linklist.AnnotationHelper");

    sap.ovp.cards.linklist.AnnotationHelper = {};

    /*
     * return the sorters that need to be applyed on an aggregation
     * @param ovpCardProperties - card properties model which might contains sort configurations
     * @returns {Array} of model sorters
     */
    function getSorters(ovpCardProperties) {
        var aSorters = [];
        var oSorter, bDescending;

        //get the configured sorter if exist and append them to the sorters array
        var sPropertyPath = ovpCardProperties.getProperty("/sortBy");
        if (sPropertyPath) {
            // If sorting is enabled by card configuration
            var sSortOrder = ovpCardProperties.getProperty("/sortOrder");
            if (sSortOrder && sSortOrder.toLowerCase() !== "descending") {
                bDescending = false;
            } else {
                bDescending = true;
            }
            oSorter = {
                path: sPropertyPath,
                descending: bDescending
            };
            aSorters.push(oSorter);
        }
        // returning Sorter
        return aSorters;
    }

    /*
     * return the filters that need to be applyed on an aggregation
     * @param ovpCardProperties - card properties model which might contains filters configurations
     * @param oSelectionVariant - optional selection variant annotation with SelectOptions configuration
     * @returns {Array} of model filters
     */
    function getFilters(ovpCardProperties, oSelectionVariant) {
        var aFilters = [];
        //get the configured filters if exist and append them to the filter array
        var aConfigFilters = ovpCardProperties.getProperty("/filters");
        if (aConfigFilters) {
            aFilters = aFilters.concat(aConfigFilters);
        }

        //get the filters from the selection variant annotations if exists
        var aSelectOptions = oSelectionVariant && oSelectionVariant.SelectOptions;
        var oSelectOption, sPropertyPath, oRange;
        if (aSelectOptions) {
            for (var i = 0; i < aSelectOptions.length; i++) {
                oSelectOption = aSelectOptions[i];
                sPropertyPath = oSelectOption.PropertyName.PropertyPath;
                //a select option might contains more then one filter in the Ranges array
                for (var j = 0; j < oSelectOption.Ranges.length; j++) {
                    oRange = oSelectOption.Ranges[j];
                    if (oRange.Sign.EnumMember) {
                        //create the filter. the Low value is mandatory
                        var oFilter = {
                            path: sPropertyPath,
                            operator: oRange.Option.EnumMember.split("/")[1],
                            value1: sap.ovp.cards.AnnotationHelper.getPrimitiveValue(oRange.Low),
                            value2: sap.ovp.cards.AnnotationHelper.getPrimitiveValue(oRange.High),
                            sign: oRange.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I" ? "I" : "E"
                        };
                        // exclude sign is supported only with EQ operator
                        if (oFilter.sign === "E" && oFilter.operator !== sap.ui.model.FilterOperator.EQ) {
                            jQuery.sap.log.error("Exclude sign is supported only with EQ operator");
                            continue;
                        }
                        // aFilters will be used later in the flow to create filter object. (sap.ui.model.Filter),
                        // that does not support sign property, so the sign property will be ignored later in the flow.

                        // This getFilters will also be called during navigation to create selection variant.
                        // for selection variant sign property is supported but NE operator is not supported
                        // This case will be handled by the calling function in card.controller
                        if (oFilter.sign === "E" && oFilter.operator === sap.ui.model.FilterOperator.EQ) {
                            oFilter.operator = sap.ui.model.FilterOperator.NE;
                            oFilter.sign = "I";
                        }

                        //append the filter to the filters array
                        aFilters.push(oFilter);
                    }
                }
            }
        }
        // returning Filter
        return aFilters;
    }

    /*
     * This formatter method parses the items aggregation path in the Model.
     * @param iContext
     * @param itemsPath
     * @returns items aggregation path in the Model
     */
    sap.ovp.cards.linklist.AnnotationHelper.formatItems = function (iContext, oEntitySet, oHeaderAnnotation) {
        var oModel = iContext.getSetting("ovpCardProperties");
        var oMetaModel = oModel.getProperty("/metaModel");
        var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
        var sEntitySetPath = "/" + oEntitySet.name;
        var oSelectionVariant = oEntityType[oModel.getProperty("/selectionAnnotationPath")];
        var iItemsLength;
        var layout = oModel.getProperty("/layoutDetail");
        if (layout === 'resizable') {
            var oCardLayout = oModel.getProperty("/cardLayout");
            if (oCardLayout) {
                // Item Length dependent on Card listFlavor
                if (oModel.getProperty("/listFlavor") === "standard") {
                    var typeOfLinklist = "";
                    for (var item in oHeaderAnnotation) {
                        typeOfLinklist += item;
                    }

                    var iRowHeight = oModel.getProperty("/cardLayout/iRowHeigthPx");
                    if (iRowHeight === undefined) {
                        iRowHeight = 16;
                    }
                    var iItemHeight;
                    if (oModel.getProperty("/densityStyle") === "cozy") {
                        //Cozy mode
                        iItemHeight = 72;
                        if ((typeOfLinklist.indexOf("Description") === -1) && ((typeOfLinklist.indexOf("Title") > 0 && typeOfLinklist.indexOf("ImageUrl") > 0 ) || (typeOfLinklist.indexOf("Title") > 0 && typeOfLinklist.indexOf("TypeImageUrl") > 0))) {
                            //one line with image or icon
                            iItemHeight = 56;
                        } else if ((typeOfLinklist.indexOf("Description") === -1) && typeOfLinklist.indexOf("Title") > 0) {
                            iItemHeight = 48;
                        }
                    } else {
                        //Compact Mode
                        iItemHeight = 60;
                        if ((typeOfLinklist.indexOf("Description") === -1) && ((typeOfLinklist.indexOf("Title") > 0 && typeOfLinklist.indexOf("ImageUrl") > 0 ) || (typeOfLinklist.indexOf("Title") > 0 && typeOfLinklist.indexOf("TypeImageUrl") > 0))) {
                            //one line with image or icon
                            iItemHeight = 48;
                        } else if ((typeOfLinklist.indexOf("Description") === -1) && typeOfLinklist.indexOf("Title") > 0) {
                            iItemHeight = 40;
                        }
                    }
                    //If there is no default span is not given in the manifest and the card is loaded for the first time then
                    // we need to calculate rowSpan i.e no of items(Default is 6) * item height + header height + 2 * card top/bottom padding
                    //and set it in noOfItems property as rowSpan property is overridden in onAfterRendering()
                    // Else we have to calculate no of items we can show in the card
                    if (!oModel.getProperty("/defaultSpan") && oModel.getProperty("/cardLayout/autoSpan")) {
                        iItemsLength = oModel.getProperty("/cardLayout/noOfItems");
                        var rowSpan = Math.ceil((iItemsLength * iItemHeight + oModel.getProperty("/cardLayout/headerHeight") + 2 * oModel.getProperty("/cardLayout/iCardBorderPx") ) / iRowHeight);
                        oModel.setProperty("/cardLayout/noOfItems", rowSpan);
                    } else {
                        var dividend = Math.floor(((oCardLayout.rowSpan * iRowHeight) - oModel.getProperty("/cardLayout/headerHeight") + 2 * oModel.getProperty("/cardLayout/iCardBorderPx")));
                        iItemsLength = Math.floor(dividend / iItemHeight) * oCardLayout.colSpan;
                    }
                } else if (oModel.getProperty("/listFlavor") === "grid") {
                    iItemsLength = oCardLayout.rowSpan * oCardLayout.colSpan * 2;
                }
            }
        } else {
            iItemsLength = 6;
        }
        //check if entity set needs parameters
        // if selection-annotations path is supplied - we need to resolve it in order to resolve the full entity-set path
        if (oSelectionVariant) {
            if (oSelectionVariant && oSelectionVariant.Parameters) {
                // in case we have UI.SelectionVariant annotation defined on the entityType including Parameters - we need to resolve the entity-set path to include it
                sEntitySetPath = sap.ovp.cards.linklist.AnnotationHelper.resolveParameterizedEntitySet(iContext.getSetting("dataModel"), oEntitySet,
                    oSelectionVariant);
            }
        }

        var result = "{path: '" + sEntitySetPath + "', length: " + iItemsLength;

        //apply sorters information
        var aSorters = getSorters(oModel);
        if (aSorters.length > 0) {
            result = result + ", sorter:" + JSON.stringify(aSorters);
        }
        //apply filters information
        var aFilters = getFilters(oModel, oSelectionVariant);
        if (aFilters.length > 0) {
            result = result + ", filters:" + JSON.stringify(aFilters);
        }
        result = result + "}";

        // returning the parsed path for the Card's items-aggregation binding
        return result;
    };

    /*
     * This formatter method parses the items Url and extend it with the "baseUrl" if required
     * @param iContext
     * @param sUrl
     * @returns sUrl
     */
    sap.ovp.cards.linklist.AnnotationHelper.formatUrl = function (iContext, sUrl) {
        // We use here lastIndexOf instead of startsWith because it doesn't work on safari (ios devices)
        var sBaseUrl = iContext.getModel().getProperty("/baseUrl");
        if (sUrl.lastIndexOf(sBaseUrl, 0) === 0 || sUrl.indexOf("://") > 0) {
            return sUrl;
        } else if (sUrl.lastIndexOf("/", 0) === 0) {
            return sBaseUrl + sUrl;
        } else {
            return sBaseUrl + "/" + sUrl;
        }
    };

    /* This formatter check whether is ImageUri is true or not
     *
     * @returns true or false
     */
    sap.ovp.cards.linklist.AnnotationHelper.isImageUrl = function (oInterface, oDataField) {
        var bIsImageUrl = true;
        var sOdataPath = sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
        if (sOdataPath.toLowerCase().indexOf("icon") > 0) {
            bIsImageUrl = false;
        }
        return bIsImageUrl;
    };

    /* This formatter check whether is ImageUri is true or not
     *
     * @returns true or false
     */
    sap.ovp.cards.linklist.AnnotationHelper.isImageUrlStaticData = function (oDataField) {
        var bIsImageUrl = true;
        if (oDataField === undefined) {
            return null;
        } else if (oDataField.toLowerCase().indexOf("icon") > 0) {
            bIsImageUrl = false;
        }
        return bIsImageUrl;
    };
    /* This formatter make string to path
     * @returns Icon Path
     */
    sap.ovp.cards.linklist.AnnotationHelper.getIconPath = function (oTypeImageUrl) {
        var sIconPath;
        if (oTypeImageUrl.hasOwnProperty("Path")) {
            sIconPath = "{" + oTypeImageUrl.Path + "}";
        } else {
            sIconPath = oTypeImageUrl.String;
        }
        return sIconPath;
    };

    /* This formatter make string to path
     * @returns Path like {<string>}
     */
    sap.ovp.cards.linklist.AnnotationHelper.formatString = function (sObject) {
        var sPath = "{" + sObject.String + "}";
        return sPath;
    };

    /*
     * @param oAnnotation
     * @returns 0 for false - there are no actions for this context
     *          1 for true - there are actions for this context
     *          does not return actual boolean - so we won't need to parse the result in the xml
     */
    sap.ovp.cards.linklist.AnnotationHelper.linkedAction = function (oAnnotation) {
        if (oAnnotation) {
            return 1;
        }
        return 0;
    };

    sap.ovp.cards.linklist.AnnotationHelper.staticContentWithLength = function (sPath) {
        var sPathWithLength = "{" + sPath + ", length:3}";
        return sPathWithLength;
    };

    sap.ovp.cards.linklist.AnnotationHelper.contentRowIndex = function (oRow) {
        return this.getModel("contentRow").aBindings[0].getContext().getPath().replace("/staticContent/", "");
    };

    //*** Requires IContext ***//
    sap.ovp.cards.linklist.AnnotationHelper.isImageUrl.requiresIContext = true;
    sap.ovp.cards.linklist.AnnotationHelper.formatItems.requiresIContext = true;
    sap.ovp.cards.linklist.AnnotationHelper.formatUrl.requiresIContext = true;
}());
}; // end of sap/ovp/cards/linklist/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.linklist.LinkList.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.linklist.LinkList.controller');
(function() {
	"use strict";
	/*global sap, jQuery */
    

	var ITEMHEIGHT_COZY = 72,
		ITEMHEIGHT_COZY_ONE_LINE_WITH_IMAGE = 56,
		ITEMHEIGHT_COZY_ONE_LINE_WITHOUT_IMAGE = 48,
		ITEMHEIGHT_COMPACT = 60,
		ITEMHEIGHT_COMPACT_ONE_LINE_WITH_IMAGE = 48,
        ITEMHEIGHT_COMPACT_ONE_LINE_WITHOUT_IMAGE = 40,
		CAROUSEL_PAGE_PADDING = 27,
		CAROUSEL_PAGE_INDICATOR = 8,
		LINKLIST_BORDER_TOP = 8,
		LINKLIST_BORDER_BOTTOM = 8,
		OVPLINKLIST = "ovpLinkList",
		PICTURECAROUSEL = "pictureCarousel",
		OVPCARDHEADER = "ovpCardHeader";

	var oDelegateOnBefore = {
		onBeforeRendering: function(oEvent) {
			this.itemOnBeforeRendering(oEvent);
		}
	};
	var oDelegateOnAfter = {
		onAfterRendering: function(oEvent) {
			this.itemOnAfterRendering(oEvent);
		}
	};

	sap.ui.controller("sap.ovp.cards.linklist.LinkList", {

		onInit: function() {
			this._bInitialLoad = true;
            this._bListenerAttached = false;
            this._bListeningPopOver = false;
		},

		onBeforeRendering: function(oEvent) {
			var oCardPropertiesModel = this.getCardPropertiesModel();
			if (oCardPropertiesModel.getProperty("/listFlavor") === "standard" && !oCardPropertiesModel.getProperty("/staticContent")) {
				var oLiItem = this.byId("ovpCLI"); //Only available in case of Backend data
				if (oLiItem) {
					oLiItem.addEventDelegate(oDelegateOnBefore, this); //add a delegated "onBefore" event to the first list item. 
					//By this the method "itemOnBeforeRendering" is called
					//once the item will be rendered
				}
			}
		},

		onAfterRendering: function(oEvent) {
            this.attachingListenerToTheEventRefresh();
			var oCardPropertiesModel = this.getCardPropertiesModel();
			var iRows = oCardPropertiesModel.getProperty("/cardLayout/rowSpan");
			var iCols = oCardPropertiesModel.getProperty("/cardLayout/colSpan");

			switch (oCardPropertiesModel.getProperty("/listFlavor")) {
				case "standard":
                    if (oCardPropertiesModel.getProperty("/staticContent")) {
                        if (iCols && iRows) {
                            //Resizable card Layout
                            if (!this._bInitialLoad && this._aLinkListIds) {
                                this._mergeAllTheDataInOneList();
                            }
                            if (iRows === 1) {
                                this._aLinkListIds = [OVPLINKLIST]; //remember the id of the "List" element in the variable "_aLinkListIds" for further usage
                                this._setListColumnWidthInStandardCard(1);
                            } else {
                                this._itemOnEventBuildStandard(oCardPropertiesModel, iCols, iRows, true); //build the Standard Link List(s)
                            }
                        } else {
							// Fixed card Layout
							this._aLinkListIds = [OVPLINKLIST]; //remember the id of the "List" element in the variable "_aLinkListIds" for further usage
							this._setListColumnWidthInStandardCard(1);
						}
					}
					break;

				case "carousel":
					if (oCardPropertiesModel.getProperty("/staticContent")) {
						//Static Content
                        //If for carousel card, the defaultSpan property is defined in the manifest, "this._setListHeightInCarouselCard(iRows)" will be executed.
                        if (iRows && !(iRows === 1)) {
                            // Resizable card Layout
                            this._setListHeightInCarouselCard(iRows);
                        }

                        this._setCarouselImageProperties(); // size the image properly ( Notice: the image will only be sized properly in case the carousel contains only one image)
					} else {
						// Backend Data
						var oCarousel = this.byId(PICTURECAROUSEL);
						oCarousel.addEventDelegate(oDelegateOnAfter, this); //add a delegated "onAfter" event to the carousel. 
						//By this the method "itemOnBeforeRendering" is called
						//once the carousel is rendered
					}
					break;

				case "grid": //experimental - DON´t USE
					jQuery.sap.log.info("FYI: currently nothing special to handle here");
					break;
			}
            if ('resizable' === oCardPropertiesModel.getProperty('/layoutDetail')) {
                var oCompData = this.getOwnerComponent().getComponentData();
                var oDashboardLayoutUtil = this.getDashboardLayoutUtil();
                var oCard = oDashboardLayoutUtil.dashboardLayoutModel.getCardById(oCompData.cardId);
                var sCardId = oDashboardLayoutUtil.getCardDomId(oCompData.cardId);
                var element = document.getElementById(sCardId);
                oCard.dashboardLayout.showOnlyHeader ? element.classList.add("sapOvpMinHeightContainer") : element.classList.remove("sapOvpMinHeightContainer");
            }
		},

        getCardItemsBinding: function() {
            var linkList = this.getView().byId("ovpLinkList");
            var carousel = this.getView().byId("pictureCarousel");
            if (linkList) {
                return linkList.getBinding("items");
            } else if (carousel) {
                return carousel.getBinding("pages");
            } else {
                return null;
            }
        },

        attachingListenerToTheEventRefresh: function() {
            var oItemsBinding = this.getCardItemsBinding();
            var oCardPropertiesModel = this.getCardPropertiesModel();
            if (oItemsBinding) {
                if (!this._bListenerAttached) {
                    oItemsBinding.attachRefresh(function () {
                        if (this._aLinkListIds) {
                            for (var i = 1; i < this._aLinkListIds.length; i++) {
                                var oListAdd = this.byId(this._aLinkListIds[i]);
                                var iListLength = oListAdd.getItems().length;
                                oListAdd.getItems().splice(0, iListLength);
                                oListAdd.destroy();
                            }
                            this._aLinkListIds.splice(0, this._aLinkListIds.length);
                        }
                        if (this._oListRest) {
                            this._oListRest.destroy();
                        }
                    }.bind(this));
                    oItemsBinding.attachChange(function () {
                        this.settingHeightAndWidthOfLinkListCardsOnManageCardAndFilter();
                        if (oCardPropertiesModel.getProperty("/listFlavor") === "carousel") {
                            var oCarousel = this.byId(PICTURECAROUSEL);
                            oCarousel.addEventDelegate(oDelegateOnAfter, this);
                        }
                        if (oCardPropertiesModel.getProperty("/listFlavor") === "standard") {
                            var iTotal = oItemsBinding.getLength();
                            if (iTotal === 0) {
                                var oDomParent = this.byId(OVPLINKLIST).$().parent();
                                oDomParent.width("100%");
                            }
                        }
                    }.bind(this));
                } else if (this._aLinkListIds) {
                    this.settingHeightAndWidthOfLinkListCardsOnManageCardAndFilter();
                }
                this._bListenerAttached = true;
            }
        },

        settingHeightAndWidthOfLinkListCardsOnManageCardAndFilter: function() {
            if (this._aLinkListIds) {
                var oCardPropertiesModel = this.getCardPropertiesModel();
                var iRows = oCardPropertiesModel.getProperty("/cardLayout/rowSpan");
                var iCols = oCardPropertiesModel.getProperty("/cardLayout/colSpan");
                if (iRows) {
                    this._setListHeightInStandardCard(iRows);
                }
                if (iCols) {
                    this._setListColumnWidthInStandardCard(this._iVisibleColums);
                } else {
                    this._setListColumnWidthInStandardCard(1);
                }
            }
        },

		itemOnBeforeRendering: function(oEvent) {
			var oCardPropertiesModel = this.getCardPropertiesModel();
			switch (oCardPropertiesModel.getProperty("/listFlavor")) {
				case "standard":
                    //If there is no default span is not given in the manifest and the card is loaded for the first time and
                    // not a static card then read rowSpan from noOfItems property as set in annotationHelper
                    //Else read from rosSpan
                    if (!oCardPropertiesModel.getProperty("/defaultSpan") && !oCardPropertiesModel.getProperty("/staticContent") && oCardPropertiesModel.getProperty("/cardLayout/autoSpan")) {
                        var iRows = oCardPropertiesModel.getProperty("/cardLayout/noOfItems");
                    } else {
                        var iRows = oCardPropertiesModel.getProperty("/cardLayout/rowSpan");
                    }
					var iCols = oCardPropertiesModel.getProperty("/cardLayout/colSpan");
					var oList = this.byId(OVPLINKLIST);
					var aListItems = oList.getItems();
					//Loop over all list items and remove the delegated "onBefore" event
					for (var j = 0; j < aListItems.length; j++) {
						aListItems[j].removeEventDelegate(oDelegateOnBefore);
					}
					//build the Standard Link List(s)
					if (this._bInitialLoad) {
						this._itemOnEventBuildStandard(oCardPropertiesModel, iCols, iRows, true);
					} else {
						this._itemOnEventBuildStandard(oCardPropertiesModel, iCols, iRows, false);
					}
					break;

				case "carousel":
					jQuery.sap.log.info("FYI: currently nothing special to handle here");
					break;

				case "grid": //grid: experimental  -- DON´T USE
					jQuery.sap.log.info("FYI: currently nothing special to handle here");
					break;
			}
		},

        //Function to calculate the default row span during initial load for standard Linklist cards.
        getSpansWhenNoDefaultSpanMentioned: function () {
            var oCardPropertiesModel = this.getCardPropertiesModel();
            var iLinkListItemHeight = this._getLinkListItemHeight();
            var iHeaderHeight = 0;
            var oHeader = this.byId(OVPCARDHEADER);
            if (oHeader) {
                iHeaderHeight = oHeader.$().outerHeight();
            }
            var iRowHeight = oCardPropertiesModel.getProperty("/cardLayout/iRowHeightPx");
            return Math.ceil(((iLinkListItemHeight * 6) + ( iHeaderHeight + LINKLIST_BORDER_TOP + LINKLIST_BORDER_BOTTOM)) / iRowHeight);
        },

		itemOnAfterRendering: function(oEvent) {
			var oCardPropertiesModel = this.getCardPropertiesModel();
			var iRows = oCardPropertiesModel.getProperty("/cardLayout/rowSpan");
			var iCols = oCardPropertiesModel.getProperty("/cardLayout/colSpan");
			switch (oCardPropertiesModel.getProperty("/listFlavor")) {
				case "standard":
					//remove the delegated "onAfter" event on the last list item - if necessary it will be added again
					//this step is necessary as the actual last item might be next time not anymore the last item
					try {
						var oList = this.byId(OVPLINKLIST);
						var aListItems = oList.getItems(this._aLinkListIds[this._aLinkListIds.length - 1]);
						aListItems[aListItems.length - 1].removeEventDelegate(oDelegateOnAfter);
					} catch (e) {
						jQuery.sap.log.info("FYI: Unable to remove the delagted event at the last item of the last list");
					}

                    if (!oCardPropertiesModel.getProperty("/defaultSpan") && oCardPropertiesModel.getProperty("/cardLayout/autoSpan")) {
                        iRows = this.getSpansWhenNoDefaultSpanMentioned();
                    }
                    if (iRows) {
                        this._setListHeightInStandardCard(iRows);
                    }

					if (iCols) {
						// Resizable card Layout
						this._setListColumnWidthInStandardCard(this._iVisibleColums);
					} else {
						// Fixed card Layout
						this._setListColumnWidthInStandardCard(1);
					}
					break;

				case "carousel":
					//remove the delegated "onAfter" Event - if necessary if will added again
					try {
						var oCarousel = this.byId(PICTURECAROUSEL);
						oCarousel.removeEventDelegate(oDelegateOnAfter);
					} catch (e) {
						jQuery.sap.log.info("FYI: Unable to remove the delagted event on the carousel");
					}

                    if (iRows && !(iRows === 1)) {
                        // Resizable card Layout
                        this._setListHeightInCarouselCard(iRows);
                    }

					// size the image properly ( Notice: the image will only be sized properly in case the carousel contains only one image)
					this._setCarouselImageProperties();
					break;

				case "grid": //grid: experimental  -- DON´T USE
					jQuery.sap.log.info("FYI: currently nothing special to handle here");
					break;
			}
            this._bInitialLoad = false;
		},

		_itemOnEventBuildStandard: function(oCardPropertiesModel, iCols, iRows, bInitiaLoad) {
			var iPossibleItems;
            var oList = this.byId(OVPLINKLIST);
            var duplicateRestList = this.getView().byId(this.getView().getId() + "--RestOfData");
            //Create a new list as a "container" for list items which are to much for the available space of the card
            if (duplicateRestList) {
                duplicateRestList.destroy();
            }
			if (bInitiaLoad && this._oListRest === undefined) {
				this._oListRest = new sap.m.List(this.getView().getId() + "--RestOfData", {});
			}
			this._aLinkListIds = [OVPLINKLIST]; //remember the id of the "List" element in the variable "_aLinkListIds" for further usage
			this._iAvailableItems = oList.getItems().length; //get the number a available items

			var iCardItems = oCardPropertiesModel.getProperty("/cardLayout/items"); //Number of items to be displayed - only available in Fixed Card Layout

			if (iCardItems !== undefined) {
				//Fixed card Layout
				this._iNoOfItemsPerColumn = iCardItems;
				iPossibleItems = iCardItems;
				this._iVisibleColums = 1;

			} else {
				//Resizable card Layout
				var iItemHeight = ITEMHEIGHT_COZY;
				try {
					iItemHeight = this._getLinkListItemHeight();
				} catch (e) {
					jQuery.sap.log.info("Error: " + e);
				}

				var iLinkListHeight = this._getListHeightInStandardCard(iRows); //calculate the available space for the items of one column

				this._iNoOfItemsPerColumn = Math.floor(iLinkListHeight / iItemHeight); //calculate list length ( = number of items per column )

				var iNeededColums = Math.ceil(this._iAvailableItems / this._iNoOfItemsPerColumn); // number of necessary columns to diplay all available items

				this._iVisibleColums = Math.min(iNeededColums, iCols); //get the number of columns for the card  

				iPossibleItems = this._iVisibleColums * this._iNoOfItemsPerColumn; //calculate the number of items which can be max. displayed on the card

			}
			if (iPossibleItems > this._iAvailableItems) {
				//less data available as space on the card, set iPossibleItems to the number of max. available items 
				iPossibleItems = this._iAvailableItems;
			} else {
                //remove all items which are too much for this card and add them to the "container" list
                for (var i = iPossibleItems; i < this._iAvailableItems; i++) {
                    oList.getItems()[i].setVisible(false);
                }
            }

			if (this._iVisibleColums > 1) {
				//more then one list is necessary so we need to dynamic create additional columns in addition to the one already delcared in the fragment 
				var oListRow = this.byId("ovpListRow");
				var iItemOfList = this._iNoOfItemsPerColumn; //Set the Startindex for the "first" new column
				var iLinkListIdCounter = 0; //ListId-Counter

				for (var j = this._iNoOfItemsPerColumn; j < iPossibleItems; j++) { //Loop over all items for the card
					if (iItemOfList >= this._iNoOfItemsPerColumn) {
						//create a new list as the list/column is filled completely 
						iItemOfList = 0; //reset the counter for the list itmes
						iLinkListIdCounter++; //increase the ListId-Counter
						var sLinkListId = OVPLINKLIST + iLinkListIdCounter;
						var oNewList = new sap.m.List(this.getView().getId() + "--" + sLinkListId, {
							showSeparators: oList.getProperty("showSeparators")
						});
						this._aLinkListIds.push(sLinkListId); //remeber the additional ListId as well 
						//add the necessary StyleClass to the new class
						if (oList.hasStyleClass("_iNoOfItemsPerColumnPaddingCozy")) {
							oNewList.addStyleClass("sapOvpLinkListStandardPaddingCozy");
						} else {
							oNewList.addStyleClass("sapOvpLinkListStandardPaddingCompact");
						}
						oListRow.addItem(oNewList); //add the List to the "HBox" which contains then all the displayed lists of the card
					}
					//add the next item of "original" list to the dynamic created list
					oNewList.addItem(oList.getItems()[this._iNoOfItemsPerColumn]);
					iItemOfList++;
				}
				//add a delegated "onAfter" event to the last item of the card
                //Action item - Need to check with Shashank
                if (oNewList) {
                    var aItemsLastList = oNewList.getItems();
                    aItemsLastList[aItemsLastList.length - 1].addEventDelegate(oDelegateOnAfter, this);
                }
			} else {
				//the card has only one column
				if (bInitiaLoad) {
					//as we are coming from the initial load all items already rendered -> call the method "itemOnAfterRendering" manually
					this.itemOnAfterRendering(null);
				} else {
					//add a delegated "onAfter" event to the last item of the list
					var aListItemsFirstList = oList.getItems();
					aListItemsFirstList[aListItemsFirstList.length - 1].addEventDelegate(oDelegateOnAfter, this);
				}
			}

		},

		/**
		 * Trigger resize of Card
		 * This methode is called by the DashboardLayouter once a card is resized
		 */
		resizeCard: function(newCardLayout) {
			//newCardLayout contains the new size values of the card (rowSpan and colSpan)
			var oCardPropertiesModel = this.getCardPropertiesModel();
			//update the CardPropertiesModel with the new card size values
			oCardPropertiesModel.setProperty("/cardLayout/rowSpan", newCardLayout.rowSpan);
			oCardPropertiesModel.setProperty("/cardLayout/colSpan", newCardLayout.colSpan);

			switch (oCardPropertiesModel.getProperty("/listFlavor")) {
				case "standard":
					this._resizeStandard(newCardLayout, oCardPropertiesModel);
					break;

				case "carousel":
					this._resizeCarousel(newCardLayout);

					break;

				case "grid": //grid: experimental  -- DON´T USE
					this._resizeGrid(newCardLayout);
					break;
			}
            //card was manually resized --> de-register handler
            if (this.resizeHandlerId) {
                sap.ui.core.ResizeHandler.deregister(this.resizeHandlerId);
                this.resizeHandlerId = null;
            }
            var oOvpContent = this.getView().byId('ovpCardContentContainer').getDomRef();
            if (oOvpContent) {
                if (!newCardLayout.showOnlyHeader) {
                    oOvpContent.classList.remove('sapOvpContentHidden');
                } else {
                    oOvpContent.classList.add('sapOvpContentHidden');
                }
            }
		},

        _mergeAllTheDataInOneList: function () {
            var linkListLength = this._aLinkListIds.length;
            var originalList = this.getView().byId("ovpLinkList");
            var iIndex = -1;
            for (var index = 0; index < originalList.getItems().length; index++) {
                if (!originalList.getItems()[index].getVisible()) {
                    iIndex = index;
                    break;
                }
            }
            for (var i = 1; i < linkListLength; i++) {
                var extraList = this.getView().byId(this._aLinkListIds[i]);
                var extraListLength = extraList.getItems().length;
                for (var j = 0; j < extraListLength; j++) {
                    if (iIndex === -1) {
                        originalList.addItem(extraList.getItems()[0]);
                    } else {
                        originalList.insertItem(extraList.getItems()[0], iIndex);
                        iIndex++;
                    }
                }
                extraList.destroy();
            }
        },

		_resizeStandard: function(newCardLayout, oCardPropertiesModel) {
            if (this._aLinkListIds) {
                // 1 Step - select the Original List
                // 2 Step - copy from all addition list the Items to the original List and after that destroy the List
                this._mergeAllTheDataInOneList();
                var oList = this.getView().byId("ovpLinkList");

                this._aLinkListIds.splice(0, this._aLinkListIds.length);

                // 3 Step - copy the saved "rest" to the Original List back as well
                var iRestListLength = this._oListRest.getItems().length;
                try {
                    for (var k = 0; k < iRestListLength; k++) {
                        oList.addItem(this._oListRest.getItems()[0]);
                    }
                } catch (e) {
                    jQuery.sap.log.info("Error: " + e);
                }

                for (var s = 0; s < oList.getItems().length; s++) {
                    oList.getItems()[s].setVisible(true);
                }

                if (!oList) {
                    var oDomParent = this.byId(OVPLINKLIST).$().parent();
                    oDomParent.width("100%");
                    //var oCardPropertiesModel = this.getCardPropertiesModel();
                    var iRows = oCardPropertiesModel.getProperty("/cardLayout/rowSpan");
                    if (iRows) {
                        this._setListHeightInStandardCard(iRows);
                    }
                }

                // 4 Step build additional Lists (and if needed load additional Items from Backend)
                var oBindingInfo = oList.getBindingInfo("items");
                var iItemHeight = this._getLinkListItemHeight();
                var iNewCardHeight = this._getListHeightInStandardCard(newCardLayout.rowSpan);
                var iNewLengthTotal = Math.floor(iNewCardHeight / iItemHeight) * newCardLayout.colSpan; //number of items which could be displayed on the card
                this._bInitialLoad = false;
                jQuery(this.getView().$()).find(".sapOvpWrapper").css({
                    height: iNewCardHeight + "px"
                });
                if (oBindingInfo) {
                    //Card with backend data
                    if (iNewLengthTotal > this._iAvailableItems && oBindingInfo.length <= this._iAvailableItems) {
                        //load addtional data from the backend as more space is available as the already loaded data
                        oBindingInfo.length = iNewLengthTotal;
                        oList.bindItems(oBindingInfo);
                        this._bListenerAttached = false;
                        this.attachingListenerToTheEventRefresh();
                    } else {
                        //build the Standard Link List(s) new
                        this._itemOnEventBuildStandard(oCardPropertiesModel, newCardLayout.colSpan, newCardLayout.rowSpan, false);
                    }
                } else {
                    //Card with static content -> build the Standard Link List(s) new
                    this._itemOnEventBuildStandard(oCardPropertiesModel, newCardLayout.colSpan, newCardLayout.rowSpan, false);
                }
            }
        },

		_resizeCarousel: function(newCardLayout) {
			this._setCarouselImageProperties();
		},

		_resizeGrid: function(newCardLayout) {
			var oGrid = this.getView().byId("ovpLinkListGrid");
			var sOldColSpan = parseInt(this.getView().byId("idColSpan").getValue(), 10);
			var sNewColSpan = newCardLayout.colSpan;
			if (newCardLayout.colSpan > 5) {
				sNewColSpan = 5; // max supported column span
			}
			this.getView().byId("idColSpan").setValue(sNewColSpan);
			//Replace StyleClass dependent on colSpan
			if (sNewColSpan !== sOldColSpan) {
				var sStyleClassOld = "sapOvpCardLinkListGridColSpan" + sOldColSpan;
				oGrid.removeStyleClass(sStyleClassOld);
				var sStyleClassNew = "sapOvpCardLinkListGridColSpan" + sNewColSpan;
				oGrid.addStyleClass(sStyleClassNew);
			}
			//Calculate Items dependent on colSpan and rowSpan
			var iNewLength = newCardLayout.rowSpan * newCardLayout.colSpan * 2;
			var oBindingInfo = oGrid.getBindingInfo("items");
			var oItems = oGrid.getItems();
			if (iNewLength > oItems.length) {
				oBindingInfo.length = iNewLength;
				oGrid.bindItems(oBindingInfo);
			} else if (iNewLength < oItems.length) {
				var sRemoveItems = oItems.length - iNewLength;
				var sLastIndex = oItems.length - 1;
				for (var i = 0; i < sRemoveItems; i++) {
					var iItemIndex = sLastIndex - i;
					oGrid.removeItem(iItemIndex);
				}
			}
		},

		_setListHeightInCarouselCard: function(iRows) {
			var iCarouselHeight = 0;

			if (iRows) {
				//Dashboad Layout -> only in this layout the height might be restricted
				var iHeaderHeight = 0;
				var oHeader = this.byId(OVPCARDHEADER);
				if (oHeader) {
                    //Height of the header
					iHeaderHeight = oHeader.$().outerHeight();
				}

				var oCardPropertiesModel = this.getCardPropertiesModel();
				var iRowHeight = oCardPropertiesModel.getProperty("/cardLayout/iRowHeightPx");

                // iCarouselHeight = ( iRows * RowHeight ) - ( HeaderHeight + Page Padding + Page indicator [dots] )
                iCarouselHeight = (iRows * iRowHeight) - (iHeaderHeight + CAROUSEL_PAGE_PADDING + CAROUSEL_PAGE_INDICATOR);
                var oCarousel = this.byId(PICTURECAROUSEL);
                oCarousel.$().height(iCarouselHeight + 16);
			}
		},

		_setCarouselImageProperties: function() {
			// Check if we have a restriction in two dimensions ( like in the resizable card layout)

			var oCardPropertiesModel = this.getCardPropertiesModel();
			var iRows = oCardPropertiesModel.getProperty("/cardLayout/rowSpan");
			var iCols = oCardPropertiesModel.getProperty("/cardLayout/colSpan");

			if (iRows && iCols) {
				//sets the width and height of the background image in case the carousel shows only one page.
				//check if there is one or more pages in the carousel
				var oCarousel = this.byId(PICTURECAROUSEL),
					oCardHeader = this.byId(OVPCARDHEADER),
					oImg = null,
					oPage = null,
					sImgHeight,
					sImgWidth;

				if (oCarousel.getPages().length === 1 && oCardHeader) {
					// try to get a reference to the cards image - if there is one it should be the last item of the page
					oPage = sap.ui.getCore().byId(oCarousel.getActivePage());
					if (oPage && oPage.getItems()[oPage.getItems().length - 1] instanceof sap.m.Image) {
						oImg = oPage.getItems()[oPage.getItems().length - 1];
						//calc image heigth -> needs to be set explicitly for background images
						//the image shall use the complete card minus the cards' pseudo header
						if (oPage.getItems().length === 1) {
							//the page contains only the picture
							sImgHeight = oCarousel.$().height();
						} else {
							// there is a inner header -> reduce picture height accordingly
							// the inner header is the first item of the page
							sImgHeight = oCarousel.$().height() - oPage.getItems()[0].$().outerHeight();
						}
						if (sImgHeight) {
							sImgHeight = sImgHeight + "px";
							oImg.setHeight(sImgHeight);
						}
						//calc image width -> needs to be set explicitly for background images
						//the image witdth shall be the same as the cards pseudo header width
						sImgWidth = oCardHeader.$().outerWidth();
						if (sImgWidth) {
							sImgWidth = sImgWidth + "px";
							oImg.setWidth(sImgWidth);
						}
						oImg.setMode(sap.m.ImageMode.Background);
						oImg.setBackgroundPosition("center center");
					}
				}
			}
		},

		_setListHeightInStandardCard: function(iRows) {
			var nLinkListHeight = 0;
			var oList;
			var oDomParent;
            oList = this.byId(OVPLINKLIST);
            if (oList) {
                nLinkListHeight = this._getListHeightInStandardCard(iRows);
                oDomParent = oList.$().parent();
                oDomParent.height(nLinkListHeight);
            }
            if (this._aLinkListIds) {
                //Loop over all created standard lists and set the corresponding height
                for (var i = 1; i < this._aLinkListIds.length; i++) {
                    oList = this.byId(this._aLinkListIds[i]);
                    nLinkListHeight = this._getListHeightInStandardCard(iRows);
                    oDomParent = oList.$().parent();
                    oDomParent.height(nLinkListHeight);
                }
            }
		},

		_getListHeightInStandardCard: function(iRows) {
			var iLinkListHeight = 0;
			var oCardPropertiesModel = this.getCardPropertiesModel();
			if (iRows) {
				var iHeaderHeight = 0;
				var oHeader = this.byId(OVPCARDHEADER);
				if (oHeader) {
					iHeaderHeight = oHeader.$().outerHeight();
				}
				var iRowHeight = oCardPropertiesModel.getProperty("/cardLayout/iRowHeightPx");
				iLinkListHeight = (iRows * iRowHeight) - ( iHeaderHeight + LINKLIST_BORDER_TOP  + LINKLIST_BORDER_BOTTOM);
			}
			return iLinkListHeight;
		},

		_setListColumnWidthInStandardCard: function(iCols) {
			var oList;
			var oDomParent;
			var sColumnWidth = "100%";
            if (this._aLinkListIds) {
                if (this._aLinkListIds.length > 1) {
                    //more then one lists are created -> columnWidth = 100% / columns
                    //loop over all lists and set the columnWidth
                    for (var j = 0; j < this._aLinkListIds.length; j++) {
                        oList = this.byId(this._aLinkListIds[j]);
                        oDomParent = oList.$().parent();
                        sColumnWidth = (100 / iCols) + "%";
                        oDomParent.width(sColumnWidth);
                    }
                } else {
                    //only one list was created -> columnWidth = 100%
                    oList = this.byId(this._aLinkListIds[0]);
                    if (oList) {
                        oDomParent = oList.$().parent();
                        oDomParent.width(sColumnWidth);
                    }
                }
            }
		},

		_getLinkListItemHeight: function(sListId) {
			var sLiId = (sListId) ? sListId : OVPLINKLIST;
			var oCardPropertiesModel = this.getCardPropertiesModel(),
				oList = this.byId(sLiId),
				iItemHeight = ITEMHEIGHT_COZY,
				sPicture = "",
				bTitle = false,
				bSubTitle = false,
				iNoOfLines = 1,
				density = oCardPropertiesModel.getProperty("/densityStyle"),
				iTitleIndex = 0,
				iSubTitleIndex = 0;

			//Loop over all items unil the item contain a "picture" - check if it´s a icon or a image 
			var aListItems = oList.getItems();
			for (var j = 0; j < aListItems.length; j++) {
				try {
					var sPictureUrl = aListItems[j]
						.getAggregation("content")[0]
						.getAggregation("items")[0]
						.getAggregation("items")[0]
						.getAggregation("items")[0]
						.getProperty("src");
					if (sPictureUrl.length > 0) {
						if (sPictureUrl.toLowerCase().indexOf("icon") > 0) {
							sPicture = "icon";
						} else {
							sPicture = "image";
						}
						iTitleIndex = 1; //increase the TitleIndex as the Item contains a picture (needed to access the "Title" below)
						break;
					}
				} catch (e) {
					jQuery.sap.log.info("Item:" + j + " doesn´t contain a image");
				}
			}

            //Title
            try {
                var sTitle = oList.getItems()[0]
                    .getAggregation("content")[0]
                    .getAggregation("items")[iTitleIndex]
                    .getAggregation("items")[0].getProperty("text");

                bTitle = sTitle.length > 0;
                iSubTitleIndex = 1;
            } catch (e) {
                jQuery.sap.log.info("Item doesn´t contain a title");
            }

            //SubTitle
            try {
                var sSubTitle = oList.getItems()[0]
                    .getAggregation("content")[0]
                    .getAggregation("items")[iTitleIndex]
                    .getAggregation("items")[iSubTitleIndex]
                    .getProperty("text");

                bSubTitle = sSubTitle.length > 0;
            } catch (e) {
                jQuery.sap.log.info("Item doesn´t contain a subTitle");
            }

            if (bTitle === true && bSubTitle === true) {
                iNoOfLines = 2;
            }

			if (density === "cozy") {
				iItemHeight = ITEMHEIGHT_COZY;
				if (iNoOfLines === 1) {
					iItemHeight = sPicture !== "image" ? ITEMHEIGHT_COZY_ONE_LINE_WITHOUT_IMAGE : ITEMHEIGHT_COZY_ONE_LINE_WITH_IMAGE;
				}
			} else {
				iItemHeight = ITEMHEIGHT_COMPACT;
				if (iNoOfLines === 1) {
					iItemHeight = sPicture !== "image" ? ITEMHEIGHT_COMPACT_ONE_LINE_WITHOUT_IMAGE : ITEMHEIGHT_COMPACT_ONE_LINE_WITH_IMAGE;
				}
			}
			return iItemHeight;
		},

		/**
		 * Navigates in case of usage of local data in the content of the card
		 */
		onLinkListItemPressLocalData: function(oEvent) {
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                var sTargetUrl = oEvent.getSource().data("targetUri");
                var sInNewWindow = oEvent.getSource().data("openInNewWindow");
                var sBaseUrl = this.getView().getModel("ovpCardProperties").getProperty("/baseUrl");

                if (sTargetUrl) {
                    sTargetUrl = this.buildUrl(sBaseUrl, sTargetUrl);

                    if (sInNewWindow === "true") {
                        window.open(sTargetUrl);
                    } else {
                        window.location.href = sTargetUrl;
                    }
                }
            }
		},

		/**
		 * Calls a function import in case of usage of local data in the content of the card
		 */
		onLinkListActionPressLocalData: function(oEvent) {
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                var sAction = oEvent.getSource().data("dataAction");

                this.getView().getModel().callFunction(sAction, {
                    method: "POST",
                    urlParameters: {
                        FunctionImport: sAction
                    },
                    success: (this.onFuImpSuccess.bind(this)),
                    error: (this.onFuImpFailed.bind(this))
                });
            }
		},

		onFuImpSuccess: function(oEvent) {
			sap.m.MessageToast.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Success"), {
				duration: 3000
			});
		},

		onFuImpFailed: function(oResponse) {
			sap.m.MessageToast.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Error"), {
				duration: 3000
			});
		},

		onLinkListItemPress: function(oEvent) {
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                var aNavigationFields = this.getEntityNavigationEntries(oEvent.getSource().getBindingContext(),
                    this.getCardPropertiesModel().getProperty("/annotationPath"));
                this.doNavigation(oEvent.getSource().getBindingContext(), aNavigationFields[0]);
            }
		},

		/**
		 * Open the Details Popover
		 */
		onLinkPopover: function(oEvent) {
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                var oPopover;
                switch (this.getCardPropertiesModel().getProperty("/listFlavor")) {
                    case "grid": //grid: experimental  -- DON´T USE
                        oPopover = oEvent.getSource().getParent().getParent().getParent().getParent().getParent()
                            .getAggregation("items")[1].getAggregation("items")[1];
                        break;

                    case "standard":
                        oPopover = this.getView().byId("ovpListRow").getParent().getAggregation("items")[2];
                        if (!oPopover) {
                            oPopover = this.getView().byId("ovpListRow").getParent().getAggregation("items")[1];
                        }
                        break;

                    case "carousel":
                        if (oEvent.getParameter("id").indexOf("link") > 0) {
                            oPopover = oEvent.getSource().getParent().getParent().getParent().getParent()
                                .getAggregation("items")[1];
                        } else {
                            oPopover = oEvent.getSource().getParent().getParent().getParent().getAggregation("items")[1];
                        }
                        break;
                }

                var oCardPropertiesModel = this.getCardPropertiesModel();
                if (oCardPropertiesModel.getProperty("/listFlavor") === "carousel") {
                    var oCarousel = this.byId(PICTURECAROUSEL);
                    oCarousel.addEventDelegate(oDelegateOnAfter, this);
                }
                oPopover.bindElement(oEvent.getSource().getBindingContext().getPath());
                oPopover.openBy(oEvent.getSource());
                if (!this._bListeningPopOver) {
                    oPopover.attachAfterOpen(function () {
                        this.settingHeightAndWidthOfLinkListCardsOnManageCardAndFilter();
                    }.bind(this));
                }
                this._bListeningPopOver = true;
            }
		},
		
		/* navigation to LineItem 0 Url */
        onLinkListLineItemUrl: function (oEvent) {
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                var sTargetUrl,
                    sAnnotationPath = "com.sap.vocabularies.UI.v1.LineItem",
                    oNavigation = this.entityType[sAnnotationPath][0].Url;
                if (oNavigation.hasOwnProperty("String")) {
                    sTargetUrl = oNavigation.String;
                } else {
                    var oNavigationFields = this.getEntityNavigationEntries(oEvent.getSource().getBindingContext(), sAnnotationPath)[0];
                    sTargetUrl = oNavigationFields.url;
                }
                if (sTargetUrl) {
                    window.location.href = sTargetUrl;
                } else {
                    jQuery.sap.log.info("LinkList Standard Card: No Navigation on line item");
                }
            }
        },

		/**
		 * Do CrossApplicationNavigation using the Identification annotation - all items have the same target app
         *
         * The second parameter to the function "getEntityNavigationEntries" is mentioned as "undefined" for enabling qualifier support.
		 */
        onLinkNavigationSingleTarget: function (oEvent) {
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                var aNavigationFields = this.getEntityNavigationEntries(oEvent.getSource().getBindingContext(), undefined);
                this.doNavigation(oEvent.getSource().getBindingContext(), aNavigationFields[0]);
            }
        },

		/**
		 * Do CrossApplicationNavigation
		 */
		onLinkNavigation: function(oEvent) {
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                if (sap.ushell.Container.getService("CrossApplicationNavigation")) {
                    var oBindingContext = oEvent.getSource().getBindingContext();
                    //var oNavArguments = {target : {	semanticObject : "Action",	action : "toappnavsample"} }; // for test with testOVP.html
                    if (oBindingContext.getProperty("SemanticObject")) {
                        var oNavArguments = {
                            target: {
                                semanticObject: oBindingContext.getProperty("SemanticObject"),
                                action: oBindingContext.getProperty("SemanticAction")
                            }
                        };
                        sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oNavArguments);
                    }
                }
            }
		},

		/**
		 * Create the URL 
		 */
		buildUrl: function(sBaseUrl, sManifestUrl) {
            // We use here lastIndexOf instead of startsWith because it doesn't work on safari (ios devices)
			if (sManifestUrl.lastIndexOf(sBaseUrl,0) === 0 || sManifestUrl.indexOf("://") > 0) {
				return sManifestUrl;
			} else if (sManifestUrl.lastIndexOf("/",0) === 0) {
				return sBaseUrl + sManifestUrl;
			} else {
				return sBaseUrl + "/" + sManifestUrl;
			}
		},
		/**
		 * Calls a function import for trigger an action
		 */
		onLinkListActionPress: function(oEvent) {
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                var sAction = oEvent.getSource().data("dataAction");

                this.getView().getModel().callFunction(sAction, {
                    method: "POST",
                    urlParameters: {
                        FunctionImport: sAction
                    },
                    success: (this.onFuImpSuccess.bind(this)),
                    error: (this.onFuImpFailed.bind(this))
                });
            }
		},

		/**
		 * CrossApp Navigation with staticContent
		 */
		onLinkListSemanticObjectPressLocalData: function(oEvent) {
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                var iRowIndex = parseInt(oEvent.getSource().data("contentRowIndex"), 10);
                this._oStaticContent = this.getCardPropertiesModel().getProperty("/staticContent");

                if (this._oStaticContent[iRowIndex].semanticObject && this._oStaticContent[iRowIndex].action) {
                    var oNavArguments = {
                        target: {
                            semanticObject: this._oStaticContent[iRowIndex].semanticObject,
                            action: this._oStaticContent[iRowIndex].action
                        },
                        params: this._oStaticContent[iRowIndex].params
                    };
                    var oIntent = this._oStaticContent[iRowIndex];
                    this.doCrossApplicationNavigation(oIntent, oNavArguments);
                } else {
                    sap.m.MessageToast.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Error"), {
                        duration: 3000
                    });
                }
            }
		}
	});
})();
}; // end of sap/ovp/cards/linklist/LinkList.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.list.List.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.list.List.controller');
(function () {
    "use strict";
    /*global sap, jQuery */
    

    sap.ui.controller("sap.ovp.cards.list.List", {
        counter: 0,
        arrayLength: 0,
        minMaxModel: {},
        onInit: function () {
            this.counter = 0;
            this.minMaxModel = new sap.ui.model.json.JSONModel();
            this.minMaxModel.setData({
                minValue: 0,
                maxValue: 0
            });
            this.getView().setModel(this.minMaxModel, "minMaxModel");
        },

        onAfterRendering: function () {

            var isImageCard = this.getCardPropertiesModel().oData.imageSupported;
            var densityStyle = this.getCardPropertiesModel().oData.densityStyle;
            if (isImageCard && isImageCard === "true") {

                var imageList = this.byId('ovpList');

                /**
                 * This function does some CSS changes after the card is rendered
                 */
                imageList.attachUpdateFinished(
                    function () {
                        var iL = this.byId('ovpList');
                        var items = iL.getItems();
                        var isIcon = false;
                        var cls = iL.getDomRef().getAttribute("class");

                        if (densityStyle === "cozy") {
                            cls = cls + " sapOvpListImageCozy";
                        } else {
                            cls = cls + " sapOvpListImageCompact";
                        }

                        iL.getDomRef().setAttribute("class", cls);

                        /**
                         * Looping through all elements in the displayed list to find out
                         * if it is icon or image type card,
                         * the size of the icon/image varies accordingly
                         */
                        items.forEach(
                            function (item) {
                                if (item.getIcon().indexOf("icon") != -1) {
                                    isIcon = true;
                                }
                            }
                        );

                        items.forEach(
                            function (item) {

                                var listItemRef = item.getDomRef();
                                var imgIcon;
                                if ( listItemRef && listItemRef.children[0] && listItemRef.children[0].children[0] ) {
                                   imgIcon = listItemRef.children[0].children[0];
                                }
                                var itemDescription = item.getDescription();
                                var icon = item.getIcon();
                                var tIcon = isIcon;
                                var title = item.getTitle();

                                var initials = title.split(' ').map(function (str) {
                                    return str ? str[0].toUpperCase() : "";
                                }).join('').substring(0, 2);

                                /**
                                 * Condition for card in which images and icons are present
                                 * we are checking if any list item is an image to set
                                 * appropriate CSS
                                 */
                                if (icon != "" && icon.indexOf("icon") == -1) {
                                    isIcon = false;
                                }

                                if (imgIcon && densityStyle === "cozy" && isIcon === false) {
                                    if (imgIcon) {
                                        var cls = imgIcon.getAttribute("class");
                                        cls = cls + " sapOvpImageCozy";
                                        imgIcon.setAttribute("class", cls);
                                    }
                                }

                                var itemStyle = "";
                                if (isIcon === true && itemDescription === "") {
                                    itemStyle = densityStyle === "compact" ? "sapOvpListWithIconNoDescCompact" : "sapOvpListWithIconNoDescCozy";
                                } else if (isIcon === false && itemDescription === "") {
                                    itemStyle = densityStyle === "compact" ? "sapOvpListWithImageNoDescCompact" : "sapOvpListWithImageNoDescCozy";
                                } else {
                                    itemStyle = densityStyle === "compact" ? "sapOvpListWithImageIconCompact" : "sapOvpListWithImageIconCozy";
                                }

                                item.addStyleClass(itemStyle);

                                if (listItemRef && listItemRef.children[0] && icon === "" && listItemRef.children[0].id !== "ovpIconImagePlaceHolder") {
                                    var placeHolder = document.createElement('div');
                                    placeHolder.innerHTML = initials;
                                    placeHolder.setAttribute("id", "ovpIconImagePlaceHolder");
                                    placeHolder.className = isIcon === true ? "sapOvpIconPlaceHolder" : "sapOvpImagePlaceHolder";
                                    if (isIcon === false && densityStyle === "cozy") {
                                        placeHolder.className = placeHolder.className + " sapOvpImageCozy";
                                    }
                                    listItemRef.insertBefore(placeHolder, listItemRef.children[0]);
                                }
                                isIcon = tIcon;

                            }
                        );
                    }.bind(this));
            }
            var oCompData = this.getOwnerComponent().getComponentData();
            if (this.getCardPropertiesModel().getProperty("/layoutDetail") === "resizable") {
                var oDashboardLayoutUtil = this.getDashboardLayoutUtil();
                var oCard = oDashboardLayoutUtil.dashboardLayoutModel.getCardById(oCompData.cardId);
                var iHeaderHeight = this.getHeaderHeight();
                var sCardId = oDashboardLayoutUtil.getCardDomId(oCompData.cardId);
                var element = document.getElementById(sCardId);
                if (!oCard.dashboardLayout.autoSpan) {
                    element.getElementsByClassName('sapOvpWrapper')[0].style.height =
                        (oCard.dashboardLayout.rowSpan * oDashboardLayoutUtil.ROW_HEIGHT_PX) - (iHeaderHeight + 2 * oDashboardLayoutUtil.CARD_BORDER_PX) + "px";
                }
                if (oCard.dashboardLayout.showOnlyHeader) {
                    element.classList.add("sapOvpMinHeightContainer");
                }
            }
        },

        
        onListItemPress: function (oEvent) {
            /*
             On Content click of OVP Cards used as an API in other Applications
             */
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                var aNavigationFields = this.getEntityNavigationEntries(oEvent.getSource().getBindingContext(), this.getCardPropertiesModel().getProperty("/annotationPath"));
                this.doNavigation(oEvent.getSource().getBindingContext(), aNavigationFields[0]);
            }
        },

        /**
         * This function loops through context values and gets
         * the Max & Min Value for the card in 'this'
         * context(ie different for different cards)
         * Requirement: In case of global filters applied context changes and Max and Min should also change
         * Drawback : Max and Min are calculated for each list Items again considering all items in context.
         * */
        _getMinMaxObjectFromContext: function (noOfItems) {
            this.counter++;
            var oEntityType = this.getEntityType(),
                sAnnotationPath = this.getCardPropertiesModel().getProperty("/annotationPath"),
                aRecords = oEntityType[sAnnotationPath],
                context = this.getMetaModel().createBindingContext(oEntityType.$path + "/" + sAnnotationPath),
                minMaxObject = {
                    minValue: 0,
                    maxValue: 0
                };

            //Case 1:  In case of percentage
            if (sap.ovp.cards.AnnotationHelper.isFirstDataPointPercentageUnit(context, aRecords)) {
                minMaxObject.minValue = 0;
                minMaxObject.maxValue = 100;
                return minMaxObject;
            }

            //Case 2: Otherwise
            var dataPointValue = sap.ovp.cards.AnnotationHelper.getFirstDataPointValue(context, aRecords),
                barList = this.getView().byId("ovpList"),
                listItems = barList.getBinding("items"),
                oModel = this.getModel(),
                itemsContextsArray = listItems.getCurrentContexts();
            for (var i = 0; noOfItems ? i < noOfItems : i < itemsContextsArray.length; i++) {
                /*To get original value by going through relative paths in case of slash*/
                var originalValue = oModel.getOriginalProperty(dataPointValue,itemsContextsArray[i]),
                    currentItemValue = parseFloat(originalValue, 10);
                if (currentItemValue < minMaxObject.minValue) {
                    minMaxObject.minValue = currentItemValue;
                } else if (currentItemValue > minMaxObject.maxValue){
                    minMaxObject.maxValue = currentItemValue;
                }
            }
            return minMaxObject;
        },

        /**
         *  this function
         *  1.updates both min and max values in 'this' context
         *  and
         *  2.then updates the model attached to that particular card
         *  3.then refreshes the model to affect the changes
         *  */
        _updateMinMaxModel: function ( noOfItems) {
            var minMaxObject = this._getMinMaxObjectFromContext(noOfItems);
            this.minMaxModel.setData({
                minValue: minMaxObject.minValue,
                maxValue: minMaxObject.maxValue
            });
            this.minMaxModel.refresh();
            return minMaxObject;
        },

        /**
         * this function call update method and return the value.
         * */
        returnBarChartValue: function (value) {
            var minMaxObject = this._updateMinMaxModel();
            var iValue = parseFloat(value, 10);
            // In case of values are not between (-1,1) show value as is
            if (iValue !== 0) {
                return iValue;
                // If max Value is Zero,Min Value very less and Values is zero then show minimal value in negative
            } else if (minMaxObject.maxValue == 0 && minMaxObject.minValue < -10) {
                return -0.1;
                // If min Value is Zero,Max Value very large and Values is zero then show minimal value in positive
            } else if (minMaxObject.minValue == 0 && minMaxObject.maxValue > 10) {
                return 0.1;
            }
            //If both Max is equal to zero and min is equal to zero ,Show value as it is.
            return iValue;

        },

        /**
         * Gets the card items binding object for the count footer
         */
        getCardItemsBinding: function () {
            var list = this.getView().byId("ovpList");
            return list.getBinding("items");
        },

        /**
         * Gets the card items binding info
         */
        getCardItemBindingInfo: function () {
            var oList = this.getView().byId("ovpList");
            return oList.getBindingInfo("items");
        },
        /**
         * Method called upon card resize
         *
         * @method resizeCard
         * @param {Object} newCardLayout- resize data of the card
         * @return {Object} cardSizeProperties - card properties
         */
        resizeCard: function (newCardLayout, cardSizeProperties) {
            var iNoOfItems, iAvailableSpace;
            try {
                var oBindingInfo = this.getCardItemBindingInfo();
                var iHeaderHeight = this.getHeaderHeight();
                var oOvpContent = this.getView().byId('ovpCardContentContainer').getDomRef();
                var iAvailableSpace = newCardLayout.rowSpan * newCardLayout.iRowHeightPx - ( iHeaderHeight + cardSizeProperties.dropDownHeight + 2 * newCardLayout.iCardBorderPx);
                if (oOvpContent) {
                    newCardLayout.showOnlyHeader ? oOvpContent.classList.add('sapOvpContentHidden') : oOvpContent.classList.remove('sapOvpContentHidden');
                    oOvpContent.style.height = (newCardLayout.rowSpan * newCardLayout.iRowHeightPx) - ( iHeaderHeight + 2 * newCardLayout.iCardBorderPx) + "px";
                }
                iNoOfItems = Math.floor(iAvailableSpace / cardSizeProperties.itemHeight);
                oBindingInfo.length = Math.abs(iNoOfItems);
                newCardLayout.noOfItems = oBindingInfo.length;
                this._updateMinMaxModel(oBindingInfo.length);
                this.getCardItemsBinding().refresh();
            } catch (error) {
                jQuery.sap.log.warning("OVP resize: " + this.cardId + " catch " + error.toString());
            }
        }
    });
})();

}; // end of sap/ovp/cards/list/List.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.loading.Loading.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.loading.Loading.controller');
(function () {
    "use strict";
    /*global sap, jQuery */
    

    sap.ui.controller("sap.ovp.cards.loading.Loading", {

        onInit: function () {

        },

        onAfterRendering: function() {
            /*
             *  If bPageAndCardLoading flag is set to true then it will
             *  run the page and card loading
             *  This will be removed in the next wave
             */
            if (sap.ovp.cards.LoadingUtils.bPageAndCardLoading) {
                var oView = this.getView();
                oView.addStyleClass("sapOvpLoadingCard");
                var that = this;
                var sState = this.getCardPropertiesModel().getProperty("/state");
                if (sState !== sap.ovp.cards.loading.State.ERROR) {
                    var oCanvas = oView.byId("sapOvpLoadingCanvas").getDomRef();
                    var sHeight = "30rem";
                    oCanvas.style.width = '100%';
                    oCanvas.style.height = sHeight;
                    var oParent = oCanvas.parentNode;
                    oParent.style.width = '100%';
                    oParent.style.position = 'absolute';
                    oParent.style.top = '0px';
                    var oDiv = oView.byId("ovpCardContentContainer").getDomRef();
                    oDiv.style.position = 'absolute';
                    oDiv.style.zIndex = '-3';

                    sap.ovp.cards.LoadingUtils.aCanvas.push(oCanvas);
                    setTimeout(function () {
                        /**
                         * Start of busy indicator earlier before loading cards were redesigned.
                         */
                    }, 6000);
                    setTimeout(function () {
                        sap.ovp.cards.LoadingUtils.bAnimationStop = true;
                        that.setErrorState();
                    }, 9000);
                }
                setTimeout(function () {
                    if (!sap.ovp.cards.LoadingUtils.bAnimationStarted) {
                        sap.ovp.cards.LoadingUtils.startAnimation();
                        sap.ovp.cards.LoadingUtils.bAnimationStarted = true;
                    }
                }, 0);
            } else {
                //Fix for the loading card in resizable layout - Two lines are shown on loading card
                if (this.getCardPropertiesModel().getProperty('/layoutDetail') === 'resizable') {
                    var oCard = this.getDashboardLayoutUtil().dashboardLayoutModel.getCardById(this.cardId);
                    var headerFragment = this.getView().byId('ovpCardHeader').getDomRef();
                    var footerFragment = this.getView().byId('ovpCardLoadingFooter').getDomRef();
                    var iCardHeight = oCard.dashboardLayout.rowSpan * this.getDashboardLayoutUtil().ROW_HEIGHT_PX;
                    var iHeaderHeight = headerFragment ? headerFragment.offsetHeight : 0;
                    if (footerFragment) {
                        footerFragment.style.height = iCardHeight - iHeaderHeight + 'px';
                    }
                }
                var oView = this.getView();
                oView.addStyleClass("sapOvpLoadingCard");
                var loadingFooter = oView.byId("ovpLoadingFooter");

                var sState = this.getCardPropertiesModel().getProperty("/state");

                if (sState === sap.ovp.cards.loading.State.ERROR) {
                    loadingFooter.setText(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("cannotLoadCard"));
                } else {
                    //sState === sap.ovp.cards.loading.State.LOADING
                    setTimeout(function () {
                        loadingFooter.setBusy(true);
                    }, 6000);

                    setTimeout(function () {
                        loadingFooter.setBusy(false);
                        loadingFooter.setText(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("cannotLoadCard"));
                    }, 9000);
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/loading/Loading.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.rta.SettingsDialog.controller') ) {
jQuery.sap.declare('sap.ovp.cards.rta.SettingsDialog.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.descriptorRelated.api.DescriptorChangeFactory'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.descriptorRelated.api.DescriptorInlineChangeFactory'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.valuehelpdialog.ValueHelpDialog'); // unlisted dependency retained
sap.ui.define("sap/ovp/cards/rta/SettingsDialog.controller",[ 'sap/ui/core/mvc/Controller',
    'sap/ui/model/json/JSONModel',
    '/sap/ui/fl/descriptorRelated/api/DescriptorChangeFactory',
    '/sap/ui/fl/descriptorRelated/api/DescriptorInlineChangeFactory',
    'sap/ovp/cards/CommonUtils',
    'sap/ovp/cards/SettingsUtils',
    'sap/m/Button',
    'sap/m/Dialog',
    'sap/m/Text',
    'sap/ui/comp/valuehelpdialog/ValueHelpDialog'
], function(Controller, JSONModel, DescriptorChangeFactory, DescriptorInlineChangeFactory,
            commonUtils, settingsUtils, Button, Dialog, Text, ValueHelpDialog) {
    'use strict';

    return Controller.extend('sap.ovp.cards.rta.SettingsDialog', {

        /* To store manifest setting of selected Card*/
        _oCardManifestSettings : {},
        /* To store all Manifest settings*/
        _oManifest : {},
        /*To Store Form Container*/
        _oFormContainer : {},
        /*To store the elements that do not require refresh when updated*/
        _aRefreshNotRequired : [{
                     "formElementId" : "sapOvpSettingsTitle",
                     "cardElementId" : "ovpHeaderTitle"
                 },
                 {
                     "formElementId" : "sapOvpSettingsSubTitle",
                     "cardElementId" : "SubTitle-Text"
                 },
                 {
                     "formElementId" : "sapOvpSettingsLineItemTitle",
                     "cardElementId" : "linkListTitleLabel"
                 },
                 {
                     "formElementId" : "sapOvpSettingsLineItemSubTitle",
                     "cardElementId" : "linkListSubTitleLabel"
                 },
                 {
                     "formElementId" : "sapOvpSettingsValueSelectionInfo",
                     "cardElementId" : "ovpValueSelectionInfo"
                 },
                 {
                     "formElementId" : "sapOvpSettingsIdentification",
                     "cardElementId" : "",
                     "updateProperty" : "identificationAnnotationPath"
                 },
                 {
                     "formElementId" : "sapOvpSettingsKPIHeaderSwitch",
                     "cardElementId" : "kpiHeader",
                     "isKpiSwitch" : true //If it's a switch, update without refresh only if state = true
                 }],
        _aRefreshRequired : [
                 {
                     "formElementId" : "sapOvpSettingsKPIHeaderSwitch",
                     "updateProperty" : "kpiHeader"
                 },
                 {
                    "formElementId" : "sapOvpSettingsListType",
                    "updateProperty" : "listType"
                 },
                 {
                    "formElementId" : "sapOvpSettingsListFlavor",
                    "updateProperty" : "listFlavor"
                 },
                 {
                     "formElementId" : "sapOvpSettingsSortOrder",
                     "updateProperty" : "sortOrder"
                 },
                 {
                     "formElementId" : "sapOvpSettingsSortBy",
                     "updateProperty" : "sortBy"
                 },
                 {
                     "formElementId" : "sapOvpSettingsFilterBy",
                     "updateProperty" : "selectionAnnotationPath"
                 },
                 {
                     "formElementId" : "sapOvpSettingsPresentedBy",
                     "updateProperty" : "presentationAnnotationPath"
                 },
                 {
                     "formElementId" : "sapOvpSettingsDataPoint",
                     "updateProperty" : "dataPointAnnotationPath"
                 },
                 {
                     "formElementId" : "sapOvpSettingsChart",
                     "updateProperty" : "chartAnnotationPath"
                 },
                 {
                     "formElementId" : "sapOvpSettingsLineItem",
                     "updateProperty" : "annotationPath"
                 }
        ],

        validateInputField: function (oEvent) {
            if (!oEvent.getSource().getValue()) {
                var dialog = new Dialog({
                    title: 'Error',
                    type: 'Message',
                    state: 'Error',
                    content: new Text({
                        text: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText('OVP_KEYUSER_INPUT_ERROR')
                    }),
                    beginButton: new Button({
                        text: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText('close'),
                        press: function () {
                            dialog.close();
                        }
                    }),
                    afterClose: function() {
                        dialog.destroy();
                    }
                });
                dialog.open();
            } else {
                this.updateCard(oEvent);
            }
        },
        onInit : function() {
            /*Attaching CreateAndSubmitChange button to oSaveButton*/
            settingsUtils.oSaveButton.attachPress(this.createAndSubmitChange,this);
        },

        onAfterRendering : function() {
            this._oCardManifestSettings = this.getView().getModel().getData();
            setTimeout( function(){
                this.getView().byId("dialogCard").setBusy(false);
            }.bind(this), 2000);

        },

        setBusy : function (bBusy) {
            if (bBusy) {
//                this.getView().byId("dialogCard").addStyleClass("componentContainerBusy");
                this.getView().addStyleClass("dialogContainerOverlay");
                this.getView().byId("dialogCard").getComponentInstance().getRootControl().setBusy(bBusy);
            } else {
//                this.getView().byId("dialogCard").removeStyleClass("componentContainerBusy");
                this.getView().removeStyleClass("dialogContainerOverlay");
//                this.getView().byId("dialogCard").setBusy(bBusy);
                setTimeout( function(){
                    this.getView().byId("dialogCard").getComponentInstance().getRootControl().setBusy(bBusy);
                }.bind(this), 2000);
            }
            
//            this.getView().byId("dialogCard").setBusy(bBusy);

        },

        _fCardWithoutRefresh : function (oEvent, updatedElementProps) {
            var oView = this.getView();
            var oComponentInstance = oView.byId("dialogCard").getComponentInstance(),
            oRootControl = oComponentInstance.getRootControl(),
            oElement;
            if (updatedElementProps.formElementId === "sapOvpSettingsLineItemTitle" ||
                updatedElementProps.formElementId === "sapOvpSettingsLineItemSubTitle") {
                oElement = oRootControl.byId(updatedElementProps.cardElementId + "--" + oView.getModel().getProperty("/lineItemId"));
            } else {
                oElement = oRootControl.byId(updatedElementProps.cardElementId);
            }
            switch (updatedElementProps.formElementId) {
                case "sapOvpSettingsLineItemTitle":
                case "sapOvpSettingsLineItemSubTitle":
                case "sapOvpSettingsTitle" :
                case "sapOvpSettingsSubTitle" :
                case "sapOvpSettingsValueSelectionInfo" :
                    oElement.setText(oEvent.getSource().getValue());
                    break;
                case "sapOvpSettingsIdentification" :
                    var oBindingContext = oEvent.getParameters().selectedItem.getBindingContext(),
                        oModel = oBindingContext.getModel(),
                        sPath = oBindingContext.getPath(),
                        sAnnotationPath = oModel.getProperty(sPath).value;
                    this._oCardManifestSettings[updatedElementProps.updateProperty] = sAnnotationPath;
                    break;
                case "sapOvpSettingsKPIHeaderSwitch" :
                    var oVisibilityModel = oView.getModel("visibility"),
                        oData = oVisibilityModel.getData();
                    oData.dataPoint = false;
                    oData.valueSelectionInfo = false;
                    var oCardPropertiesModel = oView.getModel(),
                        sDataPointAnnotationPath = oCardPropertiesModel.getProperty("/dataPointAnnotationPath");
                    if (sDataPointAnnotationPath) {
                        oCardPropertiesModel.setProperty("/prevDataPointAnnotationPath", sDataPointAnnotationPath);
                    }
                    oCardPropertiesModel.setProperty("/dataPointAnnotationPath", undefined);
                    oVisibilityModel.refresh(true);
                    oElement.destroy();
                    break;
                default :
                    break;
            }
        },

        _fCardWithRefresh : function (oEvent, updateProperty) {
            var oSettingDialog = this.getView(),
                oComponentContainer = oSettingDialog.byId('dialogCard'),
                card = oComponentContainer.getComponentInstance().getComponentData(),
                sCardId = card.cardId,
                modelName = card.manifest.cards[sCardId].model,
                oManifest = {
                    cards: {}
                };

            switch (updateProperty) {
                case "kpiHeader" :
                    var oView = this.getView(),
                        oVisibilityModel = oView.getModel("visibility"),
                        oData = oVisibilityModel.getData();
                    oData.dataPoint = true;
                    oData.valueSelectionInfo = true;
                    var oCardPropertiesModel = oView.getModel(),
                        sPrevDataPointAnnotationPath = oCardPropertiesModel.getProperty("/prevDataPointAnnotationPath");
                    this._oCardManifestSettings.valueSelectionInfo = " ";
                    if (sPrevDataPointAnnotationPath) {
                        oCardPropertiesModel.setProperty("/dataPointAnnotationPath", sPrevDataPointAnnotationPath);
                    } else {
                        oCardPropertiesModel.setProperty("/dataPointAnnotationPath", oCardPropertiesModel.getData().dataPoint[0].value);
                    }
                    oVisibilityModel.refresh(true);
                    break;
                case "listType" :
                    oEvent.getSource().getState() === true ? (this._oCardManifestSettings[updateProperty] = "extended") : (this._oCardManifestSettings[updateProperty] = "condensed");
                    break;
                case "listFlavor" :
                    if (this._oCardManifestSettings["listFlavorName"] === settingsUtils.FORM_ITEM_NAME_FOR_LIST_FLAVOR_IN_LINKLIST) {
                        oEvent.getSource().getState() === true ? (this._oCardManifestSettings[updateProperty] = "carousel") : (this._oCardManifestSettings[updateProperty] = "standard");
                    } else {
                        oEvent.getSource().getState() === true ? (this._oCardManifestSettings[updateProperty] = "bar") : (this._oCardManifestSettings[updateProperty] = "");
                    }
                    break;
                case "sortOrder" :
                    oEvent.getSource().getSelectedKey() === "ascending" ? (this._oCardManifestSettings[updateProperty] = "ascending") : (this._oCardManifestSettings[updateProperty] = "descending");
                    break;
                case "sortBy" :
                    this._oCardManifestSettings[updateProperty] = oEvent.getSource().getSelectedKey();
                    break;
                case "annotationPath":
                    break;
                case "chartAnnotationPath":
                case "dataPointAnnotationPath":
                case "presentationAnnotationPath":
                case "selectionAnnotationPath":
                    var oBindingContext = oEvent.getParameters().selectedItem.getBindingContext(),
                        oModel = oBindingContext.getModel(),
                        sPath = oBindingContext.getPath(),
                        sAnnotationPath = oModel.getProperty(sPath).value;
                    this._oCardManifestSettings[updateProperty] = sAnnotationPath;
                    break;
                default :
                    break;
            }
            oManifest.cards[sCardId] = {
                model: modelName,
                template: card.template,
                settings: this._oCardManifestSettings
            };

//            this.setBusy(true);
            
            var oPromise = commonUtils.createCardComponent(oSettingDialog, oManifest, 'dialogCard');
            oPromise.then(function(){
                this.setBusy(false);
            }.bind(this));
            oPromise.catch(function(){
                this.setBusy(false);
            }.bind(this));
        },

        updateCard : function(oEvent) {
            var sourceElementId = oEvent.getSource().getId(),
                bCardWithoutRefresh = false;
            for (var i = 0 ; i < this._aRefreshNotRequired.length; i++) {
                if (sourceElementId.indexOf(this._aRefreshNotRequired[i].formElementId) > -1) {
                    if (this._aRefreshNotRequired[i].isKpiSwitch && oEvent.getSource().getState()) {
                        break;
                    }
                    this._fCardWithoutRefresh(oEvent, this._aRefreshNotRequired[i]);
                    bCardWithoutRefresh = true;
                    break;
                }
            }
            if (!bCardWithoutRefresh) {
                for (var j = 0; j < this._aRefreshRequired.length; j++) {
                    if (sourceElementId.indexOf(this._aRefreshRequired[j].formElementId) > -1) {
                        this.setBusy(true);
                        this._fCardWithRefresh(oEvent, this._aRefreshRequired[j].updateProperty);
                        break;
                    }
                }
            }
        },
        onExit: function () {
            settingsUtils.oSaveButton.detachPress(this.createAndSubmitChange,this);
        },
        updateTheLineItemSelected: function (event) {
            /*Getting the Value from the value seleciton info dialog*/
            var selectedItem = event.getSource().getSelectedItem().getBindingContext().getObject().Qualifier;

            /*Updating the selected values to the Model*/
            this._oCardManifestSettings.lineItemQualifier = selectedItem;
            this._oCardManifestSettings.annotationPath = 'com.sap.vocabularies.UI.v1.LineItem#' + selectedItem;
            if (selectedItem === 'Default') {
                this._oCardManifestSettings.annotationPath = 'com.sap.vocabularies.UI.v1.LineItem';
            }

            /*Updating the Value to lineItem Input*/
            this.getView().byId("sapOvpSettingsLineItem").setValue(selectedItem);

            /*Updating the card view*/
            this._fCardWithRefresh(event,'annotationPath');
            this.valueHelpDialog.close();
        },
        getListItems : function() {
            /*Getting the  iContext for sap.ovp.annotationHelper Function*/
            var aItemList = [],
                oSettingDialog = this.getView(),
                oComponentContainer = oSettingDialog.byId('dialogCard'),
                card = oComponentContainer.getComponentInstance().getComponentData(),
                lineItemBindingPath = this._oCardManifestSettings.entityType.$path + '/' + this._oCardManifestSettings.annotationPath,
                oModel = card.model.getMetaModel(),
                iContext = oModel.getContext(oModel.resolve(lineItemBindingPath, this.oView.getBindingContext()));

            /*Forming Visible Fields String*/
            ////For Condensed List
            var maxDataFields = 2,
                maxDataPoints = 1,
                noOfDataFieldsReplaceableByDataPoints = 0;
            if (this._oCardManifestSettings.listFlavor === 'bar') {
                //For Condensed List  Bar Card :- Max Data Fields = 2 and Max DataPoints = 1 and Replaceable fields are 0
                maxDataFields = 1;
                maxDataPoints = 2;
            }

            if (this._oCardManifestSettings.listType && this._oCardManifestSettings.listType.toLowerCase() === 'extended') {
                //For Extended List Card :- Max Data Fields = 6 and Max DataPoints =  and Replaceable fields are 0
                maxDataFields = 6;
                maxDataPoints = 3;
                noOfDataFieldsReplaceableByDataPoints = 3;
                if (this._oCardManifestSettings.listFlavor === 'bar') {
                    //For Extended Bar List Card
                    maxDataFields = 5;
                }
            } else if (this._oCardManifestSettings.contentFragment === "sap.ovp.cards.table.Table") {
                //For Table Card Max Data :- Fields = 3 and Max DataPoints = 1 and Replaceable fields are 1
                maxDataFields = 3;
                maxDataPoints = 1;
                noOfDataFieldsReplaceableByDataPoints = 1;
            }
            this._oCardManifestSettings.lineItem.forEach(function (lineItem) {
                var aDataPointsObjects = sap.ovp.cards.AnnotationHelper.getSortedDataPoints(iContext,lineItem.fields),
                    aDataFieldsObjects = sap.ovp.cards.AnnotationHelper.getSortedDataFields(iContext,lineItem.fields),
                    dataFields = [],
                    dataPoints = [];
                aDataPointsObjects.forEach(function (fields) {
                    if (fields.Title) {
                        dataPoints.push(fields.Title.String);
                    }
                });
                aDataFieldsObjects.forEach(function (fields) {
                    if (fields.Label) {
                        dataFields.push(fields.Label.String);
                    }
                });
                var noOfDataPointsUsed = Math.min(dataPoints.length, maxDataPoints),
                    noOfDataPointsOccupyingDataFieldsSpace = Math.min(noOfDataFieldsReplaceableByDataPoints,noOfDataPointsUsed),
                    visibleField = dataFields.slice(0, maxDataFields - noOfDataPointsOccupyingDataFieldsSpace)
                        .concat(dataPoints.slice(0, noOfDataPointsUsed));
                visibleField.map(function(field){
                    return field.charAt(0).toUpperCase() + field.substr(1);
                });
                aItemList.push({
                    Qualifier: lineItem.name,
                    VisibleFields: visibleField.toString()
                });
            });
            return aItemList;
        },
        openLineItemValueHelpDialog: function(oEvent) {
            /*Creating the Table*/
            var oTable = new sap.m.Table({
                mode : sap.m.ListMode.SingleSelectLeft,
                inset : false,
                fixedLayout : false,
                columns : [
                    new sap.m.Column({
                        header :[
                            new sap.m.Label({
                                text : sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText('OVP_KEYUSER_LINEITEM_QUAL')
                            }) ]
                    }),
                    new sap.m.Column({
                        header :[
                            new sap.m.Label({
                                text : sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OVP_KEYUSER_VISIBLE_FIELDS")
                            }) ]
                    })
                ]
            });
            oTable.bindItems("/", new sap.m.ColumnListItem({
                cells : [ new sap.m.Text({text : "{Qualifier}"}),
                    new sap.m.Text({text : "{VisibleFields}"})
                ]
            }));
            oTable.attachSelectionChange(this.updateTheLineItemSelected.bind(this));


            /*Creating the value Help Dialog*/
            this.valueHelpDialog = new ValueHelpDialog({
                title: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("OVP_KEYUSER_LINEITEM_ANNO"),
                contentWidth: "60%",
                supportMultiselect: false
            });
            this.valueHelpDialog.attachCancel(function() {
                this.valueHelpDialog.close();
            }.bind(this));
            this.valueHelpDialog.setTable(oTable);



            /*Data to Show in Table*/
            this.aItemList = this.getListItems();

            /*Setting model to the table row*/
            var oRowsModel = new sap.ui.model.json.JSONModel();
            oRowsModel.setData(this.aItemList);
            this.valueHelpDialog.getTable().setModel(oRowsModel);

            /*Preselecting the table item*/
            oTable.getItems().forEach(function(item) {
                if (item.getBindingContext().getObject().Qualifier === this._oCardManifestSettings.lineItemQualifier) {
                    item.setSelected(true);
                }
            }.bind(this));

            this.valueHelpDialog.open();

        },
        createAndSubmitChange : function() {
            var settingsDialog = settingsUtils.dialogBox,
                sReference = 'sap.ovp.app',
                sLayer = 'VENDOR',
                sChangeType = 'ovp_removeCard',
                mParameters = {
                    'cardId' : 'sap.card01'
                },
                mTexts = null,
                sCreatorMethod = 'create_' + sChangeType;

            if (!DescriptorInlineChangeFactory[sCreatorMethod]) {
                return;
            }
            DescriptorInlineChangeFactory[sCreatorMethod](mParameters,mTexts).then(
                function(oDescriptorInlineChange) {
                    new DescriptorChangeFactory().createNew(sReference, oDescriptorInlineChange, sLayer).then(
                        function(oDescriptorchange) {
                            oDescriptorchange.submit().then(
                                function(oSuccess) {
                                   return;
                                },
                                function (oError) {
                                   return;
                                }
                            );
                        }
                    );
                }
            );
            settingsDialog.close();
        }

    });
});

}; // end of sap/ovp/cards/rta/SettingsDialog.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.table.Table.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.table.Table.controller');
(function () {
    "use strict";
    /*global sap, jQuery */
    

    sap.ui.controller("sap.ovp.cards.table.Table", {

        onInit: function () {
        },

        onColumnListItemPress: function (oEvent) {
            /*
             On Content click of OVP Cards used as an API in other Applications
             */
            if (sap.ovp.cards.CommonUtils.checkIfAPIIsUsed(this)) {
                sap.ovp.cards.CommonUtils.onContentClicked(oEvent);
            } else {
                var aNavigationFields = this.getEntityNavigationEntries(oEvent.getSource().getBindingContext(), this.getCardPropertiesModel().getProperty("/annotationPath"));
                this.doNavigation(oEvent.getSource().getBindingContext(), aNavigationFields[0]);
            }
        },

        /**
         * Gets the card items binding object for the count footer
         */
        getCardItemsBinding: function() {
            var table = this.getView().byId("ovpTable");
            return table.getBinding("items");
        },

        onAfterRendering: function () {
            var oCompData = this.getOwnerComponent().getComponentData();
            var oCardPropertiesModel = this.getCardPropertiesModel();
            if (oCardPropertiesModel.getProperty("/layoutDetail") === "resizable") {
                var oDashboardLayoutUtil = this.getDashboardLayoutUtil();
                var oCard = oDashboardLayoutUtil.dashboardLayoutModel.getCardById(oCompData.cardId);
                var iHeaderHeight = this.getHeaderHeight();
                var sCardId = oDashboardLayoutUtil.getCardDomId(oCompData.cardId);
                var element = document.getElementById(sCardId);
                if (!oCard.dashboardLayout.autoSpan) {
                    element.getElementsByClassName('sapOvpWrapper')[0].style.height =
                        ((oCard.dashboardLayout.rowSpan * oDashboardLayoutUtil.ROW_HEIGHT_PX) + 1 - (iHeaderHeight + 2 * oDashboardLayoutUtil.CARD_BORDER_PX)) + "px"
                }
                if (oCard.dashboardLayout.showOnlyHeader) {
                    element.classList.add("sapOvpMinHeightContainer");
                }
                //For resizable card layout show the no of columns based upon colspan
                this.addColumnInTable(jQuery(element), {
                    colSpan: oCard.dashboardLayout.colSpan
                });
            } else {
                var oTable = this.getView().byId("ovpTable");
                var aAggregation = oTable.getAggregation("columns");
                //For fixed card layout show only 3 columns
                for (var iCount = 0; iCount < 3; iCount++) {
                    if (aAggregation[iCount]) {
                        aAggregation[iCount].setStyleClass("sapTableColumnShow").setVisible(true);
                    }
                }
            }
        },

        /**
         * Gets the card items binding info
         */
        getCardItemBindingInfo: function () {
            var oList = this.getView().byId("ovpTable");
            return oList.getBindingInfo("items");
        },

        /**
         * Handles no of columns to be shown in table when view-switch happens
         *
         * @method addColumnInTable
         * @param {String} sCardId - Card Id
         * @param {Object} oCardResizeData- card resize properties
         */
        addColumnInTable: function ($card, oCardResizeData) {
            if (oCardResizeData.colSpan >= 1) {
                if (jQuery($card).find("tr").length != 0) {
                    var table = sap.ui.getCore().byId(jQuery($card).find(".sapMList").attr("id"));
                    var aggregation = table.getAggregation("columns");
                    var iColSpan = oCardResizeData.colSpan;
                    // No of columns to be shown calculated based upon colspan
                    var iIndicator = iColSpan + 1;
                    for (var i = 0; i < 6; i++) {
                        if (aggregation[i]) {
                            if (i <= iIndicator) {
                                //Show any particular column
                                aggregation[i].setStyleClass("sapTableColumnShow").setVisible(true);
                            } else {
                                //hide any particular column
                                aggregation[i].setStyleClass("sapTableColumnHide").setVisible(false);
                            }
                        }
                    }
                }
            }
        },

        /**
         * Method called upon card resize
         *
         * @method resizeCard
         * @param {Object} newCardLayout- resize data of the card
         * @return {Object} cardSizeProperties - card properties
         */
        resizeCard: function (newCardLayout, cardSizeProperties) {
            var iNoOfItems, iAvailableSpace;
            try {
                var oBindingInfo = this.getCardItemBindingInfo();
                var iHeaderHeight = this.getHeaderHeight();
                var oOvpContent = this.getView().byId('ovpCardContentContainer').getDomRef();
                var iAvailableSpace = newCardLayout.rowSpan * newCardLayout.iRowHeightPx - (iHeaderHeight + cardSizeProperties.dropDownHeight + cardSizeProperties.itemHeight + 2 * newCardLayout.iCardBorderPx);
                if (oOvpContent) {
                    newCardLayout.showOnlyHeader ? oOvpContent.classList.add('sapOvpContentHidden') : oOvpContent.classList.remove('sapOvpContentHidden');
                    oOvpContent.style.height = (newCardLayout.rowSpan * newCardLayout.iRowHeightPx) - ( iHeaderHeight + 2 * newCardLayout.iCardBorderPx) + "px";
                }
                iNoOfItems = Math.floor(iAvailableSpace / cardSizeProperties.itemHeight);
                oBindingInfo.length = Math.abs(iNoOfItems);
                newCardLayout.noOfItems = oBindingInfo.length;
                this.addColumnInTable(this.getView().$(), newCardLayout);
                this.getCardItemsBinding().refresh();
            } catch (error) {
                jQuery.sap.log.warning("OVP resize: " + this.cardId + " catch " + error.toString());
            }
        }
    });
})();

}; // end of sap/ovp/cards/table/Table.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.changeHandler.HideCardContainer') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

jQuery.sap.declare('sap.ovp.changeHandler.HideCardContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ovp/changeHandler/HideCardContainer",[
	'jquery.sap.global',
	'sap/ui/fl/changeHandler/JsControlTreeModifier'
], function(jQuery, JsControlTreeModifier) {
	"use strict";

	/**
	 * Change handler for hiding of a componentContainer control.
	 * @alias sap.ui.fl.changeHandler.HideCardContainer
	 * @author SAP SE
	 * @version 1.50.4
	 * @experimental Since 1.27.0
	 */
	var HideCardContainer = {
			"changeHandler": {},
			"layers": {
				"CUSTOMER_BASE": false,
				"CUSTOMER": false,
				"USER": false
			}
	};

	/**
	 * Hides a componentContainer control.
	 *
	 * @param {sap.ui.fl.Change} oChange change object with instructions to be applied on the control map
	 * @param {sap.ui.core.Control} oControl control that matches the change selector for applying the change
	 * @param {object} mPropertyBag - map of properties
	 * @returns {boolean} true - if change could be applied
	 * @public
	 */
	HideCardContainer.changeHandler.applyChange = function(oChange, oControl, mPropertyBag) {
		mPropertyBag.modifier.byId(oChange.getContent().id).setVisible(false);
        return true;
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.oChange} oChange change object to be completed
	 * @param {object} oSpecificChangeInfo as an empty object since no additional attributes are required for this operation
	 * @param {object} mPropertyBag - map of properties
	 * @param {sap.ui.core.UiComponent} mPropertyBag.appComponent component in which the change should be applied
	 * @public
	 */
	HideCardContainer.changeHandler.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
    	oChange.setContent(oSpecificChangeInfo.removedElement);
    };

	return HideCardContainer;
},
/* bExport= */true);

}; // end of sap/ovp/changeHandler/HideCardContainer.js
if ( !jQuery.sap.isDeclared('sap.ovp.changeHandler.UnhideCardContainer') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

jQuery.sap.declare('sap.ovp.changeHandler.UnhideCardContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ovp/changeHandler/UnhideCardContainer",[
	'jquery.sap.global',
	'sap/ui/fl/changeHandler/JsControlTreeModifier'
], function(jQuery, JsControlTreeModifier) {
	"use strict";

	/**
	 * Change handler for revealing(unhide) of a componentContainer control.
	 * @alias sap.ui.fl.changeHandler.UnhideCardContainer
	 * @author SAP SE
	 * @version 1.50.4
	 * @experimental Since 1.27.0
	 */
	var UnhideCardContainer = {
			"changeHandler": {},
			"layers": {
				"CUSTOMER_BASE": false,
				"CUSTOMER": false,
				"USER": false
			}
	};

	/**
	 * Unhides a componentContainer control.
	 *
	 * @param {sap.ui.fl.Change} oChange change object with instructions to be applied on the control map
	 * @param {sap.ui.core.Control} oControl control that matches the change selector for applying the change
	 * @param {object} mPropertyBag - map of properties
	 * @returns {boolean} true - if change could be applied
	 * @public
	 */
	UnhideCardContainer.changeHandler.applyChange = function(oChange, oPanel, mPropertyBag){
    	mPropertyBag.modifier.byId(oChange.getContent().revealedElementId).setVisible(true);
        return true;
    };

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {sap.ui.fl.oChange} oChange change object to be completed
	 * @param {object} oSpecificChangeInfo as an empty object since no additional attributes are required for this operation
	 * @param {object} mPropertyBag - map of properties
	 * @param {sap.ui.core.UiComponent} mPropertyBag.appComponent component in which the change should be applied
	 * @public
	 */
	UnhideCardContainer.changeHandler.completeChangeContent = function(oChange, oSpecificChangeInfo, mPropertyBag) {
        oChange.setContent({
        	"revealedElementId": oSpecificChangeInfo.revealedElementId
        });
    };

	return UnhideCardContainer;
},
/* bExport= */true);

}; // end of sap/ovp/changeHandler/UnhideCardContainer.js
if ( !jQuery.sap.isDeclared('sap.ovp.changeHandler.UnhideControl') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

jQuery.sap.declare('sap.ovp.changeHandler.UnhideControl'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
sap.ui.define("sap/ovp/changeHandler/UnhideControl",[
	'jquery.sap.global',
	'sap/ui/fl/changeHandler/JsControlTreeModifier'
], function(jQuery, JsControlTreeModifier) {
	"use strict";

	/**
	 * Change handler for unhiding/revealing cards of the layout .
	 * @alias sap.ui.fl.changeHandler.UnhideControl
	 * @author SAP SE
	 * @version 1.50.4
	 * @experimental Since 1.27.0
	 */
	var UnhideControl = {
			"changeHandler": "default",
			"layers": {
				"CUSTOMER_BASE": false,
				"CUSTOMER": false,
				"USER": false
			}
	};


	return UnhideControl;
},
/* bExport= */true);

}; // end of sap/ovp/changeHandler/UnhideControl.js
if ( !jQuery.sap.isDeclared('sap.ovp.flexibility.DashboardLayout.flexibility') ) {
jQuery.sap.declare('sap.ovp.flexibility.DashboardLayout.flexibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.BaseRename'); // unlisted dependency retained
sap.ui.define("sap/ovp/flexibility/DashboardLayout.flexibility",[
    "sap/ui/fl/changeHandler/BaseRename",
    "sap/ovp/changeHandler/HideCardContainer",
    "sap/ovp/changeHandler/UnhideCardContainer",
    "sap/ovp/changeHandler/UnhideControl"
], function (BaseRename, HideCardContainer, UnhideCardContainer, UnhideControl) {
    "use strict";
    return {
        "moveControls": {
            "changeHandler": "default",
            "layers": {
                "CUSTOMER_BASE": false,
                "CUSTOMER": false,
                "USER": false
            }
        },
        "unhideControl": UnhideControl,
        "unhideCardContainer": UnhideCardContainer,
        "hideCardContainer": HideCardContainer,
        /**
         * Personalization change handlers
         */
        "manageCardsForDashboardLayout": {
        	changeHandler: {
        		applyChange : function(oChange, oPanel, mPropertyBag){
            		//store the incoming change to the main controller for user before rendering
            		var oMainController = mPropertyBag.appComponent.getRootControl().getController();
            		oMainController.storeIncomingDeltaChanges(oChange.getContent());
                    return true;
                },
                completeChangeContent : function(oChange, oSpecificChangeInfo, mPropertyBag) {
                	oChange.setContent(oSpecificChangeInfo.content);
                	return;
                }
        	},
        	layers: {
                "USER": true  // enables personalization which is by default disabled
            }
        }
    };
}, /* bExport= */true);
}; // end of sap/ovp/flexibility/DashboardLayout.flexibility.js
if ( !jQuery.sap.isDeclared('sap.ovp.flexibility.EasyScanLayout.flexibility') ) {
jQuery.sap.declare('sap.ovp.flexibility.EasyScanLayout.flexibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.fl.changeHandler.BaseRename'); // unlisted dependency retained
sap.ui.define("sap/ovp/flexibility/EasyScanLayout.flexibility",[
    "sap/ui/fl/changeHandler/BaseRename",
    "sap/ovp/changeHandler/HideCardContainer",
    "sap/ovp/changeHandler/UnhideCardContainer",
    "sap/ovp/changeHandler/UnhideControl"
], function (BaseRename, HideCardContainer, UnhideCardContainer, UnhideControl) {
    "use strict";
    return {
        "moveControls": {
            "changeHandler": "default",
            "layers": {
                "CUSTOMER_BASE": false,
                "CUSTOMER": false,
                "USER": false
            }
        },
        "unhideControl": UnhideControl,
        "unhideCardContainer": UnhideCardContainer,
        "hideCardContainer": HideCardContainer,
        /**
         * Personalization change handlers
         */
        "manageCardsForEasyScanLayout": {
        	changeHandler: {
        		applyChange : function(oChange, oPanel, mPropertyBag){
            		//store the incoming change to the main controller for user before rendering
            		var oMainController = mPropertyBag.appComponent.getRootControl().getController();
            		oMainController.storeIncomingDeltaChanges(oChange.getContent());
                    return true;
                },
                completeChangeContent : function(oChange, oSpecificChangeInfo, mPropertyBag) {
                	oChange.setContent(oSpecificChangeInfo.content);
                	return;
                }
        	},
        	layers: {
                "USER": true  // enables personalization which is by default disabled
            }
        }
    };
}, /* bExport= */true);
}; // end of sap/ovp/flexibility/EasyScanLayout.flexibility.js
if ( !jQuery.sap.isDeclared('sap.ovp.library') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/**
 * Initialization Code and shared classes of library sap.ovp (1.50.4)
 */
jQuery.sap.declare('sap.ovp.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/ovp/library",['sap/ui/Device', 'sap/ui/core/Core'], function(Device, Core) {

	/**
	 * SAP library: sap.ovp
	 *
	 * @namespace
	 * @alias sap.ovp
	 * @public
	 */
	var thisLibrary = sap.ui.getCore().initLibrary({
		name : "sap.ovp",
		dependencies: ["sap.ui.core","sap.ui.layout","sap.ui.generic.app",
			"sap.m", "sap.f", "sap.ui.comp"],
		types: [],
		interfaces: [],
		controls: [],
		elements: [],
		version: "1.50.4",
		extensions: {
			flChangeHandlers: {
				"sap.ovp.ui.EasyScanLayout" : "sap/ovp/flexibility/EasyScanLayout",
				"sap.ovp.ui.DashboardLayout" : "sap/ovp/flexibility/DashboardLayout"
			}
		}
	});

	// TODO there's now a workaround for the Firefox SyncXHR issue integrated in the ui5 module loading. Fix should no longer be necessary
	if (Device.browser.firefox) {
		jQuery.sap.log.warning("Loading library 'sap.viz' and 'sap.suite.ui.microchart' to avoid issues with Firefox sync XHR support (https://bugzilla.mozilla.org/show_bug.cgi?id=697151)");
		sap.ui.getCore().loadLibrary("sap.viz");
		sap.ui.getCore().loadLibrary("sap.suite.ui.microchart");
	}

	return thisLibrary;

});
}; // end of sap/ovp/library.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.Card') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/*global sap window*/

jQuery.sap.declare('sap.ovp.ui.Card'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/Card",[
	"sap/ui/core/Control"
], function (Control) {
	"use strict";
	return Control.extend("sap.ovp.ui.Card", {
		metadata : {
			library : "sap.ovp",
            designTime: false,
			aggregations : {
                innerCard: {type: "sap.ui.core.Control", multiple: false}
            },
            defaultAggregation: "innerCard"
		},
		init : function () {
		},
		renderer : function (oRM, oControl) {
			oRM.write("<div");
			oRM.writeControlData(oControl);
            oRM.addClass("sapOvpBaseCardWrapper");
            oRM.writeClasses();
			oRM.write(">");
            oRM.renderControl(oControl.getAggregation("innerCard"));
			oRM.write("</div>");
		}
	});
}, true);
}; // end of sap/ovp/ui/Card.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.CardContentContainer') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/*global sap window*/

jQuery.sap.declare('sap.ovp.ui.CardContentContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/CardContentContainer",["jquery.sap.global", "sap/ovp/library"],
    function(jQuery) {
        "use strict";

        var CardContentContainer = sap.m.FlexBox.extend("sap.ovp.ui.CardContentContainer", {
            metadata: {
                library: "sap.ovp"
            },
            renderer: {
                render: function (oRm, oControl) {
                    oRm.write("<div");
                    oRm.writeControlData(oControl);
                    oRm.addClass("sapOvpCardContentContainer");
                    oRm.writeClasses();
                    oRm.write(">");
                    var items = oControl.getItems();
                    for (var i = 0; i < items.length; i++) {
                        oRm.renderControl(items[i]);
                    }
                    oRm.write("</div>");
                }
            }

        });


        return CardContentContainer;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/CardContentContainer.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.ComponentContainerDesigntimeMetadata') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

jQuery.sap.declare('sap.ovp.ui.ComponentContainerDesigntimeMetadata'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.JsControlTreeModifier'); // unlisted dependency retained
jQuery.sap.require('sap.ui.rta.ui.SettingsDialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/ComponentContainerDesigntimeMetadata",[
	'jquery.sap.global',
	'sap/ui/fl/changeHandler/JsControlTreeModifier',
    "sap/ui/rta/ui/SettingsDialog",
    "sap/ovp/cards/CommonUtils",
    "sap/ovp/cards/SettingsUtils",
    "sap/m/Dialog",
    "sap/m/Button"
], function(jQuery, JsControlTreeModifier, SettingsDialog, CommonUtils, SettingsUtils, Dialog, Button) {
	"use strict";

	return {
		name: {
            singular: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Card"),
            plural: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Cards")
        },
        actions: {
            remove: {
				changeType: "hideCardContainer",
				changeOnRelevantContainer: true
			},
			reveal: {
				changeType: "unhideCardContainer",
				changeOnRelevantContainer: true
			},
            settings: function() {
                return {
                    isEnabled: false,
                    changeOnRelevantContainer: true,
                    handler: function(oElement, fGetUnsavedChanges) {
                        SettingsUtils.getDialogBox(oElement).then(function(oDialogBox) {
                            oDialogBox.open();
                        });
                        // TODO: Pass the change specific content and the selector with resolve
                        return Promise.resolve();
                    }
                };
            }
        }
    };
},
/* bExport= */true);

}; // end of sap/ovp/ui/ComponentContainerDesigntimeMetadata.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.CustomData') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */
jQuery.sap.declare('sap.ovp.ui.CustomData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained
jQuery.sap.require('sap.ushell.library'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/CustomData",['jquery.sap.global', 'sap/ui/core/CustomData', 'sap/ushell/library'],
    function (jQuery, CustomData, library) {
        "use strict";

        var CustomData = CustomData.extend("sap.ovp.ui.CustomData");
           // fnOrigcheckWriteToDom = CustomData.prototype._checkWriteToDom;


        CustomData.prototype._checkWriteToDom = function (oRelated) {
            var sKey = this.getKey().toLowerCase(),
                bIsAccessibilityOn = sap.ui.getCore().getConfiguration().getAccessibility();
            if (!bIsAccessibilityOn) {
                return;
            }
            if (!this.getWriteToDom()) {
                return null;
            }
            var value = this.getValue();

            if (typeof value != "string") {
                jQuery.sap.log.error("CustomData with key " + sKey + " should be written to HTML of " + oRelated + " but the value is not a string.");
                return null;
            }

            if (!(sap.ui.core.ID.isValid(sKey)) || (sKey.indexOf(":") != -1)) {
                jQuery.sap.log.error("CustomData with key " + sKey + " should be written to HTML of " + oRelated + " but the key is not valid (must be a valid sap.ui.core.ID without any colon).");
                return null;
            }

            if (sKey == jQuery.sap._FASTNAVIGATIONKEY) {
                value = /^\s*(x|true)\s*$/i.test(value) ? "true" : "false"; // normalize values
            } else if (sKey.indexOf("sap-ui") == 0) {
                jQuery.sap.log.error("CustomData with key " + sKey + " should be written to HTML of " + oRelated + " but the key is not valid (may not start with 'sap-ui').");
                return null;
            }
            return {key: sKey, value: value};
        };

        return CustomData;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/CustomData.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.DashboardLayout.designtime') ) {
jQuery.sap.declare('sap.ovp.ui.DashboardLayout.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.comp.navpopover.RTAHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.rta.ui.SettingsDialog'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/DashboardLayout.designtime",["sap/ui/comp/navpopover/RTAHandler","sap/ovp/app/Component","sap/ui/rta/ui/SettingsDialog"],
    function(RTAHandler,oAppComponent,SettingsDialog) {
        "use strict";
        return {
            actions: {
            },
            aggregations: {
                content : {
                    domRef : ":sap-domref",
                    actions : {
                        move: "moveControls",
                        changeOnRelevantContainer: true
                    }
                }
            },
            name: {
            	singular: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Card"),
                plural: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Cards")
            }
        };
    }, false);

}; // end of sap/ovp/ui/DashboardLayout.designtime.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.DashboardLayoutModel') ) {
jQuery.sap.declare('sap.ovp.ui.DashboardLayoutModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ovp/ui/DashboardLayoutModel",['sap/ovp/cards/CommonUtils'], function(CommonUtils) {
		"use strict";

        var LayoutModel = function (uiModel, iColCount, iRowHeightPx, iCardBorderPx) {
            this.uiModel = uiModel;
            this.setColCount(iColCount);
            this.aCards = [];
            this.oLayoutVars = null;
            this.oUndoBuffer = {};
            this.bSequenceLayout = null;
            this.iDisplaceRow = null;
            this.iDummyRow = 999;
            this.iRowHeightPx = iRowHeightPx;
            this.iCardBorderPx = iCardBorderPx;
        };

		/**
		 * set number of columns
		 *
		 * @method setColCount
		 * @param {Int} iColCount - number of columns
		 */
		LayoutModel.prototype.setColCount = function(iColCount) {

			if (!iColCount) {
				this.iColCount = 5; //default
			} else if (iColCount !== this.iColCount) {
				//extract current changed layout variant for later use
				if (this.bLayoutChanged) {
					this.oUndoBuffer = {};
					this.bLayoutChanged = false;
				}
                this.iPreviousColCount = this.iColCount;
				this.iColCount = iColCount;
			}
		};

		/**
		 * set layout variants
		 * (add and overwriting existing ones)
		 *
		 * @method setLayoutVars
		 * @param {Object} oLayoutVars - object containing layout variants
		 */
        LayoutModel.prototype.setLayoutVars = function (oLayoutVars) {
            //Check for the empty LREP content
            if (Array.isArray(oLayoutVars) && oLayoutVars.length !== 0) {
                this.oLayoutVars = oLayoutVars;
            }
            //build layout based on new variant
            this._buildGrid();
        };

		/**
		 * update visibility of given cards
		 * (usually called from manage cards dialog)
		 *
		 * @method updateCardVisibility
		 * @param {Array} aChgCards - array containing card ids and visibility state
		 */
        LayoutModel.prototype.updateCardVisibility = function (aChgCards) {
            var oCardVariant;
            for (var i = 0; i < aChgCards.length; i++) {
                oCardVariant = this.oLayoutVars.filter(function (item) {
                    return item.id === aChgCards[i].id;
                });
                if (oCardVariant[0].visibility && oCardVariant[0].visibility !== aChgCards[i].visibility) {
                    oCardVariant[0].dashboardLayout['C'+ this.iColCount].row = this._findHighestOccupiedRow();
                }
                oCardVariant[0].visibility = aChgCards[i].visibility;
            }
            this._setCardsLayoutFromVariant(this.aCards, this.oLayoutVars);
        };

		/**
		 * return number of columns
		 *
		 * @method getColCount
		 * @returns {Int} iColCount - number of columns
		 */
		LayoutModel.prototype.getColCount = function() {
			return this.iColCount;
		};

		/**
		 * get cards in current layout
		 *
		 * @method getCards
		 * @param {Int} iColCount (optional)- number of columns
		 * @returns {Array} array containing cards in layout
		 */
		LayoutModel.prototype.getCards = function(iColCount) {
			//build grid if cards array was not filled before or the number of columns has changed
			if (this.aCards.length === 0 || iColCount && iColCount !== this.iColCount) {
				if (iColCount) {
					this.setColCount(iColCount);
				}
				//build grid for this.iColCount columns
				this._buildGrid();
			}
			return this.aCards;
		};

		/**
		 * Return the card by id
		 *
		 * @method getCardById
		 * @param {String} cardId - cardId
		 * @returns {Object} oCard - Card object
		 */
        LayoutModel.prototype.getCardById = function (cardId) {
            var oCard = null;
            var i = 0;
            for (i = 0; i < this.aCards.length; i++) {
                oCard = this.aCards[i];
                if (oCard.id === cardId) {
                    break;
                }
            }
            return oCard;
        };

		/**
		 * get the DashboardLayout variants in JSON format
		 * (only variants that were changed manually or originate from lrep)
		 * 
		 * @method getLayoutVariants
		 * @returns {Object} JSON containing the layout variants
		 */
		LayoutModel.prototype.getLayoutVariants4Pers = function() {
			return JSON.parse(JSON.stringify(this.oLayoutVars));
		};

        /**
         * If the user has given variant details in the manifest then use the same variant
         * @method _readVariants
         */
        LayoutModel.prototype._readVariants = function () {
            var oVariant,
                oLayoutRaw = this.uiModel.getProperty('/dashboardLayout');
            if (!!oLayoutRaw) {
                //Copy the user given manifest settings for different layout like cols_3/cols_5/C3/C5
                for (var layoutKey in oLayoutRaw) {
                    if (oLayoutRaw.hasOwnProperty(layoutKey) && oLayoutRaw[layoutKey]) {
                        oVariant = oLayoutRaw[layoutKey];
                        oVariant.id = layoutKey;
                        for (var item in oVariant) {
                            var oLayoutCard = this.oLayoutVars.filter(function (element) {
                                return element.id === item;
                            });
                            //If the variant for the card already present
                            if (Array.isArray(oLayoutCard) && oLayoutCard.length > 0) {
                                //Remove all characters of the key except integer one
                                var sLayoutKey = 'C' + +oVariant.id.replace(/[^0-9\.]/g, "");
                                var oCardLayoutObj = oLayoutCard[0].dashboardLayout[sLayoutKey];
                                var oCard = this.aCards.filter(function (ele) {
                                    return ele.id === item;
                                });
                                if (Array.isArray(oCard) && oCard.length > 0) {
                                    //If variant for the same layout present then copy the values of row, col,colSpan and noOfItems
                                    if (oCardLayoutObj) {
                                        oCardLayoutObj.row = oVariant[item].row;
                                        oCardLayoutObj.col = oVariant[item].col;
                                        oCardLayoutObj.colSpan = oCard[0].template === 'sap.ovp.cards.stack' ? 1 : Math.min(oVariant[item].colSpan, this.iColCount);
                                        oCardLayoutObj.maxColSpan = oVariant[item].maxColSpan;
                                        oCardLayoutObj.noOfItems = oVariant[item].rowSpan;
                                    } else {
                                        //Else create the layout with the values of row, col,colSpan and noOfItems
                                        oLayoutCard[0].dashboardLayout[sLayoutKey] = {
                                            row: oVariant[item].row,
                                            col: oVariant[item].col,
                                            colSpan: oCard[0].template === 'sap.ovp.cards.stack' ? 1 : Math.min(oVariant[item].colSpan, this.iColCount),
                                            maxColSpan: oVariant[item].maxColSpan,
                                            noOfItems: oVariant[item].rowSpan,
                                            autoSpan: oCard[0].template === 'sap.ovp.cards.stack' ? false : true
                                        }
                                    }
                                    oLayoutCard[0].visibility = oVariant[item].visible ? oVariant[item].visible : true;
                                }
                            }
                        }
                    }
                }
            }
        };

		/** 
		 * drop layout variants and reload manifest variants
		 * @method resetToManifest
		 */
        LayoutModel.prototype.resetToManifest = function () {
            this.oLayoutVars = null;
            for (var i = 0; i < this.aCards.length; i++) {
                this.aCards[i].dashboardLayout = {};
            }
            this._buildGrid(/*bUseManifest*/ true);
        };

		/**
		 * find best matching layout variant (or create one) and update card dashboardLayout
		 *
		 * @method _buildGrid
		 * @param {Boolean} bUseManifest - use manifest layout variants for read variants (needed for reset)
		 */
        LayoutModel.prototype._buildGrid = function (bUseManifest) {
            if (this.aCards.length === 0) {
                //read cards if not yet done
                this.aCards = this.uiModel.getProperty("/cards");
            }
            if (!this.oLayoutVars || bUseManifest) {
                this.oLayoutVars = [];
                //pre-set bSequenceLayout; if no variants exist, grid will be build from cards sequence
                this.bSequenceLayout = true;
            }

            //if the layout is loaded for the first time or easyscan variant is provided
            if (this.bSequenceLayout || this.oLayoutVars[0] && !this.oLayoutVars[0].dashboardLayout) {
                this._sliceSequenceSausage();
                this.bSequenceLayout = false;
            } else {
                //If there is already a variant present
                this._sliceSequenceSausage(this.oLayoutVars);
            }
            //Use the variants given by user if present
            this._readVariants();
            // set card grid data from layout variant
            this._setCardsLayoutFromVariant(this.aCards, this.oLayoutVars);
        };

        /**
         * Copy the variant data to respective card object
         *
         * @method _setCardsLayoutFromVariant
         * @param {Array} aCards - cards object
         * @parama {Array} oLayoutVariant - Layout variant
         */

        LayoutModel.prototype._setCardsLayoutFromVariant = function (aCards, oLayoutVariant) {
            var oCard = {}, oLayoutCard = {}, oCardObj = {}, oCardProp = null;

            for (var i = 0; i < aCards.length; i++) {
                oCard = aCards[i];
                oLayoutCard = oLayoutVariant.filter(function (item) {
                    return item.id === oCard.id;
                });
                if (Array.isArray(oLayoutCard) && oLayoutCard.length > 0) {
                    oCard.dashboardLayout = {};
                    oCardObj = oLayoutCard[0].dashboardLayout["C" + this.iColCount];
                    oCardProp = this._getDefaultCardItemHeightAndCount(oCard);
                    oCard.dashboardLayout.colSpan = oCardObj.colSpan ? oCardObj.colSpan : 1;
                    oCard.dashboardLayout.maxColSpan = oCardObj.maxColSpan;
                    oCard.dashboardLayout.rowSpan = oCardObj.rowSpan ? oCardObj.rowSpan : 12;
                    oCard.dashboardLayout.noOfItems = oCardObj.noOfItems ? oCardObj.noOfItems : oCardProp.noOfItems;
                    oCard.dashboardLayout.itemHeight = oCardProp.itemHeight;
                    oCard.dashboardLayout.headerHeight = oCardProp.headerHeight;
                    oCard.dashboardLayout.autoSpan = oCardObj.autoSpan;
                    oCard.dashboardLayout.showOnlyHeader = oCardObj.showOnlyHeader;

                    if (oLayoutCard[0].hasOwnProperty("visibility") && oLayoutCard[0].visibility === false) {
                        oCard.dashboardLayout.visible = false;
                        oCard.dashboardLayout.column = oCardObj.col;
                        oCard.dashboardLayout.row = oCardObj.row;
                    } else {
                        oCard.dashboardLayout.visible = true;
                        if (oCardObj.col === 0 || oCardObj.row === 0) {
                            //card was invisible before --> put it at the very end (empty rows will be condensed later)
                            this._displaceCardToEnd(oCard);
                        } else {
                            oCard.dashboardLayout.column = oCardObj.col;
                            oCard.dashboardLayout.row = oCardObj.row;
                        }
                        if (oCard.dashboardLayout.colSpan > this.iColCount) {
                            oCard.dashboardLayout.colSpan = this.iColCount;
                        }
                    }
                }
                //layout verification; if data is inconsistent (non existing column, too wide) put card to the end
                if (oCard.dashboardLayout.column > this.iColCount) {
                    //card is located in invalid column
                    this._displaceCardToEnd(oCard);
                    jQuery.sap.log.warning("DashboardLayout: card (" + oCard.id + ") in invalid column -> moved to end");
                }
                if (oCard.dashboardLayout.column + oCard.dashboardLayout.colSpan - 1 > this.iColCount) {
                    //card is too wide for its position
                    oCard.dashboardLayout.colSpan = Math.min(oCard.dashboardLayout.colSpan, this.iColCount);
                    this._displaceCardToEnd(oCard);
                    jQuery.sap.log.warning("DashboardLayout: card (" + oCard.id + ") too wide -> moved to end");
                }
            }
            //finally ensure a consistent grid
            this.validateGrid(/*bRepair*/ true);
        };

        /**
         * Method to align a card in the layout if it's out of the layout or added for th first time
         *
         * @method _displaceCardToEnd
         * @param {Object} oCard - Card object containing all the properties
         */
        LayoutModel.prototype._displaceCardToEnd = function (oCard) {
            oCard.dashboardLayout.column = 1;
            if (!this.iDisplaceRow) {
                this.iDisplaceRow = this._findHighestOccupiedRow();
            }
            oCard.dashboardLayout.row = this.iDisplaceRow;
            this.iDisplaceRow += oCard.dashboardLayout.rowSpan;
            var oLayoutCard = this.oLayoutVars.filter(function (item) {
                return item.id === oCard.id;
            });
            //Copy the row value of card.dashboardLayout to variant
            if (Array.isArray(oLayoutCard) && oLayoutCard.length > 0) {
                oLayoutCard[0].dashboardLayout["C" + this.iColCount].row = oCard.dashboardLayout.row;
            }
        };

        /**
         * Method to set all the default properties for card in resizable layout. Properties are
         *                 1) rowSpan - Defines height of card
         *                 2) colSpan- Defines width of card
         *                 3) noOfItems - Defines how many items to be shown in card(applicable for List/Table/Link List card)
         *                 4) autoSpan - Defines card should grow automatically or it would have fixed height
         *                 5) visible - Defines visibility of card
         *                 6) itemHeight - Defines each item height shown in card(applicable for List/Table/Link List card)
         *                 7) headerHeight - Defines header height[All variation of header like Normal/KPI header, Tittle/Subtitle line length,
         *                                   showSortingInHeader/showFilterInHeader flag]
         *
         * @method _setCardSpanFromDefault
         * @param {Object} oCard - Card object containing all the properties and settings from manifest
         */
        LayoutModel.prototype._setCardSpanFromDefault = function (oCard) {
            if (!oCard.dashboardLayout) {
                oCard.dashboardLayout = {};
            }
            var oCardProp = this._getDefaultCardItemHeightAndCount(oCard);
            //No default span is mentioned so, no of items will be default
            if (!oCard.settings.defaultSpan) {
                if (oCard.template === 'sap.ovp.cards.linklist') {
                    oCard.dashboardLayout.rowSpan = 1;
                } else {
                    oCard.dashboardLayout.rowSpan = 12;
                }
                oCard.dashboardLayout.colSpan = 1;
                oCard.dashboardLayout.noOfItems = oCardProp.noOfItems;
                oCard.dashboardLayout.autoSpan = true;
                oCard.dashboardLayout.showOnlyHeader = false;
                oCard.dashboardLayout.maxColSpan = oCard.dashboardLayout.colSpan;
            } else {
                //User wants to show till header
                if (oCard.settings.defaultSpan.showOnlyHeader) {
                    oCard.dashboardLayout.rowSpan = Math.ceil((oCardProp.headerHeight + 2 * this.iCardBorderPx) / this.iRowHeightPx);
                    oCard.dashboardLayout.noOfItems = 0;
                    oCard.dashboardLayout.autoSpan = false;
                    oCard.dashboardLayout.showOnlyHeader = true;
                } else {
                    if (oCard.template === 'sap.ovp.cards.linklist') {
                        oCard.dashboardLayout.rowSpan = oCard.settings.defaultSpan.rows ? oCard.settings.defaultSpan.rows : 1;
                        oCard.dashboardLayout.autoSpan = false;
                    } else {
                        oCard.dashboardLayout.rowSpan = 12;
                        oCard.dashboardLayout.autoSpan = true;
                    }
                    oCard.dashboardLayout.noOfItems = oCard.settings.defaultSpan.rows ? oCard.settings.defaultSpan.rows : oCardProp.noOfItems;
                    oCard.dashboardLayout.showOnlyHeader = false;
                }
                oCard.dashboardLayout.colSpan = oCard.template === 'sap.ovp.cards.stack' ? 1 : (oCard.settings.defaultSpan.cols ? Math.min(oCard.settings.defaultSpan.cols, this.iColCount) : 1);
                oCard.dashboardLayout.maxColSpan = oCard.settings.defaultSpan.cols ? oCard.settings.defaultSpan.cols: 1;
            }
            oCard.dashboardLayout.visible = true;
            oCard.dashboardLayout.itemHeight = oCardProp.itemHeight;
            oCard.dashboardLayout.headerHeight = oCardProp.headerHeight;
        };

        /**
         * Method to create variant for different column layouts like C2, C3,C5 and validate the layout
         *
         * @method _sliceSequenceSausage
         * @param {Object} oUseVariant - layout variant to use
         */
        LayoutModel.prototype._sliceSequenceSausage = function (oUseVariant) {
            var i = 0, j = 0, iCol = 0, iColEnd = 0, iMaxRows = 0, oCard = {}, aSliceCols = [];
            if (!oUseVariant) {
                this._sortCardsSausage(this.aCards);
            }
            // array to remember occupied columns
            for (i = 0; i < this.iColCount; i++) {
                aSliceCols.push({
                    col: i + 1,
                    rows: 0
                });
            }
            for (i = 0; i < this.aCards.length; i++) {
                oCard = this.aCards[i];
                // span data from card settings
                if (!oCard.dashboardLayout) {
                    oCard.dashboardLayout = {};
                }
                if (!oUseVariant) {
                    //set defaults variant as there is no variant present
                    this._setCardSpanFromDefault(oCard);
                } else {
                    //else take the variant for particular card from the variants
                    var oLayoutCard = oUseVariant.filter(function (item) {
                        return item.id === oCard.id;
                    });
                    //If the variant for the card already present
                    if (Array.isArray(oLayoutCard) && oLayoutCard.length > 0) {
                        //Copy the data for particular column layout
                        var oCardObj = oLayoutCard[0].dashboardLayout["C" + this.iColCount];
                        //If there is no layout present then read the variants for the previous layout
                        // e.g - In case you are loading C4 for the first time from C5
                        if (!oCardObj) {
                            //Get the variant from previous layout
                            var aLayoutkeys = Object.keys(oLayoutCard[0].dashboardLayout);
                            if (aLayoutkeys.length > 0) {
                                var oPreviousLREPData = oLayoutCard[0].dashboardLayout[aLayoutkeys[0]];
                                if (!oPreviousLREPData) {
                                    this._setCardSpanFromDefault(oCard);
                                } else {
                                    //Copy variant to the present layout except row and column as it can not be accomodated in all the cases
                                    // e.g -  Loading C5 data to C2 layout and any card has colspan = 3/4/5
                                    oCard.dashboardLayout.rowSpan = oPreviousLREPData.rowSpan;
                                    oCard.dashboardLayout.colSpan = oPreviousLREPData.colSpan;
                                    oCard.dashboardLayout.maxColSpan = oPreviousLREPData.maxColSpan;
                                    oCard.dashboardLayout.noOfItems = oPreviousLREPData.noOfItems;
                                    oCard.dashboardLayout.autoSpan = oPreviousLREPData.autoSpan;
                                    oCard.dashboardLayout.showOnlyHeader = oPreviousLREPData.showOnlyHeader;
                                }
                            }
                        } else {
                            //If variant already present for the layout, then just copy
                            oCard.dashboardLayout.rowSpan = oCardObj.rowSpan;
                            oCard.dashboardLayout.colSpan = oCardObj.colSpan;
                            oCard.dashboardLayout.maxColSpan = oCardObj.maxColSpan;
                            oCard.dashboardLayout.noOfItems = oCardObj.noOfItems;
                            oCard.dashboardLayout.autoSpan = oCardObj.autoSpan;
                            oCard.dashboardLayout.row = oCardObj.row;
                            oCard.dashboardLayout.column = oCardObj.col;
                            oCard.dashboardLayout.showOnlyHeader = oCardObj.showOnlyHeader;
                            continue;
                        }
                    } else {
                        //There may be case where the card is newly added to manifest and there is no variant data present
                        //So crete new variant and push it
                        oCard.dashboardLayout.row = this.iDummyRow;
                        oCard.dashboardLayout.column = 1;
                        var dashboardLayoutObj = {};
                        var layoutKey = {
                            row: oCard.dashboardLayout.row,
                            col: oCard.dashboardLayout.column,
                            rowSpan: oCard.dashboardLayout.rowSpan,
                            colSpan: oCard.dashboardLayout.colSpan,
                            maxColSpan: oCard.dashboardLayout.maxColSpan,
                            noOfItems: oCard.dashboardLayout.noOfItems,
                            autoSpan: oCard.dashboardLayout.autoSpan,
                            showOnlyHeader: oCard.dashboardLayout.showOnlyHeader
                        };
                        dashboardLayoutObj["C" + this.iColCount] = layoutKey;
                        oUseVariant.push({
                            id: oCard.id,
                            visibility: oCard.dashboardLayout.visible,
                            selectedKey: oCard.settings.selectedKey,
                            dashboardLayout: dashboardLayoutObj
                        });
                        continue;
                    }
                }
                //Check that the card is not going out of the layout
                oCard.dashboardLayout.colSpan = oCard.dashboardLayout.maxColSpan;
                oCard.dashboardLayout.colSpan = oCard.dashboardLayout.colSpan > this.iColCount ? this.iColCount : oCard.dashboardLayout.colSpan;
                iCol = iColEnd < this.iColCount ? iColEnd + 1 : 1;

                //check end col
                if (iCol + oCard.dashboardLayout.colSpan - 1 > this.iColCount) {
                    oCard.dashboardLayout.colSpan = this.iColCount - iCol + 1;
                }
                iColEnd = iCol + oCard.dashboardLayout.colSpan - 1;
                oCard.dashboardLayout.column = iCol;

                // get max rows of all affected rows
                iMaxRows = 0;
                for (j = oCard.dashboardLayout.column; j < oCard.dashboardLayout.column + oCard.dashboardLayout.colSpan; j++) {
                    if (aSliceCols[j - 1].rows > iMaxRows) {
                        iMaxRows = aSliceCols[j - 1].rows;
                    }
                }
                oCard.dashboardLayout.row = iMaxRows + 1;

                // set rows count of all affected columns
                for (j = oCard.dashboardLayout.column; j < oCard.dashboardLayout.column + oCard.dashboardLayout.colSpan; j++) {
                    aSliceCols[j - 1].rows = iMaxRows + oCard.dashboardLayout.rowSpan;
                }
            }
            this.extractCurrentLayoutVariant();
        };

		/**
		 * LayoutModel _sortCardsSausage
		 *
		 * @method _sortCardsSausage
		 * @param {Array} aCards - cards array
		 */
		LayoutModel.prototype._sortCardsSausage = function(aCards) {
			aCards.sort(function(card1, card2) {
				// both cards have sequence position
				if (card1.sequencePos && card2.sequencePos) {
					if (card1.sequencePos < card2.sequencePos) {
						return -1;
					} else if (card1.sequencePos > card2.sequencePos) {
						return 1;
					} else {
						return 0;
					}
					// the one with sequence pos moves up
				} else if (card1.sequencePos && !card2.sequencePos) {
					return -1;
				} else if (!card1.sequencePos && card2.sequencePos) {
					return 1;
					// sort by id
				} else {
					if (card1.id < card2.id) {
						return -1;
					} else if (card1.id > card2.id) {
						return 1;
					} else {
						return 0;
					}
				}
			});
		};

		/**
		 * sort and order cards by column
		 *
		 * @method _sortCardsByCol
		 * @param {Array} aCards - cards array
		 */
		LayoutModel.prototype._sortCardsByCol = function(aCards) {

			//sort by columns and order in column
			aCards.sort(function(card1, card2) {
				//if one card has no layout data, the other one get's up
				if (!card1.dashboardLayout && card2.dashboardLayout) {
					return 1;
				} else if (card1.dashboardLayout && !card2.dashboardLayout) {
					return -1;
				}

				// defaults for cards without dashboardLayout data
				if (card1.dashboardLayout.column && card1.dashboardLayout.row && card1.dashboardLayout.column === card2.dashboardLayout.column) {
					if (card1.dashboardLayout.row < card2.dashboardLayout.row) {
						return -1;
					} else if (card1.dashboardLayout.row > card2.dashboardLayout.row) {
						return 1;
					}
				} else if (card1.dashboardLayout.column) {
					return card1.dashboardLayout.column - card2.dashboardLayout.column;
				} else {
					return 0;
				}
			});
		};

		/**
		 * sort and order cards by row
		 *
		 * @method _sortCardsByRow
		 * @param {Array} aCards - cards array
		 */
		LayoutModel.prototype._sortCardsByRow = function(aCards) {

			//sort by columns and order in column
			aCards.sort(function(card1, card2) {
				//if one card has no layout data, the other one get's up
				if (!card1.dashboardLayout && card2.dashboardLayout) {
					return 1;
				} else if (card1.dashboardLayout && !card2.dashboardLayout) {
					return -1;
				}

				// defaults for cards without dashboardLayout data
				if (card1.dashboardLayout.column && card1.dashboardLayout.row && card1.dashboardLayout.row === card2.dashboardLayout.row) {
					if (card1.dashboardLayout.column < card2.dashboardLayout.column) {
						return -1;
					} else if (card1.dashboardLayout.column > card2.dashboardLayout.column) {
						return 1;
					}
				} else if (card1.dashboardLayout.row) {
					return card1.dashboardLayout.row - card2.dashboardLayout.row;
				} else {
					return 0;
				}
			});
		};

		/**
		 * rewind last card arrangement
		 * using undo buffer
		 */
        LayoutModel.prototype.undoLastChange = function () {
            if (this.oUndoBuffer.layoutVariant) {
                this.oLayoutVars = this.oUndoBuffer.layoutVariant;
                this.oUndoBuffer = {};
            }
        };

        /**
         * Method to handle resize of card
         *
         * @method {Public} resizeCard
         * @param {String} cardId - Card Id which is resized
         * @param {object} oSpan - Updated rowspan and colspan of the card
         * @param {boolean} bManualResize - Flag to check that if the card is resized by user or the initial loading
         * @return {Object}   {resizeCard : , affectedCards: } - Object containing the Updated card properties and affected cards
         */
        LayoutModel.prototype.resizeCard = function (cardId, oSpan, bManualResize) {

            this._registerChange("resize");
            var oRCard = this.getCardById(cardId);
            if (!oRCard) {
                return [];
            }
            var deltaH = oSpan.colSpan - oRCard.dashboardLayout.colSpan;
            var deltaV = oSpan.rowSpan - oRCard.dashboardLayout.rowSpan;

            if (deltaH === 0 && deltaV === 0) {
                return {
                    resizeCard: oRCard,
                    affectedCards: []
                };
            } else if (bManualResize && oRCard.dashboardLayout.autoSpan) {
                oRCard.dashboardLayout.autoSpan = false;
            }

            if (!bManualResize || (deltaV && deltaH === 0)) {
                this._arrangeCards(oRCard, {
                    "row": oSpan.rowSpan,
                    "column": oRCard.dashboardLayout.colSpan,
                    "showOnlyHeader": oSpan.showOnlyHeader
                }, 'resize');
            } else {
                this._arrangeCards(oRCard, {
                    "row": oSpan.rowSpan,
                    "column": oSpan.colSpan,
                    "showOnlyHeader": oSpan.showOnlyHeader
                }, 'resize');
            }
            return {
                resizeCard: oRCard,
                //affectedCards: this.aCards
                affectedCards: this._removeSpaceBeforeCard()
            };
        };

        /**
         * Method to remove the unnesessary spaces before card
         *
         * @method {Private} _removeSpaceBeforeCard
         * @return {Array of Objects} this.aCards - Updated position of array of cards object
         */
        LayoutModel.prototype._removeSpaceBeforeCard = function () {
            this._sortCardsByRow(this.aCards);
            var delta = {};

            for (var i = 1; i <= this.iColCount; i++) {
                delta[i] = 1;
            }

            for (var j = 0; j < this.aCards.length; j++) {
                var lowerLimit = this.aCards[j].dashboardLayout.column;
                var upperLimit = this.aCards[j].dashboardLayout.column + this.aCards[j].dashboardLayout.colSpan - 1;
                if (this.aCards[j].dashboardLayout.colSpan > 1) {
                    var tempArr = [];
                    for (var k = lowerLimit; k <= upperLimit; k++) {
                        tempArr.push(delta[k]);
                    }
                    var maxRow = Math.max.apply(Math, tempArr);
                    for (var l = lowerLimit; l <= upperLimit; l++) {
                        delta[l] = maxRow + this.aCards[j].dashboardLayout.rowSpan;
                    }
                    this.aCards[j].dashboardLayout.row = maxRow;
                } else {
                    if ((this.aCards[j].dashboardLayout.row !== delta[lowerLimit])) {
                        this.aCards[j].dashboardLayout.row = delta[lowerLimit];
                    }
                    delta[lowerLimit] = this.aCards[j].dashboardLayout.row + this.aCards[j].dashboardLayout.rowSpan;
                }
            }
            return this.aCards;
        };

        /**
         * Method called to update new position of cards upon drag or resize
         *
         * @method {Private} _arrangeCards
         * @param {Object} oCard - Card object
         * @param {Object} newCardPosition - If the card is dragged then newCardPosition is the new starting point of the card
         *                                 - If the card is resized then newCardPosition is the changes in the rowspan and colspan
         * @param {Boolean} dragOrResize - Flag to distiguish between drag and drop or resize
         */
        LayoutModel.prototype._arrangeCards = function (oCard, newCardPosition, dragOrResize) {
            var originalCardCopy = jQuery.extend(true, {}, oCard);
            var verticalDragFlag = false;
            if ('drag' === dragOrResize && oCard.dashboardLayout.column === newCardPosition.column &&
                newCardPosition.row !== oCard.dashboardLayout.row) {
                verticalDragFlag = true;
            }
            this._sortCardsByRow(this.aCards);
            var affectedCards = [];
            var flag = false;
            //If the card is dragged then newCardPosition is the new starting point of the card
            if (dragOrResize === "drag") {
                oCard.dashboardLayout.row = newCardPosition.row;
                oCard.dashboardLayout.column = newCardPosition.column;
                //If the card is resized then newCardPosition is the changes in the rowspan and colspan
            } else if (dragOrResize === "resize") {
                oCard.dashboardLayout.rowSpan = newCardPosition.row;
                oCard.dashboardLayout.colSpan = newCardPosition.column;
                oCard.dashboardLayout.showOnlyHeader = newCardPosition.showOnlyHeader;
            }

            affectedCards.push(oCard);
            for (var i = 0; i < affectedCards.length; i++) {
                for (var j = 0; j < this.aCards.length; j++) {
                    if (affectedCards[i].id === this.aCards[j].id || !affectedCards[i].dashboardLayout.visible) {
                        continue;
                    } else {
                        flag = this._checkOverlapOfCards(affectedCards[i], this.aCards[j]);
                        if (flag === true) {
                            //In case you are dragging a card horizontally
                            if (verticalDragFlag) {
                                //To check for moving a card upward
                                if (newCardPosition.row < originalCardCopy.dashboardLayout.row && newCardPosition.row === this.aCards[j].dashboardLayout.row) {
                                    affectedCards[i].dashboardLayout.row = this.aCards[j].dashboardLayout.row;
                                    this.aCards[j].dashboardLayout.row = affectedCards[i].dashboardLayout.row + affectedCards[i].dashboardLayout.rowSpan;
                                    //To check for moving a card downward
                                } else if (newCardPosition.row > originalCardCopy.dashboardLayout.row + this.aCards[j].dashboardLayout.rowSpan) {
                                    this.aCards[j].dashboardLayout.row = originalCardCopy.dashboardLayout.row;
                                    affectedCards[i].dashboardLayout.row = this.aCards[j].dashboardLayout.row + this.aCards[j].dashboardLayout.rowSpan;
                                    affectedCards.push(affectedCards[i]);
                                } else {
                                    //Not a valid scenario
                                }
                                //In case you are dragging a card vertically
                            } else {
                                this.aCards[j].dashboardLayout.row = affectedCards[i].dashboardLayout.row + affectedCards[i].dashboardLayout.rowSpan;
                                affectedCards.push(this.aCards[j]);
                            }
                        }
                    }
                }
            }
        };

        /**
         * Method to check that if two cards are colliding or not
         *
         * @method {Private} _checkOverlapOfCards
         * @param {Object} originalCard - Original card object
         * @param {Object} affectedCard - The card with which needs to be checked object
         * @return {Boolean} collideX && collideY - collide in x-direction and collide in y-direction
         */
        LayoutModel.prototype._checkOverlapOfCards = function (originalCard, affectedCard) {
            var originalCardStartRow = originalCard.dashboardLayout.row;
            var originalCardEndRow = originalCard.dashboardLayout.row + originalCard.dashboardLayout.rowSpan;
            var originalCardStartColumn = originalCard.dashboardLayout.column;
            var originalCardEndColumn = originalCard.dashboardLayout.column + originalCard.dashboardLayout.colSpan;

            var affectedCardStartRow = affectedCard.dashboardLayout.row;
            var affectedCardEndRow = affectedCard.dashboardLayout.row + affectedCard.dashboardLayout.rowSpan;
            var affectedCardStartColumn = affectedCard.dashboardLayout.column;
            var affectedCardEndColumn = affectedCard.dashboardLayout.column + affectedCard.dashboardLayout.colSpan;

            var collideX = false,
                collideY = false;
            //Collision in X-direction

            if ((affectedCardStartColumn >= originalCardStartColumn && affectedCardStartColumn < originalCardEndColumn) ||
                (affectedCardEndColumn > originalCardStartColumn && affectedCardEndColumn <= originalCardEndColumn) ||
                (affectedCardStartColumn <= originalCardStartColumn && affectedCardEndColumn >= originalCardEndColumn)) {
                collideX = true;
            }
            //Collision in Y-direction
            if ((affectedCardStartRow >= originalCardStartRow && affectedCardStartRow < originalCardEndRow) ||
                (affectedCardEndRow > originalCardStartRow && affectedCardEndRow <= originalCardEndRow) ||
                (affectedCardStartRow <= originalCardStartRow && affectedCardEndRow >= originalCardEndRow)) {
                collideY = true;
            }
            return collideX && collideY;
        };

		/**
		 * drop duplicate entries in given array
		 *
		 * @method condenseCardArray
		 * @param {Array} array of cards
		 * @return {Array} resulting condensed array
		 */
		LayoutModel.prototype.condenseCardArray = function(array) {
			this._sortCardsByCol(array);
			return array.reduce(function(collect, current) {
				if (collect.indexOf(current) < 0) {
					collect.push(current);
				}
				return collect;
			}, []);
		};

		/**
		 * extract the current layout variant into a new object
		 *
		 * @method extractCurrentLayoutVariant
		 * @returns {Object} new object containing current layout variant data
		 */

        LayoutModel.prototype.extractCurrentLayoutVariant = function () {
            var i = 0;
            var oCard = {};
            var oCardVariant = [];

            for (i = 0; i < this.aCards.length; i++) {
                oCard = this.aCards[i];
                oCardVariant = this.oLayoutVars.filter(function (item) {
                    return item.id === oCard.id;
                });
                var dashboardLayoutObj = {};
                var cardProperties = {
                    row: oCard.dashboardLayout.row,
                    col: oCard.dashboardLayout.column,
                    rowSpan: oCard.dashboardLayout.rowSpan,
                    colSpan: oCard.dashboardLayout.colSpan,
                    maxColSpan: oCard.dashboardLayout.maxColSpan,
                    noOfItems: oCard.dashboardLayout.noOfItems,
                    autoSpan: oCard.dashboardLayout.autoSpan,
                    showOnlyHeader: oCard.dashboardLayout.showOnlyHeader
                };
                dashboardLayoutObj["C" + this.iColCount] = cardProperties;
                //If the variant for any card is not present at all
                if (!(Array.isArray(oCardVariant) && oCardVariant.length !== 0 )) {
                    this.oLayoutVars.push({
                        id: oCard.id,
                        visibility: oCard.dashboardLayout.visible,
                        selectedKey: oCard.settings.selectedKey,
                        dashboardLayout: dashboardLayoutObj
                    });
                } else {
                    oCardVariant[0].selectedKey = oCard.settings.selectedKey || oCardVariant[0].selectedKey;
                    oCardVariant[0].dashboardLayout = {};
                    oCardVariant[0].dashboardLayout["C" + this.iColCount] = cardProperties;
                }
            }
        };

        LayoutModel.prototype._registerChange = function (action) {
            this.bLayoutChanged = true;
            this.oUndoBuffer.action = action;
            this.extractCurrentLayoutVariant();
            this.oUndoBuffer.layoutVariant = this.oLayoutVars;
        };

		/**
		 * get an array containing all occupied grid cells and their "tenant"
		 *
		 * @method _extractGrid
		 * @param {String} sortBy - "col" or "row"
		 * @returns {Array} aCells - array of cells
		 */
		LayoutModel.prototype._extractGrid = function(sortBy) {
			var first = sortBy;
			var second = "";

			if (first === "col") {
				second = "row";
			} else if (first === "row") {
				second = "col";
			} else {
				jQuery.sap.log.error("DashboardLayoutModel._getCurrentLayoutVariant: param sortBy has to be col or row!");
			}

			//get occupied cells first
			var aCells = [];
			var i = 0;
			var ri = 0;
			var ci = 0;

			for (i = 0; i < this.aCards.length; i++) {
				var cardLayout = this.aCards[i].dashboardLayout;
				if (cardLayout.visible === false) {
					continue;
				}
				for (ri = cardLayout.row; ri < cardLayout.row + cardLayout.rowSpan; ri++) {
					for (ci = cardLayout.column; ci < cardLayout.column + cardLayout.colSpan; ci++) {
						aCells.push({
							col: ci,
							row: ri,
							card: this.aCards[i]
						});
					}
				}
			}

			//sort by given attribute
			aCells.sort(function(cell1, cell2) {
				// defaults for cards without dashboardLayout data
				if (cell1[first] === cell2[first]) {
					if (cell1[second] < cell2[second]) {
						return -1;
					} else if (cell1[second] > cell2[second]) {
						return 1;
					}
				} else {
					return cell1[first] - cell2[first];
				}
			});
			return aCells;
		};

		/**
		 * get the current layout variant
		 *
		 * @method validateGrid
		 * @param {Boolean} bRepair - wether to repair grid (true) -> put inconistent cards at the end
		 * @returns {Boolean} bGridValid - indicates the validity
		 */
		LayoutModel.prototype.validateGrid = function(bRepair) {
			var bGridValid = true;
			var i = 0;
			var aCells = this._extractGrid("row");
			var prev = aCells[0];
			var curr = {};
			var aDisplaceCards = [];

			for (i = 1; i < aCells.length; i++) {
				curr = aCells[i];
				if (curr.col > this.iColCount || curr.col < 0) {
					bGridValid = false;
					aDisplaceCards.push(curr.card);
					jQuery.sap.log.warning("DashboardLayout: Cell is outside (col/row): " + curr.col + "/" + curr.row);
				}
				if (curr.col === prev.col && curr.row === prev.row) {
					bGridValid = false;
					aDisplaceCards.push(curr.card);
					jQuery.sap.log.warning("DashboardLayout: Cell has two tenants (col/row//id1/id2: " + curr.col + "/" + curr.row + "//" + prev.card.id +
						"/" + curr
						.card.id);
				}
				prev = curr;
			}

			//repair grid
			if (bRepair && aDisplaceCards.length > 0) {
				aDisplaceCards = this.condenseCardArray(aDisplaceCards);
				for (i = 0; i < aDisplaceCards.length; i++) {
					this._displaceCardToEnd(aDisplaceCards[i]);
				}
               this._removeSpaceBeforeCard();
				bGridValid = true;
				jQuery.sap.log.info("DashboardLayout: invalid grid repaired");
			}

			return bGridValid;
		};

        /**
         * Method which returns the highest occupied row in the layout
         *
         * @method _findHighestOccupiedRow
         * @return {Integer} iHighestRow - Highest ever row which is occupied in the layout
         */
        LayoutModel.prototype._findHighestOccupiedRow = function () {
            var maxHeightArr = [];
            var layoutKey = 'C' + this.iColCount;

            function filterByColCount(element) {
                return element.dashboardLayout[layoutKey].col === iCount;
            }

            function findCardwithMaxRowCount(element, index, array) {
                return element.dashboardLayout[layoutKey].row ===
                    Math.max.apply(Math, array.map(function (ele) {
                        return ele.dashboardLayout[layoutKey].row;
                    }));
            }

            for (var iCount = 1; iCount <= this.iColCount; iCount++) {
                //get the list of cards for each column
                var aArray = this.oLayoutVars.filter(filterByColCount);
                if (!!aArray) {
                    //For particular column find the card which has row count is maximum
                    //if row count is maximum means the card is present at the bottom for that column
                    var oObj = aArray.filter(findCardwithMaxRowCount)[0];
                    if (!!oObj) {
                        //For each column push the column height into the array
                        //Height of the column = margin-top of the card which is present at bottom + height of the card which is present at bottom
                        maxHeightArr.push(+oObj.dashboardLayout[layoutKey].row + +oObj.dashboardLayout[layoutKey].rowSpan);
                    }
                }
            }
            //Take the maximum height from the array which is equal to the height of the container
            var iHighestRow = Math.max.apply(Math, maxHeightArr.map(function (ele) {
                return ele;
            }));
            return iHighestRow;
        };

        /**
         * Method which returns no of items to display based upon card type / list type and flavour
         *
         * @method _getItemLength
         * @param {Object} oCard - card object which is the object of card properties model
         * @return {Integer} iNoOfItems - No of items to fetch in batch call(default)
         */
        LayoutModel.prototype._getDefaultCardItemHeightAndCount = function (oCardProperties) {
            var densityStyle = CommonUtils._setCardpropertyDensityAttribute();
            //the id build by Type-ListType-flavor
            var CARD_PROPERTY = {
                "List_condensed": {
                    itemLength: 5,
                    itemHeight: 64
                },
                "List_condensed_imageSupported_cozy": {
                    itemLength: 5,
                    itemHeight: 72
                },
                "List_condensed_imageSupported_compact": {
                    itemLength: 5,
                    itemHeight: 60
                },
                "List_extended": {
                    itemLength: 3,
                    itemHeight: 97
                },
                "List_condensed_bar": {
                    itemLength: 5,
                    itemHeight: 65
                },
                "List_extended_bar": {
                    itemLength: 3,
                    itemHeight: 95
                },
                "Table": {
                    itemLength: 5,
                    itemHeight: 62
                },
                "Linklist": {
                    itemLength: 6,
                    itemHeight: 0
                }
            };
            var headerHeight = {
                "KPIHeader": {
                    "1": {
                        "1": 158,
                        "2": 174
                    },
                    "2": {
                        "1": 179,
                        "2": 195
                    },
                    "3": {
                        "1": 201,
                        "2": 223
                    }
                }, "NormalHeader": {
                    "1": {
                        "1": 82,
                        "2": 98
                    },
                    "2": {
                        "1": 103,
                        "2": 119
                    },
                    "3": {
                        "1": 125,
                        "2": 141
                    }
                }
            };
            var SHOW_FILTER_IN_HEADER_HEIGHT = 22;
            var SHOW_SHORTING_IN_HEADER_HEIGHT = 21;
            var iHeaderHeight = 0;
            if (oCardProperties) {
                var cardType = oCardProperties.template,
                    listType = oCardProperties.settings.listType,
                    flavor = oCardProperties.settings.listFlavor,
                    imageSupported = oCardProperties.settings.imageSupported,
                    iNoOfItems = 0, iItemHeight = 0;
                if (cardType == "sap.ovp.cards.list") {
                    if (listType == "extended") {
                        if (flavor == "bar") {
                            iNoOfItems = CARD_PROPERTY["List_extended_bar"]["itemLength"];
                            iItemHeight = CARD_PROPERTY["List_extended_bar"]["itemHeight"];
                        } else {
                            iNoOfItems = CARD_PROPERTY["List_extended"]["itemLength"];
                            iItemHeight = CARD_PROPERTY["List_extended"]["itemHeight"];
                        }
                    } else {
                        if (flavor == "bar") {
                            iNoOfItems = CARD_PROPERTY["List_condensed_bar"]["itemLength"];
                            iItemHeight = CARD_PROPERTY["List_condensed_bar"]["itemHeight"];
                        } else {
                            if (imageSupported === 'true') {
                                if (densityStyle === 'cozy') {
                                    iItemHeight = CARD_PROPERTY["List_condensed_imageSupported_cozy"]["itemHeight"];
                                } else {
                                    iItemHeight = CARD_PROPERTY["List_condensed_imageSupported_compact"]["itemHeight"];
                                }
                            } else {
                                iItemHeight = CARD_PROPERTY["List_condensed"]["itemHeight"];
                            }
                            iNoOfItems = CARD_PROPERTY["List_condensed"]["itemLength"];
                        }
                    }
                } else if (cardType == "sap.ovp.cards.table") {
                    iNoOfItems = CARD_PROPERTY["Table"]["itemLength"];
                    iItemHeight = CARD_PROPERTY["Table"]["itemHeight"];
                } else if (cardType === "sap.ovp.cards.linklist") {
                    iNoOfItems = CARD_PROPERTY["Linklist"]["itemLength"];
                    iItemHeight = CARD_PROPERTY["Linklist"]["itemHeight"];
                }
                var titleRow = oCardProperties.settings.defaultSpan && oCardProperties.settings.defaultSpan.minimumTitleRow ? oCardProperties.settings.defaultSpan.minimumTitleRow : 1;
                var subTitleRow = oCardProperties.settings.defaultSpan && oCardProperties.settings.defaultSpan.minimumSubTitleRow ? oCardProperties.settings.defaultSpan.minimumSubTitleRow : 1;
                var headerType = (oCardProperties.settings.dataPointAnnotationPath || (oCardProperties.settings.tabs && oCardProperties.settings.tabs[0].dataPointAnnotationPath)) ? "KPIHeader" : "NormalHeader";
                iHeaderHeight = headerHeight[headerType][titleRow][subTitleRow];
                if (headerType === "KPIHeader") {
                    if (oCardProperties.settings.showFilterInHeader === true) {
                        iHeaderHeight += SHOW_FILTER_IN_HEADER_HEIGHT;
                    }
                    if (oCardProperties.settings.showSortingInHeader === true) {
                        iHeaderHeight += SHOW_SHORTING_IN_HEADER_HEIGHT;
                    }
                }
                return {
                    noOfItems: iNoOfItems,
                    itemHeight: iItemHeight,
                    headerHeight: iHeaderHeight
                };
            }
        };

		return LayoutModel;

	}, /* bExport= */
	true);
}; // end of sap/ovp/ui/DashboardLayoutModel.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.DashboardLayoutRearrange') ) {
jQuery.sap.declare('sap.ovp.ui.DashboardLayoutRearrange'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ovp/ui/DashboardLayoutRearrange",[], function() {
	"use strict";

	jQuery.sap.require("sap.ovp.ui.UIActions");

	var Rearrange = function(settings) {
		this.init(settings);
	};

	Rearrange.prototype.init = function(settings) {
		settings.beforeDragCallback = this._beforeDragHandler.bind(this);
		settings.dragStartCallback = this._dragStartHandler.bind(this);
		settings.dragMoveCallback = this._dragMoveHandler.bind(this);
		settings.dragEndCallback = this._dragEndHandler.bind(this);
		settings.resizeStartCallback = this._resizeStartHandler.bind(this);
		settings.resizeMoveCallback = this._resizeMoveHandler.bind(this);
		settings.resizeEndCallback = this._resizeEndHandler.bind(this);
		settings.endCallback = this._endHandler.bind(this);

		this.placeHolderClass = settings.placeHolderClass;
		this.layout = settings.layout;
		this.settings = settings;
		this.destroy(); //destroy the previous instance of UIActions
		this.uiActions = new sap.ovp.ui.UIActions(this.settings).enable();
		this.aCardsOrder = null; //DOM elements array
		this.aCards = settings.aCards; //cards properties persistence
		this.layoutUtil = settings.layoutUtil;
		this.verticalMargin = null; //space vertical between items
		this.horizontalMargin = null; //horizontal space vertical between items
		this.top = null; //space between layout top and first card
		this.left = null; //space between layout left and first card
		this.width = null; //item width
		this.layoutOffset = null; //layout coordinates on screen, needed to normalize mouse position to layout
		this.jqLayout = null; //layout jQuery reference
		this.jqLayoutInner = null; //layout inner wrapper jQuery reference
		this.isRTLEnabled = null; //RTL flag
		this.rowHeight = settings.rowHeight;
		this.floaterData = null; //id, position and width of the currently dragged card
		this.resizeData = {}; //card resize data (ghost values)
        this.updatedScrollTop = 0;
        this.SCROLL_OFFSET = 16;
	};

	Rearrange.prototype.destroy = function() {
		if (this.uiActions) {
			this.uiActions.disable();
			this.uiActions = null;
		}
	};

    //*******************************Resizing Card handlers************************************************//

    /**
     * Callback for UIActions resizeStartCallback, every time when resize starts
     *
     * @method {Private} _resizeStartHandler
     * @param {Object} evt - Event object
     * @param {Object} cardElement - jquery element object on which resize is triggered
     */

    Rearrange.prototype._resizeStartHandler = function (evt, cardElement) {

        var oCard = this.layoutUtil.dashboardLayoutModel.getCardById(this.layoutUtil.getCardId(cardElement.id));
        if (oCard.template === "sap.ovp.cards.stack" || oCard.settings.stopResizing) {
            return;
        }
        //Prevent selection of text on tiles and groups
        if (jQuery(window).getSelection) {
            var selection = jQuery(window).getSelection();
            selection.removeAllRanges();
        }
        cardElement.classList.add('sapOvpCardResize');
        oCard.dashboardLayout.autoSpan = false;
        this.initCardsSettings();
    };

    /**
     * Callback for UIActions resizeEndCallback, every time when resize ends
     *
     * @method {Private} _resizeEndHandler
     * @param {Object} evt - Event object
     * @param {Object} cardElement - jquery element object on which resize is triggered
     */

    Rearrange.prototype._resizeEndHandler = function (evt, cardElement) {
        if (cardElement) {
            this.updatedScrollTop = 0;
            cardElement.style.zIndex = -1;
            var oCard = this.layoutUtil.changedCards.resizeCard;
            oCard.dashboardLayout.maxColSpan = oCard.dashboardLayout.colSpan;
            this.layoutUtil._sizeCard(oCard);
            this.layoutUtil.changedCards = {};
            if (sap.ui.Device.system.desktop) {
                jQuery("body").removeClass("sapOVPDisableUserSelect sapOVPDisableImageDrag");
            }
            jQuery(this.settings.wrapper).removeClass("dragAndDropMode");
            jQuery("#sapOvpOverlayDivForCursor").remove();
            jQuery("#ovpResizeRubberBand").remove();
            cardElement.classList.remove('sapOvpCardResize');
            //Save all the layout changes to LREP
            this.layoutUtil.getDashboardLayoutModel().extractCurrentLayoutVariant();
            this.layoutUtil.oLayoutCtrl.fireAfterDragEnds();
            if (jQuery(window).getSelection) {
                var selection = jQuery(window).getSelection();
                selection.removeAllRanges();
            }
        }
    };

    /**
     * Callback for UIActions resizeMoveCallback, every time when mouse pointer moves in resize mode
     *
     * @method {Private} _resizeMoveHandler
     * @param {Object} actionObject - jquery element object on which resize is triggered
     */

    Rearrange.prototype._resizeMoveHandler = function (actionObject) {
        if (actionObject.element) {
            actionObject.element.classList.remove("sapOvpMinHeightContainer");
            var cardDetails, cardSizeProperties, ghostWidth, ghostHeight,
                oCard = this.layoutUtil.dashboardLayoutModel.getCardById(this.layoutUtil.getCardId(actionObject.element.id));
            if (oCard.template === "sap.ovp.cards.stack" || oCard.settings.stopResizing) {
                return;
            }
            //To calculate the scroll height
            var viewElement = document.getElementsByClassName("sapFDynamicPageContentWrapper")[0];
            var viewHeight = viewElement.offsetHeight;
            var viewRect = viewElement.getBoundingClientRect();
            if ((actionObject.evt.clientY - viewElement.offsetTop + this.SCROLL_OFFSET) > viewHeight) {
                viewElement.scrollTop = viewElement.scrollTop + this.SCROLL_OFFSET;
                this.updatedScrollTop += this.SCROLL_OFFSET;
            } else if (((actionObject.evt.clientY - viewElement.offsetTop) < viewRect.top + this.SCROLL_OFFSET) && viewElement.scrollTop !== 0) {
                viewElement.scrollTop = viewElement.scrollTop - this.SCROLL_OFFSET;
                this.updatedScrollTop -= this.SCROLL_OFFSET;
            }

            cardSizeProperties = this.layoutUtil.calculateCardProperties(oCard.id);
            cardDetails = this._calculateMinimumCardHeight(actionObject, cardSizeProperties, oCard.dashboardLayout.showOnlyHeader);
            ghostHeight = cardDetails.ghostHeightCursor;
            ghostWidth = cardDetails.ghostWidthCursor <= this.layoutUtil.getColWidthPx() ? this.layoutUtil.getColWidthPx() : cardDetails.ghostWidthCursor;

            var leastHeight = cardSizeProperties.leastHeight + 2 * this.layoutUtil.CARD_BORDER_PX;
            var minCardHeight = cardSizeProperties.minCardHeight + 2 * this.layoutUtil.CARD_BORDER_PX;

            if (ghostHeight <= leastHeight) {
                ghostHeight = leastHeight;
                actionObject.element.classList.add("sapOvpMinHeightContainer");
                this.resizeData.showOnlyHeader = true;
            } else if (ghostHeight > leastHeight && ghostHeight <= minCardHeight) {
                var cutOffPoint = (leastHeight + minCardHeight) / 2;
                if (ghostHeight > cutOffPoint) {
                    ghostHeight = minCardHeight;
                    this.resizeData.showOnlyHeader = false;
                } else {
                    ghostHeight = leastHeight;
                    actionObject.element.classList.add("sapOvpMinHeightContainer");
                    this.resizeData.showOnlyHeader = true;
                }

            } else {
                this.resizeData.showOnlyHeader = false;
            }
            this._addOverLay(cardDetails.cursor);
            this.resizeData.colSpan = Math.round(ghostWidth / this.layoutUtil.getColWidthPx());
            this.resizeData.rowSpan = Math.ceil(ghostHeight / this.layoutUtil.getRowHeightPx());
            this.layoutUtil.updateCardSize(oCard.id, ghostHeight, ghostWidth, this.resizeData.rowSpan);
            this.showGhostWhileResize(actionObject, cardDetails);
            if (this.resizeData.colSpan && this.resizeData.rowSpan) {
                //get card controller and send resize data
                this.layoutUtil.resizeCard(actionObject.element.getAttribute("id"), this.resizeData);
            }
            this.resizeData = {};
            this.layoutUtil.setKpiNumericContentWidth(actionObject.element);
        }
    };

    //************************************* Drag and Drop Card handlers*****************************************//

    /**
     * Callback for beforeDragCallback in UIActions before clone created
     *
     * @method {Private} _beforeDragHandler
     * @param {Object} evt - Event object
     * @param {Object} cardElement - jquery element object on which drag is triggered
     */

    Rearrange.prototype._beforeDragHandler = function (evt, cardElement) {

        if (evt.type === "mousedown") {
            evt.preventDefault();
        }

        //Prevent text selection menu and magnifier on mobile devices
        if (sap.ui.Device.browser.mobile) {
            this.selectableElemets = jQuery(cardElement).find(".sapUiSelectable");
            this.selectableElemets.removeClass("sapUiSelectable");
        }
        jQuery(this.settings.wrapper).addClass("dragAndDropMode");
    };

    /**
     * Callback for UIActions dragStartCallback, every time when before drag starts
     *
     * @method {Private} _dragStartHandler
     * @param {Object} evt - Event object
     * @param {Object} cardElement - jquery element object on which drag event is triggered
     */

    Rearrange.prototype._dragStartHandler = function (evt, cardElement) {

        //Prevent the browser to mark any elements while dragging
        if (sap.ui.Device.system.desktop) {
            jQuery("body").addClass("sapOVPDisableUserSelect sapOVPDisableImageDrag");
        }

        //Prevent selection of text on tiles and groups
        jQuery.sap.log.info(cardElement);
        if (jQuery(window).getSelection) {
            var selection = jQuery(window).getSelection();
            selection.removeAllRanges();
        }
        this.initCardsSettings();
        //store the width and height of the card for ghost size
        var oCardRect = cardElement.children[0].getBoundingClientRect();
        this.floaterData = {
            width: oCardRect.width,
            height: oCardRect.height,
            startLeft: oCardRect.left - this.layoutOffset.left,
            startTop: oCardRect.top - this.layoutOffset.top
        };
    };

    /**
     * Callback for UIActions dragMoveCallback, every time when mouse is moved in drag mode
     *
     * @method {Private} _dragMoveHandler
     * @param {Object} actionObject - jquery element object on which drag event is triggered
     */

    Rearrange.prototype._dragMoveHandler = function (actionObject) {
        if (actionObject.element) {
            var mainHeaderWrapperHeight = 0;
            var viewElement = document.getElementsByClassName("sapFDynamicPageContentWrapper")[0];
            var viewTitleHeight = document.getElementsByClassName("sapFDynamicPageTitleWrapper")[0].offsetHeight;
            var uShellHeadHeight = document.getElementsByClassName("sapUshellShellHeadCenter")[0].offsetHeight;
            var viewHeight = viewElement.offsetHeight;
            var viewRect = viewElement.getBoundingClientRect();
            var updatedScrollTop;
            if (document.getElementsByClassName("sapFDynamicPageHeader")[0]) {
                mainHeaderWrapperHeight = document.getElementsByClassName("sapFDynamicPageHeader")[0].offsetHeight;
            }
            if ((actionObject.evt.clientY - viewElement.offsetTop + this.SCROLL_OFFSET) > viewHeight) {
                viewElement.scrollTop = viewElement.scrollTop + this.SCROLL_OFFSET;
                updatedScrollTop = viewElement.scrollTop;
            } else if (((actionObject.evt.clientY - viewElement.offsetTop) < viewRect.top + this.SCROLL_OFFSET) && viewElement.scrollTop !== 0) {
                viewElement.scrollTop = viewElement.scrollTop - this.SCROLL_OFFSET;
                updatedScrollTop = viewElement.scrollTop;
            } else {
                updatedScrollTop = viewElement.scrollTop;
            }
            this.floaterData.id = actionObject.element.id;
            this.floaterData.left = actionObject.clone.getBoundingClientRect().left;
            this.floaterData.top = actionObject.clone.getBoundingClientRect().top + updatedScrollTop - (viewTitleHeight + mainHeaderWrapperHeight + uShellHeadHeight);

            var newCardPosition = {
                row: Math.round(this.floaterData.top / this.layoutUtil.getRowHeightPx()) + 1,
                column: Math.round(this.floaterData.left / this.layoutUtil.getColWidthPx()) + 1
            };
            newCardPosition.row = newCardPosition.row <= 0 ? 1 : newCardPosition.row;
            newCardPosition.column = newCardPosition.column <= 1 ? 1 : newCardPosition.column;
            var oCard = this.layoutUtil.dashboardLayoutModel.getCardById(this.layoutUtil.getCardId(this.floaterData.id));
            //If the new position is beyond the viewport then move the card to the desired position
            if (newCardPosition.column + oCard.dashboardLayout.colSpan > this.columnCount) {
                newCardPosition.column = (this.columnCount - oCard.dashboardLayout.colSpan) + 1;
            }
            this.floaterData.row = newCardPosition.row;
            this.floaterData.column = newCardPosition.column;
            jQuery.when(this.layoutUtil.dashboardLayoutModel._arrangeCards(oCard, this.floaterData, 'drag')).done(function () {
                this.layoutUtil._positionCards(this.aCards);
                this.layoutUtil.dashboardLayoutModel._removeSpaceBeforeCard();
            }.bind(this));
            this.showGhostWhileDragMove({
                row: oCard.dashboardLayout.row,
                column: oCard.dashboardLayout.column
            }, actionObject);
        }
    };

    /**
     * Callback for UIActions dragEndCallback, every time after drag and drop finished
     *
     * @method {Private} _dragEndHandler
     * @param {Object} evt - Event object
     * @param {Object} cardElement - jquery element object on which drag event is triggered
     */

    Rearrange.prototype._dragEndHandler = function (evt, cardElement, cloneObj) {
        if (cardElement) {
            var cardRect = cardElement.getBoundingClientRect();
            var cloneRect = cloneObj.getBoundingClientRect();
            var cloneObjTransform = window.getComputedStyle(cloneObj).transform.split(",");
            var topDiff = cardRect.top - cloneRect.top;
            var leftDiff = cardRect.left - cloneRect.left;
            var translateX = parseInt(cloneObjTransform[4], 10) + leftDiff;
            var translateY = parseInt(cloneObjTransform[5], 10) + topDiff;
            cloneObj.style[this.layoutUtil.cssVendorTransition] = 'transform 0.3s cubic-bezier(0.46, 0, 0.44, 1)';
            translateX = Math.abs(translateX) - 8 < 0 ? 0 : translateX - 8;
            translateY = Math.abs(translateY) - 8 < 0 ? 0 : translateY - 8;
            cloneObj.style[this.layoutUtil.cssVendorTransform] = 'translate3d(' + translateX + 'px, ' + translateY + 'px, 0px) ';
            this.layoutUtil._positionCards(this.aCards);
            // Do something when the transition ends
            jQuery(cloneObj).one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", function (event) {
                //Save all the layout changes to LREP
                jQuery("#ovpDashboardLayoutMarker").remove(); //remove insert marker
                this.layoutUtil.getDashboardLayoutModel().extractCurrentLayoutVariant();
                this.layoutUtil.oLayoutCtrl.fireAfterDragEnds();
                // Cleanup added classes and styles before drag
                if (sap.ui.Device.system.desktop) {
                    jQuery("body").removeClass("sapOVPDisableUserSelect sapOVPDisableImageDrag");
                }
                jQuery(this.settings.wrapper).removeClass("dragAndDropMode");
                if (jQuery(window).getSelection) {
                    var selection = jQuery(window).getSelection();
                    selection.removeAllRanges();
                }
                this.uiActions.removeClone();
                cardElement.classList.remove(this.placeHolderClass);
                //Calculate the height of the container upon card resize
                var iContainerHeight = (this.layoutUtil.dashboardLayoutModel._findHighestOccupiedRow() * this.layoutUtil.ROW_HEIGHT_PX) + 32;
                jQuery(".sapUshellEasyScanLayoutInner").css({"height": iContainerHeight + "px", "z-index": "1"});
            }.bind(this));
        }
    };

    /**
     * Callback for UIActions endCallback, after completion of event
     *
     * @method {Private} _endHandler
     * @param {Object} evt - Event object
     * @param {Object} cardElement - jquery element object on which drag event is triggered
     */

    Rearrange.prototype._endHandler = function (evt, cardElement) {
        jQuery.sap.log.info(cardElement);
        //Prevent text selection menu and magnifier on mobile devices
        if (sap.ui.Device.browser.mobile && this.selectableElemets) {
            this.selectableElemets.addClass("sapUiSelectable");
        }
    };

    //******** ***********************************Helper functions ***************************************************//

    /**
     *  Get the card and the viewport settings when the drag and resize starts
     *
     * @method initCardsSettings
     */

	Rearrange.prototype.initCardsSettings = function() {
		this.jqLayout = this.layout.$();
		this.jqLayoutInner = this.jqLayout.children().first();
		var layoutScroll = this.jqLayout.scrollTop();
		var layoutHeight = this.jqLayoutInner.height();
		this.isRTLEnabled = sap.ui.getCore().getConfiguration().getRTL() ? 1 : -1;
		this.aCardsOrder = [];
		this.layoutOffset = this.jqLayout.offset();
		this.corrY = this.jqLayout.get(0).getBoundingClientRect().top + this.jqLayout.scrollTop();
		this.corrX = this.layoutOffset.left;
		this.columnCount = this.layoutUtil.oLayoutData.colCount;
		var visibleLayoutItems = this.layout.getVisibleLayoutItems();
		if (!visibleLayoutItems) {
			return;
		}
        this.aCardsOrder = visibleLayoutItems.map(function (item) {
            return item.$().parent()[0];
        });
		var jqFirstColumn = this.jqLayoutInner.children().first();
		var marginProp = (this.isRTLEnabled === 1) ? "margin-left" : "margin-right";
		this.verticalMargin = parseInt(jqFirstColumn.css(marginProp), 10);
		var firstItemEl = this.aCardsOrder[0];
        var oFirstElementClientRect = firstItemEl.getBoundingClientRect();
        var oJqLayoutInnerClientRect = this.jqLayoutInner[0].getBoundingClientRect();
		this.horizontalMargin = parseInt(jQuery(firstItemEl).css("margin-bottom"), 10);
		this.verticalMargin = this.horizontalMargin;
		this.top = oFirstElementClientRect.top - oJqLayoutInnerClientRect.top;
		this.left = oFirstElementClientRect.left - oJqLayoutInnerClientRect.left;
		this.width = firstItemEl.offsetWidth;
		jQuery(this.aCardsOrder).css("position", "absolute");
		this.drawLayout(this.aCardsOrder);
		//all elements are switched to position absolute to prevent layout from collapsing we put height on it like it was before change.
		//and fix scroll, so user will not see position changes on the screen.
		this.jqLayoutInner.height(layoutHeight);
		this.jqLayout.scrollTop(layoutScroll);
	};

	/**
	 * put all items to new positions
	 *
	 * @method drawLayout
	 * @param {Array} aCardsLayout - card layout
	 */
    Rearrange.prototype.drawLayout = function (aCardsLayout) {
        if (aCardsLayout) {
            aCardsLayout.forEach(function (domElement) {
                requestAnimationFrame(function () {
                    var $element = jQuery(domElement).position();
                    domElement.style[this.layoutUtil.cssVendorTransition] = 'all 300ms ease';
                    domElement.style[this.layoutUtil.cssVendorTransform] = 'translate3d(' + $element.left + ',' + $element.top + ', 0px) ';
                }.bind(this));
            }.bind(this));
        }
    };

    Rearrange.prototype.showGhostWhileDragMove = function (newCardPosition, actionObject) {
        var element = document.getElementById('ovpDashboardLayoutMarker');
        var pos = {
            top: (newCardPosition.row - 1) * this.layoutUtil.getRowHeightPx() + this.layoutUtil.CARD_BORDER_PX,
            left: (newCardPosition.column - 1) * this.layoutUtil.getColWidthPx() + this.layoutUtil.CARD_BORDER_PX
        };
        if (!element) {
            var oDiv = document.createElement('div');
            oDiv.id = 'ovpDashboardLayoutMarker';
            oDiv.position = 'absolute';
            oDiv.style.height = this.floaterData.height + 'px';
            oDiv.style.width = this.floaterData.width + 'px';
            oDiv.style[this.layoutUtil.cssVendorTransform] = 'translate3d(' + pos.left + 'px,' + pos.top + 'px, 0px) ';
            document.getElementsByClassName('sapUshellEasyScanLayoutInner')[0].appendChild(oDiv);
        } else {
            element.style[this.layoutUtil.cssVendorTransition] = 'all 300ms ease';
            element.style[this.layoutUtil.cssVendorTransform] = 'translate3d(' + pos.left + 'px,' + pos.top + 'px, 0px) ';
        }
        actionObject.element.style[this.layoutUtil.cssVendorTransition] = 'all 300ms ease';
        actionObject.element.style[this.layoutUtil.cssVendorTransform] = 'translate3d(' + pos.left + 'px,' + pos.top + 'px, 0px) ';
    };

    Rearrange.prototype.showGhostWhileResize = function (actionObject, cardDetails) {
        var element = document.getElementById('ovpResizeRubberBand');
        var oElementWrapper = actionObject.element.parentElement;
        var left = cardDetails.fElementPosLeft + this.layoutUtil.CARD_BORDER_PX - 2;
        var top = cardDetails.fElementPosTop + this.layoutUtil.CARD_BORDER_PX - 2;
        var height = this.resizeData.rowSpan * this.layoutUtil.getRowHeightPx() - 2 * this.layoutUtil.CARD_BORDER_PX + 2;
        var width = this.resizeData.colSpan * this.layoutUtil.getColWidthPx() - 2 * this.layoutUtil.CARD_BORDER_PX + 2;
        if (!element) {
            //Create the ghost element and append to the layout
            var oDiv = document.createElement('div');
            oDiv.id = 'ovpResizeRubberBand';
            oDiv.classList.add('ovpResizeRubberBand');
            oDiv.position = 'absolute';
            oDiv.style.height = height + 'px';
            oDiv.style.width = width + 'px';
            oDiv.style[this.layoutUtil.cssVendorTransition] = 'all 300ms ease';
            oDiv.style[this.layoutUtil.cssVendorTransform] = 'translate3d(' + left + 'px, ' + top + 'px, 0px) ';
            oElementWrapper.appendChild(oDiv);
        } else {
            element.style.height = height + 'px';
            element.style.width = width + 'px';
        }
    };
    /**
     * Method to add respective cursor while doing resize operation
     *
     * @method {Private} _addOverLay
     * @param {String} cursor - respective cursor to be applied upon the resized element
     */
    Rearrange.prototype._addOverLay = function (cursor) {
        var element = document.getElementById('sapOvpOverlayDivForCursor');
        if (!element) {
            var overlayDiv = document.createElement('div');
            overlayDiv.id = 'sapOvpOverlayDivForCursor';
            overlayDiv.style.cursor = cursor;
            this.jqLayout[0].appendChild(overlayDiv);
        } else {
            element.style.cursor = cursor;
        }
    };

    /**
     * Function to calculate resize-direction(X, Y or both XY) , minimum card height and the wrapper height and cursor
     *
     * @method {Private} _calculateMinimumCardHeight
     * @param {Object} actionObject - Element object on which resize is triggered
     * @param {Object} cardSizeProperties - card object containing all card size properties
     * @param {Boolean} bShowOnlyHeader - flag for show only header card
     * @return {Object} - Object containing properties like ghost height , ghost width, cursor, top and left position of the ghost
     */

    Rearrange.prototype._calculateMinimumCardHeight = function (actionObject, cardSizeProperties, bShowOnlyHeader) {
        var $elem = jQuery(actionObject.element),
            fElementPosLeft = $elem.position().left,
            fElementPosTop = $elem.position().top,
            ghostWidthCursor, ghostHeightCursor, cursor;

        //if X-direction resize then ghost height is same as card height
        if (this.uiActions.isResizeX && !this.uiActions.isResizeY) {
            ghostWidthCursor = actionObject.moveX - fElementPosLeft - this.layoutOffset.left;
            ghostHeightCursor = $elem.outerHeight();
            cursor = "ew-resize";
            //if Y-direction resize then ghost width is same as card width
        } else if (!this.uiActions.isResizeX && this.uiActions.isResizeY) {
            ghostWidthCursor = $elem.outerWidth();
            ghostHeightCursor = actionObject.moveY + this.updatedScrollTop - fElementPosTop - this.layoutOffset.top + 2 * this.layoutUtil.CARD_BORDER_PX;
            cursor = "ns-resize";
        } else {
            ghostWidthCursor = actionObject.moveX - fElementPosLeft - this.layoutOffset.left;
            ghostHeightCursor = actionObject.moveY + this.updatedScrollTop - fElementPosTop - this.layoutOffset.top + 2 * this.layoutUtil.CARD_BORDER_PX;
            cursor = "nwse-resize";
        }
        return {
            ghostWidthCursor: ghostWidthCursor,
            ghostHeightCursor: ghostHeightCursor,
            cursor: cursor,
            fElementPosTop: fElementPosTop,
            fElementPosLeft: fElementPosLeft
        };
    };
	return Rearrange;
});

}; // end of sap/ovp/ui/DashboardLayoutRearrange.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.DashboardLayoutUtil') ) {
jQuery.sap.declare('sap.ovp.ui.DashboardLayoutUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ovp/ui/DashboardLayoutUtil",[
	"sap/ovp/ui/DashboardLayoutRearrange",
	"sap/ovp/ui/DashboardLayoutModel",
    'sap/ovp/cards/CommonUtils'
], function(Rearrange, DashboardLayoutModel, commonUtils) {

	// (function() {
	"use strict";
	var DashboardLayoutUtil = function(uiModel) {

        this.aCards = null;
        this.ROW_HEIGHT_PX = 16; //176;
        this.MIN_COL_WIDTH_PX = 320;
        this.CARD_BORDER_PX = 8; //--> css class .sapOvpDashboardLayoutItem
        this.EXTRA_MARGIN = 8; //dynamicpageheader had 8px less margin
        this.oLayoutData = {
            layoutWidthPx: 1680,
            contentWidthPx: 1600,
            colCount: 5,
            colWidthPx: this.MIN_COL_WIDTH_PX,
            rowHeightPx: this.ROW_HEIGHT_PX,
            marginPx: this.convertRemToPx(3) - this.CARD_BORDER_PX
        };
        this.dashboardLayoutModel = new DashboardLayoutModel(uiModel, this.oLayoutData.colCount, this.ROW_HEIGHT_PX, this.CARD_BORDER_PX);
		this.layoutDomId = "";
		this.oLayoutCtrl = {};
		this.componentDomId = "";
		this.lastTriggeredColWidth = 0.0;
        this.changedCards = {};
        switch (true) {
            case sap.ui.Device.browser.webkit:
                this.cssVendorTransition = "-webkit-transition";
                this.cssVendorTransform = "-webkit-transform";
                break;
            case sap.ui.Device.browser.msie:
                this.cssVendorTransition = "-ms-transition";
                this.cssVendorTransform = "-ms-transform";
                break;
            case sap.ui.Device.browser.mozilla:
                this.cssVendorTransition = "-moz-transition";
                this.cssVendorTransform = "-moz-transform";
                break;
            default:
                this.cssVendorTransition = "transition";
                this.cssVendorTransform = "transform";
        }
	};

	DashboardLayoutUtil.prototype.setLayout = function(layout) {
		this.oLayoutCtrl = layout;
		this.layoutDomId = layout.getId();
		this.componentDomId = this.layoutDomId.split("--")[0];
	};

	DashboardLayoutUtil.prototype.getDashboardLayoutModel = function() {
		return this.dashboardLayoutModel;
	};

	DashboardLayoutUtil.prototype.updateCardVisibility = function(aChgCards) {
		this.dashboardLayoutModel.updateCardVisibility(aChgCards);
		this.aCards = this.dashboardLayoutModel.getCards(this.oLayoutData.colCount);
		this._setCardsCssValues(this.aCards);
		this.layoutCards();
	};

	DashboardLayoutUtil.prototype.updateLayoutData = function(iDashboardWidth) {
		// shortcut
		if (this.oLayoutData.layoutWidthPx === iDashboardWidth) {
			return this.oLayoutData;
		}

		var iDashboardMargin = this.oLayoutData.marginPx,
			iExtraSpaceForDesktop = 0,
			iSmallScreenWidth = 320,
			iMiddleScreenWidth = 1024,
			iCardMargin = this.CARD_BORDER_PX,
			iMargin = this.EXTRA_MARGIN,
			iNewScreenWidth = iDashboardWidth + iDashboardMargin,
			iDashboardMarginLeft,
			iDashboardMarginRight; //iDashboardWidth is without left margin
		this.oLayoutData.layoutWidthPx = iDashboardWidth;

		if (iNewScreenWidth <= iSmallScreenWidth) {
			iDashboardMargin = this.convertRemToPx(0.5) - iCardMargin;
			iExtraSpaceForDesktop = sap.ui.Device.system.desktop ? 16 : 0; //considering vertical scrollbar on the desktop
		} else if (iNewScreenWidth <= iMiddleScreenWidth) {
			iDashboardMargin = this.convertRemToPx(1) - iCardMargin;
			iExtraSpaceForDesktop = sap.ui.Device.system.desktop ? 8 : 0;
		} else {
			iDashboardMargin = this.convertRemToPx(3) - iCardMargin;
		}
		if (iDashboardMargin !== this.oLayoutData.marginPx) {
			this.oLayoutData.marginPx = iDashboardMargin;
			jQuery(".sapUshellEasyScanLayout").css({
				"margin-left": iDashboardMargin + "px"
			});
		}

		//calculates content width excluding symmetric margin space on the right 
		//and the extra space for vertical scrollbar on the desktop
		this.oLayoutData.contentWidthPx = iDashboardWidth - iDashboardMargin - iExtraSpaceForDesktop;
		this.oLayoutData.colCount = Math.floor(this.oLayoutData.contentWidthPx / this.MIN_COL_WIDTH_PX);
		if (this.oLayoutData.colCount === 0) {
			this.oLayoutData.colCount = 1;
		}
		this.oLayoutData.colWidthPx = this.oLayoutData.contentWidthPx / this.oLayoutData.colCount;
		if (jQuery(".sapOvpDashboardDragAndDrop").length > 0 && jQuery(".easyScanLayoutItemWrapper").length > 0) {
            iDashboardMarginLeft = jQuery(".sapOvpDashboardDragAndDrop")[0].offsetLeft + iMargin;
            if (jQuery(".sapOvpDashboardDragAndDrop")[0].offsetLeft < 40) {
                iDashboardMarginRight = iDashboardMarginLeft + 8;
            } else {
                iDashboardMarginRight = iDashboardMarginLeft;
            }
        } else {
            iDashboardMarginLeft = iDashboardMargin + iMargin;
            iDashboardMarginRight = iDashboardMargin + iExtraSpaceForDesktop + iMargin;
        }
		jQuery('.sapFDynamicPageTitle').css({"margin-left": iDashboardMarginLeft + "px", "margin-right": iDashboardMarginRight + "px","visibility": "visible"});
		jQuery('.sapFDynamicPageHeader').css({"margin-left": iDashboardMarginLeft + "px", "margin-right": iDashboardMarginRight + "px","visibility": "visible"}); 
		
		return this.oLayoutData;
	};

	DashboardLayoutUtil.prototype.getRearrange = function(settings) {
		var defaultSettings = {
			containerSelector: ".sapUshellEasyScanLayoutInner",
			wrapper: ".sapUshellEasyScanLayout",
			draggableSelector: ".easyScanLayoutItemWrapper",
			placeHolderClass: "dashboardLayoutItemWrapper-placeHolder",
			cloneClass: "easyScanLayoutItemWrapperClone",
			moveTolerance: 10,
			switchModeDelay: 500,
			isTouch: !sap.ui.Device.system.desktop,
			debug: false,
			aCards: this.aCards,
			layoutUtil: this,
			rowHeight: this.oLayoutData.rowHeightPx,
			colWidth: this.oLayoutData.colWidthPx
		};

		return new Rearrange(jQuery.extend(defaultSettings, settings));
	};

    /**
     * Method called upon when the window is resized
     *
     * @method resizeLayout
     * @param {Int} iWidth - layout width in pixel
     */
    DashboardLayoutUtil.prototype.resizeLayout = function (iWidth) {
        var iBeforeCol = this.oLayoutData.colCount;
        var bTriggerResize = false;
        if (this.oLayoutData.layoutWidthPx !== iWidth) {
            this.updateLayoutData(iWidth);
            bTriggerResize = Math.abs(this.lastTriggeredColWidth - this.oLayoutData.colWidthPx) > this.convertRemToPx(0.5);
            // column width can grow pixel by pixel --> render even if number of columns stays same
            this.aCards = this.dashboardLayoutModel.getCards(this.oLayoutData.colCount);
            for (var i = 0; i < this.aCards.length; i++) {
                (function (index) {
                    //re-set css values for current card
                    var oCard = this.aCards[index];
                    this.setCardCssValues(oCard);
                    var sCardId = oCard.id;
                    var oCardController = this._getCardController(sCardId);
                    var iPreviousHeaderHeight = oCard.dashboardLayout.headerHeight;
                    var element = document.getElementById(this.getCardDomId(sCardId));
                    setTimeout(function () {
                        if (element) {
                            element.style.width = oCard.dashboardLayout.width;
                            element.style.height = oCard.dashboardLayout.height;
                            //If there is change in column then there should be animation for card movement else not
                            if (iBeforeCol !== this.oLayoutData.colCount) {
                                element.style[this.cssVendorTransition] = 'all 0.25s ease';
                            } else {
                                element.style[this.cssVendorTransition] = '';
                            }
                            element.style[this.cssVendorTransform] = 'translate3d(' + oCard.dashboardLayout.left + ' ,' + oCard.dashboardLayout.top + ', 0px)';
                            this.setKpiNumericContentWidth(element);
                        }
                        if (oCardController && iPreviousHeaderHeight !== oCardController.getHeaderHeight()) {
                            if (oCard.dashboardLayout.showOnlyHeader) {
                                oCard.dashboardLayout.rowSpan = Math.ceil((oCardController.getHeaderHeight() + 2 * this.CARD_BORDER_PX) / this.ROW_HEIGHT_PX);
                                oCard.dashboardLayout.headerHeight = oCardController.getHeaderHeight();
                            }
                            this._sizeCard(oCard);
                        } else if (iBeforeCol !== this.oLayoutData.colCount || bTriggerResize) {
                            //if number of columns changed --> trigger card resize
                            this._triggerCardResize(oCard);
                        }
                    }.bind(this), 250);
                }.bind(this))(i);
            }
            this.dashboardLayoutModel._removeSpaceBeforeCard();
            this.oLayoutCtrl.fireAfterDragEnds();
            if (bTriggerResize) {
                this.lastTriggeredColWidth = this.oLayoutData.colWidthPx;
            }
        }
    };

	/**
	 * build layout variant for specified width
	 *
	 * @method buildLayout
	 * @param {Int} iWidth - layout width in pixel
	 * @returns {Object} layout variant
	 */
    DashboardLayoutUtil.prototype.buildLayout = function (iWidth) {
        if (!iWidth) {
            return [];
        }
        this.updateLayoutData(iWidth);
        this.aCards = this.dashboardLayoutModel.getCards(this.oLayoutData.colCount);
        this._setCardsCssValues(this.aCards);
        this.dashboardLayoutModel.extractCurrentLayoutVariant();
        return this.dashboardLayoutModel.oLayoutVars;
    };

	/**
	 * get cards for specified number of columns
	 *
	 * @method getCards
	 * @param {Int} iColCount - number of columns
	 * @returns {Array} cards
	 */
	DashboardLayoutUtil.prototype.getCards = function(iColCount) {
		if (this.aCards && this.oLayoutData.colCount === iColCount) {
			return this.aCards;
		}
		this._setColCount(iColCount);
		this.aCards = this.dashboardLayoutModel.getCards(iColCount);
		this._setCardsCssValues(this.aCards);
		return this.aCards;
	};

	DashboardLayoutUtil.prototype.resetToManifest = function() {
		this.aCards = [];
		this.dashboardLayoutModel.resetToManifest();
		this.buildLayout(this.oLayoutData.layoutWidthPx);
		this.layoutCards();
	};

	/**
	 * get card at pixel position in it's container
	 * scroll and offset are not considered here
	 *
	 * @method getCardDomId
	 * @param {ID} cardId - ID of a card
	 * @returns {ID} card dom id
	 */
	DashboardLayoutUtil.prototype.getCardDomId = function(cardId) {
		// card00 --> __xmlview0--ovpLayout--card00
		return this.layoutDomId + "--" + cardId;
	};

	DashboardLayoutUtil.prototype.getCardId = function(cardDomId) {
		// example card Id:  __xmlview0--ovpLayout--card00 --> card00
		var cdi = "";
		if (cardDomId) {
			cdi = cardDomId.split("--")[2];
		}
		return cdi;
	};

	DashboardLayoutUtil.prototype.isCardAutoSpan = function(cardId) {
		return this.dashboardLayoutModel.getCardById(cardId).dashboardLayout.autoSpan;
	};

    /**
     * Method called to increase the height of the card automatically on initial load(auto span is true)
     *
     * @method setAutoCardSpanHeight
     * @param {Object} evt- event object from resize handler
     * @param {String} cardId - id of the card which is to be resized
     * @param {Number} height - height of the card
     */
    DashboardLayoutUtil.prototype.setAutoCardSpanHeight = function (evt, cardId, height) {
        var iRows, layoutChanges;
        var oCard = this.dashboardLayoutModel.getCardById(cardId);
        if (!cardId && evt && evt.target.parentElement) {
            cardId = evt.target.parentElement.parentElement.id.split("--")[1];
        }
        var iHeight = height;
        if (!iHeight && evt) {
            iHeight = evt.size.height;
        }

        //verify that card is autoSpan and resize it
        if (this.isCardAutoSpan(cardId)) {
            if (oCard.dashboardLayout.showOnlyHeader) {
                iRows = Math.ceil((iHeight + 2 * this.CARD_BORDER_PX) / this.getRowHeightPx());
            } else {
                iRows = Math.round((iHeight + 2 * this.CARD_BORDER_PX) / this.getRowHeightPx());
            }
            //resizeCard mathod called upon on first time loading
            layoutChanges = this.dashboardLayoutModel.resizeCard(cardId, {
                rowSpan: iRows,
                colSpan: 1
            }, /*manual resize*/ false);
            this._sizeCard(layoutChanges.resizeCard);
            this._positionCards(layoutChanges.affectedCards);
        }
    };

    /**
     * Method called for calculating different parameters of card for resize
     *
     * @method calculateCardProperties
     * @param {string} sCardId- card id
     * @param {Object} object - object which returns the properties like Header / Dropdown / Item height / Minimum card height / Least card height
     */
    DashboardLayoutUtil.prototype.calculateCardProperties = function (sCardId) {
        var oGenCardCtrl = this._getCardController(sCardId);
        var oCard = this.dashboardLayoutModel.getCardById(sCardId);
        var iChartHeight = 250, iHeaderHeight, iDropDownHeight, iLineItemHeight, minCardHeight, iHeight;
        if (oGenCardCtrl) {
            iHeight = oGenCardCtrl.getItemHeight(oGenCardCtrl, 'ovpCardHeader');
            iHeaderHeight = iHeight === 0 ? oCard.dashboardLayout.headerHeight : iHeight;
            iDropDownHeight = oGenCardCtrl.getItemHeight(oGenCardCtrl, 'toolbar');
            if (oCard.template === "sap.ovp.cards.list") {
                iLineItemHeight = oCard.dashboardLayout.itemHeight;
                minCardHeight = iHeaderHeight + iDropDownHeight + iLineItemHeight;
            } else if (oCard.template === "sap.ovp.cards.table") {
                iLineItemHeight = oCard.dashboardLayout.itemHeight;
                minCardHeight = iHeaderHeight + iDropDownHeight + 2 * iLineItemHeight;
            } else if (oCard.template === "sap.ovp.cards.linklist") {
                //For link list card Minimum height = header height + item height + upperListPadding
                iLineItemHeight = oGenCardCtrl.getItemHeight(oGenCardCtrl, 'ovpLinkList', true);
                var densityType = oGenCardCtrl.getView().getModel("ovpCardProperties").getProperty("/densityStyle");
                if (densityType === 'cozy') {
                    minCardHeight = iHeaderHeight + iDropDownHeight + iLineItemHeight + 8; //8px padding for 'cozy' mode
                } else {
                    minCardHeight = iHeaderHeight + iDropDownHeight + iLineItemHeight + 4; //4px padding for 'compact' mode
                }
            } else if (oCard.template === "sap.ovp.cards.charts.analytical") {
                var iBubbleTextHeight = oGenCardCtrl.getView().byId('bubbleText') ? 43 : 0;
                minCardHeight = iHeaderHeight + iDropDownHeight + iChartHeight + iBubbleTextHeight + 50; //20px is the text height + 14px is the top padding + 16px is the chart top margin
            } else {
                //Else header height + dropdown height
                minCardHeight = iHeaderHeight + iDropDownHeight;
            }
            return {
                headerHeight: iHeaderHeight,
                dropDownHeight: iDropDownHeight,
                itemHeight: iLineItemHeight,
                minCardHeight: minCardHeight,
                leastHeight: iHeaderHeight
            };
        }
    };

	DashboardLayoutUtil.prototype._sizeCard = function(oCard) {
		if (!oCard) {
			return;
		}
        var $card = document.getElementById(this.getCardDomId(oCard.id));
        oCard.dashboardLayout.width = oCard.dashboardLayout.colSpan * this.oLayoutData.colWidthPx + "px";
        oCard.dashboardLayout.height = oCard.dashboardLayout.rowSpan * this.oLayoutData.rowHeightPx + "px";
        if ($card) {
            $card.style.height = oCard.dashboardLayout.height;
            $card.style.width = oCard.dashboardLayout.width;
            this._triggerCardResize(oCard);
        }
        //Calculate the height of the container upon card resize
        var iContainerHeight = (this.dashboardLayoutModel._findHighestOccupiedRow() * this.ROW_HEIGHT_PX) + 32;
        jQuery(".sapUshellEasyScanLayoutInner").css({"height": iContainerHeight + "px", "z-index": "1"});
    };

    /**
     * Method to trigger the resize of card
     *
     * @method _triggerCardResize
     * @param {Object} oCard - object contains all resizable layout properties of card
     */
    DashboardLayoutUtil.prototype._triggerCardResize = function (oCard) {
        var iContainerHeight;
        var cardLayout = oCard.dashboardLayout;
        var cardId = oCard.id;
        var cardComponentId = this._getCardComponentDomId(cardId);
        var $card = document.getElementById(cardComponentId);
        var oGenCardCtrl = this._getCardController(cardId);
        try {
            if ((cardLayout.autoSpan || !cardLayout.visible) && oGenCardCtrl) {
                //no trigger for autoSpan and hidden cards
                var oCardBinding = oGenCardCtrl.getCardItemsBinding();
                var cardSizeProperties = this.calculateCardProperties(cardId);
                if (oCardBinding && cardSizeProperties) {
                    var iNoOfItems = oCardBinding.getLength();
                    var iActualNoOfItems = 0 === iNoOfItems ? oCard.dashboardLayout.noOfItems : (iNoOfItems ? Math.min(iNoOfItems, oCard.dashboardLayout.noOfItems) : oCard.dashboardLayout.noOfItems);
                    var iCardHeight = cardLayout.rowSpan * this.ROW_HEIGHT_PX;
                    var iAvailableSpace = iCardHeight - (cardSizeProperties.headerHeight + 2 * this.CARD_BORDER_PX);
                    var $CardContentContainer = $card.getElementsByClassName('sapOvpWrapper')[0];
                    if (oCard.template === 'sap.ovp.cards.table') {
                        //Table card has the header also. So it's included in height calculation
                        iContainerHeight = (iActualNoOfItems + 1) * cardSizeProperties.itemHeight + cardSizeProperties.dropDownHeight;
                        oGenCardCtrl.addColumnInTable($card, cardLayout);
                    } else if (oCard.template === 'sap.ovp.cards.list') {
                        iContainerHeight = iActualNoOfItems * cardSizeProperties.itemHeight + cardSizeProperties.dropDownHeight;
                    }
                    //To handle initial load/ reload after resize
                    if (iContainerHeight < iAvailableSpace) {
                        $CardContentContainer.style.height = iAvailableSpace + 'px';
                    } else {
                        //If there is no data then set height of the container = no of items * item height
                        if (0 === iNoOfItems) {
                            $CardContentContainer.style.height = iContainerHeight + 'px';
                        }
                    }
                }
                return;
            }
        } catch (error) {
            jQuery.sap.log.warning("Card auto span failed for card " + cardId + " and error is  " + error.toString());
        }
        //set height px data and layout (compatibility to card property model)
        cardLayout.iRowHeightPx = this.getRowHeightPx();
        cardLayout.iColumnWidthPx = this.getColWidthPx();
        cardLayout.iCardBorderPx = this.CARD_BORDER_PX;
        cardLayout.containerLayout = "resizable";

        try {
            if (oGenCardCtrl) {
                var cardSizeProperties = this.calculateCardProperties(cardId);
                oGenCardCtrl.resizeCard(cardLayout, cardSizeProperties);
            } else {
                jQuery.sap.log.warning("OVP resize: no controller found for " + cardId);
            }
        } catch (err) {
            jQuery.sap.log.warning("OVP resize: " + cardId + " catch " + err.toString());
        }
    };

    DashboardLayoutUtil.prototype._positionCards = function (aCards) {
        if (!aCards) {
            return;
        }
        var pos = {};
        aCards.forEach(function (oCardObj) {
            if (!oCardObj.dashboardLayout.visible) {
                return; //skip invisible cards
            }
            pos = this._mapGridToPositionPx(oCardObj.dashboardLayout);
            oCardObj.dashboardLayout.top = pos.top;
            oCardObj.dashboardLayout.left = pos.left;
            var element = document.getElementById(this.getCardDomId(oCardObj.id));
            if (element) {
                element.style[this.cssVendorTransition] = 'all 0.25s ease';
                element.style[this.cssVendorTransform] = 'translate3d(' + pos.left + ' ,' + pos.top + ', 0px)';
            }
        }.bind(this));
    };

    DashboardLayoutUtil.prototype.updateCardSize = function (sCardId, ghostHeight, ghostWidth, rowSpan) {
        var oCard = this.dashboardLayoutModel.getCardById(sCardId);
        var oCardController = this._getCardController(sCardId);
        var $card = document.getElementById(this.getCardDomId(sCardId));
        $card.style.height = ghostHeight + "px";
        $card.style.width = ghostWidth + "px";
        $card.style[this.cssVendorTransition] = "none";
        $card.style.zIndex = 10;
        if ('sap.ovp.cards.linklist' === oCard.template && 'carousel' === oCard.settings.listFlavor) {
            oCardController._setListHeightInCarouselCard(rowSpan);
        }
    };

	DashboardLayoutUtil.prototype.layoutCards = function(cards) {
		var aCards = cards || this.aCards;
		var i = 0, pos = {};
		for (i = 0; i < aCards.length; i++) {
			if (!aCards[i].dashboardLayout.visible) {
				continue; //skip invisible cards
			}
            pos = this._mapGridToPositionPx(aCards[i].dashboardLayout);
            aCards[i].dashboardLayout.top = pos.top;
            aCards[i].dashboardLayout.left = pos.left;
            aCards[i].dashboardLayout.width = aCards[i].dashboardLayout.colSpan * this.oLayoutData.colWidthPx + "px";
            aCards[i].dashboardLayout.height = aCards[i].dashboardLayout.rowSpan * this.oLayoutData.rowHeightPx + "px";
            var element = document.getElementById(this.getCardDomId(aCards[i].id));
            if (element) {
                element.style.width = aCards[i].dashboardLayout.width;
                element.style.height = aCards[i].dashboardLayout.height;
                element.style[this.cssVendorTransition] = 'all 0.25s ease';
                element.style[this.cssVendorTransform] = 'translate3d(' + pos.left + ' ,' + pos.top + ', 0px)';
            }
            try {
                var oGenCardCtrl = this._getCardController(aCards[i].id);
                if (oGenCardCtrl) {
                    var VizFrame = oGenCardCtrl.getView().byId("analyticalChart");
                    if (VizFrame) {
                        //For Analytical card set the viz frame width to 100% and height to default i.e. 350px
                        VizFrame.setHeight("350px");
                        VizFrame.setWidth("100%");
                    } else {
                        //For other cards set the bindinginfo length to default and refresh bindings except linklist and geomap card
                        if (oGenCardCtrl.getCardItemBindingInfo && oGenCardCtrl.getCardItemBindingInfo()) {
                            oGenCardCtrl.getCardItemBindingInfo().length = aCards[i].dashboardLayout.noOfItems;
                            oGenCardCtrl.getModel().updateBindings(true);
                        }
                    }
                }
            } catch (error) {
                jQuery.sap.log.warning(error.message);
            }
            this._triggerCardResize(aCards[i]);
        }
	};

	DashboardLayoutUtil.prototype.resizeCard = function(cardDomId, span) {
		this.changedCards = this.dashboardLayoutModel.resizeCard(this.getCardId(cardDomId), span, /*manual resize*/ true);
		this._positionCards(this.changedCards.affectedCards);

        if (!this.dashboardLayoutModel.validateGrid()) {
            //should not happen! fallback: undo last change to avoid inconsisties in model
            this.dashboardLayoutModel.undoLastChange();
        }
	};

	// map grid coords to position coords
	DashboardLayoutUtil.prototype._mapGridToPositionPx = function(gridPos) {
		var pos = {
			top: (gridPos.row - 1) * this.getRowHeightPx() + "px",
			left: (gridPos.column - 1) * this.getColWidthPx() + "px"
		};
		return pos;
	};

	DashboardLayoutUtil.prototype._getCardComponentDomId = function(cardId) {
		return this.componentDomId + "--" + cardId;
	};

    DashboardLayoutUtil.prototype._getCardController = function (cardId) {
        var oCtrl = null;
        var oComponent = sap.ui.getCore().byId(this._getCardComponentDomId(cardId));
        if (oComponent) {
            var oCompInst = oComponent.getComponentInstance();
            if (oCompInst) {
                oCtrl = oCompInst.getAggregation("rootControl").getController();
            }
        }
        return oCtrl;
    };

	DashboardLayoutUtil.prototype._setCardsCssValues = function(aCards) {
		var i = 0;
		for (i = 0; i < aCards.length; i++) {
			this.setCardCssValues(aCards[i]);
		}
	};

	DashboardLayoutUtil.prototype.setCardCssValues = function(oCard) {
		oCard.dashboardLayout.top = ((oCard.dashboardLayout.row - 1) * this.oLayoutData.rowHeightPx) + "px";
		oCard.dashboardLayout.left = ((oCard.dashboardLayout.column - 1) * this.oLayoutData.colWidthPx) + "px";
		oCard.dashboardLayout.width = (oCard.dashboardLayout.colSpan * this.oLayoutData.colWidthPx) + "px";
		oCard.dashboardLayout.height = (oCard.dashboardLayout.rowSpan * this.oLayoutData.rowHeightPx) + "px";
	};

	DashboardLayoutUtil.prototype.convertRemToPx = function(value) {
		var val = value;
		if (typeof value === "string" || value instanceof String) { //take string with a rem unit
			val = value.length > 0 ? parseInt(value.split("rem")[0], 10) : 0;
		}
		return val * commonUtils.getPixelPerRem();
	};

	DashboardLayoutUtil.prototype.convertPxToRem = function(value) {
		var val = value;
		if (typeof value === "string" || value instanceof String) { //take string with a rem unit
			val = value.length > 0 ? parseFloat(value.split("px")[0], 10) : 0;
		}
		return val / commonUtils.getPixelPerRem();
	};

    DashboardLayoutUtil.prototype.setKpiNumericContentWidth = function($element) {
        /*
         For restricting target and deviation in KPI Header to move towards the right
         */
        var aOvpKpiContent = $element.getElementsByClassName("sapOvpKpiContent");
        if (!!aOvpKpiContent && aOvpKpiContent.length > 0) {
            var $ovpKpiContent = aOvpKpiContent[0];
            var iColumnPadding = 8;
            var iParentPadding = 16;
            $ovpKpiContent.style.width = (this.getColWidthPx() - (2 * iColumnPadding + 2 * iParentPadding))  + "px";
        }
    };

	DashboardLayoutUtil.prototype.getLayoutWidthPx = function() {
		return this.oLayoutData.colCount * this.oLayoutData.colWidthPx;
	};

	DashboardLayoutUtil.prototype.getColWidthPx = function() {
		return this.oLayoutData.colWidthPx;
	};

	DashboardLayoutUtil.prototype.getRowHeightPx = function() {
		return this.oLayoutData.rowHeightPx;
	};

	DashboardLayoutUtil.prototype._setColCount = function(iColCount) {
		this.oLayoutData.colCount = iColCount;
	};

    return DashboardLayoutUtil;
}, /* bExport*/ true); //();
}; // end of sap/ovp/ui/DashboardLayoutUtil.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.EasyScanLayout.designtime') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare('sap.ovp.ui.EasyScanLayout.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.comp.navpopover.RTAHandler'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/EasyScanLayout.designtime",["sap/ui/comp/navpopover/RTAHandler",
               "sap/ovp/ui/ComponentContainerDesigntimeMetadata"],
    function(RTAHandler, ComponentContainerDesigntimeMetadata) {
    "use strict";
    
    return {
        actions: {
            reveal: {
                changeType: "unhideControl"
            }
        },
        aggregations: {
            content : {
                domRef : ".sapUiComponentContainer",
                actions : {
                    move: "moveControls",
                    changeOnRelevantContainer: true
                },
                propagateMetadata: function (oElement) {
                	var sType = oElement.getMetadata().getName();
                	if (sType === "sap.ui.core.ComponentContainer") {
                		return ComponentContainerDesigntimeMetadata;
                	} else {
                		return {
                			actions: null
                		};
                	}
                },
                propagateRelevantContainer: false
            }
        },
        name: {
        	singular: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Card"),
            plural: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Cards")
        }
    };
}, false);

}; // end of sap/ovp/ui/EasyScanLayout.designtime.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.EasyScanLayout') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/*global sap window*/
jQuery.sap.declare('sap.ovp.ui.EasyScanLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/EasyScanLayout",["jquery.sap.global", 'sap/ovp/cards/CommonUtils', "sap/ovp/library"],
    function (jQuery, commonUtils) {
        "use strict";
        jQuery.sap.require('sap.ovp.ui.UIActions');

        var ReplaceItems = function (settings) {
            this.init(settings);
        };

        ReplaceItems.prototype.init = function (settings) {
            settings.beforeDragCallback = this._beforeDragHandler.bind(this);
            settings.dragStartCallback = this._dragStartHandler.bind(this);
            settings.dragMoveCallback = this._dragMoveHandler.bind(this);
            settings.dragEndCallback = this._dragEndHandler.bind(this);
            settings.endCallback = this._endHandler.bind(this);

            this.layout = settings.layout;
            this.afterReplaceElements = settings.afterReplaceElements || function () {
            };
            this.settings = settings;
            delete settings.afterReplaceElements;
            this.destroy(); //destroy the previous instance of UIActions
            this.uiActions = new sap.ovp.ui.UIActions(this.settings).enable();
            this.aCardsOrder = null; //DOM elements array
            this.verticalMargin = null; //space vertical between items
            this.horizontalMargin = null; //horizontal space vertical between items
            this.columnCount = null; //number of layout columns
            this.top = null; //space between layout top and first card
            this.left = null; //space between layout left and first card
            this.width = null; //item width
            this.layoutOffset = null; //layout coordinates on screen, needed to normalize mouse position to layout
            this.jqLayout = null; //layout jQuery reference
            this.jqLayoutInner = null; //layout inner wrapper jQuery reference
            this.isRTLEnabled = null; //RTL flag
            this.lastCollidedEl = null; //last collided element
            this.lastCollisionTop = null; //last element collision top or bottom true/false
            this.SCROLL_OFFSET = 16;
        };


        //search collision with elements,
        //moveX - normalized X cord.
        //moveY - normalized Y cord.
        //itemList array of elements with posDnD property {top: , left: , height:, width: }
        //returns found element or undefined
        ReplaceItems.prototype.findCollision = function (moveX, moveY, itemList) {
            var colliedItem;
            for (var i = 0; i < itemList.length; i++) {
                var item = itemList[i];
                var isHorizontalIntersection = !(item.posDnD.right < moveX || item.posDnD.left > moveX);
                var isVerticalIntersection = !(item.posDnD.bottom < moveY || item.posDnD.top > moveY);
                if (isHorizontalIntersection && isVerticalIntersection) {
                    colliedItem = item;
                    break;
                }
            }
            return colliedItem;
        };

        //returns which part of element has collision - true for top, false for bottom
        ReplaceItems.prototype.isCollisionTop = function (moveX, moveY, item) {
            var halfBottom = ((item.posDnD.bottom - item.posDnD.top) / 2) + item.posDnD.top;
            var isCollisionTop = !(halfBottom < moveY || item.posDnD.top > moveY);
            return isCollisionTop;
        };

        //callback for UIActions, every time when mouse is moved in drag mode.
        ReplaceItems.prototype._dragMoveHandler = function (actionObject, qElement) {
            //{evt : evt, clone : this.clone, element: this.element, isScrolling: isScrolling, moveX : this.moveX, moveY : this.moveY}
            var sourceElement = actionObject.element;
            var moveX = actionObject.moveX - this.layoutOffset.left;
            var moveY = actionObject.moveY - this.jqLayout.get(0).getBoundingClientRect().top + this.jqLayout.scrollTop();
            if (!qElement) {
                var viewElement = document.getElementsByClassName("sapFDynamicPageContentWrapper")[0];
                var viewHeight = viewElement.offsetHeight;
                var viewRect = viewElement.getBoundingClientRect();
                if ((actionObject.evt.clientY - viewElement.offsetTop + this.SCROLL_OFFSET) > viewHeight) {
                    viewElement.scrollTop = viewElement.scrollTop + this.SCROLL_OFFSET;
                } else if (((actionObject.evt.clientY - viewElement.offsetTop) < viewRect.top + this.SCROLL_OFFSET) && viewElement.scrollTop !== 0) {
                    viewElement.scrollTop = viewElement.scrollTop - this.SCROLL_OFFSET;
                }
            }
            var collidedItem = this.findCollision(moveX, moveY, this.aCardsOrder);
            if (!collidedItem) {
                return; //no collided item, no need to act
            }
            var collidedItemTopCollision = this.isCollisionTop(moveX, moveY, collidedItem); //get element collision part
            if (collidedItem === sourceElement) {
                this.lastCollidedEl = collidedItem; //collided is dragged element, save it as last collided, and exit.
                return;
            }
            if (collidedItem === this.lastCollidedEl) {
                //current collided element the same as it was last time
                if (this.lastCollisionTop === collidedItemTopCollision) {
                    //mouse was not moved to another element part (from top to bottom or wise versa), so no need to act
                    return;
                }
                if (this.lastCollisionTop) {
                    this.lastCollisionTop = collidedItemTopCollision;
                    if (sourceElement.posDnD.top > collidedItem.posDnD.top) {
                        //mouse was moved from top to bottom, but sourceElement already on the bottom of collided element, no need to switch.
                        return;
                    }
                } else {
                    this.lastCollisionTop = collidedItemTopCollision;
                    if (sourceElement.posDnD.top < collidedItem.posDnD.top) {
                        //mouse was moved from bottom to top, but sourceElement already on the top of collided element, no need to switch.
                        return;
                    }
                }
            }
            if (this.lastCollidedEl && (this.lastCollidedEl !== collidedItem && this.lastCollidedEl !== sourceElement) &&
                (this.lastCollidedEl.posDnD.left === collidedItem.posDnD.left && this.lastCollidedEl.posDnD.left === sourceElement.posDnD.left)) {
                //complicated situation, when lastCollided, currentCollided and sourceElement, it's 3 different items, and they all in the same column.
                //it means that we don't want to switch with currentCollided element, becouse it dosn't look good.
                //Instead we switch with lastCollided item, which is more logical behaviour for user.
                collidedItem = this.lastCollidedEl;
            }
            //switch elements and recalculate new layout state.
            this.dragAndDropElement(sourceElement, collidedItem);
            //we want to know under which card mouse will be after  cards change places.
            //Because cards could be very high, it's possible that after change, mouse will appear under another card.
            //So we need to prevent future collision with this card, else you could face endless loop, when two high card will change each other endlessly.
            this.lastCollidedEl = this.findCollision(moveX, moveY, this.aCardsOrder);
            if (this.lastCollidedEl) {
                this.lastCollisionTop = this.isCollisionTop(moveX, moveY, this.lastCollidedEl);
            }
        };

        //switch elements and apply new element positions
        ReplaceItems.prototype.dragAndDropElement = function (sourceElement, targetElement) {
            if (sourceElement && targetElement) {
                this.aCardsOrder = this.dragAndDropSwapElement(sourceElement, targetElement, this.aCardsOrder);
                this.drawLayout(this.aCardsOrder);
            }
        };

        //switch two elements
        ReplaceItems.prototype.dragAndDropSwapElement = function (sourceElement, targetElement, itemsList) {
            var newOrder = itemsList.slice();
            var sourceElementIndex = itemsList.indexOf(sourceElement);
            var targetElementIndex = itemsList.indexOf(targetElement);
            newOrder[targetElementIndex] = sourceElement;
            newOrder[sourceElementIndex] = targetElement;
            return newOrder;
        };


        //keyboard navigation
        ReplaceItems.prototype.dragAndDropSwapElementForKeyboardNavigation = function (sourceElement, targetElement) {
            if (sourceElement && targetElement) {
                var aLayoutCards = this.layout.getVisibleLayoutItems().map(function (item) {
                    return item.$().parent()[0];
                });

                var changes = 0;
                for (var i = 0; i < aLayoutCards.length; i++) {
                    if (aLayoutCards[i] === sourceElement) {
                        aLayoutCards[i] = targetElement;
                        changes++;
                        continue;
                    }
                    if (aLayoutCards[i] === targetElement) {
                        aLayoutCards[i] = sourceElement;
                        changes++;
                        continue;
                    }
                }

                //callback afterSwapItems
                if (changes === 2) {
                    this.afterReplaceElements(aLayoutCards);
                }
            }
        };

        //init function called when drag start
        ReplaceItems.prototype.initCardsSettingsForDragAndDrop = function () {
            this.jqLayout = this.layout.$();
            this.jqLayoutInner = this.jqLayout.children().first();
            var layoutScroll = this.jqLayout.scrollTop();
            var layoutHeight = this.jqLayoutInner.height();
            this.isRTLEnabled = sap.ui.getCore().getConfiguration().getRTL() ? 1 : -1;
            this.aCardsOrder = [];
            this.layoutOffset = this.jqLayout.offset();

            // fix for infinite scroll issue in iPad
            if (sap.ui.Device.system.tablet === true && sap.ui.Device.system.desktop === false) {
                this.jqLayout.css('height', this.jqLayoutInner.height());
            }

            var visibleLayoutItems = this.layout.getVisibleLayoutItems();
            if (!visibleLayoutItems) {
                return;
            }
            this.aCardsOrder = visibleLayoutItems.map(function (item) {
                var element = item.$().parent()[0];
                element.posDnD = {
                    width: element.offsetWidth,
                    height: element.offsetHeight
                };
                element.style.width = element.offsetWidth + "px";
                return element;
            });
            var jqFirstColumn = this.jqLayoutInner.children().first();
            var marginProp = (this.isRTLEnabled === 1) ? "margin-left" : "margin-right";
            this.verticalMargin = parseInt(jqFirstColumn.css(marginProp), 10);
            var firstItemEl = this.aCardsOrder[0];
            this.horizontalMargin = parseInt(jQuery(firstItemEl).css("margin-bottom"), 10);
            this.columnCount = this.layout.getColumnCount();
            this.top = firstItemEl.getBoundingClientRect().top - this.jqLayoutInner[0].getBoundingClientRect().top;
            this.left = firstItemEl.getBoundingClientRect().left - this.jqLayoutInner[0].getBoundingClientRect().left;
            this.width = firstItemEl.offsetWidth;

            jQuery(this.aCardsOrder).css("position", "absolute");
            this.drawLayout(this.aCardsOrder);

            //all elements are switched to position absolute to prevent layout from collapsing we put height on it like it was before change.
            //and fix scroll, so user will not see position changes on the screen.
            this.jqLayoutInner.height(layoutHeight);
            this.jqLayout.scrollTop(layoutScroll);

        };

        //put all elements to new position.
        ReplaceItems.prototype.drawLayout = function (aCardsLayout) {
            var oCountColumnHeight = [];
            for (var i = 0; i < this.columnCount; i++) {
                oCountColumnHeight[i] = 0;
            }
            for (var naturalIndex = 0; naturalIndex < aCardsLayout.length; naturalIndex++) {
                var currentColumn = naturalIndex % this.columnCount;
                var currentHeight = oCountColumnHeight[currentColumn]++;
                var currentLeft = this.left - this.isRTLEnabled * (currentColumn * this.verticalMargin + currentColumn * this.width);
                var currentTop = this.top;
                var domElement = aCardsLayout[naturalIndex];

                for (var j = 0; j < currentHeight; j++) {
                    currentTop += this.horizontalMargin;
                    var parentIndex = naturalIndex - (j + 1) * this.columnCount;
                    currentTop += aCardsLayout[parentIndex].posDnD.height;
                }

                domElement.posDnD.top = currentTop;
                domElement.posDnD.bottom = currentTop + domElement.posDnD.height;
                domElement.posDnD.left = currentLeft;
                domElement.posDnD.right = currentLeft + domElement.posDnD.width;
                this.updateElementCSS(aCardsLayout[naturalIndex]);
            }
        };

        ReplaceItems.prototype.updateElementCSS = function (element) {
            jQuery(element).css({
                top: element.posDnD.top,
                left: element.posDnD.left
            });
        };

        //callback when drag starts
        ReplaceItems.prototype._dragStartHandler = function (evt, cardElement) {

            //Prevent the browser to mark any elements while dragging
            if (sap.ui.Device.system.desktop) {
                jQuery('body').addClass("sapOVPDisableUserSelect sapOVPDisableImageDrag");
            }

            //Prevent selection of text on tiles and groups
            if (window.getSelection) {
                var selection = window.getSelection();
                selection.removeAllRanges();
            }
            this.initCardsSettingsForDragAndDrop();
        };

        //callback before clone created
        ReplaceItems.prototype._beforeDragHandler = function (evt, ui) {

            //Prevent text selection menu and magnifier on mobile devices
            if (sap.ui.Device.browser.mobile) {
                this.selectableElemets = jQuery(ui).find('.sapUiSelectable');
                this.selectableElemets.removeClass('sapUiSelectable');
            }
            jQuery(this.settings.wrapper).addClass("dragAndDropMode");
        };

        //model changes, and cleanup after drag and drop finished
        ReplaceItems.prototype._dragEndHandler = function (evt, ui) {
            this.lastCollidedEl = null;
            // replacing items only if the drag and drop is completed via lifting the mouse key
            if (evt.type == 'mouseup' || evt.type == 'touchend') {
                if (this.aCardsOrder) {
                    this.afterReplaceElements(this.aCardsOrder);
                }
            }
            //Cleanup added classes and styles before drag
            if (sap.ui.Device.system.desktop) {
                jQuery('body').removeClass("sapOVPDisableUserSelect sapOVPDisableImageDrag");
            }
            jQuery(this.settings.wrapper).removeClass("dragAndDropMode");
            if (this.jqLayoutInner) {
                this.jqLayoutInner.removeAttr("style");
            }
            if (this.aCardsOrder) {
                jQuery(this.aCardsOrder).removeAttr("style");
            }
            this.uiActions.removeClone();
        };

        ReplaceItems.prototype._endHandler = function (evt, ui) {
            //Prevent text selection menu and magnifier on mobile devices
            if (sap.ui.Device.browser.mobile && this.selectableElemets) {
                this.selectableElemets.addClass('sapUiSelectable');
            }
        };

        ReplaceItems.prototype.getSwapItemsFunction = function () {
            return this.dragAndDropSwapElementForKeyboardNavigation.bind(this);
        };

        ReplaceItems.prototype.destroy = function () {
            if (this.uiActions) {
                this.uiActions.disable();
                this.uiActions = null;
            }
        };

        var DragAndDropFactory = {
            buildReplaceItemsInstance: function (settings) {
                var defaultSettings = {
                    containerSelector: ".sapUshellEasyScanLayoutInner",
                    wrapper: ".sapUshellEasyScanLayout",
                    draggableSelector: ".easyScanLayoutItemWrapper",
                    placeHolderClass: "easyScanLayoutItemWrapper-placeHolder",
                    cloneClass: "easyScanLayoutItemWrapperClone",
                    moveTolerance: 10,
                    switchModeDelay: 800,
                    isTouch: !sap.ui.Device.system.desktop,
                    debug: false
                };

                settings = jQuery.extend(defaultSettings, settings);
                return new ReplaceItems(settings);
            }
        };

        var KeyboardNavigation = function (easyScanLayout, swapItemsFunction) {
            this.init(easyScanLayout, swapItemsFunction);
        };

        KeyboardNavigation.prototype.init = function (easyScanLayout, swapItemFunction) {
            this.easyScanLayout = easyScanLayout;
            this.swapItemsFunction = (typeof swapItemFunction === "function") ? swapItemFunction : function () {
            };
            this.keyCodes = jQuery.sap.KeyCodes;
            this.jqElement = easyScanLayout.$();
            this.jqElement.on('keydown.keyboardNavigation', this.keydownHandler.bind(this));
            this.jqElement.find(".after").on("focus.keyboardNavigation", this.afterFocusHandler.bind(this));
            this.jqElement.find(".sapUshellEasyScanLayoutInner").on("focus.keyboardNavigation", this.layoutFocusHandler.bind(this));
            this.jqElement.on("focus.keyboardNavigation", ".easyScanLayoutItemWrapper", this.layoutItemFocusHandler.bind(this));
            this._ignoreSelfFocus = false;
            this.swapSourceElement = null;
            // variables to capture the last focussed element inside the card that will be used
            // for f7 handling
            this.lastFocussedElement = null;
            this.lastFocussedClassId = null;

            // handler function for ctrl + up/down keys since the control + updown arrows are not triggered on keydown
            this.jqElement.on('keyup', this.ctrlArrowUpDownHandler.bind(this));
        };

        /*
         function to handle keydown for ctrl + up/down arrows and ctrl + pg up/down
         */
        KeyboardNavigation.prototype.ctrlArrowUpDownHandler = function (e) {
            switch (e.keyCode) {
                case this.keyCodes.ARROW_UP:
                    if (e.ctrlKey == true) {
                        this.ctrlArrowHandler(e);
                        this.arrowUpDownHandler(e, true);
                    }
                    break;
                case this.keyCodes.ARROW_DOWN:
                    if (e.ctrlKey == true) {
                        this.ctrlArrowHandler(e);
                        this.arrowUpDownHandler(e, false);
                    }
                    break;
                case this.keyCodes.PAGE_UP:
                    if (e.ctrlKey) {
                        this.ctrlArrowHandler(e);
                        this.pageUpDownHandler(e, true);
                    }
                    break;
                case this.keyCodes.PAGE_DOWN:
                    if (e.ctrlKey) {
                        this.ctrlArrowHandler(e);
                        this.pageUpDownHandler(e, false);
                    }
                    break;
            }
        };

        KeyboardNavigation.prototype.destroy = function () {
            if (this.jqElement) {
                this.jqElement.off(".keyboardNavigation");
                this.jqElement.find(".after").off(".keyboardNavigation");
                this.jqElement.find(".sapUshellEasyScanLayoutInner").off(".keyboardNavigation");
            }
            delete this.jqElement;
            delete this.easyScanLayout;
        };

        KeyboardNavigation.prototype.getVisibleLayoutItems = function () {
            //layout items could be hidden, so we filter them and receive only visible
            var content = this.easyScanLayout.getContent();
            var filteredItems = content.filter(function (item) {
                return item.getVisible();
            });
            return filteredItems;
        };

        KeyboardNavigation.prototype.afterFocusHandler = function () {
            //two options are possible, or focus came to us from outside, as a result of outside navigation (Shift+tab Shift+F6 etc...)
            //or we put focus as a result of Tab button inside layout, to maintain Accessibility guide:
            // If focus is on the last control inside a Item, move focus to the next control in the tab chain after the Item Container
            if (this._ignoreSelfFocus) {
                //focus was on the last control inside a Item, move focus to the next control in the tab chain after the Item Container
                //so, this function was called from tabButtonHandler,  we put focus on after element, so browser will move it outside of layout
                this._ignoreSelfFocus = false;
                return;
            }
            //focus came to us from outside, as a result of outside navigation (Shift+tab Shift+F6 etc...)
            //	On enter first time, move focus to the last control of the first Item.
            //	On enter any consecutive time, move focus to the last control of the Item which had the focus before
            var jqItem = this.jqElement.find(".easyScanLayoutItemWrapper:sapTabbable").first();
            var lastTabbable = jqItem.find(":sapTabbable").last();
            if (!lastTabbable.length) {
                lastTabbable = jqItem;
            }
            lastTabbable.focus();
        };

        KeyboardNavigation.prototype.layoutFocusHandler = function () {
            //two options are possible, or focus came to us from outside, as a result of outside navigation (tab F6 etc...)
            //or we put focus as a result of Shift+Tab button inside layout, to maintain Accessibility guide:
            // If focus is on a Item, move focus to the previous control in the tab chain before the Item Container.
            if (this._ignoreSelfFocus) {
                //focus was on the Item, move focus to the previous control in the tab chain before the Item Container
                //so  this function was called from shiftTabButtonHandler, and we put focus on layout itself, so browser will move it outside of layout
                this._ignoreSelfFocus = false;
                return;
            }
            //focus was received from outside element
            //On enter first time, move focus to the first Item (as a whole).
            //On enter any consecutive time, move focus to the Item which had the focus before.
            this.jqElement.find(".easyScanLayoutItemWrapper:sapTabbable").first().focus();
        };

        KeyboardNavigation.prototype.layoutItemFocusHandler = function () {
            var jqFocused = jQuery(document.activeElement);

            // Check that focus element exits, id this item exits it will be easyScanLayoutItemWrapper (because the jQuery definitions
            // After we have the element we want to add to his aria-labelledby attribute all the IDs of his sub elements that have aria-label and role headind
            if (jqFocused) {

                // Select all sub elements with aria-label
                var labelledElement = jqFocused.find("[aria-label]");
                var i, strIdList = "";


                // code to add the aria label for the ObjectNumber having state.
                // We need to add both the value state as well as the text to be added to the aria-label
                if (jqFocused.find('.valueStateText').length == 1) {
                    var sText = jqFocused.find('.valueStateText').find('.sapMObjectNumberText').text();
                    var sValueState = jqFocused.find('.valueStateText').find('.sapUiInvisibleText').text();
                    jqFocused.find('.valueStateText').attr('aria-label', sText + " " + sValueState);
                    jqFocused.find('.valueStateText').attr('aria-labelledby', "");
                }

                //replacing the aria-label for the KPI header and making it similar to the content of the control
                if (jQuery(labelledElement).hasClass('kpiHeaderClass')) {
                    var sKpiHeaderText = jQuery(labelledElement).closest('div.kpiHeaderClass').text();
                    jQuery(labelledElement).closest('div.kpiHeaderClass').attr('aria-label', sKpiHeaderText);
                }

                jqFocused.find("[role='listitem']").attr('aria-label', "");

                // creating a dummy div that contains the position of the card in the application and refering it's id in the aria-labelledby for the card container
                if (jqFocused.hasClass('easyScanLayoutItemWrapper')) {
                    var sCountDivId = "";
                    var cardCountDiv = jqFocused.find('.cardCount');
                    var sCardPositionText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("cardPositionInApp", [jqFocused.attr('aria-posinset'), jqFocused.attr('aria-setsize')]);
                    if (cardCountDiv.length === 0) {
                        sCountDivId = "countDiv_" + new Date().getTime();
                        var sDummyDivForCardCount = '<div id="'+ sCountDivId +'" class="cardCount" aria-label="'+ sCardPositionText +'" hidden></div>';
                        jqFocused.append(sDummyDivForCardCount);
                    } else {
                        sCountDivId = cardCountDiv[0].id;
                        cardCountDiv.attr('aria-label', sCardPositionText);
                    }
                    strIdList += sCountDivId + " ";
                    var oCardType = jqFocused.find('.cardType');
                    if (oCardType.length !== 0) {
                        strIdList += oCardType[0].id + " ";
                    }
                }

                // adding the text card header before if the focus is on the header section
                if (jqFocused.hasClass('sapOvpCardHeader') && !jqFocused.hasClass('sapOvpStackCardContent')) {
                    var sCardHeaderTypeDivId = "";
                    var cardHeaderDiv = jqFocused.find('.cardHeaderType');
                    if (cardHeaderDiv.length === 0) {
                        var sCardHeaderType = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("CardHeaderType");
                        sCardHeaderTypeDivId = "cardHeaderType_" + new Date().getTime();
                        var sDummyDivForCardHeader = '<div id="'+ sCardHeaderTypeDivId +'" class="cardHeaderType" aria-label="'+ sCardHeaderType +'" hidden></div>';
                        jqFocused.append(sDummyDivForCardHeader);
                    } else {
                        sCardHeaderTypeDivId = cardHeaderDiv[0].id;
                    }

                    strIdList += sCardHeaderTypeDivId + " ";
                }

                //  Add every element id with aria label and e heading inside the LayoutItemWrapper to string list
                for (i = 0; i < labelledElement.length; i++) {
                    if (labelledElement[i].getAttribute("role") === "heading") {
                        strIdList += labelledElement[i].id + " ";
                    }
                }

                if (jqFocused.hasClass('sapOvpCardHeader')) {
                    var cardHeaders = jqFocused.find('.cardHeaderText');
                    if (cardHeaders.length !== 0) {
                        for (var i = 0; i < cardHeaders.length; i++) {
                            strIdList += cardHeaders[i].id + " ";
                        }
                    }
                }

                // add the id string list to the focus element (warpper) aria-labelledby attribute
                if (strIdList.length) {
                    jqFocused.attr("aria-labelledby", strIdList);
                }
            }
        };

        //return array index of visible items from layout content aggregation
        KeyboardNavigation.prototype._getLayoutItemIndex = function (jqFocused) {
            if (!jqFocused.hasClass("easyScanLayoutItemWrapper")) {
                return false;
            }
            var currentItemId = jqFocused.children().attr("id");
            var itemIndex = false;
            this.getVisibleLayoutItems().forEach(function (item, index) {
                if (currentItemId == item.getId()) {
                    itemIndex = index;
                }
            });
            return itemIndex;
        };

        KeyboardNavigation.prototype._changeItemsFocus = function (jqItem) {
            //to preserve last focusable item, we need to set all other items tabindex=-1
            var jqTabbableElements = jQuery('.easyScanLayoutItemWrapper');
            jqTabbableElements.attr("tabindex", "-1");
            jqItem.attr("tabindex", 0);
            // waiting for the item to change the position and set on the DOM
            // before adding the focus to the current item
            setTimeout(function () {
                jqItem.focus();
            }, 500);
        };

        KeyboardNavigation.prototype._swapItemsFocus = function (e, jqItemFrom, jqItemTo) {
            //to preserve last focusable item, first item received tabindex=-1, second tabindex=-1.
            e.preventDefault();
            jqItemFrom.attr("tabindex", "-1");
            // waiting for the scroll to happen and set on the DOM
            // before changing the focus to the new position
            setTimeout(function () {
                jqItemTo.attr("tabindex", "0").focus();
            }, 0);
        };


        KeyboardNavigation.prototype.tabButtonHandler = function (e) {
            //Forward navigation:
            //On enter first time, move focus to the first Item (as a whole).
            //On enter any consecutive time, move focus to the Item which had the focus before.
            //If focus is on a Item, move focus to the first control in the tab chain inside the Item.
            //If focus is on a control inside a Item, move focus to the next control in the tab chain inside the same Item.
            //If focus is on the last control inside a Item, move focus to the next control in the tab chain after the Item Container
            var jqFocusedElement = jQuery(document.activeElement);
            if (jqFocusedElement.hasClass("easyScanLayoutItemWrapper")) {
                return;
            }
            var jqItem = jqFocusedElement.closest(".easyScanLayoutItemWrapper");
            //need to check if focus is inside layout item
            if (!jqItem.length) {
                return;
            }
            //we know that focus is inside item, so now we want to check if it is last focusable.
            var jqTabbables = jqItem.find(":sapTabbable");
            //need to filter elements which have `after` in id, becouse those are dummy focusable elements and they
            // prevent us from finding real last element
            jqTabbables = jqTabbables.filter(":not([id$=after])");
            //if currently focused element is itm's last one, then we place focus outside of layout
            if (jqTabbables.eq(jqTabbables.length - 1).is(jqFocusedElement)) {
                e.stopPropagation();
                e.stopImmediatePropagation();
                var beforeScrollLocation = this.jqElement.scrollTop();
                this._ignoreSelfFocus = true;
                this.jqElement.find(".after").focus();
                this.jqElement.scrollTop(beforeScrollLocation);
            }
        };

        KeyboardNavigation.prototype.f7Handler = function (e) {
            //If focus is on a Item, move focus to the control inside the Item. Default: first control in the tab chain inside the Item.
            //If focus is on a control inside a Item, move focus to the Item.
            var jqFocusedElement = jQuery(document.activeElement);
            if (jqFocusedElement.hasClass("easyScanLayoutItemWrapper")) {
                //focus on item we place on first element inside
                jqFocusedElement.find(":sapTabbable").first().focus();
            } else {
                //focus inside item, we put it on item itself
                jqFocusedElement.closest(".easyScanLayoutItemWrapper").focus();
            }
            e.preventDefault();
        };

        KeyboardNavigation.prototype.shiftTabButtonHandler = function (e) {
            //Backward navigation:
            //On enter first time, move focus to the last control of the first Item.
            //If focus is on a control inside a Item, move focus to the previous control in the tab chain inside the same Item.
            //If focus is on the first control inside a Item, move focus to the corresponding Item (as a whole).
            //If focus is on a Item, move focus to the previous control in the tab chain before the Item Container.
            var jqFocusedElement = jQuery(document.activeElement);
            if (!jqFocusedElement.hasClass("easyScanLayoutItemWrapper")) {
                return;
            }
            //focus was on the Item, move focus to the previous control in the tab chain before the Item Container
            //we  put focus on layout itself, so browser will move it outside of layout
            this._ignoreSelfFocus = true;
            this.jqElement.find(".sapUshellEasyScanLayoutInner").focus();
        };

        KeyboardNavigation.prototype.arrowUpDownHandler = function (e, isArrowUp) {
            //UP - If focus is on a Item, move focus to the Item above. If focus is on the first Item of a column, do nothing.
            //DOWN - If focus is on a Item, move focus to the Item below. If focus is on the last Item of a column, do nothing.
            e.preventDefault();
            var fName = isArrowUp ? "prev" : "next";
            var jqFocused = jQuery(document.activeElement);
            if (!jqFocused.hasClass("sapOvpCardHeader")) {
                var nextFocus = jQuery(jqFocused)[fName](".easyScanLayoutItemWrapper");
                if (!nextFocus.is(jqFocused)) {
                    this._swapItemsFocus(e, jqFocused, nextFocus);
                }
            }
        };

        KeyboardNavigation.prototype.arrowRightLeftHandler = function (e, isArrowRight) {
            //Left - If focus is on a Card, move focus one Card to the left.
            //      If focus is on the first Card of a row, move focus to the last Card of the previous row.
            //      If focus is on the first Card, do nothing.
            //Right - If focus is on a Card, move focus one Card to the right.
            //      If focus is on the last Card of a row, move focus to the first Card of the next row.
            //      If focus is on the last Card, do nothing.
            var indexDiff = isArrowRight ? 1 : -1;
            var jqFocused = jQuery(document.activeElement);
            var currentItemIndex = this._getLayoutItemIndex(jqFocused);
            if (currentItemIndex === false) {
                return;
            }
            var oItem = this.getVisibleLayoutItems()[currentItemIndex + indexDiff];
            if (oItem) {
                this._swapItemsFocus(e, jqFocused, oItem.$().parent());
            }
        };

        KeyboardNavigation.prototype.altPageUpAndHomeHandler = function (e) {
            //If focus is on a Card, move focus to the first Card of the same row.
            //If focus is on the first Card of a row, move focus to the first item within the Card Container.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (focusedElementIndex === false) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var item;
            var layoutItems = this.getVisibleLayoutItems();
            if (indexDelta == 0) {
                //focus will be put to the first item in layout
                item = layoutItems[0];
            } else {
                //focus will be put to the first element in row
                item = layoutItems[focusedElementIndex - indexDelta];
            }

            this._swapItemsFocus(e, jqFocused, item.$().parent());
        };

        KeyboardNavigation.prototype.altPageDownAndEndHandler = function (e) {
            //If focus is on a Card, move focus to the last Card of the same row.
            //If focus is on the last Card of a row, move focus to the last item within the Card Container.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (focusedElementIndex === false) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var item;
            var layoutItems = this.getVisibleLayoutItems();
            if ((indexDelta == (colCount - 1)) ||
                ((focusedElementIndex + (colCount - indexDelta)) > layoutItems.length)) {
                //focus wil be put to last layout item
                item = layoutItems[(layoutItems.length - 1)];
            } else {
                //focus will be put to last item in row
                item = layoutItems[focusedElementIndex + (colCount - indexDelta - 1)];
            }
            this._swapItemsFocus(e, jqFocused, item.$().parent());
        };

        KeyboardNavigation.prototype.ctrlHomeHandler = function (e) {
            //If focus is on a Card, move focus to the first Card of the same column.
            //If focus is on the first Card of a column, move focus to the first Card within the Card Container.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (focusedElementIndex === false) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var visibleItems = this.getVisibleLayoutItems();
            var item = visibleItems[indexDelta];
            var nextFocus = item.$().parent();
            if (nextFocus.is(jqFocused)) {
                nextFocus = visibleItems[0].$().parent();
            }
            this._swapItemsFocus(e, jqFocused, nextFocus);
        };

        KeyboardNavigation.prototype.ctrlEndHandler = function (e) {
            //If focus is on a Card, move focus to the last Card of the same column.
            //If focus is on the last Card of a column, move focus to the last Card within the Card Container.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (focusedElementIndex < 0) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var item;
            var visibleItems = this.getVisibleLayoutItems();
            for (var i = visibleItems.length - 1; i >= 0; i--) {
                if ((i % colCount) == indexDelta) {
                    item = visibleItems[i];
                    break;
                }
            }
            var nextFocus = item.$().parent();
            if (nextFocus.is(jqFocused)) {
                nextFocus = visibleItems[visibleItems.length - 1].$().parent();
            }
            this._swapItemsFocus(e, jqFocused, nextFocus);
        };
        /*
        KeyboardNavigation.prototype.altPageUpHandler = function (e) {
            //If focus is on a Card, move focus left by page size. Page size can be set by apps, default page size is 5 Cards.
            //If there are less Cards available than page size, move focus to the first Card of the row.
            //If focus is on the first Card of the row, do nothing.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (!focusedElementIndex) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var item = this.getVisibleLayoutItems()[focusedElementIndex - indexDelta];
            this._swapItemsFocus(e, jqFocused, item.$().parent());
        };

        KeyboardNavigation.prototype.altPageDownHandler = function (e) {
            //If focus is on a Card, move focus right by page size. Page size can be set by apps, default page size is 5 Cards.
            //If there are less Cards available than page size, move focus to the last Card of the row.
            //If focus is on the last Card of the row, do nothing.
            var jqFocused = jQuery(document.activeElement);
            var focusedElementIndex = this._getLayoutItemIndex(jqFocused);
            if (focusedElementIndex < 0) {
                return;
            }
            var colCount = this.easyScanLayout.getColumnCount();
            var indexDelta = focusedElementIndex % colCount;
            var item;
            var layoutItems = this.getVisibleLayoutItems();
            if (indexDelta != (colCount - 1)) {
                item = layoutItems[focusedElementIndex + (colCount - indexDelta - 1)];
                if (!item) {
                    item = layoutItems[layoutItems.length - 1];
                }
                this._swapItemsFocus(e, jqFocused, item.$().parent());
            }
        };
        */

        KeyboardNavigation.prototype.pageUpDownHandler = function (e, isPageUp) {
            //move focus Up/Down to the first not visible (outside of viewport).
            //if all items (on direction) are visible, then to first/last
            var fName = isPageUp ? "prev" : "next";

            var jqFocused = jQuery(document.activeElement);
            if (!jqFocused.hasClass("easyScanLayoutItemWrapper")) {
                return;
            }
            if (!jqFocused[fName]().length) {
                return;
            }
            var nextFocusEl = false;
            var currentEl = jqFocused;
            var windowHeight = jQuery(window).height();
            //var layoutTop = this.jqElement.offset().top;
            //find first "outside of viewport" item
            while (!nextFocusEl) {
                var next = currentEl[fName]();
                if (!next.length) {
                    nextFocusEl = currentEl;
                    break;
                }
                if (!isPageUp && next.offset().top > windowHeight) {
                    nextFocusEl = next;
                    break;
                }
                var offset = next.offset().top;
                var sign = offset ? offset < 0 ? -1 : 1 : 0;
                if (isPageUp && (sign <= 0)) {
                    nextFocusEl = next;
                    break;
                }
                currentEl = next;
            }
            this._swapItemsFocus(e, jqFocused, nextFocusEl);
        };

        KeyboardNavigation.prototype.ctrlArrowHandler = function (e) {
            //Check that we are not in Drag mode already
            //then we need to start the DragMode if it's possible
            if (this.swapSourceElement == null) {
                this.swapSourceElement = jQuery(document.activeElement);
                if (!this.swapSourceElement.hasClass("easyScanLayoutItemWrapper")) {
                    this.endSwap();
                } else {
                    this.jqElement.on('keyup.keyboardNavigation', this.keyupHandler.bind(this));
                    //change css of the current element
                    this.jqElement.addClass('dragAndDropMode');
                    this.swapSourceElement.addClass('dragHovered');
                }
            }
        };

        KeyboardNavigation.prototype.keyupHandler = function (e) {
            //This is the case when we finished our Drag and Drop actions, and we want to swap items
            if (this.swapSourceElement != null && e.keyCode === this.keyCodes.CONTROL) {
                var jqFocused = jQuery(document.activeElement);
                if (jqFocused.hasClass("easyScanLayoutItemWrapper")) {
                    this.swapItemsFunction(this.swapSourceElement[0], jqFocused[0]);
                    this._changeItemsFocus(this.swapSourceElement);
                }
                this.endSwap();
            }
        };


        KeyboardNavigation.prototype.endSwap = function (e) {
            this.swapSourceElement.removeClass('dragHovered');
            this.jqElement.removeClass('dragAndDropMode');
            this.swapSourceElement = null;
            this.jqElement.off('keyup.keyboardNavigation');
        };

        KeyboardNavigation.prototype.checkIfSwapInterrupted = function (e) {
            //When Drag&Drop mode is enabled, any other button except arrowKey will stop Drag&Drop action
            if (this.swapSourceElement != null &&
                e.keyCode != this.keyCodes.ARROW_LEFT &&
                e.keyCode != this.keyCodes.ARROW_RIGHT &&
                e.keyCode != this.keyCodes.ARROW_UP &&
                e.keyCode != this.keyCodes.ARROW_DOWN) {
                this.endSwap();
            }
        };

        KeyboardNavigation.prototype.spacebarHandler = function (e) {
            // checking if the item has a press event associated and explicitly firing the press event on the item
            var item = sap.ui.getCore().byId(e.target.id);
            if (item && item.mEventRegistry.hasOwnProperty('press')) {
                jQuery('#' + e.target.id).addClass('sapMLIBActive');
                jQuery('#' + e.target.id + ' span').css('color', '#FFFFFF');
                item.firePress();
            }
        };

        KeyboardNavigation.prototype.keydownHandler = function (e) {
            //in case swap was interrupted call end swap
            this.checkIfSwapInterrupted(e);

            switch (e.keyCode) {
                case this.keyCodes.TAB:
                    (e.shiftKey) ? this.shiftTabButtonHandler(e) : this.tabButtonHandler(e);
                    break;
                case this.keyCodes.F6:
                    if (e.shiftKey) {
                        this._ignoreSelfFocus = true;
                        this.jqElement.find(".sapUshellEasyScanLayoutInner").focus();
                        jQuery.sap.handleF6GroupNavigation(e);
                    } else {
                        this._ignoreSelfFocus = true;
                        var beforeScrollLocation = this.jqElement.scrollTop();
                        this.jqElement.find(".after").focus();
                        jQuery.sap.handleF6GroupNavigation(e);
                        this.jqElement.scrollTop(beforeScrollLocation);
                    }
                    break;
                case this.keyCodes.F7:
                    this.f7Handler(e);
                    break;
                case this.keyCodes.ARROW_UP:
                    if (e.ctrlKey == true) {
                        this.ctrlArrowHandler(e);
                    }
                    this.arrowUpDownHandler(e, true);
                    break;
                case this.keyCodes.ARROW_DOWN:
                    if (e.ctrlKey == true) {
                        this.ctrlArrowHandler(e);
                    }
                    this.arrowUpDownHandler(e, false);
                    break;
                case this.keyCodes.ARROW_RIGHT:
                    if (e.ctrlKey == true) {
                        this.ctrlArrowHandler(e);
                    }
                    this.arrowRightLeftHandler(e, true);
                    break;
                case this.keyCodes.ARROW_LEFT:
                    if (e.ctrlKey == true) {
                        this.ctrlArrowHandler(e);
                    }
                    this.arrowRightLeftHandler(e, false);
                    break;
                case this.keyCodes.HOME:
                    (e.ctrlKey == true) ? this.ctrlHomeHandler(e) : this.altPageUpAndHomeHandler(e);
                    break;
                case this.keyCodes.END:
                    (e.ctrlKey == true) ? this.ctrlEndHandler(e) : this.altPageDownAndEndHandler(e);
                    break;
                case this.keyCodes.PAGE_UP:
                    (e.altKey == true) ? this.altPageUpAndHomeHandler(e) : this.pageUpDownHandler(e, true);
                    if (e.ctrlKey) {
                        this.ctrlArrowHandler(e);
                        this.pageUpDownHandler(e, true);
                    }
                    break;
                case this.keyCodes.PAGE_DOWN:
                    (e.altKey == true) ? this.altPageDownAndEndHandler(e) : this.pageUpDownHandler(e, false);
                    if (e.ctrlKey) {
                        this.ctrlArrowHandler(e);
                        this.pageUpDownHandler(e, false);
                    }
                    break;
                case this.keyCodes.SPACE:
                case this.keyCodes.ENTER:
                    this.spacebarHandler(e);
                    break;
            }
        };

        var EasyScanLayout = sap.ui.core.Control.extend("sap.ovp.ui.EasyScanLayout", {

            metadata: {
                designTime: true,
                library: "sap.ovp",
                aggregations: {
                    content: {type: "sap.ui.core.Control", multiple: true, singularName: "content"}
                },
                defaultAggregation: "content",
                events: {
                    afterRendering: {},
                    afterDragEnds: {}
                },
                properties: {
                    useMediaQueries: {group: "Misc", type: "boolean", defaultValue: false},
                    dragAndDropRootSelector: {group: "Misc", type: "string"},
                    dragAndDropEnabled: {group: "Misc", type: "boolean", defaultValue: true},
                    debounceTime: {group: "Misc", type: "int", defaultValue: 150}
                }
            },

            renderer: {
                render: function (oRm, oControl) {
                    oRm.write("<div");
                    oRm.writeControlData(oControl);
                    oRm.addClass("sapUshellEasyScanLayout");
                    oRm.writeClasses();
                    oRm.write(">");

                    oRm.write("<div class='sapUshellEasyScanLayoutInner' role='list' tabindex='0' aria-label='Cards'>");

                    var columnCount = oControl.columnCount;
                    var columnList = Array.apply(null, new Array(columnCount)).map(function () {
                        return [];
                    });
                    var filteredItems = oControl.getContent().filter(function (item) {
                        return item.getVisible();
                    });
                    for (var i = 0; i < filteredItems.length; i++) {
                        columnList[i % columnCount].push(filteredItems[i]);
                    }
                    var itemCounter = 1;
                    columnList.forEach(function (column) {
                        oRm.write("<div");
                        oRm.addClass("easyScanLayoutColumn");
                        oRm.writeClasses();
                        oRm.write(">");
                        column.forEach(function (item, index) {
                            oRm.write("<div ");
                            (itemCounter === 1) ? oRm.write("tabindex='0' ") : oRm.write("tabindex='-1' ");
                            oRm.addClass("easyScanLayoutItemWrapper");
                            /* Commented out the following line as the screen reader reads out the role too which should ideally not be read out. See internal incident with ID: 1680054459 */
                            /* oRm.writeAccessibilityState(undefined, {role: "listitem"}); */
                            oRm.write("aria-setsize=" + filteredItems.length + " aria-posinset=" + itemCounter);
                            itemCounter++;
                            oRm.writeClasses();
                            oRm.write(">");
                            oRm.renderControl(item);
                            oRm.write("</div>");
                        });
                        oRm.write("</div>");
                    });

                    oRm.write("</div>");
                    // dummy after focusable area
                    oRm.write("<div class='after' tabindex='0'></div>");
                    oRm.write("</div>");
                }
            }

        });

        var getColumnResolutionList = function () {
            return [
                {minWidth: 0, styleClass: "columns-blank", columnCount: 1},
                {minWidth: 240, styleClass: "columns-block", columnCount: 1},
                {minWidth: 352, styleClass: "columns-narrow", columnCount: 1},
                {minWidth: 433, styleClass: "columns-wide", columnCount: 1},
                {minWidth: 704, styleClass: "columns-narrow", columnCount: 2},
                {minWidth: 864, styleClass: "columns-wide", columnCount: 2},
                {minWidth: 1024, styleClass: "columns-narrow", columnCount: 3},
                {minWidth: 1280, styleClass: "columns-wide", columnCount: 3},
                {minWidth: 1440, styleClass: "columns-narrow", columnCount: 4},
                {minWidth: 1800, styleClass: "columns-wide", columnCount: 4},
                {minWidth: 2560, styleClass: "columns-narrow", columnCount: 5},
                {minWidth: 3008, styleClass: "columns-wide", columnCount: 5},

                //This is for 8K and 4K Screens (on 3600px flp make 1rem - 32px)
                {minWidth: 3600, styleClass: "columns-narrow", columnCount: 4},
                {minWidth: 3840, styleClass: "columns-wide", columnCount: 4},
                {minWidth: 5120, styleClass: "columns-wide", columnCount: 5},
                {minWidth: 6016, styleClass: "columns-wide", columnCount: 5}
            ];
        };

        EasyScanLayout.prototype.init = function () {
            this.data("sap-ui-fastnavgroup", "true", true);
            this.columnResolutionList = getColumnResolutionList();
            this.columnCount = this.columnResolutionList[0].columnCount;
            this.columnStyle = "";
            this.updateColumnClass(this.columnResolutionList[0].styleClass);
            var matchMediaSupported = sap.ui.Device.browser.msie && sap.ui.Device.browser.version > 9;
            if (matchMediaSupported && this.getUseMediaQueries()) { //if matchMedia supported and full page --> use media queries
                this.mediaQueryList = this.initMediaListeners(this.columnResolutionList);
            } else { //if not full page --> use resize handler
                this.resizeHandlerId = this.initResizeHandler(this.columnResolutionList);
            }
        };

        var mediaListenerHandlerTimerId;

        var mediaListenersDebounce = function (columnCount, columnStyle, mq) {
            var mediaListenerHandler = function (cols, className) {
                this.updateColumnClass(className);
                this.refreshColumnCount(cols, this.getContent());
            };
            if (mq.matches) {
                window.clearTimeout(mediaListenerHandlerTimerId);
                mediaListenerHandlerTimerId = window.setTimeout(mediaListenerHandler.bind(this, columnCount, columnStyle), this.getDebounceTime());
            }
        };

        var buildQuery = function (bottomRes, topRes) {
            var min = bottomRes.minWidth;
            var max = topRes && topRes.minWidth;
            return "(min-width: " + min + "px)" + (max ? " and (max-width: " + (max - 1) + "px)" : "");
        };

        EasyScanLayout.prototype.initMediaListeners = function (colResList) {
            var mediaQueryList = [];
            for (var i = 0; i < colResList.length; i++) {
                var query = buildQuery(colResList[i], colResList[i + 1]);
                var mediaQuery = window.matchMedia(query);
                var boundedListener = mediaListenersDebounce.bind(this, colResList[i].columnCount, colResList[i].styleClass);
                mediaQuery.addListener(boundedListener);
                mediaQuery.bindedListener = boundedListener;
                boundedListener(mediaQuery);
                mediaQueryList.push(mediaQuery);
            }
            return mediaQueryList;
        };

        EasyScanLayout.prototype.initResizeHandler = function (colResList) {
            var resizeHandlerTimerId;
            var debounceTime = this.getDebounceTime();
            var resizeHandlerDebounce = function () {
                window.clearTimeout(resizeHandlerTimerId);
                resizeHandlerTimerId = window.setTimeout(this.oControl.resizeHandler.bind(this, colResList), debounceTime);
            };

            return sap.ui.core.ResizeHandler.register(this, resizeHandlerDebounce);
        };

        EasyScanLayout.prototype.resizeHandler = function (colResList) {
            var width = this.iWidth;
            var that = this;
            var oControl = this.oControl;
            var resObject;
            if (jQuery(".sapFDynamicPageContent").length > 0) {
                width = window.innerWidth;
            }
            for (var i = 0; i < colResList.length; i++) {
                if (!colResList[i + 1]) {
                    resObject = colResList[i];
                    break;
                }
                if (colResList[i].minWidth <= width && colResList[i + 1].minWidth > width) {
                    resObject = colResList[i];
                    break;
                }
            }
            
            oControl.refreshColumnCount(resObject.columnCount, oControl.getContent(),that);
            oControl.updateColumnClass(resObject.styleClass);
        };

        /*This function is used to get the width of the cards based on the screen size, dependent on less file*/
        EasyScanLayout.prototype.getColumnWidth = function (styleClass) {
            var columnWidth;
            switch (styleClass) {
                case "columns-blank":
                    columnWidth = 0;
                    break;
                case "columns-narrow":
                    columnWidth = 20;
                    break;
                case "columns-wide":
                    columnWidth = 25;
                    break;
            }
            return columnWidth;
        };

        EasyScanLayout.prototype.refreshColumnCount = function (columnCount, content, that) {
            this.columnCount = columnCount;
            var jqColumnsNew = jQuery();
            for (var i = 0; i < columnCount; i++) {
                jqColumnsNew = jqColumnsNew.add("<div class='easyScanLayoutColumn'/>");
            }
            var filteredItems = content.filter(function (item) {
                return item.getVisible();
            });
            var nCardPosition = 1;
            for (var j = 0; j < filteredItems.length; j++) {
                jQuery(filteredItems[j].getDomRef()).parent().attr('aria-posinset', nCardPosition);
                nCardPosition++;
                jqColumnsNew.get(j % columnCount).appendChild(filteredItems[j].getDomRef().parentNode);
            }
            this.$().children(".sapUshellEasyScanLayoutInner").empty().append(jqColumnsNew);
            if (that && that.iWidth) {
                this.headerMargin(that);
            }
        };

        EasyScanLayout.prototype.headerMargin = function (that) {
            var contentWidth = 0,
                marginAdd = 0;
            var width = that.iWidth;
            var resObject,
                margin,
                columnsContainerWidth,
                scrollWidth = 0, //width of the scroll bar
                columnWidth,
                val = 0;
            var colResList = getColumnResolutionList();
            var iRemToPx = commonUtils.getPixelPerRem();
            var screenWidth = (window.innerWidth * 1.0) / iRemToPx;
            if (jQuery(".sapFDynamicPageContent").length > 0) {
                width = window.innerWidth;
            }
            for (var i = 0; i < colResList.length; i++) {
                if (!colResList[i + 1]) {
                    resObject = colResList[i];
                    break;
                }
                if (colResList[i].minWidth <= width && colResList[i + 1].minWidth > width) {
                    resObject = colResList[i];
                    break;
                }
            }
            columnWidth = this.getColumnWidth(resObject.styleClass);

            /*multiplied by 16 to convert rem to px and
             columnCount-1 gives the number of paddings in the column container
             and is being multiplied by 1 as the padding between the columns is 1rem */
            columnsContainerWidth = (resObject.columnCount * columnWidth + (resObject.columnCount - 1) * 1);
            if (sap.ui.Device.system.desktop) {
                scrollWidth = jQuery('.sapFDynamicPageScrollBar').css('width');
                if (typeof scrollWidth === "string" || scrollWidth instanceof String) { //take string with a rem unit
                    val = scrollWidth.length > 0 ? parseInt(scrollWidth.split("px")[0], 10) : 0;
                }
                scrollWidth = (val * 1.0) / iRemToPx;
            }
            margin = (screenWidth - scrollWidth - columnsContainerWidth) / 2;
            jQuery('.sapFDynamicPageTitle').css({"margin-left": margin + "rem", "margin-right": margin + "rem","visibility": "visible"});
            jQuery('.sapFDynamicPageHeader').css({"margin-left": margin + "rem", "margin-right": margin + "rem","visibility": "visible"});

            
            if (sap.ui.Device.system.desktop) {
                screenWidth = jQuery("body").width();
                if (jQuery(".sapFDynamicPageContentFitContainer").length > 0) {
                    contentWidth = jQuery(".sapFDynamicPageContentFitContainer")[0].clientWidth;
                }

                if (screenWidth === contentWidth) {
                    var marginLeft = jQuery('.sapFDynamicPageTitle').css('margin-left');
                    var marginRight = jQuery('.sapFDynamicPageTitle').css('margin-right');
                    if (typeof marginLeft === "string" || marginLeft instanceof String) {
                        marginLeft = marginLeft.length > 0 ? parseInt(marginLeft.split("px")[0], 10) : 0;
                    }
                    if (typeof marginRight === "string" || marginRight instanceof String) { //take string with a rem unit
                        marginRight = marginRight.length > 0 ? parseInt(marginRight.split("px")[0], 10) : 0;
                    }
                    scrollWidth = jQuery('.sapFDynamicPageScrollBar').css('width');
                    if (typeof scrollWidth === "string" || scrollWidth instanceof String) { //take string with a rem unit
                        val = scrollWidth.length > 0 ? parseInt(scrollWidth.split("px")[0], 10) : 0;
                    }
                    scrollWidth = val;
                    marginAdd = scrollWidth / 2;
                    marginLeft = (marginLeft + marginAdd) / (iRemToPx * 1.0);
                    marginRight = (marginRight + marginAdd) / (iRemToPx * 1.0);
                    jQuery('.sapFDynamicPageTitle').css({"margin-left": marginLeft + "rem", "margin-right": marginRight + "rem", "visibility": "visible"});
                    jQuery('.sapFDynamicPageHeader').css({"margin-left": marginLeft + "rem", "margin-right": marginRight + "rem", "visibility": "visible"});
                }
            }
        };

        EasyScanLayout.prototype.getColumnCount = function () {
            return this.columnCount;
        };

        EasyScanLayout.prototype.getVisibleLayoutItems = function () {
            //layout items could be hidden, so we filter them and receive only visible
            var content = this.getContent();
            var filteredItems = content.filter(function (item) {
                return item.getVisible();
            });
            return filteredItems;
        };

        EasyScanLayout.prototype.updateColumnClass = function (columnClass) {
            if (this.columnStyle === columnClass) {
                return;
            }
            this.removeStyleClass(this.columnStyle);
            this.addStyleClass(columnClass);
            this.columnStyle = columnClass;
        };


        EasyScanLayout.prototype.afterDragAndDropHandler = function (aElements) {
            var aAllControls = this.removeAllAggregation("content", true);
            var aVisibleControls = [];
            var iVizibleIndex = 0;
            //receive contols list from wrapperDOM list
            aElements.forEach(function (el, index) {
                var elementId = el.children[0].getAttribute("id");
                var oControl = sap.ui.getCore().byId(elementId);
                aVisibleControls.push(oControl);
                jQuery(el).attr('aria-posinset', index+1);
            });

            // We need to keep all controls in the content aggregation, keep
            // the original order and change the order only for the visible controls
            for (var i = 0; i < aAllControls.length; i++) {
                if (aAllControls[i].getVisible()) {
                    this.addAggregation("content", aVisibleControls[iVizibleIndex], true);
                    iVizibleIndex++;
                } else {
                    this.addAggregation("content", aAllControls[i], true);
                }

            }

            this.fireAfterDragEnds();
            this.refreshColumnCount(this.getColumnCount(), this.getContent());
        };


        EasyScanLayout.prototype.onAfterRendering = function () {
            if (!this.getDragAndDropRootSelector()) {
                this.setDragAndDropRootSelector("#" + this.getId());
            }
            if (this.layoutDragAndDrop) {
                this.layoutDragAndDrop.destroy();
            }
            if (this.getDragAndDropEnabled()) {
                this.layoutDragAndDrop = DragAndDropFactory.buildReplaceItemsInstance({
                    afterReplaceElements: this.afterDragAndDropHandler.bind(this),
                    rootSelector: this.getDragAndDropRootSelector(),
                    layout: this
                });
            }
            if (this.keyboardNavigation) {
                this.keyboardNavigation.destroy();
            }
            var swapItemsFunc = this.layoutDragAndDrop ? this.layoutDragAndDrop.getSwapItemsFunction() : null;
            this.keyboardNavigation = new KeyboardNavigation(this, swapItemsFunc);
            this.fireAfterRendering();
        };

        EasyScanLayout.prototype.exit = function () {
            if (this.mediaQueryList) {
                this.mediaQueryList.forEach(function (mediaQuery) {
                    mediaQuery.removeListener(mediaQuery.bindedListener);
                });
                delete this.mediaQueryList;
            }
            if (this.resizeHandlerId) {
                sap.ui.core.ResizeHandler.deregister(this.resizeHandlerId);
            }
            if (this.layoutDragAndDrop) {
                this.layoutDragAndDrop.destroy();
                delete this.layoutDragAndDrop;
            }
        };

        return EasyScanLayout;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/EasyScanLayout.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.ObjectStream') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained


jQuery.sap.declare('sap.ovp.ui.ObjectStream'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/ObjectStream",['jquery.sap.global','sap/ui/Device'],
    function(jQuery,Device) {
        "use strict";

        var _srcCard = null;

        var KeyboardNavigation = function (objectStream) {
            this.init(objectStream);
        };

        KeyboardNavigation.prototype.init = function(objectStream) {
            this.objectStream = objectStream;
            this.keyCodes = jQuery.sap.KeyCodes;
            this.jqElement = objectStream.$();
            this.jqElement.on('keydown.keyboardNavigation', this.keydownHandler.bind(this));
            this.jqElement.on("focus.keyboardNavigation",".sapOvpObjectStreamItem", this.ObjectStreamFocusAccessabilityHandler.bind(this));
        };

        KeyboardNavigation.prototype.destroy = function () {
            if (this.jqElement) {
                this.jqElement.off(".keyboardNavigation");
            }
            delete this.jqElement;
            delete this.objectStream;
        };

        KeyboardNavigation.prototype._swapItemsFocus = function (e, jqItemFrom, jqItemTo) {
            //to preserve last focusable item, first item received tabindex=-1, second tabindex=-1.
            e.preventDefault();
            jqItemFrom.attr("tabindex", "-1");
            jqItemTo.attr("tabindex", "0").focus();
        };

        //Handle focus on object stream item
        KeyboardNavigation.prototype.ObjectStreamFocusAccessabilityHandler = function () {
            var focusedDomElement = document.activeElement;
            focusedDomElement = jQuery(focusedDomElement);
            //Check that we got a focused item, after that will add to aria-labelledby every id
            // of items inside the object stream item that have role=heading and aria-label
            if (focusedDomElement){
                // get all elements inside that have aria-label
                var labelledElement = focusedDomElement.find("[aria-label]");
                var i, strIdList = "";
                // add every item that also have role heading to id list string
                for (i = 0; i < labelledElement.length; i++ ){
                    if (labelledElement[i].getAttribute("role") == "heading"){
                        strIdList += labelledElement[i].id + " ";
                    }
                }
                //add the object stream item the aria-labelledby attribute with list of relevants IDs
                if (strIdList.length) {
                    focusedDomElement.attr("aria-labelledby", strIdList);
                }

                // Removing the labelledby property of the card when the focus is in the header area. Having focus on the card reads the header twice //
                if (focusedDomElement.hasClass('sapOvpCardHeader')) {
                    focusedDomElement.closest('.sapOvpObjectStreamItem').removeAttr("aria-labelledby");
                }

            }
        };

        KeyboardNavigation.prototype.tabButtonHandler = function (e) {
            //Forward navigation:
            //On enter first time, move focus to the first Item (as a whole).
            //If focus is on a Item, move focus to the first control in the tab chain inside the Item.
            //If focus is on a control inside a Item, move focus to the next control in the tab chain inside the same Item.
            //If focus is on the last control inside a Item, move focus to the next control in the tab chain after the Object Stream, usually it's Close button
            var jqFocused = jQuery(document.activeElement);
            if (jqFocused.hasClass("sapOvpObjectStreamItem")) {
                return;
            }
            if (jqFocused.hasClass("sapOvpObjectStreamClose")) {
                //focus on the close button, move focus to last focused item.
                e.preventDefault();
                this.jqElement.find(".sapOvpObjectStreamItem:sapTabbable").focus();
                return;
            }
            var jqCard = jqFocused.closest(".sapOvpObjectStreamItem");
            if (!jqCard.length) {
                return;
            }
            var jqTabbables = jqCard.find(":sapTabbable");
            //If focus is on the last control inside a Item, move focus to the next control in the tab chain after the Object Stream, usually it's Close button
            if (jqTabbables.eq(jqTabbables.length - 1).is(jqFocused)) {
                e.preventDefault();
                this.jqElement.find("a.sapOvpObjectStreamHeader").focus();
            }
        };

        KeyboardNavigation.prototype.shiftTabButtonHandler = function (e) {
            //Backward navigation:
            //On enter first time, move focus to the last control of the first Card.
            //On enter any consecutive time, move focus to the last control of the Card which had the focus before.
            //If focus is on a control inside a Card, move focus to the previous control in the tab chain inside the same Card. usually it's Close button
            var jqFocused = jQuery(document.activeElement);
            if (jqFocused.hasClass("sapOvpObjectStreamItem")) {
                e.preventDefault();
                this.jqElement.find(".sapOvpObjectStreamClose").focus();
            }
            if (jqFocused.hasClass("sapOvpObjectStreamClose")) {
                e.preventDefault();
                this.jqElement.find('a.sapOvpObjectStreamHeader').focus();
            }
            if (jqFocused.hasClass("sapOvpObjectStreamHeader")) {
                e.preventDefault();
                this.jqElement.find(".sapOvpObjectStreamItem:sapTabbable *:sapTabbable").last().focus();
                return;
            }
        };


        KeyboardNavigation.prototype.enterHandler = function (e) {
            var jqFocused = jQuery(document.activeElement);
            //if Space/Enter was on Close button, close dialog
            if (jqFocused.hasClass("sapOvpObjectStreamClose")) {
                e.preventDefault();
                this.objectStream.getParent().close();
                if (_srcCard) {
                    _srcCard.focus();
                }
                return;
            }

            //if Space/Enter was last item (it is a Placeholder), trigger click
            if (jqFocused.hasClass("sapOvpObjectStreamItem") && !jqFocused.next().length) {
                jqFocused.children().click();
                return;
            }
        };

        KeyboardNavigation.prototype.f6Handler = function (e) {
            //No matter where the focus resides inside the Object Stream, move it to the first element in the tab chain of the next F6-group. (It's Close button)
            var jqFocused = jQuery(document.activeElement);
            if (jqFocused.hasClass("sapOvpObjectStreamClose")) {
                this.jqElement.find('.sapOvpObjectStreamItem').attr("tabindex", "-1").first().attr("tabindex", "0").focus();
            } else {
                this.jqElement.find('.sapOvpObjectStreamClose').focus();
            }
        };

        KeyboardNavigation.prototype.f7Handler = function (e) {
            //If focus is on a Card, move focus to the control inside the Default: first control in the tab chain inside the Card.
            //If focus is on a control inside a Card, move focus to the Card.
            var jqFocused = jQuery(document.activeElement);
            if (jqFocused.hasClass("sapOvpObjectStreamItem")) {
                jqFocused.find(':sapTabbable').first().focus();
            } else {
                jqFocused.closest('.sapOvpObjectStreamItem').focus();
            }
            e.preventDefault();
        };

        KeyboardNavigation.prototype.leftRightHandler = function (e, isRight) {
            //Left - If focus is on a Card, move focus to the previous Card. If focus is on the first Card, do nothing.
            //Right - If focus is on a Card, move focus to the next Card. If focus is on the last Card, do nothing.

                var fName = isRight ? "next" : "prev";
            var jqFocused = jQuery(document.activeElement);
            if (!jqFocused.hasClass("sapOvpObjectStreamItem")) {
                return false;
            }
            var nextFocus = jqFocused[fName]();
            if (!nextFocus.length) {
                return;
            }
            this._swapItemsFocus(e, jqFocused, nextFocus);
        };

        KeyboardNavigation.prototype.homeEndHandler = function (e, isHome) {
            //Home - If focus is on a Card, move focus to the first Card.
            //End - If focus is on a Card, move focus to the last Card. This is usually the Placeholder Card.
            var fName = isHome ? "first" : "last";
            var jqFocused = jQuery(document.activeElement);
            if (!jqFocused.hasClass("sapOvpObjectStreamItem")) {
                return false;
            }
            e.preventDefault();
            var nextFocus = this.jqElement.find(".sapOvpObjectStreamItem")[fName]();
            this._swapItemsFocus(e, jqFocused, nextFocus);
        };

        KeyboardNavigation.prototype.pageUpDownHandler = function (e, isPageUp) {
            //move focus Left/Right to the first not visible (outside of viewport) item.
            //if all items (on direction) are visible, then to first/last
            var fName = isPageUp ? "prev" : "next";

            var jqFocused = jQuery(document.activeElement);
            if (!jqFocused.hasClass("sapOvpObjectStreamItem")) {
                return;
            }
            if (!jqFocused[fName]().length) {
                return;
            }
            var nextFocusEl = false;
            var currentEl = jqFocused;
            var windowWidth = jQuery(window).width();

            while (!nextFocusEl) {
                var next = currentEl[fName]();
                if (!next.length) {
                    nextFocusEl = currentEl;
                    break;
                }
                if (!isPageUp && next.offset().left > windowWidth) {
                    nextFocusEl = next;
                    break;
                }
                if (isPageUp && (next.offset().left + next.outerHeight()) <= 0) {
                    nextFocusEl = next;
                    break;
                }
                currentEl = next;
            }
            this._swapItemsFocus(e, jqFocused, nextFocusEl);
        };

        KeyboardNavigation.prototype.keydownHandler = function(e) {
            switch (e.keyCode) {
                case this.keyCodes.TAB:
                    (e.shiftKey) ? this.shiftTabButtonHandler(e) : this.tabButtonHandler(e);
                    break;
                case this.keyCodes.ENTER:
                case this.keyCodes.SPACE:
                    this.enterHandler(e);
                    break;
                case this.keyCodes.F6:
                    this.f6Handler(e);
                    break;
                case this.keyCodes.F7:
                    this.f7Handler(e);
                    break;
                case this.keyCodes.ARROW_UP:
                case this.keyCodes.ARROW_LEFT:
                    this.leftRightHandler(e, false);
                    break;
                case this.keyCodes.ARROW_DOWN:
                case this.keyCodes.ARROW_RIGHT:
                    this.leftRightHandler(e, true);
                    break;
                case this.keyCodes.HOME:
                    this.homeEndHandler(e, true);
                    break;
                case this.keyCodes.END:
                    this.homeEndHandler(e, false);
                    break;
                case this.keyCodes.PAGE_UP:
                    this.pageUpDownHandler(e, true);
                    break;
                case this.keyCodes.PAGE_DOWN:
                    this.pageUpDownHandler(e, false);
                    break;
            }
        };


        var ObjectStream = sap.ui.core.Control.extend("sap.ovp.ui.ObjectStream", { metadata : {
            library : "sap.ovp",
            aggregations : {
                content: {type: "sap.ui.core.Control", multiple: true},
                placeHolder: {type: "sap.ui.core.Control", multiple: false},
                title: {type: "sap.ui.core.Control", multiple: false}
            }
        }});


        ObjectStream.prototype.init = function() {
            var that = this;
            this._closeIcon = new sap.ui.core.Icon({
                src: "sap-icon://decline",
                tooltip: sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("close")
            });
            this._closeIcon.addEventDelegate({
                onclick: function () {
                    that.getParent().close();
                }
            });
        };

        ObjectStream.prototype._startScroll = function(direction) {
            this._direction = direction;
            var scrollDiff = this.wrapper.scrollWidth - this.wrapper.offsetWidth - Math.abs(this.wrapper.scrollLeft);
            var leftToScroll;
            if (direction == "left" ) {
                leftToScroll = (this.rtl && !this.scrollReverse) ? scrollDiff :  this.wrapper.scrollLeft;
                if (leftToScroll <= 0) {
                    return;
                }
                this.jqRightEdge.css("opacity", 1);
            } else {
                leftToScroll = (this.rtl && !this.scrollReverse) ? Math.abs(this.wrapper.scrollLeft) : scrollDiff;
                if (leftToScroll <= 0) {
                    return;
                }
                this.jqLeftEdge.css("opacity", 1);
            }
            var scrollTime = leftToScroll * 3;
            var translateX = (direction == "left") ? leftToScroll : ~leftToScroll + 1;
            jQuery(this.container).one("transitionend", function () {
                this._mouseLeave({data: this});
            }.bind(this));
            this.container.style.transition = 'transform ' + scrollTime + 'ms linear';
            this.container.style.transform = 'translate(' + translateX + 'px, 0px) scale(1) translateZ(0px) ';
        };

        ObjectStream.prototype._mouseLeave = function (e) {
            var containerTransform = window.getComputedStyle(e.data.container).transform;
            e.data.container.style.transform = containerTransform;
            e.data.container.style.transition = '';
            this.rtl = sap.ui.getCore().getConfiguration().getRTL();
            var transformX;
            var transformParamsArr = containerTransform.split(",");
            if (containerTransform.substr(0, 8) == "matrix3d") {
                transformX = parseInt(transformParamsArr[12], 10);
            } else if (containerTransform.substr(0, 6) == "matrix") {
                transformX = parseInt(transformParamsArr[4], 10);
            }
            if (isNaN(transformX)) {
                return;
            }
            e.data.container.style.transform = "none";
            if (Device.browser.msie) {
                transformX = this.rtl ? ~transformX : transformX;
            }
            e.data.wrapper.scrollLeft += ~transformX + (e.data._direction == "left" ? -5 : 5);
            e.data._checkEdgesVisibility();
        };

        var scrollHandlerTimerId;
        ObjectStream.prototype.debounceScrollHandler = function () {
            window.clearTimeout(scrollHandlerTimerId);
            scrollHandlerTimerId = window.setTimeout(this._checkEdgesVisibility.bind(this), 150);
        };

        ObjectStream.prototype._initScrollVariables = function () {
            var jqObjectStream = this.$();
            this.container =  jqObjectStream.find(".sapOvpObjectStreamScroll").get(0);
            this.rtl = sap.ui.getCore().getConfiguration().getRTL();
            this.wrapper = jqObjectStream.find(".sapOvpObjectStreamCont").get(0);
            this.scrollReverse = this.scrollReverse || this.wrapper.scrollLeft > 0;
            this.shouldShowScrollButton = (!sap.ui.Device.system.phone && !sap.ui.Device.system.tablet) || sap.ui.Device.system.combi; //should be shown only in desktop (and combi)
            this.jqRightEdge = jqObjectStream.find(".sapOvpOSEdgeRight");
            this.jqLeftEdge = jqObjectStream.find(".sapOvpOSEdgeLeft");
            if (this.shouldShowScrollButton) {
                this.jqRightEdge.add(this.jqLeftEdge).on("mouseenter.objectStream", this, this._mouseEnter).
                    on("mouseleave.objectStream", this, this._mouseLeave);
                jQuery(this.wrapper).on("scroll.objectStream", this.debounceScrollHandler.bind(this));
            }else {
                this.jqLeftEdge.css("display", "none");
                this.jqRightEdge.css("display", "none");
            }

            this._checkEdgesVisibility();
        };

        ObjectStream.prototype._afterOpen = function () {
            if (sap.ui.Device.os.ios && this.$().length) {
                //prevent sap.m.Dialog from stop scroll by cancelling "touchmove" on iOS
                this.$().on("touchmove.scrollFix", function (e) {e.stopPropagation(); });
            }

            var objectStreamHeader = this.$().find('a.sapOvpObjectStreamHeader');
            objectStreamHeader.removeAttr('aria-describedby');
            objectStreamHeader.removeAttr('href');
            var linkId = objectStreamHeader.attr('id');
            objectStreamHeader.parent('div').attr('aria-labelledby', linkId);
            objectStreamHeader.focus();

            if (this.keyboardNavigation) {
                this.keyboardNavigation.destroy();
            }
            this.keyboardNavigation = new KeyboardNavigation(this);
            this._initScrollVariables();
            this.jqBackground = jQuery("<div id='objectStreamBackgroundId' class='objectStreamNoBackground'></div>");
            jQuery.sap.byId("sap-ui-static").prepend(this.jqBackground);
            this.jqBackground.on('click.closePopup', function () {
                this._oPopup.close();
            }.bind(this));
            jQuery(".sapUshellEasyScanLayout").addClass("bluredLayout");

            // Code to remove the tabindex from the quick view card footer if there are no action buttons in the footer
            var oCards = this.$().find('.sapOvpObjectStreamItem');
            for (var i = 0; i < oCards.length; i++) {
                var oFooter = jQuery(oCards[i]).find('.sapOvpActionFooter');
                if (oFooter.find('button').length == 0) {
                    oFooter.attr('tabindex', '-1');
                }
            }
        };

        ObjectStream.prototype._beforeClose = function () {
            if (sap.ui.Device.os.ios && this.$().length) {
                this.$().off(".scrollFix");
            }
            this.keyboardNavigation.destroy();
            this.jqBackground.remove();
            this.jqLeftEdge.add(this.jqRightEdge).add(this.wrapper).off(".objectStream");
            jQuery(".sapUshellEasyScanLayout").removeClass("bluredLayout");
            /*Till sap.ui5 1.46 _oPopup was getting undefined by default on close of dialog
            * But from sap.ui.1.47 it was not getting undefined by default,hence was not creating new dialog on
            * call of this.open function called on click of stack card. Therefore making it undefined
            * on call of close function*/
            this._oPopup = undefined;
        };

        ObjectStream.prototype._mouseEnter = function (evt) {
            var scrollDirection = 'right';
            if ((evt.target == evt.data.jqRightEdge.get(0)) ||
                (evt.currentTarget == evt.data.jqRightEdge.get(0))){
                scrollDirection = sap.ui.getCore().getConfiguration().getRTL() ? 'left' : 'right';
            }
            if ((evt.target == evt.data.jqLeftEdge.get(0)) ||
                (evt.currentTarget == evt.data.jqLeftEdge.get(0))){
                scrollDirection = sap.ui.getCore().getConfiguration().getRTL() ? 'right' : 'left';
            }
            evt.data._startScroll(scrollDirection);
        };

        ObjectStream.prototype._checkEdgesVisibility = function () {
            var scrollPosition = this.wrapper.scrollLeft;
            var leftToScroll = this.wrapper.scrollWidth - this.wrapper.offsetWidth - this.wrapper.scrollLeft;
            var leftEdgeOpacity = (scrollPosition == 0) ? 0 : 1;
            var rightEdgeOpacity = (leftToScroll == 0) ? 0 : 1;
            if (sap.ui.getCore().getConfiguration().getRTL() && this.scrollReverse) {
                this.jqLeftEdge.css("opacity", rightEdgeOpacity);
                this.jqRightEdge.css("opacity", leftEdgeOpacity);
            } else {
                this.jqLeftEdge.css("opacity", leftEdgeOpacity);
                this.jqRightEdge.css("opacity", rightEdgeOpacity);
            }
        };

        ObjectStream.prototype._createPopup = function () {
            this._oPopup = new sap.m.Dialog({
                showHeader: false,
                afterOpen: this._afterOpen.bind(this),
                beforeClose: this._beforeClose.bind(this),
                content: [this],
                stretch: sap.ui.Device.system.phone
            }).removeStyleClass("sapUiPopupWithPadding").addStyleClass("sapOvpStackedCardPopup");
            this._oPopup.oPopup.setModal(false);
        };

        ObjectStream.prototype.open = function (cardWidth, cardReference) {
            if (!this._oPopup) {
                this._createPopup();
            }
            //save card width for after rendering
            this._cardWidth = cardWidth;

            _srcCard = cardReference;

            //set height and width of each card on object stream
            this.setCardsSize(this._cardWidth);

            this._oPopup.open();
        };

        ObjectStream.prototype.onBeforeRendering = function() {
            /**
             * IF an object stream's total content has more than 20 cards (Cards >20), a Placeholder Card shall be displayed at position 21.
             * For non-quickview cards, there is no placeholder anyway.
             */
            var oContent = this.getBinding("content");
            var oPlaceHolder = this.getPlaceHolder();
            if (oContent && oContent.getLength() <= 20) {
                this.setPlaceHolder(null);
                if (oPlaceHolder) {
                    oPlaceHolder.destroy();
                }
            }
        };

        ObjectStream.prototype.onAfterRendering = function() {

            if (!this._oPopup || !this._oPopup.isOpen() || !this.getContent().length ) {
                return;
            }

            //set height and width of each card on object stream
            this.setCardsSize(this._cardWidth);
            setTimeout(function () {
                this._initScrollVariables();
            }.bind(this));
        };


        ObjectStream.prototype.exit = function() {
            if (this._oPopup){
                this._oPopup.destroy();
            }
            this._closeIcon.destroy();
            if (this._oScroller) {
                this._oScroller.destroy();
                this._oScroller = null;
            }
        };

        ObjectStream.prototype.setCardsSize = function(cardWidth) {
            var remSize = parseInt(window.getComputedStyle(document.documentElement).fontSize, 10);
            var cardHeight = sap.ui.Device.system.phone ? document.body.clientHeight / remSize - 4.5 : 28.75;
            var cardList = this.getContent();
            cardList.map(function (oCard) {
                oCard.setWidth(cardWidth + "px");
                oCard.setHeight(cardHeight + "rem");
            });

            var oPlaceHolder = this.getPlaceHolder();
            if (oPlaceHolder) {
                oPlaceHolder.setWidth(cardWidth + "px");
                oPlaceHolder.setHeight(cardHeight + "rem");
            }
        };

        ObjectStream.prototype.updateContent = function(reason){
            /* We are updaing the content only data was change and not by refresh
             * This is done due to the fact that UI5 is calling the updateContent
             * twice, one with reason = 'refresh' with no data in the model and second
             * with reason = 'change' with the data.
             * In order to be able to have rendering optimization we are updating only when
             * we have the data in the model and therefore we can reuse most of the items
             * Ticket was open on this # 1570807520
             */
            // in any case we need to call the oBinding.getContexts().
            // it seams that this will trigger the second call with the change reason
            var oBindingInfo = this.mBindingInfos["content"],
                oBinding = oBindingInfo.binding,
                aBindingContexts = oBinding.getContexts(oBindingInfo.startIndex, oBindingInfo.length);
            if (reason === "change"){
                var fnFactory = oBindingInfo.factory,
                    i = 0,
                    aItems = this.getContent(),
                    addNewItem = jQuery.proxy(function (oContext) {
                        var sId = this.getId() + "-" + jQuery.sap.uid(),
                            oClone = fnFactory(sId, oContext);
                        oClone.setBindingContext(oContext, oBindingInfo.model);
                        this.addContent(oClone);
                    }, this);


                // Bind as many context as possible to existing elements. Create new ones if necessary.
                for (i = 0; i < aBindingContexts.length; ++i) {
                    if (i < aItems.length) {
                        aItems[i].setBindingContext(aBindingContexts[i], oBindingInfo.model);
                    } else {
                        addNewItem(aBindingContexts[i]);
                    }
                }

                if (aItems.length > aBindingContexts.length){
                    // Delete unused elements.
                    for (; i < aItems.length; ++i) {
                        aItems[i].destroy();
                    }
                    // Update the array length.
                    aItems.length = aBindingContexts.length;
                }
            }
        };

        return ObjectStream;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/ObjectStream.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.ObjectStreamRenderer') ) {
jQuery.sap.declare('sap.ovp.ui.ObjectStreamRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/ObjectStreamRenderer",['jquery.sap.global'],

    function(jQuery) {
        "use strict";

        /**
         * Button renderer.
         * @namespace
         */
        var ObjectStreamRenderer = {
        };

        /**
         * Renders the HTML for the given control, using the provided
         * {@link sap.ui.core.RenderManager}.
         *
         * @param {sap.ui.core.RenderManager} oRm
         *            the RenderManager that can be used for writing to
         *            the Render-Output-Buffer
         * @param {sap.ui.core.Control} oButton
         *            the button to be rendered
         */
        ObjectStreamRenderer.render = function(oRm, oControl) {

            if (!oControl.getVisible()) {
                return;
            }

            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.writeAccessibilityState(undefined, {role: "dialog"});
            oRm.writeAccessibilityState(oControl, {label: oControl.getTitle()});
            oRm.addClass("sapOvpObjectStream");
            oRm.writeClasses();
            oRm.write(">");

            /*header*/
            oRm.write("<div");
            oRm.writeClasses();
            oRm.write(">");
            var oTitle = oControl.getTitle();
            if (oTitle) {
                oRm.renderControl(oTitle);
            }
            oRm.write("</div>");
            oRm.write('<div tabindex="0" ');
            oRm.addClass("sapOvpObjectStreamClose");
            oRm.writeAccessibilityState(undefined, {role: "button"});
            oRm.writeAccessibilityState(oControl, {label: "close"});
            oRm.writeClasses();
            oRm.write(">");
            oRm.renderControl(oControl._closeIcon);
            oRm.write("</div>");
            /*header*/

            oRm.write('<div id="' + oControl.getId() + '-cont" class="sapOvpObjectStreamCont"');
            oRm.write(">");
            oRm.write('<div id="' + oControl.getId() + '-scroll"');
            oRm.writeAccessibilityState(undefined, {role: "list"});
            oRm.addClass("sapOvpObjectStreamScroll");

            oRm.writeClasses();
            oRm.write(">");


            var aContent = oControl.getContent();

            var placeHolder = oControl.getPlaceHolder();
            aContent.forEach(function(control, i) {
                oRm.write("<div class='sapOvpObjectStreamItem' ");
                if (i == 0) {
                    oRm.write("tabindex='0' ");
                } else {
                    oRm.write("tabindex='-1' ");
                }
                oRm.writeAccessibilityState(undefined, {role: "listitem"});
                oRm.write("aria-label = ' '");
                if (placeHolder) {
                    oRm.write("aria-setsize = " + (aContent.length + 1) + " aria-posinset = " + (i + 1));
                }
                else {
                    oRm.write("aria-setsize = " + (aContent.length) + " aria-posinset = " + (i + 1));
                }
                oRm.write(">");
                oRm.renderControl(control);
                oRm.write("</div>");
            });

            if (placeHolder){
                oRm.write("<div class='sapOvpObjectStreamItem' ");
                if (!aContent.length) {
                    oRm.write("tabindex='0'");
                } else {
                    oRm.write("tabindex='-1'");
                }
                oRm.writeAccessibilityState(undefined, {role: "listitem"});
                oRm.write("aria-setsize = " + (aContent.length + 1) + " aria-posinset = " + (aContent.length + 1));
                oRm.write(">");
                oRm.renderControl(placeHolder);
                oRm.write("</div>");
            }

            oRm.write("</div>"); // scroll

            oRm.write('<div id="' + oControl.getId() + '-leftedge" class="sapOvpOSEdgeLeft">');
            oRm.renderControl(new sap.ui.core.Icon({src: "sap-icon://slim-arrow-left", useIconTooltip:false}));
            oRm.write('</div>');
            oRm.write('<div id="' + oControl.getId() + '-rightedge" class="sapOvpOSEdgeRight">');
            oRm.renderControl(new sap.ui.core.Icon({src: "sap-icon://slim-arrow-right", useIconTooltip:false}));
            oRm.write('</div>');

            oRm.write("</div>"); // cont
            oRm.write("</div>"); // root

        };

        ObjectStreamRenderer.renderFooterContent = function(oRm, oControl) {

            // overrides this function
        };

        return ObjectStreamRenderer;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/ObjectStreamRenderer.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.SmartphoneHeaderToggle') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.ui.SmartphoneHeaderToggle");

    sap.ovp.ui.SmartphoneHeaderToggle = {
        threshold : 10,
        headerVisible : true,
        startY : undefined,
        app : undefined,
        jqView : undefined,

        startHandler : function(e) {
            if (this.app.getGlobalFilter() && this.app.getGlobalFilter().hasOwnProperty("getVisible") && this.app.getGlobalFilter().getVisible()) {
                return;
            }
            this.startY = e.touches[0].pageY;
        },

        resizeHandler : function() {
            if (!this.headerVisible) {
                this.animateHeader.call(this, this.headerVisible);
            }
        },

        animateHeader : function(setVisible) {
            var jqHeaderVbox = this.jqView.find('.ovpApplication > .sapUiFixFlexFixed > .sapMVBox');
            var jqFlexContainerParent = this.jqView.find('.ovpApplication > .sapUiFixFlexFlexible');
            var jqFlexContainer = jqFlexContainerParent.children();
            var translate;

            if (setVisible) {
                translate = "translateY(0px)";
                jqHeaderVbox.add(jqFlexContainerParent).css({"transform": translate, "-webkit-transform": translate});
                jqFlexContainerParent.one('transitionend', function(e) {
                    if (this.headerVisible) {
                        jqFlexContainer.css({bottom: "0px"});
                    }
                }.bind(this));
            } else {
                var oHeader = this.view.byId('ovpDynamicPageHeader');

                //Animate dynamic header only when it is present
                if (oHeader) {
                    var headerHeight = oHeader.$().height();
                    jqFlexContainer.css({bottom: "-" + headerHeight + "px"});
                    translate = "translateY(-" + headerHeight + "px)";
                    jqFlexContainerParent.add(jqHeaderVbox).css({
                        "transform": translate,
                        "-webkit-transform": translate
                    });
                }
            }
        },

        moveHandler : function(e) {
            var moveY = e.touches[0].pageY;
            if (typeof this.startY === "undefined") {
                if (this.app.getGlobalFilter() && this.app.getGlobalFilter().hasOwnProperty("getVisible") && this.app.getGlobalFilter().getVisible()) {
                    return;
                }
                this.startY = moveY;
            }
            if (Math.abs(this.startY - moveY) < this.threshold) {
                return;
            }
            if (this.startY > moveY && this.headerVisible) {
                this.headerVisible = false;
                this.startY = moveY;
                this.animateHeader.call(this, this.headerVisible);
            }
            if (this.startY < moveY && !this.headerVisible) {
                this.headerVisible = true;
                this.startY = moveY;
                this.animateHeader.call(this, this.headerVisible);
            }
        },

        endHandler : function() {
            this.startY = undefined;
            return;
        },

        enable : function(app) {
            this.app = app;
            this.view = this.app.getView();
            this.jqView = this.view.$();

            this.jqView.on('touchstart.headerHiding', this.startHandler.bind(this));
            this.jqView.on('touchmove.headerHiding', this.moveHandler.bind(this));
            this.jqView.on('touchend.headerHiding touchcancel.headerHiding touchleave.headerHiding', this.endHandler.bind(this));
            jQuery(window).on("resize.headerHiding", this.resizeHandler.bind(this));
        },

        disable : function() {
            this.jqView.off('touchstart.headerHiding touchmove.headerHiding touchend.headerHiding touchcancel.headerHiding touchleave.headerHiding');
            jQuery(window).off("resize.headerHiding");
        }
    };

}());
}; // end of sap/ovp/ui/SmartphoneHeaderToggle.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.UIActions') ) {
/*global jQuery, sap, clearTimeout, console, window */
(function() {
	"use strict";

	jQuery.sap.declare("sap.ovp.ui.UIActions");

	sap.ovp.ui.UIActions = function(cfg) {

		if (!cfg || !cfg.rootSelector || !cfg.containerSelector || !cfg.draggableSelector) {
			throw new Error("No configuration object to initialize User Interaction module.");
		}

		/* PRIVATE MEMBERS */
		this.captureStart = null; // {Function} capture start event X and Y position
		this.captureMove = null; // {Function} capture move event X and Y position
		this.captureEnd = null; // {Function} capture end event X and Y position
		this.clickCallback = null; // {Function} Callback function execute after capture `click` event
		this.clickEvent = null; // {String} `click` event
		this.clickHandler = null; // {Function} capture click event and prevent the default behaviour on IOS
		this.clone = null; // {Element} cloned draggable element
		this.cloneClass = null; // {String} clone CSS Class
		this.container = null; // {Element} content container to be scrolled
		this.contextMenuEvent = null; // {String} `contextmenu` event for Windows 8 Chrome
		this.debug = false; // {Boolean} for debug mode
		this.dragMoveCallback = null; // {Function} Callback function executes while drag mode is active
		this.draggable = null; // {Array<Element>|NodeList<Element>} list of draggable elements
		this.placeHolderClass = null; // {String} placeholder CSS Class
		this.draggableSelector = null; // {String} CSS Selector String which specifies the draggable elements
		this.doubleTapCallback = null; // {Function} Callback function execute when double tap
		this.doubleTapDelay = null; // {Number} number of milliseconds to recognize double tap
		this.element = null; // {Element} draggable element
		this.swapTargetElement = null; // {Element} draggable element to swap the current element with
		this.endX = null; // {Number} X coordinate of end event
		this.endY = null; // {Number} Y coordinate of end event
		this.isTouch = null; // {Boolean} does browser supports touch events
		this.lastElement = null; // {Element} last tapped element
		this.lastTapTime = null; // {Number} number of milliseconds elapsed since last touchstart or mousedown
		this.lockMode = null; // {Boolean} if the value is true, preventing change element mode
		this.log = null; // {Function} logs to console in debug mode
		this.mode = null; // {String} current feature mode `normal`, `scroll`, `drag`, `move`
		this.mouseDownEvent = null; // {String} 'mousedown'
		this.mouseMoveEvent = null; // {String} 'mousemove'
		this.mouseUpEvent = null; // {String} 'mouseup'
        this.keyUpEvent = null; // {String} 'keyup' 
		this.moveTolerance = null; // {Number} tolerance in pixels between touchStart/mousedwon and touchMove/mousemove
		this.moveX = null; // {Number} X coordinate of move event
		this.moveY = null; // {Number} Y coordinate of move event
		this.noop = null; // {Function} empty function
		this.preventClickFlag = false; // {Boolean} flag indicates if prevent default click behaviour
		this.preventClickTimeoutId = null; // {Number}  timer ID. Used to clear click preventing
		this.scrollContainer = null; // {Element} the element we would like to transition while drag and scroll
		this.scrollContainerSelector = null; // {String} CSS Selector String which specifies the element we would like to transition while drag and scroll
		this.scrollEvent = null; // {String} `scroll` event
		this.scrollTimer = null; // {Number} number of milliseconds elapsed since the last scroll event
		this.startX = null; // {Number} X coordinate of start event
		this.startY = null; // {Number} Y coordinate of start event
		this.switchModeDelay = null; // {Number} switch mode delay in ms
		this.tapsNumber = null; // {Number} the number of taps. could be 0 / 1 / 2
		this.timer = null; // {Number} timer ID. Used to decide mode
		this.scrollHandler = null; // {Function} scroll event handler
		this.touchCancelEvent = null; // {String} `touchcancel` event
		this.dragStartCallback = null; // {Function} Callback function execute when drag mode is active
		this.dragEndCallback = null; // {Function} Callback function execute after capture `touchend` or `mouseup` event and mode is 'drag' or 'drag-and-scroll'
		this.endCallback = null; // {Function} Callback function execute after capture `touchend` or `mouseup` event
		this.touchEndEvent = null; // {String} `touchend`
		this.touchMoveEvent = null; // {String} `touchmove`
		this.beforeDragCallback = null; // {Function} Callback function execute after capture `touchstart` or `mousedown` event
		this.touchStartEvent = null; // {String} `touchstart`
		this.wrapper = null; // {Element} content container parent
		this.wrapperRect = null; // {Object} wrapper Bounding Rect
		this.scrollEdge = 100; // {Number} edge in pixels top and bottom when scroll is starting

		this.resizeStartCallback = null;
		this.resizeMoveCallback = null; // {Function} Callback function executes while resize mode is active
		this.resizeEndCallback = null;
		this.isResize = null;
        this.isResizeX = null; //Flag to distinguish for X-direction resize
        this.isResizeY = null;  //Flag to distinguish for Y-direction resize
		this.resizeHandleDistance = null;
        this.layoutDetails = null; //Property to check for the layout of the application i.e Fixed Card or Resizable Card Layout

		/**
		 * Initialize state using configuration
		 *
		 * @private
		 */
		this.init = function(cfg) {
			this.startX = -1;
			this.startY = -1;
			this.moveX = -1;
			this.moveY = -1;
			this.endX = -1;
			this.endY = -1;

            //Threshold distance for the card from where it can be resized
			this.resizeHandleDistance = 16;
			this.isResize = false;
            this.isResizeX = false;
            this.isResizeY = false;

			this.noop = function() {};
			this.isTouch = cfg.isTouch ? !!cfg.isTouch : false;
			this.container = document.querySelector(cfg.containerSelector);
			this.scrollContainerSelector = cfg.scrollContainerSelector || cfg.containerSelector;
			this.switchModeDelay = cfg.switchModeDelay || 1500;
			this.moveTolerance = cfg.moveTolerance === 0 ? 0 : cfg.moveTolerance || 1000;
			this.draggableSelector = cfg.draggableSelector;
			this.mode = 'normal';
			this.debug = cfg.debug || false;
			this.root = document.querySelector(cfg.rootSelector);
			this.tapsNumber = 0;
			this.lastTapTime = 0;
			this.log = this.debug ? this.logToConsole : this.noop;
			this.lockMode = false;
			this.placeHolderClass = cfg.placeHolderClass || "";
			this.cloneClass = cfg.cloneClass || "";
			this.wrapper = cfg.wrapperSelector ? document.querySelector(cfg.wrapperSelector) : this.container.parentNode;
			this.clickCallback = typeof cfg.clickCallback === 'function' ? cfg.clickCallback : this.noop;
			this.beforeDragCallback = typeof cfg.beforeDragCallback === 'function' ? cfg.beforeDragCallback : this.noop;
			this.doubleTapCallback = typeof cfg.doubleTapCallback === 'function' ? cfg.doubleTapCallback : this.noop;
			this.dragEndCallback = typeof cfg.dragEndCallback === 'function' ? cfg.dragEndCallback : this.noop;
			this.endCallback = typeof cfg.endCallback === 'function' ? cfg.endCallback : this.noop;
			this.dragStartCallback = typeof cfg.dragStartCallback === 'function' ? cfg.dragStartCallback : this.noop;
			this.dragMoveCallback = typeof cfg.dragMoveCallback === 'function' ? cfg.dragMoveCallback : this.noop;
			this.doubleTapDelay = cfg.doubleTapDelay || 500;
			this.wrapperRect = this.wrapper.getBoundingClientRect();
			this.scrollEvent = 'scroll';
			this.touchStartEvent = 'touchstart';
			this.touchMoveEvent = 'touchmove';
			this.touchEndEvent = 'touchend';
			this.mouseDownEvent = 'mousedown';
			this.mouseMoveEvent = 'mousemove';
			this.mouseUpEvent = 'mouseup';
            this.keyUpEvent = 'keyup';
			this.contextMenuEvent = 'contextmenu';
			this.touchCancelEvent = 'touchcancel';
			this.clickEvent = 'click';
            this.layoutDetails = cfg.layout ? cfg.layout.dashboardLayoutUtil : null;

			this.resizeStartCallback = typeof cfg.resizeStartCallback === 'function' ? cfg.resizeStartCallback : this.noop;
			this.resizeMoveCallback = typeof cfg.resizeMoveCallback === 'function' ? cfg.resizeMoveCallback : this.noop;
			this.resizeEndCallback = typeof cfg.resizeEndCallback === 'function' ? cfg.resizeEndCallback : this.noop;

			if (this.wrapper) {
				jQuery(this.wrapper).css({
					"position": "relative",
					"top": 0,
					"left": 0,
					"right": 0,
					"bottom": 0,
					"-webkit-transform": "translateZ(0)",
					"transform": "translateZ(0)"
				});
			}
		};

		/* PRIVATE METHODS */

		/**
		 * Iterates over array-like object and calls callback function
		 * for each item
		 *
		 * @param {Array|NodeList|Arguments} scope - array-like object
		 * @param {Function} callback - function to be called for each element in scope
		 * @returns {Array|NodeList|Arguments} scope
		 */
		this.forEach = function(scope, callback) {
			/*
			 * NodeList and Arguments don't have forEach,
			 * therefore borrow it from Array.prototype
			 */
			return Array.prototype.forEach.call(scope, callback);
		};

		/**
		 * Returns index of item in array-like object
		 *
		 * @param {Array|NodeList|Arguments} scope - array-like object
		 * @param {*} item - item which index to be found
		 * @returns {Number} index of item in the array-like object
		 */
		this.indexOf = function(scope, item) {
			/*
			 * NodeList and Arguments don't have indexOf,
			 * therefore borrow it from Array.prototype
			 */
			return Array.prototype.indexOf.call(scope, item);
		};

		/**
		 * Cuts item from array-like object and pastes before reference item
		 *
		 * @param {Array|NodeList|Arguments} scope
		 * @param {*} item
		 * @param {*} referenceItem
		 */
		this.insertBefore = function(scope, item, referenceItem) {
			var itemIndex,
				referenceItemIndex,
				splice;

			splice = Array.prototype.splice;
			itemIndex = this.indexOf(scope, item);
			referenceItemIndex = this.indexOf(scope, referenceItem);

			splice.call(
				scope,
				referenceItemIndex - (itemIndex < referenceItemIndex ? 1 : 0),
				0,
				splice.call(scope, itemIndex, 1)[0]
			);
		};

		/**
		 * Log to console
		 *
		 * @private
		 */
		this.logToConsole = function() {
			window.console.log.apply(console, arguments);
		};

		this.getDraggableElement = function(currentElement) {
			var element;

			this.draggable = jQuery(this.draggableSelector, this.container);
			//Since we are listening on the root element,
			//we would like to identify when a draggable element is being touched.
			//The target element of the event is the lowest element in the DOM hierarchy
			//where the user touched the screen.
			//We need to climb in the DOM tree from the target element until we identify the draggable element,
			//or getting out of container scope.
			while (typeof element === 'undefined' && currentElement !== this.root) {
				//Only draggable tiles
				if (this.indexOf(this.draggable, currentElement) >= 0) {
					element = currentElement;
				}
				currentElement = currentElement.parentNode;
			}

			return element;
		};


		/**
		 * Capture X and Y coordinates of touchstart or mousedown event
		 *
		 * @param {Event} evt - touchstart or mousedowm event
		 * @private
		 */
		this.captureStart = function(evt) {
			var eventObj;

			if (evt.type === 'touchstart' && evt.touches.length === 1) {
				eventObj = evt.touches[0];
			} else if (evt.type === 'mousedown') {
				eventObj = evt;
				if (evt.which !== 1) { //Only LEFT click operation is enabled. Otherwise do nothing.
					return;
				}
			}

			if (eventObj) {
				this.element = this.getDraggableElement(eventObj.target);
				this.startX = eventObj.pageX;
				this.startY = eventObj.pageY;
				this.lastMoveX = 0;
				this.lastMoveY = 0;

				//drag&drop or resize?
                if (this.element) {
                    var $elem = jQuery(this.element);
                    var elemLeft = $elem.offset().left;
                    var elemTop = $elem.offset().top;
                    var elemHeight = $elem.height();
                    var elemWidth = $elem.width();
                    //For Resizable card layout then both Drag and resize available while for Fixed card layout only card can be dragged.
                    //check to distinguish between drag and Resize depending upon the layout
                    if (this.layoutDetails) {
                        var rightX = (elemLeft + elemWidth - this.startX) < this.resizeHandleDistance;
                        var bottomY = (elemTop + elemHeight - this.startY) < this.resizeHandleDistance;
                        if (rightX || bottomY) {
                            //Condition to distinguish between resize in X-direction , Y-direction and XY-direction
                            //If the interaction point is right side of card then it's X-direction resize
                            if (rightX && bottomY) {
                                this.isResizeX = false;
                                this.isResizeY = false;
                                //If the interaction point is bottom part of card then it's Y-direction resize
                            } else if (!rightX && bottomY) {
                                this.isResizeX = false;
                                this.isResizeY = true;
                                //If the interaction point is at right side and bottom part of card then it's XY-direction resize
                            } else if (rightX && !bottomY) {
                                this.isResizeX = true;
                                this.isResizeY = false;
                            }
                            this.isResize = true;
                        }
                    } else {
                        var dX = elemLeft + elemWidth - this.startX;
                        var dY = elemTop + elemHeight - this.startY;
                        if (dX < this.resizeHandleDistance && dY < this.resizeHandleDistance) {
                            this.isResize = true;
                        }
                    }
                }

				//Check if it is a doubletap flow or single tap
				if (this.lastTapTime && this.lastElement && this.element && (this.lastElement === this.element) && Math.abs(Date.now() - this.lastTapTime) <
					this.doubleTapDelay) {
					this.lastTapTime = 0;
					this.tapsNumber = 2;
				} else {
					this.lastTapTime = Date.now();
					this.tapsNumber = 1;
					this.lastElement = this.element;
				}

				this.log('captureStart(' + this.startX + ', ' + this.startY + ')');
			}
		};

		/**
		 * Handler for `mousedown` or `touchstart`
		 *
		 * @private
		 */
		this.startHandler = function(evt) {
			this.log('startHandler');
		//	clearTimeout(this.timer);
		//	delete this.timer;
			this.captureStart(evt);
			if (this.element) {
				this.beforeDragCallback(evt, this.element);
				if (this.lockMode === false) {
					if (this.tapsNumber === 2) {
						this.mode = 'double-tap';
						return;
					}
					if (evt.type === "touchstart") {
						this.timer = setTimeout(function() {
							if (this.isResize) {
								this.log("mode switched to resize");
								this.mode = "resize";
								this.resizeStartCallback(evt, this.element);
							} else {
								this.log('mode switched to drag');
								this.mode = 'drag';
								this.createClone();
								this.dragStartCallback(evt, this.element);
							}
						}.bind(this), this.switchModeDelay);
					}
				}
			}
		}.bind(this);

		/**
		 * Capture X and Y coordinates of touchmove or mousemove event
		 *
		 * @param {Event} evt - touchmove or mousemove event
		 * @private
		 */
		this.captureMove = function(evt) {
			var eventObj;

			if (evt.type === 'touchmove' && evt.touches.length === 1) {
				eventObj = evt.touches[0];
			} else if (evt.type === 'mousemove') {
				eventObj = evt;
			}
			if (eventObj) {
				this.moveX = eventObj.pageX;
				this.moveY = eventObj.pageY;

				this.log('captureMove(' + this.moveX + ', ' + this.moveY + ')');
			}
		};

		/**
		 * Handler for `mousemove` or `touchmove`
		 *
		 * @private
		 */
		this.moveHandler = function(evt) {
			this.log('moveHandler');
			this.captureMove(evt);
			switch (this.mode) {
				case 'normal':
					if ((Math.abs(this.startX - this.moveX) > this.moveTolerance || Math.abs(this.startY - this.moveY) > this.moveTolerance)) {
						if (evt.type === "touchmove") {
							this.log('-> normal');
							clearTimeout(this.timer);
							delete this.timer;
						} else if (this.element) { //In desktop start dragging immediately

							if (this.isResize) {
								this.log("mode switched to resize");
								this.mode = "resize";
								// resize  callback ??
							} else {
								this.log('mode switched to drag');
								this.mode = 'drag';
								this.createClone();
							}
						}
					}
					break;
				case 'drag':
					evt.preventDefault();
					this.log('-> drag');
					this.mode = 'drag-and-scroll';
					window.addEventListener(this.mouseUpEvent, this.endHandler, true);
                    // Adding a keyup event to terminate the drag and drop in case of a key is pressed
                    window.addEventListener(this.keyUpEvent, this.endHandler, true);
					this.translateClone();
					this.scrollContainer = document.querySelector(this.scrollContainerSelector);

					if (evt.type === "mousemove") {
						this.dragStartCallback(evt, this.element);
					}
					break;
				case 'drag-and-scroll':
					evt.stopPropagation();
					evt.preventDefault();
					this.log('-> drag-and-scroll');
					this.translateClone();
					this.dragMoveCallback({
						evt: evt,
						clone: this.clone,
						element: this.element,
						draggable: this.draggable,
						moveX: this.moveX,
						moveY: this.moveY
					});
					break;
				case "resize":
					evt.preventDefault();
					this.log('-> resize');
					this.mode = 'resize-and-scroll';
					window.addEventListener(this.mouseUpEvent, this.endHandler, true);
					this.scrollContainer = document.querySelector(this.scrollContainerSelector);

					if (evt.type === "mousemove") {
						this.resizeStartCallback(evt, this.element);
					}
					break;
				case "resize-and-scroll":
					evt.stopPropagation();
					evt.preventDefault();
					this.log('-> resize-and-scroll');
					this.resizeMoveCallback({
						evt: evt,
						element: this.element,
						draggable: this.draggable,
						moveX: this.moveX,
						moveY: this.moveY
					});
					break;
				default:
					break;
			}
		}.bind(this);

		/**
		 * Capture X and Y coordinates of touchend or mouseup event
		 *
		 * @param {Event} evt - touchmove or mouseup event
		 * @private
		 */
		this.captureEnd = function(evt) {
			var eventObj;

			if ((evt.type === 'touchend' || evt.type === 'touchcancel') && (evt.changedTouches.length === 1)) {
				eventObj = evt.changedTouches[0];
			} else if (evt.type === 'mouseup') {
				eventObj = evt;
			}
			if (eventObj) {
				this.endX = eventObj.pageX;
				this.endY = eventObj.pageY;

				this.log('captureEnd(' + this.endX + ', ' + this.endY + ')');
			}
		};

		/**
		 * Handler for `contextmenu` event. Disable right click on Chrome
		 *
		 * @private
		 */
		this.contextMenuHandler = function(evt) {
			if (this.isTouch) {
				evt.preventDefault();
			}

		}.bind(this);

		/**
		 *
		 * @param event
		 */
		this.clickHandler = function(event) {

			if (this.preventClickFlag) {
				this.preventClickFlag = false;
				event.preventDefault();
				event.stopPropagation();
				event.stopImmediatePropagation();
				clearTimeout(this.preventClickTimeoutId);
			}
			this.clickCallback();

		}.bind(this);

		/**
		 * This function solves a bug which causes the tile to be launched after D&D.
		 */
		this.preventClick = function() {
			this.preventClickFlag = true;
			this.preventClickTimeoutId = setTimeout(function() {
				this.preventClickFlag = false;
			}.bind(this), 100);
		};

		/**
		 * Handler for `mouseup` or `touchend`
		 *
		 * @private
		 */
		this.endHandler = function(evt) {
			this.log('endHandler');
            if ((evt.type == this.keyUpEvent && evt.which == jQuery.sap.KeyCodes.ESCAPE) || evt.type == this.mouseUpEvent || evt.type == this.touchEndEvent) {
                this.captureEnd(evt);
                switch (this.mode) {
                    case 'normal':
                        this.log('-> normal');
                        break;
                    case 'drag':
                        this.log('-> drag');
                        this.dragEndCallback(evt, this.element, this.clone);
                        this.preventClick();
                        break;
                    case 'drag-and-scroll':
                        this.log('-> drag-and-scroll');
                        window.removeEventListener(this.mouseUpEvent, this.endHandler, true);
                        this.dragEndCallback(evt, this.element, this.clone);
                        this.preventClick();
                        evt.stopPropagation();
                        evt.preventDefault();
                        break;
                    case 'double-tap':
                        this.log('-> double-tap');
                        this.doubleTapCallback(evt, this.element);
                        break;
                    case "resize":
                        this.log("-> resize");
                        this.isResize = false;
                        this.resizeEndCallback(evt, this.element);
                        this.preventClick();
                        break;
                    case "resize-and-scroll":
                        this.log("-> resize-and-scroll");
                        window.removeEventListener(this.mouseUpEvent, this.endHandler, true);
                        this.isResize = false;
                        this.resizeEndCallback(evt, this.element);
                        this.preventClick();
                        evt.stopPropagation();
                        evt.preventDefault();
                        break;
                    default:
                        break;
                }
                if (this.element) {
                    this.endCallback(evt, this.element);
                }
                clearTimeout(this.timer);
                delete this.timer;
                this.lastMoveX = 0;
                this.lastMoveY = 0;
                this.swapTargetElement = null;
                this.element = null;
                this.mode = 'normal';
            }
		}.bind(this);

		this.defaultDragStartHandler = function(evt) {
			//prevent the Native Drag behavior of the browser
			evt.preventDefault();
		};

		this.scrollHandler = function() {
			clearTimeout(this.scrollTimer);
			this.lockMode = true;
			//release the scroll lock after 100 ms
			this.scrollTimer = setTimeout(function() {
				this.lockMode = false;
			}.bind(this), 500);
		}.bind(this);

		/**
		 * Create clone of draggable element
		 *
		 * @private
		 */
		this.createClone = function() {
			var style,
				rect;
			if (this.clone) {
				this.removeClone(); 
			}
			rect = this.element.getBoundingClientRect();
			this.clone = this.element.cloneNode(true);

			// If the cloned element contains canvas children,
			// we have to clone the rendered content too. Simply
			// cloning a canvas node will create a new canvas element,
			// but it doesn't also transfer the rendered contet.
			var canvasesOld = this.element.querySelectorAll('canvas');
			if (canvasesOld.length) {
				var canvasesNew = this.clone.querySelectorAll('canvas');

				for (var i = 0; i < canvasesOld.length; i++) {
					// Painting the original canvas on the cloned canvas
					canvasesNew[i].getContext('2d').drawImage(canvasesOld[i], 0, 0);
				}
			}

			this.clone.className += (' ' + this.cloneClass);
            if (!this.layoutDetails) {
                this.element.className += (' ' + 'easyScanLayoutItemWrapper-placeHolder');
            } else {
                this.element.className += (' ' + 'dashboardLayoutItemWrapper-placeHolder');
            }
			style = this.clone.style;
			style.position = 'absolute';
			style.display = 'block';
			style.top = (rect.top - this.root.getBoundingClientRect().top) + 'px';
			style.left = (rect.left - this.root.getBoundingClientRect().left) + 'px';
			style.width = rect.width + 'px';
			style.zIndex = '100';
			style.webkitTransition = '-webkit-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
			style.mozTransition = '-moz-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
			style.msTransition = '-ms-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
			style.transition = 'transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
			style.webkitTransform = 'translate3d(0px, 0px, 0px) ';
			style.mozTransform = 'translate3d(0px, 0px, 0px) ';
			style.msTransform = 'translate3d(0px, 0px, 0px) ';
			style.transform = 'translate3d(0px, 0px, 0px) ';
			this.root.appendChild(this.clone);
			this.log('createClone');
		};

		/**
		 * Remove clone of draggable element
		 *
		 * @private
		 */
		this.removeClone = function() {
			if (this.element !== null && typeof (this.element) !== "undefined"){
				this.element.className = this.element.className.split(' ' + this.placeHolderClass).join('');
			}
			
			if (this.clone !== null) {
				this.clone.parentElement.removeChild(this.clone);
				// unset reference to DOM element of the clone, otherwise it will remain DOM fragment
				this.clone = null;
				this.log("removeClone");
			}
		};

		/**
		 * Translate clone of draggable element
		 *
		 * @private
		 */
		this.translateClone = function() {
			var deltaX,
				deltaY;

			deltaX = this.moveX - this.startX;
			deltaY = this.moveY - this.startY;
            if (this.clone && deltaX && deltaY) {
                this.clone.style.webkitTransform = 'translate3d(' + deltaX + 'px, ' + deltaY + 'px, 0px)';
                this.clone.style.mozTransform = 'translate3d(' + deltaX + 'px, ' + deltaY + 'px, 0px)';
                //IE9 contains only 2-D transform
                this.clone.style.msTransform = 'translate(' + deltaX + 'px, ' + deltaY + 'px)';
                this.clone.style.transform = 'translate3d(' + deltaX + 'px, ' + deltaY + 'px, 0px)';
                this.log('translateClone (' + deltaX + ', ' + deltaY + ')');
                //this.clone.style.opacity = '0.5'; // make floater transparent
            }
		};

		/* PUBLIC METHODS */

		/**
		 * Enable feature
		 *
		 * @public
		 */
		this.enable = function() {
			this.log('enable');
			//Touch Events
			this.root.addEventListener(this.touchStartEvent, this.startHandler, false);
			this.root.addEventListener(this.touchMoveEvent, this.moveHandler, true);
			this.root.addEventListener(this.touchEndEvent, this.endHandler, false);
			this.root.addEventListener(this.touchCancelEvent, this.endHandler, false);
			//Mouse Events
			this.root.addEventListener(this.mouseMoveEvent, this.moveHandler, true);
			this.root.addEventListener(this.mouseDownEvent, this.startHandler, false);
			this.root.addEventListener(this.mouseUpEvent, this.endHandler, false);
			//Additional Events
			this.root.addEventListener(this.contextMenuEvent, this.contextMenuHandler, false);
			this.root.addEventListener(this.clickEvent, this.clickHandler, true);
			this.wrapper.addEventListener(this.scrollEvent, this.scrollHandler, false);

			return this;
		};

		/**
		 * Disable feature
		 *
		 * @public
		 */
		this.disable = function() {
			this.log('disable');
			this.root.removeEventListener(this.touchStartEvent, this.startHandler, false);
			this.root.removeEventListener(this.touchMoveEvent, this.moveHandler, true);
			this.root.removeEventListener(this.touchEndEvent, this.endHandler, false);
			this.root.removeEventListener(this.mouseDownEvent, this.startHandler, false);
			this.root.removeEventListener(this.mouseMoveEvent, this.moveHandler, true);
			this.root.removeEventListener(this.mouseUpEvent, this.endHandler, false);
			this.root.removeEventListener(this.contextMenuEvent, this.contextMenuHandler, false);
			this.root.removeEventListener(this.clickEvent, this.clickHandler, true);
			this.root.removeEventListener(this.touchCancelEvent, this.endHandler, false);
			this.wrapper.removeEventListener(this.scrollEvent, this.scrollHandler, false);

			return this;
		};

		/*
		 * Initialize dynamic feature state
		 * and behaviour using configuration
		 */
		this.init(cfg);

		/**
		 * @public
		 * @returns {{x: moveX, y: moveY}}
		 */
		this.getMove = function() {
			return {
				x: this.moveX,
				y: this.moveY
			};
		};
	};
})();
}; // end of sap/ovp/ui/UIActions.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.AnnotationHelper') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */

(function () {
    "use strict";
    /*global dispatchEvent, document, jQuery, localStorage, sap */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ovp.cards.AnnotationHelper");
    jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

    

    sap.ovp.cards.AnnotationHelper = {};
    sap.ovp.cards.AnnotationHelper.formatFunctions = {
        count: 0
    };
    sap.ovp.cards.AnnotationHelper.NumberFormatFunctions = {};
    sap.ovp.cards.AnnotationHelper.DateFormatFunctions = {};
    sap.ovp.cards.AnnotationHelper.CurrencyFormatFunctions = {};

    sap.ovp.cards.AnnotationHelper.criticalityConstants = {
        StateValues: {
            None: "None",
            Negative: "Error",
            Critical: "Warning",
            Positive: "Success"
        },
        ColorValues: {
            None: "Neutral",
            Negative: "Error",
            Critical: "Critical",
            Positive: "Good"
        }
    };

    sap.ovp.cards.AnnotationHelper.formatterGeo = function (iContext, collection) {
        var longitude = collection.Longitude.Path;
        var latitude = collection.Latitude.Path;
        return "{path:'" + longitude + "'}; {path:'" + latitude + "'}" + ";0";
    };

    sap.ovp.cards.AnnotationHelper.analyticRegions = function (iContext, collection) {
        return "{path:'" + collection.CountryCode.Path + "'}";
    };

    sap.ovp.cards.AnnotationHelper.getLabelStateFromValue = function (value) {
        var labelState;
        switch (value) {
            case "Default":
                labelState = sap.ui.vbm.SemanticType.Default;
                break;
            case "Error":
                labelState = sap.ui.vbm.SemanticType.Error;
                break;
            case "Warning":
                labelState = sap.ui.vbm.SemanticType.Warning;
                break;
            case "Success":
                labelState = sap.ui.vbm.SemanticType.Success;
                break;
            default:
                labelState = sap.ui.vbm.SemanticType.None;
                break;
        }
        return labelState;
    };

    sap.ovp.cards.AnnotationHelper.getColorStateFromValue = function (value) {
        var ColorState;
        switch (value) {
            case "0":
                ColorState = "#5E696E";
                break;
            case "1":
                ColorState = "#BB0000";
                break;
            case "2":
                ColorState = "#E78C07";
                break;
            case "3":
                ColorState = "#2B7D2B";
                break;
            default:
                ColorState = "#5E696E";
                break;
        }
        return ColorState;
    };

    sap.ovp.cards.AnnotationHelper.criticalityType = function (iContext, collection) {
        var criticality = collection.Criticality.Path;
        return "{path:'" + criticality + "', formatter: 'sap.ovp.cards.AnnotationHelper.getCriticalityStateFromValue' }";
    };
    // This method converts Vocabulary compliant values
    // for EnumType CriticalityType into semantic values
    // which are required by the sap.ui.vbm.Spot.
    sap.ovp.cards.AnnotationHelper.getCriticalityStateFromValue = function (value) {
        var criticalityState;
        switch (value) {
            case "0":
                criticalityState = sap.ui.vbm.SemanticType.Default;
                break;
            case "1":
                criticalityState = sap.ui.vbm.SemanticType.Error;
                break;
            case "2":
                criticalityState = sap.ui.vbm.SemanticType.Warning;
                break;
            case "3":
                criticalityState = sap.ui.vbm.SemanticType.Success;
                break;
            default:
                criticalityState = sap.ui.vbm.SemanticType.None;
                break;
        }
        return criticalityState;
    };

    sap.ovp.cards.AnnotationHelper.labelText = function (iContext, collection) {
        var oModel = iContext.getSetting('ovpCardProperties');
        var showText = oModel.getProperty('/showLabelText');

        if (showText === "true") {
            var option = collection.Address[0];
            if (typeof option.country !== "undefined") {
                return "{path:'" + option.country.Path + "'}";
            } else if (typeof option.locality !== "undefined") {
                return "{path:'" + option.locality.Path + "'}";
            } else if (typeof option.street !== "undefined") {
                return "{path:'" + option.street.Path + "'}";
            } else if (typeof option.code !== "undefined") {
                return "{path:'" + option.code.Path + "'}";
            }
        } else {
            return null;
        }
    };

    function getCacheEntry(iContext, sKey) {
        if (iContext.getSetting) {
            var oCache = iContext.getSetting("_ovpCache");
            // temp fix
            if (oCache) {
                return oCache[sKey];
            }
        }
        return undefined;
    }

    function setCacheEntry(iContext, sKey, oValue) {
        if (iContext.getSetting) {
            var oCache = iContext.getSetting("_ovpCache");
            // temp fix
            if (oCache) {
                oCache[sKey] = oValue;
            }
        }
    }

    function setFormatFunctionAndGetFunctionName(func, sNamePrefix) {
        if (!sap.ovp.cards.AnnotationHelper.formatFunctions[sNamePrefix]) {
            sap.ovp.cards.AnnotationHelper.formatFunctions[sNamePrefix] = 0;
        }
        sap.ovp.cards.AnnotationHelper.formatFunctions[sNamePrefix]++;

        var sFuncName = sNamePrefix + sap.ovp.cards.AnnotationHelper.formatFunctions[sNamePrefix];
        sap.ovp.cards.AnnotationHelper.formatFunctions[sFuncName] = func;

        return "sap.ovp.cards.AnnotationHelper.formatFunctions." + sFuncName;
    }

    function criticality2state(criticality, oCriticalityConfigValues) {
        var sState;
        if (oCriticalityConfigValues) {
            sState = oCriticalityConfigValues.None;
            if (criticality && criticality.EnumMember) {
                var val = criticality.EnumMember;
                if (endsWith(val, 'Negative')) {
                    sState = oCriticalityConfigValues.Negative;
                } else if (endsWith(val, 'Critical')) {
                    sState = oCriticalityConfigValues.Critical;
                } else if (endsWith(val, 'Positive')) {
                    sState = oCriticalityConfigValues.Positive;
                }
            }
        }
        return sState;
    }

    function criticalityState2Value(sState) {
        if (sState == "Error") {
            sState = 1;
        } else if (sState == "Warning") {
            sState = 2;
        } else if (sState == "Success") {
            sState = 3;
        } else {
            sState = 0;
        }
        return sState;
    }

    function endsWith(sString, sSuffix) {
        return sString && sString.indexOf(sSuffix, sString.length - sSuffix.length) !== -1;
    }

    function calculateCriticalityState(value, sImproveDirection, deviationLow, deviationHigh, toleranceLow, toleranceHigh,
                                       oCriticalityConfigValues) {

        var oCriticality = {};
        oCriticality.EnumMember = "None";

        // number could be a zero number so check if it is not undefined
        if (value !== undefined) {
            value = Number(value);

            if (endsWith(sImproveDirection, "Minimize") || endsWith(sImproveDirection, "Minimizing")) {

                if ((toleranceHigh !== undefined && toleranceHigh !== null) && (deviationHigh != undefined && deviationHigh != null)) {
                    if (value <= toleranceHigh) {
                        oCriticality.EnumMember = "Positive";
                    } else if (value > deviationHigh) {
                        oCriticality.EnumMember = "Negative";
                    } else {
                        oCriticality.EnumMember = "Critical";
                    }
                }

            } else if (endsWith(sImproveDirection, "Maximize") || endsWith(sImproveDirection, "Maximizing")) {

                if ((toleranceLow !== undefined && toleranceLow !== null) && (deviationLow !== undefined && deviationLow !== null)) {
                    if (value >= toleranceLow) {
                        oCriticality.EnumMember = "Positive";
                    } else if (value < deviationLow) {
                        oCriticality.EnumMember = "Negative";
                    } else {
                        oCriticality.EnumMember = "Critical";
                    }
                }

            } else if (endsWith(sImproveDirection, "Target")) {

                if ((toleranceHigh !== undefined && toleranceHigh !== null) && (deviationHigh != undefined && deviationHigh != null) && (toleranceLow !== undefined && toleranceLow !== null) && (deviationLow !== undefined && deviationLow !== null)) {
                    if (value >= toleranceLow && value <= toleranceHigh) {
                        oCriticality.EnumMember = "Positive";
                    } else if (value < deviationLow || value > deviationHigh) {
                        oCriticality.EnumMember = "Negative";
                    } else {
                        oCriticality.EnumMember = "Critical";
                    }
                }
            }
        }

        return criticality2state(oCriticality, oCriticalityConfigValues);
    }

    /* Trend Direction for Header */
    function calculateTrendDirection(aggregateValue, referenceValue, downDifference, upDifference) {
        if (!aggregateValue || !referenceValue) {
            return;
        }

        aggregateValue = Number(aggregateValue);

        if (!upDifference && (aggregateValue - referenceValue >= 0)) {
            return "sap-icon://trend-up";
        }
        if (!downDifference && (aggregateValue - referenceValue <= 0)) {
            return "sap-icon://trend-down";
        }

        if (referenceValue && upDifference && (aggregateValue - referenceValue >= upDifference)) {
            return "sap-icon://trend-up";
        }
        if (referenceValue && downDifference && (aggregateValue - referenceValue <= downDifference)) {
            return "sap-icon://trend-down";
        }
    }

    /**
     * This function returns the dataField annotations in sorted order
     * we are excluding the dataFields with IconUrl property
     **/
    function getSortedDataFields(iContext, aCollection) {
        var sCacheKey = iContext.getPath() + "-DataFields-Sorted";
        var aSortedFields = getCacheEntry(iContext, sCacheKey);
        if (!aSortedFields) {
            var aDataPoints = getSortedDataPoints(iContext, aCollection);
            var aDataPointsValues = aDataPoints.map(function (oDataPoint) {
                return oDataPoint.Value.Path;
            });
            aDataPointsValues = aDataPointsValues.filter(function (element) {
                return !!element;
            });
            aSortedFields = aCollection.filter(function (item) {
                if (item.RecordType === "com.sap.vocabularies.UI.v1.DataField" && aDataPointsValues.indexOf(item.Value.Path) === -1 && !item.IconUrl) {
                    return true;
                }
                return false;
            });
            aSortedFields = sortCollectionByImportance(aSortedFields);
            setCacheEntry(iContext, sCacheKey, aSortedFields);
        }
        return aSortedFields;
    }

    function getSortedDataPoints(iContext, aCollection) {
        var sCacheKey = iContext.getPath() + "-DataPoints-Sorted";
        var aSortedFields = getCacheEntry(iContext, sCacheKey);
        if (!aSortedFields) {
            aSortedFields = aCollection.filter(isDataFieldForAnnotation);
            aSortedFields = sortCollectionByImportance(aSortedFields);
            var sEntityTypePath;
            for (var i = 0; i < aSortedFields.length; i++) {
                sEntityTypePath = iContext.getPath().substr(0, iContext.getPath().lastIndexOf("/") + 1);
                aSortedFields[i] = iContext.getModel().getProperty(getTargetPathForDataFieldForAnnotation(sEntityTypePath, aSortedFields[i]));
                sEntityTypePath = "";
            }
            setCacheEntry(iContext, sCacheKey, aSortedFields);
        }
        return aSortedFields;
    }

    function isDataFieldForAnnotation(oItem) {
        if (oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" &&
            oItem.Target.AnnotationPath.match(/@com.sap.vocabularies.UI.v1.DataPoint.*/)) {
            return true;
        }
        return false;
    }

    function getTargetPathForDataFieldForAnnotation(sEntityTypePath, oDataFieldForAnnotation) {
        if (sEntityTypePath && !endsWith(sEntityTypePath, '/')) {
            sEntityTypePath += '/';
        }
        return sEntityTypePath + oDataFieldForAnnotation.Target.AnnotationPath.slice(1);
    }

    function getImportance(oDataField) {
        var sImportance, iImportance;
        if (oDataField["com.sap.vocabularies.UI.v1.Importance"]) {
            sImportance = oDataField["com.sap.vocabularies.UI.v1.Importance"].EnumMember;
            switch (sImportance) {
                case "com.sap.vocabularies.UI.v1.ImportanceType/High":
                    iImportance = 1;
                    break;
                case "com.sap.vocabularies.UI.v1.ImportanceType/Medium":
                    iImportance = 2;
                    break;
                case "com.sap.vocabularies.UI.v1.ImportanceType/Low":
                    iImportance = 3;
                    break;
            }
        } else {
            iImportance = 4;
        }
        return iImportance;
    }

    /**
     * Sorting the collection by importance. Using merge sort as the Javascript sort implementation behaves unexpectedly
     * for same elements - it is a known issue
     * @param aCollection
     * @returns [] - SortedArray
     */
    function sortCollectionByImportance(aCollection) {
        if (aCollection.length < 2) {
            return aCollection;
        }

        var middle = parseInt(aCollection.length / 2, 10);
        var left = aCollection.slice(0, middle);
        var right = aCollection.slice(middle, aCollection.length);

        return merge(sortCollectionByImportance(left), sortCollectionByImportance(right));
    }

    function merge(left, right) {
        var aSortedArray = [];
        while (left.length && right.length) {
            var aImportance = getImportance(left[0]),
                bImportance = getImportance(right[0]);
            if (aImportance <= bImportance) {
                aSortedArray.push(left.shift());
            } else {
                aSortedArray.push(right.shift());
            }
        }
        while (left.length) {
            aSortedArray.push(left.shift());
        }
        while (right.length) {
            aSortedArray.push(right.shift());
        }

        return aSortedArray;
    }

    function formatDataField(iContext, aCollection, index) {
        var item = getSortedDataFields(iContext, aCollection)[index];
        if (item) {
            return formatField(iContext, item);
        }
        return "";
    }

    function getDataFieldName(iContext, aCollection, index) {
        var item = getSortedDataFields(iContext, aCollection)[index];

        if (item) {
            return item.Label.String;
        }
        return "";
    }

    function getDataPointName(iContext, aCollection, index) {
        var item = getSortedDataPoints(iContext, aCollection)[index];

        if (item && item.Title) {
            return item.Title.String;
        }
        return "";
    }

    function formatDataPoint(iContext, aCollection, index) {
        var item = getSortedDataPoints(iContext, aCollection)[index];
        if (!item) {
            return "";
        }

        var oModel = iContext.getSetting('ovpCardProperties');
        var oEntityType = oModel.getProperty("/entityType");
        var oMetaModel = oModel.getProperty("/metaModel");

        return _formatDataPoint(iContext, item, oEntityType, oMetaModel);
    }

    function criticalityConditionCheck(iContext, aCollection, index) {
        var item = getSortedDataPoints(iContext, aCollection)[index];
        if (item && item.Criticality) {
            return true;
        }
    }

    function getCriticality(iContext, aCollection, index) {
        var item = getSortedDataPoints(iContext, aCollection)[index];
        var criticalityStatus = item.Criticality.Path;
        return "{path:'" + criticalityStatus + "'}";
    }

    function _formatDataPoint(iContext, oItem, oEntityType, oMetaModel) {

        if (!oItem || !oItem.Value) {
            return "";
        }

        var oModel = iContext.getSetting('ovpCardProperties');
        var bIgnoreSapText = false;
        if (oModel) {
            var bExtractedIgnoreSapText = oModel.getProperty("/ignoreSapText");
            bIgnoreSapText = bExtractedIgnoreSapText == undefined ? bIgnoreSapText : bExtractedIgnoreSapText;
        }
        var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oItem.Value.Path);

        //Support sap:aggregation-role=measure configuration
        var bMeasuresType = false;
        if (bIgnoreSapText == true) { //as part of supporting V4 annotation
            if (oEntityTypeProperty && (oEntityTypeProperty["com.sap.vocabularies.Analytics.v1.Measure"] || oEntityTypeProperty["sap:aggregation-role"] == "measure")) {
                bMeasuresType = true;
            }
        }

        //Support sap:text attribute
        if (!bMeasuresType && oEntityTypeProperty) {
            var txtValue;
            if (oEntityTypeProperty["com.sap.vocabularies.Common.v1.Text"]) {  //as part of supporting V4 annotation
                txtValue = oEntityTypeProperty["com.sap.vocabularies.Common.v1.Text"].String ? oEntityTypeProperty["com.sap.vocabularies.Common.v1.Text"].String : oEntityTypeProperty["com.sap.vocabularies.Common.v1.Text"].Path;
            } else if (oEntityTypeProperty["sap:text"]) {
                txtValue = oEntityTypeProperty["sap:text"];
            }
            if (txtValue) {
                oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, txtValue);
                oItem = {
                    Value: {
                        Path: oEntityTypeProperty.name
                    }
                };
            }
        }
        return formatField(iContext, oItem);
    }

    function formatField(iContext, item, bDontIncludeUOM, bIncludeOnlyUOM) {

        if (item.Value.Apply) {
            return sap.ui.model.odata.AnnotationHelper.format(iContext, item.Value);
        }

        var oModel = iContext.getSetting('ovpCardProperties');
        var oEntityType = oModel.getProperty("/entityType");
        var oMetaModel = oModel.getProperty("/metaModel");

        return _formatField(iContext, item, oEntityType, oMetaModel, bDontIncludeUOM, bIncludeOnlyUOM);
    }

    function _formatField(iContext, oItem, oEntityType, oMetaModel, bDontIncludeUOM, bIncludeOnlyUOM, bUseSimplePath) {

        if (oItem.Value.Apply) {
            return sap.ui.model.odata.AnnotationHelper.format(iContext, oItem.Value);
        }

        var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oItem.Value.Path),
            result = "",
            functionName;

        if (!bIncludeOnlyUOM) {

            //Support association
            if (oItem.Value.Path.split("/").length > 1) {
                oEntityTypeProperty = getNavigationSuffix(oMetaModel, oEntityType, oItem.Value.Path);
            }

            if (!oEntityTypeProperty) {
                return "";
            }

            //Item has ValueFormat annotation
            if (oEntityTypeProperty["type"] === 'Edm.DateTime' || oEntityTypeProperty["type"] === 'Edm.DateTimeOffset') {
                // Getting Parameter value from card properties
                var showDateInRelativeFormat = iContext.getSetting('ovpCardProperties').oData.showDateInRelativeFormat;
                functionName = getDateFormatFunctionName("dateFormatFunction", showDateInRelativeFormat);
                result = generatePathForField([oItem.Value.Path ? oItem.Value.Path : oEntityTypeProperty.name], functionName);
            } else if ((oItem.ValueFormat && oItem.ValueFormat.NumberOfFractionalDigits) || oEntityTypeProperty["scale"]) {

                //By default no decimals would be shown
                //If user specifies in Annotations then he can set 1 or 2 decimal places.
                // If he provides a value beyond 2 then also it would be considered as 2.

                var iScale = (oItem.ValueFormat && oItem.ValueFormat.NumberOfFractionalDigits) ? oItem.ValueFormat.NumberOfFractionalDigits.Int : 0, sUnitPath;
                if (oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"]) { //as part of supporting V4 annotation
                    sUnitPath = oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"].Path ? oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"].Path : oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"].String;
                } else if (oEntityTypeProperty["Org.OData.Measures.V1.Unit"]) {
                    sUnitPath = oEntityTypeProperty["Org.OData.Measures.V1.Unit"].Path ? oEntityTypeProperty["Org.OData.Measures.V1.Unit"].Path : oEntityTypeProperty["Org.OData.Measures.V1.Unit"].String;
                } else if (oEntityTypeProperty["sap:unit"]) {
                    sUnitPath = oEntityTypeProperty["sap:unit"];
                }
                var oUnitProperty = sUnitPath ? oMetaModel.getODataProperty(oEntityType, sUnitPath) : null,
                    aParts = [oItem.Value.Path ? oItem.Value.Path : oEntityTypeProperty.name];

                //Default value for currency and number scale if scale is more than 2
                if (iScale > 2) {
                    iScale = 2;
                }
                // check if currency is applicable and format the number based on currency or number
                if (oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"]) {
                    var oCurrency = oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"];
                    if (oCurrency.Path) {
                        functionName = getCurrencyFormatFunctionName(iScale);
                        aParts.push(oCurrency.Path);
                    } else if (oCurrency.String) {
                        functionName = getCurrencyFormatFunctionName(iScale, oCurrency.String);
                    }  //as part of supporting V4 annotation
                } else if (oUnitProperty && (oUnitProperty["Org.OData.Measures.V1.ISOCurrency"] || oUnitProperty["sap:semantics"] === "currency-code")) {
                    functionName = getCurrencyFormatFunctionName(iScale);
                    aParts.push(sUnitPath);
                } else {
                    //If there is no value format annotation, we will use the metadata scale property
                    functionName = getNumberFormatFunctionName(iScale);
                }
                result = generatePathForField(aParts, functionName);

            } else {
                if (bUseSimplePath) {
                    result = sap.ui.model.odata.AnnotationHelper.simplePath(iContext, oItem.Value);
                } else {
                    result = sap.ui.model.odata.AnnotationHelper.format(iContext, oItem.Value);
                }
            }
            //Add unit using path or string
            if (oEntityTypeProperty["Org.OData.Measures.V1.Unit"]) {
                var oUnit = oEntityTypeProperty["Org.OData.Measures.V1.Unit"];
                if (oUnit.Path) {
                    result += (" " + generatePathForField([oUnit.Path]));
                } else if (oUnit.String) {
                    result += (" " + oUnit.String);
                }
            }
        }

        if (!bDontIncludeUOM) {
            //Add currency using path or string
            if (oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"]) {
                var oCurrency = oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"];
                if (oCurrency.Path) {
                    result += (" " + generatePathForField([oCurrency.Path]));
                } else if (oCurrency.String) {
                    result += (" " + oCurrency.String);
                }
            }

        }

        if (result[0] === " ") {
            result = result.substring(1);
        }
        return result;
    }


    /**
     * Note:if passing parts, then formatter is mandatory
     * @param aParts
     * @param sFormatterName
     * @returns {string}
     */
    function generatePathForField(aParts, sFormatterName) {
        var sPath = "", iLength = aParts.length;
        if (iLength > 1) {
            sPath = "{parts:[";
            for (var i = 0; i < iLength; i++) {
                sPath += ("{path: '" + aParts[i] + "'}" + ((i === iLength - 1) ? "]" : ", "));
            }
        } else {
            sPath = "{path: '" + aParts[0] + "'";
        }
        sPath += (sFormatterName ? (", formatter: '" + sFormatterName + "'") : "") + "}";
        return sPath;
    }

    function getNumberFormatFunctionName(numberOfFractionalDigits) {
        var functionName = "formatNumberCalculation" + numberOfFractionalDigits;
        if (!sap.ovp.cards.AnnotationHelper.NumberFormatFunctions[functionName]) {
            sap.ovp.cards.AnnotationHelper.NumberFormatFunctions[functionName] = generateNumberFormatFunc(Number(numberOfFractionalDigits));
        }
        return "sap.ovp.cards.AnnotationHelper.NumberFormatFunctions." + functionName;
    }

    function generateNumberFormatFunc(numOfFragmentDigit) {
        return function (value) {
            var formatNumber = sap.ui.core.format.NumberFormat.getFloatInstance({
                style: 'short',
                showMeasure: false,
                minFractionDigits: numOfFragmentDigit,
                maxFractionDigits: numOfFragmentDigit
            });
            return formatNumber.format(Number(value));
        };
    }

    /**
     * Returns the date formatter function name
     * @param functionName
     * @param showDateInRelativeFormat
     * @returns {string}
     */
    function getDateFormatFunctionName(functionName, showDateInRelativeFormat) {
        // generate date formatter function is not available
        // By default or if showDateInRelativeFormat is true relative Date Format is selected
        var dateFormat = {
            'relative': true,
            'relativeScale': 'auto'
        };
        // Otherwise if showDateInRelativeFormat is false then medium Date format is used
        if (showDateInRelativeFormat !== undefined && !showDateInRelativeFormat) {
            dateFormat = {
                'style': 'medium'
            };
        }
        if (!sap.ovp.cards.AnnotationHelper.DateFormatFunctions[functionName]) {
            sap.ovp.cards.AnnotationHelper.DateFormatFunctions[functionName] = function (value) {
                var oDateFormatter = sap.ui.core.format.DateFormat.getInstance(dateFormat);
                if (!value) {
                    value = "";
                    return value;
                }
                return oDateFormatter.format(new Date(value));
            };
        }
        return "sap.ovp.cards.AnnotationHelper.DateFormatFunctions." + functionName;
    }

    /**
     * Returns the currency formatter function based on the scale and currency
     * @param iNumberOfFractionalDigits
     * @param sCurrency - optional parameter
     * @returns {string}
     */
    function getCurrencyFormatFunctionName(iNumberOfFractionalDigits, sCurrency) {
        var functionName = "formatCurrencyCalculation" + (sCurrency ? sCurrency + iNumberOfFractionalDigits : iNumberOfFractionalDigits);
        if (!sap.ovp.cards.AnnotationHelper.CurrencyFormatFunctions[functionName]) {
            sap.ovp.cards.AnnotationHelper.CurrencyFormatFunctions[functionName] = generateCurrencyFormatFunc(iNumberOfFractionalDigits, sCurrency);
        }
        return "sap.ovp.cards.AnnotationHelper.CurrencyFormatFunctions." + functionName;
    }

    /**
     * Generates the currency formatter function based on the currency and scale
     * @param iNumOfFragmentDigit
     * @param sCurrency
     * @returns {Function}
     */
    function generateCurrencyFormatFunc(iNumOfFragmentDigit, sCurrency) {
        return function (value, currency) {
            var sFormattedValue = "";
            var oCurrencyFormatter = sap.ui.core.format.NumberFormat.getCurrencyInstance({
                style: 'short',
                showMeasure: false,
                minFractionDigits: iNumOfFragmentDigit,
                maxFractionDigits: iNumOfFragmentDigit
            });
            if (currency) {
                sFormattedValue = oCurrencyFormatter.format(value, currency);
            } else {
                sFormattedValue = sCurrency ? oCurrencyFormatter.format(value, sCurrency) : oCurrencyFormatter.format(value);
            }
            return sFormattedValue;
        };
    }

    function getNavigationSuffix(oMetaModel, oEntityType, sProperty) {
        var aParts = sProperty.split("/");

        if (aParts.length > 1) {
            for (var i = 0; i < (aParts.length - 1); i++) {
                var oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, aParts[i]);
                if (oAssociationEnd) {
                    oEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);
                }
            }

            return oMetaModel.getODataProperty(oEntityType, aParts[aParts.length - 1]);
        }
    }

    function formatDataPointState(iContext, aCollection, index) {
        var aDataPoints = getSortedDataPoints(iContext, aCollection);
        var sState = "None",
            oCriticalityConfigValues = sap.ovp.cards.AnnotationHelper.criticalityConstants.StateValues;
        if (aDataPoints.length > index) {
            var item = aDataPoints[index];
            if (item && item.Criticality) {
                sState = buildExpressionForProgressIndicatorCriticality(iContext, item, oCriticalityConfigValues);
            } else {
                sState = formatDataPointToValue(iContext, item, oCriticalityConfigValues);
            }
        }
        return sState;
    }

    function hasCriticalityAnnotation(iContext, aCollection, index) {
        var aDataPoints = getSortedDataPoints(iContext, aCollection);
        // aDataPoints is not Undefined and aDataPoints.length is not 0
        if (aDataPoints && aDataPoints.length) {
            var item = aDataPoints[0];
            if (item && (item.Criticality || item.CriticalityCalculation)) {
                return true;
            }
        }
        return false;
    }

    sap.ovp.cards.AnnotationHelper.colorPaletteForComparisonMicroChart = function (iContext, aCollection, index) {
        if (hasCriticalityAnnotation(iContext, aCollection, index)) {
            return '';
        }
        //sapUiChartPaletteQualitativeHue1
        return '#5cbae6';
    };

    function formatDataPointColor(iContext, aCollection, index) {
        var aDataPoints = getSortedDataPoints(iContext, aCollection),
            sState = "None",
            oCriticalityConfigValues = sap.ovp.cards.AnnotationHelper.criticalityConstants.ColorValues;
        if (aDataPoints.length > index) {
            var item = aDataPoints[index];
            if (item && item.Criticality) {
                sState = buildExpressionForProgressIndicatorCriticality(iContext, item, oCriticalityConfigValues);
            } else {
                sState = formatDataPointToValue(iContext, item, oCriticalityConfigValues);
            }

        }
        return sState;
    }

    function buildExpressionForProgressIndicatorCriticality(oInterface,
                                                            dataPoint, oCriticalityConfigValues) {
        var sFormatCriticalityExpression = sap.ui.core.ValueState.None;
        var sExpressionTemplate;
        var oCriticalityProperty = dataPoint.Criticality;

        if (oCriticalityProperty) {
            sExpressionTemplate = "'{'= ({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Negative'') || ({0} === ''1'') || ({0} === 1) ? ''"
            + oCriticalityConfigValues.Negative
            + "'' : "
            + "({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Critical'') || ({0} === ''2'') || ({0} === 2) ? ''"
            + oCriticalityConfigValues.Critical
            + "'' : "
            + "({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Positive'') || ({0} === ''3'') || ({0} === 3) ? ''"
            + oCriticalityConfigValues.Positive
            + "'' : "
            + "''"
            + oCriticalityConfigValues.None + "'' '}'";
            if (oCriticalityProperty.Path) {
                var sCriticalitySimplePath = '$'
                    + sap.ui.model.odata.AnnotationHelper.simplePath(
                        oInterface, oCriticalityProperty);
                sFormatCriticalityExpression = jQuery.sap.formatMessage(
                    sExpressionTemplate, sCriticalitySimplePath);
            } else if (oCriticalityProperty.EnumMember) {
                var sCriticality = "'" + oCriticalityProperty.EnumMember + "'";
                sFormatCriticalityExpression = jQuery.sap.formatMessage(
                    sExpressionTemplate, sCriticality);
            } else {
                jQuery.sap.log
                    .warning("Case not supported, returning the default sap.ui.core.ValueState.None");
            }
        } else {
            // Any other cases are not valid, the default value of 'None' will
            // be returned
            jQuery.sap.log
                .warning("Case not supported, returning the default sap.ui.core.ValueState.None");
        }

        return sFormatCriticalityExpression;
    }

    function formatDataPointStateForSmartField(iContext, aCollection, index) {
        var aDataPoints = getSortedDataPoints(iContext, aCollection);
        var sState = "None";
        if (aDataPoints.length > index) {
            var item = aDataPoints[index];
            if (item && item.Criticality && item.Criticality.Path) {
                sState = getCriticality(iContext, aCollection, index);
            } else {
                sState = formatDataPointToValue(iContext, item, sap.ovp.cards.AnnotationHelper.criticalityConstants.StateValues);
                sState = criticalityState2Value(sState);
            }
        }
        return sState;
    }


    function formatDataPointToValue(iContext, oDataPoint, oCriticalityConfigValues) {
        var sState = oCriticalityConfigValues.None;
        if (oDataPoint.Criticality) {
            sState = criticality2state(oDataPoint.Criticality, oCriticalityConfigValues);
        } else if (oDataPoint.CriticalityCalculation && oDataPoint.Value && oDataPoint.Value && oDataPoint.Value.Path) {
            sState = formThePathForCriticalityStateCalculation(iContext, oDataPoint, oCriticalityConfigValues);
        }

        return sState;
    }

    function formThePathForCriticalityStateCalculation(iContext, oDataPoint, oCriticalityConfigValues) {

        var value = getPathOrPrimitiveValue(oDataPoint.Value);
        var sImprovementDirection = oDataPoint.CriticalityCalculation.ImprovementDirection.EnumMember;

        var deviationLow = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeLowValue);
        var deviationHigh = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeHighValue);
        var toleranceLow = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeLowValue);
        var toleranceHigh = getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeHighValue);

        var bIsDeviationLowBinding = isBindingValue(deviationLow);
        var bIsDeviationHighBinding = isBindingValue(deviationHigh);
        var bIsToleranceLowBinding = isBindingValue(toleranceLow);
        var bIsToleranceHighBinding = isBindingValue(toleranceHigh);

        var sParts = "parts: [" + value;
        sParts += bIsDeviationLowBinding ? "," + deviationLow : "";
        sParts += bIsDeviationHighBinding ? "," + deviationHigh : "";
        sParts += bIsToleranceLowBinding ? "," + toleranceLow : "";
        sParts += bIsToleranceHighBinding ? "," + toleranceHigh : "";
        sParts += "]";

        var formatFunc = function () {
            var index = 1;
            return calculateCriticalityState(
                arguments[0],
                sImprovementDirection,
                bIsDeviationLowBinding ? arguments[index++] : deviationLow,
                bIsDeviationHighBinding ? arguments[index++] : deviationHigh,
                bIsToleranceLowBinding ? arguments[index++] : toleranceLow,
                bIsToleranceHighBinding ? arguments[index++] : toleranceHigh,
                oCriticalityConfigValues
            );
        };

        var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatCriticalityCalculation");
        return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
    }

    function isBindingValue(value) {
        return (typeof value === "string") && value.charAt(0) === "{";
    }

    function getNavigationPrefix(oMetaModel, oEntityType, sProperty) {
        var sExpand = "";
        var aParts = sProperty.split("/");

        if (aParts.length > 1) {
            for (var i = 0; i < (aParts.length - 1); i++) {
                var oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, aParts[i]);
                if (oAssociationEnd) {
                    oEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);
                    if (sExpand) {
                        sExpand = sExpand + "/";
                    }
                    sExpand = sExpand + aParts[i];
                } else {
                    return sExpand;
                }
            }
        }

        return sExpand;
    }

    sap.ovp.cards.AnnotationHelper.formatField = function (iContext, oItem) {
        return formatField(iContext, oItem);
    };

    /*
     * This formatter method parses the List-Card List's items aggregation path in the Model.
     * The returned path may contain also sorter definition (for the List) sorting is defined
     * appropriately via respected Annotations.
     *
     * @param iContext
     * @param itemsPath
     * @returns List-Card List's items aggregation path in the Model
     */
    sap.ovp.cards.AnnotationHelper.formatItems = function (iContext, oEntitySet) {
        var oModel = iContext.getSetting('ovpCardProperties');

        var bAddODataSelect = oModel.getProperty("/addODataSelect");
        var oMetaModel = oModel.getProperty("/metaModel");
        var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
        var oSelectionVariant = oEntityType[oModel.getProperty('/selectionAnnotationPath')];
        var oPresentationVariant = oEntityType[oModel.getProperty('/presentationAnnotationPath')];
        var sEntitySetPath = "/" + oEntitySet.name;
        var aAnnotationsPath = Array.prototype.slice.call(arguments, 2);

        //check if entity set needs parameters
        // if selection-annotations path is supplied - we need to resolve it in order to resolve the full entity-set path
        if (oSelectionVariant) {
            if (oSelectionVariant && oSelectionVariant.Parameters && oSelectionVariant.Parameters.length > 0) {
                // in case we have UI.SelectionVariant annotation defined on the entityType including Parameters - we need to resolve the entity-set path to include it
                sEntitySetPath = sap.ovp.cards.AnnotationHelper.resolveParameterizedEntitySet(iContext.getSetting('dataModel'), oEntitySet,
                    oSelectionVariant);
            }
        }

        if (oModel.getProperty("/cardLayout") && oModel.getProperty("/cardLayout/noOfItems")) {
            var result = "{path: '" + sEntitySetPath + "', length: " + +(oModel.getProperty("/cardLayout/noOfItems"));
        } else {
            var result = "{path: '" + sEntitySetPath + "', length: " + getItemsLength(oModel);
        }

        //prepare the select fields in case flag is on
        var aSelectFields = [];
        if (bAddODataSelect) {
            aSelectFields = getSelectFields(iContext, oMetaModel, oEntityType, aAnnotationsPath);
        }
        //prepare the expand list if navigation properties are used
        var aExpand = getExpandList(oMetaModel, oEntityType, aAnnotationsPath);

        //add select and expand parameters to the binding info string if needed
        if (aSelectFields.length > 0 || aExpand.length > 0) {
            result = result + ", parameters: {";
            if (aSelectFields.length > 0) {
                result = result + "select: '" + aSelectFields.join(',') + "'";
            }

            if (aExpand.length > 0) {
                if (aSelectFields.length > 0) {
                    result = result + ", ";
                }
                result = result + "expand: '" + aExpand.join(',') + "'";
            }
            result = result + "}";
        }

        //apply sorters information
        var aSorters = getSorters(oModel, oPresentationVariant);
        if (aSorters.length > 0) {
            result = result + ", sorter:" + JSON.stringify(aSorters);
        }

        //apply filters information
        var aFilters = getFilters(oModel, oSelectionVariant);
        if (aFilters.length > 0) {
            result = result + ", filters:" + JSON.stringify(aFilters);
        }
        result = result + "}";

        // returning the parsed path for the Card's items-aggregation binding
        return result;
    };

    /**
     * returns an array of navigation properties prefixes to be used in an odata $expand parameter
     *
     * @param oMetaModel - metamodel to get the annotations to query
     * @param oEntityType - the relevant entityType
     * @param aAnnotationsPath - an array of annotation path to check
     * @returns {Array} of navigation properties prefixes to be used in an odata $expand parameter
     */
    function getExpandList(oMetaModel, oEntityType, aAnnotationsPath) {
        var aExpand = [];
        var sAnnotationPath, oBindingContext, aColl, sExpand;

        //loop over the annotation paths
        for (var i = 0; i < aAnnotationsPath.length; i++) {
            if (!aAnnotationsPath[i]) {
                continue;
            }
            sAnnotationPath = oEntityType.$path + "/" + aAnnotationsPath[i];
            oBindingContext = oMetaModel.createBindingContext(sAnnotationPath);
            aColl = oBindingContext.getObject();
            //if the annotationPath does not exists there is no BindingContext
            aColl = aColl ? aColl : [];
            for (var j = 0; j < aColl.length; j++) {
                if (aColl[j].Value && aColl[j].Value.Path) {
                    sExpand = getNavigationPrefix(oMetaModel, oEntityType, aColl[j].Value.Path);
                    if (sExpand && aExpand.indexOf(sExpand) === -1) {
                        aExpand.push(sExpand);
                    }
                }
            }
        }
        return aExpand;
    }

    /**
     * returns an array of properties paths to be used in an odata $select parameter
     *
     * @param oMetaModel - metamodel to get the annotations to query
     * @param oEntityType - the relevant entityType
     * @param aAnnotationsPath - an array of annotation path to check
     * @returns {Array} of properties paths to be used in an odata $select parameter
     */
    function getSelectFields(iContext, oMetaModel, oEntityType, aAnnotationsPath) {

        var aSelectFields = [];
        var sAnnotationPath, oBindingContext, aColl;

        //loop over the annotation paths
        for (var i = 0; i < aAnnotationsPath.length; i++) {
            if (!aAnnotationsPath[i]) {
                continue;
            }

            sAnnotationPath = oEntityType.$path + "/" + aAnnotationsPath[i];
            oBindingContext = oMetaModel.createBindingContext(sAnnotationPath);

            var oContext = {};

            // This is currently true for stack cards, we have sent a dummy iContext which we need to enrich in order to format fields correctly
            if (iContext && iContext.bDummyContext) {
                jQuery.extend(oContext, iContext, oBindingContext, true);
            } else {
                oContext = iContext;
            }

            aColl = oBindingContext.getObject();

            //if the annotationPath does not exists there is no BindingContext
            if (!aColl) {
                aColl = [];
            } else if (jQuery.isPlainObject(aColl)) {
                // For the case of FieldGroups
                if (aColl.Data) {
                    aColl = aColl.Data;
                } else {
                    aColl = [];
                }
            }

            var oItem;
            var aItemValue;
            var sFormattedField;
            var sRecordType;
            for (var j = 0; j < aColl.length; j++) {

                aItemValue = [];
                oItem = aColl[j];
                sFormattedField = "";

                sRecordType = oItem.RecordType;

                if (sRecordType === "com.sap.vocabularies.UI.v1.DataField") {
                    // in case of a DataField we format the field to get biding string ; we use simple paths as we simply need select column names
                    sFormattedField = _formatField(oContext, oItem, oEntityType, oMetaModel, undefined, undefined, true);

                } else if (sRecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {

                    // in case of DataFieldForAnnotation we resolve the DataPoint target path of the DataField and format the field to get biding string
                    var sTargetPath = getTargetPathForDataFieldForAnnotation(oEntityType.$path, oItem);
                    sFormattedField = _formatDataPoint(oContext, oMetaModel.getProperty(sTargetPath), oEntityType, oMetaModel);

                } else if (sRecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" && oItem.Url) {

                    // format the URL ONLY IN CASE NO UrlRef member resides under it
                    var sFormattedUrl;
                    if (!oItem.Url.UrlRef) {
                        sFormattedUrl = sap.ui.model.odata.AnnotationHelper.format(oContext, oItem.Url);
                    }

                    // meaning binding which needs to be evaluated at runtime
                    if (sFormattedUrl && sFormattedUrl.substring(0, 2) === "{=") {
                        sFormattedField = sFormattedUrl;
                    }
                }

                // if we have found a relevant binding-info-string this iteration then parse it to get binded properties
                if (sFormattedField) {
                    aItemValue = getPropertiesFromBindingString(sFormattedField);
                }

                if (aItemValue && aItemValue.length > 0) {
                    // for each property found we check if has sap:unit and sap:text
                    var sItemValue;
                    for (var k = 0; k < aItemValue.length; k++) {
                        sItemValue = aItemValue[k];

                        // if this property is found for the first time - look for its unit and text properties as well
                        if (!aSelectFields[sItemValue]) {

                            aSelectFields[sItemValue] = true;

                            // checking if we need to add also the sap:unit property of the field's value
                            var sUnitPropName = sap.ovp.cards.CommonUtils.getUnitColumn(sItemValue, oEntityType);
                            if (sUnitPropName && sUnitPropName !== sItemValue) {
                                aSelectFields[sUnitPropName] = true;
                            }

                            // checking if we need to add also the sap:text property of the field's value
                            var sTextPropName = getTextPropertyForEntityProperty(oMetaModel, oEntityType, sItemValue);
                            if (sTextPropName && sTextPropName !== sItemValue) {
                                aSelectFields[sTextPropName] = true;
                            }
                        }
                    }
                }
            }
        }
        // return all relevant property names
        return Object.keys(aSelectFields);
    }

    function getPropertiesFromBindingString(sBinding) {

        /**
         * BCP: 1680241227
         * Regex expressions were not handling properties that included the '_' character.
         * With '\_' as part of [a-zA-Z0-9], they should be able to handle.
         */
        var regexBindingEvaluation = /\${([a-zA-Z0-9\_|\/]*)/g;
        var regexBindingNoPath = /[^[{]*[a-zA-Z0-9\_]/g;
        var regexBindingPath = /path *\: *\'([a-zA-Z0-9\_]+)*\'/g;

        var regex, index, matches = [];

        //in case the path consists of parts - replace it with empty string so that
        //'parts' does not appear as a property
        if (sBinding.indexOf("{parts:[") !== -1) {
            sBinding = sBinding.replace("{parts:[", "");
        }

        if (sBinding.substring(0, 2) === "{=") {
            /*
             meaning binding string looks like "{= <rest of the binding string>}"
             which is a binding which needs to be evaluated using some supported function
             properties appear as ${propertyName} inside the string
             */
            regex = regexBindingEvaluation;

            /* index is 1 as each match found by this regular expression (by invoking regex.exec(string) below) */
            /* is an array of 2 items, for example ["${Address}", "Address"] so we need the 2nd result each match found */
            index = 1;

        } else if (sBinding.indexOf("path") !== -1) {

            /* In a scenario where binding contains string like "{propertyName} {path:'propertyName'}" */
            /* Here we get the properties without path and add it to array matches*/
            var matchWithNoPath = regexBindingNoPath.exec(sBinding);
            while (matchWithNoPath) {
                if (matchWithNoPath[0].indexOf("path") === -1) {
                    matches.push(matchWithNoPath[0]);
                }
                matchWithNoPath = regexBindingNoPath.exec(sBinding);
            }

            /* meaning binding contains string like "{path:'propertyName'}" */
            regex = regexBindingPath;

            /* index is 1 as each match found by this regular expression (by invoking regex.exec(string) below) */
            /* is an array of 2 items, for example ["{path: 'Address'}", "Address"] so we need the 2nd result each match found */
            index = 1;

        } else {
            /* meaning binding contains string like "{'propertyName'}" */
            regex = regexBindingNoPath;

            /* index is 0 as each match found by this regular expression (by invoking regex.exec(string) below) */
            /* is an array of one item, for example ["Address"] so we need the 1st result each match found */
            index = 0;
        }

        var match = regex.exec(sBinding);
        while (match) {
            if (match[index]) {
                matches.push(match[index]);
            }
            match = regex.exec(sBinding);
        }
        return matches;
    }

    /**
     * return the sorters that need to be applyed on an aggregation
     *
     * @param ovpCardProperties - card properties model which might contains sort configurations
     * @param oPresentationVariant - optional presentation variant annotation with SortOrder configuration
     * @returns {Array} of model sorters
     */
    function getSorters(ovpCardProperties, oPresentationVariant) {
        var aSorters = [];
        var oSorter, bDescending;

        //get the configured sorter if exist and append them to the sorters array
        var sPropertyPath = ovpCardProperties.getProperty("/sortBy");
        if (sPropertyPath) {
            // If sorting is enabled by card configuration
            var sSortOrder = ovpCardProperties.getProperty('/sortOrder');
            if (sSortOrder && sSortOrder.toLowerCase() !== 'descending') {
                bDescending = false;
            } else {
                bDescending = true;
            }
            oSorter = {
                path: sPropertyPath,
                descending: bDescending
            };
            aSorters.push(oSorter);
        }

        //get the sorters from the presentation variant annotations if exists
        var aSortOrder = oPresentationVariant && oPresentationVariant.SortOrder || undefined;
        var oSortOrder, sPropertyPath;
        if (aSortOrder) {
            for (var i = 0; i < aSortOrder.length; i++) {
                oSortOrder = aSortOrder[i];
                sPropertyPath = oSortOrder.Property.PropertyPath;
                bDescending = getBooleanValue(oSortOrder.Descending, true);
                oSorter = {
                    path: sPropertyPath,
                    descending: bDescending
                };
                aSorters.push(oSorter);
            }
        }

        return aSorters;
    }

    sap.ovp.cards.AnnotationHelper.getCardSelections = function (ovpCardProperties) {
        var oEntityType = ovpCardProperties.getProperty('/entityType');
        var oSelectionVariant = oEntityType[ovpCardProperties.getProperty('/selectionAnnotationPath')];
        return {
            filters: getFilters(ovpCardProperties, oSelectionVariant),
            parameters: getParameters(oSelectionVariant)
        };
    };

    sap.ovp.cards.AnnotationHelper.getCardSorters = function (ovpCardProperties) {
        var oEntityType = ovpCardProperties.getProperty('/entityType');
        var oPresentationVariant = oEntityType[ovpCardProperties.getProperty('/presentationAnnotationPath')];

        return getSorters(ovpCardProperties, oPresentationVariant);
    };

    /**
     * return the card level parameters defined in selection annotation
     *
     * @param oSelectionVariant - optional selection variant annotation with SelectOptions configuration
     * @returns {Array} of parameters
     */
    function getParameters(oSelectionVariant) {

        var oParameter, aParameters = [];

        //If selection variant or parameters do not exist in annotations
        if (!oSelectionVariant || !oSelectionVariant.Parameters) {
            return aParameters;
        }

        var iLength = oSelectionVariant.Parameters.length;
        for (var i = 0; i < iLength; i++) {
            oParameter = oSelectionVariant.Parameters[i];

            //If parameter property name or path not present
            if (!oParameter.PropertyName || !oParameter.PropertyName.PropertyPath) {
                continue;
            }

            //Property name is there but value annotation is not there, then give error
            if (!oParameter.PropertyValue) {
                jQuery.sap.log.error("Missing value for parameter " + oParameter.PropertyName.PropertyPath);
                continue;
            }

            aParameters[aParameters.length] = {
                path: oParameter.PropertyName.PropertyPath,
                value: sap.ovp.cards.AnnotationHelper.getPrimitiveValue(oParameter.PropertyValue)
            };
        }

        return aParameters;
    }

    /**
     * return the filters that need to be applyed on an aggregation
     *
     * @param ovpCardProperties - card properties model which might contains filters configurations
     * @param oSelectionVariant - optional selection variant annotation with SelectOptions configuration
     * @returns {Array} of model filters
     */
    function getFilters(ovpCardProperties, oSelectionVariant) {
        var aFilters = [];
        var aSelectOptions;
        //get the configured filters if exist and append them to the filter array
        var aConfigFilters = ovpCardProperties.getProperty("/filters");
        if (aConfigFilters) {
            aFilters = aFilters.concat(aConfigFilters);
        }

        //get the filters from the selection variant annotations if exists
        if (oSelectionVariant && oSelectionVariant.SelectOptions) {
            aSelectOptions = oSelectionVariant.SelectOptions;
        } else {
            aSelectOptions = oSelectionVariant;
        }
        var oSelectOption, sPropertyPath, oRange;
        if (aSelectOptions) {
            for (var i = 0; i < aSelectOptions.length; i++) {
                oSelectOption = aSelectOptions[i];
                sPropertyPath = oSelectOption.PropertyName.PropertyPath;
                //a select option might contains more then one filter in the Ranges array
                for (var j = 0; j < oSelectOption.Ranges.length; j++) {
                    oRange = oSelectOption.Ranges[j];
                    if (oRange.Sign.EnumMember) {
                        //create the filter. the Low value is mandatory
                        var oFilter = {
                            path: sPropertyPath,
                            operator: oRange.Option.EnumMember.split("/")[1],
                            value1: sap.ovp.cards.AnnotationHelper.getPrimitiveValue(oRange.Low),
                            value2: sap.ovp.cards.AnnotationHelper.getPrimitiveValue(oRange.High),
                            sign: oRange.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I" ? "I" : "E"
                        };
                        // exclude sign is supported only with EQ operator
                        if (oFilter.sign === "E" && oFilter.operator !== sap.ui.model.FilterOperator.EQ) {
                            jQuery.sap.log.error("Exclude sign is supported only with EQ operator");
                            continue;
                        }
                        // aFilters will be used later in the flow to create filter object. (sap.ui.model.Filter),
                        // that does not support sign property, so the sign property will be ignored later in the flow.

                        // This getFilters will also be called during navigation to create selection variant.
                        // for selection variant sign property is supported but NE operator is not supported
                        // This case will be handled by the calling function in card.controller
                        if (oFilter.sign === "E" && oFilter.operator === sap.ui.model.FilterOperator.EQ) {
                            oFilter.operator = sap.ui.model.FilterOperator.NE;
                            oFilter.sign = "I";
                        }

                        //append the filter to the filters array
                        aFilters.push(oFilter);
                    }
                }
            }
        }

        return aFilters;
    }

    function getBooleanValue(oValue, bDefault) {
        if (oValue && oValue.Boolean) {
            if (oValue.Boolean.toLowerCase() === "true") {
                return true;
            } else if (oValue.Boolean.toLowerCase() === "false") {
                return false;
            }
        } else if (oValue && oValue.Bool) {
            if (oValue.Bool.toLowerCase() === "true") {
                return true;
            } else if (oValue.Bool.toLowerCase() === "false") {
                return false;
            }
        }

        return bDefault;
    }

    function getNumberValue(oValue) {
        var value;

        if (oValue) {
            if (oValue.String) {
                value = Number(oValue.String);
            } else if (oValue.Int) {
                value = Number(oValue.Int);
            } else if (oValue.Decimal) {
                value = Number(oValue.Decimal);
            } else if (oValue.Double) {
                value = Number(oValue.Double);
            } else if (oValue.Single) {
                value = Number(oValue.Single);
            }
        }

        return value;
    }

    sap.ovp.cards.AnnotationHelper.getPrimitiveValue = function (oValue) {
        var value;

        if (oValue) {
            if (oValue.String || oValue.String === "") {
                value = oValue.String;
            } else if (oValue.Boolean || oValue.Bool) {
                value = getBooleanValue(oValue);
            } else {
                value = getNumberValue(oValue);
            }
        }

        return value;
    };

    function getPathOrPrimitiveValue(oItem) {
        if (oItem) {
            if (oItem.Path) {
                return "{path:'" + oItem.Path + "'}";
            } else {
                return sap.ovp.cards.AnnotationHelper.getPrimitiveValue(oItem);
            }
        } else {
            return "";
        }
    }

    //This object is responsive for devices
    //the id build by Type-ListType-flavor
    var ITEM_LENGTH = {
        "List_condensed": {
            phone: 5,
            tablet: 5,
            desktop: 5
        },
        "List_extended": {
            phone: 3,
            tablet: 3,
            desktop: 3
        },
        "List_condensed_bar": {
            phone: 5,
            tablet: 5,
            desktop: 5
        },
        "List_extended_bar": {
            phone: 3,
            tablet: 3,
            desktop: 3
        },
        "Table": {
            phone: 5,
            tablet: 5,
            desktop: 5
        },
        "Stack_simple": {
            phone: 20,
            tablet: 20,
            desktop: 20
        },
        "Stack_complex": {
            phone: 5,
            tablet: 5,
            desktop: 5
        }
    };

    function getItemsLength(oOvpCardPropertiesModel) {
        var type = oOvpCardPropertiesModel.getProperty('/contentFragment');
        var listType = oOvpCardPropertiesModel.getProperty('/listType');
        var flavor = oOvpCardPropertiesModel.getProperty('/listFlavor');
        var oItemSizes;

        var device = "desktop";

        //get current device
        if (sap.ui.Device.system.phone) {
            device = "phone";
        } else if (sap.ui.Device.system.tablet) {
            device = "tablet";
        }

        //check the current card type and get the sizes objects
        if (type == "sap.ovp.cards.list.List") {
            if (listType == "extended") {
                if (flavor == "bar") {
                    oItemSizes = ITEM_LENGTH["List_extended_bar"];
                } else {
                    oItemSizes = ITEM_LENGTH["List_extended"];
                }
            } else if (flavor == "bar") {
                oItemSizes = ITEM_LENGTH["List_condensed_bar"];
            } else {
                oItemSizes = ITEM_LENGTH["List_condensed"];
            }
        } else if (type == "sap.ovp.cards.table.Table") {
            oItemSizes = ITEM_LENGTH["Table"];
        } else if (type == "sap.ovp.cards.stack.Stack") {

            if (oOvpCardPropertiesModel.getProperty('/objectStreamCardsNavigationProperty')) {
                oItemSizes = ITEM_LENGTH["Stack_complex"];
            } else {
                oItemSizes = ITEM_LENGTH["Stack_simple"];
            }
        }

        if (oItemSizes) {
            return oItemSizes[device];
        }

        return 5;
    }

    //Function to remove the datafield if there is a datapoint with same target as datafield
    sap.ovp.cards.AnnotationHelper.removeDuplicateDataField = function (oContext) {
        var aCollection = oContext.getObject();
        var aDataPoints = getSortedDataPoints(oContext, aCollection);
        var aDataPointsValues = aDataPoints.map(function (oDataPoint) {
            return oDataPoint.Value.Path;
        });
        aCollection.filter(function (item, index) {
            if (item.RecordType === "com.sap.vocabularies.UI.v1.DataField" && aDataPointsValues.indexOf(item.Value.Path) > -1) {
                aCollection.splice(index, 1);
            }
        });
    };

    sap.ovp.cards.AnnotationHelper.formatUrl = function (iContext, sUrl) {
        if (sUrl.charAt(0) === '/' || sUrl.indexOf("http") === 0) {
            return sUrl;
        }
        var sBaseUrl = iContext.getModel().getProperty("/baseUrl");
        if (sBaseUrl) {
            return sBaseUrl + "/" + sUrl;
        }
        return sUrl;
    };

    sap.ovp.cards.AnnotationHelper.getDataPointsCount = function (iContext, aCollection) {
        var aDataPoints = getSortedDataPoints(iContext, aCollection);
        return aDataPoints.length;
    };

    sap.ovp.cards.AnnotationHelper.getFirstDataPointValue = function (iContext, aCollection) {
        return sap.ovp.cards.AnnotationHelper.getDataPointValue(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.getSecondDataPointValue = function (iContext, aCollection) {
        return sap.ovp.cards.AnnotationHelper.getDataPointValue(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.getDataPointValue = function (iContext, aCollection, index) {
        var aDataPoints = getSortedDataPoints(iContext, aCollection),
            oDataPoint = aDataPoints[index];

        if (oDataPoint && oDataPoint.Value && oDataPoint.Value.Path) {
            return oDataPoint.Value.Path;
        }
        return "";
    };

    sap.ovp.cards.AnnotationHelper.getFirstDataFieldName = function (iContext, aCollection) {
        return getDataFieldName(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.getSecondDataFieldName = function (iContext, aCollection) {
        return getDataFieldName(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.getThirdDataFieldName = function (iContext, aCollection) {
        return getDataFieldName(iContext, aCollection, 2);
    };

    sap.ovp.cards.AnnotationHelper.getFourthDataFieldName = function (iContext, aCollection) {
        return getDataFieldName(iContext, aCollection, 3);
    };

    sap.ovp.cards.AnnotationHelper.getFifthDataFieldName = function (iContext, aCollection) {
        return getDataFieldName(iContext, aCollection, 4);
    };

    sap.ovp.cards.AnnotationHelper.formatFirstDataFieldValue = function (iContext, aCollection) {
        return formatDataField(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.formatSecondDataFieldValue = function (iContext, aCollection) {
        return formatDataField(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.formatThirdDataFieldValue = function (iContext, aCollection) {
        return formatDataField(iContext, aCollection, 2);
    };

    sap.ovp.cards.AnnotationHelper.formatFourthDataFieldValue = function (iContext, aCollection) {
        return formatDataField(iContext, aCollection, 3);
    };

    sap.ovp.cards.AnnotationHelper.formatFifthDataFieldValue = function (iContext, aCollection) {
        return formatDataField(iContext, aCollection, 4);
    };

    sap.ovp.cards.AnnotationHelper.formatSixthDataFieldValue = function (iContext, aCollection) {
        return formatDataField(iContext, aCollection, 5);
    };

    sap.ovp.cards.AnnotationHelper.formatsemanticObjectOfDataFieldGeneric = function (iContext, oEntitySet, aCollection) {
        return semanticObjectOfDataField(iContext, oEntitySet, aCollection);
    };

    sap.ovp.cards.AnnotationHelper.getFirstDataPointName = function (iContext, aCollection) {
        return getDataPointName(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.getSecondDataPointName = function (iContext, aCollection) {
        return getDataPointName(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.getThirdDataPointName = function (iContext, aCollection) {
        return getDataPointName(iContext, aCollection, 2);
    };

    sap.ovp.cards.AnnotationHelper.formatFirstDataPointValue = function (iContext, aCollection) {
        return formatDataPoint(iContext, aCollection, 0);
    };

    /**
     *
     * @param iContext
     * @param aCollection
     * @returns a binding or a URL based on what has been defined in the annotations
     */
    sap.ovp.cards.AnnotationHelper.formatImageUrl = function (iContext, aCollection) {
        for (var i = 0; i < aCollection.length; i++) {
            var oItem = aCollection[i];
            if (oItem.RecordType === "com.sap.vocabularies.UI.v1.DataField") {
                if (oItem.IconUrl && oItem.IconUrl.String.indexOf('//') != -1) {
                    return oItem.IconUrl.String;
                }
                if (oItem.IconUrl && oItem.Value && oItem.Value.Path) {
                    return sap.ui.model.odata.AnnotationHelper.simplePath(iContext, oItem.Value);
                }
            }
        }
    };

    sap.ovp.cards.AnnotationHelper.formatSecondDataPointValue = function (iContext, aCollection) {
        return formatDataPoint(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.formatThirdDataPointValue = function (iContext, aCollection) {
        return formatDataPoint(iContext, aCollection, 2);
    };

    sap.ovp.cards.AnnotationHelper.formatFirstDataPointState = function (iContext, aCollection) {
        return formatDataPointState(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.formatFirstDataPointColor = function (iContext, aCollection) {
        return formatDataPointColor(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.formatSecondDataPointState = function (iContext, aCollection) {
        return formatDataPointState(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.formatThirdDataPointState = function (iContext, aCollection) {
        return formatDataPointState(iContext, aCollection, 2);
    };

    sap.ovp.cards.AnnotationHelper.formatFirstDataPointStateForSmartField = function (iContext, aCollection) {
        return formatDataPointStateForSmartField(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.formatKPIHeaderState = function (iContext, oDataPoint) {
        return formatDataPointToValue(iContext, oDataPoint, sap.ovp.cards.AnnotationHelper.criticalityConstants.ColorValues);
    };

    sap.ovp.cards.AnnotationHelper.isFirstDataPointCriticality = function (iContext, aCollection) {
        return criticalityConditionCheck(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.isSecondDataPointCriticality = function (iContext, aCollection) {
        return criticalityConditionCheck(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.isThirdDataPointCriticality = function (iContext, aCollection) {
        return criticalityConditionCheck(iContext, aCollection, 2);
    };

    sap.ovp.cards.AnnotationHelper.getSortedDataFields = function(iContext, aCollection) {
        return getSortedDataFields(iContext, aCollection);
    };

    sap.ovp.cards.AnnotationHelper.getSortedDataPoints = function(iContext, aCollection) {
        return getSortedDataPoints(iContext, aCollection);
    };

    //Generic formatting functions

    function formatValueFromTarget(oContext, aCollection) {
        var sContextPath = oContext.getPath();
        var sEntityTypePath = sContextPath.slice(0, sContextPath.lastIndexOf("/"));
        sEntityTypePath = sEntityTypePath.slice(0, sEntityTypePath.lastIndexOf("/"));
        var sPath = getTargetPathForDataFieldForAnnotation(sEntityTypePath, aCollection);
        aCollection = oContext.getModel().getProperty(sPath);

        return aCollection;
    }

    sap.ovp.cards.AnnotationHelper.formatDataFieldValueGeneric = function (iContext, aCollection) {
        if (!aCollection) {
            return "";
        }
        return formatField(iContext, aCollection);
    };

    function semanticObjectOfDataField(iContext, oEntitySet, aCollection, index) {
        var semanticObjectOfDF;
        var item = index == undefined ? aCollection : getSortedDataFields(iContext, aCollection)[index];
        var oModel = iContext.getSetting('ovpCardProperties');
        var oMetaModel = oModel.getProperty("/metaModel");
        var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
        var oEntityTypeProps = oEntityType.property;
        if (oEntityTypeProps) {
            for (var i = 0; i < oEntityTypeProps.length; i++) {
                if (item.Value.Path === oEntityTypeProps[i].name) {
                    semanticObjectOfDF = oEntityTypeProps[i]["com.sap.vocabularies.Common.v1.SemanticObject"];
                    if (semanticObjectOfDF) {
                        return sap.ui.model.odata.AnnotationHelper.format(iContext, semanticObjectOfDF);
                    } else {
                        return "";
                    }
                }
            }
        }
    }

    sap.ovp.cards.AnnotationHelper.checkForSemanticObjectAnnotation = function (iContext, oEntitySet, item) {
        return sap.ovp.cards.AnnotationHelper.formatsemanticObjectOfDataFieldGeneric(iContext, oEntitySet, item);
    };

    sap.ovp.cards.AnnotationHelper.formatDataPointValue = function (iContext, aCollection) {
        if (!aCollection) {
            return "";
        }
        var oModel = iContext.getSetting('ovpCardProperties');
        var oEntityType = oModel.getProperty("/entityType");
        var oMetaModel = oModel.getProperty("/metaModel");
        var oCopyOfCollection = jQuery.extend({}, aCollection);
        var oCopyOfContext = jQuery.extend({}, iContext);
        aCollection = formatValueFromTarget(oCopyOfContext, oCopyOfCollection);

        return _formatDataPoint(iContext, aCollection, oEntityType, oMetaModel);
    };

    sap.ovp.cards.AnnotationHelper.formatDataPointStateGeneric = function (iContext, aCollection) {
        var oCopyOfCollection = jQuery.extend({}, aCollection);
        var oCopyOfContext = jQuery.extend({}, iContext);
        var sState = "None",
            oCriticalityConfigValues = sap.ovp.cards.AnnotationHelper.criticalityConstants.StateValues;
        aCollection = formatValueFromTarget(oCopyOfContext, oCopyOfCollection);

        if (aCollection && aCollection.Criticality) {
            sState = buildExpressionForProgressIndicatorCriticality(iContext, aCollection, oCriticalityConfigValues);
        } else {
            sState = formatDataPointToValue(iContext, aCollection, oCriticalityConfigValues);
        }
        return sState;
    };

    sap.ovp.cards.AnnotationHelper.checkCriticalityGeneric = function (iContext, aCollection) {
        var oCopyOfCollection = jQuery.extend({}, aCollection);
        var oCopyOfContext = jQuery.extend({}, iContext);
        aCollection = formatValueFromTarget(oCopyOfContext, oCopyOfCollection);

        if (aCollection && aCollection.Criticality) {
            return true;
        }
    };

    sap.ovp.cards.AnnotationHelper.formatDataPointStateForSmartFieldGeneric = function (iContext, aCollection) {
        var oCopyOfCollection = jQuery.extend({}, aCollection);
        var oCopyOfContext = jQuery.extend({}, iContext);
        aCollection = formatValueFromTarget(oCopyOfContext, oCopyOfCollection);
        var sState = "None";
        if (aCollection && aCollection.Criticality && aCollection.Criticality.Path) {
            sState = "{path:'" + aCollection.Criticality.Path + "'}";
        } else {
            sState = formatDataPointToValue(iContext, aCollection, sap.ovp.cards.AnnotationHelper.criticalityConstants.StateValues);
            sState = criticalityState2Value(sState);
        }
        return sState;
    };

    /*
     * @param iContext
     * @returns 0 for false - there are no actions for this context
     *          1 for true - there are actions for this context
     *          does not return actual boolean - so we won't need to parse the result in the xml
     */
    sap.ovp.cards.AnnotationHelper.hasActions = function (iContext, aCollection) {
        var oItem;
        for (var i = 0; i < aCollection.length; i++) {
            oItem = aCollection[i];
            if (oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" ||
                oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" ||
                oItem.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {
                return 1;
            }
        }
        return 0;
    };

    sap.ovp.cards.AnnotationHelper.isFirstDataPointPercentageUnit = function (iContext, aCollection) {
        var oDataPoint = getSortedDataPoints(iContext, aCollection)[0];

        if (oDataPoint && oDataPoint.Value && oDataPoint.Value.Path) {
            var sEntityTypePath = iContext.getPath().substr(0, iContext.getPath().lastIndexOf("/") + 1);
            var oModel = iContext.getModel();
            var oEntityType = oModel.getProperty(sEntityTypePath);
            var oProperty = oModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
            if (oProperty && oProperty["Org.OData.Measures.V1.Unit"]) {
                return oProperty["Org.OData.Measures.V1.Unit"].String === "%";
            }
        }
        return false;
    };

    sap.ovp.cards.AnnotationHelper.resolveEntityTypePath = function (oAnnotationPathContext) {
        var sAnnotationPath = oAnnotationPathContext.getObject();
        var oModel = oAnnotationPathContext.getModel();
        var oMetaModel = oModel.getProperty("/metaModel");
        var oEntitySet = oMetaModel.getODataEntitySet(oModel.getProperty("/entitySet"));
        var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
        sAnnotationPath = oEntityType.$path + "/" + sAnnotationPath;
        return oMetaModel.createBindingContext(sAnnotationPath);
    };

    sap.ovp.cards.AnnotationHelper.resolveParameterizedEntitySet = function (oDataModel, oEntitySet, oSelectionVariant) {

        jQuery.sap.require("sap.ui.model.analytics.odata4analytics");
        var path = "";
        var o4a = new sap.ui.model.analytics.odata4analytics.Model(sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(oDataModel));
        var queryResult = o4a.findQueryResultByName(oEntitySet.name);

        if (!queryResult) {
            path = "/" + oEntitySet.name;
            jQuery.sap.log.error("findQueryResultByName", "Entity Set not found in the QueryResultRequest");
            return path;
        }
        var queryResultRequest = new sap.ui.model.analytics.odata4analytics.QueryResultRequest(queryResult);
        var parameterization = queryResult.getParameterization();

        if (parameterization) {
            var param;
            queryResultRequest.setParameterizationRequest(new sap.ui.model.analytics.odata4analytics.ParameterizationRequest(parameterization));
            jQuery.each(oSelectionVariant.Parameters, function () {
                if (this.RecordType === "com.sap.vocabularies.UI.v1.IntervalParameter") {
                    param = this.PropertyNameFrom.PropertyPath.split("/");
                    queryResultRequest.getParameterizationRequest().setParameterValue(
                        param[param.length - 1],
                        this.PropertyValueFrom.String,
                        this.PropertyValueTo.String
                    );
                } else {
                    param = this.PropertyName.PropertyPath.split("/");
                    queryResultRequest.getParameterizationRequest().setParameterValue(
                        param[param.length - 1],
                        this.PropertyValue.String
                    );
                }
            });
        }

        try {
            path = queryResultRequest.getURIToQueryResultEntitySet();
        } catch (exception) {
            queryResult = queryResultRequest.getQueryResult();
            path = "/" + queryResult.getEntitySet().getQName();
            jQuery.sap.log.error("getEntitySetPathWithParameters", "binding path with parameters failed - " + exception || exception.message);
        }
        return path;
    };

    sap.ovp.cards.AnnotationHelper.getAssociationObject = function (oModel, sAssociation, ns) {
        // find a nicer way of getting association set entry in meta model
        var aAssociations = oModel.getServiceMetadata().dataServices.schema[0].association;
        for (var i = 0; i < aAssociations.length; i++) {
            if (ns + "." + aAssociations[i].name === sAssociation) {
                return aAssociations[i];
            }
        }
    };

    /**************************** Formatters & Helpers for KPI-Header logic  ****************************/

    /* Returns binding path for singleton */
    sap.ovp.cards.AnnotationHelper.getAggregateNumber = function (iContext, oEntitySet, oDataPoint, oSelectionVariant) {
        var measure, dataPointDescription, dataPointTitle;
        if (oDataPoint && oDataPoint.Value && oDataPoint.Value.Path) {
            measure = oDataPoint.Value.Path;
        } else if (oDataPoint && oDataPoint.Description && oDataPoint.Description.Value && oDataPoint.Description.Value.Path) {
            measure = oDataPoint.Description.Value.Path;
        }
        if (oDataPoint && oDataPoint.Description && oDataPoint.Description.Path) {
            dataPointDescription = oDataPoint.Description.Path;
        } else if (oDataPoint && oDataPoint.Title && oDataPoint.Title.Path) {
            dataPointTitle = oDataPoint.Title.Path;
        }
        var ret = "";
        var bParams = oSelectionVariant && oSelectionVariant.Parameters;
        var filtersString = "";

        if (bParams) {
            var dataModel = iContext.getSetting("dataModel");
            var path = sap.ovp.cards.AnnotationHelper.resolveParameterizedEntitySet(dataModel, oEntitySet, oSelectionVariant);
            ret += "{path: '" + path + "'";
        } else {
            ret += "{path: '/" + oEntitySet.name + "'";
        }

        ret += ", length: 1";
        var oOvpCardSettings = iContext.getSetting('ovpCardProperties');
        var oEntityType = oOvpCardSettings.getProperty("/entityType");
        var unitColumn = sap.ovp.cards.CommonUtils.getUnitColumn(measure, oEntityType);
        var aFilters = getFilters(oOvpCardSettings, oSelectionVariant);

        if (aFilters.length > 0) {
            filtersString += ", filters: " + JSON.stringify(aFilters);
        }

        var selectArr = [];
        selectArr.push(measure);
        if (dataPointDescription) {
            selectArr.push(dataPointDescription);
        } else if (dataPointTitle) {
            selectArr.push(dataPointTitle);
        }
        // if DeviationRangeLowValue and ToleranceRangeLowValue read from Path instead of string
        if (oDataPoint && oDataPoint.CriticalityCalculation && oDataPoint.CriticalityCalculation.DeviationRangeLowValue && oDataPoint.CriticalityCalculation.DeviationRangeLowValue.Path) {
            selectArr.push(oDataPoint.CriticalityCalculation.DeviationRangeLowValue.Path);
        }
        if (oDataPoint && oDataPoint.CriticalityCalculation && oDataPoint.CriticalityCalculation.ToleranceRangeLowValue && oDataPoint.CriticalityCalculation.ToleranceRangeLowValue.Path) {
            selectArr.push(oDataPoint.CriticalityCalculation.ToleranceRangeLowValue.Path);
        }

        // if DeviationRangeHighValue and ToleranceRangeHighValue read from Path instead of string
        if (oDataPoint && oDataPoint.CriticalityCalculation && oDataPoint.CriticalityCalculation.DeviationRangeHighValue && oDataPoint.CriticalityCalculation.DeviationRangeHighValue.Path) {
            selectArr.push(oDataPoint.CriticalityCalculation.DeviationRangeHighValue.Path);
        }
        if (oDataPoint && oDataPoint.CriticalityCalculation && oDataPoint.CriticalityCalculation.ToleranceRangeHighValue && oDataPoint.CriticalityCalculation.ToleranceRangeHighValue.Path) {
            selectArr.push(oDataPoint.CriticalityCalculation.ToleranceRangeHighValue.Path);
        }

        if (unitColumn) {
            selectArr.push(unitColumn);
        }
        if (oDataPoint && oDataPoint.TrendCalculation && oDataPoint.TrendCalculation.ReferenceValue && oDataPoint.TrendCalculation.ReferenceValue.Path) {
            selectArr.push(oDataPoint.TrendCalculation.ReferenceValue.Path);
        }

        return ret + ", parameters:{select:'" + selectArr.join(",") + "'}" + filtersString + "}";
    };

    /* ----- format KPi value as per scale factor------ */
    sap.ovp.cards.AnnotationHelper.KpiValueFormatter = function (kpiValue) {
        if (isNaN(kpiValue)) {
            return kpiValue;
        }
        var fractionalDigits, scaleFactor, percentageFlag = false;
        if (this.oPropagatedProperties.oModels.ovpCardProperties.oData.NumberOfFractionalDigits) {
            fractionalDigits = Number(this.oPropagatedProperties.oModels.ovpCardProperties.oData.NumberOfFractionalDigits);
        }
        if (this.oPropagatedProperties.oModels.ovpCardProperties.oData.percentageAvailable) {
            percentageFlag = true;
        }
        if (!fractionalDigits || fractionalDigits < 0) {
            fractionalDigits = 0;
        } else if (fractionalDigits > 2) {
            fractionalDigits = 2;
        }
        scaleFactor = kpiValue;
        if (kpiValue) {
            var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance({
                minFractionDigits: fractionalDigits,
                maxFractionDigits: fractionalDigits,
                style: "short",
                showScale: true,
                shortRefNumber: scaleFactor
            });
            if (percentageFlag) {
                return numberFormat.format(Number(kpiValue)) + " %";
            } else {
                return numberFormat.format(Number(kpiValue));
            }

        }
    };

    /* Creates binding path for NumericContent value */
    sap.ovp.cards.AnnotationHelper.formThePathForAggregateNumber = function (dataPoint) {
        if (!dataPoint || !dataPoint.Value || !dataPoint.Value.Path) {
            return "";
        }
        if (dataPoint && dataPoint.ValueFormat && dataPoint.ValueFormat.NumberOfFractionalDigits && dataPoint.ValueFormat.NumberOfFractionalDigits.Int) {
            this.getModel("ovpCardProperties").oData.NumberOfFractionalDigits = dataPoint.ValueFormat.NumberOfFractionalDigits.Int;
        }
        var oModel = this.getModel('ovpCardProperties');
        var oEntityType = oModel.getProperty("/entityType");
        var oMetaModel = oModel.getProperty("/metaModel");
        var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, dataPoint.Value.Path);
        if (oEntityTypeProperty["Org.OData.Measures.V1.Unit"]) {
            var oUnit = oEntityTypeProperty["Org.OData.Measures.V1.Unit"];
            if (oUnit.String == "%") {
                this.getModel("ovpCardProperties").oData.percentageAvailable = true;
            }
        }
        return "{parts: [{path:'" + dataPoint.Value.Path + "'}], formatter: 'sap.ovp.cards.AnnotationHelper.KpiValueFormatter'}";
    };

    /* Creates binding path for trend icon */
    sap.ovp.cards.AnnotationHelper.formThePathForTrendIcon = function (iContext, oDataPoint) {
        if (!oDataPoint || !oDataPoint.Value || !oDataPoint.Value.Path || !oDataPoint.TrendCalculation) {
            return "";
        }

        var value = getPathOrPrimitiveValue(oDataPoint.Value);
        var referenceValue = getPathOrPrimitiveValue(oDataPoint.TrendCalculation.ReferenceValue);
        var downDifference = getPathOrPrimitiveValue(oDataPoint.TrendCalculation.DownDifference);
        var upDifference = getPathOrPrimitiveValue(oDataPoint.TrendCalculation.UpDifference);

        var bIsRefValBinding = isBindingValue(referenceValue);
        var bIsDownDiffBinding = isBindingValue(downDifference);
        var bIsUpDiffBinding = isBindingValue(upDifference);

        var sParts = "parts: [" + value;
        sParts += bIsRefValBinding ? "," + referenceValue : "";
        sParts += bIsDownDiffBinding ? "," + downDifference : "";
        sParts += bIsUpDiffBinding ? "," + upDifference : "";
        sParts += "]";

        var formatFunc = function () {
            var index = 1;
            return calculateTrendDirection(
                arguments[0],
                bIsRefValBinding ? arguments[index++] : referenceValue,
                bIsDownDiffBinding ? arguments[index++] : downDifference,
                bIsUpDiffBinding ? arguments[index++] : upDifference
            );
        };

        var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatTrendDirection");
        return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
    };

    /* ---form subtitle using scale factor and Unit of Measure--- */
    sap.ovp.cards.AnnotationHelper.formThePathForSubtitle = function (iContext, dataPoint, subTitle) {
        var unitOfMeasure, subTitleInText;
        if (!dataPoint || !dataPoint.Value || !dataPoint.Value.Path) {
            return subTitle;
        }
        unitOfMeasure = formatField(iContext, dataPoint, false, true);
        subTitleInText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("SubTitle_IN");
        if (unitOfMeasure) {
            return subTitle + " " + subTitleInText + " " + unitOfMeasure;
        } else {
            return subTitle;
        }
    };

    /* Creates binding path for % change */
    sap.ovp.cards.AnnotationHelper.formPathForPercentageChange = function (dataPoint) {
        if (!dataPoint || !dataPoint.TrendCalculation || !dataPoint.TrendCalculation.ReferenceValue) {
            return "";
        }
        if (dataPoint && dataPoint.ValueFormat && dataPoint.ValueFormat.NumberOfFractionalDigits && dataPoint.ValueFormat.NumberOfFractionalDigits.Int) {
            this.getModel("ovpCardProperties").oData.NumberOfFractionalDigits = dataPoint.ValueFormat.NumberOfFractionalDigits.Int;
        }
        if (dataPoint.TrendCalculation.ReferenceValue.Path) {
            return "{parts: [{path:'" + dataPoint.Value.Path + "'}, {path:'" + dataPoint.TrendCalculation.ReferenceValue.Path +
                "'}], formatter: 'sap.ovp.cards.AnnotationHelper.returnPercentageChange'}";
        } else {
            return "{parts: [{path:'" + dataPoint.Value.Path + "'}], formatter: 'sap.ovp.cards.AnnotationHelper.returnPercentageChange'}";
        }
    };

    /* -------- format target value as per scale factor-----*/
    sap.ovp.cards.AnnotationHelper.TargetValueFormatter = function (kpiValue, targetValue) {
        var oTargetValue, fractionalDigits, scaleFactor, percentageFlagForTarget = false;
        if (isNaN(kpiValue)) {
            return "";
        }
        if (this.oPropagatedProperties.oModels.ovpCardProperties.oData.NumberOfFractionalDigits) {
            fractionalDigits = Number(this.oPropagatedProperties.oModels.ovpCardProperties.oData.NumberOfFractionalDigits);
        }
        if (this.oPropagatedProperties.oModels.ovpCardProperties.oData.percentageAvailableForTarget) {
            percentageFlagForTarget = true;
        }
        if (!fractionalDigits || fractionalDigits < 0) {
            fractionalDigits = 0;
        } else if (fractionalDigits > 2) {
            fractionalDigits = 2;
        }
        if (kpiValue == 0) {
            scaleFactor = targetValue;
        } else {
            scaleFactor = kpiValue;
        }
        if (targetValue) {
            oTargetValue = targetValue;
        } else if (this.oPropagatedProperties.oModels.ovpCardProperties.oData.ManifestTargetValue) {
            oTargetValue = this.oPropagatedProperties.oModels.ovpCardProperties.oData.ManifestTargetValue;
        }
        if (oTargetValue) {
            var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance({
                minFractionDigits: fractionalDigits,
                maxFractionDigits: fractionalDigits,
                style: "short",
                showScale: true,
                shortRefNumber: scaleFactor
            });
            if (percentageFlagForTarget) {
                return numberFormat.format(Number(oTargetValue)) + " %";
            } else {
                return numberFormat.format(Number(oTargetValue));
            }
        }
    };

    /*GetTargetValueforKPIHeader*/
    sap.ovp.cards.AnnotationHelper.formPathForTargetValue = function (dataPoint) {
        if (!dataPoint || !dataPoint.TrendCalculation || !dataPoint.TrendCalculation.ReferenceValue) {
            return "";
        }
        if (!dataPoint || !dataPoint.Value || !dataPoint.Value.Path) {
            return "";
        }
        if (dataPoint && dataPoint.ValueFormat && dataPoint.ValueFormat.NumberOfFractionalDigits && dataPoint.ValueFormat.NumberOfFractionalDigits.Int) {
            this.getModel("ovpCardProperties").oData.NumberOfFractionalDigits = dataPoint.ValueFormat.NumberOfFractionalDigits.Int;
        }
        if (dataPoint.TrendCalculation.ReferenceValue) {
            if (dataPoint.TrendCalculation.ReferenceValue.String) {
                this.getModel("ovpCardProperties").oData.ManifestTargetValue = dataPoint.TrendCalculation.ReferenceValue.String;
                return "{parts: [{path:'" + dataPoint.Value.Path + "'}], formatter: 'sap.ovp.cards.AnnotationHelper.TargetValueFormatter'}";
            }
            if (dataPoint.TrendCalculation.ReferenceValue.Path) {
                var oModel = this.getModel('ovpCardProperties');
                var oEntityType = oModel.getProperty("/entityType");
                var oMetaModel = oModel.getProperty("/metaModel");
                var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, dataPoint.TrendCalculation.ReferenceValue.Path);
                if (oEntityTypeProperty["Org.OData.Measures.V1.Unit"]) {
                    var oUnit = oEntityTypeProperty["Org.OData.Measures.V1.Unit"];
                    if (oUnit.String == "%") {
                        this.getModel("ovpCardProperties").oData.percentageAvailableForTarget = true;
                    }
                }
                return "{parts: [{path:'" + dataPoint.Value.Path + "'},{path:'" + dataPoint.TrendCalculation.ReferenceValue.Path + "'}], formatter: 'sap.ovp.cards.AnnotationHelper.TargetValueFormatter'}";
            }
        }
    };

    /* Formatter for % change for Header */
    sap.ovp.cards.AnnotationHelper.returnPercentageChange = function (aggregateValue, referenceValuePath) {
        jQuery.sap.require("sap.ui.core.format.NumberFormat");
        var ret = "";
        var fractionalDigits;
        if (isNaN(aggregateValue)) {
            return "";
        }
        aggregateValue = Number(aggregateValue);
        var ovpModel = this.getModel("ovpCardProperties");
        if (!ovpModel) {
            return ret;
        }
        var fullQualifier = ovpModel.getProperty("/dataPointAnnotationPath");
        var dataPoint = ovpModel.getProperty("/entityType")[fullQualifier];
        var referenceValue;
        if (!dataPoint.TrendCalculation) {
            return ret;
        }
        if (this.oPropagatedProperties.oModels.ovpCardProperties.oData.NumberOfFractionalDigits) {
            fractionalDigits = Number(this.oPropagatedProperties.oModels.ovpCardProperties.oData.NumberOfFractionalDigits);
        }
        if (!fractionalDigits || fractionalDigits < 0) {
            fractionalDigits = 0;
        } else if (fractionalDigits > 2) {
            fractionalDigits = 2;
        }
        if (dataPoint.TrendCalculation.ReferenceValue) {
            if (dataPoint.TrendCalculation.ReferenceValue.String) {
                referenceValue = Number(dataPoint.TrendCalculation.ReferenceValue.String);
            }
            if (dataPoint.TrendCalculation.ReferenceValue.Path) {
                referenceValue = Number(referenceValuePath);
            }
            if (!referenceValue || referenceValue == 0) {
                return ret;
            }
            var percentNumber = ((Number(aggregateValue) - referenceValue) / referenceValue);
            var percentFormatter = sap.ui.core.format.NumberFormat.getPercentInstance({
                style: 'short',
                minFractionDigits: fractionalDigits,
                maxFractionDigits: fractionalDigits,
                showScale: true
            });

            return percentFormatter.format(percentNumber);
        }
    };

    sap.ovp.cards.AnnotationHelper.isPresentationVarientPresent = function (oPresentationVariant) {
        if (oPresentationVariant && oPresentationVariant.GroupBy && !(jQuery.isEmptyObject(oPresentationVariant.GroupBy)) && oPresentationVariant.GroupBy[0].hasOwnProperty('PropertyPath')) {
            return true;
        } else {
            return false;
        }
    };

    /*
     * Reads groupBy from annotation and prepares comma separated list
     */
    sap.ovp.cards.AnnotationHelper.listGroupBy = function (oPresentationVariant) {
        var result = "";
        var bPV = oPresentationVariant && oPresentationVariant.GroupBy;
        if (!bPV) {
            return result;
        }

        var metaModel = this.getModel('ovpCardProperties').getProperty("/metaModel");
        var oEntityType = this.getModel('ovpCardProperties').getProperty("/entityType");
        var groupByList;

        if (oPresentationVariant.GroupBy.constructor === Array) {
            groupByList = oPresentationVariant.GroupBy;
        } else if (!oPresentationVariant.GroupBy.Collection) {
            return result;
        } else {
            groupByList = oPresentationVariant.GroupBy.Collection;
        }

        var propVal;
        jQuery.each(groupByList, function () {

            propVal = getLabelForEntityProperty(metaModel, oEntityType, this.PropertyPath);
            if (!propVal) {
                return;
            }

            result += propVal;
            result += ", ";
        });
        if (result[result.length - 1] === " " && result[result.length - 2] === ",") {
            result = result.substring(0, result.length - 2);
        }
        return result == "" ? "" : sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("By", [result]);
    };

    /*
     * returns the string for the filter-by values of the KPI Header
     * */
    sap.ovp.cards.AnnotationHelper.formTheFilterByString = function (iContext, oSelectionVariant, aAllSelVar) {

        var bAppend = true;
        var lastFilterIndex = aAllSelVar["SelectOptions"].length - 1;
        if (oSelectionVariant.PropertyName.PropertyPath === aAllSelVar["SelectOptions"][lastFilterIndex].PropertyName.PropertyPath) {
            bAppend = false;
        }
        oSelectionVariant = [oSelectionVariant];
        var oCardPropsModel = iContext.getSetting('ovpCardProperties');
        var oEntityType = oCardPropsModel.getProperty("/entityType");
        var oMetaModel = oCardPropsModel.getProperty("/metaModel");
        var aFilters = getFilters(oCardPropsModel, oSelectionVariant);
        if (aFilters.length == 0) {
            return "";
        }
        var sProp;
        var sTextPropKey;

        //Clean from Filter array all the filters with sap-text that the filter array contains there sap-text
            sProp = aFilters[0].path;
            sTextPropKey = getTextPropertyForEntityProperty(oMetaModel, oEntityType, sProp);

            //Check if there is sap-text, in case there is checks that the Filter array contains it
            if (sTextPropKey !== sProp) {
                return "";
        }
        // build the filter string
        var sFilter = generateStringForFilters(aFilters);
        if (bAppend === true) {
            return sFilter + ", ";
        }
        return sFilter;
    };

    sap.ovp.cards.AnnotationHelper.formTheIdForFilter = function (oSelectionVariant) {
        return oSelectionVariant.id;
    };

    /************************ METADATA PARSERS ************************/

    function generateStringForFilters(aFilters) {
        var aFormatterFilters = [];

        for (var i = 0; i < aFilters.length; i++) {
            aFormatterFilters.push(generateSingleFilter(aFilters[i]));
        }

        return aFormatterFilters.join(', ');
    }

    function generateSingleFilter(oFilter) {
        var bNotOperator = false;
        var sFormattedFilter = oFilter.value1;

        if (oFilter.operator[0] === "N") {
            bNotOperator = true;
        }

        if (oFilter.value2) {
            sFormattedFilter += " - " + oFilter.value2;
        }

        if (bNotOperator) {
            sFormattedFilter = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("kpiHeader_Filter_NotOperator", [sFormattedFilter]);
        }

        return sFormattedFilter;
    }

    /* Returns column name that contains the unit for the measure */
    // function getUnitColumn(measure, oEntityType) {
    // 	var tempUnit, properties = oEntityType.property;
    // 	for (var i = 0, len = properties.length; i < len; i++) {
    // 		if (properties[i].name == measure) {
    //               if (properties[i].hasOwnProperty("Org.OData.Measures.V1.ISOCurrency")) { //as part of supporting V4 annotation
    //                   return properties[i]["Org.OData.Measures.V1.ISOCurrency"].Path ? properties[i]["Org.OData.Measures.V1.ISOCurrency"].Path : properties[i]["Org.OData.Measures.V1.ISOCurrency"].String;
    //               } else if (properties[i].hasOwnProperty("Org.OData.Measures.V1.Unit")) {
    //                   tempUnit = properties[i]["Org.OData.Measures.V1.Unit"].Path ? properties[i]["Org.OData.Measures.V1.Unit"].Path : properties[i]["Org.OData.Measures.V1.Unit"].String;
    //                   if (tempUnit && tempUnit != "%") {
    //                       return tempUnit;
    //                   } else {
    //                       return null;
    //                   }
    //               } else if (properties[i].hasOwnProperty("sap:unit")) {
    //                   return properties[i]["sap:unit"];
    //               }
    // 			break;
    // 		}
    // 	}
    // 	return null;
    // }

    function getLabelForEntityProperty(oMetadata, oEntityType, sPropertyName) {
        return getAttributeValueForEntityProperty(oMetadata, oEntityType,
            sPropertyName, "com.sap.vocabularies.Common.v1.Label");
    }

    function getTextPropertyForEntityProperty(oMetamodel, oEntityType, sPropertyName) {
        return getAttributeValueForEntityProperty(oMetamodel, oEntityType,
            sPropertyName, "sap:text");
    }

    function getAttributeValueForEntityProperty(oMetamodel, oEntityType, sPropertyName, sAttributeName) {
        var oProp = oMetamodel.getODataProperty(oEntityType, sPropertyName);
        if (!oProp) {
            jQuery.sap.log.error("No Property Found for with Name '" + sPropertyName + " For Entity-Type '" + oEntityType.name + "'");
            return;
        }
        var oPropAttVal = oProp[sAttributeName];
        if (oPropAttVal) {
            if (sAttributeName === "com.sap.vocabularies.Common.v1.Label") {
                return oPropAttVal.String;
            }
            return oPropAttVal;
        }

        return oProp.name;
    }

    sap.ovp.cards.AnnotationHelper._criticality2state = criticality2state;
    sap.ovp.cards.AnnotationHelper._calculateCriticalityState = calculateCriticalityState;
    sap.ovp.cards.AnnotationHelper._calculateTrendDirection = calculateTrendDirection;
    sap.ovp.cards.AnnotationHelper._getPropertiesFromBindingString = getPropertiesFromBindingString;
    sap.ovp.cards.AnnotationHelper.sortCollectionByImportance = sortCollectionByImportance;
    sap.ovp.cards.AnnotationHelper.formatterGeo.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.analyticRegions.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.criticalityType.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.labelText.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatField.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formThePathForTrendIcon.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formThePathForSubtitle.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formTheFilterByString.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getAggregateNumber.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getFirstDataFieldName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getSecondDataFieldName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getThirdDataFieldName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getFourthDataFieldName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getFifthDataFieldName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFirstDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatSecondDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatThirdDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFourthDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFifthDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatSixthDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getDataPointsCount.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getFirstDataPointName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getSecondDataPointName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getThirdDataPointName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFirstDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatSecondDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatThirdDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFirstDataPointState.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFirstDataPointColor.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.colorPaletteForComparisonMicroChart.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatSecondDataPointState.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatThirdDataPointState.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFirstDataPointStateForSmartField.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatKPIHeaderState.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatItems.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatUrl.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.hasActions.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getFirstDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatImageUrl.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getSecondDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.isFirstDataPointPercentageUnit.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.isFirstDataPointCriticality.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.isSecondDataPointCriticality.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.isThirdDataPointCriticality.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatDataFieldValueGeneric.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatDataPointStateGeneric.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.checkCriticalityGeneric.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.removeDuplicateDataField.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatDataPointStateForSmartFieldGeneric.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatsemanticObjectOfDataFieldGeneric.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.checkForSemanticObjectAnnotation.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getSortedDataPoints.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getSortedDataFields.requiresIContext = true;

}());

}; // end of sap/ovp/cards/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.generic.Component') ) {
(function() {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.generic.Component");
	jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

	
    
    

	sap.ui.core.UIComponent.extend("sap.ovp.cards.generic.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string"
				},
				"headerExtensionFragment": {
					"type": "string"
				},
				"contentPosition": {
					"type": "string",
					"defaultValue": "Middle"
				},
                "headerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.Header"
                },
				"footerFragment": {
					"type": "string"
				},
				"identificationAnnotationPath": {
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.Identification"
				},
				"selectionAnnotationPath": {
					"type": "string"
				},
				"filters": {
					"type": "object"
				},
				"addODataSelect": {
					"type": "boolean",
					"defaultValue": false
				}
			},
			version: "1.50.4",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [],
				components: []
			},
			config: {}
		},

		/**
		 * Default "abstract" empty function.
		 * In case there is a need to enrich the default preprocessor which provided by OVP, the extended Component should provide this function and return a preprocessor object.
		 * @public
		 * @returns {Object} SAPUI5 preprocessor object
		 */
		getCustomPreprocessor: function() {},

		getPreprocessors: function(pOvplibResourceBundle) {
			var oComponentData = this.getComponentData(),
				oSettings = oComponentData.settings,
				oModel = oComponentData.model,
				oMetaModel,
				oEntityType,
				oEntityTypeContext,
				oEntitySetContext;

			//Backwards compatibility to support "description" property
			if (oSettings.description && !oSettings.subTitle) {
				oSettings.subTitle = oSettings.description;
			}
			if (oModel) {
				oMetaModel = oModel.getMetaModel();
				if (oSettings.entitySet) {
					var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
					var sEntitySetPath = oMetaModel.getODataEntitySet(oSettings.entitySet, true);
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

					oEntitySetContext = oMetaModel.createBindingContext(sEntitySetPath);
					oEntityTypeContext = oMetaModel.createBindingContext(oEntityType.$path);
				}
			}

			var oCardProperties = this._getCardPropertyDefaults();
			var oCardLayoutData = this._completeLayoutDefaults(oCardProperties, oSettings);
            //To get Global Parameters
            var showDateInRelativeFormat;
            var disableTableCardFlexibility;
            if (oComponentData.appComponent && oComponentData.appComponent.getModel("ui") &&
                oComponentData.appComponent.getModel("ui").oData){
                showDateInRelativeFormat = oComponentData.appComponent.getModel("ui").oData.showDateInRelativeFormat;
                disableTableCardFlexibility = oComponentData.appComponent.getModel("ui").oData.disableTableCardFlexibility;
            } else {
                if (oComponentData.showDateInRelativeFormat) {
                    showDateInRelativeFormat = oComponentData.showDateInRelativeFormat;
                }
                if (oComponentData.disableTableCardFlexibility) {
                    disableTableCardFlexibility = oComponentData.disableTableCardFlexibility;
                }
            }
            var oAdditionalData = {
                metaModel: oMetaModel,
                entityType: oEntityType,
                webkitSupport: sap.ui.Device.browser.webkit,
                layoutDetail: oCardLayoutData && oCardLayoutData.cardLayout ? oCardLayoutData.cardLayout.containerLayout : 'fixed',
                showDateInRelativeFormat : showDateInRelativeFormat,
                disableTableCardFlexibility: disableTableCardFlexibility
            };
            if (!!oComponentData && !!oComponentData.cardId) {
                var oMainComponent = oComponentData.mainComponent;
                var oTemplate = null;
                if (!!oMainComponent) {
                    oTemplate = oMainComponent._getCardFromManifest(oComponentData.cardId) ? oMainComponent._getCardFromManifest(oComponentData.cardId).template : null;
                } else {
                    oTemplate = oComponentData.template;
                }
                if (!!oTemplate) {
                    oAdditionalData.template = oTemplate;
                }
            }
			//set the densityProperty for the card
			oCardProperties.densityStyle = sap.ovp.cards.CommonUtils._setCardpropertyDensityAttribute();
			if (oCardLayoutData) {
				oAdditionalData.cardLayout = oCardLayoutData.cardLayout;
			}

			/**
             * Setting selectionAnnotationPath, presentationAnnotationPath
             * annotationPath and chartAnnotationPath
             * using selectionPresentationAnnotationPath if
             * SelectionPresentationVariant is present in annotations
             */
           if (oCardProperties.state !== "Loading") {
              if (oSettings && oSettings.selectionPresentationAnnotationPath) {
                var oSelectionPresentationVariant = oEntityType[oSettings.selectionPresentationAnnotationPath];
                if (oSelectionPresentationVariant) {
                    var oSelectionVariantPath = oSelectionPresentationVariant.SelectionVariant && oSelectionPresentationVariant.SelectionVariant.Path;
                    if (oSelectionVariantPath) {
                        if (/^@/.test(oSelectionVariantPath)) {
                            oSelectionVariantPath = oSelectionVariantPath.slice(1);
                        }
                        oSettings.selectionAnnotationPath = oSelectionVariantPath;
                    }
                    var oPresentationVariantPath = oSelectionPresentationVariant.PresentationVariant && oSelectionPresentationVariant.PresentationVariant.Path;
                    if (oPresentationVariantPath) {
                        if (/^@/.test(oPresentationVariantPath)) {
                            oPresentationVariantPath = oPresentationVariantPath.slice(1);
                        }
                        oSettings.presentationAnnotationPath = oPresentationVariantPath;
                        var aVisualizations = oEntityType[oPresentationVariantPath].Visualizations;
                        var index;

                        /*
                        *   For annotationPath (LineItem) in Visualizations
                        * */
                        for (index = 0; index < aVisualizations.length; index++) {
                            var sVisualizations = aVisualizations[index].AnnotationPath;
                            if (sVisualizations) {
                                if (/^@/.test(sVisualizations)) {
                                    sVisualizations = sVisualizations.slice(1);
                                }
                                if (/.LineItem/.test(sVisualizations)) {
                                    oSettings.annotationPath = sVisualizations;
                                    break;
                                }
                            }
                        }

                        /*
                         *   For chartAnnotationPath (Chart) in Visualizations
                         * */
                        for (index = 0; index < aVisualizations.length; index++) {
                            var sVisualizations = aVisualizations[index].AnnotationPath;
                            if (sVisualizations) {
                                if (/^@/.test(sVisualizations)) {
                                    sVisualizations = sVisualizations.slice(1);
                                }
                                if (/.Chart/.test(sVisualizations)) {
                                    oSettings.chartAnnotationPath = sVisualizations;
                                    break;
                                }
                            }
                        }
                    }
                 }
              }
           }

            /*
            *   Static Id's for Selection Variant text in KPI Header
            * */

            if (!!oAdditionalData.entityType && !!oSettings.selectionAnnotationPath && !!oAdditionalData.entityType[oSettings.selectionAnnotationPath]) {
                var oSelectOptions = oAdditionalData.entityType[oSettings.selectionAnnotationPath].SelectOptions;
                for (var select = 0; !!oSelectOptions && select < oSelectOptions.length; select++) {
                    oSelectOptions[select].id = "headerFilterText--" + (select + 1);
                }
                oAdditionalData.entityType[oSettings.selectionAnnotationPath].SelectOptions = oSelectOptions;
            }

            /*
            *   Static Id's for LinkList Static Card having list Flavour Standard
            * */

            if (oAdditionalData.template === "sap.ovp.cards.linklist" && !!oSettings.staticContent) {
                for (var i = 0; i < oSettings.staticContent.length; i++) {
                    oSettings.staticContent[i].id = "linkListItem--" + (i + 1);
                }
            }

            if (oCardProperties.state && (oCardProperties.state === "Loading" || oCardProperties.state === "Error") && sap.ovp.cards.LoadingUtils.bPageAndCardLoading) {
                oCardProperties.footerFragment = "sap.ovp.cards.loading.LoadingContent";
            }

			oCardProperties = jQuery.extend(true, oAdditionalData, oCardProperties, oSettings);

			var oOvpCardPropertiesModel = new sap.ui.model.json.JSONModel(oCardProperties);
			//var ovplibResourceBundle = this.getOvplibResourceBundle();

			// device model
			var oDeviceModel = new sap.ui.model.json.JSONModel(sap.ui.Device);
			oDeviceModel.setDefaultBindingMode("OneWay");

			var oDefaultPreprocessors = {
				xml: {
					bindingContexts: {
						entityType: oEntityTypeContext,
						entitySet: oEntitySetContext
					},
					models: {
						device: oDeviceModel,
						entityType: oMetaModel,
						entitySet: oMetaModel,
						ovpMeta: oMetaModel,
						ovpCardProperties: oOvpCardPropertiesModel,
						ovplibResourceBundle: pOvplibResourceBundle
					},
					ovpCardProperties: oOvpCardPropertiesModel,
					dataModel: oModel,
					_ovpCache: {}
				}
			};

			return jQuery.extend(true, {}, this.getCustomPreprocessor(), oDefaultPreprocessors);
		},

        _completeLayoutDefaults: function (oCardProperties, oSettings) {
            var oCardLayoutData = {},
                oComponentData = this.getComponentData(),
                oUiModel = null,
                oConfig = null,
                oDashboardUtil = null;
            if (oComponentData.appComponent) {
                oUiModel = oComponentData.appComponent.getModel("ui");
                oConfig = oComponentData.appComponent.getOvpConfig();
            }
            if (!oConfig) {
                return null;
            }
            if (oConfig.containerLayout === "resizable" && oComponentData.cardId && oCardProperties.contentFragment !== "sap.ovp.cards.quickview.Quickview") {
                oDashboardUtil = oComponentData.appComponent.getDashboardLayoutUtil();
                //in resizable card layout each card may contain layout data -> use this if available
                var aDashboardLayoutData = oUiModel.getProperty("/initialDashboardLayout");
                var sCardId = oComponentData.cardId;
                var oCardObj = oDashboardUtil.aCards.filter(function (item) {
                    return item.id === sCardId;
                });
                if (aDashboardLayoutData) {
                    var oCardDashboardLayoutData = aDashboardLayoutData[0].filter(function (item) {
                        return item.id === sCardId;
                    });
                    if (oCardDashboardLayoutData) {
                        oCardLayoutData.cardLayout = oCardDashboardLayoutData[0].dashboardLayout["C" + oDashboardUtil.dashboardLayoutModel.iColCount];
                    }
                } else {
                    oCardLayoutData.cardLayout = oCardObj[0].dashboardLayout;
                }
                oCardLayoutData.cardLayout.containerLayout = oConfig.containerLayout;
                oCardLayoutData.cardLayout.iRowHeightPx = oDashboardUtil.ROW_HEIGHT_PX;
                oCardLayoutData.cardLayout.iCardBorderPx = oDashboardUtil.CARD_BORDER_PX;
                oCardLayoutData.cardLayout.headerHeight = oCardObj[0].dashboardLayout.headerHeight;
            }
            return oCardLayoutData;
        },

		_getCardPropertyDefaults: function() {
			var oCardProperties = {};
			var oPropsDef = this.getMetadata().getAllProperties();
			var oPropDef;
			for (var propName in oPropsDef) {
				oPropDef = oPropsDef[propName];
				if (oPropDef.defaultValue !== undefined) {
					oCardProperties[oPropDef.name] = oPropDef.defaultValue;
				}
			}
			return oCardProperties;
		},

		getOvplibResourceBundle: function() {
			if (!this.ovplibResourceBundle) {
				var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ovp");
				this.ovplibResourceBundle = oResourceBundle ? new sap.ui.model.resource.ResourceModel({
					bundleUrl: oResourceBundle.oUrlInfo.url
				}) : null;
			}
			return this.ovplibResourceBundle;
		},

        /* Function to calculate the cache keys for the view
         * "useViewCache" is the manifest entry
         * @returns {array}
         * @private
         * */
        _getCacheKeys: function () {

            return; //Switch off view cache, remove this line to switch on again

            var oComponentData = this.getComponentData && this.getComponentData();
            var bIsObjectStream = oComponentData && oComponentData.settings &&
                oComponentData.settings.isObjectStream;
            //No cache required for object streams (quick view card)
            if (bIsObjectStream) {
                return;
            }

            var oModel = oComponentData && oComponentData.model;
            if (oModel) {
                var aCacheKeys = [];
                var pGetMetadataLastModified = oModel.metadataLoaded().then(function (mParams) {
                    var sCacheKey;
                    if (mParams && mParams.lastModified) {
                        sCacheKey = new Date(mParams.lastModified).getTime() + "";
                    } else {
                        jQuery.sap.log.error("No valid cache key segment last modification date provided by the OData Model");
                        sCacheKey = new Date().getTime() + ""; //to keep the application working the current timestamp is used
                    }
                    return sCacheKey;
                });

                aCacheKeys.push(pGetMetadataLastModified);

                var pGetAnnotationsLastModified = oModel.annotationsLoaded().then(function (mParams) {
                    var iCacheKey = 0;
                    if (mParams) {
                        for (var i = 0; i < mParams.length; i++) {
                            if (mParams[i].lastModified) {
                                var iLastModified = new Date(mParams[i].lastModified).getTime();
                                if (iLastModified > iCacheKey) {
                                    iCacheKey = iLastModified;
                                }
                            }
                        }
                    }
                    if (iCacheKey === 0) {
                        jQuery.sap.log.error("No valid cache key segment last modification date provided by OData annotations");
                        iCacheKey = new Date().getTime(); //to keep the application working the current timestamp is used
                    }
                    return iCacheKey + "";
                });
                aCacheKeys.push(pGetAnnotationsLastModified);
                return aCacheKeys;
            }
        },

		createContent: function() {
			var oComponentData = this.getComponentData && this.getComponentData();
			var oModel = oComponentData.model;
			var pOvplibResourceBundle;
			var oPreprocessors;

            var oMainComponent = oComponentData && oComponentData.mainComponent;
            var oModelViewMap = oMainComponent && oMainComponent.oModelViewMap;
            var sModelName = oComponentData && oComponentData.modelName;

            var fnCombineBatch = function () {
                if (oModel && sModelName) {
                    oModel.bIncludeInCurrentBatch = false;
                    if (oModelViewMap && sModelName && oModelViewMap[sModelName] && oModelViewMap[sModelName][oComponentData.cardId]) {
                        delete oModelViewMap[sModelName][oComponentData.cardId]; //delete view being processed from map
                        //After deleting the current view from model map, if there are other views attached
                        //to the model then include them in current batch
                        if (Object.keys(oModelViewMap[sModelName]).length > 0) {
                            oModel.bIncludeInCurrentBatch = true;
                        }
                    }
                }
            };

            if (oComponentData && oComponentData.mainComponent) {
				pOvplibResourceBundle = oComponentData.mainComponent._getOvplibResourceBundle();				
			} else {
				pOvplibResourceBundle = this.getOvplibResourceBundle();
			}
			oPreprocessors = this.getPreprocessors(pOvplibResourceBundle);

            var oViewConfig = {
                preprocessors: oPreprocessors,
                type: sap.ui.core.mvc.ViewType.XML,
                viewName: "sap.ovp.cards.generic.Card"
            };
            // Get the cache keys for the view, if present set the keys (async is
            // prerequisite for cached view)
            var aCacheKeys = this._getCacheKeys();
            if (aCacheKeys && aCacheKeys.length && aCacheKeys.length > 0) {
                oViewConfig.async = true;
                oViewConfig.cache = {
                    keys: aCacheKeys
                };
            }
			/**
			 * power user
			 * temp change
			 */
			var sLoadingOrErrorState = this._getCardPropertyDefaults().state;
			var sIdForCardView = oComponentData.cardId + (sLoadingOrErrorState ? sLoadingOrErrorState : "Original");
			if (!sLoadingOrErrorState) {
				sIdForCardView = sIdForCardView + (oComponentData.settings.selectedKey ? "_Tab" + oComponentData.settings.selectedKey : "");
			}

            if (!oViewConfig.async) {
                fnCombineBatch();
            }

            // if the card is for settings dialog, don't set an ID to the card view
            var oView = sap.ui.view(oComponentData.containerId === "dialogCard" ? undefined : sIdForCardView, oViewConfig);
            /**
			 * end
			 */

            //For async view creation, model read and request fire happens from
            //method onControllerConnected, so before this executes, insert some
            //custom code to handle model batch
            if (oViewConfig.async) {
                var fnOnControllerConnected = oView.onControllerConnected;
                oView.onControllerConnected = function () {
                    fnCombineBatch();
                    fnOnControllerConnected.apply(oView, arguments);
                };
            }

            oView.setModel(oModel);

			// check if i18n model is available and then add it to card view
			if (oComponentData.i18n) {
				oView.setModel(oComponentData.i18n, "@i18n");
			}
			oView.setModel(oPreprocessors.xml.ovpCardProperties, "ovpCardProperties");
			oView.setModel(pOvplibResourceBundle, "ovplibResourceBundle");
			
			return oView;
		}

	});

})();
}; // end of sap/ovp/cards/generic/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.image.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.image.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.image.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.image.Image"
                }
            },

            version: "1.50.4",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.image.Image"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/image/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.linklist.Component') ) {
(function() {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.linklist.Component");
	
	

	sap.ovp.cards.generic.Component.extend("sap.ovp.cards.linklist.Component", {
		// use inline declaration instead of component.json to save 1 round trip

		metadata: {
            properties: {
                /**
                 *  The default values for the properties, if they are not mentioned.
                 *  Example : If headerAnnotationPath is not mentioned in the manifest.json,
                 *  the path mentioned in the "defaultValue" property is used as default.
                 */
                
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.linklist.LinkList"
                },
                "communicationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.Communication.v1.Contact"
                },
                "headerAnnotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.HeaderInfo"
                },
                "identificationAnnotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.Identification"
                }
            },

			version: "1.50.4",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.linklist.LinkList"
					}
				}
			}
		},

		getCustomPreprocessor: function() {
		}
	});
})();
}; // end of sap/ovp/cards/linklist/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.list.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.list.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.list.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.list.List"
                },
                "annotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.LineItem"
                },
                "countHeaderFragment":{
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.CountHeader"
                },
                "headerExtensionFragment":{
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.KPIHeader"
                }
            },

            version: "1.50.4",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: ["sap.suite.ui.microchart"],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.list.List"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/list/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.loading.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.loading.Component");
    

    sap.ovp.cards.loading.State = {
        ERROR: "Error",
        LOADING: "Loading"
    };

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.loading.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "footerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.loading.LoadingFooter"
                },
                "state": {
                    "type": "string",
                    "defaultValue": sap.ovp.cards.loading.State.LOADING
                }
            },

            version: "1.50.4",

            library: "sap.ovp",
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.loading.Loading"
                    }
                }
            }

        }

    });
})();


}; // end of sap/ovp/cards/loading/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.map.Analytical.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.map.Analytical.Component");
	

	sap.ovp.cards.generic.Component.extend("sap.ovp.cards.map.Analytical.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.map.Analytical.AnalyticalMap"
				},
				"dataPointAnnotationPath": {
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.DataPoint"
				}
			},

			version: "1.50.4",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.ui.vbm" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.map.Analytical.AnalyticalMap"
					}
				}
			}
		}
	});
})();
}; // end of sap/ovp/cards/map/Analytical/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.map.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.map.Component");
	

	sap.ovp.cards.generic.Component.extend("sap.ovp.cards.map.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.map.GeographicalMap"
				},
				"geoLocationAnnotationPath": {
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.GeoLocation"
				},
				"annotationPath": {
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.Facets"
				}
			},

			version: "1.50.4",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.ui.vbm" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.map.GeographicalMap"
					}
				}
			}
		}
	});
})();
}; // end of sap/ovp/cards/map/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.quickview.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.quickview.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.quickview.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.quickview.Quickview"
                },
                "annotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.Facets"
                },
                "footerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.ActionsFooter"
                }
            },

            version: "1.50.4",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.quickview.Quickview"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/quickview/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.quickview.Quickview.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.quickview.Quickview.controller');
(function () {
    "use strict";
    /*global sap, jQuery */

    
    sap.ui.controller( "sap.ovp.cards.quickview.Quickview" , {
        onInit: function () {
            this.bCustomActionFlag = true;
        },

        //In the quickview card header, if either one of the texts is not present, the colon is removed
        onBeforeRendering: function(){
            var oHeaders = this.byId('ovpQuickviewCardHeader');
            if (oHeaders){
                var sText = oHeaders.getText();
                var sSub = sText.substring(0);
                if (sText[0] === ':'){
                    sSub = sText.substring(2);
                } else if (sText[sText.length - 2] === ':'){
                    sSub = sText.substring(0, sText.length - 2);
                }
                oHeaders.setText(sSub);
                var oCustomData = oHeaders.getCustomData();
                if (oCustomData){
                    for (var i = 0; i < oCustomData.length; ++i){
                        if (oCustomData[i].getProperty('key') === 'aria-label'){
                            oCustomData[i].setValue(sSub);
                        }   	
                    }
	            }
	        }
        },
        onAfterRendering: function(){
            jQuery( ".sapMQuickViewPage" ).attr( 'tabindex','0' );
            /**
             * The shotFirstActionInFooter flag is set in manifest.json. This is to avoid redundant navigation from Stack and Quickview cards.
             * If true, the first action in the footer of Quickview cards will be visible.
             * By default, it is false.
             */
            var oCardPropertiesModel = this.getCardPropertiesModel();
            var bShowFirstActionInFooter = oCardPropertiesModel.getProperty("/showFirstActionInFooter") ? oCardPropertiesModel.getProperty("/showFirstActionInFooter") : false;
            var oFooter = this.byId("ovpActionFooter");
            if ( !bShowFirstActionInFooter ) {
                if (oFooter) {
                    var aFooterBtns = oFooter.getContent();
                    if (aFooterBtns && aFooterBtns.length) {
                        for (var i = 0; i < aFooterBtns.length; i++) {
                            if (aFooterBtns[i] instanceof sap.m.Button) {
                                aFooterBtns[i].setVisible(false);
                                break;
                            }
                        }
                    }
                }
            }
            /*
                This is for Custom Actions
             */
            if (!!this.bCustomActionFlag) {
                var aCustomActions = oCardPropertiesModel.getProperty("/customActions");
                if (!!oFooter && !!aCustomActions && !!aCustomActions.length) {
                    for (var j = 0; j < aCustomActions.length; j++) {
                        var text = aCustomActions[j].text;
                        var oMainComponent = null;
                        if (this.getOwnerComponent() && this.getOwnerComponent().getComponentData()) {
                            oMainComponent = this.getOwnerComponent().getComponentData().mainComponent;
                        }
                        if (!!oMainComponent && !!text && !!aCustomActions[j].press) {
                            var press = oMainComponent.onCustomActionPress(aCustomActions[j].press);
                            if (typeof press === "function") {
                                var button = new sap.m.Button({
                                    text: text,
                                    press: press,
                                    type: "Transparent"
                                });
                                var bFirstActionFlag = oCardPropertiesModel.getProperty("/showFirstActionInFooter");
                                var iShift = (bFirstActionFlag) ? 0 : 1;
                                var iPosition = aCustomActions[j].position + iShift;
                                var iLength = oFooter.getContent().length;
                                if (iPosition < (1 + iShift) && iPosition > (iLength - 1)) {
                                    oFooter.addContent(button);
                                } else {
                                    oFooter.insertContent(button, iPosition);
                                }
                            }
                        }
                    }
                }
                this.bCustomActionFlag = false;
            }
        }

    });
})();

}; // end of sap/ovp/cards/quickview/Quickview.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.stack.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.stack.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.stack.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.stack.Stack"
                },
                "contentPosition": {
                    "type": "string",
                    "defaultValue": "Right"
                },
                "objectStreamCardsSettings" : {
                    "type": "object",
                    "defaultValue": {
                    }
                },
                "objectStreamCardsTemplate" : {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.quickview"
                },
                "objectStreamCardsNavigationProperty" : {
                    "type": "string"
                }
            },

            version: "1.50.4",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.stack.Stack"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/stack/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.stack.Stack.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.stack.Stack.controller');
(function () {
    "use strict";
    /*global sap, jQuery */
    
    

    sap.ui.controller("sap.ovp.cards.stack.Stack", {

        onInit: function () {

            //Assign click and keydown handler to right content of stack card to open the object stream
            var oVbox = this._oCard = this.getView().byId("stackContent");
            oVbox.addEventDelegate({
                onclick: this.openStack.bind(this),
                //when space or enter is pressed on stack card, we open ObjectStream
                onkeydown: function (oEvent) {
                    if (!oEvent.shiftKey && (oEvent.keyCode == 13 || oEvent.keyCode == 32)) {
                        oEvent.preventDefault();
                        this.openStack();
                    }
                }.bind(this)
            });

            //instantiate the objectStream this.oObjectStream
            this._createObjectStream();
        },

        onExit: function () {
            if (this.oObjectStream) {
                this.oObjectStream.destroy();
            }
        },

        addPlaceHolder: function (nTotalCardCount) {

            var oView = this.getView();
            var oCardPropsModel = oView.getModel("ovpCardProperties");
            var sObjectStreamCardsNavigationProperty = oCardPropsModel.getProperty("/objectStreamCardsNavigationProperty");
            var bStackFlavorAssociation = sObjectStreamCardsNavigationProperty ? true : false;
            // place holder card is relevant only for the regular Stack-Card flavor (not the AssociationSet flavor)
            if (!bStackFlavorAssociation) {
                //Check if we have navigate target, if there is create placeHolder card and set it
                var aNavigationFields = this.getEntityNavigationEntries();
                if (aNavigationFields.length > 0) {
                    var sAppName = aNavigationFields[0].label;
                    //var sObjectStreamTitle = this.oObjectStream.getTitle() ? this.oObjectStream.getTitle().getText() : "";
                    if (this.sPlaceHolderText == undefined) {
                        this.sPlaceHolderText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("PlaceHolder_default");
                    }
                    var oPlaceHolder = this._createPlaceHolder(nTotalCardCount, this.sPlaceHolderText, sAppName);
                    var that = this;

                    oPlaceHolder.addEventDelegate({
                        onclick: function () {
                            that.doNavigation(null);
                        }
                    });

                    this.oObjectStream.setPlaceHolder(oPlaceHolder);
                }
            }
        },

        onAfterRendering: function () {

            if (this.bSetErrorState && this.bSetErrorState === true) {
                this.setErrorState();
                return;
            }

            var oView = this.getView();

            //this.oObjectStream may not always be created depending on bStackFlavorAssociation.
            //See _createObjectStream() where it checks for bStackFlavorAssociation for more details.
            //And if there is no object stream, there is no need for placeholder.
            if (this.oObjectStream) {
                var oListBinding = this.oObjectStream.getBinding("content");
                oListBinding.attachDataRequested(function () {
                  // making the stack card count hidden when the model is refreshed
                  if (this.getView().byId('stackSize') !== undefined && this.getView().byId('stackTotalSize') !== undefined) {
                    jQuery(this.getView().byId('stackSize').getDomRef()).css('visibility', 'hidden');
                    jQuery(this.getView().byId('stackTotalSize').getDomRef()).css('visibility', 'hidden');
                  }
                }, this);
                oListBinding.attachDataReceived(function () {
                    var category = this.getView().getModel("ovpCardProperties").getObject("/category"),
                        nCardCount = oListBinding.getCurrentContexts().length,
                        nTotalCardCount = oListBinding.getLength();
                    oView.byId("stackSize").setText(nCardCount);
                    oView.byId("stackTotalSize").setText(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Total_Size_Stack_Card", [nTotalCardCount]));
                    var stackContentDomRef = this.getView().byId("stackContent").getDomRef();
                    jQuery(stackContentDomRef).attr("aria-label", sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("stackCardContent", [nCardCount, nTotalCardCount, category]));
                    var stackSizeDomRef = this.getView().byId("stackSize").getDomRef();
                    jQuery(stackSizeDomRef).attr("aria-label", sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("stackCard", [nCardCount]));

                    this.addPlaceHolder(nTotalCardCount);
                    // making the stack card count visible when the model data is received
                    if (this.getView().byId('stackSize') !== undefined && this.getView().byId('stackTotalSize') !== undefined) {
                      jQuery(this.getView().byId('stackSize').getDomRef()).css('visibility', 'visible');
                      jQuery(this.getView().byId('stackTotalSize').getDomRef()).css('visibility', 'visible');
                    }

                    var oCardRef = this.getView().getDomRef();
                    var stackContainer = jQuery(oCardRef).find('.sapOvpCardContentContainer');
                    // Adding navigation css to the right container of the stack card if the total count is not zero
                    if (nTotalCardCount !== 0) {
                        if (stackContainer.length !== 0) {
                            stackContainer.addClass('sapOvpCardNavigable');
                        }
                    }
                    else {
                        // removing role = button from the card when there is no object stream to open
                        if (stackContainer.length !== 0) {
                            var stackContainerButton = stackContainer.find("[role='button']");
                            if (stackContainerButton.length !== 0) {
                                stackContainerButton.removeAttr("role");
                            }
                        }
                    }

                }, this);

                this.addPlaceHolder("");

                // If the web request is successful before the handler is assigned we do the below call.
                if (oListBinding.bPendingRequest === false) {
                    oListBinding.fireDataReceived();
                }

                if (this.checkNavigation()) {
                  this.oObjectStream.getTitle().addStyleClass('sapOvpCardNavigable');
                }
            }

        },

        /**
         * The object stream was being created in onAfterRendering. This logic has been updated to start from onInit for performance enhancements.
         * Currently under testing. Do not push to production.
         * @private
         */
        _createObjectStream: function () {

            //return if already created
            if (this.oObjectStream instanceof sap.ovp.ui.ObjectStream) {
                return;
            }

            var oOwnerComponent = this.getOwnerComponent();
            var oComponentData = oOwnerComponent.getComponentData && oOwnerComponent.getComponentData();
            var pOvplibResourceBundle;
            var oPreprocessors;
            if (oComponentData.i18n) {
                var oi18n = oComponentData.i18n;
            }
            if (oComponentData && oComponentData.mainComponent) {
                pOvplibResourceBundle = oComponentData.mainComponent._getOvplibResourceBundle();
            } else {
                pOvplibResourceBundle = oOwnerComponent.getOvplibResourceBundle();
            }
            oPreprocessors = oOwnerComponent.getPreprocessors(pOvplibResourceBundle);

            var oModel = oComponentData.model;
            var oCardPropsModel = oPreprocessors.xml.ovpCardProperties;
            var sEntitySet = oCardPropsModel.getProperty("/entitySet");
            var oObjectStreamCardsSettings = oCardPropsModel.getProperty("/objectStreamCardsSettings");
            var oMetaModel = oModel.getMetaModel();
            var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
            var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

            //in order to support auto expand, the annotationPath property contains a "hint" to the
            //annotaionPath of the stack card content. There might be more then 1 annotationPath value due to support of Facets
            var sAnnotationPath = oCardPropsModel.getProperty("/annotationPath");
            var aAnotationPath = (sAnnotationPath) ? sAnnotationPath.split(",") : [];
            var oAppComponent, oOwner, oGlobalFilter;
            if (oComponentData) {
                oAppComponent = oComponentData.appComponent;
                oOwner = oComponentData.mainComponent;
            }
            if (oOwner) {
                oGlobalFilter = oOwner.getView().byId("ovpGlobalFilter");
            }
            function getSetting(sKey) {
                if (sKey === "ovpCardProperties") {
                    return oCardPropsModel;
                } else if (sKey === "dataModel") {
                    return oModel;
                } else if (sKey === "_ovpCache") {
                    return {};
                }
            }

            var aFormatItemsArguments = [{
                getSetting: getSetting,
                bDummyContext: true
            }, oEntitySet].concat(aAnotationPath);
            var sBindingInfo = sap.ovp.cards.AnnotationHelper.formatItems.apply(this, aFormatItemsArguments);
            var oBindingInfo = sap.ui.base.BindingParser.complexParser(sBindingInfo);

            var sObjectStreamCardsNavigationProperty = oCardPropsModel.getProperty("/objectStreamCardsNavigationProperty");
            var bStackFlavorAssociation = sObjectStreamCardsNavigationProperty ? true : false;
            var oStackFilterMapping;
            var sObjectStreamCardsTemplate = oCardPropsModel.getProperty("/objectStreamCardsTemplate");


            // if we are in the association-flavor scenario we need to determine bot filter AND entity set for the object stream cards
            if (bStackFlavorAssociation) {
                if (sObjectStreamCardsTemplate === "sap.ovp.cards.quickview") {
                    jQuery.sap.log.error("objectStreamCardsTemplate cannot be 'sap.ovp.cards.quickview' when objectStreamCardsNavigationProperty is provided");
                    this.bSetErrorState = true;
                    //this.setErrorState();
                    return;
                }

                oStackFilterMapping = this._determineFilterPropertyId(oModel, oEntitySet, oEntityType, sObjectStreamCardsNavigationProperty);
                oObjectStreamCardsSettings.entitySet = oModel.getMetaModel().getODataAssociationSetEnd(oEntityType, sObjectStreamCardsNavigationProperty).entitySet;
            } else {
                if (sObjectStreamCardsTemplate !== "sap.ovp.cards.quickview") {
                    jQuery.sap.log.error("objectStreamCardsTemplate must be 'sap.ovp.cards.quickview' when objectStreamCardsNavigationProperty is not provided");
                    this.bSetErrorState = true;
                    //this.setErrorState();
                    return;
                }

                /**
                 * We are in the regular scenario (QuickView cards for collection entities).
                 * Check if a separate identification annotation has been added for the object stream.
                 */
                var sIdentificationPath = null;
                var sIdentificationAnnotationPath = oCardPropsModel.getProperty("/identificationAnnotationPath");
                var aIdentificationPath = (sIdentificationAnnotationPath) ? sIdentificationAnnotationPath.split(",") : [];
                if (aIdentificationPath && aIdentificationPath.length > 1) {
                    sIdentificationPath = aIdentificationPath[1];
                }

                if (sIdentificationPath) {
                    oObjectStreamCardsSettings.identificationAnnotationPath = sIdentificationPath;
                }

                if (oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"] &&
                    oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName &&
                    oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.String) {
                    oObjectStreamCardsSettings.title = oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.String;
                } else {
                    oObjectStreamCardsSettings.title = oEntityType.name;
                }
                oObjectStreamCardsSettings.entitySet = sEntitySet;
            }
            oObjectStreamCardsSettings.isObjectStream = true;
            oBindingInfo.factory = function (sId, oContext) {
                var oSettings = oObjectStreamCardsSettings, oFilters;
                if (bStackFlavorAssociation) {
                    oFilters = {
                        filters: [{
                            path: oStackFilterMapping.foreignKey,
                            operator: "EQ",
                            value1: oContext.getProperty(oStackFilterMapping.key)
                        }]
                    };
                    oSettings = jQuery.extend(oFilters, oObjectStreamCardsSettings);
                }

                var oComponentContainer = new sap.ui.core.ComponentContainer();
                var oComponentConfig = {
                    name: oCardPropsModel.getProperty("/objectStreamCardsTemplate"),
                    async: true,
                    componentData: {
                        cardId: sId,
                        model: oModel,
                        settings: oSettings,
                        appComponent: oAppComponent,
                        mainComponent: oOwner
                    }
                };
                // set the globalFilter property
                if (oGlobalFilter) {
                    oComponentConfig.componentData.globalFilter = {
                        getUiState: oGlobalFilter.getUiState.bind(oGlobalFilter)
                    };
                }
                sap.ui.component(oComponentConfig).then(function (oComponent) {
                    oComponent.setBindingContext(oContext);
                    if (oi18n) {
                        oComponent.setModel(oi18n, "@i18n");
                    }
                    oComponentContainer.setComponent(oComponent);

                    //Pass on the binding context to the inner component so that
                    //inner objectstream is filtered when filter applied
                    oComponentContainer.setBindingContext = function (oContext) {
                        oComponent.setBindingContext(oContext);
                    };
                });

                return oComponentContainer;
            };

            /**
             * The object stream title is an angregation to the object stream custom control.
             * Since we need to handle the navigation, we have the handler in the stack controller itself.
             */
            var sObjectStreamTitle = oCardPropsModel.getObject("/title");
            this.sPlaceHolderText = oCardPropsModel.getObject("/itemText");
            var oObjectStreamTitle = new sap.m.Link({
                text: sObjectStreamTitle,
                subtle: true,
                press: this.handleObjectStreamTitlePressed.bind(this)
            }).addStyleClass("sapOvpObjectStreamHeader");
            oObjectStreamTitle.addCustomData(new sap.ovp.ui.CustomData({
                key: "tabindex",
                value: "0",
                writeToDom: true
            }));
            oObjectStreamTitle.addCustomData(new sap.ovp.ui.CustomData({
                key: "aria-label",
                value: sObjectStreamTitle,
                writeToDom: true
            }));
            this.oObjectStream = new sap.ovp.ui.ObjectStream(this.getView().getId() + "_ObjectStream", {
                title: oObjectStreamTitle,
                content: oBindingInfo
            });
            //this.getView().addDependent(this.oObjectStream);
            this.oObjectStream.setModel(oModel);

        },

        _determineFilterPropertyId: function (oModel, oEntitySet, oEntityType, sNavigationProperty) {
            var oNavigationProperty, ns = oEntityType.namespace, sRelationshipName, oAssociation;

            // find the relevant navigation property on the entity type
            for (var i = 0; i < oEntityType.navigationProperty.length; i++) {
                if (oEntityType.navigationProperty[i].name === sNavigationProperty) {
                    oNavigationProperty = oEntityType.navigationProperty[i];
                    break;
                }
            }

            // find the Association ID / object which is the navigation property relationship member
            sRelationshipName = oNavigationProperty.relationship;
            oAssociation = sap.ovp.cards.AnnotationHelper.getAssociationObject(oModel, sRelationshipName, ns);

            // find the filter value for stack card - by looking at the Association Object
            var oRefs = oAssociation.referentialConstraint, filterMapping = {};
            if (oRefs) {
                filterMapping.foreignKey = oRefs.dependent.propertyRef[0].name;
                filterMapping.key = oRefs.principal.propertyRef[0].name;
                return filterMapping;
            }
        },

        _createPlaceHolder: function (nTotalCount, sPlaceHolderText, sAppName) {

            var iIcon = new sap.ui.core.Icon({
                src: "sap-icon://display-more",
                useIconTooltip: false,
                layoutData: new sap.m.FlexItemData({
                    alignSelf: sap.m.FlexAlignSelf.Center,
                    styleClass: "sapOvpStackPlaceHolderIconContainer"
                })
            });

            iIcon.addStyleClass("sapOvpStackPlaceHolderIcon");

            var countText = nTotalCount + " " + sPlaceHolderText;
            var strText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("SeeMoreContentAppName", [countText, sAppName]);
            var txtText = new sap.m.Text({
                text: strText,
                textAlign: "Center",
                layoutData: new sap.m.FlexItemData({
                    alignSelf: sap.m.FlexAlignSelf.Center,
                    maxWidth: "14rem"
                })
            });
            txtText.addCustomData(new sap.ovp.ui.CustomData({
                key: "role",
                value: "heading",
                writeToDom: true
            }));
            txtText.addCustomData(new sap.ovp.ui.CustomData({
                key: "aria-label",
                value: strText,
                writeToDom: true
            }));

            txtText.addStyleClass("sapOvpStackPlaceHolderTextLine");

            var oDivVbox = new sap.m.VBox({items: [txtText]});
            oDivVbox.addStyleClass("sapOvpStackPlaceHolderLabelsContainer");
            oDivVbox.addCustomData(new sap.ovp.ui.CustomData({
                key: "tabindex",
                value: "0",
                writeToDom: true
            }));
            oDivVbox.addCustomData(new sap.ovp.ui.CustomData({
                key: "role",
                value: "button",
                writeToDom: true
            }));

            var oVbox = new sap.m.VBox({items: [iIcon, oDivVbox]});
            oVbox.addStyleClass("sapOvpStackPlaceHolder");
            oVbox.addEventDelegate({
                //when space or enter is pressed on Placeholder, we trigger click
                onkeydown: function (oEvent) {
                    if (!oEvent.shiftKey && (oEvent.keyCode == 13 || oEvent.keyCode == 32)) {
                        oEvent.preventDefault();
                        oEvent.srcControl.$().click();
                    }
                }
            });
            return oVbox;
        },

        openStack: function () {
            if (this.oObjectStream) {
                var oListBinding = this.oObjectStream.getBinding("content");
                if (oListBinding.getCurrentContexts().length > 0) {
                    var cardWidth = this.getView().$().width();
                    this.getView().addDependent(this.oObjectStream);
                    this.oObjectStream.setModel(this.getView().getModel("@i18n"), "@i18n");
                    this.oObjectStream.open(cardWidth, this._oCard);
                }
            }
        },

        /**
         * Handler for press of object stream header.
         * @param oEvent
         */
        handleObjectStreamTitlePressed: function (oEvent) {
            /**
             * Object stream header follows the same navigation as the placeholder card.
             */
            this.doNavigation(null);
        }
    });
})();

}; // end of sap/ovp/cards/stack/Stack.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.table.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.table.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.table.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.table.Table"
                },
                "annotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.LineItem"
                },
                "countHeaderFragment":{
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.CountHeader"
                },
                "headerExtensionFragment":{
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.KPIHeader"
                }
            },

            version: "1.50.4",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.table.Table"
                    }
                }
            }
        }
    });
})();


}; // end of sap/ovp/cards/table/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.DashboardLayout') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/*global sap window*/
jQuery.sap.declare('sap.ovp.ui.DashboardLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/DashboardLayout",["jquery.sap.global", "sap/ovp/ui/DashboardLayoutUtil", "sap/ovp/library"
	],
	function(jQuery, DashboardLayoutUtil) {	
		"use strict";

		var DashboardLayout = sap.ui.core.Control.extend("sap.ovp.ui.DashboardLayout", {

			metadata: {
				designTime: true,
				library: "sap.ovp",
				aggregations: {
					content: {
						type: "sap.ui.core.Control",
						multiple: true,
						singularName: "content"
					}
				},
				defaultAggregation: "content",
				events: {
					afterRendering: {},
					afterDragEnds: {}
				},
				properties: {
					dragAndDropRootSelector: {
						group: "Misc",
						type: "string"
					},
					dragAndDropEnabled: {
						group: "Misc",
						type: "boolean",
						defaultValue: true
					},
					debounceTime: {
						group: "Misc",
						type: "int",
						defaultValue: 150
					}
				}
			},

			renderer: {

				render: function(oRm, oControl) {

					// get viewport width depending layout data
					var ctrlWidth = oControl.$().width();

					var oLayoutData = oControl.dashboardLayoutUtil.updateLayoutData(ctrlWidth ? ctrlWidth : jQuery(window).width());
					var aCards = oControl.dashboardLayoutUtil.getCards(oLayoutData.colCount);

					var filteredItems = oControl.getContent().filter(function(item) {
						return item.getVisible();
					});

					oRm.write("<div");
					oRm.writeControlData(oControl);
					oRm.addClass("sapUshellEasyScanLayout");
					if (!sap.ui.Device.system.phone) {
						oRm.addClass("sapOvpDashboardDragAndDrop");
					}
					oRm.addClass("sapOvpDashboard");
					oRm.writeClasses();
					oRm.addStyle("margin-left", oLayoutData.marginPx + "px");
					oRm.writeStyles();
					oRm.write(">");

					oRm.write("<div class='sapUshellEasyScanLayoutInner' tabindex='0'>");

					if (aCards.length > 0) {
						var card = {};
						filteredItems.forEach(function(item, index) {
							card = aCards.filter(function(element) {
								return element.id === this.getId().split("--")[1];
							}.bind(item))[0];

							//re-set css values for current card
							oControl.dashboardLayoutUtil.setCardCssValues(card);

                            if (card.template === "sap.ovp.cards.stack" || card.settings.stopResizing) {
                                oRm.write("<div id='" + oControl.dashboardLayoutUtil.getCardDomId(card.id) +
                                    //padding: 1rem; vs. border: 0.5rem solid transparent
                                "' class='easyScanLayoutItemWrapper sapOvpDashboardLayoutItem sapOvpDashboardLayoutItemNoDragIcon' style='" +
                                "; transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + " ,0px)" +
                                "; -ms-transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + " ,0px)" +
                                "; -moz-transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + " ,0px)" +
                                "; -webkit-transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + " ,0px)" +
                                "; height:" + card.dashboardLayout.height + "; width:" + card.dashboardLayout.width + ";'" +
                                " tabindex='0'; aria-setsize=" + filteredItems.length + " aria-posinset=" + index + ">");
                            } else if (!sap.ui.Device.support.touch) {
                                oRm.write("<div id='" + oControl.dashboardLayoutUtil.getCardDomId(card.id) +
                                    //padding: 1rem; vs. border: 0.5rem solid transparent
                                "' class='easyScanLayoutItemWrapper sapOvpDashboardLayoutItem' style='" +
                                "; transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + " ,0px)" +
                                "; -ms-transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + " ,0px)" +
                                "; -moz-transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + " ,0px)" +
                                "; -webkit-transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + ", 0px)" +
                                "; height:" + card.dashboardLayout.height + "; width:" + card.dashboardLayout.width + ";'" +
                                " tabindex='0'; aria-setsize=" + filteredItems.length + " aria-posinset=" + index + ">");
                            } else { //this is a workaround since UI5 do not yet provide a touch device information
                                oRm.write("<div id='" + oControl.dashboardLayoutUtil.getCardDomId(card.id) +
                                    //padding: 1rem; vs. border: 0.5rem solid transparent
                                "' class='easyScanLayoutItemWrapper sapOvpDashboardLayoutItem sapOvpDashboardLayoutItemTouch' style='" +
                                "; transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + " ,0px)" +
                                "; -ms-transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + " ,0px)" +
                                "; -moz-transform:translate3d(" + card.dashboardLayout.left + " ," + card.dashboardLayout.top + " ,0px)" +
                                "; -webkit-transform:translate3d(" + card.dashboardLayout.left + "," + card.dashboardLayout.top + ", 0px)" +
                                "; height:" + card.dashboardLayout.height + "; width:" + card.dashboardLayout.width + ";'" +
                                " tabindex='0'; aria-setsize=" + filteredItems.length + " aria-posinset=" + index + ">");
                            }

							oRm.renderControl(item);

							oRm.write("</div>");
						});
					}

					oRm.write("</div>");
					oRm.write("</div>");
				}
			},

			init: function() {
				this.oColumnLayoutData = {};
				this.resizeHandlerId = this.initResizeHandler();

				var oComponent = sap.ui.getCore().getComponent(this._sOwnerId);
				this.dashboardLayoutUtil = oComponent.getDashboardLayoutUtil();
				this.dashboardLayoutUtil.setLayout(this);
			},

			exit: function() {
				//de-register event handler
				if (this.resizeHandlerId) {
					sap.ui.core.ResizeHandler.deregister(this.resizeHandlerId);
				}
				//delete rearrange instance (incl. its ui actions)
				if (this.layoutDragAndDrop) {
					this.layoutDragAndDrop.destroy();
					delete this.layoutDragAndDrop;
				}
			},

			onBeforeRendering: function() {},

			onAfterRendering: function() {

				if (!this.getDragAndDropRootSelector()) {
					this.setDragAndDropRootSelector("#" + this.getId());
				}
				if (this.layoutDragAndDrop) {
					this.layoutDragAndDrop.destroy();
				}
				if (this.getDragAndDropEnabled()) {

					this.layoutDragAndDrop = this.dashboardLayoutUtil.getRearrange({
						rootSelector: this.getDragAndDropRootSelector(),
						layout: this
					});

					this.fireAfterRendering();
				}
			},

			/** 
			 * get the DashboardLayout variants in JSON format
			 * @method getLayoutVariantsJSON
			 * @returns {Object} JSON containing the layout variants
			 */
			getLayoutDataJSON: function() {
				//JSON.stringify(...?
				return this.dashboardLayoutUtil.getDashboardLayoutModel().getLayoutVariants4Pers();
			},

			getDashboardLayoutUtil: function() {
				return this.dashboardLayoutUtil;
			},

			getDashboardLayoutModel: function() {
				return this.dashboardLayoutUtil.getDashboardLayoutModel();
			},

			getVisibleLayoutItems: function() {
				//layout items could be hidden, so we filter them and receive only visible
				var content = this.getContent();
				var filteredItems = content.filter(function(item) {
					return item.getVisible();
				});
				return filteredItems;
			},

			initResizeHandler: function() {
				var resizeHandlerTimerId;
				var debounceTime = this.getDebounceTime();
				var resizeHandlerDebounce = function(evt) {
					window.clearTimeout(resizeHandlerTimerId);
					resizeHandlerTimerId = window.setTimeout(this.oControl.resizeHandler.bind(this, evt), debounceTime);
				};

				return sap.ui.core.ResizeHandler.register(this, resizeHandlerDebounce);
			},

			resizeHandler: function(evt) {
				this.oControl.dashboardLayoutUtil.resizeLayout(evt.size.width);
			}

		});

		return DashboardLayout;

	}, /* bExport= */
	true);
}; // end of sap/ovp/ui/DashboardLayout.js
if ( !jQuery.sap.isDeclared('sap.ovp.app.Main.controller') ) {
- /* global hasher */
jQuery.sap.declare('sap.ovp.app.Main.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.ODataUtils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.NavigationHandler'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ushell.ui.footerbar.AddBookmarkButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.BusyDialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartvariants.SmartVariantManagement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartvariants.PersonalizableInfo'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.state.UIState'); // unlisted dependency retained
jQuery.sap.require('sap.m.ColumnListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Switch'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Column'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ovp/app/Main.controller",["sap/ui/core/mvc/Controller", "sap/ui/model/odata/ODataUtils", "sap/ovp/cards/generic/Component", "sap/ui/generic/app/navigation/service/NavigationHandler",
        "sap/m/MessageBox", "sap/ovp/cards/CommonUtils", "sap/ushell/ui/footerbar/AddBookmarkButton", "sap/m/BusyDialog", "sap/ui/model/resource/ResourceModel",
        "sap/ui/model/Filter", "sap/ui/comp/smartvariants/SmartVariantManagement", "sap/ui/comp/smartvariants/PersonalizableInfo",
        "sap/ui/generic/app/navigation/service/SelectionVariant", "sap/ui/comp/state/UIState", "sap/m/ColumnListItem", "sap/m/Text", "sap/m/Switch", "sap/m/Table",
        "sap/m/Column", "sap/m/Button", "sap/m/Dialog", "sap/ui/model/json/JSONModel"],

    function (Controller, ODataUtils, Component, NavigationHandler, MessageBox, CommonUtils, AddBookmarkButton, BusyDialog, ResourceModel, Filter, SmartVariantManagement,
              PersonalizableInfo, SelectionVariant, UIState, ColumnListItem, Text, Switch, Table, Column, Button, Dialog, JSONModel) {

        "use strict";
        return Controller.extend("sap.ovp.app.Main", {

            // Extensions (Implemented in Extension Controller)
            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

            //Store custom data in oCustomData
            getCustomAppStateDataExtension: function (oCustomData) {
            },
            //Appstate will return the same oCustomData
            restoreCustomAppStateDataExtension: function (oCustomData) {
            },
            //Returns Filter object to be used in filtering
            getCustomFilters: function () {
            },
            //Returns Custom Action function
            onCustomActionPress: function(sCustomAction) {
            },
            //Returns Custom Parameters
            onCustomParams: function(sCustomParams) {
            },

            oRefreshTimer: null, // timer instance for auto refresh
            nRefreshInterval: 0, // auto refresh interval that is being set in the manifest
            filterItemInFocus : null,

            // Delta Changes
            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

            /**
             * Called by applyChange in flexibility.js of layout controls
             * dashboard or easyScan
             *
             * It is called for every change
             * So it will be called multiple times
             * The latest call will have the latest change
             *
             * Across all of main controller, making the incoming delta changes available
             */
            storeIncomingDeltaChanges: function(aCardsInfo) {
                this.deltaCardsInfo = aCardsInfo ? aCardsInfo : [];
            },

            // Standard Methods
            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            onInit: function () {

                // This flag is set if user has delta changes available.
                this.bDeltaChangesEnabled = false;
                this.oCardsModels = {};
                this.aFilters = [];
                /*For storing Batch Requests send status*/
                this.errorHandlingObject = {
                    atLeastOneRequestSuccess : false,
                    errorLoadingTimeout : {}
                };
                this.sPreviousEntityType = "";
                this.sCurrentEntityType = "";
                this.oLoadedComponents = {};
                this.bGlobalFilterLoaded = false;
                jQuery.sap.measure.start("ovp:GlobalFilter", "Main Controller init -> Global Filter loaded", "ovp");
                jQuery.sap.measure.start("ovp:Personalization", "Main Controller init -> Personalization loaded", "ovp");
                this.isInitialLoading = true;
                var oUIModel = this.getUIModel();
                this.oValueHelpMap = oUIModel && oUIModel.getProperty("/ValueHelpEntityMap");
                this._initFlexibilityPersonalization();

                this.oFlexibilityPersonalizationPromise.then(function() {
                    this._initSmartVariantManagement();
                }.bind(this));

                this.getLayout().addStyleClass("ovpLayoutElement");
                /* Appstate*/
                this.oState = {};
                this.oState.oSmartFilterbar = this.byId("ovpGlobalFilter");
                /* Appstate */
                this._initGlobalFilter();
                // Set model for tile
                this._createModelForTile();
            },

            recreateCard: function (sCardProperties) {
                var oCard = this._getCardFromManifest(sCardProperties.cardId);
                if (oCard.template == "sap.ovp.cards.charts.analytical") {
                    oCard.settings.chartAnnotationPath = sCardProperties.chartAnnotationPath;
                    oCard.settings.navigation = sCardProperties.navigation;
                }
                oCard.settings.annotationPath = sCardProperties.annotationPath;
                oCard.settings.dynamicSubtitleAnnotationPath = sCardProperties.dynamicSubtitleAnnotationPath;
                oCard.settings.presentationAnnotationPath = sCardProperties.presentationAnnotationPath;
                oCard.settings.selectionAnnotationPath = sCardProperties.selectionAnnotationPath;
                oCard.settings.selectionPresentationAnnotationPath = sCardProperties.selectionPresentationAnnotationPath;
                oCard.settings.dataPointAnnotationPath = sCardProperties.dataPointAnnotationPath;
                oCard.settings.identificationAnnotationPath = sCardProperties.identificationAnnotationPath;
                // headerAnnotationPath is a property added to the manifest.json for Qualifier support in HeaderInfo annotations.
                oCard.settings.headerAnnotationPath = sCardProperties.headerAnnotationPath;
                oCard.settings.selectedKey = sCardProperties.selectedKey;
                if (oCard) {
                    this.createLoadingCard(oCard);
                    oCard.settings.baseUrl = this._getBaseUrl();
                    this._clearStoredEntities(); //Clear previously temporarily stored entity types
                    this._initCardModel(oCard.model);
                    this._loadCardComponent(oCard.template);
                    this._createModelViewMap(oCard);
                    //this.createCard(oCard);
                    jQuery.when(this.createCard(oCard)).then(function () {
                        if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
                            var oDashboardUtil = this.getLayout().getDashboardLayoutUtil();
                            if (oDashboardUtil) {
                                var oDashBoardLayoutModel = oDashboardUtil.getDashboardLayoutModel();
                                var oDashboardCard = oDashBoardLayoutModel.getCardById(oCard.id);
                                oDashboardCard.dashboardLayout.autoSpan = false;
                                oDashboardUtil._sizeCard(oDashboardCard);
                                oDashBoardLayoutModel.extractCurrentLayoutVariant();
                            }
                        }
                    }.bind(this));
                }
                this.savePersonalization();

            },

            //clarify with UI5 Core: why can view models not be accessed in onInit?
            onBeforeRendering: function () {
            },

            onAfterRendering: function () {
                this.oModelViewMap = {};
                this.oAppStatePromise = null;
                // checking the refresh interval from the manifest and setting it in the global variable
                if (this.getView().getModel("ui").getProperty("/refreshIntervalInMinutes")) {
                    this.nRefreshInterval = this.getView().getModel("ui").getProperty("/refreshIntervalInMinutes");
                    /*
                     * if the refresh interval is less than 1 : setting it to 1
                     * else setting it as described in the manifest
                     * converting the minutes to milliseconds
                     */
                    this.nRefreshInterval = (this.nRefreshInterval <= 1 ? 1 : this.nRefreshInterval) * 60000;
                }

                /*To Hide the error page on the loading of application*/
                if (this.getView() && this.getView().byId('ovpErrorPage')) {
                    jQuery(this.getView().byId('ovpErrorPage').getDomRef()).hide();
                }
                //make sure we will not initialize more then ones
                if (this.initialized) {
                    return;
                }
                this.initialized = true;

                Promise.all([this.oFlexibilityPersonalizationPromise, this.oPersistencyVariantPromise]).then(function (oVariant) {
                    jQuery.sap.measure.end("ovp:Personalization");
                    this.persistencyVariantLoaded = true;
                    var oCard;
                    var cardsIntentWithIndex = [], cardsIntent = [];
                    this.aManifestOrderedCards = this._getCardArrayAsVariantFormat(this.getLayout().getContent());
                    //Merge LREP data
                    this.aOrderedCards = this._mergeLREPContent(this.aManifestOrderedCards, oVariant[1]);

                    //Check For Authorization
                    for (var counter = 0; counter < this.aOrderedCards.length; counter++) {
                        oCard = this._getCardFromManifest(this.aOrderedCards[counter].id);
                        if (oCard && oCard.settings && oCard.settings.requireAppAuthorization) {
                            cardsIntentWithIndex.push({
                                id: oCard.id,
                                cardIntent: oCard.settings.requireAppAuthorization
                            });
                            cardsIntent.push(oCard.settings.requireAppAuthorization);
                        }
                    }

                    if (cardsIntent.length > 0) {
                        this._checkForAuthorization(cardsIntentWithIndex, cardsIntent);
                    } else {
                        this.organizeCards(this.aOrderedCards);
                    }
                }.bind(this), function (err) {
                    jQuery.sap.log.error("Could not load information from LREP Persistency");
                    jQuery.sap.log.error(err);
                });
                if (sap.ui.Device.system.phone) {
                    jQuery.sap.require("sap.ovp.ui.SmartphoneHeaderToggle");
                    sap.ovp.ui.SmartphoneHeaderToggle.enable(this);
                }

                setTimeout(function () {
                    if (!this.persistencyVariantLoaded) {
                        this.busyDialog = new BusyDialog({
                            text: this._getLibraryResourceBundle().getText("loading_dialog_text")
                        });
                        this.busyDialog.open();
                        this.busyDialog.addStyleClass('sapOVPBusyDialog');
                    }
                }.bind(this), 500);
            },

            organizeCards: function (aOrderedCards) {

                var oCard;
                var aVisibleCards = [];
                this._updateLayoutWithOrderedCards();
                this._updateDashboardLayoutCards(aOrderedCards);
                if (this.isDragAndDropEnabled()) {
                    this._initShowHideCardsButton();
                }

                this._clearStoredEntities(); //Clear previously temporarily stored entity types

                for (var i = 0; i < this.aOrderedCards.length; i++) {
                    if (this.aOrderedCards[i].visibility) {
                        oCard = this._getCardFromManifest(this.aOrderedCards[i].id);
                        if (oCard) {
                            aVisibleCards.push(oCard);
                        }
                    }
                }

                for (var i = 0; i < aVisibleCards.length; i++) {
                    this._initCardModel(aVisibleCards[i].model);
                    this._loadCardComponent(aVisibleCards[i].template); 	//Load Card template files
                    this._createModelViewMap(aVisibleCards[i]);
                }

                jQuery.sap.measure.start("ovp:CreateLoadingCards", "Create Loading cards", "ovp");
                // First create the loading card
                for (var i = 0; i < aVisibleCards.length; i++) {
                    this.createLoadingCard(aVisibleCards[i]);
                }
                jQuery.sap.measure.end("ovp:CreateLoadingCards");

                // In order to add the below css class after second
                // layout rendering which caused by
                // this._updateLayoutWithOrderedCards()
                setTimeout(function () {
                    this.getLayout().addStyleClass(
                        "ovpLayoutElementShow");
                }.bind(this), 0);

                // Second load each card component and create the
                // card
                // We would like to wait for the loading cards
                // invocation
                setTimeout(
                    function () {
                        jQuery.sap.measure.start(
                            "ovp:CreateCards",
                            "Create cards loop", "ovp");
                        for (var i = 0, j = 0; j < aVisibleCards.length; i++, j++) {
                            // i --> index for ordered cards
                            // j --> index for visible cards

                            // If some cards are not visible, they will be missing in visible cards, but in same order
                            // This causes issue while setting selectedKey as the correct cards are not matched
                            // Hence, keep moving ahead by skipping through invisible cards in ordered cards until match is found
                            while (aVisibleCards[j].id !== aOrderedCards[i].id) {
                                i++;
                            }

                            oCard = aVisibleCards[j];

                            if (!oCard.settings.title) {
                                jQuery.sap.log
                                    .error("title is mandatory for card ID : "
                                    + oCard.id);
                            }
                            if (oCard.settings.tabs) {
                                var iIndex = 0;
                                if (this.aOrderedCards[i].selectedKey) {
                                    iIndex = this.aOrderedCards[i].selectedKey - 1;
                                }
                                this.initializeTabbedCard(
                                    oCard, iIndex);
                            }

                            oCard.settings.baseUrl = this._getBaseUrl();
                            //this._initCardModel(oCard.model);			//Loading shifted before for better performance
                            //this._loadCardComponent(oCard.template);	//Loading shifted before for better performance
                            this.createCard(oCard);
                        }
                        jQuery.sap.measure
                            .end("ovp:CreateCards");
                    }.bind(this), 10);

                if (this.busyDialog) {
                    this.busyDialog.close();
                }
            },

            /* Function to create a model vs view map
             *  @param object
             *  @private
             * */
            _createModelViewMap: function (oCard) {
                //Create model vs view map
                //Each model object contains view id as its property
                if (!oCard || !oCard.settings || !oCard.model) {
                    return;
                }
                //For cards with static content, model map is not required
                if (!oCard.settings.entitySet || oCard.settings.entitySet === "") {
                    return;
                }
                var sModelName = oCard.model;
                if (!this.oModelViewMap[sModelName]) {
                    this.oModelViewMap[sModelName] = {};
                }
                this.oModelViewMap[sModelName][oCard.id] = true;
            },

            initializeTabbedCard: function (oCard, iIndex) {
                if (oCard.template == "sap.ovp.cards.charts.analytical") {
                    oCard.settings.chartAnnotationPath = oCard.settings.tabs[iIndex].chartAnnotationPath;
                    oCard.settings.navigation = oCard.settings.tabs[iIndex].navigation;
                }
                oCard.settings.annotationPath = oCard.settings.tabs[iIndex].annotationPath;
                oCard.settings.dynamicSubtitleAnnotationPath = oCard.settings.tabs[iIndex].dynamicSubtitleAnnotationPath;
                oCard.settings.presentationAnnotationPath = oCard.settings.tabs[iIndex].presentationAnnotationPath;
                oCard.settings.selectionAnnotationPath = oCard.settings.tabs[iIndex].selectionAnnotationPath;
                oCard.settings.selectionPresentationAnnotationPath = oCard.settings.tabs[iIndex].selectionPresentationAnnotationPath;
                oCard.settings.dataPointAnnotationPath = oCard.settings.tabs[iIndex].dataPointAnnotationPath;
                oCard.settings.identificationAnnotationPath = oCard.settings.tabs[iIndex].identificationAnnotationPath;
                oCard.settings.params = oCard.settings.tabs[iIndex].params;
                oCard.settings.selectedKey = iIndex + 1;
            },

            _getLibraryResourceBundle: function () {
                if (!this.oLibraryResourceBundle) {
                    this.oLibraryResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ovp");
                }
                return this.oLibraryResourceBundle;
            },

            _getOvplibResourceBundle: function () {
                if (!this.ovplibResourceBundle) {
                    var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ovp");
                    this.ovplibResourceBundle = oResourceBundle ? new ResourceModel({
                        bundleUrl: oResourceBundle.oUrlInfo.url
                    }) : null;
                }
                return this.ovplibResourceBundle;
            },

            _getCardsModel: function () {
                if (!this.oCards) {
                    var oUIModel = this.getUIModel();
                    this.oCards = oUIModel.getProperty("/cards");
                }
                return this.oCards;
            },

            _getBaseUrl: function () {
                var oUIModel = this.getUIModel();
                if (!this.sBaseUrl) {
                    this.sBaseUrl = oUIModel.getProperty("/baseUrl");
                }
                return this.sBaseUrl;
            },

            _getCardFromManifest: function (sCardId) {
                var aCards = this._getCardsModel();
                for (var i = 0; i < aCards.length; i++) {
                    if (aCards[i].id === sCardId) {
                        return aCards[i];
                    }
                }

                return null;
            },

            _getCardArrayAsVariantFormat: function (aComponentContainerArray) {
                var aCards = [];

                for (var i = 0; i < aComponentContainerArray.length; i++) {
                    var sId = this._getCardId(aComponentContainerArray[i].getId());
                    aCards.push({
                        id: sId,
                        visibility: aComponentContainerArray[i].getVisible()
                    });
                    var iSelectedKey;
                    if (this.getView() && this.getView().byId) {
                        if (this.getView().byId(sId).getComponentInstance()) {
                            iSelectedKey = this.getView().byId(sId).getComponentInstance().getComponentData().settings.selectedKey;
                        }
                    }

                    if (iSelectedKey) {
                        aCards[aCards.length - 1].selectedKey = iSelectedKey;
                    }

                }
                return aCards;
            },

            _mergeCards: function (aLayoutCardsArray, oVariant) {
                var variantCardsArray = (oVariant && oVariant.cards) ? oVariant.cards : [];

                // if there are delta changes, use delta changes
                variantCardsArray = this.bDeltaChangesEnabled ? ( this.deltaCardsInfo ? this.deltaCardsInfo : [] ) : variantCardsArray;

                var oResult = [];
                var sCardId;
                var bCardVisibility;
                var iSelectedKey;
                var aLayoutCardsArr = (aLayoutCardsArray && aLayoutCardsArray.length) ? aLayoutCardsArray : [];

                //First, we insert into the oResult the cards from the variant which exist in the oLayoutCard:
                for (var i = 0; i < variantCardsArray.length; i++) {
                    bCardVisibility = variantCardsArray[i].visibility;
                    iSelectedKey = variantCardsArray[i].selectedKey;
                    for (var j = 0; j < aLayoutCardsArr.length; j++) {
                        sCardId = aLayoutCardsArr[j].id;
                        if (variantCardsArray[i].id === sCardId) {
                            oResult.push({
                                id: sCardId,
                                visibility: bCardVisibility
                            });
                            if (iSelectedKey) {
                                oResult[oResult.length - 1].selectedKey = iSelectedKey;
                            }
                            break;
                        }
                    }
                }

                //Second, we add additional cards from the current layout (fragment + manifest) into the end of the oResult
                for (var j = 0; j < aLayoutCardsArr.length; j++) {
                    var isFound = false;
                    sCardId = aLayoutCardsArr[j].id;
                    bCardVisibility = aLayoutCardsArr[j].visibility;
                    iSelectedKey = aLayoutCardsArr[j].selectedKey;
                    for (var i = 0; !isFound && i < oResult.length; i++) {
                        if (oResult[i].id === sCardId) {
                            isFound = true;
                        }
                    }

                    if (!isFound) {
                        oResult.push({
                            id: sCardId,
                            visibility: bCardVisibility
                        });
                        if (iSelectedKey) {
                            oResult[oResult.length - 1].selectedKey = iSelectedKey;
                        }
                    }
                }

                return oResult;
            },

            // We have all the cards so we check with isIntentSupported
            // if the user has the app within it’s roles and only display the card in this case.
            _checkForAuthorization: function (cardsIntentWithIndex, cardsIntent) {
                var that = this;
                var unsupportedCards = [];
                var oNavigationHandler = sap.ovp.cards.CommonUtils.getNavigationHandler();
                if (oNavigationHandler && oNavigationHandler.oCrossAppNavService) {
                    oNavigationHandler.oCrossAppNavService.isIntentSupported(cardsIntent).done(function (oResponse) {
                        for (var i = 0; i < cardsIntentWithIndex.length; i++) {
                            if (oResponse[cardsIntentWithIndex[i].cardIntent].supported === false) {
                                unsupportedCards.push(cardsIntentWithIndex[i].id);
                                for (var j = 0; j < that.aOrderedCards.length; j++) {
                                    if (cardsIntentWithIndex[i].id === that.aOrderedCards[j].id) {
                                        that.aOrderedCards.splice(j, 1);
                                        break;
                                    }
                                }
                            }
                        }
                        that.organizeCards(that.aOrderedCards);
                     // loop through the unsupported cards list and remove the card from the manifest ordered cards list
                        for (var k = 0; k < unsupportedCards.length; k++) {
                            for (var l = 0; l < that.aManifestOrderedCards.length; l++) {
                                if (that.aManifestOrderedCards[l].id == unsupportedCards[k]) {
                                    that.aManifestOrderedCards.splice(l, 1);
                                    if (that.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
                                        //If the card is not authorised remove from aCards of resizable layout
                                        that.getLayout().dashboardLayoutUtil.aCards.filter(function (item, index) {
                                            if (item.id === unsupportedCards[k]) {
                                                that.getLayout().dashboardLayoutUtil.aCards.splice(index, 1);
                                            }
                                        });
                                        //If the card is not authorised remove from the variant of resizable layout
                                        that.getLayout().dashboardLayoutUtil.dashboardLayoutModel.oLayoutVars.filter(function (item, index) {
                                            if (item.id === unsupportedCards[k]) {
                                                that.getLayout().dashboardLayoutUtil.dashboardLayoutModel.oLayoutVars.splice(index, 1);
                                            }
                                        });
                                    }
                                    break;
                                }
                            }
                        }

                    }).fail(function () {
                        jQuery.sap.log.error("Could not get authorization from isIntentSupported");
                        that.organizeCards(that.aOrderedCards);
                    });
                }
            },

            /**
             * _mergeLREPContent is called once in first onAfterRendering
             */
            _mergeLREPContent: function (aLayoutCardsArray, oLrepContent) {
                var aCards = [];
                var oUiModel = this.getUIModel();
                var oLayouts = {};
                /**
                 * this.bDeltaChangesEnabled is true only if the user has delta changes.
                 * If user does not have any delta changes saved, it means that the app has been loaded for the first time
                 * after the introduction of delta changes. In this case, we save oLrepContent as delta change immediately.
                 */
                if (this.bDeltaChangesEnabled) {
                    oLrepContent = this.deltaCardsInfo || [];
                } else {
                    this.savePersonalization();
                }
                if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
                    this._bDashboardLayoutLrepActive = true;
                    if (oLrepContent && oLrepContent.cards) {
                        oLayouts = oLrepContent.cards;
                        //ui model keeps manifest version in /dashboardLayout (for reset)
                        //update dashboardLayoutModel layout
                        this.getLayout().getDashboardLayoutModel().setLayoutVars(oLayouts);
                        //set card visibility
                        var aManifestCards = oUiModel.getProperty("/cards");
                        if (aManifestCards && oLayouts) {
                            aCards = this._initDashboardLayoutCardVisibility(aManifestCards, oLayouts, aLayoutCardsArray);
                        }
                        //set initial layout (required for initial card rendering)
                        oUiModel.setProperty("/initialDashboardLayout", [this.getLayout().getDashboardLayoutUtil().buildLayout(jQuery(window).width())]);
                    }
                    if (aCards.length === 0) {
                        //fallback to Fixed card Layout version
                        aCards = this._mergeCards(this.aManifestOrderedCards, []);
                    }
                } else {
                    aCards = this._mergeCards(this.aManifestOrderedCards, oLrepContent);
                }
                return aCards;
            },

            _initDashboardLayoutCardVisibility: function (aManifestCards, oLayoutCards, aLayoutCardsArray) {
                var aCards = [], sCardId, oLayoutCard = null, bVisible = true;
                for (var i = 0; i < aManifestCards.length; i++) {
                    sCardId = aManifestCards[i].id;
                    // in the first version the card visibility is same for all layout variants --> take the current variant
                    oLayoutCard = oLayoutCards.filter(function (item) {
                        return item.id === sCardId;
                    });
                    if (Array.isArray(oLayoutCard) && oLayoutCard.length > 0) {
                        bVisible = oLayoutCard[0].visibility;
                    }
                    aCards.push({
                        id: sCardId,
                        visibility: bVisible,
                        selectedKey: oLayoutCard[0].selectedKey
                    });
                }
                return aCards;
            },

            _updateLayoutWithOrderedCards: function () {
                var oLayout = this.getLayout();
                var aOrderedCards = this.aOrderedCards;
                oLayout.removeAllContent();
                var aCardsManifest, matchFound = false;
                if (this.getView().getModel("ui") && this.getView().getModel("ui").getProperty("/cards")) {
                    aCardsManifest = this.getView().getModel("ui").getProperty("/cards");
                    // Maybe this check could create issues once the RTA is enabled and Key User can Add and Remove cards
                    //if (aCardsManifest.length !== aOrderedCards.length) {
                    for (var i = 0; i < aCardsManifest.length; i++) {
                        matchFound = false;
                        for (var j = 0; j < aOrderedCards.length; j++) {
                            if (aCardsManifest[i].id == aOrderedCards[j].id) {
                                matchFound = true;
                                break;
                            }
                        }
                        /**In case there are cards in manifest but not displayed on UI due to missing authorization or other reasons then
                         their instance needs to be destroyed else they are recreated with same id's causing duplicate id issue.
                         Here we find such ComponentContainers which are present in manifest but not in displayed cards **/
                        if (!matchFound && this.getView().byId(aCardsManifest[i].id)) {
                            this.getView().byId(aCardsManifest[i].id).destroy();
                        }
                    }
                }

                for (var i = 0; i < aOrderedCards.length; i++) {
                    var oComponentContainer = this.getView().byId(aOrderedCards[i].id);
                    oComponentContainer.setVisible(aOrderedCards[i].visibility);
                    oLayout.addContent(oComponentContainer);
                }
            },

            _updateDashboardLayoutCards: function (aCards) {
                if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
                    if (this.getLayout().getDashboardLayoutUtil()) {
                        this.getLayout().getDashboardLayoutUtil().updateCardVisibility(aCards);
                    }
                }
            },

            _resetDashboardLayout: function () {
                if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
                    if (this.getLayout().getDashboardLayoutUtil()) {
                        this.getLayout().getDashboardLayoutUtil().resetToManifest();
                    }
                    this.getLayout().rerender();
                }
            },

            //Method to extract variants of the card for the resizable layout
            _getCardArrayAsVariantFormatDashboard: function () {
                var aCards = [];
                var oLayout = this.getLayout();
                var aCardsArray = oLayout.dashboardLayoutUtil.aCards;
                oLayout.dashboardLayoutUtil.dashboardLayoutModel._sortCardsByRow(aCardsArray);
                aCardsArray.forEach(function (element) {
                    aCards.push({
                        id: element.id,
                        visibility: element.dashboardLayout.visible
                    });
                });
                return aCards;
            },

            verifyGlobalFilterLoaded: function () {
                //Call search method of SFB. The SFB search method takes care to throw error
                //when validation fails. Else it triggers the search event from SFB.
                //Do a manual validation of mandatory fields and accordingly send true to resolve
                //the global filter loaded promise. If false is returned, then promise not resolved.
                var oGlobalFilter = this.getGlobalFilter();
                if (oGlobalFilter.search()) {
                    if (oGlobalFilter.validateMandatoryFields()) {
                        return true;
                    } 
                  }
                this.getView().byId("ovpMain").setHeaderExpanded(true);
                return false;
            },

            /**
             * Register to the filterChange event of the filter bar in order to mark that
             * one or more of the filters were changed
             */
            onGlobalFilterChange: function () {
                this.filterChanged = true;

                /* Appstate will be created only on filter search triger, so the
                below piece of code is now commented
                var oGlobalFilter = this.getGlobalFilter();
                if (oGlobalFilter && !oGlobalFilter.isDialogOpen()) {
                    this._storeCurrentAppStateAndAdjustURL();
                }*/
            },

            /**
             * Register to the search event of the filter bar in order to refresh all models
             * with the changes in the filter bar (if there are changes) when "go" is clicked
             */
            onGlobalFilterSearch: function () {

                if (this.filterChanged) {
                    var oGlobalFilter = this.getGlobalFilter();
                    if (oGlobalFilter && !oGlobalFilter.isDialogOpen()) {
                        this._storeCurrentAppStateAndAdjustURL();
                    }
                    this._clearStoredEntities(); //Clear previously temporarily stored entity types

                    // find the list of all the controls in the smart filter bar
                    var items = [];
                    if (this.oGlobalFilter['_aFields'].length > 0) {
                      items = this.oGlobalFilter["_aFields"];
                    } else {
                      var itemList = this.oGlobalFilter['_aFilterBarViewMetadata'];
                      for (var i = 0; i < itemList.length; i++) {
                        var itemGroup = itemList[i];
                        for (var j = 0; j < itemGroup.fields.length; j++) {
                          items.push(itemGroup.fields[j]);
                        }
                      }
                    }

                    // store the reference to the last focus element inside the smart filter bar
                    for (var i = 0; i < items.length; i++) {
                      if (items[i].control) {
                        var control = document.getElementById(items[i].control.sId);
                        if (jQuery(control).hasClass('sapMFocus')) {
                          this.filterItemInFocus = items[i].control;
                          break;
                        }
                      }
                    }

                    var sBatchGroupId = "ovp-" + new Date().getTime();
                    for (var modelKey in this.oCardsModels) {
                        if (this.oCardsModels.hasOwnProperty(modelKey)) {
                            try {
                            this.oCardsModels[modelKey].refresh(false, false, sBatchGroupId);
                            } catch (err) {
                                jQuery.sap.log.warning(err);
                        }
                    }
                    }
                    this.filterChanged = false;

                    this._clearStoredEntities(); //Clear previously temporarily stored entity types
                }
            },

            _clearStoredEntities: function () {

                if (this.sPreviousEntityType) {
                    this.sPreviousEntityType = "";
                }
                if (this.sCurrentEntityType) {
                    this.sCurrentEntityType = "";
                }
            },

            _processFilters: function () {

                this.aFilters = [];

                //Get filters from smart filter bar
                var oGlobalFilter = this.getGlobalFilter();

                //If Global filters not present, then skip processing
                if (!oGlobalFilter) {
                    return;
                }

                //Get filter data from smart filter bar
                var aFilters = oGlobalFilter.getFilters();

                //Start of Custom Filter Handling
                var oCustomFilter = this.getCustomFilters(); //Get filters from extension object
                if (oCustomFilter && (oCustomFilter instanceof sap.ui.model.Filter)) {

                    /* Remove the restriction that only SFB custom fields can come as value
                    of getCustomFilters
                    var aCustomFields = this.getVisibleCustomFields();

                    //Check which filters are valid respective to custom fields
                    //Mapping check not required, so send other fields as null
                    oCustomFilter = this._checkRelevantFiltersRecursive(aCustomFields, oCustomFilter, null, null, null, null);
                    */

                    if (oCustomFilter) {
                        var aCombinedFilters = [];

                        if (aFilters && aFilters.length > 0) {
                            aCombinedFilters.push(new Filter([aFilters[0], oCustomFilter], true));
                        } else {
                            aCombinedFilters.push(oCustomFilter);
                        }

                        if (aCombinedFilters.length > 0) {
                            aFilters = aCombinedFilters;
                        }
                    }
                }
                //End of Custom Filter Handling

                this.aFilters = aFilters;

            },

            _initGlobalFilter: function () {
                var oGlobalFilter = this.getGlobalFilter();
                if (!oGlobalFilter) {

                    //When application does not have any global filter, then this flag should not
                    //stop any normal processing that wait for global filter to be loaded
                    this.bGlobalFilterLoaded = true;

                    this._parseNavigationVariant();
                    jQuery.sap.measure.end("ovp:GlobalFilter");
                    return;
                }
                //When filter dialog is closed, take all filters, create appstate and update url
                oGlobalFilter.attachFiltersDialogClosed(this._storeCurrentAppStateAndAdjustURL.bind(this));

                var oVariantManagement = oGlobalFilter.getVariantManagement();
                if (oVariantManagement) {
                    //Attach a function which will be triggered after variant is saved
                    oVariantManagement.attachAfterSave(function(oEvent) {
                        //Update the url appstate with new saved variant
                        this._storeCurrentAppStateAndAdjustURL();
                    }.bind(this));
                }
                this.oGlobalFilterLoadedPromise = new Promise(function (resolve, reject) {

                    //After global filter is initialized (fully initialized)
                    oGlobalFilter.attachInitialized(function () {
                        //Parse navigation variant from the URL (if exists)
                        this._parseNavigationVariant();

                        if (this.oParseNavigationPromise) {
                            this.oParseNavigationPromise.done(function (oAppData, oURLParameters, sNavType) {
                                if (oAppData) {
                                    this._setNavigationVariantToGlobalFilter(oAppData, oURLParameters, sNavType);

                                    //Setting the navigation variants trigger filter change event, we do not want the
                                    //flag to be updated unless a user explicitly changes a filter
                                    this.filterChanged = false;
                                }
                            }.bind(this));
                            this.oParseNavigationPromise.fail(function () {
                                jQuery.sap.log.error("Could not parse navigation variant from URL");
                            });
                            this.oParseNavigationPromise.always(function () {
                                if (oGlobalFilter && this.verifyGlobalFilterLoaded()) {
                                    resolve();
                                }
                            }.bind(this));
                        } else {
                            if (oGlobalFilter && this.verifyGlobalFilterLoaded()) {
                                resolve();
                            }
                        }
                    }, this);

                    oGlobalFilter.attachSearch(function () {
                        //If user pressed GO, it means that the required field varification
                        //was allredy done by the globalFilter, therefore we can resolve the promise.
                        //This is needed in case some required field was empty and therefore the promise
                        //object was not resolved in the initial flow, we have to do it now after user
                        //set the filter

                        if (!this.bGlobalFilterLoaded) {
                            resolve();
                            this.bGlobalFilterLoaded = true;
                            if (!oGlobalFilter.isDialogOpen()) {
                                this._storeCurrentAppStateAndAdjustURL();
                            }

                            //At this point, search need not be triggered as cards are not created
                            //because oGlobalFilterLoadedPromise is not resolved
                            return;
                        }
                        this.onGlobalFilterSearch();

                    }, this);
                    oGlobalFilter.attachFilterChange(this.onGlobalFilterChange, this);
                }.bind(this));

                this.oGlobalFilterLoadedPromise.then(function (oVariant) {
                    this.bGlobalFilterLoaded = true;
                    jQuery.sap.measure.end("ovp:GlobalFilter");
                }.bind(this));
            },

            /* Function to display a popover providing the following options on clicking of Action button in Smart Filter Bar:
             * 1. Send as Email (Share the whole page)
             * 2. Create Tile on FLP
             */
            onShareButtonPress: function (oEvent) {
                var oLibraryResourceBundle = this._getLibraryResourceBundle();
                var oUIModel = this.getUIModel();
                var sTitle = oUIModel && oUIModel.getProperty("/title");
                if (!this._oShareActionButton) {
                   this._oShareActionButton = sap.ui.xmlfragment(
                      "sap.ovp.app.SharePage", {
                         shareEmailPressed: function () {
                            //Trigger email when 'Send Email' is clicked
                             sap.m.URLHelper.triggerEmail(null, oLibraryResourceBundle.getText("Email_Subject", [sTitle]), document.URL);
                         }.bind(this)
                      });
                   this.getView().addDependent(this._oShareActionButton);
                }
                this._oShareActionButton.openBy(oEvent.getSource());
             },
             
            /* Function to set tile information
             *  @private
             * */
             _createModelForTile: function() {
                 var oUIModel = this.getUIModel();
                 var sHash, sTitle = oUIModel && oUIModel.getProperty("/title");
                 var oTileInfo = {
                         tileTitle: sTitle,            //Set the title of the tile
                         tileCustomURL: function () {  //Set the URL that the tile should point to
                                 sHash = hasher.getHash();
                                 return sHash ? ("#"  +  sHash) : window.location.href;
                             }
                 }
                 if (oUIModel) {
                     //Bind the information of the tile to the model
                     oUIModel.setProperty("/tileInfo", oTileInfo);  
                }
            },

            _loadCardComponent: function (sComponentName) {
                if (!this.oLoadedComponents[sComponentName]) {
                    jQuery.sap.measure.start("ovp:CardComponentLoad:" + sComponentName, "Card Component load", "ovp");
                    this.oLoadedComponents[sComponentName] = sap.ui.component.load({
                        name: sComponentName,
                        url: jQuery.sap.getModulePath(sComponentName),
                        async: true
                    });
                    this.oLoadedComponents[sComponentName].then(function () {
                        jQuery.sap.measure.end("ovp:CardComponentLoad:" + sComponentName);
                    });
                }
            },

            _initCardModel: function (sCardModel) {
                var sendRelevantFiltersAsParameters = false;
                if (this.oCardsModels[sCardModel] || !sCardModel) {
                    return;
                }
                this.oCardsModels[sCardModel] = this.getView().getModel(sCardModel);
                if (!this.oCardsModels[sCardModel].bUseBatch) {
                    this.oCardsModels[sCardModel].setUseBatch(false);
                } else {
                    this.oCardsModels[sCardModel].setUseBatch(true);
                }
                if (this.getGlobalFilter()) {
                    sendRelevantFiltersAsParameters = true;
                }
                this._overrideCardModelRead(this.oCardsModels[sCardModel], sendRelevantFiltersAsParameters);
            },

            toggleFilterBar: function toggleFilterBar() {
                var oGlobalFilter = this.getGlobalFilter();

                function toOpenState(jqGlobalFilter, jqGlobalFilterWrapper, height) {
                    jqGlobalFilterWrapper.height(height);
                    jqGlobalFilter.css('top', 0);
                }

                function toCloseState(jqGlobalFilter, jqGlobalFilterWrapper, height) {
                    jqGlobalFilterWrapper.height(0);
                    jqGlobalFilter.css("top", "-" + height + "px");
                }

                var isVisible = oGlobalFilter.getVisible();

                if ((sap.ui.Device.system.phone) || (sap.ui.Device.system.tablet)) {
                    oGlobalFilter.setVisible(!isVisible);
                    return;
                }
                if (toggleFilterBar.animationInProcess) {
                    return;
                }
                toggleFilterBar.animationInProcess = true;

                if (isVisible) {
                    var jqGlobalFilter = jQuery(oGlobalFilter.getDomRef());
                    var jqGlobalFilterWrapper = jQuery(this.getView().byId("ovpGlobalFilterWrapper").getDomRef());
                    var height = jqGlobalFilterWrapper.height();
                    toOpenState(jqGlobalFilter, jqGlobalFilterWrapper, height);
                    jqGlobalFilterWrapper.height(); //make browser render css change
                    jqGlobalFilterWrapper.one('transitionend', function (e) {
                        oGlobalFilter.setVisible(false); //set filterbar invisible in case shell wants to reRender it
                        toggleFilterBar.animationInProcess = false;
                    });
                    toCloseState(jqGlobalFilter, jqGlobalFilterWrapper, height);
                } else {
                    oGlobalFilter.setVisible(true);
                    setTimeout(function () { //we need this to wait for globalFilter renderer
                        var jqGlobalFilter = jQuery(oGlobalFilter.getDomRef());
                        var jqGlobalFilterWrapper = jQuery(this.getView().byId("ovpGlobalFilterWrapper").getDomRef());
                        var height = jqGlobalFilter.outerHeight();
                        toCloseState(jqGlobalFilter, jqGlobalFilterWrapper, height);
                        jqGlobalFilterWrapper.height(); //make browser render css change
                        jqGlobalFilterWrapper.one('transitionend', function (e) {
                            jqGlobalFilterWrapper.css("height", "auto");
                            toggleFilterBar.animationInProcess = false;
                        });
                        toOpenState(jqGlobalFilter, jqGlobalFilterWrapper, height);
                    }.bind(this));
                }
            },

            /**
             * This function checks for custom fields in the filter bar that are
             * currently visible to user
             * @returns {object}
             * @public
             */
            getVisibleCustomFields: function () {

                var oGlobalFilter = this.getGlobalFilter();

                var aFilterItems = oGlobalFilter.getAllFilterItems(true);
                var iLen, oItem, aVisibleFields = [];

                if (aFilterItems) {
                    iLen = aFilterItems.length;
                    //loop through all the visible filter items and get their names
                    while (iLen--) {
                        oItem = aFilterItems[iLen];
                        if (oItem && oItem.getVisibleInFilterBar()) {
                            aVisibleFields.push(oItem.getName());
                        }
                    }
                }

                var iGroupCount, iFieldCount, aFields, aFilterBarViewMetadata = oGlobalFilter.getFilterBarViewMetadata();
                var aCustomFields = [];

                //aFilterBarViewMetadata contains a set of arrays, each array pointing to a group
                //of fields

                if (aFilterBarViewMetadata) {

                    iGroupCount = aFilterBarViewMetadata.length;

                    //loop through the groups
                    while (iGroupCount--) {

                        aFields = aFilterBarViewMetadata[iGroupCount].fields;
                        if (aFields) {

                            iFieldCount = aFields.length;

                            //loop through the fields
                            while (iFieldCount--) {

                                //If custom control property is defined and field is visible in filter bar, then add this field
                                if (aFields[iFieldCount].isCustomFilterField && aVisibleFields.indexOf(aFields[iFieldCount].fieldName) > -1) {
                                    aCustomFields.push({
                                        name: aFields[iFieldCount].fieldName
                                    });
                                }
                            }
                        }
                    }
                }

                return aCustomFields;
            },

            /* Function to Show error page or Hide error Page based on the parameter
            *  show : true then show the Error Page
            *  show : false Hide the Error Page
            *  @param boolean
            *  @private
            * */
            _showErrorPage: function (show) {
                if (this.getView() && this.getView().byId && this.getView().byId('ovpErrorPage')) {
                    var ovpErrorPage = jQuery(this.getView().byId('ovpErrorPage').getDomRef());
                    var ovpMainPage = jQuery(this.getView().byId('ovpMain').getDomRef());
                    if (show) {
                        ovpErrorPage.show();
                        ovpMainPage.hide();
                        return;
                    }
                    ovpErrorPage.hide();
                    ovpMainPage.show();
                }
            },

            /**
             * This function is serving two Purpose
             * 1. If sendRelevantFiltersInUrl is true : Then Overriding the read function of the oDataModel with a function
             *    that will first find the relevant filters from the filter bar and then will call the original
             *    read function with the relevant filters as parameters.
             * 2. Providing Additional functionality to capture success and failure callback to show error page if non of
             *    the requests gets successful.
             * @param oModel
             * @param boolean
             * @private
             */
            _overrideCardModelRead: function (oModel, sendRelevantFiltersAsParameters) {
                var fOrigRead = oModel.read;
                var that = this;
                oModel.read = function () {
                    if (sendRelevantFiltersAsParameters) {
                        //Process the filters from smart filter bar
                        that._processFilters();

                        var oGlobalFilter = that.getGlobalFilter();

                        if (!that.aFilters) {	//For initial load case
                            that.aFilters = [];
                        }

                        var bCheckEntity = false;

                        var oParameters = arguments[1];
                        if (!oParameters) {
                            oParameters = {};
                            Array.prototype.push.call(arguments, oParameters);
                        }
                        var oEntityType = that._getEntityTypeFromPath(oModel, arguments[0], oParameters.context, false);

                        that.sCurrentEntityType = oEntityType.entityType;

                        //If previous call and current call are for same entity, then need not do the
                        //same calculation again
                        if (that.sPreviousEntityType !== that.sCurrentEntityType) {
                            that.sPreviousEntityType = that.sCurrentEntityType;
                            bCheckEntity = true;
                        }

                        if (!that.aRelevantFilters) {	//For initial load case
                            that.aRelevantFilters = [];
                            bCheckEntity = true;
                        }

                        //If recalculation is required
                        //Case when a new entityset is encountered or on initial load
                        if (bCheckEntity) {

                            that.aRelevantFilters = [];

                            var bValueHelpEntity = false;
                            if (that.oValueHelpMap) {
                                if (that.oValueHelpMap.indexOf(oEntityType.entityType) != -1) {
                                    bValueHelpEntity = true;
                                }
                            }
                            if (oEntityType && !bValueHelpEntity) {
                                that.aRelevantFilters = that._getEntityRelevantFilters(oEntityType, that.aFilters,
                                                            oModel, oGlobalFilter.getModel());
                            }

                        }

                        if (that.aRelevantFilters && that.aRelevantFilters.length > 0) {
                            var foundIndex = -1;
                            var aUrlParams = oParameters.urlParameters;
                            if (aUrlParams) {
                                for (var index = 0; index < aUrlParams.length; index++) {
                                    // We use here lastIndexOf instead of startsWith because it doesn't work on safari (ios devices)
                                    if ((aUrlParams[index]).lastIndexOf("$filter=", 0) === 0) {
                                        foundIndex = index;
                                        break;
                                    }
                                }
                            }
                            if (foundIndex >= 0) {
                                aUrlParams[foundIndex] =
                                    aUrlParams[foundIndex] + "%20and%20" +
                                    sap.ui.model.odata.ODataUtils.createFilterParams(that.aRelevantFilters, oModel.oMetadata, oEntityType).substr(8);
                            } else {
                                oParameters.filters = that.aRelevantFilters;
                            }

                        }

                        //Process parameters
                        if (oGlobalFilter && oGlobalFilter.getConsiderAnalyticalParameters()) {

                            var sGlobalAnalyticalPath = oGlobalFilter.getAnalyticBindingPath();
                            var iIndexOf, sOldEntityPath, sNewEntityPath;

                            if (sGlobalAnalyticalPath && sGlobalAnalyticalPath.length > 0) {

                                //For entity mapped to global filter
                                if (oEntityType.name === oGlobalFilter.getEntityType()) {

                                    //arguments[0] contains entity path where parameter values need to be updated
                                    sOldEntityPath = arguments[0];
                                    iIndexOf = arguments[0].indexOf('$');
                                    if (iIndexOf > 0) {
                                        sOldEntityPath = arguments[0].substring(0, iIndexOf - 1);
                                    }
                                    sNewEntityPath = sGlobalAnalyticalPath;

                                    //Update entity path
                                    if (sOldEntityPath !== sNewEntityPath) {
                                        arguments[0] = arguments[0].replace(sOldEntityPath, sNewEntityPath);
                                    }

                                } else { //For entities, not mapped to global filter

                                    //From the entity parameter path, extract the parameters and their values
                                    var aEntityParams = that._getParametersFromEntityPath(arguments[0]);
                                    var aGlobalParams = that._getParametersFromEntityPath(sGlobalAnalyticalPath);
                                    var sMappedParameter, sRegEx, sMatch;

                                    //If current entity has params
                                    if (aEntityParams && aEntityParams.length > 0) {

                                        var oParameterEntity = that._getEntityTypeFromPath(oModel, arguments[0], oParameters.context, true);

                                        //Loop around the global filter parameters
                                        for (var i = 0; i < aGlobalParams.length; i++) {

                                            //Get the corresponding parameter of entity that matches global parameter
                                            sMappedParameter = that._getPropertyMapping(aEntityParams, aGlobalParams[i].name,
                                                                    oParameterEntity.name, oGlobalFilter.getEntityType(), oModel, oGlobalFilter.getModel());

                                            if (sMappedParameter) {

                                                //Expression can be of form "..P1=V1,.." or "..P1=V1)"
                                                //.* denotes any data
                                                //? if for non-greedy shortest search
                                                sRegEx = sMappedParameter + "=.*?,|" + sMappedParameter + "=.*?\\)";

                                                //slice(0,-1) is used to truncate the last character which is ',' or ')'
                                                sMatch = arguments[0].match(new RegExp(sRegEx));

                                                if (sMatch && sMatch.length > 0) {

                                                    sOldEntityPath = sMatch[0].slice(0, -1);
                                                    sNewEntityPath = sMappedParameter + "=" + aGlobalParams[i].sValue;

                                                    //Update entity path
                                                    if (sOldEntityPath !== sNewEntityPath) {
                                                        arguments[0] = arguments[0].replace(sOldEntityPath, sNewEntityPath);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    /*Storing old function in variable*/
                    var fOrigSuccess = arguments[1].success;
                    /*Appending success function with our custom code*/
                    /*Using IIFE to pass the context of function and the this(that) to the below function*/
                    arguments[1].success = (function (func, that) {
                        return function () {
                            /*Setting the variable to true if it was set to false*/
                            if (!that.errorHandlingObject.atLeastOneRequestSuccess) {
                                that.errorHandlingObject.atLeastOneRequestSuccess = true;
                                /*To Hide error page*/
                                that._showErrorPage(false);
                            }

                            // restoring the focus for the element that was in the focus when global filter was triggered
                            if (that.filterItemInFocus != null) {
                                that.filterItemInFocus.focus();
                                that.filterItemInFocus = null;
                            }

                            /*
                             * checking:
                             * if refresh interval is available and refresh timer is set
                             * resetting the timer and creating a new one with the refresh interval
                             * mentioned in the manifest
                             */

                            if (that.nRefreshInterval !== 0) {
                                if (that.oRefreshTimer !== null) {
                                    clearTimeout(that.oRefreshTimer);
                                }
                                that.attachRefreshInterval(that.nRefreshInterval);
                            }
                            return func.apply(this, arguments);
                        };
                    })(fOrigSuccess, that);

                    /*Storing old function in variable*/
                    var fOrigError = arguments[1].error;
                    /*Appending success function with our custom code*/
                    /*Using IIFE to pass the context of function and the this(that) to the below function*/
                    arguments[1].error = (function (func, that) {
                        return function () {
                            if (!that.errorHandlingObject.atLeastOneRequestSuccess) {
                                /*Clear earlier timeouts*/
                                clearTimeout(that.errorHandlingObject.errorLoadingTimeout);
                                /*Setting timeout as 9 sec after this request get failed,To find if all requests got failed*/
                                that.errorHandlingObject.errorLoadingTimeout = setTimeout(function () {
                                    if (!that.errorHandlingObject.atLeastOneRequestSuccess) {
                                        that._showErrorPage(true);
                                    }
                                }, 9000);
                            }
                            return func.apply(this, arguments);
                        };
                    })(fOrigError,that);
                    fOrigRead.apply(oModel, arguments);
                };
            },

            attachRefreshInterval : function(nRefreshInterval) {
                this.oRefreshTimer = setTimeout(function() {
                    for (var modelKey in this.oCardsModels) {
                        //console.log("refreshing : " + modelKey);
                        this.oCardsModels[modelKey].refresh(false, false);
                    }
                }.bind(this), nRefreshInterval);
            },

            /**
             * This is a temporary function used to retrieve the EntityType from a given path to an entity.
             * This function is required due to fact that the function _getEntityTypeByPath of the ODataMetadata is not public.
             * @param oModel
             * @param sPath
             * @param oContext
             * @returns {object}
             * @private
             */
            _getEntityTypeFromPath: function (oModel, sPath, oContext, bIsParameter) {
                //TODO need to request UI5 to have this a public API!!!!
                var sNormPath = sap.ui.model.odata.v2.ODataModel.prototype._normalizePath.apply(oModel, [sPath, oContext]);

                //For parameter entities,remove all parameters and then extract the actual
                //parameter entity name. If not done, then it will fetch result entity type
                if (bIsParameter) {
                    sNormPath = sPath.replace(/^\/|\/$/g, "").split("/")[0];
                    if (sNormPath.indexOf("(") != -1) {
                        sNormPath = sNormPath.substring(0,sNormPath.indexOf("("));
                    }
                }

                var oEntityType = sap.ui.model.odata.ODataMetadata.prototype._getEntityTypeByPath.apply(oModel.oMetadata, [sNormPath]);
                return oEntityType;
            },

            /**
             * This function takes a set of entity properties and tries to find a
             * match or a mapped property by comparing to a provided property name
             * @param aEntityProperties
             * @param sTargetProperty
             * @param sEntityname
             * @param sTargetEntityname
             * @param oEntityModel
             * @param oTargetModel
             * @returns {string}
             * @private
             */
            _getPropertyMapping: function (aEntityProperties, sTargetProperty, sEntityname, sTargetEntityname, oEntityModel, oTargetModel) {

                var i, sMappedProperty;

                //Check if entity property found with same name
                for (i = 0; i < aEntityProperties.length; i++) {
                    if (aEntityProperties[i].name === sTargetProperty) {
                        sMappedProperty = aEntityProperties[i].name;
                        return sMappedProperty;
                    }

                    //If direct match not found then check for fuzzy logic using "P_"
                    if ((("P_" + aEntityProperties[i].name) === sTargetProperty) ||
                        (aEntityProperties[i].name === ("P_" + sTargetProperty))){
                        sMappedProperty = aEntityProperties[i].name;
                        return sMappedProperty;
                    }

                }

                //sEntityname, sTargetEntityname and oModel are optional, if not passed annotation mapping will not be considered
                if (!sEntityname || !sTargetEntityname || !oEntityModel || !oTargetModel) {
                    return;
                }

                //If direct property not found, then check for mapped property

                var oEntity = oEntityModel.oMetadata._getEntityTypeByName(sEntityname);
                var oTargetEntity = oTargetModel.oMetadata._getEntityTypeByName(sTargetEntityname);

                if (!oEntity || !oTargetEntity) {
                    return;
                }

                var s_semantic_object = "com.sap.vocabularies.Common.v1.SemanticObject";
                var s_semantic_map = "com.sap.vocabularies.Common.v1.SemanticObjectMapping";

                var oEntityModelAnnotations = oEntityModel.oAnnotations.getAnnotationsData();
                if (!oEntityModelAnnotations || !oEntityModelAnnotations.propertyAnnotations) {
                    return;
                }
                var oEntityPropAnnotations = oEntityModelAnnotations.propertyAnnotations[oEntity.namespace + "." + oEntity.name];

                var oTargetModelAnnotations = oTargetModel.oAnnotations.getAnnotationsData();
                if (!oTargetModelAnnotations || !oTargetModelAnnotations.propertyAnnotations) {
                    return;
                }
                var oTargetPropAnnotations = oTargetModelAnnotations.propertyAnnotations[oTargetEntity.namespace + "." + oTargetEntity.name]; //Global filter entity annotations
                var oTargetPropAnnotation = oTargetPropAnnotations && oTargetPropAnnotations[sTargetProperty];

                //If annotations present for sTargetProperty, then only search entity annotations for a mapping
                if (!oTargetPropAnnotation || !oTargetPropAnnotation[s_semantic_object]) {
                    return;
                }

                var sPropertyKey, oEntityPropAnnotation, aMappedAnnotation, iMapCount, sLocalProperty;

                //Loop through annotations for each property in entity
                for (sPropertyKey in oEntityPropAnnotations) {

                      oEntityPropAnnotation = oEntityPropAnnotations[sPropertyKey];

                      //If entity current property and filter property annotations contain same semantic object
                      if (oEntityPropAnnotation[s_semantic_object] &&
                            oEntityPropAnnotation[s_semantic_object].String === oTargetPropAnnotation[s_semantic_object].String) {

                            aMappedAnnotation = oEntityPropAnnotation[s_semantic_map];

                            //If mapping not present
                            if (!aMappedAnnotation) {
                                  continue; //go to next loop
                            }

                            iMapCount = aMappedAnnotation.length;
                            sLocalProperty = "";

                            //Check all mappings for a match
                            while (iMapCount--) {
                                  if (aMappedAnnotation[iMapCount].SemanticObjectProperty.String === sTargetProperty) {
                                        sLocalProperty = aMappedAnnotation[iMapCount].LocalProperty.PropertyPath;
                                        break; //Match found
                                  }
                            }

                            //Local property found for entity
                            //Verify if property is present in entity before returning
                            if (sLocalProperty !== "") {
                                  for (i = 0; i < aEntityProperties.length; i++) {
                                        if (aEntityProperties[i].name === sLocalProperty) {
                                              sMappedProperty = aEntityProperties[i].name;
                                              return sMappedProperty;
                                        }
                                  }
                            }
                      }
                }

                return sMappedProperty;

            },

            /**
             * This function takes an entity path as input and breaks it into
             * parameters and values
             * @param sEntityPath
             * @returns {array}
             * @private
             */
            _getParametersFromEntityPath: function (sEntityPath) {

                var aEntityParams = [];

                //Check if some pattern present like "(parameterdata)"
                //'('and ')' are used with escape characters.
                //'.*' means any data
                if (/\(.*\)/.test(sEntityPath)) {

                    //Match and extract substring having pattern "(parameterdata)"
                    //Match returns an array, so take the first match from array
                    //Replace start and end bracket using slice()
                    //Remove any leading or lagging spaces
                    //Split string whenever a '=' or a ',' is encountered
                    //'=' separates params from values, and ',' separates two params
                    var aParamsAndValues = sEntityPath.match(/\(.*\)/)[0].slice(1, -1).trim().split(/\=|\,/);

                    //In aParamsAndValues, odd places contain param names and even places contain values
                    for (var i = 0; i < aParamsAndValues.length; i = i + 2) {
                        aEntityParams.push({
                            name: aParamsAndValues[i],
                            sValue: aParamsAndValues[i + 1]  //This value is URI encoded as we take it from URI path
                        });
                    }
                }

                return aEntityParams;
            },

            /**
             * This function recursively checks the nested filters and returns the relevant filters
             * that match any of the entity properties.
             * @param aEntityProperties
             * @param oFilterDetails
             * @param sEntityname
             * @param sTargetEntityname
             * @param oEntityModel
             * @param oTargetModel
             * @returns {object}
             * @private
             */
            _checkRelevantFiltersRecursive: function (aEntityProperties, oFilterDetails, sEntityname, sTargetEntityname, oEntityModel, oTargetModel) {

                if (!oFilterDetails._bMultiFilter) {	//End point of recursion (base case)

                    oFilterDetails.sPath = oFilterDetails.sPath.split('/').pop();

                    //Get the mapping property. This would return the same property name in case a match is found
                    //or else a property that is mapped in annotations. If nothing is found, then it returns null
                    var sMappedProperty = this._getPropertyMapping(aEntityProperties, oFilterDetails.sPath, sEntityname
                                                , sTargetEntityname, oEntityModel, oTargetModel);
                    if (sMappedProperty) {
                        oFilterDetails.sPath = sMappedProperty;
                        return oFilterDetails;
                    }

                } else {

                    //For multifilter cases, there are deep structures
                    var aDeepFilters = oFilterDetails.aFilters;
                    var oSelectedFilter, aSelectedFilters = [];

                    if (aDeepFilters) {

                        for (var i = 0; i < aDeepFilters.length; i++) {

                            //Get the relevant filter object for each internal filter
                            oSelectedFilter = this._checkRelevantFiltersRecursive(aEntityProperties, aDeepFilters[i], sEntityname
                                                , sTargetEntityname, oEntityModel, oTargetModel);
                            if (oSelectedFilter) {
                                aSelectedFilters.push(oSelectedFilter);
                            }
                        }
                        if (aSelectedFilters.length > 0) {
                            return (new Filter(aSelectedFilters, oFilterDetails.bAnd));
                        }
                    }
                }
            },

            /**
             * This function goes over the provided list of filters and checks which filter appears as a field
             * in the EntityType provided. The fields that appears in both lists  (filters and EntityType fields)
             * will be returned in an array.
             * @param oEntityType
             * @param aFilters
             * @param oEntityModel
             * @param oFilterModel
             * @returns {array}
             * @private
             */
            _getEntityRelevantFilters: function (oEntityType, aFilters, oEntityModel, oFilterModel) {

                var oReturnFilterWrap = [];

                if (aFilters.length > 0 && oEntityType) {
                    var oReturnFilter = this._checkRelevantFiltersRecursive(oEntityType.property, aFilters[0],
                                                oEntityType.name, this.getGlobalFilter().getEntityType(), oEntityModel, oFilterModel);

                    //Wrap the return filter in an array
                    if (oReturnFilter) {
                        oReturnFilterWrap.push(oReturnFilter);
                    }
                }
                return oReturnFilterWrap;
            },

            /*
             Check derived Card Component is implemented with respect to the below restrictions:

             Custom card must be instance of sap.ovp.cards.generic.Component. In other words, custom card must extend sap.ovp.cards.generic.Component.
             If sap.ovp.cards.generic.Card view is replaced by another custom View it means the custom card is not valid.
             [If the extended Component has customization (under the component metadata) and the sap.ovp.cards.generic.Card is replaced by another view (using sap.ui.viewReplacements)]
             If the extended Component overrides the createContent function of the base sap.ovp.cards.generic.Component class, the custom card is not valid.
             If the extended Component overrides the getPreprocessors function of the base sap.ovp.cards.generic.Component class, the custom card is not valid.

             */
            _checkIsCardValid: function (sCardTemplate) {
                var sComponentClassName = sCardTemplate + ".Component";
                var oComponentMetadata, oCustomizations;

                jQuery.sap.require(sComponentClassName);

                var oComponentClass = jQuery.sap.getObject(sComponentClassName);

                if (!oComponentClass) {
                    return false;
                }

                if ((oComponentClass !== sap.ovp.cards.generic.Component) && !(oComponentClass.prototype instanceof sap.ovp.cards.generic.Component)) {
                    return false;
                }

                if ((oComponentMetadata = oComponentClass.getMetadata()) && (oCustomizations = oComponentMetadata.getCustomizing())) {
                    //if OVP Card view was replaced
                    if (oCustomizations["sap.ui.viewReplacements"] && oCustomizations["sap.ui.viewReplacements"]["sap.ovp.cards.generic.Card"]) {
                        return false;
                    }
                }

                if (oComponentClass.prototype.createContent != sap.ovp.cards.generic.Component.prototype.createContent) {
                    return false;
                }

                if (oComponentClass.prototype.getPreprocessors != sap.ovp.cards.generic.Component.prototype.getPreprocessors) {
                    return false;
                }

                return true;
            },

            _createCardComponent: function (oView, oModel, card) {
                /**
                 * Tenperory change so that we can see the loading cards.
                 * Disabling creation of the original cards.
                 */
                //if (card.template && card.template !== "sap.ovp.cards.loading") {
                //    return;
                //}
                var sId = "ovp:CreateCard-" + card.template + ":" + card.id;
                jQuery.sap.measure.start(sId, "Create Card", "ovp");
                var oi18nModel = oView.getModel("@i18n");
                if (card.template && this._checkIsCardValid(card.template)) {
                    var oComponentConfig = {
                        async: true,
                        name: card.template,
                        componentData: {
                            model: oModel,
                            modelName: card.model,
                            i18n: oi18nModel,
                            cardId: card.id,
                            settings: card.settings,
                            appComponent: this.getOwnerComponent(),
                            mainComponent: this
                        }
                    };
                    var oGlobalFilter = this.getGlobalFilter();

                    if (oGlobalFilter) {
                        oComponentConfig.componentData.globalFilter = {
                            getUiState: oGlobalFilter.getUiState.bind(oGlobalFilter)
                        };
                    }

                    //Component creation will be done asynchronously
                    var oThatView = oView;
                    sap.ui.component(oComponentConfig).then(function (oComponent) {

                        var oComponentContainer = oThatView.byId(oComponent.getComponentData().cardId);
                        oComponentContainer.setPropagateModel(true);
                        var oOldCard = oComponentContainer.getComponentInstance();

                        //Add the card component to the container
                        oComponentContainer.setComponent(oComponent);

                        //Destroy any old card
                        if (oOldCard) {
                            //currently the old component is not destroyed when setting a different component
                            //so we need to do that in timeout to make sure that it will not be destroyed
                            //too early, before real card will be rendered on the screen.
                            setTimeout(function () {
                                oOldCard.destroy();
                            }, 0);
                        }

                    });
                } else {
                    // TODO: define the proper behavior indicating a card loading failure
                    jQuery.sap.log.error("Could not create Card from '" + card.template + "' template. Card is not valid.");
                }
                jQuery.sap.measure.end(sId);
            },

            createLoadingCard: function (card) {
                /*
                 * we have to make sure metadata and filter are loaded before we create the card
                 * so we first create loading card and once all promises will be resulved
                 * we will create the real card and replace the loading card
                 */
                var loadingCard = jQuery.extend(true, {}, card, {
                    template: "sap.ovp.cards.loading"
                });
                this._createCardComponent(this.getView(), undefined, loadingCard);
            },

            createCard: function (card) {
                var oView = this.getView();
                var oModel = oView.getModel(card.model);

                ///*
                // * we have to make sure metadata and filter are loaded before we create the card
                // * so we first create loading card and once all promises will be resulved
                // * we will create the real card and replace the loading card
                // */

                Promise.all([
                    oModel.getMetaModel().loaded(),
                    this.oGlobalFilterLoadedPromise,
                    this.oLoadedComponents[card.template]
                ]).then(
                    function () {
                        this._createCardComponent(oView, oModel, card);
                    }.bind(this),
                    function (reason) {
                        jQuery.sap.log.error("Can't load card with id:'" + card.id + "' and type:'" + card.template + "', reason:" + reason);
                    }
                );
            },

            /**
             * The function gets an UI5 generated id and returns the element original Id
             *
             * @param {string} generatedId - the UI5 generated id
             * @param {string} elementId - the element original  id
             */
            _getCardId: function (generatedId) {
                var appIdString = this.getView().getId() + "--";
                if (generatedId.indexOf(appIdString) != -1) {
                    var start = generatedId.indexOf(appIdString) + appIdString.length;
                    return generatedId.substr(start);
                }
                return generatedId;
            },

            _initFlexibilityPersonalization: function () {
                this.oFlexibilityPersonalizationPromise = new Promise(function(resolve, reject) {
                    var oLayout = this.getLayout();
                    var oFlexControllerFactory = sap.ui.fl.FlexControllerFactory;
                    this.oFlexController = oFlexControllerFactory.createForControl(oLayout);
                    // ensure getting the changes and only then proceed forward
                    this.oFlexController.getComponentChanges().then(function(aChanges) {
                        if (aChanges.length > 0) {
                            this.bDeltaChangesEnabled = true;
                        }
                        resolve();
                    }.bind(this), function(oError) {
                        // No Lrep
                        // We resolve even in error scenario as the changes will be fetched from Vaiant
                        // TODO: Check from UX for error handling if message is to be shown on UI.
                        resolve();
                    }.bind(this));
                }.bind(this));
            },

            _initSmartVariantManagement: function () {
                if (!this.bDeltaChangesEnabled) {
                    var oPersistencyControl = this._createPersistencyControlForSmartVariantManagement();
                    var oOVPVariantInfo = new PersonalizableInfo({
                        type: "OVPVariant",
                        keyName: "persistencyKey",
                        control: oPersistencyControl
                    });

                    this.oPersistencyVariantPromise = new Promise(function (resolve, reject) {
                        this.smartVariandManagement = new SmartVariantManagement({
                            personalizableControls: oOVPVariantInfo,
                            initialise: function (oEvent) {
                                var aKeys = oEvent.getParameters().variantKeys;
                                if (aKeys.length) { //the user has already a variant
                                    resolve(this.smartVariandManagement.getVariantContent(oPersistencyControl, aKeys[0]));
                                } else { //the user do not have have any variant
                                    resolve(null);
                                }
                            }.bind(this)
                        });
                        this.smartVariandManagement.initialise();
                    }.bind(this));
                } else {
                    this.oPersistencyVariantPromise = Promise.resolve();
                }
            },

            layoutChanged: function () {
                if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
                    if (this._bDashboardLayoutLrepActive) {
                        //only save changes after persistency promise has been processed!
                        this.savePersonalization();
                    }
                } else {
                    var aContent = this.getLayout().getContent();
                    this.aOrderedCards = this._getCardArrayAsVariantFormat(aContent);
                    this.savePersonalization();
                }
            },

            /**
             * As of 1708,
             * the personalization will use savePersonalization.
             */
            saveVariant: function (oEvent) {
                var that = this;
                this.smartVariandManagement.getVariantsInfo(function (aVariants) {
                    var oPersonalisationVariantKey = null;
                    if (aVariants && aVariants.length > 0) {
                        oPersonalisationVariantKey = aVariants[0].key;
                    }
                    var bOverwrite = oPersonalisationVariantKey !== null;

                    var oParams = {
                        name: "Personalisation",
                        global: false,
                        overwrite: bOverwrite,
                        key: oPersonalisationVariantKey,
                        def: true
                    };
                    that.smartVariandManagement.fireSave(oParams);
                });
            },

            /**
             * delta changes
             *
             * Personalization is saved as flexibility delta changes from 1708
             * Includes - positioning, resizing, view switches and visibility
             */
            savePersonalization: function () {
                var oLayout = this.getLayout();
                if (oLayout) {
                    var aCardsInfo, sChangeType;
                    if (oLayout.getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
                        aCardsInfo = {
                            cards: oLayout.getLayoutDataJSON()
                        };
                        sChangeType = "manageCardsForDashboardLayout";
                    } else {
                        aCardsInfo = this._getCardArrayAsVariantFormat(oLayout.getContent());
                        sChangeType = "manageCardsForEasyScanLayout";
                    }
                    /**
                     * This currently saves the complete array of cards as one change.
                     * In order to align with key user, we need to save at least visibility as individual card changes.
                     */
                    this.oFlexController.createAndApplyChange({
                        changeType: sChangeType,
                        content: aCardsInfo,
                        isUserDependent: true
                    }, oLayout);
                    this.oFlexController.saveAll();
                }
            },
            /**
             * end
             */

            getLayout: function () {
                return this.getView() ? this.getView().byId("ovpLayout") : null;
            },

            _createPersistencyControlForSmartVariantManagement: function () {
                var that = this;
                sap.ui.core.Control.extend("sap.ovp.app.PersistencyControl", {
                    metadata: {
                        properties: {
                            persistencyKey: {
                                type: "string",
                                group: "Misc",
                                defaultValue: null
                            }
                        }
                    }
                });
                var oPersistencyControl = new sap.ovp.app.PersistencyControl({
                    persistencyKey: "ovpVariant"
                });

                /**
                 * Interface function for SmartVariantManagment control, returns the current used variant data
                 *
                 * @public
                 * @returns {json} The currently set variant
                 */
                oPersistencyControl.fetchVariant = function () {
                    //in the initial loading the variant is not saved
                    if (that.isInitialLoading) {
                        that.isInitialLoading = false;
                        return {};
                    }
                    var oLayout = this.getLayout();
                    if (!oLayout) {
                        jQuery.sap.log.error("Could not save persistency variant - 'ovpLayout' does not exists");
                        return;
                    }

                    if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
                        var oVariants = this.getLayout().getLayoutDataJSON();
                        return {
                            cards: oVariants
                        };
                    } else {
                        var aLayoutContent = oLayout.getContent();
                        var aContentForSave = this._getCardArrayAsVariantFormat(aLayoutContent);
                        this.oOrderedCards = aContentForSave;
                        return {
                            cards: aContentForSave
                        };
                    }
                }.bind(this);

                return oPersistencyControl;

            },

            _initShowHideCardsButton: function () {
              // code changes based on the inputs from the FLP team - incident #1770148144
              var oRenderer = sap.ushell.Container.getRenderer("fiori2"),
              manageCardsButton = {
                controlType : "sap.ushell.ui.launchpad.ActionItem",
                bCurrentState : false,
                oControlProperties : {
                  icon: "sap-icon://dimension",
                  text: this._getLibraryResourceBundle().getText("hideCardsBtn_title"),
                  tooltip: this._getLibraryResourceBundle().getText("hideCardsBtn_tooltip"),
                  press: this._onCardMenuButtonPress.bind(this)
                },
                bIsVisible: true,
                aStates: ["app"]
              };
              oRenderer.addUserAction(manageCardsButton);
            },

            _onCardMenuButtonPress: function () {
                var oModel;

                function getCardIndexInArray(aCardsArr, cardId) {
                    for (var i = 0; i < aCardsArr.length; i++) {
                        if (aCardsArr[i].id == cardId) {
                            return i;
                        }
                    }
                    return -1;
                }

                function createOrDestroyCards(aOldContent, aNewContent) {
                    var oldIndex = -1;
                    for (var i = 0; i < aNewContent.length; i++) {
                        //In case the card position has been changed, we need to get the card index in the old array.
                        //Otherwise, the new and the old position are the same
                        if (aOldContent[i].id == aNewContent[i].id) {
                            oldIndex = i;
                        } else {
                            oldIndex = getCardIndexInArray(aOldContent, aNewContent[i].id);
                        }

                        if (aNewContent[i].visibility != aOldContent[oldIndex].visibility) {
                            if (aNewContent[i].visibility === true) {
                                var oCard = this._getCardFromManifest(aNewContent[i].id);
                                if (oCard) {
                                    this.createLoadingCard(oCard);
                                    oCard.settings.baseUrl = this._getBaseUrl();
                                    this._clearStoredEntities(); //Clear previously temporarily stored entity types
                                    this._initCardModel(oCard.model);
                                    this._loadCardComponent(oCard.template);
                                    this._createModelViewMap(oCard);
                                    if (oCard.settings.tabs) {
                                        var iIndex = 0;
                                        if (this.aOrderedCards[i].selectedKey) {
                                            iIndex = this.aOrderedCards[i].selectedKey - 1;
                                        }
                                        this.initializeTabbedCard(
                                            oCard, iIndex);
                                    }
                                    this.createCard(oCard);
                                }
                            } else {
                                var oOldComponentContainer = this.getView().byId(aNewContent[i].id);
                                var oOldCard = oOldComponentContainer.getComponentInstance();
                                if (oOldCard) {
                                    oOldCard.destroy();
                                }
                            }
                        }
                    }
                }

                function cardTitleFormatter(id) {
                    var oCard = this._getCardFromManifest(id);
                    var cardSettings = oCard.settings;
                    if (cardSettings.title) {
                        return cardSettings.title;
                    } else if (cardSettings.category) {
                        return (cardSettings.category);
                    } else if (cardSettings.subTitle) {
                        return cardSettings.subTitle;
                    }
                    return id;
                }

                var oCardsTableTemplate = new ColumnListItem({
                    cells: [
                        new Text({
                            text: {
                                path: "id",
                                formatter: cardTitleFormatter.bind(this)
                            }
                        }),
                        new Switch({
                            state: "{visibility}",
                            customTextOff: " ",
                            customTextOn: " ",
                            change: function (event) {
                                var parent = event.oSource.getParent();
                                parent.toggleStyleClass('sapOVPHideCardsTableItem');
                                parent.getCells()[0].toggleStyleClass('sapOVPHideCardsDisabledCell');
                            },
                            tooltip: this._getLibraryResourceBundle().getText("hideCards_switchTooltip")
                        })
                    ]
                });

                var oCardsTable = new Table("sapOVPHideCardsTable", {
                    backgroundDesign: sap.m.BackgroundDesign.Transparent,
                    showSeparators: sap.m.ListSeparators.Inner,
                    columns: [
                        new Column({
                            vAlign: "Middle"
                        }),
                        new Column({
                            hAlign: sap.ui.core.TextAlign.Right,
                            vAlign: "Middle",
                            width: "4.94rem"
                        })
                    ]
                });
                oCardsTable.addStyleClass('sapOVPHideCardsTable');
                oCardsTable.bindItems({
                    path: "/cards",
                    template: oCardsTableTemplate
                });

                var oOrigOnAfterRendering = oCardsTable.onAfterRendering;
                oCardsTable.onAfterRendering = function (event) {
                    oOrigOnAfterRendering.apply(oCardsTable, arguments);

                    var items = event.srcControl.mAggregations.items;
                    if (items) {
                        for (var i = 0; i < items.length; i++) {
                            if (!items[i].getCells()[1].getState()) {
                                items[i].addStyleClass('sapOVPHideCardsTableItem');
                                items[i].getCells()[0].addStyleClass('sapOVPHideCardsDisabledCell');
                            }
                        }
                    }
                    setTimeout(function () {
                        jQuery('.sapMListTblRow').first().focus();
                    }, 200);
                };

                var oSaveButton = new Button("manageCardsokBtn", {
                    text: this._getLibraryResourceBundle().getText("okBtn"),
                    press: function () {
                        var aDialogCards = this.oDialog.getModel().getProperty('/cards');
                        createOrDestroyCards.apply(this, [this.aOrderedCards, aDialogCards]);
                        this.aOrderedCards = aDialogCards;
                        this._updateDashboardLayoutCards(this.aOrderedCards);
                        this._updateLayoutWithOrderedCards();
                        this.savePersonalization();
                        this.oDialog.close();
                    }.bind(this)
                });

                var oCancelButton = new Button("manageCardsCancelBtn", {
                    text: this._getLibraryResourceBundle().getText("cancelBtn"),
                    press: function () {
                        this.oDialog.close();
                    }.bind(this)
                });

                var oResetButton = new Button("manageCardsResetBtn", {
                    text: this._getLibraryResourceBundle().getText("resetBtn"),
                    enabled: ((this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") ? true : this.isValidForReset()),
                    press: function () {
                        sap.m.MessageBox.show(this._getLibraryResourceBundle().getText("reset_cards_confirmation_msg"), {
                            id: "resetCardsConfirmation",
                            icon: sap.m.MessageBox.Icon.QUESTION,
                            title: this._getLibraryResourceBundle().getText("reset_cards_confirmation_title"),
                            actions: [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL],
                            onClose: function (oAction) {
                                if (oAction === sap.m.MessageBox.Action.OK) {
                                    createOrDestroyCards.apply(this, [this.aOrderedCards, this.aManifestOrderedCards]);
                                    this.aOrderedCards = this.aManifestOrderedCards;
                                    this._resetDashboardLayout();
                                    this._updateDashboardLayoutCards(this.aOrderedCards);
                                    this._updateLayoutWithOrderedCards();
                                    // All USER layer personalization will be discarded.
                                    this.oFlexController.discardChangesForId(this.getLayout().getId(), true);
                                    this.savePersonalization();
                                    this.oDialog.close();
                                }
                            }.bind(this)
                        });
                    }.bind(this)
                });

                this.oDialog = new Dialog({
                    title: this._getLibraryResourceBundle().getText("hideCardsBtn_title"),
                    contentWidth: "29.6rem",
                    contentHeight: "50%",
                    stretch: sap.ui.Device.system.phone,
                    content: oCardsTable,
                    buttons: [oSaveButton, oCancelButton, oResetButton],
                    afterClose: function () {
                        this.oDialog.destroy();
                    }.bind(this)
                }).addStyleClass("sapOVPCardsVisibilityDialog");
                var oDialogCardsModel;
                if (this.getLayout().getMetadata().getName() === "sap.ovp.ui.DashboardLayout") {
                    oDialogCardsModel = jQuery.extend(true, [], this._getCardArrayAsVariantFormatDashboard());
                } else {
                    oDialogCardsModel = jQuery.extend(true, [], this.aOrderedCards);
                }

                oModel = new JSONModel({
                    cards: oDialogCardsModel
                });
                this.oDialog.setModel(oModel);

                this.oDialog.open();
            },

            isValidForReset : function () {
                for (var i = 0; i < this.aManifestOrderedCards.length; i++) {
                    if (this.aManifestOrderedCards[i].id !== this.aOrderedCards[i].id || this.aManifestOrderedCards[i].visibility !== this.aOrderedCards[i].visibility) {
                        return true;
                    }
                }
                return false;
            },

            isDragAndDropEnabled: function () {
                return !sap.ui.Device.system.phone;
            },

            getGlobalFilter: function () {
                if (!this.oGlobalFilter) {
                    this.oGlobalFilter = this.getView().byId("ovpGlobalFilter");
                }
                return this.oGlobalFilter;
            },

            getUIModel: function () {
                if (!this.oUIModel) {
                    var oOwnerComponent = this.getOwnerComponent();
                    this.oUIModel = oOwnerComponent && oOwnerComponent.getModel("ui");
                }
                return this.oUIModel;
            },

            _parseNavigationVariant: function () {
                this.oNavigationHandler = this.oNavigationHandler || new NavigationHandler(this);
                this.oParseNavigationPromise = this.oNavigationHandler.parseNavigation();
                sap.ovp.cards.CommonUtils.enable(this, this.oNavigationHandler);
            },

            /*
             Applies the filters when returning/navigating to OVP from an external application or
             when the filters are passed as URL parameters
             */
            _setNavigationVariantToGlobalFilter: function (oAppData, oURLParameters, sNavType) {

                var oGlobalFilter = this.getGlobalFilter();

                if (!oGlobalFilter) {
                    return;
                }

                //Based on navigation type, process the parameters
                switch (sNavType) {

                    //iAppState triggered on back navigation
                    case "iAppState":
                        //Non Custom data handling
                        if (oAppData.selectionVariant) {

                            var oCurrentVariant, oSelectionVariant, aSelectionVariantProperties, bMarkDirty = false;
                            var oUnsavedData, oSavedData, oUnsavedDataCustom, oSavedDataCustom;
                            var oUiState, oSavedUiState, oUnsavedUiState;

                            //Clear the global filter variant
                            oGlobalFilter.clearVariantSelection();

                            //Set the original variant by reading from application data, when the variant
                            //is set, the corresponding filters and models and data suite for that variant
                            //are automatically set
                            oCurrentVariant = JSON.parse(oAppData.selectionVariant);
                            oGlobalFilter.setCurrentVariantId(oCurrentVariant.SelectionVariantID);

                            //Get the data suite for the original variant, this was saved data of variant
                            oSavedUiState = oGlobalFilter.getUiState({
                                allFilters: false
                            });
                            oSavedData = oSavedUiState && JSON.stringify(oSavedUiState.getSelectionVariant());	//SAVED

                            //Get the custom data for the original variant, this was saved data of variant
                            oSavedDataCustom = oGlobalFilter.getFilterData()._CUSTOM;	//SAVED CUSTOM

                            oSavedDataCustom = ((typeof oSavedDataCustom == 'undefined') ? {} : oSavedDataCustom);

                            //Set the data suite again from app data so as to apply any unsaved changes
                            //to the variant
                            oUiState = new UIState({
                                selectionVariant: oAppData.oSelectionVariant.toJSONObject()
                            });
                            oGlobalFilter.setUiState(oUiState, {
                                replace: true,
                                strictMode: false
                            });

                            //Get the selection properties from the app data to be put in the filter bar
                            oSelectionVariant = new SelectionVariant(oAppData.selectionVariant);
                            aSelectionVariantProperties = oSelectionVariant.getParameterNames().concat(oSelectionVariant.getSelectOptionsPropertyNames());
                            for (var i = 0; i < aSelectionVariantProperties.length; i++) {
                                oGlobalFilter.addFieldToAdvancedArea(aSelectionVariantProperties[i]);
                            }

                            // getting unsaved data after additional filters have been added in the above loop
                            oUnsavedUiState = oGlobalFilter.getUiState({
                                allFilters: false
                            });
                            oUnsavedData = oUnsavedUiState && JSON.stringify(oUnsavedUiState.getSelectionVariant());	//UNSAVED

                            //Compare saved and unsaved data and mark the filter dirty accordingly
                            if (oSavedData !== oUnsavedData) {
                                bMarkDirty = true;
                            }

                            //Custom Data Handling
                            if (oAppData.customData && Object.keys(oAppData.customData).length > 0) {

                                var oUnsavedDataCustom = oAppData.customData;	//UNSAVED CUSTOM
                                this.restoreCustomAppStateDataExtension(oUnsavedDataCustom);

                                //Compare saved and unsaved for custom filters and mark the filter dirty accordingly
                                if (JSON.stringify(oSavedDataCustom) !== JSON.stringify(oUnsavedDataCustom)) {
                                    bMarkDirty = true;
                                }

                            }

                            oGlobalFilter.getSmartVariant().currentVariantSetModified(bMarkDirty);

                            //Though there are several public methods to update filter count, but to avoid any
                            //unnecessary processing, we are doing it directly
                            oGlobalFilter._updateToolbarText();
                        }
                        break; //from switch case

                    case "xAppState":
                    case "URLParams":

                        //oAppData.oSelectionVariant contains the navigation selection variant
                        //oAppData.selectionVariant is just the string of oAppData.oSelectionVariant
                        //oAppData.oDefaultedSelectionVariant contains default selection variant, that comes
                        //from FLP user settings

                        /****** START OF RULES (how variants will be applied) ****************************************
                         *
                         *  1.  If there is a navigation variant present (oAppData.bNavSelVarHasDefaultsOnly = FALSE),
                         *      then clear the global filter completely (including variant selection) ignoring all other
                         *      incoming variants and defaults                         *
                         *  2.  If (oAppData.bNavSelVarHasDefaultsOnly = TRUE), this means oAppData will contains only
                         *      FLP user settings defaults, then following rules apply:
                         *
                         *      a. Global Filter initialized with user default variant, then ignore all others
                         *      b. Global Filter initialized with standard variant, then Load oAppData.oDefaultedSelectionVariant
                         *
                         * For case 2->b, Global Filter initialized with standard variant can contain default values
                         * coming from metadata, in that case merge those already present default values with
                         * oAppData.oDefaultedSelectionVariant
                         *
                         * Display Currency parameter will get special attention : If after RULE 2a is
                         * executed and display currency parameter in filter bar remains empty, then populate display
                         * currency by first looking into oAppData.oDefaultedSelectionVariant and if not found, then
                         * from default metadata values
                         *
                         ******* END OF RULES ************************************************************************/

                        var oUiState, aSelVarProperties = [];

                        var oNavigationVariant = new SelectionVariant(oAppData.oSelectionVariant.toJSONObject());
                        var oDefaultVariant = new SelectionVariant(oAppData.oDefaultedSelectionVariant.toJSONObject());

                        //RULE 1 (Check table comment above)
                        if (!oAppData.bNavSelVarHasDefaultsOnly && !oNavigationVariant.isEmpty()) {
                            oUiState = new UIState({
                                selectionVariant: oNavigationVariant.toJSONObject()
                            });
                            //Reset existing filter bar completely
                            oGlobalFilter.clearVariantSelection();
                            oGlobalFilter.clear();
                            oGlobalFilter.setUiState(oUiState, {
                                replace: true,
                                strictMode: false
                            });
                            aSelVarProperties = aSelVarProperties.concat(oNavigationVariant.getParameterNames()
                                .concat(oNavigationVariant.getSelectOptionsPropertyNames()));
                        }

                        //RULE 2 (Check table comment above)
                        if (oAppData.bNavSelVarHasDefaultsOnly && !oDefaultVariant.isEmpty() && oGlobalFilter.getCurrentVariantId() === "") {
                            oUiState = new UIState({
                                selectionVariant: oDefaultVariant.toJSONObject()
                            });
                            //replace false means do not reset existing filter bar
                            oGlobalFilter.setUiState(oUiState, {
                                replace: false,
                                strictMode: false
                            });
                            aSelVarProperties = aSelVarProperties.concat(oDefaultVariant.getParameterNames()
                                .concat(oDefaultVariant.getSelectOptionsPropertyNames()));
                        }

                        var iLength;
                        if (aSelVarProperties && aSelVarProperties.length > 0) {
                            //Add field to visible filter bar
                            iLength = aSelVarProperties.length;
                            while (iLength--) {
                                oGlobalFilter.addFieldToAdvancedArea(aSelVarProperties[iLength]);
                            }
                        }
                        //Set DisplayCurrency Parameter if left empty for user variant (after RULE 2a)
                        if (oGlobalFilter.getCurrentVariantId() !== "") {
                            this._setDisplayCurrency(oDefaultVariant);
                        }
                        break; //from switch case
                }
            },

            /**
             * This function checks if DisplayCurrency parameter is left empty
             * If yes, it tries to set it first from user default settings then
             * from metadata defaults
             * @param oDefaultVariant
             * @private
             */
            _setDisplayCurrency: function (oDefaultVariant) {

                var oGlobalFilter = this.getGlobalFilter();
                if (!oGlobalFilter) {
                    return;
                }
                //Check if any analytical parameter present with name DisplayCurrency
                var iLength, oDisplayCurrency;
                var aParameters = oGlobalFilter.getAnalyticalParameters();
                if (aParameters && aParameters.length > 0) {
                    iLength = aParameters.length;
                    while (iLength--) {
                        if ((aParameters[iLength].name === "P_DisplayCurrency") || (aParameters[iLength].name === "DisplayCurrency")) {
                            oDisplayCurrency = aParameters[iLength];
                            break;
                        }
                    }
                }
                //There is no parameter for DisplayCurrency in filter bar
                if (!oDisplayCurrency) {
                    return;
                }
                //If DisplayCurrency present and already filled with value, then do nothing
                //oDisplayCurrency.fieldName looks like $Parameter.P_DisplayCurrency
                var aFilters = oGlobalFilter.getFilters([oDisplayCurrency.fieldName]);
                var sDefaultValue = aFilters && aFilters[0] && aFilters[0].oValue1;
                if (sDefaultValue && sDefaultValue !== " ") {
                    return;
                }
                //Read user settings defaults and try to populate DisplayCurrency Parameter
                //oDefaultVariant can contain the parameter value in SelectOption section as well, this
                //implementation is from navigation handler
                var sNameWithoutPrefix, sNameWithPrefix;
                if (oDisplayCurrency.name.indexOf("P_") === 0) {
                    sNameWithPrefix = oDisplayCurrency.name;
                    sNameWithoutPrefix = oDisplayCurrency.name.substr(2); // remove P_ prefix
                } else {
                    sNameWithPrefix = "P_" + oDisplayCurrency.name;
                    sNameWithoutPrefix = oDisplayCurrency.name;
                }
                if (oDefaultVariant && !oDefaultVariant.isEmpty()) {
                    var oSelectOption;
                    sDefaultValue = oDefaultVariant.getParameter(sNameWithoutPrefix);
                    if (!sDefaultValue || sDefaultValue === " ") {
                        sDefaultValue = oDefaultVariant.getParameter(sNameWithPrefix);
                    }
                    if (!sDefaultValue || sDefaultValue === " ") {
                        oSelectOption = oDefaultVariant.getSelectOption(sNameWithoutPrefix);
                        sDefaultValue = oSelectOption && oSelectOption[0] && oSelectOption[0].Low;
                    }
                    if (!sDefaultValue || sDefaultValue === " ") {
                        oSelectOption = oDefaultVariant.getSelectOption(sNameWithPrefix);
                        sDefaultValue = oSelectOption && oSelectOption[0] && oSelectOption[0].Low;
                    }
                }
                if (!sDefaultValue || sDefaultValue === " ") {
                    sDefaultValue = oDisplayCurrency.defaultPropertyValue; //metadata default
                }
                if (!sDefaultValue || sDefaultValue === " ") {
                    return; //not found at last
                }

                var oSelectionVariant = new SelectionVariant();
                oSelectionVariant.addParameter(oDisplayCurrency.name, sDefaultValue);
                var oUiState = new UIState({
                    selectionVariant: oSelectionVariant.toJSONObject()
                });
                //replace false means do not reset existing filter bar
                //There always be a match found for parameter in filter bar so this will be applied to parameter only
                oGlobalFilter.setUiState(oUiState, {
                    replace: false,
                    strictMode: false
                });
            },

            /**
             * This function takes a variant and modifies the parameters
             * using the new name
             * @param oVariant
             * @param sOldName
             * @param sNewName
             * @returns {object}
             * @private
             */
            _enhanceVariant: function (oVariant, sOldName, sNewName) {

                var oParameter = oVariant.getParameter(sOldName);
                var oSelectOption = oVariant.getSelectOption(sOldName);

                //If parameter is found in variant, then rename it to new name
                //Else check if a select option is found, then rename it and
                //then move from select-option section to parameter section

                if (oParameter) {
                    oVariant.renameParameter(sOldName, sNewName);

                } else if (oSelectOption) {

                    var sValue = oSelectOption[0] && oSelectOption[0].Low;
                    if (sValue && sValue !== "") {
                        sValue += ""; //Convert any type to string
                        oVariant.addParameter(sNewName, sValue);
                        oVariant.removeSelectOption(sOldName);
                    }
                }

                //Return is not required since objects are passed by reference but
                //here object is returned to support method chaining
                return oVariant;
            },

            /**
             * Event handler before variant is saved
             */
            onBeforeSFBVariantSave: function () {

                var oCustomData = {};

                this.getCustomAppStateDataExtension(oCustomData);

                //Before variant is saved, store the custom filter data
                this.getGlobalFilter().setFilterData({
                    _CUSTOM: oCustomData
                });
            },

            /**
             * Event handler after variant is loaded
             */
            onAfterSFBVariantLoad: function () {

                var oData = this.getGlobalFilter().getFilterData();

                if (oData._CUSTOM && Object.keys(oData._CUSTOM).length > 0) {
                    this.restoreCustomAppStateDataExtension(oData._CUSTOM);
                }
            },

            /**
             * Event handler to change the snapped header text when the filters change
             * @param oEvent
             */
            onAssignedFiltersChanged: function (oEvent) {
                if (oEvent.getSource() && this.getView().byId("ovpFilterText")) {
                    this.getView().byId("ovpFilterText").setText(oEvent.getSource().retrieveFiltersWithValuesAsText());
                }
            },

            /**
             * Gets current app state
             * @returns {object}
             * @private
             */
            _getCurrentAppState: function () {

                var oGlobalFilter = this.getGlobalFilter();
                var oUiState = oGlobalFilter.getUiState({
                    allFilters: false
                });
                var oSelectionVariant = oUiState && oUiState.getSelectionVariant();

                //Do not store dirty variants, reset them
                if (oGlobalFilter.getSmartVariant().currentVariantGetModified()) {
                    oSelectionVariant.SelectionVariantID = "";
                }
                var sSelectionVariant = oSelectionVariant && JSON.stringify(oSelectionVariant);

                //Get data from standard filters
                var oNavigableSelectionVariant = new SelectionVariant(sSelectionVariant);
                //Get data from custom filters
                var oCustomData = {};
                this.getCustomAppStateDataExtension(oCustomData);

                return {
                    selectionVariant: oNavigableSelectionVariant.toJSONString(),
                    customData: oCustomData
                };
            },

            /**
             * Create an app state key using app state data and update url with iAppstate
             * @private
             */
            _storeCurrentAppStateAndAdjustURL: function (oEvent) {

                //Initially this.oAppStatePromise is not set, it is set only when a new promise is created
                //on global filter search, however, as soon as the promise is resolved/rejected, this.oAppStatePromise
                //is nullified
                //So, if this.oAppStatePromise exists means that the previous promise is still pending. In
                //such case, reject the previous promise as we will create a new one for new global filter
                //search

                if (oEvent && !oEvent.oSource._bDirtyViaDialog) {
                    return;
                }

                if (!this.bGlobalFilterLoaded) {
                    return;
                }

                if (this.oAppStatePromise) {
                    //Parameter "skip" to denote that rejection as part of process and not
                    //because of actual error
                    this.rejectPreviousPromise && this.rejectPreviousPromise("skip");
                }

                this.oAppStatePromise = new Promise(function (resolve, reject) {
                    this.rejectPreviousPromise = reject;
                    var oAppInnerData = this._getCurrentAppState();
                    var oCurrentAppState = this.oNavigationHandler.storeInnerAppStateWithImmediateReturn(oAppInnerData);

                    //oCurrentAppState contains a promise object that resolves when appstate is created successfully
                    oCurrentAppState.promise.then(function (sAppStateKey) {
                        resolve(sAppStateKey);
                    }, function (sError) {
                        reject(sError.getErrorCode());
                    });
                }.bind(this));

                //Success handler for this.oAppStatePromise
                var fnFulfilled = function (sAppStateKey) {
                    this.oAppStatePromise = null; //Nullified so that we can find out later that this is not pending
                    if (sAppStateKey && sAppStateKey.length > 0) {
                        this.oNavigationHandler.replaceHash(sAppStateKey);
                        return;
                    }
                    throw "AppState key is empty";
                }

                //Failure handler for this.oAppStatePromise
                var fnRejected = function (sError) {
                    this.oAppStatePromise = null;
                    if (sError === "skip") {
                        throw sError; //"skip" means not actual error
                    }
                    throw ("Something went wrong while storing AppState - " + sError);
                }

                //this.oAppStatePromise.then itself returns a promise, any return from fnFulfilled or fnRejected
                //is propagated accordingly
                //catch is used just to process promise failure (promise success is not required)
                this.oAppStatePromise
                    .then(fnFulfilled.bind(this), fnRejected.bind(this))
                    //catch statement may be triggered even if there is failure in fnFulfilled
                    .catch(function (sError) {
                        if (sError === "skip") {
                            return; //"skip" means not actual error
                        }
                        jQuery.sap.log.error(sError);
                    });
            }
        });
    }
);

}; // end of sap/ovp/app/Main.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.analytical.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.analytical.Component");
	
	
	sap.ovp.cards.generic.Component.extend("sap.ovp.cards.charts.analytical.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"headerExtensionFragment":{
					"type": "string",
					"defaultValue": "sap.ovp.cards.generic.KPIHeader"
				},
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.analytical.analyticalChart"
				}
			},

			version: "1.50.4",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.viz" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.analytical.analyticalChart"
					}
				}
			}
		},

		onAfterRendering: function() {
			jQuery(".tabindex0").attr("tabindex", 0);
			jQuery(".tabindex-1").attr("tabindex", -1);
		}
	});
})();

}; // end of sap/ovp/cards/charts/analytical/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.generic.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.generic.Component");
	
	
	
	sap.ovp.cards.generic.Component.extend("sap.ovp.cards.charts.generic.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"headerExtensionFragment":{
					"type": "string",
					"defaultValue": "sap.ovp.cards.generic.KPIHeader"
				},
				"selectionAnnotationPath":{
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.SelectionVariant"
				},
				"chartAnnotationPath":{
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.Chart"
				},
				"presentationAnnotationPath":{
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.PresentationVariant"
				},
				"identificationAnnotationPath":{
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.Identification"
				},
				"dataPointAnnotationPath":{
					"type": "string",
					"defaultValue": "com.sap.vocabularies.UI.v1.DataPoint"
				}
			},

			version: "1.50.4",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [],
				components: []
			},
			config: {}
		},

		addTabindex: function() {
			jQuery(".tabindex0").attr("tabindex", 0);
			jQuery(".tabindex-1").attr("tabindex", -1);
		},

		onAfterRendering: function() {
			this.addTabindex();
		}
	});
})();

}; // end of sap/ovp/cards/charts/generic/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.line.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.line.Component");
	
	sap.ovp.cards.charts.generic.Component.extend("sap.ovp.cards.charts.line.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.line.LineChart"
				}
			},

			version: "1.50.4",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.viz" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.line.LineChart"
					}
				}
			}
		}
	});
})();

}; // end of sap/ovp/cards/charts/line/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.custom.Component') ) {
(function() {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.custom.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.custom.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string"
                },
                "headerExtensionFragment": {
                    "type": "string"
                },
                "contentPosition": {
                    "type": "string",
                    "defaultValue": "Middle"
                },
                "footerFragment": {
                    "type": "string"
                },
                "identificationAnnotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.Identification"
                },
                "selectionAnnotationPath": {
                    "type": "string"
                },
                "filters": {
                    "type": "object"
                },
                "addODataSelect": {
                    "type": "boolean",
                    "defaultValue": false
                }
            },
            version: "1.50.4",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [],
                components: []
            },
            config: {}
        }
    });
})();

}; // end of sap/ovp/cards/custom/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.bubble.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.bubble.Component");
	
	sap.ovp.cards.charts.generic.Component.extend("sap.ovp.cards.charts.bubble.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.bubble.BubbleChart"
				}
			},

			version: "1.50.4",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.viz" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.bubble.BubbleChart"
					}
				}
			}
		}
	});
})();

}; // end of sap/ovp/cards/charts/bubble/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.donut.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.donut.Component");
	
	sap.ovp.cards.charts.generic.Component.extend("sap.ovp.cards.charts.donut.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.donut.DonutChart"
				}
			},

			version: "1.50.4",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.viz" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.donut.DonutChart"
					}
				}
			}
		}
	});
})();

}; // end of sap/ovp/cards/charts/donut/Component.js
